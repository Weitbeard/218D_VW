

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec  2 14:52:45 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	smallconst
    68  000300                     __psmallconst:
    69                           	opt stack 0
    70  000300  00                 	db	0
    71  000301                     _BitNum2SetMask:
    72                           	opt stack 0
    73  000301  0001               	dw	1
    74  000303  0002               	dw	2
    75  000305  0004               	dw	4
    76  000307  0008               	dw	8
    77  000309  0010               	dw	16
    78  00030B  0020               	dw	32
    79  00030D  0040               	dw	64
    80  00030F  0080               	dw	128
    81  000311  0100               	dw	256
    82  000313  0200               	dw	512
    83  000315  0400               	dw	1024
    84  000317  0800               	dw	2048
    85  000319  1000               	dw	4096
    86  00031B  2000               	dw	8192
    87  00031D  4000               	dw	16384
    88  00031F  8000               	dw	32768
    89  000321                     __end_of_BitNum2SetMask:
    90                           	opt stack 0
    91  000321                     _Timer2PostFunc:
    92                           	opt stack 0
    93  000321  28                 	db	low _PostAnalogService
    94  000322  15                 	db	high _PostAnalogService
    95  000323  12                 	db	low _PostButtonDebounceSM
    96  000324  15                 	db	high _PostButtonDebounceSM
    97  000325  00                 	db	0
    98  000326  00                 	db	0
    99  000327  00                 	db	0
   100  000328  00                 	db	0
   101  000329  00                 	db	0
   102  00032A  00                 	db	0
   103  00032B  00                 	db	0
   104  00032C  00                 	db	0
   105  00032D  00                 	db	0
   106  00032E  00                 	db	0
   107  00032F  00                 	db	0
   108  000330  00                 	db	0
   109  000331  00                 	db	0
   110  000332  00                 	db	0
   111  000333  00                 	db	0
   112  000334  00                 	db	0
   113  000335  00                 	db	0
   114  000336  00                 	db	0
   115  000337  00                 	db	0
   116  000338  00                 	db	0
   117  000339  00                 	db	0
   118  00033A  00                 	db	0
   119  00033B  00                 	db	0
   120  00033C  00                 	db	0
   121  00033D  00                 	db	0
   122  00033E  00                 	db	0
   123  00033F  00                 	db	0
   124  000340  00                 	db	0
   125  000341                     __end_of_Timer2PostFunc:
   126                           	opt stack 0
   127  000341                     _Nybble2MSBitNum:
   128                           	opt stack 0
   129  000341  00                 	db	0
   130  000342  01                 	db	1
   131  000343  01                 	db	1
   132  000344  02                 	db	2
   133  000345  02                 	db	2
   134  000346  02                 	db	2
   135  000347  02                 	db	2
   136  000348  03                 	db	3
   137  000349  03                 	db	3
   138  00034A  03                 	db	3
   139  00034B  03                 	db	3
   140  00034C  03                 	db	3
   141  00034D  03                 	db	3
   142  00034E  03                 	db	3
   143  00034F  03                 	db	3
   144  000350                     __end_of_Nybble2MSBitNum:
   145                           	opt stack 0
   146  000350                     _ServDescList:
   147                           	opt stack 0
   148  000350  F0                 	db	low _InitCan_XmitService
   149  000351  13                 	db	high _InitCan_XmitService
   150  000352  C6                 	db	low _RunCan_XmitService
   151  000353  08                 	db	high _RunCan_XmitService
   152  000354  20                 	db	low _InitializeButtonDebounce
   153  000355  14                 	db	high _InitializeButtonDebounce
   154  000356  66                 	db	low _RunButtonDebounceSM
   155  000357  0C                 	db	high _RunButtonDebounceSM
   156  000358  C0                 	db	low _InitAnalogService
   157  000359  13                 	db	high _InitAnalogService
   158  00035A  3C                 	db	low _RunAnalogService
   159  00035B  12                 	db	high _RunAnalogService
   160  00035C                     __end_of_ServDescList:
   161                           	opt stack 0
   162  00035C                     _EventQueues:
   163                           	opt stack 0
   164  00035C  95                 	db	low _Queue0
   165  00035D  00                 	db	high _Queue0
   166  00035E  04                 	db	4
   167  00035F  A1                 	db	low _Queue1
   168  000360  00                 	db	high _Queue1
   169  000361  04                 	db	4
   170  000362  AD                 	db	low _Queue2
   171  000363  00                 	db	high _Queue2
   172  000364  04                 	db	4
   173  000365                     __end_of_EventQueues:
   174                           	opt stack 0
   175  000365                     _ES_EventList:
   176                           	opt stack 0
   177  000365  96                 	db	low _Check4Keystroke
   178  000366  15                 	db	high _Check4Keystroke
   179  000367  68                 	db	low _CheckButtonEvents
   180  000368  11                 	db	high _CheckButtonEvents
   181  000369                     __end_of_ES_EventList:
   182                           	opt stack 0
   183  000369                     _DistList00:
   184                           	opt stack 0
   185  000369  3E                 	db	low _PostCan_XmitService
   186  00036A  15                 	db	high _PostCan_XmitService
   187  00036B                     __end_of_DistList00:
   188                           	opt stack 0
   189  0000                     _RXF0EIDH	set	3842
   190  0000                     _RXF0EIDL	set	3843
   191  0000                     _RXF0SIDH	set	3840
   192  0000                     _RXF0SIDL	set	3841
   193  0000                     _RXM0EIDH	set	3866
   194  0000                     _RXM0EIDL	set	3867
   195  0000                     _RXM0SIDH	set	3864
   196  0000                     _RXM0SIDL	set	3865
   197  0000                     _TXB0CONbits	set	3904
   198  0000                     _TXB0D0	set	3910
   199  0000                     _TXB0D1	set	3911
   200  0000                     _TXB0D2	set	3912
   201  0000                     _TXB0D3	set	3913
   202  0000                     _TXB0D4	set	3914
   203  0000                     _TXB0DLC	set	3909
   204  0000                     _TXB0EIDH	set	3907
   205  0000                     _TXB0EIDL	set	3908
   206  0000                     _TXB0SIDH	set	3905
   207  0000                     _TXB0SIDL	set	3906
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON1bits	set	4033
   211  0000                     _ADCON2bits	set	4032
   212  0000                     _ADRESH	set	4036
   213  0000                     _ADRESL	set	4035
   214  0000                     _BRGCON1bits	set	3952
   215  0000                     _BRGCON2bits	set	3953
   216  0000                     _BRGCON3bits	set	3954
   217  0000                     _CANCON	set	3951
   218  0000                     _CANSTATbits	set	3950
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCPR1H	set	4031
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CIOCON	set	3955
   223  0000                     _ECANCON	set	3959
   224  0000                     _INTCON	set	4082
   225  0000                     _LATA	set	3977
   226  0000                     _LATB	set	3978
   227  0000                     _LATC	set	3979
   228  0000                     _PIE1	set	3997
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTB	set	3969
   231  0000                     _PORTC	set	3970
   232  0000                     _RXB0CONbits	set	3936
   233  0000                     _T1CON	set	4045
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISAbits	set	3986
   236  0000                     _TRISBbits	set	3987
   237  0000                     _ADIE	set	31982
   238  0000                     _ADIF	set	31990
   239  0000                     _CCP1IF	set	31986
   240  0000                     _ERRIE	set	32029
   241  0000                     _ERRIF	set	32037
   242  0000                     _GIE	set	32663
   243  0000                     _IRCF0	set	32412
   244  0000                     _IRCF1	set	32413
   245  0000                     _IRCF2	set	32414
   246  0000                     _IRXIE	set	32031
   247  0000                     _IRXIF	set	32039
   248  0000                     _LATA2	set	31818
   249  0000                     _LATA3	set	31819
   250  0000                     _LATA4	set	31820
   251  0000                     _LATA5	set	31821
   252  0000                     _PEIE	set	32662
   253  0000                     _RXB0IE	set	32024
   254  0000                     _RXB0IF	set	32032
   255  0000                     _SCS1	set	32409
   256  0000                     _TXB0IE	set	32026
   257  0000                     _TXB0IF	set	32034
   258  00036B                     STR_1:
   259  00036B  46                 	db	70	;'F'
   260  00036C  61                 	db	97	;'a'
   261  00036D  69                 	db	105	;'i'
   262  00036E  6C                 	db	108	;'l'
   263  00036F  65                 	db	101	;'e'
   264  000370  64                 	db	100	;'d'
   265  000371  20                 	db	32
   266  000372  6F                 	db	111	;'o'
   267  000373  6E                 	db	110	;'n'
   268  000374  20                 	db	32
   269  000375  61                 	db	97	;'a'
   270  000376  74                 	db	116	;'t'
   271  000377  74                 	db	116	;'t'
   272  000378  65                 	db	101	;'e'
   273  000379  6D                 	db	109	;'m'
   274  00037A  70                 	db	112	;'p'
   275  00037B  74                 	db	116	;'t'
   276  00037C  20                 	db	32
   277  00037D  74                 	db	116	;'t'
   278  00037E  6F                 	db	111	;'o'
   279  00037F  20                 	db	32
   280  000380  50                 	db	80	;'P'
   281  000381  6F                 	db	111	;'o'
   282  000382  73                 	db	115	;'s'
   283  000383  74                 	db	116	;'t'
   284  000384  0A                 	db	10
   285  000385  00                 	db	0
   286  000386                     STR_2:
   287  000386  46                 	db	70	;'F'
   288  000387  61                 	db	97	;'a'
   289  000388  69                 	db	105	;'i'
   290  000389  6C                 	db	108	;'l'
   291  00038A  65                 	db	101	;'e'
   292  00038B  64                 	db	100	;'d'
   293  00038C  20                 	db	32
   294  00038D  6F                 	db	111	;'o'
   295  00038E  6E                 	db	110	;'n'
   296  00038F  20                 	db	32
   297  000390  4E                 	db	78	;'N'
   298  000391  55                 	db	85	;'U'
   299  000392  4C                 	db	76	;'L'
   300  000393  4C                 	db	76	;'L'
   301  000394  20                 	db	32
   302  000395  70                 	db	112	;'p'
   303  000396  6F                 	db	111	;'o'
   304  000397  69                 	db	105	;'i'
   305  000398  6E                 	db	110	;'n'
   306  000399  74                 	db	116	;'t'
   307  00039A  65                 	db	101	;'e'
   308  00039B  72                 	db	114	;'r'
   309  00039C  0A                 	db	10
   310  00039D  00                 	db	0
   311  00039E                     STR_3:
   312  00039E  46                 	db	70	;'F'
   313  00039F  61                 	db	97	;'a'
   314  0003A0  69                 	db	105	;'i'
   315  0003A1  6C                 	db	108	;'l'
   316  0003A2  65                 	db	101	;'e'
   317  0003A3  64                 	db	100	;'d'
   318  0003A4  20                 	db	32
   319  0003A5  49                 	db	73	;'I'
   320  0003A6  6E                 	db	110	;'n'
   321  0003A7  69                 	db	105	;'i'
   322  0003A8  74                 	db	116	;'t'
   323  0003A9  69                 	db	105	;'i'
   324  0003AA  61                 	db	97	;'a'
   325  0003AB  6C                 	db	108	;'l'
   326  0003AC  69                 	db	105	;'i'
   327  0003AD  7A                 	db	122	;'z'
   328  0003AE  61                 	db	97	;'a'
   329  0003AF  74                 	db	116	;'t'
   330  0003B0  69                 	db	105	;'i'
   331  0003B1  6F                 	db	111	;'o'
   332  0003B2  6E                 	db	110	;'n'
   333  0003B3  0A                 	db	10
   334  0003B4  00                 	db	0
   335  0003B5                     STR_4:
   336  0003B5  4F                 	db	79	;'O'
   337  0003B6  74                 	db	116	;'t'
   338  0003B7  68                 	db	104	;'h'
   339  0003B8  65                 	db	101	;'e'
   340  0003B9  72                 	db	114	;'r'
   341  0003BA  20                 	db	32
   342  0003BB  46                 	db	70	;'F'
   343  0003BC  61                 	db	97	;'a'
   344  0003BD  69                 	db	105	;'i'
   345  0003BE  6C                 	db	108	;'l'
   346  0003BF  75                 	db	117	;'u'
   347  0003C0  72                 	db	114	;'r'
   348  0003C1  65                 	db	101	;'e'
   349  0003C2  0A                 	db	10
   350  0003C3  00                 	db	0
   351                           
   352                           ; #config settings
   353  0003C4  00                 	db	0	; dummy byte at the end
   354  0000                     
   355                           	psect	cinit
   356  001478                     __pcinit:
   357                           	opt stack 0
   358  001478                     start_initialization:
   359                           	opt stack 0
   360  001478                     __initialization:
   361                           	opt stack 0
   362                           
   363                           ; Clear objects allocated to BANK0 (92 bytes)
   364  001478  EE00  F060         	lfsr	0,__pbssBANK0
   365  00147C  0E5C               	movlw	92
   366  00147E                     clear_0:
   367  00147E  6AEE               	clrf	postinc0,c
   368  001480  06E8               	decf	wreg,f,c
   369  001482  E1FD               	bnz	clear_0
   370                           
   371                           ; Clear objects allocated to COMRAM (8 bytes)
   372  001484  EE00  F036         	lfsr	0,__pbssCOMRAM
   373  001488  0E08               	movlw	8
   374  00148A                     clear_1:
   375  00148A  6AEE               	clrf	postinc0,c
   376  00148C  06E8               	decf	wreg,f,c
   377  00148E  E1FD               	bnz	clear_1
   378  001490                     end_of_initialization:
   379                           	opt stack 0
   380  001490                     __end_of__initialization:
   381                           	opt stack 0
   382  001490  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   383  001492  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   384  001494  0E00               	movlw	low (__Lmediumconst shr (0+16))
   385  001496  6EF8               	movwf	tblptru,c
   386  001498  0100               	movlb	0
   387  00149A  EF80  F006         	goto	_main	;jump to C main() function
   388                           tblptru	equ	0xFF8
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           
   392                           	psect	bssCOMRAM
   393  000036                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000036                     ISR@LastTime:
   396                           	opt stack 0
   397  000036                     	ds	2
   398  000038                     ISR@NextTime:
   399                           	opt stack 0
   400  000038                     	ds	2
   401  00003A                     _SysTickCounter:
   402                           	opt stack 0
   403  00003A                     	ds	2
   404  00003C                     __PRIMASK_temp:
   405                           	opt stack 0
   406  00003C                     	ds	2
   407                           tblptru	equ	0xFF8
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt stack 0
   414  000060                     _TMR_TimerArray:
   415                           	opt stack 0
   416  000060                     	ds	32
   417  000080                     ES_Timer_Tick_Resp@NewEvent:
   418                           	opt stack 0
   419  000080                     	ds	3
   420  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   421                           	opt stack 0
   422  000083                     	ds	2
   423  000085                     _Brightness:
   424                           	opt stack 0
   425  000085                     	ds	2
   426  000087                     _Location:
   427                           	opt stack 0
   428  000087                     	ds	2
   429  000089                     _Ready:
   430                           	opt stack 0
   431  000089                     	ds	2
   432  00008B                     _TMR_ActiveFlags:
   433                           	opt stack 0
   434  00008B                     	ds	2
   435  00008D                     Analog_Service@MyPriority:
   436                           	opt stack 0
   437  00008D                     	ds	1
   438  00008E                     Can_XmitService@MyPriority:
   439                           	opt stack 0
   440  00008E                     	ds	1
   441  00008F                     ES_Timer_Tick_Resp@NextTimer2Process:
   442                           	opt stack 0
   443  00008F                     	ds	1
   444  000090                     _CurrentState:
   445                           	opt stack 0
   446  000090                     	ds	1
   447  000091                     _LastButtonState:
   448                           	opt stack 0
   449  000091                     	ds	1
   450  000092                     _LastData:
   451                           	opt stack 0
   452  000092                     	ds	1
   453  000093                     _MyPriority:
   454                           	opt stack 0
   455  000093                     	ds	1
   456  000094                     _TickCount:
   457                           	opt stack 0
   458  000094                     	ds	1
   459  000095                     _Queue0:
   460                           	opt stack 0
   461  000095                     	ds	12
   462  0000A1                     _Queue1:
   463                           	opt stack 0
   464  0000A1                     	ds	12
   465  0000AD                     _Queue2:
   466                           	opt stack 0
   467  0000AD                     	ds	12
   468  0000B9                     ES_Run@ThisEvent:
   469                           	opt stack 0
   470  0000B9                     	ds	3
   471                           tblptru	equ	0xFF8
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           
   475                           	psect	cstackBANK0
   476  0000BC                     __pcstackBANK0:
   477                           	opt stack 0
   478  0000BC                     ?_printf:
   479                           	opt stack 0
   480  0000BC                     ?_GetBrightness:
   481                           	opt stack 0
   482  0000BC                     ?_GetLocation:
   483                           	opt stack 0
   484  0000BC                     ?___awmod:
   485                           	opt stack 0
   486  0000BC                     ___lbmod@divisor:
   487                           	opt stack 0
   488  0000BC                     ES_GetMSBitSet@Val2Check:
   489                           	opt stack 0
   490  0000BC                     __HW_Timer_Init@Rate:
   491                           	opt stack 0
   492  0000BC                     ES_InitQueue@pBlock:
   493                           	opt stack 0
   494  0000BC                     ES_Timer_InitTimer@NewTime:
   495                           	opt stack 0
   496  0000BC                     printf@f:
   497                           	opt stack 0
   498  0000BC                     ___awmod@dividend:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x0
   502  0000BC                     	ds	1
   503  0000BD                     ___lbmod@dividend:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x1
   507  0000BD                     	ds	1
   508  0000BE                     ??_ES_Timer_InitTimer:
   509  0000BE                     ??_ES_GetMSBitSet:
   510  0000BE                     ES_InitQueue@BlockSize:
   511                           	opt stack 0
   512  0000BE                     XmitData@DataByte:
   513                           	opt stack 0
   514  0000BE                     ___lbmod@counter:
   515                           	opt stack 0
   516  0000BE                     ES_Timer_Init@Rate:
   517                           	opt stack 0
   518  0000BE                     printf@ap:
   519                           	opt stack 0
   520  0000BE                     ___awmod@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x2
   524  0000BE                     	ds	1
   525  0000BF                     ___lbmod@rem:
   526                           	opt stack 0
   527  0000BF                     ES_InitQueue@pThisQueue:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x3
   531  0000BF                     	ds	1
   532  0000C0                     ES_Timer_InitTimer@Num:
   533                           	opt stack 0
   534  0000C0                     printf@c:
   535                           	opt stack 0
   536  0000C0                     ___awmod@counter:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x4
   540  0000C0                     	ds	1
   541  0000C1                     InitializeButtonDebounce@Priority:
   542                           	opt stack 0
   543  0000C1                     ___awmod@sign:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x5
   547  0000C1                     	ds	1
   548  0000C2                     ?___wmul:
   549                           	opt stack 0
   550  0000C2                     ___wmul@multiplier:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x6
   554  0000C2                     	ds	1
   555  0000C3                     ES_GetMSBitSet@ReturnVal:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x7
   559  0000C3                     	ds	1
   560  0000C4                     ES_GetMSBitSet@Nybble2Test:
   561                           	opt stack 0
   562  0000C4                     ___wmul@multiplicand:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x8
   566  0000C4                     	ds	1
   567  0000C5                     ES_GetMSBitSet@LoopCntr:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x9
   571  0000C5                     	ds	1
   572  0000C6                     ___wmul@product:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0xA
   576  0000C6                     	ds	2
   577  0000C8                     ES_EnQueueFIFO@pBlock:
   578                           	opt stack 0
   579  0000C8                     ES_DeQueue@pBlock:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xC
   583  0000C8                     	ds	2
   584  0000CA                     ES_DeQueue@pReturnEvent:
   585                           	opt stack 0
   586  0000CA                     ES_EnQueueFIFO@Event2Add:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0xE
   590  0000CA                     	ds	2
   591  0000CC                     ??_ES_DeQueue:
   592                           
   593                           ; 1 bytes @ 0x10
   594  0000CC                     	ds	1
   595  0000CD                     ??_ES_EnQueueFIFO:
   596                           
   597                           ; 1 bytes @ 0x11
   598  0000CD                     	ds	1
   599  0000CE                     ES_DeQueue@SaveCrit:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x12
   603  0000CE                     	ds	1
   604  0000CF                     ES_DeQueue@NumLeft:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x13
   608  0000CF                     	ds	1
   609  0000D0                     ES_EnQueueFIFO@SaveCrit:
   610                           	opt stack 0
   611  0000D0                     ES_DeQueue@pThisQueue:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  0000D0                     	ds	1
   616  0000D1                     ES_EnQueueFIFO@pThisQueue:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x15
   620  0000D1                     	ds	2
   621  0000D3                     ES_PostAll@ThisEvent:
   622                           	opt stack 0
   623  0000D3                     ES_PostToService@TheEvent:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x17
   627  0000D3                     	ds	3
   628  0000D6                     ??_ES_PostToService:
   629  0000D6                     ??_ES_PostAll:
   630                           
   631                           ; 1 bytes @ 0x1A
   632  0000D6                     	ds	2
   633  0000D8                     ES_PostAll@i:
   634                           	opt stack 0
   635  0000D8                     ES_PostToService@WhichService:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x1C
   639  0000D8                     	ds	1
   640  0000D9                     ?_RunCan_XmitService:
   641                           	opt stack 0
   642  0000D9                     ?_RunAnalogService:
   643                           	opt stack 0
   644  0000D9                     ?_RunButtonDebounceSM:
   645                           	opt stack 0
   646  0000D9                     PostButtonDebounceSM@ThisEvent:
   647                           	opt stack 0
   648  0000D9                     RunButtonDebounceSM@ThisEvent:
   649                           	opt stack 0
   650  0000D9                     InitCan_XmitService@ThisEvent:
   651                           	opt stack 0
   652  0000D9                     RunCan_XmitService@ThisEvent:
   653                           	opt stack 0
   654  0000D9                     InitAnalogService@ThisEvent:
   655                           	opt stack 0
   656  0000D9                     PostAnalogService@ThisEvent:
   657                           	opt stack 0
   658  0000D9                     RunAnalogService@ThisEvent:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x1D
   662  0000D9                     	ds	3
   663  0000DC                     ??_RunCan_XmitService:
   664  0000DC                     ??_ES_Timer_Tick_Resp:
   665  0000DC                     CheckButtonEvents@ReturnVal:
   666                           	opt stack 0
   667  0000DC                     InitCan_XmitService@Priority:
   668                           	opt stack 0
   669  0000DC                     InitAnalogService@Priority:
   670                           	opt stack 0
   671  0000DC                     RunButtonDebounceSM@ReturnEvent:
   672                           	opt stack 0
   673  0000DC                     RunAnalogService@ReturnEvent:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x20
   677  0000DC                     	ds	1
   678  0000DD                     ES_Initialize@NewRate:
   679                           	opt stack 0
   680  0000DD                     CheckButtonEvents@ThisEvent:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x21
   684  0000DD                     	ds	1
   685  0000DE                     RunCan_XmitService@ReturnEvent:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x22
   689  0000DE                     	ds	1
   690  0000DF                     ES_Initialize@i:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x23
   694  0000DF                     	ds	1
   695  0000E0                     CheckButtonEvents@CurrentButtonState:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x24
   699  0000E0                     	ds	1
   700  0000E1                     ES_CheckUserEvents@i:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x25
   704  0000E1                     	ds	1
   705  0000E2                     ??_ES_Run:
   706                           
   707                           ; 1 bytes @ 0x26
   708  0000E2                     	ds	4
   709  0000E6                     ES_Run@HighestPrior:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2A
   713  0000E6                     	ds	1
   714  0000E7                     main@ErrorType:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2B
   718  0000E7                     	ds	1
   719                           tblptru	equ	0xFF8
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           
   723                           	psect	cstackCOMRAM
   724  000001                     __pcstackCOMRAM:
   725                           	opt stack 0
   726  000001                     ?i2___awmod:
   727                           	opt stack 0
   728  000001                     i2ES_Timer_InitTimer@NewTime:
   729                           	opt stack 0
   730  000001                     i2___awmod@dividend:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x0
   734  000001                     	ds	2
   735  000003                     ??i2_ES_Timer_InitTimer:
   736  000003                     i2___awmod@divisor:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x2
   740  000003                     	ds	2
   741  000005                     i2ES_Timer_InitTimer@Num:
   742                           	opt stack 0
   743  000005                     i2___awmod@counter:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x4
   747  000005                     	ds	1
   748  000006                     i2___awmod@sign:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x5
   752  000006                     	ds	1
   753  000007                     ?i2___wmul:
   754                           	opt stack 0
   755  000007                     i2___wmul@multiplier:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  000007                     	ds	2
   760  000009                     i2___wmul@multiplicand:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x8
   764  000009                     	ds	2
   765  00000B                     i2___wmul@product:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0xA
   769  00000B                     	ds	2
   770  00000D                     i2ES_EnQueueFIFO@pBlock:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0xC
   774  00000D                     	ds	2
   775  00000F                     i2ES_EnQueueFIFO@Event2Add:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0xE
   779  00000F                     	ds	3
   780  000012                     ??i2_ES_EnQueueFIFO:
   781                           
   782                           ; 1 bytes @ 0x11
   783  000012                     	ds	3
   784  000015                     i2ES_EnQueueFIFO@SaveCrit:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x14
   788  000015                     	ds	1
   789  000016                     i2ES_EnQueueFIFO@pThisQueue:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x15
   793  000016                     	ds	2
   794  000018                     i2ES_PostToService@TheEvent:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x17
   798  000018                     	ds	3
   799  00001B                     ??i2_ES_PostToService:
   800                           
   801                           ; 1 bytes @ 0x1A
   802  00001B                     	ds	2
   803  00001D                     i2ES_PostToService@WhichService:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1C
   807  00001D                     	ds	1
   808  00001E                     PostCan_XmitService@ThisEvent:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x1D
   812  00001E                     	ds	3
   813  000021                     ??_AnalogISR:
   814  000021                     
   815                           ; 1 bytes @ 0x20
   816  000021                     	ds	2
   817  000023                     AnalogISR@Event2Post:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x22
   821  000023                     	ds	3
   822  000026                     ??_ISR:
   823                           
   824                           ; 1 bytes @ 0x25
   825  000026                     	ds	16
   826                           tblptru	equ	0xFF8
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           
   830 ;;
   831 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   832 ;;
   833 ;; *************** function _main *****************
   834 ;; Defined at:
   835 ;;		line 25 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  ErrorType       1   43[BANK0 ] enum E15645
   840 ;; Return value:  Size  Location     Type
   841 ;;                  2  372[None  ] int 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   849 ;;      Params:         0       0       0       0
   850 ;;      Locals:         0       1       0       0
   851 ;;      Temps:          0       0       0       0
   852 ;;      Totals:         0       1       0       0
   853 ;;Total ram usage:        1 bytes
   854 ;; Hardware stack levels required when called:   13
   855 ;; This function calls:
   856 ;;		_ES_Initialize
   857 ;;		_ES_Run
   858 ;;		_printf
   859 ;; This function is called by:
   860 ;;		Startup code after reset
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text0
   865  000D00                     __ptext0:
   866                           	opt stack 0
   867  000D00                     _main:
   868                           	opt stack 18
   869                           
   870                           ;main.c: 28: IRCF0 = 1;
   871                           
   872                           ;incstack = 0
   873  000D00  88D3               	bsf	4051,4,c	;volatile
   874                           
   875                           ;main.c: 29: IRCF1 = 1;
   876  000D02  8AD3               	bsf	4051,5,c	;volatile
   877                           
   878                           ;main.c: 30: IRCF2 = 1;
   879  000D04  8CD3               	bsf	4051,6,c	;volatile
   880                           
   881                           ;main.c: 31: SCS1 = 1;
   882  000D06  82D3               	bsf	4051,1,c	;volatile
   883                           
   884                           ;main.c: 32: ADCON1 = 0x0D;
   885  000D08  0E0D               	movlw	13
   886  000D0A  6EC1               	movwf	4033,c	;volatile
   887                           
   888                           ;main.c: 39: ES_Return_t ErrorType;
   889                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   890  000D0C  0E9C               	movlw	156
   891  000D0E  0100               	movlb	0	; () banked
   892  000D10  6FDE               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   893  000D12  0E3F               	movlw	63
   894  000D14  6FDD               	movwf	ES_Initialize@NewRate& (0+255),b
   895  000D16  EC7C  F003         	call	_ES_Initialize	;wreg free
   896  000D1A  0100               	movlb	0	; () banked
   897  000D1C  6FE7               	movwf	main@ErrorType& (0+255),b
   898                           
   899                           ; BSR set to: 0
   900                           ;main.c: 56: if ( ErrorType == Success ) {
   901  000D1E  0100               	movlb	0	; () banked
   902  000D20  51E7               	movf	main@ErrorType& (0+255),w,b
   903  000D22  0100               	movlb	0	; () banked
   904  000D24  A4D8               	btfss	status,2,c
   905  000D26  D029               	goto	l3034
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 58: ErrorType = ES_Run();
   909  000D28  EC02  F003         	call	_ES_Run	;wreg free
   910  000D2C  0100               	movlb	0	; () banked
   911  000D2E  6FE7               	movwf	main@ErrorType& (0+255),b
   912                           
   913                           ; BSR set to: 0
   914                           ;main.c: 60: }
   915                           ;main.c: 62: switch (ErrorType){
   916  000D30  D024               	goto	l3034
   917  000D32                     l3024:
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 64: printf("Failed on attempt to Post\n");
   921  000D32  0E6B               	movlw	low STR_1
   922  000D34  0100               	movlb	0	; () banked
   923  000D36  6FBC               	movwf	printf@f& (0+255),b
   924  000D38  0E03               	movlw	high STR_1
   925  000D3A  0100               	movlb	0	; () banked
   926  000D3C  6FBD               	movwf	(printf@f+1)& (0+255),b
   927  000D3E  ECC6  F009         	call	_printf	;wreg free
   928                           
   929                           ;main.c: 65: break;
   930  000D42  D027               	goto	l380
   931  000D44                     l3026:
   932                           
   933                           ;main.c: 67: printf("Failed on NULL pointer\n");
   934  000D44  0E86               	movlw	low STR_2
   935  000D46  0100               	movlb	0	; () banked
   936  000D48  6FBC               	movwf	printf@f& (0+255),b
   937  000D4A  0E03               	movlw	high STR_2
   938  000D4C  0100               	movlb	0	; () banked
   939  000D4E  6FBD               	movwf	(printf@f+1)& (0+255),b
   940  000D50  ECC6  F009         	call	_printf	;wreg free
   941                           
   942                           ;main.c: 68: break;
   943  000D54  D01E               	goto	l380
   944  000D56                     l3028:
   945                           
   946                           ;main.c: 70: printf("Failed Initialization\n");
   947  000D56  0E9E               	movlw	low STR_3
   948  000D58  0100               	movlb	0	; () banked
   949  000D5A  6FBC               	movwf	printf@f& (0+255),b
   950  000D5C  0E03               	movlw	high STR_3
   951  000D5E  0100               	movlb	0	; () banked
   952  000D60  6FBD               	movwf	(printf@f+1)& (0+255),b
   953  000D62  ECC6  F009         	call	_printf	;wreg free
   954                           
   955                           ;main.c: 71: break;
   956  000D66  D015               	goto	l380
   957  000D68                     l3030:
   958                           
   959                           ;main.c: 73: printf("Other Failure\n");
   960  000D68  0EB5               	movlw	low STR_4
   961  000D6A  0100               	movlb	0	; () banked
   962  000D6C  6FBC               	movwf	printf@f& (0+255),b
   963  000D6E  0E03               	movlw	high STR_4
   964  000D70  0100               	movlb	0	; () banked
   965  000D72  6FBD               	movwf	(printf@f+1)& (0+255),b
   966  000D74  ECC6  F009         	call	_printf	;wreg free
   967                           
   968                           ;main.c: 75: }
   969                           
   970                           ;main.c: 74: break;
   971  000D78  D00C               	goto	l380
   972  000D7A                     l3034:
   973  000D7A  0100               	movlb	0	; () banked
   974  000D7C  51E7               	movf	main@ErrorType& (0+255),w,b
   975                           
   976                           ; Switch size 1, requested type "space"
   977                           ; Number of cases is 3, Range of values is 1 to 5
   978                           ; switch strategies available:
   979                           ; Name         Instructions Cycles
   980                           ; simple_byte           10     6 (average)
   981                           ;	Chosen strategy is simple_byte
   982  000D7E  0A01               	xorlw	1	; case 1
   983  000D80  B4D8               	btfsc	status,2,c
   984  000D82  D7D7               	goto	l3024
   985  000D84  0A02               	xorlw	2	; case 3
   986  000D86  B4D8               	btfsc	status,2,c
   987  000D88  D7DD               	goto	l3026
   988  000D8A  0A06               	xorlw	6	; case 5
   989  000D8C  B4D8               	btfsc	status,2,c
   990  000D8E  D7E3               	goto	l3028
   991  000D90  D7EB               	goto	l3030
   992  000D92                     l380:
   993                           
   994                           ;main.c: 77: ;
   995  000D92  D7FF               	goto	l380
   996  000D94                     __end_of_main:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function _printf *****************
  1004 ;; Defined at:
  1005 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1008 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  tmpval          4    0        struct .
  1011 ;;  cp              3    0        PTR const unsigned char 
  1012 ;;  ap              2    2[BANK0 ] PTR void [1]
  1013 ;;		 -> ?_printf(2), 
  1014 ;;  len             2    0        unsigned int 
  1015 ;;  val             2    0        unsigned int 
  1016 ;;  c               1    4[BANK0 ] char 
  1017 ;;  flag            1    0        unsigned char 
  1018 ;;  prec            1    0        char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2    0[BANK0 ] int 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1028 ;;      Params:         0       2       0       0
  1029 ;;      Locals:         0       3       0       0
  1030 ;;      Temps:          0       0       0       0
  1031 ;;      Totals:         0       5       0       0
  1032 ;;Total ram usage:        5 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    7
  1035 ;; This function calls:
  1036 ;;		_putch
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text1
  1043  00138C                     __ptext1:
  1044                           	opt stack 0
  1045  00138C                     _printf:
  1046                           	opt stack 23
  1047                           
  1048                           ;doprnt.c: 466: va_list ap;
  1049                           ;doprnt.c: 499: signed char c;
  1050                           ;doprnt.c: 506: signed char prec;
  1051                           ;doprnt.c: 508: unsigned char flag;
  1052                           ;doprnt.c: 523: union {
  1053                           ;doprnt.c: 524: unsigned long vd;
  1054                           ;doprnt.c: 525: double integ;
  1055                           ;doprnt.c: 526: } tmpval;
  1056                           ;doprnt.c: 528: unsigned int val;
  1057                           ;doprnt.c: 529: unsigned len;
  1058                           ;doprnt.c: 530: const char * cp;
  1059                           ;doprnt.c: 533: *ap = __va_start();
  1060                           
  1061                           ;incstack = 0
  1062  00138C  0EBE               	movlw	low (?_printf+2)
  1063  00138E  0100               	movlb	0	; () banked
  1064  001390  6FBE               	movwf	printf@ap& (0+255),b
  1065  001392  0E00               	movlw	high (?_printf+2)
  1066  001394  0100               	movlb	0	; () banked
  1067  001396  6FBF               	movwf	(printf@ap+1)& (0+255),b
  1068                           
  1069                           ;doprnt.c: 536: while(c = *f++) {
  1070  001398  D004               	goto	l2868
  1071  00139A                     l2866:
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;doprnt.c: 540: {
  1075                           ;doprnt.c: 541: (putch(c) );
  1076  00139A  0100               	movlb	0	; () banked
  1077  00139C  51C0               	movf	printf@c& (0+255),w,b
  1078  00139E  ECCD  F00A         	call	_putch
  1079  0013A2                     l2868:
  1080  0013A2  C0BC  FFF6         	movff	printf@f,tblptrl
  1081  0013A6  C0BD  FFF7         	movff	printf@f+1,tblptrh
  1082  0013AA  0100               	movlb	0	; () banked
  1083  0013AC  4BBC               	infsnz	printf@f& (0+255),f,b
  1084  0013AE  2BBD               	incf	(printf@f+1)& (0+255),f,b
  1085  0013B0                     	if	0	;tblptru may be non-zero
  1086  0013B0                     	endif
  1087  0013B0                     	if	0	;tblptru may be non-zero
  1088  0013B0                     	endif
  1089  0013B0  0008               	tblrd		*
  1090  0013B2  CFF5 F0C0          	movff	tablat,printf@c
  1091  0013B6  0100               	movlb	0	; () banked
  1092  0013B8  51C0               	movf	printf@c& (0+255),w,b
  1093  0013BA  B4D8               	btfsc	status,2,c
  1094  0013BC  0012               	return	
  1095  0013BE  D7ED               	goto	l2866
  1096  0013C0                     __end_of_printf:
  1097                           	opt stack 0
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           status	equ	0xFD8
  1105                           
  1106 ;; *************** function _putch *****************
  1107 ;; Defined at:
  1108 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  c               1    wreg     unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  c               1    0[COMRAM] unsigned char 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1122 ;;      Params:         0       0       0       0
  1123 ;;      Locals:         0       0       0       0
  1124 ;;      Temps:          0       0       0       0
  1125 ;;      Totals:         0       0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    6
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_printf
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text2
  1137  00159A                     __ptext2:
  1138                           	opt stack 0
  1139  00159A                     _putch:
  1140                           	opt stack 23
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;incstack = 0
  1144  00159A  0012               	return		;funcret
  1145  00159C                     __end_of_putch:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           postinc0	equ	0xFEE
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _ES_Run *****************
  1156 ;; Defined at:
  1157 ;;		line 277 in file "ES_Framework.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  HighestPrior    1   42[BANK0 ] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      enum E15493
  1164 ;; Registers used:
  1165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1171 ;;      Params:         0       0       0       0
  1172 ;;      Locals:         0       1       0       0
  1173 ;;      Temps:          0       4       0       0
  1174 ;;      Totals:         0       5       0       0
  1175 ;;Total ram usage:        5 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:   12
  1178 ;; This function calls:
  1179 ;;		_ES_CheckUserEvents
  1180 ;;		_ES_DeQueue
  1181 ;;		_ES_GetMSBitSet
  1182 ;;		_RunAnalogService
  1183 ;;		_RunButtonDebounceSM
  1184 ;;		_RunCan_XmitService
  1185 ;;		__HW_Process_Pending_Ints
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text3
  1192  000604                     __ptext3:
  1193                           	opt stack 0
  1194  000604                     _ES_Run:
  1195                           	opt stack 18
  1196                           
  1197                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1198                           
  1199                           ;incstack = 0
  1200                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1201                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1202                           ;ES_Framework.c: 282: while(1){
  1203  000604  D06B               	goto	l2826
  1204  000606                     l2814:
  1205                           
  1206                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1207  000606  C089  F0BC         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1208  00060A  C08A  F0BD         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1209  00060E  EC90  F005         	call	_ES_GetMSBitSet	;wreg free
  1210  000612  0100               	movlb	0	; () banked
  1211  000614  6FE6               	movwf	ES_Run@HighestPrior& (0+255),b
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1215  000616  0100               	movlb	0	; () banked
  1216  000618  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1217  00061A  0D03               	mullw	3
  1218  00061C  0E5C               	movlw	low _EventQueues
  1219  00061E  24F3               	addwf	prodl,w,c
  1220  000620  6EF6               	movwf	tblptrl,c
  1221  000622  0E03               	movlw	high _EventQueues
  1222  000624  20F4               	addwfc	prodh,w,c
  1223  000626  6EF7               	movwf	tblptrh,c
  1224  000628                     	if	0	;There are less than 3 active tblptr bytes
  1225  000628                     	endif
  1226  000628  0009               	tblrd		*+
  1227  00062A  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock
  1228  00062E  000A               	tblrd		*-
  1229  000630  CFF5 F0C9          	movff	tablat,ES_DeQueue@pBlock+1
  1230  000634  0EB9               	movlw	low ES_Run@ThisEvent
  1231  000636  0100               	movlb	0	; () banked
  1232  000638  6FCA               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1233  00063A  0E00               	movlw	high ES_Run@ThisEvent
  1234  00063C  0100               	movlb	0	; () banked
  1235  00063E  6FCB               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1236  000640  ECE3  F001         	call	_ES_DeQueue	;wreg free
  1237  000644  0900               	iorlw	0
  1238  000646  A4D8               	btfss	status,2,c
  1239  000648  D01F               	goto	l2820
  1240                           
  1241                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1242  00064A  0100               	movlb	0	; () banked
  1243  00064C  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1244  00064E  0D02               	mullw	2
  1245  000650  0E01               	movlw	low _BitNum2SetMask
  1246  000652  24F3               	addwf	prodl,w,c
  1247  000654  6EF6               	movwf	tblptrl,c
  1248  000656  0E03               	movlw	high _BitNum2SetMask
  1249  000658  20F4               	addwfc	prodh,w,c
  1250  00065A  6EF7               	movwf	tblptrh,c
  1251  00065C                     	if	0	;There are less than 3 active tblptr bytes
  1252  00065C                     	endif
  1253  00065C  0009               	tblrd		*+
  1254  00065E  CFF5 F0E2          	movff	tablat,??_ES_Run
  1255  000662  0009               	tblrd		*+
  1256  000664  CFF5 F0E3          	movff	tablat,??_ES_Run+1
  1257  000668  0100               	movlb	0	; () banked
  1258  00066A  1DE2               	comf	??_ES_Run& (0+255),w,b
  1259  00066C  0100               	movlb	0	; () banked
  1260  00066E  6FE4               	movwf	(??_ES_Run+2)& (0+255),b
  1261  000670  0100               	movlb	0	; () banked
  1262  000672  1DE3               	comf	(??_ES_Run+1)& (0+255),w,b
  1263  000674  0100               	movlb	0	; () banked
  1264  000676  6FE5               	movwf	(??_ES_Run+3)& (0+255),b
  1265  000678  0100               	movlb	0	; () banked
  1266  00067A  51E4               	movf	(??_ES_Run+2)& (0+255),w,b
  1267  00067C  0100               	movlb	0	; () banked
  1268  00067E  1789               	andwf	_Ready& (0+255),f,b
  1269  000680  0100               	movlb	0	; () banked
  1270  000682  51E5               	movf	(??_ES_Run+3)& (0+255),w,b
  1271  000684  0100               	movlb	0	; () banked
  1272  000686  178A               	andwf	(_Ready+1)& (0+255),f,b
  1273  000688                     l2820:
  1274                           
  1275                           ;ES_Framework.c: 291: }
  1276                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1277  000688  C0B9  F0D9         	movff	ES_Run@ThisEvent,RunAnalogService@ThisEvent
  1278  00068C  C0BA  F0DA         	movff	ES_Run@ThisEvent+1,RunAnalogService@ThisEvent+1
  1279  000690  C0BB  F0DB         	movff	ES_Run@ThisEvent+2,RunAnalogService@ThisEvent+2
  1280  000694  0100               	movlb	0	; () banked
  1281  000696  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1282  000698  0D04               	mullw	4
  1283  00069A  0E02               	movlw	2
  1284  00069C  26F3               	addwf	prodl,f,c
  1285  00069E  0E00               	movlw	0
  1286  0006A0  22F4               	addwfc	prodh,f,c
  1287  0006A2  0E50               	movlw	low _ServDescList
  1288  0006A4  24F3               	addwf	prodl,w,c
  1289  0006A6  6EF6               	movwf	tblptrl,c
  1290  0006A8  0E03               	movlw	high _ServDescList
  1291  0006AA  20F4               	addwfc	prodh,w,c
  1292  0006AC  6EF7               	movwf	tblptrh,c
  1293  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  1294  0006AE                     	endif
  1295  0006AE  D801               	call	u1638
  1296  0006B0  D00C               	goto	u1639
  1297  0006B2                     u1638:
  1298  0006B2  0005               	push	
  1299  0006B4  6EFA               	movwf	pclath,c
  1300  0006B6  0009               	tblrd		*+
  1301  0006B8  50F5               	movf	tablat,w,c
  1302  0006BA  6EFD               	movwf	tosl,c
  1303  0006BC  0009               	tblrd		*+
  1304  0006BE  50F5               	movf	tablat,w,c
  1305  0006C0  6EFE               	movwf	tosh,c
  1306  0006C2  50F8               	movf	tblptru,w,c
  1307  0006C4  6EFF               	movwf	tosu,c
  1308  0006C6  50FA               	movf	pclath,w,c
  1309  0006C8  0012               	return		;indir
  1310  0006CA                     u1639:
  1311  0006CA  0ED9               	movlw	low ?_RunAnalogService
  1312  0006CC  6ED9               	movwf	fsr2l,c
  1313  0006CE  0E00               	movlw	high ?_RunAnalogService
  1314  0006D0  6EDA               	movwf	fsr2h,c
  1315  0006D2  50DF               	movf	indf2,w,c
  1316  0006D4  B4D8               	btfsc	status,2,c
  1317  0006D6  D002               	goto	l2826
  1318                           
  1319                           ;ES_Framework.c: 293: return FailedRun;
  1320  0006D8  0E02               	movlw	2
  1321  0006DA  0012               	return	
  1322  0006DC                     l2826:
  1323  0006DC  EC7E  F00A         	call	__HW_Process_Pending_Ints	;wreg free
  1324  0006E0  0900               	iorlw	0
  1325  0006E2  B4D8               	btfsc	status,2,c
  1326  0006E4  D006               	goto	l2830
  1327  0006E6  0100               	movlb	0	; () banked
  1328  0006E8  5189               	movf	_Ready& (0+255),w,b
  1329  0006EA  0100               	movlb	0	; () banked
  1330  0006EC  118A               	iorwf	(_Ready+1)& (0+255),w,b
  1331  0006EE  A4D8               	btfss	status,2,c
  1332  0006F0  D78A               	goto	l2814
  1333  0006F2                     l2830:
  1334                           
  1335                           ;ES_Framework.c: 294: }
  1336                           ;ES_Framework.c: 295: }
  1337                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1338  0006F2  EC46  F009         	call	_ES_CheckUserEvents	;wreg free
  1339  0006F6  D7F2               	goto	l2826
  1340  0006F8                     __end_of_ES_Run:
  1341                           	opt stack 0
  1342                           tosu	equ	0xFFF
  1343                           tosh	equ	0xFFE
  1344                           tosl	equ	0xFFD
  1345                           pclath	equ	0xFFA
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function __HW_Process_Pending_Ints *****************
  1360 ;; Defined at:
  1361 ;;		line 225 in file "ES_Port.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      unsigned char 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1375 ;;      Params:         0       0       0       0
  1376 ;;      Locals:         0       0       0       0
  1377 ;;      Temps:          0       0       0       0
  1378 ;;      Totals:         0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:   11
  1382 ;; This function calls:
  1383 ;;		_ES_Timer_Tick_Resp
  1384 ;; This function is called by:
  1385 ;;		_ES_Run
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text4
  1390  0014FC                     __ptext4:
  1391                           	opt stack 0
  1392  0014FC                     __HW_Process_Pending_Ints:
  1393                           	opt stack 18
  1394                           
  1395                           ;ES_Port.c: 227: while (TickCount > 0)
  1396                           
  1397                           ;incstack = 0
  1398  0014FC  D004               	goto	l2660
  1399  0014FE                     l2656:
  1400                           
  1401                           ;ES_Port.c: 228: {
  1402                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1403  0014FE  EC77  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1404                           
  1405                           ;ES_Port.c: 231: TickCount--;
  1406  001502  0100               	movlb	0	; () banked
  1407  001504  0794               	decf	_TickCount& (0+255),f,b	;volatile
  1408  001506                     l2660:
  1409  001506  0100               	movlb	0	; () banked
  1410  001508  5194               	movf	_TickCount& (0+255),w,b	;volatile
  1411  00150A  A4D8               	btfss	status,2,c
  1412  00150C  D7F8               	goto	l2656
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;ES_Port.c: 232: }
  1416                           ;ES_Port.c: 234: return 1;
  1417                           
  1418                           ; BSR set to: 0
  1419  00150E  0E01               	movlw	1
  1420  001510  0012               	return	
  1421  001512                     __end_of__HW_Process_Pending_Ints:
  1422                           	opt stack 0
  1423                           tosu	equ	0xFFF
  1424                           tosh	equ	0xFFE
  1425                           tosl	equ	0xFFD
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           indf2	equ	0xFDF
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _ES_Timer_Tick_Resp *****************
  1441 ;; Defined at:
  1442 ;;		line 284 in file "ES_Timers.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1456 ;;      Params:         0       0       0       0
  1457 ;;      Locals:         0       0       0       0
  1458 ;;      Temps:          0       4       0       0
  1459 ;;      Totals:         0       4       0       0
  1460 ;;Total ram usage:        4 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:   10
  1463 ;; This function calls:
  1464 ;;		Absolute function
  1465 ;;		_ES_GetMSBitSet
  1466 ;;		_PostAnalogService
  1467 ;;		_PostButtonDebounceSM
  1468 ;; This function is called by:
  1469 ;;		__HW_Process_Pending_Ints
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text5
  1474  0004EE                     __ptext5:
  1475                           	opt stack 0
  1476  0004EE                     _ES_Timer_Tick_Resp:
  1477                           	opt stack 18
  1478                           
  1479                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1480                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1481                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1482                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486  0004EE  0100               	movlb	0	; () banked
  1487  0004F0  518B               	movf	_TMR_ActiveFlags& (0+255),w,b
  1488  0004F2  0100               	movlb	0	; () banked
  1489  0004F4  118C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1490  0004F6  B4D8               	btfsc	status,2,c
  1491  0004F8  0012               	return	
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;ES_Timers.c: 291: {
  1495                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1496  0004FA  C08B  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1497  0004FE  C08C  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1498  000502                     l2402:
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1502  000502  C083  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1503  000506  C084  F0BD         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1504  00050A  EC90  F005         	call	_ES_GetMSBitSet	;wreg free
  1505  00050E  0100               	movlb	0	; () banked
  1506  000510  6F8F               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1510  000512  0100               	movlb	0	; () banked
  1511  000514  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1512  000516  0D02               	mullw	2
  1513  000518  0E60               	movlw	low _TMR_TimerArray
  1514  00051A  24F3               	addwf	prodl,w,c
  1515  00051C  6ED9               	movwf	fsr2l,c
  1516  00051E  0E00               	movlw	high _TMR_TimerArray
  1517  000520  20F4               	addwfc	prodh,w,c
  1518  000522  6EDA               	movwf	fsr2h,c
  1519  000524  06DE               	decf	postinc2,f,c
  1520  000526  0E00               	movlw	0
  1521  000528  5ADD               	subwfb	postdec2,f,c
  1522  00052A  50DE               	movf	postinc2,w,c
  1523  00052C  10DE               	iorwf	postinc2,w,c
  1524  00052E  A4D8               	btfss	status,2,c
  1525  000530  D043               	goto	l2414
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;ES_Timers.c: 299: {
  1529                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1530  000532  0E03               	movlw	3
  1531  000534  0100               	movlb	0	; () banked
  1532  000536  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1536  000538  C08F  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1537  00053C  0100               	movlb	0	; () banked
  1538  00053E  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1542  000540  C080  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent,PostAnalogService@ThisEvent
  1543  000544  C081  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostAnalogService@ThisEvent+1
  1544  000548  C082  F0DB         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostAnalogService@ThisEvent+2
  1545  00054C  0100               	movlb	0	; () banked
  1546  00054E  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1547  000550  0D02               	mullw	2
  1548  000552  0E21               	movlw	low _Timer2PostFunc
  1549  000554  24F3               	addwf	prodl,w,c
  1550  000556  6EF6               	movwf	tblptrl,c
  1551  000558  0E03               	movlw	high _Timer2PostFunc
  1552  00055A  20F4               	addwfc	prodh,w,c
  1553  00055C  6EF7               	movwf	tblptrh,c
  1554  00055E                     	if	0	;There are less than 3 active tblptr bytes
  1555  00055E                     	endif
  1556  00055E  D801               	call	u1288
  1557  000560  D00C               	goto	l2412
  1558  000562                     u1288:
  1559  000562  0005               	push	
  1560  000564  6EFA               	movwf	pclath,c
  1561  000566  0009               	tblrd		*+
  1562  000568  50F5               	movf	tablat,w,c
  1563  00056A  6EFD               	movwf	tosl,c
  1564  00056C  0009               	tblrd		*+
  1565  00056E  50F5               	movf	tablat,w,c
  1566  000570  6EFE               	movwf	tosh,c
  1567  000572  50F8               	movf	tblptru,w,c
  1568  000574  6EFF               	movwf	tosu,c
  1569  000576  50FA               	movf	pclath,w,c
  1570  000578  0012               	return		;indir
  1571  00057A                     l2412:
  1572                           
  1573                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1574  00057A  0100               	movlb	0	; () banked
  1575  00057C  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1576  00057E  0D02               	mullw	2
  1577  000580  0E01               	movlw	low _BitNum2SetMask
  1578  000582  24F3               	addwf	prodl,w,c
  1579  000584  6EF6               	movwf	tblptrl,c
  1580  000586  0E03               	movlw	high _BitNum2SetMask
  1581  000588  20F4               	addwfc	prodh,w,c
  1582  00058A  6EF7               	movwf	tblptrh,c
  1583  00058C                     	if	0	;There are less than 3 active tblptr bytes
  1584  00058C                     	endif
  1585  00058C  0009               	tblrd		*+
  1586  00058E  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1587  000592  0009               	tblrd		*+
  1588  000594  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1589  000598  0100               	movlb	0	; () banked
  1590  00059A  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1591  00059C  0100               	movlb	0	; () banked
  1592  00059E  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1593  0005A0  0100               	movlb	0	; () banked
  1594  0005A2  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1595  0005A4  0100               	movlb	0	; () banked
  1596  0005A6  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1597  0005A8  0100               	movlb	0	; () banked
  1598  0005AA  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1599  0005AC  0100               	movlb	0	; () banked
  1600  0005AE  178B               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1601  0005B0  0100               	movlb	0	; () banked
  1602  0005B2  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1603  0005B4  0100               	movlb	0	; () banked
  1604  0005B6  178C               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1605  0005B8                     l2414:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;ES_Timers.c: 306: }
  1609                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1610  0005B8  0100               	movlb	0	; () banked
  1611  0005BA  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1612  0005BC  0D02               	mullw	2
  1613  0005BE  0E01               	movlw	low _BitNum2SetMask
  1614  0005C0  24F3               	addwf	prodl,w,c
  1615  0005C2  6EF6               	movwf	tblptrl,c
  1616  0005C4  0E03               	movlw	high _BitNum2SetMask
  1617  0005C6  20F4               	addwfc	prodh,w,c
  1618  0005C8  6EF7               	movwf	tblptrh,c
  1619  0005CA                     	if	0	;There are less than 3 active tblptr bytes
  1620  0005CA                     	endif
  1621  0005CA  0009               	tblrd		*+
  1622  0005CC  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1623  0005D0  0009               	tblrd		*+
  1624  0005D2  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1625  0005D6  0100               	movlb	0	; () banked
  1626  0005D8  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1627  0005DA  0100               	movlb	0	; () banked
  1628  0005DC  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1629  0005DE  0100               	movlb	0	; () banked
  1630  0005E0  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1631  0005E2  0100               	movlb	0	; () banked
  1632  0005E4  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1633  0005E6  0100               	movlb	0	; () banked
  1634  0005E8  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1635  0005EA  0100               	movlb	0	; () banked
  1636  0005EC  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1637  0005EE  0100               	movlb	0	; () banked
  1638  0005F0  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1639  0005F2  0100               	movlb	0	; () banked
  1640  0005F4  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1644  0005F6  0100               	movlb	0	; () banked
  1645  0005F8  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1646  0005FA  0100               	movlb	0	; () banked
  1647  0005FC  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1648  0005FE  B4D8               	btfsc	status,2,c
  1649  000600  0012               	return	
  1650  000602  D77F               	goto	l2402
  1651  000604                     __end_of_ES_Timer_Tick_Resp:
  1652                           	opt stack 0
  1653                           tosu	equ	0xFFF
  1654                           tosh	equ	0xFFE
  1655                           tosl	equ	0xFFD
  1656                           pclath	equ	0xFFA
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           prodh	equ	0xFF4
  1662                           prodl	equ	0xFF3
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _PostButtonDebounceSM *****************
  1673 ;; Defined at:
  1674 ;;		line 75 in file "Button.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      unsigned char 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       3       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       3       0       0
  1692 ;;Total ram usage:        3 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    9
  1695 ;; This function calls:
  1696 ;;		_ES_PostToService
  1697 ;; This function is called by:
  1698 ;;		_CheckButtonEvents
  1699 ;;		_ES_Timer_Tick_Resp
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text6
  1704  001512                     __ptext6:
  1705                           	opt stack 0
  1706  001512                     _PostButtonDebounceSM:
  1707                           	opt stack 18
  1708                           
  1709                           ;Button.c: 78: return ES_PostToService(MyPriority, ThisEvent);
  1710                           ;	Return value of _PostButtonDebounceSM is never used
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;incstack = 0
  1714  001512  C0D9  F0D3         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  1715  001516  C0DA  F0D4         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  1716  00151A  C0DB  F0D5         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  1717  00151E  0100               	movlb	0	; () banked
  1718  001520  5193               	movf	_MyPriority& (0+255),w,b
  1719  001522  EC0A  F008         	call	_ES_PostToService
  1720  001526  0012               	return	
  1721  001528                     __end_of_PostButtonDebounceSM:
  1722                           	opt stack 0
  1723                           tosu	equ	0xFFF
  1724                           tosh	equ	0xFFE
  1725                           tosl	equ	0xFFD
  1726                           pclath	equ	0xFFA
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           indf2	equ	0xFDF
  1736                           postinc2	equ	0xFDE
  1737                           postdec2	equ	0xFDD
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _PostAnalogService *****************
  1743 ;; Defined at:
  1744 ;;		line 47 in file "Analog_Service.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      unsigned char 
  1751 ;; Registers used:
  1752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1758 ;;      Params:         0       3       0       0
  1759 ;;      Locals:         0       0       0       0
  1760 ;;      Temps:          0       0       0       0
  1761 ;;      Totals:         0       3       0       0
  1762 ;;Total ram usage:        3 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    9
  1765 ;; This function calls:
  1766 ;;		_ES_PostToService
  1767 ;; This function is called by:
  1768 ;;		_ES_Timer_Tick_Resp
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text7
  1773  001528                     __ptext7:
  1774                           	opt stack 0
  1775  001528                     _PostAnalogService:
  1776                           	opt stack 18
  1777                           
  1778                           ;Analog_Service.c: 49: return ES_PostToService( MyPriority, ThisEvent);
  1779                           ;	Return value of _PostAnalogService is never used
  1780                           
  1781                           ;incstack = 0
  1782  001528  C0D9  F0D3         	movff	PostAnalogService@ThisEvent,ES_PostToService@TheEvent
  1783  00152C  C0DA  F0D4         	movff	PostAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  1784  001530  C0DB  F0D5         	movff	PostAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  1785  001534  0100               	movlb	0	; () banked
  1786  001536  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  1787  001538  EC0A  F008         	call	_ES_PostToService
  1788  00153C  0012               	return	
  1789  00153E                     __end_of_PostAnalogService:
  1790                           	opt stack 0
  1791                           tosu	equ	0xFFF
  1792                           tosh	equ	0xFFE
  1793                           tosl	equ	0xFFD
  1794                           pclath	equ	0xFFA
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _ES_GetMSBitSet *****************
  1811 ;; Defined at:
  1812 ;;		line 79 in file "ES_LookupTables.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  LoopCntr        1    9[BANK0 ] char 
  1817 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1818 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      unsigned char 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1828 ;;      Params:         0       2       0       0
  1829 ;;      Locals:         0       3       0       0
  1830 ;;      Temps:          0       5       0       0
  1831 ;;      Totals:         0      10       0       0
  1832 ;;Total ram usage:       10 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    6
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_ES_Run
  1839 ;;		_ES_Timer_Tick_Resp
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  000B20                     __ptext8:
  1845                           	opt stack 0
  1846  000B20                     _ES_GetMSBitSet:
  1847                           	opt stack 21
  1848                           
  1849                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1850                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1851                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1852                           
  1853                           ;incstack = 0
  1854  000B20  0E80               	movlw	128
  1855  000B22  0100               	movlb	0	; () banked
  1856  000B24  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1857                           
  1858                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1859  000B26  0E03               	movlw	3
  1860  000B28  0100               	movlb	0	; () banked
  1861  000B2A  6FC5               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1862  000B2C                     l2280:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1866  000B2C  0100               	movlb	0	; () banked
  1867  000B2E  BFC5               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1868  000B30  D046               	goto	l2294
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1872                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1873                           ;ES_LookupTables.c: 91: 0x0F);
  1874                           
  1875                           ; BSR set to: 0
  1876                           
  1877                           ; BSR set to: 0
  1878  000B32  0100               	movlb	0	; () banked
  1879  000B34  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1880  000B36  0D04               	mullw	4
  1881  000B38  CFF3 F0BE          	movff	prodl,??_ES_GetMSBitSet
  1882  000B3C  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1883  000B40  C0BD  F0C0         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1884  000B44  0100               	movlb	0	; () banked
  1885  000B46  2BBE               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1886  000B48  D004               	goto	u1144
  1887  000B4A                     u1145:
  1888  000B4A  0100               	movlb	0	; () banked
  1889  000B4C  90D8               	bcf	status,0,c
  1890  000B4E  33C0               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1891  000B50  33BF               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1892  000B52                     u1144:
  1893  000B52  0100               	movlb	0	; () banked
  1894  000B54  2FBE               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1895  000B56  D7F9               	goto	u1145
  1896  000B58  0100               	movlb	0	; () banked
  1897  000B5A  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1898  000B5C  0B0F               	andlw	15
  1899  000B5E  0100               	movlb	0	; () banked
  1900  000B60  6FC4               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1904  000B62  0100               	movlb	0	; () banked
  1905  000B64  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1906  000B66  0100               	movlb	0	; () banked
  1907  000B68  B4D8               	btfsc	status,2,c
  1908  000B6A  D026               	goto	l2290
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1912                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1913  000B6C  0EFF               	movlw	255
  1914  000B6E  0100               	movlb	0	; () banked
  1915  000B70  6FBE               	movwf	??_ES_GetMSBitSet& (0+255),b
  1916  000B72  0EFF               	movlw	255
  1917  000B74  0100               	movlb	0	; () banked
  1918  000B76  6FBF               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1919  000B78  0100               	movlb	0	; () banked
  1920  000B7A  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1921  000B7C  0100               	movlb	0	; () banked
  1922  000B7E  6FC0               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1923  000B80  6BC1               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1924  000B82  0100               	movlb	0	; () banked
  1925  000B84  51BE               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1926  000B86  0100               	movlb	0	; () banked
  1927  000B88  27C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1928  000B8A  0100               	movlb	0	; () banked
  1929  000B8C  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1930  000B8E  0100               	movlb	0	; () banked
  1931  000B90  23C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1932  000B92  0E41               	movlw	low _Nybble2MSBitNum
  1933  000B94  0100               	movlb	0	; () banked
  1934  000B96  25C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1935  000B98  6EF6               	movwf	tblptrl,c
  1936  000B9A  0E03               	movlw	high _Nybble2MSBitNum
  1937  000B9C  21C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1938  000B9E  6EF7               	movwf	tblptrh,c
  1939  000BA0                     	if	0	;There are less than 3 active tblptr bytes
  1940  000BA0                     	endif
  1941  000BA0  0008               	tblrd		*
  1942  000BA2  CFF5 F0C2          	movff	tablat,??_ES_GetMSBitSet+4
  1943  000BA6  0100               	movlb	0	; () banked
  1944  000BA8  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1945  000BAA  0D04               	mullw	4
  1946  000BAC  50F3               	movf	prodl,w,c
  1947  000BAE  0100               	movlb	0	; () banked
  1948  000BB0  25C2               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1949  000BB2  0100               	movlb	0	; () banked
  1950  000BB4  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1951                           
  1952                           ;ES_LookupTables.c: 96: break;
  1953  000BB6  D003               	goto	l2294
  1954  000BB8                     l2290:
  1955                           
  1956                           ; BSR set to: 0
  1957  000BB8  0100               	movlb	0	; () banked
  1958  000BBA  07C5               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1959  000BBC  D7B7               	goto	l2280
  1960  000BBE                     l2294:
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;ES_LookupTables.c: 97: }
  1964                           ;ES_LookupTables.c: 98: }
  1965                           ;ES_LookupTables.c: 99: return ReturnVal;
  1966  000BBE  0100               	movlb	0	; () banked
  1967  000BC0  51C3               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1968  000BC2  0012               	return	
  1969  000BC4                     __end_of_ES_GetMSBitSet:
  1970                           	opt stack 0
  1971                           tosu	equ	0xFFF
  1972                           tosh	equ	0xFFE
  1973                           tosl	equ	0xFFD
  1974                           pclath	equ	0xFFA
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _RunAnalogService *****************
  1991 ;; Defined at:
  1992 ;;		line 52 in file "Analog_Service.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  3   29[BANK0 ] struct ES_Event_t
  1999 ;; Registers used:
  2000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2006 ;;      Params:         0       3       0       0
  2007 ;;      Locals:         0       3       0       0
  2008 ;;      Temps:          0       0       0       0
  2009 ;;      Totals:         0       6       0       0
  2010 ;;Total ram usage:        6 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    7
  2013 ;; This function calls:
  2014 ;;		_ES_Timer_InitTimer
  2015 ;;		_InitAnalogHW
  2016 ;; This function is called by:
  2017 ;;		_ES_Run
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text9
  2022  00123C                     __ptext9:
  2023                           	opt stack 0
  2024  00123C                     _RunAnalogService:
  2025                           	opt stack 22
  2026                           
  2027                           ;Analog_Service.c: 54: ES_Event ReturnEvent;
  2028                           ;Analog_Service.c: 55: if(ThisEvent.EventType == ES_INIT) {
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;incstack = 0
  2032  00123C  0E02               	movlw	2
  2033  00123E  0100               	movlb	0	; () banked
  2034  001240  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2035  001242  A4D8               	btfss	status,2,c
  2036  001244  D00E               	goto	l2758
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;Analog_Service.c: 56: InitAnalogHW();
  2040  001246  EC27  F00A         	call	_InitAnalogHW	;wreg free
  2041                           
  2042                           ;Analog_Service.c: 57: ADCON0bits.CHS = 0x00;
  2043  00124A  94C2               	bcf	4034,2,c	;volatile
  2044  00124C  96C2               	bcf	4034,3,c	;volatile
  2045  00124E  98C2               	bcf	4034,4,c	;volatile
  2046  001250  9AC2               	bcf	4034,5,c	;volatile
  2047                           
  2048                           ;Analog_Service.c: 58: ES_Timer_InitTimer(0, 5);
  2049  001252  0E00               	movlw	0
  2050  001254  0100               	movlb	0	; () banked
  2051  001256  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2052  001258  0E05               	movlw	5
  2053  00125A  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2054  00125C  0E00               	movlw	0
  2055  00125E  EC50  F007         	call	_ES_Timer_InitTimer
  2056  001262                     l2758:
  2057                           
  2058                           ;Analog_Service.c: 59: }
  2059                           ;Analog_Service.c: 60: if(ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 0
      +                          ) {
  2060  001262  0E03               	movlw	3
  2061  001264  0100               	movlb	0	; () banked
  2062  001266  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2063  001268  A4D8               	btfss	status,2,c
  2064  00126A  D006               	goto	l2764
  2065                           
  2066                           ; BSR set to: 0
  2067  00126C  0100               	movlb	0	; () banked
  2068  00126E  51DA               	movf	(RunAnalogService@ThisEvent+1)& (0+255),w,b
  2069  001270  0100               	movlb	0	; () banked
  2070  001272  11DB               	iorwf	(RunAnalogService@ThisEvent+2)& (0+255),w,b
  2071  001274  B4D8               	btfsc	status,2,c
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;Analog_Service.c: 61: ADCON0bits.GO = 1;
  2075  001276  82C2               	bsf	4034,1,c	;volatile
  2076  001278                     l2764:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;Analog_Service.c: 62: }
  2080                           ;Analog_Service.c: 63: ReturnEvent.EventType = ES_NO_EVENT;
  2081  001278  0E00               	movlw	0
  2082  00127A  0100               	movlb	0	; () banked
  2083  00127C  6FDC               	movwf	RunAnalogService@ReturnEvent& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;Analog_Service.c: 64: return ReturnEvent;
  2087  00127E  C0DC  F0D9         	movff	RunAnalogService@ReturnEvent,?_RunAnalogService
  2088  001282  C0DD  F0DA         	movff	RunAnalogService@ReturnEvent+1,?_RunAnalogService+1
  2089  001286  C0DE  F0DB         	movff	RunAnalogService@ReturnEvent+2,?_RunAnalogService+2
  2090  00128A  0012               	return	
  2091  00128C                     __end_of_RunAnalogService:
  2092                           	opt stack 0
  2093                           tosu	equ	0xFFF
  2094                           tosh	equ	0xFFE
  2095                           tosl	equ	0xFFD
  2096                           pclath	equ	0xFFA
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           prodh	equ	0xFF4
  2102                           prodl	equ	0xFF3
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           indf2	equ	0xFDF
  2106                           postinc2	equ	0xFDE
  2107                           postdec2	equ	0xFDD
  2108                           fsr2h	equ	0xFDA
  2109                           fsr2l	equ	0xFD9
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function _RunButtonDebounceSM *****************
  2113 ;; Defined at:
  2114 ;;		line 83 in file "Button.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  3   29[BANK0 ] struct ES_Event_t
  2121 ;; Registers used:
  2122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2128 ;;      Params:         0       3       0       0
  2129 ;;      Locals:         0       3       0       0
  2130 ;;      Temps:          0       0       0       0
  2131 ;;      Totals:         0       6       0       0
  2132 ;;Total ram usage:        6 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    9
  2135 ;; This function calls:
  2136 ;;		_ES_PostAll
  2137 ;;		_ES_Timer_InitTimer
  2138 ;; This function is called by:
  2139 ;;		_ES_Run
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text10
  2144  000C66                     __ptext10:
  2145                           	opt stack 0
  2146  000C66                     _RunButtonDebounceSM:
  2147                           	opt stack 20
  2148                           
  2149                           ;Button.c: 87: switch (CurrentState) {
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;incstack = 0
  2153  000C66  D03A               	goto	l2588
  2154  000C68                     l2566:
  2155                           
  2156                           ;Button.c: 92: if (ThisEvent.EventType == ES_TIMEOUT) {
  2157  000C68  0E03               	movlw	3
  2158  000C6A  0100               	movlb	0	; () banked
  2159  000C6C  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2160  000C6E  A4D8               	btfss	status,2,c
  2161  000C70  D03D               	goto	l2590
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;Button.c: 94: CurrentState = Ready2Sample;
  2165  000C72  0E01               	movlw	1
  2166  000C74  0100               	movlb	0	; () banked
  2167  000C76  6F90               	movwf	_CurrentState& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;Button.c: 95: }
  2171                           ;Button.c: 96: break;
  2172  000C78  D039               	goto	l2590
  2173  000C7A                     l2570:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;Button.c: 101: if (ThisEvent.EventType == DBButtonUp) {
  2177  000C7A  0E06               	movlw	6
  2178  000C7C  0100               	movlb	0	; () banked
  2179  000C7E  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2180  000C80  A4D8               	btfss	status,2,c
  2181  000C82  D013               	goto	l2578
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;Button.c: 103: ES_Timer_InitTimer(1, 2);
  2185  000C84  0E00               	movlw	0
  2186  000C86  0100               	movlb	0	; () banked
  2187  000C88  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2188  000C8A  0E02               	movlw	2
  2189  000C8C  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2190  000C8E  0E01               	movlw	1
  2191  000C90  EC50  F007         	call	_ES_Timer_InitTimer
  2192                           
  2193                           ;Button.c: 105: CurrentState = Debouncing;
  2194  000C94  0E00               	movlw	0
  2195  000C96  0100               	movlb	0	; () banked
  2196  000C98  6F90               	movwf	_CurrentState& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;Button.c: 107: ES_PostAll(ThisEvent);
  2200  000C9A  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2201  000C9E  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2202  000CA2  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2203  000CA6  ECCE  F007         	call	_ES_PostAll	;wreg free
  2204  000CAA                     l2578:
  2205                           
  2206                           ;Button.c: 108: }
  2207                           ;Button.c: 110: if (ThisEvent.EventType == DBButtonDown) {
  2208  000CAA  0E05               	movlw	5
  2209  000CAC  0100               	movlb	0	; () banked
  2210  000CAE  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2211  000CB0  A4D8               	btfss	status,2,c
  2212  000CB2  D01C               	goto	l2590
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;Button.c: 114: ES_Timer_InitTimer(1, 2);
  2216  000CB4  0E00               	movlw	0
  2217  000CB6  0100               	movlb	0	; () banked
  2218  000CB8  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2219  000CBA  0E02               	movlw	2
  2220  000CBC  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2221  000CBE  0E01               	movlw	1
  2222  000CC0  EC50  F007         	call	_ES_Timer_InitTimer
  2223                           
  2224                           ;Button.c: 116: CurrentState = Debouncing;
  2225  000CC4  0E00               	movlw	0
  2226  000CC6  0100               	movlb	0	; () banked
  2227  000CC8  6F90               	movwf	_CurrentState& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;Button.c: 117: ES_PostAll(ThisEvent);
  2231  000CCA  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2232  000CCE  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2233  000CD2  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2234  000CD6  ECCE  F007         	call	_ES_PostAll	;wreg free
  2235                           
  2236                           ;Button.c: 120: }
  2237                           
  2238                           ;Button.c: 118: }
  2239                           ;Button.c: 119: break;
  2240  000CDA  D008               	goto	l2590
  2241  000CDC                     l2588:
  2242  000CDC  0100               	movlb	0	; () banked
  2243  000CDE  5190               	movf	_CurrentState& (0+255),w,b
  2244                           
  2245                           ; Switch size 1, requested type "space"
  2246                           ; Number of cases is 2, Range of values is 0 to 1
  2247                           ; switch strategies available:
  2248                           ; Name         Instructions Cycles
  2249                           ; simple_byte            7     4 (average)
  2250                           ;	Chosen strategy is simple_byte
  2251  000CE0  0A00               	xorlw	0	; case 0
  2252  000CE2  B4D8               	btfsc	status,2,c
  2253  000CE4  D7C1               	goto	l2566
  2254  000CE6  0A01               	xorlw	1	; case 1
  2255  000CE8  B4D8               	btfsc	status,2,c
  2256  000CEA  D7C7               	goto	l2570
  2257  000CEC                     l2590:
  2258                           
  2259                           ;Button.c: 122: ES_Event ReturnEvent;
  2260                           ;Button.c: 123: ReturnEvent.EventType = ES_NO_EVENT;
  2261  000CEC  0E00               	movlw	0
  2262  000CEE  0100               	movlb	0	; () banked
  2263  000CF0  6FDC               	movwf	RunButtonDebounceSM@ReturnEvent& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;Button.c: 124: return ReturnEvent;
  2267  000CF2  C0DC  F0D9         	movff	RunButtonDebounceSM@ReturnEvent,?_RunButtonDebounceSM
  2268  000CF6  C0DD  F0DA         	movff	RunButtonDebounceSM@ReturnEvent+1,?_RunButtonDebounceSM+1
  2269  000CFA  C0DE  F0DB         	movff	RunButtonDebounceSM@ReturnEvent+2,?_RunButtonDebounceSM+2
  2270  000CFE  0012               	return	
  2271  000D00                     __end_of_RunButtonDebounceSM:
  2272                           	opt stack 0
  2273                           tosu	equ	0xFFF
  2274                           tosh	equ	0xFFE
  2275                           tosl	equ	0xFFD
  2276                           pclath	equ	0xFFA
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _RunCan_XmitService *****************
  2293 ;; Defined at:
  2294 ;;		line 137 in file "Can_XmitService.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  ReturnEvent     3   34[BANK0 ] struct ES_Event_t
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  3   29[BANK0 ] struct ES_Event_t
  2301 ;; Registers used:
  2302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2308 ;;      Params:         0       3       0       0
  2309 ;;      Locals:         0       3       0       0
  2310 ;;      Temps:          0       2       0       0
  2311 ;;      Totals:         0       8       0       0
  2312 ;;Total ram usage:        8 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    8
  2315 ;; This function calls:
  2316 ;;		_InitCanHardware
  2317 ;;		_InitPins
  2318 ;;		_XmitData
  2319 ;; This function is called by:
  2320 ;;		_ES_Run
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text11
  2325  0008C6                     __ptext11:
  2326                           	opt stack 0
  2327  0008C6                     _RunCan_XmitService:
  2328                           	opt stack 21
  2329                           
  2330                           ;Can_XmitService.c: 139: ES_Event ReturnEvent;
  2331                           ;Can_XmitService.c: 141: if (ThisEvent.EventType == ES_INIT) {
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;incstack = 0
  2335  0008C6  0E02               	movlw	2
  2336  0008C8  0100               	movlb	0	; () banked
  2337  0008CA  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2338  0008CC  A4D8               	btfss	status,2,c
  2339  0008CE  D008               	goto	l2694
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;Can_XmitService.c: 142: InitPins();
  2343  0008D0  EC71  F00A         	call	_InitPins	;wreg free
  2344                           
  2345                           ;Can_XmitService.c: 143: InitCanHardware();
  2346  0008D4  EC0E  F007         	call	_InitCanHardware	;wreg free
  2347                           
  2348                           ;Can_XmitService.c: 144: LastData = 0x00;
  2349  0008D8  0E00               	movlw	0
  2350  0008DA  0100               	movlb	0	; () banked
  2351  0008DC  6F92               	movwf	_LastData& (0+255),b
  2352                           
  2353                           ;Can_XmitService.c: 145: } else if (ThisEvent.EventType == DBButtonDown) {
  2354  0008DE  D055               	goto	l2722
  2355  0008E0                     l2694:
  2356                           
  2357                           ; BSR set to: 0
  2358  0008E0  0E05               	movlw	5
  2359  0008E2  0100               	movlb	0	; () banked
  2360  0008E4  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2361  0008E6  B4D8               	btfsc	status,2,c
  2362  0008E8  D02D               	goto	l2716
  2363  0008EA  D046               	goto	l2718
  2364  0008EC                     l503:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;Can_XmitService.c: 148: LATA2 = 1;
  2368  0008EC  8489               	bsf	3977,2,c	;volatile
  2369                           
  2370                           ;Can_XmitService.c: 149: LATA3 = 0;
  2371  0008EE  9689               	bcf	3977,3,c	;volatile
  2372                           
  2373                           ;Can_XmitService.c: 150: LATA4 = 0;
  2374  0008F0  9889               	bcf	3977,4,c	;volatile
  2375                           
  2376                           ;Can_XmitService.c: 151: LATA5 = 0;
  2377  0008F2  9A89               	bcf	3977,5,c	;volatile
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;Can_XmitService.c: 152: LastData = 0x00;
  2381  0008F4  0E00               	movlw	0
  2382  0008F6  0100               	movlb	0	; () banked
  2383  0008F8  6F92               	movwf	_LastData& (0+255),b
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;Can_XmitService.c: 153: XmitData(0x00);
  2387  0008FA  0E00               	movlw	0
  2388  0008FC  EC90  F007         	call	_XmitData
  2389                           
  2390                           ;Can_XmitService.c: 154: break;
  2391  000900  D044               	goto	l2722
  2392  000902                     l505:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;Can_XmitService.c: 156: LATA2 = 0;
  2396  000902  9489               	bcf	3977,2,c	;volatile
  2397                           
  2398                           ;Can_XmitService.c: 157: LATA3 = 1;
  2399  000904  8689               	bsf	3977,3,c	;volatile
  2400                           
  2401                           ;Can_XmitService.c: 158: LATA4 = 0;
  2402  000906  9889               	bcf	3977,4,c	;volatile
  2403                           
  2404                           ;Can_XmitService.c: 159: LATA5 = 0;
  2405  000908  9A89               	bcf	3977,5,c	;volatile
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;Can_XmitService.c: 160: LastData = 0x02;
  2409  00090A  0E02               	movlw	2
  2410  00090C  0100               	movlb	0	; () banked
  2411  00090E  6F92               	movwf	_LastData& (0+255),b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;Can_XmitService.c: 161: XmitData(0x02);
  2415  000910  0E02               	movlw	2
  2416  000912  EC90  F007         	call	_XmitData
  2417                           
  2418                           ;Can_XmitService.c: 162: break;
  2419  000916  D039               	goto	l2722
  2420  000918                     l506:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;Can_XmitService.c: 164: LATA2 = 0;
  2424  000918  9489               	bcf	3977,2,c	;volatile
  2425                           
  2426                           ;Can_XmitService.c: 165: LATA3 = 0;
  2427  00091A  9689               	bcf	3977,3,c	;volatile
  2428                           
  2429                           ;Can_XmitService.c: 166: LATA4 = 1;
  2430  00091C  8889               	bsf	3977,4,c	;volatile
  2431                           
  2432                           ;Can_XmitService.c: 167: LATA5 = 0;
  2433  00091E  9A89               	bcf	3977,5,c	;volatile
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;Can_XmitService.c: 168: LastData = 0x01;
  2437  000920  0E01               	movlw	1
  2438  000922  0100               	movlb	0	; () banked
  2439  000924  6F92               	movwf	_LastData& (0+255),b
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;Can_XmitService.c: 169: XmitData(0x01);
  2443  000926  0E01               	movlw	1
  2444  000928  EC90  F007         	call	_XmitData
  2445                           
  2446                           ;Can_XmitService.c: 170: break;
  2447  00092C  D02E               	goto	l2722
  2448  00092E                     l507:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;Can_XmitService.c: 172: LATA2 = 0;
  2452  00092E  9489               	bcf	3977,2,c	;volatile
  2453                           
  2454                           ;Can_XmitService.c: 173: LATA3 = 0;
  2455  000930  9689               	bcf	3977,3,c	;volatile
  2456                           
  2457                           ;Can_XmitService.c: 174: LATA4 = 0;
  2458  000932  9889               	bcf	3977,4,c	;volatile
  2459                           
  2460                           ;Can_XmitService.c: 175: LATA5 = 1;
  2461  000934  8A89               	bsf	3977,5,c	;volatile
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;Can_XmitService.c: 176: LastData = 0x03;
  2465  000936  0E03               	movlw	3
  2466  000938  0100               	movlb	0	; () banked
  2467  00093A  6F92               	movwf	_LastData& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;Can_XmitService.c: 177: XmitData(0x03);
  2471  00093C  0E03               	movlw	3
  2472  00093E  EC90  F007         	call	_XmitData
  2473                           
  2474                           ;Can_XmitService.c: 179: }
  2475                           
  2476                           ;Can_XmitService.c: 178: break;
  2477  000942  D023               	goto	l2722
  2478  000944                     l2716:
  2479  000944  EE20  F0DA         	lfsr	2,RunCan_XmitService@ThisEvent+1
  2480  000948  CFDE F0DC          	movff	postinc2,??_RunCan_XmitService
  2481  00094C  CFDD F0DD          	movff	postdec2,??_RunCan_XmitService+1
  2482                           
  2483                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2484                           ; Switch size 1, requested type "space"
  2485                           ; Number of cases is 1, Range of values is 0 to 0
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte            4     3 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490  000950  0100               	movlb	0	; () banked
  2491  000952  51DD               	movf	(??_RunCan_XmitService+1)& (0+255),w,b
  2492  000954  0A00               	xorlw	0	; case 0
  2493  000956  A4D8               	btfss	status,2,c
  2494  000958  D018               	goto	l2722
  2495                           
  2496                           ; BSR set to: 0
  2497                           ; Switch size 1, requested type "space"
  2498                           ; Number of cases is 4, Range of values is 7 to 14
  2499                           ; switch strategies available:
  2500                           ; Name         Instructions Cycles
  2501                           ; simple_byte           13     7 (average)
  2502                           ;	Chosen strategy is simple_byte
  2503  00095A  0100               	movlb	0	; () banked
  2504  00095C  51DC               	movf	??_RunCan_XmitService& (0+255),w,b
  2505  00095E  0A07               	xorlw	7	; case 7
  2506  000960  B4D8               	btfsc	status,2,c
  2507  000962  D7E5               	goto	l507
  2508  000964  0A0C               	xorlw	12	; case 11
  2509  000966  B4D8               	btfsc	status,2,c
  2510  000968  D7D7               	goto	l506
  2511  00096A  0A06               	xorlw	6	; case 13
  2512  00096C  B4D8               	btfsc	status,2,c
  2513  00096E  D7C9               	goto	l505
  2514  000970  0A03               	xorlw	3	; case 14
  2515  000972  B4D8               	btfsc	status,2,c
  2516  000974  D7BB               	goto	l503
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;Can_XmitService.c: 180: } else if (ThisEvent.EventType == XMIT_EVENT) {
  2520  000976  D009               	goto	l2722
  2521  000978                     l2718:
  2522                           
  2523                           ; BSR set to: 0
  2524  000978  0E07               	movlw	7
  2525  00097A  0100               	movlb	0	; () banked
  2526  00097C  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2527  00097E  A4D8               	btfss	status,2,c
  2528  000980  D004               	goto	l2722
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;Can_XmitService.c: 181: XmitData(LastData);
  2532  000982  0100               	movlb	0	; () banked
  2533  000984  5192               	movf	_LastData& (0+255),w,b
  2534  000986  EC90  F007         	call	_XmitData
  2535  00098A                     l2722:
  2536                           
  2537                           ;Can_XmitService.c: 182: }
  2538                           ;Can_XmitService.c: 183: ReturnEvent.EventType = ES_NO_EVENT;
  2539  00098A  0E00               	movlw	0
  2540  00098C  0100               	movlb	0	; () banked
  2541  00098E  6FDE               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;Can_XmitService.c: 184: return ReturnEvent;
  2545  000990  C0DE  F0D9         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2546  000994  C0DF  F0DA         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2547  000998  C0E0  F0DB         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2548  00099C  0012               	return	
  2549  00099E                     __end_of_RunCan_XmitService:
  2550                           	opt stack 0
  2551                           tosu	equ	0xFFF
  2552                           tosh	equ	0xFFE
  2553                           tosl	equ	0xFFD
  2554                           pclath	equ	0xFFA
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           prodh	equ	0xFF4
  2560                           prodl	equ	0xFF3
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           indf2	equ	0xFDF
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _XmitData *****************
  2571 ;; Defined at:
  2572 ;;		line 296 in file "Can_XmitService.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  DataByte        1    wreg     unsigned char 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  DataByte        1    2[BANK0 ] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2586 ;;      Params:         0       0       0       0
  2587 ;;      Locals:         0       1       0       0
  2588 ;;      Temps:          0       0       0       0
  2589 ;;      Totals:         0       1       0       0
  2590 ;;Total ram usage:        1 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    7
  2593 ;; This function calls:
  2594 ;;		_GetBrightness
  2595 ;;		_GetLocation
  2596 ;; This function is called by:
  2597 ;;		_RunCan_XmitService
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text12
  2602  000F20                     __ptext12:
  2603                           	opt stack 0
  2604  000F20                     _XmitData:
  2605                           	opt stack 21
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;incstack = 0
  2609                           ;XmitData@DataByte stored from wreg
  2610  000F20  0100               	movlb	0	; () banked
  2611  000F22  6FBE               	movwf	XmitData@DataByte& (0+255),b
  2612                           
  2613                           ;Can_XmitService.c: 297: TXB0CONbits.TXREQ = 0;
  2614  000F24  010F               	movlb	15	; () banked
  2615  000F26  9740               	bcf	64,3,b	;volatile
  2616                           
  2617                           ; BSR set to: 15
  2618                           ;Can_XmitService.c: 300: TXB0DLC = 0x05;
  2619  000F28  0E05               	movlw	5
  2620  000F2A  010F               	movlb	15	; () banked
  2621  000F2C  6F45               	movwf	69,b	;volatile
  2622                           
  2623                           ; BSR set to: 15
  2624                           ;Can_XmitService.c: 301: TXB0D0 = DataByte;
  2625  000F2E  C0BE  FF46         	movff	XmitData@DataByte,3910	;volatile
  2626                           
  2627                           ; BSR set to: 15
  2628                           ;Can_XmitService.c: 302: TXB0D1 = (GetBrightness() >> 8) & 0xFF;
  2629  000F32  ECBC  F00A         	call	_GetBrightness	;wreg free
  2630  000F36  0100               	movlb	0	; () banked
  2631  000F38  C0BD  F0BC         	movff	?_GetBrightness+1,?_GetBrightness
  2632  000F3C  0100               	movlb	0	; () banked
  2633  000F3E  6BBD               	clrf	(?_GetBrightness+1)& (0+255),b
  2634  000F40  0100               	movlb	0	; () banked
  2635  000F42  51BC               	movf	?_GetBrightness& (0+255),w,b
  2636  000F44  010F               	movlb	15	; () banked
  2637  000F46  6F47               	movwf	71,b	;volatile
  2638                           
  2639                           ; BSR set to: 15
  2640                           ;Can_XmitService.c: 303: TXB0D2 = GetBrightness() & 0xFF;
  2641  000F48  ECBC  F00A         	call	_GetBrightness	;wreg free
  2642  000F4C  0100               	movlb	0	; () banked
  2643  000F4E  51BC               	movf	?_GetBrightness& (0+255),w,b
  2644  000F50  010F               	movlb	15	; () banked
  2645  000F52  6F48               	movwf	72,b	;volatile
  2646                           
  2647                           ; BSR set to: 15
  2648                           ;Can_XmitService.c: 304: TXB0D3 = (GetLocation() >> 8) & 0xFF;
  2649  000F54  ECB7  F00A         	call	_GetLocation	;wreg free
  2650  000F58  0100               	movlb	0	; () banked
  2651  000F5A  C0BD  F0BC         	movff	?_GetLocation+1,?_GetLocation
  2652  000F5E  0100               	movlb	0	; () banked
  2653  000F60  6BBD               	clrf	(?_GetLocation+1)& (0+255),b
  2654  000F62  0100               	movlb	0	; () banked
  2655  000F64  51BC               	movf	?_GetLocation& (0+255),w,b
  2656  000F66  010F               	movlb	15	; () banked
  2657  000F68  6F49               	movwf	73,b	;volatile
  2658                           
  2659                           ; BSR set to: 15
  2660                           ;Can_XmitService.c: 305: TXB0D4 = GetLocation() & 0xFF;
  2661  000F6A  ECB7  F00A         	call	_GetLocation	;wreg free
  2662  000F6E  0100               	movlb	0	; () banked
  2663  000F70  51BC               	movf	?_GetLocation& (0+255),w,b
  2664  000F72  010F               	movlb	15	; () banked
  2665  000F74  6F4A               	movwf	74,b	;volatile
  2666                           
  2667                           ; BSR set to: 15
  2668                           ;Can_XmitService.c: 308: TXB0SIDH = 0x00;
  2669  000F76  0E00               	movlw	0
  2670  000F78  010F               	movlb	15	; () banked
  2671  000F7A  6F41               	movwf	65,b	;volatile
  2672                           
  2673                           ; BSR set to: 15
  2674                           ;Can_XmitService.c: 309: TXB0SIDL = 0x08;
  2675  000F7C  0E08               	movlw	8
  2676  000F7E  010F               	movlb	15	; () banked
  2677  000F80  6F42               	movwf	66,b	;volatile
  2678                           
  2679                           ; BSR set to: 15
  2680                           ;Can_XmitService.c: 310: TXB0EIDH = 0x00;
  2681  000F82  0E00               	movlw	0
  2682  000F84  010F               	movlb	15	; () banked
  2683  000F86  6F43               	movwf	67,b	;volatile
  2684                           
  2685                           ; BSR set to: 15
  2686                           ;Can_XmitService.c: 311: TXB0EIDL = 0x01;
  2687  000F88  0E01               	movlw	1
  2688  000F8A  010F               	movlb	15	; () banked
  2689  000F8C  6F44               	movwf	68,b	;volatile
  2690                           
  2691                           ; BSR set to: 15
  2692                           ;Can_XmitService.c: 313: TXB0CONbits.TXPRI0 = 1;
  2693  000F8E  010F               	movlb	15	; () banked
  2694  000F90  8140               	bsf	64,0,b	;volatile
  2695                           
  2696                           ; BSR set to: 15
  2697                           ;Can_XmitService.c: 314: TXB0CONbits.TXPRI1 = 1;
  2698  000F92  010F               	movlb	15	; () banked
  2699  000F94  8340               	bsf	64,1,b	;volatile
  2700                           
  2701                           ; BSR set to: 15
  2702                           ;Can_XmitService.c: 316: TXB0CONbits.TXREQ = 1;
  2703  000F96  010F               	movlb	15	; () banked
  2704  000F98  8740               	bsf	64,3,b	;volatile
  2705                           
  2706                           ; BSR set to: 15
  2707  000F9A  0012               	return		;funcret
  2708  000F9C                     __end_of_XmitData:
  2709                           	opt stack 0
  2710                           tosu	equ	0xFFF
  2711                           tosh	equ	0xFFE
  2712                           tosl	equ	0xFFD
  2713                           pclath	equ	0xFFA
  2714                           tblptru	equ	0xFF8
  2715                           tblptrh	equ	0xFF7
  2716                           tblptrl	equ	0xFF6
  2717                           tablat	equ	0xFF5
  2718                           prodh	equ	0xFF4
  2719                           prodl	equ	0xFF3
  2720                           postinc0	equ	0xFEE
  2721                           wreg	equ	0xFE8
  2722                           indf2	equ	0xFDF
  2723                           postinc2	equ	0xFDE
  2724                           postdec2	equ	0xFDD
  2725                           fsr2h	equ	0xFDA
  2726                           fsr2l	equ	0xFD9
  2727                           status	equ	0xFD8
  2728                           
  2729 ;; *************** function _GetLocation *****************
  2730 ;; Defined at:
  2731 ;;		line 72 in file "Analog_Service.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2    0[BANK0 ] unsigned int 
  2738 ;; Registers used:
  2739 ;;		None
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2745 ;;      Params:         0       2       0       0
  2746 ;;      Locals:         0       0       0       0
  2747 ;;      Temps:          0       0       0       0
  2748 ;;      Totals:         0       2       0       0
  2749 ;;Total ram usage:        2 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    6
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_XmitData
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text13
  2760  00156E                     __ptext13:
  2761                           	opt stack 0
  2762  00156E                     _GetLocation:
  2763                           	opt stack 21
  2764                           
  2765                           ;Analog_Service.c: 74: return Location;
  2766                           
  2767                           ; BSR set to: 15
  2768                           ;incstack = 0
  2769  00156E  C087  F0BC         	movff	_Location,?_GetLocation
  2770  001572  C088  F0BD         	movff	_Location+1,?_GetLocation+1
  2771  001576  0012               	return		;funcret
  2772  001578                     __end_of_GetLocation:
  2773                           	opt stack 0
  2774                           tosu	equ	0xFFF
  2775                           tosh	equ	0xFFE
  2776                           tosl	equ	0xFFD
  2777                           pclath	equ	0xFFA
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           indf2	equ	0xFDF
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _GetBrightness *****************
  2794 ;; Defined at:
  2795 ;;		line 67 in file "Analog_Service.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2    0[BANK0 ] unsigned int 
  2802 ;; Registers used:
  2803 ;;		None
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2809 ;;      Params:         0       2       0       0
  2810 ;;      Locals:         0       0       0       0
  2811 ;;      Temps:          0       0       0       0
  2812 ;;      Totals:         0       2       0       0
  2813 ;;Total ram usage:        2 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    6
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_XmitData
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text14
  2824  001578                     __ptext14:
  2825                           	opt stack 0
  2826  001578                     _GetBrightness:
  2827                           	opt stack 21
  2828                           
  2829                           ;Analog_Service.c: 69: return Brightness;
  2830                           
  2831                           ;incstack = 0
  2832  001578  C085  F0BC         	movff	_Brightness,?_GetBrightness
  2833  00157C  C086  F0BD         	movff	_Brightness+1,?_GetBrightness+1
  2834  001580  0012               	return		;funcret
  2835  001582                     __end_of_GetBrightness:
  2836                           	opt stack 0
  2837                           tosu	equ	0xFFF
  2838                           tosh	equ	0xFFE
  2839                           tosl	equ	0xFFD
  2840                           pclath	equ	0xFFA
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           indf2	equ	0xFDF
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _InitPins *****************
  2857 ;; Defined at:
  2858 ;;		line 280 in file "Can_XmitService.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2872 ;;      Params:         0       0       0       0
  2873 ;;      Locals:         0       0       0       0
  2874 ;;      Temps:          0       0       0       0
  2875 ;;      Totals:         0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    6
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_RunCan_XmitService
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text15
  2887  0014E2                     __ptext15:
  2888                           	opt stack 0
  2889  0014E2                     _InitPins:
  2890                           	opt stack 22
  2891                           
  2892                           ;Can_XmitService.c: 283: PORTB = 0x00;
  2893                           
  2894                           ;incstack = 0
  2895  0014E2  0E00               	movlw	0
  2896  0014E4  6E81               	movwf	3969,c	;volatile
  2897                           
  2898                           ;Can_XmitService.c: 284: LATB = 0x00;
  2899  0014E6  0E00               	movlw	0
  2900  0014E8  6E8A               	movwf	3978,c	;volatile
  2901                           
  2902                           ;Can_XmitService.c: 285: TRISBbits.TRISB2 = 0;
  2903  0014EA  9493               	bcf	3987,2,c	;volatile
  2904                           
  2905                           ;Can_XmitService.c: 286: TRISBbits.TRISB3 = 1;
  2906  0014EC  8693               	bsf	3987,3,c	;volatile
  2907                           
  2908                           ;Can_XmitService.c: 289: PORTA = 0x00;
  2909  0014EE  0E00               	movlw	0
  2910  0014F0  6E80               	movwf	3968,c	;volatile
  2911                           
  2912                           ;Can_XmitService.c: 290: LATA &= 0b11111100;
  2913  0014F2  0EFC               	movlw	252
  2914  0014F4  1689               	andwf	3977,f,c	;volatile
  2915                           
  2916                           ;Can_XmitService.c: 291: TRISA &= 0b00000011;
  2917  0014F6  0E03               	movlw	3
  2918  0014F8  1692               	andwf	3986,f,c	;volatile
  2919  0014FA  0012               	return		;funcret
  2920  0014FC                     __end_of_InitPins:
  2921                           	opt stack 0
  2922                           tosu	equ	0xFFF
  2923                           tosh	equ	0xFFE
  2924                           tosl	equ	0xFFD
  2925                           pclath	equ	0xFFA
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           indf2	equ	0xFDF
  2935                           postinc2	equ	0xFDE
  2936                           postdec2	equ	0xFDD
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function _InitCanHardware *****************
  2942 ;; Defined at:
  2943 ;;		line 212 in file "Can_XmitService.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2957 ;;      Params:         0       0       0       0
  2958 ;;      Locals:         0       0       0       0
  2959 ;;      Temps:          0       0       0       0
  2960 ;;      Totals:         0       0       0       0
  2961 ;;Total ram usage:        0 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    6
  2964 ;; This function calls:
  2965 ;;		Nothing
  2966 ;; This function is called by:
  2967 ;;		_RunCan_XmitService
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text16
  2972  000E1C                     __ptext16:
  2973                           	opt stack 0
  2974  000E1C                     _InitCanHardware:
  2975                           	opt stack 22
  2976                           
  2977                           ;Can_XmitService.c: 216: CANCON = 0x80;
  2978                           
  2979                           ;incstack = 0
  2980  000E1C  0E80               	movlw	128
  2981  000E1E  6E6F               	movwf	3951,c	;volatile
  2982  000E20                     l526:
  2983  000E20  AE6E               	btfss	3950,7,c	;volatile
  2984  000E22  D7FE               	goto	l526
  2985                           
  2986                           ;Can_XmitService.c: 219: CIOCON = 0x20;
  2987  000E24  0E20               	movlw	32
  2988  000E26  6E73               	movwf	3955,c	;volatile
  2989                           
  2990                           ;Can_XmitService.c: 222: BRGCON2bits.SEG2PHTS = 1;
  2991  000E28  8E71               	bsf	3953,7,c	;volatile
  2992                           
  2993                           ;Can_XmitService.c: 224: BRGCON1bits.BRP0 = 0;
  2994  000E2A  9070               	bcf	3952,0,c	;volatile
  2995                           
  2996                           ;Can_XmitService.c: 225: BRGCON1bits.BRP1 = 1;
  2997  000E2C  8270               	bsf	3952,1,c	;volatile
  2998                           
  2999                           ;Can_XmitService.c: 226: BRGCON1bits.BRP2 = 1;
  3000  000E2E  8470               	bsf	3952,2,c	;volatile
  3001                           
  3002                           ;Can_XmitService.c: 227: BRGCON1bits.BRP3 = 0;
  3003  000E30  9670               	bcf	3952,3,c	;volatile
  3004                           
  3005                           ;Can_XmitService.c: 229: BRGCON2bits.PRSEG0 = 0;
  3006  000E32  9071               	bcf	3953,0,c	;volatile
  3007                           
  3008                           ;Can_XmitService.c: 230: BRGCON2bits.PRSEG1 = 0;
  3009  000E34  9271               	bcf	3953,1,c	;volatile
  3010                           
  3011                           ;Can_XmitService.c: 231: BRGCON2bits.PRSEG2 = 0;
  3012  000E36  9471               	bcf	3953,2,c	;volatile
  3013                           
  3014                           ;Can_XmitService.c: 233: BRGCON2bits.SEG1PH0 = 0;
  3015  000E38  9671               	bcf	3953,3,c	;volatile
  3016                           
  3017                           ;Can_XmitService.c: 234: BRGCON2bits.SEG1PH1 = 0;
  3018  000E3A  9871               	bcf	3953,4,c	;volatile
  3019                           
  3020                           ;Can_XmitService.c: 235: BRGCON2bits.SEG1PH2 = 0;
  3021  000E3C  9A71               	bcf	3953,5,c	;volatile
  3022                           
  3023                           ;Can_XmitService.c: 237: BRGCON3bits.SEG2PH0 = 1;
  3024  000E3E  8072               	bsf	3954,0,c	;volatile
  3025                           
  3026                           ;Can_XmitService.c: 238: BRGCON3bits.SEG2PH1 = 0;
  3027  000E40  9272               	bcf	3954,1,c	;volatile
  3028                           
  3029                           ;Can_XmitService.c: 239: BRGCON3bits.SEG2PH2 = 0;
  3030  000E42  9472               	bcf	3954,2,c	;volatile
  3031                           
  3032                           ;Can_XmitService.c: 241: BRGCON1bits.SJW0 = 0;
  3033  000E44  9C70               	bcf	3952,6,c	;volatile
  3034                           
  3035                           ;Can_XmitService.c: 245: RXB0CONbits.RXB0DBEN = 0;
  3036  000E46  9460               	bcf	3936,2,c	;volatile
  3037                           
  3038                           ;Can_XmitService.c: 246: RXB0CONbits.RXM0 = 0;
  3039  000E48  9A60               	bcf	3936,5,c	;volatile
  3040                           
  3041                           ;Can_XmitService.c: 247: RXB0CONbits.RXM1 = 0;
  3042  000E4A  9C60               	bcf	3936,6,c	;volatile
  3043                           
  3044                           ;Can_XmitService.c: 248: RXF0SIDH = 0x00;
  3045  000E4C  0E00               	movlw	0
  3046  000E4E  010F               	movlb	15	; () banked
  3047  000E50  6F00               	movwf	0,b	;volatile
  3048                           
  3049                           ;Can_XmitService.c: 249: RXF0SIDL = 0x08;
  3050  000E52  0E08               	movlw	8
  3051  000E54  010F               	movlb	15	; () banked
  3052  000E56  6F01               	movwf	1,b	;volatile
  3053                           
  3054                           ;Can_XmitService.c: 250: RXF0EIDH = 0x00;
  3055  000E58  0E00               	movlw	0
  3056  000E5A  010F               	movlb	15	; () banked
  3057  000E5C  6F02               	movwf	2,b	;volatile
  3058                           
  3059                           ;Can_XmitService.c: 251: RXF0EIDL = 0x01;
  3060  000E5E  0E01               	movlw	1
  3061  000E60  010F               	movlb	15	; () banked
  3062  000E62  6F03               	movwf	3,b	;volatile
  3063                           
  3064                           ;Can_XmitService.c: 253: RXM0SIDH = 0x00;
  3065  000E64  0E00               	movlw	0
  3066  000E66  010F               	movlb	15	; () banked
  3067  000E68  6F18               	movwf	24,b	;volatile
  3068                           
  3069                           ;Can_XmitService.c: 254: RXM0SIDL = 0x00;
  3070  000E6A  0E00               	movlw	0
  3071  000E6C  010F               	movlb	15	; () banked
  3072  000E6E  6F19               	movwf	25,b	;volatile
  3073                           
  3074                           ;Can_XmitService.c: 255: RXM0EIDH = 0x00;
  3075  000E70  0E00               	movlw	0
  3076  000E72  010F               	movlb	15	; () banked
  3077  000E74  6F1A               	movwf	26,b	;volatile
  3078                           
  3079                           ;Can_XmitService.c: 256: RXM0EIDL = 0x01;
  3080  000E76  0E01               	movlw	1
  3081  000E78  010F               	movlb	15	; () banked
  3082  000E7A  6F1B               	movwf	27,b	;volatile
  3083                           
  3084                           ;Can_XmitService.c: 260: ECANCON = 0x00;
  3085  000E7C  0E00               	movlw	0
  3086  000E7E  6E77               	movwf	3959,c	;volatile
  3087                           
  3088                           ;Can_XmitService.c: 261: CANCON = 0b00010000;
  3089  000E80  0E10               	movlw	16
  3090  000E82  6E6F               	movwf	3951,c	;volatile
  3091  000E84                     l529:
  3092  000E84  BE6E               	btfsc	3950,7,c	;volatile
  3093  000E86  D7FE               	goto	l529
  3094                           
  3095                           ;Can_XmitService.c: 265: RXB0IE = 1;
  3096  000E88  80A3               	bsf	4003,0,c	;volatile
  3097                           
  3098                           ;Can_XmitService.c: 266: ERRIE = 1;
  3099  000E8A  8AA3               	bsf	4003,5,c	;volatile
  3100                           
  3101                           ;Can_XmitService.c: 267: IRXIE = 1;
  3102  000E8C  8EA3               	bsf	4003,7,c	;volatile
  3103                           
  3104                           ;Can_XmitService.c: 271: RXB0IF = 0;
  3105  000E8E  90A4               	bcf	4004,0,c	;volatile
  3106                           
  3107                           ;Can_XmitService.c: 272: ERRIF = 0;
  3108  000E90  9AA4               	bcf	4004,5,c	;volatile
  3109                           
  3110                           ;Can_XmitService.c: 273: IRXIF = 0;
  3111  000E92  9EA4               	bcf	4004,7,c	;volatile
  3112                           
  3113                           ;Can_XmitService.c: 274: TXB0IE = 1;
  3114  000E94  84A3               	bsf	4003,2,c	;volatile
  3115                           
  3116                           ;Can_XmitService.c: 275: TXB0IF = 0;
  3117  000E96  94A4               	bcf	4004,2,c	;volatile
  3118                           
  3119                           ;Can_XmitService.c: 276: TXB0CONbits.TXREQ = 0;
  3120  000E98  010F               	movlb	15	; () banked
  3121  000E9A  9740               	bcf	64,3,b	;volatile
  3122                           
  3123                           ;Can_XmitService.c: 277: RXB0CONbits.RXFUL = 0;
  3124  000E9C  9E60               	bcf	3936,7,c	;volatile
  3125                           
  3126                           ; BSR set to: 15
  3127  000E9E  0012               	return		;funcret
  3128  000EA0                     __end_of_InitCanHardware:
  3129                           	opt stack 0
  3130                           tosu	equ	0xFFF
  3131                           tosh	equ	0xFFE
  3132                           tosl	equ	0xFFD
  3133                           pclath	equ	0xFFA
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _ES_PostAll *****************
  3150 ;; Defined at:
  3151 ;;		line 318 in file "ES_Framework.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  i               1   28[BANK0 ] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      unsigned char 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3165 ;;      Params:         0       3       0       0
  3166 ;;      Locals:         0       1       0       0
  3167 ;;      Temps:          0       2       0       0
  3168 ;;      Totals:         0       6       0       0
  3169 ;;Total ram usage:        6 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    8
  3172 ;; This function calls:
  3173 ;;		_ES_EnQueueFIFO
  3174 ;; This function is called by:
  3175 ;;		_RunButtonDebounceSM
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text17
  3180  000F9C                     __ptext17:
  3181                           	opt stack 0
  3182  000F9C                     _ES_PostAll:
  3183                           	opt stack 20
  3184                           
  3185                           ;ES_Framework.c: 320: uint8_t i;
  3186                           ;ES_Framework.c: 322: for ( i=0; i< (sizeof(EventQueues)/sizeof(EventQueues[0])); i++) {
  3187                           
  3188                           ; BSR set to: 15
  3189                           ;incstack = 0
  3190  000F9C  0E00               	movlw	0
  3191  000F9E  0100               	movlb	0	; () banked
  3192  000FA0  6FD8               	movwf	ES_PostAll@i& (0+255),b
  3193  000FA2                     l2370:
  3194                           
  3195                           ; BSR set to: 0
  3196  000FA2  0E02               	movlw	2
  3197  000FA4  0100               	movlb	0	; () banked
  3198  000FA6  65D8               	cpfsgt	ES_PostAll@i& (0+255),b
  3199  000FA8  D001               	goto	l2374
  3200  000FAA  0012               	return	
  3201  000FAC                     l2374:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;ES_Framework.c: 323: if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != 1 ){
  3205  000FAC  0100               	movlb	0	; () banked
  3206  000FAE  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3207  000FB0  0D03               	mullw	3
  3208  000FB2  0E5C               	movlw	low _EventQueues
  3209  000FB4  24F3               	addwf	prodl,w,c
  3210  000FB6  6EF6               	movwf	tblptrl,c
  3211  000FB8  0E03               	movlw	high _EventQueues
  3212  000FBA  20F4               	addwfc	prodh,w,c
  3213  000FBC  6EF7               	movwf	tblptrh,c
  3214  000FBE                     	if	0	;There are less than 3 active tblptr bytes
  3215  000FBE                     	endif
  3216  000FBE  0009               	tblrd		*+
  3217  000FC0  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  3218  000FC4  000A               	tblrd		*-
  3219  000FC6  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3220  000FCA  C0D3  F0CA         	movff	ES_PostAll@ThisEvent,ES_EnQueueFIFO@Event2Add
  3221  000FCE  C0D4  F0CB         	movff	ES_PostAll@ThisEvent+1,ES_EnQueueFIFO@Event2Add+1
  3222  000FD2  C0D5  F0CC         	movff	ES_PostAll@ThisEvent+2,ES_EnQueueFIFO@Event2Add+2
  3223  000FD6  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3224  000FDA  06E8               	decf	wreg,f,c
  3225  000FDC  A4D8               	btfss	status,2,c
  3226  000FDE  0012               	return	
  3227                           
  3228                           ;ES_Framework.c: 326: Ready |= BitNum2SetMask[i];
  3229                           
  3230                           ;ES_Framework.c: 325: }else{
  3231                           
  3232                           ;ES_Framework.c: 324: break;
  3233  000FE0  0100               	movlb	0	; () banked
  3234  000FE2  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3235  000FE4  0D02               	mullw	2
  3236  000FE6  0E01               	movlw	low _BitNum2SetMask
  3237  000FE8  24F3               	addwf	prodl,w,c
  3238  000FEA  6EF6               	movwf	tblptrl,c
  3239  000FEC  0E03               	movlw	high _BitNum2SetMask
  3240  000FEE  20F4               	addwfc	prodh,w,c
  3241  000FF0  6EF7               	movwf	tblptrh,c
  3242  000FF2                     	if	0	;There are less than 3 active tblptr bytes
  3243  000FF2                     	endif
  3244  000FF2  0009               	tblrd		*+
  3245  000FF4  CFF5 F0D6          	movff	tablat,??_ES_PostAll
  3246  000FF8  0009               	tblrd		*+
  3247  000FFA  CFF5 F0D7          	movff	tablat,??_ES_PostAll+1
  3248  000FFE  0100               	movlb	0	; () banked
  3249  001000  51D6               	movf	??_ES_PostAll& (0+255),w,b
  3250  001002  0100               	movlb	0	; () banked
  3251  001004  1389               	iorwf	_Ready& (0+255),f,b
  3252  001006  0100               	movlb	0	; () banked
  3253  001008  51D7               	movf	(??_ES_PostAll+1)& (0+255),w,b
  3254  00100A  0100               	movlb	0	; () banked
  3255  00100C  138A               	iorwf	(_Ready+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258  00100E  0100               	movlb	0	; () banked
  3259  001010  2BD8               	incf	ES_PostAll@i& (0+255),f,b
  3260  001012  D7C7               	goto	l2370
  3261  001014                     __end_of_ES_PostAll:
  3262                           	opt stack 0
  3263                           tosu	equ	0xFFF
  3264                           tosh	equ	0xFFE
  3265                           tosl	equ	0xFFD
  3266                           pclath	equ	0xFFA
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           postinc0	equ	0xFEE
  3274                           wreg	equ	0xFE8
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function _InitAnalogHW *****************
  3283 ;; Defined at:
  3284 ;;		line 95 in file "Analog_Service.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3298 ;;      Params:         0       0       0       0
  3299 ;;      Locals:         0       0       0       0
  3300 ;;      Temps:          0       0       0       0
  3301 ;;      Totals:         0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    6
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_RunAnalogService
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text18
  3313  00144E                     __ptext18:
  3314                           	opt stack 0
  3315  00144E                     _InitAnalogHW:
  3316                           	opt stack 22
  3317                           
  3318                           ;Analog_Service.c: 97: PORTA = 0x00;
  3319                           
  3320                           ;incstack = 0
  3321  00144E  0E00               	movlw	0
  3322  001450  6E80               	movwf	3968,c	;volatile
  3323                           
  3324                           ;Analog_Service.c: 98: LATA = 0x00;
  3325  001452  0E00               	movlw	0
  3326  001454  6E89               	movwf	3977,c	;volatile
  3327                           
  3328                           ;Analog_Service.c: 99: TRISAbits.TRISA0 = 1;
  3329  001456  8092               	bsf	3986,0,c	;volatile
  3330                           
  3331                           ;Analog_Service.c: 100: TRISAbits.TRISA1 = 1;
  3332  001458  8292               	bsf	3986,1,c	;volatile
  3333                           
  3334                           ;Analog_Service.c: 102: ADCON1bits.VCFG1 = 0;
  3335  00145A  9AC1               	bcf	4033,5,c	;volatile
  3336                           
  3337                           ;Analog_Service.c: 103: ADCON1bits.VCFG0 = 0;
  3338  00145C  98C1               	bcf	4033,4,c	;volatile
  3339                           
  3340                           ;Analog_Service.c: 105: ADCON2bits.ADFM = 1;
  3341  00145E  8EC0               	bsf	4032,7,c	;volatile
  3342                           
  3343                           ;Analog_Service.c: 106: ADCON2bits.ACQT = 0b100;
  3344  001460  50C0               	movf	4032,w,c	;volatile
  3345  001462  0BC7               	andlw	-57
  3346  001464  0920               	iorlw	32
  3347  001466  6EC0               	movwf	4032,c	;volatile
  3348                           
  3349                           ;Analog_Service.c: 107: ADCON2bits.ADCS = 0b001;
  3350  001468  50C0               	movf	4032,w,c	;volatile
  3351  00146A  0BF8               	andlw	-8
  3352  00146C  0901               	iorlw	1
  3353  00146E  6EC0               	movwf	4032,c	;volatile
  3354                           
  3355                           ;Analog_Service.c: 109: ADCON0bits.ADON = 1;
  3356  001470  80C2               	bsf	4034,0,c	;volatile
  3357                           
  3358                           ;Analog_Service.c: 110: ADIF = 0;
  3359  001472  9C9E               	bcf	3998,6,c	;volatile
  3360                           
  3361                           ;Analog_Service.c: 111: ADIE = 1;
  3362  001474  8C9D               	bsf	3997,6,c	;volatile
  3363  001476  0012               	return		;funcret
  3364  001478                     __end_of_InitAnalogHW:
  3365                           	opt stack 0
  3366                           tosu	equ	0xFFF
  3367                           tosh	equ	0xFFE
  3368                           tosl	equ	0xFFD
  3369                           pclath	equ	0xFFA
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           postinc0	equ	0xFEE
  3377                           wreg	equ	0xFE8
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _ES_DeQueue *****************
  3386 ;; Defined at:
  3387 ;;		line 164 in file "ES_Queue.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3390 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3391 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  3392 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  3395 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3396 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  3397 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      unsigned char 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       4       0       0
  3408 ;;      Locals:         0       4       0       0
  3409 ;;      Temps:          0       2       0       0
  3410 ;;      Totals:         0      10       0       0
  3411 ;;Total ram usage:       10 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    7
  3414 ;; This function calls:
  3415 ;;		___lbmod
  3416 ;;		___wmul
  3417 ;; This function is called by:
  3418 ;;		_ES_Run
  3419 ;;		_ES_RecallEvents
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text19
  3424  0003C6                     __ptext19:
  3425                           	opt stack 0
  3426  0003C6                     _ES_DeQueue:
  3427                           	opt stack 22
  3428                           
  3429                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  3430                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  3431                           ;ES_Queue.c: 168: uint8_t NumLeft;
  3432                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  3433                           
  3434                           ;incstack = 0
  3435  0003C6  C0C8  F0D0         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  3436  0003CA  C0C9  F0D1         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  3437                           
  3438                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  3439  0003CE  0100               	movlb	0	; () banked
  3440  0003D0  EE20 F002          	lfsr	2,2
  3441  0003D4  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3442  0003D6  26D9               	addwf	fsr2l,f,c
  3443  0003D8  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3444  0003DA  22DA               	addwfc	fsr2h,f,c
  3445  0003DC  50DF               	movf	indf2,w,c
  3446  0003DE  B4D8               	btfsc	status,2,c
  3447  0003E0  D06F               	goto	l2632
  3448                           
  3449                           ; BSR set to: 0
  3450                           
  3451                           ;ES_Queue.c: 172: {
  3452                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3453  0003E2  CFF2 F0CE          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  3454  0003E6  9EF2               	bcf	intcon,7,c	;volatile
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3458                           
  3459                           ; BSR set to: 0
  3460  0003E8  0100               	movlb	0	; () banked
  3461  0003EA  EE20 F001          	lfsr	2,1
  3462  0003EE  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3463  0003F0  26D9               	addwf	fsr2l,f,c
  3464  0003F2  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3465  0003F4  22DA               	addwfc	fsr2h,f,c
  3466  0003F6  50DF               	movf	indf2,w,c
  3467  0003F8  0100               	movlb	0	; () banked
  3468  0003FA  6FCC               	movwf	??_ES_DeQueue& (0+255),b
  3469  0003FC  0E01               	movlw	1
  3470  0003FE  0100               	movlb	0	; () banked
  3471  000400  25CC               	addwf	??_ES_DeQueue& (0+255),w,b
  3472  000402  0100               	movlb	0	; () banked
  3473  000404  6FC2               	movwf	___wmul@multiplier& (0+255),b
  3474  000406  0100               	movlb	0	; () banked
  3475  000408  6BC3               	clrf	(___wmul@multiplier+1)& (0+255),b
  3476  00040A  0E00               	movlw	0
  3477  00040C  23C3               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  3478  00040E  0E00               	movlw	0
  3479  000410  0100               	movlb	0	; () banked
  3480  000412  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3481  000414  0E03               	movlw	3
  3482  000416  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  3483  000418  ECAB  F009         	call	___wmul	;wreg free
  3484  00041C  0100               	movlb	0	; () banked
  3485  00041E  51C2               	movf	?___wmul& (0+255),w,b
  3486  000420  0100               	movlb	0	; () banked
  3487  000422  25C8               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  3488  000424  6ED9               	movwf	fsr2l,c
  3489  000426  0100               	movlb	0	; () banked
  3490  000428  51C3               	movf	(?___wmul+1)& (0+255),w,b
  3491  00042A  0100               	movlb	0	; () banked
  3492  00042C  21C9               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  3493  00042E  6EDA               	movwf	fsr2h,c
  3494  000430  C0CA  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  3495  000434  C0CB  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  3496  000438  CFDE FFE6          	movff	postinc2,postinc1
  3497  00043C  CFDE FFE6          	movff	postinc2,postinc1
  3498  000440  CFDE FFE6          	movff	postinc2,postinc1
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  3502  000444  0100               	movlb	0	; () banked
  3503  000446  EE20 F001          	lfsr	2,1
  3504  00044A  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3505  00044C  26D9               	addwf	fsr2l,f,c
  3506  00044E  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3507  000450  22DA               	addwfc	fsr2h,f,c
  3508  000452  2ADF               	incf	indf2,f,c
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3512  000454  C0D0  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  3513  000458  C0D1  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  3514  00045C  0100               	movlb	0	; () banked
  3515  00045E  EE10 F001          	lfsr	1,1
  3516  000462  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3517  000464  26E1               	addwf	fsr1l,f,c
  3518  000466  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3519  000468  22E2               	addwfc	fsr1h,f,c
  3520  00046A  50DE               	movf	postinc2,w,c
  3521  00046C  5CE6               	subwf	postinc1,w,c
  3522  00046E  A0D8               	btfss	status,0,c
  3523  000470  D019               	goto	l2628
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  3527  000472  0100               	movlb	0	; () banked
  3528  000474  EE20 F001          	lfsr	2,1
  3529  000478  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3530  00047A  26D9               	addwf	fsr2l,f,c
  3531  00047C  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3532  00047E  22DA               	addwfc	fsr2h,f,c
  3533  000480  C0D0  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  3534  000484  C0D1  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  3535  000488  50E7               	movf	indf1,w,c
  3536  00048A  0100               	movlb	0	; () banked
  3537  00048C  6FBC               	movwf	___lbmod@divisor& (0+255),b
  3538  00048E  0100               	movlb	0	; () banked
  3539  000490  EE10 F001          	lfsr	1,1
  3540  000494  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3541  000496  26E1               	addwf	fsr1l,f,c
  3542  000498  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3543  00049A  22E2               	addwfc	fsr1h,f,c
  3544  00049C  50E7               	movf	indf1,w,c
  3545  00049E  EC6B  F009         	call	___lbmod
  3546  0004A2  6EDF               	movwf	indf2,c
  3547  0004A4                     l2628:
  3548                           
  3549                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  3550  0004A4  0100               	movlb	0	; () banked
  3551  0004A6  EE20 F002          	lfsr	2,2
  3552  0004AA  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3553  0004AC  26D9               	addwf	fsr2l,f,c
  3554  0004AE  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3555  0004B0  22DA               	addwfc	fsr2h,f,c
  3556  0004B2  06DF               	decf	indf2,f,c
  3557  0004B4  50DF               	movf	indf2,w,c
  3558  0004B6  0100               	movlb	0	; () banked
  3559  0004B8  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  3563  0004BA  C0CE  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  3564                           
  3565                           ;ES_Queue.c: 183: }else {
  3566  0004BE  D014               	goto	l2638
  3567  0004C0                     l2632:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  3571  0004C0  C0CA  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  3572  0004C4  C0CB  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  3573  0004C8  0E00               	movlw	0
  3574  0004CA  6EDF               	movwf	indf2,c
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  3578  0004CC  0100               	movlb	0	; () banked
  3579  0004CE  EE20 F001          	lfsr	2,1
  3580  0004D2  51CA               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  3581  0004D4  26D9               	addwf	fsr2l,f,c
  3582  0004D6  51CB               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  3583  0004D8  22DA               	addwfc	fsr2h,f,c
  3584  0004DA  0E00               	movlw	0
  3585  0004DC  6EDE               	movwf	postinc2,c
  3586  0004DE  0E00               	movlw	0
  3587  0004E0  6EDD               	movwf	postdec2,c
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;ES_Queue.c: 186: NumLeft = 0;
  3591  0004E2  0E00               	movlw	0
  3592  0004E4  0100               	movlb	0	; () banked
  3593  0004E6  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3594  0004E8                     l2638:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;ES_Queue.c: 187: }
  3598                           ;ES_Queue.c: 188: return NumLeft;
  3599  0004E8  0100               	movlb	0	; () banked
  3600  0004EA  51CF               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  3601  0004EC  0012               	return	
  3602  0004EE                     __end_of_ES_DeQueue:
  3603                           	opt stack 0
  3604                           tosu	equ	0xFFF
  3605                           tosh	equ	0xFFE
  3606                           tosl	equ	0xFFD
  3607                           pclath	equ	0xFFA
  3608                           tblptru	equ	0xFF8
  3609                           tblptrh	equ	0xFF7
  3610                           tblptrl	equ	0xFF6
  3611                           tablat	equ	0xFF5
  3612                           prodh	equ	0xFF4
  3613                           prodl	equ	0xFF3
  3614                           intcon	equ	0xFF2
  3615                           postinc0	equ	0xFEE
  3616                           wreg	equ	0xFE8
  3617                           indf1	equ	0xFE7
  3618                           postinc1	equ	0xFE6
  3619                           fsr1h	equ	0xFE2
  3620                           fsr1l	equ	0xFE1
  3621                           indf2	equ	0xFDF
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           fsr2h	equ	0xFDA
  3625                           fsr2l	equ	0xFD9
  3626                           status	equ	0xFD8
  3627                           
  3628 ;; *************** function ___lbmod *****************
  3629 ;; Defined at:
  3630 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  dividend        1    wreg     unsigned char 
  3633 ;;  divisor         1    0[BANK0 ] unsigned char 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  dividend        1    1[BANK0 ] unsigned char 
  3636 ;;  rem             1    3[BANK0 ] unsigned char 
  3637 ;;  counter         1    2[BANK0 ] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      unsigned char 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3647 ;;      Params:         0       1       0       0
  3648 ;;      Locals:         0       3       0       0
  3649 ;;      Temps:          0       0       0       0
  3650 ;;      Totals:         0       4       0       0
  3651 ;;Total ram usage:        4 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    6
  3654 ;; This function calls:
  3655 ;;		Nothing
  3656 ;; This function is called by:
  3657 ;;		_ES_DeQueue
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text20
  3662  0012D6                     __ptext20:
  3663                           	opt stack 0
  3664  0012D6                     ___lbmod:
  3665                           	opt stack 22
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;incstack = 0
  3669                           ;___lbmod@dividend stored from wreg
  3670  0012D6  0100               	movlb	0	; () banked
  3671  0012D8  6FBD               	movwf	___lbmod@dividend& (0+255),b
  3672  0012DA  0E08               	movlw	8
  3673  0012DC  0100               	movlb	0	; () banked
  3674  0012DE  6FBE               	movwf	___lbmod@counter& (0+255),b
  3675  0012E0  0E00               	movlw	0
  3676  0012E2  0100               	movlb	0	; () banked
  3677  0012E4  6FBF               	movwf	___lbmod@rem& (0+255),b
  3678  0012E6                     l2520:
  3679                           
  3680                           ; BSR set to: 0
  3681  0012E6  90D8               	bcf	status,0,c
  3682  0012E8  0100               	movlb	0	; () banked
  3683  0012EA  35BD               	rlcf	___lbmod@dividend& (0+255),w,b
  3684  0012EC  0100               	movlb	0	; () banked
  3685  0012EE  35BF               	rlcf	___lbmod@rem& (0+255),w,b
  3686  0012F0  0100               	movlb	0	; () banked
  3687  0012F2  6FBF               	movwf	___lbmod@rem& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690  0012F4  0100               	movlb	0	; () banked
  3691  0012F6  90D8               	bcf	status,0,c
  3692  0012F8  37BD               	rlcf	___lbmod@dividend& (0+255),f,b
  3693                           
  3694                           ; BSR set to: 0
  3695  0012FA  0100               	movlb	0	; () banked
  3696  0012FC  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3697  0012FE  0100               	movlb	0	; () banked
  3698  001300  5DBF               	subwf	___lbmod@rem& (0+255),w,b
  3699  001302  A0D8               	btfss	status,0,c
  3700  001304  D004               	goto	l2528
  3701                           
  3702                           ; BSR set to: 0
  3703  001306  0100               	movlb	0	; () banked
  3704  001308  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3705  00130A  0100               	movlb	0	; () banked
  3706  00130C  5FBF               	subwf	___lbmod@rem& (0+255),f,b
  3707  00130E                     l2528:
  3708                           
  3709                           ; BSR set to: 0
  3710  00130E  0100               	movlb	0	; () banked
  3711  001310  2FBE               	decfsz	___lbmod@counter& (0+255),f,b
  3712  001312  D7E9               	goto	l2520
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717  001314  0100               	movlb	0	; () banked
  3718  001316  51BF               	movf	___lbmod@rem& (0+255),w,b
  3719  001318  0012               	return	
  3720  00131A                     __end_of___lbmod:
  3721                           	opt stack 0
  3722                           tosu	equ	0xFFF
  3723                           tosh	equ	0xFFE
  3724                           tosl	equ	0xFFD
  3725                           pclath	equ	0xFFA
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           indf1	equ	0xFE7
  3736                           postinc1	equ	0xFE6
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _ES_CheckUserEvents *****************
  3747 ;; Defined at:
  3748 ;;		line 46 in file "ES_CheckEvents.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  i               1   37[BANK0 ] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3762 ;;      Params:         0       0       0       0
  3763 ;;      Locals:         0       1       0       0
  3764 ;;      Temps:          0       0       0       0
  3765 ;;      Totals:         0       1       0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:   11
  3769 ;; This function calls:
  3770 ;;		_Check4Keystroke
  3771 ;;		_CheckButtonEvents
  3772 ;; This function is called by:
  3773 ;;		_ES_Run
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text21
  3778  00128C                     __ptext21:
  3779                           	opt stack 0
  3780  00128C                     _ES_CheckUserEvents:
  3781                           	opt stack 18
  3782                           
  3783                           ;ES_CheckEvents.c: 48: uint8_t i;
  3784                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;incstack = 0
  3788  00128C  0E00               	movlw	0
  3789  00128E  0100               	movlb	0	; () banked
  3790  001290  6FE1               	movwf	ES_CheckUserEvents@i& (0+255),b
  3791  001292                     l2598:
  3792                           
  3793                           ; BSR set to: 0
  3794  001292  0E01               	movlw	1
  3795  001294  0100               	movlb	0	; () banked
  3796  001296  65E1               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  3797  001298  D001               	goto	l2602
  3798  00129A  0012               	return	
  3799  00129C                     l2602:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  3803  00129C  0100               	movlb	0	; () banked
  3804  00129E  51E1               	movf	ES_CheckUserEvents@i& (0+255),w,b
  3805  0012A0  0D02               	mullw	2
  3806  0012A2  0E65               	movlw	low _ES_EventList
  3807  0012A4  24F3               	addwf	prodl,w,c
  3808  0012A6  6EF6               	movwf	tblptrl,c
  3809  0012A8  0E03               	movlw	high _ES_EventList
  3810  0012AA  20F4               	addwfc	prodh,w,c
  3811  0012AC  6EF7               	movwf	tblptrh,c
  3812  0012AE                     	if	0	;There are less than 3 active tblptr bytes
  3813  0012AE                     	endif
  3814  0012AE  D801               	call	u1398
  3815  0012B0  D00C               	goto	u1399
  3816  0012B2                     u1398:
  3817  0012B2  0005               	push	
  3818  0012B4  6EFA               	movwf	pclath,c
  3819  0012B6  0009               	tblrd		*+
  3820  0012B8  50F5               	movf	tablat,w,c
  3821  0012BA  6EFD               	movwf	tosl,c
  3822  0012BC  0009               	tblrd		*+
  3823  0012BE  50F5               	movf	tablat,w,c
  3824  0012C0  6EFE               	movwf	tosh,c
  3825  0012C2  50F8               	movf	tblptru,w,c
  3826  0012C4  6EFF               	movwf	tosu,c
  3827  0012C6  50FA               	movf	pclath,w,c
  3828  0012C8  0012               	return		;indir
  3829  0012CA                     u1399:
  3830  0012CA  06E8               	decf	wreg,f,c
  3831  0012CC  B4D8               	btfsc	status,2,c
  3832  0012CE  0012               	return	
  3833                           
  3834                           ;ES_CheckEvents.c: 52: break;
  3835  0012D0  0100               	movlb	0	; () banked
  3836  0012D2  2BE1               	incf	ES_CheckUserEvents@i& (0+255),f,b
  3837  0012D4  D7DE               	goto	l2598
  3838  0012D6                     __end_of_ES_CheckUserEvents:
  3839                           	opt stack 0
  3840                           tosu	equ	0xFFF
  3841                           tosh	equ	0xFFE
  3842                           tosl	equ	0xFFD
  3843                           pclath	equ	0xFFA
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           indf1	equ	0xFE7
  3854                           postinc1	equ	0xFE6
  3855                           fsr1h	equ	0xFE2
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _Check4Keystroke *****************
  3865 ;; Defined at:
  3866 ;;		line 62 in file "EventCheckers.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      unsigned char 
  3873 ;; Registers used:
  3874 ;;		wreg
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3880 ;;      Params:         0       0       0       0
  3881 ;;      Locals:         0       0       0       0
  3882 ;;      Temps:          0       0       0       0
  3883 ;;      Totals:         0       0       0       0
  3884 ;;Total ram usage:        0 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    6
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_ES_CheckUserEvents
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text22
  3895  001596                     __ptext22:
  3896                           	opt stack 0
  3897  001596                     _Check4Keystroke:
  3898                           	opt stack 22
  3899                           
  3900                           ;EventCheckers.c: 78: return 0;
  3901                           
  3902                           ;incstack = 0
  3903  001596  0E00               	movlw	0
  3904  001598  0012               	return	
  3905  00159A                     __end_of_Check4Keystroke:
  3906                           	opt stack 0
  3907                           tosu	equ	0xFFF
  3908                           tosh	equ	0xFFE
  3909                           tosl	equ	0xFFD
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           postinc0	equ	0xFEE
  3919                           wreg	equ	0xFE8
  3920                           indf1	equ	0xFE7
  3921                           postinc1	equ	0xFE6
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _CheckButtonEvents *****************
  3932 ;; Defined at:
  3933 ;;		line 44 in file "Button.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3938 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3939 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      unsigned char 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       0       0       0
  3950 ;;      Locals:         0       5       0       0
  3951 ;;      Temps:          0       0       0       0
  3952 ;;      Totals:         0       5       0       0
  3953 ;;Total ram usage:        5 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:   10
  3956 ;; This function calls:
  3957 ;;		_GetInputLine
  3958 ;;		_PostButtonDebounceSM
  3959 ;; This function is called by:
  3960 ;;		_ES_CheckUserEvents
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text23
  3965  001168                     __ptext23:
  3966                           	opt stack 0
  3967  001168                     _CheckButtonEvents:
  3968                           	opt stack 18
  3969                           
  3970                           ;Button.c: 46: uint8_t CurrentButtonState;
  3971                           ;Button.c: 47: bool ReturnVal = 0;
  3972                           
  3973                           ;incstack = 0
  3974  001168  0E00               	movlw	0
  3975  00116A  0100               	movlb	0	; () banked
  3976  00116C  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;Button.c: 49: CurrentButtonState = GetInputLine();
  3980  00116E  ECC5  F00A         	call	_GetInputLine	;wreg free
  3981  001172  0100               	movlb	0	; () banked
  3982  001174  6FE0               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;Button.c: 51: if (CurrentButtonState != LastButtonState) {
  3986  001176  0100               	movlb	0	; () banked
  3987  001178  5191               	movf	_LastButtonState& (0+255),w,b
  3988  00117A  0100               	movlb	0	; () banked
  3989  00117C  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3990  00117E  B4D8               	btfsc	status,2,c
  3991  001180  D023               	goto	l2362
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;Button.c: 53: ReturnVal = 1;
  3995  001182  0E01               	movlw	1
  3996  001184  0100               	movlb	0	; () banked
  3997  001186  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;Button.c: 54: ES_Event ThisEvent;
  4001                           ;Button.c: 55: ThisEvent.EventParam = CurrentButtonState;
  4002  001188  C0E0  F0DE         	movff	CheckButtonEvents@CurrentButtonState,CheckButtonEvents@ThisEvent+1
  4003  00118C  0100               	movlb	0	; () banked
  4004  00118E  6BDF               	clrf	(CheckButtonEvents@ThisEvent+2)& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;Button.c: 57: if (CurrentButtonState != 0x7F) {
  4008  001190  0E7F               	movlw	127
  4009  001192  0100               	movlb	0	; () banked
  4010  001194  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  4011  001196  B4D8               	btfsc	status,2,c
  4012  001198  D00C               	goto	l2358
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;Button.c: 59: ThisEvent.EventType = DBButtonDown;
  4016  00119A  0E05               	movlw	5
  4017  00119C  0100               	movlb	0	; () banked
  4018  00119E  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;Button.c: 60: PostButtonDebounceSM(ThisEvent);
  4022  0011A0  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4023  0011A4  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4024  0011A8  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4025  0011AC  EC89  F00A         	call	_PostButtonDebounceSM	;wreg free
  4026                           
  4027                           ;Button.c: 62: } else {
  4028  0011B0  D00B               	goto	l2362
  4029  0011B2                     l2358:
  4030                           
  4031                           ;Button.c: 64: ThisEvent.EventType = DBButtonUp;
  4032  0011B2  0E06               	movlw	6
  4033  0011B4  0100               	movlb	0	; () banked
  4034  0011B6  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;Button.c: 65: PostButtonDebounceSM(ThisEvent);
  4038  0011B8  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4039  0011BC  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4040  0011C0  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4041  0011C4  EC89  F00A         	call	_PostButtonDebounceSM	;wreg free
  4042  0011C8                     l2362:
  4043                           
  4044                           ;Button.c: 66: }
  4045                           ;Button.c: 67: }
  4046                           ;Button.c: 69: LastButtonState = CurrentButtonState;
  4047  0011C8  C0E0  F091         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  4048                           
  4049                           ;Button.c: 71: return ReturnVal;
  4050  0011CC  0100               	movlb	0	; () banked
  4051  0011CE  51DC               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  4052  0011D0  0012               	return	
  4053  0011D2                     __end_of_CheckButtonEvents:
  4054                           	opt stack 0
  4055                           tosu	equ	0xFFF
  4056                           tosh	equ	0xFFE
  4057                           tosl	equ	0xFFD
  4058                           pclath	equ	0xFFA
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           indf1	equ	0xFE7
  4069                           postinc1	equ	0xFE6
  4070                           fsr1h	equ	0xFE2
  4071                           fsr1l	equ	0xFE1
  4072                           indf2	equ	0xFDF
  4073                           postinc2	equ	0xFDE
  4074                           postdec2	equ	0xFDD
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _ES_Initialize *****************
  4080 ;; Defined at:
  4081 ;;		line 242 in file "ES_Framework.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  NewRate         2   33[BANK0 ] enum E15422
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  i               1   35[BANK0 ] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      enum E15493
  4088 ;; Registers used:
  4089 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4095 ;;      Params:         0       2       0       0
  4096 ;;      Locals:         0       1       0       0
  4097 ;;      Temps:          0       0       0       0
  4098 ;;      Totals:         0       3       0       0
  4099 ;;Total ram usage:        3 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:   10
  4102 ;; This function calls:
  4103 ;;		_ES_InitQueue
  4104 ;;		_ES_Timer_Init
  4105 ;;		_InitAnalogService
  4106 ;;		_InitCan_XmitService
  4107 ;;		_InitializeButtonDebounce
  4108 ;; This function is called by:
  4109 ;;		_main
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text24
  4114  0006F8                     __ptext24:
  4115                           	opt stack 0
  4116  0006F8                     _ES_Initialize:
  4117                           	opt stack 20
  4118                           
  4119                           ;ES_Framework.c: 243: uint8_t i;
  4120                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;incstack = 0
  4124  0006F8  C0DD  F0BE         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4125  0006FC  C0DE  F0BF         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4126  000700  ECAA  F00A         	call	_ES_Timer_Init	;wreg free
  4127                           
  4128                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4129  000704  0E00               	movlw	0
  4130  000706  0100               	movlb	0	; () banked
  4131  000708  6FDF               	movwf	ES_Initialize@i& (0+255),b
  4132  00070A                     l2786:
  4133                           
  4134                           ; BSR set to: 0
  4135  00070A  0E02               	movlw	2
  4136  00070C  0100               	movlb	0	; () banked
  4137  00070E  65DF               	cpfsgt	ES_Initialize@i& (0+255),b
  4138  000710  D001               	goto	l2790
  4139  000712  D066               	goto	l2810
  4140  000714                     l2790:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4144                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4145  000714  0100               	movlb	0	; () banked
  4146  000716  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4147  000718  0D04               	mullw	4
  4148  00071A  0E50               	movlw	low _ServDescList
  4149  00071C  24F3               	addwf	prodl,w,c
  4150  00071E  6EF6               	movwf	tblptrl,c
  4151  000720  0E03               	movlw	high _ServDescList
  4152  000722  20F4               	addwfc	prodh,w,c
  4153  000724  6EF7               	movwf	tblptrh,c
  4154  000726                     	if	0	;There are less than 3 active tblptr bytes
  4155  000726                     	endif
  4156  000726  0009               	tblrd		*+
  4157  000728  50F5               	movf	tablat,w,c
  4158  00072A  0009               	tblrd		*+
  4159  00072C  10F5               	iorwf	tablat,w,c
  4160  00072E  B4D8               	btfsc	status,2,c
  4161  000730  D013               	goto	l2794
  4162                           
  4163                           ; BSR set to: 0
  4164  000732  0100               	movlb	0	; () banked
  4165  000734  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4166  000736  0D04               	mullw	4
  4167  000738  0E02               	movlw	2
  4168  00073A  26F3               	addwf	prodl,f,c
  4169  00073C  0E00               	movlw	0
  4170  00073E  22F4               	addwfc	prodh,f,c
  4171  000740  0E50               	movlw	low _ServDescList
  4172  000742  24F3               	addwf	prodl,w,c
  4173  000744  6EF6               	movwf	tblptrl,c
  4174  000746  0E03               	movlw	high _ServDescList
  4175  000748  20F4               	addwfc	prodh,w,c
  4176  00074A  6EF7               	movwf	tblptrh,c
  4177  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4178  00074C                     	endif
  4179  00074C  0009               	tblrd		*+
  4180  00074E  50F5               	movf	tablat,w,c
  4181  000750  0009               	tblrd		*+
  4182  000752  10F5               	iorwf	tablat,w,c
  4183  000754  A4D8               	btfss	status,2,c
  4184  000756  D002               	goto	l2798
  4185  000758                     l2794:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;ES_Framework.c: 249: return FailedPointer;
  4189  000758  0E03               	movlw	3
  4190                           
  4191                           ; BSR set to: 0
  4192  00075A  0012               	return	
  4193  00075C                     l2798:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4197  00075C  0100               	movlb	0	; () banked
  4198  00075E  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4199  000760  0D03               	mullw	3
  4200  000762  0E5C               	movlw	low _EventQueues
  4201  000764  24F3               	addwf	prodl,w,c
  4202  000766  6EF6               	movwf	tblptrl,c
  4203  000768  0E03               	movlw	high _EventQueues
  4204  00076A  20F4               	addwfc	prodh,w,c
  4205  00076C  6EF7               	movwf	tblptrh,c
  4206  00076E                     	if	0	;There are less than 3 active tblptr bytes
  4207  00076E                     	endif
  4208  00076E  0009               	tblrd		*+
  4209  000770  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock
  4210  000774  000A               	tblrd		*-
  4211  000776  CFF5 F0BD          	movff	tablat,ES_InitQueue@pBlock+1
  4212  00077A  0100               	movlb	0	; () banked
  4213  00077C  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4214  00077E  0D03               	mullw	3
  4215  000780  0E02               	movlw	2
  4216  000782  26F3               	addwf	prodl,f,c
  4217  000784  0E00               	movlw	0
  4218  000786  22F4               	addwfc	prodh,f,c
  4219  000788  0E5C               	movlw	low _EventQueues
  4220  00078A  24F3               	addwf	prodl,w,c
  4221  00078C  6EF6               	movwf	tblptrl,c
  4222  00078E  0E03               	movlw	high _EventQueues
  4223  000790  20F4               	addwfc	prodh,w,c
  4224  000792  6EF7               	movwf	tblptrh,c
  4225  000794                     	if	0	;There are less than 3 active tblptr bytes
  4226  000794                     	endif
  4227  000794  0008               	tblrd		*
  4228  000796  CFF5 F0BE          	movff	tablat,ES_InitQueue@BlockSize
  4229  00079A  EC8D  F009         	call	_ES_InitQueue	;wreg free
  4230                           
  4231                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  4232  00079E  0100               	movlb	0	; () banked
  4233  0007A0  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4234  0007A2  0D04               	mullw	4
  4235  0007A4  0E50               	movlw	low _ServDescList
  4236  0007A6  24F3               	addwf	prodl,w,c
  4237  0007A8  6EF6               	movwf	tblptrl,c
  4238  0007AA  0E03               	movlw	high _ServDescList
  4239  0007AC  20F4               	addwfc	prodh,w,c
  4240  0007AE  6EF7               	movwf	tblptrh,c
  4241  0007B0                     	if	0	;There are less than 3 active tblptr bytes
  4242  0007B0                     	endif
  4243  0007B0  D801               	call	u1598
  4244  0007B2  D00E               	goto	u1599
  4245  0007B4                     u1598:
  4246  0007B4  0005               	push	
  4247  0007B6  6EFA               	movwf	pclath,c
  4248  0007B8  0009               	tblrd		*+
  4249  0007BA  50F5               	movf	tablat,w,c
  4250  0007BC  6EFD               	movwf	tosl,c
  4251  0007BE  0009               	tblrd		*+
  4252  0007C0  50F5               	movf	tablat,w,c
  4253  0007C2  6EFE               	movwf	tosh,c
  4254  0007C4  50F8               	movf	tblptru,w,c
  4255  0007C6  6EFF               	movwf	tosu,c
  4256  0007C8  50FA               	movf	pclath,w,c
  4257  0007CA  0100               	movlb	0	; () banked
  4258  0007CC  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4259  0007CE  0012               	return		;indir
  4260  0007D0                     u1599:
  4261  0007D0  06E8               	decf	wreg,f,c
  4262  0007D2  B4D8               	btfsc	status,2,c
  4263  0007D4  D002               	goto	l2806
  4264                           
  4265                           ;ES_Framework.c: 254: return FailedInit;
  4266  0007D6  0E05               	movlw	5
  4267  0007D8  0012               	return	
  4268  0007DA                     l2806:
  4269  0007DA  0100               	movlb	0	; () banked
  4270  0007DC  2BDF               	incf	ES_Initialize@i& (0+255),f,b
  4271  0007DE  D795               	goto	l2786
  4272  0007E0                     l2810:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;ES_Framework.c: 255: }
  4276                           ;ES_Framework.c: 256: return Success;
  4277  0007E0  0E00               	movlw	0
  4278  0007E2  0012               	return	
  4279  0007E4                     __end_of_ES_Initialize:
  4280                           	opt stack 0
  4281                           tosu	equ	0xFFF
  4282                           tosh	equ	0xFFE
  4283                           tosl	equ	0xFFD
  4284                           pclath	equ	0xFFA
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           prodh	equ	0xFF4
  4290                           prodl	equ	0xFF3
  4291                           intcon	equ	0xFF2
  4292                           postinc0	equ	0xFEE
  4293                           wreg	equ	0xFE8
  4294                           indf1	equ	0xFE7
  4295                           postinc1	equ	0xFE6
  4296                           fsr1h	equ	0xFE2
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _InitAnalogService *****************
  4306 ;; Defined at:
  4307 ;;		line 31 in file "Analog_Service.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  Priority        1    wreg     unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  Priority        1   32[BANK0 ] unsigned char 
  4312 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      unsigned char 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4322 ;;      Params:         0       0       0       0
  4323 ;;      Locals:         0       4       0       0
  4324 ;;      Temps:          0       0       0       0
  4325 ;;      Totals:         0       4       0       0
  4326 ;;Total ram usage:        4 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    9
  4329 ;; This function calls:
  4330 ;;		_ES_PostToService
  4331 ;; This function is called by:
  4332 ;;		_ES_Initialize
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text25
  4337  0013C0                     __ptext25:
  4338                           	opt stack 0
  4339  0013C0                     _InitAnalogService:
  4340                           	opt stack 20
  4341                           
  4342                           ;incstack = 0
  4343                           ;InitAnalogService@Priority stored from wreg
  4344  0013C0  0100               	movlb	0	; () banked
  4345  0013C2  6FDC               	movwf	InitAnalogService@Priority& (0+255),b
  4346                           
  4347                           ;Analog_Service.c: 33: ES_Event ThisEvent;
  4348                           ;Analog_Service.c: 34: MyPriority = Priority;
  4349  0013C4  C0DC  F08D         	movff	InitAnalogService@Priority,Analog_Service@MyPriority
  4350                           
  4351                           ;Analog_Service.c: 37: ThisEvent.EventType = ES_INIT;
  4352  0013C8  0E02               	movlw	2
  4353  0013CA  0100               	movlb	0	; () banked
  4354  0013CC  6FD9               	movwf	InitAnalogService@ThisEvent& (0+255),b
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;Analog_Service.c: 38: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4358  0013CE  C0D9  F0D3         	movff	InitAnalogService@ThisEvent,ES_PostToService@TheEvent
  4359  0013D2  C0DA  F0D4         	movff	InitAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  4360  0013D6  C0DB  F0D5         	movff	InitAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  4361  0013DA  0100               	movlb	0	; () banked
  4362  0013DC  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  4363  0013DE  EC0A  F008         	call	_ES_PostToService
  4364  0013E2  06E8               	decf	wreg,f,c
  4365  0013E4  A4D8               	btfss	status,2,c
  4366  0013E6  D002               	goto	l2746
  4367                           
  4368                           ;Analog_Service.c: 39: {
  4369                           ;Analog_Service.c: 40: return 1;
  4370  0013E8  0E01               	movlw	1
  4371                           
  4372                           ;Analog_Service.c: 41: }else
  4373  0013EA  0012               	return	
  4374  0013EC                     l2746:
  4375                           
  4376                           ;Analog_Service.c: 42: {
  4377                           ;Analog_Service.c: 43: return 0;
  4378  0013EC  0E00               	movlw	0
  4379  0013EE  0012               	return	
  4380  0013F0                     __end_of_InitAnalogService:
  4381                           	opt stack 0
  4382                           tosu	equ	0xFFF
  4383                           tosh	equ	0xFFE
  4384                           tosl	equ	0xFFD
  4385                           pclath	equ	0xFFA
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           indf1	equ	0xFE7
  4396                           postinc1	equ	0xFE6
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function _InitCan_XmitService *****************
  4407 ;; Defined at:
  4408 ;;		line 86 in file "Can_XmitService.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  Priority        1    wreg     unsigned char 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  Priority        1   32[BANK0 ] unsigned char 
  4413 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      unsigned char 
  4416 ;; Registers used:
  4417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4423 ;;      Params:         0       0       0       0
  4424 ;;      Locals:         0       4       0       0
  4425 ;;      Temps:          0       0       0       0
  4426 ;;      Totals:         0       4       0       0
  4427 ;;Total ram usage:        4 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    9
  4430 ;; This function calls:
  4431 ;;		_ES_PostToService
  4432 ;; This function is called by:
  4433 ;;		_ES_Initialize
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text26
  4438  0013F0                     __ptext26:
  4439                           	opt stack 0
  4440  0013F0                     _InitCan_XmitService:
  4441                           	opt stack 20
  4442                           
  4443                           ;incstack = 0
  4444                           ;InitCan_XmitService@Priority stored from wreg
  4445  0013F0  0100               	movlb	0	; () banked
  4446  0013F2  6FDC               	movwf	InitCan_XmitService@Priority& (0+255),b
  4447                           
  4448                           ;Can_XmitService.c: 88: ES_Event ThisEvent;
  4449                           ;Can_XmitService.c: 90: MyPriority = Priority;
  4450  0013F4  C0DC  F08E         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  4451                           
  4452                           ;Can_XmitService.c: 93: ThisEvent.EventType = ES_INIT;
  4453  0013F8  0E02               	movlw	2
  4454  0013FA  0100               	movlb	0	; () banked
  4455  0013FC  6FD9               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;Can_XmitService.c: 94: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4459  0013FE  C0D9  F0D3         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  4460  001402  C0DA  F0D4         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  4461  001406  C0DB  F0D5         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  4462  00140A  0100               	movlb	0	; () banked
  4463  00140C  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  4464  00140E  EC0A  F008         	call	_ES_PostToService
  4465  001412  06E8               	decf	wreg,f,c
  4466  001414  A4D8               	btfss	status,2,c
  4467  001416  D002               	goto	l2678
  4468                           
  4469                           ;Can_XmitService.c: 95: {
  4470                           ;Can_XmitService.c: 96: return 1;
  4471  001418  0E01               	movlw	1
  4472                           
  4473                           ;Can_XmitService.c: 97: }else
  4474  00141A  0012               	return	
  4475  00141C                     l2678:
  4476                           
  4477                           ;Can_XmitService.c: 98: {
  4478                           ;Can_XmitService.c: 99: return 0;
  4479  00141C  0E00               	movlw	0
  4480  00141E  0012               	return	
  4481  001420                     __end_of_InitCan_XmitService:
  4482                           	opt stack 0
  4483                           tosu	equ	0xFFF
  4484                           tosh	equ	0xFFE
  4485                           tosl	equ	0xFFD
  4486                           pclath	equ	0xFFA
  4487                           tblptru	equ	0xFF8
  4488                           tblptrh	equ	0xFF7
  4489                           tblptrl	equ	0xFF6
  4490                           tablat	equ	0xFF5
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           intcon	equ	0xFF2
  4494                           postinc0	equ	0xFEE
  4495                           wreg	equ	0xFE8
  4496                           indf1	equ	0xFE7
  4497                           postinc1	equ	0xFE6
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _InitializeButtonDebounce *****************
  4508 ;; Defined at:
  4509 ;;		line 27 in file "Button.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  Priority        1    wreg     unsigned char 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  Priority        1    5[BANK0 ] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      unsigned char 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4523 ;;      Params:         0       0       0       0
  4524 ;;      Locals:         0       1       0       0
  4525 ;;      Temps:          0       0       0       0
  4526 ;;      Totals:         0       1       0       0
  4527 ;;Total ram usage:        1 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    7
  4530 ;; This function calls:
  4531 ;;		_ES_Timer_InitTimer
  4532 ;;		_GetInputLine
  4533 ;;		_InitButtonHW
  4534 ;; This function is called by:
  4535 ;;		_ES_Initialize
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text27
  4540  001420                     __ptext27:
  4541                           	opt stack 0
  4542  001420                     _InitializeButtonDebounce:
  4543                           	opt stack 22
  4544                           
  4545                           ;incstack = 0
  4546                           ;InitializeButtonDebounce@Priority stored from wreg
  4547  001420  0100               	movlb	0	; () banked
  4548  001422  6FC1               	movwf	InitializeButtonDebounce@Priority& (0+255),b
  4549                           
  4550                           ;Button.c: 29: MyPriority = Priority;
  4551  001424  C0C1  F093         	movff	InitializeButtonDebounce@Priority,_MyPriority
  4552                           
  4553                           ;Button.c: 30: InitButtonHW();
  4554  001428  ECB1  F00A         	call	_InitButtonHW	;wreg free
  4555                           
  4556                           ;Button.c: 33: LastButtonState = GetInputLine();
  4557  00142C  ECC5  F00A         	call	_GetInputLine	;wreg free
  4558  001430  0100               	movlb	0	; () banked
  4559  001432  6F91               	movwf	_LastButtonState& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;Button.c: 35: CurrentState = Debouncing;
  4563  001434  0E00               	movlw	0
  4564  001436  0100               	movlb	0	; () banked
  4565  001438  6F90               	movwf	_CurrentState& (0+255),b
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;Button.c: 37: ES_Timer_InitTimer(1,2);
  4569  00143A  0E00               	movlw	0
  4570  00143C  0100               	movlb	0	; () banked
  4571  00143E  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  4572  001440  0E02               	movlw	2
  4573  001442  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  4574  001444  0E01               	movlw	1
  4575  001446  EC50  F007         	call	_ES_Timer_InitTimer
  4576                           
  4577                           ;Button.c: 39: return 1;
  4578  00144A  0E01               	movlw	1
  4579  00144C  0012               	return	
  4580  00144E                     __end_of_InitializeButtonDebounce:
  4581                           	opt stack 0
  4582                           tosu	equ	0xFFF
  4583                           tosh	equ	0xFFE
  4584                           tosl	equ	0xFFD
  4585                           pclath	equ	0xFFA
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           postinc1	equ	0xFE6
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function _InitButtonHW *****************
  4607 ;; Defined at:
  4608 ;;		line 134 in file "Button.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;		None
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;		None
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      void 
  4615 ;; Registers used:
  4616 ;;		wreg, status,2
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4622 ;;      Params:         0       0       0       0
  4623 ;;      Locals:         0       0       0       0
  4624 ;;      Temps:          0       0       0       0
  4625 ;;      Totals:         0       0       0       0
  4626 ;;Total ram usage:        0 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    6
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_InitializeButtonDebounce
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text28
  4637  001562                     __ptext28:
  4638                           	opt stack 0
  4639  001562                     _InitButtonHW:
  4640                           	opt stack 22
  4641                           
  4642                           ;Button.c: 135: PORTC = 0x00;
  4643                           
  4644                           ;incstack = 0
  4645  001562  0E00               	movlw	0
  4646  001564  6E82               	movwf	3970,c	;volatile
  4647                           
  4648                           ;Button.c: 136: LATC = 0x00;
  4649  001566  0E00               	movlw	0
  4650  001568  6E8B               	movwf	3979,c	;volatile
  4651                           
  4652                           ;Button.c: 137: PORTC = 0xFF;
  4653  00156A  6882               	setf	3970,c	;volatile
  4654  00156C  0012               	return		;funcret
  4655  00156E                     __end_of_InitButtonHW:
  4656                           	opt stack 0
  4657                           tosu	equ	0xFFF
  4658                           tosh	equ	0xFFE
  4659                           tosl	equ	0xFFD
  4660                           pclath	equ	0xFFA
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           indf1	equ	0xFE7
  4671                           postinc1	equ	0xFE6
  4672                           fsr1h	equ	0xFE2
  4673                           fsr1l	equ	0xFE1
  4674                           indf2	equ	0xFDF
  4675                           postinc2	equ	0xFDE
  4676                           postdec2	equ	0xFDD
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _GetInputLine *****************
  4682 ;; Defined at:
  4683 ;;		line 129 in file "Button.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      unsigned char 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4697 ;;      Params:         0       0       0       0
  4698 ;;      Locals:         0       0       0       0
  4699 ;;      Temps:          0       0       0       0
  4700 ;;      Totals:         0       0       0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    6
  4704 ;; This function calls:
  4705 ;;		Nothing
  4706 ;; This function is called by:
  4707 ;;		_InitializeButtonDebounce
  4708 ;;		_CheckButtonEvents
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text29
  4713  00158A                     __ptext29:
  4714                           	opt stack 0
  4715  00158A                     _GetInputLine:
  4716                           	opt stack 21
  4717                           
  4718                           ;Button.c: 131: return PORTC & 0x0F;
  4719                           
  4720                           ;incstack = 0
  4721  00158A  5082               	movf	3970,w,c	;volatile
  4722  00158C  0B0F               	andlw	15
  4723  00158E  0012               	return	
  4724  001590                     __end_of_GetInputLine:
  4725                           	opt stack 0
  4726                           tosu	equ	0xFFF
  4727                           tosh	equ	0xFFE
  4728                           tosl	equ	0xFFD
  4729                           pclath	equ	0xFFA
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           intcon	equ	0xFF2
  4737                           postinc0	equ	0xFEE
  4738                           wreg	equ	0xFE8
  4739                           indf1	equ	0xFE7
  4740                           postinc1	equ	0xFE6
  4741                           fsr1h	equ	0xFE2
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _ES_Timer_InitTimer *****************
  4751 ;; Defined at:
  4752 ;;		line 229 in file "ES_Timers.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  Num             1    wreg     unsigned char 
  4755 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  Num             1    4[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      enum E15445
  4760 ;; Registers used:
  4761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4767 ;;      Params:         0       2       0       0
  4768 ;;      Locals:         0       1       0       0
  4769 ;;      Temps:          0       2       0       0
  4770 ;;      Totals:         0       5       0       0
  4771 ;;Total ram usage:        5 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    6
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_InitializeButtonDebounce
  4778 ;;		_RunButtonDebounceSM
  4779 ;;		_RunAnalogService
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text30
  4784  000EA0                     __ptext30:
  4785                           	opt stack 0
  4786  000EA0                     _ES_Timer_InitTimer:
  4787                           	opt stack 22
  4788                           
  4789                           ;incstack = 0
  4790                           ;ES_Timer_InitTimer@Num stored from wreg
  4791  000EA0  0100               	movlb	0	; () banked
  4792  000EA2  6FC0               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4793                           
  4794                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4795                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4796                           ;ES_Timers.c: 236: (NewTime == 0) )
  4797  000EA4  0E10               	movlw	16
  4798  000EA6  0100               	movlb	0	; () banked
  4799  000EA8  61C0               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4800  000EAA  0012               	return	
  4801                           
  4802                           ; BSR set to: 0
  4803  000EAC  0100               	movlb	0	; () banked
  4804  000EAE  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4805  000EB0  0D02               	mullw	2
  4806  000EB2  0E21               	movlw	low _Timer2PostFunc
  4807  000EB4  24F3               	addwf	prodl,w,c
  4808  000EB6  6EF6               	movwf	tblptrl,c
  4809  000EB8  0E03               	movlw	high _Timer2PostFunc
  4810  000EBA  20F4               	addwfc	prodh,w,c
  4811  000EBC  6EF7               	movwf	tblptrh,c
  4812  000EBE                     	if	0	;There are less than 3 active tblptr bytes
  4813  000EBE                     	endif
  4814  000EBE  0009               	tblrd		*+
  4815  000EC0  50F5               	movf	tablat,w,c
  4816  000EC2  0009               	tblrd		*+
  4817  000EC4  10F5               	iorwf	tablat,w,c
  4818  000EC6  B4D8               	btfsc	status,2,c
  4819  000EC8  0012               	return	
  4820                           
  4821                           ; BSR set to: 0
  4822  000ECA  0100               	movlb	0	; () banked
  4823  000ECC  51BC               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4824  000ECE  0100               	movlb	0	; () banked
  4825  000ED0  11BD               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4826  000ED2  B4D8               	btfsc	status,2,c
  4827  000ED4  0012               	return	
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4836                           ;	Return value of _ES_Timer_InitTimer is never used
  4837  000ED6  0100               	movlb	0	; () banked
  4838  000ED8  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4839  000EDA  0D02               	mullw	2
  4840  000EDC  0E60               	movlw	low _TMR_TimerArray
  4841  000EDE  24F3               	addwf	prodl,w,c
  4842  000EE0  6ED9               	movwf	fsr2l,c
  4843  000EE2  0E00               	movlw	high _TMR_TimerArray
  4844  000EE4  20F4               	addwfc	prodh,w,c
  4845  000EE6  6EDA               	movwf	fsr2h,c
  4846  000EE8  C0BC  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4847  000EEC  C0BD  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4851  000EF0  0100               	movlb	0	; () banked
  4852  000EF2  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4853  000EF4  0D02               	mullw	2
  4854  000EF6  0E01               	movlw	low _BitNum2SetMask
  4855  000EF8  24F3               	addwf	prodl,w,c
  4856  000EFA  6EF6               	movwf	tblptrl,c
  4857  000EFC  0E03               	movlw	high _BitNum2SetMask
  4858  000EFE  20F4               	addwfc	prodh,w,c
  4859  000F00  6EF7               	movwf	tblptrh,c
  4860  000F02                     	if	0	;There are less than 3 active tblptr bytes
  4861  000F02                     	endif
  4862  000F02  0009               	tblrd		*+
  4863  000F04  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer
  4864  000F08  0009               	tblrd		*+
  4865  000F0A  CFF5 F0BF          	movff	tablat,??_ES_Timer_InitTimer+1
  4866  000F0E  0100               	movlb	0	; () banked
  4867  000F10  51BE               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4868  000F12  0100               	movlb	0	; () banked
  4869  000F14  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4870  000F16  0100               	movlb	0	; () banked
  4871  000F18  51BF               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4872  000F1A  0100               	movlb	0	; () banked
  4873  000F1C  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4874  000F1E  0012               	return	
  4875  000F20                     __end_of_ES_Timer_InitTimer:
  4876                           	opt stack 0
  4877                           tosu	equ	0xFFF
  4878                           tosh	equ	0xFFE
  4879                           tosl	equ	0xFFD
  4880                           pclath	equ	0xFFA
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           indf1	equ	0xFE7
  4891                           postinc1	equ	0xFE6
  4892                           fsr1h	equ	0xFE2
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _ES_PostToService *****************
  4902 ;; Defined at:
  4903 ;;		line 351 in file "ES_Framework.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  WhichService    1    wreg     unsigned char 
  4906 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  WhichService    1   28[BANK0 ] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      unsigned char 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4918 ;;      Params:         0       3       0       0
  4919 ;;      Locals:         0       1       0       0
  4920 ;;      Temps:          0       2       0       0
  4921 ;;      Totals:         0       6       0       0
  4922 ;;Total ram usage:        6 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    8
  4925 ;; This function calls:
  4926 ;;		_ES_EnQueueFIFO
  4927 ;; This function is called by:
  4928 ;;		_PostButtonDebounceSM
  4929 ;;		_InitCan_XmitService
  4930 ;;		_InitAnalogService
  4931 ;;		_PostAnalogService
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text31
  4936  001014                     __ptext31:
  4937                           	opt stack 0
  4938  001014                     _ES_PostToService:
  4939                           	opt stack 18
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;incstack = 0
  4943                           ;ES_PostToService@WhichService stored from wreg
  4944  001014  0100               	movlb	0	; () banked
  4945  001016  6FD8               	movwf	ES_PostToService@WhichService& (0+255),b
  4946                           
  4947                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4948                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4949                           ;ES_Framework.c: 354: 1 )){
  4950  001018  0E03               	movlw	3
  4951  00101A  0100               	movlb	0	; () banked
  4952  00101C  61D8               	cpfslt	ES_PostToService@WhichService& (0+255),b
  4953  00101E  D033               	goto	l2224
  4954                           
  4955                           ; BSR set to: 0
  4956  001020  0100               	movlb	0	; () banked
  4957  001022  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4958  001024  0D03               	mullw	3
  4959  001026  0E5C               	movlw	low _EventQueues
  4960  001028  24F3               	addwf	prodl,w,c
  4961  00102A  6EF6               	movwf	tblptrl,c
  4962  00102C  0E03               	movlw	high _EventQueues
  4963  00102E  20F4               	addwfc	prodh,w,c
  4964  001030  6EF7               	movwf	tblptrh,c
  4965  001032                     	if	0	;There are less than 3 active tblptr bytes
  4966  001032                     	endif
  4967  001032  0009               	tblrd		*+
  4968  001034  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  4969  001038  000A               	tblrd		*-
  4970  00103A  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  4971  00103E  C0D3  F0CA         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  4972  001042  C0D4  F0CB         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  4973  001046  C0D5  F0CC         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  4974  00104A  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  4975  00104E  06E8               	decf	wreg,f,c
  4976  001050  A4D8               	btfss	status,2,c
  4977  001052  D019               	goto	l2224
  4978                           
  4979                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4980  001054  0100               	movlb	0	; () banked
  4981  001056  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4982  001058  0D02               	mullw	2
  4983  00105A  0E01               	movlw	low _BitNum2SetMask
  4984  00105C  24F3               	addwf	prodl,w,c
  4985  00105E  6EF6               	movwf	tblptrl,c
  4986  001060  0E03               	movlw	high _BitNum2SetMask
  4987  001062  20F4               	addwfc	prodh,w,c
  4988  001064  6EF7               	movwf	tblptrh,c
  4989  001066                     	if	0	;There are less than 3 active tblptr bytes
  4990  001066                     	endif
  4991  001066  0009               	tblrd		*+
  4992  001068  CFF5 F0D6          	movff	tablat,??_ES_PostToService
  4993  00106C  0009               	tblrd		*+
  4994  00106E  CFF5 F0D7          	movff	tablat,??_ES_PostToService+1
  4995  001072  0100               	movlb	0	; () banked
  4996  001074  51D6               	movf	??_ES_PostToService& (0+255),w,b
  4997  001076  0100               	movlb	0	; () banked
  4998  001078  1389               	iorwf	_Ready& (0+255),f,b
  4999  00107A  0100               	movlb	0	; () banked
  5000  00107C  51D7               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5001  00107E  0100               	movlb	0	; () banked
  5002  001080  138A               	iorwf	(_Ready+1)& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;ES_Framework.c: 356: return 1;
  5006  001082  0E01               	movlw	1
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;ES_Framework.c: 357: } else
  5010                           
  5011                           ; BSR set to: 0
  5012  001084  0012               	return	
  5013  001086                     l2224:
  5014                           
  5015                           ;ES_Framework.c: 358: return 0;
  5016  001086  0E00               	movlw	0
  5017  001088  0012               	return	
  5018  00108A                     __end_of_ES_PostToService:
  5019                           	opt stack 0
  5020                           tosu	equ	0xFFF
  5021                           tosh	equ	0xFFE
  5022                           tosl	equ	0xFFD
  5023                           pclath	equ	0xFFA
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf1	equ	0xFE7
  5034                           postinc1	equ	0xFE6
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _ES_EnQueueFIFO *****************
  5045 ;; Defined at:
  5046 ;;		line 85 in file "ES_Queue.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5049 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5050 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5053 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5054 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      unsigned char 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5064 ;;      Params:         0       5       0       0
  5065 ;;      Locals:         0       3       0       0
  5066 ;;      Temps:          0       3       0       0
  5067 ;;      Totals:         0      11       0       0
  5068 ;;Total ram usage:       11 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    7
  5071 ;; This function calls:
  5072 ;;		___awmod
  5073 ;;		___wmul
  5074 ;; This function is called by:
  5075 ;;		_ES_PostAll
  5076 ;;		_ES_PostToService
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text32
  5081  0007E4                     __ptext32:
  5082                           	opt stack 0
  5083  0007E4                     _ES_EnQueueFIFO:
  5084                           	opt stack 18
  5085                           
  5086                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5087                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5088                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5089                           
  5090                           ;incstack = 0
  5091  0007E4  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5092  0007E8  C0C9  F0D2         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5093                           
  5094                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5095  0007EC  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5096  0007F0  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5097  0007F4  0100               	movlb	0	; () banked
  5098  0007F6  EE10 F002          	lfsr	1,2
  5099  0007FA  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5100  0007FC  26E1               	addwf	fsr1l,f,c
  5101  0007FE  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5102  000800  22E2               	addwfc	fsr1h,f,c
  5103  000802  50DE               	movf	postinc2,w,c
  5104  000804  5CE6               	subwf	postinc1,w,c
  5105  000806  B0D8               	btfsc	status,0,c
  5106  000808  D05C               	goto	l2208
  5107                           
  5108                           ; BSR set to: 0
  5109                           
  5110                           ;ES_Queue.c: 92: {
  5111                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5112  00080A  CFF2 F0D0          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5113  00080E  9EF2               	bcf	intcon,7,c	;volatile
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5117                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5118                           
  5119                           ; BSR set to: 0
  5120  000810  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5121  000814  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5122  000818  50DF               	movf	indf2,w,c
  5123  00081A  0100               	movlb	0	; () banked
  5124  00081C  6FCD               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5125  00081E  0100               	movlb	0	; () banked
  5126  000820  51CD               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5127  000822  0100               	movlb	0	; () banked
  5128  000824  6FBE               	movwf	___awmod@divisor& (0+255),b
  5129  000826  6BBF               	clrf	(___awmod@divisor+1)& (0+255),b
  5130  000828  0100               	movlb	0	; () banked
  5131  00082A  EE20 F002          	lfsr	2,2
  5132  00082E  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5133  000830  26D9               	addwf	fsr2l,f,c
  5134  000832  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5135  000834  22DA               	addwfc	fsr2h,f,c
  5136  000836  50DF               	movf	indf2,w,c
  5137  000838  0100               	movlb	0	; () banked
  5138  00083A  6FCE               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5139  00083C  0100               	movlb	0	; () banked
  5140  00083E  EE20 F001          	lfsr	2,1
  5141  000842  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5142  000844  26D9               	addwf	fsr2l,f,c
  5143  000846  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5144  000848  22DA               	addwfc	fsr2h,f,c
  5145  00084A  50DF               	movf	indf2,w,c
  5146  00084C  0100               	movlb	0	; () banked
  5147  00084E  6FCF               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5148  000850  0100               	movlb	0	; () banked
  5149  000852  51CF               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5150  000854  0100               	movlb	0	; () banked
  5151  000856  25CE               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5152  000858  0100               	movlb	0	; () banked
  5153  00085A  6FBC               	movwf	___awmod@dividend& (0+255),b
  5154  00085C  0100               	movlb	0	; () banked
  5155  00085E  6BBD               	clrf	(___awmod@dividend+1)& (0+255),b
  5156  000860  0100               	movlb	0	; () banked
  5157  000862  37BD               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5158  000864  ECE2  F005         	call	___awmod	;wreg free
  5159  000868  0E01               	movlw	1
  5160  00086A  0100               	movlb	0	; () banked
  5161  00086C  25BC               	addwf	?___awmod& (0+255),w,b
  5162  00086E  0100               	movlb	0	; () banked
  5163  000870  6FC2               	movwf	___wmul@multiplier& (0+255),b
  5164  000872  0E00               	movlw	0
  5165  000874  0100               	movlb	0	; () banked
  5166  000876  21BD               	addwfc	(?___awmod+1)& (0+255),w,b
  5167  000878  0100               	movlb	0	; () banked
  5168  00087A  6FC3               	movwf	(___wmul@multiplier+1)& (0+255),b
  5169  00087C  0E00               	movlw	0
  5170  00087E  0100               	movlb	0	; () banked
  5171  000880  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5172  000882  0E03               	movlw	3
  5173  000884  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  5174  000886  ECAB  F009         	call	___wmul	;wreg free
  5175  00088A  0100               	movlb	0	; () banked
  5176  00088C  51C2               	movf	?___wmul& (0+255),w,b
  5177  00088E  0100               	movlb	0	; () banked
  5178  000890  25C8               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5179  000892  6ED9               	movwf	fsr2l,c
  5180  000894  0100               	movlb	0	; () banked
  5181  000896  51C3               	movf	(?___wmul+1)& (0+255),w,b
  5182  000898  0100               	movlb	0	; () banked
  5183  00089A  21C9               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5184  00089C  6EDA               	movwf	fsr2h,c
  5185  00089E  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5186  0008A2  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5187  0008A6  C0CC  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5191  0008AA  0100               	movlb	0	; () banked
  5192  0008AC  EE20 F002          	lfsr	2,2
  5193  0008B0  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5194  0008B2  26D9               	addwf	fsr2l,f,c
  5195  0008B4  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5196  0008B6  22DA               	addwfc	fsr2h,f,c
  5197  0008B8  2ADF               	incf	indf2,f,c
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5201  0008BA  C0D0  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;ES_Queue.c: 101: return(1);
  5205  0008BE  0E01               	movlw	1
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;ES_Queue.c: 102: }else
  5209                           
  5210                           ; BSR set to: 0
  5211  0008C0  0012               	return	
  5212  0008C2                     l2208:
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;ES_Queue.c: 103: return(0);
  5216  0008C2  0E00               	movlw	0
  5217                           
  5218                           ; BSR set to: 0
  5219  0008C4  0012               	return	
  5220  0008C6                     __end_of_ES_EnQueueFIFO:
  5221                           	opt stack 0
  5222                           tosu	equ	0xFFF
  5223                           tosh	equ	0xFFE
  5224                           tosl	equ	0xFFD
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf1	equ	0xFE7
  5236                           postinc1	equ	0xFE6
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function ___wmul *****************
  5247 ;; Defined at:
  5248 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5251 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  product         2   10[BANK0 ] unsigned int 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  2    6[BANK0 ] unsigned int 
  5256 ;; Registers used:
  5257 ;;		wreg, status,2, status,0, prodl, prodh
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5263 ;;      Params:         0       4       0       0
  5264 ;;      Locals:         0       2       0       0
  5265 ;;      Temps:          0       0       0       0
  5266 ;;      Totals:         0       6       0       0
  5267 ;;Total ram usage:        6 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    6
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_ES_EnQueueFIFO
  5274 ;;		_ES_DeQueue
  5275 ;;		_ES_EnQueueLIFO
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text33
  5280  001356                     __ptext33:
  5281                           	opt stack 0
  5282  001356                     ___wmul:
  5283                           	opt stack 18
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;incstack = 0
  5287  001356  0100               	movlb	0	; () banked
  5288  001358  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5289  00135A  0100               	movlb	0	; () banked
  5290  00135C  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5291  00135E  CFF3 F0C6          	movff	prodl,___wmul@product
  5292  001362  CFF4 F0C7          	movff	prodh,___wmul@product+1
  5293  001366  0100               	movlb	0	; () banked
  5294  001368  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5295  00136A  0100               	movlb	0	; () banked
  5296  00136C  03C5               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5297  00136E  50F3               	movf	prodl,w,c
  5298  001370  0100               	movlb	0	; () banked
  5299  001372  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5300  001374  0100               	movlb	0	; () banked
  5301  001376  51C3               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5302  001378  0100               	movlb	0	; () banked
  5303  00137A  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5304  00137C  50F3               	movf	prodl,w,c
  5305  00137E  0100               	movlb	0	; () banked
  5306  001380  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5307                           
  5308                           ; BSR set to: 0
  5309  001382  C0C6  F0C2         	movff	___wmul@product,?___wmul
  5310  001386  C0C7  F0C3         	movff	___wmul@product+1,?___wmul+1
  5311  00138A  0012               	return	
  5312  00138C                     __end_of___wmul:
  5313                           	opt stack 0
  5314                           tosu	equ	0xFFF
  5315                           tosh	equ	0xFFE
  5316                           tosl	equ	0xFFD
  5317                           pclath	equ	0xFFA
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           indf1	equ	0xFE7
  5328                           postinc1	equ	0xFE6
  5329                           fsr1h	equ	0xFE2
  5330                           fsr1l	equ	0xFE1
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338 ;; *************** function ___awmod *****************
  5339 ;; Defined at:
  5340 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  dividend        2    0[BANK0 ] int 
  5343 ;;  divisor         2    2[BANK0 ] int 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  sign            1    5[BANK0 ] unsigned char 
  5346 ;;  counter         1    4[BANK0 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  2    0[BANK0 ] int 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5356 ;;      Params:         0       4       0       0
  5357 ;;      Locals:         0       2       0       0
  5358 ;;      Temps:          0       0       0       0
  5359 ;;      Totals:         0       6       0       0
  5360 ;;Total ram usage:        6 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    6
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_ES_EnQueueFIFO
  5367 ;;		i2_ES_EnQueueFIFO
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           	psect	text34
  5372  000BC4                     __ptext34:
  5373                           	opt stack 0
  5374  000BC4                     ___awmod:
  5375                           	opt stack 18
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;incstack = 0
  5379  000BC4  0E00               	movlw	0
  5380  000BC6  0100               	movlb	0	; () banked
  5381  000BC8  6FC1               	movwf	___awmod@sign& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384  000BCA  0100               	movlb	0	; () banked
  5385  000BCC  AFBD               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5386  000BCE  D008               	goto	l2164
  5387                           
  5388                           ; BSR set to: 0
  5389  000BD0  0100               	movlb	0	; () banked
  5390  000BD2  6DBC               	negf	___awmod@dividend& (0+255),b
  5391  000BD4  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5392  000BD6  B0D8               	btfsc	status,0,c
  5393  000BD8  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5394                           
  5395                           ; BSR set to: 0
  5396  000BDA  0E01               	movlw	1
  5397  000BDC  0100               	movlb	0	; () banked
  5398  000BDE  6FC1               	movwf	___awmod@sign& (0+255),b
  5399  000BE0                     l2164:
  5400                           
  5401                           ; BSR set to: 0
  5402  000BE0  0100               	movlb	0	; () banked
  5403  000BE2  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5404  000BE4  D005               	goto	l2168
  5405                           
  5406                           ; BSR set to: 0
  5407  000BE6  0100               	movlb	0	; () banked
  5408  000BE8  6DBE               	negf	___awmod@divisor& (0+255),b
  5409  000BEA  1FBF               	comf	(___awmod@divisor+1)& (0+255),f,b
  5410  000BEC  B0D8               	btfsc	status,0,c
  5411  000BEE  2BBF               	incf	(___awmod@divisor+1)& (0+255),f,b
  5412  000BF0                     l2168:
  5413                           
  5414                           ; BSR set to: 0
  5415  000BF0  0100               	movlb	0	; () banked
  5416  000BF2  51BE               	movf	___awmod@divisor& (0+255),w,b
  5417  000BF4  0100               	movlb	0	; () banked
  5418  000BF6  11BF               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5419  000BF8  B4D8               	btfsc	status,2,c
  5420  000BFA  D026               	goto	l2184
  5421                           
  5422                           ; BSR set to: 0
  5423  000BFC  0E01               	movlw	1
  5424  000BFE  0100               	movlb	0	; () banked
  5425  000C00  6FC0               	movwf	___awmod@counter& (0+255),b
  5426  000C02  D006               	goto	l2174
  5427  000C04                     l2172:
  5428                           
  5429                           ; BSR set to: 0
  5430  000C04  0100               	movlb	0	; () banked
  5431  000C06  90D8               	bcf	status,0,c
  5432  000C08  37BE               	rlcf	___awmod@divisor& (0+255),f,b
  5433  000C0A  37BF               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5434  000C0C  0100               	movlb	0	; () banked
  5435  000C0E  2BC0               	incf	___awmod@counter& (0+255),f,b
  5436  000C10                     l2174:
  5437                           
  5438                           ; BSR set to: 0
  5439  000C10  0100               	movlb	0	; () banked
  5440  000C12  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5441  000C14  D7F7               	goto	l2172
  5442  000C16                     l2176:
  5443                           
  5444                           ; BSR set to: 0
  5445  000C16  0100               	movlb	0	; () banked
  5446  000C18  51BE               	movf	___awmod@divisor& (0+255),w,b
  5447  000C1A  0100               	movlb	0	; () banked
  5448  000C1C  5DBC               	subwf	___awmod@dividend& (0+255),w,b
  5449  000C1E  0100               	movlb	0	; () banked
  5450  000C20  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5451  000C22  0100               	movlb	0	; () banked
  5452  000C24  59BD               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5453  000C26  A0D8               	btfss	status,0,c
  5454  000C28  D008               	goto	l2180
  5455                           
  5456                           ; BSR set to: 0
  5457  000C2A  0100               	movlb	0	; () banked
  5458  000C2C  51BE               	movf	___awmod@divisor& (0+255),w,b
  5459  000C2E  0100               	movlb	0	; () banked
  5460  000C30  5FBC               	subwf	___awmod@dividend& (0+255),f,b
  5461  000C32  0100               	movlb	0	; () banked
  5462  000C34  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5463  000C36  0100               	movlb	0	; () banked
  5464  000C38  5BBD               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5465  000C3A                     l2180:
  5466                           
  5467                           ; BSR set to: 0
  5468  000C3A  0100               	movlb	0	; () banked
  5469  000C3C  90D8               	bcf	status,0,c
  5470  000C3E  33BF               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5471  000C40  33BE               	rrcf	___awmod@divisor& (0+255),f,b
  5472                           
  5473                           ; BSR set to: 0
  5474  000C42  0100               	movlb	0	; () banked
  5475  000C44  2FC0               	decfsz	___awmod@counter& (0+255),f,b
  5476  000C46  D7E7               	goto	l2176
  5477  000C48                     l2184:
  5478                           
  5479                           ; BSR set to: 0
  5480  000C48  0100               	movlb	0	; () banked
  5481  000C4A  51C1               	movf	___awmod@sign& (0+255),w,b
  5482  000C4C  0100               	movlb	0	; () banked
  5483  000C4E  B4D8               	btfsc	status,2,c
  5484  000C50  D005               	goto	l2188
  5485                           
  5486                           ; BSR set to: 0
  5487  000C52  0100               	movlb	0	; () banked
  5488  000C54  6DBC               	negf	___awmod@dividend& (0+255),b
  5489  000C56  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5490  000C58  B0D8               	btfsc	status,0,c
  5491  000C5A  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5492  000C5C                     l2188:
  5493                           
  5494                           ; BSR set to: 0
  5495  000C5C  C0BC  F0BC         	movff	___awmod@dividend,?___awmod
  5496  000C60  C0BD  F0BD         	movff	___awmod@dividend+1,?___awmod+1
  5497  000C64  0012               	return	
  5498  000C66                     __end_of___awmod:
  5499                           	opt stack 0
  5500                           tosu	equ	0xFFF
  5501                           tosh	equ	0xFFE
  5502                           tosl	equ	0xFFD
  5503                           pclath	equ	0xFFA
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           intcon	equ	0xFF2
  5511                           postinc0	equ	0xFEE
  5512                           wreg	equ	0xFE8
  5513                           indf1	equ	0xFE7
  5514                           postinc1	equ	0xFE6
  5515                           fsr1h	equ	0xFE2
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _ES_Timer_Init *****************
  5525 ;; Defined at:
  5526 ;;		line 130 in file "ES_Timers.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  Rate            2    2[BANK0 ] enum E15422
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5540 ;;      Params:         0       2       0       0
  5541 ;;      Locals:         0       0       0       0
  5542 ;;      Temps:          0       0       0       0
  5543 ;;      Totals:         0       2       0       0
  5544 ;;Total ram usage:        2 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    7
  5547 ;; This function calls:
  5548 ;;		__HW_Timer_Init
  5549 ;; This function is called by:
  5550 ;;		_ES_Initialize
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text35
  5555  001554                     __ptext35:
  5556                           	opt stack 0
  5557  001554                     _ES_Timer_Init:
  5558                           	opt stack 22
  5559                           
  5560                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;incstack = 0
  5564  001554  C0BE  F0BC         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5565  001558  C0BF  F0BD         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5566  00155C  EC62  F00A         	call	__HW_Timer_Init	;wreg free
  5567  001560  0012               	return		;funcret
  5568  001562                     __end_of_ES_Timer_Init:
  5569                           	opt stack 0
  5570                           tosu	equ	0xFFF
  5571                           tosh	equ	0xFFE
  5572                           tosl	equ	0xFFD
  5573                           pclath	equ	0xFFA
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           indf1	equ	0xFE7
  5584                           postinc1	equ	0xFE6
  5585                           fsr1h	equ	0xFE2
  5586                           fsr1l	equ	0xFE1
  5587                           indf2	equ	0xFDF
  5588                           postinc2	equ	0xFDE
  5589                           postdec2	equ	0xFDD
  5590                           fsr2h	equ	0xFDA
  5591                           fsr2l	equ	0xFD9
  5592                           status	equ	0xFD8
  5593                           
  5594 ;; *************** function __HW_Timer_Init *****************
  5595 ;; Defined at:
  5596 ;;		line 72 in file "ES_Port.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  Rate            2    0[BANK0 ] enum E15412
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5610 ;;      Params:         0       2       0       0
  5611 ;;      Locals:         0       0       0       0
  5612 ;;      Temps:          0       0       0       0
  5613 ;;      Totals:         0       2       0       0
  5614 ;;Total ram usage:        2 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    6
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_ES_Timer_Init
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text36
  5625  0014C4                     __ptext36:
  5626                           	opt stack 0
  5627  0014C4                     __HW_Timer_Init:
  5628                           	opt stack 22
  5629                           
  5630                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  5631                           
  5632                           ;incstack = 0
  5633  0014C4  0E04               	movlw	4
  5634  0014C6  6E9D               	movwf	3997,c	;volatile
  5635                           
  5636                           ;ES_Port.c: 85: INTCON = 0b01000000;
  5637  0014C8  0E40               	movlw	64
  5638  0014CA  6EF2               	movwf	intcon,c	;volatile
  5639                           
  5640                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  5641  0014CC  0E0A               	movlw	10
  5642  0014CE  6EBD               	movwf	4029,c	;volatile
  5643                           
  5644                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  5645  0014D0  0E01               	movlw	1
  5646  0014D2  6EBE               	movwf	4030,c	;volatile
  5647                           
  5648                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  5649  0014D4  0E00               	movlw	0
  5650  0014D6  6EBF               	movwf	4031,c	;volatile
  5651                           
  5652                           ;ES_Port.c: 107: T1CON = 0b00100001;
  5653  0014D8  0E21               	movlw	33
  5654  0014DA  6ECD               	movwf	4045,c	;volatile
  5655                           
  5656                           ;ES_Port.c: 108: PEIE = 1;
  5657  0014DC  8CF2               	bsf	intcon,6,c	;volatile
  5658                           
  5659                           ;ES_Port.c: 109: {GIE = 1;};
  5660  0014DE  8EF2               	bsf	intcon,7,c	;volatile
  5661  0014E0  0012               	return		;funcret
  5662  0014E2                     __end_of__HW_Timer_Init:
  5663                           	opt stack 0
  5664                           tosu	equ	0xFFF
  5665                           tosh	equ	0xFFE
  5666                           tosl	equ	0xFFD
  5667                           pclath	equ	0xFFA
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           indf1	equ	0xFE7
  5678                           postinc1	equ	0xFE6
  5679                           fsr1h	equ	0xFE2
  5680                           fsr1l	equ	0xFE1
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           postdec2	equ	0xFDD
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _ES_InitQueue *****************
  5689 ;; Defined at:
  5690 ;;		line 58 in file "ES_Queue.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5693 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5694 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5697 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      unsigned char 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5707 ;;      Params:         0       3       0       0
  5708 ;;      Locals:         0       2       0       0
  5709 ;;      Temps:          0       0       0       0
  5710 ;;      Totals:         0       5       0       0
  5711 ;;Total ram usage:        5 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    6
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		_ES_Initialize
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text37
  5722  00131A                     __ptext37:
  5723                           	opt stack 0
  5724  00131A                     _ES_InitQueue:
  5725                           	opt stack 23
  5726                           
  5727                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5728                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5729                           
  5730                           ;incstack = 0
  5731  00131A  C0BC  F0BF         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5732  00131E  C0BD  F0C0         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5733                           
  5734                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5735  001322  0100               	movlb	0	; () banked
  5736  001324  05BE               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5737  001326  C0BF  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5738  00132A  C0C0  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5739  00132E  6EDF               	movwf	indf2,c
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5743  001330  0100               	movlb	0	; () banked
  5744  001332  EE20 F001          	lfsr	2,1
  5745  001336  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5746  001338  26D9               	addwf	fsr2l,f,c
  5747  00133A  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5748  00133C  22DA               	addwfc	fsr2h,f,c
  5749  00133E  0E00               	movlw	0
  5750  001340  6EDF               	movwf	indf2,c
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5754  001342  0100               	movlb	0	; () banked
  5755  001344  EE20 F002          	lfsr	2,2
  5756  001348  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5757  00134A  26D9               	addwf	fsr2l,f,c
  5758  00134C  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5759  00134E  22DA               	addwfc	fsr2h,f,c
  5760  001350  0E00               	movlw	0
  5761  001352  6EDF               	movwf	indf2,c
  5762  001354  0012               	return	
  5763  001356                     __end_of_ES_InitQueue:
  5764                           	opt stack 0
  5765                           tosu	equ	0xFFF
  5766                           tosh	equ	0xFFE
  5767                           tosl	equ	0xFFD
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           postinc1	equ	0xFE6
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _ISR *****************
  5790 ;; Defined at:
  5791 ;;		line 112 in file "ES_Port.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5805 ;;      Params:         0       0       0       0
  5806 ;;      Locals:         0       0       0       0
  5807 ;;      Temps:         16       0       0       0
  5808 ;;      Totals:        16       0       0       0
  5809 ;;Total ram usage:       16 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    5
  5812 ;; This function calls:
  5813 ;;		_AnalogISR
  5814 ;;		_BusErrorResponse
  5815 ;;		_CanErrorResponse
  5816 ;;		_CanRCVResponse
  5817 ;;		_CanXmitResponse
  5818 ;; This function is called by:
  5819 ;;		Interrupt level 2
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	intcode
  5824  000008                     __pintcode:
  5825                           	opt stack 0
  5826  000008                     _ISR:
  5827                           	opt stack 18
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;incstack = 0
  5831  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5832  00000A  CFFA F028          	movff	pclath,??_ISR+2
  5833  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  5834  000012  EDCF  F004         	call	int_func,f	;refresh shadow registers
  5835                           tosu	equ	0xFFF
  5836                           tosh	equ	0xFFE
  5837                           tosl	equ	0xFFD
  5838                           pclatu	equ	0xFFB
  5839                           pclath	equ	0xFFA
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           indf1	equ	0xFE7
  5850                           postinc1	equ	0xFE6
  5851                           fsr1h	equ	0xFE2
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860                           	psect	intcode_body
  5861  00099E                     __pintcode_body:
  5862                           	opt stack 18
  5863  00099E                     int_func:
  5864                           	opt stack 18
  5865  00099E  0006               	pop		; remove dummy address from shadow register refresh
  5866  0009A0  CFE9 F02A          	movff	fsr0l,??_ISR+4
  5867  0009A4  CFEA F02B          	movff	fsr0h,??_ISR+5
  5868  0009A8  CFE1 F02C          	movff	fsr1l,??_ISR+6
  5869  0009AC  CFE2 F02D          	movff	fsr1h,??_ISR+7
  5870  0009B0  CFD9 F02E          	movff	fsr2l,??_ISR+8
  5871  0009B4  CFDA F02F          	movff	fsr2h,??_ISR+9
  5872  0009B8  CFF3 F030          	movff	prodl,??_ISR+10
  5873  0009BC  CFF4 F031          	movff	prodh,??_ISR+11
  5874  0009C0  CFF6 F032          	movff	tblptrl,??_ISR+12
  5875  0009C4  CFF7 F033          	movff	tblptrh,??_ISR+13
  5876  0009C8  CFF8 F034          	movff	tblptru,??_ISR+14
  5877  0009CC  CFF5 F035          	movff	tablat,??_ISR+15
  5878                           
  5879                           ;ES_Port.c: 115: static unsigned int LastTime;
  5880                           ;ES_Port.c: 116: static unsigned int NextTime;
  5881                           ;ES_Port.c: 118: if (CCP1IF == 1)
  5882  0009D0  A49E               	btfss	3998,2,c	;volatile
  5883  0009D2  D015               	goto	i2l2932
  5884                           
  5885                           ;ES_Port.c: 119: {
  5886                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5887  0009D4  50BF               	movf	4031,w,c	;volatile
  5888  0009D6  6E26               	movwf	??_ISR& (0+255),c
  5889  0009D8  50BE               	movf	4030,w,c	;volatile
  5890  0009DA  6E36               	movwf	ISR@LastTime,c
  5891  0009DC  C026  F037         	movff	??_ISR,ISR@LastTime+1
  5892                           
  5893                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  5894  0009E0  0E20               	movlw	32
  5895  0009E2  2436               	addwf	ISR@LastTime,w,c
  5896  0009E4  6E38               	movwf	ISR@NextTime,c
  5897  0009E6  0E4E               	movlw	78
  5898  0009E8  2037               	addwfc	ISR@LastTime+1,w,c
  5899  0009EA  6E39               	movwf	ISR@NextTime+1,c
  5900                           
  5901                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  5902  0009EC  5039               	movf	ISR@NextTime+1,w,c
  5903  0009EE  6EBF               	movwf	4031,c	;volatile
  5904                           
  5905                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5906  0009F0  C038  FFBE         	movff	ISR@NextTime,4030	;volatile
  5907                           
  5908                           ;ES_Port.c: 124: CCP1IF = 0;
  5909  0009F4  949E               	bcf	3998,2,c	;volatile
  5910                           
  5911                           ;ES_Port.c: 125: TickCount++;
  5912  0009F6  0100               	movlb	0	; () banked
  5913  0009F8  2B94               	incf	_TickCount& (0+255),f,b	;volatile
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;ES_Port.c: 126: SysTickCounter++;
  5917  0009FA  4A3A               	infsnz	_SysTickCounter,f,c	;volatile
  5918  0009FC  2A3B               	incf	_SysTickCounter+1,f,c	;volatile
  5919  0009FE                     i2l2932:
  5920                           
  5921                           ;ES_Port.c: 127: }
  5922                           ;ES_Port.c: 129: if (TXB0IF == 1)
  5923  0009FE  A4A4               	btfss	4004,2,c	;volatile
  5924  000A00  D003               	goto	i2l2938
  5925                           
  5926                           ;ES_Port.c: 130: {
  5927                           ;ES_Port.c: 131: TXB0IF = 0;
  5928  000A02  94A4               	bcf	4004,2,c	;volatile
  5929                           
  5930                           ;ES_Port.c: 132: CanXmitResponse();
  5931  000A04  ECC8  F00A         	call	_CanXmitResponse	;wreg free
  5932  000A08                     i2l2938:
  5933                           
  5934                           ;ES_Port.c: 133: }
  5935                           ;ES_Port.c: 134: if (RXB0IF == 1) {
  5936  000A08  A0A4               	btfss	4004,0,c	;volatile
  5937  000A0A  D003               	goto	i2l2944
  5938                           
  5939                           ;ES_Port.c: 135: RXB0IF = 0;
  5940  000A0C  90A4               	bcf	4004,0,c	;volatile
  5941                           
  5942                           ;ES_Port.c: 136: CanRCVResponse();
  5943  000A0E  ECC1  F00A         	call	_CanRCVResponse	;wreg free
  5944  000A12                     i2l2944:
  5945                           
  5946                           ;ES_Port.c: 137: }
  5947                           ;ES_Port.c: 138: if (ERRIF == 1) {
  5948  000A12  AAA4               	btfss	4004,5,c	;volatile
  5949  000A14  D003               	goto	i2l2950
  5950                           
  5951                           ;ES_Port.c: 139: ERRIF = 0;
  5952  000A16  9AA4               	bcf	4004,5,c	;volatile
  5953                           
  5954                           ;ES_Port.c: 140: CanErrorResponse();
  5955  000A18  ECCE  F00A         	call	_CanErrorResponse	;wreg free
  5956  000A1C                     i2l2950:
  5957                           
  5958                           ;ES_Port.c: 141: }
  5959                           ;ES_Port.c: 142: if (IRXIF == 1) {
  5960  000A1C  AEA4               	btfss	4004,7,c	;volatile
  5961  000A1E  D003               	goto	i2l2956
  5962                           
  5963                           ;ES_Port.c: 143: IRXIF = 0;
  5964  000A20  9EA4               	bcf	4004,7,c	;volatile
  5965                           
  5966                           ;ES_Port.c: 144: BusErrorResponse();
  5967  000A22  ECCF  F00A         	call	_BusErrorResponse	;wreg free
  5968  000A26                     i2l2956:
  5969                           
  5970                           ;ES_Port.c: 145: }
  5971                           ;ES_Port.c: 146: if (ADIF == 1) {
  5972  000A26  AC9E               	btfss	3998,6,c	;volatile
  5973  000A28  D003               	goto	i2l229
  5974                           
  5975                           ;ES_Port.c: 147: ADIF = 0;
  5976  000A2A  9C9E               	bcf	3998,6,c	;volatile
  5977                           
  5978                           ;ES_Port.c: 148: AnalogISR();
  5979  000A2C  ECCA  F006         	call	_AnalogISR	;wreg free
  5980  000A30                     i2l229:
  5981  000A30  C035  FFF5         	movff	??_ISR+15,tablat
  5982  000A34  C034  FFF8         	movff	??_ISR+14,tblptru
  5983  000A38  C033  FFF7         	movff	??_ISR+13,tblptrh
  5984  000A3C  C032  FFF6         	movff	??_ISR+12,tblptrl
  5985  000A40  C031  FFF4         	movff	??_ISR+11,prodh
  5986  000A44  C030  FFF3         	movff	??_ISR+10,prodl
  5987  000A48  C02F  FFDA         	movff	??_ISR+9,fsr2h
  5988  000A4C  C02E  FFD9         	movff	??_ISR+8,fsr2l
  5989  000A50  C02D  FFE2         	movff	??_ISR+7,fsr1h
  5990  000A54  C02C  FFE1         	movff	??_ISR+6,fsr1l
  5991  000A58  C02B  FFEA         	movff	??_ISR+5,fsr0h
  5992  000A5C  C02A  FFE9         	movff	??_ISR+4,fsr0l
  5993  000A60  C029  FFFB         	movff	??_ISR+3,pclatu
  5994  000A64  C028  FFFA         	movff	??_ISR+2,pclath
  5995  000A68  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5996  000A6A  0011               	retfie		f
  5997  000A6C                     __end_of_ISR:
  5998                           	opt stack 0
  5999                           tosu	equ	0xFFF
  6000                           tosh	equ	0xFFE
  6001                           tosl	equ	0xFFD
  6002                           pclatu	equ	0xFFB
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           postinc0	equ	0xFEE
  6012                           fsr0h	equ	0xFEA
  6013                           fsr0l	equ	0xFE9
  6014                           wreg	equ	0xFE8
  6015                           indf1	equ	0xFE7
  6016                           postinc1	equ	0xFE6
  6017                           fsr1h	equ	0xFE2
  6018                           fsr1l	equ	0xFE1
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _CanXmitResponse *****************
  6027 ;; Defined at:
  6028 ;;		line 187 in file "Can_XmitService.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		None
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6042 ;;      Params:         0       0       0       0
  6043 ;;      Locals:         0       0       0       0
  6044 ;;      Temps:          0       0       0       0
  6045 ;;      Totals:         0       0       0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_ISR
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text39
  6056  001590                     __ptext39:
  6057                           	opt stack 0
  6058  001590                     _CanXmitResponse:
  6059                           	opt stack 22
  6060                           
  6061                           ;Can_XmitService.c: 189: TXB0CONbits.TXREQ = 0;
  6062                           
  6063                           ;incstack = 0
  6064  001590  010F               	movlb	15	; () banked
  6065  001592  9740               	bcf	64,3,b	;volatile
  6066                           
  6067                           ; BSR set to: 15
  6068  001594  0012               	return		;funcret
  6069  001596                     __end_of_CanXmitResponse:
  6070                           	opt stack 0
  6071                           tosu	equ	0xFFF
  6072                           tosh	equ	0xFFE
  6073                           tosl	equ	0xFFD
  6074                           pclatu	equ	0xFFB
  6075                           pclath	equ	0xFFA
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           intcon	equ	0xFF2
  6083                           postinc0	equ	0xFEE
  6084                           fsr0h	equ	0xFEA
  6085                           fsr0l	equ	0xFE9
  6086                           wreg	equ	0xFE8
  6087                           indf1	equ	0xFE7
  6088                           postinc1	equ	0xFE6
  6089                           fsr1h	equ	0xFE2
  6090                           fsr1l	equ	0xFE1
  6091                           indf2	equ	0xFDF
  6092                           postinc2	equ	0xFDE
  6093                           postdec2	equ	0xFDD
  6094                           fsr2h	equ	0xFDA
  6095                           fsr2l	equ	0xFD9
  6096                           status	equ	0xFD8
  6097                           
  6098 ;; *************** function _CanRCVResponse *****************
  6099 ;; Defined at:
  6100 ;;		line 192 in file "Can_XmitService.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;		None
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		None
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6114 ;;      Params:         0       0       0       0
  6115 ;;      Locals:         0       0       0       0
  6116 ;;      Temps:          0       0       0       0
  6117 ;;      Totals:         0       0       0       0
  6118 ;;Total ram usage:        0 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_ISR
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text40
  6128  001582                     __ptext40:
  6129                           	opt stack 0
  6130  001582                     _CanRCVResponse:
  6131                           	opt stack 22
  6132                           
  6133                           ;Can_XmitService.c: 194: if (RXB0CONbits.RXFUL == 1) {
  6134                           
  6135                           ; BSR set to: 15
  6136                           ;incstack = 0
  6137  001582  AE60               	btfss	3936,7,c	;volatile
  6138  001584  0012               	return	
  6139                           
  6140                           ;Can_XmitService.c: 195: RXB0CONbits.RXFUL = 0;
  6141  001586  9E60               	bcf	3936,7,c	;volatile
  6142  001588  0012               	return	
  6143  00158A                     __end_of_CanRCVResponse:
  6144                           	opt stack 0
  6145                           tosu	equ	0xFFF
  6146                           tosh	equ	0xFFE
  6147                           tosl	equ	0xFFD
  6148                           pclatu	equ	0xFFB
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           postinc0	equ	0xFEE
  6158                           fsr0h	equ	0xFEA
  6159                           fsr0l	equ	0xFE9
  6160                           wreg	equ	0xFE8
  6161                           indf1	equ	0xFE7
  6162                           postinc1	equ	0xFE6
  6163                           fsr1h	equ	0xFE2
  6164                           fsr1l	equ	0xFE1
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _CanErrorResponse *****************
  6173 ;; Defined at:
  6174 ;;		line 199 in file "Can_XmitService.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		None
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6188 ;;      Params:         0       0       0       0
  6189 ;;      Locals:         0       0       0       0
  6190 ;;      Temps:          0       0       0       0
  6191 ;;      Totals:         0       0       0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_ISR
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text41
  6202  00159C                     __ptext41:
  6203                           	opt stack 0
  6204  00159C                     _CanErrorResponse:
  6205                           	opt stack 22
  6206                           
  6207                           ;incstack = 0
  6208  00159C  0012               	return		;funcret
  6209  00159E                     __end_of_CanErrorResponse:
  6210                           	opt stack 0
  6211                           tosu	equ	0xFFF
  6212                           tosh	equ	0xFFE
  6213                           tosl	equ	0xFFD
  6214                           pclatu	equ	0xFFB
  6215                           pclath	equ	0xFFA
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           intcon	equ	0xFF2
  6223                           postinc0	equ	0xFEE
  6224                           fsr0h	equ	0xFEA
  6225                           fsr0l	equ	0xFE9
  6226                           wreg	equ	0xFE8
  6227                           indf1	equ	0xFE7
  6228                           postinc1	equ	0xFE6
  6229                           fsr1h	equ	0xFE2
  6230                           fsr1l	equ	0xFE1
  6231                           indf2	equ	0xFDF
  6232                           postinc2	equ	0xFDE
  6233                           postdec2	equ	0xFDD
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238 ;; *************** function _BusErrorResponse *****************
  6239 ;; Defined at:
  6240 ;;		line 204 in file "Can_XmitService.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      void 
  6247 ;; Registers used:
  6248 ;;		None
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6254 ;;      Params:         0       0       0       0
  6255 ;;      Locals:         0       0       0       0
  6256 ;;      Temps:          0       0       0       0
  6257 ;;      Totals:         0       0       0       0
  6258 ;;Total ram usage:        0 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; This function calls:
  6261 ;;		Nothing
  6262 ;; This function is called by:
  6263 ;;		_ISR
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text42
  6268  00159E                     __ptext42:
  6269                           	opt stack 0
  6270  00159E                     _BusErrorResponse:
  6271                           	opt stack 22
  6272                           
  6273                           ;incstack = 0
  6274  00159E  0012               	return		;funcret
  6275  0015A0                     __end_of_BusErrorResponse:
  6276                           	opt stack 0
  6277                           tosu	equ	0xFFF
  6278                           tosh	equ	0xFFE
  6279                           tosl	equ	0xFFD
  6280                           pclatu	equ	0xFFB
  6281                           pclath	equ	0xFFA
  6282                           tblptru	equ	0xFF8
  6283                           tblptrh	equ	0xFF7
  6284                           tblptrl	equ	0xFF6
  6285                           tablat	equ	0xFF5
  6286                           prodh	equ	0xFF4
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           postinc0	equ	0xFEE
  6290                           fsr0h	equ	0xFEA
  6291                           fsr0l	equ	0xFE9
  6292                           wreg	equ	0xFE8
  6293                           indf1	equ	0xFE7
  6294                           postinc1	equ	0xFE6
  6295                           fsr1h	equ	0xFE2
  6296                           fsr1l	equ	0xFE1
  6297                           indf2	equ	0xFDF
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _AnalogISR *****************
  6305 ;; Defined at:
  6306 ;;		line 77 in file "Analog_Service.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6320 ;;      Params:         0       0       0       0
  6321 ;;      Locals:         3       0       0       0
  6322 ;;      Temps:          2       0       0       0
  6323 ;;      Totals:         5       0       0       0
  6324 ;;Total ram usage:        5 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    4
  6327 ;; This function calls:
  6328 ;;		_PostCan_XmitService
  6329 ;;		i2_ES_Timer_InitTimer
  6330 ;; This function is called by:
  6331 ;;		_ISR
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text43
  6336  000D94                     __ptext43:
  6337                           	opt stack 0
  6338  000D94                     _AnalogISR:
  6339                           	opt stack 18
  6340                           
  6341                           ;Analog_Service.c: 79: if (!ADCON0bits.DONE) {
  6342                           
  6343                           ;incstack = 0
  6344  000D94  B2C2               	btfsc	4034,1,c	;volatile
  6345  000D96  0012               	return	
  6346                           
  6347                           ;Analog_Service.c: 80: if (ADCON0bits.CHS == 0x00) {
  6348  000D98  30C2               	rrcf	4034,w,c	;volatile
  6349  000D9A  32E8               	rrcf	wreg,f,c
  6350  000D9C  0B0F               	andlw	15
  6351  000D9E  0900               	iorlw	0
  6352  000DA0  A4D8               	btfss	status,2,c
  6353  000DA2  D013               	goto	i2l2852
  6354                           
  6355                           ;Analog_Service.c: 81: Brightness = (ADRESH<<8)|ADRESL;
  6356  000DA4  50C3               	movf	4035,w,c	;volatile
  6357  000DA6  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6358  000DAA  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6359  000DAC  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6360  000DB0  6A21               	clrf	??_AnalogISR,c
  6361  000DB2  1021               	iorwf	??_AnalogISR,w,c
  6362  000DB4  0100               	movlb	0	; () banked
  6363  000DB6  6F85               	movwf	_Brightness& (0+255),b
  6364  000DB8  5022               	movf	??_AnalogISR+1,w,c
  6365  000DBA  0100               	movlb	0	; () banked
  6366  000DBC  6F86               	movwf	(_Brightness+1)& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;Analog_Service.c: 82: ADCON0bits.CHS = 0x01;
  6370  000DBE  50C2               	movf	4034,w,c	;volatile
  6371  000DC0  0BC3               	andlw	-61
  6372  000DC2  0904               	iorlw	4
  6373  000DC4  6EC2               	movwf	4034,c	;volatile
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;Analog_Service.c: 83: ADCON0bits.GO = 1;
  6377  000DC6  82C2               	bsf	4034,1,c	;volatile
  6378                           
  6379                           ;Analog_Service.c: 84: } else if (ADCON0bits.CHS == 0x01) {
  6380  000DC8  0012               	return	
  6381  000DCA                     i2l2852:
  6382  000DCA  30C2               	rrcf	4034,w,c	;volatile
  6383  000DCC  32E8               	rrcf	wreg,f,c
  6384  000DCE  0B0F               	andlw	15
  6385  000DD0  06E8               	decf	wreg,f,c
  6386  000DD2  A4D8               	btfss	status,2,c
  6387  000DD4  0012               	return	
  6388                           
  6389                           ;Analog_Service.c: 85: Location = (ADRESH<<8)|ADRESL;
  6390  000DD6  50C3               	movf	4035,w,c	;volatile
  6391  000DD8  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6392  000DDC  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6393  000DDE  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6394  000DE2  6A21               	clrf	??_AnalogISR,c
  6395  000DE4  1021               	iorwf	??_AnalogISR,w,c
  6396  000DE6  0100               	movlb	0	; () banked
  6397  000DE8  6F87               	movwf	_Location& (0+255),b
  6398  000DEA  5022               	movf	??_AnalogISR+1,w,c
  6399  000DEC  0100               	movlb	0	; () banked
  6400  000DEE  6F88               	movwf	(_Location+1)& (0+255),b
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;Analog_Service.c: 86: ADCON0bits.CHS = 0x00;
  6404  000DF0  94C2               	bcf	4034,2,c	;volatile
  6405  000DF2  96C2               	bcf	4034,3,c	;volatile
  6406  000DF4  98C2               	bcf	4034,4,c	;volatile
  6407  000DF6  9AC2               	bcf	4034,5,c	;volatile
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;Analog_Service.c: 87: ES_Event Event2Post;
  6411                           ;Analog_Service.c: 88: Event2Post.EventType = XMIT_EVENT;
  6412  000DF8  0E07               	movlw	7
  6413  000DFA  6E23               	movwf	AnalogISR@Event2Post,c
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;Analog_Service.c: 89: PostCan_XmitService(Event2Post);
  6417  000DFC  C023  F01E         	movff	AnalogISR@Event2Post,PostCan_XmitService@ThisEvent
  6418  000E00  C024  F01F         	movff	AnalogISR@Event2Post+1,PostCan_XmitService@ThisEvent+1
  6419  000E04  C025  F020         	movff	AnalogISR@Event2Post+2,PostCan_XmitService@ThisEvent+2
  6420  000E08  EC9F  F00A         	call	_PostCan_XmitService	;wreg free
  6421                           
  6422                           ;Analog_Service.c: 90: ES_Timer_InitTimer(0, 5);
  6423  000E0C  0E00               	movlw	0
  6424  000E0E  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  6425  000E10  0E05               	movlw	5
  6426  000E12  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  6427  000E14  0E00               	movlw	0
  6428  000E16  EC7D  F008         	call	i2_ES_Timer_InitTimer
  6429  000E1A  0012               	return	
  6430  000E1C                     __end_of_AnalogISR:
  6431                           	opt stack 0
  6432                           tosu	equ	0xFFF
  6433                           tosh	equ	0xFFE
  6434                           tosl	equ	0xFFD
  6435                           pclatu	equ	0xFFB
  6436                           pclath	equ	0xFFA
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           postinc0	equ	0xFEE
  6445                           fsr0h	equ	0xFEA
  6446                           fsr0l	equ	0xFE9
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           postinc1	equ	0xFE6
  6450                           fsr1h	equ	0xFE2
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function i2_ES_Timer_InitTimer *****************
  6460 ;; Defined at:
  6461 ;;		line 229 in file "ES_Timers.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  Num             1    wreg     unsigned char 
  6464 ;;  NewTime         2    0[COMRAM] unsigned int 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  Num             1    4[COMRAM] unsigned char 
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      enum E15445
  6469 ;; Registers used:
  6470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6476 ;;      Params:         2       0       0       0
  6477 ;;      Locals:         1       0       0       0
  6478 ;;      Temps:          2       0       0       0
  6479 ;;      Totals:         5       0       0       0
  6480 ;;Total ram usage:        5 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_AnalogISR
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text44
  6490  0010FA                     __ptext44:
  6491                           	opt stack 0
  6492  0010FA                     i2_ES_Timer_InitTimer:
  6493                           	opt stack 21
  6494                           
  6495                           ;incstack = 0
  6496                           ;i2ES_Timer_InitTimer@Num stored from wreg
  6497  0010FA  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  6498                           
  6499                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6500                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6501                           ;ES_Timers.c: 236: (NewTime == 0) )
  6502  0010FC  0E10               	movlw	16
  6503  0010FE  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  6504  001100  0012               	return	
  6505  001102  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6506  001104  0D02               	mullw	2
  6507  001106  0E21               	movlw	low _Timer2PostFunc
  6508  001108  24F3               	addwf	prodl,w,c
  6509  00110A  6EF6               	movwf	tblptrl,c
  6510  00110C  0E03               	movlw	high _Timer2PostFunc
  6511  00110E  20F4               	addwfc	prodh,w,c
  6512  001110  6EF7               	movwf	tblptrh,c
  6513  001112                     	if	0	;There are less than 3 active tblptr bytes
  6514  001112                     	endif
  6515  001112  0009               	tblrd		*+
  6516  001114  50F5               	movf	tablat,w,c
  6517  001116  0009               	tblrd		*+
  6518  001118  10F5               	iorwf	tablat,w,c
  6519  00111A  B4D8               	btfsc	status,2,c
  6520  00111C  0012               	return	
  6521  00111E  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  6522  001120  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  6523  001122  B4D8               	btfsc	status,2,c
  6524  001124  0012               	return	
  6525                           
  6526                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6527                           
  6528                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6529                           ;	Return value of i2_ES_Timer_InitTimer is never used
  6530  001126  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6531  001128  0D02               	mullw	2
  6532  00112A  0E60               	movlw	low _TMR_TimerArray
  6533  00112C  24F3               	addwf	prodl,w,c
  6534  00112E  6ED9               	movwf	fsr2l,c
  6535  001130  0E00               	movlw	high _TMR_TimerArray
  6536  001132  20F4               	addwfc	prodh,w,c
  6537  001134  6EDA               	movwf	fsr2h,c
  6538  001136  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  6539  00113A  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  6540                           
  6541                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6542  00113E  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6543  001140  0D02               	mullw	2
  6544  001142  0E01               	movlw	low _BitNum2SetMask
  6545  001144  24F3               	addwf	prodl,w,c
  6546  001146  6EF6               	movwf	tblptrl,c
  6547  001148  0E03               	movlw	high _BitNum2SetMask
  6548  00114A  20F4               	addwfc	prodh,w,c
  6549  00114C  6EF7               	movwf	tblptrh,c
  6550  00114E                     	if	0	;There are less than 3 active tblptr bytes
  6551  00114E                     	endif
  6552  00114E  0009               	tblrd		*+
  6553  001150  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  6554  001154  0009               	tblrd		*+
  6555  001156  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  6556  00115A  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  6557  00115C  0100               	movlb	0	; () banked
  6558  00115E  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6559  001160  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  6560  001162  0100               	movlb	0	; () banked
  6561  001164  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6562  001166  0012               	return	
  6563  001168                     __end_ofi2_ES_Timer_InitTimer:
  6564                           	opt stack 0
  6565                           tosu	equ	0xFFF
  6566                           tosh	equ	0xFFE
  6567                           tosl	equ	0xFFD
  6568                           pclatu	equ	0xFFB
  6569                           pclath	equ	0xFFA
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           fsr0h	equ	0xFEA
  6579                           fsr0l	equ	0xFE9
  6580                           wreg	equ	0xFE8
  6581                           indf1	equ	0xFE7
  6582                           postinc1	equ	0xFE6
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function _PostCan_XmitService *****************
  6593 ;; Defined at:
  6594 ;;		line 117 in file "Can_XmitService.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      unsigned char 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6608 ;;      Params:         3       0       0       0
  6609 ;;      Locals:         0       0       0       0
  6610 ;;      Temps:          0       0       0       0
  6611 ;;      Totals:         3       0       0       0
  6612 ;;Total ram usage:        3 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    3
  6615 ;; This function calls:
  6616 ;;		i2_ES_PostToService
  6617 ;; This function is called by:
  6618 ;;		_AnalogISR
  6619 ;;		_PostToList
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text45
  6624  00153E                     __ptext45:
  6625                           	opt stack 0
  6626  00153E                     _PostCan_XmitService:
  6627                           	opt stack 18
  6628                           
  6629                           ;Can_XmitService.c: 119: return ES_PostToService( MyPriority, ThisEvent);
  6630                           
  6631                           ;incstack = 0
  6632  00153E  C01E  F018         	movff	PostCan_XmitService@ThisEvent,i2ES_PostToService@TheEvent
  6633  001542  C01F  F019         	movff	PostCan_XmitService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6634  001546  C020  F01A         	movff	PostCan_XmitService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6635  00154A  0100               	movlb	0	; () banked
  6636  00154C  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  6637  00154E  ECE9  F008         	call	i2_ES_PostToService
  6638  001552  0012               	return	
  6639  001554                     __end_of_PostCan_XmitService:
  6640                           	opt stack 0
  6641                           tosu	equ	0xFFF
  6642                           tosh	equ	0xFFE
  6643                           tosl	equ	0xFFD
  6644                           pclatu	equ	0xFFB
  6645                           pclath	equ	0xFFA
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           postinc0	equ	0xFEE
  6654                           fsr0h	equ	0xFEA
  6655                           fsr0l	equ	0xFE9
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           postinc1	equ	0xFE6
  6659                           fsr1h	equ	0xFE2
  6660                           fsr1l	equ	0xFE1
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           
  6668 ;; *************** function i2_ES_PostToService *****************
  6669 ;; Defined at:
  6670 ;;		line 351 in file "ES_Framework.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  WhichService    1    wreg     unsigned char 
  6673 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  WhichService    1   28[COMRAM] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      unsigned char 
  6678 ;; Registers used:
  6679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6685 ;;      Params:         3       0       0       0
  6686 ;;      Locals:         1       0       0       0
  6687 ;;      Temps:          2       0       0       0
  6688 ;;      Totals:         6       0       0       0
  6689 ;;Total ram usage:        6 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    2
  6692 ;; This function calls:
  6693 ;;		i2_ES_EnQueueFIFO
  6694 ;; This function is called by:
  6695 ;;		_PostCan_XmitService
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text46
  6700  0011D2                     __ptext46:
  6701                           	opt stack 0
  6702  0011D2                     i2_ES_PostToService:
  6703                           	opt stack 18
  6704                           
  6705                           ;incstack = 0
  6706                           ;i2ES_PostToService@WhichService stored from wreg
  6707  0011D2  6E1D               	movwf	i2ES_PostToService@WhichService,c
  6708                           
  6709                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6710                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6711                           ;ES_Framework.c: 354: 1 )){
  6712  0011D4  0E03               	movlw	3
  6713  0011D6  601D               	cpfslt	i2ES_PostToService@WhichService,c
  6714  0011D8  D02F               	goto	i2l2546
  6715  0011DA  501D               	movf	i2ES_PostToService@WhichService,w,c
  6716  0011DC  0D03               	mullw	3
  6717  0011DE  0E5C               	movlw	low _EventQueues
  6718  0011E0  24F3               	addwf	prodl,w,c
  6719  0011E2  6EF6               	movwf	tblptrl,c
  6720  0011E4  0E03               	movlw	high _EventQueues
  6721  0011E6  20F4               	addwfc	prodh,w,c
  6722  0011E8  6EF7               	movwf	tblptrh,c
  6723  0011EA                     	if	0	;There are less than 3 active tblptr bytes
  6724  0011EA                     	endif
  6725  0011EA  0009               	tblrd		*+
  6726  0011EC  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  6727  0011F0  000A               	tblrd		*-
  6728  0011F2  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  6729  0011F6  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  6730  0011FA  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  6731  0011FE  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  6732  001202  EC36  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  6733  001206  06E8               	decf	wreg,f,c
  6734  001208  A4D8               	btfss	status,2,c
  6735  00120A  D016               	goto	i2l2546
  6736                           
  6737                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6738  00120C  501D               	movf	i2ES_PostToService@WhichService,w,c
  6739  00120E  0D02               	mullw	2
  6740  001210  0E01               	movlw	low _BitNum2SetMask
  6741  001212  24F3               	addwf	prodl,w,c
  6742  001214  6EF6               	movwf	tblptrl,c
  6743  001216  0E03               	movlw	high _BitNum2SetMask
  6744  001218  20F4               	addwfc	prodh,w,c
  6745  00121A  6EF7               	movwf	tblptrh,c
  6746  00121C                     	if	0	;There are less than 3 active tblptr bytes
  6747  00121C                     	endif
  6748  00121C  0009               	tblrd		*+
  6749  00121E  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  6750  001222  0009               	tblrd		*+
  6751  001224  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  6752  001228  501B               	movf	??i2_ES_PostToService,w,c
  6753  00122A  0100               	movlb	0	; () banked
  6754  00122C  1389               	iorwf	_Ready& (0+255),f,b
  6755  00122E  501C               	movf	??i2_ES_PostToService+1,w,c
  6756  001230  0100               	movlb	0	; () banked
  6757  001232  138A               	iorwf	(_Ready+1)& (0+255),f,b
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;ES_Framework.c: 356: return 1;
  6761  001234  0E01               	movlw	1
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;ES_Framework.c: 357: } else
  6765                           
  6766                           ; BSR set to: 0
  6767  001236  0012               	return	
  6768  001238                     i2l2546:
  6769                           
  6770                           ;ES_Framework.c: 358: return 0;
  6771  001238  0E00               	movlw	0
  6772  00123A  0012               	return	
  6773  00123C                     __end_ofi2_ES_PostToService:
  6774                           	opt stack 0
  6775                           tosu	equ	0xFFF
  6776                           tosh	equ	0xFFE
  6777                           tosl	equ	0xFFD
  6778                           pclatu	equ	0xFFB
  6779                           pclath	equ	0xFFA
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           postinc0	equ	0xFEE
  6788                           fsr0h	equ	0xFEA
  6789                           fsr0l	equ	0xFE9
  6790                           wreg	equ	0xFE8
  6791                           indf1	equ	0xFE7
  6792                           postinc1	equ	0xFE6
  6793                           fsr1h	equ	0xFE2
  6794                           fsr1l	equ	0xFE1
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function i2_ES_EnQueueFIFO *****************
  6803 ;; Defined at:
  6804 ;;		line 85 in file "ES_Queue.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  6807 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6808 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  6811 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6812 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      unsigned char 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6822 ;;      Params:         5       0       0       0
  6823 ;;      Locals:         3       0       0       0
  6824 ;;      Temps:          3       0       0       0
  6825 ;;      Totals:        11       0       0       0
  6826 ;;Total ram usage:       11 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    1
  6829 ;; This function calls:
  6830 ;;		i2___awmod
  6831 ;;		i2___wmul
  6832 ;; This function is called by:
  6833 ;;		i2_ES_PostToService
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           	psect	text47
  6838  000A6C                     __ptext47:
  6839                           	opt stack 0
  6840  000A6C                     i2_ES_EnQueueFIFO:
  6841                           	opt stack 18
  6842                           
  6843                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6844                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6845                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6846                           
  6847                           ;incstack = 0
  6848  000A6C  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  6849  000A70  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  6850                           
  6851                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6852  000A74  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6853  000A78  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6854  000A7C  EE10 F002          	lfsr	1,2
  6855  000A80  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6856  000A82  26E1               	addwf	fsr1l,f,c
  6857  000A84  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6858  000A86  22E2               	addwfc	fsr1h,f,c
  6859  000A88  50DE               	movf	postinc2,w,c
  6860  000A8A  5CE6               	subwf	postinc1,w,c
  6861  000A8C  B0D8               	btfsc	status,0,c
  6862  000A8E  D046               	goto	i2l2322
  6863                           
  6864                           ;ES_Queue.c: 92: {
  6865                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6866  000A90  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  6867  000A94  9EF2               	bcf	intcon,7,c	;volatile
  6868                           
  6869                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6870                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6871  000A96  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6872  000A9A  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6873  000A9E  50DF               	movf	indf2,w,c
  6874  000AA0  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  6875  000AA2  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  6876  000AA4  6E03               	movwf	i2___awmod@divisor,c
  6877  000AA6  6A04               	clrf	i2___awmod@divisor+1,c
  6878  000AA8  EE20 F002          	lfsr	2,2
  6879  000AAC  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6880  000AAE  26D9               	addwf	fsr2l,f,c
  6881  000AB0  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6882  000AB2  22DA               	addwfc	fsr2h,f,c
  6883  000AB4  50DF               	movf	indf2,w,c
  6884  000AB6  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  6885  000AB8  EE20 F001          	lfsr	2,1
  6886  000ABC  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6887  000ABE  26D9               	addwf	fsr2l,f,c
  6888  000AC0  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6889  000AC2  22DA               	addwfc	fsr2h,f,c
  6890  000AC4  50DF               	movf	indf2,w,c
  6891  000AC6  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  6892  000AC8  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  6893  000ACA  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  6894  000ACC  6E01               	movwf	i2___awmod@dividend,c
  6895  000ACE  6A02               	clrf	i2___awmod@dividend+1,c
  6896  000AD0  3602               	rlcf	i2___awmod@dividend+1,f,c
  6897  000AD2  EC45  F008         	call	i2___awmod	;wreg free
  6898  000AD6  0E01               	movlw	1
  6899  000AD8  2401               	addwf	?i2___awmod,w,c
  6900  000ADA  6E07               	movwf	i2___wmul@multiplier,c
  6901  000ADC  0E00               	movlw	0
  6902  000ADE  2002               	addwfc	?i2___awmod+1,w,c
  6903  000AE0  6E08               	movwf	i2___wmul@multiplier+1,c
  6904  000AE2  0E00               	movlw	0
  6905  000AE4  6E0A               	movwf	i2___wmul@multiplicand+1,c
  6906  000AE6  0E03               	movlw	3
  6907  000AE8  6E09               	movwf	i2___wmul@multiplicand,c
  6908  000AEA  EC4F  F00A         	call	i2___wmul	;wreg free
  6909  000AEE  5007               	movf	?i2___wmul,w,c
  6910  000AF0  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  6911  000AF2  6ED9               	movwf	fsr2l,c
  6912  000AF4  5008               	movf	?i2___wmul+1,w,c
  6913  000AF6  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  6914  000AF8  6EDA               	movwf	fsr2h,c
  6915  000AFA  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  6916  000AFE  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  6917  000B02  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  6918                           
  6919                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6920  000B06  EE20 F002          	lfsr	2,2
  6921  000B0A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6922  000B0C  26D9               	addwf	fsr2l,f,c
  6923  000B0E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6924  000B10  22DA               	addwfc	fsr2h,f,c
  6925  000B12  2ADF               	incf	indf2,f,c
  6926                           
  6927                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6928  000B14  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6929                           
  6930                           ;ES_Queue.c: 101: return(1);
  6931  000B18  0E01               	movlw	1
  6932                           
  6933                           ;ES_Queue.c: 102: }else
  6934  000B1A  0012               	return	
  6935  000B1C                     i2l2322:
  6936                           
  6937                           ;ES_Queue.c: 103: return(0);
  6938  000B1C  0E00               	movlw	0
  6939  000B1E  0012               	return	
  6940  000B20                     __end_ofi2_ES_EnQueueFIFO:
  6941                           	opt stack 0
  6942                           tosu	equ	0xFFF
  6943                           tosh	equ	0xFFE
  6944                           tosl	equ	0xFFD
  6945                           pclatu	equ	0xFFB
  6946                           pclath	equ	0xFFA
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           intcon	equ	0xFF2
  6954                           postinc0	equ	0xFEE
  6955                           fsr0h	equ	0xFEA
  6956                           fsr0l	equ	0xFE9
  6957                           wreg	equ	0xFE8
  6958                           indf1	equ	0xFE7
  6959                           postinc1	equ	0xFE6
  6960                           fsr1h	equ	0xFE2
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function i2___wmul *****************
  6970 ;; Defined at:
  6971 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  multiplier      2    6[COMRAM] unsigned int 
  6974 ;;  multiplicand    2    8[COMRAM] unsigned int 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  __wmul          2   10[COMRAM] unsigned int 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  2    6[COMRAM] unsigned int 
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, prodl, prodh
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6986 ;;      Params:         4       0       0       0
  6987 ;;      Locals:         2       0       0       0
  6988 ;;      Temps:          0       0       0       0
  6989 ;;      Totals:         6       0       0       0
  6990 ;;Total ram usage:        6 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		i2_ES_EnQueueFIFO
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text48
  7000  00149E                     __ptext48:
  7001                           	opt stack 0
  7002  00149E                     i2___wmul:
  7003                           	opt stack 18
  7004                           
  7005                           ;incstack = 0
  7006  00149E  5007               	movf	i2___wmul@multiplier,w,c
  7007  0014A0  0209               	mulwf	i2___wmul@multiplicand,c
  7008  0014A2  CFF3 F00B          	movff	prodl,i2___wmul@product
  7009  0014A6  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7010  0014AA  5007               	movf	i2___wmul@multiplier,w,c
  7011  0014AC  020A               	mulwf	i2___wmul@multiplicand+1,c
  7012  0014AE  50F3               	movf	prodl,w,c
  7013  0014B0  260C               	addwf	i2___wmul@product+1,f,c
  7014  0014B2  5008               	movf	i2___wmul@multiplier+1,w,c
  7015  0014B4  0209               	mulwf	i2___wmul@multiplicand,c
  7016  0014B6  50F3               	movf	prodl,w,c
  7017  0014B8  260C               	addwf	i2___wmul@product+1,f,c
  7018  0014BA  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7019  0014BE  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7020  0014C2  0012               	return	
  7021  0014C4                     __end_ofi2___wmul:
  7022                           	opt stack 0
  7023                           tosu	equ	0xFFF
  7024                           tosh	equ	0xFFE
  7025                           tosl	equ	0xFFD
  7026                           pclatu	equ	0xFFB
  7027                           pclath	equ	0xFFA
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           postinc0	equ	0xFEE
  7036                           fsr0h	equ	0xFEA
  7037                           fsr0l	equ	0xFE9
  7038                           wreg	equ	0xFE8
  7039                           indf1	equ	0xFE7
  7040                           postinc1	equ	0xFE6
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function i2___awmod *****************
  7051 ;; Defined at:
  7052 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  dividend        2    0[COMRAM] int 
  7055 ;;  divisor         2    2[COMRAM] int 
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  __awmod         1    5[COMRAM] unsigned char 
  7058 ;;  __awmod         1    4[COMRAM] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  2    0[COMRAM] int 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7068 ;;      Params:         4       0       0       0
  7069 ;;      Locals:         2       0       0       0
  7070 ;;      Temps:          0       0       0       0
  7071 ;;      Totals:         6       0       0       0
  7072 ;;Total ram usage:        6 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; This function calls:
  7075 ;;		Nothing
  7076 ;; This function is called by:
  7077 ;;		i2_ES_EnQueueFIFO
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text49
  7082  00108A                     __ptext49:
  7083                           	opt stack 0
  7084  00108A                     i2___awmod:
  7085                           	opt stack 18
  7086                           
  7087                           ;incstack = 0
  7088  00108A  0E00               	movlw	0
  7089  00108C  6E06               	movwf	i2___awmod@sign,c
  7090  00108E  AE02               	btfss	i2___awmod@dividend+1,7,c
  7091  001090  D006               	goto	i2l2242
  7092  001092  6C01               	negf	i2___awmod@dividend,c
  7093  001094  1E02               	comf	i2___awmod@dividend+1,f,c
  7094  001096  B0D8               	btfsc	status,0,c
  7095  001098  2A02               	incf	i2___awmod@dividend+1,f,c
  7096  00109A  0E01               	movlw	1
  7097  00109C  6E06               	movwf	i2___awmod@sign,c
  7098  00109E                     i2l2242:
  7099  00109E  AE04               	btfss	i2___awmod@divisor+1,7,c
  7100  0010A0  D004               	goto	i2l2246
  7101  0010A2  6C03               	negf	i2___awmod@divisor,c
  7102  0010A4  1E04               	comf	i2___awmod@divisor+1,f,c
  7103  0010A6  B0D8               	btfsc	status,0,c
  7104  0010A8  2A04               	incf	i2___awmod@divisor+1,f,c
  7105  0010AA                     i2l2246:
  7106  0010AA  5003               	movf	i2___awmod@divisor,w,c
  7107  0010AC  1004               	iorwf	i2___awmod@divisor+1,w,c
  7108  0010AE  B4D8               	btfsc	status,2,c
  7109  0010B0  D018               	goto	i2l2262
  7110  0010B2  0E01               	movlw	1
  7111  0010B4  6E05               	movwf	i2___awmod@counter,c
  7112  0010B6  D004               	goto	i2l2252
  7113  0010B8                     i2l2250:
  7114  0010B8  90D8               	bcf	status,0,c
  7115  0010BA  3603               	rlcf	i2___awmod@divisor,f,c
  7116  0010BC  3604               	rlcf	i2___awmod@divisor+1,f,c
  7117  0010BE  2A05               	incf	i2___awmod@counter,f,c
  7118  0010C0                     i2l2252:
  7119  0010C0  AE04               	btfss	i2___awmod@divisor+1,7,c
  7120  0010C2  D7FA               	goto	i2l2250
  7121  0010C4                     i2l2254:
  7122  0010C4  5003               	movf	i2___awmod@divisor,w,c
  7123  0010C6  5C01               	subwf	i2___awmod@dividend,w,c
  7124  0010C8  5004               	movf	i2___awmod@divisor+1,w,c
  7125  0010CA  5802               	subwfb	i2___awmod@dividend+1,w,c
  7126  0010CC  A0D8               	btfss	status,0,c
  7127  0010CE  D004               	goto	i2l2258
  7128  0010D0  5003               	movf	i2___awmod@divisor,w,c
  7129  0010D2  5E01               	subwf	i2___awmod@dividend,f,c
  7130  0010D4  5004               	movf	i2___awmod@divisor+1,w,c
  7131  0010D6  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7132  0010D8                     i2l2258:
  7133  0010D8  90D8               	bcf	status,0,c
  7134  0010DA  3204               	rrcf	i2___awmod@divisor+1,f,c
  7135  0010DC  3203               	rrcf	i2___awmod@divisor,f,c
  7136  0010DE  2E05               	decfsz	i2___awmod@counter,f,c
  7137  0010E0  D7F1               	goto	i2l2254
  7138  0010E2                     i2l2262:
  7139  0010E2  5006               	movf	i2___awmod@sign,w,c
  7140  0010E4  B4D8               	btfsc	status,2,c
  7141  0010E6  D004               	goto	i2l2266
  7142  0010E8  6C01               	negf	i2___awmod@dividend,c
  7143  0010EA  1E02               	comf	i2___awmod@dividend+1,f,c
  7144  0010EC  B0D8               	btfsc	status,0,c
  7145  0010EE  2A02               	incf	i2___awmod@dividend+1,f,c
  7146  0010F0                     i2l2266:
  7147  0010F0  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7148  0010F4  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7149  0010F8  0012               	return	
  7150  0010FA                     __end_ofi2___awmod:
  7151                           	opt stack 0
  7152                           tosu	equ	0xFFF
  7153                           tosh	equ	0xFFE
  7154                           tosl	equ	0xFFD
  7155                           pclatu	equ	0xFFB
  7156                           pclath	equ	0xFFA
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           postinc0	equ	0xFEE
  7165                           fsr0h	equ	0xFEA
  7166                           fsr0l	equ	0xFE9
  7167                           wreg	equ	0xFE8
  7168                           indf1	equ	0xFE7
  7169                           postinc1	equ	0xFE6
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           fsr2h	equ	0xFDA
  7176                           fsr2l	equ	0xFD9
  7177                           status	equ	0xFD8
  7178                           tosu	equ	0xFFF
  7179                           tosh	equ	0xFFE
  7180                           tosl	equ	0xFFD
  7181                           pclatu	equ	0xFFB
  7182                           pclath	equ	0xFFA
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           indf1	equ	0xFE7
  7195                           postinc1	equ	0xFE6
  7196                           fsr1h	equ	0xFE2
  7197                           fsr1l	equ	0xFE1
  7198                           indf2	equ	0xFDF
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205                           	psect	text50
  7206  000000                     __ptext50:
  7207                           	opt stack 0
  7208                           tosu	equ	0xFFF
  7209                           tosh	equ	0xFFE
  7210                           tosl	equ	0xFFD
  7211                           pclatu	equ	0xFFB
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           postinc0	equ	0xFEE
  7221                           fsr0h	equ	0xFEA
  7222                           fsr0l	equ	0xFE9
  7223                           wreg	equ	0xFE8
  7224                           indf1	equ	0xFE7
  7225                           postinc1	equ	0xFE6
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235                           	psect	rparam
  7236  0000                     tosu	equ	0xFFF
  7237                           tosh	equ	0xFFE
  7238                           tosl	equ	0xFFD
  7239                           pclatu	equ	0xFFB
  7240                           pclath	equ	0xFFA
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           postinc0	equ	0xFEE
  7249                           fsr0h	equ	0xFEA
  7250                           fsr0l	equ	0xFE9
  7251                           wreg	equ	0xFE8
  7252                           indf1	equ	0xFE7
  7253                           postinc1	equ	0xFE6
  7254                           fsr1h	equ	0xFE2
  7255                           fsr1l	equ	0xFE1
  7256                           indf2	equ	0xFDF
  7257                           postinc2	equ	0xFDE
  7258                           postdec2	equ	0xFDD
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263                           	psect	temp
  7264  00003E                     btemp:
  7265                           	opt stack 0
  7266  00003E                     	ds	1
  7267  0000                     int$flags	set	btemp
  7268                           tosu	equ	0xFFF
  7269                           tosh	equ	0xFFE
  7270                           tosl	equ	0xFFD
  7271                           pclatu	equ	0xFFB
  7272                           pclath	equ	0xFFA
  7273                           tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           intcon	equ	0xFF2
  7280                           postinc0	equ	0xFEE
  7281                           fsr0h	equ	0xFEA
  7282                           fsr0l	equ	0xFE9
  7283                           wreg	equ	0xFE8
  7284                           indf1	equ	0xFE7
  7285                           postinc1	equ	0xFE6
  7286                           fsr1h	equ	0xFE2
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           postdec2	equ	0xFDD
  7291                           fsr2h	equ	0xFDA
  7292                           fsr2l	equ	0xFD9
  7293                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        0
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      61
    BANK0           160     44     136
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostAnalogService(), Absolute function(), PostButtonDebounceSM(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S186$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S153$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    S153$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> Check4Keystroke(), CheckButtonEvents(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_AnalogISR
    _AnalogISR->_PostCan_XmitService
    _PostCan_XmitService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_CheckUserEvents
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostAnalogService
    _ES_Timer_Tick_Resp->_PostButtonDebounceSM
    _PostAnalogService->_ES_PostToService
    _XmitData->_GetBrightness
    _XmitData->_GetLocation
    _RunButtonDebounceSM->_ES_PostAll
    _ES_PostAll->_ES_EnQueueFIFO
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitAnalogService
    _ES_Initialize->_InitCan_XmitService
    _InitializeButtonDebounce->_ES_Timer_InitTimer
    _InitCan_XmitService->_ES_PostToService
    _InitAnalogService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22978
                                             43 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   15803
                                             38 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunAnalogService *
                _RunButtonDebounceSM *
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6044
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6044
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostAnalogService *
               _PostButtonDebounceSM *
 ---------------------------------------------------------------------------------
 (4) _PostAnalogService                                    3     0      3    2806
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   8     5      3     135
                                             29 BANK0      8     5      3
                    _InitCanHardware
                           _InitPins
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              2 BANK0      1     1      0
                      _GetBrightness
                        _GetLocation
 ---------------------------------------------------------------------------------
 (4) _GetLocation                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetBrightness                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunButtonDebounceSM                                  6     3      3    3194
                                             29 BANK0      6     3      3
                         _ES_PostAll
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_PostAll                                           6     3      3    2575
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (2) _RunAnalogService                                     6     3      3     629
                                             29 BANK0      6     3      3
                 _ES_Timer_InitTimer
                       _InitAnalogHW
 ---------------------------------------------------------------------------------
 (3) _InitAnalogHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3178
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3088
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    2905
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6779
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitAnalogService *
                _InitCan_XmitService *
           _InitializeButtonDebounce *
 ---------------------------------------------------------------------------------
 (2) _InitializeButtonDebounce                             1     1      0     508
                                              5 BANK0      1     1      0
                 _ES_Timer_InitTimer
                       _GetInputLine
                       _InitButtonHW
 ---------------------------------------------------------------------------------
 (3) _InitButtonHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     486
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitAnalogService                                    4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2731
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2289
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    1158
                                             37 COMRAM    16    16      0
                          _AnalogISR
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _AnalogISR                                            5     5      0    1158
                                             32 COMRAM     5     5      0
                _PostCan_XmitService
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _PostCan_XmitService                                 3     0      3     977
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitAnalogService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitializeButtonDebounce *
       _ES_Timer_InitTimer
       _GetInputLine
       _InitButtonHW
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunAnalogService *
       _ES_Timer_InitTimer
       _InitAnalogHW
     _RunButtonDebounceSM *
       _ES_PostAll
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _XmitData
         _GetBrightness
         _GetLocation
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostAnalogService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostButtonDebounceSM *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _AnalogISR
     _PostCan_XmitService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_ES_Timer_InitTimer
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2C      88       4       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5       9        0.0%
DATA                 0      0      C5      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec  2 14:52:45 2016

           Analog_Service@MyPriority 008D                     ??__HW_Timer_Init 00BE  
                 ??_RunAnalogService 00DC                  ES_CheckUserEvents@i 00E1  
         CheckButtonEvents@ReturnVal 00DC                  __HW_Timer_Init@Rate 00BC  
                ___wmul@multiplicand 00C4            __size_of_BusErrorResponse 0002  
                                l503 08EC                                  l505 0902  
                                l506 0918                                  l507 092E  
                                l380 0D92                                  l526 0E20  
                                l529 0E84                __end_of_ES_Initialize 07E4  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 00C1              __end_of_Check4Keystroke 159A  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00D0  
                __end_of_GetLocation 1578              ES_EnQueueFIFO@Event2Add 00CA  
                      ?_InitAnalogHW 0001                    ?_ES_PostToService 00D3  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 0080  
                               l3030 0D68                                 l2208 08C2  
                               l2224 1086                                 l3024 0D32  
                               l2402 0502                                 l3026 0D44  
                               l3034 0D7A                                 l2180 0C3A  
                               l2172 0C04                                 l2164 0BE0  
                               l2412 057A                                 l3028 0D56  
                               l2174 0C10                                 l2414 05B8  
                               l2176 0C16                                 l2184 0C48  
                               l2168 0BF0                                 l2520 12E6  
                               l2280 0B2C                                 l2362 11C8  
                               l2602 129C                                 l2370 0FA2  
                               l2290 0BB8                                 l2188 0C5C  
                               l2358 11B2                                 l2374 0FAC  
                               l2294 0BBE                                 l2528 130E  
                               l2632 04C0                                 l2810 07E0  
                               l2722 098A                                 l2570 0C7A  
                               l2628 04A4                                 l2716 0944  
                               l2660 1506                                 l2820 0688  
                               l2806 07DA                                 l2638 04E8  
                               l2718 0978                                 l2590 0CEC  
                               l2566 0C68                                 l2830 06F2  
                               l2814 0606                                 l2656 14FE  
                               l2746 13EC                                 l2578 0CAA  
                               l2826 06DC                                 l2588 0CDC  
                               l2764 1278                                 l2678 141C  
                               l2790 0714                                 l2598 1292  
                               l2694 08E0                                 l2758 1262  
                               l2794 0758                                 l2786 070A  
                               l2866 139A                                 l2868 13A2  
                               l2798 075C                                 _ADIE 007CEE  
                               _ADIF 007CF6                                 STR_1 036B  
                               STR_2 0386                                 STR_3 039E  
                               STR_4 03B5                                 u1144 0B52  
                               u1145 0B4A                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u1288 0562                                 u1398 12B2  
                               u1638 06B2                                 u1399 12CA  
                               u1639 06CA                                 _PIE1 000F9D  
                               u1598 07B4                                 u1599 07D0  
                               _PEIE 007F96                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00D6  
                               _main 0D00                          ?_ES_DeQueue 00C8  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 003E                        main@ErrorType 00E7  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D9  
       __end_ofi2_ES_Timer_InitTimer 1168                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      ?_InitButtonHW 0001                    _PostAnalogService 1528  
   __end_of_InitializeButtonDebounce 144E                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00D9                         ___param_bank 000010  
                 ?_PostAnalogService 00D9                 __end_of_GetInputLine 1590  
              __end_of_GetBrightness 1582              __end_of_InitCanHardware 0EA0  
                              ??_ISR 0026                   ES_Run@HighestPrior 00E6  
                        ?_ES_PostAll 00D3                  ??_PostAnalogService 00DC  
                              ?_main 0001                __end_of_ES_Timer_Init 1562  
                    __end_of___awmod 0C66                      __end_of___lbmod 131A  
                              _T1CON 000FCD                           _DistList00 0369  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l229 0A30  
                              _IRXIE 007D1F                                _IRXIF 007D27  
         __size_of_CheckButtonEvents 006A                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                           _Brightness 0085  
                      __CFG_PWRT$OFF 000000                                _Ready 0089  
                     ??_InitAnalogHW 00BC                  AnalogISR@Event2Post 0023  
                              _putch 159A                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                   __end_ofi2___wmul 14C4            __end_of_PostAnalogService 153E  
                              status 000FD8                       ??_InitButtonHW 00BC  
                 __size_ofi2___awmod 0070                      __initialization 1478  
             ES_GetMSBitSet@LoopCntr 00C5           __end_of_ES_CheckUserEvents 12D6  
                       __end_of_main 0D94                    ES_Timer_Init@Rate 00BE  
                 __size_of_AnalogISR 0088                     __end_of_InitPins 14FC  
         PostAnalogService@ThisEvent 00D9            RunAnalogService@ThisEvent 00D9  
                        _GetLocation 156E                  __end_of_EventQueues 0365  
                             ??_main 00E7                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002                  __size_of_ES_DeQueue 0128  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 1512  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
                  ?_CanErrorResponse 0001                               _ADCON1 000FC1  
     RunButtonDebounceSM@ReturnEvent 00DC                     __end_of_XmitData 0F9C  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                               _CIOCON 000F73  
                         _MyPriority 0093                               ?_putch 0001  
                   ??_ES_GetMSBitSet 00BE                               i2l2250 10B8  
                             i2l2242 109E                               i2l2322 0B1C  
                             i2l2252 10C0                               i2l2254 10C4  
                             i2l2262 10E2                               i2l2246 10AA  
                             i2l2266 10F0                               i2l2258 10D8  
                             i2l2546 1238                               i2l2852 0DCA  
                             i2l2932 09FE                               i2l2950 0A1C  
                             i2l2944 0A12                               i2l2938 0A08  
                             i2l2956 0A26                               _INTCON 000FF2  
                __size_of_ES_PostAll 0078                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 0604  
                             _TXB0D0 000F46                               _TXB0D1 000F47  
                             _TXB0D2 000F48                               _TXB0D3 000F49  
                             _TXB0D4 000F4A               ??_PostButtonDebounceSM 00DC  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0001                     ??_ES_EnQueueFIFO 00CD  
                     _Timer2PostFunc 0321                               _Queue0 0095  
                             _Queue1 00A1                               _Queue2 00AD  
                     _SysTickCounter 003A                               ___wmul 1356  
                          ??___awmod 00C0                            ??___lbmod 00BD  
                   ?_InitCanHardware 0001             _InitializeButtonDebounce 1420  
        RunAnalogService@ReturnEvent 00DC         __size_of_RunButtonDebounceSM 009A  
                _PostCan_XmitService 153E          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 147E                               clear_1 148A  
                   _BusErrorResponse 159E                      ___awmod@divisor 00BE  
          ES_Timer_InitTimer@NewTime 00BC                      ___awmod@counter 00C0  
                             _printf 138C                          ISR@LastTime 0036  
                  _InitAnalogService 13C0               ES_InitQueue@pThisQueue 00BF  
                  __end_ofi2___awmod 10FA                 i2_ES_Timer_InitTimer 10FA  
                       __mediumconst 0000                          ISR@NextTime 0038  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                   ?_InitAnalogService 0001  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00D0  
            ES_GetMSBitSet@Val2Check 00BC                 ?_PostCan_XmitService 001E  
        InitCan_XmitService@Priority 00DC                    __end_of_AnalogISR 0E1C  
                    ___lbmod@divisor 00BC                  ??_InitAnalogService 00D9  
                         __accesstop 0060              __end_of__initialization 1490  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 00BE  
         __size_of_PostAnalogService 0016                      __CFG_PBADEN$OFF 000000  
              __size_of_GetInputLine 0006                        ___rparam_used 000001  
                        _EventQueues 035C          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                 __end_of_InitAnalogHW 1478  
                      ?_ES_InitQueue 00BC              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 159C                      _TMR_ActiveFlags 008B  
          __end_of_InitAnalogService 13F0                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 00C3          __end_of_InitCan_XmitService 1420  
          __size_of_RunAnalogService 0050                 __end_of_InitButtonHW 156E  
              ?i2_ES_Timer_InitTimer 0001                       _TMR_TimerArray 0060  
                       _GetInputLine 158A                ??_PostCan_XmitService 0021  
           ES_EnQueueFIFO@pThisQueue 00D1                              ??_putch 00BC  
           __HW_Process_Pending_Ints 14FC                           __pbssBANK0 0060  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 00CC          __size_of_RunCan_XmitService 00D8  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BF  
                            ?___wmul 00C2                         ??_ES_PostAll 00D6  
       RunButtonDebounceSM@ThisEvent 00D9                              _CCP1CON 000FBD  
                          ?_XmitData 0001                          ES_PostAll@i 00D8  
                            _ECANCON 000F77                              ?_printf 00BC  
                         ??i2___wmul 000B                   __end_of_ES_DeQueue 04EE  
             i2ES_EnQueueFIFO@pBlock 000D                              _TXB0DLC 000F45  
                         ??_InitPins 00BC                   __end_of_ES_PostAll 1014  
                    __size_of_ES_Run 00F4               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006            i2ES_EnQueueFIFO@Event2Add 000F  
                            ___awmod 0BC4                              ___lbmod 12D6  
                ES_PostAll@ThisEvent 00D3                      __size_of___wmul 0036  
                       __psmallconst 0300                           ??_XmitData 00BE  
              ES_Timer_InitTimer@Num 00C0           i2ES_PostToService@TheEvent 0018  
                            __pcinit 1478                         ?_GetLocation 00BC  
                            __ramtop 0300           __size_of_InitAnalogService 0030  
                            __ptext0 0D00                              __ptext1 138C  
                            __ptext2 159A                              __ptext3 0604  
                            __ptext4 14FC                              __ptext5 04EE  
                            __ptext6 1512                              __ptext7 1528  
                            __ptext8 0B20                              __ptext9 123C  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
             ??i2_ES_Timer_InitTimer 0003                         __size_of_ISR 0A64  
            __size_of__HW_Timer_Init 001E                     ___awmod@dividend 00BC  
                 _ES_CheckUserEvents 128C                      ES_Run@ThisEvent 00B9  
                     __pintcode_body 099E               __size_of_GetBrightness 000A  
               end_of_initialization 1490                  _RunButtonDebounceSM 0C66  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 15A0  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 099E                  i2___wmul@multiplier 0007  
       ES_PostToService@WhichService 00D8                __size_of_InitAnalogHW 002A  
         ??_InitializeButtonDebounce 00C1               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 0002                              printf@c 00C0  
                            printf@f 00BC                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ?_RunButtonDebounceSM 00D9  
               ??_ES_CheckUserEvents 00E1                __size_of_InitButtonHW 000C  
         InitAnalogService@ThisEvent 00D9                     _RunAnalogService 123C  
                      _ES_Initialize 06F8                     ___lbmod@dividend 00BD  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0369                         _InitAnalogHW 144E  
               __end_of_ES_InitQueue 1356                            i2___awmod 108A  
                     ES_Initialize@i 00DF                          ___lbmod@rem 00BF  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 06F8  
                          _AnalogISR 0D94        __size_of_PostButtonDebounceSM 0016  
        RunCan_XmitService@ThisEvent 00D9                         _InitButtonHW 1562  
                 __end_of_DistList00 036B                     _ES_PostToService 1014  
         __end_of_ES_Timer_InitTimer 0F20                ??_RunButtonDebounceSM 00DC  
                      _GetBrightness 1578                 __end_of_ServDescList 035C  
                     __end_of___wmul 138C                    ??_CanXmitResponse 0001  
                     ?_ES_Initialize 00DD           ??__HW_Process_Pending_Ints 00E0  
                      _ES_Timer_Init 1554                     i2___wmul@product 000B  
                     __end_of_printf 13C0             __size_of_InitCanHardware 0084  
         __end_of_ES_Timer_Tick_Resp 0604                  start_initialization 1478  
                        __end_of_ISR 0A6C                    __size_ofi2___wmul 0026  
                       _CurrentState 0090                           ?i2___awmod 0001  
                        _CANSTATbits 000F6E                             ??_ES_Run 00E2  
                   __CFG_OSC$IRCIO67 000000                            _TickCount 0094  
                         ?_AnalogISR 0001           __end_ofi2_ES_PostToService 123C  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                     ?_GetBrightness 00BC                             ??___wmul 00C6  
            i2ES_Timer_InitTimer@Num 0005              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00BE  
                     ?_ES_Timer_Init 00BE                    __size_of_XmitData 007C  
               __size_of_GetLocation 000A                       __HW_Timer_Init 14C4  
        __end_of_PostCan_XmitService 1554                          __pbssCOMRAM 0036  
                      __pcstackBANK0 00BC                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00BC  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 0030  
         __end_of_RunCan_XmitService 099E                     i2_ES_EnQueueFIFO 0A6C  
CheckButtonEvents@CurrentButtonState 00E0                        __PRIMASK_temp 003C  
                   _CanErrorResponse 159C                    ??_Check4Keystroke 00BC  
                          __pintcode 0008                             ?___awmod 00BC  
                           ?___lbmod 00BC          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00DF             ES_PostToService@TheEvent 00D3  
             __end_of__HW_Timer_Init 14E2        PostButtonDebounceSM@ThisEvent 00D9  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
       PostCan_XmitService@ThisEvent 001E                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00DD  
                  ??_InitCanHardware 00BC            ES_GetMSBitSet@Nybble2Test 00C4  
                  ?_BusErrorResponse 0001                       ___wmul@product 00C6  
                        ??_AnalogISR 0021             __end_of_RunAnalogService 128C  
                 ??_BusErrorResponse 0001                      ??_GetBrightness 00BE  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 131A  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 00C0       i2ES_PostToService@WhichService 001D  
          InitAnalogService@Priority 00DC                      ?__HW_Timer_Init 00BC  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 00C2  
                           i2___wmul 149E        __size_ofi2_ES_Timer_InitTimer 006E  
                 ES_DeQueue@SaveCrit 00CE                 ES_EnQueueFIFO@pBlock 00C8  
           __end_of_ES_PostToService 108A                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _LastData 0092                             _InitPins 14E2  
                           _Location 0087                      _CanXmitResponse 1590  
                           __Hrparam 0000                       _ES_GetMSBitSet 0B20  
                           __Lrparam 0000                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                             _XmitData 0F20  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 1582                       _ES_EnQueueFIFO 07E4  
  __size_of_InitializeButtonDebounce 002E         __end_of_PostButtonDebounceSM 1528  
          ?_InitializeButtonDebounce 0001                     XmitData@DataByte 00BE  
                 _ES_Timer_InitTimer 0EA0                        ?_GetInputLine 0001  
             __end_of_BitNum2SetMask 0321                             __ptext10 0C66  
                           __ptext11 08C6                             __ptext20 12D6  
                           __ptext12 0F20                             __ptext21 128C  
                           __ptext13 156E                             __ptext30 0EA0  
                           __ptext22 1596                             __ptext14 1578  
                           __ptext31 1014                             __ptext23 1168  
                           __ptext15 14E2                             __ptext40 1582  
                           __ptext32 07E4                             __ptext24 06F8  
                           __ptext16 0E1C                             __ptext41 159C  
                           __ptext33 1356                             __ptext25 13C0  
                           __ptext17 0F9C                             __ptext50 0000  
                           __ptext42 159E                             __ptext34 0BC4  
                           __ptext26 13F0                             __ptext18 144E  
                           __ptext43 0D94                             __ptext35 1554  
                           __ptext27 1420                             __ptext19 03C6  
                           __ptext44 10FA                             __ptext36 14C4  
                           __ptext28 1562                             __ptext45 153E  
                           __ptext37 131A                             __ptext29 158A  
                           __ptext46 11D2                             __ptext47 0A6C  
                           __ptext39 1590                             __ptext48 149E  
                           __ptext49 108A    ES_Timer_Tick_Resp@NeedsProcessing 0083  
                ?_ES_Timer_InitTimer 00BC                        __size_of_main 0094  
                 _ES_Timer_Tick_Resp 04EE               __end_of_ES_GetMSBitSet 0BC4  
        __end_of_RunButtonDebounceSM 0D00                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 158A               __end_of_ES_EnQueueFIFO 08C6  
                           int$flags 003E                  _InitCan_XmitService 13F0  
               ??_ES_Timer_InitTimer 00BE                    ES_DeQueue@NumLeft 00CF  
                 i2_ES_PostToService 11D2             __end_ofi2_ES_EnQueueFIFO 0B20  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 159E  
                     ??_GetInputLine 00BC                  ?i2_ES_PostToService 0018  
                  _CheckButtonEvents 1168                 ??_ES_Timer_Tick_Resp 00DC  
      RunCan_XmitService@ReturnEvent 00DE                   ?_CheckButtonEvents 0001  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 1596  
                    _Check4Keystroke 1596                             intlevel2 0000  
          Can_XmitService@MyPriority 008E                           _ES_DeQueue 03C6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
   InitializeButtonDebounce@Priority 00C1                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 00BC                  ??_CheckButtonEvents 00DC  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 008F  
                 _RunCan_XmitService 08C6                             printf@ap 00BE  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 00C8  
                         _ES_PostAll 0F9C                        ??_GetLocation 00BE  
                   ES_DeQueue@pBlock 00C8                  ?_RunCan_XmitService 00D9  
                    _InitCanHardware 0E1C            __end_of_CheckButtonEvents 11D2  
                    _LastButtonState 0091               ES_DeQueue@pReturnEvent 00CA  
              ES_InitQueue@BlockSize 00BE                ??_InitCan_XmitService 00D9  
       __size_of_PostCan_XmitService 0016                 ??_RunCan_XmitService 00DC  
               _PostButtonDebounceSM 1512                    ?_RunAnalogService 00D9  
         CheckButtonEvents@ThisEvent 00DD  
