

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Dec  8 01:04:15 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	smallconst
    68  000300                     __psmallconst:
    69                           	opt stack 0
    70  000300  00                 	db	0
    71  000301                     _BitNum2SetMask:
    72                           	opt stack 0
    73  000301  0001               	dw	1
    74  000303  0002               	dw	2
    75  000305  0004               	dw	4
    76  000307  0008               	dw	8
    77  000309  0010               	dw	16
    78  00030B  0020               	dw	32
    79  00030D  0040               	dw	64
    80  00030F  0080               	dw	128
    81  000311  0100               	dw	256
    82  000313  0200               	dw	512
    83  000315  0400               	dw	1024
    84  000317  0800               	dw	2048
    85  000319  1000               	dw	4096
    86  00031B  2000               	dw	8192
    87  00031D  4000               	dw	16384
    88  00031F  8000               	dw	32768
    89  000321                     __end_of_BitNum2SetMask:
    90                           	opt stack 0
    91  000321                     _Timer2PostFunc:
    92                           	opt stack 0
    93  000321  2A                 	db	low _PostAnalogService
    94  000322  15                 	db	high _PostAnalogService
    95  000323  14                 	db	low _PostButtonDebounceSM
    96  000324  15                 	db	high _PostButtonDebounceSM
    97  000325  00                 	db	0
    98  000326  00                 	db	0
    99  000327  00                 	db	0
   100  000328  00                 	db	0
   101  000329  00                 	db	0
   102  00032A  00                 	db	0
   103  00032B  00                 	db	0
   104  00032C  00                 	db	0
   105  00032D  00                 	db	0
   106  00032E  00                 	db	0
   107  00032F  00                 	db	0
   108  000330  00                 	db	0
   109  000331  00                 	db	0
   110  000332  00                 	db	0
   111  000333  00                 	db	0
   112  000334  00                 	db	0
   113  000335  00                 	db	0
   114  000336  00                 	db	0
   115  000337  00                 	db	0
   116  000338  00                 	db	0
   117  000339  00                 	db	0
   118  00033A  00                 	db	0
   119  00033B  00                 	db	0
   120  00033C  00                 	db	0
   121  00033D  00                 	db	0
   122  00033E  00                 	db	0
   123  00033F  00                 	db	0
   124  000340  00                 	db	0
   125  000341                     __end_of_Timer2PostFunc:
   126                           	opt stack 0
   127  000341                     _Nybble2MSBitNum:
   128                           	opt stack 0
   129  000341  00                 	db	0
   130  000342  01                 	db	1
   131  000343  01                 	db	1
   132  000344  02                 	db	2
   133  000345  02                 	db	2
   134  000346  02                 	db	2
   135  000347  02                 	db	2
   136  000348  03                 	db	3
   137  000349  03                 	db	3
   138  00034A  03                 	db	3
   139  00034B  03                 	db	3
   140  00034C  03                 	db	3
   141  00034D  03                 	db	3
   142  00034E  03                 	db	3
   143  00034F  03                 	db	3
   144  000350                     __end_of_Nybble2MSBitNum:
   145                           	opt stack 0
   146  000350                     _ServDescList:
   147                           	opt stack 0
   148  000350  F2                 	db	low _InitCan_XmitService
   149  000351  13                 	db	high _InitCan_XmitService
   150  000352  C6                 	db	low _RunCan_XmitService
   151  000353  08                 	db	high _RunCan_XmitService
   152  000354  22                 	db	low _InitializeButtonDebounce
   153  000355  14                 	db	high _InitializeButtonDebounce
   154  000356  68                 	db	low _RunButtonDebounceSM
   155  000357  0C                 	db	high _RunButtonDebounceSM
   156  000358  C2                 	db	low _InitAnalogService
   157  000359  13                 	db	high _InitAnalogService
   158  00035A  3E                 	db	low _RunAnalogService
   159  00035B  12                 	db	high _RunAnalogService
   160  00035C                     __end_of_ServDescList:
   161                           	opt stack 0
   162  00035C                     _EventQueues:
   163                           	opt stack 0
   164  00035C  95                 	db	low _Queue0
   165  00035D  00                 	db	high _Queue0
   166  00035E  04                 	db	4
   167  00035F  A1                 	db	low _Queue1
   168  000360  00                 	db	high _Queue1
   169  000361  04                 	db	4
   170  000362  AD                 	db	low _Queue2
   171  000363  00                 	db	high _Queue2
   172  000364  04                 	db	4
   173  000365                     __end_of_EventQueues:
   174                           	opt stack 0
   175  000365                     _ES_EventList:
   176                           	opt stack 0
   177  000365  98                 	db	low _Check4Keystroke
   178  000366  15                 	db	high _Check4Keystroke
   179  000367  6A                 	db	low _CheckButtonEvents
   180  000368  11                 	db	high _CheckButtonEvents
   181  000369                     __end_of_ES_EventList:
   182                           	opt stack 0
   183  000369                     _DistList00:
   184                           	opt stack 0
   185  000369  40                 	db	low _PostCan_XmitService
   186  00036A  15                 	db	high _PostCan_XmitService
   187  00036B                     __end_of_DistList00:
   188                           	opt stack 0
   189  0000                     _RXF0EIDH	set	3842
   190  0000                     _RXF0EIDL	set	3843
   191  0000                     _RXF0SIDH	set	3840
   192  0000                     _RXF0SIDL	set	3841
   193  0000                     _RXM0EIDH	set	3866
   194  0000                     _RXM0EIDL	set	3867
   195  0000                     _RXM0SIDH	set	3864
   196  0000                     _RXM0SIDL	set	3865
   197  0000                     _TXB0CONbits	set	3904
   198  0000                     _TXB0D0	set	3910
   199  0000                     _TXB0D1	set	3911
   200  0000                     _TXB0D2	set	3912
   201  0000                     _TXB0D3	set	3913
   202  0000                     _TXB0D4	set	3914
   203  0000                     _TXB0DLC	set	3909
   204  0000                     _TXB0EIDH	set	3907
   205  0000                     _TXB0EIDL	set	3908
   206  0000                     _TXB0SIDH	set	3905
   207  0000                     _TXB0SIDL	set	3906
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON1bits	set	4033
   211  0000                     _ADCON2bits	set	4032
   212  0000                     _ADRESH	set	4036
   213  0000                     _ADRESL	set	4035
   214  0000                     _BRGCON1bits	set	3952
   215  0000                     _BRGCON2bits	set	3953
   216  0000                     _BRGCON3bits	set	3954
   217  0000                     _CANCON	set	3951
   218  0000                     _CANSTATbits	set	3950
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCPR1H	set	4031
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CIOCON	set	3955
   223  0000                     _ECANCON	set	3959
   224  0000                     _INTCON	set	4082
   225  0000                     _LATA	set	3977
   226  0000                     _LATB	set	3978
   227  0000                     _LATC	set	3979
   228  0000                     _PIE1	set	3997
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTB	set	3969
   231  0000                     _PORTC	set	3970
   232  0000                     _RXB0CONbits	set	3936
   233  0000                     _T1CON	set	4045
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISAbits	set	3986
   236  0000                     _TRISBbits	set	3987
   237  0000                     _ADIE	set	31982
   238  0000                     _ADIF	set	31990
   239  0000                     _CCP1IF	set	31986
   240  0000                     _ERRIE	set	32029
   241  0000                     _ERRIF	set	32037
   242  0000                     _GIE	set	32663
   243  0000                     _IRCF0	set	32412
   244  0000                     _IRCF1	set	32413
   245  0000                     _IRCF2	set	32414
   246  0000                     _IRXIE	set	32031
   247  0000                     _IRXIF	set	32039
   248  0000                     _LATA2	set	31818
   249  0000                     _LATA3	set	31819
   250  0000                     _LATA4	set	31820
   251  0000                     _LATA5	set	31821
   252  0000                     _PEIE	set	32662
   253  0000                     _RXB0IE	set	32024
   254  0000                     _RXB0IF	set	32032
   255  0000                     _SCS1	set	32409
   256  0000                     _TXB0IE	set	32026
   257  0000                     _TXB0IF	set	32034
   258  00036B                     STR_1:
   259  00036B  46                 	db	70	;'F'
   260  00036C  61                 	db	97	;'a'
   261  00036D  69                 	db	105	;'i'
   262  00036E  6C                 	db	108	;'l'
   263  00036F  65                 	db	101	;'e'
   264  000370  64                 	db	100	;'d'
   265  000371  20                 	db	32
   266  000372  6F                 	db	111	;'o'
   267  000373  6E                 	db	110	;'n'
   268  000374  20                 	db	32
   269  000375  61                 	db	97	;'a'
   270  000376  74                 	db	116	;'t'
   271  000377  74                 	db	116	;'t'
   272  000378  65                 	db	101	;'e'
   273  000379  6D                 	db	109	;'m'
   274  00037A  70                 	db	112	;'p'
   275  00037B  74                 	db	116	;'t'
   276  00037C  20                 	db	32
   277  00037D  74                 	db	116	;'t'
   278  00037E  6F                 	db	111	;'o'
   279  00037F  20                 	db	32
   280  000380  50                 	db	80	;'P'
   281  000381  6F                 	db	111	;'o'
   282  000382  73                 	db	115	;'s'
   283  000383  74                 	db	116	;'t'
   284  000384  0A                 	db	10
   285  000385  00                 	db	0
   286  000386                     STR_2:
   287  000386  46                 	db	70	;'F'
   288  000387  61                 	db	97	;'a'
   289  000388  69                 	db	105	;'i'
   290  000389  6C                 	db	108	;'l'
   291  00038A  65                 	db	101	;'e'
   292  00038B  64                 	db	100	;'d'
   293  00038C  20                 	db	32
   294  00038D  6F                 	db	111	;'o'
   295  00038E  6E                 	db	110	;'n'
   296  00038F  20                 	db	32
   297  000390  4E                 	db	78	;'N'
   298  000391  55                 	db	85	;'U'
   299  000392  4C                 	db	76	;'L'
   300  000393  4C                 	db	76	;'L'
   301  000394  20                 	db	32
   302  000395  70                 	db	112	;'p'
   303  000396  6F                 	db	111	;'o'
   304  000397  69                 	db	105	;'i'
   305  000398  6E                 	db	110	;'n'
   306  000399  74                 	db	116	;'t'
   307  00039A  65                 	db	101	;'e'
   308  00039B  72                 	db	114	;'r'
   309  00039C  0A                 	db	10
   310  00039D  00                 	db	0
   311  00039E                     STR_3:
   312  00039E  46                 	db	70	;'F'
   313  00039F  61                 	db	97	;'a'
   314  0003A0  69                 	db	105	;'i'
   315  0003A1  6C                 	db	108	;'l'
   316  0003A2  65                 	db	101	;'e'
   317  0003A3  64                 	db	100	;'d'
   318  0003A4  20                 	db	32
   319  0003A5  49                 	db	73	;'I'
   320  0003A6  6E                 	db	110	;'n'
   321  0003A7  69                 	db	105	;'i'
   322  0003A8  74                 	db	116	;'t'
   323  0003A9  69                 	db	105	;'i'
   324  0003AA  61                 	db	97	;'a'
   325  0003AB  6C                 	db	108	;'l'
   326  0003AC  69                 	db	105	;'i'
   327  0003AD  7A                 	db	122	;'z'
   328  0003AE  61                 	db	97	;'a'
   329  0003AF  74                 	db	116	;'t'
   330  0003B0  69                 	db	105	;'i'
   331  0003B1  6F                 	db	111	;'o'
   332  0003B2  6E                 	db	110	;'n'
   333  0003B3  0A                 	db	10
   334  0003B4  00                 	db	0
   335  0003B5                     STR_4:
   336  0003B5  4F                 	db	79	;'O'
   337  0003B6  74                 	db	116	;'t'
   338  0003B7  68                 	db	104	;'h'
   339  0003B8  65                 	db	101	;'e'
   340  0003B9  72                 	db	114	;'r'
   341  0003BA  20                 	db	32
   342  0003BB  46                 	db	70	;'F'
   343  0003BC  61                 	db	97	;'a'
   344  0003BD  69                 	db	105	;'i'
   345  0003BE  6C                 	db	108	;'l'
   346  0003BF  75                 	db	117	;'u'
   347  0003C0  72                 	db	114	;'r'
   348  0003C1  65                 	db	101	;'e'
   349  0003C2  0A                 	db	10
   350  0003C3  00                 	db	0
   351                           
   352                           ; #config settings
   353  0003C4  00                 	db	0	; dummy byte at the end
   354  0000                     
   355                           	psect	cinit
   356  00147A                     __pcinit:
   357                           	opt stack 0
   358  00147A                     start_initialization:
   359                           	opt stack 0
   360  00147A                     __initialization:
   361                           	opt stack 0
   362                           
   363                           ; Clear objects allocated to BANK0 (92 bytes)
   364  00147A  EE00  F060         	lfsr	0,__pbssBANK0
   365  00147E  0E5C               	movlw	92
   366  001480                     clear_0:
   367  001480  6AEE               	clrf	postinc0,c
   368  001482  06E8               	decf	wreg,f,c
   369  001484  E1FD               	bnz	clear_0
   370                           
   371                           ; Clear objects allocated to COMRAM (8 bytes)
   372  001486  EE00  F036         	lfsr	0,__pbssCOMRAM
   373  00148A  0E08               	movlw	8
   374  00148C                     clear_1:
   375  00148C  6AEE               	clrf	postinc0,c
   376  00148E  06E8               	decf	wreg,f,c
   377  001490  E1FD               	bnz	clear_1
   378  001492                     end_of_initialization:
   379                           	opt stack 0
   380  001492                     __end_of__initialization:
   381                           	opt stack 0
   382  001492  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   383  001494  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   384  001496  0E00               	movlw	low (__Lmediumconst shr (0+16))
   385  001498  6EF8               	movwf	tblptru,c
   386  00149A  0100               	movlb	0
   387  00149C  EF81  F006         	goto	_main	;jump to C main() function
   388                           tblptru	equ	0xFF8
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           
   392                           	psect	bssCOMRAM
   393  000036                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000036                     ISR@LastTime:
   396                           	opt stack 0
   397  000036                     	ds	2
   398  000038                     ISR@NextTime:
   399                           	opt stack 0
   400  000038                     	ds	2
   401  00003A                     _SysTickCounter:
   402                           	opt stack 0
   403  00003A                     	ds	2
   404  00003C                     __PRIMASK_temp:
   405                           	opt stack 0
   406  00003C                     	ds	2
   407                           tblptru	equ	0xFF8
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt stack 0
   414  000060                     _TMR_TimerArray:
   415                           	opt stack 0
   416  000060                     	ds	32
   417  000080                     ES_Timer_Tick_Resp@NewEvent:
   418                           	opt stack 0
   419  000080                     	ds	3
   420  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   421                           	opt stack 0
   422  000083                     	ds	2
   423  000085                     _Brightness:
   424                           	opt stack 0
   425  000085                     	ds	2
   426  000087                     _Location:
   427                           	opt stack 0
   428  000087                     	ds	2
   429  000089                     _Ready:
   430                           	opt stack 0
   431  000089                     	ds	2
   432  00008B                     _TMR_ActiveFlags:
   433                           	opt stack 0
   434  00008B                     	ds	2
   435  00008D                     Analog_Service@MyPriority:
   436                           	opt stack 0
   437  00008D                     	ds	1
   438  00008E                     Can_XmitService@MyPriority:
   439                           	opt stack 0
   440  00008E                     	ds	1
   441  00008F                     ES_Timer_Tick_Resp@NextTimer2Process:
   442                           	opt stack 0
   443  00008F                     	ds	1
   444  000090                     _CurrentState:
   445                           	opt stack 0
   446  000090                     	ds	1
   447  000091                     _LastButtonState:
   448                           	opt stack 0
   449  000091                     	ds	1
   450  000092                     _LastData:
   451                           	opt stack 0
   452  000092                     	ds	1
   453  000093                     _MyPriority:
   454                           	opt stack 0
   455  000093                     	ds	1
   456  000094                     _TickCount:
   457                           	opt stack 0
   458  000094                     	ds	1
   459  000095                     _Queue0:
   460                           	opt stack 0
   461  000095                     	ds	12
   462  0000A1                     _Queue1:
   463                           	opt stack 0
   464  0000A1                     	ds	12
   465  0000AD                     _Queue2:
   466                           	opt stack 0
   467  0000AD                     	ds	12
   468  0000B9                     ES_Run@ThisEvent:
   469                           	opt stack 0
   470  0000B9                     	ds	3
   471                           tblptru	equ	0xFF8
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           
   475                           	psect	cstackBANK0
   476  0000BC                     __pcstackBANK0:
   477                           	opt stack 0
   478  0000BC                     ?_printf:
   479                           	opt stack 0
   480  0000BC                     ?_GetBrightness:
   481                           	opt stack 0
   482  0000BC                     ?_GetLocation:
   483                           	opt stack 0
   484  0000BC                     ?___awmod:
   485                           	opt stack 0
   486  0000BC                     ___lbmod@divisor:
   487                           	opt stack 0
   488  0000BC                     ES_GetMSBitSet@Val2Check:
   489                           	opt stack 0
   490  0000BC                     __HW_Timer_Init@Rate:
   491                           	opt stack 0
   492  0000BC                     ES_InitQueue@pBlock:
   493                           	opt stack 0
   494  0000BC                     ES_Timer_InitTimer@NewTime:
   495                           	opt stack 0
   496  0000BC                     printf@f:
   497                           	opt stack 0
   498  0000BC                     ___awmod@dividend:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x0
   502  0000BC                     	ds	1
   503  0000BD                     ___lbmod@dividend:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x1
   507  0000BD                     	ds	1
   508  0000BE                     ??_ES_Timer_InitTimer:
   509  0000BE                     ??_ES_GetMSBitSet:
   510  0000BE                     ES_InitQueue@BlockSize:
   511                           	opt stack 0
   512  0000BE                     XmitData@DataByte:
   513                           	opt stack 0
   514  0000BE                     ___lbmod@counter:
   515                           	opt stack 0
   516  0000BE                     ES_Timer_Init@Rate:
   517                           	opt stack 0
   518  0000BE                     printf@ap:
   519                           	opt stack 0
   520  0000BE                     ___awmod@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x2
   524  0000BE                     	ds	1
   525  0000BF                     ___lbmod@rem:
   526                           	opt stack 0
   527  0000BF                     ES_InitQueue@pThisQueue:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x3
   531  0000BF                     	ds	1
   532  0000C0                     ES_Timer_InitTimer@Num:
   533                           	opt stack 0
   534  0000C0                     printf@c:
   535                           	opt stack 0
   536  0000C0                     ___awmod@counter:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x4
   540  0000C0                     	ds	1
   541  0000C1                     InitializeButtonDebounce@Priority:
   542                           	opt stack 0
   543  0000C1                     ___awmod@sign:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x5
   547  0000C1                     	ds	1
   548  0000C2                     ?___wmul:
   549                           	opt stack 0
   550  0000C2                     ___wmul@multiplier:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x6
   554  0000C2                     	ds	1
   555  0000C3                     ES_GetMSBitSet@ReturnVal:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x7
   559  0000C3                     	ds	1
   560  0000C4                     ES_GetMSBitSet@Nybble2Test:
   561                           	opt stack 0
   562  0000C4                     ___wmul@multiplicand:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x8
   566  0000C4                     	ds	1
   567  0000C5                     ES_GetMSBitSet@LoopCntr:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x9
   571  0000C5                     	ds	1
   572  0000C6                     ___wmul@product:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0xA
   576  0000C6                     	ds	2
   577  0000C8                     ES_EnQueueFIFO@pBlock:
   578                           	opt stack 0
   579  0000C8                     ES_DeQueue@pBlock:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xC
   583  0000C8                     	ds	2
   584  0000CA                     ES_DeQueue@pReturnEvent:
   585                           	opt stack 0
   586  0000CA                     ES_EnQueueFIFO@Event2Add:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0xE
   590  0000CA                     	ds	2
   591  0000CC                     ??_ES_DeQueue:
   592                           
   593                           ; 1 bytes @ 0x10
   594  0000CC                     	ds	1
   595  0000CD                     ??_ES_EnQueueFIFO:
   596                           
   597                           ; 1 bytes @ 0x11
   598  0000CD                     	ds	1
   599  0000CE                     ES_DeQueue@SaveCrit:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x12
   603  0000CE                     	ds	1
   604  0000CF                     ES_DeQueue@NumLeft:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x13
   608  0000CF                     	ds	1
   609  0000D0                     ES_EnQueueFIFO@SaveCrit:
   610                           	opt stack 0
   611  0000D0                     ES_DeQueue@pThisQueue:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  0000D0                     	ds	1
   616  0000D1                     ES_EnQueueFIFO@pThisQueue:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x15
   620  0000D1                     	ds	2
   621  0000D3                     ES_PostAll@ThisEvent:
   622                           	opt stack 0
   623  0000D3                     ES_PostToService@TheEvent:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x17
   627  0000D3                     	ds	3
   628  0000D6                     ??_ES_PostToService:
   629  0000D6                     ??_ES_PostAll:
   630                           
   631                           ; 1 bytes @ 0x1A
   632  0000D6                     	ds	2
   633  0000D8                     ES_PostAll@i:
   634                           	opt stack 0
   635  0000D8                     ES_PostToService@WhichService:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x1C
   639  0000D8                     	ds	1
   640  0000D9                     ?_RunCan_XmitService:
   641                           	opt stack 0
   642  0000D9                     ?_RunAnalogService:
   643                           	opt stack 0
   644  0000D9                     ?_RunButtonDebounceSM:
   645                           	opt stack 0
   646  0000D9                     PostButtonDebounceSM@ThisEvent:
   647                           	opt stack 0
   648  0000D9                     RunButtonDebounceSM@ThisEvent:
   649                           	opt stack 0
   650  0000D9                     InitCan_XmitService@ThisEvent:
   651                           	opt stack 0
   652  0000D9                     RunCan_XmitService@ThisEvent:
   653                           	opt stack 0
   654  0000D9                     InitAnalogService@ThisEvent:
   655                           	opt stack 0
   656  0000D9                     PostAnalogService@ThisEvent:
   657                           	opt stack 0
   658  0000D9                     RunAnalogService@ThisEvent:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x1D
   662  0000D9                     	ds	3
   663  0000DC                     ??_RunCan_XmitService:
   664  0000DC                     ??_ES_Timer_Tick_Resp:
   665  0000DC                     CheckButtonEvents@ReturnVal:
   666                           	opt stack 0
   667  0000DC                     InitCan_XmitService@Priority:
   668                           	opt stack 0
   669  0000DC                     InitAnalogService@Priority:
   670                           	opt stack 0
   671  0000DC                     RunButtonDebounceSM@ReturnEvent:
   672                           	opt stack 0
   673  0000DC                     RunAnalogService@ReturnEvent:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x20
   677  0000DC                     	ds	1
   678  0000DD                     ES_Initialize@NewRate:
   679                           	opt stack 0
   680  0000DD                     CheckButtonEvents@ThisEvent:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x21
   684  0000DD                     	ds	1
   685  0000DE                     RunCan_XmitService@ReturnEvent:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x22
   689  0000DE                     	ds	1
   690  0000DF                     ES_Initialize@i:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x23
   694  0000DF                     	ds	1
   695  0000E0                     CheckButtonEvents@CurrentButtonState:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x24
   699  0000E0                     	ds	1
   700  0000E1                     ES_CheckUserEvents@i:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x25
   704  0000E1                     	ds	1
   705  0000E2                     ??_ES_Run:
   706                           
   707                           ; 1 bytes @ 0x26
   708  0000E2                     	ds	4
   709  0000E6                     ES_Run@HighestPrior:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2A
   713  0000E6                     	ds	1
   714  0000E7                     main@ErrorType:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2B
   718  0000E7                     	ds	1
   719                           tblptru	equ	0xFF8
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           
   723                           	psect	cstackCOMRAM
   724  000001                     __pcstackCOMRAM:
   725                           	opt stack 0
   726  000001                     ?i2___awmod:
   727                           	opt stack 0
   728  000001                     i2ES_Timer_InitTimer@NewTime:
   729                           	opt stack 0
   730  000001                     i2___awmod@dividend:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x0
   734  000001                     	ds	2
   735  000003                     ??i2_ES_Timer_InitTimer:
   736  000003                     i2___awmod@divisor:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x2
   740  000003                     	ds	2
   741  000005                     i2ES_Timer_InitTimer@Num:
   742                           	opt stack 0
   743  000005                     i2___awmod@counter:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x4
   747  000005                     	ds	1
   748  000006                     i2___awmod@sign:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x5
   752  000006                     	ds	1
   753  000007                     ?i2___wmul:
   754                           	opt stack 0
   755  000007                     i2___wmul@multiplier:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  000007                     	ds	2
   760  000009                     i2___wmul@multiplicand:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x8
   764  000009                     	ds	2
   765  00000B                     i2___wmul@product:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0xA
   769  00000B                     	ds	2
   770  00000D                     i2ES_EnQueueFIFO@pBlock:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0xC
   774  00000D                     	ds	2
   775  00000F                     i2ES_EnQueueFIFO@Event2Add:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0xE
   779  00000F                     	ds	3
   780  000012                     ??i2_ES_EnQueueFIFO:
   781                           
   782                           ; 1 bytes @ 0x11
   783  000012                     	ds	3
   784  000015                     i2ES_EnQueueFIFO@SaveCrit:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x14
   788  000015                     	ds	1
   789  000016                     i2ES_EnQueueFIFO@pThisQueue:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x15
   793  000016                     	ds	2
   794  000018                     i2ES_PostToService@TheEvent:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x17
   798  000018                     	ds	3
   799  00001B                     ??i2_ES_PostToService:
   800                           
   801                           ; 1 bytes @ 0x1A
   802  00001B                     	ds	2
   803  00001D                     i2ES_PostToService@WhichService:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1C
   807  00001D                     	ds	1
   808  00001E                     PostCan_XmitService@ThisEvent:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x1D
   812  00001E                     	ds	3
   813  000021                     ??_AnalogISR:
   814  000021                     
   815                           ; 1 bytes @ 0x20
   816  000021                     	ds	2
   817  000023                     AnalogISR@Event2Post:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x22
   821  000023                     	ds	3
   822  000026                     ??_ISR:
   823                           
   824                           ; 1 bytes @ 0x25
   825  000026                     	ds	16
   826                           tblptru	equ	0xFF8
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           
   830 ;;
   831 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   832 ;;
   833 ;; *************** function _main *****************
   834 ;; Defined at:
   835 ;;		line 25 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  ErrorType       1   43[BANK0 ] enum E15645
   840 ;; Return value:  Size  Location     Type
   841 ;;                  2  372[None  ] int 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   849 ;;      Params:         0       0       0       0
   850 ;;      Locals:         0       1       0       0
   851 ;;      Temps:          0       0       0       0
   852 ;;      Totals:         0       1       0       0
   853 ;;Total ram usage:        1 bytes
   854 ;; Hardware stack levels required when called:   13
   855 ;; This function calls:
   856 ;;		_ES_Initialize
   857 ;;		_ES_Run
   858 ;;		_printf
   859 ;; This function is called by:
   860 ;;		Startup code after reset
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text0
   865  000D02                     __ptext0:
   866                           	opt stack 0
   867  000D02                     _main:
   868                           	opt stack 18
   869                           
   870                           ;main.c: 28: IRCF0 = 1;
   871                           
   872                           ;incstack = 0
   873  000D02  88D3               	bsf	4051,4,c	;volatile
   874                           
   875                           ;main.c: 29: IRCF1 = 1;
   876  000D04  8AD3               	bsf	4051,5,c	;volatile
   877                           
   878                           ;main.c: 30: IRCF2 = 1;
   879  000D06  8CD3               	bsf	4051,6,c	;volatile
   880                           
   881                           ;main.c: 31: SCS1 = 1;
   882  000D08  82D3               	bsf	4051,1,c	;volatile
   883                           
   884                           ;main.c: 32: ADCON1 = 0x0D;
   885  000D0A  0E0D               	movlw	13
   886  000D0C  6EC1               	movwf	4033,c	;volatile
   887                           
   888                           ;main.c: 39: ES_Return_t ErrorType;
   889                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   890  000D0E  0E9C               	movlw	156
   891  000D10  0100               	movlb	0	; () banked
   892  000D12  6FDE               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   893  000D14  0E3F               	movlw	63
   894  000D16  6FDD               	movwf	ES_Initialize@NewRate& (0+255),b
   895  000D18  EC7C  F003         	call	_ES_Initialize	;wreg free
   896  000D1C  0100               	movlb	0	; () banked
   897  000D1E  6FE7               	movwf	main@ErrorType& (0+255),b
   898                           
   899                           ; BSR set to: 0
   900                           ;main.c: 56: if ( ErrorType == Success ) {
   901  000D20  0100               	movlb	0	; () banked
   902  000D22  51E7               	movf	main@ErrorType& (0+255),w,b
   903  000D24  0100               	movlb	0	; () banked
   904  000D26  A4D8               	btfss	status,2,c
   905  000D28  D029               	goto	l3038
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 58: ErrorType = ES_Run();
   909  000D2A  EC02  F003         	call	_ES_Run	;wreg free
   910  000D2E  0100               	movlb	0	; () banked
   911  000D30  6FE7               	movwf	main@ErrorType& (0+255),b
   912                           
   913                           ; BSR set to: 0
   914                           ;main.c: 60: }
   915                           ;main.c: 62: switch (ErrorType){
   916  000D32  D024               	goto	l3038
   917  000D34                     l3028:
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 64: printf("Failed on attempt to Post\n");
   921  000D34  0E6B               	movlw	low STR_1
   922  000D36  0100               	movlb	0	; () banked
   923  000D38  6FBC               	movwf	printf@f& (0+255),b
   924  000D3A  0E03               	movlw	high STR_1
   925  000D3C  0100               	movlb	0	; () banked
   926  000D3E  6FBD               	movwf	(printf@f+1)& (0+255),b
   927  000D40  ECC7  F009         	call	_printf	;wreg free
   928                           
   929                           ;main.c: 65: break;
   930  000D44  D027               	goto	l380
   931  000D46                     l3030:
   932                           
   933                           ;main.c: 67: printf("Failed on NULL pointer\n");
   934  000D46  0E86               	movlw	low STR_2
   935  000D48  0100               	movlb	0	; () banked
   936  000D4A  6FBC               	movwf	printf@f& (0+255),b
   937  000D4C  0E03               	movlw	high STR_2
   938  000D4E  0100               	movlb	0	; () banked
   939  000D50  6FBD               	movwf	(printf@f+1)& (0+255),b
   940  000D52  ECC7  F009         	call	_printf	;wreg free
   941                           
   942                           ;main.c: 68: break;
   943  000D56  D01E               	goto	l380
   944  000D58                     l3032:
   945                           
   946                           ;main.c: 70: printf("Failed Initialization\n");
   947  000D58  0E9E               	movlw	low STR_3
   948  000D5A  0100               	movlb	0	; () banked
   949  000D5C  6FBC               	movwf	printf@f& (0+255),b
   950  000D5E  0E03               	movlw	high STR_3
   951  000D60  0100               	movlb	0	; () banked
   952  000D62  6FBD               	movwf	(printf@f+1)& (0+255),b
   953  000D64  ECC7  F009         	call	_printf	;wreg free
   954                           
   955                           ;main.c: 71: break;
   956  000D68  D015               	goto	l380
   957  000D6A                     l3034:
   958                           
   959                           ;main.c: 73: printf("Other Failure\n");
   960  000D6A  0EB5               	movlw	low STR_4
   961  000D6C  0100               	movlb	0	; () banked
   962  000D6E  6FBC               	movwf	printf@f& (0+255),b
   963  000D70  0E03               	movlw	high STR_4
   964  000D72  0100               	movlb	0	; () banked
   965  000D74  6FBD               	movwf	(printf@f+1)& (0+255),b
   966  000D76  ECC7  F009         	call	_printf	;wreg free
   967                           
   968                           ;main.c: 75: }
   969                           
   970                           ;main.c: 74: break;
   971  000D7A  D00C               	goto	l380
   972  000D7C                     l3038:
   973  000D7C  0100               	movlb	0	; () banked
   974  000D7E  51E7               	movf	main@ErrorType& (0+255),w,b
   975                           
   976                           ; Switch size 1, requested type "space"
   977                           ; Number of cases is 3, Range of values is 1 to 5
   978                           ; switch strategies available:
   979                           ; Name         Instructions Cycles
   980                           ; simple_byte           10     6 (average)
   981                           ;	Chosen strategy is simple_byte
   982  000D80  0A01               	xorlw	1	; case 1
   983  000D82  B4D8               	btfsc	status,2,c
   984  000D84  D7D7               	goto	l3028
   985  000D86  0A02               	xorlw	2	; case 3
   986  000D88  B4D8               	btfsc	status,2,c
   987  000D8A  D7DD               	goto	l3030
   988  000D8C  0A06               	xorlw	6	; case 5
   989  000D8E  B4D8               	btfsc	status,2,c
   990  000D90  D7E3               	goto	l3032
   991  000D92  D7EB               	goto	l3034
   992  000D94                     l380:
   993                           
   994                           ;main.c: 77: ;
   995  000D94  D7FF               	goto	l380
   996  000D96                     __end_of_main:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function _printf *****************
  1004 ;; Defined at:
  1005 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1008 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  tmpval          4    0        struct .
  1011 ;;  cp              3    0        PTR const unsigned char 
  1012 ;;  ap              2    2[BANK0 ] PTR void [1]
  1013 ;;		 -> ?_printf(2), 
  1014 ;;  len             2    0        unsigned int 
  1015 ;;  val             2    0        unsigned int 
  1016 ;;  c               1    4[BANK0 ] char 
  1017 ;;  flag            1    0        unsigned char 
  1018 ;;  prec            1    0        char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2    0[BANK0 ] int 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1028 ;;      Params:         0       2       0       0
  1029 ;;      Locals:         0       3       0       0
  1030 ;;      Temps:          0       0       0       0
  1031 ;;      Totals:         0       5       0       0
  1032 ;;Total ram usage:        5 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    7
  1035 ;; This function calls:
  1036 ;;		_putch
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text1
  1043  00138E                     __ptext1:
  1044                           	opt stack 0
  1045  00138E                     _printf:
  1046                           	opt stack 23
  1047                           
  1048                           ;doprnt.c: 466: va_list ap;
  1049                           ;doprnt.c: 499: signed char c;
  1050                           ;doprnt.c: 506: signed char prec;
  1051                           ;doprnt.c: 508: unsigned char flag;
  1052                           ;doprnt.c: 523: union {
  1053                           ;doprnt.c: 524: unsigned long vd;
  1054                           ;doprnt.c: 525: double integ;
  1055                           ;doprnt.c: 526: } tmpval;
  1056                           ;doprnt.c: 528: unsigned int val;
  1057                           ;doprnt.c: 529: unsigned len;
  1058                           ;doprnt.c: 530: const char * cp;
  1059                           ;doprnt.c: 533: *ap = __va_start();
  1060                           
  1061                           ;incstack = 0
  1062  00138E  0EBE               	movlw	low (?_printf+2)
  1063  001390  0100               	movlb	0	; () banked
  1064  001392  6FBE               	movwf	printf@ap& (0+255),b
  1065  001394  0E00               	movlw	high (?_printf+2)
  1066  001396  0100               	movlb	0	; () banked
  1067  001398  6FBF               	movwf	(printf@ap+1)& (0+255),b
  1068                           
  1069                           ;doprnt.c: 536: while(c = *f++) {
  1070  00139A  D004               	goto	l2872
  1071  00139C                     l2870:
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;doprnt.c: 540: {
  1075                           ;doprnt.c: 541: (putch(c) );
  1076  00139C  0100               	movlb	0	; () banked
  1077  00139E  51C0               	movf	printf@c& (0+255),w,b
  1078  0013A0  ECCE  F00A         	call	_putch
  1079  0013A4                     l2872:
  1080  0013A4  C0BC  FFF6         	movff	printf@f,tblptrl
  1081  0013A8  C0BD  FFF7         	movff	printf@f+1,tblptrh
  1082  0013AC  0100               	movlb	0	; () banked
  1083  0013AE  4BBC               	infsnz	printf@f& (0+255),f,b
  1084  0013B0  2BBD               	incf	(printf@f+1)& (0+255),f,b
  1085  0013B2                     	if	0	;tblptru may be non-zero
  1086  0013B2                     	endif
  1087  0013B2                     	if	0	;tblptru may be non-zero
  1088  0013B2                     	endif
  1089  0013B2  0008               	tblrd		*
  1090  0013B4  CFF5 F0C0          	movff	tablat,printf@c
  1091  0013B8  0100               	movlb	0	; () banked
  1092  0013BA  51C0               	movf	printf@c& (0+255),w,b
  1093  0013BC  B4D8               	btfsc	status,2,c
  1094  0013BE  0012               	return	
  1095  0013C0  D7ED               	goto	l2870
  1096  0013C2                     __end_of_printf:
  1097                           	opt stack 0
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           status	equ	0xFD8
  1105                           
  1106 ;; *************** function _putch *****************
  1107 ;; Defined at:
  1108 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  c               1    wreg     unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  c               1    0[COMRAM] unsigned char 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1122 ;;      Params:         0       0       0       0
  1123 ;;      Locals:         0       0       0       0
  1124 ;;      Temps:          0       0       0       0
  1125 ;;      Totals:         0       0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    6
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_printf
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text2
  1137  00159C                     __ptext2:
  1138                           	opt stack 0
  1139  00159C                     _putch:
  1140                           	opt stack 23
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;incstack = 0
  1144  00159C  0012               	return		;funcret
  1145  00159E                     __end_of_putch:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           postinc0	equ	0xFEE
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _ES_Run *****************
  1156 ;; Defined at:
  1157 ;;		line 277 in file "ES_Framework.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  HighestPrior    1   42[BANK0 ] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      enum E15493
  1164 ;; Registers used:
  1165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1171 ;;      Params:         0       0       0       0
  1172 ;;      Locals:         0       1       0       0
  1173 ;;      Temps:          0       4       0       0
  1174 ;;      Totals:         0       5       0       0
  1175 ;;Total ram usage:        5 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:   12
  1178 ;; This function calls:
  1179 ;;		_ES_CheckUserEvents
  1180 ;;		_ES_DeQueue
  1181 ;;		_ES_GetMSBitSet
  1182 ;;		_RunAnalogService
  1183 ;;		_RunButtonDebounceSM
  1184 ;;		_RunCan_XmitService
  1185 ;;		__HW_Process_Pending_Ints
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text3
  1192  000604                     __ptext3:
  1193                           	opt stack 0
  1194  000604                     _ES_Run:
  1195                           	opt stack 18
  1196                           
  1197                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1198                           
  1199                           ;incstack = 0
  1200                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1201                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1202                           ;ES_Framework.c: 282: while(1){
  1203  000604  D06B               	goto	l2830
  1204  000606                     l2818:
  1205                           
  1206                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1207  000606  C089  F0BC         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1208  00060A  C08A  F0BD         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1209  00060E  EC91  F005         	call	_ES_GetMSBitSet	;wreg free
  1210  000612  0100               	movlb	0	; () banked
  1211  000614  6FE6               	movwf	ES_Run@HighestPrior& (0+255),b
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1215  000616  0100               	movlb	0	; () banked
  1216  000618  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1217  00061A  0D03               	mullw	3
  1218  00061C  0E5C               	movlw	low _EventQueues
  1219  00061E  24F3               	addwf	prodl,w,c
  1220  000620  6EF6               	movwf	tblptrl,c
  1221  000622  0E03               	movlw	high _EventQueues
  1222  000624  20F4               	addwfc	prodh,w,c
  1223  000626  6EF7               	movwf	tblptrh,c
  1224  000628                     	if	0	;There are less than 3 active tblptr bytes
  1225  000628                     	endif
  1226  000628  0009               	tblrd		*+
  1227  00062A  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock
  1228  00062E  000A               	tblrd		*-
  1229  000630  CFF5 F0C9          	movff	tablat,ES_DeQueue@pBlock+1
  1230  000634  0EB9               	movlw	low ES_Run@ThisEvent
  1231  000636  0100               	movlb	0	; () banked
  1232  000638  6FCA               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1233  00063A  0E00               	movlw	high ES_Run@ThisEvent
  1234  00063C  0100               	movlb	0	; () banked
  1235  00063E  6FCB               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1236  000640  ECE3  F001         	call	_ES_DeQueue	;wreg free
  1237  000644  0900               	iorlw	0
  1238  000646  A4D8               	btfss	status,2,c
  1239  000648  D01F               	goto	l2824
  1240                           
  1241                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1242  00064A  0100               	movlb	0	; () banked
  1243  00064C  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1244  00064E  0D02               	mullw	2
  1245  000650  0E01               	movlw	low _BitNum2SetMask
  1246  000652  24F3               	addwf	prodl,w,c
  1247  000654  6EF6               	movwf	tblptrl,c
  1248  000656  0E03               	movlw	high _BitNum2SetMask
  1249  000658  20F4               	addwfc	prodh,w,c
  1250  00065A  6EF7               	movwf	tblptrh,c
  1251  00065C                     	if	0	;There are less than 3 active tblptr bytes
  1252  00065C                     	endif
  1253  00065C  0009               	tblrd		*+
  1254  00065E  CFF5 F0E2          	movff	tablat,??_ES_Run
  1255  000662  0009               	tblrd		*+
  1256  000664  CFF5 F0E3          	movff	tablat,??_ES_Run+1
  1257  000668  0100               	movlb	0	; () banked
  1258  00066A  1DE2               	comf	??_ES_Run& (0+255),w,b
  1259  00066C  0100               	movlb	0	; () banked
  1260  00066E  6FE4               	movwf	(??_ES_Run+2)& (0+255),b
  1261  000670  0100               	movlb	0	; () banked
  1262  000672  1DE3               	comf	(??_ES_Run+1)& (0+255),w,b
  1263  000674  0100               	movlb	0	; () banked
  1264  000676  6FE5               	movwf	(??_ES_Run+3)& (0+255),b
  1265  000678  0100               	movlb	0	; () banked
  1266  00067A  51E4               	movf	(??_ES_Run+2)& (0+255),w,b
  1267  00067C  0100               	movlb	0	; () banked
  1268  00067E  1789               	andwf	_Ready& (0+255),f,b
  1269  000680  0100               	movlb	0	; () banked
  1270  000682  51E5               	movf	(??_ES_Run+3)& (0+255),w,b
  1271  000684  0100               	movlb	0	; () banked
  1272  000686  178A               	andwf	(_Ready+1)& (0+255),f,b
  1273  000688                     l2824:
  1274                           
  1275                           ;ES_Framework.c: 291: }
  1276                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1277  000688  C0B9  F0D9         	movff	ES_Run@ThisEvent,RunAnalogService@ThisEvent
  1278  00068C  C0BA  F0DA         	movff	ES_Run@ThisEvent+1,RunAnalogService@ThisEvent+1
  1279  000690  C0BB  F0DB         	movff	ES_Run@ThisEvent+2,RunAnalogService@ThisEvent+2
  1280  000694  0100               	movlb	0	; () banked
  1281  000696  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1282  000698  0D04               	mullw	4
  1283  00069A  0E02               	movlw	2
  1284  00069C  26F3               	addwf	prodl,f,c
  1285  00069E  0E00               	movlw	0
  1286  0006A0  22F4               	addwfc	prodh,f,c
  1287  0006A2  0E50               	movlw	low _ServDescList
  1288  0006A4  24F3               	addwf	prodl,w,c
  1289  0006A6  6EF6               	movwf	tblptrl,c
  1290  0006A8  0E03               	movlw	high _ServDescList
  1291  0006AA  20F4               	addwfc	prodh,w,c
  1292  0006AC  6EF7               	movwf	tblptrh,c
  1293  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  1294  0006AE                     	endif
  1295  0006AE  D801               	call	u1638
  1296  0006B0  D00C               	goto	u1639
  1297  0006B2                     u1638:
  1298  0006B2  0005               	push	
  1299  0006B4  6EFA               	movwf	pclath,c
  1300  0006B6  0009               	tblrd		*+
  1301  0006B8  50F5               	movf	tablat,w,c
  1302  0006BA  6EFD               	movwf	tosl,c
  1303  0006BC  0009               	tblrd		*+
  1304  0006BE  50F5               	movf	tablat,w,c
  1305  0006C0  6EFE               	movwf	tosh,c
  1306  0006C2  50F8               	movf	tblptru,w,c
  1307  0006C4  6EFF               	movwf	tosu,c
  1308  0006C6  50FA               	movf	pclath,w,c
  1309  0006C8  0012               	return		;indir
  1310  0006CA                     u1639:
  1311  0006CA  0ED9               	movlw	low ?_RunAnalogService
  1312  0006CC  6ED9               	movwf	fsr2l,c
  1313  0006CE  0E00               	movlw	high ?_RunAnalogService
  1314  0006D0  6EDA               	movwf	fsr2h,c
  1315  0006D2  50DF               	movf	indf2,w,c
  1316  0006D4  B4D8               	btfsc	status,2,c
  1317  0006D6  D002               	goto	l2830
  1318                           
  1319                           ;ES_Framework.c: 293: return FailedRun;
  1320  0006D8  0E02               	movlw	2
  1321  0006DA  0012               	return	
  1322  0006DC                     l2830:
  1323  0006DC  EC7F  F00A         	call	__HW_Process_Pending_Ints	;wreg free
  1324  0006E0  0900               	iorlw	0
  1325  0006E2  B4D8               	btfsc	status,2,c
  1326  0006E4  D006               	goto	l2834
  1327  0006E6  0100               	movlb	0	; () banked
  1328  0006E8  5189               	movf	_Ready& (0+255),w,b
  1329  0006EA  0100               	movlb	0	; () banked
  1330  0006EC  118A               	iorwf	(_Ready+1)& (0+255),w,b
  1331  0006EE  A4D8               	btfss	status,2,c
  1332  0006F0  D78A               	goto	l2818
  1333  0006F2                     l2834:
  1334                           
  1335                           ;ES_Framework.c: 294: }
  1336                           ;ES_Framework.c: 295: }
  1337                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1338  0006F2  EC47  F009         	call	_ES_CheckUserEvents	;wreg free
  1339  0006F6  D7F2               	goto	l2830
  1340  0006F8                     __end_of_ES_Run:
  1341                           	opt stack 0
  1342                           tosu	equ	0xFFF
  1343                           tosh	equ	0xFFE
  1344                           tosl	equ	0xFFD
  1345                           pclath	equ	0xFFA
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function __HW_Process_Pending_Ints *****************
  1360 ;; Defined at:
  1361 ;;		line 225 in file "ES_Port.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      unsigned char 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1375 ;;      Params:         0       0       0       0
  1376 ;;      Locals:         0       0       0       0
  1377 ;;      Temps:          0       0       0       0
  1378 ;;      Totals:         0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:   11
  1382 ;; This function calls:
  1383 ;;		_ES_Timer_Tick_Resp
  1384 ;; This function is called by:
  1385 ;;		_ES_Run
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text4
  1390  0014FE                     __ptext4:
  1391                           	opt stack 0
  1392  0014FE                     __HW_Process_Pending_Ints:
  1393                           	opt stack 18
  1394                           
  1395                           ;ES_Port.c: 227: while (TickCount > 0)
  1396                           
  1397                           ;incstack = 0
  1398  0014FE  D004               	goto	l2662
  1399  001500                     l2658:
  1400                           
  1401                           ;ES_Port.c: 228: {
  1402                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1403  001500  EC77  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1404                           
  1405                           ;ES_Port.c: 231: TickCount--;
  1406  001504  0100               	movlb	0	; () banked
  1407  001506  0794               	decf	_TickCount& (0+255),f,b	;volatile
  1408  001508                     l2662:
  1409  001508  0100               	movlb	0	; () banked
  1410  00150A  5194               	movf	_TickCount& (0+255),w,b	;volatile
  1411  00150C  A4D8               	btfss	status,2,c
  1412  00150E  D7F8               	goto	l2658
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;ES_Port.c: 232: }
  1416                           ;ES_Port.c: 234: return 1;
  1417                           
  1418                           ; BSR set to: 0
  1419  001510  0E01               	movlw	1
  1420  001512  0012               	return	
  1421  001514                     __end_of__HW_Process_Pending_Ints:
  1422                           	opt stack 0
  1423                           tosu	equ	0xFFF
  1424                           tosh	equ	0xFFE
  1425                           tosl	equ	0xFFD
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           indf2	equ	0xFDF
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _ES_Timer_Tick_Resp *****************
  1441 ;; Defined at:
  1442 ;;		line 284 in file "ES_Timers.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1456 ;;      Params:         0       0       0       0
  1457 ;;      Locals:         0       0       0       0
  1458 ;;      Temps:          0       4       0       0
  1459 ;;      Totals:         0       4       0       0
  1460 ;;Total ram usage:        4 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:   10
  1463 ;; This function calls:
  1464 ;;		Absolute function
  1465 ;;		_ES_GetMSBitSet
  1466 ;;		_PostAnalogService
  1467 ;;		_PostButtonDebounceSM
  1468 ;; This function is called by:
  1469 ;;		__HW_Process_Pending_Ints
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text5
  1474  0004EE                     __ptext5:
  1475                           	opt stack 0
  1476  0004EE                     _ES_Timer_Tick_Resp:
  1477                           	opt stack 18
  1478                           
  1479                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1480                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1481                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1482                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486  0004EE  0100               	movlb	0	; () banked
  1487  0004F0  518B               	movf	_TMR_ActiveFlags& (0+255),w,b
  1488  0004F2  0100               	movlb	0	; () banked
  1489  0004F4  118C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1490  0004F6  B4D8               	btfsc	status,2,c
  1491  0004F8  0012               	return	
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;ES_Timers.c: 291: {
  1495                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1496  0004FA  C08B  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1497  0004FE  C08C  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1498  000502                     l2404:
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1502  000502  C083  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1503  000506  C084  F0BD         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1504  00050A  EC91  F005         	call	_ES_GetMSBitSet	;wreg free
  1505  00050E  0100               	movlb	0	; () banked
  1506  000510  6F8F               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1510  000512  0100               	movlb	0	; () banked
  1511  000514  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1512  000516  0D02               	mullw	2
  1513  000518  0E60               	movlw	low _TMR_TimerArray
  1514  00051A  24F3               	addwf	prodl,w,c
  1515  00051C  6ED9               	movwf	fsr2l,c
  1516  00051E  0E00               	movlw	high _TMR_TimerArray
  1517  000520  20F4               	addwfc	prodh,w,c
  1518  000522  6EDA               	movwf	fsr2h,c
  1519  000524  06DE               	decf	postinc2,f,c
  1520  000526  0E00               	movlw	0
  1521  000528  5ADD               	subwfb	postdec2,f,c
  1522  00052A  50DE               	movf	postinc2,w,c
  1523  00052C  10DE               	iorwf	postinc2,w,c
  1524  00052E  A4D8               	btfss	status,2,c
  1525  000530  D043               	goto	l2416
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;ES_Timers.c: 299: {
  1529                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1530  000532  0E03               	movlw	3
  1531  000534  0100               	movlb	0	; () banked
  1532  000536  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1536  000538  C08F  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1537  00053C  0100               	movlb	0	; () banked
  1538  00053E  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1542  000540  C080  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent,PostAnalogService@ThisEvent
  1543  000544  C081  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostAnalogService@ThisEvent+1
  1544  000548  C082  F0DB         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostAnalogService@ThisEvent+2
  1545  00054C  0100               	movlb	0	; () banked
  1546  00054E  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1547  000550  0D02               	mullw	2
  1548  000552  0E21               	movlw	low _Timer2PostFunc
  1549  000554  24F3               	addwf	prodl,w,c
  1550  000556  6EF6               	movwf	tblptrl,c
  1551  000558  0E03               	movlw	high _Timer2PostFunc
  1552  00055A  20F4               	addwfc	prodh,w,c
  1553  00055C  6EF7               	movwf	tblptrh,c
  1554  00055E                     	if	0	;There are less than 3 active tblptr bytes
  1555  00055E                     	endif
  1556  00055E  D801               	call	u1288
  1557  000560  D00C               	goto	l2414
  1558  000562                     u1288:
  1559  000562  0005               	push	
  1560  000564  6EFA               	movwf	pclath,c
  1561  000566  0009               	tblrd		*+
  1562  000568  50F5               	movf	tablat,w,c
  1563  00056A  6EFD               	movwf	tosl,c
  1564  00056C  0009               	tblrd		*+
  1565  00056E  50F5               	movf	tablat,w,c
  1566  000570  6EFE               	movwf	tosh,c
  1567  000572  50F8               	movf	tblptru,w,c
  1568  000574  6EFF               	movwf	tosu,c
  1569  000576  50FA               	movf	pclath,w,c
  1570  000578  0012               	return		;indir
  1571  00057A                     l2414:
  1572                           
  1573                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1574  00057A  0100               	movlb	0	; () banked
  1575  00057C  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1576  00057E  0D02               	mullw	2
  1577  000580  0E01               	movlw	low _BitNum2SetMask
  1578  000582  24F3               	addwf	prodl,w,c
  1579  000584  6EF6               	movwf	tblptrl,c
  1580  000586  0E03               	movlw	high _BitNum2SetMask
  1581  000588  20F4               	addwfc	prodh,w,c
  1582  00058A  6EF7               	movwf	tblptrh,c
  1583  00058C                     	if	0	;There are less than 3 active tblptr bytes
  1584  00058C                     	endif
  1585  00058C  0009               	tblrd		*+
  1586  00058E  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1587  000592  0009               	tblrd		*+
  1588  000594  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1589  000598  0100               	movlb	0	; () banked
  1590  00059A  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1591  00059C  0100               	movlb	0	; () banked
  1592  00059E  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1593  0005A0  0100               	movlb	0	; () banked
  1594  0005A2  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1595  0005A4  0100               	movlb	0	; () banked
  1596  0005A6  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1597  0005A8  0100               	movlb	0	; () banked
  1598  0005AA  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1599  0005AC  0100               	movlb	0	; () banked
  1600  0005AE  178B               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1601  0005B0  0100               	movlb	0	; () banked
  1602  0005B2  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1603  0005B4  0100               	movlb	0	; () banked
  1604  0005B6  178C               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1605  0005B8                     l2416:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;ES_Timers.c: 306: }
  1609                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1610  0005B8  0100               	movlb	0	; () banked
  1611  0005BA  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1612  0005BC  0D02               	mullw	2
  1613  0005BE  0E01               	movlw	low _BitNum2SetMask
  1614  0005C0  24F3               	addwf	prodl,w,c
  1615  0005C2  6EF6               	movwf	tblptrl,c
  1616  0005C4  0E03               	movlw	high _BitNum2SetMask
  1617  0005C6  20F4               	addwfc	prodh,w,c
  1618  0005C8  6EF7               	movwf	tblptrh,c
  1619  0005CA                     	if	0	;There are less than 3 active tblptr bytes
  1620  0005CA                     	endif
  1621  0005CA  0009               	tblrd		*+
  1622  0005CC  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1623  0005D0  0009               	tblrd		*+
  1624  0005D2  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1625  0005D6  0100               	movlb	0	; () banked
  1626  0005D8  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1627  0005DA  0100               	movlb	0	; () banked
  1628  0005DC  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1629  0005DE  0100               	movlb	0	; () banked
  1630  0005E0  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1631  0005E2  0100               	movlb	0	; () banked
  1632  0005E4  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1633  0005E6  0100               	movlb	0	; () banked
  1634  0005E8  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1635  0005EA  0100               	movlb	0	; () banked
  1636  0005EC  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1637  0005EE  0100               	movlb	0	; () banked
  1638  0005F0  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1639  0005F2  0100               	movlb	0	; () banked
  1640  0005F4  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1644  0005F6  0100               	movlb	0	; () banked
  1645  0005F8  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1646  0005FA  0100               	movlb	0	; () banked
  1647  0005FC  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1648  0005FE  B4D8               	btfsc	status,2,c
  1649  000600  0012               	return	
  1650  000602  D77F               	goto	l2404
  1651  000604                     __end_of_ES_Timer_Tick_Resp:
  1652                           	opt stack 0
  1653                           tosu	equ	0xFFF
  1654                           tosh	equ	0xFFE
  1655                           tosl	equ	0xFFD
  1656                           pclath	equ	0xFFA
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           prodh	equ	0xFF4
  1662                           prodl	equ	0xFF3
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _PostButtonDebounceSM *****************
  1673 ;; Defined at:
  1674 ;;		line 75 in file "Button.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      unsigned char 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       3       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       3       0       0
  1692 ;;Total ram usage:        3 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    9
  1695 ;; This function calls:
  1696 ;;		_ES_PostToService
  1697 ;; This function is called by:
  1698 ;;		_CheckButtonEvents
  1699 ;;		_ES_Timer_Tick_Resp
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text6
  1704  001514                     __ptext6:
  1705                           	opt stack 0
  1706  001514                     _PostButtonDebounceSM:
  1707                           	opt stack 18
  1708                           
  1709                           ;Button.c: 78: return ES_PostToService(MyPriority, ThisEvent);
  1710                           ;	Return value of _PostButtonDebounceSM is never used
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;incstack = 0
  1714  001514  C0D9  F0D3         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  1715  001518  C0DA  F0D4         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  1716  00151C  C0DB  F0D5         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  1717  001520  0100               	movlb	0	; () banked
  1718  001522  5193               	movf	_MyPriority& (0+255),w,b
  1719  001524  EC0B  F008         	call	_ES_PostToService
  1720  001528  0012               	return	
  1721  00152A                     __end_of_PostButtonDebounceSM:
  1722                           	opt stack 0
  1723                           tosu	equ	0xFFF
  1724                           tosh	equ	0xFFE
  1725                           tosl	equ	0xFFD
  1726                           pclath	equ	0xFFA
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           indf2	equ	0xFDF
  1736                           postinc2	equ	0xFDE
  1737                           postdec2	equ	0xFDD
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _PostAnalogService *****************
  1743 ;; Defined at:
  1744 ;;		line 47 in file "Analog_Service.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      unsigned char 
  1751 ;; Registers used:
  1752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1758 ;;      Params:         0       3       0       0
  1759 ;;      Locals:         0       0       0       0
  1760 ;;      Temps:          0       0       0       0
  1761 ;;      Totals:         0       3       0       0
  1762 ;;Total ram usage:        3 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    9
  1765 ;; This function calls:
  1766 ;;		_ES_PostToService
  1767 ;; This function is called by:
  1768 ;;		_ES_Timer_Tick_Resp
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text7
  1773  00152A                     __ptext7:
  1774                           	opt stack 0
  1775  00152A                     _PostAnalogService:
  1776                           	opt stack 18
  1777                           
  1778                           ;Analog_Service.c: 49: return ES_PostToService( MyPriority, ThisEvent);
  1779                           ;	Return value of _PostAnalogService is never used
  1780                           
  1781                           ;incstack = 0
  1782  00152A  C0D9  F0D3         	movff	PostAnalogService@ThisEvent,ES_PostToService@TheEvent
  1783  00152E  C0DA  F0D4         	movff	PostAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  1784  001532  C0DB  F0D5         	movff	PostAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  1785  001536  0100               	movlb	0	; () banked
  1786  001538  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  1787  00153A  EC0B  F008         	call	_ES_PostToService
  1788  00153E  0012               	return	
  1789  001540                     __end_of_PostAnalogService:
  1790                           	opt stack 0
  1791                           tosu	equ	0xFFF
  1792                           tosh	equ	0xFFE
  1793                           tosl	equ	0xFFD
  1794                           pclath	equ	0xFFA
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _ES_GetMSBitSet *****************
  1811 ;; Defined at:
  1812 ;;		line 79 in file "ES_LookupTables.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  LoopCntr        1    9[BANK0 ] char 
  1817 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1818 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      unsigned char 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1828 ;;      Params:         0       2       0       0
  1829 ;;      Locals:         0       3       0       0
  1830 ;;      Temps:          0       5       0       0
  1831 ;;      Totals:         0      10       0       0
  1832 ;;Total ram usage:       10 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    6
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_ES_Run
  1839 ;;		_ES_Timer_Tick_Resp
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  000B22                     __ptext8:
  1845                           	opt stack 0
  1846  000B22                     _ES_GetMSBitSet:
  1847                           	opt stack 21
  1848                           
  1849                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1850                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1851                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1852                           
  1853                           ;incstack = 0
  1854  000B22  0E80               	movlw	128
  1855  000B24  0100               	movlb	0	; () banked
  1856  000B26  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1857                           
  1858                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1859  000B28  0E03               	movlw	3
  1860  000B2A  0100               	movlb	0	; () banked
  1861  000B2C  6FC5               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1862  000B2E                     l2282:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1866  000B2E  0100               	movlb	0	; () banked
  1867  000B30  BFC5               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1868  000B32  D046               	goto	l2296
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1872                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1873                           ;ES_LookupTables.c: 91: 0x0F);
  1874                           
  1875                           ; BSR set to: 0
  1876                           
  1877                           ; BSR set to: 0
  1878  000B34  0100               	movlb	0	; () banked
  1879  000B36  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1880  000B38  0D04               	mullw	4
  1881  000B3A  CFF3 F0BE          	movff	prodl,??_ES_GetMSBitSet
  1882  000B3E  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1883  000B42  C0BD  F0C0         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1884  000B46  0100               	movlb	0	; () banked
  1885  000B48  2BBE               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1886  000B4A  D004               	goto	u1144
  1887  000B4C                     u1145:
  1888  000B4C  0100               	movlb	0	; () banked
  1889  000B4E  90D8               	bcf	status,0,c
  1890  000B50  33C0               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1891  000B52  33BF               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1892  000B54                     u1144:
  1893  000B54  0100               	movlb	0	; () banked
  1894  000B56  2FBE               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1895  000B58  D7F9               	goto	u1145
  1896  000B5A  0100               	movlb	0	; () banked
  1897  000B5C  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1898  000B5E  0B0F               	andlw	15
  1899  000B60  0100               	movlb	0	; () banked
  1900  000B62  6FC4               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1904  000B64  0100               	movlb	0	; () banked
  1905  000B66  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1906  000B68  0100               	movlb	0	; () banked
  1907  000B6A  B4D8               	btfsc	status,2,c
  1908  000B6C  D026               	goto	l2292
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1912                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1913  000B6E  0EFF               	movlw	255
  1914  000B70  0100               	movlb	0	; () banked
  1915  000B72  6FBE               	movwf	??_ES_GetMSBitSet& (0+255),b
  1916  000B74  0EFF               	movlw	255
  1917  000B76  0100               	movlb	0	; () banked
  1918  000B78  6FBF               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1919  000B7A  0100               	movlb	0	; () banked
  1920  000B7C  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1921  000B7E  0100               	movlb	0	; () banked
  1922  000B80  6FC0               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1923  000B82  6BC1               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1924  000B84  0100               	movlb	0	; () banked
  1925  000B86  51BE               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1926  000B88  0100               	movlb	0	; () banked
  1927  000B8A  27C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1928  000B8C  0100               	movlb	0	; () banked
  1929  000B8E  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1930  000B90  0100               	movlb	0	; () banked
  1931  000B92  23C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1932  000B94  0E41               	movlw	low _Nybble2MSBitNum
  1933  000B96  0100               	movlb	0	; () banked
  1934  000B98  25C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1935  000B9A  6EF6               	movwf	tblptrl,c
  1936  000B9C  0E03               	movlw	high _Nybble2MSBitNum
  1937  000B9E  21C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1938  000BA0  6EF7               	movwf	tblptrh,c
  1939  000BA2                     	if	0	;There are less than 3 active tblptr bytes
  1940  000BA2                     	endif
  1941  000BA2  0008               	tblrd		*
  1942  000BA4  CFF5 F0C2          	movff	tablat,??_ES_GetMSBitSet+4
  1943  000BA8  0100               	movlb	0	; () banked
  1944  000BAA  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1945  000BAC  0D04               	mullw	4
  1946  000BAE  50F3               	movf	prodl,w,c
  1947  000BB0  0100               	movlb	0	; () banked
  1948  000BB2  25C2               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1949  000BB4  0100               	movlb	0	; () banked
  1950  000BB6  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1951                           
  1952                           ;ES_LookupTables.c: 96: break;
  1953  000BB8  D003               	goto	l2296
  1954  000BBA                     l2292:
  1955                           
  1956                           ; BSR set to: 0
  1957  000BBA  0100               	movlb	0	; () banked
  1958  000BBC  07C5               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1959  000BBE  D7B7               	goto	l2282
  1960  000BC0                     l2296:
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;ES_LookupTables.c: 97: }
  1964                           ;ES_LookupTables.c: 98: }
  1965                           ;ES_LookupTables.c: 99: return ReturnVal;
  1966  000BC0  0100               	movlb	0	; () banked
  1967  000BC2  51C3               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1968  000BC4  0012               	return	
  1969  000BC6                     __end_of_ES_GetMSBitSet:
  1970                           	opt stack 0
  1971                           tosu	equ	0xFFF
  1972                           tosh	equ	0xFFE
  1973                           tosl	equ	0xFFD
  1974                           pclath	equ	0xFFA
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _RunAnalogService *****************
  1991 ;; Defined at:
  1992 ;;		line 52 in file "Analog_Service.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  3   29[BANK0 ] struct ES_Event_t
  1999 ;; Registers used:
  2000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2006 ;;      Params:         0       3       0       0
  2007 ;;      Locals:         0       3       0       0
  2008 ;;      Temps:          0       0       0       0
  2009 ;;      Totals:         0       6       0       0
  2010 ;;Total ram usage:        6 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    7
  2013 ;; This function calls:
  2014 ;;		_ES_Timer_InitTimer
  2015 ;;		_InitAnalogHW
  2016 ;; This function is called by:
  2017 ;;		_ES_Run
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text9
  2022  00123E                     __ptext9:
  2023                           	opt stack 0
  2024  00123E                     _RunAnalogService:
  2025                           	opt stack 22
  2026                           
  2027                           ;Analog_Service.c: 54: ES_Event ReturnEvent;
  2028                           ;Analog_Service.c: 55: if(ThisEvent.EventType == ES_INIT) {
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;incstack = 0
  2032  00123E  0E02               	movlw	2
  2033  001240  0100               	movlb	0	; () banked
  2034  001242  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2035  001244  A4D8               	btfss	status,2,c
  2036  001246  D00E               	goto	l2762
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;Analog_Service.c: 56: InitAnalogHW();
  2040  001248  EC28  F00A         	call	_InitAnalogHW	;wreg free
  2041                           
  2042                           ;Analog_Service.c: 57: ADCON0bits.CHS = 0x00;
  2043  00124C  94C2               	bcf	4034,2,c	;volatile
  2044  00124E  96C2               	bcf	4034,3,c	;volatile
  2045  001250  98C2               	bcf	4034,4,c	;volatile
  2046  001252  9AC2               	bcf	4034,5,c	;volatile
  2047                           
  2048                           ;Analog_Service.c: 58: ES_Timer_InitTimer(0, 5);
  2049  001254  0E00               	movlw	0
  2050  001256  0100               	movlb	0	; () banked
  2051  001258  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2052  00125A  0E05               	movlw	5
  2053  00125C  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2054  00125E  0E00               	movlw	0
  2055  001260  EC51  F007         	call	_ES_Timer_InitTimer
  2056  001264                     l2762:
  2057                           
  2058                           ;Analog_Service.c: 59: }
  2059                           ;Analog_Service.c: 60: if(ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 0
      +                          ) {
  2060  001264  0E03               	movlw	3
  2061  001266  0100               	movlb	0	; () banked
  2062  001268  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2063  00126A  A4D8               	btfss	status,2,c
  2064  00126C  D006               	goto	l2768
  2065                           
  2066                           ; BSR set to: 0
  2067  00126E  0100               	movlb	0	; () banked
  2068  001270  51DA               	movf	(RunAnalogService@ThisEvent+1)& (0+255),w,b
  2069  001272  0100               	movlb	0	; () banked
  2070  001274  11DB               	iorwf	(RunAnalogService@ThisEvent+2)& (0+255),w,b
  2071  001276  B4D8               	btfsc	status,2,c
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;Analog_Service.c: 61: ADCON0bits.GO = 1;
  2075  001278  82C2               	bsf	4034,1,c	;volatile
  2076  00127A                     l2768:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;Analog_Service.c: 62: }
  2080                           ;Analog_Service.c: 63: ReturnEvent.EventType = ES_NO_EVENT;
  2081  00127A  0E00               	movlw	0
  2082  00127C  0100               	movlb	0	; () banked
  2083  00127E  6FDC               	movwf	RunAnalogService@ReturnEvent& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;Analog_Service.c: 64: return ReturnEvent;
  2087  001280  C0DC  F0D9         	movff	RunAnalogService@ReturnEvent,?_RunAnalogService
  2088  001284  C0DD  F0DA         	movff	RunAnalogService@ReturnEvent+1,?_RunAnalogService+1
  2089  001288  C0DE  F0DB         	movff	RunAnalogService@ReturnEvent+2,?_RunAnalogService+2
  2090  00128C  0012               	return	
  2091  00128E                     __end_of_RunAnalogService:
  2092                           	opt stack 0
  2093                           tosu	equ	0xFFF
  2094                           tosh	equ	0xFFE
  2095                           tosl	equ	0xFFD
  2096                           pclath	equ	0xFFA
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           prodh	equ	0xFF4
  2102                           prodl	equ	0xFF3
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           indf2	equ	0xFDF
  2106                           postinc2	equ	0xFDE
  2107                           postdec2	equ	0xFDD
  2108                           fsr2h	equ	0xFDA
  2109                           fsr2l	equ	0xFD9
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function _RunButtonDebounceSM *****************
  2113 ;; Defined at:
  2114 ;;		line 83 in file "Button.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  3   29[BANK0 ] struct ES_Event_t
  2121 ;; Registers used:
  2122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2128 ;;      Params:         0       3       0       0
  2129 ;;      Locals:         0       3       0       0
  2130 ;;      Temps:          0       0       0       0
  2131 ;;      Totals:         0       6       0       0
  2132 ;;Total ram usage:        6 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    9
  2135 ;; This function calls:
  2136 ;;		_ES_PostAll
  2137 ;;		_ES_Timer_InitTimer
  2138 ;; This function is called by:
  2139 ;;		_ES_Run
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text10
  2144  000C68                     __ptext10:
  2145                           	opt stack 0
  2146  000C68                     _RunButtonDebounceSM:
  2147                           	opt stack 20
  2148                           
  2149                           ;Button.c: 87: switch (CurrentState) {
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;incstack = 0
  2153  000C68  D03A               	goto	l2590
  2154  000C6A                     l2568:
  2155                           
  2156                           ;Button.c: 92: if (ThisEvent.EventType == ES_TIMEOUT) {
  2157  000C6A  0E03               	movlw	3
  2158  000C6C  0100               	movlb	0	; () banked
  2159  000C6E  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2160  000C70  A4D8               	btfss	status,2,c
  2161  000C72  D03D               	goto	l2592
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;Button.c: 94: CurrentState = Ready2Sample;
  2165  000C74  0E01               	movlw	1
  2166  000C76  0100               	movlb	0	; () banked
  2167  000C78  6F90               	movwf	_CurrentState& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;Button.c: 95: }
  2171                           ;Button.c: 96: break;
  2172  000C7A  D039               	goto	l2592
  2173  000C7C                     l2572:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;Button.c: 101: if (ThisEvent.EventType == DBButtonUp) {
  2177  000C7C  0E06               	movlw	6
  2178  000C7E  0100               	movlb	0	; () banked
  2179  000C80  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2180  000C82  A4D8               	btfss	status,2,c
  2181  000C84  D013               	goto	l2580
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;Button.c: 103: ES_Timer_InitTimer(1, 2);
  2185  000C86  0E00               	movlw	0
  2186  000C88  0100               	movlb	0	; () banked
  2187  000C8A  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2188  000C8C  0E02               	movlw	2
  2189  000C8E  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2190  000C90  0E01               	movlw	1
  2191  000C92  EC51  F007         	call	_ES_Timer_InitTimer
  2192                           
  2193                           ;Button.c: 105: CurrentState = Debouncing;
  2194  000C96  0E00               	movlw	0
  2195  000C98  0100               	movlb	0	; () banked
  2196  000C9A  6F90               	movwf	_CurrentState& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;Button.c: 107: ES_PostAll(ThisEvent);
  2200  000C9C  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2201  000CA0  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2202  000CA4  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2203  000CA8  ECCF  F007         	call	_ES_PostAll	;wreg free
  2204  000CAC                     l2580:
  2205                           
  2206                           ;Button.c: 108: }
  2207                           ;Button.c: 110: if (ThisEvent.EventType == DBButtonDown) {
  2208  000CAC  0E05               	movlw	5
  2209  000CAE  0100               	movlb	0	; () banked
  2210  000CB0  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2211  000CB2  A4D8               	btfss	status,2,c
  2212  000CB4  D01C               	goto	l2592
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;Button.c: 114: ES_Timer_InitTimer(1, 2);
  2216  000CB6  0E00               	movlw	0
  2217  000CB8  0100               	movlb	0	; () banked
  2218  000CBA  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2219  000CBC  0E02               	movlw	2
  2220  000CBE  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2221  000CC0  0E01               	movlw	1
  2222  000CC2  EC51  F007         	call	_ES_Timer_InitTimer
  2223                           
  2224                           ;Button.c: 116: CurrentState = Debouncing;
  2225  000CC6  0E00               	movlw	0
  2226  000CC8  0100               	movlb	0	; () banked
  2227  000CCA  6F90               	movwf	_CurrentState& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;Button.c: 117: ES_PostAll(ThisEvent);
  2231  000CCC  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2232  000CD0  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2233  000CD4  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2234  000CD8  ECCF  F007         	call	_ES_PostAll	;wreg free
  2235                           
  2236                           ;Button.c: 120: }
  2237                           
  2238                           ;Button.c: 118: }
  2239                           ;Button.c: 119: break;
  2240  000CDC  D008               	goto	l2592
  2241  000CDE                     l2590:
  2242  000CDE  0100               	movlb	0	; () banked
  2243  000CE0  5190               	movf	_CurrentState& (0+255),w,b
  2244                           
  2245                           ; Switch size 1, requested type "space"
  2246                           ; Number of cases is 2, Range of values is 0 to 1
  2247                           ; switch strategies available:
  2248                           ; Name         Instructions Cycles
  2249                           ; simple_byte            7     4 (average)
  2250                           ;	Chosen strategy is simple_byte
  2251  000CE2  0A00               	xorlw	0	; case 0
  2252  000CE4  B4D8               	btfsc	status,2,c
  2253  000CE6  D7C1               	goto	l2568
  2254  000CE8  0A01               	xorlw	1	; case 1
  2255  000CEA  B4D8               	btfsc	status,2,c
  2256  000CEC  D7C7               	goto	l2572
  2257  000CEE                     l2592:
  2258                           
  2259                           ;Button.c: 122: ES_Event ReturnEvent;
  2260                           ;Button.c: 123: ReturnEvent.EventType = ES_NO_EVENT;
  2261  000CEE  0E00               	movlw	0
  2262  000CF0  0100               	movlb	0	; () banked
  2263  000CF2  6FDC               	movwf	RunButtonDebounceSM@ReturnEvent& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;Button.c: 124: return ReturnEvent;
  2267  000CF4  C0DC  F0D9         	movff	RunButtonDebounceSM@ReturnEvent,?_RunButtonDebounceSM
  2268  000CF8  C0DD  F0DA         	movff	RunButtonDebounceSM@ReturnEvent+1,?_RunButtonDebounceSM+1
  2269  000CFC  C0DE  F0DB         	movff	RunButtonDebounceSM@ReturnEvent+2,?_RunButtonDebounceSM+2
  2270  000D00  0012               	return	
  2271  000D02                     __end_of_RunButtonDebounceSM:
  2272                           	opt stack 0
  2273                           tosu	equ	0xFFF
  2274                           tosh	equ	0xFFE
  2275                           tosl	equ	0xFFD
  2276                           pclath	equ	0xFFA
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _RunCan_XmitService *****************
  2293 ;; Defined at:
  2294 ;;		line 137 in file "Can_XmitService.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  ReturnEvent     3   34[BANK0 ] struct ES_Event_t
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  3   29[BANK0 ] struct ES_Event_t
  2301 ;; Registers used:
  2302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2308 ;;      Params:         0       3       0       0
  2309 ;;      Locals:         0       3       0       0
  2310 ;;      Temps:          0       2       0       0
  2311 ;;      Totals:         0       8       0       0
  2312 ;;Total ram usage:        8 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    8
  2315 ;; This function calls:
  2316 ;;		_InitCanHardware
  2317 ;;		_InitPins
  2318 ;;		_XmitData
  2319 ;; This function is called by:
  2320 ;;		_ES_Run
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text11
  2325  0008C6                     __ptext11:
  2326                           	opt stack 0
  2327  0008C6                     _RunCan_XmitService:
  2328                           	opt stack 21
  2329                           
  2330                           ;Can_XmitService.c: 139: ES_Event ReturnEvent;
  2331                           ;Can_XmitService.c: 141: if (ThisEvent.EventType == ES_INIT) {
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;incstack = 0
  2335  0008C6  0E02               	movlw	2
  2336  0008C8  0100               	movlb	0	; () banked
  2337  0008CA  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2338  0008CC  A4D8               	btfss	status,2,c
  2339  0008CE  D009               	goto	l2698
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;Can_XmitService.c: 142: InitPins();
  2343  0008D0  EC72  F00A         	call	_InitPins	;wreg free
  2344                           
  2345                           ;Can_XmitService.c: 143: InitCanHardware();
  2346  0008D4  EC0F  F007         	call	_InitCanHardware	;wreg free
  2347                           
  2348                           ;Can_XmitService.c: 144: LATA2 = 1;
  2349  0008D8  8489               	bsf	3977,2,c	;volatile
  2350                           
  2351                           ;Can_XmitService.c: 145: LastData = 0x00;
  2352  0008DA  0E00               	movlw	0
  2353  0008DC  0100               	movlb	0	; () banked
  2354  0008DE  6F92               	movwf	_LastData& (0+255),b
  2355                           
  2356                           ;Can_XmitService.c: 146: } else if (ThisEvent.EventType == DBButtonDown) {
  2357  0008E0  D055               	goto	l2726
  2358  0008E2                     l2698:
  2359                           
  2360                           ; BSR set to: 0
  2361  0008E2  0E05               	movlw	5
  2362  0008E4  0100               	movlb	0	; () banked
  2363  0008E6  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2364  0008E8  B4D8               	btfsc	status,2,c
  2365  0008EA  D02D               	goto	l2720
  2366  0008EC  D046               	goto	l2722
  2367  0008EE                     l503:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;Can_XmitService.c: 149: LATA2 = 1;
  2371  0008EE  8489               	bsf	3977,2,c	;volatile
  2372                           
  2373                           ;Can_XmitService.c: 150: LATA3 = 0;
  2374  0008F0  9689               	bcf	3977,3,c	;volatile
  2375                           
  2376                           ;Can_XmitService.c: 151: LATA4 = 0;
  2377  0008F2  9889               	bcf	3977,4,c	;volatile
  2378                           
  2379                           ;Can_XmitService.c: 152: LATA5 = 0;
  2380  0008F4  9A89               	bcf	3977,5,c	;volatile
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;Can_XmitService.c: 153: LastData = 0x00;
  2384  0008F6  0E00               	movlw	0
  2385  0008F8  0100               	movlb	0	; () banked
  2386  0008FA  6F92               	movwf	_LastData& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;Can_XmitService.c: 154: XmitData(0x00);
  2390  0008FC  0E00               	movlw	0
  2391  0008FE  EC91  F007         	call	_XmitData
  2392                           
  2393                           ;Can_XmitService.c: 155: break;
  2394  000902  D044               	goto	l2726
  2395  000904                     l505:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;Can_XmitService.c: 157: LATA2 = 0;
  2399  000904  9489               	bcf	3977,2,c	;volatile
  2400                           
  2401                           ;Can_XmitService.c: 158: LATA3 = 1;
  2402  000906  8689               	bsf	3977,3,c	;volatile
  2403                           
  2404                           ;Can_XmitService.c: 159: LATA4 = 0;
  2405  000908  9889               	bcf	3977,4,c	;volatile
  2406                           
  2407                           ;Can_XmitService.c: 160: LATA5 = 0;
  2408  00090A  9A89               	bcf	3977,5,c	;volatile
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;Can_XmitService.c: 161: LastData = 0x01;
  2412  00090C  0E01               	movlw	1
  2413  00090E  0100               	movlb	0	; () banked
  2414  000910  6F92               	movwf	_LastData& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;Can_XmitService.c: 162: XmitData(0x01);
  2418  000912  0E01               	movlw	1
  2419  000914  EC91  F007         	call	_XmitData
  2420                           
  2421                           ;Can_XmitService.c: 163: break;
  2422  000918  D039               	goto	l2726
  2423  00091A                     l506:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;Can_XmitService.c: 165: LATA2 = 0;
  2427  00091A  9489               	bcf	3977,2,c	;volatile
  2428                           
  2429                           ;Can_XmitService.c: 166: LATA3 = 0;
  2430  00091C  9689               	bcf	3977,3,c	;volatile
  2431                           
  2432                           ;Can_XmitService.c: 167: LATA4 = 1;
  2433  00091E  8889               	bsf	3977,4,c	;volatile
  2434                           
  2435                           ;Can_XmitService.c: 168: LATA5 = 0;
  2436  000920  9A89               	bcf	3977,5,c	;volatile
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;Can_XmitService.c: 169: LastData = 0x02;
  2440  000922  0E02               	movlw	2
  2441  000924  0100               	movlb	0	; () banked
  2442  000926  6F92               	movwf	_LastData& (0+255),b
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;Can_XmitService.c: 170: XmitData(0x02);
  2446  000928  0E02               	movlw	2
  2447  00092A  EC91  F007         	call	_XmitData
  2448                           
  2449                           ;Can_XmitService.c: 171: break;
  2450  00092E  D02E               	goto	l2726
  2451  000930                     l507:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;Can_XmitService.c: 173: LATA2 = 0;
  2455  000930  9489               	bcf	3977,2,c	;volatile
  2456                           
  2457                           ;Can_XmitService.c: 174: LATA3 = 0;
  2458  000932  9689               	bcf	3977,3,c	;volatile
  2459                           
  2460                           ;Can_XmitService.c: 175: LATA4 = 0;
  2461  000934  9889               	bcf	3977,4,c	;volatile
  2462                           
  2463                           ;Can_XmitService.c: 176: LATA5 = 1;
  2464  000936  8A89               	bsf	3977,5,c	;volatile
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;Can_XmitService.c: 177: LastData = 0x03;
  2468  000938  0E03               	movlw	3
  2469  00093A  0100               	movlb	0	; () banked
  2470  00093C  6F92               	movwf	_LastData& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;Can_XmitService.c: 178: XmitData(0x03);
  2474  00093E  0E03               	movlw	3
  2475  000940  EC91  F007         	call	_XmitData
  2476                           
  2477                           ;Can_XmitService.c: 180: }
  2478                           
  2479                           ;Can_XmitService.c: 179: break;
  2480  000944  D023               	goto	l2726
  2481  000946                     l2720:
  2482  000946  EE20  F0DA         	lfsr	2,RunCan_XmitService@ThisEvent+1
  2483  00094A  CFDE F0DC          	movff	postinc2,??_RunCan_XmitService
  2484  00094E  CFDD F0DD          	movff	postdec2,??_RunCan_XmitService+1
  2485                           
  2486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2487                           ; Switch size 1, requested type "space"
  2488                           ; Number of cases is 1, Range of values is 0 to 0
  2489                           ; switch strategies available:
  2490                           ; Name         Instructions Cycles
  2491                           ; simple_byte            4     3 (average)
  2492                           ;	Chosen strategy is simple_byte
  2493  000952  0100               	movlb	0	; () banked
  2494  000954  51DD               	movf	(??_RunCan_XmitService+1)& (0+255),w,b
  2495  000956  0A00               	xorlw	0	; case 0
  2496  000958  A4D8               	btfss	status,2,c
  2497  00095A  D018               	goto	l2726
  2498                           
  2499                           ; BSR set to: 0
  2500                           ; Switch size 1, requested type "space"
  2501                           ; Number of cases is 4, Range of values is 7 to 14
  2502                           ; switch strategies available:
  2503                           ; Name         Instructions Cycles
  2504                           ; simple_byte           13     7 (average)
  2505                           ;	Chosen strategy is simple_byte
  2506  00095C  0100               	movlb	0	; () banked
  2507  00095E  51DC               	movf	??_RunCan_XmitService& (0+255),w,b
  2508  000960  0A07               	xorlw	7	; case 7
  2509  000962  B4D8               	btfsc	status,2,c
  2510  000964  D7E5               	goto	l507
  2511  000966  0A0C               	xorlw	12	; case 11
  2512  000968  B4D8               	btfsc	status,2,c
  2513  00096A  D7D7               	goto	l506
  2514  00096C  0A06               	xorlw	6	; case 13
  2515  00096E  B4D8               	btfsc	status,2,c
  2516  000970  D7C9               	goto	l505
  2517  000972  0A03               	xorlw	3	; case 14
  2518  000974  B4D8               	btfsc	status,2,c
  2519  000976  D7BB               	goto	l503
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;Can_XmitService.c: 181: } else if (ThisEvent.EventType == XMIT_EVENT) {
  2523  000978  D009               	goto	l2726
  2524  00097A                     l2722:
  2525                           
  2526                           ; BSR set to: 0
  2527  00097A  0E07               	movlw	7
  2528  00097C  0100               	movlb	0	; () banked
  2529  00097E  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2530  000980  A4D8               	btfss	status,2,c
  2531  000982  D004               	goto	l2726
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;Can_XmitService.c: 182: XmitData(LastData);
  2535  000984  0100               	movlb	0	; () banked
  2536  000986  5192               	movf	_LastData& (0+255),w,b
  2537  000988  EC91  F007         	call	_XmitData
  2538  00098C                     l2726:
  2539                           
  2540                           ;Can_XmitService.c: 183: }
  2541                           ;Can_XmitService.c: 184: ReturnEvent.EventType = ES_NO_EVENT;
  2542  00098C  0E00               	movlw	0
  2543  00098E  0100               	movlb	0	; () banked
  2544  000990  6FDE               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;Can_XmitService.c: 185: return ReturnEvent;
  2548  000992  C0DE  F0D9         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2549  000996  C0DF  F0DA         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2550  00099A  C0E0  F0DB         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2551  00099E  0012               	return	
  2552  0009A0                     __end_of_RunCan_XmitService:
  2553                           	opt stack 0
  2554                           tosu	equ	0xFFF
  2555                           tosh	equ	0xFFE
  2556                           tosl	equ	0xFFD
  2557                           pclath	equ	0xFFA
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           indf2	equ	0xFDF
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _XmitData *****************
  2574 ;; Defined at:
  2575 ;;		line 297 in file "Can_XmitService.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  DataByte        1    wreg     unsigned char 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  DataByte        1    2[BANK0 ] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2589 ;;      Params:         0       0       0       0
  2590 ;;      Locals:         0       1       0       0
  2591 ;;      Temps:          0       0       0       0
  2592 ;;      Totals:         0       1       0       0
  2593 ;;Total ram usage:        1 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    7
  2596 ;; This function calls:
  2597 ;;		_GetBrightness
  2598 ;;		_GetLocation
  2599 ;; This function is called by:
  2600 ;;		_RunCan_XmitService
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text12
  2605  000F22                     __ptext12:
  2606                           	opt stack 0
  2607  000F22                     _XmitData:
  2608                           	opt stack 21
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;incstack = 0
  2612                           ;XmitData@DataByte stored from wreg
  2613  000F22  0100               	movlb	0	; () banked
  2614  000F24  6FBE               	movwf	XmitData@DataByte& (0+255),b
  2615                           
  2616                           ;Can_XmitService.c: 298: TXB0CONbits.TXREQ = 0;
  2617  000F26  010F               	movlb	15	; () banked
  2618  000F28  9740               	bcf	64,3,b	;volatile
  2619                           
  2620                           ; BSR set to: 15
  2621                           ;Can_XmitService.c: 301: TXB0DLC = 0x05;
  2622  000F2A  0E05               	movlw	5
  2623  000F2C  010F               	movlb	15	; () banked
  2624  000F2E  6F45               	movwf	69,b	;volatile
  2625                           
  2626                           ; BSR set to: 15
  2627                           ;Can_XmitService.c: 302: TXB0D0 = DataByte;
  2628  000F30  C0BE  FF46         	movff	XmitData@DataByte,3910	;volatile
  2629                           
  2630                           ; BSR set to: 15
  2631                           ;Can_XmitService.c: 303: TXB0D1 = (GetBrightness() >> 8) & 0xFF;
  2632  000F34  ECBD  F00A         	call	_GetBrightness	;wreg free
  2633  000F38  0100               	movlb	0	; () banked
  2634  000F3A  C0BD  F0BC         	movff	?_GetBrightness+1,?_GetBrightness
  2635  000F3E  0100               	movlb	0	; () banked
  2636  000F40  6BBD               	clrf	(?_GetBrightness+1)& (0+255),b
  2637  000F42  0100               	movlb	0	; () banked
  2638  000F44  51BC               	movf	?_GetBrightness& (0+255),w,b
  2639  000F46  010F               	movlb	15	; () banked
  2640  000F48  6F47               	movwf	71,b	;volatile
  2641                           
  2642                           ; BSR set to: 15
  2643                           ;Can_XmitService.c: 304: TXB0D2 = GetBrightness() & 0xFF;
  2644  000F4A  ECBD  F00A         	call	_GetBrightness	;wreg free
  2645  000F4E  0100               	movlb	0	; () banked
  2646  000F50  51BC               	movf	?_GetBrightness& (0+255),w,b
  2647  000F52  010F               	movlb	15	; () banked
  2648  000F54  6F48               	movwf	72,b	;volatile
  2649                           
  2650                           ; BSR set to: 15
  2651                           ;Can_XmitService.c: 305: TXB0D3 = (GetLocation() >> 8) & 0xFF;
  2652  000F56  ECB8  F00A         	call	_GetLocation	;wreg free
  2653  000F5A  0100               	movlb	0	; () banked
  2654  000F5C  C0BD  F0BC         	movff	?_GetLocation+1,?_GetLocation
  2655  000F60  0100               	movlb	0	; () banked
  2656  000F62  6BBD               	clrf	(?_GetLocation+1)& (0+255),b
  2657  000F64  0100               	movlb	0	; () banked
  2658  000F66  51BC               	movf	?_GetLocation& (0+255),w,b
  2659  000F68  010F               	movlb	15	; () banked
  2660  000F6A  6F49               	movwf	73,b	;volatile
  2661                           
  2662                           ; BSR set to: 15
  2663                           ;Can_XmitService.c: 306: TXB0D4 = GetLocation() & 0xFF;
  2664  000F6C  ECB8  F00A         	call	_GetLocation	;wreg free
  2665  000F70  0100               	movlb	0	; () banked
  2666  000F72  51BC               	movf	?_GetLocation& (0+255),w,b
  2667  000F74  010F               	movlb	15	; () banked
  2668  000F76  6F4A               	movwf	74,b	;volatile
  2669                           
  2670                           ; BSR set to: 15
  2671                           ;Can_XmitService.c: 309: TXB0SIDH = 0x00;
  2672  000F78  0E00               	movlw	0
  2673  000F7A  010F               	movlb	15	; () banked
  2674  000F7C  6F41               	movwf	65,b	;volatile
  2675                           
  2676                           ; BSR set to: 15
  2677                           ;Can_XmitService.c: 310: TXB0SIDL = 0x08;
  2678  000F7E  0E08               	movlw	8
  2679  000F80  010F               	movlb	15	; () banked
  2680  000F82  6F42               	movwf	66,b	;volatile
  2681                           
  2682                           ; BSR set to: 15
  2683                           ;Can_XmitService.c: 311: TXB0EIDH = 0x00;
  2684  000F84  0E00               	movlw	0
  2685  000F86  010F               	movlb	15	; () banked
  2686  000F88  6F43               	movwf	67,b	;volatile
  2687                           
  2688                           ; BSR set to: 15
  2689                           ;Can_XmitService.c: 312: TXB0EIDL = 0x01;
  2690  000F8A  0E01               	movlw	1
  2691  000F8C  010F               	movlb	15	; () banked
  2692  000F8E  6F44               	movwf	68,b	;volatile
  2693                           
  2694                           ; BSR set to: 15
  2695                           ;Can_XmitService.c: 314: TXB0CONbits.TXPRI0 = 1;
  2696  000F90  010F               	movlb	15	; () banked
  2697  000F92  8140               	bsf	64,0,b	;volatile
  2698                           
  2699                           ; BSR set to: 15
  2700                           ;Can_XmitService.c: 315: TXB0CONbits.TXPRI1 = 1;
  2701  000F94  010F               	movlb	15	; () banked
  2702  000F96  8340               	bsf	64,1,b	;volatile
  2703                           
  2704                           ; BSR set to: 15
  2705                           ;Can_XmitService.c: 317: TXB0CONbits.TXREQ = 1;
  2706  000F98  010F               	movlb	15	; () banked
  2707  000F9A  8740               	bsf	64,3,b	;volatile
  2708                           
  2709                           ; BSR set to: 15
  2710  000F9C  0012               	return		;funcret
  2711  000F9E                     __end_of_XmitData:
  2712                           	opt stack 0
  2713                           tosu	equ	0xFFF
  2714                           tosh	equ	0xFFE
  2715                           tosl	equ	0xFFD
  2716                           pclath	equ	0xFFA
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           prodh	equ	0xFF4
  2722                           prodl	equ	0xFF3
  2723                           postinc0	equ	0xFEE
  2724                           wreg	equ	0xFE8
  2725                           indf2	equ	0xFDF
  2726                           postinc2	equ	0xFDE
  2727                           postdec2	equ	0xFDD
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _GetLocation *****************
  2733 ;; Defined at:
  2734 ;;		line 72 in file "Analog_Service.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  2    0[BANK0 ] unsigned int 
  2741 ;; Registers used:
  2742 ;;		None
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2748 ;;      Params:         0       2       0       0
  2749 ;;      Locals:         0       0       0       0
  2750 ;;      Temps:          0       0       0       0
  2751 ;;      Totals:         0       2       0       0
  2752 ;;Total ram usage:        2 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    6
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_XmitData
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text13
  2763  001570                     __ptext13:
  2764                           	opt stack 0
  2765  001570                     _GetLocation:
  2766                           	opt stack 21
  2767                           
  2768                           ;Analog_Service.c: 74: return Location;
  2769                           
  2770                           ; BSR set to: 15
  2771                           ;incstack = 0
  2772  001570  C087  F0BC         	movff	_Location,?_GetLocation
  2773  001574  C088  F0BD         	movff	_Location+1,?_GetLocation+1
  2774  001578  0012               	return		;funcret
  2775  00157A                     __end_of_GetLocation:
  2776                           	opt stack 0
  2777                           tosu	equ	0xFFF
  2778                           tosh	equ	0xFFE
  2779                           tosl	equ	0xFFD
  2780                           pclath	equ	0xFFA
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           prodh	equ	0xFF4
  2786                           prodl	equ	0xFF3
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           indf2	equ	0xFDF
  2790                           postinc2	equ	0xFDE
  2791                           postdec2	equ	0xFDD
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _GetBrightness *****************
  2797 ;; Defined at:
  2798 ;;		line 67 in file "Analog_Service.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  2    0[BANK0 ] unsigned int 
  2805 ;; Registers used:
  2806 ;;		None
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2812 ;;      Params:         0       2       0       0
  2813 ;;      Locals:         0       0       0       0
  2814 ;;      Temps:          0       0       0       0
  2815 ;;      Totals:         0       2       0       0
  2816 ;;Total ram usage:        2 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    6
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_XmitData
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text14
  2827  00157A                     __ptext14:
  2828                           	opt stack 0
  2829  00157A                     _GetBrightness:
  2830                           	opt stack 21
  2831                           
  2832                           ;Analog_Service.c: 69: return Brightness;
  2833                           
  2834                           ;incstack = 0
  2835  00157A  C085  F0BC         	movff	_Brightness,?_GetBrightness
  2836  00157E  C086  F0BD         	movff	_Brightness+1,?_GetBrightness+1
  2837  001582  0012               	return		;funcret
  2838  001584                     __end_of_GetBrightness:
  2839                           	opt stack 0
  2840                           tosu	equ	0xFFF
  2841                           tosh	equ	0xFFE
  2842                           tosl	equ	0xFFD
  2843                           pclath	equ	0xFFA
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           postinc0	equ	0xFEE
  2851                           wreg	equ	0xFE8
  2852                           indf2	equ	0xFDF
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           fsr2h	equ	0xFDA
  2856                           fsr2l	equ	0xFD9
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _InitPins *****************
  2860 ;; Defined at:
  2861 ;;		line 281 in file "Can_XmitService.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2, status,0
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2875 ;;      Params:         0       0       0       0
  2876 ;;      Locals:         0       0       0       0
  2877 ;;      Temps:          0       0       0       0
  2878 ;;      Totals:         0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    6
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_RunCan_XmitService
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text15
  2890  0014E4                     __ptext15:
  2891                           	opt stack 0
  2892  0014E4                     _InitPins:
  2893                           	opt stack 22
  2894                           
  2895                           ;Can_XmitService.c: 284: PORTB = 0x00;
  2896                           
  2897                           ;incstack = 0
  2898  0014E4  0E00               	movlw	0
  2899  0014E6  6E81               	movwf	3969,c	;volatile
  2900                           
  2901                           ;Can_XmitService.c: 285: LATB = 0x00;
  2902  0014E8  0E00               	movlw	0
  2903  0014EA  6E8A               	movwf	3978,c	;volatile
  2904                           
  2905                           ;Can_XmitService.c: 286: TRISBbits.TRISB2 = 0;
  2906  0014EC  9493               	bcf	3987,2,c	;volatile
  2907                           
  2908                           ;Can_XmitService.c: 287: TRISBbits.TRISB3 = 1;
  2909  0014EE  8693               	bsf	3987,3,c	;volatile
  2910                           
  2911                           ;Can_XmitService.c: 290: PORTA = 0x00;
  2912  0014F0  0E00               	movlw	0
  2913  0014F2  6E80               	movwf	3968,c	;volatile
  2914                           
  2915                           ;Can_XmitService.c: 291: LATA &= 0b11111100;
  2916  0014F4  0EFC               	movlw	252
  2917  0014F6  1689               	andwf	3977,f,c	;volatile
  2918                           
  2919                           ;Can_XmitService.c: 292: TRISA &= 0b00000011;
  2920  0014F8  0E03               	movlw	3
  2921  0014FA  1692               	andwf	3986,f,c	;volatile
  2922  0014FC  0012               	return		;funcret
  2923  0014FE                     __end_of_InitPins:
  2924                           	opt stack 0
  2925                           tosu	equ	0xFFF
  2926                           tosh	equ	0xFFE
  2927                           tosl	equ	0xFFD
  2928                           pclath	equ	0xFFA
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           postinc0	equ	0xFEE
  2936                           wreg	equ	0xFE8
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _InitCanHardware *****************
  2945 ;; Defined at:
  2946 ;;		line 213 in file "Can_XmitService.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2960 ;;      Params:         0       0       0       0
  2961 ;;      Locals:         0       0       0       0
  2962 ;;      Temps:          0       0       0       0
  2963 ;;      Totals:         0       0       0       0
  2964 ;;Total ram usage:        0 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    6
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_RunCan_XmitService
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text16
  2975  000E1E                     __ptext16:
  2976                           	opt stack 0
  2977  000E1E                     _InitCanHardware:
  2978                           	opt stack 22
  2979                           
  2980                           ;Can_XmitService.c: 217: CANCON = 0x80;
  2981                           
  2982                           ;incstack = 0
  2983  000E1E  0E80               	movlw	128
  2984  000E20  6E6F               	movwf	3951,c	;volatile
  2985  000E22                     l526:
  2986  000E22  AE6E               	btfss	3950,7,c	;volatile
  2987  000E24  D7FE               	goto	l526
  2988                           
  2989                           ;Can_XmitService.c: 220: CIOCON = 0x20;
  2990  000E26  0E20               	movlw	32
  2991  000E28  6E73               	movwf	3955,c	;volatile
  2992                           
  2993                           ;Can_XmitService.c: 223: BRGCON2bits.SEG2PHTS = 1;
  2994  000E2A  8E71               	bsf	3953,7,c	;volatile
  2995                           
  2996                           ;Can_XmitService.c: 225: BRGCON1bits.BRP0 = 0;
  2997  000E2C  9070               	bcf	3952,0,c	;volatile
  2998                           
  2999                           ;Can_XmitService.c: 226: BRGCON1bits.BRP1 = 1;
  3000  000E2E  8270               	bsf	3952,1,c	;volatile
  3001                           
  3002                           ;Can_XmitService.c: 227: BRGCON1bits.BRP2 = 1;
  3003  000E30  8470               	bsf	3952,2,c	;volatile
  3004                           
  3005                           ;Can_XmitService.c: 228: BRGCON1bits.BRP3 = 0;
  3006  000E32  9670               	bcf	3952,3,c	;volatile
  3007                           
  3008                           ;Can_XmitService.c: 230: BRGCON2bits.PRSEG0 = 0;
  3009  000E34  9071               	bcf	3953,0,c	;volatile
  3010                           
  3011                           ;Can_XmitService.c: 231: BRGCON2bits.PRSEG1 = 0;
  3012  000E36  9271               	bcf	3953,1,c	;volatile
  3013                           
  3014                           ;Can_XmitService.c: 232: BRGCON2bits.PRSEG2 = 0;
  3015  000E38  9471               	bcf	3953,2,c	;volatile
  3016                           
  3017                           ;Can_XmitService.c: 234: BRGCON2bits.SEG1PH0 = 0;
  3018  000E3A  9671               	bcf	3953,3,c	;volatile
  3019                           
  3020                           ;Can_XmitService.c: 235: BRGCON2bits.SEG1PH1 = 0;
  3021  000E3C  9871               	bcf	3953,4,c	;volatile
  3022                           
  3023                           ;Can_XmitService.c: 236: BRGCON2bits.SEG1PH2 = 0;
  3024  000E3E  9A71               	bcf	3953,5,c	;volatile
  3025                           
  3026                           ;Can_XmitService.c: 238: BRGCON3bits.SEG2PH0 = 1;
  3027  000E40  8072               	bsf	3954,0,c	;volatile
  3028                           
  3029                           ;Can_XmitService.c: 239: BRGCON3bits.SEG2PH1 = 0;
  3030  000E42  9272               	bcf	3954,1,c	;volatile
  3031                           
  3032                           ;Can_XmitService.c: 240: BRGCON3bits.SEG2PH2 = 0;
  3033  000E44  9472               	bcf	3954,2,c	;volatile
  3034                           
  3035                           ;Can_XmitService.c: 242: BRGCON1bits.SJW0 = 0;
  3036  000E46  9C70               	bcf	3952,6,c	;volatile
  3037                           
  3038                           ;Can_XmitService.c: 246: RXB0CONbits.RXB0DBEN = 0;
  3039  000E48  9460               	bcf	3936,2,c	;volatile
  3040                           
  3041                           ;Can_XmitService.c: 247: RXB0CONbits.RXM0 = 0;
  3042  000E4A  9A60               	bcf	3936,5,c	;volatile
  3043                           
  3044                           ;Can_XmitService.c: 248: RXB0CONbits.RXM1 = 0;
  3045  000E4C  9C60               	bcf	3936,6,c	;volatile
  3046                           
  3047                           ;Can_XmitService.c: 249: RXF0SIDH = 0x00;
  3048  000E4E  0E00               	movlw	0
  3049  000E50  010F               	movlb	15	; () banked
  3050  000E52  6F00               	movwf	0,b	;volatile
  3051                           
  3052                           ;Can_XmitService.c: 250: RXF0SIDL = 0x08;
  3053  000E54  0E08               	movlw	8
  3054  000E56  010F               	movlb	15	; () banked
  3055  000E58  6F01               	movwf	1,b	;volatile
  3056                           
  3057                           ;Can_XmitService.c: 251: RXF0EIDH = 0x00;
  3058  000E5A  0E00               	movlw	0
  3059  000E5C  010F               	movlb	15	; () banked
  3060  000E5E  6F02               	movwf	2,b	;volatile
  3061                           
  3062                           ;Can_XmitService.c: 252: RXF0EIDL = 0x01;
  3063  000E60  0E01               	movlw	1
  3064  000E62  010F               	movlb	15	; () banked
  3065  000E64  6F03               	movwf	3,b	;volatile
  3066                           
  3067                           ;Can_XmitService.c: 254: RXM0SIDH = 0x00;
  3068  000E66  0E00               	movlw	0
  3069  000E68  010F               	movlb	15	; () banked
  3070  000E6A  6F18               	movwf	24,b	;volatile
  3071                           
  3072                           ;Can_XmitService.c: 255: RXM0SIDL = 0x00;
  3073  000E6C  0E00               	movlw	0
  3074  000E6E  010F               	movlb	15	; () banked
  3075  000E70  6F19               	movwf	25,b	;volatile
  3076                           
  3077                           ;Can_XmitService.c: 256: RXM0EIDH = 0x00;
  3078  000E72  0E00               	movlw	0
  3079  000E74  010F               	movlb	15	; () banked
  3080  000E76  6F1A               	movwf	26,b	;volatile
  3081                           
  3082                           ;Can_XmitService.c: 257: RXM0EIDL = 0x01;
  3083  000E78  0E01               	movlw	1
  3084  000E7A  010F               	movlb	15	; () banked
  3085  000E7C  6F1B               	movwf	27,b	;volatile
  3086                           
  3087                           ;Can_XmitService.c: 261: ECANCON = 0x00;
  3088  000E7E  0E00               	movlw	0
  3089  000E80  6E77               	movwf	3959,c	;volatile
  3090                           
  3091                           ;Can_XmitService.c: 262: CANCON = 0b00010000;
  3092  000E82  0E10               	movlw	16
  3093  000E84  6E6F               	movwf	3951,c	;volatile
  3094  000E86                     l529:
  3095  000E86  BE6E               	btfsc	3950,7,c	;volatile
  3096  000E88  D7FE               	goto	l529
  3097                           
  3098                           ;Can_XmitService.c: 266: RXB0IE = 1;
  3099  000E8A  80A3               	bsf	4003,0,c	;volatile
  3100                           
  3101                           ;Can_XmitService.c: 267: ERRIE = 1;
  3102  000E8C  8AA3               	bsf	4003,5,c	;volatile
  3103                           
  3104                           ;Can_XmitService.c: 268: IRXIE = 1;
  3105  000E8E  8EA3               	bsf	4003,7,c	;volatile
  3106                           
  3107                           ;Can_XmitService.c: 272: RXB0IF = 0;
  3108  000E90  90A4               	bcf	4004,0,c	;volatile
  3109                           
  3110                           ;Can_XmitService.c: 273: ERRIF = 0;
  3111  000E92  9AA4               	bcf	4004,5,c	;volatile
  3112                           
  3113                           ;Can_XmitService.c: 274: IRXIF = 0;
  3114  000E94  9EA4               	bcf	4004,7,c	;volatile
  3115                           
  3116                           ;Can_XmitService.c: 275: TXB0IE = 1;
  3117  000E96  84A3               	bsf	4003,2,c	;volatile
  3118                           
  3119                           ;Can_XmitService.c: 276: TXB0IF = 0;
  3120  000E98  94A4               	bcf	4004,2,c	;volatile
  3121                           
  3122                           ;Can_XmitService.c: 277: TXB0CONbits.TXREQ = 0;
  3123  000E9A  010F               	movlb	15	; () banked
  3124  000E9C  9740               	bcf	64,3,b	;volatile
  3125                           
  3126                           ;Can_XmitService.c: 278: RXB0CONbits.RXFUL = 0;
  3127  000E9E  9E60               	bcf	3936,7,c	;volatile
  3128                           
  3129                           ; BSR set to: 15
  3130  000EA0  0012               	return		;funcret
  3131  000EA2                     __end_of_InitCanHardware:
  3132                           	opt stack 0
  3133                           tosu	equ	0xFFF
  3134                           tosh	equ	0xFFE
  3135                           tosl	equ	0xFFD
  3136                           pclath	equ	0xFFA
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           indf2	equ	0xFDF
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _ES_PostAll *****************
  3153 ;; Defined at:
  3154 ;;		line 318 in file "ES_Framework.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  i               1   28[BANK0 ] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      unsigned char 
  3161 ;; Registers used:
  3162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       3       0       0
  3169 ;;      Locals:         0       1       0       0
  3170 ;;      Temps:          0       2       0       0
  3171 ;;      Totals:         0       6       0       0
  3172 ;;Total ram usage:        6 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    8
  3175 ;; This function calls:
  3176 ;;		_ES_EnQueueFIFO
  3177 ;; This function is called by:
  3178 ;;		_RunButtonDebounceSM
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text17
  3183  000F9E                     __ptext17:
  3184                           	opt stack 0
  3185  000F9E                     _ES_PostAll:
  3186                           	opt stack 20
  3187                           
  3188                           ;ES_Framework.c: 320: uint8_t i;
  3189                           ;ES_Framework.c: 322: for ( i=0; i< (sizeof(EventQueues)/sizeof(EventQueues[0])); i++) {
  3190                           
  3191                           ; BSR set to: 15
  3192                           ;incstack = 0
  3193  000F9E  0E00               	movlw	0
  3194  000FA0  0100               	movlb	0	; () banked
  3195  000FA2  6FD8               	movwf	ES_PostAll@i& (0+255),b
  3196  000FA4                     l2372:
  3197                           
  3198                           ; BSR set to: 0
  3199  000FA4  0E02               	movlw	2
  3200  000FA6  0100               	movlb	0	; () banked
  3201  000FA8  65D8               	cpfsgt	ES_PostAll@i& (0+255),b
  3202  000FAA  D001               	goto	l2376
  3203  000FAC  0012               	return	
  3204  000FAE                     l2376:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;ES_Framework.c: 323: if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != 1 ){
  3208  000FAE  0100               	movlb	0	; () banked
  3209  000FB0  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3210  000FB2  0D03               	mullw	3
  3211  000FB4  0E5C               	movlw	low _EventQueues
  3212  000FB6  24F3               	addwf	prodl,w,c
  3213  000FB8  6EF6               	movwf	tblptrl,c
  3214  000FBA  0E03               	movlw	high _EventQueues
  3215  000FBC  20F4               	addwfc	prodh,w,c
  3216  000FBE  6EF7               	movwf	tblptrh,c
  3217  000FC0                     	if	0	;There are less than 3 active tblptr bytes
  3218  000FC0                     	endif
  3219  000FC0  0009               	tblrd		*+
  3220  000FC2  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  3221  000FC6  000A               	tblrd		*-
  3222  000FC8  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3223  000FCC  C0D3  F0CA         	movff	ES_PostAll@ThisEvent,ES_EnQueueFIFO@Event2Add
  3224  000FD0  C0D4  F0CB         	movff	ES_PostAll@ThisEvent+1,ES_EnQueueFIFO@Event2Add+1
  3225  000FD4  C0D5  F0CC         	movff	ES_PostAll@ThisEvent+2,ES_EnQueueFIFO@Event2Add+2
  3226  000FD8  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3227  000FDC  06E8               	decf	wreg,f,c
  3228  000FDE  A4D8               	btfss	status,2,c
  3229  000FE0  0012               	return	
  3230                           
  3231                           ;ES_Framework.c: 326: Ready |= BitNum2SetMask[i];
  3232                           
  3233                           ;ES_Framework.c: 325: }else{
  3234                           
  3235                           ;ES_Framework.c: 324: break;
  3236  000FE2  0100               	movlb	0	; () banked
  3237  000FE4  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3238  000FE6  0D02               	mullw	2
  3239  000FE8  0E01               	movlw	low _BitNum2SetMask
  3240  000FEA  24F3               	addwf	prodl,w,c
  3241  000FEC  6EF6               	movwf	tblptrl,c
  3242  000FEE  0E03               	movlw	high _BitNum2SetMask
  3243  000FF0  20F4               	addwfc	prodh,w,c
  3244  000FF2  6EF7               	movwf	tblptrh,c
  3245  000FF4                     	if	0	;There are less than 3 active tblptr bytes
  3246  000FF4                     	endif
  3247  000FF4  0009               	tblrd		*+
  3248  000FF6  CFF5 F0D6          	movff	tablat,??_ES_PostAll
  3249  000FFA  0009               	tblrd		*+
  3250  000FFC  CFF5 F0D7          	movff	tablat,??_ES_PostAll+1
  3251  001000  0100               	movlb	0	; () banked
  3252  001002  51D6               	movf	??_ES_PostAll& (0+255),w,b
  3253  001004  0100               	movlb	0	; () banked
  3254  001006  1389               	iorwf	_Ready& (0+255),f,b
  3255  001008  0100               	movlb	0	; () banked
  3256  00100A  51D7               	movf	(??_ES_PostAll+1)& (0+255),w,b
  3257  00100C  0100               	movlb	0	; () banked
  3258  00100E  138A               	iorwf	(_Ready+1)& (0+255),f,b
  3259                           
  3260                           ; BSR set to: 0
  3261  001010  0100               	movlb	0	; () banked
  3262  001012  2BD8               	incf	ES_PostAll@i& (0+255),f,b
  3263  001014  D7C7               	goto	l2372
  3264  001016                     __end_of_ES_PostAll:
  3265                           	opt stack 0
  3266                           tosu	equ	0xFFF
  3267                           tosh	equ	0xFFE
  3268                           tosl	equ	0xFFD
  3269                           pclath	equ	0xFFA
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _InitAnalogHW *****************
  3286 ;; Defined at:
  3287 ;;		line 95 in file "Analog_Service.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3301 ;;      Params:         0       0       0       0
  3302 ;;      Locals:         0       0       0       0
  3303 ;;      Temps:          0       0       0       0
  3304 ;;      Totals:         0       0       0       0
  3305 ;;Total ram usage:        0 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    6
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_RunAnalogService
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text18
  3316  001450                     __ptext18:
  3317                           	opt stack 0
  3318  001450                     _InitAnalogHW:
  3319                           	opt stack 22
  3320                           
  3321                           ;Analog_Service.c: 97: PORTA = 0x00;
  3322                           
  3323                           ;incstack = 0
  3324  001450  0E00               	movlw	0
  3325  001452  6E80               	movwf	3968,c	;volatile
  3326                           
  3327                           ;Analog_Service.c: 98: LATA = 0x00;
  3328  001454  0E00               	movlw	0
  3329  001456  6E89               	movwf	3977,c	;volatile
  3330                           
  3331                           ;Analog_Service.c: 99: TRISAbits.TRISA0 = 1;
  3332  001458  8092               	bsf	3986,0,c	;volatile
  3333                           
  3334                           ;Analog_Service.c: 100: TRISAbits.TRISA1 = 1;
  3335  00145A  8292               	bsf	3986,1,c	;volatile
  3336                           
  3337                           ;Analog_Service.c: 102: ADCON1bits.VCFG1 = 0;
  3338  00145C  9AC1               	bcf	4033,5,c	;volatile
  3339                           
  3340                           ;Analog_Service.c: 103: ADCON1bits.VCFG0 = 0;
  3341  00145E  98C1               	bcf	4033,4,c	;volatile
  3342                           
  3343                           ;Analog_Service.c: 105: ADCON2bits.ADFM = 1;
  3344  001460  8EC0               	bsf	4032,7,c	;volatile
  3345                           
  3346                           ;Analog_Service.c: 106: ADCON2bits.ACQT = 0b100;
  3347  001462  50C0               	movf	4032,w,c	;volatile
  3348  001464  0BC7               	andlw	-57
  3349  001466  0920               	iorlw	32
  3350  001468  6EC0               	movwf	4032,c	;volatile
  3351                           
  3352                           ;Analog_Service.c: 107: ADCON2bits.ADCS = 0b001;
  3353  00146A  50C0               	movf	4032,w,c	;volatile
  3354  00146C  0BF8               	andlw	-8
  3355  00146E  0901               	iorlw	1
  3356  001470  6EC0               	movwf	4032,c	;volatile
  3357                           
  3358                           ;Analog_Service.c: 109: ADCON0bits.ADON = 1;
  3359  001472  80C2               	bsf	4034,0,c	;volatile
  3360                           
  3361                           ;Analog_Service.c: 110: ADIF = 0;
  3362  001474  9C9E               	bcf	3998,6,c	;volatile
  3363                           
  3364                           ;Analog_Service.c: 111: ADIE = 1;
  3365  001476  8C9D               	bsf	3997,6,c	;volatile
  3366  001478  0012               	return		;funcret
  3367  00147A                     __end_of_InitAnalogHW:
  3368                           	opt stack 0
  3369                           tosu	equ	0xFFF
  3370                           tosh	equ	0xFFE
  3371                           tosl	equ	0xFFD
  3372                           pclath	equ	0xFFA
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _ES_DeQueue *****************
  3389 ;; Defined at:
  3390 ;;		line 164 in file "ES_Queue.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3393 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3394 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  3395 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  3398 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3399 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  3400 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      unsigned char 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3410 ;;      Params:         0       4       0       0
  3411 ;;      Locals:         0       4       0       0
  3412 ;;      Temps:          0       2       0       0
  3413 ;;      Totals:         0      10       0       0
  3414 ;;Total ram usage:       10 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    7
  3417 ;; This function calls:
  3418 ;;		___lbmod
  3419 ;;		___wmul
  3420 ;; This function is called by:
  3421 ;;		_ES_Run
  3422 ;;		_ES_RecallEvents
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text19
  3427  0003C6                     __ptext19:
  3428                           	opt stack 0
  3429  0003C6                     _ES_DeQueue:
  3430                           	opt stack 22
  3431                           
  3432                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  3433                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  3434                           ;ES_Queue.c: 168: uint8_t NumLeft;
  3435                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  3436                           
  3437                           ;incstack = 0
  3438  0003C6  C0C8  F0D0         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  3439  0003CA  C0C9  F0D1         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  3440                           
  3441                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  3442  0003CE  0100               	movlb	0	; () banked
  3443  0003D0  EE20 F002          	lfsr	2,2
  3444  0003D4  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3445  0003D6  26D9               	addwf	fsr2l,f,c
  3446  0003D8  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3447  0003DA  22DA               	addwfc	fsr2h,f,c
  3448  0003DC  50DF               	movf	indf2,w,c
  3449  0003DE  B4D8               	btfsc	status,2,c
  3450  0003E0  D06F               	goto	l2634
  3451                           
  3452                           ; BSR set to: 0
  3453                           
  3454                           ;ES_Queue.c: 172: {
  3455                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3456  0003E2  CFF2 F0CE          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  3457  0003E6  9EF2               	bcf	intcon,7,c	;volatile
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3461                           
  3462                           ; BSR set to: 0
  3463  0003E8  0100               	movlb	0	; () banked
  3464  0003EA  EE20 F001          	lfsr	2,1
  3465  0003EE  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3466  0003F0  26D9               	addwf	fsr2l,f,c
  3467  0003F2  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3468  0003F4  22DA               	addwfc	fsr2h,f,c
  3469  0003F6  50DF               	movf	indf2,w,c
  3470  0003F8  0100               	movlb	0	; () banked
  3471  0003FA  6FCC               	movwf	??_ES_DeQueue& (0+255),b
  3472  0003FC  0E01               	movlw	1
  3473  0003FE  0100               	movlb	0	; () banked
  3474  000400  25CC               	addwf	??_ES_DeQueue& (0+255),w,b
  3475  000402  0100               	movlb	0	; () banked
  3476  000404  6FC2               	movwf	___wmul@multiplier& (0+255),b
  3477  000406  0100               	movlb	0	; () banked
  3478  000408  6BC3               	clrf	(___wmul@multiplier+1)& (0+255),b
  3479  00040A  0E00               	movlw	0
  3480  00040C  23C3               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  3481  00040E  0E00               	movlw	0
  3482  000410  0100               	movlb	0	; () banked
  3483  000412  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3484  000414  0E03               	movlw	3
  3485  000416  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  3486  000418  ECAC  F009         	call	___wmul	;wreg free
  3487  00041C  0100               	movlb	0	; () banked
  3488  00041E  51C2               	movf	?___wmul& (0+255),w,b
  3489  000420  0100               	movlb	0	; () banked
  3490  000422  25C8               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  3491  000424  6ED9               	movwf	fsr2l,c
  3492  000426  0100               	movlb	0	; () banked
  3493  000428  51C3               	movf	(?___wmul+1)& (0+255),w,b
  3494  00042A  0100               	movlb	0	; () banked
  3495  00042C  21C9               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  3496  00042E  6EDA               	movwf	fsr2h,c
  3497  000430  C0CA  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  3498  000434  C0CB  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  3499  000438  CFDE FFE6          	movff	postinc2,postinc1
  3500  00043C  CFDE FFE6          	movff	postinc2,postinc1
  3501  000440  CFDE FFE6          	movff	postinc2,postinc1
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  3505  000444  0100               	movlb	0	; () banked
  3506  000446  EE20 F001          	lfsr	2,1
  3507  00044A  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3508  00044C  26D9               	addwf	fsr2l,f,c
  3509  00044E  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3510  000450  22DA               	addwfc	fsr2h,f,c
  3511  000452  2ADF               	incf	indf2,f,c
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3515  000454  C0D0  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  3516  000458  C0D1  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  3517  00045C  0100               	movlb	0	; () banked
  3518  00045E  EE10 F001          	lfsr	1,1
  3519  000462  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3520  000464  26E1               	addwf	fsr1l,f,c
  3521  000466  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3522  000468  22E2               	addwfc	fsr1h,f,c
  3523  00046A  50DE               	movf	postinc2,w,c
  3524  00046C  5CE6               	subwf	postinc1,w,c
  3525  00046E  A0D8               	btfss	status,0,c
  3526  000470  D019               	goto	l2630
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  3530  000472  0100               	movlb	0	; () banked
  3531  000474  EE20 F001          	lfsr	2,1
  3532  000478  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3533  00047A  26D9               	addwf	fsr2l,f,c
  3534  00047C  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3535  00047E  22DA               	addwfc	fsr2h,f,c
  3536  000480  C0D0  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  3537  000484  C0D1  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  3538  000488  50E7               	movf	indf1,w,c
  3539  00048A  0100               	movlb	0	; () banked
  3540  00048C  6FBC               	movwf	___lbmod@divisor& (0+255),b
  3541  00048E  0100               	movlb	0	; () banked
  3542  000490  EE10 F001          	lfsr	1,1
  3543  000494  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3544  000496  26E1               	addwf	fsr1l,f,c
  3545  000498  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3546  00049A  22E2               	addwfc	fsr1h,f,c
  3547  00049C  50E7               	movf	indf1,w,c
  3548  00049E  EC6C  F009         	call	___lbmod
  3549  0004A2  6EDF               	movwf	indf2,c
  3550  0004A4                     l2630:
  3551                           
  3552                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  3553  0004A4  0100               	movlb	0	; () banked
  3554  0004A6  EE20 F002          	lfsr	2,2
  3555  0004AA  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3556  0004AC  26D9               	addwf	fsr2l,f,c
  3557  0004AE  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3558  0004B0  22DA               	addwfc	fsr2h,f,c
  3559  0004B2  06DF               	decf	indf2,f,c
  3560  0004B4  50DF               	movf	indf2,w,c
  3561  0004B6  0100               	movlb	0	; () banked
  3562  0004B8  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  3566  0004BA  C0CE  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  3567                           
  3568                           ;ES_Queue.c: 183: }else {
  3569  0004BE  D014               	goto	l2640
  3570  0004C0                     l2634:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  3574  0004C0  C0CA  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  3575  0004C4  C0CB  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  3576  0004C8  0E00               	movlw	0
  3577  0004CA  6EDF               	movwf	indf2,c
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  3581  0004CC  0100               	movlb	0	; () banked
  3582  0004CE  EE20 F001          	lfsr	2,1
  3583  0004D2  51CA               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  3584  0004D4  26D9               	addwf	fsr2l,f,c
  3585  0004D6  51CB               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  3586  0004D8  22DA               	addwfc	fsr2h,f,c
  3587  0004DA  0E00               	movlw	0
  3588  0004DC  6EDE               	movwf	postinc2,c
  3589  0004DE  0E00               	movlw	0
  3590  0004E0  6EDD               	movwf	postdec2,c
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;ES_Queue.c: 186: NumLeft = 0;
  3594  0004E2  0E00               	movlw	0
  3595  0004E4  0100               	movlb	0	; () banked
  3596  0004E6  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3597  0004E8                     l2640:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;ES_Queue.c: 187: }
  3601                           ;ES_Queue.c: 188: return NumLeft;
  3602  0004E8  0100               	movlb	0	; () banked
  3603  0004EA  51CF               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  3604  0004EC  0012               	return	
  3605  0004EE                     __end_of_ES_DeQueue:
  3606                           	opt stack 0
  3607                           tosu	equ	0xFFF
  3608                           tosh	equ	0xFFE
  3609                           tosl	equ	0xFFD
  3610                           pclath	equ	0xFFA
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf1	equ	0xFE7
  3621                           postinc1	equ	0xFE6
  3622                           fsr1h	equ	0xFE2
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           postdec2	equ	0xFDD
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function ___lbmod *****************
  3632 ;; Defined at:
  3633 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  dividend        1    wreg     unsigned char 
  3636 ;;  divisor         1    0[BANK0 ] unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  dividend        1    1[BANK0 ] unsigned char 
  3639 ;;  rem             1    3[BANK0 ] unsigned char 
  3640 ;;  counter         1    2[BANK0 ] unsigned char 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      unsigned char 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, status,0
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3650 ;;      Params:         0       1       0       0
  3651 ;;      Locals:         0       3       0       0
  3652 ;;      Temps:          0       0       0       0
  3653 ;;      Totals:         0       4       0       0
  3654 ;;Total ram usage:        4 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    6
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_ES_DeQueue
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text20
  3665  0012D8                     __ptext20:
  3666                           	opt stack 0
  3667  0012D8                     ___lbmod:
  3668                           	opt stack 22
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;incstack = 0
  3672                           ;___lbmod@dividend stored from wreg
  3673  0012D8  0100               	movlb	0	; () banked
  3674  0012DA  6FBD               	movwf	___lbmod@dividend& (0+255),b
  3675  0012DC  0E08               	movlw	8
  3676  0012DE  0100               	movlb	0	; () banked
  3677  0012E0  6FBE               	movwf	___lbmod@counter& (0+255),b
  3678  0012E2  0E00               	movlw	0
  3679  0012E4  0100               	movlb	0	; () banked
  3680  0012E6  6FBF               	movwf	___lbmod@rem& (0+255),b
  3681  0012E8                     l2522:
  3682                           
  3683                           ; BSR set to: 0
  3684  0012E8  90D8               	bcf	status,0,c
  3685  0012EA  0100               	movlb	0	; () banked
  3686  0012EC  35BD               	rlcf	___lbmod@dividend& (0+255),w,b
  3687  0012EE  0100               	movlb	0	; () banked
  3688  0012F0  35BF               	rlcf	___lbmod@rem& (0+255),w,b
  3689  0012F2  0100               	movlb	0	; () banked
  3690  0012F4  6FBF               	movwf	___lbmod@rem& (0+255),b
  3691                           
  3692                           ; BSR set to: 0
  3693  0012F6  0100               	movlb	0	; () banked
  3694  0012F8  90D8               	bcf	status,0,c
  3695  0012FA  37BD               	rlcf	___lbmod@dividend& (0+255),f,b
  3696                           
  3697                           ; BSR set to: 0
  3698  0012FC  0100               	movlb	0	; () banked
  3699  0012FE  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3700  001300  0100               	movlb	0	; () banked
  3701  001302  5DBF               	subwf	___lbmod@rem& (0+255),w,b
  3702  001304  A0D8               	btfss	status,0,c
  3703  001306  D004               	goto	l2530
  3704                           
  3705                           ; BSR set to: 0
  3706  001308  0100               	movlb	0	; () banked
  3707  00130A  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3708  00130C  0100               	movlb	0	; () banked
  3709  00130E  5FBF               	subwf	___lbmod@rem& (0+255),f,b
  3710  001310                     l2530:
  3711                           
  3712                           ; BSR set to: 0
  3713  001310  0100               	movlb	0	; () banked
  3714  001312  2FBE               	decfsz	___lbmod@counter& (0+255),f,b
  3715  001314  D7E9               	goto	l2522
  3716                           
  3717                           ; BSR set to: 0
  3718                           
  3719                           ; BSR set to: 0
  3720  001316  0100               	movlb	0	; () banked
  3721  001318  51BF               	movf	___lbmod@rem& (0+255),w,b
  3722  00131A  0012               	return	
  3723  00131C                     __end_of___lbmod:
  3724                           	opt stack 0
  3725                           tosu	equ	0xFFF
  3726                           tosh	equ	0xFFE
  3727                           tosl	equ	0xFFD
  3728                           pclath	equ	0xFFA
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postinc1	equ	0xFE6
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _ES_CheckUserEvents *****************
  3750 ;; Defined at:
  3751 ;;		line 46 in file "ES_CheckEvents.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  i               1   37[BANK0 ] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      unsigned char 
  3758 ;; Registers used:
  3759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3765 ;;      Params:         0       0       0       0
  3766 ;;      Locals:         0       1       0       0
  3767 ;;      Temps:          0       0       0       0
  3768 ;;      Totals:         0       1       0       0
  3769 ;;Total ram usage:        1 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:   11
  3772 ;; This function calls:
  3773 ;;		_Check4Keystroke
  3774 ;;		_CheckButtonEvents
  3775 ;; This function is called by:
  3776 ;;		_ES_Run
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text21
  3781  00128E                     __ptext21:
  3782                           	opt stack 0
  3783  00128E                     _ES_CheckUserEvents:
  3784                           	opt stack 18
  3785                           
  3786                           ;ES_CheckEvents.c: 48: uint8_t i;
  3787                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;incstack = 0
  3791  00128E  0E00               	movlw	0
  3792  001290  0100               	movlb	0	; () banked
  3793  001292  6FE1               	movwf	ES_CheckUserEvents@i& (0+255),b
  3794  001294                     l2600:
  3795                           
  3796                           ; BSR set to: 0
  3797  001294  0E01               	movlw	1
  3798  001296  0100               	movlb	0	; () banked
  3799  001298  65E1               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  3800  00129A  D001               	goto	l2604
  3801  00129C  0012               	return	
  3802  00129E                     l2604:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  3806  00129E  0100               	movlb	0	; () banked
  3807  0012A0  51E1               	movf	ES_CheckUserEvents@i& (0+255),w,b
  3808  0012A2  0D02               	mullw	2
  3809  0012A4  0E65               	movlw	low _ES_EventList
  3810  0012A6  24F3               	addwf	prodl,w,c
  3811  0012A8  6EF6               	movwf	tblptrl,c
  3812  0012AA  0E03               	movlw	high _ES_EventList
  3813  0012AC  20F4               	addwfc	prodh,w,c
  3814  0012AE  6EF7               	movwf	tblptrh,c
  3815  0012B0                     	if	0	;There are less than 3 active tblptr bytes
  3816  0012B0                     	endif
  3817  0012B0  D801               	call	u1398
  3818  0012B2  D00C               	goto	u1399
  3819  0012B4                     u1398:
  3820  0012B4  0005               	push	
  3821  0012B6  6EFA               	movwf	pclath,c
  3822  0012B8  0009               	tblrd		*+
  3823  0012BA  50F5               	movf	tablat,w,c
  3824  0012BC  6EFD               	movwf	tosl,c
  3825  0012BE  0009               	tblrd		*+
  3826  0012C0  50F5               	movf	tablat,w,c
  3827  0012C2  6EFE               	movwf	tosh,c
  3828  0012C4  50F8               	movf	tblptru,w,c
  3829  0012C6  6EFF               	movwf	tosu,c
  3830  0012C8  50FA               	movf	pclath,w,c
  3831  0012CA  0012               	return		;indir
  3832  0012CC                     u1399:
  3833  0012CC  06E8               	decf	wreg,f,c
  3834  0012CE  B4D8               	btfsc	status,2,c
  3835  0012D0  0012               	return	
  3836                           
  3837                           ;ES_CheckEvents.c: 52: break;
  3838  0012D2  0100               	movlb	0	; () banked
  3839  0012D4  2BE1               	incf	ES_CheckUserEvents@i& (0+255),f,b
  3840  0012D6  D7DE               	goto	l2600
  3841  0012D8                     __end_of_ES_CheckUserEvents:
  3842                           	opt stack 0
  3843                           tosu	equ	0xFFF
  3844                           tosh	equ	0xFFE
  3845                           tosl	equ	0xFFD
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf1	equ	0xFE7
  3857                           postinc1	equ	0xFE6
  3858                           fsr1h	equ	0xFE2
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _Check4Keystroke *****************
  3868 ;; Defined at:
  3869 ;;		line 62 in file "EventCheckers.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      unsigned char 
  3876 ;; Registers used:
  3877 ;;		wreg
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3883 ;;      Params:         0       0       0       0
  3884 ;;      Locals:         0       0       0       0
  3885 ;;      Temps:          0       0       0       0
  3886 ;;      Totals:         0       0       0       0
  3887 ;;Total ram usage:        0 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    6
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_ES_CheckUserEvents
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text22
  3898  001598                     __ptext22:
  3899                           	opt stack 0
  3900  001598                     _Check4Keystroke:
  3901                           	opt stack 22
  3902                           
  3903                           ;EventCheckers.c: 78: return 0;
  3904                           
  3905                           ;incstack = 0
  3906  001598  0E00               	movlw	0
  3907  00159A  0012               	return	
  3908  00159C                     __end_of_Check4Keystroke:
  3909                           	opt stack 0
  3910                           tosu	equ	0xFFF
  3911                           tosh	equ	0xFFE
  3912                           tosl	equ	0xFFD
  3913                           pclath	equ	0xFFA
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           postinc0	equ	0xFEE
  3922                           wreg	equ	0xFE8
  3923                           indf1	equ	0xFE7
  3924                           postinc1	equ	0xFE6
  3925                           fsr1h	equ	0xFE2
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _CheckButtonEvents *****************
  3935 ;; Defined at:
  3936 ;;		line 44 in file "Button.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3941 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3942 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      unsigned char 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3952 ;;      Params:         0       0       0       0
  3953 ;;      Locals:         0       5       0       0
  3954 ;;      Temps:          0       0       0       0
  3955 ;;      Totals:         0       5       0       0
  3956 ;;Total ram usage:        5 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:   10
  3959 ;; This function calls:
  3960 ;;		_GetInputLine
  3961 ;;		_PostButtonDebounceSM
  3962 ;; This function is called by:
  3963 ;;		_ES_CheckUserEvents
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text23
  3968  00116A                     __ptext23:
  3969                           	opt stack 0
  3970  00116A                     _CheckButtonEvents:
  3971                           	opt stack 18
  3972                           
  3973                           ;Button.c: 46: uint8_t CurrentButtonState;
  3974                           ;Button.c: 47: bool ReturnVal = 0;
  3975                           
  3976                           ;incstack = 0
  3977  00116A  0E00               	movlw	0
  3978  00116C  0100               	movlb	0	; () banked
  3979  00116E  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;Button.c: 49: CurrentButtonState = GetInputLine();
  3983  001170  ECC6  F00A         	call	_GetInputLine	;wreg free
  3984  001174  0100               	movlb	0	; () banked
  3985  001176  6FE0               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;Button.c: 51: if (CurrentButtonState != LastButtonState) {
  3989  001178  0100               	movlb	0	; () banked
  3990  00117A  5191               	movf	_LastButtonState& (0+255),w,b
  3991  00117C  0100               	movlb	0	; () banked
  3992  00117E  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3993  001180  B4D8               	btfsc	status,2,c
  3994  001182  D023               	goto	l2364
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;Button.c: 53: ReturnVal = 1;
  3998  001184  0E01               	movlw	1
  3999  001186  0100               	movlb	0	; () banked
  4000  001188  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;Button.c: 54: ES_Event ThisEvent;
  4004                           ;Button.c: 55: ThisEvent.EventParam = CurrentButtonState;
  4005  00118A  C0E0  F0DE         	movff	CheckButtonEvents@CurrentButtonState,CheckButtonEvents@ThisEvent+1
  4006  00118E  0100               	movlb	0	; () banked
  4007  001190  6BDF               	clrf	(CheckButtonEvents@ThisEvent+2)& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;Button.c: 57: if (CurrentButtonState != 0x7F) {
  4011  001192  0E7F               	movlw	127
  4012  001194  0100               	movlb	0	; () banked
  4013  001196  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  4014  001198  B4D8               	btfsc	status,2,c
  4015  00119A  D00C               	goto	l2360
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;Button.c: 59: ThisEvent.EventType = DBButtonDown;
  4019  00119C  0E05               	movlw	5
  4020  00119E  0100               	movlb	0	; () banked
  4021  0011A0  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;Button.c: 60: PostButtonDebounceSM(ThisEvent);
  4025  0011A2  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4026  0011A6  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4027  0011AA  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4028  0011AE  EC8A  F00A         	call	_PostButtonDebounceSM	;wreg free
  4029                           
  4030                           ;Button.c: 62: } else {
  4031  0011B2  D00B               	goto	l2364
  4032  0011B4                     l2360:
  4033                           
  4034                           ;Button.c: 64: ThisEvent.EventType = DBButtonUp;
  4035  0011B4  0E06               	movlw	6
  4036  0011B6  0100               	movlb	0	; () banked
  4037  0011B8  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;Button.c: 65: PostButtonDebounceSM(ThisEvent);
  4041  0011BA  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4042  0011BE  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4043  0011C2  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4044  0011C6  EC8A  F00A         	call	_PostButtonDebounceSM	;wreg free
  4045  0011CA                     l2364:
  4046                           
  4047                           ;Button.c: 66: }
  4048                           ;Button.c: 67: }
  4049                           ;Button.c: 69: LastButtonState = CurrentButtonState;
  4050  0011CA  C0E0  F091         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  4051                           
  4052                           ;Button.c: 71: return ReturnVal;
  4053  0011CE  0100               	movlb	0	; () banked
  4054  0011D0  51DC               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  4055  0011D2  0012               	return	
  4056  0011D4                     __end_of_CheckButtonEvents:
  4057                           	opt stack 0
  4058                           tosu	equ	0xFFF
  4059                           tosh	equ	0xFFE
  4060                           tosl	equ	0xFFD
  4061                           pclath	equ	0xFFA
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           indf1	equ	0xFE7
  4072                           postinc1	equ	0xFE6
  4073                           fsr1h	equ	0xFE2
  4074                           fsr1l	equ	0xFE1
  4075                           indf2	equ	0xFDF
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           fsr2h	equ	0xFDA
  4079                           fsr2l	equ	0xFD9
  4080                           status	equ	0xFD8
  4081                           
  4082 ;; *************** function _ES_Initialize *****************
  4083 ;; Defined at:
  4084 ;;		line 242 in file "ES_Framework.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  NewRate         2   33[BANK0 ] enum E15422
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  i               1   35[BANK0 ] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      enum E15493
  4091 ;; Registers used:
  4092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4098 ;;      Params:         0       2       0       0
  4099 ;;      Locals:         0       1       0       0
  4100 ;;      Temps:          0       0       0       0
  4101 ;;      Totals:         0       3       0       0
  4102 ;;Total ram usage:        3 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:   10
  4105 ;; This function calls:
  4106 ;;		_ES_InitQueue
  4107 ;;		_ES_Timer_Init
  4108 ;;		_InitAnalogService
  4109 ;;		_InitCan_XmitService
  4110 ;;		_InitializeButtonDebounce
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text24
  4117  0006F8                     __ptext24:
  4118                           	opt stack 0
  4119  0006F8                     _ES_Initialize:
  4120                           	opt stack 20
  4121                           
  4122                           ;ES_Framework.c: 243: uint8_t i;
  4123                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;incstack = 0
  4127  0006F8  C0DD  F0BE         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4128  0006FC  C0DE  F0BF         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4129  000700  ECAB  F00A         	call	_ES_Timer_Init	;wreg free
  4130                           
  4131                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4132  000704  0E00               	movlw	0
  4133  000706  0100               	movlb	0	; () banked
  4134  000708  6FDF               	movwf	ES_Initialize@i& (0+255),b
  4135  00070A                     l2790:
  4136                           
  4137                           ; BSR set to: 0
  4138  00070A  0E02               	movlw	2
  4139  00070C  0100               	movlb	0	; () banked
  4140  00070E  65DF               	cpfsgt	ES_Initialize@i& (0+255),b
  4141  000710  D001               	goto	l2794
  4142  000712  D066               	goto	l2814
  4143  000714                     l2794:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4147                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4148  000714  0100               	movlb	0	; () banked
  4149  000716  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4150  000718  0D04               	mullw	4
  4151  00071A  0E50               	movlw	low _ServDescList
  4152  00071C  24F3               	addwf	prodl,w,c
  4153  00071E  6EF6               	movwf	tblptrl,c
  4154  000720  0E03               	movlw	high _ServDescList
  4155  000722  20F4               	addwfc	prodh,w,c
  4156  000724  6EF7               	movwf	tblptrh,c
  4157  000726                     	if	0	;There are less than 3 active tblptr bytes
  4158  000726                     	endif
  4159  000726  0009               	tblrd		*+
  4160  000728  50F5               	movf	tablat,w,c
  4161  00072A  0009               	tblrd		*+
  4162  00072C  10F5               	iorwf	tablat,w,c
  4163  00072E  B4D8               	btfsc	status,2,c
  4164  000730  D013               	goto	l2798
  4165                           
  4166                           ; BSR set to: 0
  4167  000732  0100               	movlb	0	; () banked
  4168  000734  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4169  000736  0D04               	mullw	4
  4170  000738  0E02               	movlw	2
  4171  00073A  26F3               	addwf	prodl,f,c
  4172  00073C  0E00               	movlw	0
  4173  00073E  22F4               	addwfc	prodh,f,c
  4174  000740  0E50               	movlw	low _ServDescList
  4175  000742  24F3               	addwf	prodl,w,c
  4176  000744  6EF6               	movwf	tblptrl,c
  4177  000746  0E03               	movlw	high _ServDescList
  4178  000748  20F4               	addwfc	prodh,w,c
  4179  00074A  6EF7               	movwf	tblptrh,c
  4180  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4181  00074C                     	endif
  4182  00074C  0009               	tblrd		*+
  4183  00074E  50F5               	movf	tablat,w,c
  4184  000750  0009               	tblrd		*+
  4185  000752  10F5               	iorwf	tablat,w,c
  4186  000754  A4D8               	btfss	status,2,c
  4187  000756  D002               	goto	l2802
  4188  000758                     l2798:
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;ES_Framework.c: 249: return FailedPointer;
  4192  000758  0E03               	movlw	3
  4193                           
  4194                           ; BSR set to: 0
  4195  00075A  0012               	return	
  4196  00075C                     l2802:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4200  00075C  0100               	movlb	0	; () banked
  4201  00075E  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4202  000760  0D03               	mullw	3
  4203  000762  0E5C               	movlw	low _EventQueues
  4204  000764  24F3               	addwf	prodl,w,c
  4205  000766  6EF6               	movwf	tblptrl,c
  4206  000768  0E03               	movlw	high _EventQueues
  4207  00076A  20F4               	addwfc	prodh,w,c
  4208  00076C  6EF7               	movwf	tblptrh,c
  4209  00076E                     	if	0	;There are less than 3 active tblptr bytes
  4210  00076E                     	endif
  4211  00076E  0009               	tblrd		*+
  4212  000770  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock
  4213  000774  000A               	tblrd		*-
  4214  000776  CFF5 F0BD          	movff	tablat,ES_InitQueue@pBlock+1
  4215  00077A  0100               	movlb	0	; () banked
  4216  00077C  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4217  00077E  0D03               	mullw	3
  4218  000780  0E02               	movlw	2
  4219  000782  26F3               	addwf	prodl,f,c
  4220  000784  0E00               	movlw	0
  4221  000786  22F4               	addwfc	prodh,f,c
  4222  000788  0E5C               	movlw	low _EventQueues
  4223  00078A  24F3               	addwf	prodl,w,c
  4224  00078C  6EF6               	movwf	tblptrl,c
  4225  00078E  0E03               	movlw	high _EventQueues
  4226  000790  20F4               	addwfc	prodh,w,c
  4227  000792  6EF7               	movwf	tblptrh,c
  4228  000794                     	if	0	;There are less than 3 active tblptr bytes
  4229  000794                     	endif
  4230  000794  0008               	tblrd		*
  4231  000796  CFF5 F0BE          	movff	tablat,ES_InitQueue@BlockSize
  4232  00079A  EC8E  F009         	call	_ES_InitQueue	;wreg free
  4233                           
  4234                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  4235  00079E  0100               	movlb	0	; () banked
  4236  0007A0  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4237  0007A2  0D04               	mullw	4
  4238  0007A4  0E50               	movlw	low _ServDescList
  4239  0007A6  24F3               	addwf	prodl,w,c
  4240  0007A8  6EF6               	movwf	tblptrl,c
  4241  0007AA  0E03               	movlw	high _ServDescList
  4242  0007AC  20F4               	addwfc	prodh,w,c
  4243  0007AE  6EF7               	movwf	tblptrh,c
  4244  0007B0                     	if	0	;There are less than 3 active tblptr bytes
  4245  0007B0                     	endif
  4246  0007B0  D801               	call	u1598
  4247  0007B2  D00E               	goto	u1599
  4248  0007B4                     u1598:
  4249  0007B4  0005               	push	
  4250  0007B6  6EFA               	movwf	pclath,c
  4251  0007B8  0009               	tblrd		*+
  4252  0007BA  50F5               	movf	tablat,w,c
  4253  0007BC  6EFD               	movwf	tosl,c
  4254  0007BE  0009               	tblrd		*+
  4255  0007C0  50F5               	movf	tablat,w,c
  4256  0007C2  6EFE               	movwf	tosh,c
  4257  0007C4  50F8               	movf	tblptru,w,c
  4258  0007C6  6EFF               	movwf	tosu,c
  4259  0007C8  50FA               	movf	pclath,w,c
  4260  0007CA  0100               	movlb	0	; () banked
  4261  0007CC  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4262  0007CE  0012               	return		;indir
  4263  0007D0                     u1599:
  4264  0007D0  06E8               	decf	wreg,f,c
  4265  0007D2  B4D8               	btfsc	status,2,c
  4266  0007D4  D002               	goto	l2810
  4267                           
  4268                           ;ES_Framework.c: 254: return FailedInit;
  4269  0007D6  0E05               	movlw	5
  4270  0007D8  0012               	return	
  4271  0007DA                     l2810:
  4272  0007DA  0100               	movlb	0	; () banked
  4273  0007DC  2BDF               	incf	ES_Initialize@i& (0+255),f,b
  4274  0007DE  D795               	goto	l2790
  4275  0007E0                     l2814:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;ES_Framework.c: 255: }
  4279                           ;ES_Framework.c: 256: return Success;
  4280  0007E0  0E00               	movlw	0
  4281  0007E2  0012               	return	
  4282  0007E4                     __end_of_ES_Initialize:
  4283                           	opt stack 0
  4284                           tosu	equ	0xFFF
  4285                           tosh	equ	0xFFE
  4286                           tosl	equ	0xFFD
  4287                           pclath	equ	0xFFA
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf1	equ	0xFE7
  4298                           postinc1	equ	0xFE6
  4299                           fsr1h	equ	0xFE2
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _InitAnalogService *****************
  4309 ;; Defined at:
  4310 ;;		line 31 in file "Analog_Service.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  Priority        1    wreg     unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  Priority        1   32[BANK0 ] unsigned char 
  4315 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      unsigned char 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4325 ;;      Params:         0       0       0       0
  4326 ;;      Locals:         0       4       0       0
  4327 ;;      Temps:          0       0       0       0
  4328 ;;      Totals:         0       4       0       0
  4329 ;;Total ram usage:        4 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    9
  4332 ;; This function calls:
  4333 ;;		_ES_PostToService
  4334 ;; This function is called by:
  4335 ;;		_ES_Initialize
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text25
  4340  0013C2                     __ptext25:
  4341                           	opt stack 0
  4342  0013C2                     _InitAnalogService:
  4343                           	opt stack 20
  4344                           
  4345                           ;incstack = 0
  4346                           ;InitAnalogService@Priority stored from wreg
  4347  0013C2  0100               	movlb	0	; () banked
  4348  0013C4  6FDC               	movwf	InitAnalogService@Priority& (0+255),b
  4349                           
  4350                           ;Analog_Service.c: 33: ES_Event ThisEvent;
  4351                           ;Analog_Service.c: 34: MyPriority = Priority;
  4352  0013C6  C0DC  F08D         	movff	InitAnalogService@Priority,Analog_Service@MyPriority
  4353                           
  4354                           ;Analog_Service.c: 37: ThisEvent.EventType = ES_INIT;
  4355  0013CA  0E02               	movlw	2
  4356  0013CC  0100               	movlb	0	; () banked
  4357  0013CE  6FD9               	movwf	InitAnalogService@ThisEvent& (0+255),b
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;Analog_Service.c: 38: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4361  0013D0  C0D9  F0D3         	movff	InitAnalogService@ThisEvent,ES_PostToService@TheEvent
  4362  0013D4  C0DA  F0D4         	movff	InitAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  4363  0013D8  C0DB  F0D5         	movff	InitAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  4364  0013DC  0100               	movlb	0	; () banked
  4365  0013DE  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  4366  0013E0  EC0B  F008         	call	_ES_PostToService
  4367  0013E4  06E8               	decf	wreg,f,c
  4368  0013E6  A4D8               	btfss	status,2,c
  4369  0013E8  D002               	goto	l2750
  4370                           
  4371                           ;Analog_Service.c: 39: {
  4372                           ;Analog_Service.c: 40: return 1;
  4373  0013EA  0E01               	movlw	1
  4374                           
  4375                           ;Analog_Service.c: 41: }else
  4376  0013EC  0012               	return	
  4377  0013EE                     l2750:
  4378                           
  4379                           ;Analog_Service.c: 42: {
  4380                           ;Analog_Service.c: 43: return 0;
  4381  0013EE  0E00               	movlw	0
  4382  0013F0  0012               	return	
  4383  0013F2                     __end_of_InitAnalogService:
  4384                           	opt stack 0
  4385                           tosu	equ	0xFFF
  4386                           tosh	equ	0xFFE
  4387                           tosl	equ	0xFFD
  4388                           pclath	equ	0xFFA
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           intcon	equ	0xFF2
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           postinc1	equ	0xFE6
  4400                           fsr1h	equ	0xFE2
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _InitCan_XmitService *****************
  4410 ;; Defined at:
  4411 ;;		line 86 in file "Can_XmitService.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  Priority        1    wreg     unsigned char 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  Priority        1   32[BANK0 ] unsigned char 
  4416 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      unsigned char 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4426 ;;      Params:         0       0       0       0
  4427 ;;      Locals:         0       4       0       0
  4428 ;;      Temps:          0       0       0       0
  4429 ;;      Totals:         0       4       0       0
  4430 ;;Total ram usage:        4 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    9
  4433 ;; This function calls:
  4434 ;;		_ES_PostToService
  4435 ;; This function is called by:
  4436 ;;		_ES_Initialize
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text26
  4441  0013F2                     __ptext26:
  4442                           	opt stack 0
  4443  0013F2                     _InitCan_XmitService:
  4444                           	opt stack 20
  4445                           
  4446                           ;incstack = 0
  4447                           ;InitCan_XmitService@Priority stored from wreg
  4448  0013F2  0100               	movlb	0	; () banked
  4449  0013F4  6FDC               	movwf	InitCan_XmitService@Priority& (0+255),b
  4450                           
  4451                           ;Can_XmitService.c: 88: ES_Event ThisEvent;
  4452                           ;Can_XmitService.c: 90: MyPriority = Priority;
  4453  0013F6  C0DC  F08E         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  4454                           
  4455                           ;Can_XmitService.c: 93: ThisEvent.EventType = ES_INIT;
  4456  0013FA  0E02               	movlw	2
  4457  0013FC  0100               	movlb	0	; () banked
  4458  0013FE  6FD9               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;Can_XmitService.c: 94: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4462  001400  C0D9  F0D3         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  4463  001404  C0DA  F0D4         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  4464  001408  C0DB  F0D5         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  4465  00140C  0100               	movlb	0	; () banked
  4466  00140E  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  4467  001410  EC0B  F008         	call	_ES_PostToService
  4468  001414  06E8               	decf	wreg,f,c
  4469  001416  A4D8               	btfss	status,2,c
  4470  001418  D002               	goto	l2680
  4471                           
  4472                           ;Can_XmitService.c: 95: {
  4473                           ;Can_XmitService.c: 96: return 1;
  4474  00141A  0E01               	movlw	1
  4475                           
  4476                           ;Can_XmitService.c: 97: }else
  4477  00141C  0012               	return	
  4478  00141E                     l2680:
  4479                           
  4480                           ;Can_XmitService.c: 98: {
  4481                           ;Can_XmitService.c: 99: return 0;
  4482  00141E  0E00               	movlw	0
  4483  001420  0012               	return	
  4484  001422                     __end_of_InitCan_XmitService:
  4485                           	opt stack 0
  4486                           tosu	equ	0xFFF
  4487                           tosh	equ	0xFFE
  4488                           tosl	equ	0xFFD
  4489                           pclath	equ	0xFFA
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           indf1	equ	0xFE7
  4500                           postinc1	equ	0xFE6
  4501                           fsr1h	equ	0xFE2
  4502                           fsr1l	equ	0xFE1
  4503                           indf2	equ	0xFDF
  4504                           postinc2	equ	0xFDE
  4505                           postdec2	equ	0xFDD
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function _InitializeButtonDebounce *****************
  4511 ;; Defined at:
  4512 ;;		line 27 in file "Button.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  Priority        1    wreg     unsigned char 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  Priority        1    5[BANK0 ] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      unsigned char 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4526 ;;      Params:         0       0       0       0
  4527 ;;      Locals:         0       1       0       0
  4528 ;;      Temps:          0       0       0       0
  4529 ;;      Totals:         0       1       0       0
  4530 ;;Total ram usage:        1 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    7
  4533 ;; This function calls:
  4534 ;;		_ES_Timer_InitTimer
  4535 ;;		_GetInputLine
  4536 ;;		_InitButtonHW
  4537 ;; This function is called by:
  4538 ;;		_ES_Initialize
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text27
  4543  001422                     __ptext27:
  4544                           	opt stack 0
  4545  001422                     _InitializeButtonDebounce:
  4546                           	opt stack 22
  4547                           
  4548                           ;incstack = 0
  4549                           ;InitializeButtonDebounce@Priority stored from wreg
  4550  001422  0100               	movlb	0	; () banked
  4551  001424  6FC1               	movwf	InitializeButtonDebounce@Priority& (0+255),b
  4552                           
  4553                           ;Button.c: 29: MyPriority = Priority;
  4554  001426  C0C1  F093         	movff	InitializeButtonDebounce@Priority,_MyPriority
  4555                           
  4556                           ;Button.c: 30: InitButtonHW();
  4557  00142A  ECB2  F00A         	call	_InitButtonHW	;wreg free
  4558                           
  4559                           ;Button.c: 33: LastButtonState = GetInputLine();
  4560  00142E  ECC6  F00A         	call	_GetInputLine	;wreg free
  4561  001432  0100               	movlb	0	; () banked
  4562  001434  6F91               	movwf	_LastButtonState& (0+255),b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;Button.c: 35: CurrentState = Debouncing;
  4566  001436  0E00               	movlw	0
  4567  001438  0100               	movlb	0	; () banked
  4568  00143A  6F90               	movwf	_CurrentState& (0+255),b
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;Button.c: 37: ES_Timer_InitTimer(1,2);
  4572  00143C  0E00               	movlw	0
  4573  00143E  0100               	movlb	0	; () banked
  4574  001440  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  4575  001442  0E02               	movlw	2
  4576  001444  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  4577  001446  0E01               	movlw	1
  4578  001448  EC51  F007         	call	_ES_Timer_InitTimer
  4579                           
  4580                           ;Button.c: 39: return 1;
  4581  00144C  0E01               	movlw	1
  4582  00144E  0012               	return	
  4583  001450                     __end_of_InitializeButtonDebounce:
  4584                           	opt stack 0
  4585                           tosu	equ	0xFFF
  4586                           tosh	equ	0xFFE
  4587                           tosl	equ	0xFFD
  4588                           pclath	equ	0xFFA
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           indf1	equ	0xFE7
  4599                           postinc1	equ	0xFE6
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _InitButtonHW *****************
  4610 ;; Defined at:
  4611 ;;		line 134 in file "Button.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4625 ;;      Params:         0       0       0       0
  4626 ;;      Locals:         0       0       0       0
  4627 ;;      Temps:          0       0       0       0
  4628 ;;      Totals:         0       0       0       0
  4629 ;;Total ram usage:        0 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    6
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_InitializeButtonDebounce
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text28
  4640  001564                     __ptext28:
  4641                           	opt stack 0
  4642  001564                     _InitButtonHW:
  4643                           	opt stack 22
  4644                           
  4645                           ;Button.c: 135: PORTC = 0x00;
  4646                           
  4647                           ;incstack = 0
  4648  001564  0E00               	movlw	0
  4649  001566  6E82               	movwf	3970,c	;volatile
  4650                           
  4651                           ;Button.c: 136: LATC = 0x00;
  4652  001568  0E00               	movlw	0
  4653  00156A  6E8B               	movwf	3979,c	;volatile
  4654                           
  4655                           ;Button.c: 137: PORTC = 0xFF;
  4656  00156C  6882               	setf	3970,c	;volatile
  4657  00156E  0012               	return		;funcret
  4658  001570                     __end_of_InitButtonHW:
  4659                           	opt stack 0
  4660                           tosu	equ	0xFFF
  4661                           tosh	equ	0xFFE
  4662                           tosl	equ	0xFFD
  4663                           pclath	equ	0xFFA
  4664                           tblptru	equ	0xFF8
  4665                           tblptrh	equ	0xFF7
  4666                           tblptrl	equ	0xFF6
  4667                           tablat	equ	0xFF5
  4668                           prodh	equ	0xFF4
  4669                           prodl	equ	0xFF3
  4670                           intcon	equ	0xFF2
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           indf1	equ	0xFE7
  4674                           postinc1	equ	0xFE6
  4675                           fsr1h	equ	0xFE2
  4676                           fsr1l	equ	0xFE1
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _GetInputLine *****************
  4685 ;; Defined at:
  4686 ;;		line 129 in file "Button.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      unsigned char 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2, status,0
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4700 ;;      Params:         0       0       0       0
  4701 ;;      Locals:         0       0       0       0
  4702 ;;      Temps:          0       0       0       0
  4703 ;;      Totals:         0       0       0       0
  4704 ;;Total ram usage:        0 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    6
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_InitializeButtonDebounce
  4711 ;;		_CheckButtonEvents
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text29
  4716  00158C                     __ptext29:
  4717                           	opt stack 0
  4718  00158C                     _GetInputLine:
  4719                           	opt stack 21
  4720                           
  4721                           ;Button.c: 131: return PORTC & 0x0F;
  4722                           
  4723                           ;incstack = 0
  4724  00158C  5082               	movf	3970,w,c	;volatile
  4725  00158E  0B0F               	andlw	15
  4726  001590  0012               	return	
  4727  001592                     __end_of_GetInputLine:
  4728                           	opt stack 0
  4729                           tosu	equ	0xFFF
  4730                           tosh	equ	0xFFE
  4731                           tosl	equ	0xFFD
  4732                           pclath	equ	0xFFA
  4733                           tblptru	equ	0xFF8
  4734                           tblptrh	equ	0xFF7
  4735                           tblptrl	equ	0xFF6
  4736                           tablat	equ	0xFF5
  4737                           prodh	equ	0xFF4
  4738                           prodl	equ	0xFF3
  4739                           intcon	equ	0xFF2
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           indf1	equ	0xFE7
  4743                           postinc1	equ	0xFE6
  4744                           fsr1h	equ	0xFE2
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _ES_Timer_InitTimer *****************
  4754 ;; Defined at:
  4755 ;;		line 229 in file "ES_Timers.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  Num             1    wreg     unsigned char 
  4758 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  Num             1    4[BANK0 ] unsigned char 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  1    wreg      enum E15445
  4763 ;; Registers used:
  4764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4770 ;;      Params:         0       2       0       0
  4771 ;;      Locals:         0       1       0       0
  4772 ;;      Temps:          0       2       0       0
  4773 ;;      Totals:         0       5       0       0
  4774 ;;Total ram usage:        5 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    6
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_InitializeButtonDebounce
  4781 ;;		_RunButtonDebounceSM
  4782 ;;		_RunAnalogService
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text30
  4787  000EA2                     __ptext30:
  4788                           	opt stack 0
  4789  000EA2                     _ES_Timer_InitTimer:
  4790                           	opt stack 22
  4791                           
  4792                           ;incstack = 0
  4793                           ;ES_Timer_InitTimer@Num stored from wreg
  4794  000EA2  0100               	movlb	0	; () banked
  4795  000EA4  6FC0               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4796                           
  4797                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4798                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4799                           ;ES_Timers.c: 236: (NewTime == 0) )
  4800  000EA6  0E10               	movlw	16
  4801  000EA8  0100               	movlb	0	; () banked
  4802  000EAA  61C0               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4803  000EAC  0012               	return	
  4804                           
  4805                           ; BSR set to: 0
  4806  000EAE  0100               	movlb	0	; () banked
  4807  000EB0  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4808  000EB2  0D02               	mullw	2
  4809  000EB4  0E21               	movlw	low _Timer2PostFunc
  4810  000EB6  24F3               	addwf	prodl,w,c
  4811  000EB8  6EF6               	movwf	tblptrl,c
  4812  000EBA  0E03               	movlw	high _Timer2PostFunc
  4813  000EBC  20F4               	addwfc	prodh,w,c
  4814  000EBE  6EF7               	movwf	tblptrh,c
  4815  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  4816  000EC0                     	endif
  4817  000EC0  0009               	tblrd		*+
  4818  000EC2  50F5               	movf	tablat,w,c
  4819  000EC4  0009               	tblrd		*+
  4820  000EC6  10F5               	iorwf	tablat,w,c
  4821  000EC8  B4D8               	btfsc	status,2,c
  4822  000ECA  0012               	return	
  4823                           
  4824                           ; BSR set to: 0
  4825  000ECC  0100               	movlb	0	; () banked
  4826  000ECE  51BC               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4827  000ED0  0100               	movlb	0	; () banked
  4828  000ED2  11BD               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4829  000ED4  B4D8               	btfsc	status,2,c
  4830  000ED6  0012               	return	
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4834                           
  4835                           ; BSR set to: 0
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4839                           ;	Return value of _ES_Timer_InitTimer is never used
  4840  000ED8  0100               	movlb	0	; () banked
  4841  000EDA  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4842  000EDC  0D02               	mullw	2
  4843  000EDE  0E60               	movlw	low _TMR_TimerArray
  4844  000EE0  24F3               	addwf	prodl,w,c
  4845  000EE2  6ED9               	movwf	fsr2l,c
  4846  000EE4  0E00               	movlw	high _TMR_TimerArray
  4847  000EE6  20F4               	addwfc	prodh,w,c
  4848  000EE8  6EDA               	movwf	fsr2h,c
  4849  000EEA  C0BC  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4850  000EEE  C0BD  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4854  000EF2  0100               	movlb	0	; () banked
  4855  000EF4  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4856  000EF6  0D02               	mullw	2
  4857  000EF8  0E01               	movlw	low _BitNum2SetMask
  4858  000EFA  24F3               	addwf	prodl,w,c
  4859  000EFC  6EF6               	movwf	tblptrl,c
  4860  000EFE  0E03               	movlw	high _BitNum2SetMask
  4861  000F00  20F4               	addwfc	prodh,w,c
  4862  000F02  6EF7               	movwf	tblptrh,c
  4863  000F04                     	if	0	;There are less than 3 active tblptr bytes
  4864  000F04                     	endif
  4865  000F04  0009               	tblrd		*+
  4866  000F06  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer
  4867  000F0A  0009               	tblrd		*+
  4868  000F0C  CFF5 F0BF          	movff	tablat,??_ES_Timer_InitTimer+1
  4869  000F10  0100               	movlb	0	; () banked
  4870  000F12  51BE               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4871  000F14  0100               	movlb	0	; () banked
  4872  000F16  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4873  000F18  0100               	movlb	0	; () banked
  4874  000F1A  51BF               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4875  000F1C  0100               	movlb	0	; () banked
  4876  000F1E  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4877  000F20  0012               	return	
  4878  000F22                     __end_of_ES_Timer_InitTimer:
  4879                           	opt stack 0
  4880                           tosu	equ	0xFFF
  4881                           tosh	equ	0xFFE
  4882                           tosl	equ	0xFFD
  4883                           pclath	equ	0xFFA
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           indf1	equ	0xFE7
  4894                           postinc1	equ	0xFE6
  4895                           fsr1h	equ	0xFE2
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _ES_PostToService *****************
  4905 ;; Defined at:
  4906 ;;		line 351 in file "ES_Framework.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  WhichService    1    wreg     unsigned char 
  4909 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  WhichService    1   28[BANK0 ] unsigned char 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  1    wreg      unsigned char 
  4914 ;; Registers used:
  4915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4921 ;;      Params:         0       3       0       0
  4922 ;;      Locals:         0       1       0       0
  4923 ;;      Temps:          0       2       0       0
  4924 ;;      Totals:         0       6       0       0
  4925 ;;Total ram usage:        6 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    8
  4928 ;; This function calls:
  4929 ;;		_ES_EnQueueFIFO
  4930 ;; This function is called by:
  4931 ;;		_PostButtonDebounceSM
  4932 ;;		_InitCan_XmitService
  4933 ;;		_InitAnalogService
  4934 ;;		_PostAnalogService
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text31
  4939  001016                     __ptext31:
  4940                           	opt stack 0
  4941  001016                     _ES_PostToService:
  4942                           	opt stack 18
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;incstack = 0
  4946                           ;ES_PostToService@WhichService stored from wreg
  4947  001016  0100               	movlb	0	; () banked
  4948  001018  6FD8               	movwf	ES_PostToService@WhichService& (0+255),b
  4949                           
  4950                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4951                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4952                           ;ES_Framework.c: 354: 1 )){
  4953  00101A  0E03               	movlw	3
  4954  00101C  0100               	movlb	0	; () banked
  4955  00101E  61D8               	cpfslt	ES_PostToService@WhichService& (0+255),b
  4956  001020  D033               	goto	l2226
  4957                           
  4958                           ; BSR set to: 0
  4959  001022  0100               	movlb	0	; () banked
  4960  001024  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4961  001026  0D03               	mullw	3
  4962  001028  0E5C               	movlw	low _EventQueues
  4963  00102A  24F3               	addwf	prodl,w,c
  4964  00102C  6EF6               	movwf	tblptrl,c
  4965  00102E  0E03               	movlw	high _EventQueues
  4966  001030  20F4               	addwfc	prodh,w,c
  4967  001032  6EF7               	movwf	tblptrh,c
  4968  001034                     	if	0	;There are less than 3 active tblptr bytes
  4969  001034                     	endif
  4970  001034  0009               	tblrd		*+
  4971  001036  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  4972  00103A  000A               	tblrd		*-
  4973  00103C  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  4974  001040  C0D3  F0CA         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  4975  001044  C0D4  F0CB         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  4976  001048  C0D5  F0CC         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  4977  00104C  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  4978  001050  06E8               	decf	wreg,f,c
  4979  001052  A4D8               	btfss	status,2,c
  4980  001054  D019               	goto	l2226
  4981                           
  4982                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4983  001056  0100               	movlb	0	; () banked
  4984  001058  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4985  00105A  0D02               	mullw	2
  4986  00105C  0E01               	movlw	low _BitNum2SetMask
  4987  00105E  24F3               	addwf	prodl,w,c
  4988  001060  6EF6               	movwf	tblptrl,c
  4989  001062  0E03               	movlw	high _BitNum2SetMask
  4990  001064  20F4               	addwfc	prodh,w,c
  4991  001066  6EF7               	movwf	tblptrh,c
  4992  001068                     	if	0	;There are less than 3 active tblptr bytes
  4993  001068                     	endif
  4994  001068  0009               	tblrd		*+
  4995  00106A  CFF5 F0D6          	movff	tablat,??_ES_PostToService
  4996  00106E  0009               	tblrd		*+
  4997  001070  CFF5 F0D7          	movff	tablat,??_ES_PostToService+1
  4998  001074  0100               	movlb	0	; () banked
  4999  001076  51D6               	movf	??_ES_PostToService& (0+255),w,b
  5000  001078  0100               	movlb	0	; () banked
  5001  00107A  1389               	iorwf	_Ready& (0+255),f,b
  5002  00107C  0100               	movlb	0	; () banked
  5003  00107E  51D7               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5004  001080  0100               	movlb	0	; () banked
  5005  001082  138A               	iorwf	(_Ready+1)& (0+255),f,b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;ES_Framework.c: 356: return 1;
  5009  001084  0E01               	movlw	1
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;ES_Framework.c: 357: } else
  5013                           
  5014                           ; BSR set to: 0
  5015  001086  0012               	return	
  5016  001088                     l2226:
  5017                           
  5018                           ;ES_Framework.c: 358: return 0;
  5019  001088  0E00               	movlw	0
  5020  00108A  0012               	return	
  5021  00108C                     __end_of_ES_PostToService:
  5022                           	opt stack 0
  5023                           tosu	equ	0xFFF
  5024                           tosh	equ	0xFFE
  5025                           tosl	equ	0xFFD
  5026                           pclath	equ	0xFFA
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           indf1	equ	0xFE7
  5037                           postinc1	equ	0xFE6
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _ES_EnQueueFIFO *****************
  5048 ;; Defined at:
  5049 ;;		line 85 in file "ES_Queue.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5052 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5053 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5056 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5057 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      unsigned char 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5067 ;;      Params:         0       5       0       0
  5068 ;;      Locals:         0       3       0       0
  5069 ;;      Temps:          0       3       0       0
  5070 ;;      Totals:         0      11       0       0
  5071 ;;Total ram usage:       11 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    7
  5074 ;; This function calls:
  5075 ;;		___awmod
  5076 ;;		___wmul
  5077 ;; This function is called by:
  5078 ;;		_ES_PostAll
  5079 ;;		_ES_PostToService
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text32
  5084  0007E4                     __ptext32:
  5085                           	opt stack 0
  5086  0007E4                     _ES_EnQueueFIFO:
  5087                           	opt stack 18
  5088                           
  5089                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5090                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5091                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5092                           
  5093                           ;incstack = 0
  5094  0007E4  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5095  0007E8  C0C9  F0D2         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5096                           
  5097                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5098  0007EC  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5099  0007F0  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5100  0007F4  0100               	movlb	0	; () banked
  5101  0007F6  EE10 F002          	lfsr	1,2
  5102  0007FA  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5103  0007FC  26E1               	addwf	fsr1l,f,c
  5104  0007FE  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5105  000800  22E2               	addwfc	fsr1h,f,c
  5106  000802  50DE               	movf	postinc2,w,c
  5107  000804  5CE6               	subwf	postinc1,w,c
  5108  000806  B0D8               	btfsc	status,0,c
  5109  000808  D05C               	goto	l2210
  5110                           
  5111                           ; BSR set to: 0
  5112                           
  5113                           ;ES_Queue.c: 92: {
  5114                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5115  00080A  CFF2 F0D0          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5116  00080E  9EF2               	bcf	intcon,7,c	;volatile
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5120                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5121                           
  5122                           ; BSR set to: 0
  5123  000810  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5124  000814  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5125  000818  50DF               	movf	indf2,w,c
  5126  00081A  0100               	movlb	0	; () banked
  5127  00081C  6FCD               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5128  00081E  0100               	movlb	0	; () banked
  5129  000820  51CD               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5130  000822  0100               	movlb	0	; () banked
  5131  000824  6FBE               	movwf	___awmod@divisor& (0+255),b
  5132  000826  6BBF               	clrf	(___awmod@divisor+1)& (0+255),b
  5133  000828  0100               	movlb	0	; () banked
  5134  00082A  EE20 F002          	lfsr	2,2
  5135  00082E  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5136  000830  26D9               	addwf	fsr2l,f,c
  5137  000832  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5138  000834  22DA               	addwfc	fsr2h,f,c
  5139  000836  50DF               	movf	indf2,w,c
  5140  000838  0100               	movlb	0	; () banked
  5141  00083A  6FCE               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5142  00083C  0100               	movlb	0	; () banked
  5143  00083E  EE20 F001          	lfsr	2,1
  5144  000842  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5145  000844  26D9               	addwf	fsr2l,f,c
  5146  000846  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5147  000848  22DA               	addwfc	fsr2h,f,c
  5148  00084A  50DF               	movf	indf2,w,c
  5149  00084C  0100               	movlb	0	; () banked
  5150  00084E  6FCF               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5151  000850  0100               	movlb	0	; () banked
  5152  000852  51CF               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5153  000854  0100               	movlb	0	; () banked
  5154  000856  25CE               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5155  000858  0100               	movlb	0	; () banked
  5156  00085A  6FBC               	movwf	___awmod@dividend& (0+255),b
  5157  00085C  0100               	movlb	0	; () banked
  5158  00085E  6BBD               	clrf	(___awmod@dividend+1)& (0+255),b
  5159  000860  0100               	movlb	0	; () banked
  5160  000862  37BD               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5161  000864  ECE3  F005         	call	___awmod	;wreg free
  5162  000868  0E01               	movlw	1
  5163  00086A  0100               	movlb	0	; () banked
  5164  00086C  25BC               	addwf	?___awmod& (0+255),w,b
  5165  00086E  0100               	movlb	0	; () banked
  5166  000870  6FC2               	movwf	___wmul@multiplier& (0+255),b
  5167  000872  0E00               	movlw	0
  5168  000874  0100               	movlb	0	; () banked
  5169  000876  21BD               	addwfc	(?___awmod+1)& (0+255),w,b
  5170  000878  0100               	movlb	0	; () banked
  5171  00087A  6FC3               	movwf	(___wmul@multiplier+1)& (0+255),b
  5172  00087C  0E00               	movlw	0
  5173  00087E  0100               	movlb	0	; () banked
  5174  000880  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5175  000882  0E03               	movlw	3
  5176  000884  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  5177  000886  ECAC  F009         	call	___wmul	;wreg free
  5178  00088A  0100               	movlb	0	; () banked
  5179  00088C  51C2               	movf	?___wmul& (0+255),w,b
  5180  00088E  0100               	movlb	0	; () banked
  5181  000890  25C8               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5182  000892  6ED9               	movwf	fsr2l,c
  5183  000894  0100               	movlb	0	; () banked
  5184  000896  51C3               	movf	(?___wmul+1)& (0+255),w,b
  5185  000898  0100               	movlb	0	; () banked
  5186  00089A  21C9               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5187  00089C  6EDA               	movwf	fsr2h,c
  5188  00089E  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5189  0008A2  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5190  0008A6  C0CC  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5194  0008AA  0100               	movlb	0	; () banked
  5195  0008AC  EE20 F002          	lfsr	2,2
  5196  0008B0  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5197  0008B2  26D9               	addwf	fsr2l,f,c
  5198  0008B4  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5199  0008B6  22DA               	addwfc	fsr2h,f,c
  5200  0008B8  2ADF               	incf	indf2,f,c
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5204  0008BA  C0D0  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;ES_Queue.c: 101: return(1);
  5208  0008BE  0E01               	movlw	1
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;ES_Queue.c: 102: }else
  5212                           
  5213                           ; BSR set to: 0
  5214  0008C0  0012               	return	
  5215  0008C2                     l2210:
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;ES_Queue.c: 103: return(0);
  5219  0008C2  0E00               	movlw	0
  5220                           
  5221                           ; BSR set to: 0
  5222  0008C4  0012               	return	
  5223  0008C6                     __end_of_ES_EnQueueFIFO:
  5224                           	opt stack 0
  5225                           tosu	equ	0xFFF
  5226                           tosh	equ	0xFFE
  5227                           tosl	equ	0xFFD
  5228                           pclath	equ	0xFFA
  5229                           tblptru	equ	0xFF8
  5230                           tblptrh	equ	0xFF7
  5231                           tblptrl	equ	0xFF6
  5232                           tablat	equ	0xFF5
  5233                           prodh	equ	0xFF4
  5234                           prodl	equ	0xFF3
  5235                           intcon	equ	0xFF2
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           indf1	equ	0xFE7
  5239                           postinc1	equ	0xFE6
  5240                           fsr1h	equ	0xFE2
  5241                           fsr1l	equ	0xFE1
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function ___wmul *****************
  5250 ;; Defined at:
  5251 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5254 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  product         2   10[BANK0 ] unsigned int 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2    6[BANK0 ] unsigned int 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, prodl, prodh
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5266 ;;      Params:         0       4       0       0
  5267 ;;      Locals:         0       2       0       0
  5268 ;;      Temps:          0       0       0       0
  5269 ;;      Totals:         0       6       0       0
  5270 ;;Total ram usage:        6 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    6
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_ES_EnQueueFIFO
  5277 ;;		_ES_DeQueue
  5278 ;;		_ES_EnQueueLIFO
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text33
  5283  001358                     __ptext33:
  5284                           	opt stack 0
  5285  001358                     ___wmul:
  5286                           	opt stack 18
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;incstack = 0
  5290  001358  0100               	movlb	0	; () banked
  5291  00135A  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5292  00135C  0100               	movlb	0	; () banked
  5293  00135E  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5294  001360  CFF3 F0C6          	movff	prodl,___wmul@product
  5295  001364  CFF4 F0C7          	movff	prodh,___wmul@product+1
  5296  001368  0100               	movlb	0	; () banked
  5297  00136A  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5298  00136C  0100               	movlb	0	; () banked
  5299  00136E  03C5               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5300  001370  50F3               	movf	prodl,w,c
  5301  001372  0100               	movlb	0	; () banked
  5302  001374  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5303  001376  0100               	movlb	0	; () banked
  5304  001378  51C3               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5305  00137A  0100               	movlb	0	; () banked
  5306  00137C  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5307  00137E  50F3               	movf	prodl,w,c
  5308  001380  0100               	movlb	0	; () banked
  5309  001382  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5310                           
  5311                           ; BSR set to: 0
  5312  001384  C0C6  F0C2         	movff	___wmul@product,?___wmul
  5313  001388  C0C7  F0C3         	movff	___wmul@product+1,?___wmul+1
  5314  00138C  0012               	return	
  5315  00138E                     __end_of___wmul:
  5316                           	opt stack 0
  5317                           tosu	equ	0xFFF
  5318                           tosh	equ	0xFFE
  5319                           tosl	equ	0xFFD
  5320                           pclath	equ	0xFFA
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           indf1	equ	0xFE7
  5331                           postinc1	equ	0xFE6
  5332                           fsr1h	equ	0xFE2
  5333                           fsr1l	equ	0xFE1
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function ___awmod *****************
  5342 ;; Defined at:
  5343 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  dividend        2    0[BANK0 ] int 
  5346 ;;  divisor         2    2[BANK0 ] int 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  sign            1    5[BANK0 ] unsigned char 
  5349 ;;  counter         1    4[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  2    0[BANK0 ] int 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2, status,0
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5359 ;;      Params:         0       4       0       0
  5360 ;;      Locals:         0       2       0       0
  5361 ;;      Temps:          0       0       0       0
  5362 ;;      Totals:         0       6       0       0
  5363 ;;Total ram usage:        6 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    6
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		_ES_EnQueueFIFO
  5370 ;;		i2_ES_EnQueueFIFO
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text34
  5375  000BC6                     __ptext34:
  5376                           	opt stack 0
  5377  000BC6                     ___awmod:
  5378                           	opt stack 18
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;incstack = 0
  5382  000BC6  0E00               	movlw	0
  5383  000BC8  0100               	movlb	0	; () banked
  5384  000BCA  6FC1               	movwf	___awmod@sign& (0+255),b
  5385                           
  5386                           ; BSR set to: 0
  5387  000BCC  0100               	movlb	0	; () banked
  5388  000BCE  AFBD               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5389  000BD0  D008               	goto	l2166
  5390                           
  5391                           ; BSR set to: 0
  5392  000BD2  0100               	movlb	0	; () banked
  5393  000BD4  6DBC               	negf	___awmod@dividend& (0+255),b
  5394  000BD6  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5395  000BD8  B0D8               	btfsc	status,0,c
  5396  000BDA  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5397                           
  5398                           ; BSR set to: 0
  5399  000BDC  0E01               	movlw	1
  5400  000BDE  0100               	movlb	0	; () banked
  5401  000BE0  6FC1               	movwf	___awmod@sign& (0+255),b
  5402  000BE2                     l2166:
  5403                           
  5404                           ; BSR set to: 0
  5405  000BE2  0100               	movlb	0	; () banked
  5406  000BE4  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5407  000BE6  D005               	goto	l2170
  5408                           
  5409                           ; BSR set to: 0
  5410  000BE8  0100               	movlb	0	; () banked
  5411  000BEA  6DBE               	negf	___awmod@divisor& (0+255),b
  5412  000BEC  1FBF               	comf	(___awmod@divisor+1)& (0+255),f,b
  5413  000BEE  B0D8               	btfsc	status,0,c
  5414  000BF0  2BBF               	incf	(___awmod@divisor+1)& (0+255),f,b
  5415  000BF2                     l2170:
  5416                           
  5417                           ; BSR set to: 0
  5418  000BF2  0100               	movlb	0	; () banked
  5419  000BF4  51BE               	movf	___awmod@divisor& (0+255),w,b
  5420  000BF6  0100               	movlb	0	; () banked
  5421  000BF8  11BF               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5422  000BFA  B4D8               	btfsc	status,2,c
  5423  000BFC  D026               	goto	l2186
  5424                           
  5425                           ; BSR set to: 0
  5426  000BFE  0E01               	movlw	1
  5427  000C00  0100               	movlb	0	; () banked
  5428  000C02  6FC0               	movwf	___awmod@counter& (0+255),b
  5429  000C04  D006               	goto	l2176
  5430  000C06                     l2174:
  5431                           
  5432                           ; BSR set to: 0
  5433  000C06  0100               	movlb	0	; () banked
  5434  000C08  90D8               	bcf	status,0,c
  5435  000C0A  37BE               	rlcf	___awmod@divisor& (0+255),f,b
  5436  000C0C  37BF               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5437  000C0E  0100               	movlb	0	; () banked
  5438  000C10  2BC0               	incf	___awmod@counter& (0+255),f,b
  5439  000C12                     l2176:
  5440                           
  5441                           ; BSR set to: 0
  5442  000C12  0100               	movlb	0	; () banked
  5443  000C14  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5444  000C16  D7F7               	goto	l2174
  5445  000C18                     l2178:
  5446                           
  5447                           ; BSR set to: 0
  5448  000C18  0100               	movlb	0	; () banked
  5449  000C1A  51BE               	movf	___awmod@divisor& (0+255),w,b
  5450  000C1C  0100               	movlb	0	; () banked
  5451  000C1E  5DBC               	subwf	___awmod@dividend& (0+255),w,b
  5452  000C20  0100               	movlb	0	; () banked
  5453  000C22  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5454  000C24  0100               	movlb	0	; () banked
  5455  000C26  59BD               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5456  000C28  A0D8               	btfss	status,0,c
  5457  000C2A  D008               	goto	l2182
  5458                           
  5459                           ; BSR set to: 0
  5460  000C2C  0100               	movlb	0	; () banked
  5461  000C2E  51BE               	movf	___awmod@divisor& (0+255),w,b
  5462  000C30  0100               	movlb	0	; () banked
  5463  000C32  5FBC               	subwf	___awmod@dividend& (0+255),f,b
  5464  000C34  0100               	movlb	0	; () banked
  5465  000C36  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5466  000C38  0100               	movlb	0	; () banked
  5467  000C3A  5BBD               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5468  000C3C                     l2182:
  5469                           
  5470                           ; BSR set to: 0
  5471  000C3C  0100               	movlb	0	; () banked
  5472  000C3E  90D8               	bcf	status,0,c
  5473  000C40  33BF               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5474  000C42  33BE               	rrcf	___awmod@divisor& (0+255),f,b
  5475                           
  5476                           ; BSR set to: 0
  5477  000C44  0100               	movlb	0	; () banked
  5478  000C46  2FC0               	decfsz	___awmod@counter& (0+255),f,b
  5479  000C48  D7E7               	goto	l2178
  5480  000C4A                     l2186:
  5481                           
  5482                           ; BSR set to: 0
  5483  000C4A  0100               	movlb	0	; () banked
  5484  000C4C  51C1               	movf	___awmod@sign& (0+255),w,b
  5485  000C4E  0100               	movlb	0	; () banked
  5486  000C50  B4D8               	btfsc	status,2,c
  5487  000C52  D005               	goto	l2190
  5488                           
  5489                           ; BSR set to: 0
  5490  000C54  0100               	movlb	0	; () banked
  5491  000C56  6DBC               	negf	___awmod@dividend& (0+255),b
  5492  000C58  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5493  000C5A  B0D8               	btfsc	status,0,c
  5494  000C5C  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5495  000C5E                     l2190:
  5496                           
  5497                           ; BSR set to: 0
  5498  000C5E  C0BC  F0BC         	movff	___awmod@dividend,?___awmod
  5499  000C62  C0BD  F0BD         	movff	___awmod@dividend+1,?___awmod+1
  5500  000C66  0012               	return	
  5501  000C68                     __end_of___awmod:
  5502                           	opt stack 0
  5503                           tosu	equ	0xFFF
  5504                           tosh	equ	0xFFE
  5505                           tosl	equ	0xFFD
  5506                           pclath	equ	0xFFA
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           intcon	equ	0xFF2
  5514                           postinc0	equ	0xFEE
  5515                           wreg	equ	0xFE8
  5516                           indf1	equ	0xFE7
  5517                           postinc1	equ	0xFE6
  5518                           fsr1h	equ	0xFE2
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           fsr2h	equ	0xFDA
  5524                           fsr2l	equ	0xFD9
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function _ES_Timer_Init *****************
  5528 ;; Defined at:
  5529 ;;		line 130 in file "ES_Timers.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  Rate            2    2[BANK0 ] enum E15422
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5543 ;;      Params:         0       2       0       0
  5544 ;;      Locals:         0       0       0       0
  5545 ;;      Temps:          0       0       0       0
  5546 ;;      Totals:         0       2       0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    7
  5550 ;; This function calls:
  5551 ;;		__HW_Timer_Init
  5552 ;; This function is called by:
  5553 ;;		_ES_Initialize
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text35
  5558  001556                     __ptext35:
  5559                           	opt stack 0
  5560  001556                     _ES_Timer_Init:
  5561                           	opt stack 22
  5562                           
  5563                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;incstack = 0
  5567  001556  C0BE  F0BC         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5568  00155A  C0BF  F0BD         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5569  00155E  EC63  F00A         	call	__HW_Timer_Init	;wreg free
  5570  001562  0012               	return		;funcret
  5571  001564                     __end_of_ES_Timer_Init:
  5572                           	opt stack 0
  5573                           tosu	equ	0xFFF
  5574                           tosh	equ	0xFFE
  5575                           tosl	equ	0xFFD
  5576                           pclath	equ	0xFFA
  5577                           tblptru	equ	0xFF8
  5578                           tblptrh	equ	0xFF7
  5579                           tblptrl	equ	0xFF6
  5580                           tablat	equ	0xFF5
  5581                           prodh	equ	0xFF4
  5582                           prodl	equ	0xFF3
  5583                           intcon	equ	0xFF2
  5584                           postinc0	equ	0xFEE
  5585                           wreg	equ	0xFE8
  5586                           indf1	equ	0xFE7
  5587                           postinc1	equ	0xFE6
  5588                           fsr1h	equ	0xFE2
  5589                           fsr1l	equ	0xFE1
  5590                           indf2	equ	0xFDF
  5591                           postinc2	equ	0xFDE
  5592                           postdec2	equ	0xFDD
  5593                           fsr2h	equ	0xFDA
  5594                           fsr2l	equ	0xFD9
  5595                           status	equ	0xFD8
  5596                           
  5597 ;; *************** function __HW_Timer_Init *****************
  5598 ;; Defined at:
  5599 ;;		line 72 in file "ES_Port.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;  Rate            2    0[BANK0 ] enum E15412
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      void 
  5606 ;; Registers used:
  5607 ;;		wreg, status,2
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5613 ;;      Params:         0       2       0       0
  5614 ;;      Locals:         0       0       0       0
  5615 ;;      Temps:          0       0       0       0
  5616 ;;      Totals:         0       2       0       0
  5617 ;;Total ram usage:        2 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    6
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_ES_Timer_Init
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text36
  5628  0014C6                     __ptext36:
  5629                           	opt stack 0
  5630  0014C6                     __HW_Timer_Init:
  5631                           	opt stack 22
  5632                           
  5633                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  5634                           
  5635                           ;incstack = 0
  5636  0014C6  0E04               	movlw	4
  5637  0014C8  6E9D               	movwf	3997,c	;volatile
  5638                           
  5639                           ;ES_Port.c: 85: INTCON = 0b01000000;
  5640  0014CA  0E40               	movlw	64
  5641  0014CC  6EF2               	movwf	intcon,c	;volatile
  5642                           
  5643                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  5644  0014CE  0E0A               	movlw	10
  5645  0014D0  6EBD               	movwf	4029,c	;volatile
  5646                           
  5647                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  5648  0014D2  0E01               	movlw	1
  5649  0014D4  6EBE               	movwf	4030,c	;volatile
  5650                           
  5651                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  5652  0014D6  0E00               	movlw	0
  5653  0014D8  6EBF               	movwf	4031,c	;volatile
  5654                           
  5655                           ;ES_Port.c: 107: T1CON = 0b00100001;
  5656  0014DA  0E21               	movlw	33
  5657  0014DC  6ECD               	movwf	4045,c	;volatile
  5658                           
  5659                           ;ES_Port.c: 108: PEIE = 1;
  5660  0014DE  8CF2               	bsf	intcon,6,c	;volatile
  5661                           
  5662                           ;ES_Port.c: 109: {GIE = 1;};
  5663  0014E0  8EF2               	bsf	intcon,7,c	;volatile
  5664  0014E2  0012               	return		;funcret
  5665  0014E4                     __end_of__HW_Timer_Init:
  5666                           	opt stack 0
  5667                           tosu	equ	0xFFF
  5668                           tosh	equ	0xFFE
  5669                           tosl	equ	0xFFD
  5670                           pclath	equ	0xFFA
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           prodh	equ	0xFF4
  5676                           prodl	equ	0xFF3
  5677                           intcon	equ	0xFF2
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           indf1	equ	0xFE7
  5681                           postinc1	equ	0xFE6
  5682                           fsr1h	equ	0xFE2
  5683                           fsr1l	equ	0xFE1
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _ES_InitQueue *****************
  5692 ;; Defined at:
  5693 ;;		line 58 in file "ES_Queue.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5696 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5697 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5700 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      unsigned char 
  5703 ;; Registers used:
  5704 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5710 ;;      Params:         0       3       0       0
  5711 ;;      Locals:         0       2       0       0
  5712 ;;      Temps:          0       0       0       0
  5713 ;;      Totals:         0       5       0       0
  5714 ;;Total ram usage:        5 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    6
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_ES_Initialize
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text37
  5725  00131C                     __ptext37:
  5726                           	opt stack 0
  5727  00131C                     _ES_InitQueue:
  5728                           	opt stack 23
  5729                           
  5730                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5731                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5732                           
  5733                           ;incstack = 0
  5734  00131C  C0BC  F0BF         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5735  001320  C0BD  F0C0         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5736                           
  5737                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5738  001324  0100               	movlb	0	; () banked
  5739  001326  05BE               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5740  001328  C0BF  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5741  00132C  C0C0  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5742  001330  6EDF               	movwf	indf2,c
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5746  001332  0100               	movlb	0	; () banked
  5747  001334  EE20 F001          	lfsr	2,1
  5748  001338  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5749  00133A  26D9               	addwf	fsr2l,f,c
  5750  00133C  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5751  00133E  22DA               	addwfc	fsr2h,f,c
  5752  001340  0E00               	movlw	0
  5753  001342  6EDF               	movwf	indf2,c
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5757  001344  0100               	movlb	0	; () banked
  5758  001346  EE20 F002          	lfsr	2,2
  5759  00134A  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5760  00134C  26D9               	addwf	fsr2l,f,c
  5761  00134E  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5762  001350  22DA               	addwfc	fsr2h,f,c
  5763  001352  0E00               	movlw	0
  5764  001354  6EDF               	movwf	indf2,c
  5765  001356  0012               	return	
  5766  001358                     __end_of_ES_InitQueue:
  5767                           	opt stack 0
  5768                           tosu	equ	0xFFF
  5769                           tosh	equ	0xFFE
  5770                           tosl	equ	0xFFD
  5771                           pclath	equ	0xFFA
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           prodh	equ	0xFF4
  5777                           prodl	equ	0xFF3
  5778                           intcon	equ	0xFF2
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           indf1	equ	0xFE7
  5782                           postinc1	equ	0xFE6
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _ISR *****************
  5793 ;; Defined at:
  5794 ;;		line 112 in file "ES_Port.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5808 ;;      Params:         0       0       0       0
  5809 ;;      Locals:         0       0       0       0
  5810 ;;      Temps:         16       0       0       0
  5811 ;;      Totals:        16       0       0       0
  5812 ;;Total ram usage:       16 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    5
  5815 ;; This function calls:
  5816 ;;		_AnalogISR
  5817 ;;		_BusErrorResponse
  5818 ;;		_CanErrorResponse
  5819 ;;		_CanRCVResponse
  5820 ;;		_CanXmitResponse
  5821 ;; This function is called by:
  5822 ;;		Interrupt level 2
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	intcode
  5827  000008                     __pintcode:
  5828                           	opt stack 0
  5829  000008                     _ISR:
  5830                           	opt stack 18
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;incstack = 0
  5834  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5835  00000A  CFFA F028          	movff	pclath,??_ISR+2
  5836  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  5837  000012  EDD0  F004         	call	int_func,f	;refresh shadow registers
  5838                           tosu	equ	0xFFF
  5839                           tosh	equ	0xFFE
  5840                           tosl	equ	0xFFD
  5841                           pclatu	equ	0xFFB
  5842                           pclath	equ	0xFFA
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           indf1	equ	0xFE7
  5853                           postinc1	equ	0xFE6
  5854                           fsr1h	equ	0xFE2
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863                           	psect	intcode_body
  5864  0009A0                     __pintcode_body:
  5865                           	opt stack 18
  5866  0009A0                     int_func:
  5867                           	opt stack 18
  5868  0009A0  0006               	pop		; remove dummy address from shadow register refresh
  5869  0009A2  CFE9 F02A          	movff	fsr0l,??_ISR+4
  5870  0009A6  CFEA F02B          	movff	fsr0h,??_ISR+5
  5871  0009AA  CFE1 F02C          	movff	fsr1l,??_ISR+6
  5872  0009AE  CFE2 F02D          	movff	fsr1h,??_ISR+7
  5873  0009B2  CFD9 F02E          	movff	fsr2l,??_ISR+8
  5874  0009B6  CFDA F02F          	movff	fsr2h,??_ISR+9
  5875  0009BA  CFF3 F030          	movff	prodl,??_ISR+10
  5876  0009BE  CFF4 F031          	movff	prodh,??_ISR+11
  5877  0009C2  CFF6 F032          	movff	tblptrl,??_ISR+12
  5878  0009C6  CFF7 F033          	movff	tblptrh,??_ISR+13
  5879  0009CA  CFF8 F034          	movff	tblptru,??_ISR+14
  5880  0009CE  CFF5 F035          	movff	tablat,??_ISR+15
  5881                           
  5882                           ;ES_Port.c: 115: static unsigned int LastTime;
  5883                           ;ES_Port.c: 116: static unsigned int NextTime;
  5884                           ;ES_Port.c: 118: if (CCP1IF == 1)
  5885  0009D2  A49E               	btfss	3998,2,c	;volatile
  5886  0009D4  D015               	goto	i2l2936
  5887                           
  5888                           ;ES_Port.c: 119: {
  5889                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5890  0009D6  50BF               	movf	4031,w,c	;volatile
  5891  0009D8  6E26               	movwf	??_ISR& (0+255),c
  5892  0009DA  50BE               	movf	4030,w,c	;volatile
  5893  0009DC  6E36               	movwf	ISR@LastTime,c
  5894  0009DE  C026  F037         	movff	??_ISR,ISR@LastTime+1
  5895                           
  5896                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  5897  0009E2  0E20               	movlw	32
  5898  0009E4  2436               	addwf	ISR@LastTime,w,c
  5899  0009E6  6E38               	movwf	ISR@NextTime,c
  5900  0009E8  0E4E               	movlw	78
  5901  0009EA  2037               	addwfc	ISR@LastTime+1,w,c
  5902  0009EC  6E39               	movwf	ISR@NextTime+1,c
  5903                           
  5904                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  5905  0009EE  5039               	movf	ISR@NextTime+1,w,c
  5906  0009F0  6EBF               	movwf	4031,c	;volatile
  5907                           
  5908                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5909  0009F2  C038  FFBE         	movff	ISR@NextTime,4030	;volatile
  5910                           
  5911                           ;ES_Port.c: 124: CCP1IF = 0;
  5912  0009F6  949E               	bcf	3998,2,c	;volatile
  5913                           
  5914                           ;ES_Port.c: 125: TickCount++;
  5915  0009F8  0100               	movlb	0	; () banked
  5916  0009FA  2B94               	incf	_TickCount& (0+255),f,b	;volatile
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;ES_Port.c: 126: SysTickCounter++;
  5920  0009FC  4A3A               	infsnz	_SysTickCounter,f,c	;volatile
  5921  0009FE  2A3B               	incf	_SysTickCounter+1,f,c	;volatile
  5922  000A00                     i2l2936:
  5923                           
  5924                           ;ES_Port.c: 127: }
  5925                           ;ES_Port.c: 129: if (TXB0IF == 1)
  5926  000A00  A4A4               	btfss	4004,2,c	;volatile
  5927  000A02  D003               	goto	i2l2942
  5928                           
  5929                           ;ES_Port.c: 130: {
  5930                           ;ES_Port.c: 131: TXB0IF = 0;
  5931  000A04  94A4               	bcf	4004,2,c	;volatile
  5932                           
  5933                           ;ES_Port.c: 132: CanXmitResponse();
  5934  000A06  ECC9  F00A         	call	_CanXmitResponse	;wreg free
  5935  000A0A                     i2l2942:
  5936                           
  5937                           ;ES_Port.c: 133: }
  5938                           ;ES_Port.c: 134: if (RXB0IF == 1) {
  5939  000A0A  A0A4               	btfss	4004,0,c	;volatile
  5940  000A0C  D003               	goto	i2l2948
  5941                           
  5942                           ;ES_Port.c: 135: RXB0IF = 0;
  5943  000A0E  90A4               	bcf	4004,0,c	;volatile
  5944                           
  5945                           ;ES_Port.c: 136: CanRCVResponse();
  5946  000A10  ECC2  F00A         	call	_CanRCVResponse	;wreg free
  5947  000A14                     i2l2948:
  5948                           
  5949                           ;ES_Port.c: 137: }
  5950                           ;ES_Port.c: 138: if (ERRIF == 1) {
  5951  000A14  AAA4               	btfss	4004,5,c	;volatile
  5952  000A16  D003               	goto	i2l2954
  5953                           
  5954                           ;ES_Port.c: 139: ERRIF = 0;
  5955  000A18  9AA4               	bcf	4004,5,c	;volatile
  5956                           
  5957                           ;ES_Port.c: 140: CanErrorResponse();
  5958  000A1A  ECCF  F00A         	call	_CanErrorResponse	;wreg free
  5959  000A1E                     i2l2954:
  5960                           
  5961                           ;ES_Port.c: 141: }
  5962                           ;ES_Port.c: 142: if (IRXIF == 1) {
  5963  000A1E  AEA4               	btfss	4004,7,c	;volatile
  5964  000A20  D003               	goto	i2l2960
  5965                           
  5966                           ;ES_Port.c: 143: IRXIF = 0;
  5967  000A22  9EA4               	bcf	4004,7,c	;volatile
  5968                           
  5969                           ;ES_Port.c: 144: BusErrorResponse();
  5970  000A24  ECD0  F00A         	call	_BusErrorResponse	;wreg free
  5971  000A28                     i2l2960:
  5972                           
  5973                           ;ES_Port.c: 145: }
  5974                           ;ES_Port.c: 146: if (ADIF == 1) {
  5975  000A28  AC9E               	btfss	3998,6,c	;volatile
  5976  000A2A  D003               	goto	i2l229
  5977                           
  5978                           ;ES_Port.c: 147: ADIF = 0;
  5979  000A2C  9C9E               	bcf	3998,6,c	;volatile
  5980                           
  5981                           ;ES_Port.c: 148: AnalogISR();
  5982  000A2E  ECCB  F006         	call	_AnalogISR	;wreg free
  5983  000A32                     i2l229:
  5984  000A32  C035  FFF5         	movff	??_ISR+15,tablat
  5985  000A36  C034  FFF8         	movff	??_ISR+14,tblptru
  5986  000A3A  C033  FFF7         	movff	??_ISR+13,tblptrh
  5987  000A3E  C032  FFF6         	movff	??_ISR+12,tblptrl
  5988  000A42  C031  FFF4         	movff	??_ISR+11,prodh
  5989  000A46  C030  FFF3         	movff	??_ISR+10,prodl
  5990  000A4A  C02F  FFDA         	movff	??_ISR+9,fsr2h
  5991  000A4E  C02E  FFD9         	movff	??_ISR+8,fsr2l
  5992  000A52  C02D  FFE2         	movff	??_ISR+7,fsr1h
  5993  000A56  C02C  FFE1         	movff	??_ISR+6,fsr1l
  5994  000A5A  C02B  FFEA         	movff	??_ISR+5,fsr0h
  5995  000A5E  C02A  FFE9         	movff	??_ISR+4,fsr0l
  5996  000A62  C029  FFFB         	movff	??_ISR+3,pclatu
  5997  000A66  C028  FFFA         	movff	??_ISR+2,pclath
  5998  000A6A  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5999  000A6C  0011               	retfie		f
  6000  000A6E                     __end_of_ISR:
  6001                           	opt stack 0
  6002                           tosu	equ	0xFFF
  6003                           tosh	equ	0xFFE
  6004                           tosl	equ	0xFFD
  6005                           pclatu	equ	0xFFB
  6006                           pclath	equ	0xFFA
  6007                           tblptru	equ	0xFF8
  6008                           tblptrh	equ	0xFF7
  6009                           tblptrl	equ	0xFF6
  6010                           tablat	equ	0xFF5
  6011                           prodh	equ	0xFF4
  6012                           prodl	equ	0xFF3
  6013                           intcon	equ	0xFF2
  6014                           postinc0	equ	0xFEE
  6015                           fsr0h	equ	0xFEA
  6016                           fsr0l	equ	0xFE9
  6017                           wreg	equ	0xFE8
  6018                           indf1	equ	0xFE7
  6019                           postinc1	equ	0xFE6
  6020                           fsr1h	equ	0xFE2
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           postdec2	equ	0xFDD
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function _CanXmitResponse *****************
  6030 ;; Defined at:
  6031 ;;		line 188 in file "Can_XmitService.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;		None
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		None
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6045 ;;      Params:         0       0       0       0
  6046 ;;      Locals:         0       0       0       0
  6047 ;;      Temps:          0       0       0       0
  6048 ;;      Totals:         0       0       0       0
  6049 ;;Total ram usage:        0 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		_ISR
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text39
  6059  001592                     __ptext39:
  6060                           	opt stack 0
  6061  001592                     _CanXmitResponse:
  6062                           	opt stack 22
  6063                           
  6064                           ;Can_XmitService.c: 190: TXB0CONbits.TXREQ = 0;
  6065                           
  6066                           ;incstack = 0
  6067  001592  010F               	movlb	15	; () banked
  6068  001594  9740               	bcf	64,3,b	;volatile
  6069                           
  6070                           ; BSR set to: 15
  6071  001596  0012               	return		;funcret
  6072  001598                     __end_of_CanXmitResponse:
  6073                           	opt stack 0
  6074                           tosu	equ	0xFFF
  6075                           tosh	equ	0xFFE
  6076                           tosl	equ	0xFFD
  6077                           pclatu	equ	0xFFB
  6078                           pclath	equ	0xFFA
  6079                           tblptru	equ	0xFF8
  6080                           tblptrh	equ	0xFF7
  6081                           tblptrl	equ	0xFF6
  6082                           tablat	equ	0xFF5
  6083                           prodh	equ	0xFF4
  6084                           prodl	equ	0xFF3
  6085                           intcon	equ	0xFF2
  6086                           postinc0	equ	0xFEE
  6087                           fsr0h	equ	0xFEA
  6088                           fsr0l	equ	0xFE9
  6089                           wreg	equ	0xFE8
  6090                           indf1	equ	0xFE7
  6091                           postinc1	equ	0xFE6
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _CanRCVResponse *****************
  6102 ;; Defined at:
  6103 ;;		line 193 in file "Can_XmitService.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		None
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6117 ;;      Params:         0       0       0       0
  6118 ;;      Locals:         0       0       0       0
  6119 ;;      Temps:          0       0       0       0
  6120 ;;      Totals:         0       0       0       0
  6121 ;;Total ram usage:        0 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_ISR
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text40
  6131  001584                     __ptext40:
  6132                           	opt stack 0
  6133  001584                     _CanRCVResponse:
  6134                           	opt stack 22
  6135                           
  6136                           ;Can_XmitService.c: 195: if (RXB0CONbits.RXFUL == 1) {
  6137                           
  6138                           ; BSR set to: 15
  6139                           ;incstack = 0
  6140  001584  AE60               	btfss	3936,7,c	;volatile
  6141  001586  0012               	return	
  6142                           
  6143                           ;Can_XmitService.c: 196: RXB0CONbits.RXFUL = 0;
  6144  001588  9E60               	bcf	3936,7,c	;volatile
  6145  00158A  0012               	return	
  6146  00158C                     __end_of_CanRCVResponse:
  6147                           	opt stack 0
  6148                           tosu	equ	0xFFF
  6149                           tosh	equ	0xFFE
  6150                           tosl	equ	0xFFD
  6151                           pclatu	equ	0xFFB
  6152                           pclath	equ	0xFFA
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           postinc0	equ	0xFEE
  6161                           fsr0h	equ	0xFEA
  6162                           fsr0l	equ	0xFE9
  6163                           wreg	equ	0xFE8
  6164                           indf1	equ	0xFE7
  6165                           postinc1	equ	0xFE6
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function _CanErrorResponse *****************
  6176 ;; Defined at:
  6177 ;;		line 200 in file "Can_XmitService.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		None
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6191 ;;      Params:         0       0       0       0
  6192 ;;      Locals:         0       0       0       0
  6193 ;;      Temps:          0       0       0       0
  6194 ;;      Totals:         0       0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_ISR
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text41
  6205  00159E                     __ptext41:
  6206                           	opt stack 0
  6207  00159E                     _CanErrorResponse:
  6208                           	opt stack 22
  6209                           
  6210                           ;incstack = 0
  6211  00159E  0012               	return		;funcret
  6212  0015A0                     __end_of_CanErrorResponse:
  6213                           	opt stack 0
  6214                           tosu	equ	0xFFF
  6215                           tosh	equ	0xFFE
  6216                           tosl	equ	0xFFD
  6217                           pclatu	equ	0xFFB
  6218                           pclath	equ	0xFFA
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           postinc0	equ	0xFEE
  6227                           fsr0h	equ	0xFEA
  6228                           fsr0l	equ	0xFE9
  6229                           wreg	equ	0xFE8
  6230                           indf1	equ	0xFE7
  6231                           postinc1	equ	0xFE6
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           fsr2h	equ	0xFDA
  6238                           fsr2l	equ	0xFD9
  6239                           status	equ	0xFD8
  6240                           
  6241 ;; *************** function _BusErrorResponse *****************
  6242 ;; Defined at:
  6243 ;;		line 205 in file "Can_XmitService.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      void 
  6250 ;; Registers used:
  6251 ;;		None
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6257 ;;      Params:         0       0       0       0
  6258 ;;      Locals:         0       0       0       0
  6259 ;;      Temps:          0       0       0       0
  6260 ;;      Totals:         0       0       0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_ISR
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text42
  6271  0015A0                     __ptext42:
  6272                           	opt stack 0
  6273  0015A0                     _BusErrorResponse:
  6274                           	opt stack 22
  6275                           
  6276                           ;incstack = 0
  6277  0015A0  0012               	return		;funcret
  6278  0015A2                     __end_of_BusErrorResponse:
  6279                           	opt stack 0
  6280                           tosu	equ	0xFFF
  6281                           tosh	equ	0xFFE
  6282                           tosl	equ	0xFFD
  6283                           pclatu	equ	0xFFB
  6284                           pclath	equ	0xFFA
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           postinc0	equ	0xFEE
  6293                           fsr0h	equ	0xFEA
  6294                           fsr0l	equ	0xFE9
  6295                           wreg	equ	0xFE8
  6296                           indf1	equ	0xFE7
  6297                           postinc1	equ	0xFE6
  6298                           fsr1h	equ	0xFE2
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _AnalogISR *****************
  6308 ;; Defined at:
  6309 ;;		line 77 in file "Analog_Service.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;		None
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      void 
  6316 ;; Registers used:
  6317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6323 ;;      Params:         0       0       0       0
  6324 ;;      Locals:         3       0       0       0
  6325 ;;      Temps:          2       0       0       0
  6326 ;;      Totals:         5       0       0       0
  6327 ;;Total ram usage:        5 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    4
  6330 ;; This function calls:
  6331 ;;		_PostCan_XmitService
  6332 ;;		i2_ES_Timer_InitTimer
  6333 ;; This function is called by:
  6334 ;;		_ISR
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text43
  6339  000D96                     __ptext43:
  6340                           	opt stack 0
  6341  000D96                     _AnalogISR:
  6342                           	opt stack 18
  6343                           
  6344                           ;Analog_Service.c: 79: if (!ADCON0bits.DONE) {
  6345                           
  6346                           ;incstack = 0
  6347  000D96  B2C2               	btfsc	4034,1,c	;volatile
  6348  000D98  0012               	return	
  6349                           
  6350                           ;Analog_Service.c: 80: if (ADCON0bits.CHS == 0x00) {
  6351  000D9A  30C2               	rrcf	4034,w,c	;volatile
  6352  000D9C  32E8               	rrcf	wreg,f,c
  6353  000D9E  0B0F               	andlw	15
  6354  000DA0  0900               	iorlw	0
  6355  000DA2  A4D8               	btfss	status,2,c
  6356  000DA4  D013               	goto	i2l2856
  6357                           
  6358                           ;Analog_Service.c: 81: Brightness = (ADRESH<<8)|ADRESL;
  6359  000DA6  50C3               	movf	4035,w,c	;volatile
  6360  000DA8  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6361  000DAC  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6362  000DAE  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6363  000DB2  6A21               	clrf	??_AnalogISR,c
  6364  000DB4  1021               	iorwf	??_AnalogISR,w,c
  6365  000DB6  0100               	movlb	0	; () banked
  6366  000DB8  6F85               	movwf	_Brightness& (0+255),b
  6367  000DBA  5022               	movf	??_AnalogISR+1,w,c
  6368  000DBC  0100               	movlb	0	; () banked
  6369  000DBE  6F86               	movwf	(_Brightness+1)& (0+255),b
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;Analog_Service.c: 82: ADCON0bits.CHS = 0x01;
  6373  000DC0  50C2               	movf	4034,w,c	;volatile
  6374  000DC2  0BC3               	andlw	-61
  6375  000DC4  0904               	iorlw	4
  6376  000DC6  6EC2               	movwf	4034,c	;volatile
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;Analog_Service.c: 83: ADCON0bits.GO = 1;
  6380  000DC8  82C2               	bsf	4034,1,c	;volatile
  6381                           
  6382                           ;Analog_Service.c: 84: } else if (ADCON0bits.CHS == 0x01) {
  6383  000DCA  0012               	return	
  6384  000DCC                     i2l2856:
  6385  000DCC  30C2               	rrcf	4034,w,c	;volatile
  6386  000DCE  32E8               	rrcf	wreg,f,c
  6387  000DD0  0B0F               	andlw	15
  6388  000DD2  06E8               	decf	wreg,f,c
  6389  000DD4  A4D8               	btfss	status,2,c
  6390  000DD6  0012               	return	
  6391                           
  6392                           ;Analog_Service.c: 85: Location = (ADRESH<<8)|ADRESL;
  6393  000DD8  50C3               	movf	4035,w,c	;volatile
  6394  000DDA  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6395  000DDE  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6396  000DE0  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6397  000DE4  6A21               	clrf	??_AnalogISR,c
  6398  000DE6  1021               	iorwf	??_AnalogISR,w,c
  6399  000DE8  0100               	movlb	0	; () banked
  6400  000DEA  6F87               	movwf	_Location& (0+255),b
  6401  000DEC  5022               	movf	??_AnalogISR+1,w,c
  6402  000DEE  0100               	movlb	0	; () banked
  6403  000DF0  6F88               	movwf	(_Location+1)& (0+255),b
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;Analog_Service.c: 86: ADCON0bits.CHS = 0x00;
  6407  000DF2  94C2               	bcf	4034,2,c	;volatile
  6408  000DF4  96C2               	bcf	4034,3,c	;volatile
  6409  000DF6  98C2               	bcf	4034,4,c	;volatile
  6410  000DF8  9AC2               	bcf	4034,5,c	;volatile
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;Analog_Service.c: 87: ES_Event Event2Post;
  6414                           ;Analog_Service.c: 88: Event2Post.EventType = XMIT_EVENT;
  6415  000DFA  0E07               	movlw	7
  6416  000DFC  6E23               	movwf	AnalogISR@Event2Post,c
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;Analog_Service.c: 89: PostCan_XmitService(Event2Post);
  6420  000DFE  C023  F01E         	movff	AnalogISR@Event2Post,PostCan_XmitService@ThisEvent
  6421  000E02  C024  F01F         	movff	AnalogISR@Event2Post+1,PostCan_XmitService@ThisEvent+1
  6422  000E06  C025  F020         	movff	AnalogISR@Event2Post+2,PostCan_XmitService@ThisEvent+2
  6423  000E0A  ECA0  F00A         	call	_PostCan_XmitService	;wreg free
  6424                           
  6425                           ;Analog_Service.c: 90: ES_Timer_InitTimer(0, 5);
  6426  000E0E  0E00               	movlw	0
  6427  000E10  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  6428  000E12  0E05               	movlw	5
  6429  000E14  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  6430  000E16  0E00               	movlw	0
  6431  000E18  EC7E  F008         	call	i2_ES_Timer_InitTimer
  6432  000E1C  0012               	return	
  6433  000E1E                     __end_of_AnalogISR:
  6434                           	opt stack 0
  6435                           tosu	equ	0xFFF
  6436                           tosh	equ	0xFFE
  6437                           tosl	equ	0xFFD
  6438                           pclatu	equ	0xFFB
  6439                           pclath	equ	0xFFA
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           postinc0	equ	0xFEE
  6448                           fsr0h	equ	0xFEA
  6449                           fsr0l	equ	0xFE9
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postinc1	equ	0xFE6
  6453                           fsr1h	equ	0xFE2
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function i2_ES_Timer_InitTimer *****************
  6463 ;; Defined at:
  6464 ;;		line 229 in file "ES_Timers.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  Num             1    wreg     unsigned char 
  6467 ;;  NewTime         2    0[COMRAM] unsigned int 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  Num             1    4[COMRAM] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      enum E15445
  6472 ;; Registers used:
  6473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6479 ;;      Params:         2       0       0       0
  6480 ;;      Locals:         1       0       0       0
  6481 ;;      Temps:          2       0       0       0
  6482 ;;      Totals:         5       0       0       0
  6483 ;;Total ram usage:        5 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_AnalogISR
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text44
  6493  0010FC                     __ptext44:
  6494                           	opt stack 0
  6495  0010FC                     i2_ES_Timer_InitTimer:
  6496                           	opt stack 21
  6497                           
  6498                           ;incstack = 0
  6499                           ;i2ES_Timer_InitTimer@Num stored from wreg
  6500  0010FC  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  6501                           
  6502                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6503                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6504                           ;ES_Timers.c: 236: (NewTime == 0) )
  6505  0010FE  0E10               	movlw	16
  6506  001100  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  6507  001102  0012               	return	
  6508  001104  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6509  001106  0D02               	mullw	2
  6510  001108  0E21               	movlw	low _Timer2PostFunc
  6511  00110A  24F3               	addwf	prodl,w,c
  6512  00110C  6EF6               	movwf	tblptrl,c
  6513  00110E  0E03               	movlw	high _Timer2PostFunc
  6514  001110  20F4               	addwfc	prodh,w,c
  6515  001112  6EF7               	movwf	tblptrh,c
  6516  001114                     	if	0	;There are less than 3 active tblptr bytes
  6517  001114                     	endif
  6518  001114  0009               	tblrd		*+
  6519  001116  50F5               	movf	tablat,w,c
  6520  001118  0009               	tblrd		*+
  6521  00111A  10F5               	iorwf	tablat,w,c
  6522  00111C  B4D8               	btfsc	status,2,c
  6523  00111E  0012               	return	
  6524  001120  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  6525  001122  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  6526  001124  B4D8               	btfsc	status,2,c
  6527  001126  0012               	return	
  6528                           
  6529                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6530                           
  6531                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6532                           ;	Return value of i2_ES_Timer_InitTimer is never used
  6533  001128  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6534  00112A  0D02               	mullw	2
  6535  00112C  0E60               	movlw	low _TMR_TimerArray
  6536  00112E  24F3               	addwf	prodl,w,c
  6537  001130  6ED9               	movwf	fsr2l,c
  6538  001132  0E00               	movlw	high _TMR_TimerArray
  6539  001134  20F4               	addwfc	prodh,w,c
  6540  001136  6EDA               	movwf	fsr2h,c
  6541  001138  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  6542  00113C  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  6543                           
  6544                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6545  001140  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6546  001142  0D02               	mullw	2
  6547  001144  0E01               	movlw	low _BitNum2SetMask
  6548  001146  24F3               	addwf	prodl,w,c
  6549  001148  6EF6               	movwf	tblptrl,c
  6550  00114A  0E03               	movlw	high _BitNum2SetMask
  6551  00114C  20F4               	addwfc	prodh,w,c
  6552  00114E  6EF7               	movwf	tblptrh,c
  6553  001150                     	if	0	;There are less than 3 active tblptr bytes
  6554  001150                     	endif
  6555  001150  0009               	tblrd		*+
  6556  001152  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  6557  001156  0009               	tblrd		*+
  6558  001158  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  6559  00115C  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  6560  00115E  0100               	movlb	0	; () banked
  6561  001160  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6562  001162  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  6563  001164  0100               	movlb	0	; () banked
  6564  001166  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6565  001168  0012               	return	
  6566  00116A                     __end_ofi2_ES_Timer_InitTimer:
  6567                           	opt stack 0
  6568                           tosu	equ	0xFFF
  6569                           tosh	equ	0xFFE
  6570                           tosl	equ	0xFFD
  6571                           pclatu	equ	0xFFB
  6572                           pclath	equ	0xFFA
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           postinc0	equ	0xFEE
  6581                           fsr0h	equ	0xFEA
  6582                           fsr0l	equ	0xFE9
  6583                           wreg	equ	0xFE8
  6584                           indf1	equ	0xFE7
  6585                           postinc1	equ	0xFE6
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           fsr2h	equ	0xFDA
  6592                           fsr2l	equ	0xFD9
  6593                           status	equ	0xFD8
  6594                           
  6595 ;; *************** function _PostCan_XmitService *****************
  6596 ;; Defined at:
  6597 ;;		line 117 in file "Can_XmitService.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      unsigned char 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6611 ;;      Params:         3       0       0       0
  6612 ;;      Locals:         0       0       0       0
  6613 ;;      Temps:          0       0       0       0
  6614 ;;      Totals:         3       0       0       0
  6615 ;;Total ram usage:        3 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		i2_ES_PostToService
  6620 ;; This function is called by:
  6621 ;;		_AnalogISR
  6622 ;;		_PostToList
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text45
  6627  001540                     __ptext45:
  6628                           	opt stack 0
  6629  001540                     _PostCan_XmitService:
  6630                           	opt stack 18
  6631                           
  6632                           ;Can_XmitService.c: 119: return ES_PostToService( MyPriority, ThisEvent);
  6633                           
  6634                           ;incstack = 0
  6635  001540  C01E  F018         	movff	PostCan_XmitService@ThisEvent,i2ES_PostToService@TheEvent
  6636  001544  C01F  F019         	movff	PostCan_XmitService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6637  001548  C020  F01A         	movff	PostCan_XmitService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6638  00154C  0100               	movlb	0	; () banked
  6639  00154E  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  6640  001550  ECEA  F008         	call	i2_ES_PostToService
  6641  001554  0012               	return	
  6642  001556                     __end_of_PostCan_XmitService:
  6643                           	opt stack 0
  6644                           tosu	equ	0xFFF
  6645                           tosh	equ	0xFFE
  6646                           tosl	equ	0xFFD
  6647                           pclatu	equ	0xFFB
  6648                           pclath	equ	0xFFA
  6649                           tblptru	equ	0xFF8
  6650                           tblptrh	equ	0xFF7
  6651                           tblptrl	equ	0xFF6
  6652                           tablat	equ	0xFF5
  6653                           prodh	equ	0xFF4
  6654                           prodl	equ	0xFF3
  6655                           intcon	equ	0xFF2
  6656                           postinc0	equ	0xFEE
  6657                           fsr0h	equ	0xFEA
  6658                           fsr0l	equ	0xFE9
  6659                           wreg	equ	0xFE8
  6660                           indf1	equ	0xFE7
  6661                           postinc1	equ	0xFE6
  6662                           fsr1h	equ	0xFE2
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function i2_ES_PostToService *****************
  6672 ;; Defined at:
  6673 ;;		line 351 in file "ES_Framework.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  WhichService    1    wreg     unsigned char 
  6676 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  WhichService    1   28[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      unsigned char 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6688 ;;      Params:         3       0       0       0
  6689 ;;      Locals:         1       0       0       0
  6690 ;;      Temps:          2       0       0       0
  6691 ;;      Totals:         6       0       0       0
  6692 ;;Total ram usage:        6 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		i2_ES_EnQueueFIFO
  6697 ;; This function is called by:
  6698 ;;		_PostCan_XmitService
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text46
  6703  0011D4                     __ptext46:
  6704                           	opt stack 0
  6705  0011D4                     i2_ES_PostToService:
  6706                           	opt stack 18
  6707                           
  6708                           ;incstack = 0
  6709                           ;i2ES_PostToService@WhichService stored from wreg
  6710  0011D4  6E1D               	movwf	i2ES_PostToService@WhichService,c
  6711                           
  6712                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6713                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6714                           ;ES_Framework.c: 354: 1 )){
  6715  0011D6  0E03               	movlw	3
  6716  0011D8  601D               	cpfslt	i2ES_PostToService@WhichService,c
  6717  0011DA  D02F               	goto	i2l2548
  6718  0011DC  501D               	movf	i2ES_PostToService@WhichService,w,c
  6719  0011DE  0D03               	mullw	3
  6720  0011E0  0E5C               	movlw	low _EventQueues
  6721  0011E2  24F3               	addwf	prodl,w,c
  6722  0011E4  6EF6               	movwf	tblptrl,c
  6723  0011E6  0E03               	movlw	high _EventQueues
  6724  0011E8  20F4               	addwfc	prodh,w,c
  6725  0011EA  6EF7               	movwf	tblptrh,c
  6726  0011EC                     	if	0	;There are less than 3 active tblptr bytes
  6727  0011EC                     	endif
  6728  0011EC  0009               	tblrd		*+
  6729  0011EE  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  6730  0011F2  000A               	tblrd		*-
  6731  0011F4  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  6732  0011F8  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  6733  0011FC  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  6734  001200  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  6735  001204  EC37  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  6736  001208  06E8               	decf	wreg,f,c
  6737  00120A  A4D8               	btfss	status,2,c
  6738  00120C  D016               	goto	i2l2548
  6739                           
  6740                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6741  00120E  501D               	movf	i2ES_PostToService@WhichService,w,c
  6742  001210  0D02               	mullw	2
  6743  001212  0E01               	movlw	low _BitNum2SetMask
  6744  001214  24F3               	addwf	prodl,w,c
  6745  001216  6EF6               	movwf	tblptrl,c
  6746  001218  0E03               	movlw	high _BitNum2SetMask
  6747  00121A  20F4               	addwfc	prodh,w,c
  6748  00121C  6EF7               	movwf	tblptrh,c
  6749  00121E                     	if	0	;There are less than 3 active tblptr bytes
  6750  00121E                     	endif
  6751  00121E  0009               	tblrd		*+
  6752  001220  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  6753  001224  0009               	tblrd		*+
  6754  001226  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  6755  00122A  501B               	movf	??i2_ES_PostToService,w,c
  6756  00122C  0100               	movlb	0	; () banked
  6757  00122E  1389               	iorwf	_Ready& (0+255),f,b
  6758  001230  501C               	movf	??i2_ES_PostToService+1,w,c
  6759  001232  0100               	movlb	0	; () banked
  6760  001234  138A               	iorwf	(_Ready+1)& (0+255),f,b
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;ES_Framework.c: 356: return 1;
  6764  001236  0E01               	movlw	1
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;ES_Framework.c: 357: } else
  6768                           
  6769                           ; BSR set to: 0
  6770  001238  0012               	return	
  6771  00123A                     i2l2548:
  6772                           
  6773                           ;ES_Framework.c: 358: return 0;
  6774  00123A  0E00               	movlw	0
  6775  00123C  0012               	return	
  6776  00123E                     __end_ofi2_ES_PostToService:
  6777                           	opt stack 0
  6778                           tosu	equ	0xFFF
  6779                           tosh	equ	0xFFE
  6780                           tosl	equ	0xFFD
  6781                           pclatu	equ	0xFFB
  6782                           pclath	equ	0xFFA
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           postinc0	equ	0xFEE
  6791                           fsr0h	equ	0xFEA
  6792                           fsr0l	equ	0xFE9
  6793                           wreg	equ	0xFE8
  6794                           indf1	equ	0xFE7
  6795                           postinc1	equ	0xFE6
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function i2_ES_EnQueueFIFO *****************
  6806 ;; Defined at:
  6807 ;;		line 85 in file "ES_Queue.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  6810 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6811 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  6814 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6815 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      unsigned char 
  6818 ;; Registers used:
  6819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6825 ;;      Params:         5       0       0       0
  6826 ;;      Locals:         3       0       0       0
  6827 ;;      Temps:          3       0       0       0
  6828 ;;      Totals:        11       0       0       0
  6829 ;;Total ram usage:       11 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    1
  6832 ;; This function calls:
  6833 ;;		i2___awmod
  6834 ;;		i2___wmul
  6835 ;; This function is called by:
  6836 ;;		i2_ES_PostToService
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text47
  6841  000A6E                     __ptext47:
  6842                           	opt stack 0
  6843  000A6E                     i2_ES_EnQueueFIFO:
  6844                           	opt stack 18
  6845                           
  6846                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6847                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6848                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6849                           
  6850                           ;incstack = 0
  6851  000A6E  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  6852  000A72  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  6853                           
  6854                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6855  000A76  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6856  000A7A  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6857  000A7E  EE10 F002          	lfsr	1,2
  6858  000A82  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6859  000A84  26E1               	addwf	fsr1l,f,c
  6860  000A86  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6861  000A88  22E2               	addwfc	fsr1h,f,c
  6862  000A8A  50DE               	movf	postinc2,w,c
  6863  000A8C  5CE6               	subwf	postinc1,w,c
  6864  000A8E  B0D8               	btfsc	status,0,c
  6865  000A90  D046               	goto	i2l2324
  6866                           
  6867                           ;ES_Queue.c: 92: {
  6868                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6869  000A92  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  6870  000A96  9EF2               	bcf	intcon,7,c	;volatile
  6871                           
  6872                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6873                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6874  000A98  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6875  000A9C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6876  000AA0  50DF               	movf	indf2,w,c
  6877  000AA2  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  6878  000AA4  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  6879  000AA6  6E03               	movwf	i2___awmod@divisor,c
  6880  000AA8  6A04               	clrf	i2___awmod@divisor+1,c
  6881  000AAA  EE20 F002          	lfsr	2,2
  6882  000AAE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6883  000AB0  26D9               	addwf	fsr2l,f,c
  6884  000AB2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6885  000AB4  22DA               	addwfc	fsr2h,f,c
  6886  000AB6  50DF               	movf	indf2,w,c
  6887  000AB8  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  6888  000ABA  EE20 F001          	lfsr	2,1
  6889  000ABE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6890  000AC0  26D9               	addwf	fsr2l,f,c
  6891  000AC2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6892  000AC4  22DA               	addwfc	fsr2h,f,c
  6893  000AC6  50DF               	movf	indf2,w,c
  6894  000AC8  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  6895  000ACA  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  6896  000ACC  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  6897  000ACE  6E01               	movwf	i2___awmod@dividend,c
  6898  000AD0  6A02               	clrf	i2___awmod@dividend+1,c
  6899  000AD2  3602               	rlcf	i2___awmod@dividend+1,f,c
  6900  000AD4  EC46  F008         	call	i2___awmod	;wreg free
  6901  000AD8  0E01               	movlw	1
  6902  000ADA  2401               	addwf	?i2___awmod,w,c
  6903  000ADC  6E07               	movwf	i2___wmul@multiplier,c
  6904  000ADE  0E00               	movlw	0
  6905  000AE0  2002               	addwfc	?i2___awmod+1,w,c
  6906  000AE2  6E08               	movwf	i2___wmul@multiplier+1,c
  6907  000AE4  0E00               	movlw	0
  6908  000AE6  6E0A               	movwf	i2___wmul@multiplicand+1,c
  6909  000AE8  0E03               	movlw	3
  6910  000AEA  6E09               	movwf	i2___wmul@multiplicand,c
  6911  000AEC  EC50  F00A         	call	i2___wmul	;wreg free
  6912  000AF0  5007               	movf	?i2___wmul,w,c
  6913  000AF2  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  6914  000AF4  6ED9               	movwf	fsr2l,c
  6915  000AF6  5008               	movf	?i2___wmul+1,w,c
  6916  000AF8  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  6917  000AFA  6EDA               	movwf	fsr2h,c
  6918  000AFC  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  6919  000B00  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  6920  000B04  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  6921                           
  6922                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6923  000B08  EE20 F002          	lfsr	2,2
  6924  000B0C  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6925  000B0E  26D9               	addwf	fsr2l,f,c
  6926  000B10  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6927  000B12  22DA               	addwfc	fsr2h,f,c
  6928  000B14  2ADF               	incf	indf2,f,c
  6929                           
  6930                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6931  000B16  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6932                           
  6933                           ;ES_Queue.c: 101: return(1);
  6934  000B1A  0E01               	movlw	1
  6935                           
  6936                           ;ES_Queue.c: 102: }else
  6937  000B1C  0012               	return	
  6938  000B1E                     i2l2324:
  6939                           
  6940                           ;ES_Queue.c: 103: return(0);
  6941  000B1E  0E00               	movlw	0
  6942  000B20  0012               	return	
  6943  000B22                     __end_ofi2_ES_EnQueueFIFO:
  6944                           	opt stack 0
  6945                           tosu	equ	0xFFF
  6946                           tosh	equ	0xFFE
  6947                           tosl	equ	0xFFD
  6948                           pclatu	equ	0xFFB
  6949                           pclath	equ	0xFFA
  6950                           tblptru	equ	0xFF8
  6951                           tblptrh	equ	0xFF7
  6952                           tblptrl	equ	0xFF6
  6953                           tablat	equ	0xFF5
  6954                           prodh	equ	0xFF4
  6955                           prodl	equ	0xFF3
  6956                           intcon	equ	0xFF2
  6957                           postinc0	equ	0xFEE
  6958                           fsr0h	equ	0xFEA
  6959                           fsr0l	equ	0xFE9
  6960                           wreg	equ	0xFE8
  6961                           indf1	equ	0xFE7
  6962                           postinc1	equ	0xFE6
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           
  6972 ;; *************** function i2___wmul *****************
  6973 ;; Defined at:
  6974 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  multiplier      2    6[COMRAM] unsigned int 
  6977 ;;  multiplicand    2    8[COMRAM] unsigned int 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  __wmul          2   10[COMRAM] unsigned int 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  2    6[COMRAM] unsigned int 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0, prodl, prodh
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6989 ;;      Params:         4       0       0       0
  6990 ;;      Locals:         2       0       0       0
  6991 ;;      Temps:          0       0       0       0
  6992 ;;      Totals:         6       0       0       0
  6993 ;;Total ram usage:        6 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; This function calls:
  6996 ;;		Nothing
  6997 ;; This function is called by:
  6998 ;;		i2_ES_EnQueueFIFO
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text48
  7003  0014A0                     __ptext48:
  7004                           	opt stack 0
  7005  0014A0                     i2___wmul:
  7006                           	opt stack 18
  7007                           
  7008                           ;incstack = 0
  7009  0014A0  5007               	movf	i2___wmul@multiplier,w,c
  7010  0014A2  0209               	mulwf	i2___wmul@multiplicand,c
  7011  0014A4  CFF3 F00B          	movff	prodl,i2___wmul@product
  7012  0014A8  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7013  0014AC  5007               	movf	i2___wmul@multiplier,w,c
  7014  0014AE  020A               	mulwf	i2___wmul@multiplicand+1,c
  7015  0014B0  50F3               	movf	prodl,w,c
  7016  0014B2  260C               	addwf	i2___wmul@product+1,f,c
  7017  0014B4  5008               	movf	i2___wmul@multiplier+1,w,c
  7018  0014B6  0209               	mulwf	i2___wmul@multiplicand,c
  7019  0014B8  50F3               	movf	prodl,w,c
  7020  0014BA  260C               	addwf	i2___wmul@product+1,f,c
  7021  0014BC  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7022  0014C0  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7023  0014C4  0012               	return	
  7024  0014C6                     __end_ofi2___wmul:
  7025                           	opt stack 0
  7026                           tosu	equ	0xFFF
  7027                           tosh	equ	0xFFE
  7028                           tosl	equ	0xFFD
  7029                           pclatu	equ	0xFFB
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           postinc0	equ	0xFEE
  7039                           fsr0h	equ	0xFEA
  7040                           fsr0l	equ	0xFE9
  7041                           wreg	equ	0xFE8
  7042                           indf1	equ	0xFE7
  7043                           postinc1	equ	0xFE6
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           indf2	equ	0xFDF
  7047                           postinc2	equ	0xFDE
  7048                           postdec2	equ	0xFDD
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function i2___awmod *****************
  7054 ;; Defined at:
  7055 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  dividend        2    0[COMRAM] int 
  7058 ;;  divisor         2    2[COMRAM] int 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  __awmod         1    5[COMRAM] unsigned char 
  7061 ;;  __awmod         1    4[COMRAM] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  2    0[COMRAM] int 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7071 ;;      Params:         4       0       0       0
  7072 ;;      Locals:         2       0       0       0
  7073 ;;      Temps:          0       0       0       0
  7074 ;;      Totals:         6       0       0       0
  7075 ;;Total ram usage:        6 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		i2_ES_EnQueueFIFO
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text49
  7085  00108C                     __ptext49:
  7086                           	opt stack 0
  7087  00108C                     i2___awmod:
  7088                           	opt stack 18
  7089                           
  7090                           ;incstack = 0
  7091  00108C  0E00               	movlw	0
  7092  00108E  6E06               	movwf	i2___awmod@sign,c
  7093  001090  AE02               	btfss	i2___awmod@dividend+1,7,c
  7094  001092  D006               	goto	i2l2244
  7095  001094  6C01               	negf	i2___awmod@dividend,c
  7096  001096  1E02               	comf	i2___awmod@dividend+1,f,c
  7097  001098  B0D8               	btfsc	status,0,c
  7098  00109A  2A02               	incf	i2___awmod@dividend+1,f,c
  7099  00109C  0E01               	movlw	1
  7100  00109E  6E06               	movwf	i2___awmod@sign,c
  7101  0010A0                     i2l2244:
  7102  0010A0  AE04               	btfss	i2___awmod@divisor+1,7,c
  7103  0010A2  D004               	goto	i2l2248
  7104  0010A4  6C03               	negf	i2___awmod@divisor,c
  7105  0010A6  1E04               	comf	i2___awmod@divisor+1,f,c
  7106  0010A8  B0D8               	btfsc	status,0,c
  7107  0010AA  2A04               	incf	i2___awmod@divisor+1,f,c
  7108  0010AC                     i2l2248:
  7109  0010AC  5003               	movf	i2___awmod@divisor,w,c
  7110  0010AE  1004               	iorwf	i2___awmod@divisor+1,w,c
  7111  0010B0  B4D8               	btfsc	status,2,c
  7112  0010B2  D018               	goto	i2l2264
  7113  0010B4  0E01               	movlw	1
  7114  0010B6  6E05               	movwf	i2___awmod@counter,c
  7115  0010B8  D004               	goto	i2l2254
  7116  0010BA                     i2l2252:
  7117  0010BA  90D8               	bcf	status,0,c
  7118  0010BC  3603               	rlcf	i2___awmod@divisor,f,c
  7119  0010BE  3604               	rlcf	i2___awmod@divisor+1,f,c
  7120  0010C0  2A05               	incf	i2___awmod@counter,f,c
  7121  0010C2                     i2l2254:
  7122  0010C2  AE04               	btfss	i2___awmod@divisor+1,7,c
  7123  0010C4  D7FA               	goto	i2l2252
  7124  0010C6                     i2l2256:
  7125  0010C6  5003               	movf	i2___awmod@divisor,w,c
  7126  0010C8  5C01               	subwf	i2___awmod@dividend,w,c
  7127  0010CA  5004               	movf	i2___awmod@divisor+1,w,c
  7128  0010CC  5802               	subwfb	i2___awmod@dividend+1,w,c
  7129  0010CE  A0D8               	btfss	status,0,c
  7130  0010D0  D004               	goto	i2l2260
  7131  0010D2  5003               	movf	i2___awmod@divisor,w,c
  7132  0010D4  5E01               	subwf	i2___awmod@dividend,f,c
  7133  0010D6  5004               	movf	i2___awmod@divisor+1,w,c
  7134  0010D8  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7135  0010DA                     i2l2260:
  7136  0010DA  90D8               	bcf	status,0,c
  7137  0010DC  3204               	rrcf	i2___awmod@divisor+1,f,c
  7138  0010DE  3203               	rrcf	i2___awmod@divisor,f,c
  7139  0010E0  2E05               	decfsz	i2___awmod@counter,f,c
  7140  0010E2  D7F1               	goto	i2l2256
  7141  0010E4                     i2l2264:
  7142  0010E4  5006               	movf	i2___awmod@sign,w,c
  7143  0010E6  B4D8               	btfsc	status,2,c
  7144  0010E8  D004               	goto	i2l2268
  7145  0010EA  6C01               	negf	i2___awmod@dividend,c
  7146  0010EC  1E02               	comf	i2___awmod@dividend+1,f,c
  7147  0010EE  B0D8               	btfsc	status,0,c
  7148  0010F0  2A02               	incf	i2___awmod@dividend+1,f,c
  7149  0010F2                     i2l2268:
  7150  0010F2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7151  0010F6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7152  0010FA  0012               	return	
  7153  0010FC                     __end_ofi2___awmod:
  7154                           	opt stack 0
  7155                           tosu	equ	0xFFF
  7156                           tosh	equ	0xFFE
  7157                           tosl	equ	0xFFD
  7158                           pclatu	equ	0xFFB
  7159                           pclath	equ	0xFFA
  7160                           tblptru	equ	0xFF8
  7161                           tblptrh	equ	0xFF7
  7162                           tblptrl	equ	0xFF6
  7163                           tablat	equ	0xFF5
  7164                           prodh	equ	0xFF4
  7165                           prodl	equ	0xFF3
  7166                           intcon	equ	0xFF2
  7167                           postinc0	equ	0xFEE
  7168                           fsr0h	equ	0xFEA
  7169                           fsr0l	equ	0xFE9
  7170                           wreg	equ	0xFE8
  7171                           indf1	equ	0xFE7
  7172                           postinc1	equ	0xFE6
  7173                           fsr1h	equ	0xFE2
  7174                           fsr1l	equ	0xFE1
  7175                           indf2	equ	0xFDF
  7176                           postinc2	equ	0xFDE
  7177                           postdec2	equ	0xFDD
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           tosu	equ	0xFFF
  7182                           tosh	equ	0xFFE
  7183                           tosl	equ	0xFFD
  7184                           pclatu	equ	0xFFB
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           postinc0	equ	0xFEE
  7194                           fsr0h	equ	0xFEA
  7195                           fsr0l	equ	0xFE9
  7196                           wreg	equ	0xFE8
  7197                           indf1	equ	0xFE7
  7198                           postinc1	equ	0xFE6
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208                           	psect	text50
  7209  000000                     __ptext50:
  7210                           	opt stack 0
  7211                           tosu	equ	0xFFF
  7212                           tosh	equ	0xFFE
  7213                           tosl	equ	0xFFD
  7214                           pclatu	equ	0xFFB
  7215                           pclath	equ	0xFFA
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           postinc0	equ	0xFEE
  7224                           fsr0h	equ	0xFEA
  7225                           fsr0l	equ	0xFE9
  7226                           wreg	equ	0xFE8
  7227                           indf1	equ	0xFE7
  7228                           postinc1	equ	0xFE6
  7229                           fsr1h	equ	0xFE2
  7230                           fsr1l	equ	0xFE1
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238                           	psect	rparam
  7239  0000                     tosu	equ	0xFFF
  7240                           tosh	equ	0xFFE
  7241                           tosl	equ	0xFFD
  7242                           pclatu	equ	0xFFB
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           postinc0	equ	0xFEE
  7252                           fsr0h	equ	0xFEA
  7253                           fsr0l	equ	0xFE9
  7254                           wreg	equ	0xFE8
  7255                           indf1	equ	0xFE7
  7256                           postinc1	equ	0xFE6
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           indf2	equ	0xFDF
  7260                           postinc2	equ	0xFDE
  7261                           postdec2	equ	0xFDD
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266                           	psect	temp
  7267  00003E                     btemp:
  7268                           	opt stack 0
  7269  00003E                     	ds	1
  7270  0000                     int$flags	set	btemp
  7271                           tosu	equ	0xFFF
  7272                           tosh	equ	0xFFE
  7273                           tosl	equ	0xFFD
  7274                           pclatu	equ	0xFFB
  7275                           pclath	equ	0xFFA
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           intcon	equ	0xFF2
  7283                           postinc0	equ	0xFEE
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           indf1	equ	0xFE7
  7288                           postinc1	equ	0xFE6
  7289                           fsr1h	equ	0xFE2
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        0
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      61
    BANK0           160     44     136
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostAnalogService(), Absolute function(), PostButtonDebounceSM(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S186$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S153$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    S153$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> Check4Keystroke(), CheckButtonEvents(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_AnalogISR
    _AnalogISR->_PostCan_XmitService
    _PostCan_XmitService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_CheckUserEvents
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostAnalogService
    _ES_Timer_Tick_Resp->_PostButtonDebounceSM
    _PostAnalogService->_ES_PostToService
    _XmitData->_GetBrightness
    _XmitData->_GetLocation
    _RunButtonDebounceSM->_ES_PostAll
    _ES_PostAll->_ES_EnQueueFIFO
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitAnalogService
    _ES_Initialize->_InitCan_XmitService
    _InitializeButtonDebounce->_ES_Timer_InitTimer
    _InitCan_XmitService->_ES_PostToService
    _InitAnalogService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22978
                                             43 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   15803
                                             38 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunAnalogService *
                _RunButtonDebounceSM *
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6044
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6044
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostAnalogService *
               _PostButtonDebounceSM *
 ---------------------------------------------------------------------------------
 (4) _PostAnalogService                                    3     0      3    2806
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   8     5      3     135
                                             29 BANK0      8     5      3
                    _InitCanHardware
                           _InitPins
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              2 BANK0      1     1      0
                      _GetBrightness
                        _GetLocation
 ---------------------------------------------------------------------------------
 (4) _GetLocation                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetBrightness                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunButtonDebounceSM                                  6     3      3    3194
                                             29 BANK0      6     3      3
                         _ES_PostAll
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_PostAll                                           6     3      3    2575
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (2) _RunAnalogService                                     6     3      3     629
                                             29 BANK0      6     3      3
                 _ES_Timer_InitTimer
                       _InitAnalogHW
 ---------------------------------------------------------------------------------
 (3) _InitAnalogHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3178
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3088
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    2905
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6779
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitAnalogService *
                _InitCan_XmitService *
           _InitializeButtonDebounce *
 ---------------------------------------------------------------------------------
 (2) _InitializeButtonDebounce                             1     1      0     508
                                              5 BANK0      1     1      0
                 _ES_Timer_InitTimer
                       _GetInputLine
                       _InitButtonHW
 ---------------------------------------------------------------------------------
 (3) _InitButtonHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     486
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitAnalogService                                    4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2731
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2289
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    1158
                                             37 COMRAM    16    16      0
                          _AnalogISR
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _AnalogISR                                            5     5      0    1158
                                             32 COMRAM     5     5      0
                _PostCan_XmitService
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _PostCan_XmitService                                 3     0      3     977
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitAnalogService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitializeButtonDebounce *
       _ES_Timer_InitTimer
       _GetInputLine
       _InitButtonHW
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunAnalogService *
       _ES_Timer_InitTimer
       _InitAnalogHW
     _RunButtonDebounceSM *
       _ES_PostAll
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _XmitData
         _GetBrightness
         _GetLocation
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostAnalogService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostButtonDebounceSM *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _AnalogISR
     _PostCan_XmitService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_ES_Timer_InitTimer
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2C      88       4       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5       9        0.0%
DATA                 0      0      C5      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Dec  8 01:04:15 2016

           Analog_Service@MyPriority 008D                     ??__HW_Timer_Init 00BE  
                 ??_RunAnalogService 00DC                  ES_CheckUserEvents@i 00E1  
         CheckButtonEvents@ReturnVal 00DC                  __HW_Timer_Init@Rate 00BC  
                ___wmul@multiplicand 00C4            __size_of_BusErrorResponse 0002  
                                l503 08EE                                  l505 0904  
                                l506 091A                                  l507 0930  
                                l380 0D94                                  l526 0E22  
                                l529 0E86                __end_of_ES_Initialize 07E4  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 00C1              __end_of_Check4Keystroke 159C  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00D0  
                __end_of_GetLocation 157A              ES_EnQueueFIFO@Event2Add 00CA  
                      ?_InitAnalogHW 0001                    ?_ES_PostToService 00D3  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 0080  
                               l2210 08C2                                 l3030 0D46  
                               l3032 0D58                                 l2170 0BF2  
                               l2226 1088                                 l3034 0D6A  
                               l2404 0502                                 l3028 0D34  
                               l2190 0C5E                                 l2182 0C3C  
                               l2174 0C06                                 l2166 0BE2  
                               l2414 057A                                 l3038 0D7C  
                               l2176 0C12                                 l2360 11B4  
                               l2600 1294                                 l2416 05B8  
                               l2178 0C18                                 l2186 0C4A  
                               l2530 1310                                 l2522 12E8  
                               l2282 0B2E                                 l2364 11CA  
                               l2604 129E                                 l2372 0FA4  
                               l2292 0BBA                                 l2630 04A4  
                               l2640 04E8                                 l2376 0FAE  
                               l2720 0946                                 l2296 0BC0  
                               l2810 07DA                                 l2802 075C  
                               l2634 04C0                                 l2722 097A  
                               l2580 0CAC                                 l2572 0C7C  
                               l2750 13EE                                 l2814 07E0  
                               l2726 098C                                 l2590 0CDE  
                               l2662 1508                                 l2830 06DC  
                               l2680 141E                                 l2592 0CEE  
                               l2568 0C6A                                 l2824 0688  
                               l2762 1264                                 l2658 1500  
                               l2834 06F2                                 l2818 0606  
                               l2790 070A                                 l2870 139C  
                               l2768 127A                                 l2872 13A4  
                               l2794 0714                                 l2698 08E2  
                               l2798 0758                                 _ADIE 007CEE  
                               _ADIF 007CF6                                 STR_1 036B  
                               STR_2 0386                                 STR_3 039E  
                               STR_4 03B5                                 u1144 0B54  
                               u1145 0B4C                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u1288 0562                                 u1398 12B4  
                               u1638 06B2                                 u1399 12CC  
                               u1639 06CA                                 _PIE1 000F9D  
                               u1598 07B4                                 u1599 07D0  
                               _PEIE 007F96                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00D6  
                               _main 0D02                          ?_ES_DeQueue 00C8  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 003E                        main@ErrorType 00E7  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D9  
       __end_ofi2_ES_Timer_InitTimer 116A                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      ?_InitButtonHW 0001                    _PostAnalogService 152A  
   __end_of_InitializeButtonDebounce 1450                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00D9                         ___param_bank 000010  
                 ?_PostAnalogService 00D9                 __end_of_GetInputLine 1592  
              __end_of_GetBrightness 1584              __end_of_InitCanHardware 0EA2  
                              ??_ISR 0026                   ES_Run@HighestPrior 00E6  
                        ?_ES_PostAll 00D3                  ??_PostAnalogService 00DC  
                              ?_main 0001                __end_of_ES_Timer_Init 1564  
                    __end_of___awmod 0C68                      __end_of___lbmod 131C  
                              _T1CON 000FCD                           _DistList00 0369  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l229 0A32  
                              _IRXIE 007D1F                                _IRXIF 007D27  
         __size_of_CheckButtonEvents 006A                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                           _Brightness 0085  
                      __CFG_PWRT$OFF 000000                                _Ready 0089  
                     ??_InitAnalogHW 00BC                  AnalogISR@Event2Post 0023  
                              _putch 159C                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                   __end_ofi2___wmul 14C6            __end_of_PostAnalogService 1540  
                              status 000FD8                       ??_InitButtonHW 00BC  
                 __size_ofi2___awmod 0070                      __initialization 147A  
             ES_GetMSBitSet@LoopCntr 00C5           __end_of_ES_CheckUserEvents 12D8  
                       __end_of_main 0D96                    ES_Timer_Init@Rate 00BE  
                 __size_of_AnalogISR 0088                     __end_of_InitPins 14FE  
         PostAnalogService@ThisEvent 00D9            RunAnalogService@ThisEvent 00D9  
                        _GetLocation 1570                  __end_of_EventQueues 0365  
                             ??_main 00E7                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002                  __size_of_ES_DeQueue 0128  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 1514  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
                  ?_CanErrorResponse 0001                               _ADCON1 000FC1  
     RunButtonDebounceSM@ReturnEvent 00DC                     __end_of_XmitData 0F9E  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                               _CIOCON 000F73  
                         _MyPriority 0093                               ?_putch 0001  
                   ??_ES_GetMSBitSet 00BE                               i2l2260 10DA  
                             i2l2252 10BA                               i2l2244 10A0  
                             i2l2324 0B1E                               i2l2254 10C2  
                             i2l2256 10C6                               i2l2264 10E4  
                             i2l2248 10AC                               i2l2268 10F2  
                             i2l2548 123A                               i2l2942 0A0A  
                             i2l2856 0DCC                               i2l2960 0A28  
                             i2l2936 0A00                               i2l2954 0A1E  
                             i2l2948 0A14                               _INTCON 000FF2  
                __size_of_ES_PostAll 0078                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 0604  
                             _TXB0D0 000F46                               _TXB0D1 000F47  
                             _TXB0D2 000F48                               _TXB0D3 000F49  
                             _TXB0D4 000F4A               ??_PostButtonDebounceSM 00DC  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0001                     ??_ES_EnQueueFIFO 00CD  
                     _Timer2PostFunc 0321                               _Queue0 0095  
                             _Queue1 00A1                               _Queue2 00AD  
                     _SysTickCounter 003A                               ___wmul 1358  
                          ??___awmod 00C0                            ??___lbmod 00BD  
                   ?_InitCanHardware 0001             _InitializeButtonDebounce 1422  
        RunAnalogService@ReturnEvent 00DC         __size_of_RunButtonDebounceSM 009A  
                _PostCan_XmitService 1540          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 1480                               clear_1 148C  
                   _BusErrorResponse 15A0                      ___awmod@divisor 00BE  
          ES_Timer_InitTimer@NewTime 00BC                      ___awmod@counter 00C0  
                             _printf 138E                          ISR@LastTime 0036  
                  _InitAnalogService 13C2               ES_InitQueue@pThisQueue 00BF  
                  __end_ofi2___awmod 10FC                 i2_ES_Timer_InitTimer 10FC  
                       __mediumconst 0000                          ISR@NextTime 0038  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                   ?_InitAnalogService 0001  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00D0  
            ES_GetMSBitSet@Val2Check 00BC                 ?_PostCan_XmitService 001E  
        InitCan_XmitService@Priority 00DC                    __end_of_AnalogISR 0E1E  
                    ___lbmod@divisor 00BC                  ??_InitAnalogService 00D9  
                         __accesstop 0060              __end_of__initialization 1492  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 00BE  
         __size_of_PostAnalogService 0016                      __CFG_PBADEN$OFF 000000  
              __size_of_GetInputLine 0006                        ___rparam_used 000001  
                        _EventQueues 035C          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                 __end_of_InitAnalogHW 147A  
                      ?_ES_InitQueue 00BC              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 159E                      _TMR_ActiveFlags 008B  
          __end_of_InitAnalogService 13F2                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 00C3          __end_of_InitCan_XmitService 1422  
          __size_of_RunAnalogService 0050                 __end_of_InitButtonHW 1570  
              ?i2_ES_Timer_InitTimer 0001                       _TMR_TimerArray 0060  
                       _GetInputLine 158C                ??_PostCan_XmitService 0021  
           ES_EnQueueFIFO@pThisQueue 00D1                              ??_putch 00BC  
           __HW_Process_Pending_Ints 14FE                           __pbssBANK0 0060  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 00CC          __size_of_RunCan_XmitService 00DA  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BF  
                            ?___wmul 00C2                         ??_ES_PostAll 00D6  
       RunButtonDebounceSM@ThisEvent 00D9                              _CCP1CON 000FBD  
                          ?_XmitData 0001                          ES_PostAll@i 00D8  
                            _ECANCON 000F77                              ?_printf 00BC  
                         ??i2___wmul 000B                   __end_of_ES_DeQueue 04EE  
             i2ES_EnQueueFIFO@pBlock 000D                              _TXB0DLC 000F45  
                         ??_InitPins 00BC                   __end_of_ES_PostAll 1016  
                    __size_of_ES_Run 00F4               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006            i2ES_EnQueueFIFO@Event2Add 000F  
                            ___awmod 0BC6                              ___lbmod 12D8  
                ES_PostAll@ThisEvent 00D3                      __size_of___wmul 0036  
                       __psmallconst 0300                           ??_XmitData 00BE  
              ES_Timer_InitTimer@Num 00C0           i2ES_PostToService@TheEvent 0018  
                            __pcinit 147A                         ?_GetLocation 00BC  
                            __ramtop 0300           __size_of_InitAnalogService 0030  
                            __ptext0 0D02                              __ptext1 138E  
                            __ptext2 159C                              __ptext3 0604  
                            __ptext4 14FE                              __ptext5 04EE  
                            __ptext6 1514                              __ptext7 152A  
                            __ptext8 0B22                              __ptext9 123E  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
             ??i2_ES_Timer_InitTimer 0003                         __size_of_ISR 0A66  
            __size_of__HW_Timer_Init 001E                     ___awmod@dividend 00BC  
                 _ES_CheckUserEvents 128E                      ES_Run@ThisEvent 00B9  
                     __pintcode_body 09A0               __size_of_GetBrightness 000A  
               end_of_initialization 1492                  _RunButtonDebounceSM 0C68  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 15A2  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 09A0                  i2___wmul@multiplier 0007  
       ES_PostToService@WhichService 00D8                __size_of_InitAnalogHW 002A  
         ??_InitializeButtonDebounce 00C1               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 0002                              printf@c 00C0  
                            printf@f 00BC                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ?_RunButtonDebounceSM 00D9  
               ??_ES_CheckUserEvents 00E1                __size_of_InitButtonHW 000C  
         InitAnalogService@ThisEvent 00D9                     _RunAnalogService 123E  
                      _ES_Initialize 06F8                     ___lbmod@dividend 00BD  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0369                         _InitAnalogHW 1450  
               __end_of_ES_InitQueue 1358                            i2___awmod 108C  
                     ES_Initialize@i 00DF                          ___lbmod@rem 00BF  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 06F8  
                          _AnalogISR 0D96        __size_of_PostButtonDebounceSM 0016  
        RunCan_XmitService@ThisEvent 00D9                         _InitButtonHW 1564  
                 __end_of_DistList00 036B                     _ES_PostToService 1016  
         __end_of_ES_Timer_InitTimer 0F22                ??_RunButtonDebounceSM 00DC  
                      _GetBrightness 157A                 __end_of_ServDescList 035C  
                     __end_of___wmul 138E                    ??_CanXmitResponse 0001  
                     ?_ES_Initialize 00DD           ??__HW_Process_Pending_Ints 00E0  
                      _ES_Timer_Init 1556                     i2___wmul@product 000B  
                     __end_of_printf 13C2             __size_of_InitCanHardware 0084  
         __end_of_ES_Timer_Tick_Resp 0604                  start_initialization 147A  
                        __end_of_ISR 0A6E                    __size_ofi2___wmul 0026  
                       _CurrentState 0090                           ?i2___awmod 0001  
                        _CANSTATbits 000F6E                             ??_ES_Run 00E2  
                   __CFG_OSC$IRCIO67 000000                            _TickCount 0094  
                         ?_AnalogISR 0001           __end_ofi2_ES_PostToService 123E  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                     ?_GetBrightness 00BC                             ??___wmul 00C6  
            i2ES_Timer_InitTimer@Num 0005              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00BE  
                     ?_ES_Timer_Init 00BE                    __size_of_XmitData 007C  
               __size_of_GetLocation 000A                       __HW_Timer_Init 14C6  
        __end_of_PostCan_XmitService 1556                          __pbssCOMRAM 0036  
                      __pcstackBANK0 00BC                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00BC  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 0030  
         __end_of_RunCan_XmitService 09A0                     i2_ES_EnQueueFIFO 0A6E  
CheckButtonEvents@CurrentButtonState 00E0                        __PRIMASK_temp 003C  
                   _CanErrorResponse 159E                    ??_Check4Keystroke 00BC  
                          __pintcode 0008                             ?___awmod 00BC  
                           ?___lbmod 00BC          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00DF             ES_PostToService@TheEvent 00D3  
             __end_of__HW_Timer_Init 14E4        PostButtonDebounceSM@ThisEvent 00D9  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
       PostCan_XmitService@ThisEvent 001E                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00DD  
                  ??_InitCanHardware 00BC            ES_GetMSBitSet@Nybble2Test 00C4  
                  ?_BusErrorResponse 0001                       ___wmul@product 00C6  
                        ??_AnalogISR 0021             __end_of_RunAnalogService 128E  
                 ??_BusErrorResponse 0001                      ??_GetBrightness 00BE  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 131C  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 00C0       i2ES_PostToService@WhichService 001D  
          InitAnalogService@Priority 00DC                      ?__HW_Timer_Init 00BC  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 00C2  
                           i2___wmul 14A0        __size_ofi2_ES_Timer_InitTimer 006E  
                 ES_DeQueue@SaveCrit 00CE                 ES_EnQueueFIFO@pBlock 00C8  
           __end_of_ES_PostToService 108C                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _LastData 0092                             _InitPins 14E4  
                           _Location 0087                      _CanXmitResponse 1592  
                           __Hrparam 0000                       _ES_GetMSBitSet 0B22  
                           __Lrparam 0000                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                             _XmitData 0F22  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 1584                       _ES_EnQueueFIFO 07E4  
  __size_of_InitializeButtonDebounce 002E         __end_of_PostButtonDebounceSM 152A  
          ?_InitializeButtonDebounce 0001                     XmitData@DataByte 00BE  
                 _ES_Timer_InitTimer 0EA2                        ?_GetInputLine 0001  
             __end_of_BitNum2SetMask 0321                             __ptext10 0C68  
                           __ptext11 08C6                             __ptext20 12D8  
                           __ptext12 0F22                             __ptext21 128E  
                           __ptext13 1570                             __ptext30 0EA2  
                           __ptext22 1598                             __ptext14 157A  
                           __ptext31 1016                             __ptext23 116A  
                           __ptext15 14E4                             __ptext40 1584  
                           __ptext32 07E4                             __ptext24 06F8  
                           __ptext16 0E1E                             __ptext41 159E  
                           __ptext33 1358                             __ptext25 13C2  
                           __ptext17 0F9E                             __ptext50 0000  
                           __ptext42 15A0                             __ptext34 0BC6  
                           __ptext26 13F2                             __ptext18 1450  
                           __ptext43 0D96                             __ptext35 1556  
                           __ptext27 1422                             __ptext19 03C6  
                           __ptext44 10FC                             __ptext36 14C6  
                           __ptext28 1564                             __ptext45 1540  
                           __ptext37 131C                             __ptext29 158C  
                           __ptext46 11D4                             __ptext47 0A6E  
                           __ptext39 1592                             __ptext48 14A0  
                           __ptext49 108C    ES_Timer_Tick_Resp@NeedsProcessing 0083  
                ?_ES_Timer_InitTimer 00BC                        __size_of_main 0094  
                 _ES_Timer_Tick_Resp 04EE               __end_of_ES_GetMSBitSet 0BC6  
        __end_of_RunButtonDebounceSM 0D02                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 158C               __end_of_ES_EnQueueFIFO 08C6  
                           int$flags 003E                  _InitCan_XmitService 13F2  
               ??_ES_Timer_InitTimer 00BE                    ES_DeQueue@NumLeft 00CF  
                 i2_ES_PostToService 11D4             __end_ofi2_ES_EnQueueFIFO 0B22  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 15A0  
                     ??_GetInputLine 00BC                  ?i2_ES_PostToService 0018  
                  _CheckButtonEvents 116A                 ??_ES_Timer_Tick_Resp 00DC  
      RunCan_XmitService@ReturnEvent 00DE                   ?_CheckButtonEvents 0001  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 1598  
                    _Check4Keystroke 1598                             intlevel2 0000  
          Can_XmitService@MyPriority 008E                           _ES_DeQueue 03C6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
   InitializeButtonDebounce@Priority 00C1                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 00BC                  ??_CheckButtonEvents 00DC  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 008F  
                 _RunCan_XmitService 08C6                             printf@ap 00BE  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 00C8  
                         _ES_PostAll 0F9E                        ??_GetLocation 00BE  
                   ES_DeQueue@pBlock 00C8                  ?_RunCan_XmitService 00D9  
                    _InitCanHardware 0E1E            __end_of_CheckButtonEvents 11D4  
                    _LastButtonState 0091               ES_DeQueue@pReturnEvent 00CA  
              ES_InitQueue@BlockSize 00BE                ??_InitCan_XmitService 00D9  
       __size_of_PostCan_XmitService 0016                 ??_RunCan_XmitService 00DC  
               _PostButtonDebounceSM 1514                    ?_RunAnalogService 00D9  
         CheckButtonEvents@ThisEvent 00DD  
