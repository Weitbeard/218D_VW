

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Dec 14 23:30:43 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	smallconst
    68  000300                     __psmallconst:
    69                           	opt stack 0
    70  000300  00                 	db	0
    71  000301                     _BitNum2SetMask:
    72                           	opt stack 0
    73  000301  0001               	dw	1
    74  000303  0002               	dw	2
    75  000305  0004               	dw	4
    76  000307  0008               	dw	8
    77  000309  0010               	dw	16
    78  00030B  0020               	dw	32
    79  00030D  0040               	dw	64
    80  00030F  0080               	dw	128
    81  000311  0100               	dw	256
    82  000313  0200               	dw	512
    83  000315  0400               	dw	1024
    84  000317  0800               	dw	2048
    85  000319  1000               	dw	4096
    86  00031B  2000               	dw	8192
    87  00031D  4000               	dw	16384
    88  00031F  8000               	dw	32768
    89  000321                     __end_of_BitNum2SetMask:
    90                           	opt stack 0
    91  000321                     _Timer2PostFunc:
    92                           	opt stack 0
    93  000321  E6                 	db	low _PostAnalogService
    94  000322  14                 	db	high _PostAnalogService
    95  000323  D0                 	db	low _PostButtonDebounceSM
    96  000324  14                 	db	high _PostButtonDebounceSM
    97  000325  00                 	db	0
    98  000326  00                 	db	0
    99  000327  00                 	db	0
   100  000328  00                 	db	0
   101  000329  00                 	db	0
   102  00032A  00                 	db	0
   103  00032B  00                 	db	0
   104  00032C  00                 	db	0
   105  00032D  00                 	db	0
   106  00032E  00                 	db	0
   107  00032F  00                 	db	0
   108  000330  00                 	db	0
   109  000331  00                 	db	0
   110  000332  00                 	db	0
   111  000333  00                 	db	0
   112  000334  00                 	db	0
   113  000335  00                 	db	0
   114  000336  00                 	db	0
   115  000337  00                 	db	0
   116  000338  00                 	db	0
   117  000339  00                 	db	0
   118  00033A  00                 	db	0
   119  00033B  00                 	db	0
   120  00033C  00                 	db	0
   121  00033D  00                 	db	0
   122  00033E  00                 	db	0
   123  00033F  00                 	db	0
   124  000340  00                 	db	0
   125  000341                     __end_of_Timer2PostFunc:
   126                           	opt stack 0
   127  000341                     _Nybble2MSBitNum:
   128                           	opt stack 0
   129  000341  00                 	db	0
   130  000342  01                 	db	1
   131  000343  01                 	db	1
   132  000344  02                 	db	2
   133  000345  02                 	db	2
   134  000346  02                 	db	2
   135  000347  02                 	db	2
   136  000348  03                 	db	3
   137  000349  03                 	db	3
   138  00034A  03                 	db	3
   139  00034B  03                 	db	3
   140  00034C  03                 	db	3
   141  00034D  03                 	db	3
   142  00034E  03                 	db	3
   143  00034F  03                 	db	3
   144  000350                     __end_of_Nybble2MSBitNum:
   145                           	opt stack 0
   146  000350                     _ServDescList:
   147                           	opt stack 0
   148  000350  AE                 	db	low _InitCan_XmitService
   149  000351  13                 	db	high _InitCan_XmitService
   150  000352  94                 	db	low _RunCan_XmitService
   151  000353  09                 	db	high _RunCan_XmitService
   152  000354  DE                 	db	low _InitializeButtonDebounce
   153  000355  13                 	db	high _InitializeButtonDebounce
   154  000356  02                 	db	low _RunButtonDebounceSM
   155  000357  0B                 	db	high _RunButtonDebounceSM
   156  000358  7E                 	db	low _InitAnalogService
   157  000359  13                 	db	high _InitAnalogService
   158  00035A  B2                 	db	low _RunAnalogService
   159  00035B  11                 	db	high _RunAnalogService
   160  00035C                     __end_of_ServDescList:
   161                           	opt stack 0
   162  00035C                     _EventQueues:
   163                           	opt stack 0
   164  00035C  90                 	db	low _Queue0
   165  00035D  00                 	db	high _Queue0
   166  00035E  04                 	db	4
   167  00035F  9C                 	db	low _Queue1
   168  000360  00                 	db	high _Queue1
   169  000361  04                 	db	4
   170  000362  A8                 	db	low _Queue2
   171  000363  00                 	db	high _Queue2
   172  000364  04                 	db	4
   173  000365                     __end_of_EventQueues:
   174                           	opt stack 0
   175  000365                     _ES_EventList:
   176                           	opt stack 0
   177  000365  48                 	db	low _Check4Keystroke
   178  000366  15                 	db	high _Check4Keystroke
   179  000367  DE                 	db	low _CheckButtonEvents
   180  000368  10                 	db	high _CheckButtonEvents
   181  000369                     __end_of_ES_EventList:
   182                           	opt stack 0
   183  000369                     _DistList00:
   184                           	opt stack 0
   185  000369  FC                 	db	low _PostCan_XmitService
   186  00036A  14                 	db	high _PostCan_XmitService
   187  00036B                     __end_of_DistList00:
   188                           	opt stack 0
   189  0000                     _RXF0EIDH	set	3842
   190  0000                     _RXF0EIDL	set	3843
   191  0000                     _RXF0SIDH	set	3840
   192  0000                     _RXF0SIDL	set	3841
   193  0000                     _RXM0EIDH	set	3866
   194  0000                     _RXM0EIDL	set	3867
   195  0000                     _RXM0SIDH	set	3864
   196  0000                     _RXM0SIDL	set	3865
   197  0000                     _TXB0CONbits	set	3904
   198  0000                     _TXB0D0	set	3910
   199  0000                     _TXB0D1	set	3911
   200  0000                     _TXB0D2	set	3912
   201  0000                     _TXB0DLC	set	3909
   202  0000                     _TXB0EIDH	set	3907
   203  0000                     _TXB0EIDL	set	3908
   204  0000                     _TXB0SIDH	set	3905
   205  0000                     _TXB0SIDL	set	3906
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON1bits	set	4033
   209  0000                     _ADCON2bits	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _BRGCON1bits	set	3952
   213  0000                     _BRGCON2bits	set	3953
   214  0000                     _BRGCON3bits	set	3954
   215  0000                     _CANCON	set	3951
   216  0000                     _CANSTATbits	set	3950
   217  0000                     _CCP1CON	set	4029
   218  0000                     _CCPR1H	set	4031
   219  0000                     _CCPR1L	set	4030
   220  0000                     _CIOCON	set	3955
   221  0000                     _ECANCON	set	3959
   222  0000                     _INTCON	set	4082
   223  0000                     _LATA	set	3977
   224  0000                     _LATB	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _PIE1	set	3997
   227  0000                     _PORTA	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB0CONbits	set	3936
   231  0000                     _T1CON	set	4045
   232  0000                     _TRISA	set	3986
   233  0000                     _TRISAbits	set	3986
   234  0000                     _TRISBbits	set	3987
   235  0000                     _ADIE	set	31982
   236  0000                     _ADIF	set	31990
   237  0000                     _CCP1IF	set	31986
   238  0000                     _ERRIE	set	32029
   239  0000                     _ERRIF	set	32037
   240  0000                     _GIE	set	32663
   241  0000                     _IRXIE	set	32031
   242  0000                     _IRXIF	set	32039
   243  0000                     _LATA2	set	31818
   244  0000                     _LATA3	set	31819
   245  0000                     _LATA4	set	31820
   246  0000                     _LATA5	set	31821
   247  0000                     _PEIE	set	32662
   248  0000                     _RXB0IE	set	32024
   249  0000                     _RXB0IF	set	32032
   250  0000                     _TXB0IE	set	32026
   251  0000                     _TXB0IF	set	32034
   252  00036B                     STR_1:
   253  00036B  46                 	db	70	;'F'
   254  00036C  61                 	db	97	;'a'
   255  00036D  69                 	db	105	;'i'
   256  00036E  6C                 	db	108	;'l'
   257  00036F  65                 	db	101	;'e'
   258  000370  64                 	db	100	;'d'
   259  000371  20                 	db	32
   260  000372  6F                 	db	111	;'o'
   261  000373  6E                 	db	110	;'n'
   262  000374  20                 	db	32
   263  000375  61                 	db	97	;'a'
   264  000376  74                 	db	116	;'t'
   265  000377  74                 	db	116	;'t'
   266  000378  65                 	db	101	;'e'
   267  000379  6D                 	db	109	;'m'
   268  00037A  70                 	db	112	;'p'
   269  00037B  74                 	db	116	;'t'
   270  00037C  20                 	db	32
   271  00037D  74                 	db	116	;'t'
   272  00037E  6F                 	db	111	;'o'
   273  00037F  20                 	db	32
   274  000380  50                 	db	80	;'P'
   275  000381  6F                 	db	111	;'o'
   276  000382  73                 	db	115	;'s'
   277  000383  74                 	db	116	;'t'
   278  000384  0A                 	db	10
   279  000385  00                 	db	0
   280  000386                     STR_2:
   281  000386  46                 	db	70	;'F'
   282  000387  61                 	db	97	;'a'
   283  000388  69                 	db	105	;'i'
   284  000389  6C                 	db	108	;'l'
   285  00038A  65                 	db	101	;'e'
   286  00038B  64                 	db	100	;'d'
   287  00038C  20                 	db	32
   288  00038D  6F                 	db	111	;'o'
   289  00038E  6E                 	db	110	;'n'
   290  00038F  20                 	db	32
   291  000390  4E                 	db	78	;'N'
   292  000391  55                 	db	85	;'U'
   293  000392  4C                 	db	76	;'L'
   294  000393  4C                 	db	76	;'L'
   295  000394  20                 	db	32
   296  000395  70                 	db	112	;'p'
   297  000396  6F                 	db	111	;'o'
   298  000397  69                 	db	105	;'i'
   299  000398  6E                 	db	110	;'n'
   300  000399  74                 	db	116	;'t'
   301  00039A  65                 	db	101	;'e'
   302  00039B  72                 	db	114	;'r'
   303  00039C  0A                 	db	10
   304  00039D  00                 	db	0
   305  00039E                     STR_3:
   306  00039E  46                 	db	70	;'F'
   307  00039F  61                 	db	97	;'a'
   308  0003A0  69                 	db	105	;'i'
   309  0003A1  6C                 	db	108	;'l'
   310  0003A2  65                 	db	101	;'e'
   311  0003A3  64                 	db	100	;'d'
   312  0003A4  20                 	db	32
   313  0003A5  49                 	db	73	;'I'
   314  0003A6  6E                 	db	110	;'n'
   315  0003A7  69                 	db	105	;'i'
   316  0003A8  74                 	db	116	;'t'
   317  0003A9  69                 	db	105	;'i'
   318  0003AA  61                 	db	97	;'a'
   319  0003AB  6C                 	db	108	;'l'
   320  0003AC  69                 	db	105	;'i'
   321  0003AD  7A                 	db	122	;'z'
   322  0003AE  61                 	db	97	;'a'
   323  0003AF  74                 	db	116	;'t'
   324  0003B0  69                 	db	105	;'i'
   325  0003B1  6F                 	db	111	;'o'
   326  0003B2  6E                 	db	110	;'n'
   327  0003B3  0A                 	db	10
   328  0003B4  00                 	db	0
   329  0003B5                     STR_4:
   330  0003B5  4F                 	db	79	;'O'
   331  0003B6  74                 	db	116	;'t'
   332  0003B7  68                 	db	104	;'h'
   333  0003B8  65                 	db	101	;'e'
   334  0003B9  72                 	db	114	;'r'
   335  0003BA  20                 	db	32
   336  0003BB  46                 	db	70	;'F'
   337  0003BC  61                 	db	97	;'a'
   338  0003BD  69                 	db	105	;'i'
   339  0003BE  6C                 	db	108	;'l'
   340  0003BF  75                 	db	117	;'u'
   341  0003C0  72                 	db	114	;'r'
   342  0003C1  65                 	db	101	;'e'
   343  0003C2  0A                 	db	10
   344  0003C3  00                 	db	0
   345                           
   346                           ; #config settings
   347  0003C4  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	cinit
   350  001436                     __pcinit:
   351                           	opt stack 0
   352  001436                     start_initialization:
   353                           	opt stack 0
   354  001436                     __initialization:
   355                           	opt stack 0
   356                           
   357                           ; Clear objects allocated to BANK0 (87 bytes)
   358  001436  EE00  F060         	lfsr	0,__pbssBANK0
   359  00143A  0E57               	movlw	87
   360  00143C                     clear_0:
   361  00143C  6AEE               	clrf	postinc0,c
   362  00143E  06E8               	decf	wreg,f,c
   363  001440  E1FD               	bnz	clear_0
   364                           
   365                           ; Clear objects allocated to COMRAM (10 bytes)
   366  001442  EE00  F036         	lfsr	0,__pbssCOMRAM
   367  001446  0E0A               	movlw	10
   368  001448                     clear_1:
   369  001448  6AEE               	clrf	postinc0,c
   370  00144A  06E8               	decf	wreg,f,c
   371  00144C  E1FD               	bnz	clear_1
   372  00144E                     end_of_initialization:
   373                           	opt stack 0
   374  00144E                     __end_of__initialization:
   375                           	opt stack 0
   376  00144E  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   377  001450  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   378  001452  0E00               	movlw	low (__Lmediumconst shr (0+16))
   379  001454  6EF8               	movwf	tblptru,c
   380  001456  0100               	movlb	0
   381  001458  EFC5  F006         	goto	_main	;jump to C main() function
   382                           tblptru	equ	0xFF8
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	bssCOMRAM
   387  000036                     __pbssCOMRAM:
   388                           	opt stack 0
   389  000036                     ISR@LastTime:
   390                           	opt stack 0
   391  000036                     	ds	2
   392  000038                     ISR@NextTime:
   393                           	opt stack 0
   394  000038                     	ds	2
   395  00003A                     _SysTickCounter:
   396                           	opt stack 0
   397  00003A                     	ds	2
   398  00003C                     __PRIMASK_temp:
   399                           	opt stack 0
   400  00003C                     	ds	2
   401  00003E                     _Brightness:
   402                           	opt stack 0
   403  00003E                     	ds	1
   404  00003F                     _Location:
   405                           	opt stack 0
   406  00003F                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt stack 0
   414  000060                     _TMR_TimerArray:
   415                           	opt stack 0
   416  000060                     	ds	32
   417  000080                     ES_Timer_Tick_Resp@NewEvent:
   418                           	opt stack 0
   419  000080                     	ds	3
   420  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   421                           	opt stack 0
   422  000083                     	ds	2
   423  000085                     _Ready:
   424                           	opt stack 0
   425  000085                     	ds	2
   426  000087                     _TMR_ActiveFlags:
   427                           	opt stack 0
   428  000087                     	ds	2
   429  000089                     Analog_Service@MyPriority:
   430                           	opt stack 0
   431  000089                     	ds	1
   432  00008A                     Can_XmitService@MyPriority:
   433                           	opt stack 0
   434  00008A                     	ds	1
   435  00008B                     ES_Timer_Tick_Resp@NextTimer2Process:
   436                           	opt stack 0
   437  00008B                     	ds	1
   438  00008C                     _CurrentState:
   439                           	opt stack 0
   440  00008C                     	ds	1
   441  00008D                     _LastButtonState:
   442                           	opt stack 0
   443  00008D                     	ds	1
   444  00008E                     _MyPriority:
   445                           	opt stack 0
   446  00008E                     	ds	1
   447  00008F                     _TickCount:
   448                           	opt stack 0
   449  00008F                     	ds	1
   450  000090                     _Queue0:
   451                           	opt stack 0
   452  000090                     	ds	12
   453  00009C                     _Queue1:
   454                           	opt stack 0
   455  00009C                     	ds	12
   456  0000A8                     _Queue2:
   457                           	opt stack 0
   458  0000A8                     	ds	12
   459  0000B4                     ES_Run@ThisEvent:
   460                           	opt stack 0
   461  0000B4                     	ds	3
   462                           tblptru	equ	0xFF8
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           
   466                           	psect	cstackBANK0
   467  0000B7                     __pcstackBANK0:
   468                           	opt stack 0
   469  0000B7                     ?_printf:
   470                           	opt stack 0
   471  0000B7                     ?___awmod:
   472                           	opt stack 0
   473  0000B7                     XmitData@DataByte:
   474                           	opt stack 0
   475  0000B7                     ___lbmod@divisor:
   476                           	opt stack 0
   477  0000B7                     ES_GetMSBitSet@Val2Check:
   478                           	opt stack 0
   479  0000B7                     __HW_Timer_Init@Rate:
   480                           	opt stack 0
   481  0000B7                     ES_InitQueue@pBlock:
   482                           	opt stack 0
   483  0000B7                     ES_Timer_InitTimer@NewTime:
   484                           	opt stack 0
   485  0000B7                     printf@f:
   486                           	opt stack 0
   487  0000B7                     ___awmod@dividend:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x0
   491  0000B7                     	ds	1
   492  0000B8                     ___lbmod@dividend:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x1
   496  0000B8                     	ds	1
   497  0000B9                     ??_ES_Timer_InitTimer:
   498  0000B9                     ??_ES_GetMSBitSet:
   499  0000B9                     ES_InitQueue@BlockSize:
   500                           	opt stack 0
   501  0000B9                     ___lbmod@counter:
   502                           	opt stack 0
   503  0000B9                     ES_Timer_Init@Rate:
   504                           	opt stack 0
   505  0000B9                     printf@ap:
   506                           	opt stack 0
   507  0000B9                     ___awmod@divisor:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x2
   511  0000B9                     	ds	1
   512  0000BA                     ___lbmod@rem:
   513                           	opt stack 0
   514  0000BA                     ES_InitQueue@pThisQueue:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x3
   518  0000BA                     	ds	1
   519  0000BB                     ES_Timer_InitTimer@Num:
   520                           	opt stack 0
   521  0000BB                     printf@c:
   522                           	opt stack 0
   523  0000BB                     ___awmod@counter:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x4
   527  0000BB                     	ds	1
   528  0000BC                     InitializeButtonDebounce@Priority:
   529                           	opt stack 0
   530  0000BC                     ___awmod@sign:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x5
   534  0000BC                     	ds	1
   535  0000BD                     ?___wmul:
   536                           	opt stack 0
   537  0000BD                     ___wmul@multiplier:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x6
   541  0000BD                     	ds	1
   542  0000BE                     ES_GetMSBitSet@ReturnVal:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x7
   546  0000BE                     	ds	1
   547  0000BF                     ES_GetMSBitSet@Nybble2Test:
   548                           	opt stack 0
   549  0000BF                     ___wmul@multiplicand:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x8
   553  0000BF                     	ds	1
   554  0000C0                     ES_GetMSBitSet@LoopCntr:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x9
   558  0000C0                     	ds	1
   559  0000C1                     ___wmul@product:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0xA
   563  0000C1                     	ds	2
   564  0000C3                     ES_EnQueueFIFO@pBlock:
   565                           	opt stack 0
   566  0000C3                     ES_DeQueue@pBlock:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0xC
   570  0000C3                     	ds	2
   571  0000C5                     ES_DeQueue@pReturnEvent:
   572                           	opt stack 0
   573  0000C5                     ES_EnQueueFIFO@Event2Add:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0xE
   577  0000C5                     	ds	2
   578  0000C7                     ??_ES_DeQueue:
   579                           
   580                           ; 1 bytes @ 0x10
   581  0000C7                     	ds	1
   582  0000C8                     ??_ES_EnQueueFIFO:
   583                           
   584                           ; 1 bytes @ 0x11
   585  0000C8                     	ds	1
   586  0000C9                     ES_DeQueue@SaveCrit:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x12
   590  0000C9                     	ds	1
   591  0000CA                     ES_DeQueue@NumLeft:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x13
   595  0000CA                     	ds	1
   596  0000CB                     ES_EnQueueFIFO@SaveCrit:
   597                           	opt stack 0
   598  0000CB                     ES_DeQueue@pThisQueue:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x14
   602  0000CB                     	ds	1
   603  0000CC                     ES_EnQueueFIFO@pThisQueue:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x15
   607  0000CC                     	ds	2
   608  0000CE                     ES_PostAll@ThisEvent:
   609                           	opt stack 0
   610  0000CE                     ES_PostToService@TheEvent:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x17
   614  0000CE                     	ds	3
   615  0000D1                     ??_ES_PostToService:
   616  0000D1                     ??_ES_PostAll:
   617                           
   618                           ; 1 bytes @ 0x1A
   619  0000D1                     	ds	2
   620  0000D3                     ES_PostAll@i:
   621                           	opt stack 0
   622  0000D3                     ES_PostToService@WhichService:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x1C
   626  0000D3                     	ds	1
   627  0000D4                     ?_RunCan_XmitService:
   628                           	opt stack 0
   629  0000D4                     ?_RunAnalogService:
   630                           	opt stack 0
   631  0000D4                     ?_RunButtonDebounceSM:
   632                           	opt stack 0
   633  0000D4                     PostButtonDebounceSM@ThisEvent:
   634                           	opt stack 0
   635  0000D4                     RunButtonDebounceSM@ThisEvent:
   636                           	opt stack 0
   637  0000D4                     InitCan_XmitService@ThisEvent:
   638                           	opt stack 0
   639  0000D4                     RunCan_XmitService@ThisEvent:
   640                           	opt stack 0
   641  0000D4                     InitAnalogService@ThisEvent:
   642                           	opt stack 0
   643  0000D4                     PostAnalogService@ThisEvent:
   644                           	opt stack 0
   645  0000D4                     RunAnalogService@ThisEvent:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x1D
   649  0000D4                     	ds	3
   650  0000D7                     ??_RunCan_XmitService:
   651  0000D7                     ??_ES_Timer_Tick_Resp:
   652  0000D7                     CheckButtonEvents@ReturnVal:
   653                           	opt stack 0
   654  0000D7                     InitCan_XmitService@Priority:
   655                           	opt stack 0
   656  0000D7                     InitAnalogService@Priority:
   657                           	opt stack 0
   658  0000D7                     RunButtonDebounceSM@ReturnEvent:
   659                           	opt stack 0
   660  0000D7                     RunAnalogService@ReturnEvent:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x20
   664  0000D7                     	ds	1
   665  0000D8                     ES_Initialize@NewRate:
   666                           	opt stack 0
   667  0000D8                     CheckButtonEvents@ThisEvent:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x21
   671  0000D8                     	ds	1
   672  0000D9                     RunCan_XmitService@ReturnEvent:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x22
   676  0000D9                     	ds	1
   677  0000DA                     ES_Initialize@i:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x23
   681  0000DA                     	ds	1
   682  0000DB                     CheckButtonEvents@CurrentButtonState:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x24
   686  0000DB                     	ds	1
   687  0000DC                     ES_CheckUserEvents@i:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x25
   691  0000DC                     	ds	1
   692  0000DD                     ??_ES_Run:
   693                           
   694                           ; 1 bytes @ 0x26
   695  0000DD                     	ds	4
   696  0000E1                     ES_Run@HighestPrior:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x2A
   700  0000E1                     	ds	1
   701  0000E2                     main@ErrorType:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x2B
   705  0000E2                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           
   710                           	psect	cstackCOMRAM
   711  000001                     __pcstackCOMRAM:
   712                           	opt stack 0
   713  000001                     ?i2___awmod:
   714                           	opt stack 0
   715  000001                     i2ES_Timer_InitTimer@NewTime:
   716                           	opt stack 0
   717  000001                     i2___awmod@dividend:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x0
   721  000001                     	ds	2
   722  000003                     ??i2_ES_Timer_InitTimer:
   723  000003                     i2___awmod@divisor:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x2
   727  000003                     	ds	2
   728  000005                     i2ES_Timer_InitTimer@Num:
   729                           	opt stack 0
   730  000005                     i2___awmod@counter:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x4
   734  000005                     	ds	1
   735  000006                     i2___awmod@sign:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x5
   739  000006                     	ds	1
   740  000007                     ?i2___wmul:
   741                           	opt stack 0
   742  000007                     i2___wmul@multiplier:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x6
   746  000007                     	ds	2
   747  000009                     i2___wmul@multiplicand:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x8
   751  000009                     	ds	2
   752  00000B                     i2___wmul@product:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0xA
   756  00000B                     	ds	2
   757  00000D                     i2ES_EnQueueFIFO@pBlock:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0xC
   761  00000D                     	ds	2
   762  00000F                     i2ES_EnQueueFIFO@Event2Add:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0xE
   766  00000F                     	ds	3
   767  000012                     ??i2_ES_EnQueueFIFO:
   768                           
   769                           ; 1 bytes @ 0x11
   770  000012                     	ds	3
   771  000015                     i2ES_EnQueueFIFO@SaveCrit:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x14
   775  000015                     	ds	1
   776  000016                     i2ES_EnQueueFIFO@pThisQueue:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x15
   780  000016                     	ds	2
   781  000018                     i2ES_PostToService@TheEvent:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x17
   785  000018                     	ds	3
   786  00001B                     ??i2_ES_PostToService:
   787                           
   788                           ; 1 bytes @ 0x1A
   789  00001B                     	ds	2
   790  00001D                     i2ES_PostToService@WhichService:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x1C
   794  00001D                     	ds	1
   795  00001E                     PostCan_XmitService@ThisEvent:
   796                           	opt stack 0
   797                           
   798                           ; 3 bytes @ 0x1D
   799  00001E                     	ds	3
   800  000021                     ??_AnalogISR:
   801  000021                     
   802                           ; 1 bytes @ 0x20
   803  000021                     	ds	2
   804  000023                     AnalogISR@Event2Post:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x22
   808  000023                     	ds	3
   809  000026                     ??_ISR:
   810                           
   811                           ; 1 bytes @ 0x25
   812  000026                     	ds	16
   813                           tblptru	equ	0xFF8
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           
   817 ;;
   818 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   819 ;;
   820 ;; *************** function _main *****************
   821 ;; Defined at:
   822 ;;		line 25 in file "main.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  ErrorType       1   43[BANK0 ] enum E15645
   827 ;; Return value:  Size  Location     Type
   828 ;;                  2  364[None  ] int 
   829 ;; Registers used:
   830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   836 ;;      Params:         0       0       0       0
   837 ;;      Locals:         0       1       0       0
   838 ;;      Temps:          0       0       0       0
   839 ;;      Totals:         0       1       0       0
   840 ;;Total ram usage:        1 bytes
   841 ;; Hardware stack levels required when called:   13
   842 ;; This function calls:
   843 ;;		_ES_Initialize
   844 ;;		_ES_Run
   845 ;;		_printf
   846 ;; This function is called by:
   847 ;;		Startup code after reset
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text0
   852  000D8A                     __ptext0:
   853                           	opt stack 0
   854  000D8A                     _main:
   855                           	opt stack 18
   856                           
   857                           ;main.c: 27: ADCON1 = 0x0D;
   858                           
   859                           ;incstack = 0
   860  000D8A  0E0D               	movlw	13
   861  000D8C  6EC1               	movwf	4033,c	;volatile
   862                           
   863                           ;main.c: 34: ES_Return_t ErrorType;
   864                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   865  000D8E  0E9C               	movlw	156
   866  000D90  0100               	movlb	0	; () banked
   867  000D92  6FD9               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   868  000D94  0E3F               	movlw	63
   869  000D96  6FD8               	movwf	ES_Initialize@NewRate& (0+255),b
   870  000D98  EC7C  F003         	call	_ES_Initialize	;wreg free
   871  000D9C  0100               	movlb	0	; () banked
   872  000D9E  6FE2               	movwf	main@ErrorType& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875                           ;main.c: 51: if ( ErrorType == Success ) {
   876  000DA0  0100               	movlb	0	; () banked
   877  000DA2  51E2               	movf	main@ErrorType& (0+255),w,b
   878  000DA4  0100               	movlb	0	; () banked
   879  000DA6  A4D8               	btfss	status,2,c
   880  000DA8  D029               	goto	l2972
   881                           
   882                           ; BSR set to: 0
   883                           ;main.c: 53: ErrorType = ES_Run();
   884  000DAA  EC02  F003         	call	_ES_Run	;wreg free
   885  000DAE  0100               	movlb	0	; () banked
   886  000DB0  6FE2               	movwf	main@ErrorType& (0+255),b
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 55: }
   890                           ;main.c: 57: switch (ErrorType){
   891  000DB2  D024               	goto	l2972
   892  000DB4                     l2962:
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 59: printf("Failed on attempt to Post\n");
   896  000DB4  0E6B               	movlw	low STR_1
   897  000DB6  0100               	movlb	0	; () banked
   898  000DB8  6FB7               	movwf	printf@f& (0+255),b
   899  000DBA  0E03               	movlw	high STR_1
   900  000DBC  0100               	movlb	0	; () banked
   901  000DBE  6FB8               	movwf	(printf@f+1)& (0+255),b
   902  000DC0  ECA5  F009         	call	_printf	;wreg free
   903                           
   904                           ;main.c: 60: break;
   905  000DC4  D027               	goto	l372
   906  000DC6                     l2964:
   907                           
   908                           ;main.c: 62: printf("Failed on NULL pointer\n");
   909  000DC6  0E86               	movlw	low STR_2
   910  000DC8  0100               	movlb	0	; () banked
   911  000DCA  6FB7               	movwf	printf@f& (0+255),b
   912  000DCC  0E03               	movlw	high STR_2
   913  000DCE  0100               	movlb	0	; () banked
   914  000DD0  6FB8               	movwf	(printf@f+1)& (0+255),b
   915  000DD2  ECA5  F009         	call	_printf	;wreg free
   916                           
   917                           ;main.c: 63: break;
   918  000DD6  D01E               	goto	l372
   919  000DD8                     l2966:
   920                           
   921                           ;main.c: 65: printf("Failed Initialization\n");
   922  000DD8  0E9E               	movlw	low STR_3
   923  000DDA  0100               	movlb	0	; () banked
   924  000DDC  6FB7               	movwf	printf@f& (0+255),b
   925  000DDE  0E03               	movlw	high STR_3
   926  000DE0  0100               	movlb	0	; () banked
   927  000DE2  6FB8               	movwf	(printf@f+1)& (0+255),b
   928  000DE4  ECA5  F009         	call	_printf	;wreg free
   929                           
   930                           ;main.c: 66: break;
   931  000DE8  D015               	goto	l372
   932  000DEA                     l2968:
   933                           
   934                           ;main.c: 68: printf("Other Failure\n");
   935  000DEA  0EB5               	movlw	low STR_4
   936  000DEC  0100               	movlb	0	; () banked
   937  000DEE  6FB7               	movwf	printf@f& (0+255),b
   938  000DF0  0E03               	movlw	high STR_4
   939  000DF2  0100               	movlb	0	; () banked
   940  000DF4  6FB8               	movwf	(printf@f+1)& (0+255),b
   941  000DF6  ECA5  F009         	call	_printf	;wreg free
   942                           
   943                           ;main.c: 70: }
   944                           
   945                           ;main.c: 69: break;
   946  000DFA  D00C               	goto	l372
   947  000DFC                     l2972:
   948  000DFC  0100               	movlb	0	; () banked
   949  000DFE  51E2               	movf	main@ErrorType& (0+255),w,b
   950                           
   951                           ; Switch size 1, requested type "space"
   952                           ; Number of cases is 3, Range of values is 1 to 5
   953                           ; switch strategies available:
   954                           ; Name         Instructions Cycles
   955                           ; simple_byte           10     6 (average)
   956                           ;	Chosen strategy is simple_byte
   957  000E00  0A01               	xorlw	1	; case 1
   958  000E02  B4D8               	btfsc	status,2,c
   959  000E04  D7D7               	goto	l2962
   960  000E06  0A02               	xorlw	2	; case 3
   961  000E08  B4D8               	btfsc	status,2,c
   962  000E0A  D7DD               	goto	l2964
   963  000E0C  0A06               	xorlw	6	; case 5
   964  000E0E  B4D8               	btfsc	status,2,c
   965  000E10  D7E3               	goto	l2966
   966  000E12  D7EB               	goto	l2968
   967  000E14                     l372:
   968                           
   969                           ;main.c: 72: ;
   970  000E14  D7FF               	goto	l372
   971  000E16                     __end_of_main:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _printf *****************
   979 ;; Defined at:
   980 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   983 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  tmpval          4    0        struct .
   986 ;;  cp              3    0        PTR const unsigned char 
   987 ;;  ap              2    2[BANK0 ] PTR void [1]
   988 ;;		 -> ?_printf(2), 
   989 ;;  len             2    0        unsigned int 
   990 ;;  val             2    0        unsigned int 
   991 ;;  c               1    4[BANK0 ] char 
   992 ;;  flag            1    0        unsigned char 
   993 ;;  prec            1    0        char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  2    0[BANK0 ] int 
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1003 ;;      Params:         0       2       0       0
  1004 ;;      Locals:         0       3       0       0
  1005 ;;      Temps:          0       0       0       0
  1006 ;;      Totals:         0       5       0       0
  1007 ;;Total ram usage:        5 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    7
  1010 ;; This function calls:
  1011 ;;		_putch
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text1
  1018  00134A                     __ptext1:
  1019                           	opt stack 0
  1020  00134A                     _printf:
  1021                           	opt stack 23
  1022                           
  1023                           ;doprnt.c: 466: va_list ap;
  1024                           ;doprnt.c: 499: signed char c;
  1025                           ;doprnt.c: 506: signed char prec;
  1026                           ;doprnt.c: 508: unsigned char flag;
  1027                           ;doprnt.c: 523: union {
  1028                           ;doprnt.c: 524: unsigned long vd;
  1029                           ;doprnt.c: 525: double integ;
  1030                           ;doprnt.c: 526: } tmpval;
  1031                           ;doprnt.c: 528: unsigned int val;
  1032                           ;doprnt.c: 529: unsigned len;
  1033                           ;doprnt.c: 530: const char * cp;
  1034                           ;doprnt.c: 533: *ap = __va_start();
  1035                           
  1036                           ;incstack = 0
  1037  00134A  0EB9               	movlw	low (?_printf+2)
  1038  00134C  0100               	movlb	0	; () banked
  1039  00134E  6FB9               	movwf	printf@ap& (0+255),b
  1040  001350  0E00               	movlw	high (?_printf+2)
  1041  001352  0100               	movlb	0	; () banked
  1042  001354  6FBA               	movwf	(printf@ap+1)& (0+255),b
  1043                           
  1044                           ;doprnt.c: 536: while(c = *f++) {
  1045  001356  D004               	goto	l2808
  1046  001358                     l2806:
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;doprnt.c: 540: {
  1050                           ;doprnt.c: 541: (putch(c) );
  1051  001358  0100               	movlb	0	; () banked
  1052  00135A  51BB               	movf	printf@c& (0+255),w,b
  1053  00135C  ECA6  F00A         	call	_putch
  1054  001360                     l2808:
  1055  001360  C0B7  FFF6         	movff	printf@f,tblptrl
  1056  001364  C0B8  FFF7         	movff	printf@f+1,tblptrh
  1057  001368  0100               	movlb	0	; () banked
  1058  00136A  4BB7               	infsnz	printf@f& (0+255),f,b
  1059  00136C  2BB8               	incf	(printf@f+1)& (0+255),f,b
  1060  00136E                     	if	0	;tblptru may be non-zero
  1061  00136E                     	endif
  1062  00136E                     	if	0	;tblptru may be non-zero
  1063  00136E                     	endif
  1064  00136E  0008               	tblrd		*
  1065  001370  CFF5 F0BB          	movff	tablat,printf@c
  1066  001374  0100               	movlb	0	; () banked
  1067  001376  51BB               	movf	printf@c& (0+255),w,b
  1068  001378  B4D8               	btfsc	status,2,c
  1069  00137A  0012               	return	
  1070  00137C  D7ED               	goto	l2806
  1071  00137E                     __end_of_printf:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           status	equ	0xFD8
  1080                           
  1081 ;; *************** function _putch *****************
  1082 ;; Defined at:
  1083 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  c               1    wreg     unsigned char 
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;  c               1    0[COMRAM] unsigned char 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1097 ;;      Params:         0       0       0       0
  1098 ;;      Locals:         0       0       0       0
  1099 ;;      Temps:          0       0       0       0
  1100 ;;      Totals:         0       0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    6
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_printf
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text2
  1112  00154C                     __ptext2:
  1113                           	opt stack 0
  1114  00154C                     _putch:
  1115                           	opt stack 23
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;incstack = 0
  1119  00154C  0012               	return		;funcret
  1120  00154E                     __end_of_putch:
  1121                           	opt stack 0
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _ES_Run *****************
  1131 ;; Defined at:
  1132 ;;		line 277 in file "ES_Framework.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  HighestPrior    1   42[BANK0 ] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      enum E15493
  1139 ;; Registers used:
  1140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1146 ;;      Params:         0       0       0       0
  1147 ;;      Locals:         0       1       0       0
  1148 ;;      Temps:          0       4       0       0
  1149 ;;      Totals:         0       5       0       0
  1150 ;;Total ram usage:        5 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:   12
  1153 ;; This function calls:
  1154 ;;		_ES_CheckUserEvents
  1155 ;;		_ES_DeQueue
  1156 ;;		_ES_GetMSBitSet
  1157 ;;		_RunAnalogService
  1158 ;;		_RunButtonDebounceSM
  1159 ;;		_RunCan_XmitService
  1160 ;;		__HW_Process_Pending_Ints
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text3
  1167  000604                     __ptext3:
  1168                           	opt stack 0
  1169  000604                     _ES_Run:
  1170                           	opt stack 18
  1171                           
  1172                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1173                           
  1174                           ;incstack = 0
  1175                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1176                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1177                           ;ES_Framework.c: 282: while(1){
  1178  000604  D06B               	goto	l2766
  1179  000606                     l2754:
  1180                           
  1181                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1182  000606  C085  F0B7         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1183  00060A  C086  F0B8         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1184  00060E  ECD4  F005         	call	_ES_GetMSBitSet	;wreg free
  1185  000612  0100               	movlb	0	; () banked
  1186  000614  6FE1               	movwf	ES_Run@HighestPrior& (0+255),b
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1190  000616  0100               	movlb	0	; () banked
  1191  000618  51E1               	movf	ES_Run@HighestPrior& (0+255),w,b
  1192  00061A  0D03               	mullw	3
  1193  00061C  0E5C               	movlw	low _EventQueues
  1194  00061E  24F3               	addwf	prodl,w,c
  1195  000620  6EF6               	movwf	tblptrl,c
  1196  000622  0E03               	movlw	high _EventQueues
  1197  000624  20F4               	addwfc	prodh,w,c
  1198  000626  6EF7               	movwf	tblptrh,c
  1199  000628                     	if	0	;There are less than 3 active tblptr bytes
  1200  000628                     	endif
  1201  000628  0009               	tblrd		*+
  1202  00062A  CFF5 F0C3          	movff	tablat,ES_DeQueue@pBlock
  1203  00062E  000A               	tblrd		*-
  1204  000630  CFF5 F0C4          	movff	tablat,ES_DeQueue@pBlock+1
  1205  000634  0EB4               	movlw	low ES_Run@ThisEvent
  1206  000636  0100               	movlb	0	; () banked
  1207  000638  6FC5               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1208  00063A  0E00               	movlw	high ES_Run@ThisEvent
  1209  00063C  0100               	movlb	0	; () banked
  1210  00063E  6FC6               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1211  000640  ECE3  F001         	call	_ES_DeQueue	;wreg free
  1212  000644  0900               	iorlw	0
  1213  000646  A4D8               	btfss	status,2,c
  1214  000648  D01F               	goto	l2760
  1215                           
  1216                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1217  00064A  0100               	movlb	0	; () banked
  1218  00064C  51E1               	movf	ES_Run@HighestPrior& (0+255),w,b
  1219  00064E  0D02               	mullw	2
  1220  000650  0E01               	movlw	low _BitNum2SetMask
  1221  000652  24F3               	addwf	prodl,w,c
  1222  000654  6EF6               	movwf	tblptrl,c
  1223  000656  0E03               	movlw	high _BitNum2SetMask
  1224  000658  20F4               	addwfc	prodh,w,c
  1225  00065A  6EF7               	movwf	tblptrh,c
  1226  00065C                     	if	0	;There are less than 3 active tblptr bytes
  1227  00065C                     	endif
  1228  00065C  0009               	tblrd		*+
  1229  00065E  CFF5 F0DD          	movff	tablat,??_ES_Run
  1230  000662  0009               	tblrd		*+
  1231  000664  CFF5 F0DE          	movff	tablat,??_ES_Run+1
  1232  000668  0100               	movlb	0	; () banked
  1233  00066A  1DDD               	comf	??_ES_Run& (0+255),w,b
  1234  00066C  0100               	movlb	0	; () banked
  1235  00066E  6FDF               	movwf	(??_ES_Run+2)& (0+255),b
  1236  000670  0100               	movlb	0	; () banked
  1237  000672  1DDE               	comf	(??_ES_Run+1)& (0+255),w,b
  1238  000674  0100               	movlb	0	; () banked
  1239  000676  6FE0               	movwf	(??_ES_Run+3)& (0+255),b
  1240  000678  0100               	movlb	0	; () banked
  1241  00067A  51DF               	movf	(??_ES_Run+2)& (0+255),w,b
  1242  00067C  0100               	movlb	0	; () banked
  1243  00067E  1785               	andwf	_Ready& (0+255),f,b
  1244  000680  0100               	movlb	0	; () banked
  1245  000682  51E0               	movf	(??_ES_Run+3)& (0+255),w,b
  1246  000684  0100               	movlb	0	; () banked
  1247  000686  1786               	andwf	(_Ready+1)& (0+255),f,b
  1248  000688                     l2760:
  1249                           
  1250                           ;ES_Framework.c: 291: }
  1251                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1252  000688  C0B4  F0D4         	movff	ES_Run@ThisEvent,RunAnalogService@ThisEvent
  1253  00068C  C0B5  F0D5         	movff	ES_Run@ThisEvent+1,RunAnalogService@ThisEvent+1
  1254  000690  C0B6  F0D6         	movff	ES_Run@ThisEvent+2,RunAnalogService@ThisEvent+2
  1255  000694  0100               	movlb	0	; () banked
  1256  000696  51E1               	movf	ES_Run@HighestPrior& (0+255),w,b
  1257  000698  0D04               	mullw	4
  1258  00069A  0E02               	movlw	2
  1259  00069C  26F3               	addwf	prodl,f,c
  1260  00069E  0E00               	movlw	0
  1261  0006A0  22F4               	addwfc	prodh,f,c
  1262  0006A2  0E50               	movlw	low _ServDescList
  1263  0006A4  24F3               	addwf	prodl,w,c
  1264  0006A6  6EF6               	movwf	tblptrl,c
  1265  0006A8  0E03               	movlw	high _ServDescList
  1266  0006AA  20F4               	addwfc	prodh,w,c
  1267  0006AC  6EF7               	movwf	tblptrh,c
  1268  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  1269  0006AE                     	endif
  1270  0006AE  D801               	call	u1658
  1271  0006B0  D00C               	goto	u1659
  1272  0006B2                     u1658:
  1273  0006B2  0005               	push	
  1274  0006B4  6EFA               	movwf	pclath,c
  1275  0006B6  0009               	tblrd		*+
  1276  0006B8  50F5               	movf	tablat,w,c
  1277  0006BA  6EFD               	movwf	tosl,c
  1278  0006BC  0009               	tblrd		*+
  1279  0006BE  50F5               	movf	tablat,w,c
  1280  0006C0  6EFE               	movwf	tosh,c
  1281  0006C2  50F8               	movf	tblptru,w,c
  1282  0006C4  6EFF               	movwf	tosu,c
  1283  0006C6  50FA               	movf	pclath,w,c
  1284  0006C8  0012               	return		;indir
  1285  0006CA                     u1659:
  1286  0006CA  0ED4               	movlw	low ?_RunAnalogService
  1287  0006CC  6ED9               	movwf	fsr2l,c
  1288  0006CE  0E00               	movlw	high ?_RunAnalogService
  1289  0006D0  6EDA               	movwf	fsr2h,c
  1290  0006D2  50DF               	movf	indf2,w,c
  1291  0006D4  B4D8               	btfsc	status,2,c
  1292  0006D6  D002               	goto	l2766
  1293                           
  1294                           ;ES_Framework.c: 293: return FailedRun;
  1295  0006D8  0E02               	movlw	2
  1296  0006DA  0012               	return	
  1297  0006DC                     l2766:
  1298  0006DC  EC5D  F00A         	call	__HW_Process_Pending_Ints	;wreg free
  1299  0006E0  0900               	iorlw	0
  1300  0006E2  B4D8               	btfsc	status,2,c
  1301  0006E4  D006               	goto	l2770
  1302  0006E6  0100               	movlb	0	; () banked
  1303  0006E8  5185               	movf	_Ready& (0+255),w,b
  1304  0006EA  0100               	movlb	0	; () banked
  1305  0006EC  1186               	iorwf	(_Ready+1)& (0+255),w,b
  1306  0006EE  A4D8               	btfss	status,2,c
  1307  0006F0  D78A               	goto	l2754
  1308  0006F2                     l2770:
  1309                           
  1310                           ;ES_Framework.c: 294: }
  1311                           ;ES_Framework.c: 295: }
  1312                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1313  0006F2  EC01  F009         	call	_ES_CheckUserEvents	;wreg free
  1314  0006F6  D7F2               	goto	l2766
  1315  0006F8                     __end_of_ES_Run:
  1316                           	opt stack 0
  1317                           tosu	equ	0xFFF
  1318                           tosh	equ	0xFFE
  1319                           tosl	equ	0xFFD
  1320                           pclath	equ	0xFFA
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           indf2	equ	0xFDF
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function __HW_Process_Pending_Ints *****************
  1335 ;; Defined at:
  1336 ;;		line 225 in file "ES_Port.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      unsigned char 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1350 ;;      Params:         0       0       0       0
  1351 ;;      Locals:         0       0       0       0
  1352 ;;      Temps:          0       0       0       0
  1353 ;;      Totals:         0       0       0       0
  1354 ;;Total ram usage:        0 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:   11
  1357 ;; This function calls:
  1358 ;;		_ES_Timer_Tick_Resp
  1359 ;; This function is called by:
  1360 ;;		_ES_Run
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text4
  1365  0014BA                     __ptext4:
  1366                           	opt stack 0
  1367  0014BA                     __HW_Process_Pending_Ints:
  1368                           	opt stack 18
  1369                           
  1370                           ;ES_Port.c: 227: while (TickCount > 0)
  1371                           
  1372                           ;incstack = 0
  1373  0014BA  D004               	goto	l2608
  1374  0014BC                     l2604:
  1375                           
  1376                           ;ES_Port.c: 228: {
  1377                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1378  0014BC  EC77  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1379                           
  1380                           ;ES_Port.c: 231: TickCount--;
  1381  0014C0  0100               	movlb	0	; () banked
  1382  0014C2  078F               	decf	_TickCount& (0+255),f,b	;volatile
  1383  0014C4                     l2608:
  1384  0014C4  0100               	movlb	0	; () banked
  1385  0014C6  518F               	movf	_TickCount& (0+255),w,b	;volatile
  1386  0014C8  A4D8               	btfss	status,2,c
  1387  0014CA  D7F8               	goto	l2604
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;ES_Port.c: 232: }
  1391                           ;ES_Port.c: 234: return 1;
  1392                           
  1393                           ; BSR set to: 0
  1394  0014CC  0E01               	movlw	1
  1395  0014CE  0012               	return	
  1396  0014D0                     __end_of__HW_Process_Pending_Ints:
  1397                           	opt stack 0
  1398                           tosu	equ	0xFFF
  1399                           tosh	equ	0xFFE
  1400                           tosl	equ	0xFFD
  1401                           pclath	equ	0xFFA
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           prodh	equ	0xFF4
  1407                           prodl	equ	0xFF3
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           indf2	equ	0xFDF
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _ES_Timer_Tick_Resp *****************
  1416 ;; Defined at:
  1417 ;;		line 284 in file "ES_Timers.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1431 ;;      Params:         0       0       0       0
  1432 ;;      Locals:         0       0       0       0
  1433 ;;      Temps:          0       4       0       0
  1434 ;;      Totals:         0       4       0       0
  1435 ;;Total ram usage:        4 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:   10
  1438 ;; This function calls:
  1439 ;;		Absolute function
  1440 ;;		_ES_GetMSBitSet
  1441 ;;		_PostAnalogService
  1442 ;;		_PostButtonDebounceSM
  1443 ;; This function is called by:
  1444 ;;		__HW_Process_Pending_Ints
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text5
  1449  0004EE                     __ptext5:
  1450                           	opt stack 0
  1451  0004EE                     _ES_Timer_Tick_Resp:
  1452                           	opt stack 18
  1453                           
  1454                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1455                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1456                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1457                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;incstack = 0
  1461  0004EE  0100               	movlb	0	; () banked
  1462  0004F0  5187               	movf	_TMR_ActiveFlags& (0+255),w,b
  1463  0004F2  0100               	movlb	0	; () banked
  1464  0004F4  1188               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1465  0004F6  B4D8               	btfsc	status,2,c
  1466  0004F8  0012               	return	
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;ES_Timers.c: 291: {
  1470                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1471  0004FA  C087  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1472  0004FE  C088  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1473  000502                     l2368:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1477  000502  C083  F0B7         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1478  000506  C084  F0B8         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1479  00050A  ECD4  F005         	call	_ES_GetMSBitSet	;wreg free
  1480  00050E  0100               	movlb	0	; () banked
  1481  000510  6F8B               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1485  000512  0100               	movlb	0	; () banked
  1486  000514  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1487  000516  0D02               	mullw	2
  1488  000518  0E60               	movlw	low _TMR_TimerArray
  1489  00051A  24F3               	addwf	prodl,w,c
  1490  00051C  6ED9               	movwf	fsr2l,c
  1491  00051E  0E00               	movlw	high _TMR_TimerArray
  1492  000520  20F4               	addwfc	prodh,w,c
  1493  000522  6EDA               	movwf	fsr2h,c
  1494  000524  06DE               	decf	postinc2,f,c
  1495  000526  0E00               	movlw	0
  1496  000528  5ADD               	subwfb	postdec2,f,c
  1497  00052A  50DE               	movf	postinc2,w,c
  1498  00052C  10DE               	iorwf	postinc2,w,c
  1499  00052E  A4D8               	btfss	status,2,c
  1500  000530  D043               	goto	l2380
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;ES_Timers.c: 299: {
  1504                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1505  000532  0E03               	movlw	3
  1506  000534  0100               	movlb	0	; () banked
  1507  000536  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1511  000538  C08B  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1512  00053C  0100               	movlb	0	; () banked
  1513  00053E  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1517  000540  C080  F0D4         	movff	ES_Timer_Tick_Resp@NewEvent,PostAnalogService@ThisEvent
  1518  000544  C081  F0D5         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostAnalogService@ThisEvent+1
  1519  000548  C082  F0D6         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostAnalogService@ThisEvent+2
  1520  00054C  0100               	movlb	0	; () banked
  1521  00054E  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1522  000550  0D02               	mullw	2
  1523  000552  0E21               	movlw	low _Timer2PostFunc
  1524  000554  24F3               	addwf	prodl,w,c
  1525  000556  6EF6               	movwf	tblptrl,c
  1526  000558  0E03               	movlw	high _Timer2PostFunc
  1527  00055A  20F4               	addwfc	prodh,w,c
  1528  00055C  6EF7               	movwf	tblptrh,c
  1529  00055E                     	if	0	;There are less than 3 active tblptr bytes
  1530  00055E                     	endif
  1531  00055E  D801               	call	u1298
  1532  000560  D00C               	goto	l2378
  1533  000562                     u1298:
  1534  000562  0005               	push	
  1535  000564  6EFA               	movwf	pclath,c
  1536  000566  0009               	tblrd		*+
  1537  000568  50F5               	movf	tablat,w,c
  1538  00056A  6EFD               	movwf	tosl,c
  1539  00056C  0009               	tblrd		*+
  1540  00056E  50F5               	movf	tablat,w,c
  1541  000570  6EFE               	movwf	tosh,c
  1542  000572  50F8               	movf	tblptru,w,c
  1543  000574  6EFF               	movwf	tosu,c
  1544  000576  50FA               	movf	pclath,w,c
  1545  000578  0012               	return		;indir
  1546  00057A                     l2378:
  1547                           
  1548                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1549  00057A  0100               	movlb	0	; () banked
  1550  00057C  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1551  00057E  0D02               	mullw	2
  1552  000580  0E01               	movlw	low _BitNum2SetMask
  1553  000582  24F3               	addwf	prodl,w,c
  1554  000584  6EF6               	movwf	tblptrl,c
  1555  000586  0E03               	movlw	high _BitNum2SetMask
  1556  000588  20F4               	addwfc	prodh,w,c
  1557  00058A  6EF7               	movwf	tblptrh,c
  1558  00058C                     	if	0	;There are less than 3 active tblptr bytes
  1559  00058C                     	endif
  1560  00058C  0009               	tblrd		*+
  1561  00058E  CFF5 F0D7          	movff	tablat,??_ES_Timer_Tick_Resp
  1562  000592  0009               	tblrd		*+
  1563  000594  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1564  000598  0100               	movlb	0	; () banked
  1565  00059A  1DD7               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1566  00059C  0100               	movlb	0	; () banked
  1567  00059E  6FD9               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1568  0005A0  0100               	movlb	0	; () banked
  1569  0005A2  1DD8               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1570  0005A4  0100               	movlb	0	; () banked
  1571  0005A6  6FDA               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1572  0005A8  0100               	movlb	0	; () banked
  1573  0005AA  51D9               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1574  0005AC  0100               	movlb	0	; () banked
  1575  0005AE  1787               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1576  0005B0  0100               	movlb	0	; () banked
  1577  0005B2  51DA               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1578  0005B4  0100               	movlb	0	; () banked
  1579  0005B6  1788               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1580  0005B8                     l2380:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;ES_Timers.c: 306: }
  1584                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1585  0005B8  0100               	movlb	0	; () banked
  1586  0005BA  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1587  0005BC  0D02               	mullw	2
  1588  0005BE  0E01               	movlw	low _BitNum2SetMask
  1589  0005C0  24F3               	addwf	prodl,w,c
  1590  0005C2  6EF6               	movwf	tblptrl,c
  1591  0005C4  0E03               	movlw	high _BitNum2SetMask
  1592  0005C6  20F4               	addwfc	prodh,w,c
  1593  0005C8  6EF7               	movwf	tblptrh,c
  1594  0005CA                     	if	0	;There are less than 3 active tblptr bytes
  1595  0005CA                     	endif
  1596  0005CA  0009               	tblrd		*+
  1597  0005CC  CFF5 F0D7          	movff	tablat,??_ES_Timer_Tick_Resp
  1598  0005D0  0009               	tblrd		*+
  1599  0005D2  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1600  0005D6  0100               	movlb	0	; () banked
  1601  0005D8  1DD7               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1602  0005DA  0100               	movlb	0	; () banked
  1603  0005DC  6FD9               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1604  0005DE  0100               	movlb	0	; () banked
  1605  0005E0  1DD8               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1606  0005E2  0100               	movlb	0	; () banked
  1607  0005E4  6FDA               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1608  0005E6  0100               	movlb	0	; () banked
  1609  0005E8  51D9               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1610  0005EA  0100               	movlb	0	; () banked
  1611  0005EC  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1612  0005EE  0100               	movlb	0	; () banked
  1613  0005F0  51DA               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1614  0005F2  0100               	movlb	0	; () banked
  1615  0005F4  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1619  0005F6  0100               	movlb	0	; () banked
  1620  0005F8  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1621  0005FA  0100               	movlb	0	; () banked
  1622  0005FC  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1623  0005FE  B4D8               	btfsc	status,2,c
  1624  000600  0012               	return	
  1625  000602  D77F               	goto	l2368
  1626  000604                     __end_of_ES_Timer_Tick_Resp:
  1627                           	opt stack 0
  1628                           tosu	equ	0xFFF
  1629                           tosh	equ	0xFFE
  1630                           tosl	equ	0xFFD
  1631                           pclath	equ	0xFFA
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           prodh	equ	0xFF4
  1637                           prodl	equ	0xFF3
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _PostButtonDebounceSM *****************
  1648 ;; Defined at:
  1649 ;;		line 75 in file "Button.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      unsigned char 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1663 ;;      Params:         0       3       0       0
  1664 ;;      Locals:         0       0       0       0
  1665 ;;      Temps:          0       0       0       0
  1666 ;;      Totals:         0       3       0       0
  1667 ;;Total ram usage:        3 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    9
  1670 ;; This function calls:
  1671 ;;		_ES_PostToService
  1672 ;; This function is called by:
  1673 ;;		_CheckButtonEvents
  1674 ;;		_ES_Timer_Tick_Resp
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text6
  1679  0014D0                     __ptext6:
  1680                           	opt stack 0
  1681  0014D0                     _PostButtonDebounceSM:
  1682                           	opt stack 18
  1683                           
  1684                           ;Button.c: 78: return ES_PostToService(MyPriority, ThisEvent);
  1685                           ;	Return value of _PostButtonDebounceSM is never used
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;incstack = 0
  1689  0014D0  C0D4  F0CE         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  1690  0014D4  C0D5  F0CF         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  1691  0014D8  C0D6  F0D0         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  1692  0014DC  0100               	movlb	0	; () banked
  1693  0014DE  518E               	movf	_MyPriority& (0+255),w,b
  1694  0014E0  ECC5  F007         	call	_ES_PostToService
  1695  0014E4  0012               	return	
  1696  0014E6                     __end_of_PostButtonDebounceSM:
  1697                           	opt stack 0
  1698                           tosu	equ	0xFFF
  1699                           tosh	equ	0xFFE
  1700                           tosl	equ	0xFFD
  1701                           pclath	equ	0xFFA
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           indf2	equ	0xFDF
  1711                           postinc2	equ	0xFDE
  1712                           postdec2	equ	0xFDD
  1713                           fsr2h	equ	0xFDA
  1714                           fsr2l	equ	0xFD9
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _PostAnalogService *****************
  1718 ;; Defined at:
  1719 ;;		line 47 in file "Analog_Service.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      unsigned char 
  1726 ;; Registers used:
  1727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1733 ;;      Params:         0       3       0       0
  1734 ;;      Locals:         0       0       0       0
  1735 ;;      Temps:          0       0       0       0
  1736 ;;      Totals:         0       3       0       0
  1737 ;;Total ram usage:        3 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    9
  1740 ;; This function calls:
  1741 ;;		_ES_PostToService
  1742 ;; This function is called by:
  1743 ;;		_ES_Timer_Tick_Resp
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text7
  1748  0014E6                     __ptext7:
  1749                           	opt stack 0
  1750  0014E6                     _PostAnalogService:
  1751                           	opt stack 18
  1752                           
  1753                           ;Analog_Service.c: 49: return ES_PostToService( MyPriority, ThisEvent);
  1754                           ;	Return value of _PostAnalogService is never used
  1755                           
  1756                           ;incstack = 0
  1757  0014E6  C0D4  F0CE         	movff	PostAnalogService@ThisEvent,ES_PostToService@TheEvent
  1758  0014EA  C0D5  F0CF         	movff	PostAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  1759  0014EE  C0D6  F0D0         	movff	PostAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  1760  0014F2  0100               	movlb	0	; () banked
  1761  0014F4  5189               	movf	Analog_Service@MyPriority& (0+255),w,b
  1762  0014F6  ECC5  F007         	call	_ES_PostToService
  1763  0014FA  0012               	return	
  1764  0014FC                     __end_of_PostAnalogService:
  1765                           	opt stack 0
  1766                           tosu	equ	0xFFF
  1767                           tosh	equ	0xFFE
  1768                           tosl	equ	0xFFD
  1769                           pclath	equ	0xFFA
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodh	equ	0xFF4
  1775                           prodl	equ	0xFF3
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           indf2	equ	0xFDF
  1779                           postinc2	equ	0xFDE
  1780                           postdec2	equ	0xFDD
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _ES_GetMSBitSet *****************
  1786 ;; Defined at:
  1787 ;;		line 79 in file "ES_LookupTables.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  LoopCntr        1    9[BANK0 ] char 
  1792 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1793 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      unsigned char 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1803 ;;      Params:         0       2       0       0
  1804 ;;      Locals:         0       3       0       0
  1805 ;;      Temps:          0       5       0       0
  1806 ;;      Totals:         0      10       0       0
  1807 ;;Total ram usage:       10 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    6
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_ES_Run
  1814 ;;		_ES_Timer_Tick_Resp
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text8
  1819  000BA8                     __ptext8:
  1820                           	opt stack 0
  1821  000BA8                     _ES_GetMSBitSet:
  1822                           	opt stack 21
  1823                           
  1824                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1825                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1826                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1827                           
  1828                           ;incstack = 0
  1829  000BA8  0E80               	movlw	128
  1830  000BAA  0100               	movlb	0	; () banked
  1831  000BAC  6FBE               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1832                           
  1833                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1834  000BAE  0E03               	movlw	3
  1835  000BB0  0100               	movlb	0	; () banked
  1836  000BB2  6FC0               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1837  000BB4                     l2242:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1841  000BB4  0100               	movlb	0	; () banked
  1842  000BB6  BFC0               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1843  000BB8  D046               	goto	l2256
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1847                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1848                           ;ES_LookupTables.c: 91: 0x0F);
  1849                           
  1850                           ; BSR set to: 0
  1851                           
  1852                           ; BSR set to: 0
  1853  000BBA  0100               	movlb	0	; () banked
  1854  000BBC  51C0               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1855  000BBE  0D04               	mullw	4
  1856  000BC0  CFF3 F0B9          	movff	prodl,??_ES_GetMSBitSet
  1857  000BC4  C0B7  F0BA         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1858  000BC8  C0B8  F0BB         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1859  000BCC  0100               	movlb	0	; () banked
  1860  000BCE  2BB9               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1861  000BD0  D004               	goto	u1154
  1862  000BD2                     u1155:
  1863  000BD2  0100               	movlb	0	; () banked
  1864  000BD4  90D8               	bcf	status,0,c
  1865  000BD6  33BB               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1866  000BD8  33BA               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1867  000BDA                     u1154:
  1868  000BDA  0100               	movlb	0	; () banked
  1869  000BDC  2FB9               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1870  000BDE  D7F9               	goto	u1155
  1871  000BE0  0100               	movlb	0	; () banked
  1872  000BE2  51BA               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1873  000BE4  0B0F               	andlw	15
  1874  000BE6  0100               	movlb	0	; () banked
  1875  000BE8  6FBF               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1879  000BEA  0100               	movlb	0	; () banked
  1880  000BEC  51BF               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1881  000BEE  0100               	movlb	0	; () banked
  1882  000BF0  B4D8               	btfsc	status,2,c
  1883  000BF2  D026               	goto	l2252
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1887                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1888  000BF4  0EFF               	movlw	255
  1889  000BF6  0100               	movlb	0	; () banked
  1890  000BF8  6FB9               	movwf	??_ES_GetMSBitSet& (0+255),b
  1891  000BFA  0EFF               	movlw	255
  1892  000BFC  0100               	movlb	0	; () banked
  1893  000BFE  6FBA               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1894  000C00  0100               	movlb	0	; () banked
  1895  000C02  51BF               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1896  000C04  0100               	movlb	0	; () banked
  1897  000C06  6FBB               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1898  000C08  6BBC               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1899  000C0A  0100               	movlb	0	; () banked
  1900  000C0C  51B9               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1901  000C0E  0100               	movlb	0	; () banked
  1902  000C10  27BB               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1903  000C12  0100               	movlb	0	; () banked
  1904  000C14  51BA               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1905  000C16  0100               	movlb	0	; () banked
  1906  000C18  23BC               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1907  000C1A  0E41               	movlw	low _Nybble2MSBitNum
  1908  000C1C  0100               	movlb	0	; () banked
  1909  000C1E  25BB               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1910  000C20  6EF6               	movwf	tblptrl,c
  1911  000C22  0E03               	movlw	high _Nybble2MSBitNum
  1912  000C24  21BC               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1913  000C26  6EF7               	movwf	tblptrh,c
  1914  000C28                     	if	0	;There are less than 3 active tblptr bytes
  1915  000C28                     	endif
  1916  000C28  0008               	tblrd		*
  1917  000C2A  CFF5 F0BD          	movff	tablat,??_ES_GetMSBitSet+4
  1918  000C2E  0100               	movlb	0	; () banked
  1919  000C30  51C0               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1920  000C32  0D04               	mullw	4
  1921  000C34  50F3               	movf	prodl,w,c
  1922  000C36  0100               	movlb	0	; () banked
  1923  000C38  25BD               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1924  000C3A  0100               	movlb	0	; () banked
  1925  000C3C  6FBE               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1926                           
  1927                           ;ES_LookupTables.c: 96: break;
  1928  000C3E  D003               	goto	l2256
  1929  000C40                     l2252:
  1930                           
  1931                           ; BSR set to: 0
  1932  000C40  0100               	movlb	0	; () banked
  1933  000C42  07C0               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1934  000C44  D7B7               	goto	l2242
  1935  000C46                     l2256:
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;ES_LookupTables.c: 97: }
  1939                           ;ES_LookupTables.c: 98: }
  1940                           ;ES_LookupTables.c: 99: return ReturnVal;
  1941  000C46  0100               	movlb	0	; () banked
  1942  000C48  51BE               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1943  000C4A  0012               	return	
  1944  000C4C                     __end_of_ES_GetMSBitSet:
  1945                           	opt stack 0
  1946                           tosu	equ	0xFFF
  1947                           tosh	equ	0xFFE
  1948                           tosl	equ	0xFFD
  1949                           pclath	equ	0xFFA
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           prodh	equ	0xFF4
  1955                           prodl	equ	0xFF3
  1956                           postinc0	equ	0xFEE
  1957                           wreg	equ	0xFE8
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           postdec2	equ	0xFDD
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _RunAnalogService *****************
  1966 ;; Defined at:
  1967 ;;		line 52 in file "Analog_Service.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  3   29[BANK0 ] struct ES_Event_t
  1974 ;; Registers used:
  1975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1981 ;;      Params:         0       3       0       0
  1982 ;;      Locals:         0       3       0       0
  1983 ;;      Temps:          0       0       0       0
  1984 ;;      Totals:         0       6       0       0
  1985 ;;Total ram usage:        6 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    7
  1988 ;; This function calls:
  1989 ;;		_ES_Timer_InitTimer
  1990 ;;		_InitAnalogHW
  1991 ;; This function is called by:
  1992 ;;		_ES_Run
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text9
  1997  0011B2                     __ptext9:
  1998                           	opt stack 0
  1999  0011B2                     _RunAnalogService:
  2000                           	opt stack 22
  2001                           
  2002                           ;Analog_Service.c: 54: ES_Event ReturnEvent;
  2003                           ;Analog_Service.c: 55: if(ThisEvent.EventType == ES_INIT) {
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;incstack = 0
  2007  0011B2  0E02               	movlw	2
  2008  0011B4  0100               	movlb	0	; () banked
  2009  0011B6  19D4               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2010  0011B8  A4D8               	btfss	status,2,c
  2011  0011BA  D00E               	goto	l2698
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;Analog_Service.c: 56: InitAnalogHW();
  2015  0011BC  EC06  F00A         	call	_InitAnalogHW	;wreg free
  2016                           
  2017                           ;Analog_Service.c: 57: ADCON0bits.CHS = 0x00;
  2018  0011C0  94C2               	bcf	4034,2,c	;volatile
  2019  0011C2  96C2               	bcf	4034,3,c	;volatile
  2020  0011C4  98C2               	bcf	4034,4,c	;volatile
  2021  0011C6  9AC2               	bcf	4034,5,c	;volatile
  2022                           
  2023                           ;Analog_Service.c: 58: ES_Timer_InitTimer(0, 5);
  2024  0011C8  0E00               	movlw	0
  2025  0011CA  0100               	movlb	0	; () banked
  2026  0011CC  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2027  0011CE  0E05               	movlw	5
  2028  0011D0  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2029  0011D2  0E00               	movlw	0
  2030  0011D4  EC0B  F007         	call	_ES_Timer_InitTimer
  2031  0011D8                     l2698:
  2032                           
  2033                           ;Analog_Service.c: 59: }
  2034                           ;Analog_Service.c: 60: if(ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 0
      +                          ) {
  2035  0011D8  0E03               	movlw	3
  2036  0011DA  0100               	movlb	0	; () banked
  2037  0011DC  19D4               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2038  0011DE  A4D8               	btfss	status,2,c
  2039  0011E0  D006               	goto	l2704
  2040                           
  2041                           ; BSR set to: 0
  2042  0011E2  0100               	movlb	0	; () banked
  2043  0011E4  51D5               	movf	(RunAnalogService@ThisEvent+1)& (0+255),w,b
  2044  0011E6  0100               	movlb	0	; () banked
  2045  0011E8  11D6               	iorwf	(RunAnalogService@ThisEvent+2)& (0+255),w,b
  2046  0011EA  B4D8               	btfsc	status,2,c
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;Analog_Service.c: 61: ADCON0bits.GO = 1;
  2050  0011EC  82C2               	bsf	4034,1,c	;volatile
  2051  0011EE                     l2704:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;Analog_Service.c: 62: }
  2055                           ;Analog_Service.c: 63: ReturnEvent.EventType = ES_NO_EVENT;
  2056  0011EE  0E00               	movlw	0
  2057  0011F0  0100               	movlb	0	; () banked
  2058  0011F2  6FD7               	movwf	RunAnalogService@ReturnEvent& (0+255),b
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;Analog_Service.c: 64: return ReturnEvent;
  2062  0011F4  C0D7  F0D4         	movff	RunAnalogService@ReturnEvent,?_RunAnalogService
  2063  0011F8  C0D8  F0D5         	movff	RunAnalogService@ReturnEvent+1,?_RunAnalogService+1
  2064  0011FC  C0D9  F0D6         	movff	RunAnalogService@ReturnEvent+2,?_RunAnalogService+2
  2065  001200  0012               	return	
  2066  001202                     __end_of_RunAnalogService:
  2067                           	opt stack 0
  2068                           tosu	equ	0xFFF
  2069                           tosh	equ	0xFFE
  2070                           tosl	equ	0xFFD
  2071                           pclath	equ	0xFFA
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           prodh	equ	0xFF4
  2077                           prodl	equ	0xFF3
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           indf2	equ	0xFDF
  2081                           postinc2	equ	0xFDE
  2082                           postdec2	equ	0xFDD
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _RunButtonDebounceSM *****************
  2088 ;; Defined at:
  2089 ;;		line 83 in file "Button.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  3   29[BANK0 ] struct ES_Event_t
  2096 ;; Registers used:
  2097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2103 ;;      Params:         0       3       0       0
  2104 ;;      Locals:         0       3       0       0
  2105 ;;      Temps:          0       0       0       0
  2106 ;;      Totals:         0       6       0       0
  2107 ;;Total ram usage:        6 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    9
  2110 ;; This function calls:
  2111 ;;		_ES_PostAll
  2112 ;;		_ES_Timer_InitTimer
  2113 ;; This function is called by:
  2114 ;;		_ES_Run
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text10
  2119  000B02                     __ptext10:
  2120                           	opt stack 0
  2121  000B02                     _RunButtonDebounceSM:
  2122                           	opt stack 20
  2123                           
  2124                           ;Button.c: 87: switch (CurrentState) {
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;incstack = 0
  2128  000B02  D040               	goto	l2536
  2129  000B04                     l2512:
  2130                           
  2131                           ;Button.c: 92: if (ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 1) {
  2132  000B04  0E03               	movlw	3
  2133  000B06  0100               	movlb	0	; () banked
  2134  000B08  19D4               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2135  000B0A  A4D8               	btfss	status,2,c
  2136  000B0C  D043               	goto	l2538
  2137                           
  2138                           ; BSR set to: 0
  2139  000B0E  0100               	movlb	0	; () banked
  2140  000B10  05D5               	decf	(RunButtonDebounceSM@ThisEvent+1)& (0+255),w,b
  2141  000B12  0100               	movlb	0	; () banked
  2142  000B14  11D6               	iorwf	(RunButtonDebounceSM@ThisEvent+2)& (0+255),w,b
  2143  000B16  A4D8               	btfss	status,2,c
  2144  000B18  D03D               	goto	l2538
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;Button.c: 94: CurrentState = Ready2Sample;
  2148  000B1A  0E01               	movlw	1
  2149  000B1C  0100               	movlb	0	; () banked
  2150  000B1E  6F8C               	movwf	_CurrentState& (0+255),b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;Button.c: 95: }
  2154                           ;Button.c: 96: break;
  2155  000B20  D039               	goto	l2538
  2156  000B22                     l2518:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;Button.c: 101: if (ThisEvent.EventType == DBButtonUp) {
  2160  000B22  0E06               	movlw	6
  2161  000B24  0100               	movlb	0	; () banked
  2162  000B26  19D4               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2163  000B28  A4D8               	btfss	status,2,c
  2164  000B2A  D013               	goto	l2526
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;Button.c: 103: ES_Timer_InitTimer(1, 3);
  2168  000B2C  0E00               	movlw	0
  2169  000B2E  0100               	movlb	0	; () banked
  2170  000B30  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2171  000B32  0E03               	movlw	3
  2172  000B34  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2173  000B36  0E01               	movlw	1
  2174  000B38  EC0B  F007         	call	_ES_Timer_InitTimer
  2175                           
  2176                           ;Button.c: 105: CurrentState = Debouncing;
  2177  000B3C  0E00               	movlw	0
  2178  000B3E  0100               	movlb	0	; () banked
  2179  000B40  6F8C               	movwf	_CurrentState& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;Button.c: 107: ES_PostAll(ThisEvent);
  2183  000B42  C0D4  F0CE         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2184  000B46  C0D5  F0CF         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2185  000B4A  C0D6  F0D0         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2186  000B4E  EC89  F007         	call	_ES_PostAll	;wreg free
  2187  000B52                     l2526:
  2188                           
  2189                           ;Button.c: 108: }
  2190                           ;Button.c: 110: if (ThisEvent.EventType == DBButtonDown) {
  2191  000B52  0E05               	movlw	5
  2192  000B54  0100               	movlb	0	; () banked
  2193  000B56  19D4               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2194  000B58  A4D8               	btfss	status,2,c
  2195  000B5A  D01C               	goto	l2538
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;Button.c: 114: ES_Timer_InitTimer(1, 3);
  2199  000B5C  0E00               	movlw	0
  2200  000B5E  0100               	movlb	0	; () banked
  2201  000B60  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2202  000B62  0E03               	movlw	3
  2203  000B64  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2204  000B66  0E01               	movlw	1
  2205  000B68  EC0B  F007         	call	_ES_Timer_InitTimer
  2206                           
  2207                           ;Button.c: 116: CurrentState = Debouncing;
  2208  000B6C  0E00               	movlw	0
  2209  000B6E  0100               	movlb	0	; () banked
  2210  000B70  6F8C               	movwf	_CurrentState& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;Button.c: 117: ES_PostAll(ThisEvent);
  2214  000B72  C0D4  F0CE         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2215  000B76  C0D5  F0CF         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2216  000B7A  C0D6  F0D0         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2217  000B7E  EC89  F007         	call	_ES_PostAll	;wreg free
  2218                           
  2219                           ;Button.c: 120: }
  2220                           
  2221                           ;Button.c: 118: }
  2222                           ;Button.c: 119: break;
  2223  000B82  D008               	goto	l2538
  2224  000B84                     l2536:
  2225  000B84  0100               	movlb	0	; () banked
  2226  000B86  518C               	movf	_CurrentState& (0+255),w,b
  2227                           
  2228                           ; Switch size 1, requested type "space"
  2229                           ; Number of cases is 2, Range of values is 0 to 1
  2230                           ; switch strategies available:
  2231                           ; Name         Instructions Cycles
  2232                           ; simple_byte            7     4 (average)
  2233                           ;	Chosen strategy is simple_byte
  2234  000B88  0A00               	xorlw	0	; case 0
  2235  000B8A  B4D8               	btfsc	status,2,c
  2236  000B8C  D7BB               	goto	l2512
  2237  000B8E  0A01               	xorlw	1	; case 1
  2238  000B90  B4D8               	btfsc	status,2,c
  2239  000B92  D7C7               	goto	l2518
  2240  000B94                     l2538:
  2241                           
  2242                           ;Button.c: 122: ES_Event ReturnEvent;
  2243                           ;Button.c: 123: ReturnEvent.EventType = ES_NO_EVENT;
  2244  000B94  0E00               	movlw	0
  2245  000B96  0100               	movlb	0	; () banked
  2246  000B98  6FD7               	movwf	RunButtonDebounceSM@ReturnEvent& (0+255),b
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;Button.c: 124: return ReturnEvent;
  2250  000B9A  C0D7  F0D4         	movff	RunButtonDebounceSM@ReturnEvent,?_RunButtonDebounceSM
  2251  000B9E  C0D8  F0D5         	movff	RunButtonDebounceSM@ReturnEvent+1,?_RunButtonDebounceSM+1
  2252  000BA2  C0D9  F0D6         	movff	RunButtonDebounceSM@ReturnEvent+2,?_RunButtonDebounceSM+2
  2253  000BA6  0012               	return	
  2254  000BA8                     __end_of_RunButtonDebounceSM:
  2255                           	opt stack 0
  2256                           tosu	equ	0xFFF
  2257                           tosh	equ	0xFFE
  2258                           tosl	equ	0xFFD
  2259                           pclath	equ	0xFFA
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           prodh	equ	0xFF4
  2265                           prodl	equ	0xFF3
  2266                           postinc0	equ	0xFEE
  2267                           wreg	equ	0xFE8
  2268                           indf2	equ	0xFDF
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _RunCan_XmitService *****************
  2276 ;; Defined at:
  2277 ;;		line 136 in file "Can_XmitService.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  ReturnEvent     3   34[BANK0 ] struct ES_Event_t
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  3   29[BANK0 ] struct ES_Event_t
  2284 ;; Registers used:
  2285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2291 ;;      Params:         0       3       0       0
  2292 ;;      Locals:         0       3       0       0
  2293 ;;      Temps:          0       2       0       0
  2294 ;;      Totals:         0       8       0       0
  2295 ;;Total ram usage:        8 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    8
  2298 ;; This function calls:
  2299 ;;		_InitCanHardware
  2300 ;;		_InitPins
  2301 ;;		_XmitData
  2302 ;; This function is called by:
  2303 ;;		_ES_Run
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text11
  2308  000994                     __ptext11:
  2309                           	opt stack 0
  2310  000994                     _RunCan_XmitService:
  2311                           	opt stack 21
  2312                           
  2313                           ;Can_XmitService.c: 138: ES_Event ReturnEvent;
  2314                           ;Can_XmitService.c: 140: if (ThisEvent.EventType == ES_INIT) {
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;incstack = 0
  2318  000994  0E02               	movlw	2
  2319  000996  0100               	movlb	0	; () banked
  2320  000998  19D4               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2321  00099A  A4D8               	btfss	status,2,c
  2322  00099C  D006               	goto	l2642
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;Can_XmitService.c: 141: InitPins();
  2326  00099E  EC50  F00A         	call	_InitPins	;wreg free
  2327                           
  2328                           ;Can_XmitService.c: 142: InitCanHardware();
  2329  0009A2  EC4B  F007         	call	_InitCanHardware	;wreg free
  2330                           
  2331                           ;Can_XmitService.c: 143: LATA2 = 1;
  2332  0009A6  8489               	bsf	3977,2,c	;volatile
  2333                           
  2334                           ;Can_XmitService.c: 144: } else if (ThisEvent.EventType == DBButtonDown) {
  2335  0009A8  D048               	goto	l2662
  2336  0009AA                     l2642:
  2337  0009AA  0E05               	movlw	5
  2338  0009AC  0100               	movlb	0	; () banked
  2339  0009AE  19D4               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2340  0009B0  B4D8               	btfsc	status,2,c
  2341  0009B2  D021               	goto	l2656
  2342  0009B4  D03A               	goto	l2658
  2343  0009B6                     l489:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;Can_XmitService.c: 147: LATA2 = 1;
  2347  0009B6  8489               	bsf	3977,2,c	;volatile
  2348                           
  2349                           ;Can_XmitService.c: 148: LATA3 = 0;
  2350  0009B8  9689               	bcf	3977,3,c	;volatile
  2351                           
  2352                           ;Can_XmitService.c: 149: LATA4 = 0;
  2353  0009BA  9889               	bcf	3977,4,c	;volatile
  2354                           
  2355                           ;Can_XmitService.c: 150: LATA5 = 0;
  2356  0009BC  9A89               	bcf	3977,5,c	;volatile
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;Can_XmitService.c: 151: XmitData(0x00);
  2360  0009BE  0E00               	movlw	0
  2361  0009C0  EC26  F009         	call	_XmitData
  2362                           
  2363                           ;Can_XmitService.c: 152: break;
  2364  0009C4  D03A               	goto	l2662
  2365  0009C6                     l491:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;Can_XmitService.c: 154: LATA2 = 0;
  2369  0009C6  9489               	bcf	3977,2,c	;volatile
  2370                           
  2371                           ;Can_XmitService.c: 155: LATA3 = 1;
  2372  0009C8  8689               	bsf	3977,3,c	;volatile
  2373                           
  2374                           ;Can_XmitService.c: 156: LATA4 = 0;
  2375  0009CA  9889               	bcf	3977,4,c	;volatile
  2376                           
  2377                           ;Can_XmitService.c: 157: LATA5 = 0;
  2378  0009CC  9A89               	bcf	3977,5,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;Can_XmitService.c: 158: XmitData(0x01);
  2382  0009CE  0E01               	movlw	1
  2383  0009D0  EC26  F009         	call	_XmitData
  2384                           
  2385                           ;Can_XmitService.c: 159: break;
  2386  0009D4  D032               	goto	l2662
  2387  0009D6                     l492:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;Can_XmitService.c: 161: LATA2 = 0;
  2391  0009D6  9489               	bcf	3977,2,c	;volatile
  2392                           
  2393                           ;Can_XmitService.c: 162: LATA3 = 0;
  2394  0009D8  9689               	bcf	3977,3,c	;volatile
  2395                           
  2396                           ;Can_XmitService.c: 163: LATA4 = 1;
  2397  0009DA  8889               	bsf	3977,4,c	;volatile
  2398                           
  2399                           ;Can_XmitService.c: 164: LATA5 = 0;
  2400  0009DC  9A89               	bcf	3977,5,c	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;Can_XmitService.c: 165: XmitData(0x02);
  2404  0009DE  0E02               	movlw	2
  2405  0009E0  EC26  F009         	call	_XmitData
  2406                           
  2407                           ;Can_XmitService.c: 166: break;
  2408  0009E4  D02A               	goto	l2662
  2409  0009E6                     l493:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;Can_XmitService.c: 168: LATA2 = 0;
  2413  0009E6  9489               	bcf	3977,2,c	;volatile
  2414                           
  2415                           ;Can_XmitService.c: 169: LATA3 = 0;
  2416  0009E8  9689               	bcf	3977,3,c	;volatile
  2417                           
  2418                           ;Can_XmitService.c: 170: LATA4 = 0;
  2419  0009EA  9889               	bcf	3977,4,c	;volatile
  2420                           
  2421                           ;Can_XmitService.c: 171: LATA5 = 1;
  2422  0009EC  8A89               	bsf	3977,5,c	;volatile
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;Can_XmitService.c: 172: XmitData(0x03);
  2426  0009EE  0E03               	movlw	3
  2427  0009F0  EC26  F009         	call	_XmitData
  2428                           
  2429                           ;Can_XmitService.c: 174: }
  2430                           
  2431                           ;Can_XmitService.c: 173: break;
  2432  0009F4  D022               	goto	l2662
  2433  0009F6                     l2656:
  2434  0009F6  EE20  F0D5         	lfsr	2,RunCan_XmitService@ThisEvent+1
  2435  0009FA  CFDE F0D7          	movff	postinc2,??_RunCan_XmitService
  2436  0009FE  CFDD F0D8          	movff	postdec2,??_RunCan_XmitService+1
  2437                           
  2438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2439                           ; Switch size 1, requested type "space"
  2440                           ; Number of cases is 1, Range of values is 0 to 0
  2441                           ; switch strategies available:
  2442                           ; Name         Instructions Cycles
  2443                           ; simple_byte            4     3 (average)
  2444                           ;	Chosen strategy is simple_byte
  2445  000A02  0100               	movlb	0	; () banked
  2446  000A04  51D8               	movf	(??_RunCan_XmitService+1)& (0+255),w,b
  2447  000A06  0A00               	xorlw	0	; case 0
  2448  000A08  A4D8               	btfss	status,2,c
  2449  000A0A  D017               	goto	l2662
  2450                           
  2451                           ; BSR set to: 0
  2452                           ; Switch size 1, requested type "space"
  2453                           ; Number of cases is 4, Range of values is 7 to 14
  2454                           ; switch strategies available:
  2455                           ; Name         Instructions Cycles
  2456                           ; simple_byte           13     7 (average)
  2457                           ;	Chosen strategy is simple_byte
  2458  000A0C  0100               	movlb	0	; () banked
  2459  000A0E  51D7               	movf	??_RunCan_XmitService& (0+255),w,b
  2460  000A10  0A07               	xorlw	7	; case 7
  2461  000A12  B4D8               	btfsc	status,2,c
  2462  000A14  D7E8               	goto	l493
  2463  000A16  0A0C               	xorlw	12	; case 11
  2464  000A18  B4D8               	btfsc	status,2,c
  2465  000A1A  D7DD               	goto	l492
  2466  000A1C  0A06               	xorlw	6	; case 13
  2467  000A1E  B4D8               	btfsc	status,2,c
  2468  000A20  D7D2               	goto	l491
  2469  000A22  0A03               	xorlw	3	; case 14
  2470  000A24  B4D8               	btfsc	status,2,c
  2471  000A26  D7C7               	goto	l489
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;Can_XmitService.c: 175: } else if (ThisEvent.EventType == XMIT_EVENT) {
  2475  000A28  D008               	goto	l2662
  2476  000A2A                     l2658:
  2477                           
  2478                           ; BSR set to: 0
  2479  000A2A  0E07               	movlw	7
  2480  000A2C  0100               	movlb	0	; () banked
  2481  000A2E  19D4               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2482  000A30  A4D8               	btfss	status,2,c
  2483  000A32  D003               	goto	l2662
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;Can_XmitService.c: 176: XmitData(0xFF);
  2487  000A34  0EFF               	movlw	255
  2488  000A36  EC26  F009         	call	_XmitData
  2489  000A3A                     l2662:
  2490                           
  2491                           ;Can_XmitService.c: 177: }
  2492                           ;Can_XmitService.c: 178: ReturnEvent.EventType = ES_NO_EVENT;
  2493  000A3A  0E00               	movlw	0
  2494  000A3C  0100               	movlb	0	; () banked
  2495  000A3E  6FD9               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;Can_XmitService.c: 179: return ReturnEvent;
  2499  000A40  C0D9  F0D4         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2500  000A44  C0DA  F0D5         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2501  000A48  C0DB  F0D6         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2502  000A4C  0012               	return	
  2503  000A4E                     __end_of_RunCan_XmitService:
  2504                           	opt stack 0
  2505                           tosu	equ	0xFFF
  2506                           tosh	equ	0xFFE
  2507                           tosl	equ	0xFFD
  2508                           pclath	equ	0xFFA
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           postinc0	equ	0xFEE
  2516                           wreg	equ	0xFE8
  2517                           indf2	equ	0xFDF
  2518                           postinc2	equ	0xFDE
  2519                           postdec2	equ	0xFDD
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _XmitData *****************
  2525 ;; Defined at:
  2526 ;;		line 283 in file "Can_XmitService.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  DataByte        1    wreg     unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  DataByte        1    0[BANK0 ] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2540 ;;      Params:         0       0       0       0
  2541 ;;      Locals:         0       1       0       0
  2542 ;;      Temps:          0       0       0       0
  2543 ;;      Totals:         0       1       0       0
  2544 ;;Total ram usage:        1 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    7
  2547 ;; This function calls:
  2548 ;;		_GetBrightness
  2549 ;;		_GetLocation
  2550 ;; This function is called by:
  2551 ;;		_RunCan_XmitService
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text12
  2556  00124C                     __ptext12:
  2557                           	opt stack 0
  2558  00124C                     _XmitData:
  2559                           	opt stack 21
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;incstack = 0
  2563                           ;XmitData@DataByte stored from wreg
  2564  00124C  0100               	movlb	0	; () banked
  2565  00124E  6FB7               	movwf	XmitData@DataByte& (0+255),b
  2566                           
  2567                           ;Can_XmitService.c: 284: TXB0CONbits.TXREQ = 0;
  2568  001250  010F               	movlb	15	; () banked
  2569  001252  9740               	bcf	64,3,b	;volatile
  2570                           
  2571                           ; BSR set to: 15
  2572                           ;Can_XmitService.c: 287: TXB0DLC = 0x03;
  2573  001254  0E03               	movlw	3
  2574  001256  010F               	movlb	15	; () banked
  2575  001258  6F45               	movwf	69,b	;volatile
  2576                           
  2577                           ; BSR set to: 15
  2578                           ;Can_XmitService.c: 288: TXB0D0 = DataByte;
  2579  00125A  C0B7  FF46         	movff	XmitData@DataByte,3910	;volatile
  2580                           
  2581                           ; BSR set to: 15
  2582                           ;Can_XmitService.c: 289: TXB0D1 = GetBrightness();
  2583  00125E  ECA2  F00A         	call	_GetBrightness	;wreg free
  2584  001262  010F               	movlb	15	; () banked
  2585  001264  6F47               	movwf	71,b	;volatile
  2586                           
  2587                           ; BSR set to: 15
  2588                           ;Can_XmitService.c: 290: TXB0D2 = GetLocation();
  2589  001266  ECA0  F00A         	call	_GetLocation	;wreg free
  2590  00126A  010F               	movlb	15	; () banked
  2591  00126C  6F48               	movwf	72,b	;volatile
  2592                           
  2593                           ;Can_XmitService.c: 293: TXB0SIDH = 0x00;
  2594  00126E  0E00               	movlw	0
  2595  001270  010F               	movlb	15	; () banked
  2596  001272  6F41               	movwf	65,b	;volatile
  2597                           
  2598                           ;Can_XmitService.c: 294: TXB0SIDL = 0x08;
  2599  001274  0E08               	movlw	8
  2600  001276  010F               	movlb	15	; () banked
  2601  001278  6F42               	movwf	66,b	;volatile
  2602                           
  2603                           ;Can_XmitService.c: 295: TXB0EIDH = 0x00;
  2604  00127A  0E00               	movlw	0
  2605  00127C  010F               	movlb	15	; () banked
  2606  00127E  6F43               	movwf	67,b	;volatile
  2607                           
  2608                           ;Can_XmitService.c: 296: TXB0EIDL = 0x01;
  2609  001280  0E01               	movlw	1
  2610  001282  010F               	movlb	15	; () banked
  2611  001284  6F44               	movwf	68,b	;volatile
  2612                           
  2613                           ; BSR set to: 15
  2614                           ;Can_XmitService.c: 298: TXB0CONbits.TXPRI0 = 1;
  2615  001286  010F               	movlb	15	; () banked
  2616  001288  8140               	bsf	64,0,b	;volatile
  2617                           
  2618                           ; BSR set to: 15
  2619                           ;Can_XmitService.c: 299: TXB0CONbits.TXPRI1 = 1;
  2620  00128A  010F               	movlb	15	; () banked
  2621  00128C  8340               	bsf	64,1,b	;volatile
  2622                           
  2623                           ; BSR set to: 15
  2624                           ;Can_XmitService.c: 301: TXB0CONbits.TXREQ = 1;
  2625  00128E  010F               	movlb	15	; () banked
  2626  001290  8740               	bsf	64,3,b	;volatile
  2627                           
  2628                           ; BSR set to: 15
  2629  001292  0012               	return		;funcret
  2630  001294                     __end_of_XmitData:
  2631                           	opt stack 0
  2632                           tosu	equ	0xFFF
  2633                           tosh	equ	0xFFE
  2634                           tosl	equ	0xFFD
  2635                           pclath	equ	0xFFA
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           prodh	equ	0xFF4
  2641                           prodl	equ	0xFF3
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           indf2	equ	0xFDF
  2645                           postinc2	equ	0xFDE
  2646                           postdec2	equ	0xFDD
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _GetLocation *****************
  2652 ;; Defined at:
  2653 ;;		line 72 in file "Analog_Service.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      unsigned char 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2667 ;;      Params:         0       0       0       0
  2668 ;;      Locals:         0       0       0       0
  2669 ;;      Temps:          0       0       0       0
  2670 ;;      Totals:         0       0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    6
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_XmitData
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text13
  2682  001540                     __ptext13:
  2683                           	opt stack 0
  2684  001540                     _GetLocation:
  2685                           	opt stack 21
  2686                           
  2687                           ;Analog_Service.c: 74: return Location;
  2688                           
  2689                           ; BSR set to: 15
  2690                           ;incstack = 0
  2691  001540  503F               	movf	_Location,w,c
  2692  001542  0012               	return	
  2693  001544                     __end_of_GetLocation:
  2694                           	opt stack 0
  2695                           tosu	equ	0xFFF
  2696                           tosh	equ	0xFFE
  2697                           tosl	equ	0xFFD
  2698                           pclath	equ	0xFFA
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _GetBrightness *****************
  2715 ;; Defined at:
  2716 ;;		line 67 in file "Analog_Service.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      unsigned char 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2730 ;;      Params:         0       0       0       0
  2731 ;;      Locals:         0       0       0       0
  2732 ;;      Temps:          0       0       0       0
  2733 ;;      Totals:         0       0       0       0
  2734 ;;Total ram usage:        0 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    6
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_XmitData
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text14
  2745  001544                     __ptext14:
  2746                           	opt stack 0
  2747  001544                     _GetBrightness:
  2748                           	opt stack 21
  2749                           
  2750                           ;Analog_Service.c: 69: return Brightness;
  2751                           
  2752                           ;incstack = 0
  2753  001544  503E               	movf	_Brightness,w,c
  2754  001546  0012               	return	
  2755  001548                     __end_of_GetBrightness:
  2756                           	opt stack 0
  2757                           tosu	equ	0xFFF
  2758                           tosh	equ	0xFFE
  2759                           tosl	equ	0xFFD
  2760                           pclath	equ	0xFFA
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _InitPins *****************
  2777 ;; Defined at:
  2778 ;;		line 267 in file "Can_XmitService.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2792 ;;      Params:         0       0       0       0
  2793 ;;      Locals:         0       0       0       0
  2794 ;;      Temps:          0       0       0       0
  2795 ;;      Totals:         0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    6
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_RunCan_XmitService
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text15
  2807  0014A0                     __ptext15:
  2808                           	opt stack 0
  2809  0014A0                     _InitPins:
  2810                           	opt stack 22
  2811                           
  2812                           ;Can_XmitService.c: 270: PORTB = 0x00;
  2813                           
  2814                           ;incstack = 0
  2815  0014A0  0E00               	movlw	0
  2816  0014A2  6E81               	movwf	3969,c	;volatile
  2817                           
  2818                           ;Can_XmitService.c: 271: LATB = 0x00;
  2819  0014A4  0E00               	movlw	0
  2820  0014A6  6E8A               	movwf	3978,c	;volatile
  2821                           
  2822                           ;Can_XmitService.c: 272: TRISBbits.TRISB2 = 0;
  2823  0014A8  9493               	bcf	3987,2,c	;volatile
  2824                           
  2825                           ;Can_XmitService.c: 273: TRISBbits.TRISB3 = 1;
  2826  0014AA  8693               	bsf	3987,3,c	;volatile
  2827                           
  2828                           ;Can_XmitService.c: 276: PORTA = 0x00;
  2829  0014AC  0E00               	movlw	0
  2830  0014AE  6E80               	movwf	3968,c	;volatile
  2831                           
  2832                           ;Can_XmitService.c: 277: LATA &= 0b11111100;
  2833  0014B0  0EFC               	movlw	252
  2834  0014B2  1689               	andwf	3977,f,c	;volatile
  2835                           
  2836                           ;Can_XmitService.c: 278: TRISA &= 0b00000011;
  2837  0014B4  0E03               	movlw	3
  2838  0014B6  1692               	andwf	3986,f,c	;volatile
  2839  0014B8  0012               	return		;funcret
  2840  0014BA                     __end_of_InitPins:
  2841                           	opt stack 0
  2842                           tosu	equ	0xFFF
  2843                           tosh	equ	0xFFE
  2844                           tosl	equ	0xFFD
  2845                           pclath	equ	0xFFA
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           indf2	equ	0xFDF
  2855                           postinc2	equ	0xFDE
  2856                           postdec2	equ	0xFDD
  2857                           fsr2h	equ	0xFDA
  2858                           fsr2l	equ	0xFD9
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _InitCanHardware *****************
  2862 ;; Defined at:
  2863 ;;		line 207 in file "Can_XmitService.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, status,2
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2877 ;;      Params:         0       0       0       0
  2878 ;;      Locals:         0       0       0       0
  2879 ;;      Temps:          0       0       0       0
  2880 ;;      Totals:         0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    6
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_RunCan_XmitService
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text16
  2892  000E96                     __ptext16:
  2893                           	opt stack 0
  2894  000E96                     _InitCanHardware:
  2895                           	opt stack 22
  2896                           
  2897                           ;Can_XmitService.c: 211: CANCON = 0x80;
  2898                           
  2899                           ;incstack = 0
  2900  000E96  0E80               	movlw	128
  2901  000E98  6E6F               	movwf	3951,c	;volatile
  2902  000E9A                     l512:
  2903  000E9A  AE6E               	btfss	3950,7,c	;volatile
  2904  000E9C  D7FE               	goto	l512
  2905                           
  2906                           ;Can_XmitService.c: 214: CIOCON = 0x20;
  2907  000E9E  0E20               	movlw	32
  2908  000EA0  6E73               	movwf	3955,c	;volatile
  2909                           
  2910                           ;Can_XmitService.c: 217: BRGCON2bits.SEG2PHTS = 1;
  2911  000EA2  8E71               	bsf	3953,7,c	;volatile
  2912                           
  2913                           ;Can_XmitService.c: 219: BRGCON1bits.BRP0 = 1;
  2914  000EA4  8070               	bsf	3952,0,c	;volatile
  2915                           
  2916                           ;Can_XmitService.c: 220: BRGCON1bits.BRP1 = 0;
  2917  000EA6  9270               	bcf	3952,1,c	;volatile
  2918                           
  2919                           ;Can_XmitService.c: 221: BRGCON2bits.PRSEG0 = 0;
  2920  000EA8  9071               	bcf	3953,0,c	;volatile
  2921                           
  2922                           ;Can_XmitService.c: 222: BRGCON2bits.PRSEG1 = 1;
  2923  000EAA  8271               	bsf	3953,1,c	;volatile
  2924                           
  2925                           ;Can_XmitService.c: 223: BRGCON2bits.PRSEG2 = 1;
  2926  000EAC  8471               	bsf	3953,2,c	;volatile
  2927                           
  2928                           ;Can_XmitService.c: 224: BRGCON2bits.SEG1PH0 = 1;
  2929  000EAE  8671               	bsf	3953,3,c	;volatile
  2930                           
  2931                           ;Can_XmitService.c: 225: BRGCON2bits.SEG1PH1 = 0;
  2932  000EB0  9871               	bcf	3953,4,c	;volatile
  2933                           
  2934                           ;Can_XmitService.c: 226: BRGCON2bits.SEG1PH2 = 1;
  2935  000EB2  8A71               	bsf	3953,5,c	;volatile
  2936                           
  2937                           ;Can_XmitService.c: 227: BRGCON3bits.SEG2PH0 = 1;
  2938  000EB4  8072               	bsf	3954,0,c	;volatile
  2939                           
  2940                           ;Can_XmitService.c: 228: BRGCON1bits.SJW0 = 1;
  2941  000EB6  8C70               	bsf	3952,6,c	;volatile
  2942                           
  2943                           ;Can_XmitService.c: 232: RXB0CONbits.RXB0DBEN = 0;
  2944  000EB8  9460               	bcf	3936,2,c	;volatile
  2945                           
  2946                           ;Can_XmitService.c: 233: RXB0CONbits.RXM0 = 0;
  2947  000EBA  9A60               	bcf	3936,5,c	;volatile
  2948                           
  2949                           ;Can_XmitService.c: 234: RXB0CONbits.RXM1 = 0;
  2950  000EBC  9C60               	bcf	3936,6,c	;volatile
  2951                           
  2952                           ;Can_XmitService.c: 235: RXF0SIDH = 0x00;
  2953  000EBE  0E00               	movlw	0
  2954  000EC0  010F               	movlb	15	; () banked
  2955  000EC2  6F00               	movwf	0,b	;volatile
  2956                           
  2957                           ;Can_XmitService.c: 236: RXF0SIDL = 0x08;
  2958  000EC4  0E08               	movlw	8
  2959  000EC6  010F               	movlb	15	; () banked
  2960  000EC8  6F01               	movwf	1,b	;volatile
  2961                           
  2962                           ;Can_XmitService.c: 237: RXF0EIDH = 0x00;
  2963  000ECA  0E00               	movlw	0
  2964  000ECC  010F               	movlb	15	; () banked
  2965  000ECE  6F02               	movwf	2,b	;volatile
  2966                           
  2967                           ;Can_XmitService.c: 238: RXF0EIDL = 0x01;
  2968  000ED0  0E01               	movlw	1
  2969  000ED2  010F               	movlb	15	; () banked
  2970  000ED4  6F03               	movwf	3,b	;volatile
  2971                           
  2972                           ;Can_XmitService.c: 240: RXM0SIDH = 0x00;
  2973  000ED6  0E00               	movlw	0
  2974  000ED8  010F               	movlb	15	; () banked
  2975  000EDA  6F18               	movwf	24,b	;volatile
  2976                           
  2977                           ;Can_XmitService.c: 241: RXM0SIDL = 0x00;
  2978  000EDC  0E00               	movlw	0
  2979  000EDE  010F               	movlb	15	; () banked
  2980  000EE0  6F19               	movwf	25,b	;volatile
  2981                           
  2982                           ;Can_XmitService.c: 242: RXM0EIDH = 0x00;
  2983  000EE2  0E00               	movlw	0
  2984  000EE4  010F               	movlb	15	; () banked
  2985  000EE6  6F1A               	movwf	26,b	;volatile
  2986                           
  2987                           ;Can_XmitService.c: 243: RXM0EIDL = 0x01;
  2988  000EE8  0E01               	movlw	1
  2989  000EEA  010F               	movlb	15	; () banked
  2990  000EEC  6F1B               	movwf	27,b	;volatile
  2991                           
  2992                           ;Can_XmitService.c: 247: ECANCON = 0x00;
  2993  000EEE  0E00               	movlw	0
  2994  000EF0  6E77               	movwf	3959,c	;volatile
  2995                           
  2996                           ;Can_XmitService.c: 248: CANCON = 0b00010000;
  2997  000EF2  0E10               	movlw	16
  2998  000EF4  6E6F               	movwf	3951,c	;volatile
  2999  000EF6                     l515:
  3000  000EF6  BE6E               	btfsc	3950,7,c	;volatile
  3001  000EF8  D7FE               	goto	l515
  3002                           
  3003                           ;Can_XmitService.c: 252: RXB0IE = 1;
  3004  000EFA  80A3               	bsf	4003,0,c	;volatile
  3005                           
  3006                           ;Can_XmitService.c: 253: ERRIE = 1;
  3007  000EFC  8AA3               	bsf	4003,5,c	;volatile
  3008                           
  3009                           ;Can_XmitService.c: 254: IRXIE = 1;
  3010  000EFE  8EA3               	bsf	4003,7,c	;volatile
  3011                           
  3012                           ;Can_XmitService.c: 258: RXB0IF = 0;
  3013  000F00  90A4               	bcf	4004,0,c	;volatile
  3014                           
  3015                           ;Can_XmitService.c: 259: ERRIF = 0;
  3016  000F02  9AA4               	bcf	4004,5,c	;volatile
  3017                           
  3018                           ;Can_XmitService.c: 260: IRXIF = 0;
  3019  000F04  9EA4               	bcf	4004,7,c	;volatile
  3020                           
  3021                           ;Can_XmitService.c: 261: TXB0IE = 1;
  3022  000F06  84A3               	bsf	4003,2,c	;volatile
  3023                           
  3024                           ;Can_XmitService.c: 262: TXB0IF = 0;
  3025  000F08  94A4               	bcf	4004,2,c	;volatile
  3026                           
  3027                           ;Can_XmitService.c: 263: TXB0CONbits.TXREQ = 0;
  3028  000F0A  010F               	movlb	15	; () banked
  3029  000F0C  9740               	bcf	64,3,b	;volatile
  3030                           
  3031                           ;Can_XmitService.c: 264: RXB0CONbits.RXFUL = 0;
  3032  000F0E  9E60               	bcf	3936,7,c	;volatile
  3033                           
  3034                           ; BSR set to: 15
  3035  000F10  0012               	return		;funcret
  3036  000F12                     __end_of_InitCanHardware:
  3037                           	opt stack 0
  3038                           tosu	equ	0xFFF
  3039                           tosh	equ	0xFFE
  3040                           tosl	equ	0xFFD
  3041                           pclath	equ	0xFFA
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _ES_PostAll *****************
  3058 ;; Defined at:
  3059 ;;		line 318 in file "ES_Framework.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  i               1   28[BANK0 ] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      unsigned char 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3073 ;;      Params:         0       3       0       0
  3074 ;;      Locals:         0       1       0       0
  3075 ;;      Temps:          0       2       0       0
  3076 ;;      Totals:         0       6       0       0
  3077 ;;Total ram usage:        6 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    8
  3080 ;; This function calls:
  3081 ;;		_ES_EnQueueFIFO
  3082 ;; This function is called by:
  3083 ;;		_RunButtonDebounceSM
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text17
  3088  000F12                     __ptext17:
  3089                           	opt stack 0
  3090  000F12                     _ES_PostAll:
  3091                           	opt stack 20
  3092                           
  3093                           ;ES_Framework.c: 320: uint8_t i;
  3094                           ;ES_Framework.c: 322: for ( i=0; i< (sizeof(EventQueues)/sizeof(EventQueues[0])); i++) {
  3095                           
  3096                           ; BSR set to: 15
  3097                           ;incstack = 0
  3098  000F12  0E00               	movlw	0
  3099  000F14  0100               	movlb	0	; () banked
  3100  000F16  6FD3               	movwf	ES_PostAll@i& (0+255),b
  3101  000F18                     l2336:
  3102                           
  3103                           ; BSR set to: 0
  3104  000F18  0E02               	movlw	2
  3105  000F1A  0100               	movlb	0	; () banked
  3106  000F1C  65D3               	cpfsgt	ES_PostAll@i& (0+255),b
  3107  000F1E  D001               	goto	l2340
  3108  000F20  0012               	return	
  3109  000F22                     l2340:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;ES_Framework.c: 323: if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != 1 ){
  3113  000F22  0100               	movlb	0	; () banked
  3114  000F24  51D3               	movf	ES_PostAll@i& (0+255),w,b
  3115  000F26  0D03               	mullw	3
  3116  000F28  0E5C               	movlw	low _EventQueues
  3117  000F2A  24F3               	addwf	prodl,w,c
  3118  000F2C  6EF6               	movwf	tblptrl,c
  3119  000F2E  0E03               	movlw	high _EventQueues
  3120  000F30  20F4               	addwfc	prodh,w,c
  3121  000F32  6EF7               	movwf	tblptrh,c
  3122  000F34                     	if	0	;There are less than 3 active tblptr bytes
  3123  000F34                     	endif
  3124  000F34  0009               	tblrd		*+
  3125  000F36  CFF5 F0C3          	movff	tablat,ES_EnQueueFIFO@pBlock
  3126  000F3A  000A               	tblrd		*-
  3127  000F3C  CFF5 F0C4          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3128  000F40  C0CE  F0C5         	movff	ES_PostAll@ThisEvent,ES_EnQueueFIFO@Event2Add
  3129  000F44  C0CF  F0C6         	movff	ES_PostAll@ThisEvent+1,ES_EnQueueFIFO@Event2Add+1
  3130  000F48  C0D0  F0C7         	movff	ES_PostAll@ThisEvent+2,ES_EnQueueFIFO@Event2Add+2
  3131  000F4C  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3132  000F50  06E8               	decf	wreg,f,c
  3133  000F52  A4D8               	btfss	status,2,c
  3134  000F54  0012               	return	
  3135                           
  3136                           ;ES_Framework.c: 326: Ready |= BitNum2SetMask[i];
  3137                           
  3138                           ;ES_Framework.c: 325: }else{
  3139                           
  3140                           ;ES_Framework.c: 324: break;
  3141  000F56  0100               	movlb	0	; () banked
  3142  000F58  51D3               	movf	ES_PostAll@i& (0+255),w,b
  3143  000F5A  0D02               	mullw	2
  3144  000F5C  0E01               	movlw	low _BitNum2SetMask
  3145  000F5E  24F3               	addwf	prodl,w,c
  3146  000F60  6EF6               	movwf	tblptrl,c
  3147  000F62  0E03               	movlw	high _BitNum2SetMask
  3148  000F64  20F4               	addwfc	prodh,w,c
  3149  000F66  6EF7               	movwf	tblptrh,c
  3150  000F68                     	if	0	;There are less than 3 active tblptr bytes
  3151  000F68                     	endif
  3152  000F68  0009               	tblrd		*+
  3153  000F6A  CFF5 F0D1          	movff	tablat,??_ES_PostAll
  3154  000F6E  0009               	tblrd		*+
  3155  000F70  CFF5 F0D2          	movff	tablat,??_ES_PostAll+1
  3156  000F74  0100               	movlb	0	; () banked
  3157  000F76  51D1               	movf	??_ES_PostAll& (0+255),w,b
  3158  000F78  0100               	movlb	0	; () banked
  3159  000F7A  1385               	iorwf	_Ready& (0+255),f,b
  3160  000F7C  0100               	movlb	0	; () banked
  3161  000F7E  51D2               	movf	(??_ES_PostAll+1)& (0+255),w,b
  3162  000F80  0100               	movlb	0	; () banked
  3163  000F82  1386               	iorwf	(_Ready+1)& (0+255),f,b
  3164                           
  3165                           ; BSR set to: 0
  3166  000F84  0100               	movlb	0	; () banked
  3167  000F86  2BD3               	incf	ES_PostAll@i& (0+255),f,b
  3168  000F88  D7C7               	goto	l2336
  3169  000F8A                     __end_of_ES_PostAll:
  3170                           	opt stack 0
  3171                           tosu	equ	0xFFF
  3172                           tosh	equ	0xFFE
  3173                           tosl	equ	0xFFD
  3174                           pclath	equ	0xFFA
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _InitAnalogHW *****************
  3191 ;; Defined at:
  3192 ;;		line 95 in file "Analog_Service.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;		None
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;		None
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      void 
  3199 ;; Registers used:
  3200 ;;		wreg, status,2
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3206 ;;      Params:         0       0       0       0
  3207 ;;      Locals:         0       0       0       0
  3208 ;;      Temps:          0       0       0       0
  3209 ;;      Totals:         0       0       0       0
  3210 ;;Total ram usage:        0 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    6
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_RunAnalogService
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text18
  3221  00140C                     __ptext18:
  3222                           	opt stack 0
  3223  00140C                     _InitAnalogHW:
  3224                           	opt stack 22
  3225                           
  3226                           ;Analog_Service.c: 97: PORTA = 0x00;
  3227                           
  3228                           ;incstack = 0
  3229  00140C  0E00               	movlw	0
  3230  00140E  6E80               	movwf	3968,c	;volatile
  3231                           
  3232                           ;Analog_Service.c: 98: LATA = 0x00;
  3233  001410  0E00               	movlw	0
  3234  001412  6E89               	movwf	3977,c	;volatile
  3235                           
  3236                           ;Analog_Service.c: 99: TRISAbits.TRISA0 = 1;
  3237  001414  8092               	bsf	3986,0,c	;volatile
  3238                           
  3239                           ;Analog_Service.c: 100: TRISAbits.TRISA1 = 1;
  3240  001416  8292               	bsf	3986,1,c	;volatile
  3241                           
  3242                           ;Analog_Service.c: 102: ADCON1bits.VCFG1 = 0;
  3243  001418  9AC1               	bcf	4033,5,c	;volatile
  3244                           
  3245                           ;Analog_Service.c: 103: ADCON1bits.VCFG0 = 0;
  3246  00141A  98C1               	bcf	4033,4,c	;volatile
  3247                           
  3248                           ;Analog_Service.c: 105: ADCON2bits.ADFM = 1;
  3249  00141C  8EC0               	bsf	4032,7,c	;volatile
  3250                           
  3251                           ;Analog_Service.c: 106: ADCON2bits.ACQT = 0b100;
  3252  00141E  50C0               	movf	4032,w,c	;volatile
  3253  001420  0BC7               	andlw	-57
  3254  001422  0920               	iorlw	32
  3255  001424  6EC0               	movwf	4032,c	;volatile
  3256                           
  3257                           ;Analog_Service.c: 107: ADCON2bits.ADCS = 0b001;
  3258  001426  50C0               	movf	4032,w,c	;volatile
  3259  001428  0BF8               	andlw	-8
  3260  00142A  0901               	iorlw	1
  3261  00142C  6EC0               	movwf	4032,c	;volatile
  3262                           
  3263                           ;Analog_Service.c: 109: ADCON0bits.ADON = 1;
  3264  00142E  80C2               	bsf	4034,0,c	;volatile
  3265                           
  3266                           ;Analog_Service.c: 110: ADIF = 0;
  3267  001430  9C9E               	bcf	3998,6,c	;volatile
  3268                           
  3269                           ;Analog_Service.c: 111: ADIE = 1;
  3270  001432  8C9D               	bsf	3997,6,c	;volatile
  3271  001434  0012               	return		;funcret
  3272  001436                     __end_of_InitAnalogHW:
  3273                           	opt stack 0
  3274                           tosu	equ	0xFFF
  3275                           tosh	equ	0xFFE
  3276                           tosl	equ	0xFFD
  3277                           pclath	equ	0xFFA
  3278                           tblptru	equ	0xFF8
  3279                           tblptrh	equ	0xFF7
  3280                           tblptrl	equ	0xFF6
  3281                           tablat	equ	0xFF5
  3282                           prodh	equ	0xFF4
  3283                           prodl	equ	0xFF3
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           indf2	equ	0xFDF
  3287                           postinc2	equ	0xFDE
  3288                           postdec2	equ	0xFDD
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _ES_DeQueue *****************
  3294 ;; Defined at:
  3295 ;;		line 164 in file "ES_Queue.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3298 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3299 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  3300 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  3303 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3304 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  3305 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      unsigned char 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3315 ;;      Params:         0       4       0       0
  3316 ;;      Locals:         0       4       0       0
  3317 ;;      Temps:          0       2       0       0
  3318 ;;      Totals:         0      10       0       0
  3319 ;;Total ram usage:       10 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    7
  3322 ;; This function calls:
  3323 ;;		___lbmod
  3324 ;;		___wmul
  3325 ;; This function is called by:
  3326 ;;		_ES_Run
  3327 ;;		_ES_RecallEvents
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text19
  3332  0003C6                     __ptext19:
  3333                           	opt stack 0
  3334  0003C6                     _ES_DeQueue:
  3335                           	opt stack 22
  3336                           
  3337                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  3338                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  3339                           ;ES_Queue.c: 168: uint8_t NumLeft;
  3340                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  3341                           
  3342                           ;incstack = 0
  3343  0003C6  C0C3  F0CB         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  3344  0003CA  C0C4  F0CC         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  3345                           
  3346                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  3347  0003CE  0100               	movlb	0	; () banked
  3348  0003D0  EE20 F002          	lfsr	2,2
  3349  0003D4  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3350  0003D6  26D9               	addwf	fsr2l,f,c
  3351  0003D8  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3352  0003DA  22DA               	addwfc	fsr2h,f,c
  3353  0003DC  50DF               	movf	indf2,w,c
  3354  0003DE  B4D8               	btfsc	status,2,c
  3355  0003E0  D06F               	goto	l2580
  3356                           
  3357                           ; BSR set to: 0
  3358                           
  3359                           ;ES_Queue.c: 172: {
  3360                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3361  0003E2  CFF2 F0C9          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  3362  0003E6  9EF2               	bcf	intcon,7,c	;volatile
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3366                           
  3367                           ; BSR set to: 0
  3368  0003E8  0100               	movlb	0	; () banked
  3369  0003EA  EE20 F001          	lfsr	2,1
  3370  0003EE  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3371  0003F0  26D9               	addwf	fsr2l,f,c
  3372  0003F2  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3373  0003F4  22DA               	addwfc	fsr2h,f,c
  3374  0003F6  50DF               	movf	indf2,w,c
  3375  0003F8  0100               	movlb	0	; () banked
  3376  0003FA  6FC7               	movwf	??_ES_DeQueue& (0+255),b
  3377  0003FC  0E01               	movlw	1
  3378  0003FE  0100               	movlb	0	; () banked
  3379  000400  25C7               	addwf	??_ES_DeQueue& (0+255),w,b
  3380  000402  0100               	movlb	0	; () banked
  3381  000404  6FBD               	movwf	___wmul@multiplier& (0+255),b
  3382  000406  0100               	movlb	0	; () banked
  3383  000408  6BBE               	clrf	(___wmul@multiplier+1)& (0+255),b
  3384  00040A  0E00               	movlw	0
  3385  00040C  23BE               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  3386  00040E  0E00               	movlw	0
  3387  000410  0100               	movlb	0	; () banked
  3388  000412  6FC0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3389  000414  0E03               	movlw	3
  3390  000416  6FBF               	movwf	___wmul@multiplicand& (0+255),b
  3391  000418  EC8A  F009         	call	___wmul	;wreg free
  3392  00041C  0100               	movlb	0	; () banked
  3393  00041E  51BD               	movf	?___wmul& (0+255),w,b
  3394  000420  0100               	movlb	0	; () banked
  3395  000422  25C3               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  3396  000424  6ED9               	movwf	fsr2l,c
  3397  000426  0100               	movlb	0	; () banked
  3398  000428  51BE               	movf	(?___wmul+1)& (0+255),w,b
  3399  00042A  0100               	movlb	0	; () banked
  3400  00042C  21C4               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  3401  00042E  6EDA               	movwf	fsr2h,c
  3402  000430  C0C5  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  3403  000434  C0C6  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  3404  000438  CFDE FFE6          	movff	postinc2,postinc1
  3405  00043C  CFDE FFE6          	movff	postinc2,postinc1
  3406  000440  CFDE FFE6          	movff	postinc2,postinc1
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  3410  000444  0100               	movlb	0	; () banked
  3411  000446  EE20 F001          	lfsr	2,1
  3412  00044A  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3413  00044C  26D9               	addwf	fsr2l,f,c
  3414  00044E  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3415  000450  22DA               	addwfc	fsr2h,f,c
  3416  000452  2ADF               	incf	indf2,f,c
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3420  000454  C0CB  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  3421  000458  C0CC  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  3422  00045C  0100               	movlb	0	; () banked
  3423  00045E  EE10 F001          	lfsr	1,1
  3424  000462  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3425  000464  26E1               	addwf	fsr1l,f,c
  3426  000466  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3427  000468  22E2               	addwfc	fsr1h,f,c
  3428  00046A  50DE               	movf	postinc2,w,c
  3429  00046C  5CE6               	subwf	postinc1,w,c
  3430  00046E  A0D8               	btfss	status,0,c
  3431  000470  D019               	goto	l2576
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  3435  000472  0100               	movlb	0	; () banked
  3436  000474  EE20 F001          	lfsr	2,1
  3437  000478  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3438  00047A  26D9               	addwf	fsr2l,f,c
  3439  00047C  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3440  00047E  22DA               	addwfc	fsr2h,f,c
  3441  000480  C0CB  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  3442  000484  C0CC  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  3443  000488  50E7               	movf	indf1,w,c
  3444  00048A  0100               	movlb	0	; () banked
  3445  00048C  6FB7               	movwf	___lbmod@divisor& (0+255),b
  3446  00048E  0100               	movlb	0	; () banked
  3447  000490  EE10 F001          	lfsr	1,1
  3448  000494  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3449  000496  26E1               	addwf	fsr1l,f,c
  3450  000498  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3451  00049A  22E2               	addwfc	fsr1h,f,c
  3452  00049C  50E7               	movf	indf1,w,c
  3453  00049E  EC4A  F009         	call	___lbmod
  3454  0004A2  6EDF               	movwf	indf2,c
  3455  0004A4                     l2576:
  3456                           
  3457                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  3458  0004A4  0100               	movlb	0	; () banked
  3459  0004A6  EE20 F002          	lfsr	2,2
  3460  0004AA  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3461  0004AC  26D9               	addwf	fsr2l,f,c
  3462  0004AE  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3463  0004B0  22DA               	addwfc	fsr2h,f,c
  3464  0004B2  06DF               	decf	indf2,f,c
  3465  0004B4  50DF               	movf	indf2,w,c
  3466  0004B6  0100               	movlb	0	; () banked
  3467  0004B8  6FCA               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  3471  0004BA  C0C9  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  3472                           
  3473                           ;ES_Queue.c: 183: }else {
  3474  0004BE  D014               	goto	l2586
  3475  0004C0                     l2580:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  3479  0004C0  C0C5  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  3480  0004C4  C0C6  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  3481  0004C8  0E00               	movlw	0
  3482  0004CA  6EDF               	movwf	indf2,c
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  3486  0004CC  0100               	movlb	0	; () banked
  3487  0004CE  EE20 F001          	lfsr	2,1
  3488  0004D2  51C5               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  3489  0004D4  26D9               	addwf	fsr2l,f,c
  3490  0004D6  51C6               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  3491  0004D8  22DA               	addwfc	fsr2h,f,c
  3492  0004DA  0E00               	movlw	0
  3493  0004DC  6EDE               	movwf	postinc2,c
  3494  0004DE  0E00               	movlw	0
  3495  0004E0  6EDD               	movwf	postdec2,c
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;ES_Queue.c: 186: NumLeft = 0;
  3499  0004E2  0E00               	movlw	0
  3500  0004E4  0100               	movlb	0	; () banked
  3501  0004E6  6FCA               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3502  0004E8                     l2586:
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;ES_Queue.c: 187: }
  3506                           ;ES_Queue.c: 188: return NumLeft;
  3507  0004E8  0100               	movlb	0	; () banked
  3508  0004EA  51CA               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  3509  0004EC  0012               	return	
  3510  0004EE                     __end_of_ES_DeQueue:
  3511                           	opt stack 0
  3512                           tosu	equ	0xFFF
  3513                           tosh	equ	0xFFE
  3514                           tosl	equ	0xFFD
  3515                           pclath	equ	0xFFA
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           indf1	equ	0xFE7
  3526                           postinc1	equ	0xFE6
  3527                           fsr1h	equ	0xFE2
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function ___lbmod *****************
  3537 ;; Defined at:
  3538 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  dividend        1    wreg     unsigned char 
  3541 ;;  divisor         1    0[BANK0 ] unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  dividend        1    1[BANK0 ] unsigned char 
  3544 ;;  rem             1    3[BANK0 ] unsigned char 
  3545 ;;  counter         1    2[BANK0 ] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      unsigned char 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3555 ;;      Params:         0       1       0       0
  3556 ;;      Locals:         0       3       0       0
  3557 ;;      Temps:          0       0       0       0
  3558 ;;      Totals:         0       4       0       0
  3559 ;;Total ram usage:        4 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    6
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_ES_DeQueue
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text20
  3570  001294                     __ptext20:
  3571                           	opt stack 0
  3572  001294                     ___lbmod:
  3573                           	opt stack 22
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;incstack = 0
  3577                           ;___lbmod@dividend stored from wreg
  3578  001294  0100               	movlb	0	; () banked
  3579  001296  6FB8               	movwf	___lbmod@dividend& (0+255),b
  3580  001298  0E08               	movlw	8
  3581  00129A  0100               	movlb	0	; () banked
  3582  00129C  6FB9               	movwf	___lbmod@counter& (0+255),b
  3583  00129E  0E00               	movlw	0
  3584  0012A0  0100               	movlb	0	; () banked
  3585  0012A2  6FBA               	movwf	___lbmod@rem& (0+255),b
  3586  0012A4                     l2466:
  3587                           
  3588                           ; BSR set to: 0
  3589  0012A4  90D8               	bcf	status,0,c
  3590  0012A6  0100               	movlb	0	; () banked
  3591  0012A8  35B8               	rlcf	___lbmod@dividend& (0+255),w,b
  3592  0012AA  0100               	movlb	0	; () banked
  3593  0012AC  35BA               	rlcf	___lbmod@rem& (0+255),w,b
  3594  0012AE  0100               	movlb	0	; () banked
  3595  0012B0  6FBA               	movwf	___lbmod@rem& (0+255),b
  3596                           
  3597                           ; BSR set to: 0
  3598  0012B2  0100               	movlb	0	; () banked
  3599  0012B4  90D8               	bcf	status,0,c
  3600  0012B6  37B8               	rlcf	___lbmod@dividend& (0+255),f,b
  3601                           
  3602                           ; BSR set to: 0
  3603  0012B8  0100               	movlb	0	; () banked
  3604  0012BA  51B7               	movf	___lbmod@divisor& (0+255),w,b
  3605  0012BC  0100               	movlb	0	; () banked
  3606  0012BE  5DBA               	subwf	___lbmod@rem& (0+255),w,b
  3607  0012C0  A0D8               	btfss	status,0,c
  3608  0012C2  D004               	goto	l2474
  3609                           
  3610                           ; BSR set to: 0
  3611  0012C4  0100               	movlb	0	; () banked
  3612  0012C6  51B7               	movf	___lbmod@divisor& (0+255),w,b
  3613  0012C8  0100               	movlb	0	; () banked
  3614  0012CA  5FBA               	subwf	___lbmod@rem& (0+255),f,b
  3615  0012CC                     l2474:
  3616                           
  3617                           ; BSR set to: 0
  3618  0012CC  0100               	movlb	0	; () banked
  3619  0012CE  2FB9               	decfsz	___lbmod@counter& (0+255),f,b
  3620  0012D0  D7E9               	goto	l2466
  3621                           
  3622                           ; BSR set to: 0
  3623                           
  3624                           ; BSR set to: 0
  3625  0012D2  0100               	movlb	0	; () banked
  3626  0012D4  51BA               	movf	___lbmod@rem& (0+255),w,b
  3627  0012D6  0012               	return	
  3628  0012D8                     __end_of___lbmod:
  3629                           	opt stack 0
  3630                           tosu	equ	0xFFF
  3631                           tosh	equ	0xFFE
  3632                           tosl	equ	0xFFD
  3633                           pclath	equ	0xFFA
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           indf1	equ	0xFE7
  3644                           postinc1	equ	0xFE6
  3645                           fsr1h	equ	0xFE2
  3646                           fsr1l	equ	0xFE1
  3647                           indf2	equ	0xFDF
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _ES_CheckUserEvents *****************
  3655 ;; Defined at:
  3656 ;;		line 46 in file "ES_CheckEvents.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  i               1   37[BANK0 ] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      unsigned char 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3670 ;;      Params:         0       0       0       0
  3671 ;;      Locals:         0       1       0       0
  3672 ;;      Temps:          0       0       0       0
  3673 ;;      Totals:         0       1       0       0
  3674 ;;Total ram usage:        1 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:   11
  3677 ;; This function calls:
  3678 ;;		_Check4Keystroke
  3679 ;;		_CheckButtonEvents
  3680 ;; This function is called by:
  3681 ;;		_ES_Run
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text21
  3686  001202                     __ptext21:
  3687                           	opt stack 0
  3688  001202                     _ES_CheckUserEvents:
  3689                           	opt stack 18
  3690                           
  3691                           ;ES_CheckEvents.c: 48: uint8_t i;
  3692                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;incstack = 0
  3696  001202  0E00               	movlw	0
  3697  001204  0100               	movlb	0	; () banked
  3698  001206  6FDC               	movwf	ES_CheckUserEvents@i& (0+255),b
  3699  001208                     l2546:
  3700                           
  3701                           ; BSR set to: 0
  3702  001208  0E01               	movlw	1
  3703  00120A  0100               	movlb	0	; () banked
  3704  00120C  65DC               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  3705  00120E  D001               	goto	l2550
  3706  001210  0012               	return	
  3707  001212                     l2550:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  3711  001212  0100               	movlb	0	; () banked
  3712  001214  51DC               	movf	ES_CheckUserEvents@i& (0+255),w,b
  3713  001216  0D02               	mullw	2
  3714  001218  0E65               	movlw	low _ES_EventList
  3715  00121A  24F3               	addwf	prodl,w,c
  3716  00121C  6EF6               	movwf	tblptrl,c
  3717  00121E  0E03               	movlw	high _ES_EventList
  3718  001220  20F4               	addwfc	prodh,w,c
  3719  001222  6EF7               	movwf	tblptrh,c
  3720  001224                     	if	0	;There are less than 3 active tblptr bytes
  3721  001224                     	endif
  3722  001224  D801               	call	u1418
  3723  001226  D00C               	goto	u1419
  3724  001228                     u1418:
  3725  001228  0005               	push	
  3726  00122A  6EFA               	movwf	pclath,c
  3727  00122C  0009               	tblrd		*+
  3728  00122E  50F5               	movf	tablat,w,c
  3729  001230  6EFD               	movwf	tosl,c
  3730  001232  0009               	tblrd		*+
  3731  001234  50F5               	movf	tablat,w,c
  3732  001236  6EFE               	movwf	tosh,c
  3733  001238  50F8               	movf	tblptru,w,c
  3734  00123A  6EFF               	movwf	tosu,c
  3735  00123C  50FA               	movf	pclath,w,c
  3736  00123E  0012               	return		;indir
  3737  001240                     u1419:
  3738  001240  06E8               	decf	wreg,f,c
  3739  001242  B4D8               	btfsc	status,2,c
  3740  001244  0012               	return	
  3741                           
  3742                           ;ES_CheckEvents.c: 52: break;
  3743  001246  0100               	movlb	0	; () banked
  3744  001248  2BDC               	incf	ES_CheckUserEvents@i& (0+255),f,b
  3745  00124A  D7DE               	goto	l2546
  3746  00124C                     __end_of_ES_CheckUserEvents:
  3747                           	opt stack 0
  3748                           tosu	equ	0xFFF
  3749                           tosh	equ	0xFFE
  3750                           tosl	equ	0xFFD
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           postinc0	equ	0xFEE
  3760                           wreg	equ	0xFE8
  3761                           indf1	equ	0xFE7
  3762                           postinc1	equ	0xFE6
  3763                           fsr1h	equ	0xFE2
  3764                           fsr1l	equ	0xFE1
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _Check4Keystroke *****************
  3773 ;; Defined at:
  3774 ;;		line 62 in file "EventCheckers.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      unsigned char 
  3781 ;; Registers used:
  3782 ;;		wreg
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3788 ;;      Params:         0       0       0       0
  3789 ;;      Locals:         0       0       0       0
  3790 ;;      Temps:          0       0       0       0
  3791 ;;      Totals:         0       0       0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    6
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_ES_CheckUserEvents
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text22
  3803  001548                     __ptext22:
  3804                           	opt stack 0
  3805  001548                     _Check4Keystroke:
  3806                           	opt stack 22
  3807                           
  3808                           ;EventCheckers.c: 78: return 0;
  3809                           
  3810                           ;incstack = 0
  3811  001548  0E00               	movlw	0
  3812  00154A  0012               	return	
  3813  00154C                     __end_of_Check4Keystroke:
  3814                           	opt stack 0
  3815                           tosu	equ	0xFFF
  3816                           tosh	equ	0xFFE
  3817                           tosl	equ	0xFFD
  3818                           pclath	equ	0xFFA
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           intcon	equ	0xFF2
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           indf1	equ	0xFE7
  3829                           postinc1	equ	0xFE6
  3830                           fsr1h	equ	0xFE2
  3831                           fsr1l	equ	0xFE1
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _CheckButtonEvents *****************
  3840 ;; Defined at:
  3841 ;;		line 44 in file "Button.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3846 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3847 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      unsigned char 
  3850 ;; Registers used:
  3851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3857 ;;      Params:         0       0       0       0
  3858 ;;      Locals:         0       5       0       0
  3859 ;;      Temps:          0       0       0       0
  3860 ;;      Totals:         0       5       0       0
  3861 ;;Total ram usage:        5 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:   10
  3864 ;; This function calls:
  3865 ;;		_GetInputLine
  3866 ;;		_PostButtonDebounceSM
  3867 ;; This function is called by:
  3868 ;;		_ES_CheckUserEvents
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text23
  3873  0010DE                     __ptext23:
  3874                           	opt stack 0
  3875  0010DE                     _CheckButtonEvents:
  3876                           	opt stack 18
  3877                           
  3878                           ;Button.c: 46: uint8_t CurrentButtonState;
  3879                           ;Button.c: 47: bool ReturnVal = 0;
  3880                           
  3881                           ;incstack = 0
  3882  0010DE  0E00               	movlw	0
  3883  0010E0  0100               	movlb	0	; () banked
  3884  0010E2  6FD7               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;Button.c: 49: CurrentButtonState = GetInputLine();
  3888  0010E4  EC9A  F00A         	call	_GetInputLine	;wreg free
  3889  0010E8  0100               	movlb	0	; () banked
  3890  0010EA  6FDB               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;Button.c: 51: if (CurrentButtonState != LastButtonState) {
  3894  0010EC  0100               	movlb	0	; () banked
  3895  0010EE  518D               	movf	_LastButtonState& (0+255),w,b
  3896  0010F0  0100               	movlb	0	; () banked
  3897  0010F2  19DB               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3898  0010F4  B4D8               	btfsc	status,2,c
  3899  0010F6  D023               	goto	l2328
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;Button.c: 53: ReturnVal = 1;
  3903  0010F8  0E01               	movlw	1
  3904  0010FA  0100               	movlb	0	; () banked
  3905  0010FC  6FD7               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;Button.c: 54: ES_Event ThisEvent;
  3909                           ;Button.c: 55: ThisEvent.EventParam = CurrentButtonState;
  3910  0010FE  C0DB  F0D9         	movff	CheckButtonEvents@CurrentButtonState,CheckButtonEvents@ThisEvent+1
  3911  001102  0100               	movlb	0	; () banked
  3912  001104  6BDA               	clrf	(CheckButtonEvents@ThisEvent+2)& (0+255),b
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;Button.c: 57: if (CurrentButtonState != 0x7F) {
  3916  001106  0E7F               	movlw	127
  3917  001108  0100               	movlb	0	; () banked
  3918  00110A  19DB               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3919  00110C  B4D8               	btfsc	status,2,c
  3920  00110E  D00C               	goto	l2324
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;Button.c: 59: ThisEvent.EventType = DBButtonDown;
  3924  001110  0E05               	movlw	5
  3925  001112  0100               	movlb	0	; () banked
  3926  001114  6FD8               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;Button.c: 60: PostButtonDebounceSM(ThisEvent);
  3930  001116  C0D8  F0D4         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3931  00111A  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3932  00111E  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3933  001122  EC68  F00A         	call	_PostButtonDebounceSM	;wreg free
  3934                           
  3935                           ;Button.c: 62: } else {
  3936  001126  D00B               	goto	l2328
  3937  001128                     l2324:
  3938                           
  3939                           ;Button.c: 64: ThisEvent.EventType = DBButtonUp;
  3940  001128  0E06               	movlw	6
  3941  00112A  0100               	movlb	0	; () banked
  3942  00112C  6FD8               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;Button.c: 65: PostButtonDebounceSM(ThisEvent);
  3946  00112E  C0D8  F0D4         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3947  001132  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3948  001136  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3949  00113A  EC68  F00A         	call	_PostButtonDebounceSM	;wreg free
  3950  00113E                     l2328:
  3951                           
  3952                           ;Button.c: 66: }
  3953                           ;Button.c: 67: }
  3954                           ;Button.c: 69: LastButtonState = CurrentButtonState;
  3955  00113E  C0DB  F08D         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  3956                           
  3957                           ;Button.c: 71: return ReturnVal;
  3958  001142  0100               	movlb	0	; () banked
  3959  001144  51D7               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  3960  001146  0012               	return	
  3961  001148                     __end_of_CheckButtonEvents:
  3962                           	opt stack 0
  3963                           tosu	equ	0xFFF
  3964                           tosh	equ	0xFFE
  3965                           tosl	equ	0xFFD
  3966                           pclath	equ	0xFFA
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           indf1	equ	0xFE7
  3977                           postinc1	equ	0xFE6
  3978                           fsr1h	equ	0xFE2
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _ES_Initialize *****************
  3988 ;; Defined at:
  3989 ;;		line 242 in file "ES_Framework.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  NewRate         2   33[BANK0 ] enum E15422
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  i               1   35[BANK0 ] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      enum E15493
  3996 ;; Registers used:
  3997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4003 ;;      Params:         0       2       0       0
  4004 ;;      Locals:         0       1       0       0
  4005 ;;      Temps:          0       0       0       0
  4006 ;;      Totals:         0       3       0       0
  4007 ;;Total ram usage:        3 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:   10
  4010 ;; This function calls:
  4011 ;;		_ES_InitQueue
  4012 ;;		_ES_Timer_Init
  4013 ;;		_InitAnalogService
  4014 ;;		_InitCan_XmitService
  4015 ;;		_InitializeButtonDebounce
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           	psect	text24
  4022  0006F8                     __ptext24:
  4023                           	opt stack 0
  4024  0006F8                     _ES_Initialize:
  4025                           	opt stack 20
  4026                           
  4027                           ;ES_Framework.c: 243: uint8_t i;
  4028                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;incstack = 0
  4032  0006F8  C0D8  F0B9         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4033  0006FC  C0D9  F0BA         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4034  000700  EC89  F00A         	call	_ES_Timer_Init	;wreg free
  4035                           
  4036                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4037  000704  0E00               	movlw	0
  4038  000706  0100               	movlb	0	; () banked
  4039  000708  6FDA               	movwf	ES_Initialize@i& (0+255),b
  4040  00070A                     l2726:
  4041                           
  4042                           ; BSR set to: 0
  4043  00070A  0E02               	movlw	2
  4044  00070C  0100               	movlb	0	; () banked
  4045  00070E  65DA               	cpfsgt	ES_Initialize@i& (0+255),b
  4046  000710  D001               	goto	l2730
  4047  000712  D066               	goto	l2750
  4048  000714                     l2730:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4052                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4053  000714  0100               	movlb	0	; () banked
  4054  000716  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4055  000718  0D04               	mullw	4
  4056  00071A  0E50               	movlw	low _ServDescList
  4057  00071C  24F3               	addwf	prodl,w,c
  4058  00071E  6EF6               	movwf	tblptrl,c
  4059  000720  0E03               	movlw	high _ServDescList
  4060  000722  20F4               	addwfc	prodh,w,c
  4061  000724  6EF7               	movwf	tblptrh,c
  4062  000726                     	if	0	;There are less than 3 active tblptr bytes
  4063  000726                     	endif
  4064  000726  0009               	tblrd		*+
  4065  000728  50F5               	movf	tablat,w,c
  4066  00072A  0009               	tblrd		*+
  4067  00072C  10F5               	iorwf	tablat,w,c
  4068  00072E  B4D8               	btfsc	status,2,c
  4069  000730  D013               	goto	l2734
  4070                           
  4071                           ; BSR set to: 0
  4072  000732  0100               	movlb	0	; () banked
  4073  000734  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4074  000736  0D04               	mullw	4
  4075  000738  0E02               	movlw	2
  4076  00073A  26F3               	addwf	prodl,f,c
  4077  00073C  0E00               	movlw	0
  4078  00073E  22F4               	addwfc	prodh,f,c
  4079  000740  0E50               	movlw	low _ServDescList
  4080  000742  24F3               	addwf	prodl,w,c
  4081  000744  6EF6               	movwf	tblptrl,c
  4082  000746  0E03               	movlw	high _ServDescList
  4083  000748  20F4               	addwfc	prodh,w,c
  4084  00074A  6EF7               	movwf	tblptrh,c
  4085  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4086  00074C                     	endif
  4087  00074C  0009               	tblrd		*+
  4088  00074E  50F5               	movf	tablat,w,c
  4089  000750  0009               	tblrd		*+
  4090  000752  10F5               	iorwf	tablat,w,c
  4091  000754  A4D8               	btfss	status,2,c
  4092  000756  D002               	goto	l2738
  4093  000758                     l2734:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;ES_Framework.c: 249: return FailedPointer;
  4097  000758  0E03               	movlw	3
  4098                           
  4099                           ; BSR set to: 0
  4100  00075A  0012               	return	
  4101  00075C                     l2738:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4105  00075C  0100               	movlb	0	; () banked
  4106  00075E  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4107  000760  0D03               	mullw	3
  4108  000762  0E5C               	movlw	low _EventQueues
  4109  000764  24F3               	addwf	prodl,w,c
  4110  000766  6EF6               	movwf	tblptrl,c
  4111  000768  0E03               	movlw	high _EventQueues
  4112  00076A  20F4               	addwfc	prodh,w,c
  4113  00076C  6EF7               	movwf	tblptrh,c
  4114  00076E                     	if	0	;There are less than 3 active tblptr bytes
  4115  00076E                     	endif
  4116  00076E  0009               	tblrd		*+
  4117  000770  CFF5 F0B7          	movff	tablat,ES_InitQueue@pBlock
  4118  000774  000A               	tblrd		*-
  4119  000776  CFF5 F0B8          	movff	tablat,ES_InitQueue@pBlock+1
  4120  00077A  0100               	movlb	0	; () banked
  4121  00077C  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4122  00077E  0D03               	mullw	3
  4123  000780  0E02               	movlw	2
  4124  000782  26F3               	addwf	prodl,f,c
  4125  000784  0E00               	movlw	0
  4126  000786  22F4               	addwfc	prodh,f,c
  4127  000788  0E5C               	movlw	low _EventQueues
  4128  00078A  24F3               	addwf	prodl,w,c
  4129  00078C  6EF6               	movwf	tblptrl,c
  4130  00078E  0E03               	movlw	high _EventQueues
  4131  000790  20F4               	addwfc	prodh,w,c
  4132  000792  6EF7               	movwf	tblptrh,c
  4133  000794                     	if	0	;There are less than 3 active tblptr bytes
  4134  000794                     	endif
  4135  000794  0008               	tblrd		*
  4136  000796  CFF5 F0B9          	movff	tablat,ES_InitQueue@BlockSize
  4137  00079A  EC6C  F009         	call	_ES_InitQueue	;wreg free
  4138                           
  4139                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  4140  00079E  0100               	movlb	0	; () banked
  4141  0007A0  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4142  0007A2  0D04               	mullw	4
  4143  0007A4  0E50               	movlw	low _ServDescList
  4144  0007A6  24F3               	addwf	prodl,w,c
  4145  0007A8  6EF6               	movwf	tblptrl,c
  4146  0007AA  0E03               	movlw	high _ServDescList
  4147  0007AC  20F4               	addwfc	prodh,w,c
  4148  0007AE  6EF7               	movwf	tblptrh,c
  4149  0007B0                     	if	0	;There are less than 3 active tblptr bytes
  4150  0007B0                     	endif
  4151  0007B0  D801               	call	u1618
  4152  0007B2  D00E               	goto	u1619
  4153  0007B4                     u1618:
  4154  0007B4  0005               	push	
  4155  0007B6  6EFA               	movwf	pclath,c
  4156  0007B8  0009               	tblrd		*+
  4157  0007BA  50F5               	movf	tablat,w,c
  4158  0007BC  6EFD               	movwf	tosl,c
  4159  0007BE  0009               	tblrd		*+
  4160  0007C0  50F5               	movf	tablat,w,c
  4161  0007C2  6EFE               	movwf	tosh,c
  4162  0007C4  50F8               	movf	tblptru,w,c
  4163  0007C6  6EFF               	movwf	tosu,c
  4164  0007C8  50FA               	movf	pclath,w,c
  4165  0007CA  0100               	movlb	0	; () banked
  4166  0007CC  51DA               	movf	ES_Initialize@i& (0+255),w,b
  4167  0007CE  0012               	return		;indir
  4168  0007D0                     u1619:
  4169  0007D0  06E8               	decf	wreg,f,c
  4170  0007D2  B4D8               	btfsc	status,2,c
  4171  0007D4  D002               	goto	l2746
  4172                           
  4173                           ;ES_Framework.c: 254: return FailedInit;
  4174  0007D6  0E05               	movlw	5
  4175  0007D8  0012               	return	
  4176  0007DA                     l2746:
  4177  0007DA  0100               	movlb	0	; () banked
  4178  0007DC  2BDA               	incf	ES_Initialize@i& (0+255),f,b
  4179  0007DE  D795               	goto	l2726
  4180  0007E0                     l2750:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;ES_Framework.c: 255: }
  4184                           ;ES_Framework.c: 256: return Success;
  4185  0007E0  0E00               	movlw	0
  4186  0007E2  0012               	return	
  4187  0007E4                     __end_of_ES_Initialize:
  4188                           	opt stack 0
  4189                           tosu	equ	0xFFF
  4190                           tosh	equ	0xFFE
  4191                           tosl	equ	0xFFD
  4192                           pclath	equ	0xFFA
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           indf1	equ	0xFE7
  4203                           postinc1	equ	0xFE6
  4204                           fsr1h	equ	0xFE2
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           postinc2	equ	0xFDE
  4208                           postdec2	equ	0xFDD
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _InitAnalogService *****************
  4214 ;; Defined at:
  4215 ;;		line 31 in file "Analog_Service.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  Priority        1    wreg     unsigned char 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  Priority        1   32[BANK0 ] unsigned char 
  4220 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      unsigned char 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4230 ;;      Params:         0       0       0       0
  4231 ;;      Locals:         0       4       0       0
  4232 ;;      Temps:          0       0       0       0
  4233 ;;      Totals:         0       4       0       0
  4234 ;;Total ram usage:        4 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    9
  4237 ;; This function calls:
  4238 ;;		_ES_PostToService
  4239 ;; This function is called by:
  4240 ;;		_ES_Initialize
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text25
  4245  00137E                     __ptext25:
  4246                           	opt stack 0
  4247  00137E                     _InitAnalogService:
  4248                           	opt stack 20
  4249                           
  4250                           ;incstack = 0
  4251                           ;InitAnalogService@Priority stored from wreg
  4252  00137E  0100               	movlb	0	; () banked
  4253  001380  6FD7               	movwf	InitAnalogService@Priority& (0+255),b
  4254                           
  4255                           ;Analog_Service.c: 33: ES_Event ThisEvent;
  4256                           ;Analog_Service.c: 34: MyPriority = Priority;
  4257  001382  C0D7  F089         	movff	InitAnalogService@Priority,Analog_Service@MyPriority
  4258                           
  4259                           ;Analog_Service.c: 37: ThisEvent.EventType = ES_INIT;
  4260  001386  0E02               	movlw	2
  4261  001388  0100               	movlb	0	; () banked
  4262  00138A  6FD4               	movwf	InitAnalogService@ThisEvent& (0+255),b
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;Analog_Service.c: 38: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4266  00138C  C0D4  F0CE         	movff	InitAnalogService@ThisEvent,ES_PostToService@TheEvent
  4267  001390  C0D5  F0CF         	movff	InitAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  4268  001394  C0D6  F0D0         	movff	InitAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  4269  001398  0100               	movlb	0	; () banked
  4270  00139A  5189               	movf	Analog_Service@MyPriority& (0+255),w,b
  4271  00139C  ECC5  F007         	call	_ES_PostToService
  4272  0013A0  06E8               	decf	wreg,f,c
  4273  0013A2  A4D8               	btfss	status,2,c
  4274  0013A4  D002               	goto	l2686
  4275                           
  4276                           ;Analog_Service.c: 39: {
  4277                           ;Analog_Service.c: 40: return 1;
  4278  0013A6  0E01               	movlw	1
  4279                           
  4280                           ;Analog_Service.c: 41: }else
  4281  0013A8  0012               	return	
  4282  0013AA                     l2686:
  4283                           
  4284                           ;Analog_Service.c: 42: {
  4285                           ;Analog_Service.c: 43: return 0;
  4286  0013AA  0E00               	movlw	0
  4287  0013AC  0012               	return	
  4288  0013AE                     __end_of_InitAnalogService:
  4289                           	opt stack 0
  4290                           tosu	equ	0xFFF
  4291                           tosh	equ	0xFFE
  4292                           tosl	equ	0xFFD
  4293                           pclath	equ	0xFFA
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           indf1	equ	0xFE7
  4304                           postinc1	equ	0xFE6
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _InitCan_XmitService *****************
  4315 ;; Defined at:
  4316 ;;		line 85 in file "Can_XmitService.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  Priority        1    wreg     unsigned char 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  Priority        1   32[BANK0 ] unsigned char 
  4321 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      unsigned char 
  4324 ;; Registers used:
  4325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4331 ;;      Params:         0       0       0       0
  4332 ;;      Locals:         0       4       0       0
  4333 ;;      Temps:          0       0       0       0
  4334 ;;      Totals:         0       4       0       0
  4335 ;;Total ram usage:        4 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    9
  4338 ;; This function calls:
  4339 ;;		_ES_PostToService
  4340 ;; This function is called by:
  4341 ;;		_ES_Initialize
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text26
  4346  0013AE                     __ptext26:
  4347                           	opt stack 0
  4348  0013AE                     _InitCan_XmitService:
  4349                           	opt stack 20
  4350                           
  4351                           ;incstack = 0
  4352                           ;InitCan_XmitService@Priority stored from wreg
  4353  0013AE  0100               	movlb	0	; () banked
  4354  0013B0  6FD7               	movwf	InitCan_XmitService@Priority& (0+255),b
  4355                           
  4356                           ;Can_XmitService.c: 87: ES_Event ThisEvent;
  4357                           ;Can_XmitService.c: 89: MyPriority = Priority;
  4358  0013B2  C0D7  F08A         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  4359                           
  4360                           ;Can_XmitService.c: 92: ThisEvent.EventType = ES_INIT;
  4361  0013B6  0E02               	movlw	2
  4362  0013B8  0100               	movlb	0	; () banked
  4363  0013BA  6FD4               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;Can_XmitService.c: 93: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4367  0013BC  C0D4  F0CE         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  4368  0013C0  C0D5  F0CF         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  4369  0013C4  C0D6  F0D0         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  4370  0013C8  0100               	movlb	0	; () banked
  4371  0013CA  518A               	movf	Can_XmitService@MyPriority& (0+255),w,b
  4372  0013CC  ECC5  F007         	call	_ES_PostToService
  4373  0013D0  06E8               	decf	wreg,f,c
  4374  0013D2  A4D8               	btfss	status,2,c
  4375  0013D4  D002               	goto	l2626
  4376                           
  4377                           ;Can_XmitService.c: 94: {
  4378                           ;Can_XmitService.c: 95: return 1;
  4379  0013D6  0E01               	movlw	1
  4380                           
  4381                           ;Can_XmitService.c: 96: }else
  4382  0013D8  0012               	return	
  4383  0013DA                     l2626:
  4384                           
  4385                           ;Can_XmitService.c: 97: {
  4386                           ;Can_XmitService.c: 98: return 0;
  4387  0013DA  0E00               	movlw	0
  4388  0013DC  0012               	return	
  4389  0013DE                     __end_of_InitCan_XmitService:
  4390                           	opt stack 0
  4391                           tosu	equ	0xFFF
  4392                           tosh	equ	0xFFE
  4393                           tosl	equ	0xFFD
  4394                           pclath	equ	0xFFA
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf1	equ	0xFE7
  4405                           postinc1	equ	0xFE6
  4406                           fsr1h	equ	0xFE2
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _InitializeButtonDebounce *****************
  4416 ;; Defined at:
  4417 ;;		line 27 in file "Button.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  Priority        1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  Priority        1    5[BANK0 ] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      unsigned char 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4431 ;;      Params:         0       0       0       0
  4432 ;;      Locals:         0       1       0       0
  4433 ;;      Temps:          0       0       0       0
  4434 ;;      Totals:         0       1       0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    7
  4438 ;; This function calls:
  4439 ;;		_ES_Timer_InitTimer
  4440 ;;		_GetInputLine
  4441 ;;		_InitButtonHW
  4442 ;; This function is called by:
  4443 ;;		_ES_Initialize
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text27
  4448  0013DE                     __ptext27:
  4449                           	opt stack 0
  4450  0013DE                     _InitializeButtonDebounce:
  4451                           	opt stack 22
  4452                           
  4453                           ;incstack = 0
  4454                           ;InitializeButtonDebounce@Priority stored from wreg
  4455  0013DE  0100               	movlb	0	; () banked
  4456  0013E0  6FBC               	movwf	InitializeButtonDebounce@Priority& (0+255),b
  4457                           
  4458                           ;Button.c: 29: MyPriority = Priority;
  4459  0013E2  C0BC  F08E         	movff	InitializeButtonDebounce@Priority,_MyPriority
  4460                           
  4461                           ;Button.c: 30: InitButtonHW();
  4462  0013E6  EC90  F00A         	call	_InitButtonHW	;wreg free
  4463                           
  4464                           ;Button.c: 33: LastButtonState = GetInputLine();
  4465  0013EA  EC9A  F00A         	call	_GetInputLine	;wreg free
  4466  0013EE  0100               	movlb	0	; () banked
  4467  0013F0  6F8D               	movwf	_LastButtonState& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;Button.c: 35: CurrentState = Debouncing;
  4471  0013F2  0E00               	movlw	0
  4472  0013F4  0100               	movlb	0	; () banked
  4473  0013F6  6F8C               	movwf	_CurrentState& (0+255),b
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;Button.c: 37: ES_Timer_InitTimer(1,3);
  4477  0013F8  0E00               	movlw	0
  4478  0013FA  0100               	movlb	0	; () banked
  4479  0013FC  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  4480  0013FE  0E03               	movlw	3
  4481  001400  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  4482  001402  0E01               	movlw	1
  4483  001404  EC0B  F007         	call	_ES_Timer_InitTimer
  4484                           
  4485                           ;Button.c: 39: return 1;
  4486  001408  0E01               	movlw	1
  4487  00140A  0012               	return	
  4488  00140C                     __end_of_InitializeButtonDebounce:
  4489                           	opt stack 0
  4490                           tosu	equ	0xFFF
  4491                           tosh	equ	0xFFE
  4492                           tosl	equ	0xFFD
  4493                           pclath	equ	0xFFA
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           prodh	equ	0xFF4
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           indf1	equ	0xFE7
  4504                           postinc1	equ	0xFE6
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _InitButtonHW *****************
  4515 ;; Defined at:
  4516 ;;		line 134 in file "Button.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4530 ;;      Params:         0       0       0       0
  4531 ;;      Locals:         0       0       0       0
  4532 ;;      Temps:          0       0       0       0
  4533 ;;      Totals:         0       0       0       0
  4534 ;;Total ram usage:        0 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    6
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_InitializeButtonDebounce
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text28
  4545  001520                     __ptext28:
  4546                           	opt stack 0
  4547  001520                     _InitButtonHW:
  4548                           	opt stack 22
  4549                           
  4550                           ;Button.c: 135: PORTC = 0x00;
  4551                           
  4552                           ;incstack = 0
  4553  001520  0E00               	movlw	0
  4554  001522  6E82               	movwf	3970,c	;volatile
  4555                           
  4556                           ;Button.c: 136: LATC = 0x00;
  4557  001524  0E00               	movlw	0
  4558  001526  6E8B               	movwf	3979,c	;volatile
  4559                           
  4560                           ;Button.c: 137: PORTC = 0xFF;
  4561  001528  6882               	setf	3970,c	;volatile
  4562  00152A  0012               	return		;funcret
  4563  00152C                     __end_of_InitButtonHW:
  4564                           	opt stack 0
  4565                           tosu	equ	0xFFF
  4566                           tosh	equ	0xFFE
  4567                           tosl	equ	0xFFD
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           indf1	equ	0xFE7
  4579                           postinc1	equ	0xFE6
  4580                           fsr1h	equ	0xFE2
  4581                           fsr1l	equ	0xFE1
  4582                           indf2	equ	0xFDF
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function _GetInputLine *****************
  4590 ;; Defined at:
  4591 ;;		line 129 in file "Button.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      unsigned char 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4605 ;;      Params:         0       0       0       0
  4606 ;;      Locals:         0       0       0       0
  4607 ;;      Temps:          0       0       0       0
  4608 ;;      Totals:         0       0       0       0
  4609 ;;Total ram usage:        0 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    6
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_InitializeButtonDebounce
  4616 ;;		_CheckButtonEvents
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           	psect	text29
  4621  001534                     __ptext29:
  4622                           	opt stack 0
  4623  001534                     _GetInputLine:
  4624                           	opt stack 21
  4625                           
  4626                           ;Button.c: 131: return PORTC & 0x0F;
  4627                           
  4628                           ;incstack = 0
  4629  001534  5082               	movf	3970,w,c	;volatile
  4630  001536  0B0F               	andlw	15
  4631  001538  0012               	return	
  4632  00153A                     __end_of_GetInputLine:
  4633                           	opt stack 0
  4634                           tosu	equ	0xFFF
  4635                           tosh	equ	0xFFE
  4636                           tosl	equ	0xFFD
  4637                           pclath	equ	0xFFA
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           intcon	equ	0xFF2
  4645                           postinc0	equ	0xFEE
  4646                           wreg	equ	0xFE8
  4647                           indf1	equ	0xFE7
  4648                           postinc1	equ	0xFE6
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _ES_Timer_InitTimer *****************
  4659 ;; Defined at:
  4660 ;;		line 229 in file "ES_Timers.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  Num             1    wreg     unsigned char 
  4663 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  Num             1    4[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  1    wreg      enum E15445
  4668 ;; Registers used:
  4669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4675 ;;      Params:         0       2       0       0
  4676 ;;      Locals:         0       1       0       0
  4677 ;;      Temps:          0       2       0       0
  4678 ;;      Totals:         0       5       0       0
  4679 ;;Total ram usage:        5 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    6
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_InitializeButtonDebounce
  4686 ;;		_RunButtonDebounceSM
  4687 ;;		_RunAnalogService
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text30
  4692  000E16                     __ptext30:
  4693                           	opt stack 0
  4694  000E16                     _ES_Timer_InitTimer:
  4695                           	opt stack 22
  4696                           
  4697                           ;incstack = 0
  4698                           ;ES_Timer_InitTimer@Num stored from wreg
  4699  000E16  0100               	movlb	0	; () banked
  4700  000E18  6FBB               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4701                           
  4702                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4703                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4704                           ;ES_Timers.c: 236: (NewTime == 0) )
  4705  000E1A  0E10               	movlw	16
  4706  000E1C  0100               	movlb	0	; () banked
  4707  000E1E  61BB               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4708  000E20  0012               	return	
  4709                           
  4710                           ; BSR set to: 0
  4711  000E22  0100               	movlb	0	; () banked
  4712  000E24  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4713  000E26  0D02               	mullw	2
  4714  000E28  0E21               	movlw	low _Timer2PostFunc
  4715  000E2A  24F3               	addwf	prodl,w,c
  4716  000E2C  6EF6               	movwf	tblptrl,c
  4717  000E2E  0E03               	movlw	high _Timer2PostFunc
  4718  000E30  20F4               	addwfc	prodh,w,c
  4719  000E32  6EF7               	movwf	tblptrh,c
  4720  000E34                     	if	0	;There are less than 3 active tblptr bytes
  4721  000E34                     	endif
  4722  000E34  0009               	tblrd		*+
  4723  000E36  50F5               	movf	tablat,w,c
  4724  000E38  0009               	tblrd		*+
  4725  000E3A  10F5               	iorwf	tablat,w,c
  4726  000E3C  B4D8               	btfsc	status,2,c
  4727  000E3E  0012               	return	
  4728                           
  4729                           ; BSR set to: 0
  4730  000E40  0100               	movlb	0	; () banked
  4731  000E42  51B7               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4732  000E44  0100               	movlb	0	; () banked
  4733  000E46  11B8               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4734  000E48  B4D8               	btfsc	status,2,c
  4735  000E4A  0012               	return	
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4739                           
  4740                           ; BSR set to: 0
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4744                           ;	Return value of _ES_Timer_InitTimer is never used
  4745  000E4C  0100               	movlb	0	; () banked
  4746  000E4E  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4747  000E50  0D02               	mullw	2
  4748  000E52  0E60               	movlw	low _TMR_TimerArray
  4749  000E54  24F3               	addwf	prodl,w,c
  4750  000E56  6ED9               	movwf	fsr2l,c
  4751  000E58  0E00               	movlw	high _TMR_TimerArray
  4752  000E5A  20F4               	addwfc	prodh,w,c
  4753  000E5C  6EDA               	movwf	fsr2h,c
  4754  000E5E  C0B7  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4755  000E62  C0B8  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4759  000E66  0100               	movlb	0	; () banked
  4760  000E68  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4761  000E6A  0D02               	mullw	2
  4762  000E6C  0E01               	movlw	low _BitNum2SetMask
  4763  000E6E  24F3               	addwf	prodl,w,c
  4764  000E70  6EF6               	movwf	tblptrl,c
  4765  000E72  0E03               	movlw	high _BitNum2SetMask
  4766  000E74  20F4               	addwfc	prodh,w,c
  4767  000E76  6EF7               	movwf	tblptrh,c
  4768  000E78                     	if	0	;There are less than 3 active tblptr bytes
  4769  000E78                     	endif
  4770  000E78  0009               	tblrd		*+
  4771  000E7A  CFF5 F0B9          	movff	tablat,??_ES_Timer_InitTimer
  4772  000E7E  0009               	tblrd		*+
  4773  000E80  CFF5 F0BA          	movff	tablat,??_ES_Timer_InitTimer+1
  4774  000E84  0100               	movlb	0	; () banked
  4775  000E86  51B9               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4776  000E88  0100               	movlb	0	; () banked
  4777  000E8A  1387               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4778  000E8C  0100               	movlb	0	; () banked
  4779  000E8E  51BA               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4780  000E90  0100               	movlb	0	; () banked
  4781  000E92  1388               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4782  000E94  0012               	return	
  4783  000E96                     __end_of_ES_Timer_InitTimer:
  4784                           	opt stack 0
  4785                           tosu	equ	0xFFF
  4786                           tosh	equ	0xFFE
  4787                           tosl	equ	0xFFD
  4788                           pclath	equ	0xFFA
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           indf1	equ	0xFE7
  4799                           postinc1	equ	0xFE6
  4800                           fsr1h	equ	0xFE2
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           postinc2	equ	0xFDE
  4804                           postdec2	equ	0xFDD
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _ES_PostToService *****************
  4810 ;; Defined at:
  4811 ;;		line 351 in file "ES_Framework.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  WhichService    1    wreg     unsigned char 
  4814 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  WhichService    1   28[BANK0 ] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      unsigned char 
  4819 ;; Registers used:
  4820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4826 ;;      Params:         0       3       0       0
  4827 ;;      Locals:         0       1       0       0
  4828 ;;      Temps:          0       2       0       0
  4829 ;;      Totals:         0       6       0       0
  4830 ;;Total ram usage:        6 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    8
  4833 ;; This function calls:
  4834 ;;		_ES_EnQueueFIFO
  4835 ;; This function is called by:
  4836 ;;		_PostButtonDebounceSM
  4837 ;;		_InitCan_XmitService
  4838 ;;		_InitAnalogService
  4839 ;;		_PostAnalogService
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text31
  4844  000F8A                     __ptext31:
  4845                           	opt stack 0
  4846  000F8A                     _ES_PostToService:
  4847                           	opt stack 18
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;incstack = 0
  4851                           ;ES_PostToService@WhichService stored from wreg
  4852  000F8A  0100               	movlb	0	; () banked
  4853  000F8C  6FD3               	movwf	ES_PostToService@WhichService& (0+255),b
  4854                           
  4855                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4856                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4857                           ;ES_Framework.c: 354: 1 )){
  4858  000F8E  0E03               	movlw	3
  4859  000F90  0100               	movlb	0	; () banked
  4860  000F92  61D3               	cpfslt	ES_PostToService@WhichService& (0+255),b
  4861  000F94  D033               	goto	l2186
  4862                           
  4863                           ; BSR set to: 0
  4864  000F96  0100               	movlb	0	; () banked
  4865  000F98  51D3               	movf	ES_PostToService@WhichService& (0+255),w,b
  4866  000F9A  0D03               	mullw	3
  4867  000F9C  0E5C               	movlw	low _EventQueues
  4868  000F9E  24F3               	addwf	prodl,w,c
  4869  000FA0  6EF6               	movwf	tblptrl,c
  4870  000FA2  0E03               	movlw	high _EventQueues
  4871  000FA4  20F4               	addwfc	prodh,w,c
  4872  000FA6  6EF7               	movwf	tblptrh,c
  4873  000FA8                     	if	0	;There are less than 3 active tblptr bytes
  4874  000FA8                     	endif
  4875  000FA8  0009               	tblrd		*+
  4876  000FAA  CFF5 F0C3          	movff	tablat,ES_EnQueueFIFO@pBlock
  4877  000FAE  000A               	tblrd		*-
  4878  000FB0  CFF5 F0C4          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  4879  000FB4  C0CE  F0C5         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  4880  000FB8  C0CF  F0C6         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  4881  000FBC  C0D0  F0C7         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  4882  000FC0  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  4883  000FC4  06E8               	decf	wreg,f,c
  4884  000FC6  A4D8               	btfss	status,2,c
  4885  000FC8  D019               	goto	l2186
  4886                           
  4887                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4888  000FCA  0100               	movlb	0	; () banked
  4889  000FCC  51D3               	movf	ES_PostToService@WhichService& (0+255),w,b
  4890  000FCE  0D02               	mullw	2
  4891  000FD0  0E01               	movlw	low _BitNum2SetMask
  4892  000FD2  24F3               	addwf	prodl,w,c
  4893  000FD4  6EF6               	movwf	tblptrl,c
  4894  000FD6  0E03               	movlw	high _BitNum2SetMask
  4895  000FD8  20F4               	addwfc	prodh,w,c
  4896  000FDA  6EF7               	movwf	tblptrh,c
  4897  000FDC                     	if	0	;There are less than 3 active tblptr bytes
  4898  000FDC                     	endif
  4899  000FDC  0009               	tblrd		*+
  4900  000FDE  CFF5 F0D1          	movff	tablat,??_ES_PostToService
  4901  000FE2  0009               	tblrd		*+
  4902  000FE4  CFF5 F0D2          	movff	tablat,??_ES_PostToService+1
  4903  000FE8  0100               	movlb	0	; () banked
  4904  000FEA  51D1               	movf	??_ES_PostToService& (0+255),w,b
  4905  000FEC  0100               	movlb	0	; () banked
  4906  000FEE  1385               	iorwf	_Ready& (0+255),f,b
  4907  000FF0  0100               	movlb	0	; () banked
  4908  000FF2  51D2               	movf	(??_ES_PostToService+1)& (0+255),w,b
  4909  000FF4  0100               	movlb	0	; () banked
  4910  000FF6  1386               	iorwf	(_Ready+1)& (0+255),f,b
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;ES_Framework.c: 356: return 1;
  4914  000FF8  0E01               	movlw	1
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;ES_Framework.c: 357: } else
  4918                           
  4919                           ; BSR set to: 0
  4920  000FFA  0012               	return	
  4921  000FFC                     l2186:
  4922                           
  4923                           ;ES_Framework.c: 358: return 0;
  4924  000FFC  0E00               	movlw	0
  4925  000FFE  0012               	return	
  4926  001000                     __end_of_ES_PostToService:
  4927                           	opt stack 0
  4928                           tosu	equ	0xFFF
  4929                           tosh	equ	0xFFE
  4930                           tosl	equ	0xFFD
  4931                           pclath	equ	0xFFA
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           prodh	equ	0xFF4
  4937                           prodl	equ	0xFF3
  4938                           intcon	equ	0xFF2
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           indf1	equ	0xFE7
  4942                           postinc1	equ	0xFE6
  4943                           fsr1h	equ	0xFE2
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _ES_EnQueueFIFO *****************
  4953 ;; Defined at:
  4954 ;;		line 85 in file "ES_Queue.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4957 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  4958 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  4961 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  4962 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      unsigned char 
  4965 ;; Registers used:
  4966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4972 ;;      Params:         0       5       0       0
  4973 ;;      Locals:         0       3       0       0
  4974 ;;      Temps:          0       3       0       0
  4975 ;;      Totals:         0      11       0       0
  4976 ;;Total ram usage:       11 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    7
  4979 ;; This function calls:
  4980 ;;		___awmod
  4981 ;;		___wmul
  4982 ;; This function is called by:
  4983 ;;		_ES_PostAll
  4984 ;;		_ES_PostToService
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text32
  4989  0007E4                     __ptext32:
  4990                           	opt stack 0
  4991  0007E4                     _ES_EnQueueFIFO:
  4992                           	opt stack 18
  4993                           
  4994                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  4995                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  4996                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  4997                           
  4998                           ;incstack = 0
  4999  0007E4  C0C3  F0CC         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5000  0007E8  C0C4  F0CD         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5001                           
  5002                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5003  0007EC  C0CC  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5004  0007F0  C0CD  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5005  0007F4  0100               	movlb	0	; () banked
  5006  0007F6  EE10 F002          	lfsr	1,2
  5007  0007FA  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5008  0007FC  26E1               	addwf	fsr1l,f,c
  5009  0007FE  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5010  000800  22E2               	addwfc	fsr1h,f,c
  5011  000802  50DE               	movf	postinc2,w,c
  5012  000804  5CE6               	subwf	postinc1,w,c
  5013  000806  B0D8               	btfsc	status,0,c
  5014  000808  D05C               	goto	l2170
  5015                           
  5016                           ; BSR set to: 0
  5017                           
  5018                           ;ES_Queue.c: 92: {
  5019                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5020  00080A  CFF2 F0CB          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5021  00080E  9EF2               	bcf	intcon,7,c	;volatile
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5025                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5026                           
  5027                           ; BSR set to: 0
  5028  000810  C0CC  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5029  000814  C0CD  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5030  000818  50DF               	movf	indf2,w,c
  5031  00081A  0100               	movlb	0	; () banked
  5032  00081C  6FC8               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5033  00081E  0100               	movlb	0	; () banked
  5034  000820  51C8               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5035  000822  0100               	movlb	0	; () banked
  5036  000824  6FB9               	movwf	___awmod@divisor& (0+255),b
  5037  000826  6BBA               	clrf	(___awmod@divisor+1)& (0+255),b
  5038  000828  0100               	movlb	0	; () banked
  5039  00082A  EE20 F002          	lfsr	2,2
  5040  00082E  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5041  000830  26D9               	addwf	fsr2l,f,c
  5042  000832  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5043  000834  22DA               	addwfc	fsr2h,f,c
  5044  000836  50DF               	movf	indf2,w,c
  5045  000838  0100               	movlb	0	; () banked
  5046  00083A  6FC9               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5047  00083C  0100               	movlb	0	; () banked
  5048  00083E  EE20 F001          	lfsr	2,1
  5049  000842  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5050  000844  26D9               	addwf	fsr2l,f,c
  5051  000846  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5052  000848  22DA               	addwfc	fsr2h,f,c
  5053  00084A  50DF               	movf	indf2,w,c
  5054  00084C  0100               	movlb	0	; () banked
  5055  00084E  6FCA               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5056  000850  0100               	movlb	0	; () banked
  5057  000852  51CA               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5058  000854  0100               	movlb	0	; () banked
  5059  000856  25C9               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5060  000858  0100               	movlb	0	; () banked
  5061  00085A  6FB7               	movwf	___awmod@dividend& (0+255),b
  5062  00085C  0100               	movlb	0	; () banked
  5063  00085E  6BB8               	clrf	(___awmod@dividend+1)& (0+255),b
  5064  000860  0100               	movlb	0	; () banked
  5065  000862  37B8               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5066  000864  EC26  F006         	call	___awmod	;wreg free
  5067  000868  0E01               	movlw	1
  5068  00086A  0100               	movlb	0	; () banked
  5069  00086C  25B7               	addwf	?___awmod& (0+255),w,b
  5070  00086E  0100               	movlb	0	; () banked
  5071  000870  6FBD               	movwf	___wmul@multiplier& (0+255),b
  5072  000872  0E00               	movlw	0
  5073  000874  0100               	movlb	0	; () banked
  5074  000876  21B8               	addwfc	(?___awmod+1)& (0+255),w,b
  5075  000878  0100               	movlb	0	; () banked
  5076  00087A  6FBE               	movwf	(___wmul@multiplier+1)& (0+255),b
  5077  00087C  0E00               	movlw	0
  5078  00087E  0100               	movlb	0	; () banked
  5079  000880  6FC0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5080  000882  0E03               	movlw	3
  5081  000884  6FBF               	movwf	___wmul@multiplicand& (0+255),b
  5082  000886  EC8A  F009         	call	___wmul	;wreg free
  5083  00088A  0100               	movlb	0	; () banked
  5084  00088C  51BD               	movf	?___wmul& (0+255),w,b
  5085  00088E  0100               	movlb	0	; () banked
  5086  000890  25C3               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5087  000892  6ED9               	movwf	fsr2l,c
  5088  000894  0100               	movlb	0	; () banked
  5089  000896  51BE               	movf	(?___wmul+1)& (0+255),w,b
  5090  000898  0100               	movlb	0	; () banked
  5091  00089A  21C4               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5092  00089C  6EDA               	movwf	fsr2h,c
  5093  00089E  C0C5  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5094  0008A2  C0C6  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5095  0008A6  C0C7  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5099  0008AA  0100               	movlb	0	; () banked
  5100  0008AC  EE20 F002          	lfsr	2,2
  5101  0008B0  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5102  0008B2  26D9               	addwf	fsr2l,f,c
  5103  0008B4  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5104  0008B6  22DA               	addwfc	fsr2h,f,c
  5105  0008B8  2ADF               	incf	indf2,f,c
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5109  0008BA  C0CB  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;ES_Queue.c: 101: return(1);
  5113  0008BE  0E01               	movlw	1
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;ES_Queue.c: 102: }else
  5117                           
  5118                           ; BSR set to: 0
  5119  0008C0  0012               	return	
  5120  0008C2                     l2170:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;ES_Queue.c: 103: return(0);
  5124  0008C2  0E00               	movlw	0
  5125                           
  5126                           ; BSR set to: 0
  5127  0008C4  0012               	return	
  5128  0008C6                     __end_of_ES_EnQueueFIFO:
  5129                           	opt stack 0
  5130                           tosu	equ	0xFFF
  5131                           tosh	equ	0xFFE
  5132                           tosl	equ	0xFFD
  5133                           pclath	equ	0xFFA
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           indf1	equ	0xFE7
  5144                           postinc1	equ	0xFE6
  5145                           fsr1h	equ	0xFE2
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function ___wmul *****************
  5155 ;; Defined at:
  5156 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5159 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  product         2   10[BANK0 ] unsigned int 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  2    6[BANK0 ] unsigned int 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, prodl, prodh
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5171 ;;      Params:         0       4       0       0
  5172 ;;      Locals:         0       2       0       0
  5173 ;;      Temps:          0       0       0       0
  5174 ;;      Totals:         0       6       0       0
  5175 ;;Total ram usage:        6 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    6
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_ES_EnQueueFIFO
  5182 ;;		_ES_DeQueue
  5183 ;;		_ES_EnQueueLIFO
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text33
  5188  001314                     __ptext33:
  5189                           	opt stack 0
  5190  001314                     ___wmul:
  5191                           	opt stack 18
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;incstack = 0
  5195  001314  0100               	movlb	0	; () banked
  5196  001316  51BD               	movf	___wmul@multiplier& (0+255),w,b
  5197  001318  0100               	movlb	0	; () banked
  5198  00131A  03BF               	mulwf	___wmul@multiplicand& (0+255),b
  5199  00131C  CFF3 F0C1          	movff	prodl,___wmul@product
  5200  001320  CFF4 F0C2          	movff	prodh,___wmul@product+1
  5201  001324  0100               	movlb	0	; () banked
  5202  001326  51BD               	movf	___wmul@multiplier& (0+255),w,b
  5203  001328  0100               	movlb	0	; () banked
  5204  00132A  03C0               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5205  00132C  50F3               	movf	prodl,w,c
  5206  00132E  0100               	movlb	0	; () banked
  5207  001330  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
  5208  001332  0100               	movlb	0	; () banked
  5209  001334  51BE               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5210  001336  0100               	movlb	0	; () banked
  5211  001338  03BF               	mulwf	___wmul@multiplicand& (0+255),b
  5212  00133A  50F3               	movf	prodl,w,c
  5213  00133C  0100               	movlb	0	; () banked
  5214  00133E  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
  5215                           
  5216                           ; BSR set to: 0
  5217  001340  C0C1  F0BD         	movff	___wmul@product,?___wmul
  5218  001344  C0C2  F0BE         	movff	___wmul@product+1,?___wmul+1
  5219  001348  0012               	return	
  5220  00134A                     __end_of___wmul:
  5221                           	opt stack 0
  5222                           tosu	equ	0xFFF
  5223                           tosh	equ	0xFFE
  5224                           tosl	equ	0xFFD
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf1	equ	0xFE7
  5236                           postinc1	equ	0xFE6
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function ___awmod *****************
  5247 ;; Defined at:
  5248 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  dividend        2    0[BANK0 ] int 
  5251 ;;  divisor         2    2[BANK0 ] int 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  sign            1    5[BANK0 ] unsigned char 
  5254 ;;  counter         1    4[BANK0 ] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  2    0[BANK0 ] int 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5264 ;;      Params:         0       4       0       0
  5265 ;;      Locals:         0       2       0       0
  5266 ;;      Temps:          0       0       0       0
  5267 ;;      Totals:         0       6       0       0
  5268 ;;Total ram usage:        6 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    6
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_ES_EnQueueFIFO
  5275 ;;		i2_ES_EnQueueFIFO
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text34
  5280  000C4C                     __ptext34:
  5281                           	opt stack 0
  5282  000C4C                     ___awmod:
  5283                           	opt stack 18
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;incstack = 0
  5287  000C4C  0E00               	movlw	0
  5288  000C4E  0100               	movlb	0	; () banked
  5289  000C50  6FBC               	movwf	___awmod@sign& (0+255),b
  5290                           
  5291                           ; BSR set to: 0
  5292  000C52  0100               	movlb	0	; () banked
  5293  000C54  AFB8               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5294  000C56  D008               	goto	l2126
  5295                           
  5296                           ; BSR set to: 0
  5297  000C58  0100               	movlb	0	; () banked
  5298  000C5A  6DB7               	negf	___awmod@dividend& (0+255),b
  5299  000C5C  1FB8               	comf	(___awmod@dividend+1)& (0+255),f,b
  5300  000C5E  B0D8               	btfsc	status,0,c
  5301  000C60  2BB8               	incf	(___awmod@dividend+1)& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304  000C62  0E01               	movlw	1
  5305  000C64  0100               	movlb	0	; () banked
  5306  000C66  6FBC               	movwf	___awmod@sign& (0+255),b
  5307  000C68                     l2126:
  5308                           
  5309                           ; BSR set to: 0
  5310  000C68  0100               	movlb	0	; () banked
  5311  000C6A  AFBA               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5312  000C6C  D005               	goto	l2130
  5313                           
  5314                           ; BSR set to: 0
  5315  000C6E  0100               	movlb	0	; () banked
  5316  000C70  6DB9               	negf	___awmod@divisor& (0+255),b
  5317  000C72  1FBA               	comf	(___awmod@divisor+1)& (0+255),f,b
  5318  000C74  B0D8               	btfsc	status,0,c
  5319  000C76  2BBA               	incf	(___awmod@divisor+1)& (0+255),f,b
  5320  000C78                     l2130:
  5321                           
  5322                           ; BSR set to: 0
  5323  000C78  0100               	movlb	0	; () banked
  5324  000C7A  51B9               	movf	___awmod@divisor& (0+255),w,b
  5325  000C7C  0100               	movlb	0	; () banked
  5326  000C7E  11BA               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5327  000C80  B4D8               	btfsc	status,2,c
  5328  000C82  D026               	goto	l2146
  5329                           
  5330                           ; BSR set to: 0
  5331  000C84  0E01               	movlw	1
  5332  000C86  0100               	movlb	0	; () banked
  5333  000C88  6FBB               	movwf	___awmod@counter& (0+255),b
  5334  000C8A  D006               	goto	l2136
  5335  000C8C                     l2134:
  5336                           
  5337                           ; BSR set to: 0
  5338  000C8C  0100               	movlb	0	; () banked
  5339  000C8E  90D8               	bcf	status,0,c
  5340  000C90  37B9               	rlcf	___awmod@divisor& (0+255),f,b
  5341  000C92  37BA               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5342  000C94  0100               	movlb	0	; () banked
  5343  000C96  2BBB               	incf	___awmod@counter& (0+255),f,b
  5344  000C98                     l2136:
  5345                           
  5346                           ; BSR set to: 0
  5347  000C98  0100               	movlb	0	; () banked
  5348  000C9A  AFBA               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5349  000C9C  D7F7               	goto	l2134
  5350  000C9E                     l2138:
  5351                           
  5352                           ; BSR set to: 0
  5353  000C9E  0100               	movlb	0	; () banked
  5354  000CA0  51B9               	movf	___awmod@divisor& (0+255),w,b
  5355  000CA2  0100               	movlb	0	; () banked
  5356  000CA4  5DB7               	subwf	___awmod@dividend& (0+255),w,b
  5357  000CA6  0100               	movlb	0	; () banked
  5358  000CA8  51BA               	movf	(___awmod@divisor+1)& (0+255),w,b
  5359  000CAA  0100               	movlb	0	; () banked
  5360  000CAC  59B8               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5361  000CAE  A0D8               	btfss	status,0,c
  5362  000CB0  D008               	goto	l2142
  5363                           
  5364                           ; BSR set to: 0
  5365  000CB2  0100               	movlb	0	; () banked
  5366  000CB4  51B9               	movf	___awmod@divisor& (0+255),w,b
  5367  000CB6  0100               	movlb	0	; () banked
  5368  000CB8  5FB7               	subwf	___awmod@dividend& (0+255),f,b
  5369  000CBA  0100               	movlb	0	; () banked
  5370  000CBC  51BA               	movf	(___awmod@divisor+1)& (0+255),w,b
  5371  000CBE  0100               	movlb	0	; () banked
  5372  000CC0  5BB8               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5373  000CC2                     l2142:
  5374                           
  5375                           ; BSR set to: 0
  5376  000CC2  0100               	movlb	0	; () banked
  5377  000CC4  90D8               	bcf	status,0,c
  5378  000CC6  33BA               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5379  000CC8  33B9               	rrcf	___awmod@divisor& (0+255),f,b
  5380                           
  5381                           ; BSR set to: 0
  5382  000CCA  0100               	movlb	0	; () banked
  5383  000CCC  2FBB               	decfsz	___awmod@counter& (0+255),f,b
  5384  000CCE  D7E7               	goto	l2138
  5385  000CD0                     l2146:
  5386                           
  5387                           ; BSR set to: 0
  5388  000CD0  0100               	movlb	0	; () banked
  5389  000CD2  51BC               	movf	___awmod@sign& (0+255),w,b
  5390  000CD4  0100               	movlb	0	; () banked
  5391  000CD6  B4D8               	btfsc	status,2,c
  5392  000CD8  D005               	goto	l2150
  5393                           
  5394                           ; BSR set to: 0
  5395  000CDA  0100               	movlb	0	; () banked
  5396  000CDC  6DB7               	negf	___awmod@dividend& (0+255),b
  5397  000CDE  1FB8               	comf	(___awmod@dividend+1)& (0+255),f,b
  5398  000CE0  B0D8               	btfsc	status,0,c
  5399  000CE2  2BB8               	incf	(___awmod@dividend+1)& (0+255),f,b
  5400  000CE4                     l2150:
  5401                           
  5402                           ; BSR set to: 0
  5403  000CE4  C0B7  F0B7         	movff	___awmod@dividend,?___awmod
  5404  000CE8  C0B8  F0B8         	movff	___awmod@dividend+1,?___awmod+1
  5405  000CEC  0012               	return	
  5406  000CEE                     __end_of___awmod:
  5407                           	opt stack 0
  5408                           tosu	equ	0xFFF
  5409                           tosh	equ	0xFFE
  5410                           tosl	equ	0xFFD
  5411                           pclath	equ	0xFFA
  5412                           tblptru	equ	0xFF8
  5413                           tblptrh	equ	0xFF7
  5414                           tblptrl	equ	0xFF6
  5415                           tablat	equ	0xFF5
  5416                           prodh	equ	0xFF4
  5417                           prodl	equ	0xFF3
  5418                           intcon	equ	0xFF2
  5419                           postinc0	equ	0xFEE
  5420                           wreg	equ	0xFE8
  5421                           indf1	equ	0xFE7
  5422                           postinc1	equ	0xFE6
  5423                           fsr1h	equ	0xFE2
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _ES_Timer_Init *****************
  5433 ;; Defined at:
  5434 ;;		line 130 in file "ES_Timers.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  Rate            2    2[BANK0 ] enum E15422
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5448 ;;      Params:         0       2       0       0
  5449 ;;      Locals:         0       0       0       0
  5450 ;;      Temps:          0       0       0       0
  5451 ;;      Totals:         0       2       0       0
  5452 ;;Total ram usage:        2 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    7
  5455 ;; This function calls:
  5456 ;;		__HW_Timer_Init
  5457 ;; This function is called by:
  5458 ;;		_ES_Initialize
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text35
  5463  001512                     __ptext35:
  5464                           	opt stack 0
  5465  001512                     _ES_Timer_Init:
  5466                           	opt stack 22
  5467                           
  5468                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;incstack = 0
  5472  001512  C0B9  F0B7         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5473  001516  C0BA  F0B8         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5474  00151A  EC41  F00A         	call	__HW_Timer_Init	;wreg free
  5475  00151E  0012               	return		;funcret
  5476  001520                     __end_of_ES_Timer_Init:
  5477                           	opt stack 0
  5478                           tosu	equ	0xFFF
  5479                           tosh	equ	0xFFE
  5480                           tosl	equ	0xFFD
  5481                           pclath	equ	0xFFA
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon	equ	0xFF2
  5489                           postinc0	equ	0xFEE
  5490                           wreg	equ	0xFE8
  5491                           indf1	equ	0xFE7
  5492                           postinc1	equ	0xFE6
  5493                           fsr1h	equ	0xFE2
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function __HW_Timer_Init *****************
  5503 ;; Defined at:
  5504 ;;		line 72 in file "ES_Port.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  Rate            2    0[BANK0 ] enum E15412
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5518 ;;      Params:         0       2       0       0
  5519 ;;      Locals:         0       0       0       0
  5520 ;;      Temps:          0       0       0       0
  5521 ;;      Totals:         0       2       0       0
  5522 ;;Total ram usage:        2 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    6
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_ES_Timer_Init
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text36
  5533  001482                     __ptext36:
  5534                           	opt stack 0
  5535  001482                     __HW_Timer_Init:
  5536                           	opt stack 22
  5537                           
  5538                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  5539                           
  5540                           ;incstack = 0
  5541  001482  0E04               	movlw	4
  5542  001484  6E9D               	movwf	3997,c	;volatile
  5543                           
  5544                           ;ES_Port.c: 85: INTCON = 0b01000000;
  5545  001486  0E40               	movlw	64
  5546  001488  6EF2               	movwf	intcon,c	;volatile
  5547                           
  5548                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  5549  00148A  0E0A               	movlw	10
  5550  00148C  6EBD               	movwf	4029,c	;volatile
  5551                           
  5552                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  5553  00148E  0E01               	movlw	1
  5554  001490  6EBE               	movwf	4030,c	;volatile
  5555                           
  5556                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  5557  001492  0E00               	movlw	0
  5558  001494  6EBF               	movwf	4031,c	;volatile
  5559                           
  5560                           ;ES_Port.c: 107: T1CON = 0b00100001;
  5561  001496  0E21               	movlw	33
  5562  001498  6ECD               	movwf	4045,c	;volatile
  5563                           
  5564                           ;ES_Port.c: 108: PEIE = 1;
  5565  00149A  8CF2               	bsf	intcon,6,c	;volatile
  5566                           
  5567                           ;ES_Port.c: 109: {GIE = 1;};
  5568  00149C  8EF2               	bsf	intcon,7,c	;volatile
  5569  00149E  0012               	return		;funcret
  5570  0014A0                     __end_of__HW_Timer_Init:
  5571                           	opt stack 0
  5572                           tosu	equ	0xFFF
  5573                           tosh	equ	0xFFE
  5574                           tosl	equ	0xFFD
  5575                           pclath	equ	0xFFA
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           postinc0	equ	0xFEE
  5584                           wreg	equ	0xFE8
  5585                           indf1	equ	0xFE7
  5586                           postinc1	equ	0xFE6
  5587                           fsr1h	equ	0xFE2
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _ES_InitQueue *****************
  5597 ;; Defined at:
  5598 ;;		line 58 in file "ES_Queue.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5601 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5602 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5605 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      unsigned char 
  5608 ;; Registers used:
  5609 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5615 ;;      Params:         0       3       0       0
  5616 ;;      Locals:         0       2       0       0
  5617 ;;      Temps:          0       0       0       0
  5618 ;;      Totals:         0       5       0       0
  5619 ;;Total ram usage:        5 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    6
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_ES_Initialize
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text37
  5630  0012D8                     __ptext37:
  5631                           	opt stack 0
  5632  0012D8                     _ES_InitQueue:
  5633                           	opt stack 23
  5634                           
  5635                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5636                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5637                           
  5638                           ;incstack = 0
  5639  0012D8  C0B7  F0BA         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5640  0012DC  C0B8  F0BB         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5641                           
  5642                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5643  0012E0  0100               	movlb	0	; () banked
  5644  0012E2  05B9               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5645  0012E4  C0BA  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5646  0012E8  C0BB  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5647  0012EC  6EDF               	movwf	indf2,c
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5651  0012EE  0100               	movlb	0	; () banked
  5652  0012F0  EE20 F001          	lfsr	2,1
  5653  0012F4  51BA               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5654  0012F6  26D9               	addwf	fsr2l,f,c
  5655  0012F8  51BB               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5656  0012FA  22DA               	addwfc	fsr2h,f,c
  5657  0012FC  0E00               	movlw	0
  5658  0012FE  6EDF               	movwf	indf2,c
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5662  001300  0100               	movlb	0	; () banked
  5663  001302  EE20 F002          	lfsr	2,2
  5664  001306  51BA               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5665  001308  26D9               	addwf	fsr2l,f,c
  5666  00130A  51BB               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5667  00130C  22DA               	addwfc	fsr2h,f,c
  5668  00130E  0E00               	movlw	0
  5669  001310  6EDF               	movwf	indf2,c
  5670  001312  0012               	return	
  5671  001314                     __end_of_ES_InitQueue:
  5672                           	opt stack 0
  5673                           tosu	equ	0xFFF
  5674                           tosh	equ	0xFFE
  5675                           tosl	equ	0xFFD
  5676                           pclath	equ	0xFFA
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           postinc0	equ	0xFEE
  5685                           wreg	equ	0xFE8
  5686                           indf1	equ	0xFE7
  5687                           postinc1	equ	0xFE6
  5688                           fsr1h	equ	0xFE2
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _ISR *****************
  5698 ;; Defined at:
  5699 ;;		line 112 in file "ES_Port.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5713 ;;      Params:         0       0       0       0
  5714 ;;      Locals:         0       0       0       0
  5715 ;;      Temps:         16       0       0       0
  5716 ;;      Totals:        16       0       0       0
  5717 ;;Total ram usage:       16 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    5
  5720 ;; This function calls:
  5721 ;;		_AnalogISR
  5722 ;;		_BusErrorResponse
  5723 ;;		_CanErrorResponse
  5724 ;;		_CanRCVResponse
  5725 ;;		_CanXmitResponse
  5726 ;; This function is called by:
  5727 ;;		Interrupt level 2
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	intcode
  5732  000008                     __pintcode:
  5733                           	opt stack 0
  5734  000008                     _ISR:
  5735                           	opt stack 18
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;incstack = 0
  5739  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5740  00000A  CFFA F028          	movff	pclath,??_ISR+2
  5741  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  5742  000012  ED63  F004         	call	int_func,f	;refresh shadow registers
  5743                           tosu	equ	0xFFF
  5744                           tosh	equ	0xFFE
  5745                           tosl	equ	0xFFD
  5746                           pclatu	equ	0xFFB
  5747                           pclath	equ	0xFFA
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           indf1	equ	0xFE7
  5758                           postinc1	equ	0xFE6
  5759                           fsr1h	equ	0xFE2
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768                           	psect	intcode_body
  5769  0008C6                     __pintcode_body:
  5770                           	opt stack 18
  5771  0008C6                     int_func:
  5772                           	opt stack 18
  5773  0008C6  0006               	pop		; remove dummy address from shadow register refresh
  5774  0008C8  CFE9 F02A          	movff	fsr0l,??_ISR+4
  5775  0008CC  CFEA F02B          	movff	fsr0h,??_ISR+5
  5776  0008D0  CFE1 F02C          	movff	fsr1l,??_ISR+6
  5777  0008D4  CFE2 F02D          	movff	fsr1h,??_ISR+7
  5778  0008D8  CFD9 F02E          	movff	fsr2l,??_ISR+8
  5779  0008DC  CFDA F02F          	movff	fsr2h,??_ISR+9
  5780  0008E0  CFF3 F030          	movff	prodl,??_ISR+10
  5781  0008E4  CFF4 F031          	movff	prodh,??_ISR+11
  5782  0008E8  CFF6 F032          	movff	tblptrl,??_ISR+12
  5783  0008EC  CFF7 F033          	movff	tblptrh,??_ISR+13
  5784  0008F0  CFF8 F034          	movff	tblptru,??_ISR+14
  5785  0008F4  CFF5 F035          	movff	tablat,??_ISR+15
  5786                           
  5787                           ;ES_Port.c: 115: static unsigned int LastTime;
  5788                           ;ES_Port.c: 116: static unsigned int NextTime;
  5789                           ;ES_Port.c: 118: if (CCP1IF == 1)
  5790  0008F8  A49E               	btfss	3998,2,c	;volatile
  5791  0008FA  D015               	goto	i2l2872
  5792                           
  5793                           ;ES_Port.c: 119: {
  5794                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5795  0008FC  50BF               	movf	4031,w,c	;volatile
  5796  0008FE  6E26               	movwf	??_ISR& (0+255),c
  5797  000900  50BE               	movf	4030,w,c	;volatile
  5798  000902  6E36               	movwf	ISR@LastTime,c
  5799  000904  C026  F037         	movff	??_ISR,ISR@LastTime+1
  5800                           
  5801                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  5802  000908  0E20               	movlw	32
  5803  00090A  2436               	addwf	ISR@LastTime,w,c
  5804  00090C  6E38               	movwf	ISR@NextTime,c
  5805  00090E  0E4E               	movlw	78
  5806  000910  2037               	addwfc	ISR@LastTime+1,w,c
  5807  000912  6E39               	movwf	ISR@NextTime+1,c
  5808                           
  5809                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  5810  000914  5039               	movf	ISR@NextTime+1,w,c
  5811  000916  6EBF               	movwf	4031,c	;volatile
  5812                           
  5813                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5814  000918  C038  FFBE         	movff	ISR@NextTime,4030	;volatile
  5815                           
  5816                           ;ES_Port.c: 124: CCP1IF = 0;
  5817  00091C  949E               	bcf	3998,2,c	;volatile
  5818                           
  5819                           ;ES_Port.c: 125: TickCount++;
  5820  00091E  0100               	movlb	0	; () banked
  5821  000920  2B8F               	incf	_TickCount& (0+255),f,b	;volatile
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;ES_Port.c: 126: SysTickCounter++;
  5825  000922  4A3A               	infsnz	_SysTickCounter,f,c	;volatile
  5826  000924  2A3B               	incf	_SysTickCounter+1,f,c	;volatile
  5827  000926                     i2l2872:
  5828                           
  5829                           ;ES_Port.c: 127: }
  5830                           ;ES_Port.c: 129: if (TXB0IF == 1)
  5831  000926  A4A4               	btfss	4004,2,c	;volatile
  5832  000928  D003               	goto	i2l2878
  5833                           
  5834                           ;ES_Port.c: 130: {
  5835                           ;ES_Port.c: 131: TXB0IF = 0;
  5836  00092A  94A4               	bcf	4004,2,c	;volatile
  5837                           
  5838                           ;ES_Port.c: 132: CanXmitResponse();
  5839  00092C  EC9D  F00A         	call	_CanXmitResponse	;wreg free
  5840  000930                     i2l2878:
  5841                           
  5842                           ;ES_Port.c: 133: }
  5843                           ;ES_Port.c: 134: if (RXB0IF == 1) {
  5844  000930  A0A4               	btfss	4004,0,c	;volatile
  5845  000932  D003               	goto	i2l2884
  5846                           
  5847                           ;ES_Port.c: 135: RXB0IF = 0;
  5848  000934  90A4               	bcf	4004,0,c	;volatile
  5849                           
  5850                           ;ES_Port.c: 136: CanRCVResponse();
  5851  000936  EC96  F00A         	call	_CanRCVResponse	;wreg free
  5852  00093A                     i2l2884:
  5853                           
  5854                           ;ES_Port.c: 137: }
  5855                           ;ES_Port.c: 138: if (ERRIF == 1) {
  5856  00093A  AAA4               	btfss	4004,5,c	;volatile
  5857  00093C  D003               	goto	i2l2890
  5858                           
  5859                           ;ES_Port.c: 139: ERRIF = 0;
  5860  00093E  9AA4               	bcf	4004,5,c	;volatile
  5861                           
  5862                           ;ES_Port.c: 140: CanErrorResponse();
  5863  000940  ECA7  F00A         	call	_CanErrorResponse	;wreg free
  5864  000944                     i2l2890:
  5865                           
  5866                           ;ES_Port.c: 141: }
  5867                           ;ES_Port.c: 142: if (IRXIF == 1) {
  5868  000944  AEA4               	btfss	4004,7,c	;volatile
  5869  000946  D003               	goto	i2l2896
  5870                           
  5871                           ;ES_Port.c: 143: IRXIF = 0;
  5872  000948  9EA4               	bcf	4004,7,c	;volatile
  5873                           
  5874                           ;ES_Port.c: 144: BusErrorResponse();
  5875  00094A  ECA8  F00A         	call	_BusErrorResponse	;wreg free
  5876  00094E                     i2l2896:
  5877                           
  5878                           ;ES_Port.c: 145: }
  5879                           ;ES_Port.c: 146: if (ADIF == 1) {
  5880  00094E  AC9E               	btfss	3998,6,c	;volatile
  5881  000950  D003               	goto	i2l229
  5882                           
  5883                           ;ES_Port.c: 147: ADIF = 0;
  5884  000952  9C9E               	bcf	3998,6,c	;volatile
  5885                           
  5886                           ;ES_Port.c: 148: AnalogISR();
  5887  000954  EC77  F006         	call	_AnalogISR	;wreg free
  5888  000958                     i2l229:
  5889  000958  C035  FFF5         	movff	??_ISR+15,tablat
  5890  00095C  C034  FFF8         	movff	??_ISR+14,tblptru
  5891  000960  C033  FFF7         	movff	??_ISR+13,tblptrh
  5892  000964  C032  FFF6         	movff	??_ISR+12,tblptrl
  5893  000968  C031  FFF4         	movff	??_ISR+11,prodh
  5894  00096C  C030  FFF3         	movff	??_ISR+10,prodl
  5895  000970  C02F  FFDA         	movff	??_ISR+9,fsr2h
  5896  000974  C02E  FFD9         	movff	??_ISR+8,fsr2l
  5897  000978  C02D  FFE2         	movff	??_ISR+7,fsr1h
  5898  00097C  C02C  FFE1         	movff	??_ISR+6,fsr1l
  5899  000980  C02B  FFEA         	movff	??_ISR+5,fsr0h
  5900  000984  C02A  FFE9         	movff	??_ISR+4,fsr0l
  5901  000988  C029  FFFB         	movff	??_ISR+3,pclatu
  5902  00098C  C028  FFFA         	movff	??_ISR+2,pclath
  5903  000990  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5904  000992  0011               	retfie		f
  5905  000994                     __end_of_ISR:
  5906                           	opt stack 0
  5907                           tosu	equ	0xFFF
  5908                           tosh	equ	0xFFE
  5909                           tosl	equ	0xFFD
  5910                           pclatu	equ	0xFFB
  5911                           pclath	equ	0xFFA
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           postinc0	equ	0xFEE
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           indf1	equ	0xFE7
  5924                           postinc1	equ	0xFE6
  5925                           fsr1h	equ	0xFE2
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _CanXmitResponse *****************
  5935 ;; Defined at:
  5936 ;;		line 182 in file "Can_XmitService.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		None
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5950 ;;      Params:         0       0       0       0
  5951 ;;      Locals:         0       0       0       0
  5952 ;;      Temps:          0       0       0       0
  5953 ;;      Totals:         0       0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_ISR
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text39
  5964  00153A                     __ptext39:
  5965                           	opt stack 0
  5966  00153A                     _CanXmitResponse:
  5967                           	opt stack 22
  5968                           
  5969                           ;Can_XmitService.c: 184: TXB0CONbits.TXREQ = 0;
  5970                           
  5971                           ;incstack = 0
  5972  00153A  010F               	movlb	15	; () banked
  5973  00153C  9740               	bcf	64,3,b	;volatile
  5974                           
  5975                           ; BSR set to: 15
  5976  00153E  0012               	return		;funcret
  5977  001540                     __end_of_CanXmitResponse:
  5978                           	opt stack 0
  5979                           tosu	equ	0xFFF
  5980                           tosh	equ	0xFFE
  5981                           tosl	equ	0xFFD
  5982                           pclatu	equ	0xFFB
  5983                           pclath	equ	0xFFA
  5984                           tblptru	equ	0xFF8
  5985                           tblptrh	equ	0xFF7
  5986                           tblptrl	equ	0xFF6
  5987                           tablat	equ	0xFF5
  5988                           prodh	equ	0xFF4
  5989                           prodl	equ	0xFF3
  5990                           intcon	equ	0xFF2
  5991                           postinc0	equ	0xFEE
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postinc1	equ	0xFE6
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _CanRCVResponse *****************
  6007 ;; Defined at:
  6008 ;;		line 187 in file "Can_XmitService.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		None
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6022 ;;      Params:         0       0       0       0
  6023 ;;      Locals:         0       0       0       0
  6024 ;;      Temps:          0       0       0       0
  6025 ;;      Totals:         0       0       0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_ISR
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           	psect	text40
  6036  00152C                     __ptext40:
  6037                           	opt stack 0
  6038  00152C                     _CanRCVResponse:
  6039                           	opt stack 22
  6040                           
  6041                           ;Can_XmitService.c: 189: if (RXB0CONbits.RXFUL == 1) {
  6042                           
  6043                           ; BSR set to: 15
  6044                           ;incstack = 0
  6045  00152C  AE60               	btfss	3936,7,c	;volatile
  6046  00152E  0012               	return	
  6047                           
  6048                           ;Can_XmitService.c: 190: RXB0CONbits.RXFUL = 0;
  6049  001530  9E60               	bcf	3936,7,c	;volatile
  6050  001532  0012               	return	
  6051  001534                     __end_of_CanRCVResponse:
  6052                           	opt stack 0
  6053                           tosu	equ	0xFFF
  6054                           tosh	equ	0xFFE
  6055                           tosl	equ	0xFFD
  6056                           pclatu	equ	0xFFB
  6057                           pclath	equ	0xFFA
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           postinc0	equ	0xFEE
  6066                           fsr0h	equ	0xFEA
  6067                           fsr0l	equ	0xFE9
  6068                           wreg	equ	0xFE8
  6069                           indf1	equ	0xFE7
  6070                           postinc1	equ	0xFE6
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _CanErrorResponse *****************
  6081 ;; Defined at:
  6082 ;;		line 194 in file "Can_XmitService.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      void 
  6089 ;; Registers used:
  6090 ;;		None
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6096 ;;      Params:         0       0       0       0
  6097 ;;      Locals:         0       0       0       0
  6098 ;;      Temps:          0       0       0       0
  6099 ;;      Totals:         0       0       0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_ISR
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text41
  6110  00154E                     __ptext41:
  6111                           	opt stack 0
  6112  00154E                     _CanErrorResponse:
  6113                           	opt stack 22
  6114                           
  6115                           ;incstack = 0
  6116  00154E  0012               	return		;funcret
  6117  001550                     __end_of_CanErrorResponse:
  6118                           	opt stack 0
  6119                           tosu	equ	0xFFF
  6120                           tosh	equ	0xFFE
  6121                           tosl	equ	0xFFD
  6122                           pclatu	equ	0xFFB
  6123                           pclath	equ	0xFFA
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           postinc0	equ	0xFEE
  6132                           fsr0h	equ	0xFEA
  6133                           fsr0l	equ	0xFE9
  6134                           wreg	equ	0xFE8
  6135                           indf1	equ	0xFE7
  6136                           postinc1	equ	0xFE6
  6137                           fsr1h	equ	0xFE2
  6138                           fsr1l	equ	0xFE1
  6139                           indf2	equ	0xFDF
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           fsr2h	equ	0xFDA
  6143                           fsr2l	equ	0xFD9
  6144                           status	equ	0xFD8
  6145                           
  6146 ;; *************** function _BusErrorResponse *****************
  6147 ;; Defined at:
  6148 ;;		line 199 in file "Can_XmitService.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;		None
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;		None
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  1    wreg      void 
  6155 ;; Registers used:
  6156 ;;		None
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6162 ;;      Params:         0       0       0       0
  6163 ;;      Locals:         0       0       0       0
  6164 ;;      Temps:          0       0       0       0
  6165 ;;      Totals:         0       0       0       0
  6166 ;;Total ram usage:        0 bytes
  6167 ;; Hardware stack levels used:    1
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_ISR
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text42
  6176  001550                     __ptext42:
  6177                           	opt stack 0
  6178  001550                     _BusErrorResponse:
  6179                           	opt stack 22
  6180                           
  6181                           ;incstack = 0
  6182  001550  0012               	return		;funcret
  6183  001552                     __end_of_BusErrorResponse:
  6184                           	opt stack 0
  6185                           tosu	equ	0xFFF
  6186                           tosh	equ	0xFFE
  6187                           tosl	equ	0xFFD
  6188                           pclatu	equ	0xFFB
  6189                           pclath	equ	0xFFA
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           postinc0	equ	0xFEE
  6198                           fsr0h	equ	0xFEA
  6199                           fsr0l	equ	0xFE9
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           postinc1	equ	0xFE6
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _AnalogISR *****************
  6213 ;; Defined at:
  6214 ;;		line 77 in file "Analog_Service.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;		None
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6228 ;;      Params:         0       0       0       0
  6229 ;;      Locals:         3       0       0       0
  6230 ;;      Temps:          2       0       0       0
  6231 ;;      Totals:         5       0       0       0
  6232 ;;Total ram usage:        5 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    4
  6235 ;; This function calls:
  6236 ;;		_PostCan_XmitService
  6237 ;;		i2_ES_Timer_InitTimer
  6238 ;; This function is called by:
  6239 ;;		_ISR
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           	psect	text43
  6244  000CEE                     __ptext43:
  6245                           	opt stack 0
  6246  000CEE                     _AnalogISR:
  6247                           	opt stack 18
  6248                           
  6249                           ;Analog_Service.c: 79: if (!ADCON0bits.DONE) {
  6250                           
  6251                           ;incstack = 0
  6252  000CEE  B2C2               	btfsc	4034,1,c	;volatile
  6253  000CF0  0012               	return	
  6254                           
  6255                           ;Analog_Service.c: 80: if (ADCON0bits.CHS == 0x00) {
  6256  000CF2  30C2               	rrcf	4034,w,c	;volatile
  6257  000CF4  32E8               	rrcf	wreg,f,c
  6258  000CF6  0B0F               	andlw	15
  6259  000CF8  0900               	iorlw	0
  6260  000CFA  A4D8               	btfss	status,2,c
  6261  000CFC  D018               	goto	i2l2792
  6262                           
  6263                           ;Analog_Service.c: 81: Brightness = ((ADRESH<<8)|ADRESL) >> 2;
  6264  000CFE  50C3               	movf	4035,w,c	;volatile
  6265  000D00  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6266  000D04  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6267  000D06  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6268  000D0A  6A21               	clrf	??_AnalogISR,c
  6269  000D0C  1221               	iorwf	??_AnalogISR,f,c
  6270  000D0E  0E00               	movlw	0
  6271  000D10  1222               	iorwf	??_AnalogISR+1,f,c
  6272  000D12  3422               	rlcf	??_AnalogISR+1,w,c
  6273  000D14  3222               	rrcf	??_AnalogISR+1,f,c
  6274  000D16  3221               	rrcf	??_AnalogISR,f,c
  6275  000D18  3422               	rlcf	??_AnalogISR+1,w,c
  6276  000D1A  3222               	rrcf	??_AnalogISR+1,f,c
  6277  000D1C  3221               	rrcf	??_AnalogISR,f,c
  6278  000D1E  5021               	movf	??_AnalogISR,w,c
  6279  000D20  6E3E               	movwf	_Brightness,c
  6280                           
  6281                           ;Analog_Service.c: 82: ADCON0bits.CHS = 0x01;
  6282  000D22  50C2               	movf	4034,w,c	;volatile
  6283  000D24  0BC3               	andlw	-61
  6284  000D26  0904               	iorlw	4
  6285  000D28  6EC2               	movwf	4034,c	;volatile
  6286                           
  6287                           ;Analog_Service.c: 83: ADCON0bits.GO = 1;
  6288  000D2A  82C2               	bsf	4034,1,c	;volatile
  6289                           
  6290                           ;Analog_Service.c: 84: } else if (ADCON0bits.CHS == 0x01) {
  6291  000D2C  0012               	return	
  6292  000D2E                     i2l2792:
  6293  000D2E  30C2               	rrcf	4034,w,c	;volatile
  6294  000D30  32E8               	rrcf	wreg,f,c
  6295  000D32  0B0F               	andlw	15
  6296  000D34  06E8               	decf	wreg,f,c
  6297  000D36  A4D8               	btfss	status,2,c
  6298  000D38  0012               	return	
  6299                           
  6300                           ;Analog_Service.c: 85: Location = ((ADRESH<<8)|ADRESL) >> 2;
  6301  000D3A  50C3               	movf	4035,w,c	;volatile
  6302  000D3C  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6303  000D40  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6304  000D42  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6305  000D46  6A21               	clrf	??_AnalogISR,c
  6306  000D48  1221               	iorwf	??_AnalogISR,f,c
  6307  000D4A  0E00               	movlw	0
  6308  000D4C  1222               	iorwf	??_AnalogISR+1,f,c
  6309  000D4E  3422               	rlcf	??_AnalogISR+1,w,c
  6310  000D50  3222               	rrcf	??_AnalogISR+1,f,c
  6311  000D52  3221               	rrcf	??_AnalogISR,f,c
  6312  000D54  3422               	rlcf	??_AnalogISR+1,w,c
  6313  000D56  3222               	rrcf	??_AnalogISR+1,f,c
  6314  000D58  3221               	rrcf	??_AnalogISR,f,c
  6315  000D5A  5021               	movf	??_AnalogISR,w,c
  6316  000D5C  6E3F               	movwf	_Location,c
  6317                           
  6318                           ;Analog_Service.c: 86: ADCON0bits.CHS = 0x00;
  6319  000D5E  94C2               	bcf	4034,2,c	;volatile
  6320  000D60  96C2               	bcf	4034,3,c	;volatile
  6321  000D62  98C2               	bcf	4034,4,c	;volatile
  6322  000D64  9AC2               	bcf	4034,5,c	;volatile
  6323                           
  6324                           ;Analog_Service.c: 87: ES_Event Event2Post;
  6325                           ;Analog_Service.c: 88: Event2Post.EventType = XMIT_EVENT;
  6326  000D66  0E07               	movlw	7
  6327  000D68  6E23               	movwf	AnalogISR@Event2Post,c
  6328                           
  6329                           ;Analog_Service.c: 89: PostCan_XmitService(Event2Post);
  6330  000D6A  C023  F01E         	movff	AnalogISR@Event2Post,PostCan_XmitService@ThisEvent
  6331  000D6E  C024  F01F         	movff	AnalogISR@Event2Post+1,PostCan_XmitService@ThisEvent+1
  6332  000D72  C025  F020         	movff	AnalogISR@Event2Post+2,PostCan_XmitService@ThisEvent+2
  6333  000D76  EC7E  F00A         	call	_PostCan_XmitService	;wreg free
  6334                           
  6335                           ;Analog_Service.c: 90: ES_Timer_InitTimer(0, 5);
  6336  000D7A  0E00               	movlw	0
  6337  000D7C  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  6338  000D7E  0E05               	movlw	5
  6339  000D80  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  6340  000D82  0E00               	movlw	0
  6341  000D84  EC38  F008         	call	i2_ES_Timer_InitTimer
  6342  000D88  0012               	return	
  6343  000D8A                     __end_of_AnalogISR:
  6344                           	opt stack 0
  6345                           tosu	equ	0xFFF
  6346                           tosh	equ	0xFFE
  6347                           tosl	equ	0xFFD
  6348                           pclatu	equ	0xFFB
  6349                           pclath	equ	0xFFA
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           intcon	equ	0xFF2
  6357                           postinc0	equ	0xFEE
  6358                           fsr0h	equ	0xFEA
  6359                           fsr0l	equ	0xFE9
  6360                           wreg	equ	0xFE8
  6361                           indf1	equ	0xFE7
  6362                           postinc1	equ	0xFE6
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function i2_ES_Timer_InitTimer *****************
  6373 ;; Defined at:
  6374 ;;		line 229 in file "ES_Timers.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  Num             1    wreg     unsigned char 
  6377 ;;  NewTime         2    0[COMRAM] unsigned int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  Num             1    4[COMRAM] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      enum E15445
  6382 ;; Registers used:
  6383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6389 ;;      Params:         2       0       0       0
  6390 ;;      Locals:         1       0       0       0
  6391 ;;      Temps:          2       0       0       0
  6392 ;;      Totals:         5       0       0       0
  6393 ;;Total ram usage:        5 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_AnalogISR
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text44
  6403  001070                     __ptext44:
  6404                           	opt stack 0
  6405  001070                     i2_ES_Timer_InitTimer:
  6406                           	opt stack 21
  6407                           
  6408                           ;incstack = 0
  6409                           ;i2ES_Timer_InitTimer@Num stored from wreg
  6410  001070  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  6411                           
  6412                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6413                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6414                           ;ES_Timers.c: 236: (NewTime == 0) )
  6415  001072  0E10               	movlw	16
  6416  001074  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  6417  001076  0012               	return	
  6418  001078  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6419  00107A  0D02               	mullw	2
  6420  00107C  0E21               	movlw	low _Timer2PostFunc
  6421  00107E  24F3               	addwf	prodl,w,c
  6422  001080  6EF6               	movwf	tblptrl,c
  6423  001082  0E03               	movlw	high _Timer2PostFunc
  6424  001084  20F4               	addwfc	prodh,w,c
  6425  001086  6EF7               	movwf	tblptrh,c
  6426  001088                     	if	0	;There are less than 3 active tblptr bytes
  6427  001088                     	endif
  6428  001088  0009               	tblrd		*+
  6429  00108A  50F5               	movf	tablat,w,c
  6430  00108C  0009               	tblrd		*+
  6431  00108E  10F5               	iorwf	tablat,w,c
  6432  001090  B4D8               	btfsc	status,2,c
  6433  001092  0012               	return	
  6434  001094  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  6435  001096  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  6436  001098  B4D8               	btfsc	status,2,c
  6437  00109A  0012               	return	
  6438                           
  6439                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6440                           
  6441                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6442                           ;	Return value of i2_ES_Timer_InitTimer is never used
  6443  00109C  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6444  00109E  0D02               	mullw	2
  6445  0010A0  0E60               	movlw	low _TMR_TimerArray
  6446  0010A2  24F3               	addwf	prodl,w,c
  6447  0010A4  6ED9               	movwf	fsr2l,c
  6448  0010A6  0E00               	movlw	high _TMR_TimerArray
  6449  0010A8  20F4               	addwfc	prodh,w,c
  6450  0010AA  6EDA               	movwf	fsr2h,c
  6451  0010AC  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  6452  0010B0  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  6453                           
  6454                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6455  0010B4  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6456  0010B6  0D02               	mullw	2
  6457  0010B8  0E01               	movlw	low _BitNum2SetMask
  6458  0010BA  24F3               	addwf	prodl,w,c
  6459  0010BC  6EF6               	movwf	tblptrl,c
  6460  0010BE  0E03               	movlw	high _BitNum2SetMask
  6461  0010C0  20F4               	addwfc	prodh,w,c
  6462  0010C2  6EF7               	movwf	tblptrh,c
  6463  0010C4                     	if	0	;There are less than 3 active tblptr bytes
  6464  0010C4                     	endif
  6465  0010C4  0009               	tblrd		*+
  6466  0010C6  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  6467  0010CA  0009               	tblrd		*+
  6468  0010CC  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  6469  0010D0  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  6470  0010D2  0100               	movlb	0	; () banked
  6471  0010D4  1387               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6472  0010D6  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  6473  0010D8  0100               	movlb	0	; () banked
  6474  0010DA  1388               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6475  0010DC  0012               	return	
  6476  0010DE                     __end_ofi2_ES_Timer_InitTimer:
  6477                           	opt stack 0
  6478                           tosu	equ	0xFFF
  6479                           tosh	equ	0xFFE
  6480                           tosl	equ	0xFFD
  6481                           pclatu	equ	0xFFB
  6482                           pclath	equ	0xFFA
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           postinc0	equ	0xFEE
  6491                           fsr0h	equ	0xFEA
  6492                           fsr0l	equ	0xFE9
  6493                           wreg	equ	0xFE8
  6494                           indf1	equ	0xFE7
  6495                           postinc1	equ	0xFE6
  6496                           fsr1h	equ	0xFE2
  6497                           fsr1l	equ	0xFE1
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _PostCan_XmitService *****************
  6506 ;; Defined at:
  6507 ;;		line 116 in file "Can_XmitService.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      unsigned char 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6521 ;;      Params:         3       0       0       0
  6522 ;;      Locals:         0       0       0       0
  6523 ;;      Temps:          0       0       0       0
  6524 ;;      Totals:         3       0       0       0
  6525 ;;Total ram usage:        3 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    3
  6528 ;; This function calls:
  6529 ;;		i2_ES_PostToService
  6530 ;; This function is called by:
  6531 ;;		_AnalogISR
  6532 ;;		_PostToList
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text45
  6537  0014FC                     __ptext45:
  6538                           	opt stack 0
  6539  0014FC                     _PostCan_XmitService:
  6540                           	opt stack 18
  6541                           
  6542                           ;Can_XmitService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6543                           
  6544                           ;incstack = 0
  6545  0014FC  C01E  F018         	movff	PostCan_XmitService@ThisEvent,i2ES_PostToService@TheEvent
  6546  001500  C01F  F019         	movff	PostCan_XmitService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6547  001504  C020  F01A         	movff	PostCan_XmitService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6548  001508  0100               	movlb	0	; () banked
  6549  00150A  518A               	movf	Can_XmitService@MyPriority& (0+255),w,b
  6550  00150C  ECA4  F008         	call	i2_ES_PostToService
  6551  001510  0012               	return	
  6552  001512                     __end_of_PostCan_XmitService:
  6553                           	opt stack 0
  6554                           tosu	equ	0xFFF
  6555                           tosh	equ	0xFFE
  6556                           tosl	equ	0xFFD
  6557                           pclatu	equ	0xFFB
  6558                           pclath	equ	0xFFA
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           postinc0	equ	0xFEE
  6567                           fsr0h	equ	0xFEA
  6568                           fsr0l	equ	0xFE9
  6569                           wreg	equ	0xFE8
  6570                           indf1	equ	0xFE7
  6571                           postinc1	equ	0xFE6
  6572                           fsr1h	equ	0xFE2
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function i2_ES_PostToService *****************
  6582 ;; Defined at:
  6583 ;;		line 351 in file "ES_Framework.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  WhichService    1    wreg     unsigned char 
  6586 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  WhichService    1   28[COMRAM] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      unsigned char 
  6591 ;; Registers used:
  6592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6598 ;;      Params:         3       0       0       0
  6599 ;;      Locals:         1       0       0       0
  6600 ;;      Temps:          2       0       0       0
  6601 ;;      Totals:         6       0       0       0
  6602 ;;Total ram usage:        6 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    2
  6605 ;; This function calls:
  6606 ;;		i2_ES_EnQueueFIFO
  6607 ;; This function is called by:
  6608 ;;		_PostCan_XmitService
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text46
  6613  001148                     __ptext46:
  6614                           	opt stack 0
  6615  001148                     i2_ES_PostToService:
  6616                           	opt stack 18
  6617                           
  6618                           ;incstack = 0
  6619                           ;i2ES_PostToService@WhichService stored from wreg
  6620  001148  6E1D               	movwf	i2ES_PostToService@WhichService,c
  6621                           
  6622                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6623                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6624                           ;ES_Framework.c: 354: 1 )){
  6625  00114A  0E03               	movlw	3
  6626  00114C  601D               	cpfslt	i2ES_PostToService@WhichService,c
  6627  00114E  D02F               	goto	i2l2492
  6628  001150  501D               	movf	i2ES_PostToService@WhichService,w,c
  6629  001152  0D03               	mullw	3
  6630  001154  0E5C               	movlw	low _EventQueues
  6631  001156  24F3               	addwf	prodl,w,c
  6632  001158  6EF6               	movwf	tblptrl,c
  6633  00115A  0E03               	movlw	high _EventQueues
  6634  00115C  20F4               	addwfc	prodh,w,c
  6635  00115E  6EF7               	movwf	tblptrh,c
  6636  001160                     	if	0	;There are less than 3 active tblptr bytes
  6637  001160                     	endif
  6638  001160  0009               	tblrd		*+
  6639  001162  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  6640  001166  000A               	tblrd		*-
  6641  001168  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  6642  00116C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  6643  001170  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  6644  001174  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  6645  001178  EC27  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  6646  00117C  06E8               	decf	wreg,f,c
  6647  00117E  A4D8               	btfss	status,2,c
  6648  001180  D016               	goto	i2l2492
  6649                           
  6650                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6651  001182  501D               	movf	i2ES_PostToService@WhichService,w,c
  6652  001184  0D02               	mullw	2
  6653  001186  0E01               	movlw	low _BitNum2SetMask
  6654  001188  24F3               	addwf	prodl,w,c
  6655  00118A  6EF6               	movwf	tblptrl,c
  6656  00118C  0E03               	movlw	high _BitNum2SetMask
  6657  00118E  20F4               	addwfc	prodh,w,c
  6658  001190  6EF7               	movwf	tblptrh,c
  6659  001192                     	if	0	;There are less than 3 active tblptr bytes
  6660  001192                     	endif
  6661  001192  0009               	tblrd		*+
  6662  001194  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  6663  001198  0009               	tblrd		*+
  6664  00119A  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  6665  00119E  501B               	movf	??i2_ES_PostToService,w,c
  6666  0011A0  0100               	movlb	0	; () banked
  6667  0011A2  1385               	iorwf	_Ready& (0+255),f,b
  6668  0011A4  501C               	movf	??i2_ES_PostToService+1,w,c
  6669  0011A6  0100               	movlb	0	; () banked
  6670  0011A8  1386               	iorwf	(_Ready+1)& (0+255),f,b
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;ES_Framework.c: 356: return 1;
  6674  0011AA  0E01               	movlw	1
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;ES_Framework.c: 357: } else
  6678                           
  6679                           ; BSR set to: 0
  6680  0011AC  0012               	return	
  6681  0011AE                     i2l2492:
  6682                           
  6683                           ;ES_Framework.c: 358: return 0;
  6684  0011AE  0E00               	movlw	0
  6685  0011B0  0012               	return	
  6686  0011B2                     __end_ofi2_ES_PostToService:
  6687                           	opt stack 0
  6688                           tosu	equ	0xFFF
  6689                           tosh	equ	0xFFE
  6690                           tosl	equ	0xFFD
  6691                           pclatu	equ	0xFFB
  6692                           pclath	equ	0xFFA
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           postinc0	equ	0xFEE
  6701                           fsr0h	equ	0xFEA
  6702                           fsr0l	equ	0xFE9
  6703                           wreg	equ	0xFE8
  6704                           indf1	equ	0xFE7
  6705                           postinc1	equ	0xFE6
  6706                           fsr1h	equ	0xFE2
  6707                           fsr1l	equ	0xFE1
  6708                           indf2	equ	0xFDF
  6709                           postinc2	equ	0xFDE
  6710                           postdec2	equ	0xFDD
  6711                           fsr2h	equ	0xFDA
  6712                           fsr2l	equ	0xFD9
  6713                           status	equ	0xFD8
  6714                           
  6715 ;; *************** function i2_ES_EnQueueFIFO *****************
  6716 ;; Defined at:
  6717 ;;		line 85 in file "ES_Queue.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  6720 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6721 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  6724 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6725 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      unsigned char 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6735 ;;      Params:         5       0       0       0
  6736 ;;      Locals:         3       0       0       0
  6737 ;;      Temps:          3       0       0       0
  6738 ;;      Totals:        11       0       0       0
  6739 ;;Total ram usage:       11 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    1
  6742 ;; This function calls:
  6743 ;;		i2___awmod
  6744 ;;		i2___wmul
  6745 ;; This function is called by:
  6746 ;;		i2_ES_PostToService
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text47
  6751  000A4E                     __ptext47:
  6752                           	opt stack 0
  6753  000A4E                     i2_ES_EnQueueFIFO:
  6754                           	opt stack 18
  6755                           
  6756                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6757                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6758                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6759                           
  6760                           ;incstack = 0
  6761  000A4E  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  6762  000A52  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  6763                           
  6764                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6765  000A56  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6766  000A5A  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6767  000A5E  EE10 F002          	lfsr	1,2
  6768  000A62  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6769  000A64  26E1               	addwf	fsr1l,f,c
  6770  000A66  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6771  000A68  22E2               	addwfc	fsr1h,f,c
  6772  000A6A  50DE               	movf	postinc2,w,c
  6773  000A6C  5CE6               	subwf	postinc1,w,c
  6774  000A6E  B0D8               	btfsc	status,0,c
  6775  000A70  D046               	goto	i2l2288
  6776                           
  6777                           ;ES_Queue.c: 92: {
  6778                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6779  000A72  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  6780  000A76  9EF2               	bcf	intcon,7,c	;volatile
  6781                           
  6782                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6783                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6784  000A78  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6785  000A7C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6786  000A80  50DF               	movf	indf2,w,c
  6787  000A82  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  6788  000A84  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  6789  000A86  6E03               	movwf	i2___awmod@divisor,c
  6790  000A88  6A04               	clrf	i2___awmod@divisor+1,c
  6791  000A8A  EE20 F002          	lfsr	2,2
  6792  000A8E  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6793  000A90  26D9               	addwf	fsr2l,f,c
  6794  000A92  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6795  000A94  22DA               	addwfc	fsr2h,f,c
  6796  000A96  50DF               	movf	indf2,w,c
  6797  000A98  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  6798  000A9A  EE20 F001          	lfsr	2,1
  6799  000A9E  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6800  000AA0  26D9               	addwf	fsr2l,f,c
  6801  000AA2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6802  000AA4  22DA               	addwfc	fsr2h,f,c
  6803  000AA6  50DF               	movf	indf2,w,c
  6804  000AA8  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  6805  000AAA  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  6806  000AAC  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  6807  000AAE  6E01               	movwf	i2___awmod@dividend,c
  6808  000AB0  6A02               	clrf	i2___awmod@dividend+1,c
  6809  000AB2  3602               	rlcf	i2___awmod@dividend+1,f,c
  6810  000AB4  EC00  F008         	call	i2___awmod	;wreg free
  6811  000AB8  0E01               	movlw	1
  6812  000ABA  2401               	addwf	?i2___awmod,w,c
  6813  000ABC  6E07               	movwf	i2___wmul@multiplier,c
  6814  000ABE  0E00               	movlw	0
  6815  000AC0  2002               	addwfc	?i2___awmod+1,w,c
  6816  000AC2  6E08               	movwf	i2___wmul@multiplier+1,c
  6817  000AC4  0E00               	movlw	0
  6818  000AC6  6E0A               	movwf	i2___wmul@multiplicand+1,c
  6819  000AC8  0E03               	movlw	3
  6820  000ACA  6E09               	movwf	i2___wmul@multiplicand,c
  6821  000ACC  EC2E  F00A         	call	i2___wmul	;wreg free
  6822  000AD0  5007               	movf	?i2___wmul,w,c
  6823  000AD2  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  6824  000AD4  6ED9               	movwf	fsr2l,c
  6825  000AD6  5008               	movf	?i2___wmul+1,w,c
  6826  000AD8  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  6827  000ADA  6EDA               	movwf	fsr2h,c
  6828  000ADC  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  6829  000AE0  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  6830  000AE4  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  6831                           
  6832                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6833  000AE8  EE20 F002          	lfsr	2,2
  6834  000AEC  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6835  000AEE  26D9               	addwf	fsr2l,f,c
  6836  000AF0  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6837  000AF2  22DA               	addwfc	fsr2h,f,c
  6838  000AF4  2ADF               	incf	indf2,f,c
  6839                           
  6840                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6841  000AF6  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6842                           
  6843                           ;ES_Queue.c: 101: return(1);
  6844  000AFA  0E01               	movlw	1
  6845                           
  6846                           ;ES_Queue.c: 102: }else
  6847  000AFC  0012               	return	
  6848  000AFE                     i2l2288:
  6849                           
  6850                           ;ES_Queue.c: 103: return(0);
  6851  000AFE  0E00               	movlw	0
  6852  000B00  0012               	return	
  6853  000B02                     __end_ofi2_ES_EnQueueFIFO:
  6854                           	opt stack 0
  6855                           tosu	equ	0xFFF
  6856                           tosh	equ	0xFFE
  6857                           tosl	equ	0xFFD
  6858                           pclatu	equ	0xFFB
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           postinc0	equ	0xFEE
  6868                           fsr0h	equ	0xFEA
  6869                           fsr0l	equ	0xFE9
  6870                           wreg	equ	0xFE8
  6871                           indf1	equ	0xFE7
  6872                           postinc1	equ	0xFE6
  6873                           fsr1h	equ	0xFE2
  6874                           fsr1l	equ	0xFE1
  6875                           indf2	equ	0xFDF
  6876                           postinc2	equ	0xFDE
  6877                           postdec2	equ	0xFDD
  6878                           fsr2h	equ	0xFDA
  6879                           fsr2l	equ	0xFD9
  6880                           status	equ	0xFD8
  6881                           
  6882 ;; *************** function i2___wmul *****************
  6883 ;; Defined at:
  6884 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;  multiplier      2    6[COMRAM] unsigned int 
  6887 ;;  multiplicand    2    8[COMRAM] unsigned int 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  __wmul          2   10[COMRAM] unsigned int 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  2    6[COMRAM] unsigned int 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0, prodl, prodh
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6899 ;;      Params:         4       0       0       0
  6900 ;;      Locals:         2       0       0       0
  6901 ;;      Temps:          0       0       0       0
  6902 ;;      Totals:         6       0       0       0
  6903 ;;Total ram usage:        6 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		i2_ES_EnQueueFIFO
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text48
  6913  00145C                     __ptext48:
  6914                           	opt stack 0
  6915  00145C                     i2___wmul:
  6916                           	opt stack 18
  6917                           
  6918                           ;incstack = 0
  6919  00145C  5007               	movf	i2___wmul@multiplier,w,c
  6920  00145E  0209               	mulwf	i2___wmul@multiplicand,c
  6921  001460  CFF3 F00B          	movff	prodl,i2___wmul@product
  6922  001464  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  6923  001468  5007               	movf	i2___wmul@multiplier,w,c
  6924  00146A  020A               	mulwf	i2___wmul@multiplicand+1,c
  6925  00146C  50F3               	movf	prodl,w,c
  6926  00146E  260C               	addwf	i2___wmul@product+1,f,c
  6927  001470  5008               	movf	i2___wmul@multiplier+1,w,c
  6928  001472  0209               	mulwf	i2___wmul@multiplicand,c
  6929  001474  50F3               	movf	prodl,w,c
  6930  001476  260C               	addwf	i2___wmul@product+1,f,c
  6931  001478  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  6932  00147C  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  6933  001480  0012               	return	
  6934  001482                     __end_ofi2___wmul:
  6935                           	opt stack 0
  6936                           tosu	equ	0xFFF
  6937                           tosh	equ	0xFFE
  6938                           tosl	equ	0xFFD
  6939                           pclatu	equ	0xFFB
  6940                           pclath	equ	0xFFA
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           postinc0	equ	0xFEE
  6949                           fsr0h	equ	0xFEA
  6950                           fsr0l	equ	0xFE9
  6951                           wreg	equ	0xFE8
  6952                           indf1	equ	0xFE7
  6953                           postinc1	equ	0xFE6
  6954                           fsr1h	equ	0xFE2
  6955                           fsr1l	equ	0xFE1
  6956                           indf2	equ	0xFDF
  6957                           postinc2	equ	0xFDE
  6958                           postdec2	equ	0xFDD
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963 ;; *************** function i2___awmod *****************
  6964 ;; Defined at:
  6965 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  dividend        2    0[COMRAM] int 
  6968 ;;  divisor         2    2[COMRAM] int 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  __awmod         1    5[COMRAM] unsigned char 
  6971 ;;  __awmod         1    4[COMRAM] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  2    0[COMRAM] int 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6981 ;;      Params:         4       0       0       0
  6982 ;;      Locals:         2       0       0       0
  6983 ;;      Temps:          0       0       0       0
  6984 ;;      Totals:         6       0       0       0
  6985 ;;Total ram usage:        6 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		i2_ES_EnQueueFIFO
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text49
  6995  001000                     __ptext49:
  6996                           	opt stack 0
  6997  001000                     i2___awmod:
  6998                           	opt stack 18
  6999                           
  7000                           ;incstack = 0
  7001  001000  0E00               	movlw	0
  7002  001002  6E06               	movwf	i2___awmod@sign,c
  7003  001004  AE02               	btfss	i2___awmod@dividend+1,7,c
  7004  001006  D006               	goto	i2l2204
  7005  001008  6C01               	negf	i2___awmod@dividend,c
  7006  00100A  1E02               	comf	i2___awmod@dividend+1,f,c
  7007  00100C  B0D8               	btfsc	status,0,c
  7008  00100E  2A02               	incf	i2___awmod@dividend+1,f,c
  7009  001010  0E01               	movlw	1
  7010  001012  6E06               	movwf	i2___awmod@sign,c
  7011  001014                     i2l2204:
  7012  001014  AE04               	btfss	i2___awmod@divisor+1,7,c
  7013  001016  D004               	goto	i2l2208
  7014  001018  6C03               	negf	i2___awmod@divisor,c
  7015  00101A  1E04               	comf	i2___awmod@divisor+1,f,c
  7016  00101C  B0D8               	btfsc	status,0,c
  7017  00101E  2A04               	incf	i2___awmod@divisor+1,f,c
  7018  001020                     i2l2208:
  7019  001020  5003               	movf	i2___awmod@divisor,w,c
  7020  001022  1004               	iorwf	i2___awmod@divisor+1,w,c
  7021  001024  B4D8               	btfsc	status,2,c
  7022  001026  D018               	goto	i2l2224
  7023  001028  0E01               	movlw	1
  7024  00102A  6E05               	movwf	i2___awmod@counter,c
  7025  00102C  D004               	goto	i2l2214
  7026  00102E                     i2l2212:
  7027  00102E  90D8               	bcf	status,0,c
  7028  001030  3603               	rlcf	i2___awmod@divisor,f,c
  7029  001032  3604               	rlcf	i2___awmod@divisor+1,f,c
  7030  001034  2A05               	incf	i2___awmod@counter,f,c
  7031  001036                     i2l2214:
  7032  001036  AE04               	btfss	i2___awmod@divisor+1,7,c
  7033  001038  D7FA               	goto	i2l2212
  7034  00103A                     i2l2216:
  7035  00103A  5003               	movf	i2___awmod@divisor,w,c
  7036  00103C  5C01               	subwf	i2___awmod@dividend,w,c
  7037  00103E  5004               	movf	i2___awmod@divisor+1,w,c
  7038  001040  5802               	subwfb	i2___awmod@dividend+1,w,c
  7039  001042  A0D8               	btfss	status,0,c
  7040  001044  D004               	goto	i2l2220
  7041  001046  5003               	movf	i2___awmod@divisor,w,c
  7042  001048  5E01               	subwf	i2___awmod@dividend,f,c
  7043  00104A  5004               	movf	i2___awmod@divisor+1,w,c
  7044  00104C  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7045  00104E                     i2l2220:
  7046  00104E  90D8               	bcf	status,0,c
  7047  001050  3204               	rrcf	i2___awmod@divisor+1,f,c
  7048  001052  3203               	rrcf	i2___awmod@divisor,f,c
  7049  001054  2E05               	decfsz	i2___awmod@counter,f,c
  7050  001056  D7F1               	goto	i2l2216
  7051  001058                     i2l2224:
  7052  001058  5006               	movf	i2___awmod@sign,w,c
  7053  00105A  B4D8               	btfsc	status,2,c
  7054  00105C  D004               	goto	i2l2228
  7055  00105E  6C01               	negf	i2___awmod@dividend,c
  7056  001060  1E02               	comf	i2___awmod@dividend+1,f,c
  7057  001062  B0D8               	btfsc	status,0,c
  7058  001064  2A02               	incf	i2___awmod@dividend+1,f,c
  7059  001066                     i2l2228:
  7060  001066  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7061  00106A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7062  00106E  0012               	return	
  7063  001070                     __end_ofi2___awmod:
  7064                           	opt stack 0
  7065                           tosu	equ	0xFFF
  7066                           tosh	equ	0xFFE
  7067                           tosl	equ	0xFFD
  7068                           pclatu	equ	0xFFB
  7069                           pclath	equ	0xFFA
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           intcon	equ	0xFF2
  7077                           postinc0	equ	0xFEE
  7078                           fsr0h	equ	0xFEA
  7079                           fsr0l	equ	0xFE9
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           postinc1	equ	0xFE6
  7083                           fsr1h	equ	0xFE2
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           tosu	equ	0xFFF
  7092                           tosh	equ	0xFFE
  7093                           tosl	equ	0xFFD
  7094                           pclatu	equ	0xFFB
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           postinc0	equ	0xFEE
  7104                           fsr0h	equ	0xFEA
  7105                           fsr0l	equ	0xFE9
  7106                           wreg	equ	0xFE8
  7107                           indf1	equ	0xFE7
  7108                           postinc1	equ	0xFE6
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118                           	psect	text50
  7119  000000                     __ptext50:
  7120                           	opt stack 0
  7121                           tosu	equ	0xFFF
  7122                           tosh	equ	0xFFE
  7123                           tosl	equ	0xFFD
  7124                           pclatu	equ	0xFFB
  7125                           pclath	equ	0xFFA
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           intcon	equ	0xFF2
  7133                           postinc0	equ	0xFEE
  7134                           fsr0h	equ	0xFEA
  7135                           fsr0l	equ	0xFE9
  7136                           wreg	equ	0xFE8
  7137                           indf1	equ	0xFE7
  7138                           postinc1	equ	0xFE6
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148                           	psect	rparam
  7149  0000                     tosu	equ	0xFFF
  7150                           tosh	equ	0xFFE
  7151                           tosl	equ	0xFFD
  7152                           pclatu	equ	0xFFB
  7153                           pclath	equ	0xFFA
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           postinc0	equ	0xFEE
  7162                           fsr0h	equ	0xFEA
  7163                           fsr0l	equ	0xFE9
  7164                           wreg	equ	0xFE8
  7165                           indf1	equ	0xFE7
  7166                           postinc1	equ	0xFE6
  7167                           fsr1h	equ	0xFE2
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176                           	psect	temp
  7177  000040                     btemp:
  7178                           	opt stack 0
  7179  000040                     	ds	1
  7180  0000                     int$flags	set	btemp
  7181                           tosu	equ	0xFFF
  7182                           tosh	equ	0xFFE
  7183                           tosl	equ	0xFFD
  7184                           pclatu	equ	0xFFB
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           postinc0	equ	0xFEE
  7194                           fsr0h	equ	0xFEA
  7195                           fsr0l	equ	0xFE9
  7196                           wreg	equ	0xFE8
  7197                           indf1	equ	0xFE7
  7198                           postinc1	equ	0xFE6
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      63
    BANK0           160     44     131
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostAnalogService(), Absolute function(), PostButtonDebounceSM(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S186$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S153$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    S153$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> Check4Keystroke(), CheckButtonEvents(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_AnalogISR
    _AnalogISR->_PostCan_XmitService
    _PostCan_XmitService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_CheckUserEvents
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostAnalogService
    _ES_Timer_Tick_Resp->_PostButtonDebounceSM
    _PostAnalogService->_ES_PostToService
    _RunButtonDebounceSM->_ES_PostAll
    _ES_PostAll->_ES_EnQueueFIFO
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitAnalogService
    _ES_Initialize->_InitCan_XmitService
    _InitializeButtonDebounce->_ES_Timer_InitTimer
    _InitCan_XmitService->_ES_PostToService
    _InitAnalogService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23001
                                             43 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   15826
                                             38 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunAnalogService *
                _RunButtonDebounceSM *
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6044
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6044
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostAnalogService *
               _PostButtonDebounceSM *
 ---------------------------------------------------------------------------------
 (4) _PostAnalogService                                    3     0      3    2806
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   8     5      3     135
                                             29 BANK0      8     5      3
                    _InitCanHardware
                           _InitPins
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              0 BANK0      1     1      0
                      _GetBrightness
                        _GetLocation
 ---------------------------------------------------------------------------------
 (4) _GetLocation                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetBrightness                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunButtonDebounceSM                                  6     3      3    3217
                                             29 BANK0      6     3      3
                         _ES_PostAll
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_PostAll                                           6     3      3    2575
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (2) _RunAnalogService                                     6     3      3     629
                                             29 BANK0      6     3      3
                 _ES_Timer_InitTimer
                       _InitAnalogHW
 ---------------------------------------------------------------------------------
 (3) _InitAnalogHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3178
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3088
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    2905
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6779
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitAnalogService *
                _InitCan_XmitService *
           _InitializeButtonDebounce *
 ---------------------------------------------------------------------------------
 (2) _InitializeButtonDebounce                             1     1      0     508
                                              5 BANK0      1     1      0
                 _ES_Timer_InitTimer
                       _GetInputLine
                       _InitButtonHW
 ---------------------------------------------------------------------------------
 (3) _InitButtonHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     486
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitAnalogService                                    4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2731
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2289
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    1158
                                             37 COMRAM    16    16      0
                          _AnalogISR
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _AnalogISR                                            5     5      0    1158
                                             32 COMRAM     5     5      0
                _PostCan_XmitService
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _PostCan_XmitService                                 3     0      3     977
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitAnalogService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitializeButtonDebounce *
       _ES_Timer_InitTimer
       _GetInputLine
       _InitButtonHW
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunAnalogService *
       _ES_Timer_InitTimer
       _InitAnalogHW
     _RunButtonDebounceSM *
       _ES_PostAll
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _XmitData
         _GetBrightness
         _GetLocation
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostAnalogService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostButtonDebounceSM *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _AnalogISR
     _PostCan_XmitService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_ES_Timer_InitTimer
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2C      83       4       81.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3F       1       67.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2       9        0.0%
DATA                 0      0      C2      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Dec 14 23:30:43 2016

           Analog_Service@MyPriority 0089                     ??__HW_Timer_Init 00B9  
                 ??_RunAnalogService 00D7                  ES_CheckUserEvents@i 00DC  
         CheckButtonEvents@ReturnVal 00D7                  __HW_Timer_Init@Rate 00B7  
                ___wmul@multiplicand 00BF            __size_of_BusErrorResponse 0002  
                        __CFG_OSC$HS 000000                                  l512 0E9A  
                                l515 0EF6                                  l372 0E14  
                                l491 09C6                                  l492 09D6  
                                l493 09E6                                  l489 09B6  
              __end_of_ES_Initialize 07E4                                  _GIE 007F97  
                                _ISR 0008                         ___awmod@sign 00BC  
            __end_of_Check4Keystroke 154C                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00CB                  __end_of_GetLocation 1544  
            ES_EnQueueFIFO@Event2Add 00C5                        ?_InitAnalogHW 0001  
                  ?_ES_PostToService 00CE                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0080                                 l2130 0C78  
                               l2150 0CE4                                 l2142 0CC2  
                               l2134 0C8C                                 l2126 0C68  
                               l2136 0C98                                 l2138 0C9E  
                               l2146 0CD0                                 l2170 08C2  
                               l2242 0BB4                                 l2324 1128  
                               l2340 0F22                                 l2252 0C40  
                               l2328 113E                                 l2336 0F18  
                               l2512 0B04                                 l2256 0C46  
                               l2186 0FFC                                 l2380 05B8  
                               l2604 14BC                                 l2550 1212  
                               l2526 0B52                                 l2518 0B22  
                               l2536 0B84                                 l2704 11EE  
                               l2368 0502                                 l2608 14C4  
                               l2626 13DA                                 l2730 0714  
                               l2546 1208                                 l2474 12CC  
                               l2466 12A4                                 l2642 09AA  
                               l2538 0B94                                 l2378 057A  
                               l2580 04C0                                 l2734 0758  
                               l2750 07E0                                 l2726 070A  
                               l2662 0A3A                                 l2806 1358  
                               l2576 04A4                                 l2656 09F6  
                               l2760 0688                                 l2808 1360  
                               l2746 07DA                                 l2738 075C  
                               l2586 04E8                                 l2658 0A2A  
                               l2770 06F2                                 l2754 0606  
                               l2686 13AA                                 l2766 06DC  
                               l2698 11D8                                 l2962 0DB4  
                               l2964 0DC6                                 l2972 0DFC  
                               l2966 0DD8                                 l2968 0DEA  
                               _ADIE 007CEE                                 _ADIF 007CF6  
                               STR_1 036B                                 STR_2 0386  
                               STR_3 039E                                 STR_4 03B5  
                               u1154 0BDA                                 u1155 0BD2  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u1418 1228  
                               u1419 1240                                 u1618 07B4  
                               u1298 0562                                 u1619 07D0  
                               _PIE1 000F9D                                 u1658 06B2  
                               u1659 06CA                                 _PEIE 007F96  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00D1  
                               _main 0D8A                          ?_ES_DeQueue 00C3  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0040                        main@ErrorType 00E2  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D4  
       __end_ofi2_ES_Timer_InitTimer 10DE                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      ?_InitButtonHW 0001                    _PostAnalogService 14E6  
   __end_of_InitializeButtonDebounce 140C                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00D4                         ___param_bank 000010  
                 ?_PostAnalogService 00D4                 __end_of_GetInputLine 153A  
              __end_of_GetBrightness 1548              __end_of_InitCanHardware 0F12  
                              ??_ISR 0026                   ES_Run@HighestPrior 00E1  
                        ?_ES_PostAll 00CE                  ??_PostAnalogService 00D7  
                              ?_main 0001                __end_of_ES_Timer_Init 1520  
                    __end_of___awmod 0CEE                      __end_of___lbmod 12D8  
                              _T1CON 000FCD                           _DistList00 0369  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _ERRIE 007D1D                                _ERRIF 007D25  
                              i2l229 0958                                _IRXIE 007D1F  
                              _IRXIF 007D27           __size_of_CheckButtonEvents 006A  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                         _Brightness 003E                        __CFG_PWRT$OFF 000000  
                              _Ready 0085                       ??_InitAnalogHW 00B7  
                AnalogISR@Event2Post 0023                                _putch 154C  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 1482  
          __end_of_PostAnalogService 14FC                                status 000FD8  
                     ??_InitButtonHW 00B7                   __size_ofi2___awmod 0070  
                    __initialization 1436               ES_GetMSBitSet@LoopCntr 00C0  
         __end_of_ES_CheckUserEvents 124C                         __end_of_main 0E16  
                  ES_Timer_Init@Rate 00B9                   __size_of_AnalogISR 009C  
                   __end_of_InitPins 14BA           PostAnalogService@ThisEvent 00D4  
          RunAnalogService@ThisEvent 00D4                          _GetLocation 1540  
                __end_of_EventQueues 0365                               ??_main 00E2  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 14D0                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1       RunButtonDebounceSM@ReturnEvent 00D7  
                   __end_of_XmitData 1294                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 008E  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00B9  
                             i2l2220 104E                               i2l2212 102E  
                             i2l2204 1014                               i2l2214 1036  
                             i2l2216 103A                               i2l2224 1058  
                             i2l2208 1020                               i2l2228 1066  
                             i2l2288 0AFE                               i2l2492 11AE  
                             i2l2792 0D2E                               i2l2872 0926  
                             i2l2890 0944                               i2l2884 093A  
                             i2l2878 0930                               i2l2896 094E  
                             _INTCON 000FF2                  __size_of_ES_PostAll 0078  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0604                               _TXB0D0 000F46  
                             _TXB0D1 000F47                               _TXB0D2 000F48  
             ??_PostButtonDebounceSM 00D7                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 00C8                       _Timer2PostFunc 0321  
                             _Queue0 0090                               _Queue1 009C  
                             _Queue2 00A8                       _SysTickCounter 003A  
                             ___wmul 1314                            ??___awmod 00BB  
                          ??___lbmod 00B8                     ?_InitCanHardware 0001  
           _InitializeButtonDebounce 13DE          RunAnalogService@ReturnEvent 00D7  
       __size_of_RunButtonDebounceSM 00A6                  _PostCan_XmitService 14FC  
        __size_of_ES_Timer_InitTimer 0080                               clear_0 143C  
                             clear_1 1448                     _BusErrorResponse 1550  
                    ___awmod@divisor 00B9            ES_Timer_InitTimer@NewTime 00B7  
                    ___awmod@counter 00BB                               _printf 134A  
                        ISR@LastTime 0036                    _InitAnalogService 137E  
             ES_InitQueue@pThisQueue 00BA                    __end_ofi2___awmod 1070  
               i2_ES_Timer_InitTimer 1070                         __mediumconst 0000  
                        ISR@NextTime 0038                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                 ?_InitAnalogService 0001                               putch@c 0001  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 0116  
               ES_DeQueue@pThisQueue 00CB              ES_GetMSBitSet@Val2Check 00B7  
               ?_PostCan_XmitService 001E          InitCan_XmitService@Priority 00D7  
                  __end_of_AnalogISR 0D8A                      ___lbmod@divisor 00B7  
                ??_InitAnalogService 00D4                           __accesstop 0060  
            __end_of__initialization 144E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00B9           __size_of_PostAnalogService 0016  
                    __CFG_PBADEN$OFF 000000                __size_of_GetInputLine 0006  
                      ___rparam_used 000001                          _EventQueues 035C  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
               __end_of_InitAnalogHW 1436                        ?_ES_InitQueue 00B7  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 154E  
                    _TMR_ActiveFlags 0087            __end_of_InitAnalogService 13AE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00BE  
        __end_of_InitCan_XmitService 13DE            __size_of_RunAnalogService 0050  
               __end_of_InitButtonHW 152C                ?i2_ES_Timer_InitTimer 0001  
                     _TMR_TimerArray 0060                         _GetInputLine 1534  
              ??_PostCan_XmitService 0021             ES_EnQueueFIFO@pThisQueue 00CC  
                            ??_putch 00B7             __HW_Process_Pending_Ints 14BA  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00C7  
        __size_of_RunCan_XmitService 00BA            __size_of_ES_PostToService 0076  
                     ??_ES_InitQueue 00BA                              ?___wmul 00BD  
                       ??_ES_PostAll 00D1         RunButtonDebounceSM@ThisEvent 00D4  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                        ES_PostAll@i 00D3                              _ECANCON 000F77  
                            ?_printf 00B7                           ??i2___wmul 000B  
                 __end_of_ES_DeQueue 04EE               i2ES_EnQueueFIFO@pBlock 000D  
                            _TXB0DLC 000F45                           ??_InitPins 00B7  
                 __end_of_ES_PostAll 0F8A                      __size_of_ES_Run 00F4  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
          i2ES_EnQueueFIFO@Event2Add 000F                              ___awmod 0C4C  
                            ___lbmod 1294                  ES_PostAll@ThisEvent 00CE  
                    __size_of___wmul 0036                         __psmallconst 0300  
                         ??_XmitData 00B7                ES_Timer_InitTimer@Num 00BB  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1436  
                       ?_GetLocation 0001                              __ramtop 0300  
         __size_of_InitAnalogService 0030                              __ptext0 0D8A  
                            __ptext1 134A                              __ptext2 154C  
                            __ptext3 0604                              __ptext4 14BA  
                            __ptext5 04EE                              __ptext6 14D0  
                            __ptext7 14E6                              __ptext8 0BA8  
                            __ptext9 11B2             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034               ??i2_ES_Timer_InitTimer 0003  
                       __size_of_ISR 098C              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 00B7                   _ES_CheckUserEvents 1202  
                    ES_Run@ThisEvent 00B4                       __pintcode_body 08C6  
             __size_of_GetBrightness 0004                 end_of_initialization 144E  
                _RunButtonDebounceSM 0B02                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 1552            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 08C6  
                i2___wmul@multiplier 0007         ES_PostToService@WhichService 00D3  
              __size_of_InitAnalogHW 002A           ??_InitializeButtonDebounce 00BC  
             __size_of_ES_Timer_Init 000E            __size_of_CanErrorResponse 0002  
                            printf@c 00BB                              printf@f 00B7  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ?_RunButtonDebounceSM 00D4                 ??_ES_CheckUserEvents 00DC  
              __size_of_InitButtonHW 000C           InitAnalogService@ThisEvent 00D4  
                   _RunAnalogService 11B2                        _ES_Initialize 06F8  
                   ___lbmod@dividend 00B8                            _TRISAbits 000F92  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0369  
                       _InitAnalogHW 140C                 __end_of_ES_InitQueue 1314  
                          i2___awmod 1000                       ES_Initialize@i 00DA  
                        ___lbmod@rem 00BA             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 06F8                            _AnalogISR 0CEE  
      __size_of_PostButtonDebounceSM 0016          RunCan_XmitService@ThisEvent 00D4  
                       _InitButtonHW 1520                   __end_of_DistList00 036B  
                   _ES_PostToService 0F8A           __end_of_ES_Timer_InitTimer 0E96  
              ??_RunButtonDebounceSM 00D7                        _GetBrightness 1544  
               __end_of_ServDescList 035C                       __end_of___wmul 134A  
                  ??_CanXmitResponse 0001                       ?_ES_Initialize 00D8  
         ??__HW_Process_Pending_Ints 00DB                        _ES_Timer_Init 1512  
                   i2___wmul@product 000B                       __end_of_printf 137E  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 0604  
                start_initialization 1436                          __end_of_ISR 0994  
                  __size_ofi2___wmul 0026                         _CurrentState 008C  
                         ?i2___awmod 0001                          _CANSTATbits 000F6E  
                           ??_ES_Run 00DD                            _TickCount 008F  
                         ?_AnalogISR 0001           __end_ofi2_ES_PostToService 11B2  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                     ?_GetBrightness 0001                             ??___wmul 00C1  
            i2ES_Timer_InitTimer@Num 0005              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00B9  
                     ?_ES_Timer_Init 00B9                    __size_of_XmitData 0048  
               __size_of_GetLocation 0004                       __HW_Timer_Init 1482  
        __end_of_PostCan_XmitService 1512                          __pbssCOMRAM 0036  
                      __pcstackBANK0 00B7                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00B7  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 0030  
         __end_of_RunCan_XmitService 0A4E                     i2_ES_EnQueueFIFO 0A4E  
CheckButtonEvents@CurrentButtonState 00DB                        __PRIMASK_temp 003C  
                   _CanErrorResponse 154E                    ??_Check4Keystroke 00B7  
                          __pintcode 0008                             ?___awmod 00B7  
                           ?___lbmod 00B7          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00DA             ES_PostToService@TheEvent 00CE  
             __end_of__HW_Timer_Init 14A0        PostButtonDebounceSM@ThisEvent 00D4  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
       PostCan_XmitService@ThisEvent 001E                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00D8  
                  ??_InitCanHardware 00B7            ES_GetMSBitSet@Nybble2Test 00BF  
                  ?_BusErrorResponse 0001                       ___wmul@product 00C1  
                        ??_AnalogISR 0021             __end_of_RunAnalogService 1202  
                 ??_BusErrorResponse 0001                      ??_GetBrightness 00B7  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 12D8  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 00BB       i2ES_PostToService@WhichService 001D  
          InitAnalogService@Priority 00D7                      ?__HW_Timer_Init 00B7  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 00BD  
                           i2___wmul 145C        __size_ofi2_ES_Timer_InitTimer 006E  
                 ES_DeQueue@SaveCrit 00C9                 ES_EnQueueFIFO@pBlock 00C3  
           __end_of_ES_PostToService 1000                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 14A0                             _Location 003F  
                    _CanXmitResponse 153A                             __Hrparam 0000  
                     _ES_GetMSBitSet 0BA8                             __Lrparam 0000  
                   __size_of___awmod 00A2                     __size_of___lbmod 0044  
                           _XmitData 124C                i2___wmul@multiplicand 0009  
        __size_of_ES_CheckUserEvents 004A                       _CanRCVResponse 152C  
                     _ES_EnQueueFIFO 07E4    __size_of_InitializeButtonDebounce 002E  
       __end_of_PostButtonDebounceSM 14E6            ?_InitializeButtonDebounce 0001  
                   XmitData@DataByte 00B7                   _ES_Timer_InitTimer 0E16  
                      ?_GetInputLine 0001               __end_of_BitNum2SetMask 0321  
                           __ptext10 0B02                             __ptext11 0994  
                           __ptext20 1294                             __ptext12 124C  
                           __ptext21 1202                             __ptext13 1540  
                           __ptext30 0E16                             __ptext22 1548  
                           __ptext14 1544                             __ptext31 0F8A  
                           __ptext23 10DE                             __ptext15 14A0  
                           __ptext40 152C                             __ptext32 07E4  
                           __ptext24 06F8                             __ptext16 0E96  
                           __ptext41 154E                             __ptext33 1314  
                           __ptext25 137E                             __ptext17 0F12  
                           __ptext50 0000                             __ptext42 1550  
                           __ptext34 0C4C                             __ptext26 13AE  
                           __ptext18 140C                             __ptext43 0CEE  
                           __ptext35 1512                             __ptext27 13DE  
                           __ptext19 03C6                             __ptext44 1070  
                           __ptext36 1482                             __ptext28 1520  
                           __ptext45 14FC                             __ptext37 12D8  
                           __ptext29 1534                             __ptext46 1148  
                           __ptext47 0A4E                             __ptext39 153A  
                           __ptext48 145C                             __ptext49 1000  
  ES_Timer_Tick_Resp@NeedsProcessing 0083                  ?_ES_Timer_InitTimer 00B7  
                      __size_of_main 008C                   _ES_Timer_Tick_Resp 04EE  
             __end_of_ES_GetMSBitSet 0C4C          __end_of_RunButtonDebounceSM 0BA8  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 1534  
             __end_of_ES_EnQueueFIFO 08C6                             int$flags 0040  
                _InitCan_XmitService 13AE                 ??_ES_Timer_InitTimer 00B9  
                  ES_DeQueue@NumLeft 00CA                   i2_ES_PostToService 1148  
           __end_ofi2_ES_EnQueueFIFO 0B02                          _RXB0CONbits 000F60  
                  i2___awmod@divisor 0003                    i2___awmod@counter 0005  
           __end_of_CanErrorResponse 1550                       ??_GetInputLine 00B7  
                ?i2_ES_PostToService 0018                    _CheckButtonEvents 10DE  
               ??_ES_Timer_Tick_Resp 00D7        RunCan_XmitService@ReturnEvent 00D9  
                 ?_CheckButtonEvents 0001                 ?_InitCan_XmitService 0001  
            __end_of_CanXmitResponse 1540                      _Check4Keystroke 1548  
                           intlevel2 0000            Can_XmitService@MyPriority 008A  
                         _ES_DeQueue 03C6    __size_of__HW_Process_Pending_Ints 0016  
          ?__HW_Process_Pending_Ints 0001     InitializeButtonDebounce@Priority 00BC  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 00B7  
                ??_CheckButtonEvents 00D7                 ??i2_ES_PostToService 001B  
ES_Timer_Tick_Resp@NextTimer2Process 008B                   _RunCan_XmitService 0994  
                           printf@ap 00B9                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 00C3                           _ES_PostAll 0F12  
                      ??_GetLocation 00B7                     ES_DeQueue@pBlock 00C3  
                ?_RunCan_XmitService 00D4                      _InitCanHardware 0E96  
          __end_of_CheckButtonEvents 1148                      _LastButtonState 008D  
             ES_DeQueue@pReturnEvent 00C5                ES_InitQueue@BlockSize 00B9  
              ??_InitCan_XmitService 00D4         __size_of_PostCan_XmitService 0016  
               ??_RunCan_XmitService 00D7                 _PostButtonDebounceSM 14D0  
                  ?_RunAnalogService 00D4           CheckButtonEvents@ThisEvent 00D8  
