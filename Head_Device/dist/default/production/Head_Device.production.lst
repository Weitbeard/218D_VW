

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Dec 10 18:00:56 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	smallconst
    68  000300                     __psmallconst:
    69                           	opt stack 0
    70  000300  00                 	db	0
    71  000301                     _BitNum2SetMask:
    72                           	opt stack 0
    73  000301  0001               	dw	1
    74  000303  0002               	dw	2
    75  000305  0004               	dw	4
    76  000307  0008               	dw	8
    77  000309  0010               	dw	16
    78  00030B  0020               	dw	32
    79  00030D  0040               	dw	64
    80  00030F  0080               	dw	128
    81  000311  0100               	dw	256
    82  000313  0200               	dw	512
    83  000315  0400               	dw	1024
    84  000317  0800               	dw	2048
    85  000319  1000               	dw	4096
    86  00031B  2000               	dw	8192
    87  00031D  4000               	dw	16384
    88  00031F  8000               	dw	32768
    89  000321                     __end_of_BitNum2SetMask:
    90                           	opt stack 0
    91  000321                     _Timer2PostFunc:
    92                           	opt stack 0
    93  000321  06                 	db	low _PostAnalogService
    94  000322  15                 	db	high _PostAnalogService
    95  000323  F0                 	db	low _PostButtonDebounceSM
    96  000324  14                 	db	high _PostButtonDebounceSM
    97  000325  00                 	db	0
    98  000326  00                 	db	0
    99  000327  00                 	db	0
   100  000328  00                 	db	0
   101  000329  00                 	db	0
   102  00032A  00                 	db	0
   103  00032B  00                 	db	0
   104  00032C  00                 	db	0
   105  00032D  00                 	db	0
   106  00032E  00                 	db	0
   107  00032F  00                 	db	0
   108  000330  00                 	db	0
   109  000331  00                 	db	0
   110  000332  00                 	db	0
   111  000333  00                 	db	0
   112  000334  00                 	db	0
   113  000335  00                 	db	0
   114  000336  00                 	db	0
   115  000337  00                 	db	0
   116  000338  00                 	db	0
   117  000339  00                 	db	0
   118  00033A  00                 	db	0
   119  00033B  00                 	db	0
   120  00033C  00                 	db	0
   121  00033D  00                 	db	0
   122  00033E  00                 	db	0
   123  00033F  00                 	db	0
   124  000340  00                 	db	0
   125  000341                     __end_of_Timer2PostFunc:
   126                           	opt stack 0
   127  000341                     _Nybble2MSBitNum:
   128                           	opt stack 0
   129  000341  00                 	db	0
   130  000342  01                 	db	1
   131  000343  01                 	db	1
   132  000344  02                 	db	2
   133  000345  02                 	db	2
   134  000346  02                 	db	2
   135  000347  02                 	db	2
   136  000348  03                 	db	3
   137  000349  03                 	db	3
   138  00034A  03                 	db	3
   139  00034B  03                 	db	3
   140  00034C  03                 	db	3
   141  00034D  03                 	db	3
   142  00034E  03                 	db	3
   143  00034F  03                 	db	3
   144  000350                     __end_of_Nybble2MSBitNum:
   145                           	opt stack 0
   146  000350                     _ServDescList:
   147                           	opt stack 0
   148  000350  CE                 	db	low _InitCan_XmitService
   149  000351  13                 	db	high _InitCan_XmitService
   150  000352  C6                 	db	low _RunCan_XmitService
   151  000353  08                 	db	high _RunCan_XmitService
   152  000354  FE                 	db	low _InitializeButtonDebounce
   153  000355  13                 	db	high _InitializeButtonDebounce
   154  000356  22                 	db	low _RunButtonDebounceSM
   155  000357  0B                 	db	high _RunButtonDebounceSM
   156  000358  9E                 	db	low _InitAnalogService
   157  000359  13                 	db	high _InitAnalogService
   158  00035A  D2                 	db	low _RunAnalogService
   159  00035B  11                 	db	high _RunAnalogService
   160  00035C                     __end_of_ServDescList:
   161                           	opt stack 0
   162  00035C                     _EventQueues:
   163                           	opt stack 0
   164  00035C  91                 	db	low _Queue0
   165  00035D  00                 	db	high _Queue0
   166  00035E  04                 	db	4
   167  00035F  9D                 	db	low _Queue1
   168  000360  00                 	db	high _Queue1
   169  000361  04                 	db	4
   170  000362  A9                 	db	low _Queue2
   171  000363  00                 	db	high _Queue2
   172  000364  04                 	db	4
   173  000365                     __end_of_EventQueues:
   174                           	opt stack 0
   175  000365                     _ES_EventList:
   176                           	opt stack 0
   177  000365  68                 	db	low _Check4Keystroke
   178  000366  15                 	db	high _Check4Keystroke
   179  000367  FE                 	db	low _CheckButtonEvents
   180  000368  10                 	db	high _CheckButtonEvents
   181  000369                     __end_of_ES_EventList:
   182                           	opt stack 0
   183  000369                     _DistList00:
   184                           	opt stack 0
   185  000369  1C                 	db	low _PostCan_XmitService
   186  00036A  15                 	db	high _PostCan_XmitService
   187  00036B                     __end_of_DistList00:
   188                           	opt stack 0
   189  0000                     _RXF0EIDH	set	3842
   190  0000                     _RXF0EIDL	set	3843
   191  0000                     _RXF0SIDH	set	3840
   192  0000                     _RXF0SIDL	set	3841
   193  0000                     _RXM0EIDH	set	3866
   194  0000                     _RXM0EIDL	set	3867
   195  0000                     _RXM0SIDH	set	3864
   196  0000                     _RXM0SIDL	set	3865
   197  0000                     _TXB0CONbits	set	3904
   198  0000                     _TXB0D0	set	3910
   199  0000                     _TXB0D1	set	3911
   200  0000                     _TXB0D2	set	3912
   201  0000                     _TXB0DLC	set	3909
   202  0000                     _TXB0EIDH	set	3907
   203  0000                     _TXB0EIDL	set	3908
   204  0000                     _TXB0SIDH	set	3905
   205  0000                     _TXB0SIDL	set	3906
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON1bits	set	4033
   209  0000                     _ADCON2bits	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _BRGCON1bits	set	3952
   213  0000                     _BRGCON2bits	set	3953
   214  0000                     _BRGCON3bits	set	3954
   215  0000                     _CANCON	set	3951
   216  0000                     _CANSTATbits	set	3950
   217  0000                     _CCP1CON	set	4029
   218  0000                     _CCPR1H	set	4031
   219  0000                     _CCPR1L	set	4030
   220  0000                     _CIOCON	set	3955
   221  0000                     _ECANCON	set	3959
   222  0000                     _INTCON	set	4082
   223  0000                     _LATA	set	3977
   224  0000                     _LATB	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _PIE1	set	3997
   227  0000                     _PORTA	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB0CONbits	set	3936
   231  0000                     _T1CON	set	4045
   232  0000                     _TRISA	set	3986
   233  0000                     _TRISAbits	set	3986
   234  0000                     _TRISBbits	set	3987
   235  0000                     _ADIE	set	31982
   236  0000                     _ADIF	set	31990
   237  0000                     _CCP1IF	set	31986
   238  0000                     _ERRIE	set	32029
   239  0000                     _ERRIF	set	32037
   240  0000                     _GIE	set	32663
   241  0000                     _IRXIE	set	32031
   242  0000                     _IRXIF	set	32039
   243  0000                     _LATA2	set	31818
   244  0000                     _LATA3	set	31819
   245  0000                     _LATA4	set	31820
   246  0000                     _LATA5	set	31821
   247  0000                     _PEIE	set	32662
   248  0000                     _RXB0IE	set	32024
   249  0000                     _RXB0IF	set	32032
   250  0000                     _TXB0IE	set	32026
   251  0000                     _TXB0IF	set	32034
   252  00036B                     STR_1:
   253  00036B  46                 	db	70	;'F'
   254  00036C  61                 	db	97	;'a'
   255  00036D  69                 	db	105	;'i'
   256  00036E  6C                 	db	108	;'l'
   257  00036F  65                 	db	101	;'e'
   258  000370  64                 	db	100	;'d'
   259  000371  20                 	db	32
   260  000372  6F                 	db	111	;'o'
   261  000373  6E                 	db	110	;'n'
   262  000374  20                 	db	32
   263  000375  61                 	db	97	;'a'
   264  000376  74                 	db	116	;'t'
   265  000377  74                 	db	116	;'t'
   266  000378  65                 	db	101	;'e'
   267  000379  6D                 	db	109	;'m'
   268  00037A  70                 	db	112	;'p'
   269  00037B  74                 	db	116	;'t'
   270  00037C  20                 	db	32
   271  00037D  74                 	db	116	;'t'
   272  00037E  6F                 	db	111	;'o'
   273  00037F  20                 	db	32
   274  000380  50                 	db	80	;'P'
   275  000381  6F                 	db	111	;'o'
   276  000382  73                 	db	115	;'s'
   277  000383  74                 	db	116	;'t'
   278  000384  0A                 	db	10
   279  000385  00                 	db	0
   280  000386                     STR_2:
   281  000386  46                 	db	70	;'F'
   282  000387  61                 	db	97	;'a'
   283  000388  69                 	db	105	;'i'
   284  000389  6C                 	db	108	;'l'
   285  00038A  65                 	db	101	;'e'
   286  00038B  64                 	db	100	;'d'
   287  00038C  20                 	db	32
   288  00038D  6F                 	db	111	;'o'
   289  00038E  6E                 	db	110	;'n'
   290  00038F  20                 	db	32
   291  000390  4E                 	db	78	;'N'
   292  000391  55                 	db	85	;'U'
   293  000392  4C                 	db	76	;'L'
   294  000393  4C                 	db	76	;'L'
   295  000394  20                 	db	32
   296  000395  70                 	db	112	;'p'
   297  000396  6F                 	db	111	;'o'
   298  000397  69                 	db	105	;'i'
   299  000398  6E                 	db	110	;'n'
   300  000399  74                 	db	116	;'t'
   301  00039A  65                 	db	101	;'e'
   302  00039B  72                 	db	114	;'r'
   303  00039C  0A                 	db	10
   304  00039D  00                 	db	0
   305  00039E                     STR_3:
   306  00039E  46                 	db	70	;'F'
   307  00039F  61                 	db	97	;'a'
   308  0003A0  69                 	db	105	;'i'
   309  0003A1  6C                 	db	108	;'l'
   310  0003A2  65                 	db	101	;'e'
   311  0003A3  64                 	db	100	;'d'
   312  0003A4  20                 	db	32
   313  0003A5  49                 	db	73	;'I'
   314  0003A6  6E                 	db	110	;'n'
   315  0003A7  69                 	db	105	;'i'
   316  0003A8  74                 	db	116	;'t'
   317  0003A9  69                 	db	105	;'i'
   318  0003AA  61                 	db	97	;'a'
   319  0003AB  6C                 	db	108	;'l'
   320  0003AC  69                 	db	105	;'i'
   321  0003AD  7A                 	db	122	;'z'
   322  0003AE  61                 	db	97	;'a'
   323  0003AF  74                 	db	116	;'t'
   324  0003B0  69                 	db	105	;'i'
   325  0003B1  6F                 	db	111	;'o'
   326  0003B2  6E                 	db	110	;'n'
   327  0003B3  0A                 	db	10
   328  0003B4  00                 	db	0
   329  0003B5                     STR_4:
   330  0003B5  4F                 	db	79	;'O'
   331  0003B6  74                 	db	116	;'t'
   332  0003B7  68                 	db	104	;'h'
   333  0003B8  65                 	db	101	;'e'
   334  0003B9  72                 	db	114	;'r'
   335  0003BA  20                 	db	32
   336  0003BB  46                 	db	70	;'F'
   337  0003BC  61                 	db	97	;'a'
   338  0003BD  69                 	db	105	;'i'
   339  0003BE  6C                 	db	108	;'l'
   340  0003BF  75                 	db	117	;'u'
   341  0003C0  72                 	db	114	;'r'
   342  0003C1  65                 	db	101	;'e'
   343  0003C2  0A                 	db	10
   344  0003C3  00                 	db	0
   345                           
   346                           ; #config settings
   347  0003C4  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	cinit
   350  001456                     __pcinit:
   351                           	opt stack 0
   352  001456                     start_initialization:
   353                           	opt stack 0
   354  001456                     __initialization:
   355                           	opt stack 0
   356                           
   357                           ; Clear objects allocated to BANK0 (88 bytes)
   358  001456  EE00  F060         	lfsr	0,__pbssBANK0
   359  00145A  0E58               	movlw	88
   360  00145C                     clear_0:
   361  00145C  6AEE               	clrf	postinc0,c
   362  00145E  06E8               	decf	wreg,f,c
   363  001460  E1FD               	bnz	clear_0
   364                           
   365                           ; Clear objects allocated to COMRAM (10 bytes)
   366  001462  EE00  F036         	lfsr	0,__pbssCOMRAM
   367  001466  0E0A               	movlw	10
   368  001468                     clear_1:
   369  001468  6AEE               	clrf	postinc0,c
   370  00146A  06E8               	decf	wreg,f,c
   371  00146C  E1FD               	bnz	clear_1
   372  00146E                     end_of_initialization:
   373                           	opt stack 0
   374  00146E                     __end_of__initialization:
   375                           	opt stack 0
   376  00146E  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   377  001470  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   378  001472  0E00               	movlw	low (__Lmediumconst shr (0+16))
   379  001474  6EF8               	movwf	tblptru,c
   380  001476  0100               	movlb	0
   381  001478  EFD5  F006         	goto	_main	;jump to C main() function
   382                           tblptru	equ	0xFF8
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	bssCOMRAM
   387  000036                     __pbssCOMRAM:
   388                           	opt stack 0
   389  000036                     ISR@LastTime:
   390                           	opt stack 0
   391  000036                     	ds	2
   392  000038                     ISR@NextTime:
   393                           	opt stack 0
   394  000038                     	ds	2
   395  00003A                     _SysTickCounter:
   396                           	opt stack 0
   397  00003A                     	ds	2
   398  00003C                     __PRIMASK_temp:
   399                           	opt stack 0
   400  00003C                     	ds	2
   401  00003E                     _Brightness:
   402                           	opt stack 0
   403  00003E                     	ds	1
   404  00003F                     _Location:
   405                           	opt stack 0
   406  00003F                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt stack 0
   414  000060                     _TMR_TimerArray:
   415                           	opt stack 0
   416  000060                     	ds	32
   417  000080                     ES_Timer_Tick_Resp@NewEvent:
   418                           	opt stack 0
   419  000080                     	ds	3
   420  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   421                           	opt stack 0
   422  000083                     	ds	2
   423  000085                     _Ready:
   424                           	opt stack 0
   425  000085                     	ds	2
   426  000087                     _TMR_ActiveFlags:
   427                           	opt stack 0
   428  000087                     	ds	2
   429  000089                     Analog_Service@MyPriority:
   430                           	opt stack 0
   431  000089                     	ds	1
   432  00008A                     Can_XmitService@MyPriority:
   433                           	opt stack 0
   434  00008A                     	ds	1
   435  00008B                     ES_Timer_Tick_Resp@NextTimer2Process:
   436                           	opt stack 0
   437  00008B                     	ds	1
   438  00008C                     _CurrentState:
   439                           	opt stack 0
   440  00008C                     	ds	1
   441  00008D                     _LastButtonState:
   442                           	opt stack 0
   443  00008D                     	ds	1
   444  00008E                     _LastData:
   445                           	opt stack 0
   446  00008E                     	ds	1
   447  00008F                     _MyPriority:
   448                           	opt stack 0
   449  00008F                     	ds	1
   450  000090                     _TickCount:
   451                           	opt stack 0
   452  000090                     	ds	1
   453  000091                     _Queue0:
   454                           	opt stack 0
   455  000091                     	ds	12
   456  00009D                     _Queue1:
   457                           	opt stack 0
   458  00009D                     	ds	12
   459  0000A9                     _Queue2:
   460                           	opt stack 0
   461  0000A9                     	ds	12
   462  0000B5                     ES_Run@ThisEvent:
   463                           	opt stack 0
   464  0000B5                     	ds	3
   465                           tblptru	equ	0xFF8
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           
   469                           	psect	cstackBANK0
   470  0000B8                     __pcstackBANK0:
   471                           	opt stack 0
   472  0000B8                     ?_printf:
   473                           	opt stack 0
   474  0000B8                     ?___awmod:
   475                           	opt stack 0
   476  0000B8                     XmitData@DataByte:
   477                           	opt stack 0
   478  0000B8                     ___lbmod@divisor:
   479                           	opt stack 0
   480  0000B8                     ES_GetMSBitSet@Val2Check:
   481                           	opt stack 0
   482  0000B8                     __HW_Timer_Init@Rate:
   483                           	opt stack 0
   484  0000B8                     ES_InitQueue@pBlock:
   485                           	opt stack 0
   486  0000B8                     ES_Timer_InitTimer@NewTime:
   487                           	opt stack 0
   488  0000B8                     printf@f:
   489                           	opt stack 0
   490  0000B8                     ___awmod@dividend:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x0
   494  0000B8                     	ds	1
   495  0000B9                     ___lbmod@dividend:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x1
   499  0000B9                     	ds	1
   500  0000BA                     ??_ES_Timer_InitTimer:
   501  0000BA                     ??_ES_GetMSBitSet:
   502  0000BA                     ES_InitQueue@BlockSize:
   503                           	opt stack 0
   504  0000BA                     ___lbmod@counter:
   505                           	opt stack 0
   506  0000BA                     ES_Timer_Init@Rate:
   507                           	opt stack 0
   508  0000BA                     printf@ap:
   509                           	opt stack 0
   510  0000BA                     ___awmod@divisor:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x2
   514  0000BA                     	ds	1
   515  0000BB                     ___lbmod@rem:
   516                           	opt stack 0
   517  0000BB                     ES_InitQueue@pThisQueue:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x3
   521  0000BB                     	ds	1
   522  0000BC                     ES_Timer_InitTimer@Num:
   523                           	opt stack 0
   524  0000BC                     printf@c:
   525                           	opt stack 0
   526  0000BC                     ___awmod@counter:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x4
   530  0000BC                     	ds	1
   531  0000BD                     InitializeButtonDebounce@Priority:
   532                           	opt stack 0
   533  0000BD                     ___awmod@sign:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x5
   537  0000BD                     	ds	1
   538  0000BE                     ?___wmul:
   539                           	opt stack 0
   540  0000BE                     ___wmul@multiplier:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x6
   544  0000BE                     	ds	1
   545  0000BF                     ES_GetMSBitSet@ReturnVal:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x7
   549  0000BF                     	ds	1
   550  0000C0                     ES_GetMSBitSet@Nybble2Test:
   551                           	opt stack 0
   552  0000C0                     ___wmul@multiplicand:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x8
   556  0000C0                     	ds	1
   557  0000C1                     ES_GetMSBitSet@LoopCntr:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x9
   561  0000C1                     	ds	1
   562  0000C2                     ___wmul@product:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0xA
   566  0000C2                     	ds	2
   567  0000C4                     ES_EnQueueFIFO@pBlock:
   568                           	opt stack 0
   569  0000C4                     ES_DeQueue@pBlock:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0xC
   573  0000C4                     	ds	2
   574  0000C6                     ES_DeQueue@pReturnEvent:
   575                           	opt stack 0
   576  0000C6                     ES_EnQueueFIFO@Event2Add:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0xE
   580  0000C6                     	ds	2
   581  0000C8                     ??_ES_DeQueue:
   582                           
   583                           ; 1 bytes @ 0x10
   584  0000C8                     	ds	1
   585  0000C9                     ??_ES_EnQueueFIFO:
   586                           
   587                           ; 1 bytes @ 0x11
   588  0000C9                     	ds	1
   589  0000CA                     ES_DeQueue@SaveCrit:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x12
   593  0000CA                     	ds	1
   594  0000CB                     ES_DeQueue@NumLeft:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x13
   598  0000CB                     	ds	1
   599  0000CC                     ES_EnQueueFIFO@SaveCrit:
   600                           	opt stack 0
   601  0000CC                     ES_DeQueue@pThisQueue:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x14
   605  0000CC                     	ds	1
   606  0000CD                     ES_EnQueueFIFO@pThisQueue:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x15
   610  0000CD                     	ds	2
   611  0000CF                     ES_PostAll@ThisEvent:
   612                           	opt stack 0
   613  0000CF                     ES_PostToService@TheEvent:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x17
   617  0000CF                     	ds	3
   618  0000D2                     ??_ES_PostToService:
   619  0000D2                     ??_ES_PostAll:
   620                           
   621                           ; 1 bytes @ 0x1A
   622  0000D2                     	ds	2
   623  0000D4                     ES_PostAll@i:
   624                           	opt stack 0
   625  0000D4                     ES_PostToService@WhichService:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x1C
   629  0000D4                     	ds	1
   630  0000D5                     ?_RunCan_XmitService:
   631                           	opt stack 0
   632  0000D5                     ?_RunAnalogService:
   633                           	opt stack 0
   634  0000D5                     ?_RunButtonDebounceSM:
   635                           	opt stack 0
   636  0000D5                     PostButtonDebounceSM@ThisEvent:
   637                           	opt stack 0
   638  0000D5                     RunButtonDebounceSM@ThisEvent:
   639                           	opt stack 0
   640  0000D5                     InitCan_XmitService@ThisEvent:
   641                           	opt stack 0
   642  0000D5                     RunCan_XmitService@ThisEvent:
   643                           	opt stack 0
   644  0000D5                     InitAnalogService@ThisEvent:
   645                           	opt stack 0
   646  0000D5                     PostAnalogService@ThisEvent:
   647                           	opt stack 0
   648  0000D5                     RunAnalogService@ThisEvent:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x1D
   652  0000D5                     	ds	3
   653  0000D8                     ??_RunCan_XmitService:
   654  0000D8                     ??_ES_Timer_Tick_Resp:
   655  0000D8                     CheckButtonEvents@ReturnVal:
   656                           	opt stack 0
   657  0000D8                     InitCan_XmitService@Priority:
   658                           	opt stack 0
   659  0000D8                     InitAnalogService@Priority:
   660                           	opt stack 0
   661  0000D8                     RunButtonDebounceSM@ReturnEvent:
   662                           	opt stack 0
   663  0000D8                     RunAnalogService@ReturnEvent:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x20
   667  0000D8                     	ds	1
   668  0000D9                     ES_Initialize@NewRate:
   669                           	opt stack 0
   670  0000D9                     CheckButtonEvents@ThisEvent:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x21
   674  0000D9                     	ds	1
   675  0000DA                     RunCan_XmitService@ReturnEvent:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x22
   679  0000DA                     	ds	1
   680  0000DB                     ES_Initialize@i:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x23
   684  0000DB                     	ds	1
   685  0000DC                     CheckButtonEvents@CurrentButtonState:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x24
   689  0000DC                     	ds	1
   690  0000DD                     ES_CheckUserEvents@i:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x25
   694  0000DD                     	ds	1
   695  0000DE                     ??_ES_Run:
   696                           
   697                           ; 1 bytes @ 0x26
   698  0000DE                     	ds	4
   699  0000E2                     ES_Run@HighestPrior:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x2A
   703  0000E2                     	ds	1
   704  0000E3                     main@ErrorType:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x2B
   708  0000E3                     	ds	1
   709                           tblptru	equ	0xFF8
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           
   713                           	psect	cstackCOMRAM
   714  000001                     __pcstackCOMRAM:
   715                           	opt stack 0
   716  000001                     ?i2___awmod:
   717                           	opt stack 0
   718  000001                     i2ES_Timer_InitTimer@NewTime:
   719                           	opt stack 0
   720  000001                     i2___awmod@dividend:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x0
   724  000001                     	ds	2
   725  000003                     ??i2_ES_Timer_InitTimer:
   726  000003                     i2___awmod@divisor:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x2
   730  000003                     	ds	2
   731  000005                     i2ES_Timer_InitTimer@Num:
   732                           	opt stack 0
   733  000005                     i2___awmod@counter:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x4
   737  000005                     	ds	1
   738  000006                     i2___awmod@sign:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x5
   742  000006                     	ds	1
   743  000007                     ?i2___wmul:
   744                           	opt stack 0
   745  000007                     i2___wmul@multiplier:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x6
   749  000007                     	ds	2
   750  000009                     i2___wmul@multiplicand:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x8
   754  000009                     	ds	2
   755  00000B                     i2___wmul@product:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0xA
   759  00000B                     	ds	2
   760  00000D                     i2ES_EnQueueFIFO@pBlock:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xC
   764  00000D                     	ds	2
   765  00000F                     i2ES_EnQueueFIFO@Event2Add:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0xE
   769  00000F                     	ds	3
   770  000012                     ??i2_ES_EnQueueFIFO:
   771                           
   772                           ; 1 bytes @ 0x11
   773  000012                     	ds	3
   774  000015                     i2ES_EnQueueFIFO@SaveCrit:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x14
   778  000015                     	ds	1
   779  000016                     i2ES_EnQueueFIFO@pThisQueue:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x15
   783  000016                     	ds	2
   784  000018                     i2ES_PostToService@TheEvent:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x17
   788  000018                     	ds	3
   789  00001B                     ??i2_ES_PostToService:
   790                           
   791                           ; 1 bytes @ 0x1A
   792  00001B                     	ds	2
   793  00001D                     i2ES_PostToService@WhichService:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x1C
   797  00001D                     	ds	1
   798  00001E                     PostCan_XmitService@ThisEvent:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x1D
   802  00001E                     	ds	3
   803  000021                     ??_AnalogISR:
   804  000021                     
   805                           ; 1 bytes @ 0x20
   806  000021                     	ds	2
   807  000023                     AnalogISR@Event2Post:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x22
   811  000023                     	ds	3
   812  000026                     ??_ISR:
   813                           
   814                           ; 1 bytes @ 0x25
   815  000026                     	ds	16
   816                           tblptru	equ	0xFF8
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           
   820 ;;
   821 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   822 ;;
   823 ;; *************** function _main *****************
   824 ;; Defined at:
   825 ;;		line 25 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  ErrorType       1   43[BANK0 ] enum E15645
   830 ;; Return value:  Size  Location     Type
   831 ;;                  2  364[None  ] int 
   832 ;; Registers used:
   833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   839 ;;      Params:         0       0       0       0
   840 ;;      Locals:         0       1       0       0
   841 ;;      Temps:          0       0       0       0
   842 ;;      Totals:         0       1       0       0
   843 ;;Total ram usage:        1 bytes
   844 ;; Hardware stack levels required when called:   13
   845 ;; This function calls:
   846 ;;		_ES_Initialize
   847 ;;		_ES_Run
   848 ;;		_printf
   849 ;; This function is called by:
   850 ;;		Startup code after reset
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           	psect	text0
   855  000DAA                     __ptext0:
   856                           	opt stack 0
   857  000DAA                     _main:
   858                           	opt stack 18
   859                           
   860                           ;main.c: 27: ADCON1 = 0x0D;
   861                           
   862                           ;incstack = 0
   863  000DAA  0E0D               	movlw	13
   864  000DAC  6EC1               	movwf	4033,c	;volatile
   865                           
   866                           ;main.c: 34: ES_Return_t ErrorType;
   867                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   868  000DAE  0E9C               	movlw	156
   869  000DB0  0100               	movlb	0	; () banked
   870  000DB2  6FDA               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   871  000DB4  0E3F               	movlw	63
   872  000DB6  6FD9               	movwf	ES_Initialize@NewRate& (0+255),b
   873  000DB8  EC7C  F003         	call	_ES_Initialize	;wreg free
   874  000DBC  0100               	movlb	0	; () banked
   875  000DBE  6FE3               	movwf	main@ErrorType& (0+255),b
   876                           
   877                           ; BSR set to: 0
   878                           ;main.c: 51: if ( ErrorType == Success ) {
   879  000DC0  0100               	movlb	0	; () banked
   880  000DC2  51E3               	movf	main@ErrorType& (0+255),w,b
   881  000DC4  0100               	movlb	0	; () banked
   882  000DC6  A4D8               	btfss	status,2,c
   883  000DC8  D029               	goto	l2994
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 53: ErrorType = ES_Run();
   887  000DCA  EC02  F003         	call	_ES_Run	;wreg free
   888  000DCE  0100               	movlb	0	; () banked
   889  000DD0  6FE3               	movwf	main@ErrorType& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;main.c: 55: }
   893                           ;main.c: 57: switch (ErrorType){
   894  000DD2  D024               	goto	l2994
   895  000DD4                     l2984:
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 59: printf("Failed on attempt to Post\n");
   899  000DD4  0E6B               	movlw	low STR_1
   900  000DD6  0100               	movlb	0	; () banked
   901  000DD8  6FB8               	movwf	printf@f& (0+255),b
   902  000DDA  0E03               	movlw	high STR_1
   903  000DDC  0100               	movlb	0	; () banked
   904  000DDE  6FB9               	movwf	(printf@f+1)& (0+255),b
   905  000DE0  ECB5  F009         	call	_printf	;wreg free
   906                           
   907                           ;main.c: 60: break;
   908  000DE4  D027               	goto	l372
   909  000DE6                     l2986:
   910                           
   911                           ;main.c: 62: printf("Failed on NULL pointer\n");
   912  000DE6  0E86               	movlw	low STR_2
   913  000DE8  0100               	movlb	0	; () banked
   914  000DEA  6FB8               	movwf	printf@f& (0+255),b
   915  000DEC  0E03               	movlw	high STR_2
   916  000DEE  0100               	movlb	0	; () banked
   917  000DF0  6FB9               	movwf	(printf@f+1)& (0+255),b
   918  000DF2  ECB5  F009         	call	_printf	;wreg free
   919                           
   920                           ;main.c: 63: break;
   921  000DF6  D01E               	goto	l372
   922  000DF8                     l2988:
   923                           
   924                           ;main.c: 65: printf("Failed Initialization\n");
   925  000DF8  0E9E               	movlw	low STR_3
   926  000DFA  0100               	movlb	0	; () banked
   927  000DFC  6FB8               	movwf	printf@f& (0+255),b
   928  000DFE  0E03               	movlw	high STR_3
   929  000E00  0100               	movlb	0	; () banked
   930  000E02  6FB9               	movwf	(printf@f+1)& (0+255),b
   931  000E04  ECB5  F009         	call	_printf	;wreg free
   932                           
   933                           ;main.c: 66: break;
   934  000E08  D015               	goto	l372
   935  000E0A                     l2990:
   936                           
   937                           ;main.c: 68: printf("Other Failure\n");
   938  000E0A  0EB5               	movlw	low STR_4
   939  000E0C  0100               	movlb	0	; () banked
   940  000E0E  6FB8               	movwf	printf@f& (0+255),b
   941  000E10  0E03               	movlw	high STR_4
   942  000E12  0100               	movlb	0	; () banked
   943  000E14  6FB9               	movwf	(printf@f+1)& (0+255),b
   944  000E16  ECB5  F009         	call	_printf	;wreg free
   945                           
   946                           ;main.c: 70: }
   947                           
   948                           ;main.c: 69: break;
   949  000E1A  D00C               	goto	l372
   950  000E1C                     l2994:
   951  000E1C  0100               	movlb	0	; () banked
   952  000E1E  51E3               	movf	main@ErrorType& (0+255),w,b
   953                           
   954                           ; Switch size 1, requested type "space"
   955                           ; Number of cases is 3, Range of values is 1 to 5
   956                           ; switch strategies available:
   957                           ; Name         Instructions Cycles
   958                           ; simple_byte           10     6 (average)
   959                           ;	Chosen strategy is simple_byte
   960  000E20  0A01               	xorlw	1	; case 1
   961  000E22  B4D8               	btfsc	status,2,c
   962  000E24  D7D7               	goto	l2984
   963  000E26  0A02               	xorlw	2	; case 3
   964  000E28  B4D8               	btfsc	status,2,c
   965  000E2A  D7DD               	goto	l2986
   966  000E2C  0A06               	xorlw	6	; case 5
   967  000E2E  B4D8               	btfsc	status,2,c
   968  000E30  D7E3               	goto	l2988
   969  000E32  D7EB               	goto	l2990
   970  000E34                     l372:
   971                           
   972                           ;main.c: 72: ;
   973  000E34  D7FF               	goto	l372
   974  000E36                     __end_of_main:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           status	equ	0xFD8
   980                           
   981 ;; *************** function _printf *****************
   982 ;; Defined at:
   983 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   986 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  tmpval          4    0        struct .
   989 ;;  cp              3    0        PTR const unsigned char 
   990 ;;  ap              2    2[BANK0 ] PTR void [1]
   991 ;;		 -> ?_printf(2), 
   992 ;;  len             2    0        unsigned int 
   993 ;;  val             2    0        unsigned int 
   994 ;;  c               1    4[BANK0 ] char 
   995 ;;  flag            1    0        unsigned char 
   996 ;;  prec            1    0        char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  2    0[BANK0 ] int 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1006 ;;      Params:         0       2       0       0
  1007 ;;      Locals:         0       3       0       0
  1008 ;;      Temps:          0       0       0       0
  1009 ;;      Totals:         0       5       0       0
  1010 ;;Total ram usage:        5 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    7
  1013 ;; This function calls:
  1014 ;;		_putch
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text1
  1021  00136A                     __ptext1:
  1022                           	opt stack 0
  1023  00136A                     _printf:
  1024                           	opt stack 23
  1025                           
  1026                           ;doprnt.c: 466: va_list ap;
  1027                           ;doprnt.c: 499: signed char c;
  1028                           ;doprnt.c: 506: signed char prec;
  1029                           ;doprnt.c: 508: unsigned char flag;
  1030                           ;doprnt.c: 523: union {
  1031                           ;doprnt.c: 524: unsigned long vd;
  1032                           ;doprnt.c: 525: double integ;
  1033                           ;doprnt.c: 526: } tmpval;
  1034                           ;doprnt.c: 528: unsigned int val;
  1035                           ;doprnt.c: 529: unsigned len;
  1036                           ;doprnt.c: 530: const char * cp;
  1037                           ;doprnt.c: 533: *ap = __va_start();
  1038                           
  1039                           ;incstack = 0
  1040  00136A  0EBA               	movlw	low (?_printf+2)
  1041  00136C  0100               	movlb	0	; () banked
  1042  00136E  6FBA               	movwf	printf@ap& (0+255),b
  1043  001370  0E00               	movlw	high (?_printf+2)
  1044  001372  0100               	movlb	0	; () banked
  1045  001374  6FBB               	movwf	(printf@ap+1)& (0+255),b
  1046                           
  1047                           ;doprnt.c: 536: while(c = *f++) {
  1048  001376  D004               	goto	l2830
  1049  001378                     l2828:
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;doprnt.c: 540: {
  1053                           ;doprnt.c: 541: (putch(c) );
  1054  001378  0100               	movlb	0	; () banked
  1055  00137A  51BC               	movf	printf@c& (0+255),w,b
  1056  00137C  ECB6  F00A         	call	_putch
  1057  001380                     l2830:
  1058  001380  C0B8  FFF6         	movff	printf@f,tblptrl
  1059  001384  C0B9  FFF7         	movff	printf@f+1,tblptrh
  1060  001388  0100               	movlb	0	; () banked
  1061  00138A  4BB8               	infsnz	printf@f& (0+255),f,b
  1062  00138C  2BB9               	incf	(printf@f+1)& (0+255),f,b
  1063  00138E                     	if	0	;tblptru may be non-zero
  1064  00138E                     	endif
  1065  00138E                     	if	0	;tblptru may be non-zero
  1066  00138E                     	endif
  1067  00138E  0008               	tblrd		*
  1068  001390  CFF5 F0BC          	movff	tablat,printf@c
  1069  001394  0100               	movlb	0	; () banked
  1070  001396  51BC               	movf	printf@c& (0+255),w,b
  1071  001398  B4D8               	btfsc	status,2,c
  1072  00139A  0012               	return	
  1073  00139C  D7ED               	goto	l2828
  1074  00139E                     __end_of_printf:
  1075                           	opt stack 0
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           status	equ	0xFD8
  1083                           
  1084 ;; *************** function _putch *****************
  1085 ;; Defined at:
  1086 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  c               1    wreg     unsigned char 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  c               1    0[COMRAM] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		wreg
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1100 ;;      Params:         0       0       0       0
  1101 ;;      Locals:         0       0       0       0
  1102 ;;      Temps:          0       0       0       0
  1103 ;;      Totals:         0       0       0       0
  1104 ;;Total ram usage:        0 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    6
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_printf
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text2
  1115  00156C                     __ptext2:
  1116                           	opt stack 0
  1117  00156C                     _putch:
  1118                           	opt stack 23
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;incstack = 0
  1122  00156C  0012               	return		;funcret
  1123  00156E                     __end_of_putch:
  1124                           	opt stack 0
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function _ES_Run *****************
  1134 ;; Defined at:
  1135 ;;		line 277 in file "ES_Framework.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  HighestPrior    1   42[BANK0 ] unsigned char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      enum E15493
  1142 ;; Registers used:
  1143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1149 ;;      Params:         0       0       0       0
  1150 ;;      Locals:         0       1       0       0
  1151 ;;      Temps:          0       4       0       0
  1152 ;;      Totals:         0       5       0       0
  1153 ;;Total ram usage:        5 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:   12
  1156 ;; This function calls:
  1157 ;;		_ES_CheckUserEvents
  1158 ;;		_ES_DeQueue
  1159 ;;		_ES_GetMSBitSet
  1160 ;;		_RunAnalogService
  1161 ;;		_RunButtonDebounceSM
  1162 ;;		_RunCan_XmitService
  1163 ;;		__HW_Process_Pending_Ints
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text3
  1170  000604                     __ptext3:
  1171                           	opt stack 0
  1172  000604                     _ES_Run:
  1173                           	opt stack 18
  1174                           
  1175                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1176                           
  1177                           ;incstack = 0
  1178                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1179                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1180                           ;ES_Framework.c: 282: while(1){
  1181  000604  D06B               	goto	l2788
  1182  000606                     l2776:
  1183                           
  1184                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1185  000606  C085  F0B8         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1186  00060A  C086  F0B9         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1187  00060E  ECE4  F005         	call	_ES_GetMSBitSet	;wreg free
  1188  000612  0100               	movlb	0	; () banked
  1189  000614  6FE2               	movwf	ES_Run@HighestPrior& (0+255),b
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1193  000616  0100               	movlb	0	; () banked
  1194  000618  51E2               	movf	ES_Run@HighestPrior& (0+255),w,b
  1195  00061A  0D03               	mullw	3
  1196  00061C  0E5C               	movlw	low _EventQueues
  1197  00061E  24F3               	addwf	prodl,w,c
  1198  000620  6EF6               	movwf	tblptrl,c
  1199  000622  0E03               	movlw	high _EventQueues
  1200  000624  20F4               	addwfc	prodh,w,c
  1201  000626  6EF7               	movwf	tblptrh,c
  1202  000628                     	if	0	;There are less than 3 active tblptr bytes
  1203  000628                     	endif
  1204  000628  0009               	tblrd		*+
  1205  00062A  CFF5 F0C4          	movff	tablat,ES_DeQueue@pBlock
  1206  00062E  000A               	tblrd		*-
  1207  000630  CFF5 F0C5          	movff	tablat,ES_DeQueue@pBlock+1
  1208  000634  0EB5               	movlw	low ES_Run@ThisEvent
  1209  000636  0100               	movlb	0	; () banked
  1210  000638  6FC6               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1211  00063A  0E00               	movlw	high ES_Run@ThisEvent
  1212  00063C  0100               	movlb	0	; () banked
  1213  00063E  6FC7               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1214  000640  ECE3  F001         	call	_ES_DeQueue	;wreg free
  1215  000644  0900               	iorlw	0
  1216  000646  A4D8               	btfss	status,2,c
  1217  000648  D01F               	goto	l2782
  1218                           
  1219                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1220  00064A  0100               	movlb	0	; () banked
  1221  00064C  51E2               	movf	ES_Run@HighestPrior& (0+255),w,b
  1222  00064E  0D02               	mullw	2
  1223  000650  0E01               	movlw	low _BitNum2SetMask
  1224  000652  24F3               	addwf	prodl,w,c
  1225  000654  6EF6               	movwf	tblptrl,c
  1226  000656  0E03               	movlw	high _BitNum2SetMask
  1227  000658  20F4               	addwfc	prodh,w,c
  1228  00065A  6EF7               	movwf	tblptrh,c
  1229  00065C                     	if	0	;There are less than 3 active tblptr bytes
  1230  00065C                     	endif
  1231  00065C  0009               	tblrd		*+
  1232  00065E  CFF5 F0DE          	movff	tablat,??_ES_Run
  1233  000662  0009               	tblrd		*+
  1234  000664  CFF5 F0DF          	movff	tablat,??_ES_Run+1
  1235  000668  0100               	movlb	0	; () banked
  1236  00066A  1DDE               	comf	??_ES_Run& (0+255),w,b
  1237  00066C  0100               	movlb	0	; () banked
  1238  00066E  6FE0               	movwf	(??_ES_Run+2)& (0+255),b
  1239  000670  0100               	movlb	0	; () banked
  1240  000672  1DDF               	comf	(??_ES_Run+1)& (0+255),w,b
  1241  000674  0100               	movlb	0	; () banked
  1242  000676  6FE1               	movwf	(??_ES_Run+3)& (0+255),b
  1243  000678  0100               	movlb	0	; () banked
  1244  00067A  51E0               	movf	(??_ES_Run+2)& (0+255),w,b
  1245  00067C  0100               	movlb	0	; () banked
  1246  00067E  1785               	andwf	_Ready& (0+255),f,b
  1247  000680  0100               	movlb	0	; () banked
  1248  000682  51E1               	movf	(??_ES_Run+3)& (0+255),w,b
  1249  000684  0100               	movlb	0	; () banked
  1250  000686  1786               	andwf	(_Ready+1)& (0+255),f,b
  1251  000688                     l2782:
  1252                           
  1253                           ;ES_Framework.c: 291: }
  1254                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1255  000688  C0B5  F0D5         	movff	ES_Run@ThisEvent,RunAnalogService@ThisEvent
  1256  00068C  C0B6  F0D6         	movff	ES_Run@ThisEvent+1,RunAnalogService@ThisEvent+1
  1257  000690  C0B7  F0D7         	movff	ES_Run@ThisEvent+2,RunAnalogService@ThisEvent+2
  1258  000694  0100               	movlb	0	; () banked
  1259  000696  51E2               	movf	ES_Run@HighestPrior& (0+255),w,b
  1260  000698  0D04               	mullw	4
  1261  00069A  0E02               	movlw	2
  1262  00069C  26F3               	addwf	prodl,f,c
  1263  00069E  0E00               	movlw	0
  1264  0006A0  22F4               	addwfc	prodh,f,c
  1265  0006A2  0E50               	movlw	low _ServDescList
  1266  0006A4  24F3               	addwf	prodl,w,c
  1267  0006A6  6EF6               	movwf	tblptrl,c
  1268  0006A8  0E03               	movlw	high _ServDescList
  1269  0006AA  20F4               	addwfc	prodh,w,c
  1270  0006AC  6EF7               	movwf	tblptrh,c
  1271  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  1272  0006AE                     	endif
  1273  0006AE  D801               	call	u1658
  1274  0006B0  D00C               	goto	u1659
  1275  0006B2                     u1658:
  1276  0006B2  0005               	push	
  1277  0006B4  6EFA               	movwf	pclath,c
  1278  0006B6  0009               	tblrd		*+
  1279  0006B8  50F5               	movf	tablat,w,c
  1280  0006BA  6EFD               	movwf	tosl,c
  1281  0006BC  0009               	tblrd		*+
  1282  0006BE  50F5               	movf	tablat,w,c
  1283  0006C0  6EFE               	movwf	tosh,c
  1284  0006C2  50F8               	movf	tblptru,w,c
  1285  0006C4  6EFF               	movwf	tosu,c
  1286  0006C6  50FA               	movf	pclath,w,c
  1287  0006C8  0012               	return		;indir
  1288  0006CA                     u1659:
  1289  0006CA  0ED5               	movlw	low ?_RunAnalogService
  1290  0006CC  6ED9               	movwf	fsr2l,c
  1291  0006CE  0E00               	movlw	high ?_RunAnalogService
  1292  0006D0  6EDA               	movwf	fsr2h,c
  1293  0006D2  50DF               	movf	indf2,w,c
  1294  0006D4  B4D8               	btfsc	status,2,c
  1295  0006D6  D002               	goto	l2788
  1296                           
  1297                           ;ES_Framework.c: 293: return FailedRun;
  1298  0006D8  0E02               	movlw	2
  1299  0006DA  0012               	return	
  1300  0006DC                     l2788:
  1301  0006DC  EC6D  F00A         	call	__HW_Process_Pending_Ints	;wreg free
  1302  0006E0  0900               	iorlw	0
  1303  0006E2  B4D8               	btfsc	status,2,c
  1304  0006E4  D006               	goto	l2792
  1305  0006E6  0100               	movlb	0	; () banked
  1306  0006E8  5185               	movf	_Ready& (0+255),w,b
  1307  0006EA  0100               	movlb	0	; () banked
  1308  0006EC  1186               	iorwf	(_Ready+1)& (0+255),w,b
  1309  0006EE  A4D8               	btfss	status,2,c
  1310  0006F0  D78A               	goto	l2776
  1311  0006F2                     l2792:
  1312                           
  1313                           ;ES_Framework.c: 294: }
  1314                           ;ES_Framework.c: 295: }
  1315                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1316  0006F2  EC11  F009         	call	_ES_CheckUserEvents	;wreg free
  1317  0006F6  D7F2               	goto	l2788
  1318  0006F8                     __end_of_ES_Run:
  1319                           	opt stack 0
  1320                           tosu	equ	0xFFF
  1321                           tosh	equ	0xFFE
  1322                           tosl	equ	0xFFD
  1323                           pclath	equ	0xFFA
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           prodh	equ	0xFF4
  1329                           prodl	equ	0xFF3
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           indf2	equ	0xFDF
  1333                           fsr2h	equ	0xFDA
  1334                           fsr2l	equ	0xFD9
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function __HW_Process_Pending_Ints *****************
  1338 ;; Defined at:
  1339 ;;		line 225 in file "ES_Port.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      unsigned char 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1353 ;;      Params:         0       0       0       0
  1354 ;;      Locals:         0       0       0       0
  1355 ;;      Temps:          0       0       0       0
  1356 ;;      Totals:         0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:   11
  1360 ;; This function calls:
  1361 ;;		_ES_Timer_Tick_Resp
  1362 ;; This function is called by:
  1363 ;;		_ES_Run
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text4
  1368  0014DA                     __ptext4:
  1369                           	opt stack 0
  1370  0014DA                     __HW_Process_Pending_Ints:
  1371                           	opt stack 18
  1372                           
  1373                           ;ES_Port.c: 227: while (TickCount > 0)
  1374                           
  1375                           ;incstack = 0
  1376  0014DA  D004               	goto	l2620
  1377  0014DC                     l2616:
  1378                           
  1379                           ;ES_Port.c: 228: {
  1380                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1381  0014DC  EC77  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1382                           
  1383                           ;ES_Port.c: 231: TickCount--;
  1384  0014E0  0100               	movlb	0	; () banked
  1385  0014E2  0790               	decf	_TickCount& (0+255),f,b	;volatile
  1386  0014E4                     l2620:
  1387  0014E4  0100               	movlb	0	; () banked
  1388  0014E6  5190               	movf	_TickCount& (0+255),w,b	;volatile
  1389  0014E8  A4D8               	btfss	status,2,c
  1390  0014EA  D7F8               	goto	l2616
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;ES_Port.c: 232: }
  1394                           ;ES_Port.c: 234: return 1;
  1395                           
  1396                           ; BSR set to: 0
  1397  0014EC  0E01               	movlw	1
  1398  0014EE  0012               	return	
  1399  0014F0                     __end_of__HW_Process_Pending_Ints:
  1400                           	opt stack 0
  1401                           tosu	equ	0xFFF
  1402                           tosh	equ	0xFFE
  1403                           tosl	equ	0xFFD
  1404                           pclath	equ	0xFFA
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           prodh	equ	0xFF4
  1410                           prodl	equ	0xFF3
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           indf2	equ	0xFDF
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _ES_Timer_Tick_Resp *****************
  1419 ;; Defined at:
  1420 ;;		line 284 in file "ES_Timers.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1434 ;;      Params:         0       0       0       0
  1435 ;;      Locals:         0       0       0       0
  1436 ;;      Temps:          0       4       0       0
  1437 ;;      Totals:         0       4       0       0
  1438 ;;Total ram usage:        4 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:   10
  1441 ;; This function calls:
  1442 ;;		Absolute function
  1443 ;;		_ES_GetMSBitSet
  1444 ;;		_PostAnalogService
  1445 ;;		_PostButtonDebounceSM
  1446 ;; This function is called by:
  1447 ;;		__HW_Process_Pending_Ints
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text5
  1452  0004EE                     __ptext5:
  1453                           	opt stack 0
  1454  0004EE                     _ES_Timer_Tick_Resp:
  1455                           	opt stack 18
  1456                           
  1457                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1458                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1459                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1460                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;incstack = 0
  1464  0004EE  0100               	movlb	0	; () banked
  1465  0004F0  5187               	movf	_TMR_ActiveFlags& (0+255),w,b
  1466  0004F2  0100               	movlb	0	; () banked
  1467  0004F4  1188               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1468  0004F6  B4D8               	btfsc	status,2,c
  1469  0004F8  0012               	return	
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;ES_Timers.c: 291: {
  1473                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1474  0004FA  C087  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1475  0004FE  C088  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1476  000502                     l2380:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1480  000502  C083  F0B8         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1481  000506  C084  F0B9         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1482  00050A  ECE4  F005         	call	_ES_GetMSBitSet	;wreg free
  1483  00050E  0100               	movlb	0	; () banked
  1484  000510  6F8B               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1488  000512  0100               	movlb	0	; () banked
  1489  000514  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1490  000516  0D02               	mullw	2
  1491  000518  0E60               	movlw	low _TMR_TimerArray
  1492  00051A  24F3               	addwf	prodl,w,c
  1493  00051C  6ED9               	movwf	fsr2l,c
  1494  00051E  0E00               	movlw	high _TMR_TimerArray
  1495  000520  20F4               	addwfc	prodh,w,c
  1496  000522  6EDA               	movwf	fsr2h,c
  1497  000524  06DE               	decf	postinc2,f,c
  1498  000526  0E00               	movlw	0
  1499  000528  5ADD               	subwfb	postdec2,f,c
  1500  00052A  50DE               	movf	postinc2,w,c
  1501  00052C  10DE               	iorwf	postinc2,w,c
  1502  00052E  A4D8               	btfss	status,2,c
  1503  000530  D043               	goto	l2392
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;ES_Timers.c: 299: {
  1507                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1508  000532  0E03               	movlw	3
  1509  000534  0100               	movlb	0	; () banked
  1510  000536  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1514  000538  C08B  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1515  00053C  0100               	movlb	0	; () banked
  1516  00053E  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1520  000540  C080  F0D5         	movff	ES_Timer_Tick_Resp@NewEvent,PostAnalogService@ThisEvent
  1521  000544  C081  F0D6         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostAnalogService@ThisEvent+1
  1522  000548  C082  F0D7         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostAnalogService@ThisEvent+2
  1523  00054C  0100               	movlb	0	; () banked
  1524  00054E  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1525  000550  0D02               	mullw	2
  1526  000552  0E21               	movlw	low _Timer2PostFunc
  1527  000554  24F3               	addwf	prodl,w,c
  1528  000556  6EF6               	movwf	tblptrl,c
  1529  000558  0E03               	movlw	high _Timer2PostFunc
  1530  00055A  20F4               	addwfc	prodh,w,c
  1531  00055C  6EF7               	movwf	tblptrh,c
  1532  00055E                     	if	0	;There are less than 3 active tblptr bytes
  1533  00055E                     	endif
  1534  00055E  D801               	call	u1298
  1535  000560  D00C               	goto	l2390
  1536  000562                     u1298:
  1537  000562  0005               	push	
  1538  000564  6EFA               	movwf	pclath,c
  1539  000566  0009               	tblrd		*+
  1540  000568  50F5               	movf	tablat,w,c
  1541  00056A  6EFD               	movwf	tosl,c
  1542  00056C  0009               	tblrd		*+
  1543  00056E  50F5               	movf	tablat,w,c
  1544  000570  6EFE               	movwf	tosh,c
  1545  000572  50F8               	movf	tblptru,w,c
  1546  000574  6EFF               	movwf	tosu,c
  1547  000576  50FA               	movf	pclath,w,c
  1548  000578  0012               	return		;indir
  1549  00057A                     l2390:
  1550                           
  1551                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1552  00057A  0100               	movlb	0	; () banked
  1553  00057C  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1554  00057E  0D02               	mullw	2
  1555  000580  0E01               	movlw	low _BitNum2SetMask
  1556  000582  24F3               	addwf	prodl,w,c
  1557  000584  6EF6               	movwf	tblptrl,c
  1558  000586  0E03               	movlw	high _BitNum2SetMask
  1559  000588  20F4               	addwfc	prodh,w,c
  1560  00058A  6EF7               	movwf	tblptrh,c
  1561  00058C                     	if	0	;There are less than 3 active tblptr bytes
  1562  00058C                     	endif
  1563  00058C  0009               	tblrd		*+
  1564  00058E  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp
  1565  000592  0009               	tblrd		*+
  1566  000594  CFF5 F0D9          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1567  000598  0100               	movlb	0	; () banked
  1568  00059A  1DD8               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1569  00059C  0100               	movlb	0	; () banked
  1570  00059E  6FDA               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1571  0005A0  0100               	movlb	0	; () banked
  1572  0005A2  1DD9               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1573  0005A4  0100               	movlb	0	; () banked
  1574  0005A6  6FDB               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1575  0005A8  0100               	movlb	0	; () banked
  1576  0005AA  51DA               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1577  0005AC  0100               	movlb	0	; () banked
  1578  0005AE  1787               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1579  0005B0  0100               	movlb	0	; () banked
  1580  0005B2  51DB               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1581  0005B4  0100               	movlb	0	; () banked
  1582  0005B6  1788               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1583  0005B8                     l2392:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;ES_Timers.c: 306: }
  1587                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1588  0005B8  0100               	movlb	0	; () banked
  1589  0005BA  518B               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1590  0005BC  0D02               	mullw	2
  1591  0005BE  0E01               	movlw	low _BitNum2SetMask
  1592  0005C0  24F3               	addwf	prodl,w,c
  1593  0005C2  6EF6               	movwf	tblptrl,c
  1594  0005C4  0E03               	movlw	high _BitNum2SetMask
  1595  0005C6  20F4               	addwfc	prodh,w,c
  1596  0005C8  6EF7               	movwf	tblptrh,c
  1597  0005CA                     	if	0	;There are less than 3 active tblptr bytes
  1598  0005CA                     	endif
  1599  0005CA  0009               	tblrd		*+
  1600  0005CC  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp
  1601  0005D0  0009               	tblrd		*+
  1602  0005D2  CFF5 F0D9          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1603  0005D6  0100               	movlb	0	; () banked
  1604  0005D8  1DD8               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1605  0005DA  0100               	movlb	0	; () banked
  1606  0005DC  6FDA               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1607  0005DE  0100               	movlb	0	; () banked
  1608  0005E0  1DD9               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1609  0005E2  0100               	movlb	0	; () banked
  1610  0005E4  6FDB               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1611  0005E6  0100               	movlb	0	; () banked
  1612  0005E8  51DA               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1613  0005EA  0100               	movlb	0	; () banked
  1614  0005EC  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1615  0005EE  0100               	movlb	0	; () banked
  1616  0005F0  51DB               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1617  0005F2  0100               	movlb	0	; () banked
  1618  0005F4  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1622  0005F6  0100               	movlb	0	; () banked
  1623  0005F8  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1624  0005FA  0100               	movlb	0	; () banked
  1625  0005FC  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1626  0005FE  B4D8               	btfsc	status,2,c
  1627  000600  0012               	return	
  1628  000602  D77F               	goto	l2380
  1629  000604                     __end_of_ES_Timer_Tick_Resp:
  1630                           	opt stack 0
  1631                           tosu	equ	0xFFF
  1632                           tosh	equ	0xFFE
  1633                           tosl	equ	0xFFD
  1634                           pclath	equ	0xFFA
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           prodh	equ	0xFF4
  1640                           prodl	equ	0xFF3
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           indf2	equ	0xFDF
  1644                           postinc2	equ	0xFDE
  1645                           postdec2	equ	0xFDD
  1646                           fsr2h	equ	0xFDA
  1647                           fsr2l	equ	0xFD9
  1648                           status	equ	0xFD8
  1649                           
  1650 ;; *************** function _PostButtonDebounceSM *****************
  1651 ;; Defined at:
  1652 ;;		line 75 in file "Button.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      unsigned char 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1666 ;;      Params:         0       3       0       0
  1667 ;;      Locals:         0       0       0       0
  1668 ;;      Temps:          0       0       0       0
  1669 ;;      Totals:         0       3       0       0
  1670 ;;Total ram usage:        3 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    9
  1673 ;; This function calls:
  1674 ;;		_ES_PostToService
  1675 ;; This function is called by:
  1676 ;;		_CheckButtonEvents
  1677 ;;		_ES_Timer_Tick_Resp
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text6
  1682  0014F0                     __ptext6:
  1683                           	opt stack 0
  1684  0014F0                     _PostButtonDebounceSM:
  1685                           	opt stack 18
  1686                           
  1687                           ;Button.c: 78: return ES_PostToService(MyPriority, ThisEvent);
  1688                           ;	Return value of _PostButtonDebounceSM is never used
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;incstack = 0
  1692  0014F0  C0D5  F0CF         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  1693  0014F4  C0D6  F0D0         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  1694  0014F8  C0D7  F0D1         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  1695  0014FC  0100               	movlb	0	; () banked
  1696  0014FE  518F               	movf	_MyPriority& (0+255),w,b
  1697  001500  ECD5  F007         	call	_ES_PostToService
  1698  001504  0012               	return	
  1699  001506                     __end_of_PostButtonDebounceSM:
  1700                           	opt stack 0
  1701                           tosu	equ	0xFFF
  1702                           tosh	equ	0xFFE
  1703                           tosl	equ	0xFFD
  1704                           pclath	equ	0xFFA
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           indf2	equ	0xFDF
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _PostAnalogService *****************
  1721 ;; Defined at:
  1722 ;;		line 47 in file "Analog_Service.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;		None
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      unsigned char 
  1729 ;; Registers used:
  1730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1736 ;;      Params:         0       3       0       0
  1737 ;;      Locals:         0       0       0       0
  1738 ;;      Temps:          0       0       0       0
  1739 ;;      Totals:         0       3       0       0
  1740 ;;Total ram usage:        3 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    9
  1743 ;; This function calls:
  1744 ;;		_ES_PostToService
  1745 ;; This function is called by:
  1746 ;;		_ES_Timer_Tick_Resp
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text7
  1751  001506                     __ptext7:
  1752                           	opt stack 0
  1753  001506                     _PostAnalogService:
  1754                           	opt stack 18
  1755                           
  1756                           ;Analog_Service.c: 49: return ES_PostToService( MyPriority, ThisEvent);
  1757                           ;	Return value of _PostAnalogService is never used
  1758                           
  1759                           ;incstack = 0
  1760  001506  C0D5  F0CF         	movff	PostAnalogService@ThisEvent,ES_PostToService@TheEvent
  1761  00150A  C0D6  F0D0         	movff	PostAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  1762  00150E  C0D7  F0D1         	movff	PostAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  1763  001512  0100               	movlb	0	; () banked
  1764  001514  5189               	movf	Analog_Service@MyPriority& (0+255),w,b
  1765  001516  ECD5  F007         	call	_ES_PostToService
  1766  00151A  0012               	return	
  1767  00151C                     __end_of_PostAnalogService:
  1768                           	opt stack 0
  1769                           tosu	equ	0xFFF
  1770                           tosh	equ	0xFFE
  1771                           tosl	equ	0xFFD
  1772                           pclath	equ	0xFFA
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _ES_GetMSBitSet *****************
  1789 ;; Defined at:
  1790 ;;		line 79 in file "ES_LookupTables.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  LoopCntr        1    9[BANK0 ] char 
  1795 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1796 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      unsigned char 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1806 ;;      Params:         0       2       0       0
  1807 ;;      Locals:         0       3       0       0
  1808 ;;      Temps:          0       5       0       0
  1809 ;;      Totals:         0      10       0       0
  1810 ;;Total ram usage:       10 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    6
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_ES_Run
  1817 ;;		_ES_Timer_Tick_Resp
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text8
  1822  000BC8                     __ptext8:
  1823                           	opt stack 0
  1824  000BC8                     _ES_GetMSBitSet:
  1825                           	opt stack 21
  1826                           
  1827                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1828                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1829                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1830                           
  1831                           ;incstack = 0
  1832  000BC8  0E80               	movlw	128
  1833  000BCA  0100               	movlb	0	; () banked
  1834  000BCC  6FBF               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1835                           
  1836                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1837  000BCE  0E03               	movlw	3
  1838  000BD0  0100               	movlb	0	; () banked
  1839  000BD2  6FC1               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1840  000BD4                     l2254:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1844  000BD4  0100               	movlb	0	; () banked
  1845  000BD6  BFC1               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1846  000BD8  D046               	goto	l2268
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1850                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1851                           ;ES_LookupTables.c: 91: 0x0F);
  1852                           
  1853                           ; BSR set to: 0
  1854                           
  1855                           ; BSR set to: 0
  1856  000BDA  0100               	movlb	0	; () banked
  1857  000BDC  51C1               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1858  000BDE  0D04               	mullw	4
  1859  000BE0  CFF3 F0BA          	movff	prodl,??_ES_GetMSBitSet
  1860  000BE4  C0B8  F0BB         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1861  000BE8  C0B9  F0BC         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1862  000BEC  0100               	movlb	0	; () banked
  1863  000BEE  2BBA               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1864  000BF0  D004               	goto	u1154
  1865  000BF2                     u1155:
  1866  000BF2  0100               	movlb	0	; () banked
  1867  000BF4  90D8               	bcf	status,0,c
  1868  000BF6  33BC               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1869  000BF8  33BB               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1870  000BFA                     u1154:
  1871  000BFA  0100               	movlb	0	; () banked
  1872  000BFC  2FBA               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1873  000BFE  D7F9               	goto	u1155
  1874  000C00  0100               	movlb	0	; () banked
  1875  000C02  51BB               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1876  000C04  0B0F               	andlw	15
  1877  000C06  0100               	movlb	0	; () banked
  1878  000C08  6FC0               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1882  000C0A  0100               	movlb	0	; () banked
  1883  000C0C  51C0               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1884  000C0E  0100               	movlb	0	; () banked
  1885  000C10  B4D8               	btfsc	status,2,c
  1886  000C12  D026               	goto	l2264
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1890                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1891  000C14  0EFF               	movlw	255
  1892  000C16  0100               	movlb	0	; () banked
  1893  000C18  6FBA               	movwf	??_ES_GetMSBitSet& (0+255),b
  1894  000C1A  0EFF               	movlw	255
  1895  000C1C  0100               	movlb	0	; () banked
  1896  000C1E  6FBB               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1897  000C20  0100               	movlb	0	; () banked
  1898  000C22  51C0               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1899  000C24  0100               	movlb	0	; () banked
  1900  000C26  6FBC               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1901  000C28  6BBD               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1902  000C2A  0100               	movlb	0	; () banked
  1903  000C2C  51BA               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1904  000C2E  0100               	movlb	0	; () banked
  1905  000C30  27BC               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1906  000C32  0100               	movlb	0	; () banked
  1907  000C34  51BB               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1908  000C36  0100               	movlb	0	; () banked
  1909  000C38  23BD               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1910  000C3A  0E41               	movlw	low _Nybble2MSBitNum
  1911  000C3C  0100               	movlb	0	; () banked
  1912  000C3E  25BC               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1913  000C40  6EF6               	movwf	tblptrl,c
  1914  000C42  0E03               	movlw	high _Nybble2MSBitNum
  1915  000C44  21BD               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1916  000C46  6EF7               	movwf	tblptrh,c
  1917  000C48                     	if	0	;There are less than 3 active tblptr bytes
  1918  000C48                     	endif
  1919  000C48  0008               	tblrd		*
  1920  000C4A  CFF5 F0BE          	movff	tablat,??_ES_GetMSBitSet+4
  1921  000C4E  0100               	movlb	0	; () banked
  1922  000C50  51C1               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1923  000C52  0D04               	mullw	4
  1924  000C54  50F3               	movf	prodl,w,c
  1925  000C56  0100               	movlb	0	; () banked
  1926  000C58  25BE               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1927  000C5A  0100               	movlb	0	; () banked
  1928  000C5C  6FBF               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1929                           
  1930                           ;ES_LookupTables.c: 96: break;
  1931  000C5E  D003               	goto	l2268
  1932  000C60                     l2264:
  1933                           
  1934                           ; BSR set to: 0
  1935  000C60  0100               	movlb	0	; () banked
  1936  000C62  07C1               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1937  000C64  D7B7               	goto	l2254
  1938  000C66                     l2268:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;ES_LookupTables.c: 97: }
  1942                           ;ES_LookupTables.c: 98: }
  1943                           ;ES_LookupTables.c: 99: return ReturnVal;
  1944  000C66  0100               	movlb	0	; () banked
  1945  000C68  51BF               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1946  000C6A  0012               	return	
  1947  000C6C                     __end_of_ES_GetMSBitSet:
  1948                           	opt stack 0
  1949                           tosu	equ	0xFFF
  1950                           tosh	equ	0xFFE
  1951                           tosl	equ	0xFFD
  1952                           pclath	equ	0xFFA
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           prodh	equ	0xFF4
  1958                           prodl	equ	0xFF3
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           indf2	equ	0xFDF
  1962                           postinc2	equ	0xFDE
  1963                           postdec2	equ	0xFDD
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           
  1968 ;; *************** function _RunAnalogService *****************
  1969 ;; Defined at:
  1970 ;;		line 52 in file "Analog_Service.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  3   29[BANK0 ] struct ES_Event_t
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1984 ;;      Params:         0       3       0       0
  1985 ;;      Locals:         0       3       0       0
  1986 ;;      Temps:          0       0       0       0
  1987 ;;      Totals:         0       6       0       0
  1988 ;;Total ram usage:        6 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    7
  1991 ;; This function calls:
  1992 ;;		_ES_Timer_InitTimer
  1993 ;;		_InitAnalogHW
  1994 ;; This function is called by:
  1995 ;;		_ES_Run
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text9
  2000  0011D2                     __ptext9:
  2001                           	opt stack 0
  2002  0011D2                     _RunAnalogService:
  2003                           	opt stack 22
  2004                           
  2005                           ;Analog_Service.c: 54: ES_Event ReturnEvent;
  2006                           ;Analog_Service.c: 55: if(ThisEvent.EventType == ES_INIT) {
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;incstack = 0
  2010  0011D2  0E02               	movlw	2
  2011  0011D4  0100               	movlb	0	; () banked
  2012  0011D6  19D5               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2013  0011D8  A4D8               	btfss	status,2,c
  2014  0011DA  D00E               	goto	l2720
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;Analog_Service.c: 56: InitAnalogHW();
  2018  0011DC  EC16  F00A         	call	_InitAnalogHW	;wreg free
  2019                           
  2020                           ;Analog_Service.c: 57: ADCON0bits.CHS = 0x00;
  2021  0011E0  94C2               	bcf	4034,2,c	;volatile
  2022  0011E2  96C2               	bcf	4034,3,c	;volatile
  2023  0011E4  98C2               	bcf	4034,4,c	;volatile
  2024  0011E6  9AC2               	bcf	4034,5,c	;volatile
  2025                           
  2026                           ;Analog_Service.c: 58: ES_Timer_InitTimer(0, 5);
  2027  0011E8  0E00               	movlw	0
  2028  0011EA  0100               	movlb	0	; () banked
  2029  0011EC  6FB9               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2030  0011EE  0E05               	movlw	5
  2031  0011F0  6FB8               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2032  0011F2  0E00               	movlw	0
  2033  0011F4  EC1B  F007         	call	_ES_Timer_InitTimer
  2034  0011F8                     l2720:
  2035                           
  2036                           ;Analog_Service.c: 59: }
  2037                           ;Analog_Service.c: 60: if(ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 0
      +                          ) {
  2038  0011F8  0E03               	movlw	3
  2039  0011FA  0100               	movlb	0	; () banked
  2040  0011FC  19D5               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2041  0011FE  A4D8               	btfss	status,2,c
  2042  001200  D006               	goto	l2726
  2043                           
  2044                           ; BSR set to: 0
  2045  001202  0100               	movlb	0	; () banked
  2046  001204  51D6               	movf	(RunAnalogService@ThisEvent+1)& (0+255),w,b
  2047  001206  0100               	movlb	0	; () banked
  2048  001208  11D7               	iorwf	(RunAnalogService@ThisEvent+2)& (0+255),w,b
  2049  00120A  B4D8               	btfsc	status,2,c
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;Analog_Service.c: 61: ADCON0bits.GO = 1;
  2053  00120C  82C2               	bsf	4034,1,c	;volatile
  2054  00120E                     l2726:
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;Analog_Service.c: 62: }
  2058                           ;Analog_Service.c: 63: ReturnEvent.EventType = ES_NO_EVENT;
  2059  00120E  0E00               	movlw	0
  2060  001210  0100               	movlb	0	; () banked
  2061  001212  6FD8               	movwf	RunAnalogService@ReturnEvent& (0+255),b
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;Analog_Service.c: 64: return ReturnEvent;
  2065  001214  C0D8  F0D5         	movff	RunAnalogService@ReturnEvent,?_RunAnalogService
  2066  001218  C0D9  F0D6         	movff	RunAnalogService@ReturnEvent+1,?_RunAnalogService+1
  2067  00121C  C0DA  F0D7         	movff	RunAnalogService@ReturnEvent+2,?_RunAnalogService+2
  2068  001220  0012               	return	
  2069  001222                     __end_of_RunAnalogService:
  2070                           	opt stack 0
  2071                           tosu	equ	0xFFF
  2072                           tosh	equ	0xFFE
  2073                           tosl	equ	0xFFD
  2074                           pclath	equ	0xFFA
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           indf2	equ	0xFDF
  2084                           postinc2	equ	0xFDE
  2085                           postdec2	equ	0xFDD
  2086                           fsr2h	equ	0xFDA
  2087                           fsr2l	equ	0xFD9
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _RunButtonDebounceSM *****************
  2091 ;; Defined at:
  2092 ;;		line 83 in file "Button.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  3   29[BANK0 ] struct ES_Event_t
  2099 ;; Registers used:
  2100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2106 ;;      Params:         0       3       0       0
  2107 ;;      Locals:         0       3       0       0
  2108 ;;      Temps:          0       0       0       0
  2109 ;;      Totals:         0       6       0       0
  2110 ;;Total ram usage:        6 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    9
  2113 ;; This function calls:
  2114 ;;		_ES_PostAll
  2115 ;;		_ES_Timer_InitTimer
  2116 ;; This function is called by:
  2117 ;;		_ES_Run
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text10
  2122  000B22                     __ptext10:
  2123                           	opt stack 0
  2124  000B22                     _RunButtonDebounceSM:
  2125                           	opt stack 20
  2126                           
  2127                           ;Button.c: 87: switch (CurrentState) {
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;incstack = 0
  2131  000B22  D040               	goto	l2548
  2132  000B24                     l2524:
  2133                           
  2134                           ;Button.c: 92: if (ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 1) {
  2135  000B24  0E03               	movlw	3
  2136  000B26  0100               	movlb	0	; () banked
  2137  000B28  19D5               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2138  000B2A  A4D8               	btfss	status,2,c
  2139  000B2C  D043               	goto	l2550
  2140                           
  2141                           ; BSR set to: 0
  2142  000B2E  0100               	movlb	0	; () banked
  2143  000B30  05D6               	decf	(RunButtonDebounceSM@ThisEvent+1)& (0+255),w,b
  2144  000B32  0100               	movlb	0	; () banked
  2145  000B34  11D7               	iorwf	(RunButtonDebounceSM@ThisEvent+2)& (0+255),w,b
  2146  000B36  A4D8               	btfss	status,2,c
  2147  000B38  D03D               	goto	l2550
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;Button.c: 94: CurrentState = Ready2Sample;
  2151  000B3A  0E01               	movlw	1
  2152  000B3C  0100               	movlb	0	; () banked
  2153  000B3E  6F8C               	movwf	_CurrentState& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;Button.c: 95: }
  2157                           ;Button.c: 96: break;
  2158  000B40  D039               	goto	l2550
  2159  000B42                     l2530:
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;Button.c: 101: if (ThisEvent.EventType == DBButtonUp) {
  2163  000B42  0E06               	movlw	6
  2164  000B44  0100               	movlb	0	; () banked
  2165  000B46  19D5               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2166  000B48  A4D8               	btfss	status,2,c
  2167  000B4A  D013               	goto	l2538
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;Button.c: 103: ES_Timer_InitTimer(1, 3);
  2171  000B4C  0E00               	movlw	0
  2172  000B4E  0100               	movlb	0	; () banked
  2173  000B50  6FB9               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2174  000B52  0E03               	movlw	3
  2175  000B54  6FB8               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2176  000B56  0E01               	movlw	1
  2177  000B58  EC1B  F007         	call	_ES_Timer_InitTimer
  2178                           
  2179                           ;Button.c: 105: CurrentState = Debouncing;
  2180  000B5C  0E00               	movlw	0
  2181  000B5E  0100               	movlb	0	; () banked
  2182  000B60  6F8C               	movwf	_CurrentState& (0+255),b
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;Button.c: 107: ES_PostAll(ThisEvent);
  2186  000B62  C0D5  F0CF         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2187  000B66  C0D6  F0D0         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2188  000B6A  C0D7  F0D1         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2189  000B6E  EC99  F007         	call	_ES_PostAll	;wreg free
  2190  000B72                     l2538:
  2191                           
  2192                           ;Button.c: 108: }
  2193                           ;Button.c: 110: if (ThisEvent.EventType == DBButtonDown) {
  2194  000B72  0E05               	movlw	5
  2195  000B74  0100               	movlb	0	; () banked
  2196  000B76  19D5               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2197  000B78  A4D8               	btfss	status,2,c
  2198  000B7A  D01C               	goto	l2550
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;Button.c: 114: ES_Timer_InitTimer(1, 3);
  2202  000B7C  0E00               	movlw	0
  2203  000B7E  0100               	movlb	0	; () banked
  2204  000B80  6FB9               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2205  000B82  0E03               	movlw	3
  2206  000B84  6FB8               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2207  000B86  0E01               	movlw	1
  2208  000B88  EC1B  F007         	call	_ES_Timer_InitTimer
  2209                           
  2210                           ;Button.c: 116: CurrentState = Debouncing;
  2211  000B8C  0E00               	movlw	0
  2212  000B8E  0100               	movlb	0	; () banked
  2213  000B90  6F8C               	movwf	_CurrentState& (0+255),b
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;Button.c: 117: ES_PostAll(ThisEvent);
  2217  000B92  C0D5  F0CF         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2218  000B96  C0D6  F0D0         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2219  000B9A  C0D7  F0D1         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2220  000B9E  EC99  F007         	call	_ES_PostAll	;wreg free
  2221                           
  2222                           ;Button.c: 120: }
  2223                           
  2224                           ;Button.c: 118: }
  2225                           ;Button.c: 119: break;
  2226  000BA2  D008               	goto	l2550
  2227  000BA4                     l2548:
  2228  000BA4  0100               	movlb	0	; () banked
  2229  000BA6  518C               	movf	_CurrentState& (0+255),w,b
  2230                           
  2231                           ; Switch size 1, requested type "space"
  2232                           ; Number of cases is 2, Range of values is 0 to 1
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte            7     4 (average)
  2236                           ;	Chosen strategy is simple_byte
  2237  000BA8  0A00               	xorlw	0	; case 0
  2238  000BAA  B4D8               	btfsc	status,2,c
  2239  000BAC  D7BB               	goto	l2524
  2240  000BAE  0A01               	xorlw	1	; case 1
  2241  000BB0  B4D8               	btfsc	status,2,c
  2242  000BB2  D7C7               	goto	l2530
  2243  000BB4                     l2550:
  2244                           
  2245                           ;Button.c: 122: ES_Event ReturnEvent;
  2246                           ;Button.c: 123: ReturnEvent.EventType = ES_NO_EVENT;
  2247  000BB4  0E00               	movlw	0
  2248  000BB6  0100               	movlb	0	; () banked
  2249  000BB8  6FD8               	movwf	RunButtonDebounceSM@ReturnEvent& (0+255),b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;Button.c: 124: return ReturnEvent;
  2253  000BBA  C0D8  F0D5         	movff	RunButtonDebounceSM@ReturnEvent,?_RunButtonDebounceSM
  2254  000BBE  C0D9  F0D6         	movff	RunButtonDebounceSM@ReturnEvent+1,?_RunButtonDebounceSM+1
  2255  000BC2  C0DA  F0D7         	movff	RunButtonDebounceSM@ReturnEvent+2,?_RunButtonDebounceSM+2
  2256  000BC6  0012               	return	
  2257  000BC8                     __end_of_RunButtonDebounceSM:
  2258                           	opt stack 0
  2259                           tosu	equ	0xFFF
  2260                           tosh	equ	0xFFE
  2261                           tosl	equ	0xFFD
  2262                           pclath	equ	0xFFA
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           indf2	equ	0xFDF
  2272                           postinc2	equ	0xFDE
  2273                           postdec2	equ	0xFDD
  2274                           fsr2h	equ	0xFDA
  2275                           fsr2l	equ	0xFD9
  2276                           status	equ	0xFD8
  2277                           
  2278 ;; *************** function _RunCan_XmitService *****************
  2279 ;; Defined at:
  2280 ;;		line 137 in file "Can_XmitService.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  ReturnEvent     3   34[BANK0 ] struct ES_Event_t
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  3   29[BANK0 ] struct ES_Event_t
  2287 ;; Registers used:
  2288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2294 ;;      Params:         0       3       0       0
  2295 ;;      Locals:         0       3       0       0
  2296 ;;      Temps:          0       2       0       0
  2297 ;;      Totals:         0       8       0       0
  2298 ;;Total ram usage:        8 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    8
  2301 ;; This function calls:
  2302 ;;		_InitCanHardware
  2303 ;;		_InitPins
  2304 ;;		_XmitData
  2305 ;; This function is called by:
  2306 ;;		_ES_Run
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text11
  2311  0008C6                     __ptext11:
  2312                           	opt stack 0
  2313  0008C6                     _RunCan_XmitService:
  2314                           	opt stack 21
  2315                           
  2316                           ;Can_XmitService.c: 139: ES_Event ReturnEvent;
  2317                           ;Can_XmitService.c: 141: if (ThisEvent.EventType == ES_INIT) {
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;incstack = 0
  2321  0008C6  0E02               	movlw	2
  2322  0008C8  0100               	movlb	0	; () banked
  2323  0008CA  19D5               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2324  0008CC  A4D8               	btfss	status,2,c
  2325  0008CE  D009               	goto	l2656
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;Can_XmitService.c: 142: InitPins();
  2329  0008D0  EC60  F00A         	call	_InitPins	;wreg free
  2330                           
  2331                           ;Can_XmitService.c: 143: InitCanHardware();
  2332  0008D4  EC5B  F007         	call	_InitCanHardware	;wreg free
  2333                           
  2334                           ;Can_XmitService.c: 144: LATA2 = 1;
  2335  0008D8  8489               	bsf	3977,2,c	;volatile
  2336                           
  2337                           ;Can_XmitService.c: 145: LastData = 0x00;
  2338  0008DA  0E00               	movlw	0
  2339  0008DC  0100               	movlb	0	; () banked
  2340  0008DE  6F8E               	movwf	_LastData& (0+255),b
  2341                           
  2342                           ;Can_XmitService.c: 146: } else if (ThisEvent.EventType == DBButtonDown) {
  2343  0008E0  D055               	goto	l2684
  2344  0008E2                     l2656:
  2345                           
  2346                           ; BSR set to: 0
  2347  0008E2  0E05               	movlw	5
  2348  0008E4  0100               	movlb	0	; () banked
  2349  0008E6  19D5               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2350  0008E8  B4D8               	btfsc	status,2,c
  2351  0008EA  D02D               	goto	l2678
  2352  0008EC  D046               	goto	l2680
  2353  0008EE                     l491:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;Can_XmitService.c: 149: LATA2 = 1;
  2357  0008EE  8489               	bsf	3977,2,c	;volatile
  2358                           
  2359                           ;Can_XmitService.c: 150: LATA3 = 0;
  2360  0008F0  9689               	bcf	3977,3,c	;volatile
  2361                           
  2362                           ;Can_XmitService.c: 151: LATA4 = 0;
  2363  0008F2  9889               	bcf	3977,4,c	;volatile
  2364                           
  2365                           ;Can_XmitService.c: 152: LATA5 = 0;
  2366  0008F4  9A89               	bcf	3977,5,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;Can_XmitService.c: 153: LastData = 0x00;
  2370  0008F6  0E00               	movlw	0
  2371  0008F8  0100               	movlb	0	; () banked
  2372  0008FA  6F8E               	movwf	_LastData& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;Can_XmitService.c: 154: XmitData(0x00);
  2376  0008FC  0E00               	movlw	0
  2377  0008FE  EC36  F009         	call	_XmitData
  2378                           
  2379                           ;Can_XmitService.c: 155: break;
  2380  000902  D044               	goto	l2684
  2381  000904                     l493:
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;Can_XmitService.c: 157: LATA2 = 0;
  2385  000904  9489               	bcf	3977,2,c	;volatile
  2386                           
  2387                           ;Can_XmitService.c: 158: LATA3 = 1;
  2388  000906  8689               	bsf	3977,3,c	;volatile
  2389                           
  2390                           ;Can_XmitService.c: 159: LATA4 = 0;
  2391  000908  9889               	bcf	3977,4,c	;volatile
  2392                           
  2393                           ;Can_XmitService.c: 160: LATA5 = 0;
  2394  00090A  9A89               	bcf	3977,5,c	;volatile
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;Can_XmitService.c: 161: LastData = 0x01;
  2398  00090C  0E01               	movlw	1
  2399  00090E  0100               	movlb	0	; () banked
  2400  000910  6F8E               	movwf	_LastData& (0+255),b
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;Can_XmitService.c: 162: XmitData(0x01);
  2404  000912  0E01               	movlw	1
  2405  000914  EC36  F009         	call	_XmitData
  2406                           
  2407                           ;Can_XmitService.c: 163: break;
  2408  000918  D039               	goto	l2684
  2409  00091A                     l494:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;Can_XmitService.c: 165: LATA2 = 0;
  2413  00091A  9489               	bcf	3977,2,c	;volatile
  2414                           
  2415                           ;Can_XmitService.c: 166: LATA3 = 0;
  2416  00091C  9689               	bcf	3977,3,c	;volatile
  2417                           
  2418                           ;Can_XmitService.c: 167: LATA4 = 1;
  2419  00091E  8889               	bsf	3977,4,c	;volatile
  2420                           
  2421                           ;Can_XmitService.c: 168: LATA5 = 0;
  2422  000920  9A89               	bcf	3977,5,c	;volatile
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;Can_XmitService.c: 169: LastData = 0x02;
  2426  000922  0E02               	movlw	2
  2427  000924  0100               	movlb	0	; () banked
  2428  000926  6F8E               	movwf	_LastData& (0+255),b
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;Can_XmitService.c: 170: XmitData(0x02);
  2432  000928  0E02               	movlw	2
  2433  00092A  EC36  F009         	call	_XmitData
  2434                           
  2435                           ;Can_XmitService.c: 171: break;
  2436  00092E  D02E               	goto	l2684
  2437  000930                     l495:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;Can_XmitService.c: 173: LATA2 = 0;
  2441  000930  9489               	bcf	3977,2,c	;volatile
  2442                           
  2443                           ;Can_XmitService.c: 174: LATA3 = 0;
  2444  000932  9689               	bcf	3977,3,c	;volatile
  2445                           
  2446                           ;Can_XmitService.c: 175: LATA4 = 0;
  2447  000934  9889               	bcf	3977,4,c	;volatile
  2448                           
  2449                           ;Can_XmitService.c: 176: LATA5 = 1;
  2450  000936  8A89               	bsf	3977,5,c	;volatile
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;Can_XmitService.c: 177: LastData = 0x03;
  2454  000938  0E03               	movlw	3
  2455  00093A  0100               	movlb	0	; () banked
  2456  00093C  6F8E               	movwf	_LastData& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;Can_XmitService.c: 178: XmitData(0x03);
  2460  00093E  0E03               	movlw	3
  2461  000940  EC36  F009         	call	_XmitData
  2462                           
  2463                           ;Can_XmitService.c: 180: }
  2464                           
  2465                           ;Can_XmitService.c: 179: break;
  2466  000944  D023               	goto	l2684
  2467  000946                     l2678:
  2468  000946  EE20  F0D6         	lfsr	2,RunCan_XmitService@ThisEvent+1
  2469  00094A  CFDE F0D8          	movff	postinc2,??_RunCan_XmitService
  2470  00094E  CFDD F0D9          	movff	postdec2,??_RunCan_XmitService+1
  2471                           
  2472                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2473                           ; Switch size 1, requested type "space"
  2474                           ; Number of cases is 1, Range of values is 0 to 0
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; simple_byte            4     3 (average)
  2478                           ;	Chosen strategy is simple_byte
  2479  000952  0100               	movlb	0	; () banked
  2480  000954  51D9               	movf	(??_RunCan_XmitService+1)& (0+255),w,b
  2481  000956  0A00               	xorlw	0	; case 0
  2482  000958  A4D8               	btfss	status,2,c
  2483  00095A  D018               	goto	l2684
  2484                           
  2485                           ; BSR set to: 0
  2486                           ; Switch size 1, requested type "space"
  2487                           ; Number of cases is 4, Range of values is 7 to 14
  2488                           ; switch strategies available:
  2489                           ; Name         Instructions Cycles
  2490                           ; simple_byte           13     7 (average)
  2491                           ;	Chosen strategy is simple_byte
  2492  00095C  0100               	movlb	0	; () banked
  2493  00095E  51D8               	movf	??_RunCan_XmitService& (0+255),w,b
  2494  000960  0A07               	xorlw	7	; case 7
  2495  000962  B4D8               	btfsc	status,2,c
  2496  000964  D7E5               	goto	l495
  2497  000966  0A0C               	xorlw	12	; case 11
  2498  000968  B4D8               	btfsc	status,2,c
  2499  00096A  D7D7               	goto	l494
  2500  00096C  0A06               	xorlw	6	; case 13
  2501  00096E  B4D8               	btfsc	status,2,c
  2502  000970  D7C9               	goto	l493
  2503  000972  0A03               	xorlw	3	; case 14
  2504  000974  B4D8               	btfsc	status,2,c
  2505  000976  D7BB               	goto	l491
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;Can_XmitService.c: 181: } else if (ThisEvent.EventType == XMIT_EVENT) {
  2509  000978  D009               	goto	l2684
  2510  00097A                     l2680:
  2511                           
  2512                           ; BSR set to: 0
  2513  00097A  0E07               	movlw	7
  2514  00097C  0100               	movlb	0	; () banked
  2515  00097E  19D5               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2516  000980  A4D8               	btfss	status,2,c
  2517  000982  D004               	goto	l2684
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;Can_XmitService.c: 182: XmitData(LastData);
  2521  000984  0100               	movlb	0	; () banked
  2522  000986  518E               	movf	_LastData& (0+255),w,b
  2523  000988  EC36  F009         	call	_XmitData
  2524  00098C                     l2684:
  2525                           
  2526                           ;Can_XmitService.c: 183: }
  2527                           ;Can_XmitService.c: 184: ReturnEvent.EventType = ES_NO_EVENT;
  2528  00098C  0E00               	movlw	0
  2529  00098E  0100               	movlb	0	; () banked
  2530  000990  6FDA               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;Can_XmitService.c: 185: return ReturnEvent;
  2534  000992  C0DA  F0D5         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2535  000996  C0DB  F0D6         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2536  00099A  C0DC  F0D7         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2537  00099E  0012               	return	
  2538  0009A0                     __end_of_RunCan_XmitService:
  2539                           	opt stack 0
  2540                           tosu	equ	0xFFF
  2541                           tosh	equ	0xFFE
  2542                           tosl	equ	0xFFD
  2543                           pclath	equ	0xFFA
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           prodh	equ	0xFF4
  2549                           prodl	equ	0xFF3
  2550                           postinc0	equ	0xFEE
  2551                           wreg	equ	0xFE8
  2552                           indf2	equ	0xFDF
  2553                           postinc2	equ	0xFDE
  2554                           postdec2	equ	0xFDD
  2555                           fsr2h	equ	0xFDA
  2556                           fsr2l	equ	0xFD9
  2557                           status	equ	0xFD8
  2558                           
  2559 ;; *************** function _XmitData *****************
  2560 ;; Defined at:
  2561 ;;		line 289 in file "Can_XmitService.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  DataByte        1    wreg     unsigned char 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  DataByte        1    0[BANK0 ] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, status,2, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2575 ;;      Params:         0       0       0       0
  2576 ;;      Locals:         0       1       0       0
  2577 ;;      Temps:          0       0       0       0
  2578 ;;      Totals:         0       1       0       0
  2579 ;;Total ram usage:        1 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    7
  2582 ;; This function calls:
  2583 ;;		_GetBrightness
  2584 ;;		_GetLocation
  2585 ;; This function is called by:
  2586 ;;		_RunCan_XmitService
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text12
  2591  00126C                     __ptext12:
  2592                           	opt stack 0
  2593  00126C                     _XmitData:
  2594                           	opt stack 21
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;incstack = 0
  2598                           ;XmitData@DataByte stored from wreg
  2599  00126C  0100               	movlb	0	; () banked
  2600  00126E  6FB8               	movwf	XmitData@DataByte& (0+255),b
  2601                           
  2602                           ;Can_XmitService.c: 290: TXB0CONbits.TXREQ = 0;
  2603  001270  010F               	movlb	15	; () banked
  2604  001272  9740               	bcf	64,3,b	;volatile
  2605                           
  2606                           ; BSR set to: 15
  2607                           ;Can_XmitService.c: 293: TXB0DLC = 0x03;
  2608  001274  0E03               	movlw	3
  2609  001276  010F               	movlb	15	; () banked
  2610  001278  6F45               	movwf	69,b	;volatile
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;Can_XmitService.c: 294: TXB0D0 = DataByte;
  2614  00127A  C0B8  FF46         	movff	XmitData@DataByte,3910	;volatile
  2615                           
  2616                           ; BSR set to: 15
  2617                           ;Can_XmitService.c: 297: TXB0D1 = GetBrightness();
  2618  00127E  ECB2  F00A         	call	_GetBrightness	;wreg free
  2619  001282  010F               	movlb	15	; () banked
  2620  001284  6F47               	movwf	71,b	;volatile
  2621                           
  2622                           ; BSR set to: 15
  2623                           ;Can_XmitService.c: 299: TXB0D2 = GetLocation();
  2624  001286  ECB0  F00A         	call	_GetLocation	;wreg free
  2625  00128A  010F               	movlb	15	; () banked
  2626  00128C  6F48               	movwf	72,b	;volatile
  2627                           
  2628                           ;Can_XmitService.c: 303: TXB0SIDH = 0x00;
  2629  00128E  0E00               	movlw	0
  2630  001290  010F               	movlb	15	; () banked
  2631  001292  6F41               	movwf	65,b	;volatile
  2632                           
  2633                           ;Can_XmitService.c: 304: TXB0SIDL = 0x08;
  2634  001294  0E08               	movlw	8
  2635  001296  010F               	movlb	15	; () banked
  2636  001298  6F42               	movwf	66,b	;volatile
  2637                           
  2638                           ;Can_XmitService.c: 305: TXB0EIDH = 0x00;
  2639  00129A  0E00               	movlw	0
  2640  00129C  010F               	movlb	15	; () banked
  2641  00129E  6F43               	movwf	67,b	;volatile
  2642                           
  2643                           ;Can_XmitService.c: 306: TXB0EIDL = 0x01;
  2644  0012A0  0E01               	movlw	1
  2645  0012A2  010F               	movlb	15	; () banked
  2646  0012A4  6F44               	movwf	68,b	;volatile
  2647                           
  2648                           ; BSR set to: 15
  2649                           ;Can_XmitService.c: 308: TXB0CONbits.TXPRI0 = 1;
  2650  0012A6  010F               	movlb	15	; () banked
  2651  0012A8  8140               	bsf	64,0,b	;volatile
  2652                           
  2653                           ; BSR set to: 15
  2654                           ;Can_XmitService.c: 309: TXB0CONbits.TXPRI1 = 1;
  2655  0012AA  010F               	movlb	15	; () banked
  2656  0012AC  8340               	bsf	64,1,b	;volatile
  2657                           
  2658                           ; BSR set to: 15
  2659                           ;Can_XmitService.c: 311: TXB0CONbits.TXREQ = 1;
  2660  0012AE  010F               	movlb	15	; () banked
  2661  0012B0  8740               	bsf	64,3,b	;volatile
  2662                           
  2663                           ; BSR set to: 15
  2664  0012B2  0012               	return		;funcret
  2665  0012B4                     __end_of_XmitData:
  2666                           	opt stack 0
  2667                           tosu	equ	0xFFF
  2668                           tosh	equ	0xFFE
  2669                           tosl	equ	0xFFD
  2670                           pclath	equ	0xFFA
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _GetLocation *****************
  2687 ;; Defined at:
  2688 ;;		line 72 in file "Analog_Service.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;		None
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      unsigned char 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2702 ;;      Params:         0       0       0       0
  2703 ;;      Locals:         0       0       0       0
  2704 ;;      Temps:          0       0       0       0
  2705 ;;      Totals:         0       0       0       0
  2706 ;;Total ram usage:        0 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    6
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_XmitData
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text13
  2717  001560                     __ptext13:
  2718                           	opt stack 0
  2719  001560                     _GetLocation:
  2720                           	opt stack 21
  2721                           
  2722                           ;Analog_Service.c: 74: return Location;
  2723                           
  2724                           ; BSR set to: 15
  2725                           ;incstack = 0
  2726  001560  503F               	movf	_Location,w,c
  2727  001562  0012               	return	
  2728  001564                     __end_of_GetLocation:
  2729                           	opt stack 0
  2730                           tosu	equ	0xFFF
  2731                           tosh	equ	0xFFE
  2732                           tosl	equ	0xFFD
  2733                           pclath	equ	0xFFA
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           postinc0	equ	0xFEE
  2741                           wreg	equ	0xFE8
  2742                           indf2	equ	0xFDF
  2743                           postinc2	equ	0xFDE
  2744                           postdec2	equ	0xFDD
  2745                           fsr2h	equ	0xFDA
  2746                           fsr2l	equ	0xFD9
  2747                           status	equ	0xFD8
  2748                           
  2749 ;; *************** function _GetBrightness *****************
  2750 ;; Defined at:
  2751 ;;		line 67 in file "Analog_Service.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      unsigned char 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2765 ;;      Params:         0       0       0       0
  2766 ;;      Locals:         0       0       0       0
  2767 ;;      Temps:          0       0       0       0
  2768 ;;      Totals:         0       0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    6
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_XmitData
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text14
  2780  001564                     __ptext14:
  2781                           	opt stack 0
  2782  001564                     _GetBrightness:
  2783                           	opt stack 21
  2784                           
  2785                           ;Analog_Service.c: 69: return Brightness;
  2786                           
  2787                           ;incstack = 0
  2788  001564  503E               	movf	_Brightness,w,c
  2789  001566  0012               	return	
  2790  001568                     __end_of_GetBrightness:
  2791                           	opt stack 0
  2792                           tosu	equ	0xFFF
  2793                           tosh	equ	0xFFE
  2794                           tosl	equ	0xFFD
  2795                           pclath	equ	0xFFA
  2796                           tblptru	equ	0xFF8
  2797                           tblptrh	equ	0xFF7
  2798                           tblptrl	equ	0xFF6
  2799                           tablat	equ	0xFF5
  2800                           prodh	equ	0xFF4
  2801                           prodl	equ	0xFF3
  2802                           postinc0	equ	0xFEE
  2803                           wreg	equ	0xFE8
  2804                           indf2	equ	0xFDF
  2805                           postinc2	equ	0xFDE
  2806                           postdec2	equ	0xFDD
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _InitPins *****************
  2812 ;; Defined at:
  2813 ;;		line 273 in file "Can_XmitService.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2827 ;;      Params:         0       0       0       0
  2828 ;;      Locals:         0       0       0       0
  2829 ;;      Temps:          0       0       0       0
  2830 ;;      Totals:         0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    6
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_RunCan_XmitService
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text15
  2842  0014C0                     __ptext15:
  2843                           	opt stack 0
  2844  0014C0                     _InitPins:
  2845                           	opt stack 22
  2846                           
  2847                           ;Can_XmitService.c: 276: PORTB = 0x00;
  2848                           
  2849                           ;incstack = 0
  2850  0014C0  0E00               	movlw	0
  2851  0014C2  6E81               	movwf	3969,c	;volatile
  2852                           
  2853                           ;Can_XmitService.c: 277: LATB = 0x00;
  2854  0014C4  0E00               	movlw	0
  2855  0014C6  6E8A               	movwf	3978,c	;volatile
  2856                           
  2857                           ;Can_XmitService.c: 278: TRISBbits.TRISB2 = 0;
  2858  0014C8  9493               	bcf	3987,2,c	;volatile
  2859                           
  2860                           ;Can_XmitService.c: 279: TRISBbits.TRISB3 = 1;
  2861  0014CA  8693               	bsf	3987,3,c	;volatile
  2862                           
  2863                           ;Can_XmitService.c: 282: PORTA = 0x00;
  2864  0014CC  0E00               	movlw	0
  2865  0014CE  6E80               	movwf	3968,c	;volatile
  2866                           
  2867                           ;Can_XmitService.c: 283: LATA &= 0b11111100;
  2868  0014D0  0EFC               	movlw	252
  2869  0014D2  1689               	andwf	3977,f,c	;volatile
  2870                           
  2871                           ;Can_XmitService.c: 284: TRISA &= 0b00000011;
  2872  0014D4  0E03               	movlw	3
  2873  0014D6  1692               	andwf	3986,f,c	;volatile
  2874  0014D8  0012               	return		;funcret
  2875  0014DA                     __end_of_InitPins:
  2876                           	opt stack 0
  2877                           tosu	equ	0xFFF
  2878                           tosh	equ	0xFFE
  2879                           tosl	equ	0xFFD
  2880                           pclath	equ	0xFFA
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           indf2	equ	0xFDF
  2890                           postinc2	equ	0xFDE
  2891                           postdec2	equ	0xFDD
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _InitCanHardware *****************
  2897 ;; Defined at:
  2898 ;;		line 213 in file "Can_XmitService.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2912 ;;      Params:         0       0       0       0
  2913 ;;      Locals:         0       0       0       0
  2914 ;;      Temps:          0       0       0       0
  2915 ;;      Totals:         0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    6
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_RunCan_XmitService
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text16
  2927  000EB6                     __ptext16:
  2928                           	opt stack 0
  2929  000EB6                     _InitCanHardware:
  2930                           	opt stack 22
  2931                           
  2932                           ;Can_XmitService.c: 217: CANCON = 0x80;
  2933                           
  2934                           ;incstack = 0
  2935  000EB6  0E80               	movlw	128
  2936  000EB8  6E6F               	movwf	3951,c	;volatile
  2937  000EBA                     l514:
  2938  000EBA  AE6E               	btfss	3950,7,c	;volatile
  2939  000EBC  D7FE               	goto	l514
  2940                           
  2941                           ;Can_XmitService.c: 220: CIOCON = 0x20;
  2942  000EBE  0E20               	movlw	32
  2943  000EC0  6E73               	movwf	3955,c	;volatile
  2944                           
  2945                           ;Can_XmitService.c: 223: BRGCON2bits.SEG2PHTS = 1;
  2946  000EC2  8E71               	bsf	3953,7,c	;volatile
  2947                           
  2948                           ;Can_XmitService.c: 225: BRGCON1bits.BRP0 = 1;
  2949  000EC4  8070               	bsf	3952,0,c	;volatile
  2950                           
  2951                           ;Can_XmitService.c: 226: BRGCON1bits.BRP1 = 0;
  2952  000EC6  9270               	bcf	3952,1,c	;volatile
  2953                           
  2954                           ;Can_XmitService.c: 227: BRGCON2bits.PRSEG0 = 0;
  2955  000EC8  9071               	bcf	3953,0,c	;volatile
  2956                           
  2957                           ;Can_XmitService.c: 228: BRGCON2bits.PRSEG1 = 1;
  2958  000ECA  8271               	bsf	3953,1,c	;volatile
  2959                           
  2960                           ;Can_XmitService.c: 229: BRGCON2bits.PRSEG2 = 1;
  2961  000ECC  8471               	bsf	3953,2,c	;volatile
  2962                           
  2963                           ;Can_XmitService.c: 230: BRGCON2bits.SEG1PH0 = 1;
  2964  000ECE  8671               	bsf	3953,3,c	;volatile
  2965                           
  2966                           ;Can_XmitService.c: 231: BRGCON2bits.SEG1PH1 = 0;
  2967  000ED0  9871               	bcf	3953,4,c	;volatile
  2968                           
  2969                           ;Can_XmitService.c: 232: BRGCON2bits.SEG1PH2 = 1;
  2970  000ED2  8A71               	bsf	3953,5,c	;volatile
  2971                           
  2972                           ;Can_XmitService.c: 233: BRGCON3bits.SEG2PH0 = 1;
  2973  000ED4  8072               	bsf	3954,0,c	;volatile
  2974                           
  2975                           ;Can_XmitService.c: 234: BRGCON1bits.SJW0 = 1;
  2976  000ED6  8C70               	bsf	3952,6,c	;volatile
  2977                           
  2978                           ;Can_XmitService.c: 238: RXB0CONbits.RXB0DBEN = 0;
  2979  000ED8  9460               	bcf	3936,2,c	;volatile
  2980                           
  2981                           ;Can_XmitService.c: 239: RXB0CONbits.RXM0 = 0;
  2982  000EDA  9A60               	bcf	3936,5,c	;volatile
  2983                           
  2984                           ;Can_XmitService.c: 240: RXB0CONbits.RXM1 = 0;
  2985  000EDC  9C60               	bcf	3936,6,c	;volatile
  2986                           
  2987                           ;Can_XmitService.c: 241: RXF0SIDH = 0x00;
  2988  000EDE  0E00               	movlw	0
  2989  000EE0  010F               	movlb	15	; () banked
  2990  000EE2  6F00               	movwf	0,b	;volatile
  2991                           
  2992                           ;Can_XmitService.c: 242: RXF0SIDL = 0x08;
  2993  000EE4  0E08               	movlw	8
  2994  000EE6  010F               	movlb	15	; () banked
  2995  000EE8  6F01               	movwf	1,b	;volatile
  2996                           
  2997                           ;Can_XmitService.c: 243: RXF0EIDH = 0x00;
  2998  000EEA  0E00               	movlw	0
  2999  000EEC  010F               	movlb	15	; () banked
  3000  000EEE  6F02               	movwf	2,b	;volatile
  3001                           
  3002                           ;Can_XmitService.c: 244: RXF0EIDL = 0x01;
  3003  000EF0  0E01               	movlw	1
  3004  000EF2  010F               	movlb	15	; () banked
  3005  000EF4  6F03               	movwf	3,b	;volatile
  3006                           
  3007                           ;Can_XmitService.c: 246: RXM0SIDH = 0x00;
  3008  000EF6  0E00               	movlw	0
  3009  000EF8  010F               	movlb	15	; () banked
  3010  000EFA  6F18               	movwf	24,b	;volatile
  3011                           
  3012                           ;Can_XmitService.c: 247: RXM0SIDL = 0x00;
  3013  000EFC  0E00               	movlw	0
  3014  000EFE  010F               	movlb	15	; () banked
  3015  000F00  6F19               	movwf	25,b	;volatile
  3016                           
  3017                           ;Can_XmitService.c: 248: RXM0EIDH = 0x00;
  3018  000F02  0E00               	movlw	0
  3019  000F04  010F               	movlb	15	; () banked
  3020  000F06  6F1A               	movwf	26,b	;volatile
  3021                           
  3022                           ;Can_XmitService.c: 249: RXM0EIDL = 0x01;
  3023  000F08  0E01               	movlw	1
  3024  000F0A  010F               	movlb	15	; () banked
  3025  000F0C  6F1B               	movwf	27,b	;volatile
  3026                           
  3027                           ;Can_XmitService.c: 253: ECANCON = 0x00;
  3028  000F0E  0E00               	movlw	0
  3029  000F10  6E77               	movwf	3959,c	;volatile
  3030                           
  3031                           ;Can_XmitService.c: 254: CANCON = 0b00010000;
  3032  000F12  0E10               	movlw	16
  3033  000F14  6E6F               	movwf	3951,c	;volatile
  3034  000F16                     l517:
  3035  000F16  BE6E               	btfsc	3950,7,c	;volatile
  3036  000F18  D7FE               	goto	l517
  3037                           
  3038                           ;Can_XmitService.c: 258: RXB0IE = 1;
  3039  000F1A  80A3               	bsf	4003,0,c	;volatile
  3040                           
  3041                           ;Can_XmitService.c: 259: ERRIE = 1;
  3042  000F1C  8AA3               	bsf	4003,5,c	;volatile
  3043                           
  3044                           ;Can_XmitService.c: 260: IRXIE = 1;
  3045  000F1E  8EA3               	bsf	4003,7,c	;volatile
  3046                           
  3047                           ;Can_XmitService.c: 264: RXB0IF = 0;
  3048  000F20  90A4               	bcf	4004,0,c	;volatile
  3049                           
  3050                           ;Can_XmitService.c: 265: ERRIF = 0;
  3051  000F22  9AA4               	bcf	4004,5,c	;volatile
  3052                           
  3053                           ;Can_XmitService.c: 266: IRXIF = 0;
  3054  000F24  9EA4               	bcf	4004,7,c	;volatile
  3055                           
  3056                           ;Can_XmitService.c: 267: TXB0IE = 1;
  3057  000F26  84A3               	bsf	4003,2,c	;volatile
  3058                           
  3059                           ;Can_XmitService.c: 268: TXB0IF = 0;
  3060  000F28  94A4               	bcf	4004,2,c	;volatile
  3061                           
  3062                           ;Can_XmitService.c: 269: TXB0CONbits.TXREQ = 0;
  3063  000F2A  010F               	movlb	15	; () banked
  3064  000F2C  9740               	bcf	64,3,b	;volatile
  3065                           
  3066                           ;Can_XmitService.c: 270: RXB0CONbits.RXFUL = 0;
  3067  000F2E  9E60               	bcf	3936,7,c	;volatile
  3068                           
  3069                           ; BSR set to: 15
  3070  000F30  0012               	return		;funcret
  3071  000F32                     __end_of_InitCanHardware:
  3072                           	opt stack 0
  3073                           tosu	equ	0xFFF
  3074                           tosh	equ	0xFFE
  3075                           tosl	equ	0xFFD
  3076                           pclath	equ	0xFFA
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _ES_PostAll *****************
  3093 ;; Defined at:
  3094 ;;		line 318 in file "ES_Framework.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  i               1   28[BANK0 ] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      unsigned char 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3108 ;;      Params:         0       3       0       0
  3109 ;;      Locals:         0       1       0       0
  3110 ;;      Temps:          0       2       0       0
  3111 ;;      Totals:         0       6       0       0
  3112 ;;Total ram usage:        6 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    8
  3115 ;; This function calls:
  3116 ;;		_ES_EnQueueFIFO
  3117 ;; This function is called by:
  3118 ;;		_RunButtonDebounceSM
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text17
  3123  000F32                     __ptext17:
  3124                           	opt stack 0
  3125  000F32                     _ES_PostAll:
  3126                           	opt stack 20
  3127                           
  3128                           ;ES_Framework.c: 320: uint8_t i;
  3129                           ;ES_Framework.c: 322: for ( i=0; i< (sizeof(EventQueues)/sizeof(EventQueues[0])); i++) {
  3130                           
  3131                           ; BSR set to: 15
  3132                           ;incstack = 0
  3133  000F32  0E00               	movlw	0
  3134  000F34  0100               	movlb	0	; () banked
  3135  000F36  6FD4               	movwf	ES_PostAll@i& (0+255),b
  3136  000F38                     l2348:
  3137                           
  3138                           ; BSR set to: 0
  3139  000F38  0E02               	movlw	2
  3140  000F3A  0100               	movlb	0	; () banked
  3141  000F3C  65D4               	cpfsgt	ES_PostAll@i& (0+255),b
  3142  000F3E  D001               	goto	l2352
  3143  000F40  0012               	return	
  3144  000F42                     l2352:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;ES_Framework.c: 323: if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != 1 ){
  3148  000F42  0100               	movlb	0	; () banked
  3149  000F44  51D4               	movf	ES_PostAll@i& (0+255),w,b
  3150  000F46  0D03               	mullw	3
  3151  000F48  0E5C               	movlw	low _EventQueues
  3152  000F4A  24F3               	addwf	prodl,w,c
  3153  000F4C  6EF6               	movwf	tblptrl,c
  3154  000F4E  0E03               	movlw	high _EventQueues
  3155  000F50  20F4               	addwfc	prodh,w,c
  3156  000F52  6EF7               	movwf	tblptrh,c
  3157  000F54                     	if	0	;There are less than 3 active tblptr bytes
  3158  000F54                     	endif
  3159  000F54  0009               	tblrd		*+
  3160  000F56  CFF5 F0C4          	movff	tablat,ES_EnQueueFIFO@pBlock
  3161  000F5A  000A               	tblrd		*-
  3162  000F5C  CFF5 F0C5          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3163  000F60  C0CF  F0C6         	movff	ES_PostAll@ThisEvent,ES_EnQueueFIFO@Event2Add
  3164  000F64  C0D0  F0C7         	movff	ES_PostAll@ThisEvent+1,ES_EnQueueFIFO@Event2Add+1
  3165  000F68  C0D1  F0C8         	movff	ES_PostAll@ThisEvent+2,ES_EnQueueFIFO@Event2Add+2
  3166  000F6C  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3167  000F70  06E8               	decf	wreg,f,c
  3168  000F72  A4D8               	btfss	status,2,c
  3169  000F74  0012               	return	
  3170                           
  3171                           ;ES_Framework.c: 326: Ready |= BitNum2SetMask[i];
  3172                           
  3173                           ;ES_Framework.c: 325: }else{
  3174                           
  3175                           ;ES_Framework.c: 324: break;
  3176  000F76  0100               	movlb	0	; () banked
  3177  000F78  51D4               	movf	ES_PostAll@i& (0+255),w,b
  3178  000F7A  0D02               	mullw	2
  3179  000F7C  0E01               	movlw	low _BitNum2SetMask
  3180  000F7E  24F3               	addwf	prodl,w,c
  3181  000F80  6EF6               	movwf	tblptrl,c
  3182  000F82  0E03               	movlw	high _BitNum2SetMask
  3183  000F84  20F4               	addwfc	prodh,w,c
  3184  000F86  6EF7               	movwf	tblptrh,c
  3185  000F88                     	if	0	;There are less than 3 active tblptr bytes
  3186  000F88                     	endif
  3187  000F88  0009               	tblrd		*+
  3188  000F8A  CFF5 F0D2          	movff	tablat,??_ES_PostAll
  3189  000F8E  0009               	tblrd		*+
  3190  000F90  CFF5 F0D3          	movff	tablat,??_ES_PostAll+1
  3191  000F94  0100               	movlb	0	; () banked
  3192  000F96  51D2               	movf	??_ES_PostAll& (0+255),w,b
  3193  000F98  0100               	movlb	0	; () banked
  3194  000F9A  1385               	iorwf	_Ready& (0+255),f,b
  3195  000F9C  0100               	movlb	0	; () banked
  3196  000F9E  51D3               	movf	(??_ES_PostAll+1)& (0+255),w,b
  3197  000FA0  0100               	movlb	0	; () banked
  3198  000FA2  1386               	iorwf	(_Ready+1)& (0+255),f,b
  3199                           
  3200                           ; BSR set to: 0
  3201  000FA4  0100               	movlb	0	; () banked
  3202  000FA6  2BD4               	incf	ES_PostAll@i& (0+255),f,b
  3203  000FA8  D7C7               	goto	l2348
  3204  000FAA                     __end_of_ES_PostAll:
  3205                           	opt stack 0
  3206                           tosu	equ	0xFFF
  3207                           tosh	equ	0xFFE
  3208                           tosl	equ	0xFFD
  3209                           pclath	equ	0xFFA
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           indf2	equ	0xFDF
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function _InitAnalogHW *****************
  3226 ;; Defined at:
  3227 ;;		line 95 in file "Analog_Service.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3241 ;;      Params:         0       0       0       0
  3242 ;;      Locals:         0       0       0       0
  3243 ;;      Temps:          0       0       0       0
  3244 ;;      Totals:         0       0       0       0
  3245 ;;Total ram usage:        0 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    6
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_RunAnalogService
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text18
  3256  00142C                     __ptext18:
  3257                           	opt stack 0
  3258  00142C                     _InitAnalogHW:
  3259                           	opt stack 22
  3260                           
  3261                           ;Analog_Service.c: 97: PORTA = 0x00;
  3262                           
  3263                           ;incstack = 0
  3264  00142C  0E00               	movlw	0
  3265  00142E  6E80               	movwf	3968,c	;volatile
  3266                           
  3267                           ;Analog_Service.c: 98: LATA = 0x00;
  3268  001430  0E00               	movlw	0
  3269  001432  6E89               	movwf	3977,c	;volatile
  3270                           
  3271                           ;Analog_Service.c: 99: TRISAbits.TRISA0 = 1;
  3272  001434  8092               	bsf	3986,0,c	;volatile
  3273                           
  3274                           ;Analog_Service.c: 100: TRISAbits.TRISA1 = 1;
  3275  001436  8292               	bsf	3986,1,c	;volatile
  3276                           
  3277                           ;Analog_Service.c: 102: ADCON1bits.VCFG1 = 0;
  3278  001438  9AC1               	bcf	4033,5,c	;volatile
  3279                           
  3280                           ;Analog_Service.c: 103: ADCON1bits.VCFG0 = 0;
  3281  00143A  98C1               	bcf	4033,4,c	;volatile
  3282                           
  3283                           ;Analog_Service.c: 105: ADCON2bits.ADFM = 1;
  3284  00143C  8EC0               	bsf	4032,7,c	;volatile
  3285                           
  3286                           ;Analog_Service.c: 106: ADCON2bits.ACQT = 0b100;
  3287  00143E  50C0               	movf	4032,w,c	;volatile
  3288  001440  0BC7               	andlw	-57
  3289  001442  0920               	iorlw	32
  3290  001444  6EC0               	movwf	4032,c	;volatile
  3291                           
  3292                           ;Analog_Service.c: 107: ADCON2bits.ADCS = 0b001;
  3293  001446  50C0               	movf	4032,w,c	;volatile
  3294  001448  0BF8               	andlw	-8
  3295  00144A  0901               	iorlw	1
  3296  00144C  6EC0               	movwf	4032,c	;volatile
  3297                           
  3298                           ;Analog_Service.c: 109: ADCON0bits.ADON = 1;
  3299  00144E  80C2               	bsf	4034,0,c	;volatile
  3300                           
  3301                           ;Analog_Service.c: 110: ADIF = 0;
  3302  001450  9C9E               	bcf	3998,6,c	;volatile
  3303                           
  3304                           ;Analog_Service.c: 111: ADIE = 1;
  3305  001452  8C9D               	bsf	3997,6,c	;volatile
  3306  001454  0012               	return		;funcret
  3307  001456                     __end_of_InitAnalogHW:
  3308                           	opt stack 0
  3309                           tosu	equ	0xFFF
  3310                           tosh	equ	0xFFE
  3311                           tosl	equ	0xFFD
  3312                           pclath	equ	0xFFA
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           postinc0	equ	0xFEE
  3320                           wreg	equ	0xFE8
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _ES_DeQueue *****************
  3329 ;; Defined at:
  3330 ;;		line 164 in file "ES_Queue.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3333 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3334 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  3335 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  3338 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3339 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  3340 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  1    wreg      unsigned char 
  3343 ;; Registers used:
  3344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3350 ;;      Params:         0       4       0       0
  3351 ;;      Locals:         0       4       0       0
  3352 ;;      Temps:          0       2       0       0
  3353 ;;      Totals:         0      10       0       0
  3354 ;;Total ram usage:       10 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    7
  3357 ;; This function calls:
  3358 ;;		___lbmod
  3359 ;;		___wmul
  3360 ;; This function is called by:
  3361 ;;		_ES_Run
  3362 ;;		_ES_RecallEvents
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text19
  3367  0003C6                     __ptext19:
  3368                           	opt stack 0
  3369  0003C6                     _ES_DeQueue:
  3370                           	opt stack 22
  3371                           
  3372                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  3373                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  3374                           ;ES_Queue.c: 168: uint8_t NumLeft;
  3375                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  3376                           
  3377                           ;incstack = 0
  3378  0003C6  C0C4  F0CC         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  3379  0003CA  C0C5  F0CD         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  3380                           
  3381                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  3382  0003CE  0100               	movlb	0	; () banked
  3383  0003D0  EE20 F002          	lfsr	2,2
  3384  0003D4  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3385  0003D6  26D9               	addwf	fsr2l,f,c
  3386  0003D8  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3387  0003DA  22DA               	addwfc	fsr2h,f,c
  3388  0003DC  50DF               	movf	indf2,w,c
  3389  0003DE  B4D8               	btfsc	status,2,c
  3390  0003E0  D06F               	goto	l2592
  3391                           
  3392                           ; BSR set to: 0
  3393                           
  3394                           ;ES_Queue.c: 172: {
  3395                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3396  0003E2  CFF2 F0CA          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  3397  0003E6  9EF2               	bcf	intcon,7,c	;volatile
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3401                           
  3402                           ; BSR set to: 0
  3403  0003E8  0100               	movlb	0	; () banked
  3404  0003EA  EE20 F001          	lfsr	2,1
  3405  0003EE  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3406  0003F0  26D9               	addwf	fsr2l,f,c
  3407  0003F2  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3408  0003F4  22DA               	addwfc	fsr2h,f,c
  3409  0003F6  50DF               	movf	indf2,w,c
  3410  0003F8  0100               	movlb	0	; () banked
  3411  0003FA  6FC8               	movwf	??_ES_DeQueue& (0+255),b
  3412  0003FC  0E01               	movlw	1
  3413  0003FE  0100               	movlb	0	; () banked
  3414  000400  25C8               	addwf	??_ES_DeQueue& (0+255),w,b
  3415  000402  0100               	movlb	0	; () banked
  3416  000404  6FBE               	movwf	___wmul@multiplier& (0+255),b
  3417  000406  0100               	movlb	0	; () banked
  3418  000408  6BBF               	clrf	(___wmul@multiplier+1)& (0+255),b
  3419  00040A  0E00               	movlw	0
  3420  00040C  23BF               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  3421  00040E  0E00               	movlw	0
  3422  000410  0100               	movlb	0	; () banked
  3423  000412  6FC1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3424  000414  0E03               	movlw	3
  3425  000416  6FC0               	movwf	___wmul@multiplicand& (0+255),b
  3426  000418  EC9A  F009         	call	___wmul	;wreg free
  3427  00041C  0100               	movlb	0	; () banked
  3428  00041E  51BE               	movf	?___wmul& (0+255),w,b
  3429  000420  0100               	movlb	0	; () banked
  3430  000422  25C4               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  3431  000424  6ED9               	movwf	fsr2l,c
  3432  000426  0100               	movlb	0	; () banked
  3433  000428  51BF               	movf	(?___wmul+1)& (0+255),w,b
  3434  00042A  0100               	movlb	0	; () banked
  3435  00042C  21C5               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  3436  00042E  6EDA               	movwf	fsr2h,c
  3437  000430  C0C6  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  3438  000434  C0C7  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  3439  000438  CFDE FFE6          	movff	postinc2,postinc1
  3440  00043C  CFDE FFE6          	movff	postinc2,postinc1
  3441  000440  CFDE FFE6          	movff	postinc2,postinc1
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  3445  000444  0100               	movlb	0	; () banked
  3446  000446  EE20 F001          	lfsr	2,1
  3447  00044A  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3448  00044C  26D9               	addwf	fsr2l,f,c
  3449  00044E  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3450  000450  22DA               	addwfc	fsr2h,f,c
  3451  000452  2ADF               	incf	indf2,f,c
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3455  000454  C0CC  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  3456  000458  C0CD  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  3457  00045C  0100               	movlb	0	; () banked
  3458  00045E  EE10 F001          	lfsr	1,1
  3459  000462  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3460  000464  26E1               	addwf	fsr1l,f,c
  3461  000466  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3462  000468  22E2               	addwfc	fsr1h,f,c
  3463  00046A  50DE               	movf	postinc2,w,c
  3464  00046C  5CE6               	subwf	postinc1,w,c
  3465  00046E  A0D8               	btfss	status,0,c
  3466  000470  D019               	goto	l2588
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  3470  000472  0100               	movlb	0	; () banked
  3471  000474  EE20 F001          	lfsr	2,1
  3472  000478  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3473  00047A  26D9               	addwf	fsr2l,f,c
  3474  00047C  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3475  00047E  22DA               	addwfc	fsr2h,f,c
  3476  000480  C0CC  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  3477  000484  C0CD  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  3478  000488  50E7               	movf	indf1,w,c
  3479  00048A  0100               	movlb	0	; () banked
  3480  00048C  6FB8               	movwf	___lbmod@divisor& (0+255),b
  3481  00048E  0100               	movlb	0	; () banked
  3482  000490  EE10 F001          	lfsr	1,1
  3483  000494  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3484  000496  26E1               	addwf	fsr1l,f,c
  3485  000498  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3486  00049A  22E2               	addwfc	fsr1h,f,c
  3487  00049C  50E7               	movf	indf1,w,c
  3488  00049E  EC5A  F009         	call	___lbmod
  3489  0004A2  6EDF               	movwf	indf2,c
  3490  0004A4                     l2588:
  3491                           
  3492                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  3493  0004A4  0100               	movlb	0	; () banked
  3494  0004A6  EE20 F002          	lfsr	2,2
  3495  0004AA  51CC               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3496  0004AC  26D9               	addwf	fsr2l,f,c
  3497  0004AE  51CD               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3498  0004B0  22DA               	addwfc	fsr2h,f,c
  3499  0004B2  06DF               	decf	indf2,f,c
  3500  0004B4  50DF               	movf	indf2,w,c
  3501  0004B6  0100               	movlb	0	; () banked
  3502  0004B8  6FCB               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  3506  0004BA  C0CA  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  3507                           
  3508                           ;ES_Queue.c: 183: }else {
  3509  0004BE  D014               	goto	l2598
  3510  0004C0                     l2592:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  3514  0004C0  C0C6  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  3515  0004C4  C0C7  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  3516  0004C8  0E00               	movlw	0
  3517  0004CA  6EDF               	movwf	indf2,c
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  3521  0004CC  0100               	movlb	0	; () banked
  3522  0004CE  EE20 F001          	lfsr	2,1
  3523  0004D2  51C6               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  3524  0004D4  26D9               	addwf	fsr2l,f,c
  3525  0004D6  51C7               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  3526  0004D8  22DA               	addwfc	fsr2h,f,c
  3527  0004DA  0E00               	movlw	0
  3528  0004DC  6EDE               	movwf	postinc2,c
  3529  0004DE  0E00               	movlw	0
  3530  0004E0  6EDD               	movwf	postdec2,c
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;ES_Queue.c: 186: NumLeft = 0;
  3534  0004E2  0E00               	movlw	0
  3535  0004E4  0100               	movlb	0	; () banked
  3536  0004E6  6FCB               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3537  0004E8                     l2598:
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;ES_Queue.c: 187: }
  3541                           ;ES_Queue.c: 188: return NumLeft;
  3542  0004E8  0100               	movlb	0	; () banked
  3543  0004EA  51CB               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  3544  0004EC  0012               	return	
  3545  0004EE                     __end_of_ES_DeQueue:
  3546                           	opt stack 0
  3547                           tosu	equ	0xFFF
  3548                           tosh	equ	0xFFE
  3549                           tosl	equ	0xFFD
  3550                           pclath	equ	0xFFA
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           indf1	equ	0xFE7
  3561                           postinc1	equ	0xFE6
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function ___lbmod *****************
  3572 ;; Defined at:
  3573 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  dividend        1    wreg     unsigned char 
  3576 ;;  divisor         1    0[BANK0 ] unsigned char 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  dividend        1    1[BANK0 ] unsigned char 
  3579 ;;  rem             1    3[BANK0 ] unsigned char 
  3580 ;;  counter         1    2[BANK0 ] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      unsigned char 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3590 ;;      Params:         0       1       0       0
  3591 ;;      Locals:         0       3       0       0
  3592 ;;      Temps:          0       0       0       0
  3593 ;;      Totals:         0       4       0       0
  3594 ;;Total ram usage:        4 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    6
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_ES_DeQueue
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text20
  3605  0012B4                     __ptext20:
  3606                           	opt stack 0
  3607  0012B4                     ___lbmod:
  3608                           	opt stack 22
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;incstack = 0
  3612                           ;___lbmod@dividend stored from wreg
  3613  0012B4  0100               	movlb	0	; () banked
  3614  0012B6  6FB9               	movwf	___lbmod@dividend& (0+255),b
  3615  0012B8  0E08               	movlw	8
  3616  0012BA  0100               	movlb	0	; () banked
  3617  0012BC  6FBA               	movwf	___lbmod@counter& (0+255),b
  3618  0012BE  0E00               	movlw	0
  3619  0012C0  0100               	movlb	0	; () banked
  3620  0012C2  6FBB               	movwf	___lbmod@rem& (0+255),b
  3621  0012C4                     l2478:
  3622                           
  3623                           ; BSR set to: 0
  3624  0012C4  90D8               	bcf	status,0,c
  3625  0012C6  0100               	movlb	0	; () banked
  3626  0012C8  35B9               	rlcf	___lbmod@dividend& (0+255),w,b
  3627  0012CA  0100               	movlb	0	; () banked
  3628  0012CC  35BB               	rlcf	___lbmod@rem& (0+255),w,b
  3629  0012CE  0100               	movlb	0	; () banked
  3630  0012D0  6FBB               	movwf	___lbmod@rem& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633  0012D2  0100               	movlb	0	; () banked
  3634  0012D4  90D8               	bcf	status,0,c
  3635  0012D6  37B9               	rlcf	___lbmod@dividend& (0+255),f,b
  3636                           
  3637                           ; BSR set to: 0
  3638  0012D8  0100               	movlb	0	; () banked
  3639  0012DA  51B8               	movf	___lbmod@divisor& (0+255),w,b
  3640  0012DC  0100               	movlb	0	; () banked
  3641  0012DE  5DBB               	subwf	___lbmod@rem& (0+255),w,b
  3642  0012E0  A0D8               	btfss	status,0,c
  3643  0012E2  D004               	goto	l2486
  3644                           
  3645                           ; BSR set to: 0
  3646  0012E4  0100               	movlb	0	; () banked
  3647  0012E6  51B8               	movf	___lbmod@divisor& (0+255),w,b
  3648  0012E8  0100               	movlb	0	; () banked
  3649  0012EA  5FBB               	subwf	___lbmod@rem& (0+255),f,b
  3650  0012EC                     l2486:
  3651                           
  3652                           ; BSR set to: 0
  3653  0012EC  0100               	movlb	0	; () banked
  3654  0012EE  2FBA               	decfsz	___lbmod@counter& (0+255),f,b
  3655  0012F0  D7E9               	goto	l2478
  3656                           
  3657                           ; BSR set to: 0
  3658                           
  3659                           ; BSR set to: 0
  3660  0012F2  0100               	movlb	0	; () banked
  3661  0012F4  51BB               	movf	___lbmod@rem& (0+255),w,b
  3662  0012F6  0012               	return	
  3663  0012F8                     __end_of___lbmod:
  3664                           	opt stack 0
  3665                           tosu	equ	0xFFF
  3666                           tosh	equ	0xFFE
  3667                           tosl	equ	0xFFD
  3668                           pclath	equ	0xFFA
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           prodh	equ	0xFF4
  3674                           prodl	equ	0xFF3
  3675                           intcon	equ	0xFF2
  3676                           postinc0	equ	0xFEE
  3677                           wreg	equ	0xFE8
  3678                           indf1	equ	0xFE7
  3679                           postinc1	equ	0xFE6
  3680                           fsr1h	equ	0xFE2
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _ES_CheckUserEvents *****************
  3690 ;; Defined at:
  3691 ;;		line 46 in file "ES_CheckEvents.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  i               1   37[BANK0 ] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      unsigned char 
  3698 ;; Registers used:
  3699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3705 ;;      Params:         0       0       0       0
  3706 ;;      Locals:         0       1       0       0
  3707 ;;      Temps:          0       0       0       0
  3708 ;;      Totals:         0       1       0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:   11
  3712 ;; This function calls:
  3713 ;;		_Check4Keystroke
  3714 ;;		_CheckButtonEvents
  3715 ;; This function is called by:
  3716 ;;		_ES_Run
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text21
  3721  001222                     __ptext21:
  3722                           	opt stack 0
  3723  001222                     _ES_CheckUserEvents:
  3724                           	opt stack 18
  3725                           
  3726                           ;ES_CheckEvents.c: 48: uint8_t i;
  3727                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;incstack = 0
  3731  001222  0E00               	movlw	0
  3732  001224  0100               	movlb	0	; () banked
  3733  001226  6FDD               	movwf	ES_CheckUserEvents@i& (0+255),b
  3734  001228                     l2558:
  3735                           
  3736                           ; BSR set to: 0
  3737  001228  0E01               	movlw	1
  3738  00122A  0100               	movlb	0	; () banked
  3739  00122C  65DD               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  3740  00122E  D001               	goto	l2562
  3741  001230  0012               	return	
  3742  001232                     l2562:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  3746  001232  0100               	movlb	0	; () banked
  3747  001234  51DD               	movf	ES_CheckUserEvents@i& (0+255),w,b
  3748  001236  0D02               	mullw	2
  3749  001238  0E65               	movlw	low _ES_EventList
  3750  00123A  24F3               	addwf	prodl,w,c
  3751  00123C  6EF6               	movwf	tblptrl,c
  3752  00123E  0E03               	movlw	high _ES_EventList
  3753  001240  20F4               	addwfc	prodh,w,c
  3754  001242  6EF7               	movwf	tblptrh,c
  3755  001244                     	if	0	;There are less than 3 active tblptr bytes
  3756  001244                     	endif
  3757  001244  D801               	call	u1418
  3758  001246  D00C               	goto	u1419
  3759  001248                     u1418:
  3760  001248  0005               	push	
  3761  00124A  6EFA               	movwf	pclath,c
  3762  00124C  0009               	tblrd		*+
  3763  00124E  50F5               	movf	tablat,w,c
  3764  001250  6EFD               	movwf	tosl,c
  3765  001252  0009               	tblrd		*+
  3766  001254  50F5               	movf	tablat,w,c
  3767  001256  6EFE               	movwf	tosh,c
  3768  001258  50F8               	movf	tblptru,w,c
  3769  00125A  6EFF               	movwf	tosu,c
  3770  00125C  50FA               	movf	pclath,w,c
  3771  00125E  0012               	return		;indir
  3772  001260                     u1419:
  3773  001260  06E8               	decf	wreg,f,c
  3774  001262  B4D8               	btfsc	status,2,c
  3775  001264  0012               	return	
  3776                           
  3777                           ;ES_CheckEvents.c: 52: break;
  3778  001266  0100               	movlb	0	; () banked
  3779  001268  2BDD               	incf	ES_CheckUserEvents@i& (0+255),f,b
  3780  00126A  D7DE               	goto	l2558
  3781  00126C                     __end_of_ES_CheckUserEvents:
  3782                           	opt stack 0
  3783                           tosu	equ	0xFFF
  3784                           tosh	equ	0xFFE
  3785                           tosl	equ	0xFFD
  3786                           pclath	equ	0xFFA
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           indf1	equ	0xFE7
  3797                           postinc1	equ	0xFE6
  3798                           fsr1h	equ	0xFE2
  3799                           fsr1l	equ	0xFE1
  3800                           indf2	equ	0xFDF
  3801                           postinc2	equ	0xFDE
  3802                           postdec2	equ	0xFDD
  3803                           fsr2h	equ	0xFDA
  3804                           fsr2l	equ	0xFD9
  3805                           status	equ	0xFD8
  3806                           
  3807 ;; *************** function _Check4Keystroke *****************
  3808 ;; Defined at:
  3809 ;;		line 62 in file "EventCheckers.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      unsigned char 
  3816 ;; Registers used:
  3817 ;;		wreg
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3823 ;;      Params:         0       0       0       0
  3824 ;;      Locals:         0       0       0       0
  3825 ;;      Temps:          0       0       0       0
  3826 ;;      Totals:         0       0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    6
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_ES_CheckUserEvents
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text22
  3838  001568                     __ptext22:
  3839                           	opt stack 0
  3840  001568                     _Check4Keystroke:
  3841                           	opt stack 22
  3842                           
  3843                           ;EventCheckers.c: 78: return 0;
  3844                           
  3845                           ;incstack = 0
  3846  001568  0E00               	movlw	0
  3847  00156A  0012               	return	
  3848  00156C                     __end_of_Check4Keystroke:
  3849                           	opt stack 0
  3850                           tosu	equ	0xFFF
  3851                           tosh	equ	0xFFE
  3852                           tosl	equ	0xFFD
  3853                           pclath	equ	0xFFA
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           intcon	equ	0xFF2
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           indf1	equ	0xFE7
  3864                           postinc1	equ	0xFE6
  3865                           fsr1h	equ	0xFE2
  3866                           fsr1l	equ	0xFE1
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function _CheckButtonEvents *****************
  3875 ;; Defined at:
  3876 ;;		line 44 in file "Button.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3881 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3882 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      unsigned char 
  3885 ;; Registers used:
  3886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3892 ;;      Params:         0       0       0       0
  3893 ;;      Locals:         0       5       0       0
  3894 ;;      Temps:          0       0       0       0
  3895 ;;      Totals:         0       5       0       0
  3896 ;;Total ram usage:        5 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:   10
  3899 ;; This function calls:
  3900 ;;		_GetInputLine
  3901 ;;		_PostButtonDebounceSM
  3902 ;; This function is called by:
  3903 ;;		_ES_CheckUserEvents
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text23
  3908  0010FE                     __ptext23:
  3909                           	opt stack 0
  3910  0010FE                     _CheckButtonEvents:
  3911                           	opt stack 18
  3912                           
  3913                           ;Button.c: 46: uint8_t CurrentButtonState;
  3914                           ;Button.c: 47: bool ReturnVal = 0;
  3915                           
  3916                           ;incstack = 0
  3917  0010FE  0E00               	movlw	0
  3918  001100  0100               	movlb	0	; () banked
  3919  001102  6FD8               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;Button.c: 49: CurrentButtonState = GetInputLine();
  3923  001104  ECAA  F00A         	call	_GetInputLine	;wreg free
  3924  001108  0100               	movlb	0	; () banked
  3925  00110A  6FDC               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;Button.c: 51: if (CurrentButtonState != LastButtonState) {
  3929  00110C  0100               	movlb	0	; () banked
  3930  00110E  518D               	movf	_LastButtonState& (0+255),w,b
  3931  001110  0100               	movlb	0	; () banked
  3932  001112  19DC               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3933  001114  B4D8               	btfsc	status,2,c
  3934  001116  D023               	goto	l2340
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;Button.c: 53: ReturnVal = 1;
  3938  001118  0E01               	movlw	1
  3939  00111A  0100               	movlb	0	; () banked
  3940  00111C  6FD8               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;Button.c: 54: ES_Event ThisEvent;
  3944                           ;Button.c: 55: ThisEvent.EventParam = CurrentButtonState;
  3945  00111E  C0DC  F0DA         	movff	CheckButtonEvents@CurrentButtonState,CheckButtonEvents@ThisEvent+1
  3946  001122  0100               	movlb	0	; () banked
  3947  001124  6BDB               	clrf	(CheckButtonEvents@ThisEvent+2)& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;Button.c: 57: if (CurrentButtonState != 0x7F) {
  3951  001126  0E7F               	movlw	127
  3952  001128  0100               	movlb	0	; () banked
  3953  00112A  19DC               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3954  00112C  B4D8               	btfsc	status,2,c
  3955  00112E  D00C               	goto	l2336
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;Button.c: 59: ThisEvent.EventType = DBButtonDown;
  3959  001130  0E05               	movlw	5
  3960  001132  0100               	movlb	0	; () banked
  3961  001134  6FD9               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;Button.c: 60: PostButtonDebounceSM(ThisEvent);
  3965  001136  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3966  00113A  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3967  00113E  C0DB  F0D7         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3968  001142  EC78  F00A         	call	_PostButtonDebounceSM	;wreg free
  3969                           
  3970                           ;Button.c: 62: } else {
  3971  001146  D00B               	goto	l2340
  3972  001148                     l2336:
  3973                           
  3974                           ;Button.c: 64: ThisEvent.EventType = DBButtonUp;
  3975  001148  0E06               	movlw	6
  3976  00114A  0100               	movlb	0	; () banked
  3977  00114C  6FD9               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Button.c: 65: PostButtonDebounceSM(ThisEvent);
  3981  00114E  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3982  001152  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3983  001156  C0DB  F0D7         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3984  00115A  EC78  F00A         	call	_PostButtonDebounceSM	;wreg free
  3985  00115E                     l2340:
  3986                           
  3987                           ;Button.c: 66: }
  3988                           ;Button.c: 67: }
  3989                           ;Button.c: 69: LastButtonState = CurrentButtonState;
  3990  00115E  C0DC  F08D         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  3991                           
  3992                           ;Button.c: 71: return ReturnVal;
  3993  001162  0100               	movlb	0	; () banked
  3994  001164  51D8               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  3995  001166  0012               	return	
  3996  001168                     __end_of_CheckButtonEvents:
  3997                           	opt stack 0
  3998                           tosu	equ	0xFFF
  3999                           tosh	equ	0xFFE
  4000                           tosl	equ	0xFFD
  4001                           pclath	equ	0xFFA
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           indf1	equ	0xFE7
  4012                           postinc1	equ	0xFE6
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _ES_Initialize *****************
  4023 ;; Defined at:
  4024 ;;		line 242 in file "ES_Framework.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  NewRate         2   33[BANK0 ] enum E15422
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  i               1   35[BANK0 ] unsigned char 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      enum E15493
  4031 ;; Registers used:
  4032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4038 ;;      Params:         0       2       0       0
  4039 ;;      Locals:         0       1       0       0
  4040 ;;      Temps:          0       0       0       0
  4041 ;;      Totals:         0       3       0       0
  4042 ;;Total ram usage:        3 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:   10
  4045 ;; This function calls:
  4046 ;;		_ES_InitQueue
  4047 ;;		_ES_Timer_Init
  4048 ;;		_InitAnalogService
  4049 ;;		_InitCan_XmitService
  4050 ;;		_InitializeButtonDebounce
  4051 ;; This function is called by:
  4052 ;;		_main
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text24
  4057  0006F8                     __ptext24:
  4058                           	opt stack 0
  4059  0006F8                     _ES_Initialize:
  4060                           	opt stack 20
  4061                           
  4062                           ;ES_Framework.c: 243: uint8_t i;
  4063                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;incstack = 0
  4067  0006F8  C0D9  F0BA         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4068  0006FC  C0DA  F0BB         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4069  000700  EC99  F00A         	call	_ES_Timer_Init	;wreg free
  4070                           
  4071                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4072  000704  0E00               	movlw	0
  4073  000706  0100               	movlb	0	; () banked
  4074  000708  6FDB               	movwf	ES_Initialize@i& (0+255),b
  4075  00070A                     l2748:
  4076                           
  4077                           ; BSR set to: 0
  4078  00070A  0E02               	movlw	2
  4079  00070C  0100               	movlb	0	; () banked
  4080  00070E  65DB               	cpfsgt	ES_Initialize@i& (0+255),b
  4081  000710  D001               	goto	l2752
  4082  000712  D066               	goto	l2772
  4083  000714                     l2752:
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4087                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4088  000714  0100               	movlb	0	; () banked
  4089  000716  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4090  000718  0D04               	mullw	4
  4091  00071A  0E50               	movlw	low _ServDescList
  4092  00071C  24F3               	addwf	prodl,w,c
  4093  00071E  6EF6               	movwf	tblptrl,c
  4094  000720  0E03               	movlw	high _ServDescList
  4095  000722  20F4               	addwfc	prodh,w,c
  4096  000724  6EF7               	movwf	tblptrh,c
  4097  000726                     	if	0	;There are less than 3 active tblptr bytes
  4098  000726                     	endif
  4099  000726  0009               	tblrd		*+
  4100  000728  50F5               	movf	tablat,w,c
  4101  00072A  0009               	tblrd		*+
  4102  00072C  10F5               	iorwf	tablat,w,c
  4103  00072E  B4D8               	btfsc	status,2,c
  4104  000730  D013               	goto	l2756
  4105                           
  4106                           ; BSR set to: 0
  4107  000732  0100               	movlb	0	; () banked
  4108  000734  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4109  000736  0D04               	mullw	4
  4110  000738  0E02               	movlw	2
  4111  00073A  26F3               	addwf	prodl,f,c
  4112  00073C  0E00               	movlw	0
  4113  00073E  22F4               	addwfc	prodh,f,c
  4114  000740  0E50               	movlw	low _ServDescList
  4115  000742  24F3               	addwf	prodl,w,c
  4116  000744  6EF6               	movwf	tblptrl,c
  4117  000746  0E03               	movlw	high _ServDescList
  4118  000748  20F4               	addwfc	prodh,w,c
  4119  00074A  6EF7               	movwf	tblptrh,c
  4120  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4121  00074C                     	endif
  4122  00074C  0009               	tblrd		*+
  4123  00074E  50F5               	movf	tablat,w,c
  4124  000750  0009               	tblrd		*+
  4125  000752  10F5               	iorwf	tablat,w,c
  4126  000754  A4D8               	btfss	status,2,c
  4127  000756  D002               	goto	l2760
  4128  000758                     l2756:
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;ES_Framework.c: 249: return FailedPointer;
  4132  000758  0E03               	movlw	3
  4133                           
  4134                           ; BSR set to: 0
  4135  00075A  0012               	return	
  4136  00075C                     l2760:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4140  00075C  0100               	movlb	0	; () banked
  4141  00075E  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4142  000760  0D03               	mullw	3
  4143  000762  0E5C               	movlw	low _EventQueues
  4144  000764  24F3               	addwf	prodl,w,c
  4145  000766  6EF6               	movwf	tblptrl,c
  4146  000768  0E03               	movlw	high _EventQueues
  4147  00076A  20F4               	addwfc	prodh,w,c
  4148  00076C  6EF7               	movwf	tblptrh,c
  4149  00076E                     	if	0	;There are less than 3 active tblptr bytes
  4150  00076E                     	endif
  4151  00076E  0009               	tblrd		*+
  4152  000770  CFF5 F0B8          	movff	tablat,ES_InitQueue@pBlock
  4153  000774  000A               	tblrd		*-
  4154  000776  CFF5 F0B9          	movff	tablat,ES_InitQueue@pBlock+1
  4155  00077A  0100               	movlb	0	; () banked
  4156  00077C  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4157  00077E  0D03               	mullw	3
  4158  000780  0E02               	movlw	2
  4159  000782  26F3               	addwf	prodl,f,c
  4160  000784  0E00               	movlw	0
  4161  000786  22F4               	addwfc	prodh,f,c
  4162  000788  0E5C               	movlw	low _EventQueues
  4163  00078A  24F3               	addwf	prodl,w,c
  4164  00078C  6EF6               	movwf	tblptrl,c
  4165  00078E  0E03               	movlw	high _EventQueues
  4166  000790  20F4               	addwfc	prodh,w,c
  4167  000792  6EF7               	movwf	tblptrh,c
  4168  000794                     	if	0	;There are less than 3 active tblptr bytes
  4169  000794                     	endif
  4170  000794  0008               	tblrd		*
  4171  000796  CFF5 F0BA          	movff	tablat,ES_InitQueue@BlockSize
  4172  00079A  EC7C  F009         	call	_ES_InitQueue	;wreg free
  4173                           
  4174                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  4175  00079E  0100               	movlb	0	; () banked
  4176  0007A0  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4177  0007A2  0D04               	mullw	4
  4178  0007A4  0E50               	movlw	low _ServDescList
  4179  0007A6  24F3               	addwf	prodl,w,c
  4180  0007A8  6EF6               	movwf	tblptrl,c
  4181  0007AA  0E03               	movlw	high _ServDescList
  4182  0007AC  20F4               	addwfc	prodh,w,c
  4183  0007AE  6EF7               	movwf	tblptrh,c
  4184  0007B0                     	if	0	;There are less than 3 active tblptr bytes
  4185  0007B0                     	endif
  4186  0007B0  D801               	call	u1618
  4187  0007B2  D00E               	goto	u1619
  4188  0007B4                     u1618:
  4189  0007B4  0005               	push	
  4190  0007B6  6EFA               	movwf	pclath,c
  4191  0007B8  0009               	tblrd		*+
  4192  0007BA  50F5               	movf	tablat,w,c
  4193  0007BC  6EFD               	movwf	tosl,c
  4194  0007BE  0009               	tblrd		*+
  4195  0007C0  50F5               	movf	tablat,w,c
  4196  0007C2  6EFE               	movwf	tosh,c
  4197  0007C4  50F8               	movf	tblptru,w,c
  4198  0007C6  6EFF               	movwf	tosu,c
  4199  0007C8  50FA               	movf	pclath,w,c
  4200  0007CA  0100               	movlb	0	; () banked
  4201  0007CC  51DB               	movf	ES_Initialize@i& (0+255),w,b
  4202  0007CE  0012               	return		;indir
  4203  0007D0                     u1619:
  4204  0007D0  06E8               	decf	wreg,f,c
  4205  0007D2  B4D8               	btfsc	status,2,c
  4206  0007D4  D002               	goto	l2768
  4207                           
  4208                           ;ES_Framework.c: 254: return FailedInit;
  4209  0007D6  0E05               	movlw	5
  4210  0007D8  0012               	return	
  4211  0007DA                     l2768:
  4212  0007DA  0100               	movlb	0	; () banked
  4213  0007DC  2BDB               	incf	ES_Initialize@i& (0+255),f,b
  4214  0007DE  D795               	goto	l2748
  4215  0007E0                     l2772:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;ES_Framework.c: 255: }
  4219                           ;ES_Framework.c: 256: return Success;
  4220  0007E0  0E00               	movlw	0
  4221  0007E2  0012               	return	
  4222  0007E4                     __end_of_ES_Initialize:
  4223                           	opt stack 0
  4224                           tosu	equ	0xFFF
  4225                           tosh	equ	0xFFE
  4226                           tosl	equ	0xFFD
  4227                           pclath	equ	0xFFA
  4228                           tblptru	equ	0xFF8
  4229                           tblptrh	equ	0xFF7
  4230                           tblptrl	equ	0xFF6
  4231                           tablat	equ	0xFF5
  4232                           prodh	equ	0xFF4
  4233                           prodl	equ	0xFF3
  4234                           intcon	equ	0xFF2
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           indf1	equ	0xFE7
  4238                           postinc1	equ	0xFE6
  4239                           fsr1h	equ	0xFE2
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _InitAnalogService *****************
  4249 ;; Defined at:
  4250 ;;		line 31 in file "Analog_Service.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  Priority        1    wreg     unsigned char 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  Priority        1   32[BANK0 ] unsigned char 
  4255 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      unsigned char 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4265 ;;      Params:         0       0       0       0
  4266 ;;      Locals:         0       4       0       0
  4267 ;;      Temps:          0       0       0       0
  4268 ;;      Totals:         0       4       0       0
  4269 ;;Total ram usage:        4 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    9
  4272 ;; This function calls:
  4273 ;;		_ES_PostToService
  4274 ;; This function is called by:
  4275 ;;		_ES_Initialize
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text25
  4280  00139E                     __ptext25:
  4281                           	opt stack 0
  4282  00139E                     _InitAnalogService:
  4283                           	opt stack 20
  4284                           
  4285                           ;incstack = 0
  4286                           ;InitAnalogService@Priority stored from wreg
  4287  00139E  0100               	movlb	0	; () banked
  4288  0013A0  6FD8               	movwf	InitAnalogService@Priority& (0+255),b
  4289                           
  4290                           ;Analog_Service.c: 33: ES_Event ThisEvent;
  4291                           ;Analog_Service.c: 34: MyPriority = Priority;
  4292  0013A2  C0D8  F089         	movff	InitAnalogService@Priority,Analog_Service@MyPriority
  4293                           
  4294                           ;Analog_Service.c: 37: ThisEvent.EventType = ES_INIT;
  4295  0013A6  0E02               	movlw	2
  4296  0013A8  0100               	movlb	0	; () banked
  4297  0013AA  6FD5               	movwf	InitAnalogService@ThisEvent& (0+255),b
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;Analog_Service.c: 38: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4301  0013AC  C0D5  F0CF         	movff	InitAnalogService@ThisEvent,ES_PostToService@TheEvent
  4302  0013B0  C0D6  F0D0         	movff	InitAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  4303  0013B4  C0D7  F0D1         	movff	InitAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  4304  0013B8  0100               	movlb	0	; () banked
  4305  0013BA  5189               	movf	Analog_Service@MyPriority& (0+255),w,b
  4306  0013BC  ECD5  F007         	call	_ES_PostToService
  4307  0013C0  06E8               	decf	wreg,f,c
  4308  0013C2  A4D8               	btfss	status,2,c
  4309  0013C4  D002               	goto	l2708
  4310                           
  4311                           ;Analog_Service.c: 39: {
  4312                           ;Analog_Service.c: 40: return 1;
  4313  0013C6  0E01               	movlw	1
  4314                           
  4315                           ;Analog_Service.c: 41: }else
  4316  0013C8  0012               	return	
  4317  0013CA                     l2708:
  4318                           
  4319                           ;Analog_Service.c: 42: {
  4320                           ;Analog_Service.c: 43: return 0;
  4321  0013CA  0E00               	movlw	0
  4322  0013CC  0012               	return	
  4323  0013CE                     __end_of_InitAnalogService:
  4324                           	opt stack 0
  4325                           tosu	equ	0xFFF
  4326                           tosh	equ	0xFFE
  4327                           tosl	equ	0xFFD
  4328                           pclath	equ	0xFFA
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           postinc0	equ	0xFEE
  4337                           wreg	equ	0xFE8
  4338                           indf1	equ	0xFE7
  4339                           postinc1	equ	0xFE6
  4340                           fsr1h	equ	0xFE2
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _InitCan_XmitService *****************
  4350 ;; Defined at:
  4351 ;;		line 86 in file "Can_XmitService.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  Priority        1    wreg     unsigned char 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  Priority        1   32[BANK0 ] unsigned char 
  4356 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      unsigned char 
  4359 ;; Registers used:
  4360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4366 ;;      Params:         0       0       0       0
  4367 ;;      Locals:         0       4       0       0
  4368 ;;      Temps:          0       0       0       0
  4369 ;;      Totals:         0       4       0       0
  4370 ;;Total ram usage:        4 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    9
  4373 ;; This function calls:
  4374 ;;		_ES_PostToService
  4375 ;; This function is called by:
  4376 ;;		_ES_Initialize
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text26
  4381  0013CE                     __ptext26:
  4382                           	opt stack 0
  4383  0013CE                     _InitCan_XmitService:
  4384                           	opt stack 20
  4385                           
  4386                           ;incstack = 0
  4387                           ;InitCan_XmitService@Priority stored from wreg
  4388  0013CE  0100               	movlb	0	; () banked
  4389  0013D0  6FD8               	movwf	InitCan_XmitService@Priority& (0+255),b
  4390                           
  4391                           ;Can_XmitService.c: 88: ES_Event ThisEvent;
  4392                           ;Can_XmitService.c: 90: MyPriority = Priority;
  4393  0013D2  C0D8  F08A         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  4394                           
  4395                           ;Can_XmitService.c: 93: ThisEvent.EventType = ES_INIT;
  4396  0013D6  0E02               	movlw	2
  4397  0013D8  0100               	movlb	0	; () banked
  4398  0013DA  6FD5               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;Can_XmitService.c: 94: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4402  0013DC  C0D5  F0CF         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  4403  0013E0  C0D6  F0D0         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  4404  0013E4  C0D7  F0D1         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  4405  0013E8  0100               	movlb	0	; () banked
  4406  0013EA  518A               	movf	Can_XmitService@MyPriority& (0+255),w,b
  4407  0013EC  ECD5  F007         	call	_ES_PostToService
  4408  0013F0  06E8               	decf	wreg,f,c
  4409  0013F2  A4D8               	btfss	status,2,c
  4410  0013F4  D002               	goto	l2638
  4411                           
  4412                           ;Can_XmitService.c: 95: {
  4413                           ;Can_XmitService.c: 96: return 1;
  4414  0013F6  0E01               	movlw	1
  4415                           
  4416                           ;Can_XmitService.c: 97: }else
  4417  0013F8  0012               	return	
  4418  0013FA                     l2638:
  4419                           
  4420                           ;Can_XmitService.c: 98: {
  4421                           ;Can_XmitService.c: 99: return 0;
  4422  0013FA  0E00               	movlw	0
  4423  0013FC  0012               	return	
  4424  0013FE                     __end_of_InitCan_XmitService:
  4425                           	opt stack 0
  4426                           tosu	equ	0xFFF
  4427                           tosh	equ	0xFFE
  4428                           tosl	equ	0xFFD
  4429                           pclath	equ	0xFFA
  4430                           tblptru	equ	0xFF8
  4431                           tblptrh	equ	0xFF7
  4432                           tblptrl	equ	0xFF6
  4433                           tablat	equ	0xFF5
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           intcon	equ	0xFF2
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           indf1	equ	0xFE7
  4440                           postinc1	equ	0xFE6
  4441                           fsr1h	equ	0xFE2
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           postdec2	equ	0xFDD
  4446                           fsr2h	equ	0xFDA
  4447                           fsr2l	equ	0xFD9
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function _InitializeButtonDebounce *****************
  4451 ;; Defined at:
  4452 ;;		line 27 in file "Button.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  Priority        1    wreg     unsigned char 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  Priority        1    5[BANK0 ] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      unsigned char 
  4459 ;; Registers used:
  4460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4466 ;;      Params:         0       0       0       0
  4467 ;;      Locals:         0       1       0       0
  4468 ;;      Temps:          0       0       0       0
  4469 ;;      Totals:         0       1       0       0
  4470 ;;Total ram usage:        1 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    7
  4473 ;; This function calls:
  4474 ;;		_ES_Timer_InitTimer
  4475 ;;		_GetInputLine
  4476 ;;		_InitButtonHW
  4477 ;; This function is called by:
  4478 ;;		_ES_Initialize
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text27
  4483  0013FE                     __ptext27:
  4484                           	opt stack 0
  4485  0013FE                     _InitializeButtonDebounce:
  4486                           	opt stack 22
  4487                           
  4488                           ;incstack = 0
  4489                           ;InitializeButtonDebounce@Priority stored from wreg
  4490  0013FE  0100               	movlb	0	; () banked
  4491  001400  6FBD               	movwf	InitializeButtonDebounce@Priority& (0+255),b
  4492                           
  4493                           ;Button.c: 29: MyPriority = Priority;
  4494  001402  C0BD  F08F         	movff	InitializeButtonDebounce@Priority,_MyPriority
  4495                           
  4496                           ;Button.c: 30: InitButtonHW();
  4497  001406  ECA0  F00A         	call	_InitButtonHW	;wreg free
  4498                           
  4499                           ;Button.c: 33: LastButtonState = GetInputLine();
  4500  00140A  ECAA  F00A         	call	_GetInputLine	;wreg free
  4501  00140E  0100               	movlb	0	; () banked
  4502  001410  6F8D               	movwf	_LastButtonState& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;Button.c: 35: CurrentState = Debouncing;
  4506  001412  0E00               	movlw	0
  4507  001414  0100               	movlb	0	; () banked
  4508  001416  6F8C               	movwf	_CurrentState& (0+255),b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Button.c: 37: ES_Timer_InitTimer(1,3);
  4512  001418  0E00               	movlw	0
  4513  00141A  0100               	movlb	0	; () banked
  4514  00141C  6FB9               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  4515  00141E  0E03               	movlw	3
  4516  001420  6FB8               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  4517  001422  0E01               	movlw	1
  4518  001424  EC1B  F007         	call	_ES_Timer_InitTimer
  4519                           
  4520                           ;Button.c: 39: return 1;
  4521  001428  0E01               	movlw	1
  4522  00142A  0012               	return	
  4523  00142C                     __end_of_InitializeButtonDebounce:
  4524                           	opt stack 0
  4525                           tosu	equ	0xFFF
  4526                           tosh	equ	0xFFE
  4527                           tosl	equ	0xFFD
  4528                           pclath	equ	0xFFA
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           indf1	equ	0xFE7
  4539                           postinc1	equ	0xFE6
  4540                           fsr1h	equ	0xFE2
  4541                           fsr1l	equ	0xFE1
  4542                           indf2	equ	0xFDF
  4543                           postinc2	equ	0xFDE
  4544                           postdec2	equ	0xFDD
  4545                           fsr2h	equ	0xFDA
  4546                           fsr2l	equ	0xFD9
  4547                           status	equ	0xFD8
  4548                           
  4549 ;; *************** function _InitButtonHW *****************
  4550 ;; Defined at:
  4551 ;;		line 134 in file "Button.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4565 ;;      Params:         0       0       0       0
  4566 ;;      Locals:         0       0       0       0
  4567 ;;      Temps:          0       0       0       0
  4568 ;;      Totals:         0       0       0       0
  4569 ;;Total ram usage:        0 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    6
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_InitializeButtonDebounce
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text28
  4580  001540                     __ptext28:
  4581                           	opt stack 0
  4582  001540                     _InitButtonHW:
  4583                           	opt stack 22
  4584                           
  4585                           ;Button.c: 135: PORTC = 0x00;
  4586                           
  4587                           ;incstack = 0
  4588  001540  0E00               	movlw	0
  4589  001542  6E82               	movwf	3970,c	;volatile
  4590                           
  4591                           ;Button.c: 136: LATC = 0x00;
  4592  001544  0E00               	movlw	0
  4593  001546  6E8B               	movwf	3979,c	;volatile
  4594                           
  4595                           ;Button.c: 137: PORTC = 0xFF;
  4596  001548  6882               	setf	3970,c	;volatile
  4597  00154A  0012               	return		;funcret
  4598  00154C                     __end_of_InitButtonHW:
  4599                           	opt stack 0
  4600                           tosu	equ	0xFFF
  4601                           tosh	equ	0xFFE
  4602                           tosl	equ	0xFFD
  4603                           pclath	equ	0xFFA
  4604                           tblptru	equ	0xFF8
  4605                           tblptrh	equ	0xFF7
  4606                           tblptrl	equ	0xFF6
  4607                           tablat	equ	0xFF5
  4608                           prodh	equ	0xFF4
  4609                           prodl	equ	0xFF3
  4610                           intcon	equ	0xFF2
  4611                           postinc0	equ	0xFEE
  4612                           wreg	equ	0xFE8
  4613                           indf1	equ	0xFE7
  4614                           postinc1	equ	0xFE6
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _GetInputLine *****************
  4625 ;; Defined at:
  4626 ;;		line 129 in file "Button.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      unsigned char 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4640 ;;      Params:         0       0       0       0
  4641 ;;      Locals:         0       0       0       0
  4642 ;;      Temps:          0       0       0       0
  4643 ;;      Totals:         0       0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    6
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_InitializeButtonDebounce
  4651 ;;		_CheckButtonEvents
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text29
  4656  001554                     __ptext29:
  4657                           	opt stack 0
  4658  001554                     _GetInputLine:
  4659                           	opt stack 21
  4660                           
  4661                           ;Button.c: 131: return PORTC & 0x0F;
  4662                           
  4663                           ;incstack = 0
  4664  001554  5082               	movf	3970,w,c	;volatile
  4665  001556  0B0F               	andlw	15
  4666  001558  0012               	return	
  4667  00155A                     __end_of_GetInputLine:
  4668                           	opt stack 0
  4669                           tosu	equ	0xFFF
  4670                           tosh	equ	0xFFE
  4671                           tosl	equ	0xFFD
  4672                           pclath	equ	0xFFA
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           intcon	equ	0xFF2
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf1	equ	0xFE7
  4683                           postinc1	equ	0xFE6
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _ES_Timer_InitTimer *****************
  4694 ;; Defined at:
  4695 ;;		line 229 in file "ES_Timers.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  Num             1    wreg     unsigned char 
  4698 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  Num             1    4[BANK0 ] unsigned char 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      enum E15445
  4703 ;; Registers used:
  4704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4710 ;;      Params:         0       2       0       0
  4711 ;;      Locals:         0       1       0       0
  4712 ;;      Temps:          0       2       0       0
  4713 ;;      Totals:         0       5       0       0
  4714 ;;Total ram usage:        5 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    6
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_InitializeButtonDebounce
  4721 ;;		_RunButtonDebounceSM
  4722 ;;		_RunAnalogService
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text30
  4727  000E36                     __ptext30:
  4728                           	opt stack 0
  4729  000E36                     _ES_Timer_InitTimer:
  4730                           	opt stack 22
  4731                           
  4732                           ;incstack = 0
  4733                           ;ES_Timer_InitTimer@Num stored from wreg
  4734  000E36  0100               	movlb	0	; () banked
  4735  000E38  6FBC               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4736                           
  4737                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4738                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4739                           ;ES_Timers.c: 236: (NewTime == 0) )
  4740  000E3A  0E10               	movlw	16
  4741  000E3C  0100               	movlb	0	; () banked
  4742  000E3E  61BC               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4743  000E40  0012               	return	
  4744                           
  4745                           ; BSR set to: 0
  4746  000E42  0100               	movlb	0	; () banked
  4747  000E44  51BC               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4748  000E46  0D02               	mullw	2
  4749  000E48  0E21               	movlw	low _Timer2PostFunc
  4750  000E4A  24F3               	addwf	prodl,w,c
  4751  000E4C  6EF6               	movwf	tblptrl,c
  4752  000E4E  0E03               	movlw	high _Timer2PostFunc
  4753  000E50  20F4               	addwfc	prodh,w,c
  4754  000E52  6EF7               	movwf	tblptrh,c
  4755  000E54                     	if	0	;There are less than 3 active tblptr bytes
  4756  000E54                     	endif
  4757  000E54  0009               	tblrd		*+
  4758  000E56  50F5               	movf	tablat,w,c
  4759  000E58  0009               	tblrd		*+
  4760  000E5A  10F5               	iorwf	tablat,w,c
  4761  000E5C  B4D8               	btfsc	status,2,c
  4762  000E5E  0012               	return	
  4763                           
  4764                           ; BSR set to: 0
  4765  000E60  0100               	movlb	0	; () banked
  4766  000E62  51B8               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4767  000E64  0100               	movlb	0	; () banked
  4768  000E66  11B9               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4769  000E68  B4D8               	btfsc	status,2,c
  4770  000E6A  0012               	return	
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4774                           
  4775                           ; BSR set to: 0
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4779                           ;	Return value of _ES_Timer_InitTimer is never used
  4780  000E6C  0100               	movlb	0	; () banked
  4781  000E6E  51BC               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4782  000E70  0D02               	mullw	2
  4783  000E72  0E60               	movlw	low _TMR_TimerArray
  4784  000E74  24F3               	addwf	prodl,w,c
  4785  000E76  6ED9               	movwf	fsr2l,c
  4786  000E78  0E00               	movlw	high _TMR_TimerArray
  4787  000E7A  20F4               	addwfc	prodh,w,c
  4788  000E7C  6EDA               	movwf	fsr2h,c
  4789  000E7E  C0B8  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4790  000E82  C0B9  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4794  000E86  0100               	movlb	0	; () banked
  4795  000E88  51BC               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4796  000E8A  0D02               	mullw	2
  4797  000E8C  0E01               	movlw	low _BitNum2SetMask
  4798  000E8E  24F3               	addwf	prodl,w,c
  4799  000E90  6EF6               	movwf	tblptrl,c
  4800  000E92  0E03               	movlw	high _BitNum2SetMask
  4801  000E94  20F4               	addwfc	prodh,w,c
  4802  000E96  6EF7               	movwf	tblptrh,c
  4803  000E98                     	if	0	;There are less than 3 active tblptr bytes
  4804  000E98                     	endif
  4805  000E98  0009               	tblrd		*+
  4806  000E9A  CFF5 F0BA          	movff	tablat,??_ES_Timer_InitTimer
  4807  000E9E  0009               	tblrd		*+
  4808  000EA0  CFF5 F0BB          	movff	tablat,??_ES_Timer_InitTimer+1
  4809  000EA4  0100               	movlb	0	; () banked
  4810  000EA6  51BA               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4811  000EA8  0100               	movlb	0	; () banked
  4812  000EAA  1387               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4813  000EAC  0100               	movlb	0	; () banked
  4814  000EAE  51BB               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4815  000EB0  0100               	movlb	0	; () banked
  4816  000EB2  1388               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4817  000EB4  0012               	return	
  4818  000EB6                     __end_of_ES_Timer_InitTimer:
  4819                           	opt stack 0
  4820                           tosu	equ	0xFFF
  4821                           tosh	equ	0xFFE
  4822                           tosl	equ	0xFFD
  4823                           pclath	equ	0xFFA
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           indf1	equ	0xFE7
  4834                           postinc1	equ	0xFE6
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _ES_PostToService *****************
  4845 ;; Defined at:
  4846 ;;		line 351 in file "ES_Framework.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  WhichService    1    wreg     unsigned char 
  4849 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  WhichService    1   28[BANK0 ] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      unsigned char 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4861 ;;      Params:         0       3       0       0
  4862 ;;      Locals:         0       1       0       0
  4863 ;;      Temps:          0       2       0       0
  4864 ;;      Totals:         0       6       0       0
  4865 ;;Total ram usage:        6 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    8
  4868 ;; This function calls:
  4869 ;;		_ES_EnQueueFIFO
  4870 ;; This function is called by:
  4871 ;;		_PostButtonDebounceSM
  4872 ;;		_InitCan_XmitService
  4873 ;;		_InitAnalogService
  4874 ;;		_PostAnalogService
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text31
  4879  000FAA                     __ptext31:
  4880                           	opt stack 0
  4881  000FAA                     _ES_PostToService:
  4882                           	opt stack 18
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;incstack = 0
  4886                           ;ES_PostToService@WhichService stored from wreg
  4887  000FAA  0100               	movlb	0	; () banked
  4888  000FAC  6FD4               	movwf	ES_PostToService@WhichService& (0+255),b
  4889                           
  4890                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4891                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4892                           ;ES_Framework.c: 354: 1 )){
  4893  000FAE  0E03               	movlw	3
  4894  000FB0  0100               	movlb	0	; () banked
  4895  000FB2  61D4               	cpfslt	ES_PostToService@WhichService& (0+255),b
  4896  000FB4  D033               	goto	l2198
  4897                           
  4898                           ; BSR set to: 0
  4899  000FB6  0100               	movlb	0	; () banked
  4900  000FB8  51D4               	movf	ES_PostToService@WhichService& (0+255),w,b
  4901  000FBA  0D03               	mullw	3
  4902  000FBC  0E5C               	movlw	low _EventQueues
  4903  000FBE  24F3               	addwf	prodl,w,c
  4904  000FC0  6EF6               	movwf	tblptrl,c
  4905  000FC2  0E03               	movlw	high _EventQueues
  4906  000FC4  20F4               	addwfc	prodh,w,c
  4907  000FC6  6EF7               	movwf	tblptrh,c
  4908  000FC8                     	if	0	;There are less than 3 active tblptr bytes
  4909  000FC8                     	endif
  4910  000FC8  0009               	tblrd		*+
  4911  000FCA  CFF5 F0C4          	movff	tablat,ES_EnQueueFIFO@pBlock
  4912  000FCE  000A               	tblrd		*-
  4913  000FD0  CFF5 F0C5          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  4914  000FD4  C0CF  F0C6         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  4915  000FD8  C0D0  F0C7         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  4916  000FDC  C0D1  F0C8         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  4917  000FE0  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  4918  000FE4  06E8               	decf	wreg,f,c
  4919  000FE6  A4D8               	btfss	status,2,c
  4920  000FE8  D019               	goto	l2198
  4921                           
  4922                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4923  000FEA  0100               	movlb	0	; () banked
  4924  000FEC  51D4               	movf	ES_PostToService@WhichService& (0+255),w,b
  4925  000FEE  0D02               	mullw	2
  4926  000FF0  0E01               	movlw	low _BitNum2SetMask
  4927  000FF2  24F3               	addwf	prodl,w,c
  4928  000FF4  6EF6               	movwf	tblptrl,c
  4929  000FF6  0E03               	movlw	high _BitNum2SetMask
  4930  000FF8  20F4               	addwfc	prodh,w,c
  4931  000FFA  6EF7               	movwf	tblptrh,c
  4932  000FFC                     	if	0	;There are less than 3 active tblptr bytes
  4933  000FFC                     	endif
  4934  000FFC  0009               	tblrd		*+
  4935  000FFE  CFF5 F0D2          	movff	tablat,??_ES_PostToService
  4936  001002  0009               	tblrd		*+
  4937  001004  CFF5 F0D3          	movff	tablat,??_ES_PostToService+1
  4938  001008  0100               	movlb	0	; () banked
  4939  00100A  51D2               	movf	??_ES_PostToService& (0+255),w,b
  4940  00100C  0100               	movlb	0	; () banked
  4941  00100E  1385               	iorwf	_Ready& (0+255),f,b
  4942  001010  0100               	movlb	0	; () banked
  4943  001012  51D3               	movf	(??_ES_PostToService+1)& (0+255),w,b
  4944  001014  0100               	movlb	0	; () banked
  4945  001016  1386               	iorwf	(_Ready+1)& (0+255),f,b
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;ES_Framework.c: 356: return 1;
  4949  001018  0E01               	movlw	1
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;ES_Framework.c: 357: } else
  4953                           
  4954                           ; BSR set to: 0
  4955  00101A  0012               	return	
  4956  00101C                     l2198:
  4957                           
  4958                           ;ES_Framework.c: 358: return 0;
  4959  00101C  0E00               	movlw	0
  4960  00101E  0012               	return	
  4961  001020                     __end_of_ES_PostToService:
  4962                           	opt stack 0
  4963                           tosu	equ	0xFFF
  4964                           tosh	equ	0xFFE
  4965                           tosl	equ	0xFFD
  4966                           pclath	equ	0xFFA
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           intcon	equ	0xFF2
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           indf1	equ	0xFE7
  4977                           postinc1	equ	0xFE6
  4978                           fsr1h	equ	0xFE2
  4979                           fsr1l	equ	0xFE1
  4980                           indf2	equ	0xFDF
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _ES_EnQueueFIFO *****************
  4988 ;; Defined at:
  4989 ;;		line 85 in file "ES_Queue.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4992 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  4993 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  4996 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  4997 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  1    wreg      unsigned char 
  5000 ;; Registers used:
  5001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5007 ;;      Params:         0       5       0       0
  5008 ;;      Locals:         0       3       0       0
  5009 ;;      Temps:          0       3       0       0
  5010 ;;      Totals:         0      11       0       0
  5011 ;;Total ram usage:       11 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    7
  5014 ;; This function calls:
  5015 ;;		___awmod
  5016 ;;		___wmul
  5017 ;; This function is called by:
  5018 ;;		_ES_PostAll
  5019 ;;		_ES_PostToService
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text32
  5024  0007E4                     __ptext32:
  5025                           	opt stack 0
  5026  0007E4                     _ES_EnQueueFIFO:
  5027                           	opt stack 18
  5028                           
  5029                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5030                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5031                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5032                           
  5033                           ;incstack = 0
  5034  0007E4  C0C4  F0CD         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5035  0007E8  C0C5  F0CE         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5036                           
  5037                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5038  0007EC  C0CD  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5039  0007F0  C0CE  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5040  0007F4  0100               	movlb	0	; () banked
  5041  0007F6  EE10 F002          	lfsr	1,2
  5042  0007FA  51CD               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5043  0007FC  26E1               	addwf	fsr1l,f,c
  5044  0007FE  51CE               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5045  000800  22E2               	addwfc	fsr1h,f,c
  5046  000802  50DE               	movf	postinc2,w,c
  5047  000804  5CE6               	subwf	postinc1,w,c
  5048  000806  B0D8               	btfsc	status,0,c
  5049  000808  D05C               	goto	l2182
  5050                           
  5051                           ; BSR set to: 0
  5052                           
  5053                           ;ES_Queue.c: 92: {
  5054                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5055  00080A  CFF2 F0CC          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5056  00080E  9EF2               	bcf	intcon,7,c	;volatile
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5060                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5061                           
  5062                           ; BSR set to: 0
  5063  000810  C0CD  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5064  000814  C0CE  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5065  000818  50DF               	movf	indf2,w,c
  5066  00081A  0100               	movlb	0	; () banked
  5067  00081C  6FC9               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5068  00081E  0100               	movlb	0	; () banked
  5069  000820  51C9               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5070  000822  0100               	movlb	0	; () banked
  5071  000824  6FBA               	movwf	___awmod@divisor& (0+255),b
  5072  000826  6BBB               	clrf	(___awmod@divisor+1)& (0+255),b
  5073  000828  0100               	movlb	0	; () banked
  5074  00082A  EE20 F002          	lfsr	2,2
  5075  00082E  51CD               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5076  000830  26D9               	addwf	fsr2l,f,c
  5077  000832  51CE               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5078  000834  22DA               	addwfc	fsr2h,f,c
  5079  000836  50DF               	movf	indf2,w,c
  5080  000838  0100               	movlb	0	; () banked
  5081  00083A  6FCA               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5082  00083C  0100               	movlb	0	; () banked
  5083  00083E  EE20 F001          	lfsr	2,1
  5084  000842  51CD               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5085  000844  26D9               	addwf	fsr2l,f,c
  5086  000846  51CE               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5087  000848  22DA               	addwfc	fsr2h,f,c
  5088  00084A  50DF               	movf	indf2,w,c
  5089  00084C  0100               	movlb	0	; () banked
  5090  00084E  6FCB               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5091  000850  0100               	movlb	0	; () banked
  5092  000852  51CB               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5093  000854  0100               	movlb	0	; () banked
  5094  000856  25CA               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5095  000858  0100               	movlb	0	; () banked
  5096  00085A  6FB8               	movwf	___awmod@dividend& (0+255),b
  5097  00085C  0100               	movlb	0	; () banked
  5098  00085E  6BB9               	clrf	(___awmod@dividend+1)& (0+255),b
  5099  000860  0100               	movlb	0	; () banked
  5100  000862  37B9               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5101  000864  EC36  F006         	call	___awmod	;wreg free
  5102  000868  0E01               	movlw	1
  5103  00086A  0100               	movlb	0	; () banked
  5104  00086C  25B8               	addwf	?___awmod& (0+255),w,b
  5105  00086E  0100               	movlb	0	; () banked
  5106  000870  6FBE               	movwf	___wmul@multiplier& (0+255),b
  5107  000872  0E00               	movlw	0
  5108  000874  0100               	movlb	0	; () banked
  5109  000876  21B9               	addwfc	(?___awmod+1)& (0+255),w,b
  5110  000878  0100               	movlb	0	; () banked
  5111  00087A  6FBF               	movwf	(___wmul@multiplier+1)& (0+255),b
  5112  00087C  0E00               	movlw	0
  5113  00087E  0100               	movlb	0	; () banked
  5114  000880  6FC1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5115  000882  0E03               	movlw	3
  5116  000884  6FC0               	movwf	___wmul@multiplicand& (0+255),b
  5117  000886  EC9A  F009         	call	___wmul	;wreg free
  5118  00088A  0100               	movlb	0	; () banked
  5119  00088C  51BE               	movf	?___wmul& (0+255),w,b
  5120  00088E  0100               	movlb	0	; () banked
  5121  000890  25C4               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5122  000892  6ED9               	movwf	fsr2l,c
  5123  000894  0100               	movlb	0	; () banked
  5124  000896  51BF               	movf	(?___wmul+1)& (0+255),w,b
  5125  000898  0100               	movlb	0	; () banked
  5126  00089A  21C5               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5127  00089C  6EDA               	movwf	fsr2h,c
  5128  00089E  C0C6  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5129  0008A2  C0C7  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5130  0008A6  C0C8  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5134  0008AA  0100               	movlb	0	; () banked
  5135  0008AC  EE20 F002          	lfsr	2,2
  5136  0008B0  51CD               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5137  0008B2  26D9               	addwf	fsr2l,f,c
  5138  0008B4  51CE               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5139  0008B6  22DA               	addwfc	fsr2h,f,c
  5140  0008B8  2ADF               	incf	indf2,f,c
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5144  0008BA  C0CC  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;ES_Queue.c: 101: return(1);
  5148  0008BE  0E01               	movlw	1
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;ES_Queue.c: 102: }else
  5152                           
  5153                           ; BSR set to: 0
  5154  0008C0  0012               	return	
  5155  0008C2                     l2182:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;ES_Queue.c: 103: return(0);
  5159  0008C2  0E00               	movlw	0
  5160                           
  5161                           ; BSR set to: 0
  5162  0008C4  0012               	return	
  5163  0008C6                     __end_of_ES_EnQueueFIFO:
  5164                           	opt stack 0
  5165                           tosu	equ	0xFFF
  5166                           tosh	equ	0xFFE
  5167                           tosl	equ	0xFFD
  5168                           pclath	equ	0xFFA
  5169                           tblptru	equ	0xFF8
  5170                           tblptrh	equ	0xFF7
  5171                           tblptrl	equ	0xFF6
  5172                           tablat	equ	0xFF5
  5173                           prodh	equ	0xFF4
  5174                           prodl	equ	0xFF3
  5175                           intcon	equ	0xFF2
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           indf1	equ	0xFE7
  5179                           postinc1	equ	0xFE6
  5180                           fsr1h	equ	0xFE2
  5181                           fsr1l	equ	0xFE1
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function ___wmul *****************
  5190 ;; Defined at:
  5191 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5194 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  product         2   10[BANK0 ] unsigned int 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  2    6[BANK0 ] unsigned int 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, prodl, prodh
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5206 ;;      Params:         0       4       0       0
  5207 ;;      Locals:         0       2       0       0
  5208 ;;      Temps:          0       0       0       0
  5209 ;;      Totals:         0       6       0       0
  5210 ;;Total ram usage:        6 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    6
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_ES_EnQueueFIFO
  5217 ;;		_ES_DeQueue
  5218 ;;		_ES_EnQueueLIFO
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text33
  5223  001334                     __ptext33:
  5224                           	opt stack 0
  5225  001334                     ___wmul:
  5226                           	opt stack 18
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;incstack = 0
  5230  001334  0100               	movlb	0	; () banked
  5231  001336  51BE               	movf	___wmul@multiplier& (0+255),w,b
  5232  001338  0100               	movlb	0	; () banked
  5233  00133A  03C0               	mulwf	___wmul@multiplicand& (0+255),b
  5234  00133C  CFF3 F0C2          	movff	prodl,___wmul@product
  5235  001340  CFF4 F0C3          	movff	prodh,___wmul@product+1
  5236  001344  0100               	movlb	0	; () banked
  5237  001346  51BE               	movf	___wmul@multiplier& (0+255),w,b
  5238  001348  0100               	movlb	0	; () banked
  5239  00134A  03C1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5240  00134C  50F3               	movf	prodl,w,c
  5241  00134E  0100               	movlb	0	; () banked
  5242  001350  27C3               	addwf	(___wmul@product+1)& (0+255),f,b
  5243  001352  0100               	movlb	0	; () banked
  5244  001354  51BF               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5245  001356  0100               	movlb	0	; () banked
  5246  001358  03C0               	mulwf	___wmul@multiplicand& (0+255),b
  5247  00135A  50F3               	movf	prodl,w,c
  5248  00135C  0100               	movlb	0	; () banked
  5249  00135E  27C3               	addwf	(___wmul@product+1)& (0+255),f,b
  5250                           
  5251                           ; BSR set to: 0
  5252  001360  C0C2  F0BE         	movff	___wmul@product,?___wmul
  5253  001364  C0C3  F0BF         	movff	___wmul@product+1,?___wmul+1
  5254  001368  0012               	return	
  5255  00136A                     __end_of___wmul:
  5256                           	opt stack 0
  5257                           tosu	equ	0xFFF
  5258                           tosh	equ	0xFFE
  5259                           tosl	equ	0xFFD
  5260                           pclath	equ	0xFFA
  5261                           tblptru	equ	0xFF8
  5262                           tblptrh	equ	0xFF7
  5263                           tblptrl	equ	0xFF6
  5264                           tablat	equ	0xFF5
  5265                           prodh	equ	0xFF4
  5266                           prodl	equ	0xFF3
  5267                           intcon	equ	0xFF2
  5268                           postinc0	equ	0xFEE
  5269                           wreg	equ	0xFE8
  5270                           indf1	equ	0xFE7
  5271                           postinc1	equ	0xFE6
  5272                           fsr1h	equ	0xFE2
  5273                           fsr1l	equ	0xFE1
  5274                           indf2	equ	0xFDF
  5275                           postinc2	equ	0xFDE
  5276                           postdec2	equ	0xFDD
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function ___awmod *****************
  5282 ;; Defined at:
  5283 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  dividend        2    0[BANK0 ] int 
  5286 ;;  divisor         2    2[BANK0 ] int 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  sign            1    5[BANK0 ] unsigned char 
  5289 ;;  counter         1    4[BANK0 ] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  2    0[BANK0 ] int 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5299 ;;      Params:         0       4       0       0
  5300 ;;      Locals:         0       2       0       0
  5301 ;;      Temps:          0       0       0       0
  5302 ;;      Totals:         0       6       0       0
  5303 ;;Total ram usage:        6 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    6
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		_ES_EnQueueFIFO
  5310 ;;		i2_ES_EnQueueFIFO
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text34
  5315  000C6C                     __ptext34:
  5316                           	opt stack 0
  5317  000C6C                     ___awmod:
  5318                           	opt stack 18
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;incstack = 0
  5322  000C6C  0E00               	movlw	0
  5323  000C6E  0100               	movlb	0	; () banked
  5324  000C70  6FBD               	movwf	___awmod@sign& (0+255),b
  5325                           
  5326                           ; BSR set to: 0
  5327  000C72  0100               	movlb	0	; () banked
  5328  000C74  AFB9               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5329  000C76  D008               	goto	l2138
  5330                           
  5331                           ; BSR set to: 0
  5332  000C78  0100               	movlb	0	; () banked
  5333  000C7A  6DB8               	negf	___awmod@dividend& (0+255),b
  5334  000C7C  1FB9               	comf	(___awmod@dividend+1)& (0+255),f,b
  5335  000C7E  B0D8               	btfsc	status,0,c
  5336  000C80  2BB9               	incf	(___awmod@dividend+1)& (0+255),f,b
  5337                           
  5338                           ; BSR set to: 0
  5339  000C82  0E01               	movlw	1
  5340  000C84  0100               	movlb	0	; () banked
  5341  000C86  6FBD               	movwf	___awmod@sign& (0+255),b
  5342  000C88                     l2138:
  5343                           
  5344                           ; BSR set to: 0
  5345  000C88  0100               	movlb	0	; () banked
  5346  000C8A  AFBB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5347  000C8C  D005               	goto	l2142
  5348                           
  5349                           ; BSR set to: 0
  5350  000C8E  0100               	movlb	0	; () banked
  5351  000C90  6DBA               	negf	___awmod@divisor& (0+255),b
  5352  000C92  1FBB               	comf	(___awmod@divisor+1)& (0+255),f,b
  5353  000C94  B0D8               	btfsc	status,0,c
  5354  000C96  2BBB               	incf	(___awmod@divisor+1)& (0+255),f,b
  5355  000C98                     l2142:
  5356                           
  5357                           ; BSR set to: 0
  5358  000C98  0100               	movlb	0	; () banked
  5359  000C9A  51BA               	movf	___awmod@divisor& (0+255),w,b
  5360  000C9C  0100               	movlb	0	; () banked
  5361  000C9E  11BB               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5362  000CA0  B4D8               	btfsc	status,2,c
  5363  000CA2  D026               	goto	l2158
  5364                           
  5365                           ; BSR set to: 0
  5366  000CA4  0E01               	movlw	1
  5367  000CA6  0100               	movlb	0	; () banked
  5368  000CA8  6FBC               	movwf	___awmod@counter& (0+255),b
  5369  000CAA  D006               	goto	l2148
  5370  000CAC                     l2146:
  5371                           
  5372                           ; BSR set to: 0
  5373  000CAC  0100               	movlb	0	; () banked
  5374  000CAE  90D8               	bcf	status,0,c
  5375  000CB0  37BA               	rlcf	___awmod@divisor& (0+255),f,b
  5376  000CB2  37BB               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5377  000CB4  0100               	movlb	0	; () banked
  5378  000CB6  2BBC               	incf	___awmod@counter& (0+255),f,b
  5379  000CB8                     l2148:
  5380                           
  5381                           ; BSR set to: 0
  5382  000CB8  0100               	movlb	0	; () banked
  5383  000CBA  AFBB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5384  000CBC  D7F7               	goto	l2146
  5385  000CBE                     l2150:
  5386                           
  5387                           ; BSR set to: 0
  5388  000CBE  0100               	movlb	0	; () banked
  5389  000CC0  51BA               	movf	___awmod@divisor& (0+255),w,b
  5390  000CC2  0100               	movlb	0	; () banked
  5391  000CC4  5DB8               	subwf	___awmod@dividend& (0+255),w,b
  5392  000CC6  0100               	movlb	0	; () banked
  5393  000CC8  51BB               	movf	(___awmod@divisor+1)& (0+255),w,b
  5394  000CCA  0100               	movlb	0	; () banked
  5395  000CCC  59B9               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5396  000CCE  A0D8               	btfss	status,0,c
  5397  000CD0  D008               	goto	l2154
  5398                           
  5399                           ; BSR set to: 0
  5400  000CD2  0100               	movlb	0	; () banked
  5401  000CD4  51BA               	movf	___awmod@divisor& (0+255),w,b
  5402  000CD6  0100               	movlb	0	; () banked
  5403  000CD8  5FB8               	subwf	___awmod@dividend& (0+255),f,b
  5404  000CDA  0100               	movlb	0	; () banked
  5405  000CDC  51BB               	movf	(___awmod@divisor+1)& (0+255),w,b
  5406  000CDE  0100               	movlb	0	; () banked
  5407  000CE0  5BB9               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5408  000CE2                     l2154:
  5409                           
  5410                           ; BSR set to: 0
  5411  000CE2  0100               	movlb	0	; () banked
  5412  000CE4  90D8               	bcf	status,0,c
  5413  000CE6  33BB               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5414  000CE8  33BA               	rrcf	___awmod@divisor& (0+255),f,b
  5415                           
  5416                           ; BSR set to: 0
  5417  000CEA  0100               	movlb	0	; () banked
  5418  000CEC  2FBC               	decfsz	___awmod@counter& (0+255),f,b
  5419  000CEE  D7E7               	goto	l2150
  5420  000CF0                     l2158:
  5421                           
  5422                           ; BSR set to: 0
  5423  000CF0  0100               	movlb	0	; () banked
  5424  000CF2  51BD               	movf	___awmod@sign& (0+255),w,b
  5425  000CF4  0100               	movlb	0	; () banked
  5426  000CF6  B4D8               	btfsc	status,2,c
  5427  000CF8  D005               	goto	l2162
  5428                           
  5429                           ; BSR set to: 0
  5430  000CFA  0100               	movlb	0	; () banked
  5431  000CFC  6DB8               	negf	___awmod@dividend& (0+255),b
  5432  000CFE  1FB9               	comf	(___awmod@dividend+1)& (0+255),f,b
  5433  000D00  B0D8               	btfsc	status,0,c
  5434  000D02  2BB9               	incf	(___awmod@dividend+1)& (0+255),f,b
  5435  000D04                     l2162:
  5436                           
  5437                           ; BSR set to: 0
  5438  000D04  C0B8  F0B8         	movff	___awmod@dividend,?___awmod
  5439  000D08  C0B9  F0B9         	movff	___awmod@dividend+1,?___awmod+1
  5440  000D0C  0012               	return	
  5441  000D0E                     __end_of___awmod:
  5442                           	opt stack 0
  5443                           tosu	equ	0xFFF
  5444                           tosh	equ	0xFFE
  5445                           tosl	equ	0xFFD
  5446                           pclath	equ	0xFFA
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           indf1	equ	0xFE7
  5457                           postinc1	equ	0xFE6
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _ES_Timer_Init *****************
  5468 ;; Defined at:
  5469 ;;		line 130 in file "ES_Timers.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  Rate            2    2[BANK0 ] enum E15422
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;		None
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      void 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5483 ;;      Params:         0       2       0       0
  5484 ;;      Locals:         0       0       0       0
  5485 ;;      Temps:          0       0       0       0
  5486 ;;      Totals:         0       2       0       0
  5487 ;;Total ram usage:        2 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    7
  5490 ;; This function calls:
  5491 ;;		__HW_Timer_Init
  5492 ;; This function is called by:
  5493 ;;		_ES_Initialize
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text35
  5498  001532                     __ptext35:
  5499                           	opt stack 0
  5500  001532                     _ES_Timer_Init:
  5501                           	opt stack 22
  5502                           
  5503                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;incstack = 0
  5507  001532  C0BA  F0B8         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5508  001536  C0BB  F0B9         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5509  00153A  EC51  F00A         	call	__HW_Timer_Init	;wreg free
  5510  00153E  0012               	return		;funcret
  5511  001540                     __end_of_ES_Timer_Init:
  5512                           	opt stack 0
  5513                           tosu	equ	0xFFF
  5514                           tosh	equ	0xFFE
  5515                           tosl	equ	0xFFD
  5516                           pclath	equ	0xFFA
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           indf1	equ	0xFE7
  5527                           postinc1	equ	0xFE6
  5528                           fsr1h	equ	0xFE2
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function __HW_Timer_Init *****************
  5538 ;; Defined at:
  5539 ;;		line 72 in file "ES_Port.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  Rate            2    0[BANK0 ] enum E15412
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5553 ;;      Params:         0       2       0       0
  5554 ;;      Locals:         0       0       0       0
  5555 ;;      Temps:          0       0       0       0
  5556 ;;      Totals:         0       2       0       0
  5557 ;;Total ram usage:        2 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    6
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_ES_Timer_Init
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text36
  5568  0014A2                     __ptext36:
  5569                           	opt stack 0
  5570  0014A2                     __HW_Timer_Init:
  5571                           	opt stack 22
  5572                           
  5573                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  5574                           
  5575                           ;incstack = 0
  5576  0014A2  0E04               	movlw	4
  5577  0014A4  6E9D               	movwf	3997,c	;volatile
  5578                           
  5579                           ;ES_Port.c: 85: INTCON = 0b01000000;
  5580  0014A6  0E40               	movlw	64
  5581  0014A8  6EF2               	movwf	intcon,c	;volatile
  5582                           
  5583                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  5584  0014AA  0E0A               	movlw	10
  5585  0014AC  6EBD               	movwf	4029,c	;volatile
  5586                           
  5587                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  5588  0014AE  0E01               	movlw	1
  5589  0014B0  6EBE               	movwf	4030,c	;volatile
  5590                           
  5591                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  5592  0014B2  0E00               	movlw	0
  5593  0014B4  6EBF               	movwf	4031,c	;volatile
  5594                           
  5595                           ;ES_Port.c: 107: T1CON = 0b00100001;
  5596  0014B6  0E21               	movlw	33
  5597  0014B8  6ECD               	movwf	4045,c	;volatile
  5598                           
  5599                           ;ES_Port.c: 108: PEIE = 1;
  5600  0014BA  8CF2               	bsf	intcon,6,c	;volatile
  5601                           
  5602                           ;ES_Port.c: 109: {GIE = 1;};
  5603  0014BC  8EF2               	bsf	intcon,7,c	;volatile
  5604  0014BE  0012               	return		;funcret
  5605  0014C0                     __end_of__HW_Timer_Init:
  5606                           	opt stack 0
  5607                           tosu	equ	0xFFF
  5608                           tosh	equ	0xFFE
  5609                           tosl	equ	0xFFD
  5610                           pclath	equ	0xFFA
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           indf1	equ	0xFE7
  5621                           postinc1	equ	0xFE6
  5622                           fsr1h	equ	0xFE2
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _ES_InitQueue *****************
  5632 ;; Defined at:
  5633 ;;		line 58 in file "ES_Queue.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5636 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5637 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5640 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      unsigned char 
  5643 ;; Registers used:
  5644 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5650 ;;      Params:         0       3       0       0
  5651 ;;      Locals:         0       2       0       0
  5652 ;;      Temps:          0       0       0       0
  5653 ;;      Totals:         0       5       0       0
  5654 ;;Total ram usage:        5 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    6
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_ES_Initialize
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text37
  5665  0012F8                     __ptext37:
  5666                           	opt stack 0
  5667  0012F8                     _ES_InitQueue:
  5668                           	opt stack 23
  5669                           
  5670                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5671                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5672                           
  5673                           ;incstack = 0
  5674  0012F8  C0B8  F0BB         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5675  0012FC  C0B9  F0BC         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5676                           
  5677                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5678  001300  0100               	movlb	0	; () banked
  5679  001302  05BA               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5680  001304  C0BB  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5681  001308  C0BC  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5682  00130C  6EDF               	movwf	indf2,c
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5686  00130E  0100               	movlb	0	; () banked
  5687  001310  EE20 F001          	lfsr	2,1
  5688  001314  51BB               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5689  001316  26D9               	addwf	fsr2l,f,c
  5690  001318  51BC               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5691  00131A  22DA               	addwfc	fsr2h,f,c
  5692  00131C  0E00               	movlw	0
  5693  00131E  6EDF               	movwf	indf2,c
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5697  001320  0100               	movlb	0	; () banked
  5698  001322  EE20 F002          	lfsr	2,2
  5699  001326  51BB               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5700  001328  26D9               	addwf	fsr2l,f,c
  5701  00132A  51BC               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5702  00132C  22DA               	addwfc	fsr2h,f,c
  5703  00132E  0E00               	movlw	0
  5704  001330  6EDF               	movwf	indf2,c
  5705  001332  0012               	return	
  5706  001334                     __end_of_ES_InitQueue:
  5707                           	opt stack 0
  5708                           tosu	equ	0xFFF
  5709                           tosh	equ	0xFFE
  5710                           tosl	equ	0xFFD
  5711                           pclath	equ	0xFFA
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           intcon	equ	0xFF2
  5719                           postinc0	equ	0xFEE
  5720                           wreg	equ	0xFE8
  5721                           indf1	equ	0xFE7
  5722                           postinc1	equ	0xFE6
  5723                           fsr1h	equ	0xFE2
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _ISR *****************
  5733 ;; Defined at:
  5734 ;;		line 112 in file "ES_Port.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5748 ;;      Params:         0       0       0       0
  5749 ;;      Locals:         0       0       0       0
  5750 ;;      Temps:         16       0       0       0
  5751 ;;      Totals:        16       0       0       0
  5752 ;;Total ram usage:       16 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    5
  5755 ;; This function calls:
  5756 ;;		_AnalogISR
  5757 ;;		_BusErrorResponse
  5758 ;;		_CanErrorResponse
  5759 ;;		_CanRCVResponse
  5760 ;;		_CanXmitResponse
  5761 ;; This function is called by:
  5762 ;;		Interrupt level 2
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	intcode
  5767  000008                     __pintcode:
  5768                           	opt stack 0
  5769  000008                     _ISR:
  5770                           	opt stack 18
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;incstack = 0
  5774  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5775  00000A  CFFA F028          	movff	pclath,??_ISR+2
  5776  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  5777  000012  EDD0  F004         	call	int_func,f	;refresh shadow registers
  5778                           tosu	equ	0xFFF
  5779                           tosh	equ	0xFFE
  5780                           tosl	equ	0xFFD
  5781                           pclatu	equ	0xFFB
  5782                           pclath	equ	0xFFA
  5783                           tblptru	equ	0xFF8
  5784                           tblptrh	equ	0xFF7
  5785                           tblptrl	equ	0xFF6
  5786                           tablat	equ	0xFF5
  5787                           prodh	equ	0xFF4
  5788                           prodl	equ	0xFF3
  5789                           intcon	equ	0xFF2
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           indf1	equ	0xFE7
  5793                           postinc1	equ	0xFE6
  5794                           fsr1h	equ	0xFE2
  5795                           fsr1l	equ	0xFE1
  5796                           indf2	equ	0xFDF
  5797                           postinc2	equ	0xFDE
  5798                           postdec2	equ	0xFDD
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803                           	psect	intcode_body
  5804  0009A0                     __pintcode_body:
  5805                           	opt stack 18
  5806  0009A0                     int_func:
  5807                           	opt stack 18
  5808  0009A0  0006               	pop		; remove dummy address from shadow register refresh
  5809  0009A2  CFE9 F02A          	movff	fsr0l,??_ISR+4
  5810  0009A6  CFEA F02B          	movff	fsr0h,??_ISR+5
  5811  0009AA  CFE1 F02C          	movff	fsr1l,??_ISR+6
  5812  0009AE  CFE2 F02D          	movff	fsr1h,??_ISR+7
  5813  0009B2  CFD9 F02E          	movff	fsr2l,??_ISR+8
  5814  0009B6  CFDA F02F          	movff	fsr2h,??_ISR+9
  5815  0009BA  CFF3 F030          	movff	prodl,??_ISR+10
  5816  0009BE  CFF4 F031          	movff	prodh,??_ISR+11
  5817  0009C2  CFF6 F032          	movff	tblptrl,??_ISR+12
  5818  0009C6  CFF7 F033          	movff	tblptrh,??_ISR+13
  5819  0009CA  CFF8 F034          	movff	tblptru,??_ISR+14
  5820  0009CE  CFF5 F035          	movff	tablat,??_ISR+15
  5821                           
  5822                           ;ES_Port.c: 115: static unsigned int LastTime;
  5823                           ;ES_Port.c: 116: static unsigned int NextTime;
  5824                           ;ES_Port.c: 118: if (CCP1IF == 1)
  5825  0009D2  A49E               	btfss	3998,2,c	;volatile
  5826  0009D4  D015               	goto	i2l2894
  5827                           
  5828                           ;ES_Port.c: 119: {
  5829                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5830  0009D6  50BF               	movf	4031,w,c	;volatile
  5831  0009D8  6E26               	movwf	??_ISR& (0+255),c
  5832  0009DA  50BE               	movf	4030,w,c	;volatile
  5833  0009DC  6E36               	movwf	ISR@LastTime,c
  5834  0009DE  C026  F037         	movff	??_ISR,ISR@LastTime+1
  5835                           
  5836                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  5837  0009E2  0E20               	movlw	32
  5838  0009E4  2436               	addwf	ISR@LastTime,w,c
  5839  0009E6  6E38               	movwf	ISR@NextTime,c
  5840  0009E8  0E4E               	movlw	78
  5841  0009EA  2037               	addwfc	ISR@LastTime+1,w,c
  5842  0009EC  6E39               	movwf	ISR@NextTime+1,c
  5843                           
  5844                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  5845  0009EE  5039               	movf	ISR@NextTime+1,w,c
  5846  0009F0  6EBF               	movwf	4031,c	;volatile
  5847                           
  5848                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5849  0009F2  C038  FFBE         	movff	ISR@NextTime,4030	;volatile
  5850                           
  5851                           ;ES_Port.c: 124: CCP1IF = 0;
  5852  0009F6  949E               	bcf	3998,2,c	;volatile
  5853                           
  5854                           ;ES_Port.c: 125: TickCount++;
  5855  0009F8  0100               	movlb	0	; () banked
  5856  0009FA  2B90               	incf	_TickCount& (0+255),f,b	;volatile
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;ES_Port.c: 126: SysTickCounter++;
  5860  0009FC  4A3A               	infsnz	_SysTickCounter,f,c	;volatile
  5861  0009FE  2A3B               	incf	_SysTickCounter+1,f,c	;volatile
  5862  000A00                     i2l2894:
  5863                           
  5864                           ;ES_Port.c: 127: }
  5865                           ;ES_Port.c: 129: if (TXB0IF == 1)
  5866  000A00  A4A4               	btfss	4004,2,c	;volatile
  5867  000A02  D003               	goto	i2l2900
  5868                           
  5869                           ;ES_Port.c: 130: {
  5870                           ;ES_Port.c: 131: TXB0IF = 0;
  5871  000A04  94A4               	bcf	4004,2,c	;volatile
  5872                           
  5873                           ;ES_Port.c: 132: CanXmitResponse();
  5874  000A06  ECAD  F00A         	call	_CanXmitResponse	;wreg free
  5875  000A0A                     i2l2900:
  5876                           
  5877                           ;ES_Port.c: 133: }
  5878                           ;ES_Port.c: 134: if (RXB0IF == 1) {
  5879  000A0A  A0A4               	btfss	4004,0,c	;volatile
  5880  000A0C  D003               	goto	i2l2906
  5881                           
  5882                           ;ES_Port.c: 135: RXB0IF = 0;
  5883  000A0E  90A4               	bcf	4004,0,c	;volatile
  5884                           
  5885                           ;ES_Port.c: 136: CanRCVResponse();
  5886  000A10  ECA6  F00A         	call	_CanRCVResponse	;wreg free
  5887  000A14                     i2l2906:
  5888                           
  5889                           ;ES_Port.c: 137: }
  5890                           ;ES_Port.c: 138: if (ERRIF == 1) {
  5891  000A14  AAA4               	btfss	4004,5,c	;volatile
  5892  000A16  D003               	goto	i2l2912
  5893                           
  5894                           ;ES_Port.c: 139: ERRIF = 0;
  5895  000A18  9AA4               	bcf	4004,5,c	;volatile
  5896                           
  5897                           ;ES_Port.c: 140: CanErrorResponse();
  5898  000A1A  ECB7  F00A         	call	_CanErrorResponse	;wreg free
  5899  000A1E                     i2l2912:
  5900                           
  5901                           ;ES_Port.c: 141: }
  5902                           ;ES_Port.c: 142: if (IRXIF == 1) {
  5903  000A1E  AEA4               	btfss	4004,7,c	;volatile
  5904  000A20  D003               	goto	i2l2918
  5905                           
  5906                           ;ES_Port.c: 143: IRXIF = 0;
  5907  000A22  9EA4               	bcf	4004,7,c	;volatile
  5908                           
  5909                           ;ES_Port.c: 144: BusErrorResponse();
  5910  000A24  ECB8  F00A         	call	_BusErrorResponse	;wreg free
  5911  000A28                     i2l2918:
  5912                           
  5913                           ;ES_Port.c: 145: }
  5914                           ;ES_Port.c: 146: if (ADIF == 1) {
  5915  000A28  AC9E               	btfss	3998,6,c	;volatile
  5916  000A2A  D003               	goto	i2l229
  5917                           
  5918                           ;ES_Port.c: 147: ADIF = 0;
  5919  000A2C  9C9E               	bcf	3998,6,c	;volatile
  5920                           
  5921                           ;ES_Port.c: 148: AnalogISR();
  5922  000A2E  EC87  F006         	call	_AnalogISR	;wreg free
  5923  000A32                     i2l229:
  5924  000A32  C035  FFF5         	movff	??_ISR+15,tablat
  5925  000A36  C034  FFF8         	movff	??_ISR+14,tblptru
  5926  000A3A  C033  FFF7         	movff	??_ISR+13,tblptrh
  5927  000A3E  C032  FFF6         	movff	??_ISR+12,tblptrl
  5928  000A42  C031  FFF4         	movff	??_ISR+11,prodh
  5929  000A46  C030  FFF3         	movff	??_ISR+10,prodl
  5930  000A4A  C02F  FFDA         	movff	??_ISR+9,fsr2h
  5931  000A4E  C02E  FFD9         	movff	??_ISR+8,fsr2l
  5932  000A52  C02D  FFE2         	movff	??_ISR+7,fsr1h
  5933  000A56  C02C  FFE1         	movff	??_ISR+6,fsr1l
  5934  000A5A  C02B  FFEA         	movff	??_ISR+5,fsr0h
  5935  000A5E  C02A  FFE9         	movff	??_ISR+4,fsr0l
  5936  000A62  C029  FFFB         	movff	??_ISR+3,pclatu
  5937  000A66  C028  FFFA         	movff	??_ISR+2,pclath
  5938  000A6A  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5939  000A6C  0011               	retfie		f
  5940  000A6E                     __end_of_ISR:
  5941                           	opt stack 0
  5942                           tosu	equ	0xFFF
  5943                           tosh	equ	0xFFE
  5944                           tosl	equ	0xFFD
  5945                           pclatu	equ	0xFFB
  5946                           pclath	equ	0xFFA
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           postinc0	equ	0xFEE
  5955                           fsr0h	equ	0xFEA
  5956                           fsr0l	equ	0xFE9
  5957                           wreg	equ	0xFE8
  5958                           indf1	equ	0xFE7
  5959                           postinc1	equ	0xFE6
  5960                           fsr1h	equ	0xFE2
  5961                           fsr1l	equ	0xFE1
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           fsr2h	equ	0xFDA
  5966                           fsr2l	equ	0xFD9
  5967                           status	equ	0xFD8
  5968                           
  5969 ;; *************** function _CanXmitResponse *****************
  5970 ;; Defined at:
  5971 ;;		line 188 in file "Can_XmitService.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;		None
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;		None
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  1    wreg      void 
  5978 ;; Registers used:
  5979 ;;		None
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5985 ;;      Params:         0       0       0       0
  5986 ;;      Locals:         0       0       0       0
  5987 ;;      Temps:          0       0       0       0
  5988 ;;      Totals:         0       0       0       0
  5989 ;;Total ram usage:        0 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; This function calls:
  5992 ;;		Nothing
  5993 ;; This function is called by:
  5994 ;;		_ISR
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text39
  5999  00155A                     __ptext39:
  6000                           	opt stack 0
  6001  00155A                     _CanXmitResponse:
  6002                           	opt stack 22
  6003                           
  6004                           ;Can_XmitService.c: 190: TXB0CONbits.TXREQ = 0;
  6005                           
  6006                           ;incstack = 0
  6007  00155A  010F               	movlb	15	; () banked
  6008  00155C  9740               	bcf	64,3,b	;volatile
  6009                           
  6010                           ; BSR set to: 15
  6011  00155E  0012               	return		;funcret
  6012  001560                     __end_of_CanXmitResponse:
  6013                           	opt stack 0
  6014                           tosu	equ	0xFFF
  6015                           tosh	equ	0xFFE
  6016                           tosl	equ	0xFFD
  6017                           pclatu	equ	0xFFB
  6018                           pclath	equ	0xFFA
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           postinc0	equ	0xFEE
  6027                           fsr0h	equ	0xFEA
  6028                           fsr0l	equ	0xFE9
  6029                           wreg	equ	0xFE8
  6030                           indf1	equ	0xFE7
  6031                           postinc1	equ	0xFE6
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _CanRCVResponse *****************
  6042 ;; Defined at:
  6043 ;;		line 193 in file "Can_XmitService.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		None
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6057 ;;      Params:         0       0       0       0
  6058 ;;      Locals:         0       0       0       0
  6059 ;;      Temps:          0       0       0       0
  6060 ;;      Totals:         0       0       0       0
  6061 ;;Total ram usage:        0 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; This function calls:
  6064 ;;		Nothing
  6065 ;; This function is called by:
  6066 ;;		_ISR
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text40
  6071  00154C                     __ptext40:
  6072                           	opt stack 0
  6073  00154C                     _CanRCVResponse:
  6074                           	opt stack 22
  6075                           
  6076                           ;Can_XmitService.c: 195: if (RXB0CONbits.RXFUL == 1) {
  6077                           
  6078                           ; BSR set to: 15
  6079                           ;incstack = 0
  6080  00154C  AE60               	btfss	3936,7,c	;volatile
  6081  00154E  0012               	return	
  6082                           
  6083                           ;Can_XmitService.c: 196: RXB0CONbits.RXFUL = 0;
  6084  001550  9E60               	bcf	3936,7,c	;volatile
  6085  001552  0012               	return	
  6086  001554                     __end_of_CanRCVResponse:
  6087                           	opt stack 0
  6088                           tosu	equ	0xFFF
  6089                           tosh	equ	0xFFE
  6090                           tosl	equ	0xFFD
  6091                           pclatu	equ	0xFFB
  6092                           pclath	equ	0xFFA
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           postinc0	equ	0xFEE
  6101                           fsr0h	equ	0xFEA
  6102                           fsr0l	equ	0xFE9
  6103                           wreg	equ	0xFE8
  6104                           indf1	equ	0xFE7
  6105                           postinc1	equ	0xFE6
  6106                           fsr1h	equ	0xFE2
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _CanErrorResponse *****************
  6116 ;; Defined at:
  6117 ;;		line 200 in file "Can_XmitService.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		None
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6131 ;;      Params:         0       0       0       0
  6132 ;;      Locals:         0       0       0       0
  6133 ;;      Temps:          0       0       0       0
  6134 ;;      Totals:         0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_ISR
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text41
  6145  00156E                     __ptext41:
  6146                           	opt stack 0
  6147  00156E                     _CanErrorResponse:
  6148                           	opt stack 22
  6149                           
  6150                           ;incstack = 0
  6151  00156E  0012               	return		;funcret
  6152  001570                     __end_of_CanErrorResponse:
  6153                           	opt stack 0
  6154                           tosu	equ	0xFFF
  6155                           tosh	equ	0xFFE
  6156                           tosl	equ	0xFFD
  6157                           pclatu	equ	0xFFB
  6158                           pclath	equ	0xFFA
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           postinc0	equ	0xFEE
  6167                           fsr0h	equ	0xFEA
  6168                           fsr0l	equ	0xFE9
  6169                           wreg	equ	0xFE8
  6170                           indf1	equ	0xFE7
  6171                           postinc1	equ	0xFE6
  6172                           fsr1h	equ	0xFE2
  6173                           fsr1l	equ	0xFE1
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function _BusErrorResponse *****************
  6182 ;; Defined at:
  6183 ;;		line 205 in file "Can_XmitService.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		None
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6197 ;;      Params:         0       0       0       0
  6198 ;;      Locals:         0       0       0       0
  6199 ;;      Temps:          0       0       0       0
  6200 ;;      Totals:         0       0       0       0
  6201 ;;Total ram usage:        0 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_ISR
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text42
  6211  001570                     __ptext42:
  6212                           	opt stack 0
  6213  001570                     _BusErrorResponse:
  6214                           	opt stack 22
  6215                           
  6216                           ;incstack = 0
  6217  001570  0012               	return		;funcret
  6218  001572                     __end_of_BusErrorResponse:
  6219                           	opt stack 0
  6220                           tosu	equ	0xFFF
  6221                           tosh	equ	0xFFE
  6222                           tosl	equ	0xFFD
  6223                           pclatu	equ	0xFFB
  6224                           pclath	equ	0xFFA
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           prodh	equ	0xFF4
  6230                           prodl	equ	0xFF3
  6231                           intcon	equ	0xFF2
  6232                           postinc0	equ	0xFEE
  6233                           fsr0h	equ	0xFEA
  6234                           fsr0l	equ	0xFE9
  6235                           wreg	equ	0xFE8
  6236                           indf1	equ	0xFE7
  6237                           postinc1	equ	0xFE6
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           postdec2	equ	0xFDD
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _AnalogISR *****************
  6248 ;; Defined at:
  6249 ;;		line 77 in file "Analog_Service.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6263 ;;      Params:         0       0       0       0
  6264 ;;      Locals:         3       0       0       0
  6265 ;;      Temps:          2       0       0       0
  6266 ;;      Totals:         5       0       0       0
  6267 ;;Total ram usage:        5 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    4
  6270 ;; This function calls:
  6271 ;;		_PostCan_XmitService
  6272 ;;		i2_ES_Timer_InitTimer
  6273 ;; This function is called by:
  6274 ;;		_ISR
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text43
  6279  000D0E                     __ptext43:
  6280                           	opt stack 0
  6281  000D0E                     _AnalogISR:
  6282                           	opt stack 18
  6283                           
  6284                           ;Analog_Service.c: 79: if (!ADCON0bits.DONE) {
  6285                           
  6286                           ;incstack = 0
  6287  000D0E  B2C2               	btfsc	4034,1,c	;volatile
  6288  000D10  0012               	return	
  6289                           
  6290                           ;Analog_Service.c: 80: if (ADCON0bits.CHS == 0x00) {
  6291  000D12  30C2               	rrcf	4034,w,c	;volatile
  6292  000D14  32E8               	rrcf	wreg,f,c
  6293  000D16  0B0F               	andlw	15
  6294  000D18  0900               	iorlw	0
  6295  000D1A  A4D8               	btfss	status,2,c
  6296  000D1C  D018               	goto	i2l2814
  6297                           
  6298                           ;Analog_Service.c: 81: Brightness = ((ADRESH<<8)|ADRESL) >> 2;
  6299  000D1E  50C3               	movf	4035,w,c	;volatile
  6300  000D20  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6301  000D24  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6302  000D26  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6303  000D2A  6A21               	clrf	??_AnalogISR,c
  6304  000D2C  1221               	iorwf	??_AnalogISR,f,c
  6305  000D2E  0E00               	movlw	0
  6306  000D30  1222               	iorwf	??_AnalogISR+1,f,c
  6307  000D32  3422               	rlcf	??_AnalogISR+1,w,c
  6308  000D34  3222               	rrcf	??_AnalogISR+1,f,c
  6309  000D36  3221               	rrcf	??_AnalogISR,f,c
  6310  000D38  3422               	rlcf	??_AnalogISR+1,w,c
  6311  000D3A  3222               	rrcf	??_AnalogISR+1,f,c
  6312  000D3C  3221               	rrcf	??_AnalogISR,f,c
  6313  000D3E  5021               	movf	??_AnalogISR,w,c
  6314  000D40  6E3E               	movwf	_Brightness,c
  6315                           
  6316                           ;Analog_Service.c: 82: ADCON0bits.CHS = 0x01;
  6317  000D42  50C2               	movf	4034,w,c	;volatile
  6318  000D44  0BC3               	andlw	-61
  6319  000D46  0904               	iorlw	4
  6320  000D48  6EC2               	movwf	4034,c	;volatile
  6321                           
  6322                           ;Analog_Service.c: 83: ADCON0bits.GO = 1;
  6323  000D4A  82C2               	bsf	4034,1,c	;volatile
  6324                           
  6325                           ;Analog_Service.c: 84: } else if (ADCON0bits.CHS == 0x01) {
  6326  000D4C  0012               	return	
  6327  000D4E                     i2l2814:
  6328  000D4E  30C2               	rrcf	4034,w,c	;volatile
  6329  000D50  32E8               	rrcf	wreg,f,c
  6330  000D52  0B0F               	andlw	15
  6331  000D54  06E8               	decf	wreg,f,c
  6332  000D56  A4D8               	btfss	status,2,c
  6333  000D58  0012               	return	
  6334                           
  6335                           ;Analog_Service.c: 85: Location = ((ADRESH<<8)|ADRESL) >> 2;
  6336  000D5A  50C3               	movf	4035,w,c	;volatile
  6337  000D5C  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6338  000D60  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6339  000D62  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6340  000D66  6A21               	clrf	??_AnalogISR,c
  6341  000D68  1221               	iorwf	??_AnalogISR,f,c
  6342  000D6A  0E00               	movlw	0
  6343  000D6C  1222               	iorwf	??_AnalogISR+1,f,c
  6344  000D6E  3422               	rlcf	??_AnalogISR+1,w,c
  6345  000D70  3222               	rrcf	??_AnalogISR+1,f,c
  6346  000D72  3221               	rrcf	??_AnalogISR,f,c
  6347  000D74  3422               	rlcf	??_AnalogISR+1,w,c
  6348  000D76  3222               	rrcf	??_AnalogISR+1,f,c
  6349  000D78  3221               	rrcf	??_AnalogISR,f,c
  6350  000D7A  5021               	movf	??_AnalogISR,w,c
  6351  000D7C  6E3F               	movwf	_Location,c
  6352                           
  6353                           ;Analog_Service.c: 86: ADCON0bits.CHS = 0x00;
  6354  000D7E  94C2               	bcf	4034,2,c	;volatile
  6355  000D80  96C2               	bcf	4034,3,c	;volatile
  6356  000D82  98C2               	bcf	4034,4,c	;volatile
  6357  000D84  9AC2               	bcf	4034,5,c	;volatile
  6358                           
  6359                           ;Analog_Service.c: 87: ES_Event Event2Post;
  6360                           ;Analog_Service.c: 88: Event2Post.EventType = XMIT_EVENT;
  6361  000D86  0E07               	movlw	7
  6362  000D88  6E23               	movwf	AnalogISR@Event2Post,c
  6363                           
  6364                           ;Analog_Service.c: 89: PostCan_XmitService(Event2Post);
  6365  000D8A  C023  F01E         	movff	AnalogISR@Event2Post,PostCan_XmitService@ThisEvent
  6366  000D8E  C024  F01F         	movff	AnalogISR@Event2Post+1,PostCan_XmitService@ThisEvent+1
  6367  000D92  C025  F020         	movff	AnalogISR@Event2Post+2,PostCan_XmitService@ThisEvent+2
  6368  000D96  EC8E  F00A         	call	_PostCan_XmitService	;wreg free
  6369                           
  6370                           ;Analog_Service.c: 90: ES_Timer_InitTimer(0, 5);
  6371  000D9A  0E00               	movlw	0
  6372  000D9C  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  6373  000D9E  0E05               	movlw	5
  6374  000DA0  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  6375  000DA2  0E00               	movlw	0
  6376  000DA4  EC48  F008         	call	i2_ES_Timer_InitTimer
  6377  000DA8  0012               	return	
  6378  000DAA                     __end_of_AnalogISR:
  6379                           	opt stack 0
  6380                           tosu	equ	0xFFF
  6381                           tosh	equ	0xFFE
  6382                           tosl	equ	0xFFD
  6383                           pclatu	equ	0xFFB
  6384                           pclath	equ	0xFFA
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           intcon	equ	0xFF2
  6392                           postinc0	equ	0xFEE
  6393                           fsr0h	equ	0xFEA
  6394                           fsr0l	equ	0xFE9
  6395                           wreg	equ	0xFE8
  6396                           indf1	equ	0xFE7
  6397                           postinc1	equ	0xFE6
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function i2_ES_Timer_InitTimer *****************
  6408 ;; Defined at:
  6409 ;;		line 229 in file "ES_Timers.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  Num             1    wreg     unsigned char 
  6412 ;;  NewTime         2    0[COMRAM] unsigned int 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  Num             1    4[COMRAM] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      enum E15445
  6417 ;; Registers used:
  6418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6424 ;;      Params:         2       0       0       0
  6425 ;;      Locals:         1       0       0       0
  6426 ;;      Temps:          2       0       0       0
  6427 ;;      Totals:         5       0       0       0
  6428 ;;Total ram usage:        5 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_AnalogISR
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text44
  6438  001090                     __ptext44:
  6439                           	opt stack 0
  6440  001090                     i2_ES_Timer_InitTimer:
  6441                           	opt stack 21
  6442                           
  6443                           ;incstack = 0
  6444                           ;i2ES_Timer_InitTimer@Num stored from wreg
  6445  001090  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  6446                           
  6447                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6448                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6449                           ;ES_Timers.c: 236: (NewTime == 0) )
  6450  001092  0E10               	movlw	16
  6451  001094  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  6452  001096  0012               	return	
  6453  001098  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6454  00109A  0D02               	mullw	2
  6455  00109C  0E21               	movlw	low _Timer2PostFunc
  6456  00109E  24F3               	addwf	prodl,w,c
  6457  0010A0  6EF6               	movwf	tblptrl,c
  6458  0010A2  0E03               	movlw	high _Timer2PostFunc
  6459  0010A4  20F4               	addwfc	prodh,w,c
  6460  0010A6  6EF7               	movwf	tblptrh,c
  6461  0010A8                     	if	0	;There are less than 3 active tblptr bytes
  6462  0010A8                     	endif
  6463  0010A8  0009               	tblrd		*+
  6464  0010AA  50F5               	movf	tablat,w,c
  6465  0010AC  0009               	tblrd		*+
  6466  0010AE  10F5               	iorwf	tablat,w,c
  6467  0010B0  B4D8               	btfsc	status,2,c
  6468  0010B2  0012               	return	
  6469  0010B4  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  6470  0010B6  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  6471  0010B8  B4D8               	btfsc	status,2,c
  6472  0010BA  0012               	return	
  6473                           
  6474                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6475                           
  6476                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6477                           ;	Return value of i2_ES_Timer_InitTimer is never used
  6478  0010BC  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6479  0010BE  0D02               	mullw	2
  6480  0010C0  0E60               	movlw	low _TMR_TimerArray
  6481  0010C2  24F3               	addwf	prodl,w,c
  6482  0010C4  6ED9               	movwf	fsr2l,c
  6483  0010C6  0E00               	movlw	high _TMR_TimerArray
  6484  0010C8  20F4               	addwfc	prodh,w,c
  6485  0010CA  6EDA               	movwf	fsr2h,c
  6486  0010CC  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  6487  0010D0  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  6488                           
  6489                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6490  0010D4  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6491  0010D6  0D02               	mullw	2
  6492  0010D8  0E01               	movlw	low _BitNum2SetMask
  6493  0010DA  24F3               	addwf	prodl,w,c
  6494  0010DC  6EF6               	movwf	tblptrl,c
  6495  0010DE  0E03               	movlw	high _BitNum2SetMask
  6496  0010E0  20F4               	addwfc	prodh,w,c
  6497  0010E2  6EF7               	movwf	tblptrh,c
  6498  0010E4                     	if	0	;There are less than 3 active tblptr bytes
  6499  0010E4                     	endif
  6500  0010E4  0009               	tblrd		*+
  6501  0010E6  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  6502  0010EA  0009               	tblrd		*+
  6503  0010EC  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  6504  0010F0  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  6505  0010F2  0100               	movlb	0	; () banked
  6506  0010F4  1387               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6507  0010F6  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  6508  0010F8  0100               	movlb	0	; () banked
  6509  0010FA  1388               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6510  0010FC  0012               	return	
  6511  0010FE                     __end_ofi2_ES_Timer_InitTimer:
  6512                           	opt stack 0
  6513                           tosu	equ	0xFFF
  6514                           tosh	equ	0xFFE
  6515                           tosl	equ	0xFFD
  6516                           pclatu	equ	0xFFB
  6517                           pclath	equ	0xFFA
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           postinc0	equ	0xFEE
  6526                           fsr0h	equ	0xFEA
  6527                           fsr0l	equ	0xFE9
  6528                           wreg	equ	0xFE8
  6529                           indf1	equ	0xFE7
  6530                           postinc1	equ	0xFE6
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function _PostCan_XmitService *****************
  6541 ;; Defined at:
  6542 ;;		line 117 in file "Can_XmitService.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      unsigned char 
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6556 ;;      Params:         3       0       0       0
  6557 ;;      Locals:         0       0       0       0
  6558 ;;      Temps:          0       0       0       0
  6559 ;;      Totals:         3       0       0       0
  6560 ;;Total ram usage:        3 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    3
  6563 ;; This function calls:
  6564 ;;		i2_ES_PostToService
  6565 ;; This function is called by:
  6566 ;;		_AnalogISR
  6567 ;;		_PostToList
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text45
  6572  00151C                     __ptext45:
  6573                           	opt stack 0
  6574  00151C                     _PostCan_XmitService:
  6575                           	opt stack 18
  6576                           
  6577                           ;Can_XmitService.c: 119: return ES_PostToService( MyPriority, ThisEvent);
  6578                           
  6579                           ;incstack = 0
  6580  00151C  C01E  F018         	movff	PostCan_XmitService@ThisEvent,i2ES_PostToService@TheEvent
  6581  001520  C01F  F019         	movff	PostCan_XmitService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6582  001524  C020  F01A         	movff	PostCan_XmitService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6583  001528  0100               	movlb	0	; () banked
  6584  00152A  518A               	movf	Can_XmitService@MyPriority& (0+255),w,b
  6585  00152C  ECB4  F008         	call	i2_ES_PostToService
  6586  001530  0012               	return	
  6587  001532                     __end_of_PostCan_XmitService:
  6588                           	opt stack 0
  6589                           tosu	equ	0xFFF
  6590                           tosh	equ	0xFFE
  6591                           tosl	equ	0xFFD
  6592                           pclatu	equ	0xFFB
  6593                           pclath	equ	0xFFA
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           postinc0	equ	0xFEE
  6602                           fsr0h	equ	0xFEA
  6603                           fsr0l	equ	0xFE9
  6604                           wreg	equ	0xFE8
  6605                           indf1	equ	0xFE7
  6606                           postinc1	equ	0xFE6
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function i2_ES_PostToService *****************
  6617 ;; Defined at:
  6618 ;;		line 351 in file "ES_Framework.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  WhichService    1    wreg     unsigned char 
  6621 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  WhichService    1   28[COMRAM] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  1    wreg      unsigned char 
  6626 ;; Registers used:
  6627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6633 ;;      Params:         3       0       0       0
  6634 ;;      Locals:         1       0       0       0
  6635 ;;      Temps:          2       0       0       0
  6636 ;;      Totals:         6       0       0       0
  6637 ;;Total ram usage:        6 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    2
  6640 ;; This function calls:
  6641 ;;		i2_ES_EnQueueFIFO
  6642 ;; This function is called by:
  6643 ;;		_PostCan_XmitService
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text46
  6648  001168                     __ptext46:
  6649                           	opt stack 0
  6650  001168                     i2_ES_PostToService:
  6651                           	opt stack 18
  6652                           
  6653                           ;incstack = 0
  6654                           ;i2ES_PostToService@WhichService stored from wreg
  6655  001168  6E1D               	movwf	i2ES_PostToService@WhichService,c
  6656                           
  6657                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6658                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6659                           ;ES_Framework.c: 354: 1 )){
  6660  00116A  0E03               	movlw	3
  6661  00116C  601D               	cpfslt	i2ES_PostToService@WhichService,c
  6662  00116E  D02F               	goto	i2l2504
  6663  001170  501D               	movf	i2ES_PostToService@WhichService,w,c
  6664  001172  0D03               	mullw	3
  6665  001174  0E5C               	movlw	low _EventQueues
  6666  001176  24F3               	addwf	prodl,w,c
  6667  001178  6EF6               	movwf	tblptrl,c
  6668  00117A  0E03               	movlw	high _EventQueues
  6669  00117C  20F4               	addwfc	prodh,w,c
  6670  00117E  6EF7               	movwf	tblptrh,c
  6671  001180                     	if	0	;There are less than 3 active tblptr bytes
  6672  001180                     	endif
  6673  001180  0009               	tblrd		*+
  6674  001182  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  6675  001186  000A               	tblrd		*-
  6676  001188  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  6677  00118C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  6678  001190  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  6679  001194  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  6680  001198  EC37  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  6681  00119C  06E8               	decf	wreg,f,c
  6682  00119E  A4D8               	btfss	status,2,c
  6683  0011A0  D016               	goto	i2l2504
  6684                           
  6685                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6686  0011A2  501D               	movf	i2ES_PostToService@WhichService,w,c
  6687  0011A4  0D02               	mullw	2
  6688  0011A6  0E01               	movlw	low _BitNum2SetMask
  6689  0011A8  24F3               	addwf	prodl,w,c
  6690  0011AA  6EF6               	movwf	tblptrl,c
  6691  0011AC  0E03               	movlw	high _BitNum2SetMask
  6692  0011AE  20F4               	addwfc	prodh,w,c
  6693  0011B0  6EF7               	movwf	tblptrh,c
  6694  0011B2                     	if	0	;There are less than 3 active tblptr bytes
  6695  0011B2                     	endif
  6696  0011B2  0009               	tblrd		*+
  6697  0011B4  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  6698  0011B8  0009               	tblrd		*+
  6699  0011BA  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  6700  0011BE  501B               	movf	??i2_ES_PostToService,w,c
  6701  0011C0  0100               	movlb	0	; () banked
  6702  0011C2  1385               	iorwf	_Ready& (0+255),f,b
  6703  0011C4  501C               	movf	??i2_ES_PostToService+1,w,c
  6704  0011C6  0100               	movlb	0	; () banked
  6705  0011C8  1386               	iorwf	(_Ready+1)& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;ES_Framework.c: 356: return 1;
  6709  0011CA  0E01               	movlw	1
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;ES_Framework.c: 357: } else
  6713                           
  6714                           ; BSR set to: 0
  6715  0011CC  0012               	return	
  6716  0011CE                     i2l2504:
  6717                           
  6718                           ;ES_Framework.c: 358: return 0;
  6719  0011CE  0E00               	movlw	0
  6720  0011D0  0012               	return	
  6721  0011D2                     __end_ofi2_ES_PostToService:
  6722                           	opt stack 0
  6723                           tosu	equ	0xFFF
  6724                           tosh	equ	0xFFE
  6725                           tosl	equ	0xFFD
  6726                           pclatu	equ	0xFFB
  6727                           pclath	equ	0xFFA
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           postinc0	equ	0xFEE
  6736                           fsr0h	equ	0xFEA
  6737                           fsr0l	equ	0xFE9
  6738                           wreg	equ	0xFE8
  6739                           indf1	equ	0xFE7
  6740                           postinc1	equ	0xFE6
  6741                           fsr1h	equ	0xFE2
  6742                           fsr1l	equ	0xFE1
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function i2_ES_EnQueueFIFO *****************
  6751 ;; Defined at:
  6752 ;;		line 85 in file "ES_Queue.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  6755 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6756 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  6759 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6760 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6770 ;;      Params:         5       0       0       0
  6771 ;;      Locals:         3       0       0       0
  6772 ;;      Temps:          3       0       0       0
  6773 ;;      Totals:        11       0       0       0
  6774 ;;Total ram usage:       11 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    1
  6777 ;; This function calls:
  6778 ;;		i2___awmod
  6779 ;;		i2___wmul
  6780 ;; This function is called by:
  6781 ;;		i2_ES_PostToService
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text47
  6786  000A6E                     __ptext47:
  6787                           	opt stack 0
  6788  000A6E                     i2_ES_EnQueueFIFO:
  6789                           	opt stack 18
  6790                           
  6791                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6792                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6793                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6794                           
  6795                           ;incstack = 0
  6796  000A6E  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  6797  000A72  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  6798                           
  6799                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6800  000A76  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6801  000A7A  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6802  000A7E  EE10 F002          	lfsr	1,2
  6803  000A82  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6804  000A84  26E1               	addwf	fsr1l,f,c
  6805  000A86  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6806  000A88  22E2               	addwfc	fsr1h,f,c
  6807  000A8A  50DE               	movf	postinc2,w,c
  6808  000A8C  5CE6               	subwf	postinc1,w,c
  6809  000A8E  B0D8               	btfsc	status,0,c
  6810  000A90  D046               	goto	i2l2300
  6811                           
  6812                           ;ES_Queue.c: 92: {
  6813                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6814  000A92  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  6815  000A96  9EF2               	bcf	intcon,7,c	;volatile
  6816                           
  6817                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6818                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6819  000A98  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6820  000A9C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6821  000AA0  50DF               	movf	indf2,w,c
  6822  000AA2  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  6823  000AA4  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  6824  000AA6  6E03               	movwf	i2___awmod@divisor,c
  6825  000AA8  6A04               	clrf	i2___awmod@divisor+1,c
  6826  000AAA  EE20 F002          	lfsr	2,2
  6827  000AAE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6828  000AB0  26D9               	addwf	fsr2l,f,c
  6829  000AB2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6830  000AB4  22DA               	addwfc	fsr2h,f,c
  6831  000AB6  50DF               	movf	indf2,w,c
  6832  000AB8  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  6833  000ABA  EE20 F001          	lfsr	2,1
  6834  000ABE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6835  000AC0  26D9               	addwf	fsr2l,f,c
  6836  000AC2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6837  000AC4  22DA               	addwfc	fsr2h,f,c
  6838  000AC6  50DF               	movf	indf2,w,c
  6839  000AC8  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  6840  000ACA  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  6841  000ACC  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  6842  000ACE  6E01               	movwf	i2___awmod@dividend,c
  6843  000AD0  6A02               	clrf	i2___awmod@dividend+1,c
  6844  000AD2  3602               	rlcf	i2___awmod@dividend+1,f,c
  6845  000AD4  EC10  F008         	call	i2___awmod	;wreg free
  6846  000AD8  0E01               	movlw	1
  6847  000ADA  2401               	addwf	?i2___awmod,w,c
  6848  000ADC  6E07               	movwf	i2___wmul@multiplier,c
  6849  000ADE  0E00               	movlw	0
  6850  000AE0  2002               	addwfc	?i2___awmod+1,w,c
  6851  000AE2  6E08               	movwf	i2___wmul@multiplier+1,c
  6852  000AE4  0E00               	movlw	0
  6853  000AE6  6E0A               	movwf	i2___wmul@multiplicand+1,c
  6854  000AE8  0E03               	movlw	3
  6855  000AEA  6E09               	movwf	i2___wmul@multiplicand,c
  6856  000AEC  EC3E  F00A         	call	i2___wmul	;wreg free
  6857  000AF0  5007               	movf	?i2___wmul,w,c
  6858  000AF2  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  6859  000AF4  6ED9               	movwf	fsr2l,c
  6860  000AF6  5008               	movf	?i2___wmul+1,w,c
  6861  000AF8  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  6862  000AFA  6EDA               	movwf	fsr2h,c
  6863  000AFC  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  6864  000B00  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  6865  000B04  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  6866                           
  6867                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6868  000B08  EE20 F002          	lfsr	2,2
  6869  000B0C  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6870  000B0E  26D9               	addwf	fsr2l,f,c
  6871  000B10  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6872  000B12  22DA               	addwfc	fsr2h,f,c
  6873  000B14  2ADF               	incf	indf2,f,c
  6874                           
  6875                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6876  000B16  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6877                           
  6878                           ;ES_Queue.c: 101: return(1);
  6879  000B1A  0E01               	movlw	1
  6880                           
  6881                           ;ES_Queue.c: 102: }else
  6882  000B1C  0012               	return	
  6883  000B1E                     i2l2300:
  6884                           
  6885                           ;ES_Queue.c: 103: return(0);
  6886  000B1E  0E00               	movlw	0
  6887  000B20  0012               	return	
  6888  000B22                     __end_ofi2_ES_EnQueueFIFO:
  6889                           	opt stack 0
  6890                           tosu	equ	0xFFF
  6891                           tosh	equ	0xFFE
  6892                           tosl	equ	0xFFD
  6893                           pclatu	equ	0xFFB
  6894                           pclath	equ	0xFFA
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           postinc0	equ	0xFEE
  6903                           fsr0h	equ	0xFEA
  6904                           fsr0l	equ	0xFE9
  6905                           wreg	equ	0xFE8
  6906                           indf1	equ	0xFE7
  6907                           postinc1	equ	0xFE6
  6908                           fsr1h	equ	0xFE2
  6909                           fsr1l	equ	0xFE1
  6910                           indf2	equ	0xFDF
  6911                           postinc2	equ	0xFDE
  6912                           postdec2	equ	0xFDD
  6913                           fsr2h	equ	0xFDA
  6914                           fsr2l	equ	0xFD9
  6915                           status	equ	0xFD8
  6916                           
  6917 ;; *************** function i2___wmul *****************
  6918 ;; Defined at:
  6919 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;  multiplier      2    6[COMRAM] unsigned int 
  6922 ;;  multiplicand    2    8[COMRAM] unsigned int 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  __wmul          2   10[COMRAM] unsigned int 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  2    6[COMRAM] unsigned int 
  6927 ;; Registers used:
  6928 ;;		wreg, status,2, status,0, prodl, prodh
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6934 ;;      Params:         4       0       0       0
  6935 ;;      Locals:         2       0       0       0
  6936 ;;      Temps:          0       0       0       0
  6937 ;;      Totals:         6       0       0       0
  6938 ;;Total ram usage:        6 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		i2_ES_EnQueueFIFO
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text48
  6948  00147C                     __ptext48:
  6949                           	opt stack 0
  6950  00147C                     i2___wmul:
  6951                           	opt stack 18
  6952                           
  6953                           ;incstack = 0
  6954  00147C  5007               	movf	i2___wmul@multiplier,w,c
  6955  00147E  0209               	mulwf	i2___wmul@multiplicand,c
  6956  001480  CFF3 F00B          	movff	prodl,i2___wmul@product
  6957  001484  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  6958  001488  5007               	movf	i2___wmul@multiplier,w,c
  6959  00148A  020A               	mulwf	i2___wmul@multiplicand+1,c
  6960  00148C  50F3               	movf	prodl,w,c
  6961  00148E  260C               	addwf	i2___wmul@product+1,f,c
  6962  001490  5008               	movf	i2___wmul@multiplier+1,w,c
  6963  001492  0209               	mulwf	i2___wmul@multiplicand,c
  6964  001494  50F3               	movf	prodl,w,c
  6965  001496  260C               	addwf	i2___wmul@product+1,f,c
  6966  001498  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  6967  00149C  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  6968  0014A0  0012               	return	
  6969  0014A2                     __end_ofi2___wmul:
  6970                           	opt stack 0
  6971                           tosu	equ	0xFFF
  6972                           tosh	equ	0xFFE
  6973                           tosl	equ	0xFFD
  6974                           pclatu	equ	0xFFB
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           postinc0	equ	0xFEE
  6984                           fsr0h	equ	0xFEA
  6985                           fsr0l	equ	0xFE9
  6986                           wreg	equ	0xFE8
  6987                           indf1	equ	0xFE7
  6988                           postinc1	equ	0xFE6
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function i2___awmod *****************
  6999 ;; Defined at:
  7000 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  dividend        2    0[COMRAM] int 
  7003 ;;  divisor         2    2[COMRAM] int 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  __awmod         1    5[COMRAM] unsigned char 
  7006 ;;  __awmod         1    4[COMRAM] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  2    0[COMRAM] int 
  7009 ;; Registers used:
  7010 ;;		wreg, status,2, status,0
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7016 ;;      Params:         4       0       0       0
  7017 ;;      Locals:         2       0       0       0
  7018 ;;      Temps:          0       0       0       0
  7019 ;;      Totals:         6       0       0       0
  7020 ;;Total ram usage:        6 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; This function calls:
  7023 ;;		Nothing
  7024 ;; This function is called by:
  7025 ;;		i2_ES_EnQueueFIFO
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text49
  7030  001020                     __ptext49:
  7031                           	opt stack 0
  7032  001020                     i2___awmod:
  7033                           	opt stack 18
  7034                           
  7035                           ;incstack = 0
  7036  001020  0E00               	movlw	0
  7037  001022  6E06               	movwf	i2___awmod@sign,c
  7038  001024  AE02               	btfss	i2___awmod@dividend+1,7,c
  7039  001026  D006               	goto	i2l2216
  7040  001028  6C01               	negf	i2___awmod@dividend,c
  7041  00102A  1E02               	comf	i2___awmod@dividend+1,f,c
  7042  00102C  B0D8               	btfsc	status,0,c
  7043  00102E  2A02               	incf	i2___awmod@dividend+1,f,c
  7044  001030  0E01               	movlw	1
  7045  001032  6E06               	movwf	i2___awmod@sign,c
  7046  001034                     i2l2216:
  7047  001034  AE04               	btfss	i2___awmod@divisor+1,7,c
  7048  001036  D004               	goto	i2l2220
  7049  001038  6C03               	negf	i2___awmod@divisor,c
  7050  00103A  1E04               	comf	i2___awmod@divisor+1,f,c
  7051  00103C  B0D8               	btfsc	status,0,c
  7052  00103E  2A04               	incf	i2___awmod@divisor+1,f,c
  7053  001040                     i2l2220:
  7054  001040  5003               	movf	i2___awmod@divisor,w,c
  7055  001042  1004               	iorwf	i2___awmod@divisor+1,w,c
  7056  001044  B4D8               	btfsc	status,2,c
  7057  001046  D018               	goto	i2l2236
  7058  001048  0E01               	movlw	1
  7059  00104A  6E05               	movwf	i2___awmod@counter,c
  7060  00104C  D004               	goto	i2l2226
  7061  00104E                     i2l2224:
  7062  00104E  90D8               	bcf	status,0,c
  7063  001050  3603               	rlcf	i2___awmod@divisor,f,c
  7064  001052  3604               	rlcf	i2___awmod@divisor+1,f,c
  7065  001054  2A05               	incf	i2___awmod@counter,f,c
  7066  001056                     i2l2226:
  7067  001056  AE04               	btfss	i2___awmod@divisor+1,7,c
  7068  001058  D7FA               	goto	i2l2224
  7069  00105A                     i2l2228:
  7070  00105A  5003               	movf	i2___awmod@divisor,w,c
  7071  00105C  5C01               	subwf	i2___awmod@dividend,w,c
  7072  00105E  5004               	movf	i2___awmod@divisor+1,w,c
  7073  001060  5802               	subwfb	i2___awmod@dividend+1,w,c
  7074  001062  A0D8               	btfss	status,0,c
  7075  001064  D004               	goto	i2l2232
  7076  001066  5003               	movf	i2___awmod@divisor,w,c
  7077  001068  5E01               	subwf	i2___awmod@dividend,f,c
  7078  00106A  5004               	movf	i2___awmod@divisor+1,w,c
  7079  00106C  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7080  00106E                     i2l2232:
  7081  00106E  90D8               	bcf	status,0,c
  7082  001070  3204               	rrcf	i2___awmod@divisor+1,f,c
  7083  001072  3203               	rrcf	i2___awmod@divisor,f,c
  7084  001074  2E05               	decfsz	i2___awmod@counter,f,c
  7085  001076  D7F1               	goto	i2l2228
  7086  001078                     i2l2236:
  7087  001078  5006               	movf	i2___awmod@sign,w,c
  7088  00107A  B4D8               	btfsc	status,2,c
  7089  00107C  D004               	goto	i2l2240
  7090  00107E  6C01               	negf	i2___awmod@dividend,c
  7091  001080  1E02               	comf	i2___awmod@dividend+1,f,c
  7092  001082  B0D8               	btfsc	status,0,c
  7093  001084  2A02               	incf	i2___awmod@dividend+1,f,c
  7094  001086                     i2l2240:
  7095  001086  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7096  00108A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7097  00108E  0012               	return	
  7098  001090                     __end_ofi2___awmod:
  7099                           	opt stack 0
  7100                           tosu	equ	0xFFF
  7101                           tosh	equ	0xFFE
  7102                           tosl	equ	0xFFD
  7103                           pclatu	equ	0xFFB
  7104                           pclath	equ	0xFFA
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           intcon	equ	0xFF2
  7112                           postinc0	equ	0xFEE
  7113                           fsr0h	equ	0xFEA
  7114                           fsr0l	equ	0xFE9
  7115                           wreg	equ	0xFE8
  7116                           indf1	equ	0xFE7
  7117                           postinc1	equ	0xFE6
  7118                           fsr1h	equ	0xFE2
  7119                           fsr1l	equ	0xFE1
  7120                           indf2	equ	0xFDF
  7121                           postinc2	equ	0xFDE
  7122                           postdec2	equ	0xFDD
  7123                           fsr2h	equ	0xFDA
  7124                           fsr2l	equ	0xFD9
  7125                           status	equ	0xFD8
  7126                           tosu	equ	0xFFF
  7127                           tosh	equ	0xFFE
  7128                           tosl	equ	0xFFD
  7129                           pclatu	equ	0xFFB
  7130                           pclath	equ	0xFFA
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           postinc0	equ	0xFEE
  7139                           fsr0h	equ	0xFEA
  7140                           fsr0l	equ	0xFE9
  7141                           wreg	equ	0xFE8
  7142                           indf1	equ	0xFE7
  7143                           postinc1	equ	0xFE6
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153                           	psect	text50
  7154  000000                     __ptext50:
  7155                           	opt stack 0
  7156                           tosu	equ	0xFFF
  7157                           tosh	equ	0xFFE
  7158                           tosl	equ	0xFFD
  7159                           pclatu	equ	0xFFB
  7160                           pclath	equ	0xFFA
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           postinc0	equ	0xFEE
  7169                           fsr0h	equ	0xFEA
  7170                           fsr0l	equ	0xFE9
  7171                           wreg	equ	0xFE8
  7172                           indf1	equ	0xFE7
  7173                           postinc1	equ	0xFE6
  7174                           fsr1h	equ	0xFE2
  7175                           fsr1l	equ	0xFE1
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183                           	psect	rparam
  7184  0000                     tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclatu	equ	0xFFB
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           fsr0h	equ	0xFEA
  7198                           fsr0l	equ	0xFE9
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postinc1	equ	0xFE6
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211                           	psect	temp
  7212  000040                     btemp:
  7213                           	opt stack 0
  7214  000040                     	ds	1
  7215  0000                     int$flags	set	btemp
  7216                           tosu	equ	0xFFF
  7217                           tosh	equ	0xFFE
  7218                           tosl	equ	0xFFD
  7219                           pclatu	equ	0xFFB
  7220                           pclath	equ	0xFFA
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           postinc0	equ	0xFEE
  7229                           fsr0h	equ	0xFEA
  7230                           fsr0l	equ	0xFE9
  7231                           wreg	equ	0xFE8
  7232                           indf1	equ	0xFE7
  7233                           postinc1	equ	0xFE6
  7234                           fsr1h	equ	0xFE2
  7235                           fsr1l	equ	0xFE1
  7236                           indf2	equ	0xFDF
  7237                           postinc2	equ	0xFDE
  7238                           postdec2	equ	0xFDD
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        0
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      63
    BANK0           160     44     132
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostAnalogService(), Absolute function(), PostButtonDebounceSM(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S186$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S153$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    S153$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> Check4Keystroke(), CheckButtonEvents(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_AnalogISR
    _AnalogISR->_PostCan_XmitService
    _PostCan_XmitService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_CheckUserEvents
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostAnalogService
    _ES_Timer_Tick_Resp->_PostButtonDebounceSM
    _PostAnalogService->_ES_PostToService
    _RunButtonDebounceSM->_ES_PostAll
    _ES_PostAll->_ES_EnQueueFIFO
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitAnalogService
    _ES_Initialize->_InitCan_XmitService
    _InitializeButtonDebounce->_ES_Timer_InitTimer
    _InitCan_XmitService->_ES_PostToService
    _InitAnalogService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23001
                                             43 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   15826
                                             38 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunAnalogService *
                _RunButtonDebounceSM *
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6044
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6044
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostAnalogService *
               _PostButtonDebounceSM *
 ---------------------------------------------------------------------------------
 (4) _PostAnalogService                                    3     0      3    2806
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   8     5      3     135
                                             29 BANK0      8     5      3
                    _InitCanHardware
                           _InitPins
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              0 BANK0      1     1      0
                      _GetBrightness
                        _GetLocation
 ---------------------------------------------------------------------------------
 (4) _GetLocation                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetBrightness                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunButtonDebounceSM                                  6     3      3    3217
                                             29 BANK0      6     3      3
                         _ES_PostAll
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_PostAll                                           6     3      3    2575
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (2) _RunAnalogService                                     6     3      3     629
                                             29 BANK0      6     3      3
                 _ES_Timer_InitTimer
                       _InitAnalogHW
 ---------------------------------------------------------------------------------
 (3) _InitAnalogHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3178
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3088
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    2905
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6779
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitAnalogService *
                _InitCan_XmitService *
           _InitializeButtonDebounce *
 ---------------------------------------------------------------------------------
 (2) _InitializeButtonDebounce                             1     1      0     508
                                              5 BANK0      1     1      0
                 _ES_Timer_InitTimer
                       _GetInputLine
                       _InitButtonHW
 ---------------------------------------------------------------------------------
 (3) _InitButtonHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     486
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitAnalogService                                    4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2731
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2289
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    1158
                                             37 COMRAM    16    16      0
                          _AnalogISR
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _AnalogISR                                            5     5      0    1158
                                             32 COMRAM     5     5      0
                _PostCan_XmitService
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _PostCan_XmitService                                 3     0      3     977
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitAnalogService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitializeButtonDebounce *
       _ES_Timer_InitTimer
       _GetInputLine
       _InitButtonHW
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunAnalogService *
       _ES_Timer_InitTimer
       _InitAnalogHW
     _RunButtonDebounceSM *
       _ES_PostAll
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _XmitData
         _GetBrightness
         _GetLocation
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostAnalogService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostButtonDebounceSM *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _AnalogISR
     _PostCan_XmitService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_ES_Timer_InitTimer
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2C      84       4       82.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3F       1       67.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3       9        0.0%
DATA                 0      0      C3      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Dec 10 18:00:56 2016

           Analog_Service@MyPriority 0089                     ??__HW_Timer_Init 00BA  
                 ??_RunAnalogService 00D8                  ES_CheckUserEvents@i 00DD  
         CheckButtonEvents@ReturnVal 00D8                  __HW_Timer_Init@Rate 00B8  
                ___wmul@multiplicand 00C0            __size_of_BusErrorResponse 0002  
                        __CFG_OSC$HS 000000                                  l514 0EBA  
                                l372 0E34                                  l517 0F16  
                                l491 08EE                                  l493 0904  
                                l494 091A                                  l495 0930  
              __end_of_ES_Initialize 07E4                                  _GIE 007F97  
                                _ISR 0008                         ___awmod@sign 00BD  
            __end_of_Check4Keystroke 156C                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00CC                  __end_of_GetLocation 1564  
            ES_EnQueueFIFO@Event2Add 00C6                        ?_InitAnalogHW 0001  
                  ?_ES_PostToService 00CF                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0080                                 l2150 0CBE  
                               l2142 0C98                                 l2162 0D04  
                               l2154 0CE2                                 l2146 0CAC  
                               l2138 0C88                                 l2148 0CB8  
                               l2340 115E                                 l2158 0CF0  
                               l2182 08C2                                 l2254 0BD4  
                               l2336 1148                                 l2352 0F42  
                               l2264 0C60                                 l2530 0B42  
                               l2348 0F38                                 l2524 0B24  
                               l2268 0C66                                 l2380 0502  
                               l2620 14E4                                 l2198 101C  
                               l2550 0BB4                                 l2390 057A  
                               l2720 11F8                                 l2392 05B8  
                               l2616 14DC                                 l2562 1232  
                               l2538 0B72                                 l2708 13CA  
                               l2548 0BA4                                 l2638 13FA  
                               l2558 1228                                 l2486 12EC  
                               l2478 12C4                                 l2726 120E  
                               l2830 1380                                 l2760 075C  
                               l2752 0714                                 l2592 04C0  
                               l2680 097A                                 l2656 08E2  
                               l2756 0758                                 l2772 07E0  
                               l2748 070A                                 l2588 04A4  
                               l2684 098C                                 l2828 1378  
                               l2598 04E8                                 l2678 0946  
                               l2782 0688                                 l2768 07DA  
                               l2792 06F2                                 l2776 0606  
                               l2788 06DC                                 l2990 0E0A  
                               l2984 0DD4                                 l2986 0DE6  
                               l2994 0E1C                                 l2988 0DF8  
                               _ADIE 007CEE                                 _ADIF 007CF6  
                               STR_1 036B                                 STR_2 0386  
                               STR_3 039E                                 STR_4 03B5  
                               u1154 0BFA                                 u1155 0BF2  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u1418 1248  
                               u1419 1260                                 u1618 07B4  
                               u1298 0562                                 u1619 07D0  
                               _PIE1 000F9D                                 u1658 06B2  
                               u1659 06CA                                 _PEIE 007F96  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00D2  
                               _main 0DAA                          ?_ES_DeQueue 00C4  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0040                        main@ErrorType 00E3  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D5  
       __end_ofi2_ES_Timer_InitTimer 10FE                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      ?_InitButtonHW 0001                    _PostAnalogService 1506  
   __end_of_InitializeButtonDebounce 142C                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00D5                         ___param_bank 000010  
                 ?_PostAnalogService 00D5                 __end_of_GetInputLine 155A  
              __end_of_GetBrightness 1568              __end_of_InitCanHardware 0F32  
                              ??_ISR 0026                   ES_Run@HighestPrior 00E2  
                        ?_ES_PostAll 00CF                  ??_PostAnalogService 00D8  
                              ?_main 0001                __end_of_ES_Timer_Init 1540  
                    __end_of___awmod 0D0E                      __end_of___lbmod 12F8  
                              _T1CON 000FCD                           _DistList00 0369  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _ERRIE 007D1D                                _ERRIF 007D25  
                              i2l229 0A32                                _IRXIE 007D1F  
                              _IRXIF 007D27           __size_of_CheckButtonEvents 006A  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                         _Brightness 003E                        __CFG_PWRT$OFF 000000  
                              _Ready 0085                       ??_InitAnalogHW 00B8  
                AnalogISR@Event2Post 0023                                _putch 156C  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 14A2  
          __end_of_PostAnalogService 151C                                status 000FD8  
                     ??_InitButtonHW 00B8                   __size_ofi2___awmod 0070  
                    __initialization 1456               ES_GetMSBitSet@LoopCntr 00C1  
         __end_of_ES_CheckUserEvents 126C                         __end_of_main 0E36  
                  ES_Timer_Init@Rate 00BA                   __size_of_AnalogISR 009C  
                   __end_of_InitPins 14DA           PostAnalogService@ThisEvent 00D5  
          RunAnalogService@ThisEvent 00D5                          _GetLocation 1560  
                __end_of_EventQueues 0365                               ??_main 00E3  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 14F0                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1       RunButtonDebounceSM@ReturnEvent 00D8  
                   __end_of_XmitData 12B4                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 008F  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BA  
                             i2l2220 1040                               i2l2300 0B1E  
                             i2l2240 1086                               i2l2232 106E  
                             i2l2224 104E                               i2l2216 1034  
                             i2l2226 1056                               i2l2228 105A  
                             i2l2236 1078                               i2l2504 11CE  
                             i2l2900 0A0A                               i2l2814 0D4E  
                             i2l2912 0A1E                               i2l2906 0A14  
                             i2l2918 0A28                               i2l2894 0A00  
                             _INTCON 000FF2                  __size_of_ES_PostAll 0078  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0604                               _TXB0D0 000F46  
                             _TXB0D1 000F47                               _TXB0D2 000F48  
             ??_PostButtonDebounceSM 00D8                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 00C9                       _Timer2PostFunc 0321  
                             _Queue0 0091                               _Queue1 009D  
                             _Queue2 00A9                       _SysTickCounter 003A  
                             ___wmul 1334                            ??___awmod 00BC  
                          ??___lbmod 00B9                     ?_InitCanHardware 0001  
           _InitializeButtonDebounce 13FE          RunAnalogService@ReturnEvent 00D8  
       __size_of_RunButtonDebounceSM 00A6                  _PostCan_XmitService 151C  
        __size_of_ES_Timer_InitTimer 0080                               clear_0 145C  
                             clear_1 1468                     _BusErrorResponse 1570  
                    ___awmod@divisor 00BA            ES_Timer_InitTimer@NewTime 00B8  
                    ___awmod@counter 00BC                               _printf 136A  
                        ISR@LastTime 0036                    _InitAnalogService 139E  
             ES_InitQueue@pThisQueue 00BB                    __end_ofi2___awmod 1090  
               i2_ES_Timer_InitTimer 1090                         __mediumconst 0000  
                        ISR@NextTime 0038                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                 ?_InitAnalogService 0001                               putch@c 0001  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 0116  
               ES_DeQueue@pThisQueue 00CC              ES_GetMSBitSet@Val2Check 00B8  
               ?_PostCan_XmitService 001E          InitCan_XmitService@Priority 00D8  
                  __end_of_AnalogISR 0DAA                      ___lbmod@divisor 00B8  
                ??_InitAnalogService 00D5                           __accesstop 0060  
            __end_of__initialization 146E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BA           __size_of_PostAnalogService 0016  
                    __CFG_PBADEN$OFF 000000                __size_of_GetInputLine 0006  
                      ___rparam_used 000001                          _EventQueues 035C  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
               __end_of_InitAnalogHW 1456                        ?_ES_InitQueue 00B8  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 156E  
                    _TMR_ActiveFlags 0087            __end_of_InitAnalogService 13CE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00BF  
        __end_of_InitCan_XmitService 13FE            __size_of_RunAnalogService 0050  
               __end_of_InitButtonHW 154C                ?i2_ES_Timer_InitTimer 0001  
                     _TMR_TimerArray 0060                         _GetInputLine 1554  
              ??_PostCan_XmitService 0021             ES_EnQueueFIFO@pThisQueue 00CD  
                            ??_putch 00B8             __HW_Process_Pending_Ints 14DA  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00C8  
        __size_of_RunCan_XmitService 00DA            __size_of_ES_PostToService 0076  
                     ??_ES_InitQueue 00BB                              ?___wmul 00BE  
                       ??_ES_PostAll 00D2         RunButtonDebounceSM@ThisEvent 00D5  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                        ES_PostAll@i 00D4                              _ECANCON 000F77  
                            ?_printf 00B8                           ??i2___wmul 000B  
                 __end_of_ES_DeQueue 04EE               i2ES_EnQueueFIFO@pBlock 000D  
                            _TXB0DLC 000F45                           ??_InitPins 00B8  
                 __end_of_ES_PostAll 0FAA                      __size_of_ES_Run 00F4  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
          i2ES_EnQueueFIFO@Event2Add 000F                              ___awmod 0C6C  
                            ___lbmod 12B4                  ES_PostAll@ThisEvent 00CF  
                    __size_of___wmul 0036                         __psmallconst 0300  
                         ??_XmitData 00B8                ES_Timer_InitTimer@Num 00BC  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1456  
                       ?_GetLocation 0001                              __ramtop 0300  
         __size_of_InitAnalogService 0030                              __ptext0 0DAA  
                            __ptext1 136A                              __ptext2 156C  
                            __ptext3 0604                              __ptext4 14DA  
                            __ptext5 04EE                              __ptext6 14F0  
                            __ptext7 1506                              __ptext8 0BC8  
                            __ptext9 11D2             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034               ??i2_ES_Timer_InitTimer 0003  
                       __size_of_ISR 0A66              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 00B8                   _ES_CheckUserEvents 1222  
                    ES_Run@ThisEvent 00B5                       __pintcode_body 09A0  
             __size_of_GetBrightness 0004                 end_of_initialization 146E  
                _RunButtonDebounceSM 0B22                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 1572            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 09A0  
                i2___wmul@multiplier 0007         ES_PostToService@WhichService 00D4  
              __size_of_InitAnalogHW 002A           ??_InitializeButtonDebounce 00BD  
             __size_of_ES_Timer_Init 000E            __size_of_CanErrorResponse 0002  
                            printf@c 00BC                              printf@f 00B8  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ?_RunButtonDebounceSM 00D5                 ??_ES_CheckUserEvents 00DD  
              __size_of_InitButtonHW 000C           InitAnalogService@ThisEvent 00D5  
                   _RunAnalogService 11D2                        _ES_Initialize 06F8  
                   ___lbmod@dividend 00B9                            _TRISAbits 000F92  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0369  
                       _InitAnalogHW 142C                 __end_of_ES_InitQueue 1334  
                          i2___awmod 1020                       ES_Initialize@i 00DB  
                        ___lbmod@rem 00BB             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 06F8                            _AnalogISR 0D0E  
      __size_of_PostButtonDebounceSM 0016          RunCan_XmitService@ThisEvent 00D5  
                       _InitButtonHW 1540                   __end_of_DistList00 036B  
                   _ES_PostToService 0FAA           __end_of_ES_Timer_InitTimer 0EB6  
              ??_RunButtonDebounceSM 00D8                        _GetBrightness 1564  
               __end_of_ServDescList 035C                       __end_of___wmul 136A  
                  ??_CanXmitResponse 0001                       ?_ES_Initialize 00D9  
         ??__HW_Process_Pending_Ints 00DC                        _ES_Timer_Init 1532  
                   i2___wmul@product 000B                       __end_of_printf 139E  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 0604  
                start_initialization 1456                          __end_of_ISR 0A6E  
                  __size_ofi2___wmul 0026                         _CurrentState 008C  
                         ?i2___awmod 0001                          _CANSTATbits 000F6E  
                           ??_ES_Run 00DE                            _TickCount 0090  
                         ?_AnalogISR 0001           __end_ofi2_ES_PostToService 11D2  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                     ?_GetBrightness 0001                             ??___wmul 00C2  
            i2ES_Timer_InitTimer@Num 0005              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00BA  
                     ?_ES_Timer_Init 00BA                    __size_of_XmitData 0048  
               __size_of_GetLocation 0004                       __HW_Timer_Init 14A2  
        __end_of_PostCan_XmitService 1532                          __pbssCOMRAM 0036  
                      __pcstackBANK0 00B8                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00B8  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 0030  
         __end_of_RunCan_XmitService 09A0                     i2_ES_EnQueueFIFO 0A6E  
CheckButtonEvents@CurrentButtonState 00DC                        __PRIMASK_temp 003C  
                   _CanErrorResponse 156E                    ??_Check4Keystroke 00B8  
                          __pintcode 0008                             ?___awmod 00B8  
                           ?___lbmod 00B8          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00DB             ES_PostToService@TheEvent 00CF  
             __end_of__HW_Timer_Init 14C0        PostButtonDebounceSM@ThisEvent 00D5  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
       PostCan_XmitService@ThisEvent 001E                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00D9  
                  ??_InitCanHardware 00B8            ES_GetMSBitSet@Nybble2Test 00C0  
                  ?_BusErrorResponse 0001                       ___wmul@product 00C2  
                        ??_AnalogISR 0021             __end_of_RunAnalogService 1222  
                 ??_BusErrorResponse 0001                      ??_GetBrightness 00B8  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 12F8  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 00BC       i2ES_PostToService@WhichService 001D  
          InitAnalogService@Priority 00D8                      ?__HW_Timer_Init 00B8  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 00BE  
                           i2___wmul 147C        __size_ofi2_ES_Timer_InitTimer 006E  
                 ES_DeQueue@SaveCrit 00CA                 ES_EnQueueFIFO@pBlock 00C4  
           __end_of_ES_PostToService 1020                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _LastData 008E                             _InitPins 14C0  
                           _Location 003F                      _CanXmitResponse 155A  
                           __Hrparam 0000                       _ES_GetMSBitSet 0BC8  
                           __Lrparam 0000                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                             _XmitData 126C  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 154C                       _ES_EnQueueFIFO 07E4  
  __size_of_InitializeButtonDebounce 002E         __end_of_PostButtonDebounceSM 1506  
          ?_InitializeButtonDebounce 0001                     XmitData@DataByte 00B8  
                 _ES_Timer_InitTimer 0E36                        ?_GetInputLine 0001  
             __end_of_BitNum2SetMask 0321                             __ptext10 0B22  
                           __ptext11 08C6                             __ptext20 12B4  
                           __ptext12 126C                             __ptext21 1222  
                           __ptext13 1560                             __ptext30 0E36  
                           __ptext22 1568                             __ptext14 1564  
                           __ptext31 0FAA                             __ptext23 10FE  
                           __ptext15 14C0                             __ptext40 154C  
                           __ptext32 07E4                             __ptext24 06F8  
                           __ptext16 0EB6                             __ptext41 156E  
                           __ptext33 1334                             __ptext25 139E  
                           __ptext17 0F32                             __ptext50 0000  
                           __ptext42 1570                             __ptext34 0C6C  
                           __ptext26 13CE                             __ptext18 142C  
                           __ptext43 0D0E                             __ptext35 1532  
                           __ptext27 13FE                             __ptext19 03C6  
                           __ptext44 1090                             __ptext36 14A2  
                           __ptext28 1540                             __ptext45 151C  
                           __ptext37 12F8                             __ptext29 1554  
                           __ptext46 1168                             __ptext47 0A6E  
                           __ptext39 155A                             __ptext48 147C  
                           __ptext49 1020    ES_Timer_Tick_Resp@NeedsProcessing 0083  
                ?_ES_Timer_InitTimer 00B8                        __size_of_main 008C  
                 _ES_Timer_Tick_Resp 04EE               __end_of_ES_GetMSBitSet 0C6C  
        __end_of_RunButtonDebounceSM 0BC8                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 1554               __end_of_ES_EnQueueFIFO 08C6  
                           int$flags 0040                  _InitCan_XmitService 13CE  
               ??_ES_Timer_InitTimer 00BA                    ES_DeQueue@NumLeft 00CB  
                 i2_ES_PostToService 1168             __end_ofi2_ES_EnQueueFIFO 0B22  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 1570  
                     ??_GetInputLine 00B8                  ?i2_ES_PostToService 0018  
                  _CheckButtonEvents 10FE                 ??_ES_Timer_Tick_Resp 00D8  
      RunCan_XmitService@ReturnEvent 00DA                   ?_CheckButtonEvents 0001  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 1560  
                    _Check4Keystroke 1568                             intlevel2 0000  
          Can_XmitService@MyPriority 008A                           _ES_DeQueue 03C6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
   InitializeButtonDebounce@Priority 00BD                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 00B8                  ??_CheckButtonEvents 00D8  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 008B  
                 _RunCan_XmitService 08C6                             printf@ap 00BA  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 00C4  
                         _ES_PostAll 0F32                        ??_GetLocation 00B8  
                   ES_DeQueue@pBlock 00C4                  ?_RunCan_XmitService 00D5  
                    _InitCanHardware 0EB6            __end_of_CheckButtonEvents 1168  
                    _LastButtonState 008D               ES_DeQueue@pReturnEvent 00C6  
              ES_InitQueue@BlockSize 00BA                ??_InitCan_XmitService 00D5  
       __size_of_PostCan_XmitService 0016                 ??_RunCan_XmitService 00D8  
               _PostButtonDebounceSM 14F0                    ?_RunAnalogService 00D5  
         CheckButtonEvents@ThisEvent 00D9  
