

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec  9 22:15:41 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	smallconst
    68  000300                     __psmallconst:
    69                           	opt stack 0
    70  000300  00                 	db	0
    71  000301                     _BitNum2SetMask:
    72                           	opt stack 0
    73  000301  0001               	dw	1
    74  000303  0002               	dw	2
    75  000305  0004               	dw	4
    76  000307  0008               	dw	8
    77  000309  0010               	dw	16
    78  00030B  0020               	dw	32
    79  00030D  0040               	dw	64
    80  00030F  0080               	dw	128
    81  000311  0100               	dw	256
    82  000313  0200               	dw	512
    83  000315  0400               	dw	1024
    84  000317  0800               	dw	2048
    85  000319  1000               	dw	4096
    86  00031B  2000               	dw	8192
    87  00031D  4000               	dw	16384
    88  00031F  8000               	dw	32768
    89  000321                     __end_of_BitNum2SetMask:
    90                           	opt stack 0
    91  000321                     _Timer2PostFunc:
    92                           	opt stack 0
    93  000321  26                 	db	low _PostAnalogService
    94  000322  15                 	db	high _PostAnalogService
    95  000323  10                 	db	low _PostButtonDebounceSM
    96  000324  15                 	db	high _PostButtonDebounceSM
    97  000325  00                 	db	0
    98  000326  00                 	db	0
    99  000327  00                 	db	0
   100  000328  00                 	db	0
   101  000329  00                 	db	0
   102  00032A  00                 	db	0
   103  00032B  00                 	db	0
   104  00032C  00                 	db	0
   105  00032D  00                 	db	0
   106  00032E  00                 	db	0
   107  00032F  00                 	db	0
   108  000330  00                 	db	0
   109  000331  00                 	db	0
   110  000332  00                 	db	0
   111  000333  00                 	db	0
   112  000334  00                 	db	0
   113  000335  00                 	db	0
   114  000336  00                 	db	0
   115  000337  00                 	db	0
   116  000338  00                 	db	0
   117  000339  00                 	db	0
   118  00033A  00                 	db	0
   119  00033B  00                 	db	0
   120  00033C  00                 	db	0
   121  00033D  00                 	db	0
   122  00033E  00                 	db	0
   123  00033F  00                 	db	0
   124  000340  00                 	db	0
   125  000341                     __end_of_Timer2PostFunc:
   126                           	opt stack 0
   127  000341                     _Nybble2MSBitNum:
   128                           	opt stack 0
   129  000341  00                 	db	0
   130  000342  01                 	db	1
   131  000343  01                 	db	1
   132  000344  02                 	db	2
   133  000345  02                 	db	2
   134  000346  02                 	db	2
   135  000347  02                 	db	2
   136  000348  03                 	db	3
   137  000349  03                 	db	3
   138  00034A  03                 	db	3
   139  00034B  03                 	db	3
   140  00034C  03                 	db	3
   141  00034D  03                 	db	3
   142  00034E  03                 	db	3
   143  00034F  03                 	db	3
   144  000350                     __end_of_Nybble2MSBitNum:
   145                           	opt stack 0
   146  000350                     _ServDescList:
   147                           	opt stack 0
   148  000350  EE                 	db	low _InitCan_XmitService
   149  000351  13                 	db	high _InitCan_XmitService
   150  000352  C6                 	db	low _RunCan_XmitService
   151  000353  08                 	db	high _RunCan_XmitService
   152  000354  1E                 	db	low _InitializeButtonDebounce
   153  000355  14                 	db	high _InitializeButtonDebounce
   154  000356  22                 	db	low _RunButtonDebounceSM
   155  000357  0B                 	db	high _RunButtonDebounceSM
   156  000358  BE                 	db	low _InitAnalogService
   157  000359  13                 	db	high _InitAnalogService
   158  00035A  3A                 	db	low _RunAnalogService
   159  00035B  12                 	db	high _RunAnalogService
   160  00035C                     __end_of_ServDescList:
   161                           	opt stack 0
   162  00035C                     _EventQueues:
   163                           	opt stack 0
   164  00035C  95                 	db	low _Queue0
   165  00035D  00                 	db	high _Queue0
   166  00035E  04                 	db	4
   167  00035F  A1                 	db	low _Queue1
   168  000360  00                 	db	high _Queue1
   169  000361  04                 	db	4
   170  000362  AD                 	db	low _Queue2
   171  000363  00                 	db	high _Queue2
   172  000364  04                 	db	4
   173  000365                     __end_of_EventQueues:
   174                           	opt stack 0
   175  000365                     _ES_EventList:
   176                           	opt stack 0
   177  000365  94                 	db	low _Check4Keystroke
   178  000366  15                 	db	high _Check4Keystroke
   179  000367  66                 	db	low _CheckButtonEvents
   180  000368  11                 	db	high _CheckButtonEvents
   181  000369                     __end_of_ES_EventList:
   182                           	opt stack 0
   183  000369                     _DistList00:
   184                           	opt stack 0
   185  000369  3C                 	db	low _PostCan_XmitService
   186  00036A  15                 	db	high _PostCan_XmitService
   187  00036B                     __end_of_DistList00:
   188                           	opt stack 0
   189  0000                     _RXF0EIDH	set	3842
   190  0000                     _RXF0EIDL	set	3843
   191  0000                     _RXF0SIDH	set	3840
   192  0000                     _RXF0SIDL	set	3841
   193  0000                     _RXM0EIDH	set	3866
   194  0000                     _RXM0EIDL	set	3867
   195  0000                     _RXM0SIDH	set	3864
   196  0000                     _RXM0SIDL	set	3865
   197  0000                     _TXB0CONbits	set	3904
   198  0000                     _TXB0D0	set	3910
   199  0000                     _TXB0D1	set	3911
   200  0000                     _TXB0D2	set	3912
   201  0000                     _TXB0D3	set	3913
   202  0000                     _TXB0D4	set	3914
   203  0000                     _TXB0DLC	set	3909
   204  0000                     _TXB0EIDH	set	3907
   205  0000                     _TXB0EIDL	set	3908
   206  0000                     _TXB0SIDH	set	3905
   207  0000                     _TXB0SIDL	set	3906
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _ADCON1	set	4033
   210  0000                     _ADCON1bits	set	4033
   211  0000                     _ADCON2bits	set	4032
   212  0000                     _ADRESH	set	4036
   213  0000                     _ADRESL	set	4035
   214  0000                     _BRGCON1bits	set	3952
   215  0000                     _BRGCON2bits	set	3953
   216  0000                     _BRGCON3bits	set	3954
   217  0000                     _CANCON	set	3951
   218  0000                     _CANSTATbits	set	3950
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCPR1H	set	4031
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CIOCON	set	3955
   223  0000                     _ECANCON	set	3959
   224  0000                     _INTCON	set	4082
   225  0000                     _LATA	set	3977
   226  0000                     _LATB	set	3978
   227  0000                     _LATC	set	3979
   228  0000                     _PIE1	set	3997
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTB	set	3969
   231  0000                     _PORTC	set	3970
   232  0000                     _RXB0CONbits	set	3936
   233  0000                     _T1CON	set	4045
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISAbits	set	3986
   236  0000                     _TRISBbits	set	3987
   237  0000                     _ADIE	set	31982
   238  0000                     _ADIF	set	31990
   239  0000                     _CCP1IF	set	31986
   240  0000                     _ERRIE	set	32029
   241  0000                     _ERRIF	set	32037
   242  0000                     _GIE	set	32663
   243  0000                     _IRXIE	set	32031
   244  0000                     _IRXIF	set	32039
   245  0000                     _LATA2	set	31818
   246  0000                     _LATA3	set	31819
   247  0000                     _LATA4	set	31820
   248  0000                     _LATA5	set	31821
   249  0000                     _PEIE	set	32662
   250  0000                     _RXB0IE	set	32024
   251  0000                     _RXB0IF	set	32032
   252  0000                     _TXB0IE	set	32026
   253  0000                     _TXB0IF	set	32034
   254  00036B                     STR_1:
   255  00036B  46                 	db	70	;'F'
   256  00036C  61                 	db	97	;'a'
   257  00036D  69                 	db	105	;'i'
   258  00036E  6C                 	db	108	;'l'
   259  00036F  65                 	db	101	;'e'
   260  000370  64                 	db	100	;'d'
   261  000371  20                 	db	32
   262  000372  6F                 	db	111	;'o'
   263  000373  6E                 	db	110	;'n'
   264  000374  20                 	db	32
   265  000375  61                 	db	97	;'a'
   266  000376  74                 	db	116	;'t'
   267  000377  74                 	db	116	;'t'
   268  000378  65                 	db	101	;'e'
   269  000379  6D                 	db	109	;'m'
   270  00037A  70                 	db	112	;'p'
   271  00037B  74                 	db	116	;'t'
   272  00037C  20                 	db	32
   273  00037D  74                 	db	116	;'t'
   274  00037E  6F                 	db	111	;'o'
   275  00037F  20                 	db	32
   276  000380  50                 	db	80	;'P'
   277  000381  6F                 	db	111	;'o'
   278  000382  73                 	db	115	;'s'
   279  000383  74                 	db	116	;'t'
   280  000384  0A                 	db	10
   281  000385  00                 	db	0
   282  000386                     STR_2:
   283  000386  46                 	db	70	;'F'
   284  000387  61                 	db	97	;'a'
   285  000388  69                 	db	105	;'i'
   286  000389  6C                 	db	108	;'l'
   287  00038A  65                 	db	101	;'e'
   288  00038B  64                 	db	100	;'d'
   289  00038C  20                 	db	32
   290  00038D  6F                 	db	111	;'o'
   291  00038E  6E                 	db	110	;'n'
   292  00038F  20                 	db	32
   293  000390  4E                 	db	78	;'N'
   294  000391  55                 	db	85	;'U'
   295  000392  4C                 	db	76	;'L'
   296  000393  4C                 	db	76	;'L'
   297  000394  20                 	db	32
   298  000395  70                 	db	112	;'p'
   299  000396  6F                 	db	111	;'o'
   300  000397  69                 	db	105	;'i'
   301  000398  6E                 	db	110	;'n'
   302  000399  74                 	db	116	;'t'
   303  00039A  65                 	db	101	;'e'
   304  00039B  72                 	db	114	;'r'
   305  00039C  0A                 	db	10
   306  00039D  00                 	db	0
   307  00039E                     STR_3:
   308  00039E  46                 	db	70	;'F'
   309  00039F  61                 	db	97	;'a'
   310  0003A0  69                 	db	105	;'i'
   311  0003A1  6C                 	db	108	;'l'
   312  0003A2  65                 	db	101	;'e'
   313  0003A3  64                 	db	100	;'d'
   314  0003A4  20                 	db	32
   315  0003A5  49                 	db	73	;'I'
   316  0003A6  6E                 	db	110	;'n'
   317  0003A7  69                 	db	105	;'i'
   318  0003A8  74                 	db	116	;'t'
   319  0003A9  69                 	db	105	;'i'
   320  0003AA  61                 	db	97	;'a'
   321  0003AB  6C                 	db	108	;'l'
   322  0003AC  69                 	db	105	;'i'
   323  0003AD  7A                 	db	122	;'z'
   324  0003AE  61                 	db	97	;'a'
   325  0003AF  74                 	db	116	;'t'
   326  0003B0  69                 	db	105	;'i'
   327  0003B1  6F                 	db	111	;'o'
   328  0003B2  6E                 	db	110	;'n'
   329  0003B3  0A                 	db	10
   330  0003B4  00                 	db	0
   331  0003B5                     STR_4:
   332  0003B5  4F                 	db	79	;'O'
   333  0003B6  74                 	db	116	;'t'
   334  0003B7  68                 	db	104	;'h'
   335  0003B8  65                 	db	101	;'e'
   336  0003B9  72                 	db	114	;'r'
   337  0003BA  20                 	db	32
   338  0003BB  46                 	db	70	;'F'
   339  0003BC  61                 	db	97	;'a'
   340  0003BD  69                 	db	105	;'i'
   341  0003BE  6C                 	db	108	;'l'
   342  0003BF  75                 	db	117	;'u'
   343  0003C0  72                 	db	114	;'r'
   344  0003C1  65                 	db	101	;'e'
   345  0003C2  0A                 	db	10
   346  0003C3  00                 	db	0
   347                           
   348                           ; #config settings
   349  0003C4  00                 	db	0	; dummy byte at the end
   350  0000                     
   351                           	psect	cinit
   352  001476                     __pcinit:
   353                           	opt stack 0
   354  001476                     start_initialization:
   355                           	opt stack 0
   356  001476                     __initialization:
   357                           	opt stack 0
   358                           
   359                           ; Clear objects allocated to BANK0 (92 bytes)
   360  001476  EE00  F060         	lfsr	0,__pbssBANK0
   361  00147A  0E5C               	movlw	92
   362  00147C                     clear_0:
   363  00147C  6AEE               	clrf	postinc0,c
   364  00147E  06E8               	decf	wreg,f,c
   365  001480  E1FD               	bnz	clear_0
   366                           
   367                           ; Clear objects allocated to COMRAM (8 bytes)
   368  001482  EE00  F036         	lfsr	0,__pbssCOMRAM
   369  001486  0E08               	movlw	8
   370  001488                     clear_1:
   371  001488  6AEE               	clrf	postinc0,c
   372  00148A  06E8               	decf	wreg,f,c
   373  00148C  E1FD               	bnz	clear_1
   374  00148E                     end_of_initialization:
   375                           	opt stack 0
   376  00148E                     __end_of__initialization:
   377                           	opt stack 0
   378  00148E  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   379  001490  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   380  001492  0E00               	movlw	low (__Lmediumconst shr (0+16))
   381  001494  6EF8               	movwf	tblptru,c
   382  001496  0100               	movlb	0
   383  001498  EF87  F006         	goto	_main	;jump to C main() function
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssCOMRAM
   389  000036                     __pbssCOMRAM:
   390                           	opt stack 0
   391  000036                     ISR@LastTime:
   392                           	opt stack 0
   393  000036                     	ds	2
   394  000038                     ISR@NextTime:
   395                           	opt stack 0
   396  000038                     	ds	2
   397  00003A                     _SysTickCounter:
   398                           	opt stack 0
   399  00003A                     	ds	2
   400  00003C                     __PRIMASK_temp:
   401                           	opt stack 0
   402  00003C                     	ds	2
   403                           tblptru	equ	0xFF8
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK0
   408  000060                     __pbssBANK0:
   409                           	opt stack 0
   410  000060                     _TMR_TimerArray:
   411                           	opt stack 0
   412  000060                     	ds	32
   413  000080                     ES_Timer_Tick_Resp@NewEvent:
   414                           	opt stack 0
   415  000080                     	ds	3
   416  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   417                           	opt stack 0
   418  000083                     	ds	2
   419  000085                     _Brightness:
   420                           	opt stack 0
   421  000085                     	ds	2
   422  000087                     _Location:
   423                           	opt stack 0
   424  000087                     	ds	2
   425  000089                     _Ready:
   426                           	opt stack 0
   427  000089                     	ds	2
   428  00008B                     _TMR_ActiveFlags:
   429                           	opt stack 0
   430  00008B                     	ds	2
   431  00008D                     Analog_Service@MyPriority:
   432                           	opt stack 0
   433  00008D                     	ds	1
   434  00008E                     Can_XmitService@MyPriority:
   435                           	opt stack 0
   436  00008E                     	ds	1
   437  00008F                     ES_Timer_Tick_Resp@NextTimer2Process:
   438                           	opt stack 0
   439  00008F                     	ds	1
   440  000090                     _CurrentState:
   441                           	opt stack 0
   442  000090                     	ds	1
   443  000091                     _LastButtonState:
   444                           	opt stack 0
   445  000091                     	ds	1
   446  000092                     _LastData:
   447                           	opt stack 0
   448  000092                     	ds	1
   449  000093                     _MyPriority:
   450                           	opt stack 0
   451  000093                     	ds	1
   452  000094                     _TickCount:
   453                           	opt stack 0
   454  000094                     	ds	1
   455  000095                     _Queue0:
   456                           	opt stack 0
   457  000095                     	ds	12
   458  0000A1                     _Queue1:
   459                           	opt stack 0
   460  0000A1                     	ds	12
   461  0000AD                     _Queue2:
   462                           	opt stack 0
   463  0000AD                     	ds	12
   464  0000B9                     ES_Run@ThisEvent:
   465                           	opt stack 0
   466  0000B9                     	ds	3
   467                           tblptru	equ	0xFF8
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           
   471                           	psect	cstackBANK0
   472  0000BC                     __pcstackBANK0:
   473                           	opt stack 0
   474  0000BC                     ?_printf:
   475                           	opt stack 0
   476  0000BC                     ?_GetBrightness:
   477                           	opt stack 0
   478  0000BC                     ?_GetLocation:
   479                           	opt stack 0
   480  0000BC                     ?___awmod:
   481                           	opt stack 0
   482  0000BC                     ___lbmod@divisor:
   483                           	opt stack 0
   484  0000BC                     ES_GetMSBitSet@Val2Check:
   485                           	opt stack 0
   486  0000BC                     __HW_Timer_Init@Rate:
   487                           	opt stack 0
   488  0000BC                     ES_InitQueue@pBlock:
   489                           	opt stack 0
   490  0000BC                     ES_Timer_InitTimer@NewTime:
   491                           	opt stack 0
   492  0000BC                     printf@f:
   493                           	opt stack 0
   494  0000BC                     ___awmod@dividend:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  0000BC                     	ds	1
   499  0000BD                     ___lbmod@dividend:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x1
   503  0000BD                     	ds	1
   504  0000BE                     ??_ES_Timer_InitTimer:
   505  0000BE                     ??_ES_GetMSBitSet:
   506  0000BE                     ES_InitQueue@BlockSize:
   507                           	opt stack 0
   508  0000BE                     XmitData@DataByte:
   509                           	opt stack 0
   510  0000BE                     ___lbmod@counter:
   511                           	opt stack 0
   512  0000BE                     ES_Timer_Init@Rate:
   513                           	opt stack 0
   514  0000BE                     printf@ap:
   515                           	opt stack 0
   516  0000BE                     ___awmod@divisor:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x2
   520  0000BE                     	ds	1
   521  0000BF                     ___lbmod@rem:
   522                           	opt stack 0
   523  0000BF                     ES_InitQueue@pThisQueue:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x3
   527  0000BF                     	ds	1
   528  0000C0                     ES_Timer_InitTimer@Num:
   529                           	opt stack 0
   530  0000C0                     printf@c:
   531                           	opt stack 0
   532  0000C0                     ___awmod@counter:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x4
   536  0000C0                     	ds	1
   537  0000C1                     InitializeButtonDebounce@Priority:
   538                           	opt stack 0
   539  0000C1                     ___awmod@sign:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x5
   543  0000C1                     	ds	1
   544  0000C2                     ?___wmul:
   545                           	opt stack 0
   546  0000C2                     ___wmul@multiplier:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x6
   550  0000C2                     	ds	1
   551  0000C3                     ES_GetMSBitSet@ReturnVal:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x7
   555  0000C3                     	ds	1
   556  0000C4                     ES_GetMSBitSet@Nybble2Test:
   557                           	opt stack 0
   558  0000C4                     ___wmul@multiplicand:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x8
   562  0000C4                     	ds	1
   563  0000C5                     ES_GetMSBitSet@LoopCntr:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x9
   567  0000C5                     	ds	1
   568  0000C6                     ___wmul@product:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0xA
   572  0000C6                     	ds	2
   573  0000C8                     ES_EnQueueFIFO@pBlock:
   574                           	opt stack 0
   575  0000C8                     ES_DeQueue@pBlock:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0xC
   579  0000C8                     	ds	2
   580  0000CA                     ES_DeQueue@pReturnEvent:
   581                           	opt stack 0
   582  0000CA                     ES_EnQueueFIFO@Event2Add:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0xE
   586  0000CA                     	ds	2
   587  0000CC                     ??_ES_DeQueue:
   588                           
   589                           ; 1 bytes @ 0x10
   590  0000CC                     	ds	1
   591  0000CD                     ??_ES_EnQueueFIFO:
   592                           
   593                           ; 1 bytes @ 0x11
   594  0000CD                     	ds	1
   595  0000CE                     ES_DeQueue@SaveCrit:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x12
   599  0000CE                     	ds	1
   600  0000CF                     ES_DeQueue@NumLeft:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x13
   604  0000CF                     	ds	1
   605  0000D0                     ES_EnQueueFIFO@SaveCrit:
   606                           	opt stack 0
   607  0000D0                     ES_DeQueue@pThisQueue:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x14
   611  0000D0                     	ds	1
   612  0000D1                     ES_EnQueueFIFO@pThisQueue:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x15
   616  0000D1                     	ds	2
   617  0000D3                     ES_PostAll@ThisEvent:
   618                           	opt stack 0
   619  0000D3                     ES_PostToService@TheEvent:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x17
   623  0000D3                     	ds	3
   624  0000D6                     ??_ES_PostToService:
   625  0000D6                     ??_ES_PostAll:
   626                           
   627                           ; 1 bytes @ 0x1A
   628  0000D6                     	ds	2
   629  0000D8                     ES_PostAll@i:
   630                           	opt stack 0
   631  0000D8                     ES_PostToService@WhichService:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x1C
   635  0000D8                     	ds	1
   636  0000D9                     ?_RunCan_XmitService:
   637                           	opt stack 0
   638  0000D9                     ?_RunAnalogService:
   639                           	opt stack 0
   640  0000D9                     ?_RunButtonDebounceSM:
   641                           	opt stack 0
   642  0000D9                     PostButtonDebounceSM@ThisEvent:
   643                           	opt stack 0
   644  0000D9                     RunButtonDebounceSM@ThisEvent:
   645                           	opt stack 0
   646  0000D9                     InitCan_XmitService@ThisEvent:
   647                           	opt stack 0
   648  0000D9                     RunCan_XmitService@ThisEvent:
   649                           	opt stack 0
   650  0000D9                     InitAnalogService@ThisEvent:
   651                           	opt stack 0
   652  0000D9                     PostAnalogService@ThisEvent:
   653                           	opt stack 0
   654  0000D9                     RunAnalogService@ThisEvent:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x1D
   658  0000D9                     	ds	3
   659  0000DC                     ??_RunCan_XmitService:
   660  0000DC                     ??_ES_Timer_Tick_Resp:
   661  0000DC                     CheckButtonEvents@ReturnVal:
   662                           	opt stack 0
   663  0000DC                     InitCan_XmitService@Priority:
   664                           	opt stack 0
   665  0000DC                     InitAnalogService@Priority:
   666                           	opt stack 0
   667  0000DC                     RunButtonDebounceSM@ReturnEvent:
   668                           	opt stack 0
   669  0000DC                     RunAnalogService@ReturnEvent:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x20
   673  0000DC                     	ds	1
   674  0000DD                     ES_Initialize@NewRate:
   675                           	opt stack 0
   676  0000DD                     CheckButtonEvents@ThisEvent:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x21
   680  0000DD                     	ds	1
   681  0000DE                     RunCan_XmitService@ReturnEvent:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x22
   685  0000DE                     	ds	1
   686  0000DF                     ES_Initialize@i:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x23
   690  0000DF                     	ds	1
   691  0000E0                     CheckButtonEvents@CurrentButtonState:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x24
   695  0000E0                     	ds	1
   696  0000E1                     ES_CheckUserEvents@i:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x25
   700  0000E1                     	ds	1
   701  0000E2                     ??_ES_Run:
   702                           
   703                           ; 1 bytes @ 0x26
   704  0000E2                     	ds	4
   705  0000E6                     ES_Run@HighestPrior:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x2A
   709  0000E6                     	ds	1
   710  0000E7                     main@ErrorType:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x2B
   714  0000E7                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           	psect	cstackCOMRAM
   720  000001                     __pcstackCOMRAM:
   721                           	opt stack 0
   722  000001                     ?i2___awmod:
   723                           	opt stack 0
   724  000001                     i2ES_Timer_InitTimer@NewTime:
   725                           	opt stack 0
   726  000001                     i2___awmod@dividend:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x0
   730  000001                     	ds	2
   731  000003                     ??i2_ES_Timer_InitTimer:
   732  000003                     i2___awmod@divisor:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x2
   736  000003                     	ds	2
   737  000005                     i2ES_Timer_InitTimer@Num:
   738                           	opt stack 0
   739  000005                     i2___awmod@counter:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x4
   743  000005                     	ds	1
   744  000006                     i2___awmod@sign:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x5
   748  000006                     	ds	1
   749  000007                     ?i2___wmul:
   750                           	opt stack 0
   751  000007                     i2___wmul@multiplier:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x6
   755  000007                     	ds	2
   756  000009                     i2___wmul@multiplicand:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x8
   760  000009                     	ds	2
   761  00000B                     i2___wmul@product:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0xA
   765  00000B                     	ds	2
   766  00000D                     i2ES_EnQueueFIFO@pBlock:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0xC
   770  00000D                     	ds	2
   771  00000F                     i2ES_EnQueueFIFO@Event2Add:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0xE
   775  00000F                     	ds	3
   776  000012                     ??i2_ES_EnQueueFIFO:
   777                           
   778                           ; 1 bytes @ 0x11
   779  000012                     	ds	3
   780  000015                     i2ES_EnQueueFIFO@SaveCrit:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x14
   784  000015                     	ds	1
   785  000016                     i2ES_EnQueueFIFO@pThisQueue:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x15
   789  000016                     	ds	2
   790  000018                     i2ES_PostToService@TheEvent:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x17
   794  000018                     	ds	3
   795  00001B                     ??i2_ES_PostToService:
   796                           
   797                           ; 1 bytes @ 0x1A
   798  00001B                     	ds	2
   799  00001D                     i2ES_PostToService@WhichService:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x1C
   803  00001D                     	ds	1
   804  00001E                     PostCan_XmitService@ThisEvent:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x1D
   808  00001E                     	ds	3
   809  000021                     ??_AnalogISR:
   810  000021                     
   811                           ; 1 bytes @ 0x20
   812  000021                     	ds	2
   813  000023                     AnalogISR@Event2Post:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x22
   817  000023                     	ds	3
   818  000026                     ??_ISR:
   819                           
   820                           ; 1 bytes @ 0x25
   821  000026                     	ds	16
   822                           tblptru	equ	0xFF8
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           
   826 ;;
   827 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   828 ;;
   829 ;; *************** function _main *****************
   830 ;; Defined at:
   831 ;;		line 25 in file "main.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  ErrorType       1   43[BANK0 ] enum E15645
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2  364[None  ] int 
   838 ;; Registers used:
   839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   845 ;;      Params:         0       0       0       0
   846 ;;      Locals:         0       1       0       0
   847 ;;      Temps:          0       0       0       0
   848 ;;      Totals:         0       1       0       0
   849 ;;Total ram usage:        1 bytes
   850 ;; Hardware stack levels required when called:   13
   851 ;; This function calls:
   852 ;;		_ES_Initialize
   853 ;;		_ES_Run
   854 ;;		_printf
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861  000D0E                     __ptext0:
   862                           	opt stack 0
   863  000D0E                     _main:
   864                           	opt stack 18
   865                           
   866                           ;main.c: 28: ADCON1 = 0x0D;
   867                           
   868                           ;incstack = 0
   869  000D0E  0E0D               	movlw	13
   870  000D10  6EC1               	movwf	4033,c	;volatile
   871                           
   872                           ;main.c: 35: ES_Return_t ErrorType;
   873                           ;main.c: 51: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   874  000D12  0E9C               	movlw	156
   875  000D14  0100               	movlb	0	; () banked
   876  000D16  6FDE               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   877  000D18  0E3F               	movlw	63
   878  000D1A  6FDD               	movwf	ES_Initialize@NewRate& (0+255),b
   879  000D1C  EC7C  F003         	call	_ES_Initialize	;wreg free
   880  000D20  0100               	movlb	0	; () banked
   881  000D22  6FE7               	movwf	main@ErrorType& (0+255),b
   882                           
   883                           ; BSR set to: 0
   884                           ;main.c: 52: if ( ErrorType == Success ) {
   885  000D24  0100               	movlb	0	; () banked
   886  000D26  51E7               	movf	main@ErrorType& (0+255),w,b
   887  000D28  0100               	movlb	0	; () banked
   888  000D2A  A4D8               	btfss	status,2,c
   889  000D2C  D029               	goto	l3014
   890                           
   891                           ; BSR set to: 0
   892                           ;main.c: 54: ErrorType = ES_Run();
   893  000D2E  EC02  F003         	call	_ES_Run	;wreg free
   894  000D32  0100               	movlb	0	; () banked
   895  000D34  6FE7               	movwf	main@ErrorType& (0+255),b
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 56: }
   899                           ;main.c: 58: switch (ErrorType){
   900  000D36  D024               	goto	l3014
   901  000D38                     l3004:
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 60: printf("Failed on attempt to Post\n");
   905  000D38  0E6B               	movlw	low STR_1
   906  000D3A  0100               	movlb	0	; () banked
   907  000D3C  6FBC               	movwf	printf@f& (0+255),b
   908  000D3E  0E03               	movlw	high STR_1
   909  000D40  0100               	movlb	0	; () banked
   910  000D42  6FBD               	movwf	(printf@f+1)& (0+255),b
   911  000D44  ECC5  F009         	call	_printf	;wreg free
   912                           
   913                           ;main.c: 61: break;
   914  000D48  D027               	goto	l372
   915  000D4A                     l3006:
   916                           
   917                           ;main.c: 63: printf("Failed on NULL pointer\n");
   918  000D4A  0E86               	movlw	low STR_2
   919  000D4C  0100               	movlb	0	; () banked
   920  000D4E  6FBC               	movwf	printf@f& (0+255),b
   921  000D50  0E03               	movlw	high STR_2
   922  000D52  0100               	movlb	0	; () banked
   923  000D54  6FBD               	movwf	(printf@f+1)& (0+255),b
   924  000D56  ECC5  F009         	call	_printf	;wreg free
   925                           
   926                           ;main.c: 64: break;
   927  000D5A  D01E               	goto	l372
   928  000D5C                     l3008:
   929                           
   930                           ;main.c: 66: printf("Failed Initialization\n");
   931  000D5C  0E9E               	movlw	low STR_3
   932  000D5E  0100               	movlb	0	; () banked
   933  000D60  6FBC               	movwf	printf@f& (0+255),b
   934  000D62  0E03               	movlw	high STR_3
   935  000D64  0100               	movlb	0	; () banked
   936  000D66  6FBD               	movwf	(printf@f+1)& (0+255),b
   937  000D68  ECC5  F009         	call	_printf	;wreg free
   938                           
   939                           ;main.c: 67: break;
   940  000D6C  D015               	goto	l372
   941  000D6E                     l3010:
   942                           
   943                           ;main.c: 69: printf("Other Failure\n");
   944  000D6E  0EB5               	movlw	low STR_4
   945  000D70  0100               	movlb	0	; () banked
   946  000D72  6FBC               	movwf	printf@f& (0+255),b
   947  000D74  0E03               	movlw	high STR_4
   948  000D76  0100               	movlb	0	; () banked
   949  000D78  6FBD               	movwf	(printf@f+1)& (0+255),b
   950  000D7A  ECC5  F009         	call	_printf	;wreg free
   951                           
   952                           ;main.c: 71: }
   953                           
   954                           ;main.c: 70: break;
   955  000D7E  D00C               	goto	l372
   956  000D80                     l3014:
   957  000D80  0100               	movlb	0	; () banked
   958  000D82  51E7               	movf	main@ErrorType& (0+255),w,b
   959                           
   960                           ; Switch size 1, requested type "space"
   961                           ; Number of cases is 3, Range of values is 1 to 5
   962                           ; switch strategies available:
   963                           ; Name         Instructions Cycles
   964                           ; simple_byte           10     6 (average)
   965                           ;	Chosen strategy is simple_byte
   966  000D84  0A01               	xorlw	1	; case 1
   967  000D86  B4D8               	btfsc	status,2,c
   968  000D88  D7D7               	goto	l3004
   969  000D8A  0A02               	xorlw	2	; case 3
   970  000D8C  B4D8               	btfsc	status,2,c
   971  000D8E  D7DD               	goto	l3006
   972  000D90  0A06               	xorlw	6	; case 5
   973  000D92  B4D8               	btfsc	status,2,c
   974  000D94  D7E3               	goto	l3008
   975  000D96  D7EB               	goto	l3010
   976  000D98                     l372:
   977                           
   978                           ;main.c: 73: ;
   979  000D98  D7FF               	goto	l372
   980  000D9A                     __end_of_main:
   981                           	opt stack 0
   982                           tblptru	equ	0xFF8
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           status	equ	0xFD8
   986                           
   987 ;; *************** function _printf *****************
   988 ;; Defined at:
   989 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   992 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  tmpval          4    0        struct .
   995 ;;  cp              3    0        PTR const unsigned char 
   996 ;;  ap              2    2[BANK0 ] PTR void [1]
   997 ;;		 -> ?_printf(2), 
   998 ;;  len             2    0        unsigned int 
   999 ;;  val             2    0        unsigned int 
  1000 ;;  c               1    4[BANK0 ] char 
  1001 ;;  flag            1    0        unsigned char 
  1002 ;;  prec            1    0        char 
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  2    0[BANK0 ] int 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1012 ;;      Params:         0       2       0       0
  1013 ;;      Locals:         0       3       0       0
  1014 ;;      Temps:          0       0       0       0
  1015 ;;      Totals:         0       5       0       0
  1016 ;;Total ram usage:        5 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    7
  1019 ;; This function calls:
  1020 ;;		_putch
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text1
  1027  00138A                     __ptext1:
  1028                           	opt stack 0
  1029  00138A                     _printf:
  1030                           	opt stack 23
  1031                           
  1032                           ;doprnt.c: 466: va_list ap;
  1033                           ;doprnt.c: 499: signed char c;
  1034                           ;doprnt.c: 506: signed char prec;
  1035                           ;doprnt.c: 508: unsigned char flag;
  1036                           ;doprnt.c: 523: union {
  1037                           ;doprnt.c: 524: unsigned long vd;
  1038                           ;doprnt.c: 525: double integ;
  1039                           ;doprnt.c: 526: } tmpval;
  1040                           ;doprnt.c: 528: unsigned int val;
  1041                           ;doprnt.c: 529: unsigned len;
  1042                           ;doprnt.c: 530: const char * cp;
  1043                           ;doprnt.c: 533: *ap = __va_start();
  1044                           
  1045                           ;incstack = 0
  1046  00138A  0EBE               	movlw	low (?_printf+2)
  1047  00138C  0100               	movlb	0	; () banked
  1048  00138E  6FBE               	movwf	printf@ap& (0+255),b
  1049  001390  0E00               	movlw	high (?_printf+2)
  1050  001392  0100               	movlb	0	; () banked
  1051  001394  6FBF               	movwf	(printf@ap+1)& (0+255),b
  1052                           
  1053                           ;doprnt.c: 536: while(c = *f++) {
  1054  001396  D004               	goto	l2850
  1055  001398                     l2848:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;doprnt.c: 540: {
  1059                           ;doprnt.c: 541: (putch(c) );
  1060  001398  0100               	movlb	0	; () banked
  1061  00139A  51C0               	movf	printf@c& (0+255),w,b
  1062  00139C  ECCC  F00A         	call	_putch
  1063  0013A0                     l2850:
  1064  0013A0  C0BC  FFF6         	movff	printf@f,tblptrl
  1065  0013A4  C0BD  FFF7         	movff	printf@f+1,tblptrh
  1066  0013A8  0100               	movlb	0	; () banked
  1067  0013AA  4BBC               	infsnz	printf@f& (0+255),f,b
  1068  0013AC  2BBD               	incf	(printf@f+1)& (0+255),f,b
  1069  0013AE                     	if	0	;tblptru may be non-zero
  1070  0013AE                     	endif
  1071  0013AE                     	if	0	;tblptru may be non-zero
  1072  0013AE                     	endif
  1073  0013AE  0008               	tblrd		*
  1074  0013B0  CFF5 F0C0          	movff	tablat,printf@c
  1075  0013B4  0100               	movlb	0	; () banked
  1076  0013B6  51C0               	movf	printf@c& (0+255),w,b
  1077  0013B8  B4D8               	btfsc	status,2,c
  1078  0013BA  0012               	return	
  1079  0013BC  D7ED               	goto	l2848
  1080  0013BE                     __end_of_printf:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _putch *****************
  1091 ;; Defined at:
  1092 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  c               1    wreg     unsigned char 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  c               1    0[COMRAM] unsigned char 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1106 ;;      Params:         0       0       0       0
  1107 ;;      Locals:         0       0       0       0
  1108 ;;      Temps:          0       0       0       0
  1109 ;;      Totals:         0       0       0       0
  1110 ;;Total ram usage:        0 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    6
  1113 ;; This function calls:
  1114 ;;		Nothing
  1115 ;; This function is called by:
  1116 ;;		_printf
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text2
  1121  001598                     __ptext2:
  1122                           	opt stack 0
  1123  001598                     _putch:
  1124                           	opt stack 23
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;incstack = 0
  1128  001598  0012               	return		;funcret
  1129  00159A                     __end_of_putch:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _ES_Run *****************
  1140 ;; Defined at:
  1141 ;;		line 277 in file "ES_Framework.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  HighestPrior    1   42[BANK0 ] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      enum E15493
  1148 ;; Registers used:
  1149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1155 ;;      Params:         0       0       0       0
  1156 ;;      Locals:         0       1       0       0
  1157 ;;      Temps:          0       4       0       0
  1158 ;;      Totals:         0       5       0       0
  1159 ;;Total ram usage:        5 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:   12
  1162 ;; This function calls:
  1163 ;;		_ES_CheckUserEvents
  1164 ;;		_ES_DeQueue
  1165 ;;		_ES_GetMSBitSet
  1166 ;;		_RunAnalogService
  1167 ;;		_RunButtonDebounceSM
  1168 ;;		_RunCan_XmitService
  1169 ;;		__HW_Process_Pending_Ints
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text3
  1176  000604                     __ptext3:
  1177                           	opt stack 0
  1178  000604                     _ES_Run:
  1179                           	opt stack 18
  1180                           
  1181                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1182                           
  1183                           ;incstack = 0
  1184                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1185                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1186                           ;ES_Framework.c: 282: while(1){
  1187  000604  D06B               	goto	l2808
  1188  000606                     l2796:
  1189                           
  1190                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1191  000606  C089  F0BC         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1192  00060A  C08A  F0BD         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1193  00060E  ECE4  F005         	call	_ES_GetMSBitSet	;wreg free
  1194  000612  0100               	movlb	0	; () banked
  1195  000614  6FE6               	movwf	ES_Run@HighestPrior& (0+255),b
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1199  000616  0100               	movlb	0	; () banked
  1200  000618  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1201  00061A  0D03               	mullw	3
  1202  00061C  0E5C               	movlw	low _EventQueues
  1203  00061E  24F3               	addwf	prodl,w,c
  1204  000620  6EF6               	movwf	tblptrl,c
  1205  000622  0E03               	movlw	high _EventQueues
  1206  000624  20F4               	addwfc	prodh,w,c
  1207  000626  6EF7               	movwf	tblptrh,c
  1208  000628                     	if	0	;There are less than 3 active tblptr bytes
  1209  000628                     	endif
  1210  000628  0009               	tblrd		*+
  1211  00062A  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock
  1212  00062E  000A               	tblrd		*-
  1213  000630  CFF5 F0C9          	movff	tablat,ES_DeQueue@pBlock+1
  1214  000634  0EB9               	movlw	low ES_Run@ThisEvent
  1215  000636  0100               	movlb	0	; () banked
  1216  000638  6FCA               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1217  00063A  0E00               	movlw	high ES_Run@ThisEvent
  1218  00063C  0100               	movlb	0	; () banked
  1219  00063E  6FCB               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1220  000640  ECE3  F001         	call	_ES_DeQueue	;wreg free
  1221  000644  0900               	iorlw	0
  1222  000646  A4D8               	btfss	status,2,c
  1223  000648  D01F               	goto	l2802
  1224                           
  1225                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1226  00064A  0100               	movlb	0	; () banked
  1227  00064C  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1228  00064E  0D02               	mullw	2
  1229  000650  0E01               	movlw	low _BitNum2SetMask
  1230  000652  24F3               	addwf	prodl,w,c
  1231  000654  6EF6               	movwf	tblptrl,c
  1232  000656  0E03               	movlw	high _BitNum2SetMask
  1233  000658  20F4               	addwfc	prodh,w,c
  1234  00065A  6EF7               	movwf	tblptrh,c
  1235  00065C                     	if	0	;There are less than 3 active tblptr bytes
  1236  00065C                     	endif
  1237  00065C  0009               	tblrd		*+
  1238  00065E  CFF5 F0E2          	movff	tablat,??_ES_Run
  1239  000662  0009               	tblrd		*+
  1240  000664  CFF5 F0E3          	movff	tablat,??_ES_Run+1
  1241  000668  0100               	movlb	0	; () banked
  1242  00066A  1DE2               	comf	??_ES_Run& (0+255),w,b
  1243  00066C  0100               	movlb	0	; () banked
  1244  00066E  6FE4               	movwf	(??_ES_Run+2)& (0+255),b
  1245  000670  0100               	movlb	0	; () banked
  1246  000672  1DE3               	comf	(??_ES_Run+1)& (0+255),w,b
  1247  000674  0100               	movlb	0	; () banked
  1248  000676  6FE5               	movwf	(??_ES_Run+3)& (0+255),b
  1249  000678  0100               	movlb	0	; () banked
  1250  00067A  51E4               	movf	(??_ES_Run+2)& (0+255),w,b
  1251  00067C  0100               	movlb	0	; () banked
  1252  00067E  1789               	andwf	_Ready& (0+255),f,b
  1253  000680  0100               	movlb	0	; () banked
  1254  000682  51E5               	movf	(??_ES_Run+3)& (0+255),w,b
  1255  000684  0100               	movlb	0	; () banked
  1256  000686  178A               	andwf	(_Ready+1)& (0+255),f,b
  1257  000688                     l2802:
  1258                           
  1259                           ;ES_Framework.c: 291: }
  1260                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1261  000688  C0B9  F0D9         	movff	ES_Run@ThisEvent,RunAnalogService@ThisEvent
  1262  00068C  C0BA  F0DA         	movff	ES_Run@ThisEvent+1,RunAnalogService@ThisEvent+1
  1263  000690  C0BB  F0DB         	movff	ES_Run@ThisEvent+2,RunAnalogService@ThisEvent+2
  1264  000694  0100               	movlb	0	; () banked
  1265  000696  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1266  000698  0D04               	mullw	4
  1267  00069A  0E02               	movlw	2
  1268  00069C  26F3               	addwf	prodl,f,c
  1269  00069E  0E00               	movlw	0
  1270  0006A0  22F4               	addwfc	prodh,f,c
  1271  0006A2  0E50               	movlw	low _ServDescList
  1272  0006A4  24F3               	addwf	prodl,w,c
  1273  0006A6  6EF6               	movwf	tblptrl,c
  1274  0006A8  0E03               	movlw	high _ServDescList
  1275  0006AA  20F4               	addwfc	prodh,w,c
  1276  0006AC  6EF7               	movwf	tblptrh,c
  1277  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  1278  0006AE                     	endif
  1279  0006AE  D801               	call	u1658
  1280  0006B0  D00C               	goto	u1659
  1281  0006B2                     u1658:
  1282  0006B2  0005               	push	
  1283  0006B4  6EFA               	movwf	pclath,c
  1284  0006B6  0009               	tblrd		*+
  1285  0006B8  50F5               	movf	tablat,w,c
  1286  0006BA  6EFD               	movwf	tosl,c
  1287  0006BC  0009               	tblrd		*+
  1288  0006BE  50F5               	movf	tablat,w,c
  1289  0006C0  6EFE               	movwf	tosh,c
  1290  0006C2  50F8               	movf	tblptru,w,c
  1291  0006C4  6EFF               	movwf	tosu,c
  1292  0006C6  50FA               	movf	pclath,w,c
  1293  0006C8  0012               	return		;indir
  1294  0006CA                     u1659:
  1295  0006CA  0ED9               	movlw	low ?_RunAnalogService
  1296  0006CC  6ED9               	movwf	fsr2l,c
  1297  0006CE  0E00               	movlw	high ?_RunAnalogService
  1298  0006D0  6EDA               	movwf	fsr2h,c
  1299  0006D2  50DF               	movf	indf2,w,c
  1300  0006D4  B4D8               	btfsc	status,2,c
  1301  0006D6  D002               	goto	l2808
  1302                           
  1303                           ;ES_Framework.c: 293: return FailedRun;
  1304  0006D8  0E02               	movlw	2
  1305  0006DA  0012               	return	
  1306  0006DC                     l2808:
  1307  0006DC  EC7D  F00A         	call	__HW_Process_Pending_Ints	;wreg free
  1308  0006E0  0900               	iorlw	0
  1309  0006E2  B4D8               	btfsc	status,2,c
  1310  0006E4  D006               	goto	l2812
  1311  0006E6  0100               	movlb	0	; () banked
  1312  0006E8  5189               	movf	_Ready& (0+255),w,b
  1313  0006EA  0100               	movlb	0	; () banked
  1314  0006EC  118A               	iorwf	(_Ready+1)& (0+255),w,b
  1315  0006EE  A4D8               	btfss	status,2,c
  1316  0006F0  D78A               	goto	l2796
  1317  0006F2                     l2812:
  1318                           
  1319                           ;ES_Framework.c: 294: }
  1320                           ;ES_Framework.c: 295: }
  1321                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1322  0006F2  EC45  F009         	call	_ES_CheckUserEvents	;wreg free
  1323  0006F6  D7F2               	goto	l2808
  1324  0006F8                     __end_of_ES_Run:
  1325                           	opt stack 0
  1326                           tosu	equ	0xFFF
  1327                           tosh	equ	0xFFE
  1328                           tosl	equ	0xFFD
  1329                           pclath	equ	0xFFA
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           prodh	equ	0xFF4
  1335                           prodl	equ	0xFF3
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           indf2	equ	0xFDF
  1339                           fsr2h	equ	0xFDA
  1340                           fsr2l	equ	0xFD9
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function __HW_Process_Pending_Ints *****************
  1344 ;; Defined at:
  1345 ;;		line 225 in file "ES_Port.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      unsigned char 
  1352 ;; Registers used:
  1353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1359 ;;      Params:         0       0       0       0
  1360 ;;      Locals:         0       0       0       0
  1361 ;;      Temps:          0       0       0       0
  1362 ;;      Totals:         0       0       0       0
  1363 ;;Total ram usage:        0 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:   11
  1366 ;; This function calls:
  1367 ;;		_ES_Timer_Tick_Resp
  1368 ;; This function is called by:
  1369 ;;		_ES_Run
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text4
  1374  0014FA                     __ptext4:
  1375                           	opt stack 0
  1376  0014FA                     __HW_Process_Pending_Ints:
  1377                           	opt stack 18
  1378                           
  1379                           ;ES_Port.c: 227: while (TickCount > 0)
  1380                           
  1381                           ;incstack = 0
  1382  0014FA  D004               	goto	l2640
  1383  0014FC                     l2636:
  1384                           
  1385                           ;ES_Port.c: 228: {
  1386                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1387  0014FC  EC77  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1388                           
  1389                           ;ES_Port.c: 231: TickCount--;
  1390  001500  0100               	movlb	0	; () banked
  1391  001502  0794               	decf	_TickCount& (0+255),f,b	;volatile
  1392  001504                     l2640:
  1393  001504  0100               	movlb	0	; () banked
  1394  001506  5194               	movf	_TickCount& (0+255),w,b	;volatile
  1395  001508  A4D8               	btfss	status,2,c
  1396  00150A  D7F8               	goto	l2636
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;ES_Port.c: 232: }
  1400                           ;ES_Port.c: 234: return 1;
  1401                           
  1402                           ; BSR set to: 0
  1403  00150C  0E01               	movlw	1
  1404  00150E  0012               	return	
  1405  001510                     __end_of__HW_Process_Pending_Ints:
  1406                           	opt stack 0
  1407                           tosu	equ	0xFFF
  1408                           tosh	equ	0xFFE
  1409                           tosl	equ	0xFFD
  1410                           pclath	equ	0xFFA
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           prodh	equ	0xFF4
  1416                           prodl	equ	0xFF3
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           indf2	equ	0xFDF
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _ES_Timer_Tick_Resp *****************
  1425 ;; Defined at:
  1426 ;;		line 284 in file "ES_Timers.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1440 ;;      Params:         0       0       0       0
  1441 ;;      Locals:         0       0       0       0
  1442 ;;      Temps:          0       4       0       0
  1443 ;;      Totals:         0       4       0       0
  1444 ;;Total ram usage:        4 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:   10
  1447 ;; This function calls:
  1448 ;;		Absolute function
  1449 ;;		_ES_GetMSBitSet
  1450 ;;		_PostAnalogService
  1451 ;;		_PostButtonDebounceSM
  1452 ;; This function is called by:
  1453 ;;		__HW_Process_Pending_Ints
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text5
  1458  0004EE                     __ptext5:
  1459                           	opt stack 0
  1460  0004EE                     _ES_Timer_Tick_Resp:
  1461                           	opt stack 18
  1462                           
  1463                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1464                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1465                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1466                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;incstack = 0
  1470  0004EE  0100               	movlb	0	; () banked
  1471  0004F0  518B               	movf	_TMR_ActiveFlags& (0+255),w,b
  1472  0004F2  0100               	movlb	0	; () banked
  1473  0004F4  118C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1474  0004F6  B4D8               	btfsc	status,2,c
  1475  0004F8  0012               	return	
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;ES_Timers.c: 291: {
  1479                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1480  0004FA  C08B  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1481  0004FE  C08C  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1482  000502                     l2388:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1486  000502  C083  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1487  000506  C084  F0BD         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1488  00050A  ECE4  F005         	call	_ES_GetMSBitSet	;wreg free
  1489  00050E  0100               	movlb	0	; () banked
  1490  000510  6F8F               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1494  000512  0100               	movlb	0	; () banked
  1495  000514  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1496  000516  0D02               	mullw	2
  1497  000518  0E60               	movlw	low _TMR_TimerArray
  1498  00051A  24F3               	addwf	prodl,w,c
  1499  00051C  6ED9               	movwf	fsr2l,c
  1500  00051E  0E00               	movlw	high _TMR_TimerArray
  1501  000520  20F4               	addwfc	prodh,w,c
  1502  000522  6EDA               	movwf	fsr2h,c
  1503  000524  06DE               	decf	postinc2,f,c
  1504  000526  0E00               	movlw	0
  1505  000528  5ADD               	subwfb	postdec2,f,c
  1506  00052A  50DE               	movf	postinc2,w,c
  1507  00052C  10DE               	iorwf	postinc2,w,c
  1508  00052E  A4D8               	btfss	status,2,c
  1509  000530  D043               	goto	l2400
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;ES_Timers.c: 299: {
  1513                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1514  000532  0E03               	movlw	3
  1515  000534  0100               	movlb	0	; () banked
  1516  000536  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1520  000538  C08F  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1521  00053C  0100               	movlb	0	; () banked
  1522  00053E  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1526  000540  C080  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent,PostAnalogService@ThisEvent
  1527  000544  C081  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostAnalogService@ThisEvent+1
  1528  000548  C082  F0DB         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostAnalogService@ThisEvent+2
  1529  00054C  0100               	movlb	0	; () banked
  1530  00054E  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1531  000550  0D02               	mullw	2
  1532  000552  0E21               	movlw	low _Timer2PostFunc
  1533  000554  24F3               	addwf	prodl,w,c
  1534  000556  6EF6               	movwf	tblptrl,c
  1535  000558  0E03               	movlw	high _Timer2PostFunc
  1536  00055A  20F4               	addwfc	prodh,w,c
  1537  00055C  6EF7               	movwf	tblptrh,c
  1538  00055E                     	if	0	;There are less than 3 active tblptr bytes
  1539  00055E                     	endif
  1540  00055E  D801               	call	u1298
  1541  000560  D00C               	goto	l2398
  1542  000562                     u1298:
  1543  000562  0005               	push	
  1544  000564  6EFA               	movwf	pclath,c
  1545  000566  0009               	tblrd		*+
  1546  000568  50F5               	movf	tablat,w,c
  1547  00056A  6EFD               	movwf	tosl,c
  1548  00056C  0009               	tblrd		*+
  1549  00056E  50F5               	movf	tablat,w,c
  1550  000570  6EFE               	movwf	tosh,c
  1551  000572  50F8               	movf	tblptru,w,c
  1552  000574  6EFF               	movwf	tosu,c
  1553  000576  50FA               	movf	pclath,w,c
  1554  000578  0012               	return		;indir
  1555  00057A                     l2398:
  1556                           
  1557                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1558  00057A  0100               	movlb	0	; () banked
  1559  00057C  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1560  00057E  0D02               	mullw	2
  1561  000580  0E01               	movlw	low _BitNum2SetMask
  1562  000582  24F3               	addwf	prodl,w,c
  1563  000584  6EF6               	movwf	tblptrl,c
  1564  000586  0E03               	movlw	high _BitNum2SetMask
  1565  000588  20F4               	addwfc	prodh,w,c
  1566  00058A  6EF7               	movwf	tblptrh,c
  1567  00058C                     	if	0	;There are less than 3 active tblptr bytes
  1568  00058C                     	endif
  1569  00058C  0009               	tblrd		*+
  1570  00058E  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1571  000592  0009               	tblrd		*+
  1572  000594  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1573  000598  0100               	movlb	0	; () banked
  1574  00059A  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1575  00059C  0100               	movlb	0	; () banked
  1576  00059E  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1577  0005A0  0100               	movlb	0	; () banked
  1578  0005A2  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1579  0005A4  0100               	movlb	0	; () banked
  1580  0005A6  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1581  0005A8  0100               	movlb	0	; () banked
  1582  0005AA  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1583  0005AC  0100               	movlb	0	; () banked
  1584  0005AE  178B               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1585  0005B0  0100               	movlb	0	; () banked
  1586  0005B2  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1587  0005B4  0100               	movlb	0	; () banked
  1588  0005B6  178C               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1589  0005B8                     l2400:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;ES_Timers.c: 306: }
  1593                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1594  0005B8  0100               	movlb	0	; () banked
  1595  0005BA  518F               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1596  0005BC  0D02               	mullw	2
  1597  0005BE  0E01               	movlw	low _BitNum2SetMask
  1598  0005C0  24F3               	addwf	prodl,w,c
  1599  0005C2  6EF6               	movwf	tblptrl,c
  1600  0005C4  0E03               	movlw	high _BitNum2SetMask
  1601  0005C6  20F4               	addwfc	prodh,w,c
  1602  0005C8  6EF7               	movwf	tblptrh,c
  1603  0005CA                     	if	0	;There are less than 3 active tblptr bytes
  1604  0005CA                     	endif
  1605  0005CA  0009               	tblrd		*+
  1606  0005CC  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp
  1607  0005D0  0009               	tblrd		*+
  1608  0005D2  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1609  0005D6  0100               	movlb	0	; () banked
  1610  0005D8  1DDC               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1611  0005DA  0100               	movlb	0	; () banked
  1612  0005DC  6FDE               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1613  0005DE  0100               	movlb	0	; () banked
  1614  0005E0  1DDD               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1615  0005E2  0100               	movlb	0	; () banked
  1616  0005E4  6FDF               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1617  0005E6  0100               	movlb	0	; () banked
  1618  0005E8  51DE               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1619  0005EA  0100               	movlb	0	; () banked
  1620  0005EC  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1621  0005EE  0100               	movlb	0	; () banked
  1622  0005F0  51DF               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1623  0005F2  0100               	movlb	0	; () banked
  1624  0005F4  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1628  0005F6  0100               	movlb	0	; () banked
  1629  0005F8  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1630  0005FA  0100               	movlb	0	; () banked
  1631  0005FC  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1632  0005FE  B4D8               	btfsc	status,2,c
  1633  000600  0012               	return	
  1634  000602  D77F               	goto	l2388
  1635  000604                     __end_of_ES_Timer_Tick_Resp:
  1636                           	opt stack 0
  1637                           tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           indf2	equ	0xFDF
  1650                           postinc2	equ	0xFDE
  1651                           postdec2	equ	0xFDD
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _PostButtonDebounceSM *****************
  1657 ;; Defined at:
  1658 ;;		line 75 in file "Button.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      unsigned char 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1672 ;;      Params:         0       3       0       0
  1673 ;;      Locals:         0       0       0       0
  1674 ;;      Temps:          0       0       0       0
  1675 ;;      Totals:         0       3       0       0
  1676 ;;Total ram usage:        3 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    9
  1679 ;; This function calls:
  1680 ;;		_ES_PostToService
  1681 ;; This function is called by:
  1682 ;;		_CheckButtonEvents
  1683 ;;		_ES_Timer_Tick_Resp
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text6
  1688  001510                     __ptext6:
  1689                           	opt stack 0
  1690  001510                     _PostButtonDebounceSM:
  1691                           	opt stack 18
  1692                           
  1693                           ;Button.c: 78: return ES_PostToService(MyPriority, ThisEvent);
  1694                           ;	Return value of _PostButtonDebounceSM is never used
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;incstack = 0
  1698  001510  C0D9  F0D3         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  1699  001514  C0DA  F0D4         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  1700  001518  C0DB  F0D5         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  1701  00151C  0100               	movlb	0	; () banked
  1702  00151E  5193               	movf	_MyPriority& (0+255),w,b
  1703  001520  EC09  F008         	call	_ES_PostToService
  1704  001524  0012               	return	
  1705  001526                     __end_of_PostButtonDebounceSM:
  1706                           	opt stack 0
  1707                           tosu	equ	0xFFF
  1708                           tosh	equ	0xFFE
  1709                           tosl	equ	0xFFD
  1710                           pclath	equ	0xFFA
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           indf2	equ	0xFDF
  1720                           postinc2	equ	0xFDE
  1721                           postdec2	equ	0xFDD
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _PostAnalogService *****************
  1727 ;; Defined at:
  1728 ;;		line 47 in file "Analog_Service.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      unsigned char 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1742 ;;      Params:         0       3       0       0
  1743 ;;      Locals:         0       0       0       0
  1744 ;;      Temps:          0       0       0       0
  1745 ;;      Totals:         0       3       0       0
  1746 ;;Total ram usage:        3 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    9
  1749 ;; This function calls:
  1750 ;;		_ES_PostToService
  1751 ;; This function is called by:
  1752 ;;		_ES_Timer_Tick_Resp
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text7
  1757  001526                     __ptext7:
  1758                           	opt stack 0
  1759  001526                     _PostAnalogService:
  1760                           	opt stack 18
  1761                           
  1762                           ;Analog_Service.c: 49: return ES_PostToService( MyPriority, ThisEvent);
  1763                           ;	Return value of _PostAnalogService is never used
  1764                           
  1765                           ;incstack = 0
  1766  001526  C0D9  F0D3         	movff	PostAnalogService@ThisEvent,ES_PostToService@TheEvent
  1767  00152A  C0DA  F0D4         	movff	PostAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  1768  00152E  C0DB  F0D5         	movff	PostAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  1769  001532  0100               	movlb	0	; () banked
  1770  001534  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  1771  001536  EC09  F008         	call	_ES_PostToService
  1772  00153A  0012               	return	
  1773  00153C                     __end_of_PostAnalogService:
  1774                           	opt stack 0
  1775                           tosu	equ	0xFFF
  1776                           tosh	equ	0xFFE
  1777                           tosl	equ	0xFFD
  1778                           pclath	equ	0xFFA
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           indf2	equ	0xFDF
  1788                           postinc2	equ	0xFDE
  1789                           postdec2	equ	0xFDD
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _ES_GetMSBitSet *****************
  1795 ;; Defined at:
  1796 ;;		line 79 in file "ES_LookupTables.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  LoopCntr        1    9[BANK0 ] char 
  1801 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1802 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      unsigned char 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1812 ;;      Params:         0       2       0       0
  1813 ;;      Locals:         0       3       0       0
  1814 ;;      Temps:          0       5       0       0
  1815 ;;      Totals:         0      10       0       0
  1816 ;;Total ram usage:       10 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    6
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_ES_Run
  1823 ;;		_ES_Timer_Tick_Resp
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text8
  1828  000BC8                     __ptext8:
  1829                           	opt stack 0
  1830  000BC8                     _ES_GetMSBitSet:
  1831                           	opt stack 21
  1832                           
  1833                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1834                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1835                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1836                           
  1837                           ;incstack = 0
  1838  000BC8  0E80               	movlw	128
  1839  000BCA  0100               	movlb	0	; () banked
  1840  000BCC  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1841                           
  1842                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1843  000BCE  0E03               	movlw	3
  1844  000BD0  0100               	movlb	0	; () banked
  1845  000BD2  6FC5               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1846  000BD4                     l2266:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1850  000BD4  0100               	movlb	0	; () banked
  1851  000BD6  BFC5               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1852  000BD8  D046               	goto	l2280
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1856                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1857                           ;ES_LookupTables.c: 91: 0x0F);
  1858                           
  1859                           ; BSR set to: 0
  1860                           
  1861                           ; BSR set to: 0
  1862  000BDA  0100               	movlb	0	; () banked
  1863  000BDC  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1864  000BDE  0D04               	mullw	4
  1865  000BE0  CFF3 F0BE          	movff	prodl,??_ES_GetMSBitSet
  1866  000BE4  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1867  000BE8  C0BD  F0C0         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1868  000BEC  0100               	movlb	0	; () banked
  1869  000BEE  2BBE               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1870  000BF0  D004               	goto	u1154
  1871  000BF2                     u1155:
  1872  000BF2  0100               	movlb	0	; () banked
  1873  000BF4  90D8               	bcf	status,0,c
  1874  000BF6  33C0               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1875  000BF8  33BF               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1876  000BFA                     u1154:
  1877  000BFA  0100               	movlb	0	; () banked
  1878  000BFC  2FBE               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1879  000BFE  D7F9               	goto	u1155
  1880  000C00  0100               	movlb	0	; () banked
  1881  000C02  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1882  000C04  0B0F               	andlw	15
  1883  000C06  0100               	movlb	0	; () banked
  1884  000C08  6FC4               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1888  000C0A  0100               	movlb	0	; () banked
  1889  000C0C  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1890  000C0E  0100               	movlb	0	; () banked
  1891  000C10  B4D8               	btfsc	status,2,c
  1892  000C12  D026               	goto	l2276
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1896                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1897  000C14  0EFF               	movlw	255
  1898  000C16  0100               	movlb	0	; () banked
  1899  000C18  6FBE               	movwf	??_ES_GetMSBitSet& (0+255),b
  1900  000C1A  0EFF               	movlw	255
  1901  000C1C  0100               	movlb	0	; () banked
  1902  000C1E  6FBF               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1903  000C20  0100               	movlb	0	; () banked
  1904  000C22  51C4               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1905  000C24  0100               	movlb	0	; () banked
  1906  000C26  6FC0               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1907  000C28  6BC1               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1908  000C2A  0100               	movlb	0	; () banked
  1909  000C2C  51BE               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1910  000C2E  0100               	movlb	0	; () banked
  1911  000C30  27C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1912  000C32  0100               	movlb	0	; () banked
  1913  000C34  51BF               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1914  000C36  0100               	movlb	0	; () banked
  1915  000C38  23C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1916  000C3A  0E41               	movlw	low _Nybble2MSBitNum
  1917  000C3C  0100               	movlb	0	; () banked
  1918  000C3E  25C0               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1919  000C40  6EF6               	movwf	tblptrl,c
  1920  000C42  0E03               	movlw	high _Nybble2MSBitNum
  1921  000C44  21C1               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1922  000C46  6EF7               	movwf	tblptrh,c
  1923  000C48                     	if	0	;There are less than 3 active tblptr bytes
  1924  000C48                     	endif
  1925  000C48  0008               	tblrd		*
  1926  000C4A  CFF5 F0C2          	movff	tablat,??_ES_GetMSBitSet+4
  1927  000C4E  0100               	movlb	0	; () banked
  1928  000C50  51C5               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1929  000C52  0D04               	mullw	4
  1930  000C54  50F3               	movf	prodl,w,c
  1931  000C56  0100               	movlb	0	; () banked
  1932  000C58  25C2               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1933  000C5A  0100               	movlb	0	; () banked
  1934  000C5C  6FC3               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1935                           
  1936                           ;ES_LookupTables.c: 96: break;
  1937  000C5E  D003               	goto	l2280
  1938  000C60                     l2276:
  1939                           
  1940                           ; BSR set to: 0
  1941  000C60  0100               	movlb	0	; () banked
  1942  000C62  07C5               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1943  000C64  D7B7               	goto	l2266
  1944  000C66                     l2280:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ES_LookupTables.c: 97: }
  1948                           ;ES_LookupTables.c: 98: }
  1949                           ;ES_LookupTables.c: 99: return ReturnVal;
  1950  000C66  0100               	movlb	0	; () banked
  1951  000C68  51C3               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1952  000C6A  0012               	return	
  1953  000C6C                     __end_of_ES_GetMSBitSet:
  1954                           	opt stack 0
  1955                           tosu	equ	0xFFF
  1956                           tosh	equ	0xFFE
  1957                           tosl	equ	0xFFD
  1958                           pclath	equ	0xFFA
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           prodh	equ	0xFF4
  1964                           prodl	equ	0xFF3
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf2	equ	0xFDF
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _RunAnalogService *****************
  1975 ;; Defined at:
  1976 ;;		line 52 in file "Analog_Service.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  3   29[BANK0 ] struct ES_Event_t
  1983 ;; Registers used:
  1984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1990 ;;      Params:         0       3       0       0
  1991 ;;      Locals:         0       3       0       0
  1992 ;;      Temps:          0       0       0       0
  1993 ;;      Totals:         0       6       0       0
  1994 ;;Total ram usage:        6 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    7
  1997 ;; This function calls:
  1998 ;;		_ES_Timer_InitTimer
  1999 ;;		_InitAnalogHW
  2000 ;; This function is called by:
  2001 ;;		_ES_Run
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text9
  2006  00123A                     __ptext9:
  2007                           	opt stack 0
  2008  00123A                     _RunAnalogService:
  2009                           	opt stack 22
  2010                           
  2011                           ;Analog_Service.c: 54: ES_Event ReturnEvent;
  2012                           ;Analog_Service.c: 55: if(ThisEvent.EventType == ES_INIT) {
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016  00123A  0E02               	movlw	2
  2017  00123C  0100               	movlb	0	; () banked
  2018  00123E  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2019  001240  A4D8               	btfss	status,2,c
  2020  001242  D00E               	goto	l2740
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;Analog_Service.c: 56: InitAnalogHW();
  2024  001244  EC26  F00A         	call	_InitAnalogHW	;wreg free
  2025                           
  2026                           ;Analog_Service.c: 57: ADCON0bits.CHS = 0x00;
  2027  001248  94C2               	bcf	4034,2,c	;volatile
  2028  00124A  96C2               	bcf	4034,3,c	;volatile
  2029  00124C  98C2               	bcf	4034,4,c	;volatile
  2030  00124E  9AC2               	bcf	4034,5,c	;volatile
  2031                           
  2032                           ;Analog_Service.c: 58: ES_Timer_InitTimer(0, 5);
  2033  001250  0E00               	movlw	0
  2034  001252  0100               	movlb	0	; () banked
  2035  001254  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2036  001256  0E05               	movlw	5
  2037  001258  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2038  00125A  0E00               	movlw	0
  2039  00125C  EC11  F007         	call	_ES_Timer_InitTimer
  2040  001260                     l2740:
  2041                           
  2042                           ;Analog_Service.c: 59: }
  2043                           ;Analog_Service.c: 60: if(ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 0
      +                          ) {
  2044  001260  0E03               	movlw	3
  2045  001262  0100               	movlb	0	; () banked
  2046  001264  19D9               	xorwf	RunAnalogService@ThisEvent& (0+255),w,b
  2047  001266  A4D8               	btfss	status,2,c
  2048  001268  D006               	goto	l2746
  2049                           
  2050                           ; BSR set to: 0
  2051  00126A  0100               	movlb	0	; () banked
  2052  00126C  51DA               	movf	(RunAnalogService@ThisEvent+1)& (0+255),w,b
  2053  00126E  0100               	movlb	0	; () banked
  2054  001270  11DB               	iorwf	(RunAnalogService@ThisEvent+2)& (0+255),w,b
  2055  001272  B4D8               	btfsc	status,2,c
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;Analog_Service.c: 61: ADCON0bits.GO = 1;
  2059  001274  82C2               	bsf	4034,1,c	;volatile
  2060  001276                     l2746:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;Analog_Service.c: 62: }
  2064                           ;Analog_Service.c: 63: ReturnEvent.EventType = ES_NO_EVENT;
  2065  001276  0E00               	movlw	0
  2066  001278  0100               	movlb	0	; () banked
  2067  00127A  6FDC               	movwf	RunAnalogService@ReturnEvent& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;Analog_Service.c: 64: return ReturnEvent;
  2071  00127C  C0DC  F0D9         	movff	RunAnalogService@ReturnEvent,?_RunAnalogService
  2072  001280  C0DD  F0DA         	movff	RunAnalogService@ReturnEvent+1,?_RunAnalogService+1
  2073  001284  C0DE  F0DB         	movff	RunAnalogService@ReturnEvent+2,?_RunAnalogService+2
  2074  001288  0012               	return	
  2075  00128A                     __end_of_RunAnalogService:
  2076                           	opt stack 0
  2077                           tosu	equ	0xFFF
  2078                           tosh	equ	0xFFE
  2079                           tosl	equ	0xFFD
  2080                           pclath	equ	0xFFA
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           indf2	equ	0xFDF
  2090                           postinc2	equ	0xFDE
  2091                           postdec2	equ	0xFDD
  2092                           fsr2h	equ	0xFDA
  2093                           fsr2l	equ	0xFD9
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _RunButtonDebounceSM *****************
  2097 ;; Defined at:
  2098 ;;		line 83 in file "Button.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  ReturnEvent     3   32[BANK0 ] struct ES_Event_t
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  3   29[BANK0 ] struct ES_Event_t
  2105 ;; Registers used:
  2106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2112 ;;      Params:         0       3       0       0
  2113 ;;      Locals:         0       3       0       0
  2114 ;;      Temps:          0       0       0       0
  2115 ;;      Totals:         0       6       0       0
  2116 ;;Total ram usage:        6 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    9
  2119 ;; This function calls:
  2120 ;;		_ES_PostAll
  2121 ;;		_ES_Timer_InitTimer
  2122 ;; This function is called by:
  2123 ;;		_ES_Run
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text10
  2128  000B22                     __ptext10:
  2129                           	opt stack 0
  2130  000B22                     _RunButtonDebounceSM:
  2131                           	opt stack 20
  2132                           
  2133                           ;Button.c: 87: switch (CurrentState) {
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;incstack = 0
  2137  000B22  D040               	goto	l2568
  2138  000B24                     l2544:
  2139                           
  2140                           ;Button.c: 92: if (ThisEvent.EventType == ES_TIMEOUT && ThisEvent.EventParam == 1) {
  2141  000B24  0E03               	movlw	3
  2142  000B26  0100               	movlb	0	; () banked
  2143  000B28  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2144  000B2A  A4D8               	btfss	status,2,c
  2145  000B2C  D043               	goto	l2570
  2146                           
  2147                           ; BSR set to: 0
  2148  000B2E  0100               	movlb	0	; () banked
  2149  000B30  05DA               	decf	(RunButtonDebounceSM@ThisEvent+1)& (0+255),w,b
  2150  000B32  0100               	movlb	0	; () banked
  2151  000B34  11DB               	iorwf	(RunButtonDebounceSM@ThisEvent+2)& (0+255),w,b
  2152  000B36  A4D8               	btfss	status,2,c
  2153  000B38  D03D               	goto	l2570
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;Button.c: 94: CurrentState = Ready2Sample;
  2157  000B3A  0E01               	movlw	1
  2158  000B3C  0100               	movlb	0	; () banked
  2159  000B3E  6F90               	movwf	_CurrentState& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;Button.c: 95: }
  2163                           ;Button.c: 96: break;
  2164  000B40  D039               	goto	l2570
  2165  000B42                     l2550:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;Button.c: 101: if (ThisEvent.EventType == DBButtonUp) {
  2169  000B42  0E06               	movlw	6
  2170  000B44  0100               	movlb	0	; () banked
  2171  000B46  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2172  000B48  A4D8               	btfss	status,2,c
  2173  000B4A  D013               	goto	l2558
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;Button.c: 103: ES_Timer_InitTimer(1, 3);
  2177  000B4C  0E00               	movlw	0
  2178  000B4E  0100               	movlb	0	; () banked
  2179  000B50  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2180  000B52  0E03               	movlw	3
  2181  000B54  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2182  000B56  0E01               	movlw	1
  2183  000B58  EC11  F007         	call	_ES_Timer_InitTimer
  2184                           
  2185                           ;Button.c: 105: CurrentState = Debouncing;
  2186  000B5C  0E00               	movlw	0
  2187  000B5E  0100               	movlb	0	; () banked
  2188  000B60  6F90               	movwf	_CurrentState& (0+255),b
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;Button.c: 107: ES_PostAll(ThisEvent);
  2192  000B62  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2193  000B66  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2194  000B6A  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2195  000B6E  ECCD  F007         	call	_ES_PostAll	;wreg free
  2196  000B72                     l2558:
  2197                           
  2198                           ;Button.c: 108: }
  2199                           ;Button.c: 110: if (ThisEvent.EventType == DBButtonDown) {
  2200  000B72  0E05               	movlw	5
  2201  000B74  0100               	movlb	0	; () banked
  2202  000B76  19D9               	xorwf	RunButtonDebounceSM@ThisEvent& (0+255),w,b
  2203  000B78  A4D8               	btfss	status,2,c
  2204  000B7A  D01C               	goto	l2570
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;Button.c: 114: ES_Timer_InitTimer(1, 3);
  2208  000B7C  0E00               	movlw	0
  2209  000B7E  0100               	movlb	0	; () banked
  2210  000B80  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2211  000B82  0E03               	movlw	3
  2212  000B84  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2213  000B86  0E01               	movlw	1
  2214  000B88  EC11  F007         	call	_ES_Timer_InitTimer
  2215                           
  2216                           ;Button.c: 116: CurrentState = Debouncing;
  2217  000B8C  0E00               	movlw	0
  2218  000B8E  0100               	movlb	0	; () banked
  2219  000B90  6F90               	movwf	_CurrentState& (0+255),b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;Button.c: 117: ES_PostAll(ThisEvent);
  2223  000B92  C0D9  F0D3         	movff	RunButtonDebounceSM@ThisEvent,ES_PostAll@ThisEvent
  2224  000B96  C0DA  F0D4         	movff	RunButtonDebounceSM@ThisEvent+1,ES_PostAll@ThisEvent+1
  2225  000B9A  C0DB  F0D5         	movff	RunButtonDebounceSM@ThisEvent+2,ES_PostAll@ThisEvent+2
  2226  000B9E  ECCD  F007         	call	_ES_PostAll	;wreg free
  2227                           
  2228                           ;Button.c: 120: }
  2229                           
  2230                           ;Button.c: 118: }
  2231                           ;Button.c: 119: break;
  2232  000BA2  D008               	goto	l2570
  2233  000BA4                     l2568:
  2234  000BA4  0100               	movlb	0	; () banked
  2235  000BA6  5190               	movf	_CurrentState& (0+255),w,b
  2236                           
  2237                           ; Switch size 1, requested type "space"
  2238                           ; Number of cases is 2, Range of values is 0 to 1
  2239                           ; switch strategies available:
  2240                           ; Name         Instructions Cycles
  2241                           ; simple_byte            7     4 (average)
  2242                           ;	Chosen strategy is simple_byte
  2243  000BA8  0A00               	xorlw	0	; case 0
  2244  000BAA  B4D8               	btfsc	status,2,c
  2245  000BAC  D7BB               	goto	l2544
  2246  000BAE  0A01               	xorlw	1	; case 1
  2247  000BB0  B4D8               	btfsc	status,2,c
  2248  000BB2  D7C7               	goto	l2550
  2249  000BB4                     l2570:
  2250                           
  2251                           ;Button.c: 122: ES_Event ReturnEvent;
  2252                           ;Button.c: 123: ReturnEvent.EventType = ES_NO_EVENT;
  2253  000BB4  0E00               	movlw	0
  2254  000BB6  0100               	movlb	0	; () banked
  2255  000BB8  6FDC               	movwf	RunButtonDebounceSM@ReturnEvent& (0+255),b
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;Button.c: 124: return ReturnEvent;
  2259  000BBA  C0DC  F0D9         	movff	RunButtonDebounceSM@ReturnEvent,?_RunButtonDebounceSM
  2260  000BBE  C0DD  F0DA         	movff	RunButtonDebounceSM@ReturnEvent+1,?_RunButtonDebounceSM+1
  2261  000BC2  C0DE  F0DB         	movff	RunButtonDebounceSM@ReturnEvent+2,?_RunButtonDebounceSM+2
  2262  000BC6  0012               	return	
  2263  000BC8                     __end_of_RunButtonDebounceSM:
  2264                           	opt stack 0
  2265                           tosu	equ	0xFFF
  2266                           tosh	equ	0xFFE
  2267                           tosl	equ	0xFFD
  2268                           pclath	equ	0xFFA
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           indf2	equ	0xFDF
  2278                           postinc2	equ	0xFDE
  2279                           postdec2	equ	0xFDD
  2280                           fsr2h	equ	0xFDA
  2281                           fsr2l	equ	0xFD9
  2282                           status	equ	0xFD8
  2283                           
  2284 ;; *************** function _RunCan_XmitService *****************
  2285 ;; Defined at:
  2286 ;;		line 135 in file "Can_XmitService.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  ReturnEvent     3   34[BANK0 ] struct ES_Event_t
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  3   29[BANK0 ] struct ES_Event_t
  2293 ;; Registers used:
  2294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2300 ;;      Params:         0       3       0       0
  2301 ;;      Locals:         0       3       0       0
  2302 ;;      Temps:          0       2       0       0
  2303 ;;      Totals:         0       8       0       0
  2304 ;;Total ram usage:        8 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    8
  2307 ;; This function calls:
  2308 ;;		_InitCanHardware
  2309 ;;		_InitPins
  2310 ;;		_XmitData
  2311 ;; This function is called by:
  2312 ;;		_ES_Run
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text11
  2317  0008C6                     __ptext11:
  2318                           	opt stack 0
  2319  0008C6                     _RunCan_XmitService:
  2320                           	opt stack 21
  2321                           
  2322                           ;Can_XmitService.c: 137: ES_Event ReturnEvent;
  2323                           ;Can_XmitService.c: 139: if (ThisEvent.EventType == ES_INIT) {
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;incstack = 0
  2327  0008C6  0E02               	movlw	2
  2328  0008C8  0100               	movlb	0	; () banked
  2329  0008CA  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2330  0008CC  A4D8               	btfss	status,2,c
  2331  0008CE  D009               	goto	l2676
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;Can_XmitService.c: 140: InitPins();
  2335  0008D0  EC70  F00A         	call	_InitPins	;wreg free
  2336                           
  2337                           ;Can_XmitService.c: 141: InitCanHardware();
  2338  0008D4  EC8F  F007         	call	_InitCanHardware	;wreg free
  2339                           
  2340                           ;Can_XmitService.c: 142: LATA2 = 1;
  2341  0008D8  8489               	bsf	3977,2,c	;volatile
  2342                           
  2343                           ;Can_XmitService.c: 143: LastData = 0x00;
  2344  0008DA  0E00               	movlw	0
  2345  0008DC  0100               	movlb	0	; () banked
  2346  0008DE  6F92               	movwf	_LastData& (0+255),b
  2347                           
  2348                           ;Can_XmitService.c: 144: } else if (ThisEvent.EventType == DBButtonDown) {
  2349  0008E0  D055               	goto	l2704
  2350  0008E2                     l2676:
  2351                           
  2352                           ; BSR set to: 0
  2353  0008E2  0E05               	movlw	5
  2354  0008E4  0100               	movlb	0	; () banked
  2355  0008E6  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2356  0008E8  B4D8               	btfsc	status,2,c
  2357  0008EA  D02D               	goto	l2698
  2358  0008EC  D046               	goto	l2700
  2359  0008EE                     l495:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;Can_XmitService.c: 147: LATA2 = 1;
  2363  0008EE  8489               	bsf	3977,2,c	;volatile
  2364                           
  2365                           ;Can_XmitService.c: 148: LATA3 = 0;
  2366  0008F0  9689               	bcf	3977,3,c	;volatile
  2367                           
  2368                           ;Can_XmitService.c: 149: LATA4 = 0;
  2369  0008F2  9889               	bcf	3977,4,c	;volatile
  2370                           
  2371                           ;Can_XmitService.c: 150: LATA5 = 0;
  2372  0008F4  9A89               	bcf	3977,5,c	;volatile
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;Can_XmitService.c: 151: LastData = 0x00;
  2376  0008F6  0E00               	movlw	0
  2377  0008F8  0100               	movlb	0	; () banked
  2378  0008FA  6F92               	movwf	_LastData& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;Can_XmitService.c: 152: XmitData(0x00);
  2382  0008FC  0E00               	movlw	0
  2383  0008FE  EC51  F007         	call	_XmitData
  2384                           
  2385                           ;Can_XmitService.c: 153: break;
  2386  000902  D044               	goto	l2704
  2387  000904                     l497:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;Can_XmitService.c: 155: LATA2 = 0;
  2391  000904  9489               	bcf	3977,2,c	;volatile
  2392                           
  2393                           ;Can_XmitService.c: 156: LATA3 = 1;
  2394  000906  8689               	bsf	3977,3,c	;volatile
  2395                           
  2396                           ;Can_XmitService.c: 157: LATA4 = 0;
  2397  000908  9889               	bcf	3977,4,c	;volatile
  2398                           
  2399                           ;Can_XmitService.c: 158: LATA5 = 0;
  2400  00090A  9A89               	bcf	3977,5,c	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;Can_XmitService.c: 159: LastData = 0x01;
  2404  00090C  0E01               	movlw	1
  2405  00090E  0100               	movlb	0	; () banked
  2406  000910  6F92               	movwf	_LastData& (0+255),b
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;Can_XmitService.c: 160: XmitData(0x01);
  2410  000912  0E01               	movlw	1
  2411  000914  EC51  F007         	call	_XmitData
  2412                           
  2413                           ;Can_XmitService.c: 161: break;
  2414  000918  D039               	goto	l2704
  2415  00091A                     l498:
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;Can_XmitService.c: 163: LATA2 = 0;
  2419  00091A  9489               	bcf	3977,2,c	;volatile
  2420                           
  2421                           ;Can_XmitService.c: 164: LATA3 = 0;
  2422  00091C  9689               	bcf	3977,3,c	;volatile
  2423                           
  2424                           ;Can_XmitService.c: 165: LATA4 = 1;
  2425  00091E  8889               	bsf	3977,4,c	;volatile
  2426                           
  2427                           ;Can_XmitService.c: 166: LATA5 = 0;
  2428  000920  9A89               	bcf	3977,5,c	;volatile
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;Can_XmitService.c: 167: LastData = 0x02;
  2432  000922  0E02               	movlw	2
  2433  000924  0100               	movlb	0	; () banked
  2434  000926  6F92               	movwf	_LastData& (0+255),b
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;Can_XmitService.c: 168: XmitData(0x02);
  2438  000928  0E02               	movlw	2
  2439  00092A  EC51  F007         	call	_XmitData
  2440                           
  2441                           ;Can_XmitService.c: 169: break;
  2442  00092E  D02E               	goto	l2704
  2443  000930                     l499:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;Can_XmitService.c: 171: LATA2 = 0;
  2447  000930  9489               	bcf	3977,2,c	;volatile
  2448                           
  2449                           ;Can_XmitService.c: 172: LATA3 = 0;
  2450  000932  9689               	bcf	3977,3,c	;volatile
  2451                           
  2452                           ;Can_XmitService.c: 173: LATA4 = 0;
  2453  000934  9889               	bcf	3977,4,c	;volatile
  2454                           
  2455                           ;Can_XmitService.c: 174: LATA5 = 1;
  2456  000936  8A89               	bsf	3977,5,c	;volatile
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;Can_XmitService.c: 175: LastData = 0x03;
  2460  000938  0E03               	movlw	3
  2461  00093A  0100               	movlb	0	; () banked
  2462  00093C  6F92               	movwf	_LastData& (0+255),b
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;Can_XmitService.c: 176: XmitData(0x03);
  2466  00093E  0E03               	movlw	3
  2467  000940  EC51  F007         	call	_XmitData
  2468                           
  2469                           ;Can_XmitService.c: 178: }
  2470                           
  2471                           ;Can_XmitService.c: 177: break;
  2472  000944  D023               	goto	l2704
  2473  000946                     l2698:
  2474  000946  EE20  F0DA         	lfsr	2,RunCan_XmitService@ThisEvent+1
  2475  00094A  CFDE F0DC          	movff	postinc2,??_RunCan_XmitService
  2476  00094E  CFDD F0DD          	movff	postdec2,??_RunCan_XmitService+1
  2477                           
  2478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2479                           ; Switch size 1, requested type "space"
  2480                           ; Number of cases is 1, Range of values is 0 to 0
  2481                           ; switch strategies available:
  2482                           ; Name         Instructions Cycles
  2483                           ; simple_byte            4     3 (average)
  2484                           ;	Chosen strategy is simple_byte
  2485  000952  0100               	movlb	0	; () banked
  2486  000954  51DD               	movf	(??_RunCan_XmitService+1)& (0+255),w,b
  2487  000956  0A00               	xorlw	0	; case 0
  2488  000958  A4D8               	btfss	status,2,c
  2489  00095A  D018               	goto	l2704
  2490                           
  2491                           ; BSR set to: 0
  2492                           ; Switch size 1, requested type "space"
  2493                           ; Number of cases is 4, Range of values is 7 to 14
  2494                           ; switch strategies available:
  2495                           ; Name         Instructions Cycles
  2496                           ; simple_byte           13     7 (average)
  2497                           ;	Chosen strategy is simple_byte
  2498  00095C  0100               	movlb	0	; () banked
  2499  00095E  51DC               	movf	??_RunCan_XmitService& (0+255),w,b
  2500  000960  0A07               	xorlw	7	; case 7
  2501  000962  B4D8               	btfsc	status,2,c
  2502  000964  D7E5               	goto	l499
  2503  000966  0A0C               	xorlw	12	; case 11
  2504  000968  B4D8               	btfsc	status,2,c
  2505  00096A  D7D7               	goto	l498
  2506  00096C  0A06               	xorlw	6	; case 13
  2507  00096E  B4D8               	btfsc	status,2,c
  2508  000970  D7C9               	goto	l497
  2509  000972  0A03               	xorlw	3	; case 14
  2510  000974  B4D8               	btfsc	status,2,c
  2511  000976  D7BB               	goto	l495
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;Can_XmitService.c: 179: } else if (ThisEvent.EventType == XMIT_EVENT) {
  2515  000978  D009               	goto	l2704
  2516  00097A                     l2700:
  2517                           
  2518                           ; BSR set to: 0
  2519  00097A  0E07               	movlw	7
  2520  00097C  0100               	movlb	0	; () banked
  2521  00097E  19D9               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2522  000980  A4D8               	btfss	status,2,c
  2523  000982  D004               	goto	l2704
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;Can_XmitService.c: 180: XmitData(LastData);
  2527  000984  0100               	movlb	0	; () banked
  2528  000986  5192               	movf	_LastData& (0+255),w,b
  2529  000988  EC51  F007         	call	_XmitData
  2530  00098C                     l2704:
  2531                           
  2532                           ;Can_XmitService.c: 181: }
  2533                           ;Can_XmitService.c: 182: ReturnEvent.EventType = ES_NO_EVENT;
  2534  00098C  0E00               	movlw	0
  2535  00098E  0100               	movlb	0	; () banked
  2536  000990  6FDE               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;Can_XmitService.c: 183: return ReturnEvent;
  2540  000992  C0DE  F0D9         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2541  000996  C0DF  F0DA         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2542  00099A  C0E0  F0DB         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2543  00099E  0012               	return	
  2544  0009A0                     __end_of_RunCan_XmitService:
  2545                           	opt stack 0
  2546                           tosu	equ	0xFFF
  2547                           tosh	equ	0xFFE
  2548                           tosl	equ	0xFFD
  2549                           pclath	equ	0xFFA
  2550                           tblptru	equ	0xFF8
  2551                           tblptrh	equ	0xFF7
  2552                           tblptrl	equ	0xFF6
  2553                           tablat	equ	0xFF5
  2554                           prodh	equ	0xFF4
  2555                           prodl	equ	0xFF3
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           indf2	equ	0xFDF
  2559                           postinc2	equ	0xFDE
  2560                           postdec2	equ	0xFDD
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _XmitData *****************
  2566 ;; Defined at:
  2567 ;;		line 287 in file "Can_XmitService.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  DataByte        1    wreg     unsigned char 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  DataByte        1    2[BANK0 ] unsigned char 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      void 
  2574 ;; Registers used:
  2575 ;;		wreg, status,2, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2581 ;;      Params:         0       0       0       0
  2582 ;;      Locals:         0       1       0       0
  2583 ;;      Temps:          0       0       0       0
  2584 ;;      Totals:         0       1       0       0
  2585 ;;Total ram usage:        1 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    7
  2588 ;; This function calls:
  2589 ;;		_GetBrightness
  2590 ;;		_GetLocation
  2591 ;; This function is called by:
  2592 ;;		_RunCan_XmitService
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text12
  2597  000EA2                     __ptext12:
  2598                           	opt stack 0
  2599  000EA2                     _XmitData:
  2600                           	opt stack 21
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;incstack = 0
  2604                           ;XmitData@DataByte stored from wreg
  2605  000EA2  0100               	movlb	0	; () banked
  2606  000EA4  6FBE               	movwf	XmitData@DataByte& (0+255),b
  2607                           
  2608                           ;Can_XmitService.c: 288: TXB0CONbits.TXREQ = 0;
  2609  000EA6  010F               	movlb	15	; () banked
  2610  000EA8  9740               	bcf	64,3,b	;volatile
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;Can_XmitService.c: 291: TXB0DLC = 0x05;
  2614  000EAA  0E05               	movlw	5
  2615  000EAC  010F               	movlb	15	; () banked
  2616  000EAE  6F45               	movwf	69,b	;volatile
  2617                           
  2618                           ; BSR set to: 15
  2619                           ;Can_XmitService.c: 292: TXB0D0 = DataByte;
  2620  000EB0  C0BE  FF46         	movff	XmitData@DataByte,3910	;volatile
  2621                           
  2622                           ; BSR set to: 15
  2623                           ;Can_XmitService.c: 293: TXB0D1 = (GetBrightness() >> 8) & 0xFF;
  2624  000EB4  ECBB  F00A         	call	_GetBrightness	;wreg free
  2625  000EB8  0100               	movlb	0	; () banked
  2626  000EBA  C0BD  F0BC         	movff	?_GetBrightness+1,?_GetBrightness
  2627  000EBE  0100               	movlb	0	; () banked
  2628  000EC0  6BBD               	clrf	(?_GetBrightness+1)& (0+255),b
  2629  000EC2  0100               	movlb	0	; () banked
  2630  000EC4  51BC               	movf	?_GetBrightness& (0+255),w,b
  2631  000EC6  010F               	movlb	15	; () banked
  2632  000EC8  6F47               	movwf	71,b	;volatile
  2633                           
  2634                           ; BSR set to: 15
  2635                           ;Can_XmitService.c: 294: TXB0D2 = GetBrightness() & 0xFF;
  2636  000ECA  ECBB  F00A         	call	_GetBrightness	;wreg free
  2637  000ECE  0100               	movlb	0	; () banked
  2638  000ED0  51BC               	movf	?_GetBrightness& (0+255),w,b
  2639  000ED2  010F               	movlb	15	; () banked
  2640  000ED4  6F48               	movwf	72,b	;volatile
  2641                           
  2642                           ; BSR set to: 15
  2643                           ;Can_XmitService.c: 295: TXB0D3 = (GetLocation() >> 8) & 0xFF;
  2644  000ED6  ECB6  F00A         	call	_GetLocation	;wreg free
  2645  000EDA  0100               	movlb	0	; () banked
  2646  000EDC  C0BD  F0BC         	movff	?_GetLocation+1,?_GetLocation
  2647  000EE0  0100               	movlb	0	; () banked
  2648  000EE2  6BBD               	clrf	(?_GetLocation+1)& (0+255),b
  2649  000EE4  0100               	movlb	0	; () banked
  2650  000EE6  51BC               	movf	?_GetLocation& (0+255),w,b
  2651  000EE8  010F               	movlb	15	; () banked
  2652  000EEA  6F49               	movwf	73,b	;volatile
  2653                           
  2654                           ; BSR set to: 15
  2655                           ;Can_XmitService.c: 296: TXB0D4 = GetLocation() & 0xFF;
  2656  000EEC  ECB6  F00A         	call	_GetLocation	;wreg free
  2657  000EF0  0100               	movlb	0	; () banked
  2658  000EF2  51BC               	movf	?_GetLocation& (0+255),w,b
  2659  000EF4  010F               	movlb	15	; () banked
  2660  000EF6  6F4A               	movwf	74,b	;volatile
  2661                           
  2662                           ; BSR set to: 15
  2663                           ;Can_XmitService.c: 299: TXB0SIDH = 0x00;
  2664  000EF8  0E00               	movlw	0
  2665  000EFA  010F               	movlb	15	; () banked
  2666  000EFC  6F41               	movwf	65,b	;volatile
  2667                           
  2668                           ; BSR set to: 15
  2669                           ;Can_XmitService.c: 300: TXB0SIDL = 0x08;
  2670  000EFE  0E08               	movlw	8
  2671  000F00  010F               	movlb	15	; () banked
  2672  000F02  6F42               	movwf	66,b	;volatile
  2673                           
  2674                           ; BSR set to: 15
  2675                           ;Can_XmitService.c: 301: TXB0EIDH = 0x00;
  2676  000F04  0E00               	movlw	0
  2677  000F06  010F               	movlb	15	; () banked
  2678  000F08  6F43               	movwf	67,b	;volatile
  2679                           
  2680                           ; BSR set to: 15
  2681                           ;Can_XmitService.c: 302: TXB0EIDL = 0x01;
  2682  000F0A  0E01               	movlw	1
  2683  000F0C  010F               	movlb	15	; () banked
  2684  000F0E  6F44               	movwf	68,b	;volatile
  2685                           
  2686                           ; BSR set to: 15
  2687                           ;Can_XmitService.c: 304: TXB0CONbits.TXPRI0 = 1;
  2688  000F10  010F               	movlb	15	; () banked
  2689  000F12  8140               	bsf	64,0,b	;volatile
  2690                           
  2691                           ; BSR set to: 15
  2692                           ;Can_XmitService.c: 305: TXB0CONbits.TXPRI1 = 1;
  2693  000F14  010F               	movlb	15	; () banked
  2694  000F16  8340               	bsf	64,1,b	;volatile
  2695                           
  2696                           ; BSR set to: 15
  2697                           ;Can_XmitService.c: 307: TXB0CONbits.TXREQ = 1;
  2698  000F18  010F               	movlb	15	; () banked
  2699  000F1A  8740               	bsf	64,3,b	;volatile
  2700                           
  2701                           ; BSR set to: 15
  2702  000F1C  0012               	return		;funcret
  2703  000F1E                     __end_of_XmitData:
  2704                           	opt stack 0
  2705                           tosu	equ	0xFFF
  2706                           tosh	equ	0xFFE
  2707                           tosl	equ	0xFFD
  2708                           pclath	equ	0xFFA
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           prodh	equ	0xFF4
  2714                           prodl	equ	0xFF3
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _GetLocation *****************
  2725 ;; Defined at:
  2726 ;;		line 72 in file "Analog_Service.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  2    0[BANK0 ] unsigned int 
  2733 ;; Registers used:
  2734 ;;		None
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2740 ;;      Params:         0       2       0       0
  2741 ;;      Locals:         0       0       0       0
  2742 ;;      Temps:          0       0       0       0
  2743 ;;      Totals:         0       2       0       0
  2744 ;;Total ram usage:        2 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    6
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_XmitData
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text13
  2755  00156C                     __ptext13:
  2756                           	opt stack 0
  2757  00156C                     _GetLocation:
  2758                           	opt stack 21
  2759                           
  2760                           ;Analog_Service.c: 74: return Location;
  2761                           
  2762                           ; BSR set to: 15
  2763                           ;incstack = 0
  2764  00156C  C087  F0BC         	movff	_Location,?_GetLocation
  2765  001570  C088  F0BD         	movff	_Location+1,?_GetLocation+1
  2766  001574  0012               	return		;funcret
  2767  001576                     __end_of_GetLocation:
  2768                           	opt stack 0
  2769                           tosu	equ	0xFFF
  2770                           tosh	equ	0xFFE
  2771                           tosl	equ	0xFFD
  2772                           pclath	equ	0xFFA
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _GetBrightness *****************
  2789 ;; Defined at:
  2790 ;;		line 67 in file "Analog_Service.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  2    0[BANK0 ] unsigned int 
  2797 ;; Registers used:
  2798 ;;		None
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2804 ;;      Params:         0       2       0       0
  2805 ;;      Locals:         0       0       0       0
  2806 ;;      Temps:          0       0       0       0
  2807 ;;      Totals:         0       2       0       0
  2808 ;;Total ram usage:        2 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    6
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_XmitData
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text14
  2819  001576                     __ptext14:
  2820                           	opt stack 0
  2821  001576                     _GetBrightness:
  2822                           	opt stack 21
  2823                           
  2824                           ;Analog_Service.c: 69: return Brightness;
  2825                           
  2826                           ;incstack = 0
  2827  001576  C085  F0BC         	movff	_Brightness,?_GetBrightness
  2828  00157A  C086  F0BD         	movff	_Brightness+1,?_GetBrightness+1
  2829  00157E  0012               	return		;funcret
  2830  001580                     __end_of_GetBrightness:
  2831                           	opt stack 0
  2832                           tosu	equ	0xFFF
  2833                           tosh	equ	0xFFE
  2834                           tosl	equ	0xFFD
  2835                           pclath	equ	0xFFA
  2836                           tblptru	equ	0xFF8
  2837                           tblptrh	equ	0xFF7
  2838                           tblptrl	equ	0xFF6
  2839                           tablat	equ	0xFF5
  2840                           prodh	equ	0xFF4
  2841                           prodl	equ	0xFF3
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           indf2	equ	0xFDF
  2845                           postinc2	equ	0xFDE
  2846                           postdec2	equ	0xFDD
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _InitPins *****************
  2852 ;; Defined at:
  2853 ;;		line 271 in file "Can_XmitService.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2867 ;;      Params:         0       0       0       0
  2868 ;;      Locals:         0       0       0       0
  2869 ;;      Temps:          0       0       0       0
  2870 ;;      Totals:         0       0       0       0
  2871 ;;Total ram usage:        0 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    6
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_RunCan_XmitService
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text15
  2882  0014E0                     __ptext15:
  2883                           	opt stack 0
  2884  0014E0                     _InitPins:
  2885                           	opt stack 22
  2886                           
  2887                           ;Can_XmitService.c: 274: PORTB = 0x00;
  2888                           
  2889                           ;incstack = 0
  2890  0014E0  0E00               	movlw	0
  2891  0014E2  6E81               	movwf	3969,c	;volatile
  2892                           
  2893                           ;Can_XmitService.c: 275: LATB = 0x00;
  2894  0014E4  0E00               	movlw	0
  2895  0014E6  6E8A               	movwf	3978,c	;volatile
  2896                           
  2897                           ;Can_XmitService.c: 276: TRISBbits.TRISB2 = 0;
  2898  0014E8  9493               	bcf	3987,2,c	;volatile
  2899                           
  2900                           ;Can_XmitService.c: 277: TRISBbits.TRISB3 = 1;
  2901  0014EA  8693               	bsf	3987,3,c	;volatile
  2902                           
  2903                           ;Can_XmitService.c: 280: PORTA = 0x00;
  2904  0014EC  0E00               	movlw	0
  2905  0014EE  6E80               	movwf	3968,c	;volatile
  2906                           
  2907                           ;Can_XmitService.c: 281: LATA &= 0b11111100;
  2908  0014F0  0EFC               	movlw	252
  2909  0014F2  1689               	andwf	3977,f,c	;volatile
  2910                           
  2911                           ;Can_XmitService.c: 282: TRISA &= 0b00000011;
  2912  0014F4  0E03               	movlw	3
  2913  0014F6  1692               	andwf	3986,f,c	;volatile
  2914  0014F8  0012               	return		;funcret
  2915  0014FA                     __end_of_InitPins:
  2916                           	opt stack 0
  2917                           tosu	equ	0xFFF
  2918                           tosh	equ	0xFFE
  2919                           tosl	equ	0xFFD
  2920                           pclath	equ	0xFFA
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           indf2	equ	0xFDF
  2930                           postinc2	equ	0xFDE
  2931                           postdec2	equ	0xFDD
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _InitCanHardware *****************
  2937 ;; Defined at:
  2938 ;;		line 211 in file "Can_XmitService.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, status,2
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2952 ;;      Params:         0       0       0       0
  2953 ;;      Locals:         0       0       0       0
  2954 ;;      Temps:          0       0       0       0
  2955 ;;      Totals:         0       0       0       0
  2956 ;;Total ram usage:        0 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    6
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_RunCan_XmitService
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text16
  2967  000F1E                     __ptext16:
  2968                           	opt stack 0
  2969  000F1E                     _InitCanHardware:
  2970                           	opt stack 22
  2971                           
  2972                           ;Can_XmitService.c: 215: CANCON = 0x80;
  2973                           
  2974                           ;incstack = 0
  2975  000F1E  0E80               	movlw	128
  2976  000F20  6E6F               	movwf	3951,c	;volatile
  2977  000F22                     l518:
  2978  000F22  AE6E               	btfss	3950,7,c	;volatile
  2979  000F24  D7FE               	goto	l518
  2980                           
  2981                           ;Can_XmitService.c: 218: CIOCON = 0x20;
  2982  000F26  0E20               	movlw	32
  2983  000F28  6E73               	movwf	3955,c	;volatile
  2984                           
  2985                           ;Can_XmitService.c: 221: BRGCON2bits.SEG2PHTS = 1;
  2986  000F2A  8E71               	bsf	3953,7,c	;volatile
  2987                           
  2988                           ;Can_XmitService.c: 223: BRGCON1bits.BRP0 = 1;
  2989  000F2C  8070               	bsf	3952,0,c	;volatile
  2990                           
  2991                           ;Can_XmitService.c: 224: BRGCON1bits.BRP1 = 0;
  2992  000F2E  9270               	bcf	3952,1,c	;volatile
  2993                           
  2994                           ;Can_XmitService.c: 225: BRGCON2bits.PRSEG0 = 0;
  2995  000F30  9071               	bcf	3953,0,c	;volatile
  2996                           
  2997                           ;Can_XmitService.c: 226: BRGCON2bits.PRSEG1 = 1;
  2998  000F32  8271               	bsf	3953,1,c	;volatile
  2999                           
  3000                           ;Can_XmitService.c: 227: BRGCON2bits.PRSEG2 = 1;
  3001  000F34  8471               	bsf	3953,2,c	;volatile
  3002                           
  3003                           ;Can_XmitService.c: 228: BRGCON2bits.SEG1PH0 = 1;
  3004  000F36  8671               	bsf	3953,3,c	;volatile
  3005                           
  3006                           ;Can_XmitService.c: 229: BRGCON2bits.SEG1PH1 = 0;
  3007  000F38  9871               	bcf	3953,4,c	;volatile
  3008                           
  3009                           ;Can_XmitService.c: 230: BRGCON2bits.SEG1PH2 = 1;
  3010  000F3A  8A71               	bsf	3953,5,c	;volatile
  3011                           
  3012                           ;Can_XmitService.c: 231: BRGCON3bits.SEG2PH0 = 1;
  3013  000F3C  8072               	bsf	3954,0,c	;volatile
  3014                           
  3015                           ;Can_XmitService.c: 232: BRGCON1bits.SJW0 = 1;
  3016  000F3E  8C70               	bsf	3952,6,c	;volatile
  3017                           
  3018                           ;Can_XmitService.c: 236: RXB0CONbits.RXB0DBEN = 0;
  3019  000F40  9460               	bcf	3936,2,c	;volatile
  3020                           
  3021                           ;Can_XmitService.c: 237: RXB0CONbits.RXM0 = 0;
  3022  000F42  9A60               	bcf	3936,5,c	;volatile
  3023                           
  3024                           ;Can_XmitService.c: 238: RXB0CONbits.RXM1 = 0;
  3025  000F44  9C60               	bcf	3936,6,c	;volatile
  3026                           
  3027                           ;Can_XmitService.c: 239: RXF0SIDH = 0x00;
  3028  000F46  0E00               	movlw	0
  3029  000F48  010F               	movlb	15	; () banked
  3030  000F4A  6F00               	movwf	0,b	;volatile
  3031                           
  3032                           ;Can_XmitService.c: 240: RXF0SIDL = 0x08;
  3033  000F4C  0E08               	movlw	8
  3034  000F4E  010F               	movlb	15	; () banked
  3035  000F50  6F01               	movwf	1,b	;volatile
  3036                           
  3037                           ;Can_XmitService.c: 241: RXF0EIDH = 0x00;
  3038  000F52  0E00               	movlw	0
  3039  000F54  010F               	movlb	15	; () banked
  3040  000F56  6F02               	movwf	2,b	;volatile
  3041                           
  3042                           ;Can_XmitService.c: 242: RXF0EIDL = 0x01;
  3043  000F58  0E01               	movlw	1
  3044  000F5A  010F               	movlb	15	; () banked
  3045  000F5C  6F03               	movwf	3,b	;volatile
  3046                           
  3047                           ;Can_XmitService.c: 244: RXM0SIDH = 0x00;
  3048  000F5E  0E00               	movlw	0
  3049  000F60  010F               	movlb	15	; () banked
  3050  000F62  6F18               	movwf	24,b	;volatile
  3051                           
  3052                           ;Can_XmitService.c: 245: RXM0SIDL = 0x00;
  3053  000F64  0E00               	movlw	0
  3054  000F66  010F               	movlb	15	; () banked
  3055  000F68  6F19               	movwf	25,b	;volatile
  3056                           
  3057                           ;Can_XmitService.c: 246: RXM0EIDH = 0x00;
  3058  000F6A  0E00               	movlw	0
  3059  000F6C  010F               	movlb	15	; () banked
  3060  000F6E  6F1A               	movwf	26,b	;volatile
  3061                           
  3062                           ;Can_XmitService.c: 247: RXM0EIDL = 0x01;
  3063  000F70  0E01               	movlw	1
  3064  000F72  010F               	movlb	15	; () banked
  3065  000F74  6F1B               	movwf	27,b	;volatile
  3066                           
  3067                           ;Can_XmitService.c: 251: ECANCON = 0x00;
  3068  000F76  0E00               	movlw	0
  3069  000F78  6E77               	movwf	3959,c	;volatile
  3070                           
  3071                           ;Can_XmitService.c: 252: CANCON = 0b00010000;
  3072  000F7A  0E10               	movlw	16
  3073  000F7C  6E6F               	movwf	3951,c	;volatile
  3074  000F7E                     l521:
  3075  000F7E  BE6E               	btfsc	3950,7,c	;volatile
  3076  000F80  D7FE               	goto	l521
  3077                           
  3078                           ;Can_XmitService.c: 256: RXB0IE = 1;
  3079  000F82  80A3               	bsf	4003,0,c	;volatile
  3080                           
  3081                           ;Can_XmitService.c: 257: ERRIE = 1;
  3082  000F84  8AA3               	bsf	4003,5,c	;volatile
  3083                           
  3084                           ;Can_XmitService.c: 258: IRXIE = 1;
  3085  000F86  8EA3               	bsf	4003,7,c	;volatile
  3086                           
  3087                           ;Can_XmitService.c: 262: RXB0IF = 0;
  3088  000F88  90A4               	bcf	4004,0,c	;volatile
  3089                           
  3090                           ;Can_XmitService.c: 263: ERRIF = 0;
  3091  000F8A  9AA4               	bcf	4004,5,c	;volatile
  3092                           
  3093                           ;Can_XmitService.c: 264: IRXIF = 0;
  3094  000F8C  9EA4               	bcf	4004,7,c	;volatile
  3095                           
  3096                           ;Can_XmitService.c: 265: TXB0IE = 1;
  3097  000F8E  84A3               	bsf	4003,2,c	;volatile
  3098                           
  3099                           ;Can_XmitService.c: 266: TXB0IF = 0;
  3100  000F90  94A4               	bcf	4004,2,c	;volatile
  3101                           
  3102                           ;Can_XmitService.c: 267: TXB0CONbits.TXREQ = 0;
  3103  000F92  010F               	movlb	15	; () banked
  3104  000F94  9740               	bcf	64,3,b	;volatile
  3105                           
  3106                           ;Can_XmitService.c: 268: RXB0CONbits.RXFUL = 0;
  3107  000F96  9E60               	bcf	3936,7,c	;volatile
  3108                           
  3109                           ; BSR set to: 15
  3110  000F98  0012               	return		;funcret
  3111  000F9A                     __end_of_InitCanHardware:
  3112                           	opt stack 0
  3113                           tosu	equ	0xFFF
  3114                           tosh	equ	0xFFE
  3115                           tosl	equ	0xFFD
  3116                           pclath	equ	0xFFA
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           prodh	equ	0xFF4
  3122                           prodl	equ	0xFF3
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           indf2	equ	0xFDF
  3126                           postinc2	equ	0xFDE
  3127                           postdec2	equ	0xFDD
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _ES_PostAll *****************
  3133 ;; Defined at:
  3134 ;;		line 318 in file "ES_Framework.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;  i               1   28[BANK0 ] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      unsigned char 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3148 ;;      Params:         0       3       0       0
  3149 ;;      Locals:         0       1       0       0
  3150 ;;      Temps:          0       2       0       0
  3151 ;;      Totals:         0       6       0       0
  3152 ;;Total ram usage:        6 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    8
  3155 ;; This function calls:
  3156 ;;		_ES_EnQueueFIFO
  3157 ;; This function is called by:
  3158 ;;		_RunButtonDebounceSM
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text17
  3163  000F9A                     __ptext17:
  3164                           	opt stack 0
  3165  000F9A                     _ES_PostAll:
  3166                           	opt stack 20
  3167                           
  3168                           ;ES_Framework.c: 320: uint8_t i;
  3169                           ;ES_Framework.c: 322: for ( i=0; i< (sizeof(EventQueues)/sizeof(EventQueues[0])); i++) {
  3170                           
  3171                           ; BSR set to: 15
  3172                           ;incstack = 0
  3173  000F9A  0E00               	movlw	0
  3174  000F9C  0100               	movlb	0	; () banked
  3175  000F9E  6FD8               	movwf	ES_PostAll@i& (0+255),b
  3176  000FA0                     l2356:
  3177                           
  3178                           ; BSR set to: 0
  3179  000FA0  0E02               	movlw	2
  3180  000FA2  0100               	movlb	0	; () banked
  3181  000FA4  65D8               	cpfsgt	ES_PostAll@i& (0+255),b
  3182  000FA6  D001               	goto	l2360
  3183  000FA8  0012               	return	
  3184  000FAA                     l2360:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;ES_Framework.c: 323: if ( ES_EnQueueFIFO( EventQueues[i].pMem, ThisEvent ) != 1 ){
  3188  000FAA  0100               	movlb	0	; () banked
  3189  000FAC  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3190  000FAE  0D03               	mullw	3
  3191  000FB0  0E5C               	movlw	low _EventQueues
  3192  000FB2  24F3               	addwf	prodl,w,c
  3193  000FB4  6EF6               	movwf	tblptrl,c
  3194  000FB6  0E03               	movlw	high _EventQueues
  3195  000FB8  20F4               	addwfc	prodh,w,c
  3196  000FBA  6EF7               	movwf	tblptrh,c
  3197  000FBC                     	if	0	;There are less than 3 active tblptr bytes
  3198  000FBC                     	endif
  3199  000FBC  0009               	tblrd		*+
  3200  000FBE  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  3201  000FC2  000A               	tblrd		*-
  3202  000FC4  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3203  000FC8  C0D3  F0CA         	movff	ES_PostAll@ThisEvent,ES_EnQueueFIFO@Event2Add
  3204  000FCC  C0D4  F0CB         	movff	ES_PostAll@ThisEvent+1,ES_EnQueueFIFO@Event2Add+1
  3205  000FD0  C0D5  F0CC         	movff	ES_PostAll@ThisEvent+2,ES_EnQueueFIFO@Event2Add+2
  3206  000FD4  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3207  000FD8  06E8               	decf	wreg,f,c
  3208  000FDA  A4D8               	btfss	status,2,c
  3209  000FDC  0012               	return	
  3210                           
  3211                           ;ES_Framework.c: 326: Ready |= BitNum2SetMask[i];
  3212                           
  3213                           ;ES_Framework.c: 325: }else{
  3214                           
  3215                           ;ES_Framework.c: 324: break;
  3216  000FDE  0100               	movlb	0	; () banked
  3217  000FE0  51D8               	movf	ES_PostAll@i& (0+255),w,b
  3218  000FE2  0D02               	mullw	2
  3219  000FE4  0E01               	movlw	low _BitNum2SetMask
  3220  000FE6  24F3               	addwf	prodl,w,c
  3221  000FE8  6EF6               	movwf	tblptrl,c
  3222  000FEA  0E03               	movlw	high _BitNum2SetMask
  3223  000FEC  20F4               	addwfc	prodh,w,c
  3224  000FEE  6EF7               	movwf	tblptrh,c
  3225  000FF0                     	if	0	;There are less than 3 active tblptr bytes
  3226  000FF0                     	endif
  3227  000FF0  0009               	tblrd		*+
  3228  000FF2  CFF5 F0D6          	movff	tablat,??_ES_PostAll
  3229  000FF6  0009               	tblrd		*+
  3230  000FF8  CFF5 F0D7          	movff	tablat,??_ES_PostAll+1
  3231  000FFC  0100               	movlb	0	; () banked
  3232  000FFE  51D6               	movf	??_ES_PostAll& (0+255),w,b
  3233  001000  0100               	movlb	0	; () banked
  3234  001002  1389               	iorwf	_Ready& (0+255),f,b
  3235  001004  0100               	movlb	0	; () banked
  3236  001006  51D7               	movf	(??_ES_PostAll+1)& (0+255),w,b
  3237  001008  0100               	movlb	0	; () banked
  3238  00100A  138A               	iorwf	(_Ready+1)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 0
  3241  00100C  0100               	movlb	0	; () banked
  3242  00100E  2BD8               	incf	ES_PostAll@i& (0+255),f,b
  3243  001010  D7C7               	goto	l2356
  3244  001012                     __end_of_ES_PostAll:
  3245                           	opt stack 0
  3246                           tosu	equ	0xFFF
  3247                           tosh	equ	0xFFE
  3248                           tosl	equ	0xFFD
  3249                           pclath	equ	0xFFA
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           postinc0	equ	0xFEE
  3257                           wreg	equ	0xFE8
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _InitAnalogHW *****************
  3266 ;; Defined at:
  3267 ;;		line 95 in file "Analog_Service.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3281 ;;      Params:         0       0       0       0
  3282 ;;      Locals:         0       0       0       0
  3283 ;;      Temps:          0       0       0       0
  3284 ;;      Totals:         0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    6
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_RunAnalogService
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text18
  3296  00144C                     __ptext18:
  3297                           	opt stack 0
  3298  00144C                     _InitAnalogHW:
  3299                           	opt stack 22
  3300                           
  3301                           ;Analog_Service.c: 97: PORTA = 0x00;
  3302                           
  3303                           ;incstack = 0
  3304  00144C  0E00               	movlw	0
  3305  00144E  6E80               	movwf	3968,c	;volatile
  3306                           
  3307                           ;Analog_Service.c: 98: LATA = 0x00;
  3308  001450  0E00               	movlw	0
  3309  001452  6E89               	movwf	3977,c	;volatile
  3310                           
  3311                           ;Analog_Service.c: 99: TRISAbits.TRISA0 = 1;
  3312  001454  8092               	bsf	3986,0,c	;volatile
  3313                           
  3314                           ;Analog_Service.c: 100: TRISAbits.TRISA1 = 1;
  3315  001456  8292               	bsf	3986,1,c	;volatile
  3316                           
  3317                           ;Analog_Service.c: 102: ADCON1bits.VCFG1 = 0;
  3318  001458  9AC1               	bcf	4033,5,c	;volatile
  3319                           
  3320                           ;Analog_Service.c: 103: ADCON1bits.VCFG0 = 0;
  3321  00145A  98C1               	bcf	4033,4,c	;volatile
  3322                           
  3323                           ;Analog_Service.c: 105: ADCON2bits.ADFM = 1;
  3324  00145C  8EC0               	bsf	4032,7,c	;volatile
  3325                           
  3326                           ;Analog_Service.c: 106: ADCON2bits.ACQT = 0b100;
  3327  00145E  50C0               	movf	4032,w,c	;volatile
  3328  001460  0BC7               	andlw	-57
  3329  001462  0920               	iorlw	32
  3330  001464  6EC0               	movwf	4032,c	;volatile
  3331                           
  3332                           ;Analog_Service.c: 107: ADCON2bits.ADCS = 0b001;
  3333  001466  50C0               	movf	4032,w,c	;volatile
  3334  001468  0BF8               	andlw	-8
  3335  00146A  0901               	iorlw	1
  3336  00146C  6EC0               	movwf	4032,c	;volatile
  3337                           
  3338                           ;Analog_Service.c: 109: ADCON0bits.ADON = 1;
  3339  00146E  80C2               	bsf	4034,0,c	;volatile
  3340                           
  3341                           ;Analog_Service.c: 110: ADIF = 0;
  3342  001470  9C9E               	bcf	3998,6,c	;volatile
  3343                           
  3344                           ;Analog_Service.c: 111: ADIE = 1;
  3345  001472  8C9D               	bsf	3997,6,c	;volatile
  3346  001474  0012               	return		;funcret
  3347  001476                     __end_of_InitAnalogHW:
  3348                           	opt stack 0
  3349                           tosu	equ	0xFFF
  3350                           tosh	equ	0xFFE
  3351                           tosl	equ	0xFFD
  3352                           pclath	equ	0xFFA
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _ES_DeQueue *****************
  3369 ;; Defined at:
  3370 ;;		line 164 in file "ES_Queue.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3373 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3374 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  3375 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  3378 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  3379 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  3380 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      unsigned char 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3390 ;;      Params:         0       4       0       0
  3391 ;;      Locals:         0       4       0       0
  3392 ;;      Temps:          0       2       0       0
  3393 ;;      Totals:         0      10       0       0
  3394 ;;Total ram usage:       10 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    7
  3397 ;; This function calls:
  3398 ;;		___lbmod
  3399 ;;		___wmul
  3400 ;; This function is called by:
  3401 ;;		_ES_Run
  3402 ;;		_ES_RecallEvents
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text19
  3407  0003C6                     __ptext19:
  3408                           	opt stack 0
  3409  0003C6                     _ES_DeQueue:
  3410                           	opt stack 22
  3411                           
  3412                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  3413                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  3414                           ;ES_Queue.c: 168: uint8_t NumLeft;
  3415                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  3416                           
  3417                           ;incstack = 0
  3418  0003C6  C0C8  F0D0         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  3419  0003CA  C0C9  F0D1         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  3420                           
  3421                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  3422  0003CE  0100               	movlb	0	; () banked
  3423  0003D0  EE20 F002          	lfsr	2,2
  3424  0003D4  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3425  0003D6  26D9               	addwf	fsr2l,f,c
  3426  0003D8  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3427  0003DA  22DA               	addwfc	fsr2h,f,c
  3428  0003DC  50DF               	movf	indf2,w,c
  3429  0003DE  B4D8               	btfsc	status,2,c
  3430  0003E0  D06F               	goto	l2612
  3431                           
  3432                           ; BSR set to: 0
  3433                           
  3434                           ;ES_Queue.c: 172: {
  3435                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3436  0003E2  CFF2 F0CE          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  3437  0003E6  9EF2               	bcf	intcon,7,c	;volatile
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3441                           
  3442                           ; BSR set to: 0
  3443  0003E8  0100               	movlb	0	; () banked
  3444  0003EA  EE20 F001          	lfsr	2,1
  3445  0003EE  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3446  0003F0  26D9               	addwf	fsr2l,f,c
  3447  0003F2  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3448  0003F4  22DA               	addwfc	fsr2h,f,c
  3449  0003F6  50DF               	movf	indf2,w,c
  3450  0003F8  0100               	movlb	0	; () banked
  3451  0003FA  6FCC               	movwf	??_ES_DeQueue& (0+255),b
  3452  0003FC  0E01               	movlw	1
  3453  0003FE  0100               	movlb	0	; () banked
  3454  000400  25CC               	addwf	??_ES_DeQueue& (0+255),w,b
  3455  000402  0100               	movlb	0	; () banked
  3456  000404  6FC2               	movwf	___wmul@multiplier& (0+255),b
  3457  000406  0100               	movlb	0	; () banked
  3458  000408  6BC3               	clrf	(___wmul@multiplier+1)& (0+255),b
  3459  00040A  0E00               	movlw	0
  3460  00040C  23C3               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  3461  00040E  0E00               	movlw	0
  3462  000410  0100               	movlb	0	; () banked
  3463  000412  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3464  000414  0E03               	movlw	3
  3465  000416  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  3466  000418  ECAA  F009         	call	___wmul	;wreg free
  3467  00041C  0100               	movlb	0	; () banked
  3468  00041E  51C2               	movf	?___wmul& (0+255),w,b
  3469  000420  0100               	movlb	0	; () banked
  3470  000422  25C8               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  3471  000424  6ED9               	movwf	fsr2l,c
  3472  000426  0100               	movlb	0	; () banked
  3473  000428  51C3               	movf	(?___wmul+1)& (0+255),w,b
  3474  00042A  0100               	movlb	0	; () banked
  3475  00042C  21C9               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  3476  00042E  6EDA               	movwf	fsr2h,c
  3477  000430  C0CA  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  3478  000434  C0CB  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  3479  000438  CFDE FFE6          	movff	postinc2,postinc1
  3480  00043C  CFDE FFE6          	movff	postinc2,postinc1
  3481  000440  CFDE FFE6          	movff	postinc2,postinc1
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  3485  000444  0100               	movlb	0	; () banked
  3486  000446  EE20 F001          	lfsr	2,1
  3487  00044A  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3488  00044C  26D9               	addwf	fsr2l,f,c
  3489  00044E  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3490  000450  22DA               	addwfc	fsr2h,f,c
  3491  000452  2ADF               	incf	indf2,f,c
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3495  000454  C0D0  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  3496  000458  C0D1  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  3497  00045C  0100               	movlb	0	; () banked
  3498  00045E  EE10 F001          	lfsr	1,1
  3499  000462  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3500  000464  26E1               	addwf	fsr1l,f,c
  3501  000466  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3502  000468  22E2               	addwfc	fsr1h,f,c
  3503  00046A  50DE               	movf	postinc2,w,c
  3504  00046C  5CE6               	subwf	postinc1,w,c
  3505  00046E  A0D8               	btfss	status,0,c
  3506  000470  D019               	goto	l2608
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  3510  000472  0100               	movlb	0	; () banked
  3511  000474  EE20 F001          	lfsr	2,1
  3512  000478  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3513  00047A  26D9               	addwf	fsr2l,f,c
  3514  00047C  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3515  00047E  22DA               	addwfc	fsr2h,f,c
  3516  000480  C0D0  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  3517  000484  C0D1  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  3518  000488  50E7               	movf	indf1,w,c
  3519  00048A  0100               	movlb	0	; () banked
  3520  00048C  6FBC               	movwf	___lbmod@divisor& (0+255),b
  3521  00048E  0100               	movlb	0	; () banked
  3522  000490  EE10 F001          	lfsr	1,1
  3523  000494  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3524  000496  26E1               	addwf	fsr1l,f,c
  3525  000498  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3526  00049A  22E2               	addwfc	fsr1h,f,c
  3527  00049C  50E7               	movf	indf1,w,c
  3528  00049E  EC6A  F009         	call	___lbmod
  3529  0004A2  6EDF               	movwf	indf2,c
  3530  0004A4                     l2608:
  3531                           
  3532                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  3533  0004A4  0100               	movlb	0	; () banked
  3534  0004A6  EE20 F002          	lfsr	2,2
  3535  0004AA  51D0               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  3536  0004AC  26D9               	addwf	fsr2l,f,c
  3537  0004AE  51D1               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  3538  0004B0  22DA               	addwfc	fsr2h,f,c
  3539  0004B2  06DF               	decf	indf2,f,c
  3540  0004B4  50DF               	movf	indf2,w,c
  3541  0004B6  0100               	movlb	0	; () banked
  3542  0004B8  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  3546  0004BA  C0CE  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  3547                           
  3548                           ;ES_Queue.c: 183: }else {
  3549  0004BE  D014               	goto	l2618
  3550  0004C0                     l2612:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  3554  0004C0  C0CA  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  3555  0004C4  C0CB  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  3556  0004C8  0E00               	movlw	0
  3557  0004CA  6EDF               	movwf	indf2,c
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  3561  0004CC  0100               	movlb	0	; () banked
  3562  0004CE  EE20 F001          	lfsr	2,1
  3563  0004D2  51CA               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  3564  0004D4  26D9               	addwf	fsr2l,f,c
  3565  0004D6  51CB               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  3566  0004D8  22DA               	addwfc	fsr2h,f,c
  3567  0004DA  0E00               	movlw	0
  3568  0004DC  6EDE               	movwf	postinc2,c
  3569  0004DE  0E00               	movlw	0
  3570  0004E0  6EDD               	movwf	postdec2,c
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;ES_Queue.c: 186: NumLeft = 0;
  3574  0004E2  0E00               	movlw	0
  3575  0004E4  0100               	movlb	0	; () banked
  3576  0004E6  6FCF               	movwf	ES_DeQueue@NumLeft& (0+255),b
  3577  0004E8                     l2618:
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;ES_Queue.c: 187: }
  3581                           ;ES_Queue.c: 188: return NumLeft;
  3582  0004E8  0100               	movlb	0	; () banked
  3583  0004EA  51CF               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  3584  0004EC  0012               	return	
  3585  0004EE                     __end_of_ES_DeQueue:
  3586                           	opt stack 0
  3587                           tosu	equ	0xFFF
  3588                           tosh	equ	0xFFE
  3589                           tosl	equ	0xFFD
  3590                           pclath	equ	0xFFA
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           prodh	equ	0xFF4
  3596                           prodl	equ	0xFF3
  3597                           intcon	equ	0xFF2
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           indf1	equ	0xFE7
  3601                           postinc1	equ	0xFE6
  3602                           fsr1h	equ	0xFE2
  3603                           fsr1l	equ	0xFE1
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function ___lbmod *****************
  3612 ;; Defined at:
  3613 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  dividend        1    wreg     unsigned char 
  3616 ;;  divisor         1    0[BANK0 ] unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  dividend        1    1[BANK0 ] unsigned char 
  3619 ;;  rem             1    3[BANK0 ] unsigned char 
  3620 ;;  counter         1    2[BANK0 ] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      unsigned char 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       1       0       0
  3631 ;;      Locals:         0       3       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         0       4       0       0
  3634 ;;Total ram usage:        4 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    6
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_ES_DeQueue
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text20
  3645  0012D4                     __ptext20:
  3646                           	opt stack 0
  3647  0012D4                     ___lbmod:
  3648                           	opt stack 22
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;incstack = 0
  3652                           ;___lbmod@dividend stored from wreg
  3653  0012D4  0100               	movlb	0	; () banked
  3654  0012D6  6FBD               	movwf	___lbmod@dividend& (0+255),b
  3655  0012D8  0E08               	movlw	8
  3656  0012DA  0100               	movlb	0	; () banked
  3657  0012DC  6FBE               	movwf	___lbmod@counter& (0+255),b
  3658  0012DE  0E00               	movlw	0
  3659  0012E0  0100               	movlb	0	; () banked
  3660  0012E2  6FBF               	movwf	___lbmod@rem& (0+255),b
  3661  0012E4                     l2498:
  3662                           
  3663                           ; BSR set to: 0
  3664  0012E4  90D8               	bcf	status,0,c
  3665  0012E6  0100               	movlb	0	; () banked
  3666  0012E8  35BD               	rlcf	___lbmod@dividend& (0+255),w,b
  3667  0012EA  0100               	movlb	0	; () banked
  3668  0012EC  35BF               	rlcf	___lbmod@rem& (0+255),w,b
  3669  0012EE  0100               	movlb	0	; () banked
  3670  0012F0  6FBF               	movwf	___lbmod@rem& (0+255),b
  3671                           
  3672                           ; BSR set to: 0
  3673  0012F2  0100               	movlb	0	; () banked
  3674  0012F4  90D8               	bcf	status,0,c
  3675  0012F6  37BD               	rlcf	___lbmod@dividend& (0+255),f,b
  3676                           
  3677                           ; BSR set to: 0
  3678  0012F8  0100               	movlb	0	; () banked
  3679  0012FA  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3680  0012FC  0100               	movlb	0	; () banked
  3681  0012FE  5DBF               	subwf	___lbmod@rem& (0+255),w,b
  3682  001300  A0D8               	btfss	status,0,c
  3683  001302  D004               	goto	l2506
  3684                           
  3685                           ; BSR set to: 0
  3686  001304  0100               	movlb	0	; () banked
  3687  001306  51BC               	movf	___lbmod@divisor& (0+255),w,b
  3688  001308  0100               	movlb	0	; () banked
  3689  00130A  5FBF               	subwf	___lbmod@rem& (0+255),f,b
  3690  00130C                     l2506:
  3691                           
  3692                           ; BSR set to: 0
  3693  00130C  0100               	movlb	0	; () banked
  3694  00130E  2FBE               	decfsz	___lbmod@counter& (0+255),f,b
  3695  001310  D7E9               	goto	l2498
  3696                           
  3697                           ; BSR set to: 0
  3698                           
  3699                           ; BSR set to: 0
  3700  001312  0100               	movlb	0	; () banked
  3701  001314  51BF               	movf	___lbmod@rem& (0+255),w,b
  3702  001316  0012               	return	
  3703  001318                     __end_of___lbmod:
  3704                           	opt stack 0
  3705                           tosu	equ	0xFFF
  3706                           tosh	equ	0xFFE
  3707                           tosl	equ	0xFFD
  3708                           pclath	equ	0xFFA
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           indf1	equ	0xFE7
  3719                           postinc1	equ	0xFE6
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _ES_CheckUserEvents *****************
  3730 ;; Defined at:
  3731 ;;		line 46 in file "ES_CheckEvents.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  i               1   37[BANK0 ] unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      unsigned char 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3745 ;;      Params:         0       0       0       0
  3746 ;;      Locals:         0       1       0       0
  3747 ;;      Temps:          0       0       0       0
  3748 ;;      Totals:         0       1       0       0
  3749 ;;Total ram usage:        1 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:   11
  3752 ;; This function calls:
  3753 ;;		_Check4Keystroke
  3754 ;;		_CheckButtonEvents
  3755 ;; This function is called by:
  3756 ;;		_ES_Run
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text21
  3761  00128A                     __ptext21:
  3762                           	opt stack 0
  3763  00128A                     _ES_CheckUserEvents:
  3764                           	opt stack 18
  3765                           
  3766                           ;ES_CheckEvents.c: 48: uint8_t i;
  3767                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;incstack = 0
  3771  00128A  0E00               	movlw	0
  3772  00128C  0100               	movlb	0	; () banked
  3773  00128E  6FE1               	movwf	ES_CheckUserEvents@i& (0+255),b
  3774  001290                     l2578:
  3775                           
  3776                           ; BSR set to: 0
  3777  001290  0E01               	movlw	1
  3778  001292  0100               	movlb	0	; () banked
  3779  001294  65E1               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  3780  001296  D001               	goto	l2582
  3781  001298  0012               	return	
  3782  00129A                     l2582:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  3786  00129A  0100               	movlb	0	; () banked
  3787  00129C  51E1               	movf	ES_CheckUserEvents@i& (0+255),w,b
  3788  00129E  0D02               	mullw	2
  3789  0012A0  0E65               	movlw	low _ES_EventList
  3790  0012A2  24F3               	addwf	prodl,w,c
  3791  0012A4  6EF6               	movwf	tblptrl,c
  3792  0012A6  0E03               	movlw	high _ES_EventList
  3793  0012A8  20F4               	addwfc	prodh,w,c
  3794  0012AA  6EF7               	movwf	tblptrh,c
  3795  0012AC                     	if	0	;There are less than 3 active tblptr bytes
  3796  0012AC                     	endif
  3797  0012AC  D801               	call	u1418
  3798  0012AE  D00C               	goto	u1419
  3799  0012B0                     u1418:
  3800  0012B0  0005               	push	
  3801  0012B2  6EFA               	movwf	pclath,c
  3802  0012B4  0009               	tblrd		*+
  3803  0012B6  50F5               	movf	tablat,w,c
  3804  0012B8  6EFD               	movwf	tosl,c
  3805  0012BA  0009               	tblrd		*+
  3806  0012BC  50F5               	movf	tablat,w,c
  3807  0012BE  6EFE               	movwf	tosh,c
  3808  0012C0  50F8               	movf	tblptru,w,c
  3809  0012C2  6EFF               	movwf	tosu,c
  3810  0012C4  50FA               	movf	pclath,w,c
  3811  0012C6  0012               	return		;indir
  3812  0012C8                     u1419:
  3813  0012C8  06E8               	decf	wreg,f,c
  3814  0012CA  B4D8               	btfsc	status,2,c
  3815  0012CC  0012               	return	
  3816                           
  3817                           ;ES_CheckEvents.c: 52: break;
  3818  0012CE  0100               	movlb	0	; () banked
  3819  0012D0  2BE1               	incf	ES_CheckUserEvents@i& (0+255),f,b
  3820  0012D2  D7DE               	goto	l2578
  3821  0012D4                     __end_of_ES_CheckUserEvents:
  3822                           	opt stack 0
  3823                           tosu	equ	0xFFF
  3824                           tosh	equ	0xFFE
  3825                           tosl	equ	0xFFD
  3826                           pclath	equ	0xFFA
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           prodh	equ	0xFF4
  3832                           prodl	equ	0xFF3
  3833                           intcon	equ	0xFF2
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           indf1	equ	0xFE7
  3837                           postinc1	equ	0xFE6
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _Check4Keystroke *****************
  3848 ;; Defined at:
  3849 ;;		line 62 in file "EventCheckers.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3863 ;;      Params:         0       0       0       0
  3864 ;;      Locals:         0       0       0       0
  3865 ;;      Temps:          0       0       0       0
  3866 ;;      Totals:         0       0       0       0
  3867 ;;Total ram usage:        0 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    6
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_ES_CheckUserEvents
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text22
  3878  001594                     __ptext22:
  3879                           	opt stack 0
  3880  001594                     _Check4Keystroke:
  3881                           	opt stack 22
  3882                           
  3883                           ;EventCheckers.c: 78: return 0;
  3884                           
  3885                           ;incstack = 0
  3886  001594  0E00               	movlw	0
  3887  001596  0012               	return	
  3888  001598                     __end_of_Check4Keystroke:
  3889                           	opt stack 0
  3890                           tosu	equ	0xFFF
  3891                           tosh	equ	0xFFE
  3892                           tosl	equ	0xFFD
  3893                           pclath	equ	0xFFA
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           intcon	equ	0xFF2
  3901                           postinc0	equ	0xFEE
  3902                           wreg	equ	0xFE8
  3903                           indf1	equ	0xFE7
  3904                           postinc1	equ	0xFE6
  3905                           fsr1h	equ	0xFE2
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           fsr2h	equ	0xFDA
  3911                           fsr2l	equ	0xFD9
  3912                           status	equ	0xFD8
  3913                           
  3914 ;; *************** function _CheckButtonEvents *****************
  3915 ;; Defined at:
  3916 ;;		line 44 in file "Button.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3921 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3922 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      unsigned char 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3932 ;;      Params:         0       0       0       0
  3933 ;;      Locals:         0       5       0       0
  3934 ;;      Temps:          0       0       0       0
  3935 ;;      Totals:         0       5       0       0
  3936 ;;Total ram usage:        5 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:   10
  3939 ;; This function calls:
  3940 ;;		_GetInputLine
  3941 ;;		_PostButtonDebounceSM
  3942 ;; This function is called by:
  3943 ;;		_ES_CheckUserEvents
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text23
  3948  001166                     __ptext23:
  3949                           	opt stack 0
  3950  001166                     _CheckButtonEvents:
  3951                           	opt stack 18
  3952                           
  3953                           ;Button.c: 46: uint8_t CurrentButtonState;
  3954                           ;Button.c: 47: bool ReturnVal = 0;
  3955                           
  3956                           ;incstack = 0
  3957  001166  0E00               	movlw	0
  3958  001168  0100               	movlb	0	; () banked
  3959  00116A  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;Button.c: 49: CurrentButtonState = GetInputLine();
  3963  00116C  ECC4  F00A         	call	_GetInputLine	;wreg free
  3964  001170  0100               	movlb	0	; () banked
  3965  001172  6FE0               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;Button.c: 51: if (CurrentButtonState != LastButtonState) {
  3969  001174  0100               	movlb	0	; () banked
  3970  001176  5191               	movf	_LastButtonState& (0+255),w,b
  3971  001178  0100               	movlb	0	; () banked
  3972  00117A  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3973  00117C  B4D8               	btfsc	status,2,c
  3974  00117E  D023               	goto	l2348
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;Button.c: 53: ReturnVal = 1;
  3978  001180  0E01               	movlw	1
  3979  001182  0100               	movlb	0	; () banked
  3980  001184  6FDC               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;Button.c: 54: ES_Event ThisEvent;
  3984                           ;Button.c: 55: ThisEvent.EventParam = CurrentButtonState;
  3985  001186  C0E0  F0DE         	movff	CheckButtonEvents@CurrentButtonState,CheckButtonEvents@ThisEvent+1
  3986  00118A  0100               	movlb	0	; () banked
  3987  00118C  6BDF               	clrf	(CheckButtonEvents@ThisEvent+2)& (0+255),b
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;Button.c: 57: if (CurrentButtonState != 0x7F) {
  3991  00118E  0E7F               	movlw	127
  3992  001190  0100               	movlb	0	; () banked
  3993  001192  19E0               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3994  001194  B4D8               	btfsc	status,2,c
  3995  001196  D00C               	goto	l2344
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;Button.c: 59: ThisEvent.EventType = DBButtonDown;
  3999  001198  0E05               	movlw	5
  4000  00119A  0100               	movlb	0	; () banked
  4001  00119C  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;Button.c: 60: PostButtonDebounceSM(ThisEvent);
  4005  00119E  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4006  0011A2  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4007  0011A6  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4008  0011AA  EC88  F00A         	call	_PostButtonDebounceSM	;wreg free
  4009                           
  4010                           ;Button.c: 62: } else {
  4011  0011AE  D00B               	goto	l2348
  4012  0011B0                     l2344:
  4013                           
  4014                           ;Button.c: 64: ThisEvent.EventType = DBButtonUp;
  4015  0011B0  0E06               	movlw	6
  4016  0011B2  0100               	movlb	0	; () banked
  4017  0011B4  6FDD               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;Button.c: 65: PostButtonDebounceSM(ThisEvent);
  4021  0011B6  C0DD  F0D9         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  4022  0011BA  C0DE  F0DA         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  4023  0011BE  C0DF  F0DB         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  4024  0011C2  EC88  F00A         	call	_PostButtonDebounceSM	;wreg free
  4025  0011C6                     l2348:
  4026                           
  4027                           ;Button.c: 66: }
  4028                           ;Button.c: 67: }
  4029                           ;Button.c: 69: LastButtonState = CurrentButtonState;
  4030  0011C6  C0E0  F091         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  4031                           
  4032                           ;Button.c: 71: return ReturnVal;
  4033  0011CA  0100               	movlb	0	; () banked
  4034  0011CC  51DC               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  4035  0011CE  0012               	return	
  4036  0011D0                     __end_of_CheckButtonEvents:
  4037                           	opt stack 0
  4038                           tosu	equ	0xFFF
  4039                           tosh	equ	0xFFE
  4040                           tosl	equ	0xFFD
  4041                           pclath	equ	0xFFA
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           indf1	equ	0xFE7
  4052                           postinc1	equ	0xFE6
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _ES_Initialize *****************
  4063 ;; Defined at:
  4064 ;;		line 242 in file "ES_Framework.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  NewRate         2   33[BANK0 ] enum E15422
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  i               1   35[BANK0 ] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      enum E15493
  4071 ;; Registers used:
  4072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4078 ;;      Params:         0       2       0       0
  4079 ;;      Locals:         0       1       0       0
  4080 ;;      Temps:          0       0       0       0
  4081 ;;      Totals:         0       3       0       0
  4082 ;;Total ram usage:        3 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:   10
  4085 ;; This function calls:
  4086 ;;		_ES_InitQueue
  4087 ;;		_ES_Timer_Init
  4088 ;;		_InitAnalogService
  4089 ;;		_InitCan_XmitService
  4090 ;;		_InitializeButtonDebounce
  4091 ;; This function is called by:
  4092 ;;		_main
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text24
  4097  0006F8                     __ptext24:
  4098                           	opt stack 0
  4099  0006F8                     _ES_Initialize:
  4100                           	opt stack 20
  4101                           
  4102                           ;ES_Framework.c: 243: uint8_t i;
  4103                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;incstack = 0
  4107  0006F8  C0DD  F0BE         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4108  0006FC  C0DE  F0BF         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4109  000700  ECA9  F00A         	call	_ES_Timer_Init	;wreg free
  4110                           
  4111                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4112  000704  0E00               	movlw	0
  4113  000706  0100               	movlb	0	; () banked
  4114  000708  6FDF               	movwf	ES_Initialize@i& (0+255),b
  4115  00070A                     l2768:
  4116                           
  4117                           ; BSR set to: 0
  4118  00070A  0E02               	movlw	2
  4119  00070C  0100               	movlb	0	; () banked
  4120  00070E  65DF               	cpfsgt	ES_Initialize@i& (0+255),b
  4121  000710  D001               	goto	l2772
  4122  000712  D066               	goto	l2792
  4123  000714                     l2772:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4127                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4128  000714  0100               	movlb	0	; () banked
  4129  000716  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4130  000718  0D04               	mullw	4
  4131  00071A  0E50               	movlw	low _ServDescList
  4132  00071C  24F3               	addwf	prodl,w,c
  4133  00071E  6EF6               	movwf	tblptrl,c
  4134  000720  0E03               	movlw	high _ServDescList
  4135  000722  20F4               	addwfc	prodh,w,c
  4136  000724  6EF7               	movwf	tblptrh,c
  4137  000726                     	if	0	;There are less than 3 active tblptr bytes
  4138  000726                     	endif
  4139  000726  0009               	tblrd		*+
  4140  000728  50F5               	movf	tablat,w,c
  4141  00072A  0009               	tblrd		*+
  4142  00072C  10F5               	iorwf	tablat,w,c
  4143  00072E  B4D8               	btfsc	status,2,c
  4144  000730  D013               	goto	l2776
  4145                           
  4146                           ; BSR set to: 0
  4147  000732  0100               	movlb	0	; () banked
  4148  000734  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4149  000736  0D04               	mullw	4
  4150  000738  0E02               	movlw	2
  4151  00073A  26F3               	addwf	prodl,f,c
  4152  00073C  0E00               	movlw	0
  4153  00073E  22F4               	addwfc	prodh,f,c
  4154  000740  0E50               	movlw	low _ServDescList
  4155  000742  24F3               	addwf	prodl,w,c
  4156  000744  6EF6               	movwf	tblptrl,c
  4157  000746  0E03               	movlw	high _ServDescList
  4158  000748  20F4               	addwfc	prodh,w,c
  4159  00074A  6EF7               	movwf	tblptrh,c
  4160  00074C                     	if	0	;There are less than 3 active tblptr bytes
  4161  00074C                     	endif
  4162  00074C  0009               	tblrd		*+
  4163  00074E  50F5               	movf	tablat,w,c
  4164  000750  0009               	tblrd		*+
  4165  000752  10F5               	iorwf	tablat,w,c
  4166  000754  A4D8               	btfss	status,2,c
  4167  000756  D002               	goto	l2780
  4168  000758                     l2776:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;ES_Framework.c: 249: return FailedPointer;
  4172  000758  0E03               	movlw	3
  4173                           
  4174                           ; BSR set to: 0
  4175  00075A  0012               	return	
  4176  00075C                     l2780:
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4180  00075C  0100               	movlb	0	; () banked
  4181  00075E  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4182  000760  0D03               	mullw	3
  4183  000762  0E5C               	movlw	low _EventQueues
  4184  000764  24F3               	addwf	prodl,w,c
  4185  000766  6EF6               	movwf	tblptrl,c
  4186  000768  0E03               	movlw	high _EventQueues
  4187  00076A  20F4               	addwfc	prodh,w,c
  4188  00076C  6EF7               	movwf	tblptrh,c
  4189  00076E                     	if	0	;There are less than 3 active tblptr bytes
  4190  00076E                     	endif
  4191  00076E  0009               	tblrd		*+
  4192  000770  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock
  4193  000774  000A               	tblrd		*-
  4194  000776  CFF5 F0BD          	movff	tablat,ES_InitQueue@pBlock+1
  4195  00077A  0100               	movlb	0	; () banked
  4196  00077C  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4197  00077E  0D03               	mullw	3
  4198  000780  0E02               	movlw	2
  4199  000782  26F3               	addwf	prodl,f,c
  4200  000784  0E00               	movlw	0
  4201  000786  22F4               	addwfc	prodh,f,c
  4202  000788  0E5C               	movlw	low _EventQueues
  4203  00078A  24F3               	addwf	prodl,w,c
  4204  00078C  6EF6               	movwf	tblptrl,c
  4205  00078E  0E03               	movlw	high _EventQueues
  4206  000790  20F4               	addwfc	prodh,w,c
  4207  000792  6EF7               	movwf	tblptrh,c
  4208  000794                     	if	0	;There are less than 3 active tblptr bytes
  4209  000794                     	endif
  4210  000794  0008               	tblrd		*
  4211  000796  CFF5 F0BE          	movff	tablat,ES_InitQueue@BlockSize
  4212  00079A  EC8C  F009         	call	_ES_InitQueue	;wreg free
  4213                           
  4214                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  4215  00079E  0100               	movlb	0	; () banked
  4216  0007A0  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4217  0007A2  0D04               	mullw	4
  4218  0007A4  0E50               	movlw	low _ServDescList
  4219  0007A6  24F3               	addwf	prodl,w,c
  4220  0007A8  6EF6               	movwf	tblptrl,c
  4221  0007AA  0E03               	movlw	high _ServDescList
  4222  0007AC  20F4               	addwfc	prodh,w,c
  4223  0007AE  6EF7               	movwf	tblptrh,c
  4224  0007B0                     	if	0	;There are less than 3 active tblptr bytes
  4225  0007B0                     	endif
  4226  0007B0  D801               	call	u1618
  4227  0007B2  D00E               	goto	u1619
  4228  0007B4                     u1618:
  4229  0007B4  0005               	push	
  4230  0007B6  6EFA               	movwf	pclath,c
  4231  0007B8  0009               	tblrd		*+
  4232  0007BA  50F5               	movf	tablat,w,c
  4233  0007BC  6EFD               	movwf	tosl,c
  4234  0007BE  0009               	tblrd		*+
  4235  0007C0  50F5               	movf	tablat,w,c
  4236  0007C2  6EFE               	movwf	tosh,c
  4237  0007C4  50F8               	movf	tblptru,w,c
  4238  0007C6  6EFF               	movwf	tosu,c
  4239  0007C8  50FA               	movf	pclath,w,c
  4240  0007CA  0100               	movlb	0	; () banked
  4241  0007CC  51DF               	movf	ES_Initialize@i& (0+255),w,b
  4242  0007CE  0012               	return		;indir
  4243  0007D0                     u1619:
  4244  0007D0  06E8               	decf	wreg,f,c
  4245  0007D2  B4D8               	btfsc	status,2,c
  4246  0007D4  D002               	goto	l2788
  4247                           
  4248                           ;ES_Framework.c: 254: return FailedInit;
  4249  0007D6  0E05               	movlw	5
  4250  0007D8  0012               	return	
  4251  0007DA                     l2788:
  4252  0007DA  0100               	movlb	0	; () banked
  4253  0007DC  2BDF               	incf	ES_Initialize@i& (0+255),f,b
  4254  0007DE  D795               	goto	l2768
  4255  0007E0                     l2792:
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;ES_Framework.c: 255: }
  4259                           ;ES_Framework.c: 256: return Success;
  4260  0007E0  0E00               	movlw	0
  4261  0007E2  0012               	return	
  4262  0007E4                     __end_of_ES_Initialize:
  4263                           	opt stack 0
  4264                           tosu	equ	0xFFF
  4265                           tosh	equ	0xFFE
  4266                           tosl	equ	0xFFD
  4267                           pclath	equ	0xFFA
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           intcon	equ	0xFF2
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           indf1	equ	0xFE7
  4278                           postinc1	equ	0xFE6
  4279                           fsr1h	equ	0xFE2
  4280                           fsr1l	equ	0xFE1
  4281                           indf2	equ	0xFDF
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _InitAnalogService *****************
  4289 ;; Defined at:
  4290 ;;		line 31 in file "Analog_Service.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  Priority        1    wreg     unsigned char 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  Priority        1   32[BANK0 ] unsigned char 
  4295 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      unsigned char 
  4298 ;; Registers used:
  4299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4305 ;;      Params:         0       0       0       0
  4306 ;;      Locals:         0       4       0       0
  4307 ;;      Temps:          0       0       0       0
  4308 ;;      Totals:         0       4       0       0
  4309 ;;Total ram usage:        4 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    9
  4312 ;; This function calls:
  4313 ;;		_ES_PostToService
  4314 ;; This function is called by:
  4315 ;;		_ES_Initialize
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text25
  4320  0013BE                     __ptext25:
  4321                           	opt stack 0
  4322  0013BE                     _InitAnalogService:
  4323                           	opt stack 20
  4324                           
  4325                           ;incstack = 0
  4326                           ;InitAnalogService@Priority stored from wreg
  4327  0013BE  0100               	movlb	0	; () banked
  4328  0013C0  6FDC               	movwf	InitAnalogService@Priority& (0+255),b
  4329                           
  4330                           ;Analog_Service.c: 33: ES_Event ThisEvent;
  4331                           ;Analog_Service.c: 34: MyPriority = Priority;
  4332  0013C2  C0DC  F08D         	movff	InitAnalogService@Priority,Analog_Service@MyPriority
  4333                           
  4334                           ;Analog_Service.c: 37: ThisEvent.EventType = ES_INIT;
  4335  0013C6  0E02               	movlw	2
  4336  0013C8  0100               	movlb	0	; () banked
  4337  0013CA  6FD9               	movwf	InitAnalogService@ThisEvent& (0+255),b
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;Analog_Service.c: 38: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4341  0013CC  C0D9  F0D3         	movff	InitAnalogService@ThisEvent,ES_PostToService@TheEvent
  4342  0013D0  C0DA  F0D4         	movff	InitAnalogService@ThisEvent+1,ES_PostToService@TheEvent+1
  4343  0013D4  C0DB  F0D5         	movff	InitAnalogService@ThisEvent+2,ES_PostToService@TheEvent+2
  4344  0013D8  0100               	movlb	0	; () banked
  4345  0013DA  518D               	movf	Analog_Service@MyPriority& (0+255),w,b
  4346  0013DC  EC09  F008         	call	_ES_PostToService
  4347  0013E0  06E8               	decf	wreg,f,c
  4348  0013E2  A4D8               	btfss	status,2,c
  4349  0013E4  D002               	goto	l2728
  4350                           
  4351                           ;Analog_Service.c: 39: {
  4352                           ;Analog_Service.c: 40: return 1;
  4353  0013E6  0E01               	movlw	1
  4354                           
  4355                           ;Analog_Service.c: 41: }else
  4356  0013E8  0012               	return	
  4357  0013EA                     l2728:
  4358                           
  4359                           ;Analog_Service.c: 42: {
  4360                           ;Analog_Service.c: 43: return 0;
  4361  0013EA  0E00               	movlw	0
  4362  0013EC  0012               	return	
  4363  0013EE                     __end_of_InitAnalogService:
  4364                           	opt stack 0
  4365                           tosu	equ	0xFFF
  4366                           tosh	equ	0xFFE
  4367                           tosl	equ	0xFFD
  4368                           pclath	equ	0xFFA
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           postinc0	equ	0xFEE
  4377                           wreg	equ	0xFE8
  4378                           indf1	equ	0xFE7
  4379                           postinc1	equ	0xFE6
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function _InitCan_XmitService *****************
  4390 ;; Defined at:
  4391 ;;		line 84 in file "Can_XmitService.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  Priority        1    wreg     unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  Priority        1   32[BANK0 ] unsigned char 
  4396 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      unsigned char 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4406 ;;      Params:         0       0       0       0
  4407 ;;      Locals:         0       4       0       0
  4408 ;;      Temps:          0       0       0       0
  4409 ;;      Totals:         0       4       0       0
  4410 ;;Total ram usage:        4 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    9
  4413 ;; This function calls:
  4414 ;;		_ES_PostToService
  4415 ;; This function is called by:
  4416 ;;		_ES_Initialize
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text26
  4421  0013EE                     __ptext26:
  4422                           	opt stack 0
  4423  0013EE                     _InitCan_XmitService:
  4424                           	opt stack 20
  4425                           
  4426                           ;incstack = 0
  4427                           ;InitCan_XmitService@Priority stored from wreg
  4428  0013EE  0100               	movlb	0	; () banked
  4429  0013F0  6FDC               	movwf	InitCan_XmitService@Priority& (0+255),b
  4430                           
  4431                           ;Can_XmitService.c: 86: ES_Event ThisEvent;
  4432                           ;Can_XmitService.c: 88: MyPriority = Priority;
  4433  0013F2  C0DC  F08E         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  4434                           
  4435                           ;Can_XmitService.c: 91: ThisEvent.EventType = ES_INIT;
  4436  0013F6  0E02               	movlw	2
  4437  0013F8  0100               	movlb	0	; () banked
  4438  0013FA  6FD9               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;Can_XmitService.c: 92: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  4442  0013FC  C0D9  F0D3         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  4443  001400  C0DA  F0D4         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  4444  001404  C0DB  F0D5         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  4445  001408  0100               	movlb	0	; () banked
  4446  00140A  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  4447  00140C  EC09  F008         	call	_ES_PostToService
  4448  001410  06E8               	decf	wreg,f,c
  4449  001412  A4D8               	btfss	status,2,c
  4450  001414  D002               	goto	l2658
  4451                           
  4452                           ;Can_XmitService.c: 93: {
  4453                           ;Can_XmitService.c: 94: return 1;
  4454  001416  0E01               	movlw	1
  4455                           
  4456                           ;Can_XmitService.c: 95: }else
  4457  001418  0012               	return	
  4458  00141A                     l2658:
  4459                           
  4460                           ;Can_XmitService.c: 96: {
  4461                           ;Can_XmitService.c: 97: return 0;
  4462  00141A  0E00               	movlw	0
  4463  00141C  0012               	return	
  4464  00141E                     __end_of_InitCan_XmitService:
  4465                           	opt stack 0
  4466                           tosu	equ	0xFFF
  4467                           tosh	equ	0xFFE
  4468                           tosl	equ	0xFFD
  4469                           pclath	equ	0xFFA
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           indf1	equ	0xFE7
  4480                           postinc1	equ	0xFE6
  4481                           fsr1h	equ	0xFE2
  4482                           fsr1l	equ	0xFE1
  4483                           indf2	equ	0xFDF
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function _InitializeButtonDebounce *****************
  4491 ;; Defined at:
  4492 ;;		line 27 in file "Button.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  Priority        1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  Priority        1    5[BANK0 ] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      unsigned char 
  4499 ;; Registers used:
  4500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4506 ;;      Params:         0       0       0       0
  4507 ;;      Locals:         0       1       0       0
  4508 ;;      Temps:          0       0       0       0
  4509 ;;      Totals:         0       1       0       0
  4510 ;;Total ram usage:        1 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    7
  4513 ;; This function calls:
  4514 ;;		_ES_Timer_InitTimer
  4515 ;;		_GetInputLine
  4516 ;;		_InitButtonHW
  4517 ;; This function is called by:
  4518 ;;		_ES_Initialize
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text27
  4523  00141E                     __ptext27:
  4524                           	opt stack 0
  4525  00141E                     _InitializeButtonDebounce:
  4526                           	opt stack 22
  4527                           
  4528                           ;incstack = 0
  4529                           ;InitializeButtonDebounce@Priority stored from wreg
  4530  00141E  0100               	movlb	0	; () banked
  4531  001420  6FC1               	movwf	InitializeButtonDebounce@Priority& (0+255),b
  4532                           
  4533                           ;Button.c: 29: MyPriority = Priority;
  4534  001422  C0C1  F093         	movff	InitializeButtonDebounce@Priority,_MyPriority
  4535                           
  4536                           ;Button.c: 30: InitButtonHW();
  4537  001426  ECB0  F00A         	call	_InitButtonHW	;wreg free
  4538                           
  4539                           ;Button.c: 33: LastButtonState = GetInputLine();
  4540  00142A  ECC4  F00A         	call	_GetInputLine	;wreg free
  4541  00142E  0100               	movlb	0	; () banked
  4542  001430  6F91               	movwf	_LastButtonState& (0+255),b
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;Button.c: 35: CurrentState = Debouncing;
  4546  001432  0E00               	movlw	0
  4547  001434  0100               	movlb	0	; () banked
  4548  001436  6F90               	movwf	_CurrentState& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;Button.c: 37: ES_Timer_InitTimer(1,3);
  4552  001438  0E00               	movlw	0
  4553  00143A  0100               	movlb	0	; () banked
  4554  00143C  6FBD               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  4555  00143E  0E03               	movlw	3
  4556  001440  6FBC               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  4557  001442  0E01               	movlw	1
  4558  001444  EC11  F007         	call	_ES_Timer_InitTimer
  4559                           
  4560                           ;Button.c: 39: return 1;
  4561  001448  0E01               	movlw	1
  4562  00144A  0012               	return	
  4563  00144C                     __end_of_InitializeButtonDebounce:
  4564                           	opt stack 0
  4565                           tosu	equ	0xFFF
  4566                           tosh	equ	0xFFE
  4567                           tosl	equ	0xFFD
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           indf1	equ	0xFE7
  4579                           postinc1	equ	0xFE6
  4580                           fsr1h	equ	0xFE2
  4581                           fsr1l	equ	0xFE1
  4582                           indf2	equ	0xFDF
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function _InitButtonHW *****************
  4590 ;; Defined at:
  4591 ;;		line 134 in file "Button.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4605 ;;      Params:         0       0       0       0
  4606 ;;      Locals:         0       0       0       0
  4607 ;;      Temps:          0       0       0       0
  4608 ;;      Totals:         0       0       0       0
  4609 ;;Total ram usage:        0 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    6
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_InitializeButtonDebounce
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text28
  4620  001560                     __ptext28:
  4621                           	opt stack 0
  4622  001560                     _InitButtonHW:
  4623                           	opt stack 22
  4624                           
  4625                           ;Button.c: 135: PORTC = 0x00;
  4626                           
  4627                           ;incstack = 0
  4628  001560  0E00               	movlw	0
  4629  001562  6E82               	movwf	3970,c	;volatile
  4630                           
  4631                           ;Button.c: 136: LATC = 0x00;
  4632  001564  0E00               	movlw	0
  4633  001566  6E8B               	movwf	3979,c	;volatile
  4634                           
  4635                           ;Button.c: 137: PORTC = 0xFF;
  4636  001568  6882               	setf	3970,c	;volatile
  4637  00156A  0012               	return		;funcret
  4638  00156C                     __end_of_InitButtonHW:
  4639                           	opt stack 0
  4640                           tosu	equ	0xFFF
  4641                           tosh	equ	0xFFE
  4642                           tosl	equ	0xFFD
  4643                           pclath	equ	0xFFA
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           indf1	equ	0xFE7
  4654                           postinc1	equ	0xFE6
  4655                           fsr1h	equ	0xFE2
  4656                           fsr1l	equ	0xFE1
  4657                           indf2	equ	0xFDF
  4658                           postinc2	equ	0xFDE
  4659                           postdec2	equ	0xFDD
  4660                           fsr2h	equ	0xFDA
  4661                           fsr2l	equ	0xFD9
  4662                           status	equ	0xFD8
  4663                           
  4664 ;; *************** function _GetInputLine *****************
  4665 ;; Defined at:
  4666 ;;		line 129 in file "Button.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      unsigned char 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4680 ;;      Params:         0       0       0       0
  4681 ;;      Locals:         0       0       0       0
  4682 ;;      Temps:          0       0       0       0
  4683 ;;      Totals:         0       0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    6
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_InitializeButtonDebounce
  4691 ;;		_CheckButtonEvents
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text29
  4696  001588                     __ptext29:
  4697                           	opt stack 0
  4698  001588                     _GetInputLine:
  4699                           	opt stack 21
  4700                           
  4701                           ;Button.c: 131: return PORTC & 0x0F;
  4702                           
  4703                           ;incstack = 0
  4704  001588  5082               	movf	3970,w,c	;volatile
  4705  00158A  0B0F               	andlw	15
  4706  00158C  0012               	return	
  4707  00158E                     __end_of_GetInputLine:
  4708                           	opt stack 0
  4709                           tosu	equ	0xFFF
  4710                           tosh	equ	0xFFE
  4711                           tosl	equ	0xFFD
  4712                           pclath	equ	0xFFA
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           indf1	equ	0xFE7
  4723                           postinc1	equ	0xFE6
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _ES_Timer_InitTimer *****************
  4734 ;; Defined at:
  4735 ;;		line 229 in file "ES_Timers.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  Num             1    wreg     unsigned char 
  4738 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  Num             1    4[BANK0 ] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      enum E15445
  4743 ;; Registers used:
  4744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4750 ;;      Params:         0       2       0       0
  4751 ;;      Locals:         0       1       0       0
  4752 ;;      Temps:          0       2       0       0
  4753 ;;      Totals:         0       5       0       0
  4754 ;;Total ram usage:        5 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    6
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_InitializeButtonDebounce
  4761 ;;		_RunButtonDebounceSM
  4762 ;;		_RunAnalogService
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text30
  4767  000E22                     __ptext30:
  4768                           	opt stack 0
  4769  000E22                     _ES_Timer_InitTimer:
  4770                           	opt stack 22
  4771                           
  4772                           ;incstack = 0
  4773                           ;ES_Timer_InitTimer@Num stored from wreg
  4774  000E22  0100               	movlb	0	; () banked
  4775  000E24  6FC0               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4776                           
  4777                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4778                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4779                           ;ES_Timers.c: 236: (NewTime == 0) )
  4780  000E26  0E10               	movlw	16
  4781  000E28  0100               	movlb	0	; () banked
  4782  000E2A  61C0               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4783  000E2C  0012               	return	
  4784                           
  4785                           ; BSR set to: 0
  4786  000E2E  0100               	movlb	0	; () banked
  4787  000E30  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4788  000E32  0D02               	mullw	2
  4789  000E34  0E21               	movlw	low _Timer2PostFunc
  4790  000E36  24F3               	addwf	prodl,w,c
  4791  000E38  6EF6               	movwf	tblptrl,c
  4792  000E3A  0E03               	movlw	high _Timer2PostFunc
  4793  000E3C  20F4               	addwfc	prodh,w,c
  4794  000E3E  6EF7               	movwf	tblptrh,c
  4795  000E40                     	if	0	;There are less than 3 active tblptr bytes
  4796  000E40                     	endif
  4797  000E40  0009               	tblrd		*+
  4798  000E42  50F5               	movf	tablat,w,c
  4799  000E44  0009               	tblrd		*+
  4800  000E46  10F5               	iorwf	tablat,w,c
  4801  000E48  B4D8               	btfsc	status,2,c
  4802  000E4A  0012               	return	
  4803                           
  4804                           ; BSR set to: 0
  4805  000E4C  0100               	movlb	0	; () banked
  4806  000E4E  51BC               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4807  000E50  0100               	movlb	0	; () banked
  4808  000E52  11BD               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4809  000E54  B4D8               	btfsc	status,2,c
  4810  000E56  0012               	return	
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4814                           
  4815                           ; BSR set to: 0
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4819                           ;	Return value of _ES_Timer_InitTimer is never used
  4820  000E58  0100               	movlb	0	; () banked
  4821  000E5A  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4822  000E5C  0D02               	mullw	2
  4823  000E5E  0E60               	movlw	low _TMR_TimerArray
  4824  000E60  24F3               	addwf	prodl,w,c
  4825  000E62  6ED9               	movwf	fsr2l,c
  4826  000E64  0E00               	movlw	high _TMR_TimerArray
  4827  000E66  20F4               	addwfc	prodh,w,c
  4828  000E68  6EDA               	movwf	fsr2h,c
  4829  000E6A  C0BC  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4830  000E6E  C0BD  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4834  000E72  0100               	movlb	0	; () banked
  4835  000E74  51C0               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4836  000E76  0D02               	mullw	2
  4837  000E78  0E01               	movlw	low _BitNum2SetMask
  4838  000E7A  24F3               	addwf	prodl,w,c
  4839  000E7C  6EF6               	movwf	tblptrl,c
  4840  000E7E  0E03               	movlw	high _BitNum2SetMask
  4841  000E80  20F4               	addwfc	prodh,w,c
  4842  000E82  6EF7               	movwf	tblptrh,c
  4843  000E84                     	if	0	;There are less than 3 active tblptr bytes
  4844  000E84                     	endif
  4845  000E84  0009               	tblrd		*+
  4846  000E86  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer
  4847  000E8A  0009               	tblrd		*+
  4848  000E8C  CFF5 F0BF          	movff	tablat,??_ES_Timer_InitTimer+1
  4849  000E90  0100               	movlb	0	; () banked
  4850  000E92  51BE               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4851  000E94  0100               	movlb	0	; () banked
  4852  000E96  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4853  000E98  0100               	movlb	0	; () banked
  4854  000E9A  51BF               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4855  000E9C  0100               	movlb	0	; () banked
  4856  000E9E  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4857  000EA0  0012               	return	
  4858  000EA2                     __end_of_ES_Timer_InitTimer:
  4859                           	opt stack 0
  4860                           tosu	equ	0xFFF
  4861                           tosh	equ	0xFFE
  4862                           tosl	equ	0xFFD
  4863                           pclath	equ	0xFFA
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           indf1	equ	0xFE7
  4874                           postinc1	equ	0xFE6
  4875                           fsr1h	equ	0xFE2
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           postdec2	equ	0xFDD
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function _ES_PostToService *****************
  4885 ;; Defined at:
  4886 ;;		line 351 in file "ES_Framework.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  WhichService    1    wreg     unsigned char 
  4889 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  WhichService    1   28[BANK0 ] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      unsigned char 
  4894 ;; Registers used:
  4895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4901 ;;      Params:         0       3       0       0
  4902 ;;      Locals:         0       1       0       0
  4903 ;;      Temps:          0       2       0       0
  4904 ;;      Totals:         0       6       0       0
  4905 ;;Total ram usage:        6 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    8
  4908 ;; This function calls:
  4909 ;;		_ES_EnQueueFIFO
  4910 ;; This function is called by:
  4911 ;;		_PostButtonDebounceSM
  4912 ;;		_InitCan_XmitService
  4913 ;;		_InitAnalogService
  4914 ;;		_PostAnalogService
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text31
  4919  001012                     __ptext31:
  4920                           	opt stack 0
  4921  001012                     _ES_PostToService:
  4922                           	opt stack 18
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;incstack = 0
  4926                           ;ES_PostToService@WhichService stored from wreg
  4927  001012  0100               	movlb	0	; () banked
  4928  001014  6FD8               	movwf	ES_PostToService@WhichService& (0+255),b
  4929                           
  4930                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4931                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4932                           ;ES_Framework.c: 354: 1 )){
  4933  001016  0E03               	movlw	3
  4934  001018  0100               	movlb	0	; () banked
  4935  00101A  61D8               	cpfslt	ES_PostToService@WhichService& (0+255),b
  4936  00101C  D033               	goto	l2210
  4937                           
  4938                           ; BSR set to: 0
  4939  00101E  0100               	movlb	0	; () banked
  4940  001020  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4941  001022  0D03               	mullw	3
  4942  001024  0E5C               	movlw	low _EventQueues
  4943  001026  24F3               	addwf	prodl,w,c
  4944  001028  6EF6               	movwf	tblptrl,c
  4945  00102A  0E03               	movlw	high _EventQueues
  4946  00102C  20F4               	addwfc	prodh,w,c
  4947  00102E  6EF7               	movwf	tblptrh,c
  4948  001030                     	if	0	;There are less than 3 active tblptr bytes
  4949  001030                     	endif
  4950  001030  0009               	tblrd		*+
  4951  001032  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock
  4952  001036  000A               	tblrd		*-
  4953  001038  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  4954  00103C  C0D3  F0CA         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  4955  001040  C0D4  F0CB         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  4956  001044  C0D5  F0CC         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  4957  001048  ECF2  F003         	call	_ES_EnQueueFIFO	;wreg free
  4958  00104C  06E8               	decf	wreg,f,c
  4959  00104E  A4D8               	btfss	status,2,c
  4960  001050  D019               	goto	l2210
  4961                           
  4962                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4963  001052  0100               	movlb	0	; () banked
  4964  001054  51D8               	movf	ES_PostToService@WhichService& (0+255),w,b
  4965  001056  0D02               	mullw	2
  4966  001058  0E01               	movlw	low _BitNum2SetMask
  4967  00105A  24F3               	addwf	prodl,w,c
  4968  00105C  6EF6               	movwf	tblptrl,c
  4969  00105E  0E03               	movlw	high _BitNum2SetMask
  4970  001060  20F4               	addwfc	prodh,w,c
  4971  001062  6EF7               	movwf	tblptrh,c
  4972  001064                     	if	0	;There are less than 3 active tblptr bytes
  4973  001064                     	endif
  4974  001064  0009               	tblrd		*+
  4975  001066  CFF5 F0D6          	movff	tablat,??_ES_PostToService
  4976  00106A  0009               	tblrd		*+
  4977  00106C  CFF5 F0D7          	movff	tablat,??_ES_PostToService+1
  4978  001070  0100               	movlb	0	; () banked
  4979  001072  51D6               	movf	??_ES_PostToService& (0+255),w,b
  4980  001074  0100               	movlb	0	; () banked
  4981  001076  1389               	iorwf	_Ready& (0+255),f,b
  4982  001078  0100               	movlb	0	; () banked
  4983  00107A  51D7               	movf	(??_ES_PostToService+1)& (0+255),w,b
  4984  00107C  0100               	movlb	0	; () banked
  4985  00107E  138A               	iorwf	(_Ready+1)& (0+255),f,b
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;ES_Framework.c: 356: return 1;
  4989  001080  0E01               	movlw	1
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;ES_Framework.c: 357: } else
  4993                           
  4994                           ; BSR set to: 0
  4995  001082  0012               	return	
  4996  001084                     l2210:
  4997                           
  4998                           ;ES_Framework.c: 358: return 0;
  4999  001084  0E00               	movlw	0
  5000  001086  0012               	return	
  5001  001088                     __end_of_ES_PostToService:
  5002                           	opt stack 0
  5003                           tosu	equ	0xFFF
  5004                           tosh	equ	0xFFE
  5005                           tosl	equ	0xFFD
  5006                           pclath	equ	0xFFA
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           prodh	equ	0xFF4
  5012                           prodl	equ	0xFF3
  5013                           intcon	equ	0xFF2
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           indf1	equ	0xFE7
  5017                           postinc1	equ	0xFE6
  5018                           fsr1h	equ	0xFE2
  5019                           fsr1l	equ	0xFE1
  5020                           indf2	equ	0xFDF
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _ES_EnQueueFIFO *****************
  5028 ;; Defined at:
  5029 ;;		line 85 in file "ES_Queue.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5032 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5033 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5036 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5037 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      unsigned char 
  5040 ;; Registers used:
  5041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5047 ;;      Params:         0       5       0       0
  5048 ;;      Locals:         0       3       0       0
  5049 ;;      Temps:          0       3       0       0
  5050 ;;      Totals:         0      11       0       0
  5051 ;;Total ram usage:       11 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    7
  5054 ;; This function calls:
  5055 ;;		___awmod
  5056 ;;		___wmul
  5057 ;; This function is called by:
  5058 ;;		_ES_PostAll
  5059 ;;		_ES_PostToService
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text32
  5064  0007E4                     __ptext32:
  5065                           	opt stack 0
  5066  0007E4                     _ES_EnQueueFIFO:
  5067                           	opt stack 18
  5068                           
  5069                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5070                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5071                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5072                           
  5073                           ;incstack = 0
  5074  0007E4  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5075  0007E8  C0C9  F0D2         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5076                           
  5077                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5078  0007EC  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5079  0007F0  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5080  0007F4  0100               	movlb	0	; () banked
  5081  0007F6  EE10 F002          	lfsr	1,2
  5082  0007FA  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5083  0007FC  26E1               	addwf	fsr1l,f,c
  5084  0007FE  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5085  000800  22E2               	addwfc	fsr1h,f,c
  5086  000802  50DE               	movf	postinc2,w,c
  5087  000804  5CE6               	subwf	postinc1,w,c
  5088  000806  B0D8               	btfsc	status,0,c
  5089  000808  D05C               	goto	l2194
  5090                           
  5091                           ; BSR set to: 0
  5092                           
  5093                           ;ES_Queue.c: 92: {
  5094                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5095  00080A  CFF2 F0D0          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5096  00080E  9EF2               	bcf	intcon,7,c	;volatile
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5100                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5101                           
  5102                           ; BSR set to: 0
  5103  000810  C0D1  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5104  000814  C0D2  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5105  000818  50DF               	movf	indf2,w,c
  5106  00081A  0100               	movlb	0	; () banked
  5107  00081C  6FCD               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5108  00081E  0100               	movlb	0	; () banked
  5109  000820  51CD               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5110  000822  0100               	movlb	0	; () banked
  5111  000824  6FBE               	movwf	___awmod@divisor& (0+255),b
  5112  000826  6BBF               	clrf	(___awmod@divisor+1)& (0+255),b
  5113  000828  0100               	movlb	0	; () banked
  5114  00082A  EE20 F002          	lfsr	2,2
  5115  00082E  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5116  000830  26D9               	addwf	fsr2l,f,c
  5117  000832  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5118  000834  22DA               	addwfc	fsr2h,f,c
  5119  000836  50DF               	movf	indf2,w,c
  5120  000838  0100               	movlb	0	; () banked
  5121  00083A  6FCE               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5122  00083C  0100               	movlb	0	; () banked
  5123  00083E  EE20 F001          	lfsr	2,1
  5124  000842  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5125  000844  26D9               	addwf	fsr2l,f,c
  5126  000846  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5127  000848  22DA               	addwfc	fsr2h,f,c
  5128  00084A  50DF               	movf	indf2,w,c
  5129  00084C  0100               	movlb	0	; () banked
  5130  00084E  6FCF               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5131  000850  0100               	movlb	0	; () banked
  5132  000852  51CF               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5133  000854  0100               	movlb	0	; () banked
  5134  000856  25CE               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5135  000858  0100               	movlb	0	; () banked
  5136  00085A  6FBC               	movwf	___awmod@dividend& (0+255),b
  5137  00085C  0100               	movlb	0	; () banked
  5138  00085E  6BBD               	clrf	(___awmod@dividend+1)& (0+255),b
  5139  000860  0100               	movlb	0	; () banked
  5140  000862  37BD               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5141  000864  EC36  F006         	call	___awmod	;wreg free
  5142  000868  0E01               	movlw	1
  5143  00086A  0100               	movlb	0	; () banked
  5144  00086C  25BC               	addwf	?___awmod& (0+255),w,b
  5145  00086E  0100               	movlb	0	; () banked
  5146  000870  6FC2               	movwf	___wmul@multiplier& (0+255),b
  5147  000872  0E00               	movlw	0
  5148  000874  0100               	movlb	0	; () banked
  5149  000876  21BD               	addwfc	(?___awmod+1)& (0+255),w,b
  5150  000878  0100               	movlb	0	; () banked
  5151  00087A  6FC3               	movwf	(___wmul@multiplier+1)& (0+255),b
  5152  00087C  0E00               	movlw	0
  5153  00087E  0100               	movlb	0	; () banked
  5154  000880  6FC5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5155  000882  0E03               	movlw	3
  5156  000884  6FC4               	movwf	___wmul@multiplicand& (0+255),b
  5157  000886  ECAA  F009         	call	___wmul	;wreg free
  5158  00088A  0100               	movlb	0	; () banked
  5159  00088C  51C2               	movf	?___wmul& (0+255),w,b
  5160  00088E  0100               	movlb	0	; () banked
  5161  000890  25C8               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5162  000892  6ED9               	movwf	fsr2l,c
  5163  000894  0100               	movlb	0	; () banked
  5164  000896  51C3               	movf	(?___wmul+1)& (0+255),w,b
  5165  000898  0100               	movlb	0	; () banked
  5166  00089A  21C9               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5167  00089C  6EDA               	movwf	fsr2h,c
  5168  00089E  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5169  0008A2  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5170  0008A6  C0CC  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5174  0008AA  0100               	movlb	0	; () banked
  5175  0008AC  EE20 F002          	lfsr	2,2
  5176  0008B0  51D1               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5177  0008B2  26D9               	addwf	fsr2l,f,c
  5178  0008B4  51D2               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5179  0008B6  22DA               	addwfc	fsr2h,f,c
  5180  0008B8  2ADF               	incf	indf2,f,c
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5184  0008BA  C0D0  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;ES_Queue.c: 101: return(1);
  5188  0008BE  0E01               	movlw	1
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;ES_Queue.c: 102: }else
  5192                           
  5193                           ; BSR set to: 0
  5194  0008C0  0012               	return	
  5195  0008C2                     l2194:
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;ES_Queue.c: 103: return(0);
  5199  0008C2  0E00               	movlw	0
  5200                           
  5201                           ; BSR set to: 0
  5202  0008C4  0012               	return	
  5203  0008C6                     __end_of_ES_EnQueueFIFO:
  5204                           	opt stack 0
  5205                           tosu	equ	0xFFF
  5206                           tosh	equ	0xFFE
  5207                           tosl	equ	0xFFD
  5208                           pclath	equ	0xFFA
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           indf1	equ	0xFE7
  5219                           postinc1	equ	0xFE6
  5220                           fsr1h	equ	0xFE2
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function ___wmul *****************
  5230 ;; Defined at:
  5231 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5234 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  product         2   10[BANK0 ] unsigned int 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  2    6[BANK0 ] unsigned int 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, prodl, prodh
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5246 ;;      Params:         0       4       0       0
  5247 ;;      Locals:         0       2       0       0
  5248 ;;      Temps:          0       0       0       0
  5249 ;;      Totals:         0       6       0       0
  5250 ;;Total ram usage:        6 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    6
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_ES_EnQueueFIFO
  5257 ;;		_ES_DeQueue
  5258 ;;		_ES_EnQueueLIFO
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text33
  5263  001354                     __ptext33:
  5264                           	opt stack 0
  5265  001354                     ___wmul:
  5266                           	opt stack 18
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;incstack = 0
  5270  001354  0100               	movlb	0	; () banked
  5271  001356  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5272  001358  0100               	movlb	0	; () banked
  5273  00135A  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5274  00135C  CFF3 F0C6          	movff	prodl,___wmul@product
  5275  001360  CFF4 F0C7          	movff	prodh,___wmul@product+1
  5276  001364  0100               	movlb	0	; () banked
  5277  001366  51C2               	movf	___wmul@multiplier& (0+255),w,b
  5278  001368  0100               	movlb	0	; () banked
  5279  00136A  03C5               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5280  00136C  50F3               	movf	prodl,w,c
  5281  00136E  0100               	movlb	0	; () banked
  5282  001370  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5283  001372  0100               	movlb	0	; () banked
  5284  001374  51C3               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5285  001376  0100               	movlb	0	; () banked
  5286  001378  03C4               	mulwf	___wmul@multiplicand& (0+255),b
  5287  00137A  50F3               	movf	prodl,w,c
  5288  00137C  0100               	movlb	0	; () banked
  5289  00137E  27C7               	addwf	(___wmul@product+1)& (0+255),f,b
  5290                           
  5291                           ; BSR set to: 0
  5292  001380  C0C6  F0C2         	movff	___wmul@product,?___wmul
  5293  001384  C0C7  F0C3         	movff	___wmul@product+1,?___wmul+1
  5294  001388  0012               	return	
  5295  00138A                     __end_of___wmul:
  5296                           	opt stack 0
  5297                           tosu	equ	0xFFF
  5298                           tosh	equ	0xFFE
  5299                           tosl	equ	0xFFD
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf1	equ	0xFE7
  5311                           postinc1	equ	0xFE6
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function ___awmod *****************
  5322 ;; Defined at:
  5323 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  dividend        2    0[BANK0 ] int 
  5326 ;;  divisor         2    2[BANK0 ] int 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  sign            1    5[BANK0 ] unsigned char 
  5329 ;;  counter         1    4[BANK0 ] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2    0[BANK0 ] int 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5339 ;;      Params:         0       4       0       0
  5340 ;;      Locals:         0       2       0       0
  5341 ;;      Temps:          0       0       0       0
  5342 ;;      Totals:         0       6       0       0
  5343 ;;Total ram usage:        6 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    6
  5346 ;; This function calls:
  5347 ;;		Nothing
  5348 ;; This function is called by:
  5349 ;;		_ES_EnQueueFIFO
  5350 ;;		i2_ES_EnQueueFIFO
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text34
  5355  000C6C                     __ptext34:
  5356                           	opt stack 0
  5357  000C6C                     ___awmod:
  5358                           	opt stack 18
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;incstack = 0
  5362  000C6C  0E00               	movlw	0
  5363  000C6E  0100               	movlb	0	; () banked
  5364  000C70  6FC1               	movwf	___awmod@sign& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367  000C72  0100               	movlb	0	; () banked
  5368  000C74  AFBD               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5369  000C76  D008               	goto	l2150
  5370                           
  5371                           ; BSR set to: 0
  5372  000C78  0100               	movlb	0	; () banked
  5373  000C7A  6DBC               	negf	___awmod@dividend& (0+255),b
  5374  000C7C  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5375  000C7E  B0D8               	btfsc	status,0,c
  5376  000C80  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5377                           
  5378                           ; BSR set to: 0
  5379  000C82  0E01               	movlw	1
  5380  000C84  0100               	movlb	0	; () banked
  5381  000C86  6FC1               	movwf	___awmod@sign& (0+255),b
  5382  000C88                     l2150:
  5383                           
  5384                           ; BSR set to: 0
  5385  000C88  0100               	movlb	0	; () banked
  5386  000C8A  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5387  000C8C  D005               	goto	l2154
  5388                           
  5389                           ; BSR set to: 0
  5390  000C8E  0100               	movlb	0	; () banked
  5391  000C90  6DBE               	negf	___awmod@divisor& (0+255),b
  5392  000C92  1FBF               	comf	(___awmod@divisor+1)& (0+255),f,b
  5393  000C94  B0D8               	btfsc	status,0,c
  5394  000C96  2BBF               	incf	(___awmod@divisor+1)& (0+255),f,b
  5395  000C98                     l2154:
  5396                           
  5397                           ; BSR set to: 0
  5398  000C98  0100               	movlb	0	; () banked
  5399  000C9A  51BE               	movf	___awmod@divisor& (0+255),w,b
  5400  000C9C  0100               	movlb	0	; () banked
  5401  000C9E  11BF               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5402  000CA0  B4D8               	btfsc	status,2,c
  5403  000CA2  D026               	goto	l2170
  5404                           
  5405                           ; BSR set to: 0
  5406  000CA4  0E01               	movlw	1
  5407  000CA6  0100               	movlb	0	; () banked
  5408  000CA8  6FC0               	movwf	___awmod@counter& (0+255),b
  5409  000CAA  D006               	goto	l2160
  5410  000CAC                     l2158:
  5411                           
  5412                           ; BSR set to: 0
  5413  000CAC  0100               	movlb	0	; () banked
  5414  000CAE  90D8               	bcf	status,0,c
  5415  000CB0  37BE               	rlcf	___awmod@divisor& (0+255),f,b
  5416  000CB2  37BF               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5417  000CB4  0100               	movlb	0	; () banked
  5418  000CB6  2BC0               	incf	___awmod@counter& (0+255),f,b
  5419  000CB8                     l2160:
  5420                           
  5421                           ; BSR set to: 0
  5422  000CB8  0100               	movlb	0	; () banked
  5423  000CBA  AFBF               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5424  000CBC  D7F7               	goto	l2158
  5425  000CBE                     l2162:
  5426                           
  5427                           ; BSR set to: 0
  5428  000CBE  0100               	movlb	0	; () banked
  5429  000CC0  51BE               	movf	___awmod@divisor& (0+255),w,b
  5430  000CC2  0100               	movlb	0	; () banked
  5431  000CC4  5DBC               	subwf	___awmod@dividend& (0+255),w,b
  5432  000CC6  0100               	movlb	0	; () banked
  5433  000CC8  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5434  000CCA  0100               	movlb	0	; () banked
  5435  000CCC  59BD               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5436  000CCE  A0D8               	btfss	status,0,c
  5437  000CD0  D008               	goto	l2166
  5438                           
  5439                           ; BSR set to: 0
  5440  000CD2  0100               	movlb	0	; () banked
  5441  000CD4  51BE               	movf	___awmod@divisor& (0+255),w,b
  5442  000CD6  0100               	movlb	0	; () banked
  5443  000CD8  5FBC               	subwf	___awmod@dividend& (0+255),f,b
  5444  000CDA  0100               	movlb	0	; () banked
  5445  000CDC  51BF               	movf	(___awmod@divisor+1)& (0+255),w,b
  5446  000CDE  0100               	movlb	0	; () banked
  5447  000CE0  5BBD               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5448  000CE2                     l2166:
  5449                           
  5450                           ; BSR set to: 0
  5451  000CE2  0100               	movlb	0	; () banked
  5452  000CE4  90D8               	bcf	status,0,c
  5453  000CE6  33BF               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5454  000CE8  33BE               	rrcf	___awmod@divisor& (0+255),f,b
  5455                           
  5456                           ; BSR set to: 0
  5457  000CEA  0100               	movlb	0	; () banked
  5458  000CEC  2FC0               	decfsz	___awmod@counter& (0+255),f,b
  5459  000CEE  D7E7               	goto	l2162
  5460  000CF0                     l2170:
  5461                           
  5462                           ; BSR set to: 0
  5463  000CF0  0100               	movlb	0	; () banked
  5464  000CF2  51C1               	movf	___awmod@sign& (0+255),w,b
  5465  000CF4  0100               	movlb	0	; () banked
  5466  000CF6  B4D8               	btfsc	status,2,c
  5467  000CF8  D005               	goto	l2174
  5468                           
  5469                           ; BSR set to: 0
  5470  000CFA  0100               	movlb	0	; () banked
  5471  000CFC  6DBC               	negf	___awmod@dividend& (0+255),b
  5472  000CFE  1FBD               	comf	(___awmod@dividend+1)& (0+255),f,b
  5473  000D00  B0D8               	btfsc	status,0,c
  5474  000D02  2BBD               	incf	(___awmod@dividend+1)& (0+255),f,b
  5475  000D04                     l2174:
  5476                           
  5477                           ; BSR set to: 0
  5478  000D04  C0BC  F0BC         	movff	___awmod@dividend,?___awmod
  5479  000D08  C0BD  F0BD         	movff	___awmod@dividend+1,?___awmod+1
  5480  000D0C  0012               	return	
  5481  000D0E                     __end_of___awmod:
  5482                           	opt stack 0
  5483                           tosu	equ	0xFFF
  5484                           tosh	equ	0xFFE
  5485                           tosl	equ	0xFFD
  5486                           pclath	equ	0xFFA
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           indf1	equ	0xFE7
  5497                           postinc1	equ	0xFE6
  5498                           fsr1h	equ	0xFE2
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function _ES_Timer_Init *****************
  5508 ;; Defined at:
  5509 ;;		line 130 in file "ES_Timers.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  Rate            2    2[BANK0 ] enum E15422
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;		None
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      void 
  5516 ;; Registers used:
  5517 ;;		wreg, status,2, cstack
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5523 ;;      Params:         0       2       0       0
  5524 ;;      Locals:         0       0       0       0
  5525 ;;      Temps:          0       0       0       0
  5526 ;;      Totals:         0       2       0       0
  5527 ;;Total ram usage:        2 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    7
  5530 ;; This function calls:
  5531 ;;		__HW_Timer_Init
  5532 ;; This function is called by:
  5533 ;;		_ES_Initialize
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text35
  5538  001552                     __ptext35:
  5539                           	opt stack 0
  5540  001552                     _ES_Timer_Init:
  5541                           	opt stack 22
  5542                           
  5543                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;incstack = 0
  5547  001552  C0BE  F0BC         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5548  001556  C0BF  F0BD         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5549  00155A  EC61  F00A         	call	__HW_Timer_Init	;wreg free
  5550  00155E  0012               	return		;funcret
  5551  001560                     __end_of_ES_Timer_Init:
  5552                           	opt stack 0
  5553                           tosu	equ	0xFFF
  5554                           tosh	equ	0xFFE
  5555                           tosl	equ	0xFFD
  5556                           pclath	equ	0xFFA
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           indf1	equ	0xFE7
  5567                           postinc1	equ	0xFE6
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function __HW_Timer_Init *****************
  5578 ;; Defined at:
  5579 ;;		line 72 in file "ES_Port.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  Rate            2    0[BANK0 ] enum E15412
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5593 ;;      Params:         0       2       0       0
  5594 ;;      Locals:         0       0       0       0
  5595 ;;      Temps:          0       0       0       0
  5596 ;;      Totals:         0       2       0       0
  5597 ;;Total ram usage:        2 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    6
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_ES_Timer_Init
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text36
  5608  0014C2                     __ptext36:
  5609                           	opt stack 0
  5610  0014C2                     __HW_Timer_Init:
  5611                           	opt stack 22
  5612                           
  5613                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  5614                           
  5615                           ;incstack = 0
  5616  0014C2  0E04               	movlw	4
  5617  0014C4  6E9D               	movwf	3997,c	;volatile
  5618                           
  5619                           ;ES_Port.c: 85: INTCON = 0b01000000;
  5620  0014C6  0E40               	movlw	64
  5621  0014C8  6EF2               	movwf	intcon,c	;volatile
  5622                           
  5623                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  5624  0014CA  0E0A               	movlw	10
  5625  0014CC  6EBD               	movwf	4029,c	;volatile
  5626                           
  5627                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  5628  0014CE  0E01               	movlw	1
  5629  0014D0  6EBE               	movwf	4030,c	;volatile
  5630                           
  5631                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  5632  0014D2  0E00               	movlw	0
  5633  0014D4  6EBF               	movwf	4031,c	;volatile
  5634                           
  5635                           ;ES_Port.c: 107: T1CON = 0b00100001;
  5636  0014D6  0E21               	movlw	33
  5637  0014D8  6ECD               	movwf	4045,c	;volatile
  5638                           
  5639                           ;ES_Port.c: 108: PEIE = 1;
  5640  0014DA  8CF2               	bsf	intcon,6,c	;volatile
  5641                           
  5642                           ;ES_Port.c: 109: {GIE = 1;};
  5643  0014DC  8EF2               	bsf	intcon,7,c	;volatile
  5644  0014DE  0012               	return		;funcret
  5645  0014E0                     __end_of__HW_Timer_Init:
  5646                           	opt stack 0
  5647                           tosu	equ	0xFFF
  5648                           tosh	equ	0xFFE
  5649                           tosl	equ	0xFFD
  5650                           pclath	equ	0xFFA
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           postinc0	equ	0xFEE
  5659                           wreg	equ	0xFE8
  5660                           indf1	equ	0xFE7
  5661                           postinc1	equ	0xFE6
  5662                           fsr1h	equ	0xFE2
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           postdec2	equ	0xFDD
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           
  5671 ;; *************** function _ES_InitQueue *****************
  5672 ;; Defined at:
  5673 ;;		line 58 in file "ES_Queue.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5676 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5677 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5680 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      unsigned char 
  5683 ;; Registers used:
  5684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5690 ;;      Params:         0       3       0       0
  5691 ;;      Locals:         0       2       0       0
  5692 ;;      Temps:          0       0       0       0
  5693 ;;      Totals:         0       5       0       0
  5694 ;;Total ram usage:        5 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    6
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_ES_Initialize
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text37
  5705  001318                     __ptext37:
  5706                           	opt stack 0
  5707  001318                     _ES_InitQueue:
  5708                           	opt stack 23
  5709                           
  5710                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5711                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5712                           
  5713                           ;incstack = 0
  5714  001318  C0BC  F0BF         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5715  00131C  C0BD  F0C0         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5716                           
  5717                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5718  001320  0100               	movlb	0	; () banked
  5719  001322  05BE               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5720  001324  C0BF  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5721  001328  C0C0  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5722  00132C  6EDF               	movwf	indf2,c
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5726  00132E  0100               	movlb	0	; () banked
  5727  001330  EE20 F001          	lfsr	2,1
  5728  001334  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5729  001336  26D9               	addwf	fsr2l,f,c
  5730  001338  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5731  00133A  22DA               	addwfc	fsr2h,f,c
  5732  00133C  0E00               	movlw	0
  5733  00133E  6EDF               	movwf	indf2,c
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5737  001340  0100               	movlb	0	; () banked
  5738  001342  EE20 F002          	lfsr	2,2
  5739  001346  51BF               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5740  001348  26D9               	addwf	fsr2l,f,c
  5741  00134A  51C0               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5742  00134C  22DA               	addwfc	fsr2h,f,c
  5743  00134E  0E00               	movlw	0
  5744  001350  6EDF               	movwf	indf2,c
  5745  001352  0012               	return	
  5746  001354                     __end_of_ES_InitQueue:
  5747                           	opt stack 0
  5748                           tosu	equ	0xFFF
  5749                           tosh	equ	0xFFE
  5750                           tosl	equ	0xFFD
  5751                           pclath	equ	0xFFA
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           indf1	equ	0xFE7
  5762                           postinc1	equ	0xFE6
  5763                           fsr1h	equ	0xFE2
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function _ISR *****************
  5773 ;; Defined at:
  5774 ;;		line 112 in file "ES_Port.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;		None
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5788 ;;      Params:         0       0       0       0
  5789 ;;      Locals:         0       0       0       0
  5790 ;;      Temps:         16       0       0       0
  5791 ;;      Totals:        16       0       0       0
  5792 ;;Total ram usage:       16 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    5
  5795 ;; This function calls:
  5796 ;;		_AnalogISR
  5797 ;;		_BusErrorResponse
  5798 ;;		_CanErrorResponse
  5799 ;;		_CanRCVResponse
  5800 ;;		_CanXmitResponse
  5801 ;; This function is called by:
  5802 ;;		Interrupt level 2
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	intcode
  5807  000008                     __pintcode:
  5808                           	opt stack 0
  5809  000008                     _ISR:
  5810                           	opt stack 18
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5815  00000A  CFFA F028          	movff	pclath,??_ISR+2
  5816  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  5817  000012  EDD0  F004         	call	int_func,f	;refresh shadow registers
  5818                           tosu	equ	0xFFF
  5819                           tosh	equ	0xFFE
  5820                           tosl	equ	0xFFD
  5821                           pclatu	equ	0xFFB
  5822                           pclath	equ	0xFFA
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           intcon	equ	0xFF2
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           indf1	equ	0xFE7
  5833                           postinc1	equ	0xFE6
  5834                           fsr1h	equ	0xFE2
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8
  5842                           
  5843                           	psect	intcode_body
  5844  0009A0                     __pintcode_body:
  5845                           	opt stack 18
  5846  0009A0                     int_func:
  5847                           	opt stack 18
  5848  0009A0  0006               	pop		; remove dummy address from shadow register refresh
  5849  0009A2  CFE9 F02A          	movff	fsr0l,??_ISR+4
  5850  0009A6  CFEA F02B          	movff	fsr0h,??_ISR+5
  5851  0009AA  CFE1 F02C          	movff	fsr1l,??_ISR+6
  5852  0009AE  CFE2 F02D          	movff	fsr1h,??_ISR+7
  5853  0009B2  CFD9 F02E          	movff	fsr2l,??_ISR+8
  5854  0009B6  CFDA F02F          	movff	fsr2h,??_ISR+9
  5855  0009BA  CFF3 F030          	movff	prodl,??_ISR+10
  5856  0009BE  CFF4 F031          	movff	prodh,??_ISR+11
  5857  0009C2  CFF6 F032          	movff	tblptrl,??_ISR+12
  5858  0009C6  CFF7 F033          	movff	tblptrh,??_ISR+13
  5859  0009CA  CFF8 F034          	movff	tblptru,??_ISR+14
  5860  0009CE  CFF5 F035          	movff	tablat,??_ISR+15
  5861                           
  5862                           ;ES_Port.c: 115: static unsigned int LastTime;
  5863                           ;ES_Port.c: 116: static unsigned int NextTime;
  5864                           ;ES_Port.c: 118: if (CCP1IF == 1)
  5865  0009D2  A49E               	btfss	3998,2,c	;volatile
  5866  0009D4  D015               	goto	i2l2914
  5867                           
  5868                           ;ES_Port.c: 119: {
  5869                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5870  0009D6  50BF               	movf	4031,w,c	;volatile
  5871  0009D8  6E26               	movwf	??_ISR& (0+255),c
  5872  0009DA  50BE               	movf	4030,w,c	;volatile
  5873  0009DC  6E36               	movwf	ISR@LastTime,c
  5874  0009DE  C026  F037         	movff	??_ISR,ISR@LastTime+1
  5875                           
  5876                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  5877  0009E2  0E20               	movlw	32
  5878  0009E4  2436               	addwf	ISR@LastTime,w,c
  5879  0009E6  6E38               	movwf	ISR@NextTime,c
  5880  0009E8  0E4E               	movlw	78
  5881  0009EA  2037               	addwfc	ISR@LastTime+1,w,c
  5882  0009EC  6E39               	movwf	ISR@NextTime+1,c
  5883                           
  5884                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  5885  0009EE  5039               	movf	ISR@NextTime+1,w,c
  5886  0009F0  6EBF               	movwf	4031,c	;volatile
  5887                           
  5888                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5889  0009F2  C038  FFBE         	movff	ISR@NextTime,4030	;volatile
  5890                           
  5891                           ;ES_Port.c: 124: CCP1IF = 0;
  5892  0009F6  949E               	bcf	3998,2,c	;volatile
  5893                           
  5894                           ;ES_Port.c: 125: TickCount++;
  5895  0009F8  0100               	movlb	0	; () banked
  5896  0009FA  2B94               	incf	_TickCount& (0+255),f,b	;volatile
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;ES_Port.c: 126: SysTickCounter++;
  5900  0009FC  4A3A               	infsnz	_SysTickCounter,f,c	;volatile
  5901  0009FE  2A3B               	incf	_SysTickCounter+1,f,c	;volatile
  5902  000A00                     i2l2914:
  5903                           
  5904                           ;ES_Port.c: 127: }
  5905                           ;ES_Port.c: 129: if (TXB0IF == 1)
  5906  000A00  A4A4               	btfss	4004,2,c	;volatile
  5907  000A02  D003               	goto	i2l2920
  5908                           
  5909                           ;ES_Port.c: 130: {
  5910                           ;ES_Port.c: 131: TXB0IF = 0;
  5911  000A04  94A4               	bcf	4004,2,c	;volatile
  5912                           
  5913                           ;ES_Port.c: 132: CanXmitResponse();
  5914  000A06  ECC7  F00A         	call	_CanXmitResponse	;wreg free
  5915  000A0A                     i2l2920:
  5916                           
  5917                           ;ES_Port.c: 133: }
  5918                           ;ES_Port.c: 134: if (RXB0IF == 1) {
  5919  000A0A  A0A4               	btfss	4004,0,c	;volatile
  5920  000A0C  D003               	goto	i2l2926
  5921                           
  5922                           ;ES_Port.c: 135: RXB0IF = 0;
  5923  000A0E  90A4               	bcf	4004,0,c	;volatile
  5924                           
  5925                           ;ES_Port.c: 136: CanRCVResponse();
  5926  000A10  ECC0  F00A         	call	_CanRCVResponse	;wreg free
  5927  000A14                     i2l2926:
  5928                           
  5929                           ;ES_Port.c: 137: }
  5930                           ;ES_Port.c: 138: if (ERRIF == 1) {
  5931  000A14  AAA4               	btfss	4004,5,c	;volatile
  5932  000A16  D003               	goto	i2l2932
  5933                           
  5934                           ;ES_Port.c: 139: ERRIF = 0;
  5935  000A18  9AA4               	bcf	4004,5,c	;volatile
  5936                           
  5937                           ;ES_Port.c: 140: CanErrorResponse();
  5938  000A1A  ECCD  F00A         	call	_CanErrorResponse	;wreg free
  5939  000A1E                     i2l2932:
  5940                           
  5941                           ;ES_Port.c: 141: }
  5942                           ;ES_Port.c: 142: if (IRXIF == 1) {
  5943  000A1E  AEA4               	btfss	4004,7,c	;volatile
  5944  000A20  D003               	goto	i2l2938
  5945                           
  5946                           ;ES_Port.c: 143: IRXIF = 0;
  5947  000A22  9EA4               	bcf	4004,7,c	;volatile
  5948                           
  5949                           ;ES_Port.c: 144: BusErrorResponse();
  5950  000A24  ECCE  F00A         	call	_BusErrorResponse	;wreg free
  5951  000A28                     i2l2938:
  5952                           
  5953                           ;ES_Port.c: 145: }
  5954                           ;ES_Port.c: 146: if (ADIF == 1) {
  5955  000A28  AC9E               	btfss	3998,6,c	;volatile
  5956  000A2A  D003               	goto	i2l229
  5957                           
  5958                           ;ES_Port.c: 147: ADIF = 0;
  5959  000A2C  9C9E               	bcf	3998,6,c	;volatile
  5960                           
  5961                           ;ES_Port.c: 148: AnalogISR();
  5962  000A2E  ECCD  F006         	call	_AnalogISR	;wreg free
  5963  000A32                     i2l229:
  5964  000A32  C035  FFF5         	movff	??_ISR+15,tablat
  5965  000A36  C034  FFF8         	movff	??_ISR+14,tblptru
  5966  000A3A  C033  FFF7         	movff	??_ISR+13,tblptrh
  5967  000A3E  C032  FFF6         	movff	??_ISR+12,tblptrl
  5968  000A42  C031  FFF4         	movff	??_ISR+11,prodh
  5969  000A46  C030  FFF3         	movff	??_ISR+10,prodl
  5970  000A4A  C02F  FFDA         	movff	??_ISR+9,fsr2h
  5971  000A4E  C02E  FFD9         	movff	??_ISR+8,fsr2l
  5972  000A52  C02D  FFE2         	movff	??_ISR+7,fsr1h
  5973  000A56  C02C  FFE1         	movff	??_ISR+6,fsr1l
  5974  000A5A  C02B  FFEA         	movff	??_ISR+5,fsr0h
  5975  000A5E  C02A  FFE9         	movff	??_ISR+4,fsr0l
  5976  000A62  C029  FFFB         	movff	??_ISR+3,pclatu
  5977  000A66  C028  FFFA         	movff	??_ISR+2,pclath
  5978  000A6A  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5979  000A6C  0011               	retfie		f
  5980  000A6E                     __end_of_ISR:
  5981                           	opt stack 0
  5982                           tosu	equ	0xFFF
  5983                           tosh	equ	0xFFE
  5984                           tosl	equ	0xFFD
  5985                           pclatu	equ	0xFFB
  5986                           pclath	equ	0xFFA
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           postinc0	equ	0xFEE
  5995                           fsr0h	equ	0xFEA
  5996                           fsr0l	equ	0xFE9
  5997                           wreg	equ	0xFE8
  5998                           indf1	equ	0xFE7
  5999                           postinc1	equ	0xFE6
  6000                           fsr1h	equ	0xFE2
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _CanXmitResponse *****************
  6010 ;; Defined at:
  6011 ;;		line 186 in file "Can_XmitService.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		None
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6025 ;;      Params:         0       0       0       0
  6026 ;;      Locals:         0       0       0       0
  6027 ;;      Temps:          0       0       0       0
  6028 ;;      Totals:         0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; This function calls:
  6032 ;;		Nothing
  6033 ;; This function is called by:
  6034 ;;		_ISR
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text39
  6039  00158E                     __ptext39:
  6040                           	opt stack 0
  6041  00158E                     _CanXmitResponse:
  6042                           	opt stack 22
  6043                           
  6044                           ;Can_XmitService.c: 188: TXB0CONbits.TXREQ = 0;
  6045                           
  6046                           ;incstack = 0
  6047  00158E  010F               	movlb	15	; () banked
  6048  001590  9740               	bcf	64,3,b	;volatile
  6049                           
  6050                           ; BSR set to: 15
  6051  001592  0012               	return		;funcret
  6052  001594                     __end_of_CanXmitResponse:
  6053                           	opt stack 0
  6054                           tosu	equ	0xFFF
  6055                           tosh	equ	0xFFE
  6056                           tosl	equ	0xFFD
  6057                           pclatu	equ	0xFFB
  6058                           pclath	equ	0xFFA
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           postinc0	equ	0xFEE
  6067                           fsr0h	equ	0xFEA
  6068                           fsr0l	equ	0xFE9
  6069                           wreg	equ	0xFE8
  6070                           indf1	equ	0xFE7
  6071                           postinc1	equ	0xFE6
  6072                           fsr1h	equ	0xFE2
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function _CanRCVResponse *****************
  6082 ;; Defined at:
  6083 ;;		line 191 in file "Can_XmitService.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;		None
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      void 
  6090 ;; Registers used:
  6091 ;;		None
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6097 ;;      Params:         0       0       0       0
  6098 ;;      Locals:         0       0       0       0
  6099 ;;      Temps:          0       0       0       0
  6100 ;;      Totals:         0       0       0       0
  6101 ;;Total ram usage:        0 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_ISR
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text40
  6111  001580                     __ptext40:
  6112                           	opt stack 0
  6113  001580                     _CanRCVResponse:
  6114                           	opt stack 22
  6115                           
  6116                           ;Can_XmitService.c: 193: if (RXB0CONbits.RXFUL == 1) {
  6117                           
  6118                           ; BSR set to: 15
  6119                           ;incstack = 0
  6120  001580  AE60               	btfss	3936,7,c	;volatile
  6121  001582  0012               	return	
  6122                           
  6123                           ;Can_XmitService.c: 194: RXB0CONbits.RXFUL = 0;
  6124  001584  9E60               	bcf	3936,7,c	;volatile
  6125  001586  0012               	return	
  6126  001588                     __end_of_CanRCVResponse:
  6127                           	opt stack 0
  6128                           tosu	equ	0xFFF
  6129                           tosh	equ	0xFFE
  6130                           tosl	equ	0xFFD
  6131                           pclatu	equ	0xFFB
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           postinc0	equ	0xFEE
  6141                           fsr0h	equ	0xFEA
  6142                           fsr0l	equ	0xFE9
  6143                           wreg	equ	0xFE8
  6144                           indf1	equ	0xFE7
  6145                           postinc1	equ	0xFE6
  6146                           fsr1h	equ	0xFE2
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _CanErrorResponse *****************
  6156 ;; Defined at:
  6157 ;;		line 198 in file "Can_XmitService.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		None
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6171 ;;      Params:         0       0       0       0
  6172 ;;      Locals:         0       0       0       0
  6173 ;;      Temps:          0       0       0       0
  6174 ;;      Totals:         0       0       0       0
  6175 ;;Total ram usage:        0 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_ISR
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           	psect	text41
  6185  00159A                     __ptext41:
  6186                           	opt stack 0
  6187  00159A                     _CanErrorResponse:
  6188                           	opt stack 22
  6189                           
  6190                           ;incstack = 0
  6191  00159A  0012               	return		;funcret
  6192  00159C                     __end_of_CanErrorResponse:
  6193                           	opt stack 0
  6194                           tosu	equ	0xFFF
  6195                           tosh	equ	0xFFE
  6196                           tosl	equ	0xFFD
  6197                           pclatu	equ	0xFFB
  6198                           pclath	equ	0xFFA
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           postinc0	equ	0xFEE
  6207                           fsr0h	equ	0xFEA
  6208                           fsr0l	equ	0xFE9
  6209                           wreg	equ	0xFE8
  6210                           indf1	equ	0xFE7
  6211                           postinc1	equ	0xFE6
  6212                           fsr1h	equ	0xFE2
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function _BusErrorResponse *****************
  6222 ;; Defined at:
  6223 ;;		line 203 in file "Can_XmitService.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		None
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6237 ;;      Params:         0       0       0       0
  6238 ;;      Locals:         0       0       0       0
  6239 ;;      Temps:          0       0       0       0
  6240 ;;      Totals:         0       0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; This function calls:
  6244 ;;		Nothing
  6245 ;; This function is called by:
  6246 ;;		_ISR
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text42
  6251  00159C                     __ptext42:
  6252                           	opt stack 0
  6253  00159C                     _BusErrorResponse:
  6254                           	opt stack 22
  6255                           
  6256                           ;incstack = 0
  6257  00159C  0012               	return		;funcret
  6258  00159E                     __end_of_BusErrorResponse:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclatu	equ	0xFFB
  6264                           pclath	equ	0xFFA
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           indf1	equ	0xFE7
  6277                           postinc1	equ	0xFE6
  6278                           fsr1h	equ	0xFE2
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _AnalogISR *****************
  6288 ;; Defined at:
  6289 ;;		line 77 in file "Analog_Service.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         3       0       0       0
  6305 ;;      Temps:          2       0       0       0
  6306 ;;      Totals:         5       0       0       0
  6307 ;;Total ram usage:        5 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    4
  6310 ;; This function calls:
  6311 ;;		_PostCan_XmitService
  6312 ;;		i2_ES_Timer_InitTimer
  6313 ;; This function is called by:
  6314 ;;		_ISR
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text43
  6319  000D9A                     __ptext43:
  6320                           	opt stack 0
  6321  000D9A                     _AnalogISR:
  6322                           	opt stack 18
  6323                           
  6324                           ;Analog_Service.c: 79: if (!ADCON0bits.DONE) {
  6325                           
  6326                           ;incstack = 0
  6327  000D9A  B2C2               	btfsc	4034,1,c	;volatile
  6328  000D9C  0012               	return	
  6329                           
  6330                           ;Analog_Service.c: 80: if (ADCON0bits.CHS == 0x00) {
  6331  000D9E  30C2               	rrcf	4034,w,c	;volatile
  6332  000DA0  32E8               	rrcf	wreg,f,c
  6333  000DA2  0B0F               	andlw	15
  6334  000DA4  0900               	iorlw	0
  6335  000DA6  A4D8               	btfss	status,2,c
  6336  000DA8  D013               	goto	i2l2834
  6337                           
  6338                           ;Analog_Service.c: 81: Brightness = (ADRESH<<8)|ADRESL;
  6339  000DAA  50C3               	movf	4035,w,c	;volatile
  6340  000DAC  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6341  000DB0  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6342  000DB2  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6343  000DB6  6A21               	clrf	??_AnalogISR,c
  6344  000DB8  1021               	iorwf	??_AnalogISR,w,c
  6345  000DBA  0100               	movlb	0	; () banked
  6346  000DBC  6F85               	movwf	_Brightness& (0+255),b
  6347  000DBE  5022               	movf	??_AnalogISR+1,w,c
  6348  000DC0  0100               	movlb	0	; () banked
  6349  000DC2  6F86               	movwf	(_Brightness+1)& (0+255),b
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;Analog_Service.c: 82: ADCON0bits.CHS = 0x01;
  6353  000DC4  50C2               	movf	4034,w,c	;volatile
  6354  000DC6  0BC3               	andlw	-61
  6355  000DC8  0904               	iorlw	4
  6356  000DCA  6EC2               	movwf	4034,c	;volatile
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;Analog_Service.c: 83: ADCON0bits.GO = 1;
  6360  000DCC  82C2               	bsf	4034,1,c	;volatile
  6361                           
  6362                           ;Analog_Service.c: 84: } else if (ADCON0bits.CHS == 0x01) {
  6363  000DCE  0012               	return	
  6364  000DD0                     i2l2834:
  6365  000DD0  30C2               	rrcf	4034,w,c	;volatile
  6366  000DD2  32E8               	rrcf	wreg,f,c
  6367  000DD4  0B0F               	andlw	15
  6368  000DD6  06E8               	decf	wreg,f,c
  6369  000DD8  A4D8               	btfss	status,2,c
  6370  000DDA  0012               	return	
  6371                           
  6372                           ;Analog_Service.c: 85: Location = (ADRESH<<8)|ADRESL;
  6373  000DDC  50C3               	movf	4035,w,c	;volatile
  6374  000DDE  CFC4 F021          	movff	4036,??_AnalogISR	;volatile
  6375  000DE2  6A22               	clrf	(??_AnalogISR+1)& (0+255),c
  6376  000DE4  C021  F022         	movff	??_AnalogISR,??_AnalogISR+1
  6377  000DE8  6A21               	clrf	??_AnalogISR,c
  6378  000DEA  1021               	iorwf	??_AnalogISR,w,c
  6379  000DEC  0100               	movlb	0	; () banked
  6380  000DEE  6F87               	movwf	_Location& (0+255),b
  6381  000DF0  5022               	movf	??_AnalogISR+1,w,c
  6382  000DF2  0100               	movlb	0	; () banked
  6383  000DF4  6F88               	movwf	(_Location+1)& (0+255),b
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;Analog_Service.c: 86: ADCON0bits.CHS = 0x00;
  6387  000DF6  94C2               	bcf	4034,2,c	;volatile
  6388  000DF8  96C2               	bcf	4034,3,c	;volatile
  6389  000DFA  98C2               	bcf	4034,4,c	;volatile
  6390  000DFC  9AC2               	bcf	4034,5,c	;volatile
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;Analog_Service.c: 87: ES_Event Event2Post;
  6394                           ;Analog_Service.c: 88: Event2Post.EventType = XMIT_EVENT;
  6395  000DFE  0E07               	movlw	7
  6396  000E00  6E23               	movwf	AnalogISR@Event2Post,c
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;Analog_Service.c: 89: PostCan_XmitService(Event2Post);
  6400  000E02  C023  F01E         	movff	AnalogISR@Event2Post,PostCan_XmitService@ThisEvent
  6401  000E06  C024  F01F         	movff	AnalogISR@Event2Post+1,PostCan_XmitService@ThisEvent+1
  6402  000E0A  C025  F020         	movff	AnalogISR@Event2Post+2,PostCan_XmitService@ThisEvent+2
  6403  000E0E  EC9E  F00A         	call	_PostCan_XmitService	;wreg free
  6404                           
  6405                           ;Analog_Service.c: 90: ES_Timer_InitTimer(0, 5);
  6406  000E12  0E00               	movlw	0
  6407  000E14  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  6408  000E16  0E05               	movlw	5
  6409  000E18  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  6410  000E1A  0E00               	movlw	0
  6411  000E1C  EC7C  F008         	call	i2_ES_Timer_InitTimer
  6412  000E20  0012               	return	
  6413  000E22                     __end_of_AnalogISR:
  6414                           	opt stack 0
  6415                           tosu	equ	0xFFF
  6416                           tosh	equ	0xFFE
  6417                           tosl	equ	0xFFD
  6418                           pclatu	equ	0xFFB
  6419                           pclath	equ	0xFFA
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           postinc0	equ	0xFEE
  6428                           fsr0h	equ	0xFEA
  6429                           fsr0l	equ	0xFE9
  6430                           wreg	equ	0xFE8
  6431                           indf1	equ	0xFE7
  6432                           postinc1	equ	0xFE6
  6433                           fsr1h	equ	0xFE2
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function i2_ES_Timer_InitTimer *****************
  6443 ;; Defined at:
  6444 ;;		line 229 in file "ES_Timers.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  Num             1    wreg     unsigned char 
  6447 ;;  NewTime         2    0[COMRAM] unsigned int 
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;  Num             1    4[COMRAM] unsigned char 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      enum E15445
  6452 ;; Registers used:
  6453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6459 ;;      Params:         2       0       0       0
  6460 ;;      Locals:         1       0       0       0
  6461 ;;      Temps:          2       0       0       0
  6462 ;;      Totals:         5       0       0       0
  6463 ;;Total ram usage:        5 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_AnalogISR
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text44
  6473  0010F8                     __ptext44:
  6474                           	opt stack 0
  6475  0010F8                     i2_ES_Timer_InitTimer:
  6476                           	opt stack 21
  6477                           
  6478                           ;incstack = 0
  6479                           ;i2ES_Timer_InitTimer@Num stored from wreg
  6480  0010F8  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  6481                           
  6482                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6483                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6484                           ;ES_Timers.c: 236: (NewTime == 0) )
  6485  0010FA  0E10               	movlw	16
  6486  0010FC  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  6487  0010FE  0012               	return	
  6488  001100  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6489  001102  0D02               	mullw	2
  6490  001104  0E21               	movlw	low _Timer2PostFunc
  6491  001106  24F3               	addwf	prodl,w,c
  6492  001108  6EF6               	movwf	tblptrl,c
  6493  00110A  0E03               	movlw	high _Timer2PostFunc
  6494  00110C  20F4               	addwfc	prodh,w,c
  6495  00110E  6EF7               	movwf	tblptrh,c
  6496  001110                     	if	0	;There are less than 3 active tblptr bytes
  6497  001110                     	endif
  6498  001110  0009               	tblrd		*+
  6499  001112  50F5               	movf	tablat,w,c
  6500  001114  0009               	tblrd		*+
  6501  001116  10F5               	iorwf	tablat,w,c
  6502  001118  B4D8               	btfsc	status,2,c
  6503  00111A  0012               	return	
  6504  00111C  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  6505  00111E  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  6506  001120  B4D8               	btfsc	status,2,c
  6507  001122  0012               	return	
  6508                           
  6509                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6510                           
  6511                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6512                           ;	Return value of i2_ES_Timer_InitTimer is never used
  6513  001124  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6514  001126  0D02               	mullw	2
  6515  001128  0E60               	movlw	low _TMR_TimerArray
  6516  00112A  24F3               	addwf	prodl,w,c
  6517  00112C  6ED9               	movwf	fsr2l,c
  6518  00112E  0E00               	movlw	high _TMR_TimerArray
  6519  001130  20F4               	addwfc	prodh,w,c
  6520  001132  6EDA               	movwf	fsr2h,c
  6521  001134  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  6522  001138  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  6523                           
  6524                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6525  00113C  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  6526  00113E  0D02               	mullw	2
  6527  001140  0E01               	movlw	low _BitNum2SetMask
  6528  001142  24F3               	addwf	prodl,w,c
  6529  001144  6EF6               	movwf	tblptrl,c
  6530  001146  0E03               	movlw	high _BitNum2SetMask
  6531  001148  20F4               	addwfc	prodh,w,c
  6532  00114A  6EF7               	movwf	tblptrh,c
  6533  00114C                     	if	0	;There are less than 3 active tblptr bytes
  6534  00114C                     	endif
  6535  00114C  0009               	tblrd		*+
  6536  00114E  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  6537  001152  0009               	tblrd		*+
  6538  001154  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  6539  001158  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  6540  00115A  0100               	movlb	0	; () banked
  6541  00115C  138B               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6542  00115E  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  6543  001160  0100               	movlb	0	; () banked
  6544  001162  138C               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6545  001164  0012               	return	
  6546  001166                     __end_ofi2_ES_Timer_InitTimer:
  6547                           	opt stack 0
  6548                           tosu	equ	0xFFF
  6549                           tosh	equ	0xFFE
  6550                           tosl	equ	0xFFD
  6551                           pclatu	equ	0xFFB
  6552                           pclath	equ	0xFFA
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           intcon	equ	0xFF2
  6560                           postinc0	equ	0xFEE
  6561                           fsr0h	equ	0xFEA
  6562                           fsr0l	equ	0xFE9
  6563                           wreg	equ	0xFE8
  6564                           indf1	equ	0xFE7
  6565                           postinc1	equ	0xFE6
  6566                           fsr1h	equ	0xFE2
  6567                           fsr1l	equ	0xFE1
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function _PostCan_XmitService *****************
  6576 ;; Defined at:
  6577 ;;		line 115 in file "Can_XmitService.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      unsigned char 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6591 ;;      Params:         3       0       0       0
  6592 ;;      Locals:         0       0       0       0
  6593 ;;      Temps:          0       0       0       0
  6594 ;;      Totals:         3       0       0       0
  6595 ;;Total ram usage:        3 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    3
  6598 ;; This function calls:
  6599 ;;		i2_ES_PostToService
  6600 ;; This function is called by:
  6601 ;;		_AnalogISR
  6602 ;;		_PostToList
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text45
  6607  00153C                     __ptext45:
  6608                           	opt stack 0
  6609  00153C                     _PostCan_XmitService:
  6610                           	opt stack 18
  6611                           
  6612                           ;Can_XmitService.c: 117: return ES_PostToService( MyPriority, ThisEvent);
  6613                           
  6614                           ;incstack = 0
  6615  00153C  C01E  F018         	movff	PostCan_XmitService@ThisEvent,i2ES_PostToService@TheEvent
  6616  001540  C01F  F019         	movff	PostCan_XmitService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6617  001544  C020  F01A         	movff	PostCan_XmitService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6618  001548  0100               	movlb	0	; () banked
  6619  00154A  518E               	movf	Can_XmitService@MyPriority& (0+255),w,b
  6620  00154C  ECE8  F008         	call	i2_ES_PostToService
  6621  001550  0012               	return	
  6622  001552                     __end_of_PostCan_XmitService:
  6623                           	opt stack 0
  6624                           tosu	equ	0xFFF
  6625                           tosh	equ	0xFFE
  6626                           tosl	equ	0xFFD
  6627                           pclatu	equ	0xFFB
  6628                           pclath	equ	0xFFA
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           intcon	equ	0xFF2
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           indf1	equ	0xFE7
  6641                           postinc1	equ	0xFE6
  6642                           fsr1h	equ	0xFE2
  6643                           fsr1l	equ	0xFE1
  6644                           indf2	equ	0xFDF
  6645                           postinc2	equ	0xFDE
  6646                           postdec2	equ	0xFDD
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function i2_ES_PostToService *****************
  6652 ;; Defined at:
  6653 ;;		line 351 in file "ES_Framework.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  WhichService    1    wreg     unsigned char 
  6656 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  WhichService    1   28[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      unsigned char 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6668 ;;      Params:         3       0       0       0
  6669 ;;      Locals:         1       0       0       0
  6670 ;;      Temps:          2       0       0       0
  6671 ;;      Totals:         6       0       0       0
  6672 ;;Total ram usage:        6 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    2
  6675 ;; This function calls:
  6676 ;;		i2_ES_EnQueueFIFO
  6677 ;; This function is called by:
  6678 ;;		_PostCan_XmitService
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text46
  6683  0011D0                     __ptext46:
  6684                           	opt stack 0
  6685  0011D0                     i2_ES_PostToService:
  6686                           	opt stack 18
  6687                           
  6688                           ;incstack = 0
  6689                           ;i2ES_PostToService@WhichService stored from wreg
  6690  0011D0  6E1D               	movwf	i2ES_PostToService@WhichService,c
  6691                           
  6692                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6693                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6694                           ;ES_Framework.c: 354: 1 )){
  6695  0011D2  0E03               	movlw	3
  6696  0011D4  601D               	cpfslt	i2ES_PostToService@WhichService,c
  6697  0011D6  D02F               	goto	i2l2524
  6698  0011D8  501D               	movf	i2ES_PostToService@WhichService,w,c
  6699  0011DA  0D03               	mullw	3
  6700  0011DC  0E5C               	movlw	low _EventQueues
  6701  0011DE  24F3               	addwf	prodl,w,c
  6702  0011E0  6EF6               	movwf	tblptrl,c
  6703  0011E2  0E03               	movlw	high _EventQueues
  6704  0011E4  20F4               	addwfc	prodh,w,c
  6705  0011E6  6EF7               	movwf	tblptrh,c
  6706  0011E8                     	if	0	;There are less than 3 active tblptr bytes
  6707  0011E8                     	endif
  6708  0011E8  0009               	tblrd		*+
  6709  0011EA  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  6710  0011EE  000A               	tblrd		*-
  6711  0011F0  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  6712  0011F4  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  6713  0011F8  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  6714  0011FC  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  6715  001200  EC37  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  6716  001204  06E8               	decf	wreg,f,c
  6717  001206  A4D8               	btfss	status,2,c
  6718  001208  D016               	goto	i2l2524
  6719                           
  6720                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6721  00120A  501D               	movf	i2ES_PostToService@WhichService,w,c
  6722  00120C  0D02               	mullw	2
  6723  00120E  0E01               	movlw	low _BitNum2SetMask
  6724  001210  24F3               	addwf	prodl,w,c
  6725  001212  6EF6               	movwf	tblptrl,c
  6726  001214  0E03               	movlw	high _BitNum2SetMask
  6727  001216  20F4               	addwfc	prodh,w,c
  6728  001218  6EF7               	movwf	tblptrh,c
  6729  00121A                     	if	0	;There are less than 3 active tblptr bytes
  6730  00121A                     	endif
  6731  00121A  0009               	tblrd		*+
  6732  00121C  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  6733  001220  0009               	tblrd		*+
  6734  001222  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  6735  001226  501B               	movf	??i2_ES_PostToService,w,c
  6736  001228  0100               	movlb	0	; () banked
  6737  00122A  1389               	iorwf	_Ready& (0+255),f,b
  6738  00122C  501C               	movf	??i2_ES_PostToService+1,w,c
  6739  00122E  0100               	movlb	0	; () banked
  6740  001230  138A               	iorwf	(_Ready+1)& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;ES_Framework.c: 356: return 1;
  6744  001232  0E01               	movlw	1
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;ES_Framework.c: 357: } else
  6748                           
  6749                           ; BSR set to: 0
  6750  001234  0012               	return	
  6751  001236                     i2l2524:
  6752                           
  6753                           ;ES_Framework.c: 358: return 0;
  6754  001236  0E00               	movlw	0
  6755  001238  0012               	return	
  6756  00123A                     __end_ofi2_ES_PostToService:
  6757                           	opt stack 0
  6758                           tosu	equ	0xFFF
  6759                           tosh	equ	0xFFE
  6760                           tosl	equ	0xFFD
  6761                           pclatu	equ	0xFFB
  6762                           pclath	equ	0xFFA
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           intcon	equ	0xFF2
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           postinc1	equ	0xFE6
  6776                           fsr1h	equ	0xFE2
  6777                           fsr1l	equ	0xFE1
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function i2_ES_EnQueueFIFO *****************
  6786 ;; Defined at:
  6787 ;;		line 85 in file "ES_Queue.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  6790 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6791 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  6794 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  6795 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      unsigned char 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6805 ;;      Params:         5       0       0       0
  6806 ;;      Locals:         3       0       0       0
  6807 ;;      Temps:          3       0       0       0
  6808 ;;      Totals:        11       0       0       0
  6809 ;;Total ram usage:       11 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    1
  6812 ;; This function calls:
  6813 ;;		i2___awmod
  6814 ;;		i2___wmul
  6815 ;; This function is called by:
  6816 ;;		i2_ES_PostToService
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text47
  6821  000A6E                     __ptext47:
  6822                           	opt stack 0
  6823  000A6E                     i2_ES_EnQueueFIFO:
  6824                           	opt stack 18
  6825                           
  6826                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6827                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6828                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6829                           
  6830                           ;incstack = 0
  6831  000A6E  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  6832  000A72  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  6833                           
  6834                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6835  000A76  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6836  000A7A  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6837  000A7E  EE10 F002          	lfsr	1,2
  6838  000A82  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6839  000A84  26E1               	addwf	fsr1l,f,c
  6840  000A86  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6841  000A88  22E2               	addwfc	fsr1h,f,c
  6842  000A8A  50DE               	movf	postinc2,w,c
  6843  000A8C  5CE6               	subwf	postinc1,w,c
  6844  000A8E  B0D8               	btfsc	status,0,c
  6845  000A90  D046               	goto	i2l2308
  6846                           
  6847                           ;ES_Queue.c: 92: {
  6848                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6849  000A92  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  6850  000A96  9EF2               	bcf	intcon,7,c	;volatile
  6851                           
  6852                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6853                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6854  000A98  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  6855  000A9C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6856  000AA0  50DF               	movf	indf2,w,c
  6857  000AA2  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  6858  000AA4  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  6859  000AA6  6E03               	movwf	i2___awmod@divisor,c
  6860  000AA8  6A04               	clrf	i2___awmod@divisor+1,c
  6861  000AAA  EE20 F002          	lfsr	2,2
  6862  000AAE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6863  000AB0  26D9               	addwf	fsr2l,f,c
  6864  000AB2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6865  000AB4  22DA               	addwfc	fsr2h,f,c
  6866  000AB6  50DF               	movf	indf2,w,c
  6867  000AB8  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  6868  000ABA  EE20 F001          	lfsr	2,1
  6869  000ABE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6870  000AC0  26D9               	addwf	fsr2l,f,c
  6871  000AC2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6872  000AC4  22DA               	addwfc	fsr2h,f,c
  6873  000AC6  50DF               	movf	indf2,w,c
  6874  000AC8  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  6875  000ACA  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  6876  000ACC  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  6877  000ACE  6E01               	movwf	i2___awmod@dividend,c
  6878  000AD0  6A02               	clrf	i2___awmod@dividend+1,c
  6879  000AD2  3602               	rlcf	i2___awmod@dividend+1,f,c
  6880  000AD4  EC44  F008         	call	i2___awmod	;wreg free
  6881  000AD8  0E01               	movlw	1
  6882  000ADA  2401               	addwf	?i2___awmod,w,c
  6883  000ADC  6E07               	movwf	i2___wmul@multiplier,c
  6884  000ADE  0E00               	movlw	0
  6885  000AE0  2002               	addwfc	?i2___awmod+1,w,c
  6886  000AE2  6E08               	movwf	i2___wmul@multiplier+1,c
  6887  000AE4  0E00               	movlw	0
  6888  000AE6  6E0A               	movwf	i2___wmul@multiplicand+1,c
  6889  000AE8  0E03               	movlw	3
  6890  000AEA  6E09               	movwf	i2___wmul@multiplicand,c
  6891  000AEC  EC4E  F00A         	call	i2___wmul	;wreg free
  6892  000AF0  5007               	movf	?i2___wmul,w,c
  6893  000AF2  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  6894  000AF4  6ED9               	movwf	fsr2l,c
  6895  000AF6  5008               	movf	?i2___wmul+1,w,c
  6896  000AF8  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  6897  000AFA  6EDA               	movwf	fsr2h,c
  6898  000AFC  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  6899  000B00  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  6900  000B04  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  6901                           
  6902                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6903  000B08  EE20 F002          	lfsr	2,2
  6904  000B0C  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  6905  000B0E  26D9               	addwf	fsr2l,f,c
  6906  000B10  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  6907  000B12  22DA               	addwfc	fsr2h,f,c
  6908  000B14  2ADF               	incf	indf2,f,c
  6909                           
  6910                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6911  000B16  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6912                           
  6913                           ;ES_Queue.c: 101: return(1);
  6914  000B1A  0E01               	movlw	1
  6915                           
  6916                           ;ES_Queue.c: 102: }else
  6917  000B1C  0012               	return	
  6918  000B1E                     i2l2308:
  6919                           
  6920                           ;ES_Queue.c: 103: return(0);
  6921  000B1E  0E00               	movlw	0
  6922  000B20  0012               	return	
  6923  000B22                     __end_ofi2_ES_EnQueueFIFO:
  6924                           	opt stack 0
  6925                           tosu	equ	0xFFF
  6926                           tosh	equ	0xFFE
  6927                           tosl	equ	0xFFD
  6928                           pclatu	equ	0xFFB
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           postinc0	equ	0xFEE
  6938                           fsr0h	equ	0xFEA
  6939                           fsr0l	equ	0xFE9
  6940                           wreg	equ	0xFE8
  6941                           indf1	equ	0xFE7
  6942                           postinc1	equ	0xFE6
  6943                           fsr1h	equ	0xFE2
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function i2___wmul *****************
  6953 ;; Defined at:
  6954 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;  multiplier      2    6[COMRAM] unsigned int 
  6957 ;;  multiplicand    2    8[COMRAM] unsigned int 
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  __wmul          2   10[COMRAM] unsigned int 
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  2    6[COMRAM] unsigned int 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0, prodl, prodh
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6969 ;;      Params:         4       0       0       0
  6970 ;;      Locals:         2       0       0       0
  6971 ;;      Temps:          0       0       0       0
  6972 ;;      Totals:         6       0       0       0
  6973 ;;Total ram usage:        6 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		i2_ES_EnQueueFIFO
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           	psect	text48
  6983  00149C                     __ptext48:
  6984                           	opt stack 0
  6985  00149C                     i2___wmul:
  6986                           	opt stack 18
  6987                           
  6988                           ;incstack = 0
  6989  00149C  5007               	movf	i2___wmul@multiplier,w,c
  6990  00149E  0209               	mulwf	i2___wmul@multiplicand,c
  6991  0014A0  CFF3 F00B          	movff	prodl,i2___wmul@product
  6992  0014A4  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  6993  0014A8  5007               	movf	i2___wmul@multiplier,w,c
  6994  0014AA  020A               	mulwf	i2___wmul@multiplicand+1,c
  6995  0014AC  50F3               	movf	prodl,w,c
  6996  0014AE  260C               	addwf	i2___wmul@product+1,f,c
  6997  0014B0  5008               	movf	i2___wmul@multiplier+1,w,c
  6998  0014B2  0209               	mulwf	i2___wmul@multiplicand,c
  6999  0014B4  50F3               	movf	prodl,w,c
  7000  0014B6  260C               	addwf	i2___wmul@product+1,f,c
  7001  0014B8  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7002  0014BC  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7003  0014C0  0012               	return	
  7004  0014C2                     __end_ofi2___wmul:
  7005                           	opt stack 0
  7006                           tosu	equ	0xFFF
  7007                           tosh	equ	0xFFE
  7008                           tosl	equ	0xFFD
  7009                           pclatu	equ	0xFFB
  7010                           pclath	equ	0xFFA
  7011                           tblptru	equ	0xFF8
  7012                           tblptrh	equ	0xFF7
  7013                           tblptrl	equ	0xFF6
  7014                           tablat	equ	0xFF5
  7015                           prodh	equ	0xFF4
  7016                           prodl	equ	0xFF3
  7017                           intcon	equ	0xFF2
  7018                           postinc0	equ	0xFEE
  7019                           fsr0h	equ	0xFEA
  7020                           fsr0l	equ	0xFE9
  7021                           wreg	equ	0xFE8
  7022                           indf1	equ	0xFE7
  7023                           postinc1	equ	0xFE6
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           fsr2h	equ	0xFDA
  7030                           fsr2l	equ	0xFD9
  7031                           status	equ	0xFD8
  7032                           
  7033 ;; *************** function i2___awmod *****************
  7034 ;; Defined at:
  7035 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  dividend        2    0[COMRAM] int 
  7038 ;;  divisor         2    2[COMRAM] int 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  __awmod         1    5[COMRAM] unsigned char 
  7041 ;;  __awmod         1    4[COMRAM] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  2    0[COMRAM] int 
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7051 ;;      Params:         4       0       0       0
  7052 ;;      Locals:         2       0       0       0
  7053 ;;      Temps:          0       0       0       0
  7054 ;;      Totals:         6       0       0       0
  7055 ;;Total ram usage:        6 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		i2_ES_EnQueueFIFO
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           	psect	text49
  7065  001088                     __ptext49:
  7066                           	opt stack 0
  7067  001088                     i2___awmod:
  7068                           	opt stack 18
  7069                           
  7070                           ;incstack = 0
  7071  001088  0E00               	movlw	0
  7072  00108A  6E06               	movwf	i2___awmod@sign,c
  7073  00108C  AE02               	btfss	i2___awmod@dividend+1,7,c
  7074  00108E  D006               	goto	i2l2228
  7075  001090  6C01               	negf	i2___awmod@dividend,c
  7076  001092  1E02               	comf	i2___awmod@dividend+1,f,c
  7077  001094  B0D8               	btfsc	status,0,c
  7078  001096  2A02               	incf	i2___awmod@dividend+1,f,c
  7079  001098  0E01               	movlw	1
  7080  00109A  6E06               	movwf	i2___awmod@sign,c
  7081  00109C                     i2l2228:
  7082  00109C  AE04               	btfss	i2___awmod@divisor+1,7,c
  7083  00109E  D004               	goto	i2l2232
  7084  0010A0  6C03               	negf	i2___awmod@divisor,c
  7085  0010A2  1E04               	comf	i2___awmod@divisor+1,f,c
  7086  0010A4  B0D8               	btfsc	status,0,c
  7087  0010A6  2A04               	incf	i2___awmod@divisor+1,f,c
  7088  0010A8                     i2l2232:
  7089  0010A8  5003               	movf	i2___awmod@divisor,w,c
  7090  0010AA  1004               	iorwf	i2___awmod@divisor+1,w,c
  7091  0010AC  B4D8               	btfsc	status,2,c
  7092  0010AE  D018               	goto	i2l2248
  7093  0010B0  0E01               	movlw	1
  7094  0010B2  6E05               	movwf	i2___awmod@counter,c
  7095  0010B4  D004               	goto	i2l2238
  7096  0010B6                     i2l2236:
  7097  0010B6  90D8               	bcf	status,0,c
  7098  0010B8  3603               	rlcf	i2___awmod@divisor,f,c
  7099  0010BA  3604               	rlcf	i2___awmod@divisor+1,f,c
  7100  0010BC  2A05               	incf	i2___awmod@counter,f,c
  7101  0010BE                     i2l2238:
  7102  0010BE  AE04               	btfss	i2___awmod@divisor+1,7,c
  7103  0010C0  D7FA               	goto	i2l2236
  7104  0010C2                     i2l2240:
  7105  0010C2  5003               	movf	i2___awmod@divisor,w,c
  7106  0010C4  5C01               	subwf	i2___awmod@dividend,w,c
  7107  0010C6  5004               	movf	i2___awmod@divisor+1,w,c
  7108  0010C8  5802               	subwfb	i2___awmod@dividend+1,w,c
  7109  0010CA  A0D8               	btfss	status,0,c
  7110  0010CC  D004               	goto	i2l2244
  7111  0010CE  5003               	movf	i2___awmod@divisor,w,c
  7112  0010D0  5E01               	subwf	i2___awmod@dividend,f,c
  7113  0010D2  5004               	movf	i2___awmod@divisor+1,w,c
  7114  0010D4  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7115  0010D6                     i2l2244:
  7116  0010D6  90D8               	bcf	status,0,c
  7117  0010D8  3204               	rrcf	i2___awmod@divisor+1,f,c
  7118  0010DA  3203               	rrcf	i2___awmod@divisor,f,c
  7119  0010DC  2E05               	decfsz	i2___awmod@counter,f,c
  7120  0010DE  D7F1               	goto	i2l2240
  7121  0010E0                     i2l2248:
  7122  0010E0  5006               	movf	i2___awmod@sign,w,c
  7123  0010E2  B4D8               	btfsc	status,2,c
  7124  0010E4  D004               	goto	i2l2252
  7125  0010E6  6C01               	negf	i2___awmod@dividend,c
  7126  0010E8  1E02               	comf	i2___awmod@dividend+1,f,c
  7127  0010EA  B0D8               	btfsc	status,0,c
  7128  0010EC  2A02               	incf	i2___awmod@dividend+1,f,c
  7129  0010EE                     i2l2252:
  7130  0010EE  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7131  0010F2  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7132  0010F6  0012               	return	
  7133  0010F8                     __end_ofi2___awmod:
  7134                           	opt stack 0
  7135                           tosu	equ	0xFFF
  7136                           tosh	equ	0xFFE
  7137                           tosl	equ	0xFFD
  7138                           pclatu	equ	0xFFB
  7139                           pclath	equ	0xFFA
  7140                           tblptru	equ	0xFF8
  7141                           tblptrh	equ	0xFF7
  7142                           tblptrl	equ	0xFF6
  7143                           tablat	equ	0xFF5
  7144                           prodh	equ	0xFF4
  7145                           prodl	equ	0xFF3
  7146                           intcon	equ	0xFF2
  7147                           postinc0	equ	0xFEE
  7148                           fsr0h	equ	0xFEA
  7149                           fsr0l	equ	0xFE9
  7150                           wreg	equ	0xFE8
  7151                           indf1	equ	0xFE7
  7152                           postinc1	equ	0xFE6
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           tosu	equ	0xFFF
  7162                           tosh	equ	0xFFE
  7163                           tosl	equ	0xFFD
  7164                           pclatu	equ	0xFFB
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           postinc0	equ	0xFEE
  7174                           fsr0h	equ	0xFEA
  7175                           fsr0l	equ	0xFE9
  7176                           wreg	equ	0xFE8
  7177                           indf1	equ	0xFE7
  7178                           postinc1	equ	0xFE6
  7179                           fsr1h	equ	0xFE2
  7180                           fsr1l	equ	0xFE1
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188                           	psect	text50
  7189  000000                     __ptext50:
  7190                           	opt stack 0
  7191                           tosu	equ	0xFFF
  7192                           tosh	equ	0xFFE
  7193                           tosl	equ	0xFFD
  7194                           pclatu	equ	0xFFB
  7195                           pclath	equ	0xFFA
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           postinc0	equ	0xFEE
  7204                           fsr0h	equ	0xFEA
  7205                           fsr0l	equ	0xFE9
  7206                           wreg	equ	0xFE8
  7207                           indf1	equ	0xFE7
  7208                           postinc1	equ	0xFE6
  7209                           fsr1h	equ	0xFE2
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218                           	psect	rparam
  7219  0000                     tosu	equ	0xFFF
  7220                           tosh	equ	0xFFE
  7221                           tosl	equ	0xFFD
  7222                           pclatu	equ	0xFFB
  7223                           pclath	equ	0xFFA
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           postinc0	equ	0xFEE
  7232                           fsr0h	equ	0xFEA
  7233                           fsr0l	equ	0xFE9
  7234                           wreg	equ	0xFE8
  7235                           indf1	equ	0xFE7
  7236                           postinc1	equ	0xFE6
  7237                           fsr1h	equ	0xFE2
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           postinc2	equ	0xFDE
  7241                           postdec2	equ	0xFDD
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246                           	psect	temp
  7247  00003E                     btemp:
  7248                           	opt stack 0
  7249  00003E                     	ds	1
  7250  0000                     int$flags	set	btemp
  7251                           tosu	equ	0xFFF
  7252                           tosh	equ	0xFFE
  7253                           tosl	equ	0xFFD
  7254                           pclatu	equ	0xFFB
  7255                           pclath	equ	0xFFA
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           intcon	equ	0xFF2
  7263                           postinc0	equ	0xFEE
  7264                           fsr0h	equ	0xFEA
  7265                           fsr0l	equ	0xFE9
  7266                           wreg	equ	0xFE8
  7267                           indf1	equ	0xFE7
  7268                           postinc1	equ	0xFE6
  7269                           fsr1h	equ	0xFE2
  7270                           fsr1l	equ	0xFE1
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        0
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      61
    BANK0           160     44     136
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostAnalogService(), Absolute function(), PostButtonDebounceSM(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S186$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(BANK0[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S153$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunAnalogService(), RunCan_XmitService(), RunButtonDebounceSM(), 

    S153$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitAnalogService(), InitCan_XmitService(), InitializeButtonDebounce(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> Check4Keystroke(), CheckButtonEvents(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_AnalogISR
    _AnalogISR->_PostCan_XmitService
    _PostCan_XmitService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_CheckUserEvents
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostAnalogService
    _ES_Timer_Tick_Resp->_PostButtonDebounceSM
    _PostAnalogService->_ES_PostToService
    _XmitData->_GetBrightness
    _XmitData->_GetLocation
    _RunButtonDebounceSM->_ES_PostAll
    _ES_PostAll->_ES_EnQueueFIFO
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitAnalogService
    _ES_Initialize->_InitCan_XmitService
    _InitializeButtonDebounce->_ES_Timer_InitTimer
    _InitCan_XmitService->_ES_PostToService
    _InitAnalogService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   23001
                                             43 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   15826
                                             38 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunAnalogService *
                _RunButtonDebounceSM *
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6044
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6044
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostAnalogService *
               _PostButtonDebounceSM *
 ---------------------------------------------------------------------------------
 (4) _PostAnalogService                                    3     0      3    2806
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   8     5      3     135
                                             29 BANK0      8     5      3
                    _InitCanHardware
                           _InitPins
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              2 BANK0      1     1      0
                      _GetBrightness
                        _GetLocation
 ---------------------------------------------------------------------------------
 (4) _GetLocation                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetBrightness                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunButtonDebounceSM                                  6     3      3    3217
                                             29 BANK0      6     3      3
                         _ES_PostAll
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_PostAll                                           6     3      3    2575
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (2) _RunAnalogService                                     6     3      3     629
                                             29 BANK0      6     3      3
                 _ES_Timer_InitTimer
                       _InitAnalogHW
 ---------------------------------------------------------------------------------
 (3) _InitAnalogHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3178
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3088
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    2905
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6779
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitAnalogService *
                _InitCan_XmitService *
           _InitializeButtonDebounce *
 ---------------------------------------------------------------------------------
 (2) _InitializeButtonDebounce                             1     1      0     508
                                              5 BANK0      1     1      0
                 _ES_Timer_InitTimer
                       _GetInputLine
                       _InitButtonHW
 ---------------------------------------------------------------------------------
 (3) _InitButtonHW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     486
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitAnalogService                                    4     4      0    2776
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2731
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2289
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    1158
                                             37 COMRAM    16    16      0
                          _AnalogISR
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _AnalogISR                                            5     5      0    1158
                                             32 COMRAM     5     5      0
                _PostCan_XmitService
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _PostCan_XmitService                                 3     0      3     977
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitAnalogService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitializeButtonDebounce *
       _ES_Timer_InitTimer
       _GetInputLine
       _InitButtonHW
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunAnalogService *
       _ES_Timer_InitTimer
       _InitAnalogHW
     _RunButtonDebounceSM *
       _ES_PostAll
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _XmitData
         _GetBrightness
         _GetLocation
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostAnalogService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostButtonDebounceSM *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _AnalogISR
     _PostCan_XmitService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_ES_Timer_InitTimer
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2C      88       4       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5       9        0.0%
DATA                 0      0      C5      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec  9 22:15:41 2016

           Analog_Service@MyPriority 008D                     ??__HW_Timer_Init 00BE  
                 ??_RunAnalogService 00DC                  ES_CheckUserEvents@i 00E1  
         CheckButtonEvents@ReturnVal 00DC                  __HW_Timer_Init@Rate 00BC  
                ___wmul@multiplicand 00C4            __size_of_BusErrorResponse 0002  
                        __CFG_OSC$HS 000000                                  l521 0F7E  
                                l372 0D98                                  l518 0F22  
                                l495 08EE                                  l497 0904  
                                l498 091A                                  l499 0930  
              __end_of_ES_Initialize 07E4                                  _GIE 007F97  
                                _ISR 0008                         ___awmod@sign 00C1  
            __end_of_Check4Keystroke 1598                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00D0                  __end_of_GetLocation 1576  
            ES_EnQueueFIFO@Event2Add 00CA                        ?_InitAnalogHW 0001  
                  ?_ES_PostToService 00D3                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0080                                 l2210 1084  
                               l3010 0D6E                                 l3004 0D38  
                               l2150 0C88                                 l3006 0D4A  
                               l3014 0D80                                 l2160 0CB8  
                               l2400 05B8                                 l3008 0D5C  
                               l2162 0CBE                                 l2170 0CF0  
                               l2154 0C98                                 l2174 0D04  
                               l2166 0CE2                                 l2158 0CAC  
                               l2344 11B0                                 l2360 0FAA  
                               l2280 0C66                                 l2194 08C2  
                               l2506 130C                                 l2266 0BD4  
                               l2348 11C6                                 l2612 04C0  
                               l2356 0FA0                                 l2700 097A  
                               l2276 0C60                                 l2550 0B42  
                               l2608 04A4                                 l2704 098C  
                               l2544 0B24                                 l2640 1504  
                               l2618 04E8                                 l2570 0BB4  
                               l2802 0688                                 l2740 1260  
                               l2388 0502                                 l2636 14FC  
                               l2812 06F2                                 l2582 129A  
                               l2558 0B72                                 l2398 057A  
                               l2728 13EA                                 l2568 0BA4  
                               l2808 06DC                                 l2658 141A  
                               l2578 1290                                 l2498 12E4  
                               l2746 1276                                 l2850 13A0  
                               l2780 075C                                 l2772 0714  
                               l2676 08E2                                 l2776 0758  
                               l2792 07E0                                 l2768 070A  
                               l2848 1398                                 l2698 0946  
                               l2788 07DA                                 l2796 0606  
                               _ADIE 007CEE                                 _ADIF 007CF6  
                               STR_1 036B                                 STR_2 0386  
                               STR_3 039E                                 STR_4 03B5  
                               u1154 0BFA                                 u1155 0BF2  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u1418 12B0  
                               u1419 12C8                                 u1618 07B4  
                               u1298 0562                                 u1619 07D0  
                               _PIE1 000F9D                                 u1658 06B2  
                               u1659 06CA                                 _PEIE 007F96  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00D6  
                               _main 0D0E                          ?_ES_DeQueue 00C8  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 003E                        main@ErrorType 00E7  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D9  
       __end_ofi2_ES_Timer_InitTimer 1166                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      ?_InitButtonHW 0001                    _PostAnalogService 1526  
   __end_of_InitializeButtonDebounce 144C                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00D9                         ___param_bank 000010  
                 ?_PostAnalogService 00D9                 __end_of_GetInputLine 158E  
              __end_of_GetBrightness 1580              __end_of_InitCanHardware 0F9A  
                              ??_ISR 0026                   ES_Run@HighestPrior 00E6  
                        ?_ES_PostAll 00D3                  ??_PostAnalogService 00DC  
                              ?_main 0001                __end_of_ES_Timer_Init 1560  
                    __end_of___awmod 0D0E                      __end_of___lbmod 1318  
                              _T1CON 000FCD                           _DistList00 0369  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _ERRIE 007D1D                                _ERRIF 007D25  
                              i2l229 0A32                                _IRXIE 007D1F  
                              _IRXIF 007D27           __size_of_CheckButtonEvents 006A  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                         _Brightness 0085                        __CFG_PWRT$OFF 000000  
                              _Ready 0089                       ??_InitAnalogHW 00BC  
                AnalogISR@Event2Post 0023                                _putch 1598  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 14C2  
          __end_of_PostAnalogService 153C                                status 000FD8  
                     ??_InitButtonHW 00BC                   __size_ofi2___awmod 0070  
                    __initialization 1476               ES_GetMSBitSet@LoopCntr 00C5  
         __end_of_ES_CheckUserEvents 12D4                         __end_of_main 0D9A  
                  ES_Timer_Init@Rate 00BE                   __size_of_AnalogISR 0088  
                   __end_of_InitPins 14FA           PostAnalogService@ThisEvent 00D9  
          RunAnalogService@ThisEvent 00D9                          _GetLocation 156C  
                __end_of_EventQueues 0365                               ??_main 00E7  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 1510                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1       RunButtonDebounceSM@ReturnEvent 00DC  
                   __end_of_XmitData 0F1E                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 0093  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BE  
                             i2l2240 10C2                               i2l2232 10A8  
                             i2l2252 10EE                               i2l2244 10D6  
                             i2l2236 10B6                               i2l2228 109C  
                             i2l2308 0B1E                               i2l2238 10BE  
                             i2l2248 10E0                               i2l2524 1236  
                             i2l2920 0A0A                               i2l2834 0DD0  
                             i2l2914 0A00                               i2l2932 0A1E  
                             i2l2926 0A14                               i2l2938 0A28  
                             _INTCON 000FF2                  __size_of_ES_PostAll 0078  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0604                               _TXB0D0 000F46  
                             _TXB0D1 000F47                               _TXB0D2 000F48  
                             _TXB0D3 000F49                               _TXB0D4 000F4A  
             ??_PostButtonDebounceSM 00DC                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 00CD                       _Timer2PostFunc 0321  
                             _Queue0 0095                               _Queue1 00A1  
                             _Queue2 00AD                       _SysTickCounter 003A  
                             ___wmul 1354                            ??___awmod 00C0  
                          ??___lbmod 00BD                     ?_InitCanHardware 0001  
           _InitializeButtonDebounce 141E          RunAnalogService@ReturnEvent 00DC  
       __size_of_RunButtonDebounceSM 00A6                  _PostCan_XmitService 153C  
        __size_of_ES_Timer_InitTimer 0080                               clear_0 147C  
                             clear_1 1488                     _BusErrorResponse 159C  
                    ___awmod@divisor 00BE            ES_Timer_InitTimer@NewTime 00BC  
                    ___awmod@counter 00C0                               _printf 138A  
                        ISR@LastTime 0036                    _InitAnalogService 13BE  
             ES_InitQueue@pThisQueue 00BF                    __end_ofi2___awmod 10F8  
               i2_ES_Timer_InitTimer 10F8                         __mediumconst 0000  
                        ISR@NextTime 0038                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                 ?_InitAnalogService 0001                               putch@c 0001  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 0116  
               ES_DeQueue@pThisQueue 00D0              ES_GetMSBitSet@Val2Check 00BC  
               ?_PostCan_XmitService 001E          InitCan_XmitService@Priority 00DC  
                  __end_of_AnalogISR 0E22                      ___lbmod@divisor 00BC  
                ??_InitAnalogService 00D9                           __accesstop 0060  
            __end_of__initialization 148E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BE           __size_of_PostAnalogService 0016  
                    __CFG_PBADEN$OFF 000000                __size_of_GetInputLine 0006  
                      ___rparam_used 000001                          _EventQueues 035C  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
               __end_of_InitAnalogHW 1476                        ?_ES_InitQueue 00BC  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 159A  
                    _TMR_ActiveFlags 008B            __end_of_InitAnalogService 13EE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00C3  
        __end_of_InitCan_XmitService 141E            __size_of_RunAnalogService 0050  
               __end_of_InitButtonHW 156C                ?i2_ES_Timer_InitTimer 0001  
                     _TMR_TimerArray 0060                         _GetInputLine 1588  
              ??_PostCan_XmitService 0021             ES_EnQueueFIFO@pThisQueue 00D1  
                            ??_putch 00BC             __HW_Process_Pending_Ints 14FA  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00CC  
        __size_of_RunCan_XmitService 00DA            __size_of_ES_PostToService 0076  
                     ??_ES_InitQueue 00BF                              ?___wmul 00C2  
                       ??_ES_PostAll 00D6         RunButtonDebounceSM@ThisEvent 00D9  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                        ES_PostAll@i 00D8                              _ECANCON 000F77  
                            ?_printf 00BC                           ??i2___wmul 000B  
                 __end_of_ES_DeQueue 04EE               i2ES_EnQueueFIFO@pBlock 000D  
                            _TXB0DLC 000F45                           ??_InitPins 00BC  
                 __end_of_ES_PostAll 1012                      __size_of_ES_Run 00F4  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
          i2ES_EnQueueFIFO@Event2Add 000F                              ___awmod 0C6C  
                            ___lbmod 12D4                  ES_PostAll@ThisEvent 00D3  
                    __size_of___wmul 0036                         __psmallconst 0300  
                         ??_XmitData 00BE                ES_Timer_InitTimer@Num 00C0  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1476  
                       ?_GetLocation 00BC                              __ramtop 0300  
         __size_of_InitAnalogService 0030                              __ptext0 0D0E  
                            __ptext1 138A                              __ptext2 1598  
                            __ptext3 0604                              __ptext4 14FA  
                            __ptext5 04EE                              __ptext6 1510  
                            __ptext7 1526                              __ptext8 0BC8  
                            __ptext9 123A             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034               ??i2_ES_Timer_InitTimer 0003  
                       __size_of_ISR 0A66              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 00BC                   _ES_CheckUserEvents 128A  
                    ES_Run@ThisEvent 00B9                       __pintcode_body 09A0  
             __size_of_GetBrightness 000A                 end_of_initialization 148E  
                _RunButtonDebounceSM 0B22                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 159E            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 09A0  
                i2___wmul@multiplier 0007         ES_PostToService@WhichService 00D8  
              __size_of_InitAnalogHW 002A           ??_InitializeButtonDebounce 00C1  
             __size_of_ES_Timer_Init 000E            __size_of_CanErrorResponse 0002  
                            printf@c 00C0                              printf@f 00BC  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ?_RunButtonDebounceSM 00D9                 ??_ES_CheckUserEvents 00E1  
              __size_of_InitButtonHW 000C           InitAnalogService@ThisEvent 00D9  
                   _RunAnalogService 123A                        _ES_Initialize 06F8  
                   ___lbmod@dividend 00BD                            _TRISAbits 000F92  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0369  
                       _InitAnalogHW 144C                 __end_of_ES_InitQueue 1354  
                          i2___awmod 1088                       ES_Initialize@i 00DF  
                        ___lbmod@rem 00BF             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 06F8                            _AnalogISR 0D9A  
      __size_of_PostButtonDebounceSM 0016          RunCan_XmitService@ThisEvent 00D9  
                       _InitButtonHW 1560                   __end_of_DistList00 036B  
                   _ES_PostToService 1012           __end_of_ES_Timer_InitTimer 0EA2  
              ??_RunButtonDebounceSM 00DC                        _GetBrightness 1576  
               __end_of_ServDescList 035C                       __end_of___wmul 138A  
                  ??_CanXmitResponse 0001                       ?_ES_Initialize 00DD  
         ??__HW_Process_Pending_Ints 00E0                        _ES_Timer_Init 1552  
                   i2___wmul@product 000B                       __end_of_printf 13BE  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 0604  
                start_initialization 1476                          __end_of_ISR 0A6E  
                  __size_ofi2___wmul 0026                         _CurrentState 0090  
                         ?i2___awmod 0001                          _CANSTATbits 000F6E  
                           ??_ES_Run 00E2                            _TickCount 0094  
                         ?_AnalogISR 0001           __end_ofi2_ES_PostToService 123A  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                     ?_GetBrightness 00BC                             ??___wmul 00C6  
            i2ES_Timer_InitTimer@Num 0005              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00BE  
                     ?_ES_Timer_Init 00BE                    __size_of_XmitData 007C  
               __size_of_GetLocation 000A                       __HW_Timer_Init 14C2  
        __end_of_PostCan_XmitService 1552                          __pbssCOMRAM 0036  
                      __pcstackBANK0 00BC                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00BC  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 0030  
         __end_of_RunCan_XmitService 09A0                     i2_ES_EnQueueFIFO 0A6E  
CheckButtonEvents@CurrentButtonState 00E0                        __PRIMASK_temp 003C  
                   _CanErrorResponse 159A                    ??_Check4Keystroke 00BC  
                          __pintcode 0008                             ?___awmod 00BC  
                           ?___lbmod 00BC          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00DF             ES_PostToService@TheEvent 00D3  
             __end_of__HW_Timer_Init 14E0        PostButtonDebounceSM@ThisEvent 00D9  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
       PostCan_XmitService@ThisEvent 001E                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00DD  
                  ??_InitCanHardware 00BC            ES_GetMSBitSet@Nybble2Test 00C4  
                  ?_BusErrorResponse 0001                       ___wmul@product 00C6  
                        ??_AnalogISR 0021             __end_of_RunAnalogService 128A  
                 ??_BusErrorResponse 0001                      ??_GetBrightness 00BE  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 1318  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 00C0       i2ES_PostToService@WhichService 001D  
          InitAnalogService@Priority 00DC                      ?__HW_Timer_Init 00BC  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 00C2  
                           i2___wmul 149C        __size_ofi2_ES_Timer_InitTimer 006E  
                 ES_DeQueue@SaveCrit 00CE                 ES_EnQueueFIFO@pBlock 00C8  
           __end_of_ES_PostToService 1088                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _LastData 0092                             _InitPins 14E0  
                           _Location 0087                      _CanXmitResponse 158E  
                           __Hrparam 0000                       _ES_GetMSBitSet 0BC8  
                           __Lrparam 0000                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                             _XmitData 0EA2  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 1580                       _ES_EnQueueFIFO 07E4  
  __size_of_InitializeButtonDebounce 002E         __end_of_PostButtonDebounceSM 1526  
          ?_InitializeButtonDebounce 0001                     XmitData@DataByte 00BE  
                 _ES_Timer_InitTimer 0E22                        ?_GetInputLine 0001  
             __end_of_BitNum2SetMask 0321                             __ptext10 0B22  
                           __ptext11 08C6                             __ptext20 12D4  
                           __ptext12 0EA2                             __ptext21 128A  
                           __ptext13 156C                             __ptext30 0E22  
                           __ptext22 1594                             __ptext14 1576  
                           __ptext31 1012                             __ptext23 1166  
                           __ptext15 14E0                             __ptext40 1580  
                           __ptext32 07E4                             __ptext24 06F8  
                           __ptext16 0F1E                             __ptext41 159A  
                           __ptext33 1354                             __ptext25 13BE  
                           __ptext17 0F9A                             __ptext50 0000  
                           __ptext42 159C                             __ptext34 0C6C  
                           __ptext26 13EE                             __ptext18 144C  
                           __ptext43 0D9A                             __ptext35 1552  
                           __ptext27 141E                             __ptext19 03C6  
                           __ptext44 10F8                             __ptext36 14C2  
                           __ptext28 1560                             __ptext45 153C  
                           __ptext37 1318                             __ptext29 1588  
                           __ptext46 11D0                             __ptext47 0A6E  
                           __ptext39 158E                             __ptext48 149C  
                           __ptext49 1088    ES_Timer_Tick_Resp@NeedsProcessing 0083  
                ?_ES_Timer_InitTimer 00BC                        __size_of_main 008C  
                 _ES_Timer_Tick_Resp 04EE               __end_of_ES_GetMSBitSet 0C6C  
        __end_of_RunButtonDebounceSM 0BC8                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 1588               __end_of_ES_EnQueueFIFO 08C6  
                           int$flags 003E                  _InitCan_XmitService 13EE  
               ??_ES_Timer_InitTimer 00BE                    ES_DeQueue@NumLeft 00CF  
                 i2_ES_PostToService 11D0             __end_ofi2_ES_EnQueueFIFO 0B22  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 159C  
                     ??_GetInputLine 00BC                  ?i2_ES_PostToService 0018  
                  _CheckButtonEvents 1166                 ??_ES_Timer_Tick_Resp 00DC  
      RunCan_XmitService@ReturnEvent 00DE                   ?_CheckButtonEvents 0001  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 1594  
                    _Check4Keystroke 1594                             intlevel2 0000  
          Can_XmitService@MyPriority 008E                           _ES_DeQueue 03C6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
   InitializeButtonDebounce@Priority 00C1                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 00BC                  ??_CheckButtonEvents 00DC  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 008F  
                 _RunCan_XmitService 08C6                             printf@ap 00BE  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 00C8  
                         _ES_PostAll 0F9A                        ??_GetLocation 00BE  
                   ES_DeQueue@pBlock 00C8                  ?_RunCan_XmitService 00D9  
                    _InitCanHardware 0F1E            __end_of_CheckButtonEvents 11D0  
                    _LastButtonState 0091               ES_DeQueue@pReturnEvent 00CA  
              ES_InitQueue@BlockSize 00BE                ??_InitCan_XmitService 00D9  
       __size_of_PostCan_XmitService 0016                 ??_RunCan_XmitService 00DC  
               _PostButtonDebounceSM 1510                    ?_RunAnalogService 00D9  
         CheckButtonEvents@ThisEvent 00DD  
