

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec  2 15:15:09 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _BitNum2SetMask:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  0002               	dw	2
    59  000305  0004               	dw	4
    60  000307  0008               	dw	8
    61  000309  0010               	dw	16
    62  00030B  0020               	dw	32
    63  00030D  0040               	dw	64
    64  00030F  0080               	dw	128
    65  000311  0100               	dw	256
    66  000313  0200               	dw	512
    67  000315  0400               	dw	1024
    68  000317  0800               	dw	2048
    69  000319  1000               	dw	4096
    70  00031B  2000               	dw	8192
    71  00031D  4000               	dw	16384
    72  00031F  8000               	dw	32768
    73  000321                     __end_of_BitNum2SetMask:
    74                           	opt stack 0
    75  000321                     _Timer2PostFunc:
    76                           	opt stack 0
    77  000321  00                 	db	0
    78  000322  00                 	db	0
    79  000323  00                 	db	0
    80  000324  00                 	db	0
    81  000325  00                 	db	0
    82  000326  00                 	db	0
    83  000327  00                 	db	0
    84  000328  00                 	db	0
    85  000329  00                 	db	0
    86  00032A  00                 	db	0
    87  00032B  00                 	db	0
    88  00032C  00                 	db	0
    89  00032D  00                 	db	0
    90  00032E  00                 	db	0
    91  00032F  00                 	db	0
    92  000330  00                 	db	0
    93  000331  00                 	db	0
    94  000332  00                 	db	0
    95  000333  00                 	db	0
    96  000334  00                 	db	0
    97  000335  00                 	db	0
    98  000336  00                 	db	0
    99  000337  00                 	db	0
   100  000338  00                 	db	0
   101  000339  00                 	db	0
   102  00033A  00                 	db	0
   103  00033B  00                 	db	0
   104  00033C  00                 	db	0
   105  00033D  00                 	db	0
   106  00033E  00                 	db	0
   107  00033F  00                 	db	0
   108  000340  00                 	db	0
   109  000341                     __end_of_Timer2PostFunc:
   110                           	opt stack 0
   111  000341                     _Nybble2MSBitNum:
   112                           	opt stack 0
   113  000341  00                 	db	0
   114  000342  01                 	db	1
   115  000343  01                 	db	1
   116  000344  02                 	db	2
   117  000345  02                 	db	2
   118  000346  02                 	db	2
   119  000347  02                 	db	2
   120  000348  03                 	db	3
   121  000349  03                 	db	3
   122  00034A  03                 	db	3
   123  00034B  03                 	db	3
   124  00034C  03                 	db	3
   125  00034D  03                 	db	3
   126  00034E  03                 	db	3
   127  00034F  03                 	db	3
   128  000350                     __end_of_Nybble2MSBitNum:
   129                           	opt stack 0
   130  000350                     _ServDescList:
   131                           	opt stack 0
   132  000350  96                 	db	low _InitCanRX_Service
   133  000351  0F                 	db	high _InitCanRX_Service
   134  000352  A4                 	db	low _RunCanRX_Service
   135  000353  0D                 	db	high _RunCanRX_Service
   136  000354                     __end_of_ServDescList:
   137                           	opt stack 0
   138  000354                     _EventQueues:
   139                           	opt stack 0
   140  000354  3C                 	db	low _Queue0
   141  000355  00                 	db	high _Queue0
   142  000356  04                 	db	4
   143  000357                     __end_of_EventQueues:
   144                           	opt stack 0
   145  000357                     _ES_EventList:
   146                           	opt stack 0
   147  000357  96                 	db	low _Check4Keystroke
   148  000358  10                 	db	high _Check4Keystroke
   149  000359                     __end_of_ES_EventList:
   150                           	opt stack 0
   151  000359                     _DistList00:
   152                           	opt stack 0
   153  000359  60                 	db	low _PostCanRX_Service
   154  00035A  10                 	db	high _PostCanRX_Service
   155  00035B                     __end_of_DistList00:
   156                           	opt stack 0
   157  0000                     _RXF0EIDH	set	3842
   158  0000                     _RXF0EIDL	set	3843
   159  0000                     _RXF0SIDH	set	3840
   160  0000                     _RXF0SIDL	set	3841
   161  0000                     _RXM0EIDH	set	3866
   162  0000                     _RXM0EIDL	set	3867
   163  0000                     _RXM0SIDH	set	3864
   164  0000                     _RXM0SIDL	set	3865
   165  0000                     _TXB0CONbits	set	3904
   166  0000                     _ADCON1	set	4033
   167  0000                     _BRGCON1bits	set	3952
   168  0000                     _BRGCON2bits	set	3953
   169  0000                     _BRGCON3bits	set	3954
   170  0000                     _CANCON	set	3951
   171  0000                     _CANSTATbits	set	3950
   172  0000                     _CCP1CON	set	4029
   173  0000                     _CCPR1H	set	4031
   174  0000                     _CCPR1L	set	4030
   175  0000                     _CIOCON	set	3955
   176  0000                     _ECANCON	set	3959
   177  0000                     _INTCON	set	4082
   178  0000                     _LATA	set	3977
   179  0000                     _LATB	set	3978
   180  0000                     _PIE1	set	3997
   181  0000                     _PORTA	set	3968
   182  0000                     _PORTB	set	3969
   183  0000                     _RXB0CONbits	set	3936
   184  0000                     _RXB0D0	set	3942
   185  0000                     _RXB0EIDH	set	3939
   186  0000                     _RXB0EIDL	set	3940
   187  0000                     _RXB0SIDH	set	3937
   188  0000                     _RXB0SIDL	set	3938
   189  0000                     _T1CON	set	4045
   190  0000                     _TRISA	set	3986
   191  0000                     _TRISBbits	set	3987
   192  0000                     _CCP1IF	set	31986
   193  0000                     _ERRIE	set	32029
   194  0000                     _ERRIF	set	32037
   195  0000                     _GIE	set	32663
   196  0000                     _IRCF0	set	32412
   197  0000                     _IRCF1	set	32413
   198  0000                     _IRCF2	set	32414
   199  0000                     _IRXIE	set	32031
   200  0000                     _IRXIF	set	32039
   201  0000                     _LATA0	set	31816
   202  0000                     _LATA1	set	31817
   203  0000                     _LATA2	set	31818
   204  0000                     _LATA3	set	31819
   205  0000                     _PEIE	set	32662
   206  0000                     _RXB0IE	set	32024
   207  0000                     _RXB0IF	set	32032
   208  0000                     _SCS1	set	32409
   209  0000                     _TXB0IE	set	32026
   210  0000                     _TXB0IF	set	32034
   211  00035B                     STR_1:
   212  00035B  46                 	db	70	;'F'
   213  00035C  61                 	db	97	;'a'
   214  00035D  69                 	db	105	;'i'
   215  00035E  6C                 	db	108	;'l'
   216  00035F  65                 	db	101	;'e'
   217  000360  64                 	db	100	;'d'
   218  000361  20                 	db	32
   219  000362  6F                 	db	111	;'o'
   220  000363  6E                 	db	110	;'n'
   221  000364  20                 	db	32
   222  000365  61                 	db	97	;'a'
   223  000366  74                 	db	116	;'t'
   224  000367  74                 	db	116	;'t'
   225  000368  65                 	db	101	;'e'
   226  000369  6D                 	db	109	;'m'
   227  00036A  70                 	db	112	;'p'
   228  00036B  74                 	db	116	;'t'
   229  00036C  20                 	db	32
   230  00036D  74                 	db	116	;'t'
   231  00036E  6F                 	db	111	;'o'
   232  00036F  20                 	db	32
   233  000370  50                 	db	80	;'P'
   234  000371  6F                 	db	111	;'o'
   235  000372  73                 	db	115	;'s'
   236  000373  74                 	db	116	;'t'
   237  000374  0A                 	db	10
   238  000375  00                 	db	0
   239  000376                     STR_2:
   240  000376  46                 	db	70	;'F'
   241  000377  61                 	db	97	;'a'
   242  000378  69                 	db	105	;'i'
   243  000379  6C                 	db	108	;'l'
   244  00037A  65                 	db	101	;'e'
   245  00037B  64                 	db	100	;'d'
   246  00037C  20                 	db	32
   247  00037D  6F                 	db	111	;'o'
   248  00037E  6E                 	db	110	;'n'
   249  00037F  20                 	db	32
   250  000380  4E                 	db	78	;'N'
   251  000381  55                 	db	85	;'U'
   252  000382  4C                 	db	76	;'L'
   253  000383  4C                 	db	76	;'L'
   254  000384  20                 	db	32
   255  000385  70                 	db	112	;'p'
   256  000386  6F                 	db	111	;'o'
   257  000387  69                 	db	105	;'i'
   258  000388  6E                 	db	110	;'n'
   259  000389  74                 	db	116	;'t'
   260  00038A  65                 	db	101	;'e'
   261  00038B  72                 	db	114	;'r'
   262  00038C  0A                 	db	10
   263  00038D  00                 	db	0
   264  00038E                     STR_3:
   265  00038E  46                 	db	70	;'F'
   266  00038F  61                 	db	97	;'a'
   267  000390  69                 	db	105	;'i'
   268  000391  6C                 	db	108	;'l'
   269  000392  65                 	db	101	;'e'
   270  000393  64                 	db	100	;'d'
   271  000394  20                 	db	32
   272  000395  49                 	db	73	;'I'
   273  000396  6E                 	db	110	;'n'
   274  000397  69                 	db	105	;'i'
   275  000398  74                 	db	116	;'t'
   276  000399  69                 	db	105	;'i'
   277  00039A  61                 	db	97	;'a'
   278  00039B  6C                 	db	108	;'l'
   279  00039C  69                 	db	105	;'i'
   280  00039D  7A                 	db	122	;'z'
   281  00039E  61                 	db	97	;'a'
   282  00039F  74                 	db	116	;'t'
   283  0003A0  69                 	db	105	;'i'
   284  0003A1  6F                 	db	111	;'o'
   285  0003A2  6E                 	db	110	;'n'
   286  0003A3  0A                 	db	10
   287  0003A4  00                 	db	0
   288  0003A5                     STR_4:
   289  0003A5  4F                 	db	79	;'O'
   290  0003A6  74                 	db	116	;'t'
   291  0003A7  68                 	db	104	;'h'
   292  0003A8  65                 	db	101	;'e'
   293  0003A9  72                 	db	114	;'r'
   294  0003AA  20                 	db	32
   295  0003AB  46                 	db	70	;'F'
   296  0003AC  61                 	db	97	;'a'
   297  0003AD  69                 	db	105	;'i'
   298  0003AE  6C                 	db	108	;'l'
   299  0003AF  75                 	db	117	;'u'
   300  0003B0  72                 	db	114	;'r'
   301  0003B1  65                 	db	101	;'e'
   302  0003B2  0A                 	db	10
   303  0003B3  00                 	db	0
   304                           
   305                           ; #config settings
   306  0003B4  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  000FC6                     __pcinit:
   310                           	opt stack 0
   311  000FC6                     start_initialization:
   312                           	opt stack 0
   313  000FC6                     __initialization:
   314                           	opt stack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (47 bytes)
   317  000FC6  EE00  F060         	lfsr	0,__pbssBANK0
   318  000FCA  0E2F               	movlw	47
   319  000FCC                     clear_0:
   320  000FCC  6AEE               	clrf	postinc0,c
   321  000FCE  06E8               	decf	wreg,f,c
   322  000FD0  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to COMRAM (20 bytes)
   325  000FD2  EE00  F034         	lfsr	0,__pbssCOMRAM
   326  000FD6  0E14               	movlw	20
   327  000FD8                     clear_1:
   328  000FD8  6AEE               	clrf	postinc0,c
   329  000FDA  06E8               	decf	wreg,f,c
   330  000FDC  E1FD               	bnz	clear_1
   331  000FDE                     end_of_initialization:
   332                           	opt stack 0
   333  000FDE                     __end_of__initialization:
   334                           	opt stack 0
   335  000FDE  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  000FE0  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  000FE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   338  000FE4  6EF8               	movwf	tblptru,c
   339  000FE6  0100               	movlb	0
   340  000FE8  EF9D  F005         	goto	_main	;jump to C main() function
   341                           tblptru	equ	0xFF8
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	bssCOMRAM
   346  000034                     __pbssCOMRAM:
   347                           	opt stack 0
   348  000034                     ISR@LastTime:
   349                           	opt stack 0
   350  000034                     	ds	2
   351  000036                     ISR@NextTime:
   352                           	opt stack 0
   353  000036                     	ds	2
   354  000038                     _SysTickCounter:
   355                           	opt stack 0
   356  000038                     	ds	2
   357  00003A                     __PRIMASK_temp:
   358                           	opt stack 0
   359  00003A                     	ds	2
   360  00003C                     _Queue0:
   361                           	opt stack 0
   362  00003C                     	ds	12
   363                           tblptru	equ	0xFF8
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367                           	psect	bssBANK0
   368  000060                     __pbssBANK0:
   369                           	opt stack 0
   370  000060                     _TMR_TimerArray:
   371                           	opt stack 0
   372  000060                     	ds	32
   373  000080                     ES_Timer_Tick_Resp@NewEvent:
   374                           	opt stack 0
   375  000080                     	ds	3
   376  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   377                           	opt stack 0
   378  000083                     	ds	2
   379  000085                     _Ready:
   380                           	opt stack 0
   381  000085                     	ds	2
   382  000087                     _TMR_ActiveFlags:
   383                           	opt stack 0
   384  000087                     	ds	2
   385  000089                     ES_Timer_Tick_Resp@NextTimer2Process:
   386                           	opt stack 0
   387  000089                     	ds	1
   388  00008A                     _MyPriority:
   389                           	opt stack 0
   390  00008A                     	ds	1
   391  00008B                     _TickCount:
   392                           	opt stack 0
   393  00008B                     	ds	1
   394  00008C                     ES_Run@ThisEvent:
   395                           	opt stack 0
   396  00008C                     	ds	3
   397                           tblptru	equ	0xFF8
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	cstackBANK0
   402  00008F                     __pcstackBANK0:
   403                           	opt stack 0
   404  00008F                     ?_printf:
   405                           	opt stack 0
   406  00008F                     ?___awmod:
   407                           	opt stack 0
   408  00008F                     ?_RunCanRX_Service:
   409                           	opt stack 0
   410  00008F                     ES_CheckUserEvents@i:
   411                           	opt stack 0
   412  00008F                     ___lbmod@divisor:
   413                           	opt stack 0
   414  00008F                     ES_GetMSBitSet@Val2Check:
   415                           	opt stack 0
   416  00008F                     __HW_Timer_Init@Rate:
   417                           	opt stack 0
   418  00008F                     ES_InitQueue@pBlock:
   419                           	opt stack 0
   420  00008F                     printf@f:
   421                           	opt stack 0
   422  00008F                     ___awmod@dividend:
   423                           	opt stack 0
   424  00008F                     RunCanRX_Service@ThisEvent:
   425                           	opt stack 0
   426                           
   427                           ; 3 bytes @ 0x0
   428  00008F                     	ds	1
   429  000090                     ___lbmod@dividend:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x1
   433  000090                     	ds	1
   434  000091                     ??_ES_GetMSBitSet:
   435  000091                     ES_InitQueue@BlockSize:
   436                           	opt stack 0
   437  000091                     ___lbmod@counter:
   438                           	opt stack 0
   439  000091                     ES_Timer_Init@Rate:
   440                           	opt stack 0
   441  000091                     printf@ap:
   442                           	opt stack 0
   443  000091                     ___awmod@divisor:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x2
   447  000091                     	ds	1
   448  000092                     ___lbmod@rem:
   449                           	opt stack 0
   450  000092                     ES_InitQueue@pThisQueue:
   451                           	opt stack 0
   452  000092                     RunCanRX_Service@ReturnEvent:
   453                           	opt stack 0
   454                           
   455                           ; 3 bytes @ 0x3
   456  000092                     	ds	1
   457  000093                     printf@c:
   458                           	opt stack 0
   459  000093                     ___awmod@counter:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x4
   463  000093                     	ds	1
   464  000094                     ___awmod@sign:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x5
   468  000094                     	ds	1
   469  000095                     ?___wmul:
   470                           	opt stack 0
   471  000095                     ___wmul@multiplier:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x6
   475  000095                     	ds	1
   476  000096                     ES_GetMSBitSet@ReturnVal:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x7
   480  000096                     	ds	1
   481  000097                     ES_GetMSBitSet@Nybble2Test:
   482                           	opt stack 0
   483  000097                     ___wmul@multiplicand:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x8
   487  000097                     	ds	1
   488  000098                     ES_GetMSBitSet@LoopCntr:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x9
   492  000098                     	ds	1
   493  000099                     ??_ES_Timer_Tick_Resp:
   494  000099                     ___wmul@product:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0xA
   498  000099                     	ds	2
   499  00009B                     ES_EnQueueFIFO@pBlock:
   500                           	opt stack 0
   501  00009B                     ES_DeQueue@pBlock:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0xC
   505  00009B                     	ds	2
   506  00009D                     ES_DeQueue@pReturnEvent:
   507                           	opt stack 0
   508  00009D                     ES_EnQueueFIFO@Event2Add:
   509                           	opt stack 0
   510                           
   511                           ; 3 bytes @ 0xE
   512  00009D                     	ds	2
   513  00009F                     ??_ES_DeQueue:
   514                           
   515                           ; 1 bytes @ 0x10
   516  00009F                     	ds	1
   517  0000A0                     ??_ES_EnQueueFIFO:
   518                           
   519                           ; 1 bytes @ 0x11
   520  0000A0                     	ds	1
   521  0000A1                     ES_DeQueue@SaveCrit:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x12
   525  0000A1                     	ds	1
   526  0000A2                     ES_DeQueue@NumLeft:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x13
   530  0000A2                     	ds	1
   531  0000A3                     ES_EnQueueFIFO@SaveCrit:
   532                           	opt stack 0
   533  0000A3                     ES_DeQueue@pThisQueue:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x14
   537  0000A3                     	ds	1
   538  0000A4                     ES_EnQueueFIFO@pThisQueue:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x15
   542  0000A4                     	ds	1
   543  0000A5                     ??_ES_Run:
   544                           
   545                           ; 1 bytes @ 0x16
   546  0000A5                     	ds	1
   547  0000A6                     ES_PostToService@TheEvent:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x17
   551  0000A6                     	ds	3
   552  0000A9                     ??_ES_PostToService:
   553  0000A9                     ES_Run@HighestPrior:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x1A
   557  0000A9                     	ds	2
   558  0000AB                     ES_PostToService@WhichService:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1C
   562  0000AB                     	ds	1
   563  0000AC                     InitCanRX_Service@ThisEvent:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x1D
   567  0000AC                     	ds	3
   568  0000AF                     InitCanRX_Service@Priority:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x20
   572  0000AF                     	ds	1
   573  0000B0                     ES_Initialize@NewRate:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x21
   577  0000B0                     	ds	2
   578  0000B2                     ES_Initialize@i:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x23
   582  0000B2                     	ds	1
   583  0000B3                     main@ErrorType:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x24
   587  0000B3                     	ds	1
   588                           tblptru	equ	0xFF8
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           
   592                           	psect	cstackCOMRAM
   593  000001                     __pcstackCOMRAM:
   594                           	opt stack 0
   595  000001                     ?i2___awmod:
   596                           	opt stack 0
   597  000001                     i2___awmod@dividend:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x0
   601  000001                     	ds	2
   602  000003                     i2___awmod@divisor:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x2
   606  000003                     	ds	2
   607  000005                     i2___awmod@counter:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x4
   611  000005                     	ds	1
   612  000006                     i2___awmod@sign:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x5
   616  000006                     	ds	1
   617  000007                     ?i2___wmul:
   618                           	opt stack 0
   619  000007                     i2___wmul@multiplier:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x6
   623  000007                     	ds	2
   624  000009                     i2___wmul@multiplicand:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x8
   628  000009                     	ds	2
   629  00000B                     i2___wmul@product:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0xA
   633  00000B                     	ds	2
   634  00000D                     i2ES_EnQueueFIFO@pBlock:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0xC
   638  00000D                     	ds	2
   639  00000F                     i2ES_EnQueueFIFO@Event2Add:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0xE
   643  00000F                     	ds	3
   644  000012                     ??i2_ES_EnQueueFIFO:
   645                           
   646                           ; 1 bytes @ 0x11
   647  000012                     	ds	3
   648  000015                     i2ES_EnQueueFIFO@SaveCrit:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x14
   652  000015                     	ds	1
   653  000016                     i2ES_EnQueueFIFO@pThisQueue:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x15
   657  000016                     	ds	2
   658  000018                     i2ES_PostToService@TheEvent:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x17
   662  000018                     	ds	3
   663  00001B                     ??i2_ES_PostToService:
   664                           
   665                           ; 1 bytes @ 0x1A
   666  00001B                     	ds	2
   667  00001D                     i2ES_PostToService@WhichService:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x1C
   671  00001D                     	ds	1
   672  00001E                     PostCanRX_Service@ThisEvent:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x1D
   676  00001E                     	ds	3
   677  000021                     ProcessReceive@Event2Post:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x20
   681  000021                     	ds	3
   682  000024                     ??_ISR:
   683                           
   684                           ; 1 bytes @ 0x23
   685  000024                     	ds	16
   686                           tblptru	equ	0xFF8
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           
   690 ;;
   691 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   692 ;;
   693 ;; *************** function _main *****************
   694 ;; Defined at:
   695 ;;		line 25 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  ErrorType       1   36[BANK0 ] enum E15646
   700 ;; Return value:  Size  Location     Type
   701 ;;                  2  299[None  ] int 
   702 ;; Registers used:
   703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   709 ;;      Params:         0       0       0       0
   710 ;;      Locals:         0       1       0       0
   711 ;;      Temps:          0       0       0       0
   712 ;;      Totals:         0       1       0       0
   713 ;;Total ram usage:        1 bytes
   714 ;; Hardware stack levels required when called:   12
   715 ;; This function calls:
   716 ;;		_ES_Initialize
   717 ;;		_ES_Run
   718 ;;		_printf
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text0
   725  000B3A                     __ptext0:
   726                           	opt stack 0
   727  000B3A                     _main:
   728                           	opt stack 19
   729                           
   730                           ;main.c: 28: IRCF0 = 1;
   731                           
   732                           ;incstack = 0
   733  000B3A  88D3               	bsf	4051,4,c	;volatile
   734                           
   735                           ;main.c: 29: IRCF1 = 1;
   736  000B3C  8AD3               	bsf	4051,5,c	;volatile
   737                           
   738                           ;main.c: 30: IRCF2 = 1;
   739  000B3E  8CD3               	bsf	4051,6,c	;volatile
   740                           
   741                           ;main.c: 31: SCS1 = 1;
   742  000B40  82D3               	bsf	4051,1,c	;volatile
   743                           
   744                           ;main.c: 32: ADCON1 = 0x0F;
   745  000B42  0E0F               	movlw	15
   746  000B44  6EC1               	movwf	4033,c	;volatile
   747                           
   748                           ;main.c: 40: ES_Return_t ErrorType;
   749                           ;main.c: 56: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   750  000B46  0E9C               	movlw	156
   751  000B48  0100               	movlb	0	; () banked
   752  000B4A  6FB1               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   753  000B4C  0E3F               	movlw	63
   754  000B4E  6FB0               	movwf	ES_Initialize@NewRate& (0+255),b
   755  000B50  ECE9  F002         	call	_ES_Initialize	;wreg free
   756  000B54  0100               	movlb	0	; () banked
   757  000B56  6FB3               	movwf	main@ErrorType& (0+255),b
   758                           
   759                           ; BSR set to: 0
   760                           ;main.c: 57: if ( ErrorType == Success ) {
   761  000B58  0100               	movlb	0	; () banked
   762  000B5A  51B3               	movf	main@ErrorType& (0+255),w,b
   763  000B5C  0100               	movlb	0	; () banked
   764  000B5E  A4D8               	btfss	status,2,c
   765  000B60  D029               	goto	l2403
   766                           
   767                           ; BSR set to: 0
   768                           ;main.c: 59: ErrorType = ES_Run();
   769  000B62  EC6F  F002         	call	_ES_Run	;wreg free
   770  000B66  0100               	movlb	0	; () banked
   771  000B68  6FB3               	movwf	main@ErrorType& (0+255),b
   772                           
   773                           ; BSR set to: 0
   774                           ;main.c: 61: }
   775                           ;main.c: 63: switch (ErrorType){
   776  000B6A  D024               	goto	l2403
   777  000B6C                     l2393:
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 65: printf("Failed on attempt to Post\n");
   781  000B6C  0E5B               	movlw	low STR_1
   782  000B6E  0100               	movlb	0	; () banked
   783  000B70  6F8F               	movwf	printf@f& (0+255),b
   784  000B72  0E03               	movlw	high STR_1
   785  000B74  0100               	movlb	0	; () banked
   786  000B76  6F90               	movwf	(printf@f+1)& (0+255),b
   787  000B78  ECB1  F007         	call	_printf	;wreg free
   788                           
   789                           ;main.c: 66: break;
   790  000B7C  D027               	goto	l307
   791  000B7E                     l2395:
   792                           
   793                           ;main.c: 68: printf("Failed on NULL pointer\n");
   794  000B7E  0E76               	movlw	low STR_2
   795  000B80  0100               	movlb	0	; () banked
   796  000B82  6F8F               	movwf	printf@f& (0+255),b
   797  000B84  0E03               	movlw	high STR_2
   798  000B86  0100               	movlb	0	; () banked
   799  000B88  6F90               	movwf	(printf@f+1)& (0+255),b
   800  000B8A  ECB1  F007         	call	_printf	;wreg free
   801                           
   802                           ;main.c: 69: break;
   803  000B8E  D01E               	goto	l307
   804  000B90                     l2397:
   805                           
   806                           ;main.c: 71: printf("Failed Initialization\n");
   807  000B90  0E8E               	movlw	low STR_3
   808  000B92  0100               	movlb	0	; () banked
   809  000B94  6F8F               	movwf	printf@f& (0+255),b
   810  000B96  0E03               	movlw	high STR_3
   811  000B98  0100               	movlb	0	; () banked
   812  000B9A  6F90               	movwf	(printf@f+1)& (0+255),b
   813  000B9C  ECB1  F007         	call	_printf	;wreg free
   814                           
   815                           ;main.c: 72: break;
   816  000BA0  D015               	goto	l307
   817  000BA2                     l2399:
   818                           
   819                           ;main.c: 74: printf("Other Failure\n");
   820  000BA2  0EA5               	movlw	low STR_4
   821  000BA4  0100               	movlb	0	; () banked
   822  000BA6  6F8F               	movwf	printf@f& (0+255),b
   823  000BA8  0E03               	movlw	high STR_4
   824  000BAA  0100               	movlb	0	; () banked
   825  000BAC  6F90               	movwf	(printf@f+1)& (0+255),b
   826  000BAE  ECB1  F007         	call	_printf	;wreg free
   827                           
   828                           ;main.c: 76: }
   829                           
   830                           ;main.c: 75: break;
   831  000BB2  D00C               	goto	l307
   832  000BB4                     l2403:
   833  000BB4  0100               	movlb	0	; () banked
   834  000BB6  51B3               	movf	main@ErrorType& (0+255),w,b
   835                           
   836                           ; Switch size 1, requested type "space"
   837                           ; Number of cases is 3, Range of values is 1 to 5
   838                           ; switch strategies available:
   839                           ; Name         Instructions Cycles
   840                           ; simple_byte           10     6 (average)
   841                           ;	Chosen strategy is simple_byte
   842  000BB8  0A01               	xorlw	1	; case 1
   843  000BBA  B4D8               	btfsc	status,2,c
   844  000BBC  D7D7               	goto	l2393
   845  000BBE  0A02               	xorlw	2	; case 3
   846  000BC0  B4D8               	btfsc	status,2,c
   847  000BC2  D7DD               	goto	l2395
   848  000BC4  0A06               	xorlw	6	; case 5
   849  000BC6  B4D8               	btfsc	status,2,c
   850  000BC8  D7E3               	goto	l2397
   851  000BCA  D7EB               	goto	l2399
   852  000BCC                     l307:
   853                           
   854                           ;main.c: 78: ;
   855  000BCC  D7FF               	goto	l307
   856  000BCE                     __end_of_main:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           status	equ	0xFD8
   862                           
   863 ;; *************** function _printf *****************
   864 ;; Defined at:
   865 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   868 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  tmpval          4    0        struct .
   871 ;;  cp              3    0        PTR const unsigned char 
   872 ;;  ap              2    2[BANK0 ] PTR void [1]
   873 ;;		 -> ?_printf(2), 
   874 ;;  len             2    0        unsigned int 
   875 ;;  val             2    0        unsigned int 
   876 ;;  c               1    4[BANK0 ] char 
   877 ;;  flag            1    0        unsigned char 
   878 ;;  prec            1    0        char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  2    0[BANK0 ] int 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   888 ;;      Params:         0       2       0       0
   889 ;;      Locals:         0       3       0       0
   890 ;;      Temps:          0       0       0       0
   891 ;;      Totals:         0       5       0       0
   892 ;;Total ram usage:        5 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    8
   895 ;; This function calls:
   896 ;;		_putch
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text1
   903  000F62                     __ptext1:
   904                           	opt stack 0
   905  000F62                     _printf:
   906                           	opt stack 22
   907                           
   908                           ;doprnt.c: 466: va_list ap;
   909                           ;doprnt.c: 499: signed char c;
   910                           ;doprnt.c: 506: signed char prec;
   911                           ;doprnt.c: 508: unsigned char flag;
   912                           ;doprnt.c: 523: union {
   913                           ;doprnt.c: 524: unsigned long vd;
   914                           ;doprnt.c: 525: double integ;
   915                           ;doprnt.c: 526: } tmpval;
   916                           ;doprnt.c: 528: unsigned int val;
   917                           ;doprnt.c: 529: unsigned len;
   918                           ;doprnt.c: 530: const char * cp;
   919                           ;doprnt.c: 533: *ap = __va_start();
   920                           
   921                           ;incstack = 0
   922  000F62  0E91               	movlw	low (?_printf+2)
   923  000F64  0100               	movlb	0	; () banked
   924  000F66  6F91               	movwf	printf@ap& (0+255),b
   925  000F68  0E00               	movlw	high (?_printf+2)
   926  000F6A  0100               	movlb	0	; () banked
   927  000F6C  6F92               	movwf	(printf@ap+1)& (0+255),b
   928                           
   929                           ;doprnt.c: 536: while(c = *f++) {
   930  000F6E  D004               	goto	l2209
   931  000F70                     l2207:
   932                           
   933                           ; BSR set to: 0
   934                           ;doprnt.c: 540: {
   935                           ;doprnt.c: 541: (putch(c) );
   936  000F70  0100               	movlb	0	; () banked
   937  000F72  5193               	movf	printf@c& (0+255),w,b
   938  000F74  EC4D  F008         	call	_putch
   939  000F78                     l2209:
   940  000F78  C08F  FFF6         	movff	printf@f,tblptrl
   941  000F7C  C090  FFF7         	movff	printf@f+1,tblptrh
   942  000F80  0100               	movlb	0	; () banked
   943  000F82  4B8F               	infsnz	printf@f& (0+255),f,b
   944  000F84  2B90               	incf	(printf@f+1)& (0+255),f,b
   945  000F86                     	if	0	;tblptru may be non-zero
   946  000F86                     	endif
   947  000F86                     	if	0	;tblptru may be non-zero
   948  000F86                     	endif
   949  000F86  0008               	tblrd		*
   950  000F88  CFF5 F093          	movff	tablat,printf@c
   951  000F8C  0100               	movlb	0	; () banked
   952  000F8E  5193               	movf	printf@c& (0+255),w,b
   953  000F90  B4D8               	btfsc	status,2,c
   954  000F92  0012               	return	
   955  000F94  D7ED               	goto	l2207
   956  000F96                     __end_of_printf:
   957                           	opt stack 0
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           status	equ	0xFD8
   965                           
   966 ;; *************** function _putch *****************
   967 ;; Defined at:
   968 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  c               1    wreg     unsigned char 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  c               1    0[COMRAM] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   982 ;;      Params:         0       0       0       0
   983 ;;      Locals:         0       0       0       0
   984 ;;      Temps:          0       0       0       0
   985 ;;      Totals:         0       0       0       0
   986 ;;Total ram usage:        0 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    7
   989 ;; This function calls:
   990 ;;		Nothing
   991 ;; This function is called by:
   992 ;;		_printf
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text2
   997  00109A                     __ptext2:
   998                           	opt stack 0
   999  00109A                     _putch:
  1000                           	opt stack 22
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;incstack = 0
  1004  00109A  0012               	return		;funcret
  1005  00109C                     __end_of_putch:
  1006                           	opt stack 0
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _ES_Run *****************
  1016 ;; Defined at:
  1017 ;;		line 277 in file "ES_Framework.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  HighestPrior    1   26[BANK0 ] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      enum E15494
  1024 ;; Registers used:
  1025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1031 ;;      Params:         0       0       0       0
  1032 ;;      Locals:         0       1       0       0
  1033 ;;      Temps:          0       4       0       0
  1034 ;;      Totals:         0       5       0       0
  1035 ;;Total ram usage:        5 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:   10
  1038 ;; This function calls:
  1039 ;;		_ES_CheckUserEvents
  1040 ;;		_ES_DeQueue
  1041 ;;		_ES_GetMSBitSet
  1042 ;;		_RunCanRX_Service
  1043 ;;		__HW_Process_Pending_Ints
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text3
  1050  0004DE                     __ptext3:
  1051                           	opt stack 0
  1052  0004DE                     _ES_Run:
  1053                           	opt stack 20
  1054                           
  1055                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1056                           
  1057                           ;incstack = 0
  1058                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1059                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1060                           ;ES_Framework.c: 282: while(1){
  1061  0004DE  D06B               	goto	l2187
  1062  0004E0                     l2175:
  1063                           
  1064                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1065  0004E0  C085  F08F         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1066  0004E4  C086  F090         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1067  0004E8  ECFA  F004         	call	_ES_GetMSBitSet	;wreg free
  1068  0004EC  0100               	movlb	0	; () banked
  1069  0004EE  6FA9               	movwf	ES_Run@HighestPrior& (0+255),b
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1073  0004F0  0100               	movlb	0	; () banked
  1074  0004F2  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1075  0004F4  0D03               	mullw	3
  1076  0004F6  0E54               	movlw	low _EventQueues
  1077  0004F8  24F3               	addwf	prodl,w,c
  1078  0004FA  6EF6               	movwf	tblptrl,c
  1079  0004FC  0E03               	movlw	high _EventQueues
  1080  0004FE  20F4               	addwfc	prodh,w,c
  1081  000500  6EF7               	movwf	tblptrh,c
  1082  000502                     	if	0	;There are less than 3 active tblptr bytes
  1083  000502                     	endif
  1084  000502  0009               	tblrd		*+
  1085  000504  CFF5 F09B          	movff	tablat,ES_DeQueue@pBlock
  1086  000508  000A               	tblrd		*-
  1087  00050A  CFF5 F09C          	movff	tablat,ES_DeQueue@pBlock+1
  1088  00050E  0E8C               	movlw	low ES_Run@ThisEvent
  1089  000510  0100               	movlb	0	; () banked
  1090  000512  6F9D               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1091  000514  0E00               	movlw	high ES_Run@ThisEvent
  1092  000516  0100               	movlb	0	; () banked
  1093  000518  6F9E               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1094  00051A  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1095  00051E  0900               	iorlw	0
  1096  000520  A4D8               	btfss	status,2,c
  1097  000522  D01F               	goto	l2181
  1098                           
  1099                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1100  000524  0100               	movlb	0	; () banked
  1101  000526  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1102  000528  0D02               	mullw	2
  1103  00052A  0E01               	movlw	low _BitNum2SetMask
  1104  00052C  24F3               	addwf	prodl,w,c
  1105  00052E  6EF6               	movwf	tblptrl,c
  1106  000530  0E03               	movlw	high _BitNum2SetMask
  1107  000532  20F4               	addwfc	prodh,w,c
  1108  000534  6EF7               	movwf	tblptrh,c
  1109  000536                     	if	0	;There are less than 3 active tblptr bytes
  1110  000536                     	endif
  1111  000536  0009               	tblrd		*+
  1112  000538  CFF5 F0A5          	movff	tablat,??_ES_Run
  1113  00053C  0009               	tblrd		*+
  1114  00053E  CFF5 F0A6          	movff	tablat,??_ES_Run+1
  1115  000542  0100               	movlb	0	; () banked
  1116  000544  1DA5               	comf	??_ES_Run& (0+255),w,b
  1117  000546  0100               	movlb	0	; () banked
  1118  000548  6FA7               	movwf	(??_ES_Run+2)& (0+255),b
  1119  00054A  0100               	movlb	0	; () banked
  1120  00054C  1DA6               	comf	(??_ES_Run+1)& (0+255),w,b
  1121  00054E  0100               	movlb	0	; () banked
  1122  000550  6FA8               	movwf	(??_ES_Run+3)& (0+255),b
  1123  000552  0100               	movlb	0	; () banked
  1124  000554  51A7               	movf	(??_ES_Run+2)& (0+255),w,b
  1125  000556  0100               	movlb	0	; () banked
  1126  000558  1785               	andwf	_Ready& (0+255),f,b
  1127  00055A  0100               	movlb	0	; () banked
  1128  00055C  51A8               	movf	(??_ES_Run+3)& (0+255),w,b
  1129  00055E  0100               	movlb	0	; () banked
  1130  000560  1786               	andwf	(_Ready+1)& (0+255),f,b
  1131  000562                     l2181:
  1132                           
  1133                           ;ES_Framework.c: 291: }
  1134                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1135  000562  C08C  F08F         	movff	ES_Run@ThisEvent,RunCanRX_Service@ThisEvent
  1136  000566  C08D  F090         	movff	ES_Run@ThisEvent+1,RunCanRX_Service@ThisEvent+1
  1137  00056A  C08E  F091         	movff	ES_Run@ThisEvent+2,RunCanRX_Service@ThisEvent+2
  1138  00056E  0100               	movlb	0	; () banked
  1139  000570  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1140  000572  0D04               	mullw	4
  1141  000574  0E02               	movlw	2
  1142  000576  26F3               	addwf	prodl,f,c
  1143  000578  0E00               	movlw	0
  1144  00057A  22F4               	addwfc	prodh,f,c
  1145  00057C  0E50               	movlw	low _ServDescList
  1146  00057E  24F3               	addwf	prodl,w,c
  1147  000580  6EF6               	movwf	tblptrl,c
  1148  000582  0E03               	movlw	high _ServDescList
  1149  000584  20F4               	addwfc	prodh,w,c
  1150  000586  6EF7               	movwf	tblptrh,c
  1151  000588                     	if	0	;There are less than 3 active tblptr bytes
  1152  000588                     	endif
  1153  000588  D801               	call	u1298
  1154  00058A  D00C               	goto	u1299
  1155  00058C                     u1298:
  1156  00058C  0005               	push	
  1157  00058E  6EFA               	movwf	pclath,c
  1158  000590  0009               	tblrd		*+
  1159  000592  50F5               	movf	tablat,w,c
  1160  000594  6EFD               	movwf	tosl,c
  1161  000596  0009               	tblrd		*+
  1162  000598  50F5               	movf	tablat,w,c
  1163  00059A  6EFE               	movwf	tosh,c
  1164  00059C  50F8               	movf	tblptru,w,c
  1165  00059E  6EFF               	movwf	tosu,c
  1166  0005A0  50FA               	movf	pclath,w,c
  1167  0005A2  0012               	return		;indir
  1168  0005A4                     u1299:
  1169  0005A4  0E8F               	movlw	low ?_RunCanRX_Service
  1170  0005A6  6ED9               	movwf	fsr2l,c
  1171  0005A8  0E00               	movlw	high ?_RunCanRX_Service
  1172  0005AA  6EDA               	movwf	fsr2h,c
  1173  0005AC  50DF               	movf	indf2,w,c
  1174  0005AE  B4D8               	btfsc	status,2,c
  1175  0005B0  D002               	goto	l2187
  1176                           
  1177                           ;ES_Framework.c: 293: return FailedRun;
  1178  0005B2  0E02               	movlw	2
  1179  0005B4  0012               	return	
  1180  0005B6                     l2187:
  1181  0005B6  EC25  F008         	call	__HW_Process_Pending_Ints	;wreg free
  1182  0005BA  0900               	iorlw	0
  1183  0005BC  B4D8               	btfsc	status,2,c
  1184  0005BE  D006               	goto	l2191
  1185  0005C0  0100               	movlb	0	; () banked
  1186  0005C2  5185               	movf	_Ready& (0+255),w,b
  1187  0005C4  0100               	movlb	0	; () banked
  1188  0005C6  1186               	iorwf	(_Ready+1)& (0+255),w,b
  1189  0005C8  A4D8               	btfss	status,2,c
  1190  0005CA  D78A               	goto	l2175
  1191  0005CC                     l2191:
  1192                           
  1193                           ;ES_Framework.c: 294: }
  1194                           ;ES_Framework.c: 295: }
  1195                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1196  0005CC  EC31  F007         	call	_ES_CheckUserEvents	;wreg free
  1197  0005D0  D7F2               	goto	l2187
  1198  0005D2                     __end_of_ES_Run:
  1199                           	opt stack 0
  1200                           tosu	equ	0xFFF
  1201                           tosh	equ	0xFFE
  1202                           tosl	equ	0xFFD
  1203                           pclath	equ	0xFFA
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           indf2	equ	0xFDF
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function __HW_Process_Pending_Ints *****************
  1218 ;; Defined at:
  1219 ;;		line 220 in file "ES_Port.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;		None
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      unsigned char 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1233 ;;      Params:         0       0       0       0
  1234 ;;      Locals:         0       0       0       0
  1235 ;;      Temps:          0       0       0       0
  1236 ;;      Totals:         0       0       0       0
  1237 ;;Total ram usage:        0 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    9
  1240 ;; This function calls:
  1241 ;;		_ES_Timer_Tick_Resp
  1242 ;; This function is called by:
  1243 ;;		_ES_Run
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text4
  1248  00104A                     __ptext4:
  1249                           	opt stack 0
  1250  00104A                     __HW_Process_Pending_Ints:
  1251                           	opt stack 20
  1252                           
  1253                           ;ES_Port.c: 222: while (TickCount > 0)
  1254                           
  1255                           ;incstack = 0
  1256  00104A  D004               	goto	l2083
  1257  00104C                     l2079:
  1258                           
  1259                           ;ES_Port.c: 223: {
  1260                           ;ES_Port.c: 225: ES_Timer_Tick_Resp();
  1261  00104C  ECD0  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1262                           
  1263                           ;ES_Port.c: 226: TickCount--;
  1264  001050  0100               	movlb	0	; () banked
  1265  001052  078B               	decf	_TickCount& (0+255),f,b	;volatile
  1266  001054                     l2083:
  1267  001054  0100               	movlb	0	; () banked
  1268  001056  518B               	movf	_TickCount& (0+255),w,b	;volatile
  1269  001058  A4D8               	btfss	status,2,c
  1270  00105A  D7F8               	goto	l2079
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;ES_Port.c: 227: }
  1274                           ;ES_Port.c: 229: return 1;
  1275                           
  1276                           ; BSR set to: 0
  1277  00105C  0E01               	movlw	1
  1278  00105E  0012               	return	
  1279  001060                     __end_of__HW_Process_Pending_Ints:
  1280                           	opt stack 0
  1281                           tosu	equ	0xFFF
  1282                           tosh	equ	0xFFE
  1283                           tosl	equ	0xFFD
  1284                           pclath	equ	0xFFA
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           prodh	equ	0xFF4
  1290                           prodl	equ	0xFF3
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           indf2	equ	0xFDF
  1294                           fsr2h	equ	0xFDA
  1295                           fsr2l	equ	0xFD9
  1296                           status	equ	0xFD8
  1297                           
  1298 ;; *************** function _ES_Timer_Tick_Resp *****************
  1299 ;; Defined at:
  1300 ;;		line 284 in file "ES_Timers.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;		None
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1314 ;;      Params:         0       0       0       0
  1315 ;;      Locals:         0       0       0       0
  1316 ;;      Temps:          0       4       0       0
  1317 ;;      Totals:         0       4       0       0
  1318 ;;Total ram usage:        4 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    8
  1321 ;; This function calls:
  1322 ;;		_ES_GetMSBitSet
  1323 ;; This function is called by:
  1324 ;;		__HW_Process_Pending_Ints
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text5
  1329  0007A0                     __ptext5:
  1330                           	opt stack 0
  1331  0007A0                     _ES_Timer_Tick_Resp:
  1332                           	opt stack 20
  1333                           
  1334                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1335                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1336                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1337                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;incstack = 0
  1341  0007A0  0100               	movlb	0	; () banked
  1342  0007A2  5187               	movf	_TMR_ActiveFlags& (0+255),w,b
  1343  0007A4  0100               	movlb	0	; () banked
  1344  0007A6  1188               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1345  0007A8  B4D8               	btfsc	status,2,c
  1346  0007AA  0012               	return	
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;ES_Timers.c: 291: {
  1350                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1351  0007AC  C087  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1352  0007B0  C088  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1353  0007B4                     l1937:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1357  0007B4  C083  F08F         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1358  0007B8  C084  F090         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1359  0007BC  ECFA  F004         	call	_ES_GetMSBitSet	;wreg free
  1360  0007C0  0100               	movlb	0	; () banked
  1361  0007C2  6F89               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1365  0007C4  0100               	movlb	0	; () banked
  1366  0007C6  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1367  0007C8  0D02               	mullw	2
  1368  0007CA  0E60               	movlw	low _TMR_TimerArray
  1369  0007CC  24F3               	addwf	prodl,w,c
  1370  0007CE  6ED9               	movwf	fsr2l,c
  1371  0007D0  0E00               	movlw	high _TMR_TimerArray
  1372  0007D2  20F4               	addwfc	prodh,w,c
  1373  0007D4  6EDA               	movwf	fsr2h,c
  1374  0007D6  06DE               	decf	postinc2,f,c
  1375  0007D8  0E00               	movlw	0
  1376  0007DA  5ADD               	subwfb	postdec2,f,c
  1377  0007DC  50DE               	movf	postinc2,w,c
  1378  0007DE  10DE               	iorwf	postinc2,w,c
  1379  0007E0  A4D8               	btfss	status,2,c
  1380  0007E2  D026               	goto	l1947
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;ES_Timers.c: 299: {
  1384                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1385  0007E4  0E03               	movlw	3
  1386  0007E6  0100               	movlb	0	; () banked
  1387  0007E8  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1391  0007EA  C089  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1392  0007EE  0100               	movlb	0	; () banked
  1393  0007F0  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1397  0007F2  0100               	movlb	0	; () banked
  1398  0007F4  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1399  0007F6  0D02               	mullw	2
  1400  0007F8  0E01               	movlw	low _BitNum2SetMask
  1401  0007FA  24F3               	addwf	prodl,w,c
  1402  0007FC  6EF6               	movwf	tblptrl,c
  1403  0007FE  0E03               	movlw	high _BitNum2SetMask
  1404  000800  20F4               	addwfc	prodh,w,c
  1405  000802  6EF7               	movwf	tblptrh,c
  1406  000804                     	if	0	;There are less than 3 active tblptr bytes
  1407  000804                     	endif
  1408  000804  0009               	tblrd		*+
  1409  000806  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1410  00080A  0009               	tblrd		*+
  1411  00080C  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1412  000810  0100               	movlb	0	; () banked
  1413  000812  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1414  000814  0100               	movlb	0	; () banked
  1415  000816  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1416  000818  0100               	movlb	0	; () banked
  1417  00081A  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1418  00081C  0100               	movlb	0	; () banked
  1419  00081E  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1420  000820  0100               	movlb	0	; () banked
  1421  000822  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1422  000824  0100               	movlb	0	; () banked
  1423  000826  1787               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1424  000828  0100               	movlb	0	; () banked
  1425  00082A  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1426  00082C  0100               	movlb	0	; () banked
  1427  00082E  1788               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1428  000830                     l1947:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;ES_Timers.c: 306: }
  1432                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1433  000830  0100               	movlb	0	; () banked
  1434  000832  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1435  000834  0D02               	mullw	2
  1436  000836  0E01               	movlw	low _BitNum2SetMask
  1437  000838  24F3               	addwf	prodl,w,c
  1438  00083A  6EF6               	movwf	tblptrl,c
  1439  00083C  0E03               	movlw	high _BitNum2SetMask
  1440  00083E  20F4               	addwfc	prodh,w,c
  1441  000840  6EF7               	movwf	tblptrh,c
  1442  000842                     	if	0	;There are less than 3 active tblptr bytes
  1443  000842                     	endif
  1444  000842  0009               	tblrd		*+
  1445  000844  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1446  000848  0009               	tblrd		*+
  1447  00084A  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1448  00084E  0100               	movlb	0	; () banked
  1449  000850  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1450  000852  0100               	movlb	0	; () banked
  1451  000854  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1452  000856  0100               	movlb	0	; () banked
  1453  000858  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1454  00085A  0100               	movlb	0	; () banked
  1455  00085C  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1456  00085E  0100               	movlb	0	; () banked
  1457  000860  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1458  000862  0100               	movlb	0	; () banked
  1459  000864  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1460  000866  0100               	movlb	0	; () banked
  1461  000868  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1462  00086A  0100               	movlb	0	; () banked
  1463  00086C  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1467  00086E  0100               	movlb	0	; () banked
  1468  000870  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1469  000872  0100               	movlb	0	; () banked
  1470  000874  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1471  000876  B4D8               	btfsc	status,2,c
  1472  000878  0012               	return	
  1473  00087A  D79C               	goto	l1937
  1474  00087C                     __end_of_ES_Timer_Tick_Resp:
  1475                           	opt stack 0
  1476                           tosu	equ	0xFFF
  1477                           tosh	equ	0xFFE
  1478                           tosl	equ	0xFFD
  1479                           pclath	equ	0xFFA
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           prodh	equ	0xFF4
  1485                           prodl	equ	0xFF3
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           indf2	equ	0xFDF
  1489                           postinc2	equ	0xFDE
  1490                           postdec2	equ	0xFDD
  1491                           fsr2h	equ	0xFDA
  1492                           fsr2l	equ	0xFD9
  1493                           status	equ	0xFD8
  1494                           
  1495 ;; *************** function _ES_GetMSBitSet *****************
  1496 ;; Defined at:
  1497 ;;		line 79 in file "ES_LookupTables.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  LoopCntr        1    9[BANK0 ] char 
  1502 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1503 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      unsigned char 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1513 ;;      Params:         0       2       0       0
  1514 ;;      Locals:         0       3       0       0
  1515 ;;      Temps:          0       5       0       0
  1516 ;;      Totals:         0      10       0       0
  1517 ;;Total ram usage:       10 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    7
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_ES_Run
  1524 ;;		_ES_Timer_Tick_Resp
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text6
  1529  0009F4                     __ptext6:
  1530                           	opt stack 0
  1531  0009F4                     _ES_GetMSBitSet:
  1532                           	opt stack 20
  1533                           
  1534                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1535                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1536                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;incstack = 0
  1540  0009F4  0E80               	movlw	128
  1541  0009F6  0100               	movlb	0	; () banked
  1542  0009F8  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1543                           
  1544                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1545  0009FA  0E03               	movlw	3
  1546  0009FC  0100               	movlb	0	; () banked
  1547  0009FE  6F98               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1548  000A00                     l1857:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1552  000A00  0100               	movlb	0	; () banked
  1553  000A02  BF98               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1554  000A04  D046               	goto	l1871
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1558                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1559                           ;ES_LookupTables.c: 91: 0x0F);
  1560                           
  1561                           ; BSR set to: 0
  1562                           
  1563                           ; BSR set to: 0
  1564  000A06  0100               	movlb	0	; () banked
  1565  000A08  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1566  000A0A  0D04               	mullw	4
  1567  000A0C  CFF3 F091          	movff	prodl,??_ES_GetMSBitSet
  1568  000A10  C08F  F092         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1569  000A14  C090  F093         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1570  000A18  0100               	movlb	0	; () banked
  1571  000A1A  2B91               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1572  000A1C  D004               	goto	u964
  1573  000A1E                     u965:
  1574  000A1E  0100               	movlb	0	; () banked
  1575  000A20  90D8               	bcf	status,0,c
  1576  000A22  3393               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1577  000A24  3392               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1578  000A26                     u964:
  1579  000A26  0100               	movlb	0	; () banked
  1580  000A28  2F91               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1581  000A2A  D7F9               	goto	u965
  1582  000A2C  0100               	movlb	0	; () banked
  1583  000A2E  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1584  000A30  0B0F               	andlw	15
  1585  000A32  0100               	movlb	0	; () banked
  1586  000A34  6F97               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1590  000A36  0100               	movlb	0	; () banked
  1591  000A38  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1592  000A3A  0100               	movlb	0	; () banked
  1593  000A3C  B4D8               	btfsc	status,2,c
  1594  000A3E  D026               	goto	l1867
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1598                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1599  000A40  0EFF               	movlw	255
  1600  000A42  0100               	movlb	0	; () banked
  1601  000A44  6F91               	movwf	??_ES_GetMSBitSet& (0+255),b
  1602  000A46  0EFF               	movlw	255
  1603  000A48  0100               	movlb	0	; () banked
  1604  000A4A  6F92               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1605  000A4C  0100               	movlb	0	; () banked
  1606  000A4E  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1607  000A50  0100               	movlb	0	; () banked
  1608  000A52  6F93               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1609  000A54  6B94               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1610  000A56  0100               	movlb	0	; () banked
  1611  000A58  5191               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1612  000A5A  0100               	movlb	0	; () banked
  1613  000A5C  2793               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1614  000A5E  0100               	movlb	0	; () banked
  1615  000A60  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1616  000A62  0100               	movlb	0	; () banked
  1617  000A64  2394               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1618  000A66  0E41               	movlw	low _Nybble2MSBitNum
  1619  000A68  0100               	movlb	0	; () banked
  1620  000A6A  2593               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1621  000A6C  6EF6               	movwf	tblptrl,c
  1622  000A6E  0E03               	movlw	high _Nybble2MSBitNum
  1623  000A70  2194               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1624  000A72  6EF7               	movwf	tblptrh,c
  1625  000A74                     	if	0	;There are less than 3 active tblptr bytes
  1626  000A74                     	endif
  1627  000A74  0008               	tblrd		*
  1628  000A76  CFF5 F095          	movff	tablat,??_ES_GetMSBitSet+4
  1629  000A7A  0100               	movlb	0	; () banked
  1630  000A7C  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1631  000A7E  0D04               	mullw	4
  1632  000A80  50F3               	movf	prodl,w,c
  1633  000A82  0100               	movlb	0	; () banked
  1634  000A84  2595               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1635  000A86  0100               	movlb	0	; () banked
  1636  000A88  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1637                           
  1638                           ;ES_LookupTables.c: 96: break;
  1639  000A8A  D003               	goto	l1871
  1640  000A8C                     l1867:
  1641                           
  1642                           ; BSR set to: 0
  1643  000A8C  0100               	movlb	0	; () banked
  1644  000A8E  0798               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1645  000A90  D7B7               	goto	l1857
  1646  000A92                     l1871:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;ES_LookupTables.c: 97: }
  1650                           ;ES_LookupTables.c: 98: }
  1651                           ;ES_LookupTables.c: 99: return ReturnVal;
  1652  000A92  0100               	movlb	0	; () banked
  1653  000A94  5196               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1654  000A96  0012               	return	
  1655  000A98                     __end_of_ES_GetMSBitSet:
  1656                           	opt stack 0
  1657                           tosu	equ	0xFFF
  1658                           tosh	equ	0xFFE
  1659                           tosl	equ	0xFFD
  1660                           pclath	equ	0xFFA
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           indf2	equ	0xFDF
  1670                           postinc2	equ	0xFDE
  1671                           postdec2	equ	0xFDD
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function _RunCanRX_Service *****************
  1677 ;; Defined at:
  1678 ;;		line 135 in file "CanRX_Service.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  ReturnEvent     3    3[BANK0 ] struct ES_Event_t
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  3    0[BANK0 ] struct ES_Event_t
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1692 ;;      Params:         0       3       0       0
  1693 ;;      Locals:         0       3       0       0
  1694 ;;      Temps:          0       0       0       0
  1695 ;;      Totals:         0       6       0       0
  1696 ;;Total ram usage:        6 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    8
  1699 ;; This function calls:
  1700 ;;		_InitCanHardware
  1701 ;;		_InitPins
  1702 ;; This function is called by:
  1703 ;;		_ES_Run
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text7
  1708  000DA4                     __ptext7:
  1709                           	opt stack 0
  1710  000DA4                     _RunCanRX_Service:
  1711                           	opt stack 21
  1712                           
  1713                           ;CanRX_Service.c: 137: ES_Event ReturnEvent;
  1714                           ;CanRX_Service.c: 139: switch(ThisEvent.EventType) {
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;incstack = 0
  1718  000DA4  D016               	goto	l2111
  1719  000DA6                     l2107:
  1720                           
  1721                           ;CanRX_Service.c: 141: InitPins();
  1722  000DA6  EC18  F008         	call	_InitPins	;wreg free
  1723                           
  1724                           ;CanRX_Service.c: 142: InitCanHardware();
  1725  000DAA  ECE7  F005         	call	_InitCanHardware	;wreg free
  1726                           
  1727                           ;CanRX_Service.c: 143: break;
  1728  000DAE  D022               	goto	l2113
  1729  000DB0                     l413:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;CanRX_Service.c: 145: LATA0 = 1;
  1733  000DB0  8089               	bsf	3977,0,c	;volatile
  1734                           
  1735                           ;CanRX_Service.c: 146: LATA1 = 0;
  1736  000DB2  9289               	bcf	3977,1,c	;volatile
  1737  000DB4  D002               	goto	L1
  1738  000DB6                     l414:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;CanRX_Service.c: 151: LATA0 = 0;
  1742  000DB6  9089               	bcf	3977,0,c	;volatile
  1743                           
  1744                           ;CanRX_Service.c: 152: LATA1 = 1;
  1745  000DB8  8289               	bsf	3977,1,c	;volatile
  1746  000DBA                     L1:
  1747                           
  1748                           ;CanRX_Service.c: 153: LATA2 = 0;
  1749  000DBA  9489               	bcf	3977,2,c	;volatile
  1750  000DBC  D003               	goto	L2
  1751  000DBE                     l415:
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;CanRX_Service.c: 157: LATA0 = 0;
  1755  000DBE  9089               	bcf	3977,0,c	;volatile
  1756                           
  1757                           ;CanRX_Service.c: 158: LATA1 = 0;
  1758  000DC0  9289               	bcf	3977,1,c	;volatile
  1759                           
  1760                           ;CanRX_Service.c: 159: LATA2 = 1;
  1761  000DC2  8489               	bsf	3977,2,c	;volatile
  1762  000DC4                     L2:
  1763                           
  1764                           ;CanRX_Service.c: 160: LATA3 = 0;
  1765  000DC4  9689               	bcf	3977,3,c	;volatile
  1766                           
  1767                           ;CanRX_Service.c: 161: break;
  1768  000DC6  D016               	goto	l2113
  1769  000DC8                     l416:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;CanRX_Service.c: 163: LATA0 = 0;
  1773  000DC8  9089               	bcf	3977,0,c	;volatile
  1774                           
  1775                           ;CanRX_Service.c: 164: LATA1 = 0;
  1776  000DCA  9289               	bcf	3977,1,c	;volatile
  1777                           
  1778                           ;CanRX_Service.c: 165: LATA2 = 0;
  1779  000DCC  9489               	bcf	3977,2,c	;volatile
  1780                           
  1781                           ;CanRX_Service.c: 166: LATA3 = 1;
  1782  000DCE  8689               	bsf	3977,3,c	;volatile
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;CanRX_Service.c: 168: }
  1786                           
  1787                           ;CanRX_Service.c: 167: break;
  1788  000DD0  D011               	goto	l2113
  1789  000DD2                     l2111:
  1790  000DD2  0100               	movlb	0	; () banked
  1791  000DD4  518F               	movf	RunCanRX_Service@ThisEvent& (0+255),w,b
  1792                           
  1793                           ; Switch size 1, requested type "space"
  1794                           ; Number of cases is 5, Range of values is 2 to 8
  1795                           ; switch strategies available:
  1796                           ; Name         Instructions Cycles
  1797                           ; simple_byte           16     9 (average)
  1798                           ;	Chosen strategy is simple_byte
  1799  000DD6  0A02               	xorlw	2	; case 2
  1800  000DD8  B4D8               	btfsc	status,2,c
  1801  000DDA  D7E5               	goto	l2107
  1802  000DDC  0A07               	xorlw	7	; case 5
  1803  000DDE  B4D8               	btfsc	status,2,c
  1804  000DE0  D7E7               	goto	l413
  1805  000DE2  0A03               	xorlw	3	; case 6
  1806  000DE4  B4D8               	btfsc	status,2,c
  1807  000DE6  D7EB               	goto	l415
  1808  000DE8  0A01               	xorlw	1	; case 7
  1809  000DEA  B4D8               	btfsc	status,2,c
  1810  000DEC  D7E4               	goto	l414
  1811  000DEE  0A0F               	xorlw	15	; case 8
  1812  000DF0  B4D8               	btfsc	status,2,c
  1813  000DF2  D7EA               	goto	l416
  1814  000DF4                     l2113:
  1815                           
  1816                           ;CanRX_Service.c: 169: ReturnEvent.EventType = ES_NO_EVENT;
  1817  000DF4  0E00               	movlw	0
  1818  000DF6  0100               	movlb	0	; () banked
  1819  000DF8  6F92               	movwf	RunCanRX_Service@ReturnEvent& (0+255),b
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;CanRX_Service.c: 170: return ReturnEvent;
  1823  000DFA  C092  F08F         	movff	RunCanRX_Service@ReturnEvent,?_RunCanRX_Service
  1824  000DFE  C093  F090         	movff	RunCanRX_Service@ReturnEvent+1,?_RunCanRX_Service+1
  1825  000E02  C094  F091         	movff	RunCanRX_Service@ReturnEvent+2,?_RunCanRX_Service+2
  1826  000E06  0012               	return	
  1827  000E08                     __end_of_RunCanRX_Service:
  1828                           	opt stack 0
  1829                           tosu	equ	0xFFF
  1830                           tosh	equ	0xFFE
  1831                           tosl	equ	0xFFD
  1832                           pclath	equ	0xFFA
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           prodh	equ	0xFF4
  1838                           prodl	equ	0xFF3
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           indf2	equ	0xFDF
  1842                           postinc2	equ	0xFDE
  1843                           postdec2	equ	0xFDD
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _InitPins *****************
  1849 ;; Defined at:
  1850 ;;		line 268 in file "CanRX_Service.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1864 ;;      Params:         0       0       0       0
  1865 ;;      Locals:         0       0       0       0
  1866 ;;      Temps:          0       0       0       0
  1867 ;;      Totals:         0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    7
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_RunCanRX_Service
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text8
  1879  001030                     __ptext8:
  1880                           	opt stack 0
  1881  001030                     _InitPins:
  1882                           	opt stack 21
  1883                           
  1884                           ;CanRX_Service.c: 271: PORTB = 0x00;
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;incstack = 0
  1888  001030  0E00               	movlw	0
  1889  001032  6E81               	movwf	3969,c	;volatile
  1890                           
  1891                           ;CanRX_Service.c: 272: LATB = 0x00;
  1892  001034  0E00               	movlw	0
  1893  001036  6E8A               	movwf	3978,c	;volatile
  1894                           
  1895                           ;CanRX_Service.c: 273: TRISBbits.TRISB2 = 0;
  1896  001038  9493               	bcf	3987,2,c	;volatile
  1897                           
  1898                           ;CanRX_Service.c: 274: TRISBbits.TRISB3 = 1;
  1899  00103A  8693               	bsf	3987,3,c	;volatile
  1900                           
  1901                           ;CanRX_Service.c: 277: PORTA = 0x00;
  1902  00103C  0E00               	movlw	0
  1903  00103E  6E80               	movwf	3968,c	;volatile
  1904                           
  1905                           ;CanRX_Service.c: 278: LATA = 0x00;
  1906  001040  0E00               	movlw	0
  1907  001042  6E89               	movwf	3977,c	;volatile
  1908                           
  1909                           ;CanRX_Service.c: 279: TRISA = 0x00;
  1910  001044  0E00               	movlw	0
  1911  001046  6E92               	movwf	3986,c	;volatile
  1912  001048  0012               	return		;funcret
  1913  00104A                     __end_of_InitPins:
  1914                           	opt stack 0
  1915                           tosu	equ	0xFFF
  1916                           tosh	equ	0xFFE
  1917                           tosl	equ	0xFFD
  1918                           pclath	equ	0xFFA
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           indf2	equ	0xFDF
  1928                           postinc2	equ	0xFDE
  1929                           postdec2	equ	0xFDD
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _InitCanHardware *****************
  1935 ;; Defined at:
  1936 ;;		line 200 in file "CanRX_Service.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1950 ;;      Params:         0       0       0       0
  1951 ;;      Locals:         0       0       0       0
  1952 ;;      Temps:          0       0       0       0
  1953 ;;      Totals:         0       0       0       0
  1954 ;;Total ram usage:        0 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    7
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_RunCanRX_Service
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text9
  1965  000BCE                     __ptext9:
  1966                           	opt stack 0
  1967  000BCE                     _InitCanHardware:
  1968                           	opt stack 21
  1969                           
  1970                           ;CanRX_Service.c: 204: CANCON = 0x80;
  1971                           
  1972                           ;incstack = 0
  1973  000BCE  0E80               	movlw	128
  1974  000BD0  6E6F               	movwf	3951,c	;volatile
  1975  000BD2                     l433:
  1976  000BD2  AE6E               	btfss	3950,7,c	;volatile
  1977  000BD4  D7FE               	goto	l433
  1978                           
  1979                           ;CanRX_Service.c: 207: CIOCON = 0x20;
  1980  000BD6  0E20               	movlw	32
  1981  000BD8  6E73               	movwf	3955,c	;volatile
  1982                           
  1983                           ;CanRX_Service.c: 210: BRGCON2bits.SEG2PHTS = 1;
  1984  000BDA  8E71               	bsf	3953,7,c	;volatile
  1985                           
  1986                           ;CanRX_Service.c: 212: BRGCON1bits.BRP0 = 0;
  1987  000BDC  9070               	bcf	3952,0,c	;volatile
  1988                           
  1989                           ;CanRX_Service.c: 213: BRGCON1bits.BRP1 = 1;
  1990  000BDE  8270               	bsf	3952,1,c	;volatile
  1991                           
  1992                           ;CanRX_Service.c: 214: BRGCON1bits.BRP2 = 1;
  1993  000BE0  8470               	bsf	3952,2,c	;volatile
  1994                           
  1995                           ;CanRX_Service.c: 215: BRGCON1bits.BRP3 = 0;
  1996  000BE2  9670               	bcf	3952,3,c	;volatile
  1997                           
  1998                           ;CanRX_Service.c: 217: BRGCON2bits.PRSEG0 = 0;
  1999  000BE4  9071               	bcf	3953,0,c	;volatile
  2000                           
  2001                           ;CanRX_Service.c: 218: BRGCON2bits.PRSEG1 = 0;
  2002  000BE6  9271               	bcf	3953,1,c	;volatile
  2003                           
  2004                           ;CanRX_Service.c: 219: BRGCON2bits.PRSEG2 = 0;
  2005  000BE8  9471               	bcf	3953,2,c	;volatile
  2006                           
  2007                           ;CanRX_Service.c: 221: BRGCON2bits.SEG1PH0 = 0;
  2008  000BEA  9671               	bcf	3953,3,c	;volatile
  2009                           
  2010                           ;CanRX_Service.c: 222: BRGCON2bits.SEG1PH1 = 0;
  2011  000BEC  9871               	bcf	3953,4,c	;volatile
  2012                           
  2013                           ;CanRX_Service.c: 223: BRGCON2bits.SEG1PH2 = 0;
  2014  000BEE  9A71               	bcf	3953,5,c	;volatile
  2015                           
  2016                           ;CanRX_Service.c: 225: BRGCON3bits.SEG2PH0 = 1;
  2017  000BF0  8072               	bsf	3954,0,c	;volatile
  2018                           
  2019                           ;CanRX_Service.c: 226: BRGCON3bits.SEG2PH1 = 0;
  2020  000BF2  9272               	bcf	3954,1,c	;volatile
  2021                           
  2022                           ;CanRX_Service.c: 227: BRGCON3bits.SEG2PH2 = 0;
  2023  000BF4  9472               	bcf	3954,2,c	;volatile
  2024                           
  2025                           ;CanRX_Service.c: 229: BRGCON1bits.SJW0 = 0;
  2026  000BF6  9C70               	bcf	3952,6,c	;volatile
  2027                           
  2028                           ;CanRX_Service.c: 233: RXB0CONbits.RXB0DBEN = 0;
  2029  000BF8  9460               	bcf	3936,2,c	;volatile
  2030                           
  2031                           ;CanRX_Service.c: 234: RXB0CONbits.RXM0 = 0;
  2032  000BFA  9A60               	bcf	3936,5,c	;volatile
  2033                           
  2034                           ;CanRX_Service.c: 235: RXB0CONbits.RXM1 = 0;
  2035  000BFC  9C60               	bcf	3936,6,c	;volatile
  2036                           
  2037                           ;CanRX_Service.c: 236: RXF0SIDH = 0x00;
  2038  000BFE  0E00               	movlw	0
  2039  000C00  010F               	movlb	15	; () banked
  2040  000C02  6F00               	movwf	0,b	;volatile
  2041                           
  2042                           ;CanRX_Service.c: 237: RXF0SIDL = 0x08;
  2043  000C04  0E08               	movlw	8
  2044  000C06  010F               	movlb	15	; () banked
  2045  000C08  6F01               	movwf	1,b	;volatile
  2046                           
  2047                           ;CanRX_Service.c: 238: RXF0EIDH = 0x00;
  2048  000C0A  0E00               	movlw	0
  2049  000C0C  010F               	movlb	15	; () banked
  2050  000C0E  6F02               	movwf	2,b	;volatile
  2051                           
  2052                           ;CanRX_Service.c: 239: RXF0EIDL = 0x01;
  2053  000C10  0E01               	movlw	1
  2054  000C12  010F               	movlb	15	; () banked
  2055  000C14  6F03               	movwf	3,b	;volatile
  2056                           
  2057                           ;CanRX_Service.c: 241: RXM0SIDH = 0x00;
  2058  000C16  0E00               	movlw	0
  2059  000C18  010F               	movlb	15	; () banked
  2060  000C1A  6F18               	movwf	24,b	;volatile
  2061                           
  2062                           ;CanRX_Service.c: 242: RXM0SIDL = 0x00;
  2063  000C1C  0E00               	movlw	0
  2064  000C1E  010F               	movlb	15	; () banked
  2065  000C20  6F19               	movwf	25,b	;volatile
  2066                           
  2067                           ;CanRX_Service.c: 243: RXM0EIDH = 0x00;
  2068  000C22  0E00               	movlw	0
  2069  000C24  010F               	movlb	15	; () banked
  2070  000C26  6F1A               	movwf	26,b	;volatile
  2071                           
  2072                           ;CanRX_Service.c: 244: RXM0EIDL = 0x01;
  2073  000C28  0E01               	movlw	1
  2074  000C2A  010F               	movlb	15	; () banked
  2075  000C2C  6F1B               	movwf	27,b	;volatile
  2076                           
  2077                           ;CanRX_Service.c: 248: ECANCON = 0x00;
  2078  000C2E  0E00               	movlw	0
  2079  000C30  6E77               	movwf	3959,c	;volatile
  2080                           
  2081                           ;CanRX_Service.c: 249: CANCON = 0b00010000;
  2082  000C32  0E10               	movlw	16
  2083  000C34  6E6F               	movwf	3951,c	;volatile
  2084  000C36                     l436:
  2085  000C36  BE6E               	btfsc	3950,7,c	;volatile
  2086  000C38  D7FE               	goto	l436
  2087                           
  2088                           ;CanRX_Service.c: 253: RXB0IE = 1;
  2089  000C3A  80A3               	bsf	4003,0,c	;volatile
  2090                           
  2091                           ;CanRX_Service.c: 254: ERRIE = 1;
  2092  000C3C  8AA3               	bsf	4003,5,c	;volatile
  2093                           
  2094                           ;CanRX_Service.c: 255: IRXIE = 1;
  2095  000C3E  8EA3               	bsf	4003,7,c	;volatile
  2096                           
  2097                           ;CanRX_Service.c: 259: RXB0IF = 0;
  2098  000C40  90A4               	bcf	4004,0,c	;volatile
  2099                           
  2100                           ;CanRX_Service.c: 260: ERRIF = 0;
  2101  000C42  9AA4               	bcf	4004,5,c	;volatile
  2102                           
  2103                           ;CanRX_Service.c: 261: IRXIF = 0;
  2104  000C44  9EA4               	bcf	4004,7,c	;volatile
  2105                           
  2106                           ;CanRX_Service.c: 262: TXB0IE = 1;
  2107  000C46  84A3               	bsf	4003,2,c	;volatile
  2108                           
  2109                           ;CanRX_Service.c: 263: TXB0IF = 0;
  2110  000C48  94A4               	bcf	4004,2,c	;volatile
  2111                           
  2112                           ;CanRX_Service.c: 264: TXB0CONbits.TXREQ = 0;
  2113  000C4A  010F               	movlb	15	; () banked
  2114  000C4C  9740               	bcf	64,3,b	;volatile
  2115                           
  2116                           ;CanRX_Service.c: 265: RXB0CONbits.RXFUL = 0;
  2117  000C4E  9E60               	bcf	3936,7,c	;volatile
  2118                           
  2119                           ; BSR set to: 15
  2120  000C50  0012               	return		;funcret
  2121  000C52                     __end_of_InitCanHardware:
  2122                           	opt stack 0
  2123                           tosu	equ	0xFFF
  2124                           tosh	equ	0xFFE
  2125                           tosl	equ	0xFFD
  2126                           pclath	equ	0xFFA
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           prodh	equ	0xFF4
  2132                           prodl	equ	0xFF3
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _ES_DeQueue *****************
  2143 ;; Defined at:
  2144 ;;		line 164 in file "ES_Queue.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  2147 ;;		 -> Queue0(12), 
  2148 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  2149 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  2152 ;;		 -> Queue0(12), 
  2153 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  2154 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      unsigned char 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2164 ;;      Params:         0       4       0       0
  2165 ;;      Locals:         0       4       0       0
  2166 ;;      Temps:          0       2       0       0
  2167 ;;      Totals:         0      10       0       0
  2168 ;;Total ram usage:       10 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    8
  2171 ;; This function calls:
  2172 ;;		___lbmod
  2173 ;;		___wmul
  2174 ;; This function is called by:
  2175 ;;		_ES_Run
  2176 ;;		_ES_RecallEvents
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text10
  2181  0003B6                     __ptext10:
  2182                           	opt stack 0
  2183  0003B6                     _ES_DeQueue:
  2184                           	opt stack 21
  2185                           
  2186                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2187                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2188                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2189                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2190                           
  2191                           ; BSR set to: 15
  2192                           ;incstack = 0
  2193  0003B6  C09B  F0A3         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2194  0003BA  C09C  F0A4         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2195                           
  2196                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2197  0003BE  0100               	movlb	0	; () banked
  2198  0003C0  EE20 F002          	lfsr	2,2
  2199  0003C4  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2200  0003C6  26D9               	addwf	fsr2l,f,c
  2201  0003C8  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2202  0003CA  22DA               	addwfc	fsr2h,f,c
  2203  0003CC  50DF               	movf	indf2,w,c
  2204  0003CE  B4D8               	btfsc	status,2,c
  2205  0003D0  D06F               	goto	l2055
  2206                           
  2207                           ; BSR set to: 0
  2208                           
  2209                           ;ES_Queue.c: 172: {
  2210                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2211  0003D2  CFF2 F0A1          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2212  0003D6  9EF2               	bcf	intcon,7,c	;volatile
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2216                           
  2217                           ; BSR set to: 0
  2218  0003D8  0100               	movlb	0	; () banked
  2219  0003DA  EE20 F001          	lfsr	2,1
  2220  0003DE  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2221  0003E0  26D9               	addwf	fsr2l,f,c
  2222  0003E2  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2223  0003E4  22DA               	addwfc	fsr2h,f,c
  2224  0003E6  50DF               	movf	indf2,w,c
  2225  0003E8  0100               	movlb	0	; () banked
  2226  0003EA  6F9F               	movwf	??_ES_DeQueue& (0+255),b
  2227  0003EC  0E01               	movlw	1
  2228  0003EE  0100               	movlb	0	; () banked
  2229  0003F0  259F               	addwf	??_ES_DeQueue& (0+255),w,b
  2230  0003F2  0100               	movlb	0	; () banked
  2231  0003F4  6F95               	movwf	___wmul@multiplier& (0+255),b
  2232  0003F6  0100               	movlb	0	; () banked
  2233  0003F8  6B96               	clrf	(___wmul@multiplier+1)& (0+255),b
  2234  0003FA  0E00               	movlw	0
  2235  0003FC  2396               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  2236  0003FE  0E00               	movlw	0
  2237  000400  0100               	movlb	0	; () banked
  2238  000402  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2239  000404  0E03               	movlw	3
  2240  000406  6F97               	movwf	___wmul@multiplicand& (0+255),b
  2241  000408  EC96  F007         	call	___wmul	;wreg free
  2242  00040C  0100               	movlb	0	; () banked
  2243  00040E  5195               	movf	?___wmul& (0+255),w,b
  2244  000410  0100               	movlb	0	; () banked
  2245  000412  259B               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  2246  000414  6ED9               	movwf	fsr2l,c
  2247  000416  0100               	movlb	0	; () banked
  2248  000418  5196               	movf	(?___wmul+1)& (0+255),w,b
  2249  00041A  0100               	movlb	0	; () banked
  2250  00041C  219C               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  2251  00041E  6EDA               	movwf	fsr2h,c
  2252  000420  C09D  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2253  000424  C09E  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2254  000428  CFDE FFE6          	movff	postinc2,postinc1
  2255  00042C  CFDE FFE6          	movff	postinc2,postinc1
  2256  000430  CFDE FFE6          	movff	postinc2,postinc1
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2260  000434  0100               	movlb	0	; () banked
  2261  000436  EE20 F001          	lfsr	2,1
  2262  00043A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2263  00043C  26D9               	addwf	fsr2l,f,c
  2264  00043E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2265  000440  22DA               	addwfc	fsr2h,f,c
  2266  000442  2ADF               	incf	indf2,f,c
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2270  000444  C0A3  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2271  000448  C0A4  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2272  00044C  0100               	movlb	0	; () banked
  2273  00044E  EE10 F001          	lfsr	1,1
  2274  000452  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2275  000454  26E1               	addwf	fsr1l,f,c
  2276  000456  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2277  000458  22E2               	addwfc	fsr1h,f,c
  2278  00045A  50DE               	movf	postinc2,w,c
  2279  00045C  5CE6               	subwf	postinc1,w,c
  2280  00045E  A0D8               	btfss	status,0,c
  2281  000460  D019               	goto	l2051
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2285  000462  0100               	movlb	0	; () banked
  2286  000464  EE20 F001          	lfsr	2,1
  2287  000468  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2288  00046A  26D9               	addwf	fsr2l,f,c
  2289  00046C  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2290  00046E  22DA               	addwfc	fsr2h,f,c
  2291  000470  C0A3  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2292  000474  C0A4  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2293  000478  50E7               	movf	indf1,w,c
  2294  00047A  0100               	movlb	0	; () banked
  2295  00047C  6F8F               	movwf	___lbmod@divisor& (0+255),b
  2296  00047E  0100               	movlb	0	; () banked
  2297  000480  EE10 F001          	lfsr	1,1
  2298  000484  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2299  000486  26E1               	addwf	fsr1l,f,c
  2300  000488  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2301  00048A  22E2               	addwfc	fsr1h,f,c
  2302  00048C  50E7               	movf	indf1,w,c
  2303  00048E  EC56  F007         	call	___lbmod
  2304  000492  6EDF               	movwf	indf2,c
  2305  000494                     l2051:
  2306                           
  2307                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2308  000494  0100               	movlb	0	; () banked
  2309  000496  EE20 F002          	lfsr	2,2
  2310  00049A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2311  00049C  26D9               	addwf	fsr2l,f,c
  2312  00049E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2313  0004A0  22DA               	addwfc	fsr2h,f,c
  2314  0004A2  06DF               	decf	indf2,f,c
  2315  0004A4  50DF               	movf	indf2,w,c
  2316  0004A6  0100               	movlb	0	; () banked
  2317  0004A8  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2321  0004AA  C0A1  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2322                           
  2323                           ;ES_Queue.c: 183: }else {
  2324  0004AE  D014               	goto	l2061
  2325  0004B0                     l2055:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2329  0004B0  C09D  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2330  0004B4  C09E  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2331  0004B8  0E00               	movlw	0
  2332  0004BA  6EDF               	movwf	indf2,c
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2336  0004BC  0100               	movlb	0	; () banked
  2337  0004BE  EE20 F001          	lfsr	2,1
  2338  0004C2  519D               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  2339  0004C4  26D9               	addwf	fsr2l,f,c
  2340  0004C6  519E               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  2341  0004C8  22DA               	addwfc	fsr2h,f,c
  2342  0004CA  0E00               	movlw	0
  2343  0004CC  6EDE               	movwf	postinc2,c
  2344  0004CE  0E00               	movlw	0
  2345  0004D0  6EDD               	movwf	postdec2,c
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;ES_Queue.c: 186: NumLeft = 0;
  2349  0004D2  0E00               	movlw	0
  2350  0004D4  0100               	movlb	0	; () banked
  2351  0004D6  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2352  0004D8                     l2061:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;ES_Queue.c: 187: }
  2356                           ;ES_Queue.c: 188: return NumLeft;
  2357  0004D8  0100               	movlb	0	; () banked
  2358  0004DA  51A2               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  2359  0004DC  0012               	return	
  2360  0004DE                     __end_of_ES_DeQueue:
  2361                           	opt stack 0
  2362                           tosu	equ	0xFFF
  2363                           tosh	equ	0xFFE
  2364                           tosl	equ	0xFFD
  2365                           pclath	equ	0xFFA
  2366                           tblptru	equ	0xFF8
  2367                           tblptrh	equ	0xFF7
  2368                           tblptrl	equ	0xFF6
  2369                           tablat	equ	0xFF5
  2370                           prodh	equ	0xFF4
  2371                           prodl	equ	0xFF3
  2372                           intcon	equ	0xFF2
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           indf1	equ	0xFE7
  2376                           postinc1	equ	0xFE6
  2377                           fsr1h	equ	0xFE2
  2378                           fsr1l	equ	0xFE1
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function ___lbmod *****************
  2387 ;; Defined at:
  2388 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  dividend        1    wreg     unsigned char 
  2391 ;;  divisor         1    0[BANK0 ] unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  dividend        1    1[BANK0 ] unsigned char 
  2394 ;;  rem             1    3[BANK0 ] unsigned char 
  2395 ;;  counter         1    2[BANK0 ] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      unsigned char 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2405 ;;      Params:         0       1       0       0
  2406 ;;      Locals:         0       3       0       0
  2407 ;;      Temps:          0       0       0       0
  2408 ;;      Totals:         0       4       0       0
  2409 ;;Total ram usage:        4 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    7
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_ES_DeQueue
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text11
  2420  000EAC                     __ptext11:
  2421                           	opt stack 0
  2422  000EAC                     ___lbmod:
  2423                           	opt stack 21
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;incstack = 0
  2427                           ;___lbmod@dividend stored from wreg
  2428  000EAC  0100               	movlb	0	; () banked
  2429  000EAE  6F90               	movwf	___lbmod@dividend& (0+255),b
  2430  000EB0  0E08               	movlw	8
  2431  000EB2  0100               	movlb	0	; () banked
  2432  000EB4  6F91               	movwf	___lbmod@counter& (0+255),b
  2433  000EB6  0E00               	movlw	0
  2434  000EB8  0100               	movlb	0	; () banked
  2435  000EBA  6F92               	movwf	___lbmod@rem& (0+255),b
  2436  000EBC                     l2007:
  2437                           
  2438                           ; BSR set to: 0
  2439  000EBC  90D8               	bcf	status,0,c
  2440  000EBE  0100               	movlb	0	; () banked
  2441  000EC0  3590               	rlcf	___lbmod@dividend& (0+255),w,b
  2442  000EC2  0100               	movlb	0	; () banked
  2443  000EC4  3592               	rlcf	___lbmod@rem& (0+255),w,b
  2444  000EC6  0100               	movlb	0	; () banked
  2445  000EC8  6F92               	movwf	___lbmod@rem& (0+255),b
  2446                           
  2447                           ; BSR set to: 0
  2448  000ECA  0100               	movlb	0	; () banked
  2449  000ECC  90D8               	bcf	status,0,c
  2450  000ECE  3790               	rlcf	___lbmod@dividend& (0+255),f,b
  2451                           
  2452                           ; BSR set to: 0
  2453  000ED0  0100               	movlb	0	; () banked
  2454  000ED2  518F               	movf	___lbmod@divisor& (0+255),w,b
  2455  000ED4  0100               	movlb	0	; () banked
  2456  000ED6  5D92               	subwf	___lbmod@rem& (0+255),w,b
  2457  000ED8  A0D8               	btfss	status,0,c
  2458  000EDA  D004               	goto	l2015
  2459                           
  2460                           ; BSR set to: 0
  2461  000EDC  0100               	movlb	0	; () banked
  2462  000EDE  518F               	movf	___lbmod@divisor& (0+255),w,b
  2463  000EE0  0100               	movlb	0	; () banked
  2464  000EE2  5F92               	subwf	___lbmod@rem& (0+255),f,b
  2465  000EE4                     l2015:
  2466                           
  2467                           ; BSR set to: 0
  2468  000EE4  0100               	movlb	0	; () banked
  2469  000EE6  2F91               	decfsz	___lbmod@counter& (0+255),f,b
  2470  000EE8  D7E9               	goto	l2007
  2471                           
  2472                           ; BSR set to: 0
  2473                           
  2474                           ; BSR set to: 0
  2475  000EEA  0100               	movlb	0	; () banked
  2476  000EEC  5192               	movf	___lbmod@rem& (0+255),w,b
  2477  000EEE  0012               	return	
  2478  000EF0                     __end_of___lbmod:
  2479                           	opt stack 0
  2480                           tosu	equ	0xFFF
  2481                           tosh	equ	0xFFE
  2482                           tosl	equ	0xFFD
  2483                           pclath	equ	0xFFA
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           intcon	equ	0xFF2
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           indf1	equ	0xFE7
  2494                           postinc1	equ	0xFE6
  2495                           fsr1h	equ	0xFE2
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           postdec2	equ	0xFDD
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _ES_CheckUserEvents *****************
  2505 ;; Defined at:
  2506 ;;		line 46 in file "ES_CheckEvents.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  i               1    0[BANK0 ] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      unsigned char 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2520 ;;      Params:         0       0       0       0
  2521 ;;      Locals:         0       1       0       0
  2522 ;;      Temps:          0       0       0       0
  2523 ;;      Totals:         0       1       0       0
  2524 ;;Total ram usage:        1 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    8
  2527 ;; This function calls:
  2528 ;;		_Check4Keystroke
  2529 ;; This function is called by:
  2530 ;;		_ES_Run
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text12
  2535  000E62                     __ptext12:
  2536                           	opt stack 0
  2537  000E62                     _ES_CheckUserEvents:
  2538                           	opt stack 21
  2539                           
  2540                           ;ES_CheckEvents.c: 48: uint8_t i;
  2541                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;incstack = 0
  2545  000E62  0E00               	movlw	0
  2546  000E64  0100               	movlb	0	; () banked
  2547  000E66  6F8F               	movwf	ES_CheckUserEvents@i& (0+255),b
  2548  000E68  0100               	movlb	0	; () banked
  2549  000E6A  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2550  000E6C  0100               	movlb	0	; () banked
  2551  000E6E  A4D8               	btfss	status,2,c
  2552  000E70  0012               	return	
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2556                           
  2557                           ; BSR set to: 0
  2558                           
  2559                           ; BSR set to: 0
  2560  000E72  0100               	movlb	0	; () banked
  2561  000E74  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2562  000E76  0D02               	mullw	2
  2563  000E78  0E57               	movlw	low _ES_EventList
  2564  000E7A  24F3               	addwf	prodl,w,c
  2565  000E7C  6EF6               	movwf	tblptrl,c
  2566  000E7E  0E03               	movlw	high _ES_EventList
  2567  000E80  20F4               	addwfc	prodh,w,c
  2568  000E82  6EF7               	movwf	tblptrh,c
  2569  000E84                     	if	0	;There are less than 3 active tblptr bytes
  2570  000E84                     	endif
  2571  000E84  D801               	call	u1118
  2572  000E86  D00C               	goto	u1119
  2573  000E88                     u1118:
  2574  000E88  0005               	push	
  2575  000E8A  6EFA               	movwf	pclath,c
  2576  000E8C  0009               	tblrd		*+
  2577  000E8E  50F5               	movf	tablat,w,c
  2578  000E90  6EFD               	movwf	tosl,c
  2579  000E92  0009               	tblrd		*+
  2580  000E94  50F5               	movf	tablat,w,c
  2581  000E96  6EFE               	movwf	tosh,c
  2582  000E98  50F8               	movf	tblptru,w,c
  2583  000E9A  6EFF               	movwf	tosu,c
  2584  000E9C  50FA               	movf	pclath,w,c
  2585  000E9E  0012               	return		;indir
  2586  000EA0                     u1119:
  2587  000EA0  06E8               	decf	wreg,f,c
  2588  000EA2  B4D8               	btfsc	status,2,c
  2589  000EA4  0012               	return	
  2590                           
  2591                           ;ES_CheckEvents.c: 52: break;
  2592  000EA6  0100               	movlb	0	; () banked
  2593  000EA8  2B8F               	incf	ES_CheckUserEvents@i& (0+255),f,b
  2594  000EAA  D7DE               	goto	L3
  2595  000EAC                     __end_of_ES_CheckUserEvents:
  2596                           	opt stack 0
  2597                           tosu	equ	0xFFF
  2598                           tosh	equ	0xFFE
  2599                           tosl	equ	0xFFD
  2600                           pclath	equ	0xFFA
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           prodh	equ	0xFF4
  2606                           prodl	equ	0xFF3
  2607                           intcon	equ	0xFF2
  2608                           postinc0	equ	0xFEE
  2609                           wreg	equ	0xFE8
  2610                           indf1	equ	0xFE7
  2611                           postinc1	equ	0xFE6
  2612                           fsr1h	equ	0xFE2
  2613                           fsr1l	equ	0xFE1
  2614                           indf2	equ	0xFDF
  2615                           postinc2	equ	0xFDE
  2616                           postdec2	equ	0xFDD
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _Check4Keystroke *****************
  2622 ;; Defined at:
  2623 ;;		line 62 in file "EventCheckers.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      unsigned char 
  2630 ;; Registers used:
  2631 ;;		wreg
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2637 ;;      Params:         0       0       0       0
  2638 ;;      Locals:         0       0       0       0
  2639 ;;      Temps:          0       0       0       0
  2640 ;;      Totals:         0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    7
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_ES_CheckUserEvents
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text13
  2652  001096                     __ptext13:
  2653                           	opt stack 0
  2654  001096                     _Check4Keystroke:
  2655                           	opt stack 21
  2656                           
  2657                           ;EventCheckers.c: 78: return 0;
  2658                           
  2659                           ;incstack = 0
  2660  001096  0E00               	movlw	0
  2661  001098  0012               	return	
  2662  00109A                     __end_of_Check4Keystroke:
  2663                           	opt stack 0
  2664                           tosu	equ	0xFFF
  2665                           tosh	equ	0xFFE
  2666                           tosl	equ	0xFFD
  2667                           pclath	equ	0xFFA
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           prodh	equ	0xFF4
  2673                           prodl	equ	0xFF3
  2674                           intcon	equ	0xFF2
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           indf1	equ	0xFE7
  2678                           postinc1	equ	0xFE6
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _ES_Initialize *****************
  2689 ;; Defined at:
  2690 ;;		line 242 in file "ES_Framework.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  NewRate         2   33[BANK0 ] enum E15423
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  i               1   35[BANK0 ] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      enum E15494
  2697 ;; Registers used:
  2698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       2       0       0
  2705 ;;      Locals:         0       1       0       0
  2706 ;;      Temps:          0       0       0       0
  2707 ;;      Totals:         0       3       0       0
  2708 ;;Total ram usage:        3 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:   11
  2711 ;; This function calls:
  2712 ;;		_ES_InitQueue
  2713 ;;		_ES_Timer_Init
  2714 ;;		_InitCanRX_Service
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text14
  2721  0005D2                     __ptext14:
  2722                           	opt stack 0
  2723  0005D2                     _ES_Initialize:
  2724                           	opt stack 19
  2725                           
  2726                           ;ES_Framework.c: 243: uint8_t i;
  2727                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2728                           
  2729                           ;incstack = 0
  2730  0005D2  C0B0  F091         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2731  0005D6  C0B1  F092         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2732  0005DA  EC3B  F008         	call	_ES_Timer_Init	;wreg free
  2733                           
  2734                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2735  0005DE  0E00               	movlw	0
  2736  0005E0  0100               	movlb	0	; () banked
  2737  0005E2  6FB2               	movwf	ES_Initialize@i& (0+255),b
  2738  0005E4                     l2147:
  2739                           
  2740                           ; BSR set to: 0
  2741  0005E4  0100               	movlb	0	; () banked
  2742  0005E6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2743  0005E8  0100               	movlb	0	; () banked
  2744  0005EA  A4D8               	btfss	status,2,c
  2745  0005EC  D066               	goto	l2171
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2749                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2750                           
  2751                           ; BSR set to: 0
  2752                           
  2753                           ; BSR set to: 0
  2754  0005EE  0100               	movlb	0	; () banked
  2755  0005F0  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2756  0005F2  0D04               	mullw	4
  2757  0005F4  0E50               	movlw	low _ServDescList
  2758  0005F6  24F3               	addwf	prodl,w,c
  2759  0005F8  6EF6               	movwf	tblptrl,c
  2760  0005FA  0E03               	movlw	high _ServDescList
  2761  0005FC  20F4               	addwfc	prodh,w,c
  2762  0005FE  6EF7               	movwf	tblptrh,c
  2763  000600                     	if	0	;There are less than 3 active tblptr bytes
  2764  000600                     	endif
  2765  000600  0009               	tblrd		*+
  2766  000602  50F5               	movf	tablat,w,c
  2767  000604  0009               	tblrd		*+
  2768  000606  10F5               	iorwf	tablat,w,c
  2769  000608  B4D8               	btfsc	status,2,c
  2770  00060A  D013               	goto	l2155
  2771                           
  2772                           ; BSR set to: 0
  2773  00060C  0100               	movlb	0	; () banked
  2774  00060E  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2775  000610  0D04               	mullw	4
  2776  000612  0E02               	movlw	2
  2777  000614  26F3               	addwf	prodl,f,c
  2778  000616  0E00               	movlw	0
  2779  000618  22F4               	addwfc	prodh,f,c
  2780  00061A  0E50               	movlw	low _ServDescList
  2781  00061C  24F3               	addwf	prodl,w,c
  2782  00061E  6EF6               	movwf	tblptrl,c
  2783  000620  0E03               	movlw	high _ServDescList
  2784  000622  20F4               	addwfc	prodh,w,c
  2785  000624  6EF7               	movwf	tblptrh,c
  2786  000626                     	if	0	;There are less than 3 active tblptr bytes
  2787  000626                     	endif
  2788  000626  0009               	tblrd		*+
  2789  000628  50F5               	movf	tablat,w,c
  2790  00062A  0009               	tblrd		*+
  2791  00062C  10F5               	iorwf	tablat,w,c
  2792  00062E  A4D8               	btfss	status,2,c
  2793  000630  D002               	goto	l2159
  2794  000632                     l2155:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;ES_Framework.c: 249: return FailedPointer;
  2798  000632  0E03               	movlw	3
  2799                           
  2800                           ; BSR set to: 0
  2801  000634  0012               	return	
  2802  000636                     l2159:
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2806  000636  0100               	movlb	0	; () banked
  2807  000638  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2808  00063A  0D03               	mullw	3
  2809  00063C  0E54               	movlw	low _EventQueues
  2810  00063E  24F3               	addwf	prodl,w,c
  2811  000640  6EF6               	movwf	tblptrl,c
  2812  000642  0E03               	movlw	high _EventQueues
  2813  000644  20F4               	addwfc	prodh,w,c
  2814  000646  6EF7               	movwf	tblptrh,c
  2815  000648                     	if	0	;There are less than 3 active tblptr bytes
  2816  000648                     	endif
  2817  000648  0009               	tblrd		*+
  2818  00064A  CFF5 F08F          	movff	tablat,ES_InitQueue@pBlock
  2819  00064E  000A               	tblrd		*-
  2820  000650  CFF5 F090          	movff	tablat,ES_InitQueue@pBlock+1
  2821  000654  0100               	movlb	0	; () banked
  2822  000656  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2823  000658  0D03               	mullw	3
  2824  00065A  0E02               	movlw	2
  2825  00065C  26F3               	addwf	prodl,f,c
  2826  00065E  0E00               	movlw	0
  2827  000660  22F4               	addwfc	prodh,f,c
  2828  000662  0E54               	movlw	low _EventQueues
  2829  000664  24F3               	addwf	prodl,w,c
  2830  000666  6EF6               	movwf	tblptrl,c
  2831  000668  0E03               	movlw	high _EventQueues
  2832  00066A  20F4               	addwfc	prodh,w,c
  2833  00066C  6EF7               	movwf	tblptrh,c
  2834  00066E                     	if	0	;There are less than 3 active tblptr bytes
  2835  00066E                     	endif
  2836  00066E  0008               	tblrd		*
  2837  000670  CFF5 F091          	movff	tablat,ES_InitQueue@BlockSize
  2838  000674  EC78  F007         	call	_ES_InitQueue	;wreg free
  2839                           
  2840                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2841  000678  0100               	movlb	0	; () banked
  2842  00067A  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2843  00067C  0D04               	mullw	4
  2844  00067E  0E50               	movlw	low _ServDescList
  2845  000680  24F3               	addwf	prodl,w,c
  2846  000682  6EF6               	movwf	tblptrl,c
  2847  000684  0E03               	movlw	high _ServDescList
  2848  000686  20F4               	addwfc	prodh,w,c
  2849  000688  6EF7               	movwf	tblptrh,c
  2850  00068A                     	if	0	;There are less than 3 active tblptr bytes
  2851  00068A                     	endif
  2852  00068A  D801               	call	u1258
  2853  00068C  D00E               	goto	u1259
  2854  00068E                     u1258:
  2855  00068E  0005               	push	
  2856  000690  6EFA               	movwf	pclath,c
  2857  000692  0009               	tblrd		*+
  2858  000694  50F5               	movf	tablat,w,c
  2859  000696  6EFD               	movwf	tosl,c
  2860  000698  0009               	tblrd		*+
  2861  00069A  50F5               	movf	tablat,w,c
  2862  00069C  6EFE               	movwf	tosh,c
  2863  00069E  50F8               	movf	tblptru,w,c
  2864  0006A0  6EFF               	movwf	tosu,c
  2865  0006A2  50FA               	movf	pclath,w,c
  2866  0006A4  0100               	movlb	0	; () banked
  2867  0006A6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2868  0006A8  0012               	return		;indir
  2869  0006AA                     u1259:
  2870  0006AA  06E8               	decf	wreg,f,c
  2871  0006AC  B4D8               	btfsc	status,2,c
  2872  0006AE  D002               	goto	l2167
  2873                           
  2874                           ;ES_Framework.c: 254: return FailedInit;
  2875  0006B0  0E05               	movlw	5
  2876  0006B2  0012               	return	
  2877  0006B4                     l2167:
  2878  0006B4  0100               	movlb	0	; () banked
  2879  0006B6  2BB2               	incf	ES_Initialize@i& (0+255),f,b
  2880  0006B8  D795               	goto	l2147
  2881  0006BA                     l2171:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;ES_Framework.c: 255: }
  2885                           ;ES_Framework.c: 256: return Success;
  2886  0006BA  0E00               	movlw	0
  2887  0006BC  0012               	return	
  2888  0006BE                     __end_of_ES_Initialize:
  2889                           	opt stack 0
  2890                           tosu	equ	0xFFF
  2891                           tosh	equ	0xFFE
  2892                           tosl	equ	0xFFD
  2893                           pclath	equ	0xFFA
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           indf1	equ	0xFE7
  2904                           postinc1	equ	0xFE6
  2905                           fsr1h	equ	0xFE2
  2906                           fsr1l	equ	0xFE1
  2907                           indf2	equ	0xFDF
  2908                           postinc2	equ	0xFDE
  2909                           postdec2	equ	0xFDD
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _InitCanRX_Service *****************
  2915 ;; Defined at:
  2916 ;;		line 84 in file "CanRX_Service.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  Priority        1    wreg     unsigned char 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  Priority        1   32[BANK0 ] unsigned char 
  2921 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      unsigned char 
  2924 ;; Registers used:
  2925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2931 ;;      Params:         0       0       0       0
  2932 ;;      Locals:         0       4       0       0
  2933 ;;      Temps:          0       0       0       0
  2934 ;;      Totals:         0       4       0       0
  2935 ;;Total ram usage:        4 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:   10
  2938 ;; This function calls:
  2939 ;;		_ES_PostToService
  2940 ;; This function is called by:
  2941 ;;		_ES_Initialize
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text15
  2946  000F96                     __ptext15:
  2947                           	opt stack 0
  2948  000F96                     _InitCanRX_Service:
  2949                           	opt stack 19
  2950                           
  2951                           ;incstack = 0
  2952                           ;InitCanRX_Service@Priority stored from wreg
  2953  000F96  0100               	movlb	0	; () banked
  2954  000F98  6FAF               	movwf	InitCanRX_Service@Priority& (0+255),b
  2955                           
  2956                           ;CanRX_Service.c: 86: ES_Event ThisEvent;
  2957                           ;CanRX_Service.c: 88: MyPriority = Priority;
  2958  000F9A  C0AF  F08A         	movff	InitCanRX_Service@Priority,_MyPriority
  2959                           
  2960                           ;CanRX_Service.c: 91: ThisEvent.EventType = ES_INIT;
  2961  000F9E  0E02               	movlw	2
  2962  000FA0  0100               	movlb	0	; () banked
  2963  000FA2  6FAC               	movwf	InitCanRX_Service@ThisEvent& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;CanRX_Service.c: 92: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2967  000FA4  C0AC  F0A6         	movff	InitCanRX_Service@ThisEvent,ES_PostToService@TheEvent
  2968  000FA8  C0AD  F0A7         	movff	InitCanRX_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  2969  000FAC  C0AE  F0A8         	movff	InitCanRX_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  2970  000FB0  0100               	movlb	0	; () banked
  2971  000FB2  518A               	movf	_MyPriority& (0+255),w,b
  2972  000FB4  EC29  F006         	call	_ES_PostToService
  2973  000FB8  06E8               	decf	wreg,f,c
  2974  000FBA  A4D8               	btfss	status,2,c
  2975  000FBC  D002               	goto	l2101
  2976                           
  2977                           ;CanRX_Service.c: 93: {
  2978                           ;CanRX_Service.c: 94: return 1;
  2979  000FBE  0E01               	movlw	1
  2980                           
  2981                           ;CanRX_Service.c: 95: }else
  2982  000FC0  0012               	return	
  2983  000FC2                     l2101:
  2984                           
  2985                           ;CanRX_Service.c: 96: {
  2986                           ;CanRX_Service.c: 97: return 0;
  2987  000FC2  0E00               	movlw	0
  2988  000FC4  0012               	return	
  2989  000FC6                     __end_of_InitCanRX_Service:
  2990                           	opt stack 0
  2991                           tosu	equ	0xFFF
  2992                           tosh	equ	0xFFE
  2993                           tosl	equ	0xFFD
  2994                           pclath	equ	0xFFA
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           intcon	equ	0xFF2
  3002                           postinc0	equ	0xFEE
  3003                           wreg	equ	0xFE8
  3004                           indf1	equ	0xFE7
  3005                           postinc1	equ	0xFE6
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _ES_PostToService *****************
  3016 ;; Defined at:
  3017 ;;		line 351 in file "ES_Framework.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  WhichService    1    wreg     unsigned char 
  3020 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  WhichService    1   28[BANK0 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      unsigned char 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3032 ;;      Params:         0       3       0       0
  3033 ;;      Locals:         0       1       0       0
  3034 ;;      Temps:          0       2       0       0
  3035 ;;      Totals:         0       6       0       0
  3036 ;;Total ram usage:        6 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    9
  3039 ;; This function calls:
  3040 ;;		_ES_EnQueueFIFO
  3041 ;; This function is called by:
  3042 ;;		_InitCanRX_Service
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text16
  3047  000C52                     __ptext16:
  3048                           	opt stack 0
  3049  000C52                     _ES_PostToService:
  3050                           	opt stack 19
  3051                           
  3052                           ;incstack = 0
  3053                           ;ES_PostToService@WhichService stored from wreg
  3054  000C52  0100               	movlb	0	; () banked
  3055  000C54  6FAB               	movwf	ES_PostToService@WhichService& (0+255),b
  3056                           
  3057                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3058                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3059                           ;ES_Framework.c: 354: 1 )){
  3060  000C56  0100               	movlb	0	; () banked
  3061  000C58  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3062  000C5A  0100               	movlb	0	; () banked
  3063  000C5C  A4D8               	btfss	status,2,c
  3064  000C5E  D033               	goto	l1923
  3065                           
  3066                           ; BSR set to: 0
  3067  000C60  0100               	movlb	0	; () banked
  3068  000C62  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3069  000C64  0D03               	mullw	3
  3070  000C66  0E54               	movlw	low _EventQueues
  3071  000C68  24F3               	addwf	prodl,w,c
  3072  000C6A  6EF6               	movwf	tblptrl,c
  3073  000C6C  0E03               	movlw	high _EventQueues
  3074  000C6E  20F4               	addwfc	prodh,w,c
  3075  000C70  6EF7               	movwf	tblptrh,c
  3076  000C72                     	if	0	;There are less than 3 active tblptr bytes
  3077  000C72                     	endif
  3078  000C72  0009               	tblrd		*+
  3079  000C74  CFF5 F09B          	movff	tablat,ES_EnQueueFIFO@pBlock
  3080  000C78  000A               	tblrd		*-
  3081  000C7A  CFF5 F09C          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3082  000C7E  C0A6  F09D         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3083  000C82  C0A7  F09E         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3084  000C86  C0A8  F09F         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3085  000C8A  EC5F  F003         	call	_ES_EnQueueFIFO	;wreg free
  3086  000C8E  06E8               	decf	wreg,f,c
  3087  000C90  A4D8               	btfss	status,2,c
  3088  000C92  D019               	goto	l1923
  3089                           
  3090                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3091  000C94  0100               	movlb	0	; () banked
  3092  000C96  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3093  000C98  0D02               	mullw	2
  3094  000C9A  0E01               	movlw	low _BitNum2SetMask
  3095  000C9C  24F3               	addwf	prodl,w,c
  3096  000C9E  6EF6               	movwf	tblptrl,c
  3097  000CA0  0E03               	movlw	high _BitNum2SetMask
  3098  000CA2  20F4               	addwfc	prodh,w,c
  3099  000CA4  6EF7               	movwf	tblptrh,c
  3100  000CA6                     	if	0	;There are less than 3 active tblptr bytes
  3101  000CA6                     	endif
  3102  000CA6  0009               	tblrd		*+
  3103  000CA8  CFF5 F0A9          	movff	tablat,??_ES_PostToService
  3104  000CAC  0009               	tblrd		*+
  3105  000CAE  CFF5 F0AA          	movff	tablat,??_ES_PostToService+1
  3106  000CB2  0100               	movlb	0	; () banked
  3107  000CB4  51A9               	movf	??_ES_PostToService& (0+255),w,b
  3108  000CB6  0100               	movlb	0	; () banked
  3109  000CB8  1385               	iorwf	_Ready& (0+255),f,b
  3110  000CBA  0100               	movlb	0	; () banked
  3111  000CBC  51AA               	movf	(??_ES_PostToService+1)& (0+255),w,b
  3112  000CBE  0100               	movlb	0	; () banked
  3113  000CC0  1386               	iorwf	(_Ready+1)& (0+255),f,b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;ES_Framework.c: 356: return 1;
  3117  000CC2  0E01               	movlw	1
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;ES_Framework.c: 357: } else
  3121                           
  3122                           ; BSR set to: 0
  3123  000CC4  0012               	return	
  3124  000CC6                     l1923:
  3125                           
  3126                           ;ES_Framework.c: 358: return 0;
  3127  000CC6  0E00               	movlw	0
  3128  000CC8  0012               	return	
  3129  000CCA                     __end_of_ES_PostToService:
  3130                           	opt stack 0
  3131                           tosu	equ	0xFFF
  3132                           tosh	equ	0xFFE
  3133                           tosl	equ	0xFFD
  3134                           pclath	equ	0xFFA
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           intcon	equ	0xFF2
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           indf1	equ	0xFE7
  3145                           postinc1	equ	0xFE6
  3146                           fsr1h	equ	0xFE2
  3147                           fsr1l	equ	0xFE1
  3148                           indf2	equ	0xFDF
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _ES_EnQueueFIFO *****************
  3156 ;; Defined at:
  3157 ;;		line 85 in file "ES_Queue.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3160 ;;		 -> Queue0(12), 
  3161 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  3164 ;;		 -> Queue0(12), 
  3165 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      unsigned char 
  3168 ;; Registers used:
  3169 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       5       0       0
  3176 ;;      Locals:         0       3       0       0
  3177 ;;      Temps:          0       3       0       0
  3178 ;;      Totals:         0      11       0       0
  3179 ;;Total ram usage:       11 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    8
  3182 ;; This function calls:
  3183 ;;		___awmod
  3184 ;;		___wmul
  3185 ;; This function is called by:
  3186 ;;		_ES_PostToService
  3187 ;;		_ES_PostAll
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text17
  3192  0006BE                     __ptext17:
  3193                           	opt stack 0
  3194  0006BE                     _ES_EnQueueFIFO:
  3195                           	opt stack 19
  3196                           
  3197                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3198                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3199                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3200                           
  3201                           ;incstack = 0
  3202  0006BE  C09B  F0A4         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3203  0006C2  C09C  F0A5         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3204                           
  3205                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3206  0006C6  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3207  0006CA  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3208  0006CE  0100               	movlb	0	; () banked
  3209  0006D0  EE10 F002          	lfsr	1,2
  3210  0006D4  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3211  0006D6  26E1               	addwf	fsr1l,f,c
  3212  0006D8  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3213  0006DA  22E2               	addwfc	fsr1h,f,c
  3214  0006DC  50DE               	movf	postinc2,w,c
  3215  0006DE  5CE6               	subwf	postinc1,w,c
  3216  0006E0  B0D8               	btfsc	status,0,c
  3217  0006E2  D05C               	goto	l1891
  3218                           
  3219                           ; BSR set to: 0
  3220                           
  3221                           ;ES_Queue.c: 92: {
  3222                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3223  0006E4  CFF2 F0A3          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3224  0006E8  9EF2               	bcf	intcon,7,c	;volatile
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3228                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3229                           
  3230                           ; BSR set to: 0
  3231  0006EA  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3232  0006EE  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3233  0006F2  50DF               	movf	indf2,w,c
  3234  0006F4  0100               	movlb	0	; () banked
  3235  0006F6  6FA0               	movwf	??_ES_EnQueueFIFO& (0+255),b
  3236  0006F8  0100               	movlb	0	; () banked
  3237  0006FA  51A0               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  3238  0006FC  0100               	movlb	0	; () banked
  3239  0006FE  6F91               	movwf	___awmod@divisor& (0+255),b
  3240  000700  6B92               	clrf	(___awmod@divisor+1)& (0+255),b
  3241  000702  0100               	movlb	0	; () banked
  3242  000704  EE20 F002          	lfsr	2,2
  3243  000708  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3244  00070A  26D9               	addwf	fsr2l,f,c
  3245  00070C  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3246  00070E  22DA               	addwfc	fsr2h,f,c
  3247  000710  50DF               	movf	indf2,w,c
  3248  000712  0100               	movlb	0	; () banked
  3249  000714  6FA1               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  3250  000716  0100               	movlb	0	; () banked
  3251  000718  EE20 F001          	lfsr	2,1
  3252  00071C  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3253  00071E  26D9               	addwf	fsr2l,f,c
  3254  000720  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3255  000722  22DA               	addwfc	fsr2h,f,c
  3256  000724  50DF               	movf	indf2,w,c
  3257  000726  0100               	movlb	0	; () banked
  3258  000728  6FA2               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  3259  00072A  0100               	movlb	0	; () banked
  3260  00072C  51A2               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  3261  00072E  0100               	movlb	0	; () banked
  3262  000730  25A1               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  3263  000732  0100               	movlb	0	; () banked
  3264  000734  6F8F               	movwf	___awmod@dividend& (0+255),b
  3265  000736  0100               	movlb	0	; () banked
  3266  000738  6B90               	clrf	(___awmod@dividend+1)& (0+255),b
  3267  00073A  0100               	movlb	0	; () banked
  3268  00073C  3790               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  3269  00073E  EC4C  F005         	call	___awmod	;wreg free
  3270  000742  0E01               	movlw	1
  3271  000744  0100               	movlb	0	; () banked
  3272  000746  258F               	addwf	?___awmod& (0+255),w,b
  3273  000748  0100               	movlb	0	; () banked
  3274  00074A  6F95               	movwf	___wmul@multiplier& (0+255),b
  3275  00074C  0E00               	movlw	0
  3276  00074E  0100               	movlb	0	; () banked
  3277  000750  2190               	addwfc	(?___awmod+1)& (0+255),w,b
  3278  000752  0100               	movlb	0	; () banked
  3279  000754  6F96               	movwf	(___wmul@multiplier+1)& (0+255),b
  3280  000756  0E00               	movlw	0
  3281  000758  0100               	movlb	0	; () banked
  3282  00075A  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3283  00075C  0E03               	movlw	3
  3284  00075E  6F97               	movwf	___wmul@multiplicand& (0+255),b
  3285  000760  EC96  F007         	call	___wmul	;wreg free
  3286  000764  0100               	movlb	0	; () banked
  3287  000766  5195               	movf	?___wmul& (0+255),w,b
  3288  000768  0100               	movlb	0	; () banked
  3289  00076A  259B               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  3290  00076C  6ED9               	movwf	fsr2l,c
  3291  00076E  0100               	movlb	0	; () banked
  3292  000770  5196               	movf	(?___wmul+1)& (0+255),w,b
  3293  000772  0100               	movlb	0	; () banked
  3294  000774  219C               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  3295  000776  6EDA               	movwf	fsr2h,c
  3296  000778  C09D  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3297  00077C  C09E  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3298  000780  C09F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3302  000784  0100               	movlb	0	; () banked
  3303  000786  EE20 F002          	lfsr	2,2
  3304  00078A  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3305  00078C  26D9               	addwf	fsr2l,f,c
  3306  00078E  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3307  000790  22DA               	addwfc	fsr2h,f,c
  3308  000792  2ADF               	incf	indf2,f,c
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3312  000794  C0A3  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;ES_Queue.c: 101: return(1);
  3316  000798  0E01               	movlw	1
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;ES_Queue.c: 102: }else
  3320                           
  3321                           ; BSR set to: 0
  3322  00079A  0012               	return	
  3323  00079C                     l1891:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;ES_Queue.c: 103: return(0);
  3327  00079C  0E00               	movlw	0
  3328                           
  3329                           ; BSR set to: 0
  3330  00079E  0012               	return	
  3331  0007A0                     __end_of_ES_EnQueueFIFO:
  3332                           	opt stack 0
  3333                           tosu	equ	0xFFF
  3334                           tosh	equ	0xFFE
  3335                           tosl	equ	0xFFD
  3336                           pclath	equ	0xFFA
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           indf1	equ	0xFE7
  3347                           postinc1	equ	0xFE6
  3348                           fsr1h	equ	0xFE2
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           postinc2	equ	0xFDE
  3352                           postdec2	equ	0xFDD
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function ___wmul *****************
  3358 ;; Defined at:
  3359 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  multiplier      2    6[BANK0 ] unsigned int 
  3362 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  product         2   10[BANK0 ] unsigned int 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  2    6[BANK0 ] unsigned int 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0, prodl, prodh
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3374 ;;      Params:         0       4       0       0
  3375 ;;      Locals:         0       2       0       0
  3376 ;;      Temps:          0       0       0       0
  3377 ;;      Totals:         0       6       0       0
  3378 ;;Total ram usage:        6 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    7
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_ES_EnQueueFIFO
  3385 ;;		_ES_DeQueue
  3386 ;;		i2_ES_EnQueueFIFO
  3387 ;;		_ES_EnQueueLIFO
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text18
  3392  000F2C                     __ptext18:
  3393                           	opt stack 0
  3394  000F2C                     ___wmul:
  3395                           	opt stack 21
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;incstack = 0
  3399  000F2C  0100               	movlb	0	; () banked
  3400  000F2E  5195               	movf	___wmul@multiplier& (0+255),w,b
  3401  000F30  0100               	movlb	0	; () banked
  3402  000F32  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3403  000F34  CFF3 F099          	movff	prodl,___wmul@product
  3404  000F38  CFF4 F09A          	movff	prodh,___wmul@product+1
  3405  000F3C  0100               	movlb	0	; () banked
  3406  000F3E  5195               	movf	___wmul@multiplier& (0+255),w,b
  3407  000F40  0100               	movlb	0	; () banked
  3408  000F42  0398               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3409  000F44  50F3               	movf	prodl,w,c
  3410  000F46  0100               	movlb	0	; () banked
  3411  000F48  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3412  000F4A  0100               	movlb	0	; () banked
  3413  000F4C  5196               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3414  000F4E  0100               	movlb	0	; () banked
  3415  000F50  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3416  000F52  50F3               	movf	prodl,w,c
  3417  000F54  0100               	movlb	0	; () banked
  3418  000F56  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3419                           
  3420                           ; BSR set to: 0
  3421  000F58  C099  F095         	movff	___wmul@product,?___wmul
  3422  000F5C  C09A  F096         	movff	___wmul@product+1,?___wmul+1
  3423  000F60  0012               	return	
  3424  000F62                     __end_of___wmul:
  3425                           	opt stack 0
  3426                           tosu	equ	0xFFF
  3427                           tosh	equ	0xFFE
  3428                           tosl	equ	0xFFD
  3429                           pclath	equ	0xFFA
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon	equ	0xFF2
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           indf1	equ	0xFE7
  3440                           postinc1	equ	0xFE6
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           postdec2	equ	0xFDD
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function ___awmod *****************
  3451 ;; Defined at:
  3452 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  dividend        2    0[BANK0 ] int 
  3455 ;;  divisor         2    2[BANK0 ] int 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  sign            1    5[BANK0 ] unsigned char 
  3458 ;;  counter         1    4[BANK0 ] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  2    0[BANK0 ] int 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3468 ;;      Params:         0       4       0       0
  3469 ;;      Locals:         0       2       0       0
  3470 ;;      Temps:          0       0       0       0
  3471 ;;      Totals:         0       6       0       0
  3472 ;;Total ram usage:        6 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    7
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_ES_EnQueueFIFO
  3479 ;;		i2_ES_EnQueueFIFO
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text19
  3484  000A98                     __ptext19:
  3485                           	opt stack 0
  3486  000A98                     ___awmod:
  3487                           	opt stack 19
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;incstack = 0
  3491  000A98  0E00               	movlw	0
  3492  000A9A  0100               	movlb	0	; () banked
  3493  000A9C  6F94               	movwf	___awmod@sign& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496  000A9E  0100               	movlb	0	; () banked
  3497  000AA0  AF90               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3498  000AA2  D008               	goto	l1807
  3499                           
  3500                           ; BSR set to: 0
  3501  000AA4  0100               	movlb	0	; () banked
  3502  000AA6  6D8F               	negf	___awmod@dividend& (0+255),b
  3503  000AA8  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3504  000AAA  B0D8               	btfsc	status,0,c
  3505  000AAC  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3506                           
  3507                           ; BSR set to: 0
  3508  000AAE  0E01               	movlw	1
  3509  000AB0  0100               	movlb	0	; () banked
  3510  000AB2  6F94               	movwf	___awmod@sign& (0+255),b
  3511  000AB4                     l1807:
  3512                           
  3513                           ; BSR set to: 0
  3514  000AB4  0100               	movlb	0	; () banked
  3515  000AB6  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3516  000AB8  D005               	goto	l1811
  3517                           
  3518                           ; BSR set to: 0
  3519  000ABA  0100               	movlb	0	; () banked
  3520  000ABC  6D91               	negf	___awmod@divisor& (0+255),b
  3521  000ABE  1F92               	comf	(___awmod@divisor+1)& (0+255),f,b
  3522  000AC0  B0D8               	btfsc	status,0,c
  3523  000AC2  2B92               	incf	(___awmod@divisor+1)& (0+255),f,b
  3524  000AC4                     l1811:
  3525                           
  3526                           ; BSR set to: 0
  3527  000AC4  0100               	movlb	0	; () banked
  3528  000AC6  5191               	movf	___awmod@divisor& (0+255),w,b
  3529  000AC8  0100               	movlb	0	; () banked
  3530  000ACA  1192               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3531  000ACC  B4D8               	btfsc	status,2,c
  3532  000ACE  D026               	goto	l1827
  3533                           
  3534                           ; BSR set to: 0
  3535  000AD0  0E01               	movlw	1
  3536  000AD2  0100               	movlb	0	; () banked
  3537  000AD4  6F93               	movwf	___awmod@counter& (0+255),b
  3538  000AD6  D006               	goto	l1817
  3539  000AD8                     l1815:
  3540                           
  3541                           ; BSR set to: 0
  3542  000AD8  0100               	movlb	0	; () banked
  3543  000ADA  90D8               	bcf	status,0,c
  3544  000ADC  3791               	rlcf	___awmod@divisor& (0+255),f,b
  3545  000ADE  3792               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3546  000AE0  0100               	movlb	0	; () banked
  3547  000AE2  2B93               	incf	___awmod@counter& (0+255),f,b
  3548  000AE4                     l1817:
  3549                           
  3550                           ; BSR set to: 0
  3551  000AE4  0100               	movlb	0	; () banked
  3552  000AE6  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3553  000AE8  D7F7               	goto	l1815
  3554  000AEA                     l1819:
  3555                           
  3556                           ; BSR set to: 0
  3557  000AEA  0100               	movlb	0	; () banked
  3558  000AEC  5191               	movf	___awmod@divisor& (0+255),w,b
  3559  000AEE  0100               	movlb	0	; () banked
  3560  000AF0  5D8F               	subwf	___awmod@dividend& (0+255),w,b
  3561  000AF2  0100               	movlb	0	; () banked
  3562  000AF4  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3563  000AF6  0100               	movlb	0	; () banked
  3564  000AF8  5990               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3565  000AFA  A0D8               	btfss	status,0,c
  3566  000AFC  D008               	goto	l1823
  3567                           
  3568                           ; BSR set to: 0
  3569  000AFE  0100               	movlb	0	; () banked
  3570  000B00  5191               	movf	___awmod@divisor& (0+255),w,b
  3571  000B02  0100               	movlb	0	; () banked
  3572  000B04  5F8F               	subwf	___awmod@dividend& (0+255),f,b
  3573  000B06  0100               	movlb	0	; () banked
  3574  000B08  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3575  000B0A  0100               	movlb	0	; () banked
  3576  000B0C  5B90               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3577  000B0E                     l1823:
  3578                           
  3579                           ; BSR set to: 0
  3580  000B0E  0100               	movlb	0	; () banked
  3581  000B10  90D8               	bcf	status,0,c
  3582  000B12  3392               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3583  000B14  3391               	rrcf	___awmod@divisor& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 0
  3586  000B16  0100               	movlb	0	; () banked
  3587  000B18  2F93               	decfsz	___awmod@counter& (0+255),f,b
  3588  000B1A  D7E7               	goto	l1819
  3589  000B1C                     l1827:
  3590                           
  3591                           ; BSR set to: 0
  3592  000B1C  0100               	movlb	0	; () banked
  3593  000B1E  5194               	movf	___awmod@sign& (0+255),w,b
  3594  000B20  0100               	movlb	0	; () banked
  3595  000B22  B4D8               	btfsc	status,2,c
  3596  000B24  D005               	goto	l1831
  3597                           
  3598                           ; BSR set to: 0
  3599  000B26  0100               	movlb	0	; () banked
  3600  000B28  6D8F               	negf	___awmod@dividend& (0+255),b
  3601  000B2A  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3602  000B2C  B0D8               	btfsc	status,0,c
  3603  000B2E  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3604  000B30                     l1831:
  3605                           
  3606                           ; BSR set to: 0
  3607  000B30  C08F  F08F         	movff	___awmod@dividend,?___awmod
  3608  000B34  C090  F090         	movff	___awmod@dividend+1,?___awmod+1
  3609  000B38  0012               	return	
  3610  000B3A                     __end_of___awmod:
  3611                           	opt stack 0
  3612                           tosu	equ	0xFFF
  3613                           tosh	equ	0xFFE
  3614                           tosl	equ	0xFFD
  3615                           pclath	equ	0xFFA
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf1	equ	0xFE7
  3626                           postinc1	equ	0xFE6
  3627                           fsr1h	equ	0xFE2
  3628                           fsr1l	equ	0xFE1
  3629                           indf2	equ	0xFDF
  3630                           postinc2	equ	0xFDE
  3631                           postdec2	equ	0xFDD
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _ES_Timer_Init *****************
  3637 ;; Defined at:
  3638 ;;		line 130 in file "ES_Timers.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  Rate            2    2[BANK0 ] enum E15423
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3652 ;;      Params:         0       2       0       0
  3653 ;;      Locals:         0       0       0       0
  3654 ;;      Temps:          0       0       0       0
  3655 ;;      Totals:         0       2       0       0
  3656 ;;Total ram usage:        2 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    8
  3659 ;; This function calls:
  3660 ;;		__HW_Timer_Init
  3661 ;; This function is called by:
  3662 ;;		_ES_Initialize
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text20
  3667  001076                     __ptext20:
  3668                           	opt stack 0
  3669  001076                     _ES_Timer_Init:
  3670                           	opt stack 21
  3671                           
  3672                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;incstack = 0
  3676  001076  C091  F08F         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3677  00107A  C092  F090         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3678  00107E  EC09  F008         	call	__HW_Timer_Init	;wreg free
  3679  001082  0012               	return		;funcret
  3680  001084                     __end_of_ES_Timer_Init:
  3681                           	opt stack 0
  3682                           tosu	equ	0xFFF
  3683                           tosh	equ	0xFFE
  3684                           tosl	equ	0xFFD
  3685                           pclath	equ	0xFFA
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           indf1	equ	0xFE7
  3696                           postinc1	equ	0xFE6
  3697                           fsr1h	equ	0xFE2
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function __HW_Timer_Init *****************
  3707 ;; Defined at:
  3708 ;;		line 71 in file "ES_Port.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  Rate            2    0[BANK0 ] enum E15412
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3722 ;;      Params:         0       2       0       0
  3723 ;;      Locals:         0       0       0       0
  3724 ;;      Temps:          0       0       0       0
  3725 ;;      Totals:         0       2       0       0
  3726 ;;Total ram usage:        2 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    7
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_ES_Timer_Init
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text21
  3737  001012                     __ptext21:
  3738                           	opt stack 0
  3739  001012                     __HW_Timer_Init:
  3740                           	opt stack 21
  3741                           
  3742                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  3743                           
  3744                           ;incstack = 0
  3745  001012  0E04               	movlw	4
  3746  001014  6E9D               	movwf	3997,c	;volatile
  3747                           
  3748                           ;ES_Port.c: 84: INTCON = 0b01000000;
  3749  001016  0E40               	movlw	64
  3750  001018  6EF2               	movwf	intcon,c	;volatile
  3751                           
  3752                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  3753  00101A  0E0A               	movlw	10
  3754  00101C  6EBD               	movwf	4029,c	;volatile
  3755                           
  3756                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  3757  00101E  0E01               	movlw	1
  3758  001020  6EBE               	movwf	4030,c	;volatile
  3759                           
  3760                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  3761  001022  0E00               	movlw	0
  3762  001024  6EBF               	movwf	4031,c	;volatile
  3763                           
  3764                           ;ES_Port.c: 106: T1CON = 0b00100001;
  3765  001026  0E21               	movlw	33
  3766  001028  6ECD               	movwf	4045,c	;volatile
  3767                           
  3768                           ;ES_Port.c: 107: PEIE = 1;
  3769  00102A  8CF2               	bsf	intcon,6,c	;volatile
  3770                           
  3771                           ;ES_Port.c: 108: {GIE = 1;};
  3772  00102C  8EF2               	bsf	intcon,7,c	;volatile
  3773  00102E  0012               	return		;funcret
  3774  001030                     __end_of__HW_Timer_Init:
  3775                           	opt stack 0
  3776                           tosu	equ	0xFFF
  3777                           tosh	equ	0xFFE
  3778                           tosl	equ	0xFFD
  3779                           pclath	equ	0xFFA
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           postinc0	equ	0xFEE
  3788                           wreg	equ	0xFE8
  3789                           indf1	equ	0xFE7
  3790                           postinc1	equ	0xFE6
  3791                           fsr1h	equ	0xFE2
  3792                           fsr1l	equ	0xFE1
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _ES_InitQueue *****************
  3801 ;; Defined at:
  3802 ;;		line 58 in file "ES_Queue.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  3805 ;;		 -> Queue0(12), 
  3806 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  3809 ;;		 -> Queue0(12), 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      unsigned char 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3819 ;;      Params:         0       3       0       0
  3820 ;;      Locals:         0       2       0       0
  3821 ;;      Temps:          0       0       0       0
  3822 ;;      Totals:         0       5       0       0
  3823 ;;Total ram usage:        5 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    7
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_ES_Initialize
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text22
  3834  000EF0                     __ptext22:
  3835                           	opt stack 0
  3836  000EF0                     _ES_InitQueue:
  3837                           	opt stack 22
  3838                           
  3839                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3840                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3841                           
  3842                           ;incstack = 0
  3843  000EF0  C08F  F092         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3844  000EF4  C090  F093         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3845                           
  3846                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3847  000EF8  0100               	movlb	0	; () banked
  3848  000EFA  0591               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  3849  000EFC  C092  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3850  000F00  C093  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3851  000F04  6EDF               	movwf	indf2,c
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3855  000F06  0100               	movlb	0	; () banked
  3856  000F08  EE20 F001          	lfsr	2,1
  3857  000F0C  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3858  000F0E  26D9               	addwf	fsr2l,f,c
  3859  000F10  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3860  000F12  22DA               	addwfc	fsr2h,f,c
  3861  000F14  0E00               	movlw	0
  3862  000F16  6EDF               	movwf	indf2,c
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3866  000F18  0100               	movlb	0	; () banked
  3867  000F1A  EE20 F002          	lfsr	2,2
  3868  000F1E  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3869  000F20  26D9               	addwf	fsr2l,f,c
  3870  000F22  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3871  000F24  22DA               	addwfc	fsr2h,f,c
  3872  000F26  0E00               	movlw	0
  3873  000F28  6EDF               	movwf	indf2,c
  3874  000F2A  0012               	return	
  3875  000F2C                     __end_of_ES_InitQueue:
  3876                           	opt stack 0
  3877                           tosu	equ	0xFFF
  3878                           tosh	equ	0xFFE
  3879                           tosl	equ	0xFFD
  3880                           pclath	equ	0xFFA
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           postinc0	equ	0xFEE
  3889                           wreg	equ	0xFE8
  3890                           indf1	equ	0xFE7
  3891                           postinc1	equ	0xFE6
  3892                           fsr1h	equ	0xFE2
  3893                           fsr1l	equ	0xFE1
  3894                           indf2	equ	0xFDF
  3895                           postinc2	equ	0xFDE
  3896                           postdec2	equ	0xFDD
  3897                           fsr2h	equ	0xFDA
  3898                           fsr2l	equ	0xFD9
  3899                           status	equ	0xFD8
  3900                           
  3901 ;; *************** function _ISR *****************
  3902 ;; Defined at:
  3903 ;;		line 111 in file "ES_Port.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3917 ;;      Params:         0       0       0       0
  3918 ;;      Locals:         0       0       0       0
  3919 ;;      Temps:         16       0       0       0
  3920 ;;      Totals:        16       0       0       0
  3921 ;;Total ram usage:       16 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    6
  3924 ;; This function calls:
  3925 ;;		_BusErrorResponse
  3926 ;;		_CanErrorResponse
  3927 ;;		_CanRCVResponse
  3928 ;;		_CanXmitResponse
  3929 ;; This function is called by:
  3930 ;;		Interrupt level 2
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	intcode
  3935  000008                     __pintcode:
  3936                           	opt stack 0
  3937  000008                     _ISR:
  3938                           	opt stack 19
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;incstack = 0
  3942  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3943  00000A  CFFA F026          	movff	pclath,??_ISR+2
  3944  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  3945  000012  ED3E  F004         	call	int_func,f	;refresh shadow registers
  3946                           tosu	equ	0xFFF
  3947                           tosh	equ	0xFFE
  3948                           tosl	equ	0xFFD
  3949                           pclatu	equ	0xFFB
  3950                           pclath	equ	0xFFA
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           prodh	equ	0xFF4
  3956                           prodl	equ	0xFF3
  3957                           intcon	equ	0xFF2
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           indf1	equ	0xFE7
  3961                           postinc1	equ	0xFE6
  3962                           fsr1h	equ	0xFE2
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971                           	psect	intcode_body
  3972  00087C                     __pintcode_body:
  3973                           	opt stack 19
  3974  00087C                     int_func:
  3975                           	opt stack 19
  3976  00087C  0006               	pop		; remove dummy address from shadow register refresh
  3977  00087E  CFE9 F028          	movff	fsr0l,??_ISR+4
  3978  000882  CFEA F029          	movff	fsr0h,??_ISR+5
  3979  000886  CFE1 F02A          	movff	fsr1l,??_ISR+6
  3980  00088A  CFE2 F02B          	movff	fsr1h,??_ISR+7
  3981  00088E  CFD9 F02C          	movff	fsr2l,??_ISR+8
  3982  000892  CFDA F02D          	movff	fsr2h,??_ISR+9
  3983  000896  CFF3 F02E          	movff	prodl,??_ISR+10
  3984  00089A  CFF4 F02F          	movff	prodh,??_ISR+11
  3985  00089E  CFF6 F030          	movff	tblptrl,??_ISR+12
  3986  0008A2  CFF7 F031          	movff	tblptrh,??_ISR+13
  3987  0008A6  CFF8 F032          	movff	tblptru,??_ISR+14
  3988  0008AA  CFF5 F033          	movff	tablat,??_ISR+15
  3989                           
  3990                           ;ES_Port.c: 114: static unsigned int LastTime;
  3991                           ;ES_Port.c: 115: static unsigned int NextTime;
  3992                           ;ES_Port.c: 117: if (CCP1IF == 1)
  3993  0008AE  A49E               	btfss	3998,2,c	;volatile
  3994  0008B0  D015               	goto	i2l2295
  3995                           
  3996                           ;ES_Port.c: 118: {
  3997                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3998  0008B2  50BF               	movf	4031,w,c	;volatile
  3999  0008B4  6E24               	movwf	??_ISR& (0+255),c
  4000  0008B6  50BE               	movf	4030,w,c	;volatile
  4001  0008B8  6E34               	movwf	ISR@LastTime,c
  4002  0008BA  C024  F035         	movff	??_ISR,ISR@LastTime+1
  4003                           
  4004                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  4005  0008BE  0E20               	movlw	32
  4006  0008C0  2434               	addwf	ISR@LastTime,w,c
  4007  0008C2  6E36               	movwf	ISR@NextTime,c
  4008  0008C4  0E4E               	movlw	78
  4009  0008C6  2035               	addwfc	ISR@LastTime+1,w,c
  4010  0008C8  6E37               	movwf	ISR@NextTime+1,c
  4011                           
  4012                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  4013  0008CA  5037               	movf	ISR@NextTime+1,w,c
  4014  0008CC  6EBF               	movwf	4031,c	;volatile
  4015                           
  4016                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  4017  0008CE  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  4018                           
  4019                           ;ES_Port.c: 123: CCP1IF = 0;
  4020  0008D2  949E               	bcf	3998,2,c	;volatile
  4021                           
  4022                           ;ES_Port.c: 124: TickCount++;
  4023  0008D4  0100               	movlb	0	; () banked
  4024  0008D6  2B8B               	incf	_TickCount& (0+255),f,b	;volatile
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;ES_Port.c: 125: SysTickCounter++;
  4028  0008D8  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  4029  0008DA  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  4030  0008DC                     i2l2295:
  4031                           
  4032                           ;ES_Port.c: 126: }
  4033                           ;ES_Port.c: 128: if (TXB0IF == 1)
  4034  0008DC  A4A4               	btfss	4004,2,c	;volatile
  4035  0008DE  D003               	goto	i2l2301
  4036                           
  4037                           ;ES_Port.c: 129: {
  4038                           ;ES_Port.c: 130: TXB0IF = 0;
  4039  0008E0  94A4               	bcf	4004,2,c	;volatile
  4040                           
  4041                           ;ES_Port.c: 131: CanXmitResponse();
  4042  0008E2  EC48  F008         	call	_CanXmitResponse	;wreg free
  4043  0008E6                     i2l2301:
  4044                           
  4045                           ;ES_Port.c: 132: }
  4046                           ;ES_Port.c: 133: if (RXB0IF == 1) {
  4047  0008E6  A0A4               	btfss	4004,0,c	;volatile
  4048  0008E8  D003               	goto	i2l2307
  4049                           
  4050                           ;ES_Port.c: 134: RXB0IF = 0;
  4051  0008EA  90A4               	bcf	4004,0,c	;volatile
  4052                           
  4053                           ;ES_Port.c: 135: CanRCVResponse();
  4054  0008EC  EC42  F008         	call	_CanRCVResponse	;wreg free
  4055  0008F0                     i2l2307:
  4056                           
  4057                           ;ES_Port.c: 136: }
  4058                           ;ES_Port.c: 137: if (ERRIF == 1) {
  4059  0008F0  AAA4               	btfss	4004,5,c	;volatile
  4060  0008F2  D003               	goto	i2l2313
  4061                           
  4062                           ;ES_Port.c: 138: ERRIF = 0;
  4063  0008F4  9AA4               	bcf	4004,5,c	;volatile
  4064                           
  4065                           ;ES_Port.c: 139: CanErrorResponse();
  4066  0008F6  EC4E  F008         	call	_CanErrorResponse	;wreg free
  4067  0008FA                     i2l2313:
  4068                           
  4069                           ;ES_Port.c: 140: }
  4070                           ;ES_Port.c: 141: if (IRXIF == 1) {
  4071  0008FA  AEA4               	btfss	4004,7,c	;volatile
  4072  0008FC  D003               	goto	i2l160
  4073                           
  4074                           ;ES_Port.c: 142: IRXIF = 0;
  4075  0008FE  9EA4               	bcf	4004,7,c	;volatile
  4076                           
  4077                           ;ES_Port.c: 143: BusErrorResponse();
  4078  000900  EC4F  F008         	call	_BusErrorResponse	;wreg free
  4079  000904                     i2l160:
  4080  000904  C033  FFF5         	movff	??_ISR+15,tablat
  4081  000908  C032  FFF8         	movff	??_ISR+14,tblptru
  4082  00090C  C031  FFF7         	movff	??_ISR+13,tblptrh
  4083  000910  C030  FFF6         	movff	??_ISR+12,tblptrl
  4084  000914  C02F  FFF4         	movff	??_ISR+11,prodh
  4085  000918  C02E  FFF3         	movff	??_ISR+10,prodl
  4086  00091C  C02D  FFDA         	movff	??_ISR+9,fsr2h
  4087  000920  C02C  FFD9         	movff	??_ISR+8,fsr2l
  4088  000924  C02B  FFE2         	movff	??_ISR+7,fsr1h
  4089  000928  C02A  FFE1         	movff	??_ISR+6,fsr1l
  4090  00092C  C029  FFEA         	movff	??_ISR+5,fsr0h
  4091  000930  C028  FFE9         	movff	??_ISR+4,fsr0l
  4092  000934  C027  FFFB         	movff	??_ISR+3,pclatu
  4093  000938  C026  FFFA         	movff	??_ISR+2,pclath
  4094  00093C  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4095  00093E  0011               	retfie		f
  4096  000940                     __end_of_ISR:
  4097                           	opt stack 0
  4098                           tosu	equ	0xFFF
  4099                           tosh	equ	0xFFE
  4100                           tosl	equ	0xFFD
  4101                           pclatu	equ	0xFFB
  4102                           pclath	equ	0xFFA
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           postinc0	equ	0xFEE
  4111                           fsr0h	equ	0xFEA
  4112                           fsr0l	equ	0xFE9
  4113                           wreg	equ	0xFE8
  4114                           indf1	equ	0xFE7
  4115                           postinc1	equ	0xFE6
  4116                           fsr1h	equ	0xFE2
  4117                           fsr1l	equ	0xFE1
  4118                           indf2	equ	0xFDF
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _CanXmitResponse *****************
  4126 ;; Defined at:
  4127 ;;		line 173 in file "CanRX_Service.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		None
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4141 ;;      Params:         0       0       0       0
  4142 ;;      Locals:         0       0       0       0
  4143 ;;      Temps:          0       0       0       0
  4144 ;;      Totals:         0       0       0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_ISR
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text24
  4155  001090                     __ptext24:
  4156                           	opt stack 0
  4157  001090                     _CanXmitResponse:
  4158                           	opt stack 24
  4159                           
  4160                           ;CanRX_Service.c: 175: TXB0CONbits.TXREQ = 0;
  4161                           
  4162                           ;incstack = 0
  4163  001090  010F               	movlb	15	; () banked
  4164  001092  9740               	bcf	64,3,b	;volatile
  4165                           
  4166                           ; BSR set to: 15
  4167  001094  0012               	return		;funcret
  4168  001096                     __end_of_CanXmitResponse:
  4169                           	opt stack 0
  4170                           tosu	equ	0xFFF
  4171                           tosh	equ	0xFFE
  4172                           tosl	equ	0xFFD
  4173                           pclatu	equ	0xFFB
  4174                           pclath	equ	0xFFA
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           fsr0h	equ	0xFEA
  4184                           fsr0l	equ	0xFE9
  4185                           wreg	equ	0xFE8
  4186                           indf1	equ	0xFE7
  4187                           postinc1	equ	0xFE6
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _CanRCVResponse *****************
  4198 ;; Defined at:
  4199 ;;		line 178 in file "CanRX_Service.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  2  131[None  ] int 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4213 ;;      Params:         0       0       0       0
  4214 ;;      Locals:         0       0       0       0
  4215 ;;      Temps:          0       0       0       0
  4216 ;;      Totals:         0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    5
  4220 ;; This function calls:
  4221 ;;		_ProcessReceive
  4222 ;; This function is called by:
  4223 ;;		_ISR
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text25
  4228  001084                     __ptext25:
  4229                           	opt stack 0
  4230  001084                     _CanRCVResponse:
  4231                           	opt stack 19
  4232                           
  4233                           ;CanRX_Service.c: 180: if (RXB0CONbits.RXFUL == 1) {
  4234                           
  4235                           ; BSR set to: 15
  4236                           ;incstack = 0
  4237  001084  AE60               	btfss	3936,7,c	;volatile
  4238  001086  0012               	return	
  4239                           
  4240                           ;CanRX_Service.c: 181: ProcessReceive();
  4241  001088  EC04  F007         	call	_ProcessReceive	;wreg free
  4242                           
  4243                           ;CanRX_Service.c: 182: RXB0CONbits.RXFUL = 0;
  4244  00108C  9E60               	bcf	3936,7,c	;volatile
  4245  00108E  0012               	return	
  4246  001090                     __end_of_CanRCVResponse:
  4247                           	opt stack 0
  4248                           tosu	equ	0xFFF
  4249                           tosh	equ	0xFFE
  4250                           tosl	equ	0xFFD
  4251                           pclatu	equ	0xFFB
  4252                           pclath	equ	0xFFA
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           postinc0	equ	0xFEE
  4261                           fsr0h	equ	0xFEA
  4262                           fsr0l	equ	0xFE9
  4263                           wreg	equ	0xFE8
  4264                           indf1	equ	0xFE7
  4265                           postinc1	equ	0xFE6
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _ProcessReceive *****************
  4276 ;; Defined at:
  4277 ;;		line 282 in file "CanRX_Service.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  Event2Post      3   32[COMRAM] struct ES_Event_t
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4291 ;;      Params:         0       0       0       0
  4292 ;;      Locals:         3       0       0       0
  4293 ;;      Temps:          0       0       0       0
  4294 ;;      Totals:         3       0       0       0
  4295 ;;Total ram usage:        3 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    4
  4298 ;; This function calls:
  4299 ;;		_PostCanRX_Service
  4300 ;; This function is called by:
  4301 ;;		_CanRCVResponse
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text26
  4306  000E08                     __ptext26:
  4307                           	opt stack 0
  4308  000E08                     _ProcessReceive:
  4309                           	opt stack 19
  4310                           
  4311                           ;CanRX_Service.c: 285: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && R
      +                          XB0EIDL == 0x01) {
  4312                           
  4313                           ;incstack = 0
  4314  000E08  5061               	movf	3937,w,c	;volatile
  4315  000E0A  A4D8               	btfss	status,2,c
  4316  000E0C  0012               	return	
  4317  000E0E  0E18               	movlw	24
  4318  000E10  1862               	xorwf	3938,w,c	;volatile
  4319  000E12  A4D8               	btfss	status,2,c
  4320  000E14  0012               	return	
  4321  000E16  5063               	movf	3939,w,c	;volatile
  4322  000E18  A4D8               	btfss	status,2,c
  4323  000E1A  0012               	return	
  4324  000E1C  0464               	decf	3940,w,c	;volatile
  4325  000E1E  A4D8               	btfss	status,2,c
  4326  000E20  0012               	return	
  4327  000E22  D009               	goto	i2l2139
  4328  000E24                     i2l2129:
  4329                           
  4330                           ;CanRX_Service.c: 289: Event2Post.EventType = IDLE_EVENT;
  4331  000E24  0E05               	movlw	5
  4332  000E26  D005               	goto	L6
  4333  000E28                     i2l2131:
  4334                           
  4335                           ;CanRX_Service.c: 292: Event2Post.EventType = SPEAKING_EVENT;
  4336  000E28  0E06               	movlw	6
  4337  000E2A  D003               	goto	L6
  4338  000E2C                     i2l2133:
  4339                           
  4340                           ;CanRX_Service.c: 295: Event2Post.EventType = LOADING_EVENT;
  4341  000E2C  0E07               	movlw	7
  4342  000E2E  D001               	goto	L6
  4343  000E30                     i2l2135:
  4344                           
  4345                           ;CanRX_Service.c: 298: Event2Post.EventType = LISTENING_EVENT;
  4346  000E30  0E08               	movlw	8
  4347  000E32                     L6:
  4348  000E32  6E21               	movwf	ProcessReceive@Event2Post,c
  4349                           
  4350                           ;CanRX_Service.c: 300: }
  4351                           
  4352                           ;CanRX_Service.c: 299: break;
  4353  000E34  D00D               	goto	i2l2141
  4354  000E36                     i2l2139:
  4355  000E36  5066               	movf	3942,w,c	;volatile
  4356                           
  4357                           ; Switch size 1, requested type "space"
  4358                           ; Number of cases is 4, Range of values is 0 to 3
  4359                           ; switch strategies available:
  4360                           ; Name         Instructions Cycles
  4361                           ; simple_byte           13     7 (average)
  4362                           ;	Chosen strategy is simple_byte
  4363  000E38  0A00               	xorlw	0	; case 0
  4364  000E3A  B4D8               	btfsc	status,2,c
  4365  000E3C  D7F3               	goto	i2l2129
  4366  000E3E  0A01               	xorlw	1	; case 1
  4367  000E40  B4D8               	btfsc	status,2,c
  4368  000E42  D7F4               	goto	i2l2133
  4369  000E44  0A03               	xorlw	3	; case 2
  4370  000E46  B4D8               	btfsc	status,2,c
  4371  000E48  D7EF               	goto	i2l2131
  4372  000E4A  0A01               	xorlw	1	; case 3
  4373  000E4C  B4D8               	btfsc	status,2,c
  4374  000E4E  D7F0               	goto	i2l2135
  4375  000E50                     i2l2141:
  4376                           
  4377                           ;CanRX_Service.c: 301: PostCanRX_Service(Event2Post);
  4378  000E50  C021  F01E         	movff	ProcessReceive@Event2Post,PostCanRX_Service@ThisEvent
  4379  000E54  C022  F01F         	movff	ProcessReceive@Event2Post+1,PostCanRX_Service@ThisEvent+1
  4380  000E58  C023  F020         	movff	ProcessReceive@Event2Post+2,PostCanRX_Service@ThisEvent+2
  4381  000E5C  EC30  F008         	call	_PostCanRX_Service	;wreg free
  4382  000E60  0012               	return	
  4383  000E62                     __end_of_ProcessReceive:
  4384                           	opt stack 0
  4385                           tosu	equ	0xFFF
  4386                           tosh	equ	0xFFE
  4387                           tosl	equ	0xFFD
  4388                           pclatu	equ	0xFFB
  4389                           pclath	equ	0xFFA
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           postinc0	equ	0xFEE
  4398                           fsr0h	equ	0xFEA
  4399                           fsr0l	equ	0xFE9
  4400                           wreg	equ	0xFE8
  4401                           indf1	equ	0xFE7
  4402                           postinc1	equ	0xFE6
  4403                           fsr1h	equ	0xFE2
  4404                           fsr1l	equ	0xFE1
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _PostCanRX_Service *****************
  4413 ;; Defined at:
  4414 ;;		line 115 in file "CanRX_Service.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      unsigned char 
  4421 ;; Registers used:
  4422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4428 ;;      Params:         3       0       0       0
  4429 ;;      Locals:         0       0       0       0
  4430 ;;      Temps:          0       0       0       0
  4431 ;;      Totals:         3       0       0       0
  4432 ;;Total ram usage:        3 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    3
  4435 ;; This function calls:
  4436 ;;		i2_ES_PostToService
  4437 ;; This function is called by:
  4438 ;;		_ProcessReceive
  4439 ;;		_PostToList
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text27
  4444  001060                     __ptext27:
  4445                           	opt stack 0
  4446  001060                     _PostCanRX_Service:
  4447                           	opt stack 19
  4448                           
  4449                           ;CanRX_Service.c: 117: return ES_PostToService( MyPriority, ThisEvent);
  4450                           
  4451                           ;incstack = 0
  4452  001060  C01E  F018         	movff	PostCanRX_Service@ThisEvent,i2ES_PostToService@TheEvent
  4453  001064  C01F  F019         	movff	PostCanRX_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
  4454  001068  C020  F01A         	movff	PostCanRX_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
  4455  00106C  0100               	movlb	0	; () banked
  4456  00106E  518A               	movf	_MyPriority& (0+255),w,b
  4457  001070  EC9D  F006         	call	i2_ES_PostToService
  4458  001074  0012               	return	
  4459  001076                     __end_of_PostCanRX_Service:
  4460                           	opt stack 0
  4461                           tosu	equ	0xFFF
  4462                           tosh	equ	0xFFE
  4463                           tosl	equ	0xFFD
  4464                           pclatu	equ	0xFFB
  4465                           pclath	equ	0xFFA
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           postinc0	equ	0xFEE
  4474                           fsr0h	equ	0xFEA
  4475                           fsr0l	equ	0xFE9
  4476                           wreg	equ	0xFE8
  4477                           indf1	equ	0xFE7
  4478                           postinc1	equ	0xFE6
  4479                           fsr1h	equ	0xFE2
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function i2_ES_PostToService *****************
  4489 ;; Defined at:
  4490 ;;		line 351 in file "ES_Framework.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  WhichService    1    wreg     unsigned char 
  4493 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  WhichService    1   28[COMRAM] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      unsigned char 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4505 ;;      Params:         3       0       0       0
  4506 ;;      Locals:         1       0       0       0
  4507 ;;      Temps:          2       0       0       0
  4508 ;;      Totals:         6       0       0       0
  4509 ;;Total ram usage:        6 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    2
  4512 ;; This function calls:
  4513 ;;		i2_ES_EnQueueFIFO
  4514 ;; This function is called by:
  4515 ;;		_PostCanRX_Service
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text28
  4520  000D3A                     __ptext28:
  4521                           	opt stack 0
  4522  000D3A                     i2_ES_PostToService:
  4523                           	opt stack 19
  4524                           
  4525                           ;incstack = 0
  4526                           ;i2ES_PostToService@WhichService stored from wreg
  4527  000D3A  6E1D               	movwf	i2ES_PostToService@WhichService,c
  4528                           
  4529                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4530                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4531                           ;ES_Framework.c: 354: 1 )){
  4532  000D3C  501D               	movf	i2ES_PostToService@WhichService,w,c
  4533  000D3E  A4D8               	btfss	status,2,c
  4534  000D40  D02F               	goto	i2l1907
  4535  000D42  501D               	movf	i2ES_PostToService@WhichService,w,c
  4536  000D44  0D03               	mullw	3
  4537  000D46  0E54               	movlw	low _EventQueues
  4538  000D48  24F3               	addwf	prodl,w,c
  4539  000D4A  6EF6               	movwf	tblptrl,c
  4540  000D4C  0E03               	movlw	high _EventQueues
  4541  000D4E  20F4               	addwfc	prodh,w,c
  4542  000D50  6EF7               	movwf	tblptrh,c
  4543  000D52                     	if	0	;There are less than 3 active tblptr bytes
  4544  000D52                     	endif
  4545  000D52  0009               	tblrd		*+
  4546  000D54  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  4547  000D58  000A               	tblrd		*-
  4548  000D5A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  4549  000D5E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  4550  000D62  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  4551  000D66  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  4552  000D6A  ECA0  F004         	call	i2_ES_EnQueueFIFO	;wreg free
  4553  000D6E  06E8               	decf	wreg,f,c
  4554  000D70  A4D8               	btfss	status,2,c
  4555  000D72  D016               	goto	i2l1907
  4556                           
  4557                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4558  000D74  501D               	movf	i2ES_PostToService@WhichService,w,c
  4559  000D76  0D02               	mullw	2
  4560  000D78  0E01               	movlw	low _BitNum2SetMask
  4561  000D7A  24F3               	addwf	prodl,w,c
  4562  000D7C  6EF6               	movwf	tblptrl,c
  4563  000D7E  0E03               	movlw	high _BitNum2SetMask
  4564  000D80  20F4               	addwfc	prodh,w,c
  4565  000D82  6EF7               	movwf	tblptrh,c
  4566  000D84                     	if	0	;There are less than 3 active tblptr bytes
  4567  000D84                     	endif
  4568  000D84  0009               	tblrd		*+
  4569  000D86  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  4570  000D8A  0009               	tblrd		*+
  4571  000D8C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  4572  000D90  501B               	movf	??i2_ES_PostToService,w,c
  4573  000D92  0100               	movlb	0	; () banked
  4574  000D94  1385               	iorwf	_Ready& (0+255),f,b
  4575  000D96  501C               	movf	??i2_ES_PostToService+1,w,c
  4576  000D98  0100               	movlb	0	; () banked
  4577  000D9A  1386               	iorwf	(_Ready+1)& (0+255),f,b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;ES_Framework.c: 356: return 1;
  4581  000D9C  0E01               	movlw	1
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;ES_Framework.c: 357: } else
  4585                           
  4586                           ; BSR set to: 0
  4587  000D9E  0012               	return	
  4588  000DA0                     i2l1907:
  4589                           
  4590                           ;ES_Framework.c: 358: return 0;
  4591  000DA0  0E00               	movlw	0
  4592  000DA2  0012               	return	
  4593  000DA4                     __end_ofi2_ES_PostToService:
  4594                           	opt stack 0
  4595                           tosu	equ	0xFFF
  4596                           tosh	equ	0xFFE
  4597                           tosl	equ	0xFFD
  4598                           pclatu	equ	0xFFB
  4599                           pclath	equ	0xFFA
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           prodh	equ	0xFF4
  4605                           prodl	equ	0xFF3
  4606                           intcon	equ	0xFF2
  4607                           postinc0	equ	0xFEE
  4608                           fsr0h	equ	0xFEA
  4609                           fsr0l	equ	0xFE9
  4610                           wreg	equ	0xFE8
  4611                           indf1	equ	0xFE7
  4612                           postinc1	equ	0xFE6
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function i2_ES_EnQueueFIFO *****************
  4623 ;; Defined at:
  4624 ;;		line 85 in file "ES_Queue.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  4627 ;;		 -> Queue0(12), 
  4628 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  4631 ;;		 -> Queue0(12), 
  4632 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      unsigned char 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4642 ;;      Params:         5       0       0       0
  4643 ;;      Locals:         3       0       0       0
  4644 ;;      Temps:          3       0       0       0
  4645 ;;      Totals:        11       0       0       0
  4646 ;;Total ram usage:       11 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    1
  4649 ;; This function calls:
  4650 ;;		i2___awmod
  4651 ;;		i2___wmul
  4652 ;; This function is called by:
  4653 ;;		i2_ES_PostToService
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text29
  4658  000940                     __ptext29:
  4659                           	opt stack 0
  4660  000940                     i2_ES_EnQueueFIFO:
  4661                           	opt stack 19
  4662                           
  4663                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  4664                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  4665                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  4666                           
  4667                           ;incstack = 0
  4668  000940  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  4669  000944  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  4670                           
  4671                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  4672  000948  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4673  00094C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4674  000950  EE10 F002          	lfsr	1,2
  4675  000954  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4676  000956  26E1               	addwf	fsr1l,f,c
  4677  000958  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4678  00095A  22E2               	addwfc	fsr1h,f,c
  4679  00095C  50DE               	movf	postinc2,w,c
  4680  00095E  5CE6               	subwf	postinc1,w,c
  4681  000960  B0D8               	btfsc	status,0,c
  4682  000962  D046               	goto	i2l1851
  4683                           
  4684                           ;ES_Queue.c: 92: {
  4685                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4686  000964  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  4687  000968  9EF2               	bcf	intcon,7,c	;volatile
  4688                           
  4689                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  4690                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  4691  00096A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4692  00096E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4693  000972  50DF               	movf	indf2,w,c
  4694  000974  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  4695  000976  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  4696  000978  6E03               	movwf	i2___awmod@divisor,c
  4697  00097A  6A04               	clrf	i2___awmod@divisor+1,c
  4698  00097C  EE20 F002          	lfsr	2,2
  4699  000980  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4700  000982  26D9               	addwf	fsr2l,f,c
  4701  000984  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4702  000986  22DA               	addwfc	fsr2h,f,c
  4703  000988  50DF               	movf	indf2,w,c
  4704  00098A  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  4705  00098C  EE20 F001          	lfsr	2,1
  4706  000990  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4707  000992  26D9               	addwf	fsr2l,f,c
  4708  000994  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4709  000996  22DA               	addwfc	fsr2h,f,c
  4710  000998  50DF               	movf	indf2,w,c
  4711  00099A  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  4712  00099C  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  4713  00099E  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  4714  0009A0  6E01               	movwf	i2___awmod@dividend,c
  4715  0009A2  6A02               	clrf	i2___awmod@dividend+1,c
  4716  0009A4  3602               	rlcf	i2___awmod@dividend+1,f,c
  4717  0009A6  EC65  F006         	call	i2___awmod	;wreg free
  4718  0009AA  0E01               	movlw	1
  4719  0009AC  2401               	addwf	?i2___awmod,w,c
  4720  0009AE  6E07               	movwf	i2___wmul@multiplier,c
  4721  0009B0  0E00               	movlw	0
  4722  0009B2  2002               	addwfc	?i2___awmod+1,w,c
  4723  0009B4  6E08               	movwf	i2___wmul@multiplier+1,c
  4724  0009B6  0E00               	movlw	0
  4725  0009B8  6E0A               	movwf	i2___wmul@multiplicand+1,c
  4726  0009BA  0E03               	movlw	3
  4727  0009BC  6E09               	movwf	i2___wmul@multiplicand,c
  4728  0009BE  ECF6  F007         	call	i2___wmul	;wreg free
  4729  0009C2  5007               	movf	?i2___wmul,w,c
  4730  0009C4  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  4731  0009C6  6ED9               	movwf	fsr2l,c
  4732  0009C8  5008               	movf	?i2___wmul+1,w,c
  4733  0009CA  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  4734  0009CC  6EDA               	movwf	fsr2h,c
  4735  0009CE  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  4736  0009D2  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  4737  0009D6  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  4738                           
  4739                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  4740  0009DA  EE20 F002          	lfsr	2,2
  4741  0009DE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4742  0009E0  26D9               	addwf	fsr2l,f,c
  4743  0009E2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4744  0009E4  22DA               	addwfc	fsr2h,f,c
  4745  0009E6  2ADF               	incf	indf2,f,c
  4746                           
  4747                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  4748  0009E8  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  4749                           
  4750                           ;ES_Queue.c: 101: return(1);
  4751  0009EC  0E01               	movlw	1
  4752                           
  4753                           ;ES_Queue.c: 102: }else
  4754  0009EE  0012               	return	
  4755  0009F0                     i2l1851:
  4756                           
  4757                           ;ES_Queue.c: 103: return(0);
  4758  0009F0  0E00               	movlw	0
  4759  0009F2  0012               	return	
  4760  0009F4                     __end_ofi2_ES_EnQueueFIFO:
  4761                           	opt stack 0
  4762                           tosu	equ	0xFFF
  4763                           tosh	equ	0xFFE
  4764                           tosl	equ	0xFFD
  4765                           pclatu	equ	0xFFB
  4766                           pclath	equ	0xFFA
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           postinc0	equ	0xFEE
  4775                           fsr0h	equ	0xFEA
  4776                           fsr0l	equ	0xFE9
  4777                           wreg	equ	0xFE8
  4778                           indf1	equ	0xFE7
  4779                           postinc1	equ	0xFE6
  4780                           fsr1h	equ	0xFE2
  4781                           fsr1l	equ	0xFE1
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           postdec2	equ	0xFDD
  4785                           fsr2h	equ	0xFDA
  4786                           fsr2l	equ	0xFD9
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function i2___wmul *****************
  4790 ;; Defined at:
  4791 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  multiplier      2    6[COMRAM] unsigned int 
  4794 ;;  multiplicand    2    8[COMRAM] unsigned int 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  __wmul          2   10[COMRAM] unsigned int 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  2    6[COMRAM] unsigned int 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, prodl, prodh
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4806 ;;      Params:         4       0       0       0
  4807 ;;      Locals:         2       0       0       0
  4808 ;;      Temps:          0       0       0       0
  4809 ;;      Totals:         6       0       0       0
  4810 ;;Total ram usage:        6 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		i2_ES_EnQueueFIFO
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text30
  4820  000FEC                     __ptext30:
  4821                           	opt stack 0
  4822  000FEC                     i2___wmul:
  4823                           	opt stack 19
  4824                           
  4825                           ;incstack = 0
  4826  000FEC  5007               	movf	i2___wmul@multiplier,w,c
  4827  000FEE  0209               	mulwf	i2___wmul@multiplicand,c
  4828  000FF0  CFF3 F00B          	movff	prodl,i2___wmul@product
  4829  000FF4  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  4830  000FF8  5007               	movf	i2___wmul@multiplier,w,c
  4831  000FFA  020A               	mulwf	i2___wmul@multiplicand+1,c
  4832  000FFC  50F3               	movf	prodl,w,c
  4833  000FFE  260C               	addwf	i2___wmul@product+1,f,c
  4834  001000  5008               	movf	i2___wmul@multiplier+1,w,c
  4835  001002  0209               	mulwf	i2___wmul@multiplicand,c
  4836  001004  50F3               	movf	prodl,w,c
  4837  001006  260C               	addwf	i2___wmul@product+1,f,c
  4838  001008  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  4839  00100C  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  4840  001010  0012               	return	
  4841  001012                     __end_ofi2___wmul:
  4842                           	opt stack 0
  4843                           tosu	equ	0xFFF
  4844                           tosh	equ	0xFFE
  4845                           tosl	equ	0xFFD
  4846                           pclatu	equ	0xFFB
  4847                           pclath	equ	0xFFA
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           fsr0h	equ	0xFEA
  4857                           fsr0l	equ	0xFE9
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           postinc1	equ	0xFE6
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function i2___awmod *****************
  4871 ;; Defined at:
  4872 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  dividend        2    0[COMRAM] int 
  4875 ;;  divisor         2    2[COMRAM] int 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  __awmod         1    5[COMRAM] unsigned char 
  4878 ;;  __awmod         1    4[COMRAM] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  2    0[COMRAM] int 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4888 ;;      Params:         4       0       0       0
  4889 ;;      Locals:         2       0       0       0
  4890 ;;      Temps:          0       0       0       0
  4891 ;;      Totals:         6       0       0       0
  4892 ;;Total ram usage:        6 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		i2_ES_EnQueueFIFO
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text31
  4902  000CCA                     __ptext31:
  4903                           	opt stack 0
  4904  000CCA                     i2___awmod:
  4905                           	opt stack 19
  4906                           
  4907                           ;incstack = 0
  4908  000CCA  0E00               	movlw	0
  4909  000CCC  6E06               	movwf	i2___awmod@sign,c
  4910  000CCE  AE02               	btfss	i2___awmod@dividend+1,7,c
  4911  000CD0  D006               	goto	i2l1765
  4912  000CD2  6C01               	negf	i2___awmod@dividend,c
  4913  000CD4  1E02               	comf	i2___awmod@dividend+1,f,c
  4914  000CD6  B0D8               	btfsc	status,0,c
  4915  000CD8  2A02               	incf	i2___awmod@dividend+1,f,c
  4916  000CDA  0E01               	movlw	1
  4917  000CDC  6E06               	movwf	i2___awmod@sign,c
  4918  000CDE                     i2l1765:
  4919  000CDE  AE04               	btfss	i2___awmod@divisor+1,7,c
  4920  000CE0  D004               	goto	i2l1769
  4921  000CE2  6C03               	negf	i2___awmod@divisor,c
  4922  000CE4  1E04               	comf	i2___awmod@divisor+1,f,c
  4923  000CE6  B0D8               	btfsc	status,0,c
  4924  000CE8  2A04               	incf	i2___awmod@divisor+1,f,c
  4925  000CEA                     i2l1769:
  4926  000CEA  5003               	movf	i2___awmod@divisor,w,c
  4927  000CEC  1004               	iorwf	i2___awmod@divisor+1,w,c
  4928  000CEE  B4D8               	btfsc	status,2,c
  4929  000CF0  D018               	goto	i2l1785
  4930  000CF2  0E01               	movlw	1
  4931  000CF4  6E05               	movwf	i2___awmod@counter,c
  4932  000CF6  D004               	goto	i2l1775
  4933  000CF8                     i2l1773:
  4934  000CF8  90D8               	bcf	status,0,c
  4935  000CFA  3603               	rlcf	i2___awmod@divisor,f,c
  4936  000CFC  3604               	rlcf	i2___awmod@divisor+1,f,c
  4937  000CFE  2A05               	incf	i2___awmod@counter,f,c
  4938  000D00                     i2l1775:
  4939  000D00  AE04               	btfss	i2___awmod@divisor+1,7,c
  4940  000D02  D7FA               	goto	i2l1773
  4941  000D04                     i2l1777:
  4942  000D04  5003               	movf	i2___awmod@divisor,w,c
  4943  000D06  5C01               	subwf	i2___awmod@dividend,w,c
  4944  000D08  5004               	movf	i2___awmod@divisor+1,w,c
  4945  000D0A  5802               	subwfb	i2___awmod@dividend+1,w,c
  4946  000D0C  A0D8               	btfss	status,0,c
  4947  000D0E  D004               	goto	i2l1781
  4948  000D10  5003               	movf	i2___awmod@divisor,w,c
  4949  000D12  5E01               	subwf	i2___awmod@dividend,f,c
  4950  000D14  5004               	movf	i2___awmod@divisor+1,w,c
  4951  000D16  5A02               	subwfb	i2___awmod@dividend+1,f,c
  4952  000D18                     i2l1781:
  4953  000D18  90D8               	bcf	status,0,c
  4954  000D1A  3204               	rrcf	i2___awmod@divisor+1,f,c
  4955  000D1C  3203               	rrcf	i2___awmod@divisor,f,c
  4956  000D1E  2E05               	decfsz	i2___awmod@counter,f,c
  4957  000D20  D7F1               	goto	i2l1777
  4958  000D22                     i2l1785:
  4959  000D22  5006               	movf	i2___awmod@sign,w,c
  4960  000D24  B4D8               	btfsc	status,2,c
  4961  000D26  D004               	goto	i2l1789
  4962  000D28  6C01               	negf	i2___awmod@dividend,c
  4963  000D2A  1E02               	comf	i2___awmod@dividend+1,f,c
  4964  000D2C  B0D8               	btfsc	status,0,c
  4965  000D2E  2A02               	incf	i2___awmod@dividend+1,f,c
  4966  000D30                     i2l1789:
  4967  000D30  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4968  000D34  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4969  000D38  0012               	return	
  4970  000D3A                     __end_ofi2___awmod:
  4971                           	opt stack 0
  4972                           tosu	equ	0xFFF
  4973                           tosh	equ	0xFFE
  4974                           tosl	equ	0xFFD
  4975                           pclatu	equ	0xFFB
  4976                           pclath	equ	0xFFA
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           postinc0	equ	0xFEE
  4985                           fsr0h	equ	0xFEA
  4986                           fsr0l	equ	0xFE9
  4987                           wreg	equ	0xFE8
  4988                           indf1	equ	0xFE7
  4989                           postinc1	equ	0xFE6
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _CanErrorResponse *****************
  5000 ;; Defined at:
  5001 ;;		line 187 in file "CanRX_Service.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		None
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5015 ;;      Params:         0       0       0       0
  5016 ;;      Locals:         0       0       0       0
  5017 ;;      Temps:          0       0       0       0
  5018 ;;      Totals:         0       0       0       0
  5019 ;;Total ram usage:        0 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; This function calls:
  5022 ;;		Nothing
  5023 ;; This function is called by:
  5024 ;;		_ISR
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text32
  5029  00109C                     __ptext32:
  5030                           	opt stack 0
  5031  00109C                     _CanErrorResponse:
  5032                           	opt stack 24
  5033                           
  5034                           ;incstack = 0
  5035  00109C  0012               	return		;funcret
  5036  00109E                     __end_of_CanErrorResponse:
  5037                           	opt stack 0
  5038                           tosu	equ	0xFFF
  5039                           tosh	equ	0xFFE
  5040                           tosl	equ	0xFFD
  5041                           pclatu	equ	0xFFB
  5042                           pclath	equ	0xFFA
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           postinc0	equ	0xFEE
  5051                           fsr0h	equ	0xFEA
  5052                           fsr0l	equ	0xFE9
  5053                           wreg	equ	0xFE8
  5054                           indf1	equ	0xFE7
  5055                           postinc1	equ	0xFE6
  5056                           fsr1h	equ	0xFE2
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _BusErrorResponse *****************
  5066 ;; Defined at:
  5067 ;;		line 192 in file "CanRX_Service.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		None
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5081 ;;      Params:         0       0       0       0
  5082 ;;      Locals:         0       0       0       0
  5083 ;;      Temps:          0       0       0       0
  5084 ;;      Totals:         0       0       0       0
  5085 ;;Total ram usage:        0 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_ISR
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text33
  5095  00109E                     __ptext33:
  5096                           	opt stack 0
  5097  00109E                     _BusErrorResponse:
  5098                           	opt stack 24
  5099                           
  5100                           ;incstack = 0
  5101  00109E  0012               	return		;funcret
  5102  0010A0                     __end_of_BusErrorResponse:
  5103                           	opt stack 0
  5104                           tosu	equ	0xFFF
  5105                           tosh	equ	0xFFE
  5106                           tosl	equ	0xFFD
  5107                           pclatu	equ	0xFFB
  5108                           pclath	equ	0xFFA
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon	equ	0xFF2
  5116                           postinc0	equ	0xFEE
  5117                           fsr0h	equ	0xFEA
  5118                           fsr0l	equ	0xFE9
  5119                           wreg	equ	0xFE8
  5120                           indf1	equ	0xFE7
  5121                           postinc1	equ	0xFE6
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           tosu	equ	0xFFF
  5131                           tosh	equ	0xFFE
  5132                           tosl	equ	0xFFD
  5133                           pclatu	equ	0xFFB
  5134                           pclath	equ	0xFFA
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           postinc0	equ	0xFEE
  5143                           fsr0h	equ	0xFEA
  5144                           fsr0l	equ	0xFE9
  5145                           wreg	equ	0xFE8
  5146                           indf1	equ	0xFE7
  5147                           postinc1	equ	0xFE6
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157                           	psect	text34
  5158  000000                     __ptext34:
  5159                           	opt stack 0
  5160                           tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           pclatu	equ	0xFFB
  5164                           pclath	equ	0xFFA
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           postinc0	equ	0xFEE
  5173                           fsr0h	equ	0xFEA
  5174                           fsr0l	equ	0xFE9
  5175                           wreg	equ	0xFE8
  5176                           indf1	equ	0xFE7
  5177                           postinc1	equ	0xFE6
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187                           	psect	rparam
  5188  0000                     tosu	equ	0xFFF
  5189                           tosh	equ	0xFFE
  5190                           tosl	equ	0xFFD
  5191                           pclatu	equ	0xFFB
  5192                           pclath	equ	0xFFA
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           postinc0	equ	0xFEE
  5201                           fsr0h	equ	0xFEA
  5202                           fsr0l	equ	0xFE9
  5203                           wreg	equ	0xFE8
  5204                           indf1	equ	0xFE7
  5205                           postinc1	equ	0xFE6
  5206                           fsr1h	equ	0xFE2
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215                           	psect	temp
  5216  000048                     btemp:
  5217                           	opt stack 0
  5218  000048                     	ds	1
  5219  0000                     int$flags	set	btemp
  5220                           tosu	equ	0xFFF
  5221                           tosh	equ	0xFFE
  5222                           tosl	equ	0xFFD
  5223                           pclatu	equ	0xFFB
  5224                           pclath	equ	0xFFA
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           postinc0	equ	0xFEE
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           postinc1	equ	0xFE6
  5238                           fsr1h	equ	0xFE2
  5239                           fsr1l	equ	0xFE1
  5240                           indf2	equ	0xFDF
  5241                           postinc2	equ	0xFDE
  5242                           postdec2	equ	0xFDD
  5243                           fsr2h	equ	0xFDA
  5244                           fsr2l	equ	0xFD9
  5245                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      71
    BANK0           160     37      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCanRX_Service(), 

    S99$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    S78$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    S78$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ProcessReceive
    _ProcessReceive->_PostCanRX_Service
    _PostCanRX_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Initialize
    _ES_Run->_ES_DeQueue
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_ES_GetMSBitSet
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCanRX_Service
    _InitCanRX_Service->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6835
                                             36 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    3158
                                             22 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunCanRX_Service *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0     333
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0     333
                                             10 BANK0      4     4      0
                     _ES_GetMSBitSet
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _RunCanRX_Service                                     6     3      3      98
                                              0 BANK0      6     3      3
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2237
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    3281
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitCanRX_Service *
 ---------------------------------------------------------------------------------
 (2) _InitCanRX_Service                                    4     4      0    2562
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _ES_PostToService                                     6     3      3    2517
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (4) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     947
                                             35 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (7) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CanRCVResponse                                       0     0      0     947
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (8) _ProcessReceive                                       3     3      0     947
                                             32 COMRAM     3     3      0
                  _PostCanRX_Service
 ---------------------------------------------------------------------------------
 (9) _PostCanRX_Service                                    3     0      3     921
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (10) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (11) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCanRX_Service *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCanRX_Service *
       _InitCanHardware
       _InitPins
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         _ES_GetMSBitSet
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ProcessReceive
       _PostCanRX_Service
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     25      54       4       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      47       1       75.5%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B       9        0.0%
DATA                 0      0      9B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec  2 15:15:09 2016

                   ??__HW_Timer_Init 0091                  ES_CheckUserEvents@i 008F  
                __HW_Timer_Init@Rate 008F                  ___wmul@multiplicand 0097  
          __size_of_BusErrorResponse 0002                                  l307 0BCC  
                                l413 0DB0                                  l414 0DB6  
                                l415 0DBE                                  l416 0DC8  
                                l433 0BD2                                  l436 0C36  
              __end_of_ES_Initialize 06BE                                  _GIE 007F97  
                                _ISR 0008                                  u964 0A26  
                                u965 0A1E                         ___awmod@sign 0094  
            __end_of_Check4Keystroke 109A                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00A3              ES_EnQueueFIFO@Event2Add 009D  
                  ?_ES_PostToService 00A6                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0080                                 l2101 0FC2  
                               l2015 0EE4                                 l2007 0EBC  
                               l2111 0DD2                                 l2113 0DF4  
                               l2051 0494                                 l2107 0DA6  
                               l2061 04D8                                 l2055 04B0  
                               l2207 0F70                                 l2209 0F78  
                               l2155 0632                                 l2171 06BA  
                               l2147 05E4                                 l2083 1054  
                               l2403 0BB4                                 l2181 0562  
                               l2167 06B4                                 l2159 0636  
                               l2079 104C                                 l2191 05CC  
                               l2175 04E0                                 l1811 0AC4  
                               l2187 05B6                                 l1831 0B30  
                               l1823 0B0E                                 l1815 0AD8  
                               l1807 0AB4                                 l1817 0AE4  
                               l2393 0B6C                                 l1819 0AEA  
                               l1827 0B1C                                 l1923 0CC6  
                               l2395 0B7E                                 l2397 0B90  
                               l1871 0A92                                 l2399 0BA2  
                               l1857 0A00                                 l1937 07B4  
                               l1891 079C                                 l1867 0A8C  
                               l1947 0830                                 STR_1 035B  
                               STR_2 0376                                 STR_3 038E  
                               STR_4 03A5                                 u1118 0E88  
                               u1119 0EA0                                 _LATA 000F89  
                               _LATB 000F8A                                 u1258 068E  
                               u1259 06AA                                 u1298 058C  
                               u1299 05A4                                 _PIE1 000F9D  
                               _PEIE 007F96                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00A9  
                               _main 0B3A                          ?_ES_DeQueue 009B  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0048                        main@ErrorType 00B3  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
                   _RunCanRX_Service 0DA4              __end_of_InitCanHardware 0C52  
                              ??_ISR 0024                   ES_Run@HighestPrior 00A9  
                              ?_main 0001                __end_of_ES_Timer_Init 1084  
                    __end_of___awmod 0B3A                      __end_of___lbmod 0EF0  
                              _T1CON 000FCD                           _DistList00 0359  
                              _LATA0 007C48                                _LATA1 007C49  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l160 0904  
                              _IRXIE 007D1F                                _IRXIF 007D27  
                              _PORTA 000F80                                _PORTB 000F81  
                              _TRISA 000F92                        __CFG_PWRT$OFF 000000  
                              _Ready 0085                                _putch 109A  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 1012  
                              status 000FD8                   __size_ofi2___awmod 0070  
         PostCanRX_Service@ThisEvent 001E                      __initialization 0FC6  
             ES_GetMSBitSet@LoopCntr 0098            RunCanRX_Service@ThisEvent 008F  
         __end_of_ES_CheckUserEvents 0EAC                         __end_of_main 0BCE  
                  ES_Timer_Init@Rate 0091                     __end_of_InitPins 104A  
                __end_of_EventQueues 0357                               ??_main 00B3  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
        RunCanRX_Service@ReturnEvent 0092     __end_of__HW_Process_Pending_Ints 1060  
           ProcessReceive@Event2Post 0021                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 008A  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0091  
                             i2l2131 0E28                               i2l2133 0E2C  
                             i2l2141 0E50                               i2l2301 08E6  
                             i2l2135 0E30                               i2l2129 0E24  
                             i2l2313 08FA                               i2l2139 0E36  
                             i2l2307 08F0                               i2l2295 08DC  
                             i2l1851 09F0                               i2l1907 0DA0  
                             i2l1781 0D18                               i2l1773 0CF8  
                             i2l1765 0CDE                               i2l1775 0D00  
                             i2l1777 0D04                               i2l1785 0D22  
                             i2l1769 0CEA                               i2l1789 0D30  
                             _INTCON 000FF2                               _RXB0D0 000F66  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 04DE                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0024  
                   ??_ES_EnQueueFIFO 00A0                       _Timer2PostFunc 0321  
                             _Queue0 003C                       _SysTickCounter 0038  
                             ___wmul 0F2C                            ??___awmod 0093  
                          ??___lbmod 0090                     ?_InitCanHardware 0001  
                             clear_0 0FCC                               clear_1 0FD8  
                   _BusErrorResponse 109E                      ___awmod@divisor 0091  
                    ___awmod@counter 0093                               _printf 0F62  
                        ISR@LastTime 0034               ES_InitQueue@pThisQueue 0092  
                  __end_ofi2___awmod 0D3A                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 00DC                 ES_DeQueue@pThisQueue 00A3  
            ES_GetMSBitSet@Val2Check 008F            InitCanRX_Service@Priority 00AF  
                    ___lbmod@divisor 008F                           __accesstop 0060  
            __end_of__initialization 0FDE               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0091                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0354  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 008F              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 109C                      _TMR_ActiveFlags 0087  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 0096  
            __size_of_ProcessReceive 005A                       _TMR_TimerArray 0060  
           __end_of_RunCanRX_Service 0E08             ES_EnQueueFIFO@pThisQueue 00A4  
                            ??_putch 008F             __HW_Process_Pending_Ints 104A  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 009F  
          __size_of_ES_PostToService 0078                       ??_ES_InitQueue 0092  
                            ?___wmul 0095                              _CCP1CON 000FBD  
                            _ECANCON 000F77                              ?_printf 008F  
                         ??i2___wmul 000B                   __end_of_ES_DeQueue 04DE  
             i2ES_EnQueueFIFO@pBlock 000D                           ??_InitPins 008F  
                    __size_of_ES_Run 00F4               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006            i2ES_EnQueueFIFO@Event2Add 000F  
                            ___awmod 0A98                              ___lbmod 0EAC  
                    __size_of___wmul 0036                         __psmallconst 0300  
         i2ES_PostToService@TheEvent 0018                              __pcinit 0FC6  
                            __ramtop 0300                              __ptext0 0B3A  
                            __ptext1 0F62                              __ptext2 109A  
                            __ptext3 04DE                              __ptext4 104A  
                            __ptext5 07A0                              __ptext6 09F4  
                            __ptext7 0DA4                              __ptext8 1030  
                            __ptext9 0BCE             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 0938  
            __size_of__HW_Timer_Init 001E                     ___awmod@dividend 008F  
                 _ES_CheckUserEvents 0E62                      ES_Run@ThisEvent 008C  
                     __pintcode_body 087C                 end_of_initialization 0FDE  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 10A0  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 087C                  i2___wmul@multiplier 0007  
       ES_PostToService@WhichService 00AB               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 0002                              printf@c 0093  
                            printf@f 008F                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE           InitCanRX_Service@ThisEvent 00AC  
               ??_ES_CheckUserEvents 008F                        _ES_Initialize 05D2  
                     _ProcessReceive 0E08                     ___lbmod@dividend 0090  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0359  
               __end_of_ES_InitQueue 0F2C                            i2___awmod 0CCA  
                     ES_Initialize@i 00B2                          ___lbmod@rem 0092  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 05D2  
                 __end_of_DistList00 035B                     _ES_PostToService 0C52  
               __end_of_ServDescList 0354                       __end_of___wmul 0F62  
                  ??_CanXmitResponse 0001               __end_of_ProcessReceive 0E62  
                     ?_ES_Initialize 00B0           ??__HW_Process_Pending_Ints 009D  
                      _ES_Timer_Init 1076                     i2___wmul@product 000B  
                     __end_of_printf 0F96             __size_of_InitCanHardware 0084  
         __end_of_ES_Timer_Tick_Resp 087C                  start_initialization 0FC6  
                        __end_of_ISR 0940                    __size_ofi2___wmul 0026  
                         ?i2___awmod 0001                    ?_RunCanRX_Service 008F  
                        _CANSTATbits 000F6E                             ??_ES_Run 00A5  
                 ??_RunCanRX_Service 0092                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 008B           __end_ofi2_ES_PostToService 0DA4  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                           ??___wmul 0099              __size_of_CanRCVResponse 000C  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 0091  
                     ?_ES_Timer_Init 0091                      ?_ProcessReceive 0001  
                     __HW_Timer_Init 1012                          __pbssCOMRAM 0034  
                      __pcstackBANK0 008F                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 008F  
                        _BRGCON3bits 000F72                    _PostCanRX_Service 1060  
                 ?_PostCanRX_Service 001E                     i2_ES_EnQueueFIFO 0940  
                      __PRIMASK_temp 003A                     _CanErrorResponse 109C  
                ??_PostCanRX_Service 0021                    ??_Check4Keystroke 008F  
                          __pintcode 0008                             ?___awmod 008F  
                           ?___lbmod 008F                      ??_ES_Initialize 00B2  
           ES_PostToService@TheEvent 00A6               __end_of__HW_Timer_Init 1030  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
          __end_of_PostCanRX_Service 1076                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00B0  
                  ??_InitCanHardware 008F            ES_GetMSBitSet@Nybble2Test 0097  
                  ?_BusErrorResponse 0001                       ___wmul@product 0099  
                 ??_BusErrorResponse 0001                             _RXB0EIDH 000F63  
                           _RXB0EIDL 000F64                             _RXB0SIDH 000F61  
                           _RXB0SIDL 000F62                             _RXF0EIDH 000F02  
                           _RXF0EIDL 000F03                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _RXM0EIDH 000F1A                             _RXM0EIDL 000F1B  
                       _ES_InitQueue 0EF0                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 0093  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 008F  
                  ___wmul@multiplier 0095                             i2___wmul 0FEC  
                 ES_DeQueue@SaveCrit 00A1                 ES_EnQueueFIFO@pBlock 009B  
           __end_of_ES_PostToService 0CCA                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 1030                      _CanXmitResponse 1090  
                           __Hrparam 0000                       _ES_GetMSBitSet 09F4  
                           __Lrparam 0000                    _InitCanRX_Service 0F96  
                   __size_of___awmod 00A2                     __size_of___lbmod 0044  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 1084                       _ES_EnQueueFIFO 06BE  
                 ?_InitCanRX_Service 0001                  ??_InitCanRX_Service 00AC  
         __size_of_PostCanRX_Service 0016               __end_of_BitNum2SetMask 0321  
                           __ptext10 03B6                             __ptext11 0EAC  
                           __ptext20 1076                             __ptext12 0E62  
                           __ptext21 1012                             __ptext13 1096  
                           __ptext30 0FEC                             __ptext22 0EF0  
                           __ptext14 05D2                             __ptext31 0CCA  
                           __ptext15 0F96                             __ptext32 109C  
                           __ptext24 1090                             __ptext16 0C52  
                           __ptext33 109E                             __ptext25 1084  
                           __ptext17 06BE                             __ptext34 0000  
                           __ptext26 0E08                             __ptext18 0F2C  
                           __ptext27 1060                             __ptext19 0A98  
                           __ptext28 0D3A                             __ptext29 0940  
  ES_Timer_Tick_Resp@NeedsProcessing 0083                        __size_of_main 0094  
                 _ES_Timer_Tick_Resp 07A0               __end_of_ES_GetMSBitSet 0A98  
          __end_of_InitCanRX_Service 0FC6                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 1090               __end_of_ES_EnQueueFIFO 07A0  
                   ??_ProcessReceive 0021                             int$flags 0048  
          __size_of_RunCanRX_Service 0064                    ES_DeQueue@NumLeft 00A2  
                 i2_ES_PostToService 0D3A             __end_ofi2_ES_EnQueueFIFO 09F4  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 109E  
                ?i2_ES_PostToService 0018                 ??_ES_Timer_Tick_Resp 0099  
            __end_of_CanXmitResponse 1096                      _Check4Keystroke 1096  
                           intlevel2 0000                           _ES_DeQueue 03B6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 008F  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 0089  
                           printf@ap 0091                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 009B                     ES_DeQueue@pBlock 009B  
                    _InitCanHardware 0BCE               ES_DeQueue@pReturnEvent 009D  
              ES_InitQueue@BlockSize 0091           __size_of_InitCanRX_Service 0030  
