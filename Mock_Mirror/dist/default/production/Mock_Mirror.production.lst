

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec  9 22:05:38 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _BitNum2SetMask:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  0002               	dw	2
    59  000305  0004               	dw	4
    60  000307  0008               	dw	8
    61  000309  0010               	dw	16
    62  00030B  0020               	dw	32
    63  00030D  0040               	dw	64
    64  00030F  0080               	dw	128
    65  000311  0100               	dw	256
    66  000313  0200               	dw	512
    67  000315  0400               	dw	1024
    68  000317  0800               	dw	2048
    69  000319  1000               	dw	4096
    70  00031B  2000               	dw	8192
    71  00031D  4000               	dw	16384
    72  00031F  8000               	dw	32768
    73  000321                     __end_of_BitNum2SetMask:
    74                           	opt stack 0
    75  000321                     _Timer2PostFunc:
    76                           	opt stack 0
    77  000321  00                 	db	0
    78  000322  00                 	db	0
    79  000323  00                 	db	0
    80  000324  00                 	db	0
    81  000325  00                 	db	0
    82  000326  00                 	db	0
    83  000327  00                 	db	0
    84  000328  00                 	db	0
    85  000329  00                 	db	0
    86  00032A  00                 	db	0
    87  00032B  00                 	db	0
    88  00032C  00                 	db	0
    89  00032D  00                 	db	0
    90  00032E  00                 	db	0
    91  00032F  00                 	db	0
    92  000330  00                 	db	0
    93  000331  00                 	db	0
    94  000332  00                 	db	0
    95  000333  00                 	db	0
    96  000334  00                 	db	0
    97  000335  00                 	db	0
    98  000336  00                 	db	0
    99  000337  00                 	db	0
   100  000338  00                 	db	0
   101  000339  00                 	db	0
   102  00033A  00                 	db	0
   103  00033B  00                 	db	0
   104  00033C  00                 	db	0
   105  00033D  00                 	db	0
   106  00033E  00                 	db	0
   107  00033F  00                 	db	0
   108  000340  00                 	db	0
   109  000341                     __end_of_Timer2PostFunc:
   110                           	opt stack 0
   111  000341                     _Nybble2MSBitNum:
   112                           	opt stack 0
   113  000341  00                 	db	0
   114  000342  01                 	db	1
   115  000343  01                 	db	1
   116  000344  02                 	db	2
   117  000345  02                 	db	2
   118  000346  02                 	db	2
   119  000347  02                 	db	2
   120  000348  03                 	db	3
   121  000349  03                 	db	3
   122  00034A  03                 	db	3
   123  00034B  03                 	db	3
   124  00034C  03                 	db	3
   125  00034D  03                 	db	3
   126  00034E  03                 	db	3
   127  00034F  03                 	db	3
   128  000350                     __end_of_Nybble2MSBitNum:
   129                           	opt stack 0
   130  000350                     _ServDescList:
   131                           	opt stack 0
   132  000350  86                 	db	low _InitCanRX_Service
   133  000351  0F                 	db	high _InitCanRX_Service
   134  000352  94                 	db	low _RunCanRX_Service
   135  000353  0D                 	db	high _RunCanRX_Service
   136  000354                     __end_of_ServDescList:
   137                           	opt stack 0
   138  000354                     _EventQueues:
   139                           	opt stack 0
   140  000354  3C                 	db	low _Queue0
   141  000355  00                 	db	high _Queue0
   142  000356  04                 	db	4
   143  000357                     __end_of_EventQueues:
   144                           	opt stack 0
   145  000357                     _ES_EventList:
   146                           	opt stack 0
   147  000357  86                 	db	low _Check4Keystroke
   148  000358  10                 	db	high _Check4Keystroke
   149  000359                     __end_of_ES_EventList:
   150                           	opt stack 0
   151  000359                     _DistList00:
   152                           	opt stack 0
   153  000359  50                 	db	low _PostCanRX_Service
   154  00035A  10                 	db	high _PostCanRX_Service
   155  00035B                     __end_of_DistList00:
   156                           	opt stack 0
   157  0000                     _RXF0EIDH	set	3842
   158  0000                     _RXF0EIDL	set	3843
   159  0000                     _RXF0SIDH	set	3840
   160  0000                     _RXF0SIDL	set	3841
   161  0000                     _RXM0EIDH	set	3866
   162  0000                     _RXM0EIDL	set	3867
   163  0000                     _RXM0SIDH	set	3864
   164  0000                     _RXM0SIDL	set	3865
   165  0000                     _TXB0CONbits	set	3904
   166  0000                     _ADCON1	set	4033
   167  0000                     _BRGCON1bits	set	3952
   168  0000                     _BRGCON2bits	set	3953
   169  0000                     _BRGCON3bits	set	3954
   170  0000                     _CANCON	set	3951
   171  0000                     _CANSTATbits	set	3950
   172  0000                     _CCP1CON	set	4029
   173  0000                     _CCPR1H	set	4031
   174  0000                     _CCPR1L	set	4030
   175  0000                     _CIOCON	set	3955
   176  0000                     _ECANCON	set	3959
   177  0000                     _INTCON	set	4082
   178  0000                     _LATA	set	3977
   179  0000                     _LATB	set	3978
   180  0000                     _PIE1	set	3997
   181  0000                     _PORTA	set	3968
   182  0000                     _PORTB	set	3969
   183  0000                     _RXB0CONbits	set	3936
   184  0000                     _RXB0D0	set	3942
   185  0000                     _RXB0EIDH	set	3939
   186  0000                     _RXB0EIDL	set	3940
   187  0000                     _RXB0SIDH	set	3937
   188  0000                     _RXB0SIDL	set	3938
   189  0000                     _T1CON	set	4045
   190  0000                     _TRISA	set	3986
   191  0000                     _TRISBbits	set	3987
   192  0000                     _CCP1IF	set	31986
   193  0000                     _ERRIE	set	32029
   194  0000                     _ERRIF	set	32037
   195  0000                     _GIE	set	32663
   196  0000                     _IRXIE	set	32031
   197  0000                     _IRXIF	set	32039
   198  0000                     _LATA0	set	31816
   199  0000                     _LATA1	set	31817
   200  0000                     _LATA2	set	31818
   201  0000                     _LATA3	set	31819
   202  0000                     _PEIE	set	32662
   203  0000                     _RXB0IE	set	32024
   204  0000                     _RXB0IF	set	32032
   205  0000                     _TXB0IE	set	32026
   206  0000                     _TXB0IF	set	32034
   207  00035B                     STR_1:
   208  00035B  46                 	db	70	;'F'
   209  00035C  61                 	db	97	;'a'
   210  00035D  69                 	db	105	;'i'
   211  00035E  6C                 	db	108	;'l'
   212  00035F  65                 	db	101	;'e'
   213  000360  64                 	db	100	;'d'
   214  000361  20                 	db	32
   215  000362  6F                 	db	111	;'o'
   216  000363  6E                 	db	110	;'n'
   217  000364  20                 	db	32
   218  000365  61                 	db	97	;'a'
   219  000366  74                 	db	116	;'t'
   220  000367  74                 	db	116	;'t'
   221  000368  65                 	db	101	;'e'
   222  000369  6D                 	db	109	;'m'
   223  00036A  70                 	db	112	;'p'
   224  00036B  74                 	db	116	;'t'
   225  00036C  20                 	db	32
   226  00036D  74                 	db	116	;'t'
   227  00036E  6F                 	db	111	;'o'
   228  00036F  20                 	db	32
   229  000370  50                 	db	80	;'P'
   230  000371  6F                 	db	111	;'o'
   231  000372  73                 	db	115	;'s'
   232  000373  74                 	db	116	;'t'
   233  000374  0A                 	db	10
   234  000375  00                 	db	0
   235  000376                     STR_2:
   236  000376  46                 	db	70	;'F'
   237  000377  61                 	db	97	;'a'
   238  000378  69                 	db	105	;'i'
   239  000379  6C                 	db	108	;'l'
   240  00037A  65                 	db	101	;'e'
   241  00037B  64                 	db	100	;'d'
   242  00037C  20                 	db	32
   243  00037D  6F                 	db	111	;'o'
   244  00037E  6E                 	db	110	;'n'
   245  00037F  20                 	db	32
   246  000380  4E                 	db	78	;'N'
   247  000381  55                 	db	85	;'U'
   248  000382  4C                 	db	76	;'L'
   249  000383  4C                 	db	76	;'L'
   250  000384  20                 	db	32
   251  000385  70                 	db	112	;'p'
   252  000386  6F                 	db	111	;'o'
   253  000387  69                 	db	105	;'i'
   254  000388  6E                 	db	110	;'n'
   255  000389  74                 	db	116	;'t'
   256  00038A  65                 	db	101	;'e'
   257  00038B  72                 	db	114	;'r'
   258  00038C  0A                 	db	10
   259  00038D  00                 	db	0
   260  00038E                     STR_3:
   261  00038E  46                 	db	70	;'F'
   262  00038F  61                 	db	97	;'a'
   263  000390  69                 	db	105	;'i'
   264  000391  6C                 	db	108	;'l'
   265  000392  65                 	db	101	;'e'
   266  000393  64                 	db	100	;'d'
   267  000394  20                 	db	32
   268  000395  49                 	db	73	;'I'
   269  000396  6E                 	db	110	;'n'
   270  000397  69                 	db	105	;'i'
   271  000398  74                 	db	116	;'t'
   272  000399  69                 	db	105	;'i'
   273  00039A  61                 	db	97	;'a'
   274  00039B  6C                 	db	108	;'l'
   275  00039C  69                 	db	105	;'i'
   276  00039D  7A                 	db	122	;'z'
   277  00039E  61                 	db	97	;'a'
   278  00039F  74                 	db	116	;'t'
   279  0003A0  69                 	db	105	;'i'
   280  0003A1  6F                 	db	111	;'o'
   281  0003A2  6E                 	db	110	;'n'
   282  0003A3  0A                 	db	10
   283  0003A4  00                 	db	0
   284  0003A5                     STR_4:
   285  0003A5  4F                 	db	79	;'O'
   286  0003A6  74                 	db	116	;'t'
   287  0003A7  68                 	db	104	;'h'
   288  0003A8  65                 	db	101	;'e'
   289  0003A9  72                 	db	114	;'r'
   290  0003AA  20                 	db	32
   291  0003AB  46                 	db	70	;'F'
   292  0003AC  61                 	db	97	;'a'
   293  0003AD  69                 	db	105	;'i'
   294  0003AE  6C                 	db	108	;'l'
   295  0003AF  75                 	db	117	;'u'
   296  0003B0  72                 	db	114	;'r'
   297  0003B1  65                 	db	101	;'e'
   298  0003B2  0A                 	db	10
   299  0003B3  00                 	db	0
   300                           
   301                           ; #config settings
   302  0003B4  00                 	db	0	; dummy byte at the end
   303  0000                     
   304                           	psect	cinit
   305  000FB6                     __pcinit:
   306                           	opt stack 0
   307  000FB6                     start_initialization:
   308                           	opt stack 0
   309  000FB6                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Clear objects allocated to BANK0 (47 bytes)
   313  000FB6  EE00  F060         	lfsr	0,__pbssBANK0
   314  000FBA  0E2F               	movlw	47
   315  000FBC                     clear_0:
   316  000FBC  6AEE               	clrf	postinc0,c
   317  000FBE  06E8               	decf	wreg,f,c
   318  000FC0  E1FD               	bnz	clear_0
   319                           
   320                           ; Clear objects allocated to COMRAM (20 bytes)
   321  000FC2  EE00  F034         	lfsr	0,__pbssCOMRAM
   322  000FC6  0E14               	movlw	20
   323  000FC8                     clear_1:
   324  000FC8  6AEE               	clrf	postinc0,c
   325  000FCA  06E8               	decf	wreg,f,c
   326  000FCC  E1FD               	bnz	clear_1
   327  000FCE                     end_of_initialization:
   328                           	opt stack 0
   329  000FCE                     __end_of__initialization:
   330                           	opt stack 0
   331  000FCE  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   332  000FD0  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   333  000FD2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   334  000FD4  6EF8               	movwf	tblptru,c
   335  000FD6  0100               	movlb	0
   336  000FD8  EF9D  F005         	goto	_main	;jump to C main() function
   337                           tblptru	equ	0xFF8
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           
   341                           	psect	bssCOMRAM
   342  000034                     __pbssCOMRAM:
   343                           	opt stack 0
   344  000034                     ISR@LastTime:
   345                           	opt stack 0
   346  000034                     	ds	2
   347  000036                     ISR@NextTime:
   348                           	opt stack 0
   349  000036                     	ds	2
   350  000038                     _SysTickCounter:
   351                           	opt stack 0
   352  000038                     	ds	2
   353  00003A                     __PRIMASK_temp:
   354                           	opt stack 0
   355  00003A                     	ds	2
   356  00003C                     _Queue0:
   357                           	opt stack 0
   358  00003C                     	ds	12
   359                           tblptru	equ	0xFF8
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363                           	psect	bssBANK0
   364  000060                     __pbssBANK0:
   365                           	opt stack 0
   366  000060                     _TMR_TimerArray:
   367                           	opt stack 0
   368  000060                     	ds	32
   369  000080                     ES_Timer_Tick_Resp@NewEvent:
   370                           	opt stack 0
   371  000080                     	ds	3
   372  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   373                           	opt stack 0
   374  000083                     	ds	2
   375  000085                     _Ready:
   376                           	opt stack 0
   377  000085                     	ds	2
   378  000087                     _TMR_ActiveFlags:
   379                           	opt stack 0
   380  000087                     	ds	2
   381  000089                     ES_Timer_Tick_Resp@NextTimer2Process:
   382                           	opt stack 0
   383  000089                     	ds	1
   384  00008A                     _MyPriority:
   385                           	opt stack 0
   386  00008A                     	ds	1
   387  00008B                     _TickCount:
   388                           	opt stack 0
   389  00008B                     	ds	1
   390  00008C                     ES_Run@ThisEvent:
   391                           	opt stack 0
   392  00008C                     	ds	3
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	cstackBANK0
   398  00008F                     __pcstackBANK0:
   399                           	opt stack 0
   400  00008F                     ?_printf:
   401                           	opt stack 0
   402  00008F                     ?___awmod:
   403                           	opt stack 0
   404  00008F                     ?_RunCanRX_Service:
   405                           	opt stack 0
   406  00008F                     ES_CheckUserEvents@i:
   407                           	opt stack 0
   408  00008F                     ___lbmod@divisor:
   409                           	opt stack 0
   410  00008F                     ES_GetMSBitSet@Val2Check:
   411                           	opt stack 0
   412  00008F                     __HW_Timer_Init@Rate:
   413                           	opt stack 0
   414  00008F                     ES_InitQueue@pBlock:
   415                           	opt stack 0
   416  00008F                     printf@f:
   417                           	opt stack 0
   418  00008F                     ___awmod@dividend:
   419                           	opt stack 0
   420  00008F                     RunCanRX_Service@ThisEvent:
   421                           	opt stack 0
   422                           
   423                           ; 3 bytes @ 0x0
   424  00008F                     	ds	1
   425  000090                     ___lbmod@dividend:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x1
   429  000090                     	ds	1
   430  000091                     ??_ES_GetMSBitSet:
   431  000091                     ES_InitQueue@BlockSize:
   432                           	opt stack 0
   433  000091                     ___lbmod@counter:
   434                           	opt stack 0
   435  000091                     ES_Timer_Init@Rate:
   436                           	opt stack 0
   437  000091                     printf@ap:
   438                           	opt stack 0
   439  000091                     ___awmod@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x2
   443  000091                     	ds	1
   444  000092                     ___lbmod@rem:
   445                           	opt stack 0
   446  000092                     ES_InitQueue@pThisQueue:
   447                           	opt stack 0
   448  000092                     RunCanRX_Service@ReturnEvent:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x3
   452  000092                     	ds	1
   453  000093                     printf@c:
   454                           	opt stack 0
   455  000093                     ___awmod@counter:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x4
   459  000093                     	ds	1
   460  000094                     ___awmod@sign:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x5
   464  000094                     	ds	1
   465  000095                     ?___wmul:
   466                           	opt stack 0
   467  000095                     ___wmul@multiplier:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x6
   471  000095                     	ds	1
   472  000096                     ES_GetMSBitSet@ReturnVal:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x7
   476  000096                     	ds	1
   477  000097                     ES_GetMSBitSet@Nybble2Test:
   478                           	opt stack 0
   479  000097                     ___wmul@multiplicand:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x8
   483  000097                     	ds	1
   484  000098                     ES_GetMSBitSet@LoopCntr:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x9
   488  000098                     	ds	1
   489  000099                     ??_ES_Timer_Tick_Resp:
   490  000099                     ___wmul@product:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0xA
   494  000099                     	ds	2
   495  00009B                     ES_EnQueueFIFO@pBlock:
   496                           	opt stack 0
   497  00009B                     ES_DeQueue@pBlock:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0xC
   501  00009B                     	ds	2
   502  00009D                     ES_DeQueue@pReturnEvent:
   503                           	opt stack 0
   504  00009D                     ES_EnQueueFIFO@Event2Add:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0xE
   508  00009D                     	ds	2
   509  00009F                     ??_ES_DeQueue:
   510                           
   511                           ; 1 bytes @ 0x10
   512  00009F                     	ds	1
   513  0000A0                     ??_ES_EnQueueFIFO:
   514                           
   515                           ; 1 bytes @ 0x11
   516  0000A0                     	ds	1
   517  0000A1                     ES_DeQueue@SaveCrit:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x12
   521  0000A1                     	ds	1
   522  0000A2                     ES_DeQueue@NumLeft:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x13
   526  0000A2                     	ds	1
   527  0000A3                     ES_EnQueueFIFO@SaveCrit:
   528                           	opt stack 0
   529  0000A3                     ES_DeQueue@pThisQueue:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x14
   533  0000A3                     	ds	1
   534  0000A4                     ES_EnQueueFIFO@pThisQueue:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x15
   538  0000A4                     	ds	1
   539  0000A5                     ??_ES_Run:
   540                           
   541                           ; 1 bytes @ 0x16
   542  0000A5                     	ds	1
   543  0000A6                     ES_PostToService@TheEvent:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x17
   547  0000A6                     	ds	3
   548  0000A9                     ??_ES_PostToService:
   549  0000A9                     ES_Run@HighestPrior:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x1A
   553  0000A9                     	ds	2
   554  0000AB                     ES_PostToService@WhichService:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1C
   558  0000AB                     	ds	1
   559  0000AC                     InitCanRX_Service@ThisEvent:
   560                           	opt stack 0
   561                           
   562                           ; 3 bytes @ 0x1D
   563  0000AC                     	ds	3
   564  0000AF                     InitCanRX_Service@Priority:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x20
   568  0000AF                     	ds	1
   569  0000B0                     ES_Initialize@NewRate:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x21
   573  0000B0                     	ds	2
   574  0000B2                     ES_Initialize@i:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x23
   578  0000B2                     	ds	1
   579  0000B3                     main@ErrorType:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x24
   583  0000B3                     	ds	1
   584                           tblptru	equ	0xFF8
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           
   588                           	psect	cstackCOMRAM
   589  000001                     __pcstackCOMRAM:
   590                           	opt stack 0
   591  000001                     ?i2___awmod:
   592                           	opt stack 0
   593  000001                     i2___awmod@dividend:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x0
   597  000001                     	ds	2
   598  000003                     i2___awmod@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x2
   602  000003                     	ds	2
   603  000005                     i2___awmod@counter:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x4
   607  000005                     	ds	1
   608  000006                     i2___awmod@sign:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612  000006                     	ds	1
   613  000007                     ?i2___wmul:
   614                           	opt stack 0
   615  000007                     i2___wmul@multiplier:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x6
   619  000007                     	ds	2
   620  000009                     i2___wmul@multiplicand:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x8
   624  000009                     	ds	2
   625  00000B                     i2___wmul@product:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0xA
   629  00000B                     	ds	2
   630  00000D                     i2ES_EnQueueFIFO@pBlock:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0xC
   634  00000D                     	ds	2
   635  00000F                     i2ES_EnQueueFIFO@Event2Add:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0xE
   639  00000F                     	ds	3
   640  000012                     ??i2_ES_EnQueueFIFO:
   641                           
   642                           ; 1 bytes @ 0x11
   643  000012                     	ds	3
   644  000015                     i2ES_EnQueueFIFO@SaveCrit:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x14
   648  000015                     	ds	1
   649  000016                     i2ES_EnQueueFIFO@pThisQueue:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x15
   653  000016                     	ds	2
   654  000018                     i2ES_PostToService@TheEvent:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x17
   658  000018                     	ds	3
   659  00001B                     ??i2_ES_PostToService:
   660                           
   661                           ; 1 bytes @ 0x1A
   662  00001B                     	ds	2
   663  00001D                     i2ES_PostToService@WhichService:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x1C
   667  00001D                     	ds	1
   668  00001E                     PostCanRX_Service@ThisEvent:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x1D
   672  00001E                     	ds	3
   673  000021                     ProcessReceive@Event2Post:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x20
   677  000021                     	ds	3
   678  000024                     ??_ISR:
   679                           
   680                           ; 1 bytes @ 0x23
   681  000024                     	ds	16
   682                           tblptru	equ	0xFF8
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 26 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  ErrorType       1   36[BANK0 ] enum E15646
   696 ;; Return value:  Size  Location     Type
   697 ;;                  2  291[None  ] int 
   698 ;; Registers used:
   699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   705 ;;      Params:         0       0       0       0
   706 ;;      Locals:         0       1       0       0
   707 ;;      Temps:          0       0       0       0
   708 ;;      Totals:         0       1       0       0
   709 ;;Total ram usage:        1 bytes
   710 ;; Hardware stack levels required when called:   12
   711 ;; This function calls:
   712 ;;		_ES_Initialize
   713 ;;		_ES_Run
   714 ;;		_printf
   715 ;; This function is called by:
   716 ;;		Startup code after reset
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           	psect	text0
   721  000B3A                     __ptext0:
   722                           	opt stack 0
   723  000B3A                     _main:
   724                           	opt stack 19
   725                           
   726                           ;main.c: 33: ADCON1 = 0x0F;
   727                           
   728                           ;incstack = 0
   729  000B3A  0E0F               	movlw	15
   730  000B3C  6EC1               	movwf	4033,c	;volatile
   731                           
   732                           ;main.c: 41: ES_Return_t ErrorType;
   733                           ;main.c: 57: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   734  000B3E  0E9C               	movlw	156
   735  000B40  0100               	movlb	0	; () banked
   736  000B42  6FB1               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   737  000B44  0E3F               	movlw	63
   738  000B46  6FB0               	movwf	ES_Initialize@NewRate& (0+255),b
   739  000B48  ECE9  F002         	call	_ES_Initialize	;wreg free
   740  000B4C  0100               	movlb	0	; () banked
   741  000B4E  6FB3               	movwf	main@ErrorType& (0+255),b
   742                           
   743                           ; BSR set to: 0
   744                           ;main.c: 58: if ( ErrorType == Success ) {
   745  000B50  0100               	movlb	0	; () banked
   746  000B52  51B3               	movf	main@ErrorType& (0+255),w,b
   747  000B54  0100               	movlb	0	; () banked
   748  000B56  A4D8               	btfss	status,2,c
   749  000B58  D029               	goto	l2375
   750                           
   751                           ; BSR set to: 0
   752                           ;main.c: 60: ErrorType = ES_Run();
   753  000B5A  EC6F  F002         	call	_ES_Run	;wreg free
   754  000B5E  0100               	movlb	0	; () banked
   755  000B60  6FB3               	movwf	main@ErrorType& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 62: }
   759                           ;main.c: 64: switch (ErrorType){
   760  000B62  D024               	goto	l2375
   761  000B64                     l2365:
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 66: printf("Failed on attempt to Post\n");
   765  000B64  0E5B               	movlw	low STR_1
   766  000B66  0100               	movlb	0	; () banked
   767  000B68  6F8F               	movwf	printf@f& (0+255),b
   768  000B6A  0E03               	movlw	high STR_1
   769  000B6C  0100               	movlb	0	; () banked
   770  000B6E  6F90               	movwf	(printf@f+1)& (0+255),b
   771  000B70  ECA9  F007         	call	_printf	;wreg free
   772                           
   773                           ;main.c: 67: break;
   774  000B74  D027               	goto	l299
   775  000B76                     l2367:
   776                           
   777                           ;main.c: 69: printf("Failed on NULL pointer\n");
   778  000B76  0E76               	movlw	low STR_2
   779  000B78  0100               	movlb	0	; () banked
   780  000B7A  6F8F               	movwf	printf@f& (0+255),b
   781  000B7C  0E03               	movlw	high STR_2
   782  000B7E  0100               	movlb	0	; () banked
   783  000B80  6F90               	movwf	(printf@f+1)& (0+255),b
   784  000B82  ECA9  F007         	call	_printf	;wreg free
   785                           
   786                           ;main.c: 70: break;
   787  000B86  D01E               	goto	l299
   788  000B88                     l2369:
   789                           
   790                           ;main.c: 72: printf("Failed Initialization\n");
   791  000B88  0E8E               	movlw	low STR_3
   792  000B8A  0100               	movlb	0	; () banked
   793  000B8C  6F8F               	movwf	printf@f& (0+255),b
   794  000B8E  0E03               	movlw	high STR_3
   795  000B90  0100               	movlb	0	; () banked
   796  000B92  6F90               	movwf	(printf@f+1)& (0+255),b
   797  000B94  ECA9  F007         	call	_printf	;wreg free
   798                           
   799                           ;main.c: 73: break;
   800  000B98  D015               	goto	l299
   801  000B9A                     l2371:
   802                           
   803                           ;main.c: 75: printf("Other Failure\n");
   804  000B9A  0EA5               	movlw	low STR_4
   805  000B9C  0100               	movlb	0	; () banked
   806  000B9E  6F8F               	movwf	printf@f& (0+255),b
   807  000BA0  0E03               	movlw	high STR_4
   808  000BA2  0100               	movlb	0	; () banked
   809  000BA4  6F90               	movwf	(printf@f+1)& (0+255),b
   810  000BA6  ECA9  F007         	call	_printf	;wreg free
   811                           
   812                           ;main.c: 77: }
   813                           
   814                           ;main.c: 76: break;
   815  000BAA  D00C               	goto	l299
   816  000BAC                     l2375:
   817  000BAC  0100               	movlb	0	; () banked
   818  000BAE  51B3               	movf	main@ErrorType& (0+255),w,b
   819                           
   820                           ; Switch size 1, requested type "space"
   821                           ; Number of cases is 3, Range of values is 1 to 5
   822                           ; switch strategies available:
   823                           ; Name         Instructions Cycles
   824                           ; simple_byte           10     6 (average)
   825                           ;	Chosen strategy is simple_byte
   826  000BB0  0A01               	xorlw	1	; case 1
   827  000BB2  B4D8               	btfsc	status,2,c
   828  000BB4  D7D7               	goto	l2365
   829  000BB6  0A02               	xorlw	2	; case 3
   830  000BB8  B4D8               	btfsc	status,2,c
   831  000BBA  D7DD               	goto	l2367
   832  000BBC  0A06               	xorlw	6	; case 5
   833  000BBE  B4D8               	btfsc	status,2,c
   834  000BC0  D7E3               	goto	l2369
   835  000BC2  D7EB               	goto	l2371
   836  000BC4                     l299:
   837                           
   838                           ;main.c: 79: ;
   839  000BC4  D7FF               	goto	l299
   840  000BC6                     __end_of_main:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           status	equ	0xFD8
   846                           
   847 ;; *************** function _printf *****************
   848 ;; Defined at:
   849 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   852 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  tmpval          4    0        struct .
   855 ;;  cp              3    0        PTR const unsigned char 
   856 ;;  ap              2    2[BANK0 ] PTR void [1]
   857 ;;		 -> ?_printf(2), 
   858 ;;  len             2    0        unsigned int 
   859 ;;  val             2    0        unsigned int 
   860 ;;  c               1    4[BANK0 ] char 
   861 ;;  flag            1    0        unsigned char 
   862 ;;  prec            1    0        char 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2    0[BANK0 ] int 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   872 ;;      Params:         0       2       0       0
   873 ;;      Locals:         0       3       0       0
   874 ;;      Temps:          0       0       0       0
   875 ;;      Totals:         0       5       0       0
   876 ;;Total ram usage:        5 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    8
   879 ;; This function calls:
   880 ;;		_putch
   881 ;; This function is called by:
   882 ;;		_main
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text1
   887  000F52                     __ptext1:
   888                           	opt stack 0
   889  000F52                     _printf:
   890                           	opt stack 22
   891                           
   892                           ;doprnt.c: 466: va_list ap;
   893                           ;doprnt.c: 499: signed char c;
   894                           ;doprnt.c: 506: signed char prec;
   895                           ;doprnt.c: 508: unsigned char flag;
   896                           ;doprnt.c: 523: union {
   897                           ;doprnt.c: 524: unsigned long vd;
   898                           ;doprnt.c: 525: double integ;
   899                           ;doprnt.c: 526: } tmpval;
   900                           ;doprnt.c: 528: unsigned int val;
   901                           ;doprnt.c: 529: unsigned len;
   902                           ;doprnt.c: 530: const char * cp;
   903                           ;doprnt.c: 533: *ap = __va_start();
   904                           
   905                           ;incstack = 0
   906  000F52  0E91               	movlw	low (?_printf+2)
   907  000F54  0100               	movlb	0	; () banked
   908  000F56  6F91               	movwf	printf@ap& (0+255),b
   909  000F58  0E00               	movlw	high (?_printf+2)
   910  000F5A  0100               	movlb	0	; () banked
   911  000F5C  6F92               	movwf	(printf@ap+1)& (0+255),b
   912                           
   913                           ;doprnt.c: 536: while(c = *f++) {
   914  000F5E  D004               	goto	l2183
   915  000F60                     l2181:
   916                           
   917                           ; BSR set to: 0
   918                           ;doprnt.c: 540: {
   919                           ;doprnt.c: 541: (putch(c) );
   920  000F60  0100               	movlb	0	; () banked
   921  000F62  5193               	movf	printf@c& (0+255),w,b
   922  000F64  EC45  F008         	call	_putch
   923  000F68                     l2183:
   924  000F68  C08F  FFF6         	movff	printf@f,tblptrl
   925  000F6C  C090  FFF7         	movff	printf@f+1,tblptrh
   926  000F70  0100               	movlb	0	; () banked
   927  000F72  4B8F               	infsnz	printf@f& (0+255),f,b
   928  000F74  2B90               	incf	(printf@f+1)& (0+255),f,b
   929  000F76                     	if	0	;tblptru may be non-zero
   930  000F76                     	endif
   931  000F76                     	if	0	;tblptru may be non-zero
   932  000F76                     	endif
   933  000F76  0008               	tblrd		*
   934  000F78  CFF5 F093          	movff	tablat,printf@c
   935  000F7C  0100               	movlb	0	; () banked
   936  000F7E  5193               	movf	printf@c& (0+255),w,b
   937  000F80  B4D8               	btfsc	status,2,c
   938  000F82  0012               	return	
   939  000F84  D7ED               	goto	l2181
   940  000F86                     __end_of_printf:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           status	equ	0xFD8
   949                           
   950 ;; *************** function _putch *****************
   951 ;; Defined at:
   952 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  c               1    wreg     unsigned char 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  c               1    0[COMRAM] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   966 ;;      Params:         0       0       0       0
   967 ;;      Locals:         0       0       0       0
   968 ;;      Temps:          0       0       0       0
   969 ;;      Totals:         0       0       0       0
   970 ;;Total ram usage:        0 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:    7
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_printf
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text2
   981  00108A                     __ptext2:
   982                           	opt stack 0
   983  00108A                     _putch:
   984                           	opt stack 22
   985                           
   986                           ; BSR set to: 0
   987                           ;incstack = 0
   988  00108A  0012               	return		;funcret
   989  00108C                     __end_of_putch:
   990                           	opt stack 0
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           status	equ	0xFD8
   998                           
   999 ;; *************** function _ES_Run *****************
  1000 ;; Defined at:
  1001 ;;		line 277 in file "ES_Framework.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  HighestPrior    1   26[BANK0 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      enum E15494
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1015 ;;      Params:         0       0       0       0
  1016 ;;      Locals:         0       1       0       0
  1017 ;;      Temps:          0       4       0       0
  1018 ;;      Totals:         0       5       0       0
  1019 ;;Total ram usage:        5 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:   10
  1022 ;; This function calls:
  1023 ;;		_ES_CheckUserEvents
  1024 ;;		_ES_DeQueue
  1025 ;;		_ES_GetMSBitSet
  1026 ;;		_RunCanRX_Service
  1027 ;;		__HW_Process_Pending_Ints
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text3
  1034  0004DE                     __ptext3:
  1035                           	opt stack 0
  1036  0004DE                     _ES_Run:
  1037                           	opt stack 20
  1038                           
  1039                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1040                           
  1041                           ;incstack = 0
  1042                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1043                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1044                           ;ES_Framework.c: 282: while(1){
  1045  0004DE  D06B               	goto	l2161
  1046  0004E0                     l2149:
  1047                           
  1048                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1049  0004E0  C085  F08F         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1050  0004E4  C086  F090         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1051  0004E8  ECFA  F004         	call	_ES_GetMSBitSet	;wreg free
  1052  0004EC  0100               	movlb	0	; () banked
  1053  0004EE  6FA9               	movwf	ES_Run@HighestPrior& (0+255),b
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1057  0004F0  0100               	movlb	0	; () banked
  1058  0004F2  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1059  0004F4  0D03               	mullw	3
  1060  0004F6  0E54               	movlw	low _EventQueues
  1061  0004F8  24F3               	addwf	prodl,w,c
  1062  0004FA  6EF6               	movwf	tblptrl,c
  1063  0004FC  0E03               	movlw	high _EventQueues
  1064  0004FE  20F4               	addwfc	prodh,w,c
  1065  000500  6EF7               	movwf	tblptrh,c
  1066  000502                     	if	0	;There are less than 3 active tblptr bytes
  1067  000502                     	endif
  1068  000502  0009               	tblrd		*+
  1069  000504  CFF5 F09B          	movff	tablat,ES_DeQueue@pBlock
  1070  000508  000A               	tblrd		*-
  1071  00050A  CFF5 F09C          	movff	tablat,ES_DeQueue@pBlock+1
  1072  00050E  0E8C               	movlw	low ES_Run@ThisEvent
  1073  000510  0100               	movlb	0	; () banked
  1074  000512  6F9D               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1075  000514  0E00               	movlw	high ES_Run@ThisEvent
  1076  000516  0100               	movlb	0	; () banked
  1077  000518  6F9E               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1078  00051A  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1079  00051E  0900               	iorlw	0
  1080  000520  A4D8               	btfss	status,2,c
  1081  000522  D01F               	goto	l2155
  1082                           
  1083                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1084  000524  0100               	movlb	0	; () banked
  1085  000526  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1086  000528  0D02               	mullw	2
  1087  00052A  0E01               	movlw	low _BitNum2SetMask
  1088  00052C  24F3               	addwf	prodl,w,c
  1089  00052E  6EF6               	movwf	tblptrl,c
  1090  000530  0E03               	movlw	high _BitNum2SetMask
  1091  000532  20F4               	addwfc	prodh,w,c
  1092  000534  6EF7               	movwf	tblptrh,c
  1093  000536                     	if	0	;There are less than 3 active tblptr bytes
  1094  000536                     	endif
  1095  000536  0009               	tblrd		*+
  1096  000538  CFF5 F0A5          	movff	tablat,??_ES_Run
  1097  00053C  0009               	tblrd		*+
  1098  00053E  CFF5 F0A6          	movff	tablat,??_ES_Run+1
  1099  000542  0100               	movlb	0	; () banked
  1100  000544  1DA5               	comf	??_ES_Run& (0+255),w,b
  1101  000546  0100               	movlb	0	; () banked
  1102  000548  6FA7               	movwf	(??_ES_Run+2)& (0+255),b
  1103  00054A  0100               	movlb	0	; () banked
  1104  00054C  1DA6               	comf	(??_ES_Run+1)& (0+255),w,b
  1105  00054E  0100               	movlb	0	; () banked
  1106  000550  6FA8               	movwf	(??_ES_Run+3)& (0+255),b
  1107  000552  0100               	movlb	0	; () banked
  1108  000554  51A7               	movf	(??_ES_Run+2)& (0+255),w,b
  1109  000556  0100               	movlb	0	; () banked
  1110  000558  1785               	andwf	_Ready& (0+255),f,b
  1111  00055A  0100               	movlb	0	; () banked
  1112  00055C  51A8               	movf	(??_ES_Run+3)& (0+255),w,b
  1113  00055E  0100               	movlb	0	; () banked
  1114  000560  1786               	andwf	(_Ready+1)& (0+255),f,b
  1115  000562                     l2155:
  1116                           
  1117                           ;ES_Framework.c: 291: }
  1118                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1119  000562  C08C  F08F         	movff	ES_Run@ThisEvent,RunCanRX_Service@ThisEvent
  1120  000566  C08D  F090         	movff	ES_Run@ThisEvent+1,RunCanRX_Service@ThisEvent+1
  1121  00056A  C08E  F091         	movff	ES_Run@ThisEvent+2,RunCanRX_Service@ThisEvent+2
  1122  00056E  0100               	movlb	0	; () banked
  1123  000570  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1124  000572  0D04               	mullw	4
  1125  000574  0E02               	movlw	2
  1126  000576  26F3               	addwf	prodl,f,c
  1127  000578  0E00               	movlw	0
  1128  00057A  22F4               	addwfc	prodh,f,c
  1129  00057C  0E50               	movlw	low _ServDescList
  1130  00057E  24F3               	addwf	prodl,w,c
  1131  000580  6EF6               	movwf	tblptrl,c
  1132  000582  0E03               	movlw	high _ServDescList
  1133  000584  20F4               	addwfc	prodh,w,c
  1134  000586  6EF7               	movwf	tblptrh,c
  1135  000588                     	if	0	;There are less than 3 active tblptr bytes
  1136  000588                     	endif
  1137  000588  D801               	call	u1298
  1138  00058A  D00C               	goto	u1299
  1139  00058C                     u1298:
  1140  00058C  0005               	push	
  1141  00058E  6EFA               	movwf	pclath,c
  1142  000590  0009               	tblrd		*+
  1143  000592  50F5               	movf	tablat,w,c
  1144  000594  6EFD               	movwf	tosl,c
  1145  000596  0009               	tblrd		*+
  1146  000598  50F5               	movf	tablat,w,c
  1147  00059A  6EFE               	movwf	tosh,c
  1148  00059C  50F8               	movf	tblptru,w,c
  1149  00059E  6EFF               	movwf	tosu,c
  1150  0005A0  50FA               	movf	pclath,w,c
  1151  0005A2  0012               	return		;indir
  1152  0005A4                     u1299:
  1153  0005A4  0E8F               	movlw	low ?_RunCanRX_Service
  1154  0005A6  6ED9               	movwf	fsr2l,c
  1155  0005A8  0E00               	movlw	high ?_RunCanRX_Service
  1156  0005AA  6EDA               	movwf	fsr2h,c
  1157  0005AC  50DF               	movf	indf2,w,c
  1158  0005AE  B4D8               	btfsc	status,2,c
  1159  0005B0  D002               	goto	l2161
  1160                           
  1161                           ;ES_Framework.c: 293: return FailedRun;
  1162  0005B2  0E02               	movlw	2
  1163  0005B4  0012               	return	
  1164  0005B6                     l2161:
  1165  0005B6  EC1D  F008         	call	__HW_Process_Pending_Ints	;wreg free
  1166  0005BA  0900               	iorlw	0
  1167  0005BC  B4D8               	btfsc	status,2,c
  1168  0005BE  D006               	goto	l2165
  1169  0005C0  0100               	movlb	0	; () banked
  1170  0005C2  5185               	movf	_Ready& (0+255),w,b
  1171  0005C4  0100               	movlb	0	; () banked
  1172  0005C6  1186               	iorwf	(_Ready+1)& (0+255),w,b
  1173  0005C8  A4D8               	btfss	status,2,c
  1174  0005CA  D78A               	goto	l2149
  1175  0005CC                     l2165:
  1176                           
  1177                           ;ES_Framework.c: 294: }
  1178                           ;ES_Framework.c: 295: }
  1179                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1180  0005CC  EC29  F007         	call	_ES_CheckUserEvents	;wreg free
  1181  0005D0  D7F2               	goto	l2161
  1182  0005D2                     __end_of_ES_Run:
  1183                           	opt stack 0
  1184                           tosu	equ	0xFFF
  1185                           tosh	equ	0xFFE
  1186                           tosl	equ	0xFFD
  1187                           pclath	equ	0xFFA
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           prodh	equ	0xFF4
  1193                           prodl	equ	0xFF3
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           indf2	equ	0xFDF
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function __HW_Process_Pending_Ints *****************
  1202 ;; Defined at:
  1203 ;;		line 220 in file "ES_Port.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      unsigned char 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         0       0       0       0
  1218 ;;      Locals:         0       0       0       0
  1219 ;;      Temps:          0       0       0       0
  1220 ;;      Totals:         0       0       0       0
  1221 ;;Total ram usage:        0 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    9
  1224 ;; This function calls:
  1225 ;;		_ES_Timer_Tick_Resp
  1226 ;; This function is called by:
  1227 ;;		_ES_Run
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  00103A                     __ptext4:
  1233                           	opt stack 0
  1234  00103A                     __HW_Process_Pending_Ints:
  1235                           	opt stack 20
  1236                           
  1237                           ;ES_Port.c: 222: while (TickCount > 0)
  1238                           
  1239                           ;incstack = 0
  1240  00103A  D004               	goto	l2057
  1241  00103C                     l2053:
  1242                           
  1243                           ;ES_Port.c: 223: {
  1244                           ;ES_Port.c: 225: ES_Timer_Tick_Resp();
  1245  00103C  ECD0  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1246                           
  1247                           ;ES_Port.c: 226: TickCount--;
  1248  001040  0100               	movlb	0	; () banked
  1249  001042  078B               	decf	_TickCount& (0+255),f,b	;volatile
  1250  001044                     l2057:
  1251  001044  0100               	movlb	0	; () banked
  1252  001046  518B               	movf	_TickCount& (0+255),w,b	;volatile
  1253  001048  A4D8               	btfss	status,2,c
  1254  00104A  D7F8               	goto	l2053
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;ES_Port.c: 227: }
  1258                           ;ES_Port.c: 229: return 1;
  1259                           
  1260                           ; BSR set to: 0
  1261  00104C  0E01               	movlw	1
  1262  00104E  0012               	return	
  1263  001050                     __end_of__HW_Process_Pending_Ints:
  1264                           	opt stack 0
  1265                           tosu	equ	0xFFF
  1266                           tosh	equ	0xFFE
  1267                           tosl	equ	0xFFD
  1268                           pclath	equ	0xFFA
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           prodh	equ	0xFF4
  1274                           prodl	equ	0xFF3
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           indf2	equ	0xFDF
  1278                           fsr2h	equ	0xFDA
  1279                           fsr2l	equ	0xFD9
  1280                           status	equ	0xFD8
  1281                           
  1282 ;; *************** function _ES_Timer_Tick_Resp *****************
  1283 ;; Defined at:
  1284 ;;		line 284 in file "ES_Timers.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;		None
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1298 ;;      Params:         0       0       0       0
  1299 ;;      Locals:         0       0       0       0
  1300 ;;      Temps:          0       4       0       0
  1301 ;;      Totals:         0       4       0       0
  1302 ;;Total ram usage:        4 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    8
  1305 ;; This function calls:
  1306 ;;		_ES_GetMSBitSet
  1307 ;; This function is called by:
  1308 ;;		__HW_Process_Pending_Ints
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text5
  1313  0007A0                     __ptext5:
  1314                           	opt stack 0
  1315  0007A0                     _ES_Timer_Tick_Resp:
  1316                           	opt stack 20
  1317                           
  1318                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1319                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1320                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1321                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;incstack = 0
  1325  0007A0  0100               	movlb	0	; () banked
  1326  0007A2  5187               	movf	_TMR_ActiveFlags& (0+255),w,b
  1327  0007A4  0100               	movlb	0	; () banked
  1328  0007A6  1188               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1329  0007A8  B4D8               	btfsc	status,2,c
  1330  0007AA  0012               	return	
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;ES_Timers.c: 291: {
  1334                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1335  0007AC  C087  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1336  0007B0  C088  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1337  0007B4                     l1919:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1341  0007B4  C083  F08F         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1342  0007B8  C084  F090         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1343  0007BC  ECFA  F004         	call	_ES_GetMSBitSet	;wreg free
  1344  0007C0  0100               	movlb	0	; () banked
  1345  0007C2  6F89               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1349  0007C4  0100               	movlb	0	; () banked
  1350  0007C6  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1351  0007C8  0D02               	mullw	2
  1352  0007CA  0E60               	movlw	low _TMR_TimerArray
  1353  0007CC  24F3               	addwf	prodl,w,c
  1354  0007CE  6ED9               	movwf	fsr2l,c
  1355  0007D0  0E00               	movlw	high _TMR_TimerArray
  1356  0007D2  20F4               	addwfc	prodh,w,c
  1357  0007D4  6EDA               	movwf	fsr2h,c
  1358  0007D6  06DE               	decf	postinc2,f,c
  1359  0007D8  0E00               	movlw	0
  1360  0007DA  5ADD               	subwfb	postdec2,f,c
  1361  0007DC  50DE               	movf	postinc2,w,c
  1362  0007DE  10DE               	iorwf	postinc2,w,c
  1363  0007E0  A4D8               	btfss	status,2,c
  1364  0007E2  D026               	goto	l1929
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;ES_Timers.c: 299: {
  1368                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1369  0007E4  0E03               	movlw	3
  1370  0007E6  0100               	movlb	0	; () banked
  1371  0007E8  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1375  0007EA  C089  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1376  0007EE  0100               	movlb	0	; () banked
  1377  0007F0  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1381  0007F2  0100               	movlb	0	; () banked
  1382  0007F4  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1383  0007F6  0D02               	mullw	2
  1384  0007F8  0E01               	movlw	low _BitNum2SetMask
  1385  0007FA  24F3               	addwf	prodl,w,c
  1386  0007FC  6EF6               	movwf	tblptrl,c
  1387  0007FE  0E03               	movlw	high _BitNum2SetMask
  1388  000800  20F4               	addwfc	prodh,w,c
  1389  000802  6EF7               	movwf	tblptrh,c
  1390  000804                     	if	0	;There are less than 3 active tblptr bytes
  1391  000804                     	endif
  1392  000804  0009               	tblrd		*+
  1393  000806  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1394  00080A  0009               	tblrd		*+
  1395  00080C  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1396  000810  0100               	movlb	0	; () banked
  1397  000812  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1398  000814  0100               	movlb	0	; () banked
  1399  000816  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1400  000818  0100               	movlb	0	; () banked
  1401  00081A  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1402  00081C  0100               	movlb	0	; () banked
  1403  00081E  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1404  000820  0100               	movlb	0	; () banked
  1405  000822  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1406  000824  0100               	movlb	0	; () banked
  1407  000826  1787               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1408  000828  0100               	movlb	0	; () banked
  1409  00082A  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1410  00082C  0100               	movlb	0	; () banked
  1411  00082E  1788               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1412  000830                     l1929:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;ES_Timers.c: 306: }
  1416                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1417  000830  0100               	movlb	0	; () banked
  1418  000832  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1419  000834  0D02               	mullw	2
  1420  000836  0E01               	movlw	low _BitNum2SetMask
  1421  000838  24F3               	addwf	prodl,w,c
  1422  00083A  6EF6               	movwf	tblptrl,c
  1423  00083C  0E03               	movlw	high _BitNum2SetMask
  1424  00083E  20F4               	addwfc	prodh,w,c
  1425  000840  6EF7               	movwf	tblptrh,c
  1426  000842                     	if	0	;There are less than 3 active tblptr bytes
  1427  000842                     	endif
  1428  000842  0009               	tblrd		*+
  1429  000844  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1430  000848  0009               	tblrd		*+
  1431  00084A  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1432  00084E  0100               	movlb	0	; () banked
  1433  000850  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1434  000852  0100               	movlb	0	; () banked
  1435  000854  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1436  000856  0100               	movlb	0	; () banked
  1437  000858  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1438  00085A  0100               	movlb	0	; () banked
  1439  00085C  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1440  00085E  0100               	movlb	0	; () banked
  1441  000860  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1442  000862  0100               	movlb	0	; () banked
  1443  000864  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1444  000866  0100               	movlb	0	; () banked
  1445  000868  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1446  00086A  0100               	movlb	0	; () banked
  1447  00086C  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1451  00086E  0100               	movlb	0	; () banked
  1452  000870  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1453  000872  0100               	movlb	0	; () banked
  1454  000874  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1455  000876  B4D8               	btfsc	status,2,c
  1456  000878  0012               	return	
  1457  00087A  D79C               	goto	l1919
  1458  00087C                     __end_of_ES_Timer_Tick_Resp:
  1459                           	opt stack 0
  1460                           tosu	equ	0xFFF
  1461                           tosh	equ	0xFFE
  1462                           tosl	equ	0xFFD
  1463                           pclath	equ	0xFFA
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           prodh	equ	0xFF4
  1469                           prodl	equ	0xFF3
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           indf2	equ	0xFDF
  1473                           postinc2	equ	0xFDE
  1474                           postdec2	equ	0xFDD
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _ES_GetMSBitSet *****************
  1480 ;; Defined at:
  1481 ;;		line 79 in file "ES_LookupTables.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  LoopCntr        1    9[BANK0 ] char 
  1486 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1487 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      unsigned char 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1497 ;;      Params:         0       2       0       0
  1498 ;;      Locals:         0       3       0       0
  1499 ;;      Temps:          0       5       0       0
  1500 ;;      Totals:         0      10       0       0
  1501 ;;Total ram usage:       10 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    7
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_ES_Run
  1508 ;;		_ES_Timer_Tick_Resp
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text6
  1513  0009F4                     __ptext6:
  1514                           	opt stack 0
  1515  0009F4                     _ES_GetMSBitSet:
  1516                           	opt stack 20
  1517                           
  1518                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1519                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1520                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;incstack = 0
  1524  0009F4  0E80               	movlw	128
  1525  0009F6  0100               	movlb	0	; () banked
  1526  0009F8  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1527                           
  1528                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1529  0009FA  0E03               	movlw	3
  1530  0009FC  0100               	movlb	0	; () banked
  1531  0009FE  6F98               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1532  000A00                     l1839:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1536  000A00  0100               	movlb	0	; () banked
  1537  000A02  BF98               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1538  000A04  D046               	goto	l1853
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1542                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1543                           ;ES_LookupTables.c: 91: 0x0F);
  1544                           
  1545                           ; BSR set to: 0
  1546                           
  1547                           ; BSR set to: 0
  1548  000A06  0100               	movlb	0	; () banked
  1549  000A08  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1550  000A0A  0D04               	mullw	4
  1551  000A0C  CFF3 F091          	movff	prodl,??_ES_GetMSBitSet
  1552  000A10  C08F  F092         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1553  000A14  C090  F093         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1554  000A18  0100               	movlb	0	; () banked
  1555  000A1A  2B91               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1556  000A1C  D004               	goto	u964
  1557  000A1E                     u965:
  1558  000A1E  0100               	movlb	0	; () banked
  1559  000A20  90D8               	bcf	status,0,c
  1560  000A22  3393               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1561  000A24  3392               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1562  000A26                     u964:
  1563  000A26  0100               	movlb	0	; () banked
  1564  000A28  2F91               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1565  000A2A  D7F9               	goto	u965
  1566  000A2C  0100               	movlb	0	; () banked
  1567  000A2E  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1568  000A30  0B0F               	andlw	15
  1569  000A32  0100               	movlb	0	; () banked
  1570  000A34  6F97               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1574  000A36  0100               	movlb	0	; () banked
  1575  000A38  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1576  000A3A  0100               	movlb	0	; () banked
  1577  000A3C  B4D8               	btfsc	status,2,c
  1578  000A3E  D026               	goto	l1849
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1582                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1583  000A40  0EFF               	movlw	255
  1584  000A42  0100               	movlb	0	; () banked
  1585  000A44  6F91               	movwf	??_ES_GetMSBitSet& (0+255),b
  1586  000A46  0EFF               	movlw	255
  1587  000A48  0100               	movlb	0	; () banked
  1588  000A4A  6F92               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1589  000A4C  0100               	movlb	0	; () banked
  1590  000A4E  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1591  000A50  0100               	movlb	0	; () banked
  1592  000A52  6F93               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1593  000A54  6B94               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1594  000A56  0100               	movlb	0	; () banked
  1595  000A58  5191               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1596  000A5A  0100               	movlb	0	; () banked
  1597  000A5C  2793               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1598  000A5E  0100               	movlb	0	; () banked
  1599  000A60  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1600  000A62  0100               	movlb	0	; () banked
  1601  000A64  2394               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1602  000A66  0E41               	movlw	low _Nybble2MSBitNum
  1603  000A68  0100               	movlb	0	; () banked
  1604  000A6A  2593               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1605  000A6C  6EF6               	movwf	tblptrl,c
  1606  000A6E  0E03               	movlw	high _Nybble2MSBitNum
  1607  000A70  2194               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1608  000A72  6EF7               	movwf	tblptrh,c
  1609  000A74                     	if	0	;There are less than 3 active tblptr bytes
  1610  000A74                     	endif
  1611  000A74  0008               	tblrd		*
  1612  000A76  CFF5 F095          	movff	tablat,??_ES_GetMSBitSet+4
  1613  000A7A  0100               	movlb	0	; () banked
  1614  000A7C  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1615  000A7E  0D04               	mullw	4
  1616  000A80  50F3               	movf	prodl,w,c
  1617  000A82  0100               	movlb	0	; () banked
  1618  000A84  2595               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1619  000A86  0100               	movlb	0	; () banked
  1620  000A88  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1621                           
  1622                           ;ES_LookupTables.c: 96: break;
  1623  000A8A  D003               	goto	l1853
  1624  000A8C                     l1849:
  1625                           
  1626                           ; BSR set to: 0
  1627  000A8C  0100               	movlb	0	; () banked
  1628  000A8E  0798               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1629  000A90  D7B7               	goto	l1839
  1630  000A92                     l1853:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;ES_LookupTables.c: 97: }
  1634                           ;ES_LookupTables.c: 98: }
  1635                           ;ES_LookupTables.c: 99: return ReturnVal;
  1636  000A92  0100               	movlb	0	; () banked
  1637  000A94  5196               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1638  000A96  0012               	return	
  1639  000A98                     __end_of_ES_GetMSBitSet:
  1640                           	opt stack 0
  1641                           tosu	equ	0xFFF
  1642                           tosh	equ	0xFFE
  1643                           tosl	equ	0xFFD
  1644                           pclath	equ	0xFFA
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           prodh	equ	0xFF4
  1650                           prodl	equ	0xFF3
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           indf2	equ	0xFDF
  1654                           postinc2	equ	0xFDE
  1655                           postdec2	equ	0xFDD
  1656                           fsr2h	equ	0xFDA
  1657                           fsr2l	equ	0xFD9
  1658                           status	equ	0xFD8
  1659                           
  1660 ;; *************** function _RunCanRX_Service *****************
  1661 ;; Defined at:
  1662 ;;		line 135 in file "CanRX_Service.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  ReturnEvent     3    3[BANK0 ] struct ES_Event_t
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  3    0[BANK0 ] struct ES_Event_t
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1676 ;;      Params:         0       3       0       0
  1677 ;;      Locals:         0       3       0       0
  1678 ;;      Temps:          0       0       0       0
  1679 ;;      Totals:         0       6       0       0
  1680 ;;Total ram usage:        6 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    8
  1683 ;; This function calls:
  1684 ;;		_InitCanHardware
  1685 ;;		_InitPins
  1686 ;; This function is called by:
  1687 ;;		_ES_Run
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text7
  1692  000D94                     __ptext7:
  1693                           	opt stack 0
  1694  000D94                     _RunCanRX_Service:
  1695                           	opt stack 21
  1696                           
  1697                           ;CanRX_Service.c: 137: ES_Event ReturnEvent;
  1698                           ;CanRX_Service.c: 139: switch(ThisEvent.EventType) {
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;incstack = 0
  1702  000D94  D016               	goto	l2085
  1703  000D96                     l2081:
  1704                           
  1705                           ;CanRX_Service.c: 141: InitPins();
  1706  000D96  EC10  F008         	call	_InitPins	;wreg free
  1707                           
  1708                           ;CanRX_Service.c: 142: InitCanHardware();
  1709  000D9A  ECE3  F005         	call	_InitCanHardware	;wreg free
  1710                           
  1711                           ;CanRX_Service.c: 143: break;
  1712  000D9E  D022               	goto	l2087
  1713  000DA0                     l405:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;CanRX_Service.c: 145: LATA0 = 1;
  1717  000DA0  8089               	bsf	3977,0,c	;volatile
  1718                           
  1719                           ;CanRX_Service.c: 146: LATA1 = 0;
  1720  000DA2  9289               	bcf	3977,1,c	;volatile
  1721  000DA4  D002               	goto	L1
  1722  000DA6                     l406:
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;CanRX_Service.c: 151: LATA0 = 0;
  1726  000DA6  9089               	bcf	3977,0,c	;volatile
  1727                           
  1728                           ;CanRX_Service.c: 152: LATA1 = 1;
  1729  000DA8  8289               	bsf	3977,1,c	;volatile
  1730  000DAA                     L1:
  1731                           
  1732                           ;CanRX_Service.c: 153: LATA2 = 0;
  1733  000DAA  9489               	bcf	3977,2,c	;volatile
  1734  000DAC  D003               	goto	L2
  1735  000DAE                     l407:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;CanRX_Service.c: 157: LATA0 = 0;
  1739  000DAE  9089               	bcf	3977,0,c	;volatile
  1740                           
  1741                           ;CanRX_Service.c: 158: LATA1 = 0;
  1742  000DB0  9289               	bcf	3977,1,c	;volatile
  1743                           
  1744                           ;CanRX_Service.c: 159: LATA2 = 1;
  1745  000DB2  8489               	bsf	3977,2,c	;volatile
  1746  000DB4                     L2:
  1747                           
  1748                           ;CanRX_Service.c: 160: LATA3 = 0;
  1749  000DB4  9689               	bcf	3977,3,c	;volatile
  1750                           
  1751                           ;CanRX_Service.c: 161: break;
  1752  000DB6  D016               	goto	l2087
  1753  000DB8                     l408:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;CanRX_Service.c: 163: LATA0 = 0;
  1757  000DB8  9089               	bcf	3977,0,c	;volatile
  1758                           
  1759                           ;CanRX_Service.c: 164: LATA1 = 0;
  1760  000DBA  9289               	bcf	3977,1,c	;volatile
  1761                           
  1762                           ;CanRX_Service.c: 165: LATA2 = 0;
  1763  000DBC  9489               	bcf	3977,2,c	;volatile
  1764                           
  1765                           ;CanRX_Service.c: 166: LATA3 = 1;
  1766  000DBE  8689               	bsf	3977,3,c	;volatile
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;CanRX_Service.c: 168: }
  1770                           
  1771                           ;CanRX_Service.c: 167: break;
  1772  000DC0  D011               	goto	l2087
  1773  000DC2                     l2085:
  1774  000DC2  0100               	movlb	0	; () banked
  1775  000DC4  518F               	movf	RunCanRX_Service@ThisEvent& (0+255),w,b
  1776                           
  1777                           ; Switch size 1, requested type "space"
  1778                           ; Number of cases is 5, Range of values is 2 to 8
  1779                           ; switch strategies available:
  1780                           ; Name         Instructions Cycles
  1781                           ; simple_byte           16     9 (average)
  1782                           ;	Chosen strategy is simple_byte
  1783  000DC6  0A02               	xorlw	2	; case 2
  1784  000DC8  B4D8               	btfsc	status,2,c
  1785  000DCA  D7E5               	goto	l2081
  1786  000DCC  0A07               	xorlw	7	; case 5
  1787  000DCE  B4D8               	btfsc	status,2,c
  1788  000DD0  D7E7               	goto	l405
  1789  000DD2  0A03               	xorlw	3	; case 6
  1790  000DD4  B4D8               	btfsc	status,2,c
  1791  000DD6  D7EB               	goto	l407
  1792  000DD8  0A01               	xorlw	1	; case 7
  1793  000DDA  B4D8               	btfsc	status,2,c
  1794  000DDC  D7E4               	goto	l406
  1795  000DDE  0A0F               	xorlw	15	; case 8
  1796  000DE0  B4D8               	btfsc	status,2,c
  1797  000DE2  D7EA               	goto	l408
  1798  000DE4                     l2087:
  1799                           
  1800                           ;CanRX_Service.c: 169: ReturnEvent.EventType = ES_NO_EVENT;
  1801  000DE4  0E00               	movlw	0
  1802  000DE6  0100               	movlb	0	; () banked
  1803  000DE8  6F92               	movwf	RunCanRX_Service@ReturnEvent& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;CanRX_Service.c: 170: return ReturnEvent;
  1807  000DEA  C092  F08F         	movff	RunCanRX_Service@ReturnEvent,?_RunCanRX_Service
  1808  000DEE  C093  F090         	movff	RunCanRX_Service@ReturnEvent+1,?_RunCanRX_Service+1
  1809  000DF2  C094  F091         	movff	RunCanRX_Service@ReturnEvent+2,?_RunCanRX_Service+2
  1810  000DF6  0012               	return	
  1811  000DF8                     __end_of_RunCanRX_Service:
  1812                           	opt stack 0
  1813                           tosu	equ	0xFFF
  1814                           tosh	equ	0xFFE
  1815                           tosl	equ	0xFFD
  1816                           pclath	equ	0xFFA
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           prodh	equ	0xFF4
  1822                           prodl	equ	0xFF3
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _InitPins *****************
  1833 ;; Defined at:
  1834 ;;		line 284 in file "CanRX_Service.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1848 ;;      Params:         0       0       0       0
  1849 ;;      Locals:         0       0       0       0
  1850 ;;      Temps:          0       0       0       0
  1851 ;;      Totals:         0       0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    7
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_RunCanRX_Service
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text8
  1863  001020                     __ptext8:
  1864                           	opt stack 0
  1865  001020                     _InitPins:
  1866                           	opt stack 21
  1867                           
  1868                           ;CanRX_Service.c: 287: PORTB = 0x00;
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;incstack = 0
  1872  001020  0E00               	movlw	0
  1873  001022  6E81               	movwf	3969,c	;volatile
  1874                           
  1875                           ;CanRX_Service.c: 288: LATB = 0x00;
  1876  001024  0E00               	movlw	0
  1877  001026  6E8A               	movwf	3978,c	;volatile
  1878                           
  1879                           ;CanRX_Service.c: 289: TRISBbits.TRISB2 = 0;
  1880  001028  9493               	bcf	3987,2,c	;volatile
  1881                           
  1882                           ;CanRX_Service.c: 290: TRISBbits.TRISB3 = 1;
  1883  00102A  8693               	bsf	3987,3,c	;volatile
  1884                           
  1885                           ;CanRX_Service.c: 293: PORTA = 0x00;
  1886  00102C  0E00               	movlw	0
  1887  00102E  6E80               	movwf	3968,c	;volatile
  1888                           
  1889                           ;CanRX_Service.c: 294: LATA = 0x00;
  1890  001030  0E00               	movlw	0
  1891  001032  6E89               	movwf	3977,c	;volatile
  1892                           
  1893                           ;CanRX_Service.c: 295: TRISA = 0x00;
  1894  001034  0E00               	movlw	0
  1895  001036  6E92               	movwf	3986,c	;volatile
  1896  001038  0012               	return		;funcret
  1897  00103A                     __end_of_InitPins:
  1898                           	opt stack 0
  1899                           tosu	equ	0xFFF
  1900                           tosh	equ	0xFFE
  1901                           tosl	equ	0xFFD
  1902                           pclath	equ	0xFFA
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           prodh	equ	0xFF4
  1908                           prodl	equ	0xFF3
  1909                           postinc0	equ	0xFEE
  1910                           wreg	equ	0xFE8
  1911                           indf2	equ	0xFDF
  1912                           postinc2	equ	0xFDE
  1913                           postdec2	equ	0xFDD
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _InitCanHardware *****************
  1919 ;; Defined at:
  1920 ;;		line 200 in file "CanRX_Service.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1934 ;;      Params:         0       0       0       0
  1935 ;;      Locals:         0       0       0       0
  1936 ;;      Temps:          0       0       0       0
  1937 ;;      Totals:         0       0       0       0
  1938 ;;Total ram usage:        0 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    7
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_RunCanRX_Service
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text9
  1949  000BC6                     __ptext9:
  1950                           	opt stack 0
  1951  000BC6                     _InitCanHardware:
  1952                           	opt stack 21
  1953                           
  1954                           ;CanRX_Service.c: 204: CANCON = 0x80;
  1955                           
  1956                           ;incstack = 0
  1957  000BC6  0E80               	movlw	128
  1958  000BC8  6E6F               	movwf	3951,c	;volatile
  1959  000BCA                     l425:
  1960  000BCA  AE6E               	btfss	3950,7,c	;volatile
  1961  000BCC  D7FE               	goto	l425
  1962                           
  1963                           ;CanRX_Service.c: 207: CIOCON = 0x20;
  1964  000BCE  0E20               	movlw	32
  1965  000BD0  6E73               	movwf	3955,c	;volatile
  1966                           
  1967                           ;CanRX_Service.c: 232: BRGCON2bits.SEG2PHTS = 1;
  1968  000BD2  8E71               	bsf	3953,7,c	;volatile
  1969                           
  1970                           ;CanRX_Service.c: 234: BRGCON1bits.BRP0 = 1;
  1971  000BD4  8070               	bsf	3952,0,c	;volatile
  1972                           
  1973                           ;CanRX_Service.c: 235: BRGCON1bits.BRP1 = 0;
  1974  000BD6  9270               	bcf	3952,1,c	;volatile
  1975                           
  1976                           ;CanRX_Service.c: 236: BRGCON2bits.PRSEG0 = 0;
  1977  000BD8  9071               	bcf	3953,0,c	;volatile
  1978                           
  1979                           ;CanRX_Service.c: 237: BRGCON2bits.PRSEG1 = 1;
  1980  000BDA  8271               	bsf	3953,1,c	;volatile
  1981                           
  1982                           ;CanRX_Service.c: 238: BRGCON2bits.PRSEG2 = 1;
  1983  000BDC  8471               	bsf	3953,2,c	;volatile
  1984                           
  1985                           ;CanRX_Service.c: 239: BRGCON2bits.SEG1PH0 = 1;
  1986  000BDE  8671               	bsf	3953,3,c	;volatile
  1987                           
  1988                           ;CanRX_Service.c: 240: BRGCON2bits.SEG1PH1 = 0;
  1989  000BE0  9871               	bcf	3953,4,c	;volatile
  1990                           
  1991                           ;CanRX_Service.c: 241: BRGCON2bits.SEG1PH2 = 1;
  1992  000BE2  8A71               	bsf	3953,5,c	;volatile
  1993                           
  1994                           ;CanRX_Service.c: 242: BRGCON3bits.SEG2PH0 = 1;
  1995  000BE4  8072               	bsf	3954,0,c	;volatile
  1996                           
  1997                           ;CanRX_Service.c: 243: BRGCON1bits.SJW0 = 1;
  1998  000BE6  8C70               	bsf	3952,6,c	;volatile
  1999                           
  2000                           ;CanRX_Service.c: 249: RXB0CONbits.RXB0DBEN = 0;
  2001  000BE8  9460               	bcf	3936,2,c	;volatile
  2002                           
  2003                           ;CanRX_Service.c: 250: RXB0CONbits.RXM0 = 0;
  2004  000BEA  9A60               	bcf	3936,5,c	;volatile
  2005                           
  2006                           ;CanRX_Service.c: 251: RXB0CONbits.RXM1 = 0;
  2007  000BEC  9C60               	bcf	3936,6,c	;volatile
  2008                           
  2009                           ;CanRX_Service.c: 252: RXF0SIDH = 0x00;
  2010  000BEE  0E00               	movlw	0
  2011  000BF0  010F               	movlb	15	; () banked
  2012  000BF2  6F00               	movwf	0,b	;volatile
  2013                           
  2014                           ;CanRX_Service.c: 253: RXF0SIDL = 0x08;
  2015  000BF4  0E08               	movlw	8
  2016  000BF6  010F               	movlb	15	; () banked
  2017  000BF8  6F01               	movwf	1,b	;volatile
  2018                           
  2019                           ;CanRX_Service.c: 254: RXF0EIDH = 0x00;
  2020  000BFA  0E00               	movlw	0
  2021  000BFC  010F               	movlb	15	; () banked
  2022  000BFE  6F02               	movwf	2,b	;volatile
  2023                           
  2024                           ;CanRX_Service.c: 255: RXF0EIDL = 0x01;
  2025  000C00  0E01               	movlw	1
  2026  000C02  010F               	movlb	15	; () banked
  2027  000C04  6F03               	movwf	3,b	;volatile
  2028                           
  2029                           ;CanRX_Service.c: 257: RXM0SIDH = 0x00;
  2030  000C06  0E00               	movlw	0
  2031  000C08  010F               	movlb	15	; () banked
  2032  000C0A  6F18               	movwf	24,b	;volatile
  2033                           
  2034                           ;CanRX_Service.c: 258: RXM0SIDL = 0x00;
  2035  000C0C  0E00               	movlw	0
  2036  000C0E  010F               	movlb	15	; () banked
  2037  000C10  6F19               	movwf	25,b	;volatile
  2038                           
  2039                           ;CanRX_Service.c: 259: RXM0EIDH = 0x00;
  2040  000C12  0E00               	movlw	0
  2041  000C14  010F               	movlb	15	; () banked
  2042  000C16  6F1A               	movwf	26,b	;volatile
  2043                           
  2044                           ;CanRX_Service.c: 260: RXM0EIDL = 0x01;
  2045  000C18  0E01               	movlw	1
  2046  000C1A  010F               	movlb	15	; () banked
  2047  000C1C  6F1B               	movwf	27,b	;volatile
  2048                           
  2049                           ;CanRX_Service.c: 264: ECANCON = 0x00;
  2050  000C1E  0E00               	movlw	0
  2051  000C20  6E77               	movwf	3959,c	;volatile
  2052                           
  2053                           ;CanRX_Service.c: 265: CANCON = 0b00010000;
  2054  000C22  0E10               	movlw	16
  2055  000C24  6E6F               	movwf	3951,c	;volatile
  2056  000C26                     l428:
  2057  000C26  BE6E               	btfsc	3950,7,c	;volatile
  2058  000C28  D7FE               	goto	l428
  2059                           
  2060                           ;CanRX_Service.c: 269: RXB0IE = 1;
  2061  000C2A  80A3               	bsf	4003,0,c	;volatile
  2062                           
  2063                           ;CanRX_Service.c: 270: ERRIE = 1;
  2064  000C2C  8AA3               	bsf	4003,5,c	;volatile
  2065                           
  2066                           ;CanRX_Service.c: 271: IRXIE = 1;
  2067  000C2E  8EA3               	bsf	4003,7,c	;volatile
  2068                           
  2069                           ;CanRX_Service.c: 275: RXB0IF = 0;
  2070  000C30  90A4               	bcf	4004,0,c	;volatile
  2071                           
  2072                           ;CanRX_Service.c: 276: ERRIF = 0;
  2073  000C32  9AA4               	bcf	4004,5,c	;volatile
  2074                           
  2075                           ;CanRX_Service.c: 277: IRXIF = 0;
  2076  000C34  9EA4               	bcf	4004,7,c	;volatile
  2077                           
  2078                           ;CanRX_Service.c: 278: TXB0IE = 1;
  2079  000C36  84A3               	bsf	4003,2,c	;volatile
  2080                           
  2081                           ;CanRX_Service.c: 279: TXB0IF = 0;
  2082  000C38  94A4               	bcf	4004,2,c	;volatile
  2083                           
  2084                           ;CanRX_Service.c: 280: TXB0CONbits.TXREQ = 0;
  2085  000C3A  010F               	movlb	15	; () banked
  2086  000C3C  9740               	bcf	64,3,b	;volatile
  2087                           
  2088                           ;CanRX_Service.c: 281: RXB0CONbits.RXFUL = 0;
  2089  000C3E  9E60               	bcf	3936,7,c	;volatile
  2090                           
  2091                           ; BSR set to: 15
  2092  000C40  0012               	return		;funcret
  2093  000C42                     __end_of_InitCanHardware:
  2094                           	opt stack 0
  2095                           tosu	equ	0xFFF
  2096                           tosh	equ	0xFFE
  2097                           tosl	equ	0xFFD
  2098                           pclath	equ	0xFFA
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           postinc0	equ	0xFEE
  2106                           wreg	equ	0xFE8
  2107                           indf2	equ	0xFDF
  2108                           postinc2	equ	0xFDE
  2109                           postdec2	equ	0xFDD
  2110                           fsr2h	equ	0xFDA
  2111                           fsr2l	equ	0xFD9
  2112                           status	equ	0xFD8
  2113                           
  2114 ;; *************** function _ES_DeQueue *****************
  2115 ;; Defined at:
  2116 ;;		line 164 in file "ES_Queue.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  2119 ;;		 -> Queue0(12), 
  2120 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  2121 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  2124 ;;		 -> Queue0(12), 
  2125 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  2126 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      unsigned char 
  2129 ;; Registers used:
  2130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2136 ;;      Params:         0       4       0       0
  2137 ;;      Locals:         0       4       0       0
  2138 ;;      Temps:          0       2       0       0
  2139 ;;      Totals:         0      10       0       0
  2140 ;;Total ram usage:       10 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    8
  2143 ;; This function calls:
  2144 ;;		___lbmod
  2145 ;;		___wmul
  2146 ;; This function is called by:
  2147 ;;		_ES_Run
  2148 ;;		_ES_RecallEvents
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text10
  2153  0003B6                     __ptext10:
  2154                           	opt stack 0
  2155  0003B6                     _ES_DeQueue:
  2156                           	opt stack 21
  2157                           
  2158                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2159                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2160                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2161                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2162                           
  2163                           ; BSR set to: 15
  2164                           ;incstack = 0
  2165  0003B6  C09B  F0A3         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2166  0003BA  C09C  F0A4         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2167                           
  2168                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2169  0003BE  0100               	movlb	0	; () banked
  2170  0003C0  EE20 F002          	lfsr	2,2
  2171  0003C4  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2172  0003C6  26D9               	addwf	fsr2l,f,c
  2173  0003C8  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2174  0003CA  22DA               	addwfc	fsr2h,f,c
  2175  0003CC  50DF               	movf	indf2,w,c
  2176  0003CE  B4D8               	btfsc	status,2,c
  2177  0003D0  D06F               	goto	l2029
  2178                           
  2179                           ; BSR set to: 0
  2180                           
  2181                           ;ES_Queue.c: 172: {
  2182                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2183  0003D2  CFF2 F0A1          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2184  0003D6  9EF2               	bcf	intcon,7,c	;volatile
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2188                           
  2189                           ; BSR set to: 0
  2190  0003D8  0100               	movlb	0	; () banked
  2191  0003DA  EE20 F001          	lfsr	2,1
  2192  0003DE  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2193  0003E0  26D9               	addwf	fsr2l,f,c
  2194  0003E2  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2195  0003E4  22DA               	addwfc	fsr2h,f,c
  2196  0003E6  50DF               	movf	indf2,w,c
  2197  0003E8  0100               	movlb	0	; () banked
  2198  0003EA  6F9F               	movwf	??_ES_DeQueue& (0+255),b
  2199  0003EC  0E01               	movlw	1
  2200  0003EE  0100               	movlb	0	; () banked
  2201  0003F0  259F               	addwf	??_ES_DeQueue& (0+255),w,b
  2202  0003F2  0100               	movlb	0	; () banked
  2203  0003F4  6F95               	movwf	___wmul@multiplier& (0+255),b
  2204  0003F6  0100               	movlb	0	; () banked
  2205  0003F8  6B96               	clrf	(___wmul@multiplier+1)& (0+255),b
  2206  0003FA  0E00               	movlw	0
  2207  0003FC  2396               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  2208  0003FE  0E00               	movlw	0
  2209  000400  0100               	movlb	0	; () banked
  2210  000402  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2211  000404  0E03               	movlw	3
  2212  000406  6F97               	movwf	___wmul@multiplicand& (0+255),b
  2213  000408  EC8E  F007         	call	___wmul	;wreg free
  2214  00040C  0100               	movlb	0	; () banked
  2215  00040E  5195               	movf	?___wmul& (0+255),w,b
  2216  000410  0100               	movlb	0	; () banked
  2217  000412  259B               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  2218  000414  6ED9               	movwf	fsr2l,c
  2219  000416  0100               	movlb	0	; () banked
  2220  000418  5196               	movf	(?___wmul+1)& (0+255),w,b
  2221  00041A  0100               	movlb	0	; () banked
  2222  00041C  219C               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  2223  00041E  6EDA               	movwf	fsr2h,c
  2224  000420  C09D  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2225  000424  C09E  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2226  000428  CFDE FFE6          	movff	postinc2,postinc1
  2227  00042C  CFDE FFE6          	movff	postinc2,postinc1
  2228  000430  CFDE FFE6          	movff	postinc2,postinc1
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2232  000434  0100               	movlb	0	; () banked
  2233  000436  EE20 F001          	lfsr	2,1
  2234  00043A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2235  00043C  26D9               	addwf	fsr2l,f,c
  2236  00043E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2237  000440  22DA               	addwfc	fsr2h,f,c
  2238  000442  2ADF               	incf	indf2,f,c
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2242  000444  C0A3  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2243  000448  C0A4  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2244  00044C  0100               	movlb	0	; () banked
  2245  00044E  EE10 F001          	lfsr	1,1
  2246  000452  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2247  000454  26E1               	addwf	fsr1l,f,c
  2248  000456  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2249  000458  22E2               	addwfc	fsr1h,f,c
  2250  00045A  50DE               	movf	postinc2,w,c
  2251  00045C  5CE6               	subwf	postinc1,w,c
  2252  00045E  A0D8               	btfss	status,0,c
  2253  000460  D019               	goto	l2025
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2257  000462  0100               	movlb	0	; () banked
  2258  000464  EE20 F001          	lfsr	2,1
  2259  000468  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2260  00046A  26D9               	addwf	fsr2l,f,c
  2261  00046C  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2262  00046E  22DA               	addwfc	fsr2h,f,c
  2263  000470  C0A3  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2264  000474  C0A4  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2265  000478  50E7               	movf	indf1,w,c
  2266  00047A  0100               	movlb	0	; () banked
  2267  00047C  6F8F               	movwf	___lbmod@divisor& (0+255),b
  2268  00047E  0100               	movlb	0	; () banked
  2269  000480  EE10 F001          	lfsr	1,1
  2270  000484  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2271  000486  26E1               	addwf	fsr1l,f,c
  2272  000488  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2273  00048A  22E2               	addwfc	fsr1h,f,c
  2274  00048C  50E7               	movf	indf1,w,c
  2275  00048E  EC4E  F007         	call	___lbmod
  2276  000492  6EDF               	movwf	indf2,c
  2277  000494                     l2025:
  2278                           
  2279                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2280  000494  0100               	movlb	0	; () banked
  2281  000496  EE20 F002          	lfsr	2,2
  2282  00049A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2283  00049C  26D9               	addwf	fsr2l,f,c
  2284  00049E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2285  0004A0  22DA               	addwfc	fsr2h,f,c
  2286  0004A2  06DF               	decf	indf2,f,c
  2287  0004A4  50DF               	movf	indf2,w,c
  2288  0004A6  0100               	movlb	0	; () banked
  2289  0004A8  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2293  0004AA  C0A1  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2294                           
  2295                           ;ES_Queue.c: 183: }else {
  2296  0004AE  D014               	goto	l2035
  2297  0004B0                     l2029:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2301  0004B0  C09D  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2302  0004B4  C09E  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2303  0004B8  0E00               	movlw	0
  2304  0004BA  6EDF               	movwf	indf2,c
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2308  0004BC  0100               	movlb	0	; () banked
  2309  0004BE  EE20 F001          	lfsr	2,1
  2310  0004C2  519D               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  2311  0004C4  26D9               	addwf	fsr2l,f,c
  2312  0004C6  519E               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  2313  0004C8  22DA               	addwfc	fsr2h,f,c
  2314  0004CA  0E00               	movlw	0
  2315  0004CC  6EDE               	movwf	postinc2,c
  2316  0004CE  0E00               	movlw	0
  2317  0004D0  6EDD               	movwf	postdec2,c
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;ES_Queue.c: 186: NumLeft = 0;
  2321  0004D2  0E00               	movlw	0
  2322  0004D4  0100               	movlb	0	; () banked
  2323  0004D6  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2324  0004D8                     l2035:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;ES_Queue.c: 187: }
  2328                           ;ES_Queue.c: 188: return NumLeft;
  2329  0004D8  0100               	movlb	0	; () banked
  2330  0004DA  51A2               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  2331  0004DC  0012               	return	
  2332  0004DE                     __end_of_ES_DeQueue:
  2333                           	opt stack 0
  2334                           tosu	equ	0xFFF
  2335                           tosh	equ	0xFFE
  2336                           tosl	equ	0xFFD
  2337                           pclath	equ	0xFFA
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           prodh	equ	0xFF4
  2343                           prodl	equ	0xFF3
  2344                           intcon	equ	0xFF2
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           indf1	equ	0xFE7
  2348                           postinc1	equ	0xFE6
  2349                           fsr1h	equ	0xFE2
  2350                           fsr1l	equ	0xFE1
  2351                           indf2	equ	0xFDF
  2352                           postinc2	equ	0xFDE
  2353                           postdec2	equ	0xFDD
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function ___lbmod *****************
  2359 ;; Defined at:
  2360 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  dividend        1    wreg     unsigned char 
  2363 ;;  divisor         1    0[BANK0 ] unsigned char 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  dividend        1    1[BANK0 ] unsigned char 
  2366 ;;  rem             1    3[BANK0 ] unsigned char 
  2367 ;;  counter         1    2[BANK0 ] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      unsigned char 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2377 ;;      Params:         0       1       0       0
  2378 ;;      Locals:         0       3       0       0
  2379 ;;      Temps:          0       0       0       0
  2380 ;;      Totals:         0       4       0       0
  2381 ;;Total ram usage:        4 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    7
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_ES_DeQueue
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text11
  2392  000E9C                     __ptext11:
  2393                           	opt stack 0
  2394  000E9C                     ___lbmod:
  2395                           	opt stack 21
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;incstack = 0
  2399                           ;___lbmod@dividend stored from wreg
  2400  000E9C  0100               	movlb	0	; () banked
  2401  000E9E  6F90               	movwf	___lbmod@dividend& (0+255),b
  2402  000EA0  0E08               	movlw	8
  2403  000EA2  0100               	movlb	0	; () banked
  2404  000EA4  6F91               	movwf	___lbmod@counter& (0+255),b
  2405  000EA6  0E00               	movlw	0
  2406  000EA8  0100               	movlb	0	; () banked
  2407  000EAA  6F92               	movwf	___lbmod@rem& (0+255),b
  2408  000EAC                     l1981:
  2409                           
  2410                           ; BSR set to: 0
  2411  000EAC  90D8               	bcf	status,0,c
  2412  000EAE  0100               	movlb	0	; () banked
  2413  000EB0  3590               	rlcf	___lbmod@dividend& (0+255),w,b
  2414  000EB2  0100               	movlb	0	; () banked
  2415  000EB4  3592               	rlcf	___lbmod@rem& (0+255),w,b
  2416  000EB6  0100               	movlb	0	; () banked
  2417  000EB8  6F92               	movwf	___lbmod@rem& (0+255),b
  2418                           
  2419                           ; BSR set to: 0
  2420  000EBA  0100               	movlb	0	; () banked
  2421  000EBC  90D8               	bcf	status,0,c
  2422  000EBE  3790               	rlcf	___lbmod@dividend& (0+255),f,b
  2423                           
  2424                           ; BSR set to: 0
  2425  000EC0  0100               	movlb	0	; () banked
  2426  000EC2  518F               	movf	___lbmod@divisor& (0+255),w,b
  2427  000EC4  0100               	movlb	0	; () banked
  2428  000EC6  5D92               	subwf	___lbmod@rem& (0+255),w,b
  2429  000EC8  A0D8               	btfss	status,0,c
  2430  000ECA  D004               	goto	l1989
  2431                           
  2432                           ; BSR set to: 0
  2433  000ECC  0100               	movlb	0	; () banked
  2434  000ECE  518F               	movf	___lbmod@divisor& (0+255),w,b
  2435  000ED0  0100               	movlb	0	; () banked
  2436  000ED2  5F92               	subwf	___lbmod@rem& (0+255),f,b
  2437  000ED4                     l1989:
  2438                           
  2439                           ; BSR set to: 0
  2440  000ED4  0100               	movlb	0	; () banked
  2441  000ED6  2F91               	decfsz	___lbmod@counter& (0+255),f,b
  2442  000ED8  D7E9               	goto	l1981
  2443                           
  2444                           ; BSR set to: 0
  2445                           
  2446                           ; BSR set to: 0
  2447  000EDA  0100               	movlb	0	; () banked
  2448  000EDC  5192               	movf	___lbmod@rem& (0+255),w,b
  2449  000EDE  0012               	return	
  2450  000EE0                     __end_of___lbmod:
  2451                           	opt stack 0
  2452                           tosu	equ	0xFFF
  2453                           tosh	equ	0xFFE
  2454                           tosl	equ	0xFFD
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           indf1	equ	0xFE7
  2466                           postinc1	equ	0xFE6
  2467                           fsr1h	equ	0xFE2
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _ES_CheckUserEvents *****************
  2477 ;; Defined at:
  2478 ;;		line 46 in file "ES_CheckEvents.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  i               1    0[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      unsigned char 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2492 ;;      Params:         0       0       0       0
  2493 ;;      Locals:         0       1       0       0
  2494 ;;      Temps:          0       0       0       0
  2495 ;;      Totals:         0       1       0       0
  2496 ;;Total ram usage:        1 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    8
  2499 ;; This function calls:
  2500 ;;		_Check4Keystroke
  2501 ;; This function is called by:
  2502 ;;		_ES_Run
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text12
  2507  000E52                     __ptext12:
  2508                           	opt stack 0
  2509  000E52                     _ES_CheckUserEvents:
  2510                           	opt stack 21
  2511                           
  2512                           ;ES_CheckEvents.c: 48: uint8_t i;
  2513                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;incstack = 0
  2517  000E52  0E00               	movlw	0
  2518  000E54  0100               	movlb	0	; () banked
  2519  000E56  6F8F               	movwf	ES_CheckUserEvents@i& (0+255),b
  2520  000E58  0100               	movlb	0	; () banked
  2521  000E5A  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2522  000E5C  0100               	movlb	0	; () banked
  2523  000E5E  A4D8               	btfss	status,2,c
  2524  000E60  0012               	return	
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2528                           
  2529                           ; BSR set to: 0
  2530                           
  2531                           ; BSR set to: 0
  2532  000E62  0100               	movlb	0	; () banked
  2533  000E64  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2534  000E66  0D02               	mullw	2
  2535  000E68  0E57               	movlw	low _ES_EventList
  2536  000E6A  24F3               	addwf	prodl,w,c
  2537  000E6C  6EF6               	movwf	tblptrl,c
  2538  000E6E  0E03               	movlw	high _ES_EventList
  2539  000E70  20F4               	addwfc	prodh,w,c
  2540  000E72  6EF7               	movwf	tblptrh,c
  2541  000E74                     	if	0	;There are less than 3 active tblptr bytes
  2542  000E74                     	endif
  2543  000E74  D801               	call	u1118
  2544  000E76  D00C               	goto	u1119
  2545  000E78                     u1118:
  2546  000E78  0005               	push	
  2547  000E7A  6EFA               	movwf	pclath,c
  2548  000E7C  0009               	tblrd		*+
  2549  000E7E  50F5               	movf	tablat,w,c
  2550  000E80  6EFD               	movwf	tosl,c
  2551  000E82  0009               	tblrd		*+
  2552  000E84  50F5               	movf	tablat,w,c
  2553  000E86  6EFE               	movwf	tosh,c
  2554  000E88  50F8               	movf	tblptru,w,c
  2555  000E8A  6EFF               	movwf	tosu,c
  2556  000E8C  50FA               	movf	pclath,w,c
  2557  000E8E  0012               	return		;indir
  2558  000E90                     u1119:
  2559  000E90  06E8               	decf	wreg,f,c
  2560  000E92  B4D8               	btfsc	status,2,c
  2561  000E94  0012               	return	
  2562                           
  2563                           ;ES_CheckEvents.c: 52: break;
  2564  000E96  0100               	movlb	0	; () banked
  2565  000E98  2B8F               	incf	ES_CheckUserEvents@i& (0+255),f,b
  2566  000E9A  D7DE               	goto	L3
  2567  000E9C                     __end_of_ES_CheckUserEvents:
  2568                           	opt stack 0
  2569                           tosu	equ	0xFFF
  2570                           tosh	equ	0xFFE
  2571                           tosl	equ	0xFFD
  2572                           pclath	equ	0xFFA
  2573                           tblptru	equ	0xFF8
  2574                           tblptrh	equ	0xFF7
  2575                           tblptrl	equ	0xFF6
  2576                           tablat	equ	0xFF5
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           intcon	equ	0xFF2
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           indf1	equ	0xFE7
  2583                           postinc1	equ	0xFE6
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           postdec2	equ	0xFDD
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _Check4Keystroke *****************
  2594 ;; Defined at:
  2595 ;;		line 62 in file "EventCheckers.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      unsigned char 
  2602 ;; Registers used:
  2603 ;;		wreg
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2609 ;;      Params:         0       0       0       0
  2610 ;;      Locals:         0       0       0       0
  2611 ;;      Temps:          0       0       0       0
  2612 ;;      Totals:         0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    7
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_ES_CheckUserEvents
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text13
  2624  001086                     __ptext13:
  2625                           	opt stack 0
  2626  001086                     _Check4Keystroke:
  2627                           	opt stack 21
  2628                           
  2629                           ;EventCheckers.c: 78: return 0;
  2630                           
  2631                           ;incstack = 0
  2632  001086  0E00               	movlw	0
  2633  001088  0012               	return	
  2634  00108A                     __end_of_Check4Keystroke:
  2635                           	opt stack 0
  2636                           tosu	equ	0xFFF
  2637                           tosh	equ	0xFFE
  2638                           tosl	equ	0xFFD
  2639                           pclath	equ	0xFFA
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           prodh	equ	0xFF4
  2645                           prodl	equ	0xFF3
  2646                           intcon	equ	0xFF2
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           indf1	equ	0xFE7
  2650                           postinc1	equ	0xFE6
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _ES_Initialize *****************
  2661 ;; Defined at:
  2662 ;;		line 242 in file "ES_Framework.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  NewRate         2   33[BANK0 ] enum E15423
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  i               1   35[BANK0 ] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      enum E15494
  2669 ;; Registers used:
  2670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2676 ;;      Params:         0       2       0       0
  2677 ;;      Locals:         0       1       0       0
  2678 ;;      Temps:          0       0       0       0
  2679 ;;      Totals:         0       3       0       0
  2680 ;;Total ram usage:        3 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:   11
  2683 ;; This function calls:
  2684 ;;		_ES_InitQueue
  2685 ;;		_ES_Timer_Init
  2686 ;;		_InitCanRX_Service
  2687 ;; This function is called by:
  2688 ;;		_main
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text14
  2693  0005D2                     __ptext14:
  2694                           	opt stack 0
  2695  0005D2                     _ES_Initialize:
  2696                           	opt stack 19
  2697                           
  2698                           ;ES_Framework.c: 243: uint8_t i;
  2699                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2700                           
  2701                           ;incstack = 0
  2702  0005D2  C0B0  F091         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2703  0005D6  C0B1  F092         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2704  0005DA  EC33  F008         	call	_ES_Timer_Init	;wreg free
  2705                           
  2706                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2707  0005DE  0E00               	movlw	0
  2708  0005E0  0100               	movlb	0	; () banked
  2709  0005E2  6FB2               	movwf	ES_Initialize@i& (0+255),b
  2710  0005E4                     l2121:
  2711                           
  2712                           ; BSR set to: 0
  2713  0005E4  0100               	movlb	0	; () banked
  2714  0005E6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2715  0005E8  0100               	movlb	0	; () banked
  2716  0005EA  A4D8               	btfss	status,2,c
  2717  0005EC  D066               	goto	l2145
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2721                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2722                           
  2723                           ; BSR set to: 0
  2724                           
  2725                           ; BSR set to: 0
  2726  0005EE  0100               	movlb	0	; () banked
  2727  0005F0  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2728  0005F2  0D04               	mullw	4
  2729  0005F4  0E50               	movlw	low _ServDescList
  2730  0005F6  24F3               	addwf	prodl,w,c
  2731  0005F8  6EF6               	movwf	tblptrl,c
  2732  0005FA  0E03               	movlw	high _ServDescList
  2733  0005FC  20F4               	addwfc	prodh,w,c
  2734  0005FE  6EF7               	movwf	tblptrh,c
  2735  000600                     	if	0	;There are less than 3 active tblptr bytes
  2736  000600                     	endif
  2737  000600  0009               	tblrd		*+
  2738  000602  50F5               	movf	tablat,w,c
  2739  000604  0009               	tblrd		*+
  2740  000606  10F5               	iorwf	tablat,w,c
  2741  000608  B4D8               	btfsc	status,2,c
  2742  00060A  D013               	goto	l2129
  2743                           
  2744                           ; BSR set to: 0
  2745  00060C  0100               	movlb	0	; () banked
  2746  00060E  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2747  000610  0D04               	mullw	4
  2748  000612  0E02               	movlw	2
  2749  000614  26F3               	addwf	prodl,f,c
  2750  000616  0E00               	movlw	0
  2751  000618  22F4               	addwfc	prodh,f,c
  2752  00061A  0E50               	movlw	low _ServDescList
  2753  00061C  24F3               	addwf	prodl,w,c
  2754  00061E  6EF6               	movwf	tblptrl,c
  2755  000620  0E03               	movlw	high _ServDescList
  2756  000622  20F4               	addwfc	prodh,w,c
  2757  000624  6EF7               	movwf	tblptrh,c
  2758  000626                     	if	0	;There are less than 3 active tblptr bytes
  2759  000626                     	endif
  2760  000626  0009               	tblrd		*+
  2761  000628  50F5               	movf	tablat,w,c
  2762  00062A  0009               	tblrd		*+
  2763  00062C  10F5               	iorwf	tablat,w,c
  2764  00062E  A4D8               	btfss	status,2,c
  2765  000630  D002               	goto	l2133
  2766  000632                     l2129:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;ES_Framework.c: 249: return FailedPointer;
  2770  000632  0E03               	movlw	3
  2771                           
  2772                           ; BSR set to: 0
  2773  000634  0012               	return	
  2774  000636                     l2133:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2778  000636  0100               	movlb	0	; () banked
  2779  000638  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2780  00063A  0D03               	mullw	3
  2781  00063C  0E54               	movlw	low _EventQueues
  2782  00063E  24F3               	addwf	prodl,w,c
  2783  000640  6EF6               	movwf	tblptrl,c
  2784  000642  0E03               	movlw	high _EventQueues
  2785  000644  20F4               	addwfc	prodh,w,c
  2786  000646  6EF7               	movwf	tblptrh,c
  2787  000648                     	if	0	;There are less than 3 active tblptr bytes
  2788  000648                     	endif
  2789  000648  0009               	tblrd		*+
  2790  00064A  CFF5 F08F          	movff	tablat,ES_InitQueue@pBlock
  2791  00064E  000A               	tblrd		*-
  2792  000650  CFF5 F090          	movff	tablat,ES_InitQueue@pBlock+1
  2793  000654  0100               	movlb	0	; () banked
  2794  000656  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2795  000658  0D03               	mullw	3
  2796  00065A  0E02               	movlw	2
  2797  00065C  26F3               	addwf	prodl,f,c
  2798  00065E  0E00               	movlw	0
  2799  000660  22F4               	addwfc	prodh,f,c
  2800  000662  0E54               	movlw	low _EventQueues
  2801  000664  24F3               	addwf	prodl,w,c
  2802  000666  6EF6               	movwf	tblptrl,c
  2803  000668  0E03               	movlw	high _EventQueues
  2804  00066A  20F4               	addwfc	prodh,w,c
  2805  00066C  6EF7               	movwf	tblptrh,c
  2806  00066E                     	if	0	;There are less than 3 active tblptr bytes
  2807  00066E                     	endif
  2808  00066E  0008               	tblrd		*
  2809  000670  CFF5 F091          	movff	tablat,ES_InitQueue@BlockSize
  2810  000674  EC70  F007         	call	_ES_InitQueue	;wreg free
  2811                           
  2812                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2813  000678  0100               	movlb	0	; () banked
  2814  00067A  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2815  00067C  0D04               	mullw	4
  2816  00067E  0E50               	movlw	low _ServDescList
  2817  000680  24F3               	addwf	prodl,w,c
  2818  000682  6EF6               	movwf	tblptrl,c
  2819  000684  0E03               	movlw	high _ServDescList
  2820  000686  20F4               	addwfc	prodh,w,c
  2821  000688  6EF7               	movwf	tblptrh,c
  2822  00068A                     	if	0	;There are less than 3 active tblptr bytes
  2823  00068A                     	endif
  2824  00068A  D801               	call	u1258
  2825  00068C  D00E               	goto	u1259
  2826  00068E                     u1258:
  2827  00068E  0005               	push	
  2828  000690  6EFA               	movwf	pclath,c
  2829  000692  0009               	tblrd		*+
  2830  000694  50F5               	movf	tablat,w,c
  2831  000696  6EFD               	movwf	tosl,c
  2832  000698  0009               	tblrd		*+
  2833  00069A  50F5               	movf	tablat,w,c
  2834  00069C  6EFE               	movwf	tosh,c
  2835  00069E  50F8               	movf	tblptru,w,c
  2836  0006A0  6EFF               	movwf	tosu,c
  2837  0006A2  50FA               	movf	pclath,w,c
  2838  0006A4  0100               	movlb	0	; () banked
  2839  0006A6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2840  0006A8  0012               	return		;indir
  2841  0006AA                     u1259:
  2842  0006AA  06E8               	decf	wreg,f,c
  2843  0006AC  B4D8               	btfsc	status,2,c
  2844  0006AE  D002               	goto	l2141
  2845                           
  2846                           ;ES_Framework.c: 254: return FailedInit;
  2847  0006B0  0E05               	movlw	5
  2848  0006B2  0012               	return	
  2849  0006B4                     l2141:
  2850  0006B4  0100               	movlb	0	; () banked
  2851  0006B6  2BB2               	incf	ES_Initialize@i& (0+255),f,b
  2852  0006B8  D795               	goto	l2121
  2853  0006BA                     l2145:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;ES_Framework.c: 255: }
  2857                           ;ES_Framework.c: 256: return Success;
  2858  0006BA  0E00               	movlw	0
  2859  0006BC  0012               	return	
  2860  0006BE                     __end_of_ES_Initialize:
  2861                           	opt stack 0
  2862                           tosu	equ	0xFFF
  2863                           tosh	equ	0xFFE
  2864                           tosl	equ	0xFFD
  2865                           pclath	equ	0xFFA
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           indf1	equ	0xFE7
  2876                           postinc1	equ	0xFE6
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _InitCanRX_Service *****************
  2887 ;; Defined at:
  2888 ;;		line 84 in file "CanRX_Service.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  Priority        1    wreg     unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  Priority        1   32[BANK0 ] unsigned char 
  2893 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      unsigned char 
  2896 ;; Registers used:
  2897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2903 ;;      Params:         0       0       0       0
  2904 ;;      Locals:         0       4       0       0
  2905 ;;      Temps:          0       0       0       0
  2906 ;;      Totals:         0       4       0       0
  2907 ;;Total ram usage:        4 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:   10
  2910 ;; This function calls:
  2911 ;;		_ES_PostToService
  2912 ;; This function is called by:
  2913 ;;		_ES_Initialize
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text15
  2918  000F86                     __ptext15:
  2919                           	opt stack 0
  2920  000F86                     _InitCanRX_Service:
  2921                           	opt stack 19
  2922                           
  2923                           ;incstack = 0
  2924                           ;InitCanRX_Service@Priority stored from wreg
  2925  000F86  0100               	movlb	0	; () banked
  2926  000F88  6FAF               	movwf	InitCanRX_Service@Priority& (0+255),b
  2927                           
  2928                           ;CanRX_Service.c: 86: ES_Event ThisEvent;
  2929                           ;CanRX_Service.c: 88: MyPriority = Priority;
  2930  000F8A  C0AF  F08A         	movff	InitCanRX_Service@Priority,_MyPriority
  2931                           
  2932                           ;CanRX_Service.c: 91: ThisEvent.EventType = ES_INIT;
  2933  000F8E  0E02               	movlw	2
  2934  000F90  0100               	movlb	0	; () banked
  2935  000F92  6FAC               	movwf	InitCanRX_Service@ThisEvent& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;CanRX_Service.c: 92: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2939  000F94  C0AC  F0A6         	movff	InitCanRX_Service@ThisEvent,ES_PostToService@TheEvent
  2940  000F98  C0AD  F0A7         	movff	InitCanRX_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  2941  000F9C  C0AE  F0A8         	movff	InitCanRX_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  2942  000FA0  0100               	movlb	0	; () banked
  2943  000FA2  518A               	movf	_MyPriority& (0+255),w,b
  2944  000FA4  EC21  F006         	call	_ES_PostToService
  2945  000FA8  06E8               	decf	wreg,f,c
  2946  000FAA  A4D8               	btfss	status,2,c
  2947  000FAC  D002               	goto	l2075
  2948                           
  2949                           ;CanRX_Service.c: 93: {
  2950                           ;CanRX_Service.c: 94: return 1;
  2951  000FAE  0E01               	movlw	1
  2952                           
  2953                           ;CanRX_Service.c: 95: }else
  2954  000FB0  0012               	return	
  2955  000FB2                     l2075:
  2956                           
  2957                           ;CanRX_Service.c: 96: {
  2958                           ;CanRX_Service.c: 97: return 0;
  2959  000FB2  0E00               	movlw	0
  2960  000FB4  0012               	return	
  2961  000FB6                     __end_of_InitCanRX_Service:
  2962                           	opt stack 0
  2963                           tosu	equ	0xFFF
  2964                           tosh	equ	0xFFE
  2965                           tosl	equ	0xFFD
  2966                           pclath	equ	0xFFA
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           indf1	equ	0xFE7
  2977                           postinc1	equ	0xFE6
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _ES_PostToService *****************
  2988 ;; Defined at:
  2989 ;;		line 351 in file "ES_Framework.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  WhichService    1    wreg     unsigned char 
  2992 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  WhichService    1   28[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      unsigned char 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3004 ;;      Params:         0       3       0       0
  3005 ;;      Locals:         0       1       0       0
  3006 ;;      Temps:          0       2       0       0
  3007 ;;      Totals:         0       6       0       0
  3008 ;;Total ram usage:        6 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    9
  3011 ;; This function calls:
  3012 ;;		_ES_EnQueueFIFO
  3013 ;; This function is called by:
  3014 ;;		_InitCanRX_Service
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text16
  3019  000C42                     __ptext16:
  3020                           	opt stack 0
  3021  000C42                     _ES_PostToService:
  3022                           	opt stack 19
  3023                           
  3024                           ;incstack = 0
  3025                           ;ES_PostToService@WhichService stored from wreg
  3026  000C42  0100               	movlb	0	; () banked
  3027  000C44  6FAB               	movwf	ES_PostToService@WhichService& (0+255),b
  3028                           
  3029                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3030                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3031                           ;ES_Framework.c: 354: 1 )){
  3032  000C46  0100               	movlb	0	; () banked
  3033  000C48  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3034  000C4A  0100               	movlb	0	; () banked
  3035  000C4C  A4D8               	btfss	status,2,c
  3036  000C4E  D033               	goto	l1905
  3037                           
  3038                           ; BSR set to: 0
  3039  000C50  0100               	movlb	0	; () banked
  3040  000C52  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3041  000C54  0D03               	mullw	3
  3042  000C56  0E54               	movlw	low _EventQueues
  3043  000C58  24F3               	addwf	prodl,w,c
  3044  000C5A  6EF6               	movwf	tblptrl,c
  3045  000C5C  0E03               	movlw	high _EventQueues
  3046  000C5E  20F4               	addwfc	prodh,w,c
  3047  000C60  6EF7               	movwf	tblptrh,c
  3048  000C62                     	if	0	;There are less than 3 active tblptr bytes
  3049  000C62                     	endif
  3050  000C62  0009               	tblrd		*+
  3051  000C64  CFF5 F09B          	movff	tablat,ES_EnQueueFIFO@pBlock
  3052  000C68  000A               	tblrd		*-
  3053  000C6A  CFF5 F09C          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3054  000C6E  C0A6  F09D         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3055  000C72  C0A7  F09E         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3056  000C76  C0A8  F09F         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3057  000C7A  EC5F  F003         	call	_ES_EnQueueFIFO	;wreg free
  3058  000C7E  06E8               	decf	wreg,f,c
  3059  000C80  A4D8               	btfss	status,2,c
  3060  000C82  D019               	goto	l1905
  3061                           
  3062                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3063  000C84  0100               	movlb	0	; () banked
  3064  000C86  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3065  000C88  0D02               	mullw	2
  3066  000C8A  0E01               	movlw	low _BitNum2SetMask
  3067  000C8C  24F3               	addwf	prodl,w,c
  3068  000C8E  6EF6               	movwf	tblptrl,c
  3069  000C90  0E03               	movlw	high _BitNum2SetMask
  3070  000C92  20F4               	addwfc	prodh,w,c
  3071  000C94  6EF7               	movwf	tblptrh,c
  3072  000C96                     	if	0	;There are less than 3 active tblptr bytes
  3073  000C96                     	endif
  3074  000C96  0009               	tblrd		*+
  3075  000C98  CFF5 F0A9          	movff	tablat,??_ES_PostToService
  3076  000C9C  0009               	tblrd		*+
  3077  000C9E  CFF5 F0AA          	movff	tablat,??_ES_PostToService+1
  3078  000CA2  0100               	movlb	0	; () banked
  3079  000CA4  51A9               	movf	??_ES_PostToService& (0+255),w,b
  3080  000CA6  0100               	movlb	0	; () banked
  3081  000CA8  1385               	iorwf	_Ready& (0+255),f,b
  3082  000CAA  0100               	movlb	0	; () banked
  3083  000CAC  51AA               	movf	(??_ES_PostToService+1)& (0+255),w,b
  3084  000CAE  0100               	movlb	0	; () banked
  3085  000CB0  1386               	iorwf	(_Ready+1)& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ES_Framework.c: 356: return 1;
  3089  000CB2  0E01               	movlw	1
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;ES_Framework.c: 357: } else
  3093                           
  3094                           ; BSR set to: 0
  3095  000CB4  0012               	return	
  3096  000CB6                     l1905:
  3097                           
  3098                           ;ES_Framework.c: 358: return 0;
  3099  000CB6  0E00               	movlw	0
  3100  000CB8  0012               	return	
  3101  000CBA                     __end_of_ES_PostToService:
  3102                           	opt stack 0
  3103                           tosu	equ	0xFFF
  3104                           tosh	equ	0xFFE
  3105                           tosl	equ	0xFFD
  3106                           pclath	equ	0xFFA
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           indf1	equ	0xFE7
  3117                           postinc1	equ	0xFE6
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _ES_EnQueueFIFO *****************
  3128 ;; Defined at:
  3129 ;;		line 85 in file "ES_Queue.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3132 ;;		 -> Queue0(12), 
  3133 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  3136 ;;		 -> Queue0(12), 
  3137 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      unsigned char 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3147 ;;      Params:         0       5       0       0
  3148 ;;      Locals:         0       3       0       0
  3149 ;;      Temps:          0       3       0       0
  3150 ;;      Totals:         0      11       0       0
  3151 ;;Total ram usage:       11 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    8
  3154 ;; This function calls:
  3155 ;;		___awmod
  3156 ;;		___wmul
  3157 ;; This function is called by:
  3158 ;;		_ES_PostToService
  3159 ;;		_ES_PostAll
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text17
  3164  0006BE                     __ptext17:
  3165                           	opt stack 0
  3166  0006BE                     _ES_EnQueueFIFO:
  3167                           	opt stack 19
  3168                           
  3169                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3170                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3171                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3172                           
  3173                           ;incstack = 0
  3174  0006BE  C09B  F0A4         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3175  0006C2  C09C  F0A5         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3176                           
  3177                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3178  0006C6  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3179  0006CA  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3180  0006CE  0100               	movlb	0	; () banked
  3181  0006D0  EE10 F002          	lfsr	1,2
  3182  0006D4  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3183  0006D6  26E1               	addwf	fsr1l,f,c
  3184  0006D8  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3185  0006DA  22E2               	addwfc	fsr1h,f,c
  3186  0006DC  50DE               	movf	postinc2,w,c
  3187  0006DE  5CE6               	subwf	postinc1,w,c
  3188  0006E0  B0D8               	btfsc	status,0,c
  3189  0006E2  D05C               	goto	l1873
  3190                           
  3191                           ; BSR set to: 0
  3192                           
  3193                           ;ES_Queue.c: 92: {
  3194                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3195  0006E4  CFF2 F0A3          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3196  0006E8  9EF2               	bcf	intcon,7,c	;volatile
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3200                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3201                           
  3202                           ; BSR set to: 0
  3203  0006EA  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3204  0006EE  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3205  0006F2  50DF               	movf	indf2,w,c
  3206  0006F4  0100               	movlb	0	; () banked
  3207  0006F6  6FA0               	movwf	??_ES_EnQueueFIFO& (0+255),b
  3208  0006F8  0100               	movlb	0	; () banked
  3209  0006FA  51A0               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  3210  0006FC  0100               	movlb	0	; () banked
  3211  0006FE  6F91               	movwf	___awmod@divisor& (0+255),b
  3212  000700  6B92               	clrf	(___awmod@divisor+1)& (0+255),b
  3213  000702  0100               	movlb	0	; () banked
  3214  000704  EE20 F002          	lfsr	2,2
  3215  000708  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3216  00070A  26D9               	addwf	fsr2l,f,c
  3217  00070C  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3218  00070E  22DA               	addwfc	fsr2h,f,c
  3219  000710  50DF               	movf	indf2,w,c
  3220  000712  0100               	movlb	0	; () banked
  3221  000714  6FA1               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  3222  000716  0100               	movlb	0	; () banked
  3223  000718  EE20 F001          	lfsr	2,1
  3224  00071C  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3225  00071E  26D9               	addwf	fsr2l,f,c
  3226  000720  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3227  000722  22DA               	addwfc	fsr2h,f,c
  3228  000724  50DF               	movf	indf2,w,c
  3229  000726  0100               	movlb	0	; () banked
  3230  000728  6FA2               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  3231  00072A  0100               	movlb	0	; () banked
  3232  00072C  51A2               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  3233  00072E  0100               	movlb	0	; () banked
  3234  000730  25A1               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  3235  000732  0100               	movlb	0	; () banked
  3236  000734  6F8F               	movwf	___awmod@dividend& (0+255),b
  3237  000736  0100               	movlb	0	; () banked
  3238  000738  6B90               	clrf	(___awmod@dividend+1)& (0+255),b
  3239  00073A  0100               	movlb	0	; () banked
  3240  00073C  3790               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  3241  00073E  EC4C  F005         	call	___awmod	;wreg free
  3242  000742  0E01               	movlw	1
  3243  000744  0100               	movlb	0	; () banked
  3244  000746  258F               	addwf	?___awmod& (0+255),w,b
  3245  000748  0100               	movlb	0	; () banked
  3246  00074A  6F95               	movwf	___wmul@multiplier& (0+255),b
  3247  00074C  0E00               	movlw	0
  3248  00074E  0100               	movlb	0	; () banked
  3249  000750  2190               	addwfc	(?___awmod+1)& (0+255),w,b
  3250  000752  0100               	movlb	0	; () banked
  3251  000754  6F96               	movwf	(___wmul@multiplier+1)& (0+255),b
  3252  000756  0E00               	movlw	0
  3253  000758  0100               	movlb	0	; () banked
  3254  00075A  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3255  00075C  0E03               	movlw	3
  3256  00075E  6F97               	movwf	___wmul@multiplicand& (0+255),b
  3257  000760  EC8E  F007         	call	___wmul	;wreg free
  3258  000764  0100               	movlb	0	; () banked
  3259  000766  5195               	movf	?___wmul& (0+255),w,b
  3260  000768  0100               	movlb	0	; () banked
  3261  00076A  259B               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  3262  00076C  6ED9               	movwf	fsr2l,c
  3263  00076E  0100               	movlb	0	; () banked
  3264  000770  5196               	movf	(?___wmul+1)& (0+255),w,b
  3265  000772  0100               	movlb	0	; () banked
  3266  000774  219C               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  3267  000776  6EDA               	movwf	fsr2h,c
  3268  000778  C09D  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3269  00077C  C09E  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3270  000780  C09F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3274  000784  0100               	movlb	0	; () banked
  3275  000786  EE20 F002          	lfsr	2,2
  3276  00078A  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3277  00078C  26D9               	addwf	fsr2l,f,c
  3278  00078E  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3279  000790  22DA               	addwfc	fsr2h,f,c
  3280  000792  2ADF               	incf	indf2,f,c
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3284  000794  C0A3  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;ES_Queue.c: 101: return(1);
  3288  000798  0E01               	movlw	1
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;ES_Queue.c: 102: }else
  3292                           
  3293                           ; BSR set to: 0
  3294  00079A  0012               	return	
  3295  00079C                     l1873:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;ES_Queue.c: 103: return(0);
  3299  00079C  0E00               	movlw	0
  3300                           
  3301                           ; BSR set to: 0
  3302  00079E  0012               	return	
  3303  0007A0                     __end_of_ES_EnQueueFIFO:
  3304                           	opt stack 0
  3305                           tosu	equ	0xFFF
  3306                           tosh	equ	0xFFE
  3307                           tosl	equ	0xFFD
  3308                           pclath	equ	0xFFA
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           intcon	equ	0xFF2
  3316                           postinc0	equ	0xFEE
  3317                           wreg	equ	0xFE8
  3318                           indf1	equ	0xFE7
  3319                           postinc1	equ	0xFE6
  3320                           fsr1h	equ	0xFE2
  3321                           fsr1l	equ	0xFE1
  3322                           indf2	equ	0xFDF
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function ___wmul *****************
  3330 ;; Defined at:
  3331 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  multiplier      2    6[BANK0 ] unsigned int 
  3334 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  product         2   10[BANK0 ] unsigned int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  2    6[BANK0 ] unsigned int 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, prodl, prodh
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       4       0       0
  3347 ;;      Locals:         0       2       0       0
  3348 ;;      Temps:          0       0       0       0
  3349 ;;      Totals:         0       6       0       0
  3350 ;;Total ram usage:        6 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    7
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_ES_EnQueueFIFO
  3357 ;;		_ES_DeQueue
  3358 ;;		i2_ES_EnQueueFIFO
  3359 ;;		_ES_EnQueueLIFO
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text18
  3364  000F1C                     __ptext18:
  3365                           	opt stack 0
  3366  000F1C                     ___wmul:
  3367                           	opt stack 21
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;incstack = 0
  3371  000F1C  0100               	movlb	0	; () banked
  3372  000F1E  5195               	movf	___wmul@multiplier& (0+255),w,b
  3373  000F20  0100               	movlb	0	; () banked
  3374  000F22  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3375  000F24  CFF3 F099          	movff	prodl,___wmul@product
  3376  000F28  CFF4 F09A          	movff	prodh,___wmul@product+1
  3377  000F2C  0100               	movlb	0	; () banked
  3378  000F2E  5195               	movf	___wmul@multiplier& (0+255),w,b
  3379  000F30  0100               	movlb	0	; () banked
  3380  000F32  0398               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3381  000F34  50F3               	movf	prodl,w,c
  3382  000F36  0100               	movlb	0	; () banked
  3383  000F38  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3384  000F3A  0100               	movlb	0	; () banked
  3385  000F3C  5196               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3386  000F3E  0100               	movlb	0	; () banked
  3387  000F40  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3388  000F42  50F3               	movf	prodl,w,c
  3389  000F44  0100               	movlb	0	; () banked
  3390  000F46  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3391                           
  3392                           ; BSR set to: 0
  3393  000F48  C099  F095         	movff	___wmul@product,?___wmul
  3394  000F4C  C09A  F096         	movff	___wmul@product+1,?___wmul+1
  3395  000F50  0012               	return	
  3396  000F52                     __end_of___wmul:
  3397                           	opt stack 0
  3398                           tosu	equ	0xFFF
  3399                           tosh	equ	0xFFE
  3400                           tosl	equ	0xFFD
  3401                           pclath	equ	0xFFA
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           indf1	equ	0xFE7
  3412                           postinc1	equ	0xFE6
  3413                           fsr1h	equ	0xFE2
  3414                           fsr1l	equ	0xFE1
  3415                           indf2	equ	0xFDF
  3416                           postinc2	equ	0xFDE
  3417                           postdec2	equ	0xFDD
  3418                           fsr2h	equ	0xFDA
  3419                           fsr2l	equ	0xFD9
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function ___awmod *****************
  3423 ;; Defined at:
  3424 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  dividend        2    0[BANK0 ] int 
  3427 ;;  divisor         2    2[BANK0 ] int 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  sign            1    5[BANK0 ] unsigned char 
  3430 ;;  counter         1    4[BANK0 ] unsigned char 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  2    0[BANK0 ] int 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3440 ;;      Params:         0       4       0       0
  3441 ;;      Locals:         0       2       0       0
  3442 ;;      Temps:          0       0       0       0
  3443 ;;      Totals:         0       6       0       0
  3444 ;;Total ram usage:        6 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    7
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_ES_EnQueueFIFO
  3451 ;;		i2_ES_EnQueueFIFO
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text19
  3456  000A98                     __ptext19:
  3457                           	opt stack 0
  3458  000A98                     ___awmod:
  3459                           	opt stack 19
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;incstack = 0
  3463  000A98  0E00               	movlw	0
  3464  000A9A  0100               	movlb	0	; () banked
  3465  000A9C  6F94               	movwf	___awmod@sign& (0+255),b
  3466                           
  3467                           ; BSR set to: 0
  3468  000A9E  0100               	movlb	0	; () banked
  3469  000AA0  AF90               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3470  000AA2  D008               	goto	l1789
  3471                           
  3472                           ; BSR set to: 0
  3473  000AA4  0100               	movlb	0	; () banked
  3474  000AA6  6D8F               	negf	___awmod@dividend& (0+255),b
  3475  000AA8  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3476  000AAA  B0D8               	btfsc	status,0,c
  3477  000AAC  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3478                           
  3479                           ; BSR set to: 0
  3480  000AAE  0E01               	movlw	1
  3481  000AB0  0100               	movlb	0	; () banked
  3482  000AB2  6F94               	movwf	___awmod@sign& (0+255),b
  3483  000AB4                     l1789:
  3484                           
  3485                           ; BSR set to: 0
  3486  000AB4  0100               	movlb	0	; () banked
  3487  000AB6  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3488  000AB8  D005               	goto	l1793
  3489                           
  3490                           ; BSR set to: 0
  3491  000ABA  0100               	movlb	0	; () banked
  3492  000ABC  6D91               	negf	___awmod@divisor& (0+255),b
  3493  000ABE  1F92               	comf	(___awmod@divisor+1)& (0+255),f,b
  3494  000AC0  B0D8               	btfsc	status,0,c
  3495  000AC2  2B92               	incf	(___awmod@divisor+1)& (0+255),f,b
  3496  000AC4                     l1793:
  3497                           
  3498                           ; BSR set to: 0
  3499  000AC4  0100               	movlb	0	; () banked
  3500  000AC6  5191               	movf	___awmod@divisor& (0+255),w,b
  3501  000AC8  0100               	movlb	0	; () banked
  3502  000ACA  1192               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3503  000ACC  B4D8               	btfsc	status,2,c
  3504  000ACE  D026               	goto	l1809
  3505                           
  3506                           ; BSR set to: 0
  3507  000AD0  0E01               	movlw	1
  3508  000AD2  0100               	movlb	0	; () banked
  3509  000AD4  6F93               	movwf	___awmod@counter& (0+255),b
  3510  000AD6  D006               	goto	l1799
  3511  000AD8                     l1797:
  3512                           
  3513                           ; BSR set to: 0
  3514  000AD8  0100               	movlb	0	; () banked
  3515  000ADA  90D8               	bcf	status,0,c
  3516  000ADC  3791               	rlcf	___awmod@divisor& (0+255),f,b
  3517  000ADE  3792               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3518  000AE0  0100               	movlb	0	; () banked
  3519  000AE2  2B93               	incf	___awmod@counter& (0+255),f,b
  3520  000AE4                     l1799:
  3521                           
  3522                           ; BSR set to: 0
  3523  000AE4  0100               	movlb	0	; () banked
  3524  000AE6  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3525  000AE8  D7F7               	goto	l1797
  3526  000AEA                     l1801:
  3527                           
  3528                           ; BSR set to: 0
  3529  000AEA  0100               	movlb	0	; () banked
  3530  000AEC  5191               	movf	___awmod@divisor& (0+255),w,b
  3531  000AEE  0100               	movlb	0	; () banked
  3532  000AF0  5D8F               	subwf	___awmod@dividend& (0+255),w,b
  3533  000AF2  0100               	movlb	0	; () banked
  3534  000AF4  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3535  000AF6  0100               	movlb	0	; () banked
  3536  000AF8  5990               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3537  000AFA  A0D8               	btfss	status,0,c
  3538  000AFC  D008               	goto	l1805
  3539                           
  3540                           ; BSR set to: 0
  3541  000AFE  0100               	movlb	0	; () banked
  3542  000B00  5191               	movf	___awmod@divisor& (0+255),w,b
  3543  000B02  0100               	movlb	0	; () banked
  3544  000B04  5F8F               	subwf	___awmod@dividend& (0+255),f,b
  3545  000B06  0100               	movlb	0	; () banked
  3546  000B08  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3547  000B0A  0100               	movlb	0	; () banked
  3548  000B0C  5B90               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3549  000B0E                     l1805:
  3550                           
  3551                           ; BSR set to: 0
  3552  000B0E  0100               	movlb	0	; () banked
  3553  000B10  90D8               	bcf	status,0,c
  3554  000B12  3392               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3555  000B14  3391               	rrcf	___awmod@divisor& (0+255),f,b
  3556                           
  3557                           ; BSR set to: 0
  3558  000B16  0100               	movlb	0	; () banked
  3559  000B18  2F93               	decfsz	___awmod@counter& (0+255),f,b
  3560  000B1A  D7E7               	goto	l1801
  3561  000B1C                     l1809:
  3562                           
  3563                           ; BSR set to: 0
  3564  000B1C  0100               	movlb	0	; () banked
  3565  000B1E  5194               	movf	___awmod@sign& (0+255),w,b
  3566  000B20  0100               	movlb	0	; () banked
  3567  000B22  B4D8               	btfsc	status,2,c
  3568  000B24  D005               	goto	l1813
  3569                           
  3570                           ; BSR set to: 0
  3571  000B26  0100               	movlb	0	; () banked
  3572  000B28  6D8F               	negf	___awmod@dividend& (0+255),b
  3573  000B2A  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3574  000B2C  B0D8               	btfsc	status,0,c
  3575  000B2E  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3576  000B30                     l1813:
  3577                           
  3578                           ; BSR set to: 0
  3579  000B30  C08F  F08F         	movff	___awmod@dividend,?___awmod
  3580  000B34  C090  F090         	movff	___awmod@dividend+1,?___awmod+1
  3581  000B38  0012               	return	
  3582  000B3A                     __end_of___awmod:
  3583                           	opt stack 0
  3584                           tosu	equ	0xFFF
  3585                           tosh	equ	0xFFE
  3586                           tosl	equ	0xFFD
  3587                           pclath	equ	0xFFA
  3588                           tblptru	equ	0xFF8
  3589                           tblptrh	equ	0xFF7
  3590                           tblptrl	equ	0xFF6
  3591                           tablat	equ	0xFF5
  3592                           prodh	equ	0xFF4
  3593                           prodl	equ	0xFF3
  3594                           intcon	equ	0xFF2
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf1	equ	0xFE7
  3598                           postinc1	equ	0xFE6
  3599                           fsr1h	equ	0xFE2
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _ES_Timer_Init *****************
  3609 ;; Defined at:
  3610 ;;		line 130 in file "ES_Timers.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  Rate            2    2[BANK0 ] enum E15423
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       2       0       0
  3625 ;;      Locals:         0       0       0       0
  3626 ;;      Temps:          0       0       0       0
  3627 ;;      Totals:         0       2       0       0
  3628 ;;Total ram usage:        2 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    8
  3631 ;; This function calls:
  3632 ;;		__HW_Timer_Init
  3633 ;; This function is called by:
  3634 ;;		_ES_Initialize
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text20
  3639  001066                     __ptext20:
  3640                           	opt stack 0
  3641  001066                     _ES_Timer_Init:
  3642                           	opt stack 21
  3643                           
  3644                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;incstack = 0
  3648  001066  C091  F08F         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3649  00106A  C092  F090         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3650  00106E  EC01  F008         	call	__HW_Timer_Init	;wreg free
  3651  001072  0012               	return		;funcret
  3652  001074                     __end_of_ES_Timer_Init:
  3653                           	opt stack 0
  3654                           tosu	equ	0xFFF
  3655                           tosh	equ	0xFFE
  3656                           tosl	equ	0xFFD
  3657                           pclath	equ	0xFFA
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           indf1	equ	0xFE7
  3668                           postinc1	equ	0xFE6
  3669                           fsr1h	equ	0xFE2
  3670                           fsr1l	equ	0xFE1
  3671                           indf2	equ	0xFDF
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function __HW_Timer_Init *****************
  3679 ;; Defined at:
  3680 ;;		line 71 in file "ES_Port.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  Rate            2    0[BANK0 ] enum E15412
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3694 ;;      Params:         0       2       0       0
  3695 ;;      Locals:         0       0       0       0
  3696 ;;      Temps:          0       0       0       0
  3697 ;;      Totals:         0       2       0       0
  3698 ;;Total ram usage:        2 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    7
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_ES_Timer_Init
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text21
  3709  001002                     __ptext21:
  3710                           	opt stack 0
  3711  001002                     __HW_Timer_Init:
  3712                           	opt stack 21
  3713                           
  3714                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  3715                           
  3716                           ;incstack = 0
  3717  001002  0E04               	movlw	4
  3718  001004  6E9D               	movwf	3997,c	;volatile
  3719                           
  3720                           ;ES_Port.c: 84: INTCON = 0b01000000;
  3721  001006  0E40               	movlw	64
  3722  001008  6EF2               	movwf	intcon,c	;volatile
  3723                           
  3724                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  3725  00100A  0E0A               	movlw	10
  3726  00100C  6EBD               	movwf	4029,c	;volatile
  3727                           
  3728                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  3729  00100E  0E01               	movlw	1
  3730  001010  6EBE               	movwf	4030,c	;volatile
  3731                           
  3732                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  3733  001012  0E00               	movlw	0
  3734  001014  6EBF               	movwf	4031,c	;volatile
  3735                           
  3736                           ;ES_Port.c: 106: T1CON = 0b00100001;
  3737  001016  0E21               	movlw	33
  3738  001018  6ECD               	movwf	4045,c	;volatile
  3739                           
  3740                           ;ES_Port.c: 107: PEIE = 1;
  3741  00101A  8CF2               	bsf	intcon,6,c	;volatile
  3742                           
  3743                           ;ES_Port.c: 108: {GIE = 1;};
  3744  00101C  8EF2               	bsf	intcon,7,c	;volatile
  3745  00101E  0012               	return		;funcret
  3746  001020                     __end_of__HW_Timer_Init:
  3747                           	opt stack 0
  3748                           tosu	equ	0xFFF
  3749                           tosh	equ	0xFFE
  3750                           tosl	equ	0xFFD
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           postinc0	equ	0xFEE
  3760                           wreg	equ	0xFE8
  3761                           indf1	equ	0xFE7
  3762                           postinc1	equ	0xFE6
  3763                           fsr1h	equ	0xFE2
  3764                           fsr1l	equ	0xFE1
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _ES_InitQueue *****************
  3773 ;; Defined at:
  3774 ;;		line 58 in file "ES_Queue.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  3777 ;;		 -> Queue0(12), 
  3778 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  3781 ;;		 -> Queue0(12), 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      unsigned char 
  3784 ;; Registers used:
  3785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3791 ;;      Params:         0       3       0       0
  3792 ;;      Locals:         0       2       0       0
  3793 ;;      Temps:          0       0       0       0
  3794 ;;      Totals:         0       5       0       0
  3795 ;;Total ram usage:        5 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    7
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_ES_Initialize
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text22
  3806  000EE0                     __ptext22:
  3807                           	opt stack 0
  3808  000EE0                     _ES_InitQueue:
  3809                           	opt stack 22
  3810                           
  3811                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3812                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3813                           
  3814                           ;incstack = 0
  3815  000EE0  C08F  F092         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3816  000EE4  C090  F093         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3817                           
  3818                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3819  000EE8  0100               	movlb	0	; () banked
  3820  000EEA  0591               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  3821  000EEC  C092  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3822  000EF0  C093  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3823  000EF4  6EDF               	movwf	indf2,c
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3827  000EF6  0100               	movlb	0	; () banked
  3828  000EF8  EE20 F001          	lfsr	2,1
  3829  000EFC  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3830  000EFE  26D9               	addwf	fsr2l,f,c
  3831  000F00  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3832  000F02  22DA               	addwfc	fsr2h,f,c
  3833  000F04  0E00               	movlw	0
  3834  000F06  6EDF               	movwf	indf2,c
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3838  000F08  0100               	movlb	0	; () banked
  3839  000F0A  EE20 F002          	lfsr	2,2
  3840  000F0E  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3841  000F10  26D9               	addwf	fsr2l,f,c
  3842  000F12  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3843  000F14  22DA               	addwfc	fsr2h,f,c
  3844  000F16  0E00               	movlw	0
  3845  000F18  6EDF               	movwf	indf2,c
  3846  000F1A  0012               	return	
  3847  000F1C                     __end_of_ES_InitQueue:
  3848                           	opt stack 0
  3849                           tosu	equ	0xFFF
  3850                           tosh	equ	0xFFE
  3851                           tosl	equ	0xFFD
  3852                           pclath	equ	0xFFA
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           indf1	equ	0xFE7
  3863                           postinc1	equ	0xFE6
  3864                           fsr1h	equ	0xFE2
  3865                           fsr1l	equ	0xFE1
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _ISR *****************
  3874 ;; Defined at:
  3875 ;;		line 111 in file "ES_Port.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3889 ;;      Params:         0       0       0       0
  3890 ;;      Locals:         0       0       0       0
  3891 ;;      Temps:         16       0       0       0
  3892 ;;      Totals:        16       0       0       0
  3893 ;;Total ram usage:       16 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    6
  3896 ;; This function calls:
  3897 ;;		_BusErrorResponse
  3898 ;;		_CanErrorResponse
  3899 ;;		_CanRCVResponse
  3900 ;;		_CanXmitResponse
  3901 ;; This function is called by:
  3902 ;;		Interrupt level 2
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	intcode
  3907  000008                     __pintcode:
  3908                           	opt stack 0
  3909  000008                     _ISR:
  3910                           	opt stack 19
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3915  00000A  CFFA F026          	movff	pclath,??_ISR+2
  3916  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  3917  000012  ED3E  F004         	call	int_func,f	;refresh shadow registers
  3918                           tosu	equ	0xFFF
  3919                           tosh	equ	0xFFE
  3920                           tosl	equ	0xFFD
  3921                           pclatu	equ	0xFFB
  3922                           pclath	equ	0xFFA
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           indf1	equ	0xFE7
  3933                           postinc1	equ	0xFE6
  3934                           fsr1h	equ	0xFE2
  3935                           fsr1l	equ	0xFE1
  3936                           indf2	equ	0xFDF
  3937                           postinc2	equ	0xFDE
  3938                           postdec2	equ	0xFDD
  3939                           fsr2h	equ	0xFDA
  3940                           fsr2l	equ	0xFD9
  3941                           status	equ	0xFD8
  3942                           
  3943                           	psect	intcode_body
  3944  00087C                     __pintcode_body:
  3945                           	opt stack 19
  3946  00087C                     int_func:
  3947                           	opt stack 19
  3948  00087C  0006               	pop		; remove dummy address from shadow register refresh
  3949  00087E  CFE9 F028          	movff	fsr0l,??_ISR+4
  3950  000882  CFEA F029          	movff	fsr0h,??_ISR+5
  3951  000886  CFE1 F02A          	movff	fsr1l,??_ISR+6
  3952  00088A  CFE2 F02B          	movff	fsr1h,??_ISR+7
  3953  00088E  CFD9 F02C          	movff	fsr2l,??_ISR+8
  3954  000892  CFDA F02D          	movff	fsr2h,??_ISR+9
  3955  000896  CFF3 F02E          	movff	prodl,??_ISR+10
  3956  00089A  CFF4 F02F          	movff	prodh,??_ISR+11
  3957  00089E  CFF6 F030          	movff	tblptrl,??_ISR+12
  3958  0008A2  CFF7 F031          	movff	tblptrh,??_ISR+13
  3959  0008A6  CFF8 F032          	movff	tblptru,??_ISR+14
  3960  0008AA  CFF5 F033          	movff	tablat,??_ISR+15
  3961                           
  3962                           ;ES_Port.c: 114: static unsigned int LastTime;
  3963                           ;ES_Port.c: 115: static unsigned int NextTime;
  3964                           ;ES_Port.c: 117: if (CCP1IF == 1)
  3965  0008AE  A49E               	btfss	3998,2,c	;volatile
  3966  0008B0  D015               	goto	i2l2269
  3967                           
  3968                           ;ES_Port.c: 118: {
  3969                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3970  0008B2  50BF               	movf	4031,w,c	;volatile
  3971  0008B4  6E24               	movwf	??_ISR& (0+255),c
  3972  0008B6  50BE               	movf	4030,w,c	;volatile
  3973  0008B8  6E34               	movwf	ISR@LastTime,c
  3974  0008BA  C024  F035         	movff	??_ISR,ISR@LastTime+1
  3975                           
  3976                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  3977  0008BE  0E20               	movlw	32
  3978  0008C0  2434               	addwf	ISR@LastTime,w,c
  3979  0008C2  6E36               	movwf	ISR@NextTime,c
  3980  0008C4  0E4E               	movlw	78
  3981  0008C6  2035               	addwfc	ISR@LastTime+1,w,c
  3982  0008C8  6E37               	movwf	ISR@NextTime+1,c
  3983                           
  3984                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  3985  0008CA  5037               	movf	ISR@NextTime+1,w,c
  3986  0008CC  6EBF               	movwf	4031,c	;volatile
  3987                           
  3988                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3989  0008CE  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  3990                           
  3991                           ;ES_Port.c: 123: CCP1IF = 0;
  3992  0008D2  949E               	bcf	3998,2,c	;volatile
  3993                           
  3994                           ;ES_Port.c: 124: TickCount++;
  3995  0008D4  0100               	movlb	0	; () banked
  3996  0008D6  2B8B               	incf	_TickCount& (0+255),f,b	;volatile
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;ES_Port.c: 125: SysTickCounter++;
  4000  0008D8  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  4001  0008DA  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  4002  0008DC                     i2l2269:
  4003                           
  4004                           ;ES_Port.c: 126: }
  4005                           ;ES_Port.c: 128: if (TXB0IF == 1)
  4006  0008DC  A4A4               	btfss	4004,2,c	;volatile
  4007  0008DE  D003               	goto	i2l2275
  4008                           
  4009                           ;ES_Port.c: 129: {
  4010                           ;ES_Port.c: 130: TXB0IF = 0;
  4011  0008E0  94A4               	bcf	4004,2,c	;volatile
  4012                           
  4013                           ;ES_Port.c: 131: CanXmitResponse();
  4014  0008E2  EC40  F008         	call	_CanXmitResponse	;wreg free
  4015  0008E6                     i2l2275:
  4016                           
  4017                           ;ES_Port.c: 132: }
  4018                           ;ES_Port.c: 133: if (RXB0IF == 1) {
  4019  0008E6  A0A4               	btfss	4004,0,c	;volatile
  4020  0008E8  D003               	goto	i2l2281
  4021                           
  4022                           ;ES_Port.c: 134: RXB0IF = 0;
  4023  0008EA  90A4               	bcf	4004,0,c	;volatile
  4024                           
  4025                           ;ES_Port.c: 135: CanRCVResponse();
  4026  0008EC  EC3A  F008         	call	_CanRCVResponse	;wreg free
  4027  0008F0                     i2l2281:
  4028                           
  4029                           ;ES_Port.c: 136: }
  4030                           ;ES_Port.c: 137: if (ERRIF == 1) {
  4031  0008F0  AAA4               	btfss	4004,5,c	;volatile
  4032  0008F2  D003               	goto	i2l2287
  4033                           
  4034                           ;ES_Port.c: 138: ERRIF = 0;
  4035  0008F4  9AA4               	bcf	4004,5,c	;volatile
  4036                           
  4037                           ;ES_Port.c: 139: CanErrorResponse();
  4038  0008F6  EC46  F008         	call	_CanErrorResponse	;wreg free
  4039  0008FA                     i2l2287:
  4040                           
  4041                           ;ES_Port.c: 140: }
  4042                           ;ES_Port.c: 141: if (IRXIF == 1) {
  4043  0008FA  AEA4               	btfss	4004,7,c	;volatile
  4044  0008FC  D003               	goto	i2l160
  4045                           
  4046                           ;ES_Port.c: 142: IRXIF = 0;
  4047  0008FE  9EA4               	bcf	4004,7,c	;volatile
  4048                           
  4049                           ;ES_Port.c: 143: BusErrorResponse();
  4050  000900  EC47  F008         	call	_BusErrorResponse	;wreg free
  4051  000904                     i2l160:
  4052  000904  C033  FFF5         	movff	??_ISR+15,tablat
  4053  000908  C032  FFF8         	movff	??_ISR+14,tblptru
  4054  00090C  C031  FFF7         	movff	??_ISR+13,tblptrh
  4055  000910  C030  FFF6         	movff	??_ISR+12,tblptrl
  4056  000914  C02F  FFF4         	movff	??_ISR+11,prodh
  4057  000918  C02E  FFF3         	movff	??_ISR+10,prodl
  4058  00091C  C02D  FFDA         	movff	??_ISR+9,fsr2h
  4059  000920  C02C  FFD9         	movff	??_ISR+8,fsr2l
  4060  000924  C02B  FFE2         	movff	??_ISR+7,fsr1h
  4061  000928  C02A  FFE1         	movff	??_ISR+6,fsr1l
  4062  00092C  C029  FFEA         	movff	??_ISR+5,fsr0h
  4063  000930  C028  FFE9         	movff	??_ISR+4,fsr0l
  4064  000934  C027  FFFB         	movff	??_ISR+3,pclatu
  4065  000938  C026  FFFA         	movff	??_ISR+2,pclath
  4066  00093C  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4067  00093E  0011               	retfie		f
  4068  000940                     __end_of_ISR:
  4069                           	opt stack 0
  4070                           tosu	equ	0xFFF
  4071                           tosh	equ	0xFFE
  4072                           tosl	equ	0xFFD
  4073                           pclatu	equ	0xFFB
  4074                           pclath	equ	0xFFA
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           intcon	equ	0xFF2
  4082                           postinc0	equ	0xFEE
  4083                           fsr0h	equ	0xFEA
  4084                           fsr0l	equ	0xFE9
  4085                           wreg	equ	0xFE8
  4086                           indf1	equ	0xFE7
  4087                           postinc1	equ	0xFE6
  4088                           fsr1h	equ	0xFE2
  4089                           fsr1l	equ	0xFE1
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function _CanXmitResponse *****************
  4098 ;; Defined at:
  4099 ;;		line 173 in file "CanRX_Service.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		None
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4113 ;;      Params:         0       0       0       0
  4114 ;;      Locals:         0       0       0       0
  4115 ;;      Temps:          0       0       0       0
  4116 ;;      Totals:         0       0       0       0
  4117 ;;Total ram usage:        0 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_ISR
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text24
  4127  001080                     __ptext24:
  4128                           	opt stack 0
  4129  001080                     _CanXmitResponse:
  4130                           	opt stack 24
  4131                           
  4132                           ;CanRX_Service.c: 175: TXB0CONbits.TXREQ = 0;
  4133                           
  4134                           ;incstack = 0
  4135  001080  010F               	movlb	15	; () banked
  4136  001082  9740               	bcf	64,3,b	;volatile
  4137                           
  4138                           ; BSR set to: 15
  4139  001084  0012               	return		;funcret
  4140  001086                     __end_of_CanXmitResponse:
  4141                           	opt stack 0
  4142                           tosu	equ	0xFFF
  4143                           tosh	equ	0xFFE
  4144                           tosl	equ	0xFFD
  4145                           pclatu	equ	0xFFB
  4146                           pclath	equ	0xFFA
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           postinc0	equ	0xFEE
  4155                           fsr0h	equ	0xFEA
  4156                           fsr0l	equ	0xFE9
  4157                           wreg	equ	0xFE8
  4158                           indf1	equ	0xFE7
  4159                           postinc1	equ	0xFE6
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _CanRCVResponse *****************
  4170 ;; Defined at:
  4171 ;;		line 178 in file "CanRX_Service.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  2  131[None  ] int 
  4178 ;; Registers used:
  4179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4185 ;;      Params:         0       0       0       0
  4186 ;;      Locals:         0       0       0       0
  4187 ;;      Temps:          0       0       0       0
  4188 ;;      Totals:         0       0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    5
  4192 ;; This function calls:
  4193 ;;		_ProcessReceive
  4194 ;; This function is called by:
  4195 ;;		_ISR
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text25
  4200  001074                     __ptext25:
  4201                           	opt stack 0
  4202  001074                     _CanRCVResponse:
  4203                           	opt stack 19
  4204                           
  4205                           ;CanRX_Service.c: 180: if (RXB0CONbits.RXFUL == 1) {
  4206                           
  4207                           ; BSR set to: 15
  4208                           ;incstack = 0
  4209  001074  AE60               	btfss	3936,7,c	;volatile
  4210  001076  0012               	return	
  4211                           
  4212                           ;CanRX_Service.c: 181: ProcessReceive();
  4213  001078  ECFC  F006         	call	_ProcessReceive	;wreg free
  4214                           
  4215                           ;CanRX_Service.c: 182: RXB0CONbits.RXFUL = 0;
  4216  00107C  9E60               	bcf	3936,7,c	;volatile
  4217  00107E  0012               	return	
  4218  001080                     __end_of_CanRCVResponse:
  4219                           	opt stack 0
  4220                           tosu	equ	0xFFF
  4221                           tosh	equ	0xFFE
  4222                           tosl	equ	0xFFD
  4223                           pclatu	equ	0xFFB
  4224                           pclath	equ	0xFFA
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           postinc0	equ	0xFEE
  4233                           fsr0h	equ	0xFEA
  4234                           fsr0l	equ	0xFE9
  4235                           wreg	equ	0xFE8
  4236                           indf1	equ	0xFE7
  4237                           postinc1	equ	0xFE6
  4238                           fsr1h	equ	0xFE2
  4239                           fsr1l	equ	0xFE1
  4240                           indf2	equ	0xFDF
  4241                           postinc2	equ	0xFDE
  4242                           postdec2	equ	0xFDD
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function _ProcessReceive *****************
  4248 ;; Defined at:
  4249 ;;		line 298 in file "CanRX_Service.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;		None
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  Event2Post      3   32[COMRAM] struct ES_Event_t
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4263 ;;      Params:         0       0       0       0
  4264 ;;      Locals:         3       0       0       0
  4265 ;;      Temps:          0       0       0       0
  4266 ;;      Totals:         3       0       0       0
  4267 ;;Total ram usage:        3 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    4
  4270 ;; This function calls:
  4271 ;;		_PostCanRX_Service
  4272 ;; This function is called by:
  4273 ;;		_CanRCVResponse
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text26
  4278  000DF8                     __ptext26:
  4279                           	opt stack 0
  4280  000DF8                     _ProcessReceive:
  4281                           	opt stack 19
  4282                           
  4283                           ;CanRX_Service.c: 301: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && R
      +                          XB0EIDL == 0x01) {
  4284                           
  4285                           ;incstack = 0
  4286  000DF8  5061               	movf	3937,w,c	;volatile
  4287  000DFA  A4D8               	btfss	status,2,c
  4288  000DFC  0012               	return	
  4289  000DFE  0E18               	movlw	24
  4290  000E00  1862               	xorwf	3938,w,c	;volatile
  4291  000E02  A4D8               	btfss	status,2,c
  4292  000E04  0012               	return	
  4293  000E06  5063               	movf	3939,w,c	;volatile
  4294  000E08  A4D8               	btfss	status,2,c
  4295  000E0A  0012               	return	
  4296  000E0C  0464               	decf	3940,w,c	;volatile
  4297  000E0E  A4D8               	btfss	status,2,c
  4298  000E10  0012               	return	
  4299  000E12  D009               	goto	i2l2113
  4300  000E14                     i2l2103:
  4301                           
  4302                           ;CanRX_Service.c: 305: Event2Post.EventType = IDLE_EVENT;
  4303  000E14  0E05               	movlw	5
  4304  000E16  D005               	goto	L6
  4305  000E18                     i2l2105:
  4306                           
  4307                           ;CanRX_Service.c: 308: Event2Post.EventType = SPEAKING_EVENT;
  4308  000E18  0E06               	movlw	6
  4309  000E1A  D003               	goto	L6
  4310  000E1C                     i2l2107:
  4311                           
  4312                           ;CanRX_Service.c: 311: Event2Post.EventType = LOADING_EVENT;
  4313  000E1C  0E07               	movlw	7
  4314  000E1E  D001               	goto	L6
  4315  000E20                     i2l2109:
  4316                           
  4317                           ;CanRX_Service.c: 314: Event2Post.EventType = LISTENING_EVENT;
  4318  000E20  0E08               	movlw	8
  4319  000E22                     L6:
  4320  000E22  6E21               	movwf	ProcessReceive@Event2Post,c
  4321                           
  4322                           ;CanRX_Service.c: 316: }
  4323                           
  4324                           ;CanRX_Service.c: 315: break;
  4325  000E24  D00D               	goto	i2l2115
  4326  000E26                     i2l2113:
  4327  000E26  5066               	movf	3942,w,c	;volatile
  4328                           
  4329                           ; Switch size 1, requested type "space"
  4330                           ; Number of cases is 4, Range of values is 0 to 3
  4331                           ; switch strategies available:
  4332                           ; Name         Instructions Cycles
  4333                           ; simple_byte           13     7 (average)
  4334                           ;	Chosen strategy is simple_byte
  4335  000E28  0A00               	xorlw	0	; case 0
  4336  000E2A  B4D8               	btfsc	status,2,c
  4337  000E2C  D7F3               	goto	i2l2103
  4338  000E2E  0A01               	xorlw	1	; case 1
  4339  000E30  B4D8               	btfsc	status,2,c
  4340  000E32  D7F4               	goto	i2l2107
  4341  000E34  0A03               	xorlw	3	; case 2
  4342  000E36  B4D8               	btfsc	status,2,c
  4343  000E38  D7EF               	goto	i2l2105
  4344  000E3A  0A01               	xorlw	1	; case 3
  4345  000E3C  B4D8               	btfsc	status,2,c
  4346  000E3E  D7F0               	goto	i2l2109
  4347  000E40                     i2l2115:
  4348                           
  4349                           ;CanRX_Service.c: 317: PostCanRX_Service(Event2Post);
  4350  000E40  C021  F01E         	movff	ProcessReceive@Event2Post,PostCanRX_Service@ThisEvent
  4351  000E44  C022  F01F         	movff	ProcessReceive@Event2Post+1,PostCanRX_Service@ThisEvent+1
  4352  000E48  C023  F020         	movff	ProcessReceive@Event2Post+2,PostCanRX_Service@ThisEvent+2
  4353  000E4C  EC28  F008         	call	_PostCanRX_Service	;wreg free
  4354  000E50  0012               	return	
  4355  000E52                     __end_of_ProcessReceive:
  4356                           	opt stack 0
  4357                           tosu	equ	0xFFF
  4358                           tosh	equ	0xFFE
  4359                           tosl	equ	0xFFD
  4360                           pclatu	equ	0xFFB
  4361                           pclath	equ	0xFFA
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           intcon	equ	0xFF2
  4369                           postinc0	equ	0xFEE
  4370                           fsr0h	equ	0xFEA
  4371                           fsr0l	equ	0xFE9
  4372                           wreg	equ	0xFE8
  4373                           indf1	equ	0xFE7
  4374                           postinc1	equ	0xFE6
  4375                           fsr1h	equ	0xFE2
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _PostCanRX_Service *****************
  4385 ;; Defined at:
  4386 ;;		line 115 in file "CanRX_Service.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      unsigned char 
  4393 ;; Registers used:
  4394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4400 ;;      Params:         3       0       0       0
  4401 ;;      Locals:         0       0       0       0
  4402 ;;      Temps:          0       0       0       0
  4403 ;;      Totals:         3       0       0       0
  4404 ;;Total ram usage:        3 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    3
  4407 ;; This function calls:
  4408 ;;		i2_ES_PostToService
  4409 ;; This function is called by:
  4410 ;;		_ProcessReceive
  4411 ;;		_PostToList
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text27
  4416  001050                     __ptext27:
  4417                           	opt stack 0
  4418  001050                     _PostCanRX_Service:
  4419                           	opt stack 19
  4420                           
  4421                           ;CanRX_Service.c: 117: return ES_PostToService( MyPriority, ThisEvent);
  4422                           
  4423                           ;incstack = 0
  4424  001050  C01E  F018         	movff	PostCanRX_Service@ThisEvent,i2ES_PostToService@TheEvent
  4425  001054  C01F  F019         	movff	PostCanRX_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
  4426  001058  C020  F01A         	movff	PostCanRX_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
  4427  00105C  0100               	movlb	0	; () banked
  4428  00105E  518A               	movf	_MyPriority& (0+255),w,b
  4429  001060  EC95  F006         	call	i2_ES_PostToService
  4430  001064  0012               	return	
  4431  001066                     __end_of_PostCanRX_Service:
  4432                           	opt stack 0
  4433                           tosu	equ	0xFFF
  4434                           tosh	equ	0xFFE
  4435                           tosl	equ	0xFFD
  4436                           pclatu	equ	0xFFB
  4437                           pclath	equ	0xFFA
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           postinc0	equ	0xFEE
  4446                           fsr0h	equ	0xFEA
  4447                           fsr0l	equ	0xFE9
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           postinc1	equ	0xFE6
  4451                           fsr1h	equ	0xFE2
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function i2_ES_PostToService *****************
  4461 ;; Defined at:
  4462 ;;		line 351 in file "ES_Framework.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  WhichService    1    wreg     unsigned char 
  4465 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  WhichService    1   28[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      unsigned char 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4477 ;;      Params:         3       0       0       0
  4478 ;;      Locals:         1       0       0       0
  4479 ;;      Temps:          2       0       0       0
  4480 ;;      Totals:         6       0       0       0
  4481 ;;Total ram usage:        6 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    2
  4484 ;; This function calls:
  4485 ;;		i2_ES_EnQueueFIFO
  4486 ;; This function is called by:
  4487 ;;		_PostCanRX_Service
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text28
  4492  000D2A                     __ptext28:
  4493                           	opt stack 0
  4494  000D2A                     i2_ES_PostToService:
  4495                           	opt stack 19
  4496                           
  4497                           ;incstack = 0
  4498                           ;i2ES_PostToService@WhichService stored from wreg
  4499  000D2A  6E1D               	movwf	i2ES_PostToService@WhichService,c
  4500                           
  4501                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4502                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4503                           ;ES_Framework.c: 354: 1 )){
  4504  000D2C  501D               	movf	i2ES_PostToService@WhichService,w,c
  4505  000D2E  A4D8               	btfss	status,2,c
  4506  000D30  D02F               	goto	i2l1889
  4507  000D32  501D               	movf	i2ES_PostToService@WhichService,w,c
  4508  000D34  0D03               	mullw	3
  4509  000D36  0E54               	movlw	low _EventQueues
  4510  000D38  24F3               	addwf	prodl,w,c
  4511  000D3A  6EF6               	movwf	tblptrl,c
  4512  000D3C  0E03               	movlw	high _EventQueues
  4513  000D3E  20F4               	addwfc	prodh,w,c
  4514  000D40  6EF7               	movwf	tblptrh,c
  4515  000D42                     	if	0	;There are less than 3 active tblptr bytes
  4516  000D42                     	endif
  4517  000D42  0009               	tblrd		*+
  4518  000D44  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  4519  000D48  000A               	tblrd		*-
  4520  000D4A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  4521  000D4E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  4522  000D52  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  4523  000D56  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  4524  000D5A  ECA0  F004         	call	i2_ES_EnQueueFIFO	;wreg free
  4525  000D5E  06E8               	decf	wreg,f,c
  4526  000D60  A4D8               	btfss	status,2,c
  4527  000D62  D016               	goto	i2l1889
  4528                           
  4529                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4530  000D64  501D               	movf	i2ES_PostToService@WhichService,w,c
  4531  000D66  0D02               	mullw	2
  4532  000D68  0E01               	movlw	low _BitNum2SetMask
  4533  000D6A  24F3               	addwf	prodl,w,c
  4534  000D6C  6EF6               	movwf	tblptrl,c
  4535  000D6E  0E03               	movlw	high _BitNum2SetMask
  4536  000D70  20F4               	addwfc	prodh,w,c
  4537  000D72  6EF7               	movwf	tblptrh,c
  4538  000D74                     	if	0	;There are less than 3 active tblptr bytes
  4539  000D74                     	endif
  4540  000D74  0009               	tblrd		*+
  4541  000D76  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  4542  000D7A  0009               	tblrd		*+
  4543  000D7C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  4544  000D80  501B               	movf	??i2_ES_PostToService,w,c
  4545  000D82  0100               	movlb	0	; () banked
  4546  000D84  1385               	iorwf	_Ready& (0+255),f,b
  4547  000D86  501C               	movf	??i2_ES_PostToService+1,w,c
  4548  000D88  0100               	movlb	0	; () banked
  4549  000D8A  1386               	iorwf	(_Ready+1)& (0+255),f,b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;ES_Framework.c: 356: return 1;
  4553  000D8C  0E01               	movlw	1
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;ES_Framework.c: 357: } else
  4557                           
  4558                           ; BSR set to: 0
  4559  000D8E  0012               	return	
  4560  000D90                     i2l1889:
  4561                           
  4562                           ;ES_Framework.c: 358: return 0;
  4563  000D90  0E00               	movlw	0
  4564  000D92  0012               	return	
  4565  000D94                     __end_ofi2_ES_PostToService:
  4566                           	opt stack 0
  4567                           tosu	equ	0xFFF
  4568                           tosh	equ	0xFFE
  4569                           tosl	equ	0xFFD
  4570                           pclatu	equ	0xFFB
  4571                           pclath	equ	0xFFA
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           prodh	equ	0xFF4
  4577                           prodl	equ	0xFF3
  4578                           intcon	equ	0xFF2
  4579                           postinc0	equ	0xFEE
  4580                           fsr0h	equ	0xFEA
  4581                           fsr0l	equ	0xFE9
  4582                           wreg	equ	0xFE8
  4583                           indf1	equ	0xFE7
  4584                           postinc1	equ	0xFE6
  4585                           fsr1h	equ	0xFE2
  4586                           fsr1l	equ	0xFE1
  4587                           indf2	equ	0xFDF
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function i2_ES_EnQueueFIFO *****************
  4595 ;; Defined at:
  4596 ;;		line 85 in file "ES_Queue.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  4599 ;;		 -> Queue0(12), 
  4600 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  4603 ;;		 -> Queue0(12), 
  4604 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      unsigned char 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4614 ;;      Params:         5       0       0       0
  4615 ;;      Locals:         3       0       0       0
  4616 ;;      Temps:          3       0       0       0
  4617 ;;      Totals:        11       0       0       0
  4618 ;;Total ram usage:       11 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    1
  4621 ;; This function calls:
  4622 ;;		i2___awmod
  4623 ;;		i2___wmul
  4624 ;; This function is called by:
  4625 ;;		i2_ES_PostToService
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text29
  4630  000940                     __ptext29:
  4631                           	opt stack 0
  4632  000940                     i2_ES_EnQueueFIFO:
  4633                           	opt stack 19
  4634                           
  4635                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  4636                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  4637                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  4638                           
  4639                           ;incstack = 0
  4640  000940  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  4641  000944  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  4642                           
  4643                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  4644  000948  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4645  00094C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4646  000950  EE10 F002          	lfsr	1,2
  4647  000954  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4648  000956  26E1               	addwf	fsr1l,f,c
  4649  000958  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4650  00095A  22E2               	addwfc	fsr1h,f,c
  4651  00095C  50DE               	movf	postinc2,w,c
  4652  00095E  5CE6               	subwf	postinc1,w,c
  4653  000960  B0D8               	btfsc	status,0,c
  4654  000962  D046               	goto	i2l1833
  4655                           
  4656                           ;ES_Queue.c: 92: {
  4657                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4658  000964  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  4659  000968  9EF2               	bcf	intcon,7,c	;volatile
  4660                           
  4661                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  4662                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  4663  00096A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4664  00096E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4665  000972  50DF               	movf	indf2,w,c
  4666  000974  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  4667  000976  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  4668  000978  6E03               	movwf	i2___awmod@divisor,c
  4669  00097A  6A04               	clrf	i2___awmod@divisor+1,c
  4670  00097C  EE20 F002          	lfsr	2,2
  4671  000980  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4672  000982  26D9               	addwf	fsr2l,f,c
  4673  000984  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4674  000986  22DA               	addwfc	fsr2h,f,c
  4675  000988  50DF               	movf	indf2,w,c
  4676  00098A  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  4677  00098C  EE20 F001          	lfsr	2,1
  4678  000990  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4679  000992  26D9               	addwf	fsr2l,f,c
  4680  000994  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4681  000996  22DA               	addwfc	fsr2h,f,c
  4682  000998  50DF               	movf	indf2,w,c
  4683  00099A  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  4684  00099C  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  4685  00099E  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  4686  0009A0  6E01               	movwf	i2___awmod@dividend,c
  4687  0009A2  6A02               	clrf	i2___awmod@dividend+1,c
  4688  0009A4  3602               	rlcf	i2___awmod@dividend+1,f,c
  4689  0009A6  EC5D  F006         	call	i2___awmod	;wreg free
  4690  0009AA  0E01               	movlw	1
  4691  0009AC  2401               	addwf	?i2___awmod,w,c
  4692  0009AE  6E07               	movwf	i2___wmul@multiplier,c
  4693  0009B0  0E00               	movlw	0
  4694  0009B2  2002               	addwfc	?i2___awmod+1,w,c
  4695  0009B4  6E08               	movwf	i2___wmul@multiplier+1,c
  4696  0009B6  0E00               	movlw	0
  4697  0009B8  6E0A               	movwf	i2___wmul@multiplicand+1,c
  4698  0009BA  0E03               	movlw	3
  4699  0009BC  6E09               	movwf	i2___wmul@multiplicand,c
  4700  0009BE  ECEE  F007         	call	i2___wmul	;wreg free
  4701  0009C2  5007               	movf	?i2___wmul,w,c
  4702  0009C4  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  4703  0009C6  6ED9               	movwf	fsr2l,c
  4704  0009C8  5008               	movf	?i2___wmul+1,w,c
  4705  0009CA  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  4706  0009CC  6EDA               	movwf	fsr2h,c
  4707  0009CE  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  4708  0009D2  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  4709  0009D6  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  4710                           
  4711                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  4712  0009DA  EE20 F002          	lfsr	2,2
  4713  0009DE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4714  0009E0  26D9               	addwf	fsr2l,f,c
  4715  0009E2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4716  0009E4  22DA               	addwfc	fsr2h,f,c
  4717  0009E6  2ADF               	incf	indf2,f,c
  4718                           
  4719                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  4720  0009E8  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  4721                           
  4722                           ;ES_Queue.c: 101: return(1);
  4723  0009EC  0E01               	movlw	1
  4724                           
  4725                           ;ES_Queue.c: 102: }else
  4726  0009EE  0012               	return	
  4727  0009F0                     i2l1833:
  4728                           
  4729                           ;ES_Queue.c: 103: return(0);
  4730  0009F0  0E00               	movlw	0
  4731  0009F2  0012               	return	
  4732  0009F4                     __end_ofi2_ES_EnQueueFIFO:
  4733                           	opt stack 0
  4734                           tosu	equ	0xFFF
  4735                           tosh	equ	0xFFE
  4736                           tosl	equ	0xFFD
  4737                           pclatu	equ	0xFFB
  4738                           pclath	equ	0xFFA
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           postinc0	equ	0xFEE
  4747                           fsr0h	equ	0xFEA
  4748                           fsr0l	equ	0xFE9
  4749                           wreg	equ	0xFE8
  4750                           indf1	equ	0xFE7
  4751                           postinc1	equ	0xFE6
  4752                           fsr1h	equ	0xFE2
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function i2___wmul *****************
  4762 ;; Defined at:
  4763 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  multiplier      2    6[COMRAM] unsigned int 
  4766 ;;  multiplicand    2    8[COMRAM] unsigned int 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  __wmul          2   10[COMRAM] unsigned int 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  2    6[COMRAM] unsigned int 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0, prodl, prodh
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4778 ;;      Params:         4       0       0       0
  4779 ;;      Locals:         2       0       0       0
  4780 ;;      Temps:          0       0       0       0
  4781 ;;      Totals:         6       0       0       0
  4782 ;;Total ram usage:        6 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		i2_ES_EnQueueFIFO
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text30
  4792  000FDC                     __ptext30:
  4793                           	opt stack 0
  4794  000FDC                     i2___wmul:
  4795                           	opt stack 19
  4796                           
  4797                           ;incstack = 0
  4798  000FDC  5007               	movf	i2___wmul@multiplier,w,c
  4799  000FDE  0209               	mulwf	i2___wmul@multiplicand,c
  4800  000FE0  CFF3 F00B          	movff	prodl,i2___wmul@product
  4801  000FE4  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  4802  000FE8  5007               	movf	i2___wmul@multiplier,w,c
  4803  000FEA  020A               	mulwf	i2___wmul@multiplicand+1,c
  4804  000FEC  50F3               	movf	prodl,w,c
  4805  000FEE  260C               	addwf	i2___wmul@product+1,f,c
  4806  000FF0  5008               	movf	i2___wmul@multiplier+1,w,c
  4807  000FF2  0209               	mulwf	i2___wmul@multiplicand,c
  4808  000FF4  50F3               	movf	prodl,w,c
  4809  000FF6  260C               	addwf	i2___wmul@product+1,f,c
  4810  000FF8  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  4811  000FFC  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  4812  001000  0012               	return	
  4813  001002                     __end_ofi2___wmul:
  4814                           	opt stack 0
  4815                           tosu	equ	0xFFF
  4816                           tosh	equ	0xFFE
  4817                           tosl	equ	0xFFD
  4818                           pclatu	equ	0xFFB
  4819                           pclath	equ	0xFFA
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           fsr0h	equ	0xFEA
  4829                           fsr0l	equ	0xFE9
  4830                           wreg	equ	0xFE8
  4831                           indf1	equ	0xFE7
  4832                           postinc1	equ	0xFE6
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function i2___awmod *****************
  4843 ;; Defined at:
  4844 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  dividend        2    0[COMRAM] int 
  4847 ;;  divisor         2    2[COMRAM] int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  __awmod         1    5[COMRAM] unsigned char 
  4850 ;;  __awmod         1    4[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  2    0[COMRAM] int 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4860 ;;      Params:         4       0       0       0
  4861 ;;      Locals:         2       0       0       0
  4862 ;;      Temps:          0       0       0       0
  4863 ;;      Totals:         6       0       0       0
  4864 ;;Total ram usage:        6 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		i2_ES_EnQueueFIFO
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text31
  4874  000CBA                     __ptext31:
  4875                           	opt stack 0
  4876  000CBA                     i2___awmod:
  4877                           	opt stack 19
  4878                           
  4879                           ;incstack = 0
  4880  000CBA  0E00               	movlw	0
  4881  000CBC  6E06               	movwf	i2___awmod@sign,c
  4882  000CBE  AE02               	btfss	i2___awmod@dividend+1,7,c
  4883  000CC0  D006               	goto	i2l1747
  4884  000CC2  6C01               	negf	i2___awmod@dividend,c
  4885  000CC4  1E02               	comf	i2___awmod@dividend+1,f,c
  4886  000CC6  B0D8               	btfsc	status,0,c
  4887  000CC8  2A02               	incf	i2___awmod@dividend+1,f,c
  4888  000CCA  0E01               	movlw	1
  4889  000CCC  6E06               	movwf	i2___awmod@sign,c
  4890  000CCE                     i2l1747:
  4891  000CCE  AE04               	btfss	i2___awmod@divisor+1,7,c
  4892  000CD0  D004               	goto	i2l1751
  4893  000CD2  6C03               	negf	i2___awmod@divisor,c
  4894  000CD4  1E04               	comf	i2___awmod@divisor+1,f,c
  4895  000CD6  B0D8               	btfsc	status,0,c
  4896  000CD8  2A04               	incf	i2___awmod@divisor+1,f,c
  4897  000CDA                     i2l1751:
  4898  000CDA  5003               	movf	i2___awmod@divisor,w,c
  4899  000CDC  1004               	iorwf	i2___awmod@divisor+1,w,c
  4900  000CDE  B4D8               	btfsc	status,2,c
  4901  000CE0  D018               	goto	i2l1767
  4902  000CE2  0E01               	movlw	1
  4903  000CE4  6E05               	movwf	i2___awmod@counter,c
  4904  000CE6  D004               	goto	i2l1757
  4905  000CE8                     i2l1755:
  4906  000CE8  90D8               	bcf	status,0,c
  4907  000CEA  3603               	rlcf	i2___awmod@divisor,f,c
  4908  000CEC  3604               	rlcf	i2___awmod@divisor+1,f,c
  4909  000CEE  2A05               	incf	i2___awmod@counter,f,c
  4910  000CF0                     i2l1757:
  4911  000CF0  AE04               	btfss	i2___awmod@divisor+1,7,c
  4912  000CF2  D7FA               	goto	i2l1755
  4913  000CF4                     i2l1759:
  4914  000CF4  5003               	movf	i2___awmod@divisor,w,c
  4915  000CF6  5C01               	subwf	i2___awmod@dividend,w,c
  4916  000CF8  5004               	movf	i2___awmod@divisor+1,w,c
  4917  000CFA  5802               	subwfb	i2___awmod@dividend+1,w,c
  4918  000CFC  A0D8               	btfss	status,0,c
  4919  000CFE  D004               	goto	i2l1763
  4920  000D00  5003               	movf	i2___awmod@divisor,w,c
  4921  000D02  5E01               	subwf	i2___awmod@dividend,f,c
  4922  000D04  5004               	movf	i2___awmod@divisor+1,w,c
  4923  000D06  5A02               	subwfb	i2___awmod@dividend+1,f,c
  4924  000D08                     i2l1763:
  4925  000D08  90D8               	bcf	status,0,c
  4926  000D0A  3204               	rrcf	i2___awmod@divisor+1,f,c
  4927  000D0C  3203               	rrcf	i2___awmod@divisor,f,c
  4928  000D0E  2E05               	decfsz	i2___awmod@counter,f,c
  4929  000D10  D7F1               	goto	i2l1759
  4930  000D12                     i2l1767:
  4931  000D12  5006               	movf	i2___awmod@sign,w,c
  4932  000D14  B4D8               	btfsc	status,2,c
  4933  000D16  D004               	goto	i2l1771
  4934  000D18  6C01               	negf	i2___awmod@dividend,c
  4935  000D1A  1E02               	comf	i2___awmod@dividend+1,f,c
  4936  000D1C  B0D8               	btfsc	status,0,c
  4937  000D1E  2A02               	incf	i2___awmod@dividend+1,f,c
  4938  000D20                     i2l1771:
  4939  000D20  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4940  000D24  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4941  000D28  0012               	return	
  4942  000D2A                     __end_ofi2___awmod:
  4943                           	opt stack 0
  4944                           tosu	equ	0xFFF
  4945                           tosh	equ	0xFFE
  4946                           tosl	equ	0xFFD
  4947                           pclatu	equ	0xFFB
  4948                           pclath	equ	0xFFA
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           postinc1	equ	0xFE6
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _CanErrorResponse *****************
  4972 ;; Defined at:
  4973 ;;		line 187 in file "CanRX_Service.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  1    wreg      void 
  4980 ;; Registers used:
  4981 ;;		None
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4987 ;;      Params:         0       0       0       0
  4988 ;;      Locals:         0       0       0       0
  4989 ;;      Temps:          0       0       0       0
  4990 ;;      Totals:         0       0       0       0
  4991 ;;Total ram usage:        0 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_ISR
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text32
  5001  00108C                     __ptext32:
  5002                           	opt stack 0
  5003  00108C                     _CanErrorResponse:
  5004                           	opt stack 24
  5005                           
  5006                           ;incstack = 0
  5007  00108C  0012               	return		;funcret
  5008  00108E                     __end_of_CanErrorResponse:
  5009                           	opt stack 0
  5010                           tosu	equ	0xFFF
  5011                           tosh	equ	0xFFE
  5012                           tosl	equ	0xFFD
  5013                           pclatu	equ	0xFFB
  5014                           pclath	equ	0xFFA
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           fsr0h	equ	0xFEA
  5024                           fsr0l	equ	0xFE9
  5025                           wreg	equ	0xFE8
  5026                           indf1	equ	0xFE7
  5027                           postinc1	equ	0xFE6
  5028                           fsr1h	equ	0xFE2
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           fsr2h	equ	0xFDA
  5034                           fsr2l	equ	0xFD9
  5035                           status	equ	0xFD8
  5036                           
  5037 ;; *************** function _BusErrorResponse *****************
  5038 ;; Defined at:
  5039 ;;		line 192 in file "CanRX_Service.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		None
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5053 ;;      Params:         0       0       0       0
  5054 ;;      Locals:         0       0       0       0
  5055 ;;      Temps:          0       0       0       0
  5056 ;;      Totals:         0       0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_ISR
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text33
  5067  00108E                     __ptext33:
  5068                           	opt stack 0
  5069  00108E                     _BusErrorResponse:
  5070                           	opt stack 24
  5071                           
  5072                           ;incstack = 0
  5073  00108E  0012               	return		;funcret
  5074  001090                     __end_of_BusErrorResponse:
  5075                           	opt stack 0
  5076                           tosu	equ	0xFFF
  5077                           tosh	equ	0xFFE
  5078                           tosl	equ	0xFFD
  5079                           pclatu	equ	0xFFB
  5080                           pclath	equ	0xFFA
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           postinc0	equ	0xFEE
  5089                           fsr0h	equ	0xFEA
  5090                           fsr0l	equ	0xFE9
  5091                           wreg	equ	0xFE8
  5092                           indf1	equ	0xFE7
  5093                           postinc1	equ	0xFE6
  5094                           fsr1h	equ	0xFE2
  5095                           fsr1l	equ	0xFE1
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           tosu	equ	0xFFF
  5103                           tosh	equ	0xFFE
  5104                           tosl	equ	0xFFD
  5105                           pclatu	equ	0xFFB
  5106                           pclath	equ	0xFFA
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           fsr0h	equ	0xFEA
  5116                           fsr0l	equ	0xFE9
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           postinc1	equ	0xFE6
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           fsr2h	equ	0xFDA
  5126                           fsr2l	equ	0xFD9
  5127                           status	equ	0xFD8
  5128                           
  5129                           	psect	text34
  5130  000000                     __ptext34:
  5131                           	opt stack 0
  5132                           tosu	equ	0xFFF
  5133                           tosh	equ	0xFFE
  5134                           tosl	equ	0xFFD
  5135                           pclatu	equ	0xFFB
  5136                           pclath	equ	0xFFA
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           intcon	equ	0xFF2
  5144                           postinc0	equ	0xFEE
  5145                           fsr0h	equ	0xFEA
  5146                           fsr0l	equ	0xFE9
  5147                           wreg	equ	0xFE8
  5148                           indf1	equ	0xFE7
  5149                           postinc1	equ	0xFE6
  5150                           fsr1h	equ	0xFE2
  5151                           fsr1l	equ	0xFE1
  5152                           indf2	equ	0xFDF
  5153                           postinc2	equ	0xFDE
  5154                           postdec2	equ	0xFDD
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159                           	psect	rparam
  5160  0000                     tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           pclatu	equ	0xFFB
  5164                           pclath	equ	0xFFA
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           postinc0	equ	0xFEE
  5173                           fsr0h	equ	0xFEA
  5174                           fsr0l	equ	0xFE9
  5175                           wreg	equ	0xFE8
  5176                           indf1	equ	0xFE7
  5177                           postinc1	equ	0xFE6
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187                           	psect	temp
  5188  000048                     btemp:
  5189                           	opt stack 0
  5190  000048                     	ds	1
  5191  0000                     int$flags	set	btemp
  5192                           tosu	equ	0xFFF
  5193                           tosh	equ	0xFFE
  5194                           tosl	equ	0xFFD
  5195                           pclatu	equ	0xFFB
  5196                           pclath	equ	0xFFA
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           postinc1	equ	0xFE6
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      71
    BANK0           160     37      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCanRX_Service(), 

    S99$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    S78$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    S78$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ProcessReceive
    _ProcessReceive->_PostCanRX_Service
    _PostCanRX_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Initialize
    _ES_Run->_ES_DeQueue
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_ES_GetMSBitSet
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCanRX_Service
    _InitCanRX_Service->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6835
                                             36 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    3158
                                             22 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunCanRX_Service *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0     333
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0     333
                                             10 BANK0      4     4      0
                     _ES_GetMSBitSet
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _RunCanRX_Service                                     6     3      3      98
                                              0 BANK0      6     3      3
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2237
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    3281
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitCanRX_Service *
 ---------------------------------------------------------------------------------
 (2) _InitCanRX_Service                                    4     4      0    2562
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _ES_PostToService                                     6     3      3    2517
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (4) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     947
                                             35 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (7) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CanRCVResponse                                       0     0      0     947
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (8) _ProcessReceive                                       3     3      0     947
                                             32 COMRAM     3     3      0
                  _PostCanRX_Service
 ---------------------------------------------------------------------------------
 (9) _PostCanRX_Service                                    3     0      3     921
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (10) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (11) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCanRX_Service *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCanRX_Service *
       _InitCanHardware
       _InitPins
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         _ES_GetMSBitSet
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ProcessReceive
       _PostCanRX_Service
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     25      54       4       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      47       1       75.5%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B       9        0.0%
DATA                 0      0      9B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec  9 22:05:38 2016

                   ??__HW_Timer_Init 0091                  ES_CheckUserEvents@i 008F  
                __HW_Timer_Init@Rate 008F                  ___wmul@multiplicand 0097  
          __size_of_BusErrorResponse 0002                          __CFG_OSC$HS 000000  
                                l405 0DA0                                  l406 0DA6  
                                l407 0DAE                                  l408 0DB8  
                                l425 0BCA                                  l428 0C26  
                                l299 0BC4                __end_of_ES_Initialize 06BE  
                                _GIE 007F97                                  _ISR 0008  
                                u964 0A26                                  u965 0A1E  
                       ___awmod@sign 0094              __end_of_Check4Keystroke 108A  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00A3  
            ES_EnQueueFIFO@Event2Add 009D                    ?_ES_PostToService 00A6  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 0080  
                               l2121 05E4                                 l2025 0494  
                               l2035 04D8                                 l2141 06B4  
                               l2133 0636                                 l2029 04B0  
                               l2053 103C                                 l2129 0632  
                               l2145 06BA                                 l2081 0D96  
                               l2057 1044                                 l2161 05B6  
                               l2075 0FB2                                 l2155 0562  
                               l2085 0DC2                                 l2165 05CC  
                               l2149 04E0                                 l2181 0F60  
                               l2087 0DE4                                 l2183 0F68  
                               l1801 0AEA                                 l2371 0B9A  
                               l1813 0B30                                 l1805 0B0E  
                               l2365 0B64                                 l2367 0B76  
                               l2375 0BAC                                 l1809 0B1C  
                               l1905 0CB6                                 l2369 0B88  
                               l1853 0A92                                 l1839 0A00  
                               l1919 07B4                                 l1793 0AC4  
                               l1873 079C                                 l1849 0A8C  
                               l1929 0830                                 l1797 0AD8  
                               l1789 0AB4                                 l1981 0EAC  
                               l1799 0AE4                                 l1989 0ED4  
                               STR_1 035B                                 STR_2 0376  
                               STR_3 038E                                 STR_4 03A5  
                               u1118 0E78                                 u1119 0E90  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1258 068E                                 u1259 06AA  
                               u1298 058C                                 u1299 05A4  
                               _PIE1 000F9D                                 _PEIE 007F96  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 00A9  
                               _main 0B3A                          ?_ES_DeQueue 009B  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0048                        main@ErrorType 00B3  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
                   _RunCanRX_Service 0D94              __end_of_InitCanHardware 0C42  
                              ??_ISR 0024                   ES_Run@HighestPrior 00A9  
                              ?_main 0001                __end_of_ES_Timer_Init 1074  
                    __end_of___awmod 0B3A                      __end_of___lbmod 0EE0  
                              _T1CON 000FCD                           _DistList00 0359  
                              _LATA0 007C48                                _LATA1 007C49  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _ERRIE 007D1D                                _ERRIF 007D25  
                              i2l160 0904                                _IRXIE 007D1F  
                              _IRXIF 007D27                                _PORTA 000F80  
                              _PORTB 000F81                                _TRISA 000F92  
                      __CFG_PWRT$OFF 000000                                _Ready 0085  
                              _putch 108A                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                   __end_ofi2___wmul 1002                                status 000FD8  
                 __size_ofi2___awmod 0070           PostCanRX_Service@ThisEvent 001E  
                    __initialization 0FB6               ES_GetMSBitSet@LoopCntr 0098  
          RunCanRX_Service@ThisEvent 008F           __end_of_ES_CheckUserEvents 0E9C  
                       __end_of_main 0BC6                    ES_Timer_Init@Rate 0091  
                   __end_of_InitPins 103A                  __end_of_EventQueues 0357  
                             ??_main 00B3                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002                  __size_of_ES_DeQueue 0128  
                    _Nybble2MSBitNum 0341          RunCanRX_Service@ReturnEvent 0092  
   __end_of__HW_Process_Pending_Ints 1050             ProcessReceive@Event2Post 0021  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
                  ?_CanErrorResponse 0001                               _ADCON1 000FC1  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                               _CIOCON 000F73  
                         _MyPriority 008A                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0091                               i2l2103 0E14  
                             i2l2105 0E18                               i2l2113 0E26  
                             i2l2107 0E1C                               i2l2115 0E40  
                             i2l2109 0E20                               i2l2281 08F0  
                             i2l2275 08E6                               i2l2269 08DC  
                             i2l1751 0CDA                               i2l2287 08FA  
                             i2l1833 09F0                               i2l1771 0D20  
                             i2l1763 0D08                               i2l1755 0CE8  
                             i2l1747 0CCE                               i2l1757 0CF0  
                             i2l1759 0CF4                               i2l1767 0D12  
                             i2l1889 0D90                               _INTCON 000FF2  
                             _RXB0D0 000F66                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 04DE  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0024                     ??_ES_EnQueueFIFO 00A0  
                     _Timer2PostFunc 0321                               _Queue0 003C  
                     _SysTickCounter 0038                               ___wmul 0F1C  
                          ??___awmod 0093                            ??___lbmod 0090  
                   ?_InitCanHardware 0001                               clear_0 0FBC  
                             clear_1 0FC8                     _BusErrorResponse 108E  
                    ___awmod@divisor 0091                      ___awmod@counter 0093  
                             _printf 0F52                          ISR@LastTime 0034  
             ES_InitQueue@pThisQueue 0092                    __end_ofi2___awmod 0D2A  
                       __mediumconst 0000                          ISR@NextTime 0036  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 00DC  
               ES_DeQueue@pThisQueue 00A3              ES_GetMSBitSet@Val2Check 008F  
          InitCanRX_Service@Priority 00AF                      ___lbmod@divisor 008F  
                         __accesstop 0060              __end_of__initialization 0FCE  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0091  
                    __CFG_PBADEN$OFF 000000                        ___rparam_used 000001  
                        _EventQueues 0354          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                        ?_ES_InitQueue 008F  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 108C  
                    _TMR_ActiveFlags 0087                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 0096              __size_of_ProcessReceive 005A  
                     _TMR_TimerArray 0060             __end_of_RunCanRX_Service 0DF8  
           ES_EnQueueFIFO@pThisQueue 00A4                              ??_putch 008F  
           __HW_Process_Pending_Ints 103A                           __pbssBANK0 0060  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 009F            __size_of_ES_PostToService 0078  
                     ??_ES_InitQueue 0092                              ?___wmul 0095  
                            _CCP1CON 000FBD                              _ECANCON 000F77  
                            ?_printf 008F                           ??i2___wmul 000B  
                 __end_of_ES_DeQueue 04DE               i2ES_EnQueueFIFO@pBlock 000D  
                         ??_InitPins 008F                      __size_of_ES_Run 00F4  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
          i2ES_EnQueueFIFO@Event2Add 000F                              ___awmod 0A98  
                            ___lbmod 0E9C                      __size_of___wmul 0036  
                       __psmallconst 0300           i2ES_PostToService@TheEvent 0018  
                            __pcinit 0FB6                              __ramtop 0300  
                            __ptext0 0B3A                              __ptext1 0F52  
                            __ptext2 108A                              __ptext3 04DE  
                            __ptext4 103A                              __ptext5 07A0  
                            __ptext6 09F4                              __ptext7 0D94  
                            __ptext8 1020                              __ptext9 0BC6  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
                       __size_of_ISR 0938              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 008F                   _ES_CheckUserEvents 0E52  
                    ES_Run@ThisEvent 008C                       __pintcode_body 087C  
               end_of_initialization 0FCE                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 1090            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 087C  
                i2___wmul@multiplier 0007         ES_PostToService@WhichService 00AB  
             __size_of_ES_Timer_Init 000E            __size_of_CanErrorResponse 0002  
                            printf@c 0093                              printf@f 008F  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
         InitCanRX_Service@ThisEvent 00AC                 ??_ES_CheckUserEvents 008F  
                      _ES_Initialize 05D2                       _ProcessReceive 0DF8  
                   ___lbmod@dividend 0090                            _TRISBbits 000F93  
               __end_of_ES_EventList 0359                 __end_of_ES_InitQueue 0F1C  
                          i2___awmod 0CBA                       ES_Initialize@i 00B2  
                        ___lbmod@rem 0092             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 05D2                   __end_of_DistList00 035B  
                   _ES_PostToService 0C42                 __end_of_ServDescList 0354  
                     __end_of___wmul 0F52                    ??_CanXmitResponse 0001  
             __end_of_ProcessReceive 0E52                       ?_ES_Initialize 00B0  
         ??__HW_Process_Pending_Ints 009D                        _ES_Timer_Init 1066  
                   i2___wmul@product 000B                       __end_of_printf 0F86  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 087C  
                start_initialization 0FB6                          __end_of_ISR 0940  
                  __size_ofi2___wmul 0026                           ?i2___awmod 0001  
                  ?_RunCanRX_Service 008F                          _CANSTATbits 000F6E  
                           ??_ES_Run 00A5                   ??_RunCanRX_Service 0092  
                          _TickCount 008B           __end_ofi2_ES_PostToService 0D94  
                  __size_of_InitPins 001A              __size_of_ES_GetMSBitSet 00A4  
                           ??___wmul 0099              __size_of_CanRCVResponse 000C  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 0091  
                     ?_ES_Timer_Init 0091                      ?_ProcessReceive 0001  
                     __HW_Timer_Init 1002                          __pbssCOMRAM 0034  
                      __pcstackBANK0 008F                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 008F  
                        _BRGCON3bits 000F72                    _PostCanRX_Service 1050  
                 ?_PostCanRX_Service 001E                     i2_ES_EnQueueFIFO 0940  
                      __PRIMASK_temp 003A                     _CanErrorResponse 108C  
                ??_PostCanRX_Service 0021                    ??_Check4Keystroke 008F  
                          __pintcode 0008                             ?___awmod 008F  
                           ?___lbmod 008F                      ??_ES_Initialize 00B2  
           ES_PostToService@TheEvent 00A6               __end_of__HW_Timer_Init 1020  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
          __end_of_PostCanRX_Service 1066                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00B0  
                  ??_InitCanHardware 008F            ES_GetMSBitSet@Nybble2Test 0097  
                  ?_BusErrorResponse 0001                       ___wmul@product 0099  
                 ??_BusErrorResponse 0001                             _RXB0EIDH 000F63  
                           _RXB0EIDL 000F64                             _RXB0SIDH 000F61  
                           _RXB0SIDL 000F62                             _RXF0EIDH 000F02  
                           _RXF0EIDL 000F03                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _RXM0EIDH 000F1A                             _RXM0EIDL 000F1B  
                       _ES_InitQueue 0EE0                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 0093  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 008F  
                  ___wmul@multiplier 0095                             i2___wmul 0FDC  
                 ES_DeQueue@SaveCrit 00A1                 ES_EnQueueFIFO@pBlock 009B  
           __end_of_ES_PostToService 0CBA                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 1020                      _CanXmitResponse 1080  
                           __Hrparam 0000                       _ES_GetMSBitSet 09F4  
                           __Lrparam 0000                    _InitCanRX_Service 0F86  
                   __size_of___awmod 00A2                     __size_of___lbmod 0044  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 1074                       _ES_EnQueueFIFO 06BE  
                 ?_InitCanRX_Service 0001                  ??_InitCanRX_Service 00AC  
         __size_of_PostCanRX_Service 0016               __end_of_BitNum2SetMask 0321  
                           __ptext10 03B6                             __ptext11 0E9C  
                           __ptext20 1066                             __ptext12 0E52  
                           __ptext21 1002                             __ptext13 1086  
                           __ptext30 0FDC                             __ptext22 0EE0  
                           __ptext14 05D2                             __ptext31 0CBA  
                           __ptext15 0F86                             __ptext32 108C  
                           __ptext24 1080                             __ptext16 0C42  
                           __ptext33 108E                             __ptext25 1074  
                           __ptext17 06BE                             __ptext34 0000  
                           __ptext26 0DF8                             __ptext18 0F1C  
                           __ptext27 1050                             __ptext19 0A98  
                           __ptext28 0D2A                             __ptext29 0940  
  ES_Timer_Tick_Resp@NeedsProcessing 0083                        __size_of_main 008C  
                 _ES_Timer_Tick_Resp 07A0               __end_of_ES_GetMSBitSet 0A98  
          __end_of_InitCanRX_Service 0FB6                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 1080               __end_of_ES_EnQueueFIFO 07A0  
                   ??_ProcessReceive 0021                             int$flags 0048  
          __size_of_RunCanRX_Service 0064                    ES_DeQueue@NumLeft 00A2  
                 i2_ES_PostToService 0D2A             __end_ofi2_ES_EnQueueFIFO 09F4  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 108E  
                ?i2_ES_PostToService 0018                 ??_ES_Timer_Tick_Resp 0099  
            __end_of_CanXmitResponse 1086                      _Check4Keystroke 1086  
                           intlevel2 0000                           _ES_DeQueue 03B6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 008F  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 0089  
                           printf@ap 0091                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 009B                     ES_DeQueue@pBlock 009B  
                    _InitCanHardware 0BC6               ES_DeQueue@pReturnEvent 009D  
              ES_InitQueue@BlockSize 0091           __size_of_InitCanRX_Service 0030  
