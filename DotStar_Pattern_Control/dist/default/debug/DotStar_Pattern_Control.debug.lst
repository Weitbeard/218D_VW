

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Oct 31 22:41:03 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001806                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _MaxBrightness
    81  001806  1F                 	db	31
    82                           
    83                           	psect	idataBANK0
    84  0017FA                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _PatternConfigs
    88  0017FA  00                 	db	0
    89  0017FB  FF                 	db	255
    90  0017FC  1F                 	db	31
    91  0017FD  00                 	db	0
    92  0017FE  64                 	db	100
    93                           
    94                           	psect	idataBANK1
    95  0015CA                     __pidataBANK1:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _GenColors
    99  0015CA  0000               	dw	0
   100  0015CC  00FF               	dw	255
   101  0015CE  A500               	dw	42240
   102  0015D0  00FF               	dw	255
   103  0015D2  FF00               	dw	65280
   104  0015D4  00FF               	dw	255
   105  0015D6  8000               	dw	32768
   106  0015D8  0080               	dw	128
   107  0015DA  FF00               	dw	65280
   108  0015DC  0000               	dw	0
   109  0015DE  8000               	dw	32768
   110  0015E0  0000               	dw	0
   111  0015E2  FFFF               	dw	65535
   112  0015E4  0000               	dw	0
   113  0015E6  8080               	dw	32896
   114  0015E8  0000               	dw	0
   115  0015EA  00FF               	dw	255
   116  0015EC  0000               	dw	0
   117  0015EE  0080               	dw	128
   118  0015F0  0000               	dw	0
   119  0015F2  00FF               	dw	255
   120  0015F4  00FF               	dw	255
   121  0015F6  0080               	dw	128
   122  0015F8  0080               	dw	128
   123  0015FA  0000               	dw	0
   124  0015FC  0080               	dw	128
   125                           
   126                           	psect	smallconst
   127  000300                     __psmallconst:
   128                           	opt stack 0
   129  000300  00                 	db	0
   130  000301                     _BitNum2SetMask:
   131                           	opt stack 0
   132  000301  0001               	dw	1
   133  000303  0002               	dw	2
   134  000305  0004               	dw	4
   135  000307  0008               	dw	8
   136  000309  0010               	dw	16
   137  00030B  0020               	dw	32
   138  00030D  0040               	dw	64
   139  00030F  0080               	dw	128
   140  000311  0100               	dw	256
   141  000313  0200               	dw	512
   142  000315  0400               	dw	1024
   143  000317  0800               	dw	2048
   144  000319  1000               	dw	4096
   145  00031B  2000               	dw	8192
   146  00031D  4000               	dw	16384
   147  00031F  8000               	dw	32768
   148  000321                     __end_of_BitNum2SetMask:
   149                           	opt stack 0
   150  000321                     _Timer2PostFunc:
   151                           	opt stack 0
   152  000321  7C                 	db	low _PostPatternControlService
   153  000322  17                 	db	high _PostPatternControlService
   154  000323  2E                 	db	low _PostSPI32ControlService
   155  000324  17                 	db	high _PostSPI32ControlService
   156  000325  00                 	db	0
   157  000326  00                 	db	0
   158  000327  00                 	db	0
   159  000328  00                 	db	0
   160  000329  00                 	db	0
   161  00032A  00                 	db	0
   162  00032B  00                 	db	0
   163  00032C  00                 	db	0
   164  00032D  00                 	db	0
   165  00032E  00                 	db	0
   166  00032F  00                 	db	0
   167  000330  00                 	db	0
   168  000331  00                 	db	0
   169  000332  00                 	db	0
   170  000333  00                 	db	0
   171  000334  00                 	db	0
   172  000335  00                 	db	0
   173  000336  00                 	db	0
   174  000337  00                 	db	0
   175  000338  00                 	db	0
   176  000339  00                 	db	0
   177  00033A  00                 	db	0
   178  00033B  00                 	db	0
   179  00033C  00                 	db	0
   180  00033D  00                 	db	0
   181  00033E  00                 	db	0
   182  00033F  00                 	db	0
   183  000340  00                 	db	0
   184  000341                     __end_of_Timer2PostFunc:
   185                           	opt stack 0
   186  000341                     _Nybble2MSBitNum:
   187                           	opt stack 0
   188  000341  00                 	db	0
   189  000342  01                 	db	1
   190  000343  01                 	db	1
   191  000344  02                 	db	2
   192  000345  02                 	db	2
   193  000346  02                 	db	2
   194  000347  02                 	db	2
   195  000348  03                 	db	3
   196  000349  03                 	db	3
   197  00034A  03                 	db	3
   198  00034B  03                 	db	3
   199  00034C  03                 	db	3
   200  00034D  03                 	db	3
   201  00034E  03                 	db	3
   202  00034F  03                 	db	3
   203  000350                     __end_of_Nybble2MSBitNum:
   204                           	opt stack 0
   205  000350                     _ServDescList:
   206                           	opt stack 0
   207  000350  64                 	db	low _InitPatternControlService
   208  000351  13                 	db	high _InitPatternControlService
   209  000352  02                 	db	low _RunPatternControlService
   210  000353  0C                 	db	high _RunPatternControlService
   211  000354  5A                 	db	low _InitSPI32ControlService
   212  000355  15                 	db	high _InitSPI32ControlService
   213  000356  74                 	db	low _RunSPI32ControlService
   214  000357  07                 	db	high _RunSPI32ControlService
   215  000358                     __end_of_ServDescList:
   216                           	opt stack 0
   217  000358                     _EventQueues:
   218                           	opt stack 0
   219  000358  A0                 	db	low _Queue0
   220  000359  00                 	db	high _Queue0
   221  00035A  04                 	db	4
   222  00035B  AC                 	db	low _Queue1
   223  00035C  00                 	db	high _Queue1
   224  00035D  04                 	db	4
   225  00035E                     __end_of_EventQueues:
   226                           	opt stack 0
   227  00035E                     _ES_EventList:
   228                           	opt stack 0
   229  00035E  00                 	db	low _Check4Keystroke
   230  00035F  18                 	db	high _Check4Keystroke
   231  000360                     __end_of_ES_EventList:
   232                           	opt stack 0
   233  000360                     _DistList00:
   234                           	opt stack 0
   235  000360  7C                 	db	low _PostPatternControlService
   236  000361  17                 	db	high _PostPatternControlService
   237  000362  2E                 	db	low _PostSPI32ControlService
   238  000363  17                 	db	high _PostSPI32ControlService
   239  000364                     __end_of_DistList00:
   240                           	opt stack 0
   241  0000                     _ADCON1	set	4033
   242  0000                     _CCP1CON	set	4029
   243  0000                     _CCPR1H	set	4031
   244  0000                     _CCPR1L	set	4030
   245  0000                     _INTCON	set	4082
   246  0000                     _LATC	set	3979
   247  0000                     _PIE1	set	3997
   248  0000                     _PORTC	set	3970
   249  0000                     _SSPADD	set	4040
   250  0000                     _SSPBUF	set	4041
   251  0000                     _SSPCON1	set	4038
   252  0000                     _SSPSTAT	set	4039
   253  0000                     _T1CON	set	4045
   254  0000                     _TRISC	set	3988
   255  0000                     _CCP1IF	set	31986
   256  0000                     _GIE	set	32663
   257  0000                     _IRCF0	set	32412
   258  0000                     _IRCF1	set	32413
   259  0000                     _IRCF2	set	32414
   260  0000                     _SSPIE	set	31979
   261  0000                     _SSPIF	set	31987
   262  000364                     STR_1:
   263  000364  46                 	db	70	;'F'
   264  000365  61                 	db	97	;'a'
   265  000366  69                 	db	105	;'i'
   266  000367  6C                 	db	108	;'l'
   267  000368  65                 	db	101	;'e'
   268  000369  64                 	db	100	;'d'
   269  00036A  20                 	db	32
   270  00036B  6F                 	db	111	;'o'
   271  00036C  6E                 	db	110	;'n'
   272  00036D  20                 	db	32
   273  00036E  61                 	db	97	;'a'
   274  00036F  74                 	db	116	;'t'
   275  000370  74                 	db	116	;'t'
   276  000371  65                 	db	101	;'e'
   277  000372  6D                 	db	109	;'m'
   278  000373  70                 	db	112	;'p'
   279  000374  74                 	db	116	;'t'
   280  000375  20                 	db	32
   281  000376  74                 	db	116	;'t'
   282  000377  6F                 	db	111	;'o'
   283  000378  20                 	db	32
   284  000379  50                 	db	80	;'P'
   285  00037A  6F                 	db	111	;'o'
   286  00037B  73                 	db	115	;'s'
   287  00037C  74                 	db	116	;'t'
   288  00037D  0A                 	db	10
   289  00037E  00                 	db	0
   290  00037F                     STR_2:
   291  00037F  46                 	db	70	;'F'
   292  000380  61                 	db	97	;'a'
   293  000381  69                 	db	105	;'i'
   294  000382  6C                 	db	108	;'l'
   295  000383  65                 	db	101	;'e'
   296  000384  64                 	db	100	;'d'
   297  000385  20                 	db	32
   298  000386  6F                 	db	111	;'o'
   299  000387  6E                 	db	110	;'n'
   300  000388  20                 	db	32
   301  000389  4E                 	db	78	;'N'
   302  00038A  55                 	db	85	;'U'
   303  00038B  4C                 	db	76	;'L'
   304  00038C  4C                 	db	76	;'L'
   305  00038D  20                 	db	32
   306  00038E  70                 	db	112	;'p'
   307  00038F  6F                 	db	111	;'o'
   308  000390  69                 	db	105	;'i'
   309  000391  6E                 	db	110	;'n'
   310  000392  74                 	db	116	;'t'
   311  000393  65                 	db	101	;'e'
   312  000394  72                 	db	114	;'r'
   313  000395  0A                 	db	10
   314  000396  00                 	db	0
   315  000397                     STR_3:
   316  000397  46                 	db	70	;'F'
   317  000398  61                 	db	97	;'a'
   318  000399  69                 	db	105	;'i'
   319  00039A  6C                 	db	108	;'l'
   320  00039B  65                 	db	101	;'e'
   321  00039C  64                 	db	100	;'d'
   322  00039D  20                 	db	32
   323  00039E  49                 	db	73	;'I'
   324  00039F  6E                 	db	110	;'n'
   325  0003A0  69                 	db	105	;'i'
   326  0003A1  74                 	db	116	;'t'
   327  0003A2  69                 	db	105	;'i'
   328  0003A3  61                 	db	97	;'a'
   329  0003A4  6C                 	db	108	;'l'
   330  0003A5  69                 	db	105	;'i'
   331  0003A6  7A                 	db	122	;'z'
   332  0003A7  61                 	db	97	;'a'
   333  0003A8  74                 	db	116	;'t'
   334  0003A9  69                 	db	105	;'i'
   335  0003AA  6F                 	db	111	;'o'
   336  0003AB  6E                 	db	110	;'n'
   337  0003AC  0A                 	db	10
   338  0003AD  00                 	db	0
   339  0003AE                     STR_4:
   340  0003AE  4F                 	db	79	;'O'
   341  0003AF  74                 	db	116	;'t'
   342  0003B0  68                 	db	104	;'h'
   343  0003B1  65                 	db	101	;'e'
   344  0003B2  72                 	db	114	;'r'
   345  0003B3  20                 	db	32
   346  0003B4  46                 	db	70	;'F'
   347  0003B5  61                 	db	97	;'a'
   348  0003B6  69                 	db	105	;'i'
   349  0003B7  6C                 	db	108	;'l'
   350  0003B8  75                 	db	117	;'u'
   351  0003B9  72                 	db	114	;'r'
   352  0003BA  65                 	db	101	;'e'
   353  0003BB  0A                 	db	10
   354  0003BC  00                 	db	0
   355                           
   356                           ; #config settings
   357  0003BD  00                 	db	0	; dummy byte at the end
   358  0000                     
   359                           	psect	cinit
   360  001000                     __pcinit:
   361                           	opt stack 0
   362  001000                     start_initialization:
   363                           	opt stack 0
   364  001000                     __initialization:
   365                           	opt stack 0
   366                           
   367                           ; Initialize objects allocated to BANK1 (52 bytes)
   368                           ; load TBLPTR registers with __pidataBANK1
   369  001000  0ECA               	movlw	low __pidataBANK1
   370  001002  6EF6               	movwf	tblptrl,c
   371  001004  0E15               	movlw	high __pidataBANK1
   372  001006  6EF7               	movwf	tblptrh,c
   373  001008  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   374  00100A  6EF8               	movwf	tblptru,c
   375  00100C  EE01  F080         	lfsr	0,__pdataBANK1
   376  001010  EE10 F034          	lfsr	1,52
   377  001014                     copy_data0:
   378  001014  0009               	tblrd		*+
   379  001016  CFF5 FFEE          	movff	tablat,postinc0
   380  00101A  50E5               	movf	postdec1,w,c
   381  00101C  50E1               	movf	fsr1l,w,c
   382  00101E  E1FA               	bnz	copy_data0
   383                           
   384                           ; Initialize objects allocated to BANK0 (5 bytes)
   385                           ; load TBLPTR registers with __pidataBANK0
   386  001020  0EFA               	movlw	low __pidataBANK0
   387  001022  6EF6               	movwf	tblptrl,c
   388  001024  0E17               	movlw	high __pidataBANK0
   389  001026  6EF7               	movwf	tblptrh,c
   390  001028  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   391  00102A  6EF8               	movwf	tblptru,c
   392  00102C  EE00  F0F2         	lfsr	0,__pdataBANK0
   393  001030  EE10 F005          	lfsr	1,5
   394  001034                     copy_data1:
   395  001034  0009               	tblrd		*+
   396  001036  CFF5 FFEE          	movff	tablat,postinc0
   397  00103A  50E5               	movf	postdec1,w,c
   398  00103C  50E1               	movf	fsr1l,w,c
   399  00103E  E1FA               	bnz	copy_data1
   400                           
   401                           ; Initialize objects allocated to COMRAM (1 bytes)
   402                           ; load TBLPTR registers with __pidataCOMRAM
   403  001040  0E06               	movlw	low __pidataCOMRAM
   404  001042  6EF6               	movwf	tblptrl,c
   405  001044  0E18               	movlw	high __pidataCOMRAM
   406  001046  6EF7               	movwf	tblptrh,c
   407  001048  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   408  00104A  6EF8               	movwf	tblptru,c
   409  00104C  0009               	tblrd		*+	;fetch initializer
   410  00104E  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   411                           
   412                           ; Clear objects allocated to BANK2 (248 bytes)
   413  001052  EE02  F000         	lfsr	0,__pbssBANK2
   414  001056  0EF8               	movlw	248
   415  001058                     clear_0:
   416  001058  6AEE               	clrf	postinc0,c
   417  00105A  06E8               	decf	wreg,f,c
   418  00105C  E1FD               	bnz	clear_0
   419                           
   420                           ; Clear objects allocated to BANK1 (128 bytes)
   421  00105E  EE01  F000         	lfsr	0,__pbssBANK1
   422  001062  0E80               	movlw	128
   423  001064                     clear_1:
   424  001064  6AEE               	clrf	postinc0,c
   425  001066  06E8               	decf	wreg,f,c
   426  001068  E1FD               	bnz	clear_1
   427                           
   428                           ; Clear objects allocated to BANK0 (91 bytes)
   429  00106A  EE00  F060         	lfsr	0,__pbssBANK0
   430  00106E  0E5B               	movlw	91
   431  001070                     clear_2:
   432  001070  6AEE               	clrf	postinc0,c
   433  001072  06E8               	decf	wreg,f,c
   434  001074  E1FD               	bnz	clear_2
   435                           
   436                           ; Clear objects allocated to COMRAM (9 bytes)
   437  001076  EE00  F034         	lfsr	0,__pbssCOMRAM
   438  00107A  0E09               	movlw	9
   439  00107C                     clear_3:
   440  00107C  6AEE               	clrf	postinc0,c
   441  00107E  06E8               	decf	wreg,f,c
   442  001080  E1FD               	bnz	clear_3
   443  001082                     end_of_initialization:
   444                           	opt stack 0
   445  001082                     __end_of__initialization:
   446                           	opt stack 0
   447  001082  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   448  001084  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   449  001086  0E00               	movlw	low (__Lmediumconst shr (0+16))
   450  001088  6EF8               	movwf	tblptru,c
   451  00108A  0100               	movlb	0
   452  00108C  EF48  F008         	goto	_main	;jump to C main() function
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssCOMRAM
   463  000034                     __pbssCOMRAM:
   464                           	opt stack 0
   465  000034                     ISR@LastTime:
   466                           	opt stack 0
   467  000034                     	ds	2
   468  000036                     ISR@NextTime:
   469                           	opt stack 0
   470  000036                     	ds	2
   471  000038                     _SysTickCounter:
   472                           	opt stack 0
   473  000038                     	ds	2
   474  00003A                     __PRIMASK_temp:
   475                           	opt stack 0
   476  00003A                     	ds	2
   477  00003C                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	dataCOMRAM
   488  00003D                     __pdataCOMRAM:
   489                           	opt stack 0
   490  00003D                     	ds	1
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	bssBANK0
   501  000060                     __pbssBANK0:
   502                           	opt stack 0
   503  000060                     _TMR_TimerArray:
   504                           	opt stack 0
   505  000060                     	ds	32
   506  000080                     _CurrentFrame:
   507                           	opt stack 0
   508  000080                     	ds	4
   509  000084                     _TestColor:
   510                           	opt stack 0
   511  000084                     	ds	4
   512  000088                     ES_Timer_Tick_Resp@NewEvent:
   513                           	opt stack 0
   514  000088                     	ds	3
   515  00008B                     ES_Timer_Tick_Resp@NeedsProcessing:
   516                           	opt stack 0
   517  00008B                     	ds	2
   518  00008D                     Pattern_RGBPatterns@PatternConfigs:
   519                           	opt stack 0
   520  00008D                     	ds	2
   521  00008F                     _FramePointer:
   522                           	opt stack 0
   523  00008F                     	ds	2
   524  000091                     _Ready:
   525                           	opt stack 0
   526  000091                     	ds	2
   527  000093                     _TMR_ActiveFlags:
   528                           	opt stack 0
   529  000093                     	ds	2
   530  000095                     ES_Timer_Tick_Resp@NextTimer2Process:
   531                           	opt stack 0
   532  000095                     	ds	1
   533  000096                     Pattern_RGBPatterns@Length:
   534                           	opt stack 0
   535  000096                     	ds	1
   536  000097                     SPI32_ControlService@CurrentState:
   537                           	opt stack 0
   538  000097                     	ds	1
   539  000098                     SPI32_ControlService@MyPriority:
   540                           	opt stack 0
   541  000098                     	ds	1
   542  000099                     _CurrentState:
   543                           	opt stack 0
   544  000099                     	ds	1
   545  00009A                     _FrameIndex:
   546                           	opt stack 0
   547  00009A                     	ds	1
   548  00009B                     _Length:
   549                           	opt stack 0
   550  00009B                     	ds	1
   551  00009C                     _MyPriority:
   552                           	opt stack 0
   553  00009C                     	ds	1
   554  00009D                     _NumFrames:
   555                           	opt stack 0
   556  00009D                     	ds	1
   557  00009E                     _PatternStepCounter:
   558                           	opt stack 0
   559  00009E                     	ds	1
   560  00009F                     _TickCount:
   561                           	opt stack 0
   562  00009F                     	ds	1
   563  0000A0                     _Queue0:
   564                           	opt stack 0
   565  0000A0                     	ds	12
   566  0000AC                     _Queue1:
   567                           	opt stack 0
   568  0000AC                     	ds	12
   569  0000B8                     ES_Run@ThisEvent:
   570                           	opt stack 0
   571  0000B8                     	ds	3
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1l	equ	0xFE1
   580                           
   581                           	psect	dataBANK0
   582  0000F2                     __pdataBANK0:
   583                           	opt stack 0
   584  0000F2                     _PatternConfigs:
   585                           	opt stack 0
   586  0000F2                     	ds	5
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK1
   597  000100                     __pbssBANK1:
   598                           	opt stack 0
   599  000100                     _PixelFrames:
   600                           	opt stack 0
   601  000100                     	ds	128
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	dataBANK1
   612  000180                     __pdataBANK1:
   613                           	opt stack 0
   614  000180                     _GenColors:
   615                           	opt stack 0
   616  000180                     	ds	52
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	bssBANK2
   627  000200                     __pbssBANK2:
   628                           	opt stack 0
   629  000200                     _OffFrames:
   630                           	opt stack 0
   631  000200                     	ds	128
   632  000280                     _PixelPattern:
   633                           	opt stack 0
   634  000280                     	ds	120
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	cstackBANK0
   645  0000BB                     __pcstackBANK0:
   646                           	opt stack 0
   647  0000BB                     ??_DotStar_Init:
   648  0000BB                     ??_ES_Timer_StopTimer:
   649  0000BB                     ?_printf:
   650                           	opt stack 0
   651  0000BB                     ?___awmod:
   652                           	opt stack 0
   653  0000BB                     ?_GetNextFrame:
   654                           	opt stack 0
   655  0000BB                     ?___lmul:
   656                           	opt stack 0
   657  0000BB                     ?___llmod:
   658                           	opt stack 0
   659  0000BB                     ES_CheckUserEvents@i:
   660                           	opt stack 0
   661  0000BB                     SPI32_SendByte@newByte:
   662                           	opt stack 0
   663  0000BB                     ___lbmod@divisor:
   664                           	opt stack 0
   665  0000BB                     ES_GetMSBitSet@Val2Check:
   666                           	opt stack 0
   667  0000BB                     __HW_Timer_Init@Rate:
   668                           	opt stack 0
   669  0000BB                     ES_InitQueue@pBlock:
   670                           	opt stack 0
   671  0000BB                     ES_Timer_InitTimer@NewTime:
   672                           	opt stack 0
   673  0000BB                     SetupPattern@configs:
   674                           	opt stack 0
   675  0000BB                     printf@f:
   676                           	opt stack 0
   677  0000BB                     ___awmod@dividend:
   678                           	opt stack 0
   679  0000BB                     memcpy@d1:
   680                           	opt stack 0
   681  0000BB                     ___lmul@multiplier:
   682                           	opt stack 0
   683  0000BB                     ___llmod@dividend:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x0
   687  0000BB                     	ds	1
   688  0000BC                     ___lbmod@dividend:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x1
   692  0000BC                     	ds	1
   693  0000BD                     ??_ES_GetMSBitSet:
   694  0000BD                     ??_ES_Timer_InitTimer:
   695  0000BD                     ES_InitQueue@BlockSize:
   696                           	opt stack 0
   697  0000BD                     DotStar_Init@numPixels:
   698                           	opt stack 0
   699  0000BD                     SetupPattern@numPixels:
   700                           	opt stack 0
   701  0000BD                     ___lbmod@counter:
   702                           	opt stack 0
   703  0000BD                     ES_Timer_Init@Rate:
   704                           	opt stack 0
   705  0000BD                     printf@ap:
   706                           	opt stack 0
   707  0000BD                     ___awmod@divisor:
   708                           	opt stack 0
   709  0000BD                     memcpy@s1:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x2
   713  0000BD                     	ds	1
   714  0000BE                     DotStar_Init@i:
   715                           	opt stack 0
   716  0000BE                     ___lbmod@rem:
   717                           	opt stack 0
   718  0000BE                     ES_InitQueue@pThisQueue:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x3
   722  0000BE                     	ds	1
   723  0000BF                     ES_Timer_StopTimer@Num:
   724                           	opt stack 0
   725  0000BF                     ES_Timer_InitTimer@Num:
   726                           	opt stack 0
   727  0000BF                     printf@c:
   728                           	opt stack 0
   729  0000BF                     ___awmod@counter:
   730                           	opt stack 0
   731  0000BF                     memcpy@n:
   732                           	opt stack 0
   733  0000BF                     ___lmul@multiplicand:
   734                           	opt stack 0
   735  0000BF                     ___llmod@divisor:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x4
   739  0000BF                     	ds	1
   740  0000C0                     ___awmod@sign:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x5
   744  0000C0                     	ds	1
   745  0000C1                     ?___wmul:
   746                           	opt stack 0
   747  0000C1                     ___wmul@multiplier:
   748                           	opt stack 0
   749  0000C1                     memcpy@d:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x6
   753  0000C1                     	ds	1
   754  0000C2                     ES_GetMSBitSet@ReturnVal:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x7
   758  0000C2                     	ds	1
   759  0000C3                     ES_GetMSBitSet@Nybble2Test:
   760                           	opt stack 0
   761  0000C3                     ___llmod@counter:
   762                           	opt stack 0
   763  0000C3                     ___wmul@multiplicand:
   764                           	opt stack 0
   765  0000C3                     memcpy@s:
   766                           	opt stack 0
   767  0000C3                     ___lmul@product:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x8
   771  0000C3                     	ds	1
   772  0000C4                     ES_GetMSBitSet@LoopCntr:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x9
   776  0000C4                     	ds	1
   777  0000C5                     ___wmul@product:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0xA
   781  0000C5                     	ds	2
   782  0000C7                     ?_UpdatePattern:
   783                           	opt stack 0
   784  0000C7                     ES_EnQueueFIFO@pBlock:
   785                           	opt stack 0
   786  0000C7                     ES_DeQueue@pBlock:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xC
   790  0000C7                     	ds	2
   791  0000C9                     ??_UpdatePattern:
   792  0000C9                     ES_DeQueue@pReturnEvent:
   793                           	opt stack 0
   794  0000C9                     ES_EnQueueFIFO@Event2Add:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0xE
   798  0000C9                     	ds	2
   799  0000CB                     ??_ES_DeQueue:
   800                           
   801                           ; 1 bytes @ 0x10
   802  0000CB                     	ds	1
   803  0000CC                     ??_ES_EnQueueFIFO:
   804                           
   805                           ; 1 bytes @ 0x11
   806  0000CC                     	ds	1
   807  0000CD                     ES_DeQueue@SaveCrit:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x12
   811  0000CD                     	ds	1
   812  0000CE                     ES_DeQueue@NumLeft:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x13
   816  0000CE                     	ds	1
   817  0000CF                     ES_EnQueueFIFO@SaveCrit:
   818                           	opt stack 0
   819  0000CF                     UpdatePattern@brightness:
   820                           	opt stack 0
   821  0000CF                     ES_DeQueue@pThisQueue:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x14
   825  0000CF                     	ds	1
   826  0000D0                     UpdatePattern@patternID:
   827                           	opt stack 0
   828  0000D0                     ES_EnQueueFIFO@pThisQueue:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x15
   832  0000D0                     	ds	1
   833  0000D1                     UpdatePattern@i:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x16
   837  0000D1                     	ds	1
   838  0000D2                     ES_PostToService@TheEvent:
   839                           	opt stack 0
   840                           
   841                           ; 3 bytes @ 0x17
   842  0000D2                     	ds	3
   843  0000D5                     ??_ES_PostToService:
   844                           
   845                           ; 1 bytes @ 0x1A
   846  0000D5                     	ds	2
   847  0000D7                     ES_PostToService@WhichService:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x1C
   851  0000D7                     	ds	1
   852  0000D8                     InitPatternControlService@ThisEvent:
   853                           	opt stack 0
   854  0000D8                     PostPatternControlService@ThisEvent:
   855                           	opt stack 0
   856  0000D8                     InitSPI32ControlService@ThisEvent:
   857                           	opt stack 0
   858  0000D8                     PostSPI32ControlService@ThisEvent:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x1D
   862  0000D8                     	ds	3
   863  0000DB                     ??_ES_Timer_Tick_Resp:
   864  0000DB                     InitPatternControlService@Priority:
   865                           	opt stack 0
   866  0000DB                     InitSPI32ControlService@Priority:
   867                           	opt stack 0
   868  0000DB                     SPI32_TransmitFrames@framePointer:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x20
   872  0000DB                     	ds	1
   873  0000DC                     ES_Initialize@NewRate:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x21
   877  0000DC                     	ds	1
   878  0000DD                     SPI32_TransmitFrames@numFrames:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x22
   882  0000DD                     	ds	1
   883  0000DE                     ES_Initialize@i:
   884                           	opt stack 0
   885  0000DE                     SPI32_TransmitFrames@transmitEvent:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0x23
   889  0000DE                     	ds	1
   890  0000DF                     
   891                           ; 1 bytes @ 0x24
   892  0000DF                     	ds	2
   893  0000E1                     DotStar_Show@pixelPointer:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x26
   897  0000E1                     	ds	2
   898  0000E3                     ?_RunPatternControlService:
   899                           	opt stack 0
   900  0000E3                     ?_RunSPI32ControlService:
   901                           	opt stack 0
   902  0000E3                     RunPatternControlService@ThisEvent:
   903                           	opt stack 0
   904  0000E3                     RunSPI32ControlService@ThisEvent:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x28
   908  0000E3                     	ds	3
   909  0000E6                     ??_RunSPI32ControlService:
   910  0000E6                     RunPatternControlService@ReturnEvent:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x2B
   914  0000E6                     	ds	1
   915  0000E7                     RunSPI32ControlService@ReturnEvent:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0x2C
   919  0000E7                     	ds	2
   920  0000E9                     RunPatternControlService@testEvent:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x2E
   924  0000E9                     	ds	3
   925  0000EC                     ??_ES_Run:
   926                           
   927                           ; 1 bytes @ 0x31
   928  0000EC                     	ds	4
   929  0000F0                     ES_Run@HighestPrior:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x35
   933  0000F0                     	ds	1
   934  0000F1                     main@ErrorType:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x36
   938  0000F1                     	ds	1
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ?i2___awmod:
   952                           	opt stack 0
   953  000001                     i2___awmod@dividend:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x0
   957  000001                     	ds	2
   958  000003                     i2___awmod@divisor:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2
   962  000003                     	ds	2
   963  000005                     i2___awmod@counter:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x4
   967  000005                     	ds	1
   968  000006                     i2___awmod@sign:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x5
   972  000006                     	ds	1
   973  000007                     ?i2___wmul:
   974                           	opt stack 0
   975  000007                     i2___wmul@multiplier:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x6
   979  000007                     	ds	2
   980  000009                     i2___wmul@multiplicand:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x8
   984  000009                     	ds	2
   985  00000B                     i2___wmul@product:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0xA
   989  00000B                     	ds	2
   990  00000D                     i2ES_EnQueueFIFO@pBlock:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xC
   994  00000D                     	ds	2
   995  00000F                     i2ES_EnQueueFIFO@Event2Add:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0xE
   999  00000F                     	ds	3
  1000  000012                     ??i2_ES_EnQueueFIFO:
  1001                           
  1002                           ; 1 bytes @ 0x11
  1003  000012                     	ds	3
  1004  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x14
  1008  000015                     	ds	1
  1009  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x15
  1013  000016                     	ds	2
  1014  000018                     i2ES_PostToService@TheEvent:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x17
  1018  000018                     	ds	3
  1019  00001B                     ??i2_ES_PostToService:
  1020                           
  1021                           ; 1 bytes @ 0x1A
  1022  00001B                     	ds	2
  1023  00001D                     i2ES_PostToService@WhichService:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x1C
  1027  00001D                     	ds	1
  1028  00001E                     i2PostSPI32ControlService@ThisEvent:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x1D
  1032  00001E                     	ds	3
  1033  000021                     SPI32_EOTResponse@EOTevent:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x20
  1037  000021                     	ds	3
  1038  000024                     ??_ISR:
  1039                           
  1040                           ; 1 bytes @ 0x23
  1041  000024                     	ds	16
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           
  1051 ;;
  1052 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1053 ;;
  1054 ;; *************** function _main *****************
  1055 ;; Defined at:
  1056 ;;		line 24 in file "main.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  ErrorType       1   54[BANK0 ] enum E15647
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2  521[None  ] int 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1070 ;;      Params:         0       0       0       0
  1071 ;;      Locals:         0       1       0       0
  1072 ;;      Temps:          0       0       0       0
  1073 ;;      Totals:         0       1       0       0
  1074 ;;Total ram usage:        1 bytes
  1075 ;; Hardware stack levels required when called:   15
  1076 ;; This function calls:
  1077 ;;		_ES_Initialize
  1078 ;;		_ES_Run
  1079 ;;		_printf
  1080 ;; This function is called by:
  1081 ;;		Startup code after reset
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text0
  1086  001090                     __ptext0:
  1087                           	opt stack 0
  1088  001090                     _main:
  1089                           	opt stack 16
  1090                           
  1091                           ;main.c: 27: IRCF0 = 1;
  1092                           
  1093                           ;incstack = 0
  1094  001090  88D3               	bsf	4051,4,c	;volatile
  1095                           
  1096                           ;main.c: 28: IRCF1 = 1;
  1097  001092  8AD3               	bsf	4051,5,c	;volatile
  1098                           
  1099                           ;main.c: 29: IRCF2 = 1;
  1100  001094  8CD3               	bsf	4051,6,c	;volatile
  1101                           
  1102                           ;main.c: 37: ES_Return_t ErrorType;
  1103                           ;main.c: 53: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1104  001096  0E9C               	movlw	156
  1105  001098  0100               	movlb	0	; () banked
  1106  00109A  6FDD               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1107  00109C  0E3F               	movlw	63
  1108  00109E  6FDC               	movwf	ES_Initialize@NewRate& (0+255),b
  1109  0010A0  ECB2  F004         	call	_ES_Initialize	;wreg free
  1110  0010A4  0100               	movlb	0	; () banked
  1111  0010A6  6FF1               	movwf	main@ErrorType& (0+255),b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 54: if ( ErrorType == Success ) {
  1115  0010A8  0100               	movlb	0	; () banked
  1116  0010AA  51F1               	movf	main@ErrorType& (0+255),w,b
  1117  0010AC  0100               	movlb	0	; () banked
  1118  0010AE  A4D8               	btfss	status,2,c
  1119  0010B0  D029               	goto	l2820
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 56: ErrorType = ES_Run();
  1123  0010B2  EC38  F004         	call	_ES_Run	;wreg free
  1124  0010B6  0100               	movlb	0	; () banked
  1125  0010B8  6FF1               	movwf	main@ErrorType& (0+255),b
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;main.c: 58: }
  1129                           ;main.c: 60: switch (ErrorType){
  1130  0010BA  D024               	goto	l2820
  1131  0010BC                     l2810:
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;main.c: 62: printf("Failed on attempt to Post\n");
  1135  0010BC  0E64               	movlw	low STR_1
  1136  0010BE  0100               	movlb	0	; () banked
  1137  0010C0  6FBB               	movwf	printf@f& (0+255),b
  1138  0010C2  0E03               	movlw	high STR_1
  1139  0010C4  0100               	movlb	0	; () banked
  1140  0010C6  6FBC               	movwf	(printf@f+1)& (0+255),b
  1141  0010C8  ECFF  F00A         	call	_printf	;wreg free
  1142                           
  1143                           ;main.c: 63: break;
  1144  0010CC  D027               	goto	l529
  1145  0010CE                     l2812:
  1146                           
  1147                           ;main.c: 65: printf("Failed on NULL pointer\n");
  1148  0010CE  0E7F               	movlw	low STR_2
  1149  0010D0  0100               	movlb	0	; () banked
  1150  0010D2  6FBB               	movwf	printf@f& (0+255),b
  1151  0010D4  0E03               	movlw	high STR_2
  1152  0010D6  0100               	movlb	0	; () banked
  1153  0010D8  6FBC               	movwf	(printf@f+1)& (0+255),b
  1154  0010DA  ECFF  F00A         	call	_printf	;wreg free
  1155                           
  1156                           ;main.c: 66: break;
  1157  0010DE  D01E               	goto	l529
  1158  0010E0                     l2814:
  1159                           
  1160                           ;main.c: 68: printf("Failed Initialization\n");
  1161  0010E0  0E97               	movlw	low STR_3
  1162  0010E2  0100               	movlb	0	; () banked
  1163  0010E4  6FBB               	movwf	printf@f& (0+255),b
  1164  0010E6  0E03               	movlw	high STR_3
  1165  0010E8  0100               	movlb	0	; () banked
  1166  0010EA  6FBC               	movwf	(printf@f+1)& (0+255),b
  1167  0010EC  ECFF  F00A         	call	_printf	;wreg free
  1168                           
  1169                           ;main.c: 69: break;
  1170  0010F0  D015               	goto	l529
  1171  0010F2                     l2816:
  1172                           
  1173                           ;main.c: 71: printf("Other Failure\n");
  1174  0010F2  0EAE               	movlw	low STR_4
  1175  0010F4  0100               	movlb	0	; () banked
  1176  0010F6  6FBB               	movwf	printf@f& (0+255),b
  1177  0010F8  0E03               	movlw	high STR_4
  1178  0010FA  0100               	movlb	0	; () banked
  1179  0010FC  6FBC               	movwf	(printf@f+1)& (0+255),b
  1180  0010FE  ECFF  F00A         	call	_printf	;wreg free
  1181                           
  1182                           ;main.c: 73: }
  1183                           
  1184                           ;main.c: 72: break;
  1185  001102  D00C               	goto	l529
  1186  001104                     l2820:
  1187  001104  0100               	movlb	0	; () banked
  1188  001106  51F1               	movf	main@ErrorType& (0+255),w,b
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 3, Range of values is 1 to 5
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           10     6 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  001108  0A01               	xorlw	1	; case 1
  1197  00110A  B4D8               	btfsc	status,2,c
  1198  00110C  D7D7               	goto	l2810
  1199  00110E  0A02               	xorlw	2	; case 3
  1200  001110  B4D8               	btfsc	status,2,c
  1201  001112  D7DD               	goto	l2812
  1202  001114  0A06               	xorlw	6	; case 5
  1203  001116  B4D8               	btfsc	status,2,c
  1204  001118  D7E3               	goto	l2814
  1205  00111A  D7EB               	goto	l2816
  1206  00111C                     l529:
  1207                           
  1208                           ;main.c: 75: ;
  1209  00111C  D7FF               	goto	l529
  1210  00111E                     __end_of_main:
  1211                           	opt stack 0
  1212                           tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postdec1	equ	0xFE5
  1219                           fsr1l	equ	0xFE1
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _printf *****************
  1223 ;; Defined at:
  1224 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1227 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  tmpval          4    0        struct .
  1230 ;;  cp              3    0        PTR const unsigned char 
  1231 ;;  ap              2    2[BANK0 ] PTR void [1]
  1232 ;;		 -> ?_printf(2), 
  1233 ;;  len             2    0        unsigned int 
  1234 ;;  val             2    0        unsigned int 
  1235 ;;  c               1    4[BANK0 ] char 
  1236 ;;  flag            1    0        unsigned char 
  1237 ;;  prec            1    0        char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    0[BANK0 ] int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1247 ;;      Params:         0       2       0       0
  1248 ;;      Locals:         0       3       0       0
  1249 ;;      Temps:          0       0       0       0
  1250 ;;      Totals:         0       5       0       0
  1251 ;;Total ram usage:        5 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    7
  1254 ;; This function calls:
  1255 ;;		_putch
  1256 ;; This function is called by:
  1257 ;;		_main
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text1
  1262  0015FE                     __ptext1:
  1263                           	opt stack 0
  1264  0015FE                     _printf:
  1265                           	opt stack 23
  1266                           
  1267                           ;doprnt.c: 466: va_list ap;
  1268                           ;doprnt.c: 499: signed char c;
  1269                           ;doprnt.c: 506: signed char prec;
  1270                           ;doprnt.c: 508: unsigned char flag;
  1271                           ;doprnt.c: 523: union {
  1272                           ;doprnt.c: 524: unsigned long vd;
  1273                           ;doprnt.c: 525: double integ;
  1274                           ;doprnt.c: 526: } tmpval;
  1275                           ;doprnt.c: 528: unsigned int val;
  1276                           ;doprnt.c: 529: unsigned len;
  1277                           ;doprnt.c: 530: const char * cp;
  1278                           ;doprnt.c: 533: *ap = __va_start();
  1279                           
  1280                           ;incstack = 0
  1281  0015FE  0EBD               	movlw	low (?_printf+2)
  1282  001600  0100               	movlb	0	; () banked
  1283  001602  6FBD               	movwf	printf@ap& (0+255),b
  1284  001604  0E00               	movlw	high (?_printf+2)
  1285  001606  0100               	movlb	0	; () banked
  1286  001608  6FBE               	movwf	(printf@ap+1)& (0+255),b
  1287                           
  1288                           ;doprnt.c: 536: while(c = *f++) {
  1289  00160A  D004               	goto	l2656
  1290  00160C                     l2654:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;doprnt.c: 540: {
  1294                           ;doprnt.c: 541: (putch(c) );
  1295  00160C  0100               	movlb	0	; () banked
  1296  00160E  51BF               	movf	printf@c& (0+255),w,b
  1297  001610  EC02  F00C         	call	_putch
  1298  001614                     l2656:
  1299  001614  C0BB  FFF6         	movff	printf@f,tblptrl
  1300  001618  C0BC  FFF7         	movff	printf@f+1,tblptrh
  1301  00161C  0100               	movlb	0	; () banked
  1302  00161E  4BBB               	infsnz	printf@f& (0+255),f,b
  1303  001620  2BBC               	incf	(printf@f+1)& (0+255),f,b
  1304  001622                     	if	0	;tblptru may be non-zero
  1305  001622                     	endif
  1306  001622                     	if	0	;tblptru may be non-zero
  1307  001622                     	endif
  1308  001622  0008               	tblrd		*
  1309  001624  CFF5 F0BF          	movff	tablat,printf@c
  1310  001628  0100               	movlb	0	; () banked
  1311  00162A  51BF               	movf	printf@c& (0+255),w,b
  1312  00162C  B4D8               	btfsc	status,2,c
  1313  00162E  0012               	return	
  1314  001630  D7ED               	goto	l2654
  1315  001632                     __end_of_printf:
  1316                           	opt stack 0
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1l	equ	0xFE1
  1325                           status	equ	0xFD8
  1326                           
  1327 ;; *************** function _putch *****************
  1328 ;; Defined at:
  1329 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  c               1    wreg     unsigned char 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  c               1    0[COMRAM] unsigned char 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		wreg
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1343 ;;      Params:         0       0       0       0
  1344 ;;      Locals:         0       0       0       0
  1345 ;;      Temps:          0       0       0       0
  1346 ;;      Totals:         0       0       0       0
  1347 ;;Total ram usage:        0 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:    6
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		_printf
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text2
  1358  001804                     __ptext2:
  1359                           	opt stack 0
  1360  001804                     _putch:
  1361                           	opt stack 23
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;incstack = 0
  1365  001804  0012               	return		;funcret
  1366  001806                     __end_of_putch:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _ES_Run *****************
  1379 ;; Defined at:
  1380 ;;		line 277 in file "ES_Framework.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  HighestPrior    1   53[BANK0 ] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      enum E15495
  1387 ;; Registers used:
  1388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1394 ;;      Params:         0       0       0       0
  1395 ;;      Locals:         0       1       0       0
  1396 ;;      Temps:          0       4       0       0
  1397 ;;      Totals:         0       5       0       0
  1398 ;;Total ram usage:        5 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:   14
  1401 ;; This function calls:
  1402 ;;		_ES_CheckUserEvents
  1403 ;;		_ES_DeQueue
  1404 ;;		_ES_GetMSBitSet
  1405 ;;		_RunPatternControlService
  1406 ;;		_RunSPI32ControlService
  1407 ;;		__HW_Process_Pending_Ints
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text3
  1414  000870                     __ptext3:
  1415                           	opt stack 0
  1416  000870                     _ES_Run:
  1417                           	opt stack 16
  1418                           
  1419                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1420                           
  1421                           ;incstack = 0
  1422                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1423                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1424                           ;ES_Framework.c: 282: while(1){
  1425  000870  D06B               	goto	l2638
  1426  000872                     l2626:
  1427                           
  1428                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1429  000872  C091  F0BB         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1430  000876  C092  F0BC         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1431  00087A  EC10  F007         	call	_ES_GetMSBitSet	;wreg free
  1432  00087E  0100               	movlb	0	; () banked
  1433  000880  6FF0               	movwf	ES_Run@HighestPrior& (0+255),b
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1437  000882  0100               	movlb	0	; () banked
  1438  000884  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1439  000886  0D03               	mullw	3
  1440  000888  0E58               	movlw	low _EventQueues
  1441  00088A  24F3               	addwf	prodl,w,c
  1442  00088C  6EF6               	movwf	tblptrl,c
  1443  00088E  0E03               	movlw	high _EventQueues
  1444  000890  20F4               	addwfc	prodh,w,c
  1445  000892  6EF7               	movwf	tblptrh,c
  1446  000894                     	if	0	;There are less than 3 active tblptr bytes
  1447  000894                     	endif
  1448  000894  0009               	tblrd		*+
  1449  000896  CFF5 F0C7          	movff	tablat,ES_DeQueue@pBlock
  1450  00089A  000A               	tblrd		*-
  1451  00089C  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock+1
  1452  0008A0  0EB8               	movlw	low ES_Run@ThisEvent
  1453  0008A2  0100               	movlb	0	; () banked
  1454  0008A4  6FC9               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1455  0008A6  0E00               	movlw	high ES_Run@ThisEvent
  1456  0008A8  0100               	movlb	0	; () banked
  1457  0008AA  6FCA               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1458  0008AC  EC9B  F002         	call	_ES_DeQueue	;wreg free
  1459  0008B0  0900               	iorlw	0
  1460  0008B2  A4D8               	btfss	status,2,c
  1461  0008B4  D01F               	goto	l2632
  1462                           
  1463                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1464  0008B6  0100               	movlb	0	; () banked
  1465  0008B8  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1466  0008BA  0D02               	mullw	2
  1467  0008BC  0E01               	movlw	low _BitNum2SetMask
  1468  0008BE  24F3               	addwf	prodl,w,c
  1469  0008C0  6EF6               	movwf	tblptrl,c
  1470  0008C2  0E03               	movlw	high _BitNum2SetMask
  1471  0008C4  20F4               	addwfc	prodh,w,c
  1472  0008C6  6EF7               	movwf	tblptrh,c
  1473  0008C8                     	if	0	;There are less than 3 active tblptr bytes
  1474  0008C8                     	endif
  1475  0008C8  0009               	tblrd		*+
  1476  0008CA  CFF5 F0EC          	movff	tablat,??_ES_Run
  1477  0008CE  0009               	tblrd		*+
  1478  0008D0  CFF5 F0ED          	movff	tablat,??_ES_Run+1
  1479  0008D4  0100               	movlb	0	; () banked
  1480  0008D6  1DEC               	comf	??_ES_Run& (0+255),w,b
  1481  0008D8  0100               	movlb	0	; () banked
  1482  0008DA  6FEE               	movwf	(??_ES_Run+2)& (0+255),b
  1483  0008DC  0100               	movlb	0	; () banked
  1484  0008DE  1DED               	comf	(??_ES_Run+1)& (0+255),w,b
  1485  0008E0  0100               	movlb	0	; () banked
  1486  0008E2  6FEF               	movwf	(??_ES_Run+3)& (0+255),b
  1487  0008E4  0100               	movlb	0	; () banked
  1488  0008E6  51EE               	movf	(??_ES_Run+2)& (0+255),w,b
  1489  0008E8  0100               	movlb	0	; () banked
  1490  0008EA  1791               	andwf	_Ready& (0+255),f,b
  1491  0008EC  0100               	movlb	0	; () banked
  1492  0008EE  51EF               	movf	(??_ES_Run+3)& (0+255),w,b
  1493  0008F0  0100               	movlb	0	; () banked
  1494  0008F2  1792               	andwf	(_Ready+1)& (0+255),f,b
  1495  0008F4                     l2632:
  1496                           
  1497                           ;ES_Framework.c: 291: }
  1498                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1499  0008F4  C0B8  F0E3         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1500  0008F8  C0B9  F0E4         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1501  0008FC  C0BA  F0E5         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1502  000900  0100               	movlb	0	; () banked
  1503  000902  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1504  000904  0D04               	mullw	4
  1505  000906  0E02               	movlw	2
  1506  000908  26F3               	addwf	prodl,f,c
  1507  00090A  0E00               	movlw	0
  1508  00090C  22F4               	addwfc	prodh,f,c
  1509  00090E  0E50               	movlw	low _ServDescList
  1510  000910  24F3               	addwf	prodl,w,c
  1511  000912  6EF6               	movwf	tblptrl,c
  1512  000914  0E03               	movlw	high _ServDescList
  1513  000916  20F4               	addwfc	prodh,w,c
  1514  000918  6EF7               	movwf	tblptrh,c
  1515  00091A                     	if	0	;There are less than 3 active tblptr bytes
  1516  00091A                     	endif
  1517  00091A  D801               	call	u1738
  1518  00091C  D00C               	goto	u1739
  1519  00091E                     u1738:
  1520  00091E  0005               	push	
  1521  000920  6EFA               	movwf	pclath,c
  1522  000922  0009               	tblrd		*+
  1523  000924  50F5               	movf	tablat,w,c
  1524  000926  6EFD               	movwf	tosl,c
  1525  000928  0009               	tblrd		*+
  1526  00092A  50F5               	movf	tablat,w,c
  1527  00092C  6EFE               	movwf	tosh,c
  1528  00092E  50F8               	movf	tblptru,w,c
  1529  000930  6EFF               	movwf	tosu,c
  1530  000932  50FA               	movf	pclath,w,c
  1531  000934  0012               	return		;indir
  1532  000936                     u1739:
  1533  000936  0EE3               	movlw	low ?_RunSPI32ControlService
  1534  000938  6ED9               	movwf	fsr2l,c
  1535  00093A  0E00               	movlw	high ?_RunSPI32ControlService
  1536  00093C  6EDA               	movwf	fsr2h,c
  1537  00093E  50DF               	movf	indf2,w,c
  1538  000940  B4D8               	btfsc	status,2,c
  1539  000942  D002               	goto	l2638
  1540                           
  1541                           ;ES_Framework.c: 293: return FailedRun;
  1542  000944  0E02               	movlw	2
  1543  000946  0012               	return	
  1544  000948                     l2638:
  1545  000948  ECB3  F00B         	call	__HW_Process_Pending_Ints	;wreg free
  1546  00094C  0900               	iorlw	0
  1547  00094E  B4D8               	btfsc	status,2,c
  1548  000950  D006               	goto	l2642
  1549  000952  0100               	movlb	0	; () banked
  1550  000954  5191               	movf	_Ready& (0+255),w,b
  1551  000956  0100               	movlb	0	; () banked
  1552  000958  1192               	iorwf	(_Ready+1)& (0+255),w,b
  1553  00095A  A4D8               	btfss	status,2,c
  1554  00095C  D78A               	goto	l2626
  1555  00095E                     l2642:
  1556                           
  1557                           ;ES_Framework.c: 294: }
  1558                           ;ES_Framework.c: 295: }
  1559                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1560  00095E  EC27  F00A         	call	_ES_CheckUserEvents	;wreg free
  1561  000962  D7F2               	goto	l2638
  1562  000964                     __end_of_ES_Run:
  1563                           	opt stack 0
  1564                           tosu	equ	0xFFF
  1565                           tosh	equ	0xFFE
  1566                           tosl	equ	0xFFD
  1567                           pclath	equ	0xFFA
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           prodh	equ	0xFF4
  1573                           prodl	equ	0xFF3
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           indf2	equ	0xFDF
  1579                           fsr2h	equ	0xFDA
  1580                           fsr2l	equ	0xFD9
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function __HW_Process_Pending_Ints *****************
  1584 ;; Defined at:
  1585 ;;		line 207 in file "ES_Port.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      unsigned char 
  1592 ;; Registers used:
  1593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1599 ;;      Params:         0       0       0       0
  1600 ;;      Locals:         0       0       0       0
  1601 ;;      Temps:          0       0       0       0
  1602 ;;      Totals:         0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:   11
  1606 ;; This function calls:
  1607 ;;		_ES_Timer_Tick_Resp
  1608 ;; This function is called by:
  1609 ;;		_ES_Run
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text4
  1614  001766                     __ptext4:
  1615                           	opt stack 0
  1616  001766                     __HW_Process_Pending_Ints:
  1617                           	opt stack 18
  1618                           
  1619                           ;ES_Port.c: 209: while (TickCount > 0)
  1620                           
  1621                           ;incstack = 0
  1622  001766  D004               	goto	l2448
  1623  001768                     l2444:
  1624                           
  1625                           ;ES_Port.c: 210: {
  1626                           ;ES_Port.c: 212: ES_Timer_Tick_Resp();
  1627  001768  EC2F  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1628                           
  1629                           ;ES_Port.c: 213: TickCount--;
  1630  00176C  0100               	movlb	0	; () banked
  1631  00176E  079F               	decf	_TickCount& (0+255),f,b	;volatile
  1632  001770                     l2448:
  1633  001770  0100               	movlb	0	; () banked
  1634  001772  519F               	movf	_TickCount& (0+255),w,b	;volatile
  1635  001774  A4D8               	btfss	status,2,c
  1636  001776  D7F8               	goto	l2444
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;ES_Port.c: 214: }
  1640                           ;ES_Port.c: 216: return 1;
  1641                           
  1642                           ; BSR set to: 0
  1643  001778  0E01               	movlw	1
  1644  00177A  0012               	return	
  1645  00177C                     __end_of__HW_Process_Pending_Ints:
  1646                           	opt stack 0
  1647                           tosu	equ	0xFFF
  1648                           tosh	equ	0xFFE
  1649                           tosl	equ	0xFFD
  1650                           pclath	equ	0xFFA
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _ES_Timer_Tick_Resp *****************
  1667 ;; Defined at:
  1668 ;;		line 284 in file "ES_Timers.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1682 ;;      Params:         0       0       0       0
  1683 ;;      Locals:         0       0       0       0
  1684 ;;      Temps:          0       4       0       0
  1685 ;;      Totals:         0       4       0       0
  1686 ;;Total ram usage:        4 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:   10
  1689 ;; This function calls:
  1690 ;;		Absolute function
  1691 ;;		_ES_GetMSBitSet
  1692 ;;		_PostPatternControlService
  1693 ;;		_PostSPI32ControlService
  1694 ;; This function is called by:
  1695 ;;		__HW_Process_Pending_Ints
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text5
  1700  00065E                     __ptext5:
  1701                           	opt stack 0
  1702  00065E                     _ES_Timer_Tick_Resp:
  1703                           	opt stack 18
  1704                           
  1705                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1706                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1707                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1708                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;incstack = 0
  1712  00065E  0100               	movlb	0	; () banked
  1713  000660  5193               	movf	_TMR_ActiveFlags& (0+255),w,b
  1714  000662  0100               	movlb	0	; () banked
  1715  000664  1194               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1716  000666  B4D8               	btfsc	status,2,c
  1717  000668  0012               	return	
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;ES_Timers.c: 291: {
  1721                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1722  00066A  C093  F08B         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1723  00066E  C094  F08C         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1724  000672                     l2302:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1728  000672  C08B  F0BB         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1729  000676  C08C  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1730  00067A  EC10  F007         	call	_ES_GetMSBitSet	;wreg free
  1731  00067E  0100               	movlb	0	; () banked
  1732  000680  6F95               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1736  000682  0100               	movlb	0	; () banked
  1737  000684  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1738  000686  0D02               	mullw	2
  1739  000688  0E60               	movlw	low _TMR_TimerArray
  1740  00068A  24F3               	addwf	prodl,w,c
  1741  00068C  6ED9               	movwf	fsr2l,c
  1742  00068E  0E00               	movlw	high _TMR_TimerArray
  1743  000690  20F4               	addwfc	prodh,w,c
  1744  000692  6EDA               	movwf	fsr2h,c
  1745  000694  06DE               	decf	postinc2,f,c
  1746  000696  0E00               	movlw	0
  1747  000698  5ADD               	subwfb	postdec2,f,c
  1748  00069A  50DE               	movf	postinc2,w,c
  1749  00069C  10DE               	iorwf	postinc2,w,c
  1750  00069E  A4D8               	btfss	status,2,c
  1751  0006A0  D043               	goto	l2314
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;ES_Timers.c: 299: {
  1755                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1756  0006A2  0E03               	movlw	3
  1757  0006A4  0100               	movlb	0	; () banked
  1758  0006A6  6F88               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1762  0006A8  C095  F089         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1763  0006AC  0100               	movlb	0	; () banked
  1764  0006AE  6B8A               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1768  0006B0  C088  F0D8         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1769  0006B4  C089  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1770  0006B8  C08A  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1771  0006BC  0100               	movlb	0	; () banked
  1772  0006BE  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1773  0006C0  0D02               	mullw	2
  1774  0006C2  0E21               	movlw	low _Timer2PostFunc
  1775  0006C4  24F3               	addwf	prodl,w,c
  1776  0006C6  6EF6               	movwf	tblptrl,c
  1777  0006C8  0E03               	movlw	high _Timer2PostFunc
  1778  0006CA  20F4               	addwfc	prodh,w,c
  1779  0006CC  6EF7               	movwf	tblptrh,c
  1780  0006CE                     	if	0	;There are less than 3 active tblptr bytes
  1781  0006CE                     	endif
  1782  0006CE  D801               	call	u1388
  1783  0006D0  D00C               	goto	l2312
  1784  0006D2                     u1388:
  1785  0006D2  0005               	push	
  1786  0006D4  6EFA               	movwf	pclath,c
  1787  0006D6  0009               	tblrd		*+
  1788  0006D8  50F5               	movf	tablat,w,c
  1789  0006DA  6EFD               	movwf	tosl,c
  1790  0006DC  0009               	tblrd		*+
  1791  0006DE  50F5               	movf	tablat,w,c
  1792  0006E0  6EFE               	movwf	tosh,c
  1793  0006E2  50F8               	movf	tblptru,w,c
  1794  0006E4  6EFF               	movwf	tosu,c
  1795  0006E6  50FA               	movf	pclath,w,c
  1796  0006E8  0012               	return		;indir
  1797  0006EA                     l2312:
  1798                           
  1799                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1800  0006EA  0100               	movlb	0	; () banked
  1801  0006EC  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1802  0006EE  0D02               	mullw	2
  1803  0006F0  0E01               	movlw	low _BitNum2SetMask
  1804  0006F2  24F3               	addwf	prodl,w,c
  1805  0006F4  6EF6               	movwf	tblptrl,c
  1806  0006F6  0E03               	movlw	high _BitNum2SetMask
  1807  0006F8  20F4               	addwfc	prodh,w,c
  1808  0006FA  6EF7               	movwf	tblptrh,c
  1809  0006FC                     	if	0	;There are less than 3 active tblptr bytes
  1810  0006FC                     	endif
  1811  0006FC  0009               	tblrd		*+
  1812  0006FE  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1813  000702  0009               	tblrd		*+
  1814  000704  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1815  000708  0100               	movlb	0	; () banked
  1816  00070A  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1817  00070C  0100               	movlb	0	; () banked
  1818  00070E  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1819  000710  0100               	movlb	0	; () banked
  1820  000712  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1821  000714  0100               	movlb	0	; () banked
  1822  000716  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1823  000718  0100               	movlb	0	; () banked
  1824  00071A  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1825  00071C  0100               	movlb	0	; () banked
  1826  00071E  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1827  000720  0100               	movlb	0	; () banked
  1828  000722  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1829  000724  0100               	movlb	0	; () banked
  1830  000726  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1831  000728                     l2314:
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;ES_Timers.c: 306: }
  1835                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1836  000728  0100               	movlb	0	; () banked
  1837  00072A  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1838  00072C  0D02               	mullw	2
  1839  00072E  0E01               	movlw	low _BitNum2SetMask
  1840  000730  24F3               	addwf	prodl,w,c
  1841  000732  6EF6               	movwf	tblptrl,c
  1842  000734  0E03               	movlw	high _BitNum2SetMask
  1843  000736  20F4               	addwfc	prodh,w,c
  1844  000738  6EF7               	movwf	tblptrh,c
  1845  00073A                     	if	0	;There are less than 3 active tblptr bytes
  1846  00073A                     	endif
  1847  00073A  0009               	tblrd		*+
  1848  00073C  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1849  000740  0009               	tblrd		*+
  1850  000742  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1851  000746  0100               	movlb	0	; () banked
  1852  000748  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1853  00074A  0100               	movlb	0	; () banked
  1854  00074C  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1855  00074E  0100               	movlb	0	; () banked
  1856  000750  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1857  000752  0100               	movlb	0	; () banked
  1858  000754  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1859  000756  0100               	movlb	0	; () banked
  1860  000758  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1861  00075A  0100               	movlb	0	; () banked
  1862  00075C  178B               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1863  00075E  0100               	movlb	0	; () banked
  1864  000760  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1865  000762  0100               	movlb	0	; () banked
  1866  000764  178C               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1870  000766  0100               	movlb	0	; () banked
  1871  000768  518B               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1872  00076A  0100               	movlb	0	; () banked
  1873  00076C  118C               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1874  00076E  B4D8               	btfsc	status,2,c
  1875  000770  0012               	return	
  1876  000772  D77F               	goto	l2302
  1877  000774                     __end_of_ES_Timer_Tick_Resp:
  1878                           	opt stack 0
  1879                           tosu	equ	0xFFF
  1880                           tosh	equ	0xFFE
  1881                           tosl	equ	0xFFD
  1882                           pclath	equ	0xFFA
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           indf2	equ	0xFDF
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _ES_GetMSBitSet *****************
  1901 ;; Defined at:
  1902 ;;		line 79 in file "ES_LookupTables.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  LoopCntr        1    9[BANK0 ] char 
  1907 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1908 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      unsigned char 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       2       0       0
  1919 ;;      Locals:         0       3       0       0
  1920 ;;      Temps:          0       5       0       0
  1921 ;;      Totals:         0      10       0       0
  1922 ;;Total ram usage:       10 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    6
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_ES_Run
  1929 ;;		_ES_Timer_Tick_Resp
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text6
  1934  000E20                     __ptext6:
  1935                           	opt stack 0
  1936  000E20                     _ES_GetMSBitSet:
  1937                           	opt stack 21
  1938                           
  1939                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1940                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1941                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;incstack = 0
  1945  000E20  0E80               	movlw	128
  1946  000E22  0100               	movlb	0	; () banked
  1947  000E24  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1948                           
  1949                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1950  000E26  0E03               	movlw	3
  1951  000E28  0100               	movlb	0	; () banked
  1952  000E2A  6FC4               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1953  000E2C                     l2194:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1957  000E2C  0100               	movlb	0	; () banked
  1958  000E2E  BFC4               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1959  000E30  D046               	goto	l2208
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1963                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1964                           ;ES_LookupTables.c: 91: 0x0F);
  1965                           
  1966                           ; BSR set to: 0
  1967                           
  1968                           ; BSR set to: 0
  1969  000E32  0100               	movlb	0	; () banked
  1970  000E34  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1971  000E36  0D04               	mullw	4
  1972  000E38  CFF3 F0BD          	movff	prodl,??_ES_GetMSBitSet
  1973  000E3C  C0BB  F0BE         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1974  000E40  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1975  000E44  0100               	movlb	0	; () banked
  1976  000E46  2BBD               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1977  000E48  D004               	goto	u1244
  1978  000E4A                     u1245:
  1979  000E4A  0100               	movlb	0	; () banked
  1980  000E4C  90D8               	bcf	status,0,c
  1981  000E4E  33BF               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1982  000E50  33BE               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1983  000E52                     u1244:
  1984  000E52  0100               	movlb	0	; () banked
  1985  000E54  2FBD               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1986  000E56  D7F9               	goto	u1245
  1987  000E58  0100               	movlb	0	; () banked
  1988  000E5A  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1989  000E5C  0B0F               	andlw	15
  1990  000E5E  0100               	movlb	0	; () banked
  1991  000E60  6FC3               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1995  000E62  0100               	movlb	0	; () banked
  1996  000E64  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1997  000E66  0100               	movlb	0	; () banked
  1998  000E68  B4D8               	btfsc	status,2,c
  1999  000E6A  D026               	goto	l2204
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2003                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2004  000E6C  0EFF               	movlw	255
  2005  000E6E  0100               	movlb	0	; () banked
  2006  000E70  6FBD               	movwf	??_ES_GetMSBitSet& (0+255),b
  2007  000E72  0EFF               	movlw	255
  2008  000E74  0100               	movlb	0	; () banked
  2009  000E76  6FBE               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2010  000E78  0100               	movlb	0	; () banked
  2011  000E7A  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2012  000E7C  0100               	movlb	0	; () banked
  2013  000E7E  6FBF               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2014  000E80  6BC0               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2015  000E82  0100               	movlb	0	; () banked
  2016  000E84  51BD               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2017  000E86  0100               	movlb	0	; () banked
  2018  000E88  27BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2019  000E8A  0100               	movlb	0	; () banked
  2020  000E8C  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2021  000E8E  0100               	movlb	0	; () banked
  2022  000E90  23C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2023  000E92  0E41               	movlw	low _Nybble2MSBitNum
  2024  000E94  0100               	movlb	0	; () banked
  2025  000E96  25BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2026  000E98  6EF6               	movwf	tblptrl,c
  2027  000E9A  0E03               	movlw	high _Nybble2MSBitNum
  2028  000E9C  21C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2029  000E9E  6EF7               	movwf	tblptrh,c
  2030  000EA0                     	if	0	;There are less than 3 active tblptr bytes
  2031  000EA0                     	endif
  2032  000EA0  0008               	tblrd		*
  2033  000EA2  CFF5 F0C1          	movff	tablat,??_ES_GetMSBitSet+4
  2034  000EA6  0100               	movlb	0	; () banked
  2035  000EA8  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2036  000EAA  0D04               	mullw	4
  2037  000EAC  50F3               	movf	prodl,w,c
  2038  000EAE  0100               	movlb	0	; () banked
  2039  000EB0  25C1               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2040  000EB2  0100               	movlb	0	; () banked
  2041  000EB4  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2042                           
  2043                           ;ES_LookupTables.c: 96: break;
  2044  000EB6  D003               	goto	l2208
  2045  000EB8                     l2204:
  2046                           
  2047                           ; BSR set to: 0
  2048  000EB8  0100               	movlb	0	; () banked
  2049  000EBA  07C4               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2050  000EBC  D7B7               	goto	l2194
  2051  000EBE                     l2208:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;ES_LookupTables.c: 97: }
  2055                           ;ES_LookupTables.c: 98: }
  2056                           ;ES_LookupTables.c: 99: return ReturnVal;
  2057  000EBE  0100               	movlb	0	; () banked
  2058  000EC0  51C2               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2059  000EC2  0012               	return	
  2060  000EC4                     __end_of_ES_GetMSBitSet:
  2061                           	opt stack 0
  2062                           tosu	equ	0xFFF
  2063                           tosh	equ	0xFFE
  2064                           tosl	equ	0xFFD
  2065                           pclath	equ	0xFFA
  2066                           tblptru	equ	0xFF8
  2067                           tblptrh	equ	0xFF7
  2068                           tblptrl	equ	0xFF6
  2069                           tablat	equ	0xFF5
  2070                           prodh	equ	0xFF4
  2071                           prodl	equ	0xFF3
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           postdec1	equ	0xFE5
  2075                           fsr1l	equ	0xFE1
  2076                           indf2	equ	0xFDF
  2077                           postinc2	equ	0xFDE
  2078                           postdec2	equ	0xFDD
  2079                           fsr2h	equ	0xFDA
  2080                           fsr2l	equ	0xFD9
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function _RunPatternControlService *****************
  2084 ;; Defined at:
  2085 ;;		line 157 in file "Pattern_ControlService.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  testEvent       3   46[BANK0 ] struct ES_Event_t
  2090 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  3   40[BANK0 ] struct ES_Event_t
  2093 ;; Registers used:
  2094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2100 ;;      Params:         0       3       0       0
  2101 ;;      Locals:         0       6       0       0
  2102 ;;      Temps:          0       0       0       0
  2103 ;;      Totals:         0       9       0       0
  2104 ;;Total ram usage:        9 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:   13
  2107 ;; This function calls:
  2108 ;;		_PausePattern
  2109 ;;		_PostPatternControlService
  2110 ;;		_ShowPattern
  2111 ;;		_StopPattern
  2112 ;; This function is called by:
  2113 ;;		_ES_Run
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text7
  2118  000C02                     __ptext7:
  2119                           	opt stack 0
  2120  000C02                     _RunPatternControlService:
  2121                           	opt stack 16
  2122                           
  2123                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2124                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;incstack = 0
  2128  000C02  0E00               	movlw	0
  2129  000C04  0100               	movlb	0	; () banked
  2130  000C06  6FE6               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2131                           
  2132                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2133  000C08  D049               	goto	l2520
  2134  000C0A                     l2478:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2138  000C0A  0E02               	movlw	2
  2139  000C0C  0100               	movlb	0	; () banked
  2140  000C0E  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2141  000C10  A4D8               	btfss	status,2,c
  2142  000C12  D052               	goto	l324
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;Pattern_ControlService.c: 169: CurrentState = Pattern_Off;
  2146  000C14  0E01               	movlw	1
  2147  000C16  0100               	movlb	0	; () banked
  2148  000C18  6F99               	movwf	_CurrentState& (0+255),b
  2149                           
  2150                           ;Pattern_ControlService.c: 172: ES_Event testEvent;
  2151                           ;Pattern_ControlService.c: 173: testEvent.EventType = PATTERN_START;
  2152  000C1A  0E05               	movlw	5
  2153  000C1C  0100               	movlb	0	; () banked
  2154  000C1E  6FE9               	movwf	RunPatternControlService@testEvent& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;Pattern_ControlService.c: 174: PostPatternControlService(testEvent);
  2158  000C20  C0E9  F0D8         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2159  000C24  C0EA  F0D9         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2160  000C28  C0EB  F0DA         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2161  000C2C  ECBE  F00B         	call	_PostPatternControlService	;wreg free
  2162                           
  2163                           ;Pattern_ControlService.c: 176: }
  2164                           ;Pattern_ControlService.c: 177: break;
  2165  000C30  D043               	goto	l324
  2166  000C32                     l2484:
  2167                           
  2168                           ;Pattern_ControlService.c: 181: if(ThisEvent.EventType == PATTERN_START){
  2169  000C32  0E05               	movlw	5
  2170  000C34  0100               	movlb	0	; () banked
  2171  000C36  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2172  000C38  A4D8               	btfss	status,2,c
  2173  000C3A  D03E               	goto	l324
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;Pattern_ControlService.c: 183: ShowPattern();
  2177  000C3C  EC32  F00B         	call	_ShowPattern	;wreg free
  2178  000C40                     l2488:
  2179                           
  2180                           ;Pattern_ControlService.c: 185: CurrentState = Pattern_Running;
  2181  000C40  0E02               	movlw	2
  2182  000C42  D029               	goto	L4
  2183  000C44                     l2490:
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;Pattern_ControlService.c: 191: if(ThisEvent.EventType == ES_TIMEOUT){
  2187  000C44  0E03               	movlw	3
  2188  000C46  0100               	movlb	0	; () banked
  2189  000C48  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2190  000C4A  A4D8               	btfss	status,2,c
  2191  000C4C  D003               	goto	l2494
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;Pattern_ControlService.c: 193: ShowPattern();
  2195  000C4E  EC32  F00B         	call	_ShowPattern	;wreg free
  2196                           
  2197                           ;Pattern_ControlService.c: 194: }
  2198  000C52  D032               	goto	l324
  2199  000C54                     l2494:
  2200                           
  2201                           ;Pattern_ControlService.c: 196: else if(ThisEvent.EventType == PATTERN_END){
  2202  000C54  0E06               	movlw	6
  2203  000C56  0100               	movlb	0	; () banked
  2204  000C58  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2205  000C5A  A4D8               	btfss	status,2,c
  2206  000C5C  D003               	goto	l2500
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;Pattern_ControlService.c: 198: StopPattern();
  2210  000C5E  EC7B  F00B         	call	_StopPattern	;wreg free
  2211  000C62  D018               	goto	L12
  2212  000C64                     l2500:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;Pattern_ControlService.c: 203: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2216  000C64  0E07               	movlw	7
  2217  000C66  0100               	movlb	0	; () banked
  2218  000C68  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2219  000C6A  A4D8               	btfss	status,2,c
  2220  000C6C  D025               	goto	l324
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;Pattern_ControlService.c: 205: PausePattern();
  2224  000C6E  ECF6  F00B         	call	_PausePattern	;wreg free
  2225                           
  2226                           ;Pattern_ControlService.c: 207: CurrentState = Pattern_Paused;
  2227  000C72  0E03               	movlw	3
  2228  000C74  D010               	goto	L4
  2229  000C76                     l2506:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;Pattern_ControlService.c: 213: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2233  000C76  0E08               	movlw	8
  2234  000C78  0100               	movlb	0	; () banked
  2235  000C7A  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2236  000C7C  A4D8               	btfss	status,2,c
  2237  000C7E  D003               	goto	l2512
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;Pattern_ControlService.c: 215: ShowPattern();
  2241  000C80  EC32  F00B         	call	_ShowPattern	;wreg free
  2242  000C84  D7DD               	goto	l2488
  2243  000C86                     l2512:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;Pattern_ControlService.c: 220: else if(ThisEvent.EventType == PATTERN_END){
  2247  000C86  0E06               	movlw	6
  2248  000C88  0100               	movlb	0	; () banked
  2249  000C8A  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2250  000C8C  A4D8               	btfss	status,2,c
  2251  000C8E  D014               	goto	l324
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;Pattern_ControlService.c: 222: StopPattern();
  2255  000C90  EC7B  F00B         	call	_StopPattern	;wreg free
  2256  000C94                     L12:
  2257                           
  2258                           ;Pattern_ControlService.c: 224: CurrentState = Pattern_Off;
  2259  000C94  0E01               	movlw	1
  2260  000C96                     L4:
  2261  000C96  0100               	movlb	0	; () banked
  2262  000C98  6F99               	movwf	_CurrentState& (0+255),b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;Pattern_ControlService.c: 227: }
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;Pattern_ControlService.c: 225: }
  2269                           ;Pattern_ControlService.c: 226: break;
  2270                           
  2271                           ; BSR set to: 0
  2272  000C9A  D00E               	goto	l324
  2273  000C9C                     l2520:
  2274                           
  2275                           ; BSR set to: 0
  2276  000C9C  0100               	movlb	0	; () banked
  2277  000C9E  5199               	movf	_CurrentState& (0+255),w,b
  2278                           
  2279                           ; Switch size 1, requested type "space"
  2280                           ; Number of cases is 4, Range of values is 0 to 3
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte           13     7 (average)
  2284                           ;	Chosen strategy is simple_byte
  2285  000CA0  0A00               	xorlw	0	; case 0
  2286  000CA2  B4D8               	btfsc	status,2,c
  2287  000CA4  D7B2               	goto	l2478
  2288  000CA6  0A01               	xorlw	1	; case 1
  2289  000CA8  B4D8               	btfsc	status,2,c
  2290  000CAA  D7C3               	goto	l2484
  2291  000CAC  0A03               	xorlw	3	; case 2
  2292  000CAE  B4D8               	btfsc	status,2,c
  2293  000CB0  D7C9               	goto	l2490
  2294  000CB2  0A01               	xorlw	1	; case 3
  2295  000CB4  B4D8               	btfsc	status,2,c
  2296  000CB6  D7DF               	goto	l2506
  2297  000CB8                     l324:
  2298                           
  2299                           ;Pattern_ControlService.c: 228: return ReturnEvent;
  2300  000CB8  C0E6  F0E3         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2301  000CBC  C0E7  F0E4         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2302  000CC0  C0E8  F0E5         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2303  000CC4  0012               	return		;funcret
  2304  000CC6                     __end_of_RunPatternControlService:
  2305                           	opt stack 0
  2306                           tosu	equ	0xFFF
  2307                           tosh	equ	0xFFE
  2308                           tosl	equ	0xFFD
  2309                           pclath	equ	0xFFA
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1l	equ	0xFE1
  2320                           indf2	equ	0xFDF
  2321                           postinc2	equ	0xFDE
  2322                           postdec2	equ	0xFDD
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _RunSPI32ControlService *****************
  2328 ;; Defined at:
  2329 ;;		line 138 in file "SPI32_ControlService.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  ReturnEvent     3   44[BANK0 ] struct ES_Event_t
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  3   40[BANK0 ] struct ES_Event_t
  2336 ;; Registers used:
  2337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2343 ;;      Params:         0       3       0       0
  2344 ;;      Locals:         0       3       0       0
  2345 ;;      Temps:          0       1       0       0
  2346 ;;      Totals:         0       7       0       0
  2347 ;;Total ram usage:        7 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    7
  2350 ;; This function calls:
  2351 ;;		_GetNextFrame
  2352 ;;		_SPI32_SendByte
  2353 ;; This function is called by:
  2354 ;;		_ES_Run
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text8
  2359  000774                     __ptext8:
  2360                           	opt stack 0
  2361  000774                     _RunSPI32ControlService:
  2362                           	opt stack 22
  2363                           
  2364                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2365                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2366                           
  2367                           ;incstack = 0
  2368  000774  0E00               	movlw	0
  2369  000776  0100               	movlb	0	; () banked
  2370  000778  6FE7               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2371                           
  2372                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2373  00077A  D05F               	goto	l2588
  2374  00077C                     l2544:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2378  00077C  0E02               	movlw	2
  2379  00077E  0100               	movlb	0	; () banked
  2380  000780  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2381  000782  A4D8               	btfss	status,2,c
  2382  000784  D06E               	goto	l453
  2383  000786  D055               	goto	l2584
  2384  000788                     l2548:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2388  000788  0E09               	movlw	9
  2389  00078A  0100               	movlb	0	; () banked
  2390  00078C  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2391  00078E  A4D8               	btfss	status,2,c
  2392  000790  D068               	goto	l453
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2396  000792  EC58  F00B         	call	_GetNextFrame	;wreg free
  2397  000796  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2398  00079A  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2399  00079E  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2400  0007A2  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2401                           
  2402                           ;SPI32_ControlService.c: 163: SPI32_SendByte(CurrentFrame);
  2403  0007A6  0100               	movlb	0	; () banked
  2404  0007A8  5180               	movf	_CurrentFrame& (0+255),w,b
  2405  0007AA  ECED  F00B         	call	_SPI32_SendByte
  2406  0007AE                     l2554:
  2407                           
  2408                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2409  0007AE  0E02               	movlw	2
  2410  0007B0  D041               	goto	L10
  2411  0007B2                     l2556:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2415  0007B2  0E03               	movlw	3
  2416  0007B4  0100               	movlb	0	; () banked
  2417  0007B6  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2418  0007B8  A4D8               	btfss	status,2,c
  2419  0007BA  D053               	goto	l453
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;SPI32_ControlService.c: 174: SPI32_SendByte(CurrentFrame>>8);
  2423  0007BC  0100               	movlb	0	; () banked
  2424  0007BE  5181               	movf	(_CurrentFrame+1)& (0+255),w,b
  2425  0007C0  ECED  F00B         	call	_SPI32_SendByte
  2426                           
  2427                           ;SPI32_ControlService.c: 176: CurrentState = SPI32_SendingByte2;
  2428  0007C4  0E03               	movlw	3
  2429  0007C6  D036               	goto	L10
  2430  0007C8                     l2562:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;SPI32_ControlService.c: 184: if(ThisEvent.EventType == ES_TIMEOUT){
  2434  0007C8  0E03               	movlw	3
  2435  0007CA  0100               	movlb	0	; () banked
  2436  0007CC  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2437  0007CE  A4D8               	btfss	status,2,c
  2438  0007D0  D048               	goto	l453
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;SPI32_ControlService.c: 186: SPI32_SendByte(CurrentFrame>>16);
  2442  0007D2  0100               	movlb	0	; () banked
  2443  0007D4  5182               	movf	(_CurrentFrame+2)& (0+255),w,b
  2444  0007D6  ECED  F00B         	call	_SPI32_SendByte
  2445                           
  2446                           ;SPI32_ControlService.c: 188: CurrentState = SPI32_SendingByte3;
  2447  0007DA  0E04               	movlw	4
  2448  0007DC  D02B               	goto	L10
  2449  0007DE                     l2568:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;SPI32_ControlService.c: 196: if(ThisEvent.EventType == ES_TIMEOUT){
  2453  0007DE  0E03               	movlw	3
  2454  0007E0  0100               	movlb	0	; () banked
  2455  0007E2  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2456  0007E4  A4D8               	btfss	status,2,c
  2457  0007E6  D03D               	goto	l453
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;SPI32_ControlService.c: 198: SPI32_SendByte(CurrentFrame>>24);
  2461  0007E8  0100               	movlb	0	; () banked
  2462  0007EA  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2463  0007EC  ECED  F00B         	call	_SPI32_SendByte
  2464                           
  2465                           ;SPI32_ControlService.c: 200: CurrentState = SPI32_SendingByte4;
  2466  0007F0  0E05               	movlw	5
  2467  0007F2  D020               	goto	L10
  2468  0007F4                     l2574:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;SPI32_ControlService.c: 207: if(ThisEvent.EventType == ES_TIMEOUT){
  2472  0007F4  0E03               	movlw	3
  2473  0007F6  0100               	movlb	0	; () banked
  2474  0007F8  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2475  0007FA  A4D8               	btfss	status,2,c
  2476  0007FC  D032               	goto	l453
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;SPI32_ControlService.c: 209: if(FrameIndex++ < NumFrames){
  2480  0007FE  0100               	movlb	0	; () banked
  2481  000800  2B9A               	incf	_FrameIndex& (0+255),f,b
  2482  000802  059A               	decf	_FrameIndex& (0+255),w,b
  2483  000804  0100               	movlb	0	; () banked
  2484  000806  6FE6               	movwf	??_RunSPI32ControlService& (0+255),b
  2485  000808  0100               	movlb	0	; () banked
  2486  00080A  519D               	movf	_NumFrames& (0+255),w,b
  2487  00080C  0100               	movlb	0	; () banked
  2488  00080E  5DE6               	subwf	??_RunSPI32ControlService& (0+255),w,b
  2489  000810  B0D8               	btfsc	status,0,c
  2490  000812  D00F               	goto	l2584
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;SPI32_ControlService.c: 211: CurrentFrame = GetNextFrame();
  2494  000814  EC58  F00B         	call	_GetNextFrame	;wreg free
  2495  000818  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2496  00081C  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2497  000820  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2498  000824  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2499                           
  2500                           ;SPI32_ControlService.c: 213: SPI32_SendByte(CurrentFrame);
  2501  000828  0100               	movlb	0	; () banked
  2502  00082A  5180               	movf	_CurrentFrame& (0+255),w,b
  2503  00082C  ECED  F00B         	call	_SPI32_SendByte
  2504  000830  D7BE               	goto	l2554
  2505  000832                     l2584:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;SPI32_ControlService.c: 218: else{
  2509                           ;SPI32_ControlService.c: 220: CurrentState = SPI32_Waiting4Send;
  2510  000832  0E01               	movlw	1
  2511  000834                     L10:
  2512  000834  0100               	movlb	0	; () banked
  2513  000836  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;SPI32_ControlService.c: 225: }
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;SPI32_ControlService.c: 221: }
  2520                           ;SPI32_ControlService.c: 222: }
  2521                           ;SPI32_ControlService.c: 223: break;
  2522                           
  2523                           ; BSR set to: 0
  2524  000838  D014               	goto	l453
  2525  00083A                     l2588:
  2526                           
  2527                           ; BSR set to: 0
  2528  00083A  0100               	movlb	0	; () banked
  2529  00083C  5197               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2530                           
  2531                           ; Switch size 1, requested type "space"
  2532                           ; Number of cases is 6, Range of values is 0 to 5
  2533                           ; switch strategies available:
  2534                           ; Name         Instructions Cycles
  2535                           ; simple_byte           19    10 (average)
  2536                           ;	Chosen strategy is simple_byte
  2537  00083E  0A00               	xorlw	0	; case 0
  2538  000840  B4D8               	btfsc	status,2,c
  2539  000842  D79C               	goto	l2544
  2540  000844  0A01               	xorlw	1	; case 1
  2541  000846  B4D8               	btfsc	status,2,c
  2542  000848  D79F               	goto	l2548
  2543  00084A  0A03               	xorlw	3	; case 2
  2544  00084C  B4D8               	btfsc	status,2,c
  2545  00084E  D7B1               	goto	l2556
  2546  000850  0A01               	xorlw	1	; case 3
  2547  000852  B4D8               	btfsc	status,2,c
  2548  000854  D7B9               	goto	l2562
  2549  000856  0A07               	xorlw	7	; case 4
  2550  000858  B4D8               	btfsc	status,2,c
  2551  00085A  D7C1               	goto	l2568
  2552  00085C  0A01               	xorlw	1	; case 5
  2553  00085E  B4D8               	btfsc	status,2,c
  2554  000860  D7C9               	goto	l2574
  2555  000862                     l453:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;SPI32_ControlService.c: 226: return ReturnEvent;
  2559  000862  C0E7  F0E3         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2560  000866  C0E8  F0E4         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2561  00086A  C0E9  F0E5         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2562                           
  2563                           ; BSR set to: 0
  2564  00086E  0012               	return		;funcret
  2565  000870                     __end_of_RunSPI32ControlService:
  2566                           	opt stack 0
  2567                           tosu	equ	0xFFF
  2568                           tosh	equ	0xFFE
  2569                           tosl	equ	0xFFD
  2570                           pclath	equ	0xFFA
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           prodh	equ	0xFF4
  2576                           prodl	equ	0xFF3
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _SPI32_SendByte *****************
  2589 ;; Defined at:
  2590 ;;		line 84 in file "SPI32_HW.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  newByte         1    wreg     unsigned char 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  newByte         1    0[BANK0 ] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2604 ;;      Params:         0       0       0       0
  2605 ;;      Locals:         0       1       0       0
  2606 ;;      Temps:          0       0       0       0
  2607 ;;      Totals:         0       1       0       0
  2608 ;;Total ram usage:        1 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    6
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_RunSPI32ControlService
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text9
  2619  0017DA                     __ptext9:
  2620                           	opt stack 0
  2621  0017DA                     _SPI32_SendByte:
  2622                           	opt stack 22
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;incstack = 0
  2626                           ;SPI32_SendByte@newByte stored from wreg
  2627  0017DA  0100               	movlb	0	; () banked
  2628  0017DC  6FBB               	movwf	SPI32_SendByte@newByte& (0+255),b
  2629                           
  2630                           ;SPI32_HW.c: 97: SSPBUF = newByte;
  2631  0017DE  C0BB  FFC9         	movff	SPI32_SendByte@newByte,4041	;volatile
  2632  0017E2  0012               	return		;funcret
  2633  0017E4                     __end_of_SPI32_SendByte:
  2634                           	opt stack 0
  2635                           tosu	equ	0xFFF
  2636                           tosh	equ	0xFFE
  2637                           tosl	equ	0xFFD
  2638                           pclath	equ	0xFFA
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           postdec1	equ	0xFE5
  2648                           fsr1l	equ	0xFE1
  2649                           indf2	equ	0xFDF
  2650                           postinc2	equ	0xFDE
  2651                           postdec2	equ	0xFDD
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _GetNextFrame *****************
  2657 ;; Defined at:
  2658 ;;		line 248 in file "SPI32_ControlService.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  4    0[BANK0 ] unsigned long 
  2665 ;; Registers used:
  2666 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2672 ;;      Params:         0       4       0       0
  2673 ;;      Locals:         0       0       0       0
  2674 ;;      Temps:          0       0       0       0
  2675 ;;      Totals:         0       4       0       0
  2676 ;;Total ram usage:        4 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    6
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_RunSPI32ControlService
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text10
  2687  0016B0                     __ptext10:
  2688                           	opt stack 0
  2689  0016B0                     _GetNextFrame:
  2690                           	opt stack 22
  2691                           
  2692                           ;SPI32_ControlService.c: 249: return *(FramePointer++);
  2693                           
  2694                           ;incstack = 0
  2695  0016B0  C08F  FFD9         	movff	_FramePointer,fsr2l
  2696  0016B4  C090  FFDA         	movff	_FramePointer+1,fsr2h
  2697  0016B8  0100               	movlb	0	; () banked
  2698  0016BA  0E04               	movlw	4
  2699  0016BC  278F               	addwf	_FramePointer& (0+255),f,b
  2700  0016BE  0E00               	movlw	0
  2701  0016C0  2390               	addwfc	(_FramePointer+1)& (0+255),f,b
  2702  0016C2  CFDE F0BB          	movff	postinc2,?_GetNextFrame
  2703  0016C6  CFDE F0BC          	movff	postinc2,?_GetNextFrame+1
  2704  0016CA  CFDE F0BD          	movff	postinc2,?_GetNextFrame+2
  2705  0016CE  CFDE F0BE          	movff	postinc2,?_GetNextFrame+3
  2706  0016D2  0012               	return	
  2707  0016D4                     __end_of_GetNextFrame:
  2708                           	opt stack 0
  2709                           tosu	equ	0xFFF
  2710                           tosh	equ	0xFFE
  2711                           tosl	equ	0xFFD
  2712                           pclath	equ	0xFFA
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           postinc0	equ	0xFEE
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           fsr2h	equ	0xFDA
  2727                           fsr2l	equ	0xFD9
  2728                           status	equ	0xFD8
  2729                           
  2730 ;; *************** function _StopPattern *****************
  2731 ;; Defined at:
  2732 ;;		line 280 in file "Pattern_ControlService.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2746 ;;      Params:         0       0       0       0
  2747 ;;      Locals:         0       0       0       0
  2748 ;;      Temps:          0       0       0       0
  2749 ;;      Totals:         0       0       0       0
  2750 ;;Total ram usage:        0 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:   12
  2753 ;; This function calls:
  2754 ;;		_DotStar_Off
  2755 ;;		_ES_Timer_StopTimer
  2756 ;;		_ResetPattern
  2757 ;; This function is called by:
  2758 ;;		_RunPatternControlService
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text11
  2763  0016F6                     __ptext11:
  2764                           	opt stack 0
  2765  0016F6                     _StopPattern:
  2766                           	opt stack 16
  2767                           
  2768                           ;Pattern_ControlService.c: 281: PatternConfigs[0] = 0;
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;incstack = 0
  2772  0016F6  0E00               	movlw	0
  2773  0016F8  0100               	movlb	0	; () banked
  2774  0016FA  6FF2               	movwf	_PatternConfigs& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  2778  0016FC  0E00               	movlw	0
  2779  0016FE  ECDB  F009         	call	_ES_Timer_StopTimer
  2780                           
  2781                           ;Pattern_ControlService.c: 285: DotStar_Off();
  2782  001702  EC89  F00B         	call	_DotStar_Off	;wreg free
  2783                           
  2784                           ;Pattern_ControlService.c: 287: ResetPattern();
  2785  001706  ECF2  F00B         	call	_ResetPattern	;wreg free
  2786                           
  2787                           ;Pattern_ControlService.c: 289: PatternConfigs[0] = 0;
  2788  00170A  0E00               	movlw	0
  2789  00170C  0100               	movlb	0	; () banked
  2790  00170E  6FF2               	movwf	_PatternConfigs& (0+255),b
  2791                           
  2792                           ; BSR set to: 0
  2793  001710  0012               	return		;funcret
  2794  001712                     __end_of_StopPattern:
  2795                           	opt stack 0
  2796                           tosu	equ	0xFFF
  2797                           tosh	equ	0xFFE
  2798                           tosl	equ	0xFFD
  2799                           pclath	equ	0xFFA
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1l	equ	0xFE1
  2810                           indf2	equ	0xFDF
  2811                           postinc2	equ	0xFDE
  2812                           postdec2	equ	0xFDD
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _ResetPattern *****************
  2818 ;; Defined at:
  2819 ;;		line 120 in file "Pattern_RGBPatterns.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2833 ;;      Params:         0       0       0       0
  2834 ;;      Locals:         0       0       0       0
  2835 ;;      Temps:          0       0       0       0
  2836 ;;      Totals:         0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    6
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_StopPattern
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text12
  2848  0017E4                     __ptext12:
  2849                           	opt stack 0
  2850  0017E4                     _ResetPattern:
  2851                           	opt stack 21
  2852                           
  2853                           ;Pattern_RGBPatterns.c: 122: PatternStepCounter=0;
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;incstack = 0
  2857  0017E4  0E00               	movlw	0
  2858  0017E6  0100               	movlb	0	; () banked
  2859  0017E8  6F9E               	movwf	_PatternStepCounter& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862  0017EA  0012               	return		;funcret
  2863  0017EC                     __end_of_ResetPattern:
  2864                           	opt stack 0
  2865                           tosu	equ	0xFFF
  2866                           tosh	equ	0xFFE
  2867                           tosl	equ	0xFFD
  2868                           pclath	equ	0xFFA
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _DotStar_Off *****************
  2887 ;; Defined at:
  2888 ;;		line 73 in file "Pattern_DotStarLED.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2902 ;;      Params:         0       0       0       0
  2903 ;;      Locals:         0       0       0       0
  2904 ;;      Temps:          0       0       0       0
  2905 ;;      Totals:         0       0       0       0
  2906 ;;Total ram usage:        0 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:   11
  2909 ;; This function calls:
  2910 ;;		_SPI32_TransmitFrames
  2911 ;; This function is called by:
  2912 ;;		_StopPattern
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text13
  2917  001712                     __ptext13:
  2918                           	opt stack 0
  2919  001712                     _DotStar_Off:
  2920                           	opt stack 16
  2921                           
  2922                           ;Pattern_DotStarLED.c: 75: SPI32_TransmitFrames(OffFrames,Length+2);
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;incstack = 0
  2926  001712  0E00               	movlw	low _OffFrames
  2927  001714  0100               	movlb	0	; () banked
  2928  001716  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  2929  001718  0E02               	movlw	high _OffFrames
  2930  00171A  0100               	movlb	0	; () banked
  2931  00171C  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  2932  00171E  0100               	movlb	0	; () banked
  2933  001720  519B               	movf	_Length& (0+255),w,b
  2934  001722  0F02               	addlw	2
  2935  001724  0100               	movlb	0	; () banked
  2936  001726  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  2937  001728  EC19  F00B         	call	_SPI32_TransmitFrames	;wreg free
  2938  00172C  0012               	return		;funcret
  2939  00172E                     __end_of_DotStar_Off:
  2940                           	opt stack 0
  2941                           tosu	equ	0xFFF
  2942                           tosh	equ	0xFFE
  2943                           tosl	equ	0xFFD
  2944                           pclath	equ	0xFFA
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           postdec1	equ	0xFE5
  2954                           fsr1l	equ	0xFE1
  2955                           indf2	equ	0xFDF
  2956                           postinc2	equ	0xFDE
  2957                           postdec2	equ	0xFDD
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _ShowPattern *****************
  2963 ;; Defined at:
  2964 ;;		line 270 in file "Pattern_ControlService.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2978 ;;      Params:         0       0       0       0
  2979 ;;      Locals:         0       0       0       0
  2980 ;;      Temps:          0       0       0       0
  2981 ;;      Totals:         0       0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:   12
  2985 ;; This function calls:
  2986 ;;		_DotStar_Show
  2987 ;;		_ES_Timer_InitTimer
  2988 ;;		_UpdatePattern
  2989 ;; This function is called by:
  2990 ;;		_RunPatternControlService
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text14
  2995  001664                     __ptext14:
  2996                           	opt stack 0
  2997  001664                     _ShowPattern:
  2998                           	opt stack 16
  2999                           
  3000                           ;Pattern_ControlService.c: 272: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3001                           
  3002                           ;incstack = 0
  3003  001664  C0F6  F0BB         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3004  001668  0100               	movlb	0	; () banked
  3005  00166A  6BBC               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3006  00166C  0E00               	movlw	0
  3007  00166E  EC8F  F008         	call	_ES_Timer_InitTimer
  3008                           
  3009                           ;Pattern_ControlService.c: 274: DotStar_Show(UpdatePattern());
  3010  001672  ECDF  F001         	call	_UpdatePattern	;wreg free
  3011  001676  C0C7  F0E1         	movff	?_UpdatePattern,DotStar_Show@pixelPointer
  3012  00167A  C0C8  F0E2         	movff	?_UpdatePattern+1,DotStar_Show@pixelPointer+1
  3013  00167E  EC6E  F00A         	call	_DotStar_Show	;wreg free
  3014                           
  3015                           ;Pattern_ControlService.c: 276: PatternConfigs[0] = 1;
  3016  001682  0E01               	movlw	1
  3017  001684  0100               	movlb	0	; () banked
  3018  001686  6FF2               	movwf	_PatternConfigs& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021  001688  0012               	return		;funcret
  3022  00168A                     __end_of_ShowPattern:
  3023                           	opt stack 0
  3024                           tosu	equ	0xFFF
  3025                           tosh	equ	0xFFE
  3026                           tosl	equ	0xFFD
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           postdec2	equ	0xFDD
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _UpdatePattern *****************
  3046 ;; Defined at:
  3047 ;;		line 76 in file "Pattern_RGBPatterns.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  i               1   22[BANK0 ] unsigned char 
  3052 ;;  patternID       1   21[BANK0 ] unsigned char 
  3053 ;;  brightness      1   20[BANK0 ] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  2   12[BANK0 ] PTR unsigned long 
  3056 ;; Registers used:
  3057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3063 ;;      Params:         0       2       0       0
  3064 ;;      Locals:         0       3       0       0
  3065 ;;      Temps:          0       6       0       0
  3066 ;;      Totals:         0      11       0       0
  3067 ;;Total ram usage:       11 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    7
  3070 ;; This function calls:
  3071 ;;		___lbmod
  3072 ;;		___llmod
  3073 ;;		___lmul
  3074 ;; This function is called by:
  3075 ;;		_ShowPattern
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text15
  3080  0003BE                     __ptext15:
  3081                           	opt stack 0
  3082  0003BE                     _UpdatePattern:
  3083                           	opt stack 20
  3084                           
  3085                           ;Pattern_RGBPatterns.c: 78: uint8_t patternID = PatternConfigs[1];
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;incstack = 0
  3089  0003BE  0100               	movlb	0	; () banked
  3090  0003C0  EE20 F001          	lfsr	2,1
  3091  0003C4  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3092  0003C6  26D9               	addwf	fsr2l,f,c
  3093  0003C8  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3094  0003CA  22DA               	addwfc	fsr2h,f,c
  3095  0003CC  50DF               	movf	indf2,w,c
  3096  0003CE  0100               	movlb	0	; () banked
  3097  0003D0  6FD0               	movwf	UpdatePattern@patternID& (0+255),b
  3098                           
  3099                           ;Pattern_RGBPatterns.c: 79: uint8_t brightness = PatternConfigs[2];
  3100  0003D2  0100               	movlb	0	; () banked
  3101  0003D4  EE20 F002          	lfsr	2,2
  3102  0003D8  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3103  0003DA  26D9               	addwf	fsr2l,f,c
  3104  0003DC  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3105  0003DE  22DA               	addwfc	fsr2h,f,c
  3106  0003E0  50DF               	movf	indf2,w,c
  3107  0003E2  0100               	movlb	0	; () banked
  3108  0003E4  6FCF               	movwf	UpdatePattern@brightness& (0+255),b
  3109                           
  3110                           ;Pattern_RGBPatterns.c: 82: switch(patternID){
  3111  0003E6  D08C               	goto	l2254
  3112  0003E8                     l2238:
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3116  0003E8  0E00               	movlw	0
  3117  0003EA  0100               	movlb	0	; () banked
  3118  0003EC  6FD1               	movwf	UpdatePattern@i& (0+255),b
  3119  0003EE  D055               	goto	l2244
  3120  0003F0                     l2240:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = (0xFF000000 | (i == PatternStepCounter)*G
      +                          enColors[TestColor]);
  3124  0003F0  0100               	movlb	0	; () banked
  3125  0003F2  519E               	movf	_PatternStepCounter& (0+255),w,b
  3126  0003F4  0100               	movlb	0	; () banked
  3127  0003F6  19D1               	xorwf	UpdatePattern@i& (0+255),w,b
  3128  0003F8  A4D8               	btfss	status,2,c
  3129  0003FA  D002               	goto	u1310
  3130  0003FC  0E01               	movlw	1
  3131  0003FE  D001               	goto	u1320
  3132  000400                     u1310:
  3133  000400  0E00               	movlw	0
  3134  000402                     u1320:
  3135  000402  0100               	movlb	0	; () banked
  3136  000404  6FBB               	movwf	___lmul@multiplier& (0+255),b
  3137  000406  6BBC               	clrf	(___lmul@multiplier+1)& (0+255),b
  3138  000408  6BBD               	clrf	(___lmul@multiplier+2)& (0+255),b
  3139  00040A  6BBE               	clrf	(___lmul@multiplier+3)& (0+255),b
  3140  00040C  0E80               	movlw	low _GenColors
  3141  00040E  0100               	movlb	0	; () banked
  3142  000410  6FC9               	movwf	??_UpdatePattern& (0+255),b
  3143  000412  0E01               	movlw	high _GenColors
  3144  000414  0100               	movlb	0	; () banked
  3145  000416  6FCA               	movwf	(??_UpdatePattern+1)& (0+255),b
  3146  000418  90D8               	bcf	status,0,c
  3147  00041A  0100               	movlb	0	; () banked
  3148  00041C  3584               	rlcf	_TestColor& (0+255),w,b
  3149  00041E  6ED9               	movwf	fsr2l,c
  3150  000420  0100               	movlb	0	; () banked
  3151  000422  3585               	rlcf	(_TestColor+1)& (0+255),w,b
  3152  000424  6EDA               	movwf	fsr2h,c
  3153  000426  90D8               	bcf	status,0,c
  3154  000428  36D9               	rlcf	fsr2l,f,c
  3155  00042A  36DA               	rlcf	fsr2h,f,c
  3156  00042C  0100               	movlb	0	; () banked
  3157  00042E  51C9               	movf	??_UpdatePattern& (0+255),w,b
  3158  000430  26D9               	addwf	fsr2l,f,c
  3159  000432  0100               	movlb	0	; () banked
  3160  000434  51CA               	movf	(??_UpdatePattern+1)& (0+255),w,b
  3161  000436  22DA               	addwfc	fsr2h,f,c
  3162  000438  CFDE F0BF          	movff	postinc2,___lmul@multiplicand
  3163  00043C  CFDE F0C0          	movff	postinc2,___lmul@multiplicand+1
  3164  000440  CFDE F0C1          	movff	postinc2,___lmul@multiplicand+2
  3165  000444  CFDE F0C2          	movff	postinc2,___lmul@multiplicand+3
  3166  000448  ECCF  F008         	call	___lmul	;wreg free
  3167  00044C  0E00               	movlw	0
  3168  00044E  0100               	movlb	0	; () banked
  3169  000450  11BB               	iorwf	?___lmul& (0+255),w,b
  3170  000452  0100               	movlb	0	; () banked
  3171  000454  6FCB               	movwf	(??_UpdatePattern+2)& (0+255),b
  3172  000456  0E00               	movlw	0
  3173  000458  0100               	movlb	0	; () banked
  3174  00045A  11BC               	iorwf	(?___lmul+1)& (0+255),w,b
  3175  00045C  0100               	movlb	0	; () banked
  3176  00045E  6FCC               	movwf	(??_UpdatePattern+3)& (0+255),b
  3177  000460  0E00               	movlw	0
  3178  000462  0100               	movlb	0	; () banked
  3179  000464  11BD               	iorwf	(?___lmul+2)& (0+255),w,b
  3180  000466  0100               	movlb	0	; () banked
  3181  000468  6FCD               	movwf	(??_UpdatePattern+4)& (0+255),b
  3182  00046A  0EFF               	movlw	255
  3183  00046C  0100               	movlb	0	; () banked
  3184  00046E  11BE               	iorwf	(?___lmul+3)& (0+255),w,b
  3185  000470  0100               	movlb	0	; () banked
  3186  000472  6FCE               	movwf	(??_UpdatePattern+5)& (0+255),b
  3187  000474  0100               	movlb	0	; () banked
  3188  000476  51D1               	movf	UpdatePattern@i& (0+255),w,b
  3189  000478  0D04               	mullw	4
  3190  00047A  0E80               	movlw	low _PixelPattern
  3191  00047C  24F3               	addwf	prodl,w,c
  3192  00047E  6ED9               	movwf	fsr2l,c
  3193  000480  0E02               	movlw	high _PixelPattern
  3194  000482  20F4               	addwfc	prodh,w,c
  3195  000484  6EDA               	movwf	fsr2h,c
  3196  000486  C0CB  FFDE         	movff	??_UpdatePattern+2,postinc2
  3197  00048A  C0CC  FFDE         	movff	??_UpdatePattern+3,postinc2
  3198  00048E  C0CD  FFDE         	movff	??_UpdatePattern+4,postinc2
  3199  000492  C0CE  FFDE         	movff	??_UpdatePattern+5,postinc2
  3200                           
  3201                           ; BSR set to: 0
  3202  000496  0100               	movlb	0	; () banked
  3203  000498  2BD1               	incf	UpdatePattern@i& (0+255),f,b
  3204  00049A                     l2244:
  3205                           
  3206                           ; BSR set to: 0
  3207  00049A  0100               	movlb	0	; () banked
  3208  00049C  5196               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3209  00049E  0100               	movlb	0	; () banked
  3210  0004A0  5DD1               	subwf	UpdatePattern@i& (0+255),w,b
  3211  0004A2  A0D8               	btfss	status,0,c
  3212  0004A4  D7A5               	goto	l2240
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;Pattern_RGBPatterns.c: 109: }
  3216                           ;Pattern_RGBPatterns.c: 110: if(PatternStepCounter++%Length == 0){
  3217                           
  3218                           ; BSR set to: 0
  3219  0004A6  C096  F0BB         	movff	Pattern_RGBPatterns@Length,___lbmod@divisor
  3220  0004AA  0100               	movlb	0	; () banked
  3221  0004AC  2B9E               	incf	_PatternStepCounter& (0+255),f,b
  3222  0004AE  059E               	decf	_PatternStepCounter& (0+255),w,b
  3223  0004B0  EC4C  F00A         	call	___lbmod
  3224  0004B4  0900               	iorlw	0
  3225  0004B6  A4D8               	btfss	status,2,c
  3226  0004B8  D037               	goto	l2256
  3227                           
  3228                           ;Pattern_RGBPatterns.c: 111: TestColor = TestColor++%13;
  3229  0004BA  C084  F0BB         	movff	_TestColor,___llmod@dividend
  3230  0004BE  C085  F0BC         	movff	_TestColor+1,___llmod@dividend+1
  3231  0004C2  C086  F0BD         	movff	_TestColor+2,___llmod@dividend+2
  3232  0004C6  C087  F0BE         	movff	_TestColor+3,___llmod@dividend+3
  3233  0004CA  0E0D               	movlw	13
  3234  0004CC  0100               	movlb	0	; () banked
  3235  0004CE  6FBF               	movwf	___llmod@divisor& (0+255),b
  3236  0004D0  0E00               	movlw	0
  3237  0004D2  6FC0               	movwf	(___llmod@divisor+1)& (0+255),b
  3238  0004D4  0E00               	movlw	0
  3239  0004D6  6FC1               	movwf	(___llmod@divisor+2)& (0+255),b
  3240  0004D8  0E00               	movlw	0
  3241  0004DA  6FC2               	movwf	(___llmod@divisor+3)& (0+255),b
  3242  0004DC  ECB3  F007         	call	___llmod	;wreg free
  3243  0004E0  C0BB  F084         	movff	?___llmod,_TestColor
  3244  0004E4  C0BC  F085         	movff	?___llmod+1,_TestColor+1
  3245  0004E8  C0BD  F086         	movff	?___llmod+2,_TestColor+2
  3246  0004EC  C0BE  F087         	movff	?___llmod+3,_TestColor+3
  3247  0004F0  0E01               	movlw	1
  3248  0004F2  0100               	movlb	0	; () banked
  3249  0004F4  2784               	addwf	_TestColor& (0+255),f,b
  3250  0004F6  0E00               	movlw	0
  3251  0004F8  2385               	addwfc	(_TestColor+1)& (0+255),f,b
  3252  0004FA  2386               	addwfc	(_TestColor+2)& (0+255),f,b
  3253  0004FC  2387               	addwfc	(_TestColor+3)& (0+255),f,b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;Pattern_RGBPatterns.c: 115: }
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;Pattern_RGBPatterns.c: 112: }
  3260                           ;Pattern_RGBPatterns.c: 113: break;
  3261  0004FE  D014               	goto	l2256
  3262  000500                     l2254:
  3263                           
  3264                           ; BSR set to: 0
  3265  000500  0100               	movlb	0	; () banked
  3266  000502  51D0               	movf	UpdatePattern@patternID& (0+255),w,b
  3267                           
  3268                           ; Switch size 1, requested type "space"
  3269                           ; Number of cases is 6, Range of values is 0 to 255
  3270                           ; switch strategies available:
  3271                           ; Name         Instructions Cycles
  3272                           ; simple_byte           19    10 (average)
  3273                           ;	Chosen strategy is simple_byte
  3274  000504  0A00               	xorlw	0	; case 0
  3275  000506  B4D8               	btfsc	status,2,c
  3276  000508  D00F               	goto	l2256
  3277  00050A  0A01               	xorlw	1	; case 1
  3278  00050C  B4D8               	btfsc	status,2,c
  3279  00050E  D00C               	goto	l2256
  3280  000510  0A03               	xorlw	3	; case 2
  3281  000512  B4D8               	btfsc	status,2,c
  3282  000514  D009               	goto	l2256
  3283  000516  0A01               	xorlw	1	; case 3
  3284  000518  B4D8               	btfsc	status,2,c
  3285  00051A  D006               	goto	l2256
  3286  00051C  0A07               	xorlw	7	; case 4
  3287  00051E  B4D8               	btfsc	status,2,c
  3288  000520  D003               	goto	l2256
  3289  000522  0AFB               	xorlw	251	; case 255
  3290  000524  B4D8               	btfsc	status,2,c
  3291  000526  D760               	goto	l2238
  3292  000528                     l2256:
  3293                           
  3294                           ;Pattern_RGBPatterns.c: 117: return PixelPattern;
  3295  000528  0E80               	movlw	low _PixelPattern
  3296  00052A  0100               	movlb	0	; () banked
  3297  00052C  6FC7               	movwf	?_UpdatePattern& (0+255),b
  3298  00052E  0E02               	movlw	high _PixelPattern
  3299  000530  0100               	movlb	0	; () banked
  3300  000532  6FC8               	movwf	(?_UpdatePattern+1)& (0+255),b
  3301  000534  0012               	return	
  3302  000536                     __end_of_UpdatePattern:
  3303                           	opt stack 0
  3304                           tosu	equ	0xFFF
  3305                           tosh	equ	0xFFE
  3306                           tosl	equ	0xFFD
  3307                           pclath	equ	0xFFA
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           postinc0	equ	0xFEE
  3315                           wreg	equ	0xFE8
  3316                           postdec1	equ	0xFE5
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           postdec2	equ	0xFDD
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function ___lmul *****************
  3326 ;; Defined at:
  3327 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3330 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  product         4    8[BANK0 ] unsigned long 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  4    0[BANK0 ] unsigned long 
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3342 ;;      Params:         0       8       0       0
  3343 ;;      Locals:         0       4       0       0
  3344 ;;      Temps:          0       0       0       0
  3345 ;;      Totals:         0      12       0       0
  3346 ;;Total ram usage:       12 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    6
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_UpdatePattern
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text16
  3357  00119E                     __ptext16:
  3358                           	opt stack 0
  3359  00119E                     ___lmul:
  3360                           	opt stack 20
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;incstack = 0
  3364  00119E  0E00               	movlw	0
  3365  0011A0  0100               	movlb	0	; () banked
  3366  0011A2  6FC3               	movwf	___lmul@product& (0+255),b
  3367  0011A4  0E00               	movlw	0
  3368  0011A6  6FC4               	movwf	(___lmul@product+1)& (0+255),b
  3369  0011A8  0E00               	movlw	0
  3370  0011AA  6FC5               	movwf	(___lmul@product+2)& (0+255),b
  3371  0011AC  0E00               	movlw	0
  3372  0011AE  6FC6               	movwf	(___lmul@product+3)& (0+255),b
  3373  0011B0                     l2110:
  3374                           
  3375                           ; BSR set to: 0
  3376  0011B0  0100               	movlb	0	; () banked
  3377  0011B2  A1BB               	btfss	___lmul@multiplier& (0+255),0,b
  3378  0011B4  D010               	goto	l2114
  3379                           
  3380                           ; BSR set to: 0
  3381  0011B6  0100               	movlb	0	; () banked
  3382  0011B8  51BF               	movf	___lmul@multiplicand& (0+255),w,b
  3383  0011BA  0100               	movlb	0	; () banked
  3384  0011BC  27C3               	addwf	___lmul@product& (0+255),f,b
  3385  0011BE  0100               	movlb	0	; () banked
  3386  0011C0  51C0               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3387  0011C2  0100               	movlb	0	; () banked
  3388  0011C4  23C4               	addwfc	(___lmul@product+1)& (0+255),f,b
  3389  0011C6  0100               	movlb	0	; () banked
  3390  0011C8  51C1               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3391  0011CA  0100               	movlb	0	; () banked
  3392  0011CC  23C5               	addwfc	(___lmul@product+2)& (0+255),f,b
  3393  0011CE  0100               	movlb	0	; () banked
  3394  0011D0  51C2               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3395  0011D2  0100               	movlb	0	; () banked
  3396  0011D4  23C6               	addwfc	(___lmul@product+3)& (0+255),f,b
  3397  0011D6                     l2114:
  3398                           
  3399                           ; BSR set to: 0
  3400  0011D6  0100               	movlb	0	; () banked
  3401  0011D8  90D8               	bcf	status,0,c
  3402  0011DA  37BF               	rlcf	___lmul@multiplicand& (0+255),f,b
  3403  0011DC  37C0               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3404  0011DE  37C1               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3405  0011E0  37C2               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3406                           
  3407                           ; BSR set to: 0
  3408  0011E2  0100               	movlb	0	; () banked
  3409  0011E4  90D8               	bcf	status,0,c
  3410  0011E6  33BE               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3411  0011E8  33BD               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3412  0011EA  33BC               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3413  0011EC  33BB               	rrcf	___lmul@multiplier& (0+255),f,b
  3414  0011EE  0100               	movlb	0	; () banked
  3415  0011F0  51BB               	movf	___lmul@multiplier& (0+255),w,b
  3416  0011F2  0100               	movlb	0	; () banked
  3417  0011F4  11BC               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3418  0011F6  0100               	movlb	0	; () banked
  3419  0011F8  11BD               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3420  0011FA  0100               	movlb	0	; () banked
  3421  0011FC  11BE               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3422  0011FE  A4D8               	btfss	status,2,c
  3423  001200  D7D7               	goto	l2110
  3424                           
  3425                           ; BSR set to: 0
  3426  001202  C0C3  F0BB         	movff	___lmul@product,?___lmul
  3427  001206  C0C4  F0BC         	movff	___lmul@product+1,?___lmul+1
  3428  00120A  C0C5  F0BD         	movff	___lmul@product+2,?___lmul+2
  3429  00120E  C0C6  F0BE         	movff	___lmul@product+3,?___lmul+3
  3430                           
  3431                           ; BSR set to: 0
  3432  001212  0012               	return		;funcret
  3433  001214                     __end_of___lmul:
  3434                           	opt stack 0
  3435                           tosu	equ	0xFFF
  3436                           tosh	equ	0xFFE
  3437                           tosl	equ	0xFFD
  3438                           pclath	equ	0xFFA
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           postinc0	equ	0xFEE
  3446                           wreg	equ	0xFE8
  3447                           postdec1	equ	0xFE5
  3448                           fsr1l	equ	0xFE1
  3449                           indf2	equ	0xFDF
  3450                           postinc2	equ	0xFDE
  3451                           postdec2	equ	0xFDD
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8
  3455                           
  3456 ;; *************** function ___llmod *****************
  3457 ;; Defined at:
  3458 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  dividend        4    0[BANK0 ] unsigned long 
  3461 ;;  divisor         4    4[BANK0 ] unsigned long 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  counter         1    8[BANK0 ] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  4    0[BANK0 ] unsigned long 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3473 ;;      Params:         0       8       0       0
  3474 ;;      Locals:         0       1       0       0
  3475 ;;      Temps:          0       0       0       0
  3476 ;;      Totals:         0       9       0       0
  3477 ;;Total ram usage:        9 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    6
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_UpdatePattern
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text17
  3488  000F66                     __ptext17:
  3489                           	opt stack 0
  3490  000F66                     ___llmod:
  3491                           	opt stack 20
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;incstack = 0
  3495  000F66  0100               	movlb	0	; () banked
  3496  000F68  51BF               	movf	___llmod@divisor& (0+255),w,b
  3497  000F6A  0100               	movlb	0	; () banked
  3498  000F6C  11C0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3499  000F6E  0100               	movlb	0	; () banked
  3500  000F70  11C1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3501  000F72  0100               	movlb	0	; () banked
  3502  000F74  11C2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3503  000F76  B4D8               	btfsc	status,2,c
  3504  000F78  D03A               	goto	l901
  3505                           
  3506                           ; BSR set to: 0
  3507  000F7A  0E01               	movlw	1
  3508  000F7C  0100               	movlb	0	; () banked
  3509  000F7E  6FC3               	movwf	___llmod@counter& (0+255),b
  3510  000F80  D008               	goto	l2140
  3511  000F82                     l2138:
  3512                           
  3513                           ; BSR set to: 0
  3514  000F82  0100               	movlb	0	; () banked
  3515  000F84  90D8               	bcf	status,0,c
  3516  000F86  37BF               	rlcf	___llmod@divisor& (0+255),f,b
  3517  000F88  37C0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3518  000F8A  37C1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3519  000F8C  37C2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3520  000F8E  0100               	movlb	0	; () banked
  3521  000F90  2BC3               	incf	___llmod@counter& (0+255),f,b
  3522  000F92                     l2140:
  3523                           
  3524                           ; BSR set to: 0
  3525  000F92  0100               	movlb	0	; () banked
  3526  000F94  AFC2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3527  000F96  D7F5               	goto	l2138
  3528  000F98                     l2142:
  3529                           
  3530                           ; BSR set to: 0
  3531  000F98  0100               	movlb	0	; () banked
  3532  000F9A  51BF               	movf	___llmod@divisor& (0+255),w,b
  3533  000F9C  0100               	movlb	0	; () banked
  3534  000F9E  5DBB               	subwf	___llmod@dividend& (0+255),w,b
  3535  000FA0  0100               	movlb	0	; () banked
  3536  000FA2  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3537  000FA4  0100               	movlb	0	; () banked
  3538  000FA6  59BC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3539  000FA8  0100               	movlb	0	; () banked
  3540  000FAA  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3541  000FAC  0100               	movlb	0	; () banked
  3542  000FAE  59BD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3543  000FB0  0100               	movlb	0	; () banked
  3544  000FB2  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3545  000FB4  0100               	movlb	0	; () banked
  3546  000FB6  59BE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3547  000FB8  A0D8               	btfss	status,0,c
  3548  000FBA  D010               	goto	l2146
  3549                           
  3550                           ; BSR set to: 0
  3551  000FBC  0100               	movlb	0	; () banked
  3552  000FBE  51BF               	movf	___llmod@divisor& (0+255),w,b
  3553  000FC0  0100               	movlb	0	; () banked
  3554  000FC2  5FBB               	subwf	___llmod@dividend& (0+255),f,b
  3555  000FC4  0100               	movlb	0	; () banked
  3556  000FC6  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3557  000FC8  0100               	movlb	0	; () banked
  3558  000FCA  5BBC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3559  000FCC  0100               	movlb	0	; () banked
  3560  000FCE  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3561  000FD0  0100               	movlb	0	; () banked
  3562  000FD2  5BBD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3563  000FD4  0100               	movlb	0	; () banked
  3564  000FD6  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3565  000FD8  0100               	movlb	0	; () banked
  3566  000FDA  5BBE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3567  000FDC                     l2146:
  3568                           
  3569                           ; BSR set to: 0
  3570  000FDC  0100               	movlb	0	; () banked
  3571  000FDE  90D8               	bcf	status,0,c
  3572  000FE0  33C2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3573  000FE2  33C1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3574  000FE4  33C0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3575  000FE6  33BF               	rrcf	___llmod@divisor& (0+255),f,b
  3576                           
  3577                           ; BSR set to: 0
  3578  000FE8  0100               	movlb	0	; () banked
  3579  000FEA  2FC3               	decfsz	___llmod@counter& (0+255),f,b
  3580  000FEC  D7D5               	goto	l2142
  3581  000FEE                     l901:
  3582                           
  3583                           ; BSR set to: 0
  3584  000FEE  C0BB  F0BB         	movff	___llmod@dividend,?___llmod
  3585  000FF2  C0BC  F0BC         	movff	___llmod@dividend+1,?___llmod+1
  3586  000FF6  C0BD  F0BD         	movff	___llmod@dividend+2,?___llmod+2
  3587  000FFA  C0BE  F0BE         	movff	___llmod@dividend+3,?___llmod+3
  3588                           
  3589                           ; BSR set to: 0
  3590  000FFE  0012               	return		;funcret
  3591  001000                     __end_of___llmod:
  3592                           	opt stack 0
  3593                           tosu	equ	0xFFF
  3594                           tosh	equ	0xFFE
  3595                           tosl	equ	0xFFD
  3596                           pclath	equ	0xFFA
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           prodh	equ	0xFF4
  3602                           prodl	equ	0xFF3
  3603                           postinc0	equ	0xFEE
  3604                           wreg	equ	0xFE8
  3605                           postdec1	equ	0xFE5
  3606                           fsr1l	equ	0xFE1
  3607                           indf2	equ	0xFDF
  3608                           postinc2	equ	0xFDE
  3609                           postdec2	equ	0xFDD
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _ES_Timer_InitTimer *****************
  3615 ;; Defined at:
  3616 ;;		line 229 in file "ES_Timers.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  Num             1    wreg     unsigned char 
  3619 ;;  NewTime         2    0[BANK0 ] unsigned int 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  Num             1    4[BANK0 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      enum E15473
  3624 ;; Registers used:
  3625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3631 ;;      Params:         0       2       0       0
  3632 ;;      Locals:         0       1       0       0
  3633 ;;      Temps:          0       2       0       0
  3634 ;;      Totals:         0       5       0       0
  3635 ;;Total ram usage:        5 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    6
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_ShowPattern
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text18
  3646  00111E                     __ptext18:
  3647                           	opt stack 0
  3648  00111E                     _ES_Timer_InitTimer:
  3649                           	opt stack 21
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;incstack = 0
  3653                           ;ES_Timer_InitTimer@Num stored from wreg
  3654  00111E  0100               	movlb	0	; () banked
  3655  001120  6FBF               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  3656                           
  3657                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  3658                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  3659                           ;ES_Timers.c: 236: (NewTime == 0) )
  3660  001122  0E10               	movlw	16
  3661  001124  0100               	movlb	0	; () banked
  3662  001126  61BF               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  3663  001128  0012               	return	
  3664                           
  3665                           ; BSR set to: 0
  3666  00112A  0100               	movlb	0	; () banked
  3667  00112C  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3668  00112E  0D02               	mullw	2
  3669  001130  0E21               	movlw	low _Timer2PostFunc
  3670  001132  24F3               	addwf	prodl,w,c
  3671  001134  6EF6               	movwf	tblptrl,c
  3672  001136  0E03               	movlw	high _Timer2PostFunc
  3673  001138  20F4               	addwfc	prodh,w,c
  3674  00113A  6EF7               	movwf	tblptrh,c
  3675  00113C                     	if	0	;There are less than 3 active tblptr bytes
  3676  00113C                     	endif
  3677  00113C  0009               	tblrd		*+
  3678  00113E  50F5               	movf	tablat,w,c
  3679  001140  0009               	tblrd		*+
  3680  001142  10F5               	iorwf	tablat,w,c
  3681  001144  B4D8               	btfsc	status,2,c
  3682  001146  0012               	return	
  3683                           
  3684                           ; BSR set to: 0
  3685  001148  0100               	movlb	0	; () banked
  3686  00114A  51BB               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  3687  00114C  0100               	movlb	0	; () banked
  3688  00114E  11BC               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  3689  001150  B4D8               	btfsc	status,2,c
  3690  001152  0012               	return	
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  3694                           
  3695                           ; BSR set to: 0
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  3699                           ;	Return value of _ES_Timer_InitTimer is never used
  3700  001154  0100               	movlb	0	; () banked
  3701  001156  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3702  001158  0D02               	mullw	2
  3703  00115A  0E60               	movlw	low _TMR_TimerArray
  3704  00115C  24F3               	addwf	prodl,w,c
  3705  00115E  6ED9               	movwf	fsr2l,c
  3706  001160  0E00               	movlw	high _TMR_TimerArray
  3707  001162  20F4               	addwfc	prodh,w,c
  3708  001164  6EDA               	movwf	fsr2h,c
  3709  001166  C0BB  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  3710  00116A  C0BC  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  3714  00116E  0100               	movlb	0	; () banked
  3715  001170  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3716  001172  0D02               	mullw	2
  3717  001174  0E01               	movlw	low _BitNum2SetMask
  3718  001176  24F3               	addwf	prodl,w,c
  3719  001178  6EF6               	movwf	tblptrl,c
  3720  00117A  0E03               	movlw	high _BitNum2SetMask
  3721  00117C  20F4               	addwfc	prodh,w,c
  3722  00117E  6EF7               	movwf	tblptrh,c
  3723  001180                     	if	0	;There are less than 3 active tblptr bytes
  3724  001180                     	endif
  3725  001180  0009               	tblrd		*+
  3726  001182  CFF5 F0BD          	movff	tablat,??_ES_Timer_InitTimer
  3727  001186  0009               	tblrd		*+
  3728  001188  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer+1
  3729  00118C  0100               	movlb	0	; () banked
  3730  00118E  51BD               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  3731  001190  0100               	movlb	0	; () banked
  3732  001192  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  3733  001194  0100               	movlb	0	; () banked
  3734  001196  51BE               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  3735  001198  0100               	movlb	0	; () banked
  3736  00119A  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  3737  00119C  0012               	return	
  3738  00119E                     __end_of_ES_Timer_InitTimer:
  3739                           	opt stack 0
  3740                           tosu	equ	0xFFF
  3741                           tosh	equ	0xFFE
  3742                           tosl	equ	0xFFD
  3743                           pclath	equ	0xFFA
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           postdec1	equ	0xFE5
  3753                           fsr1l	equ	0xFE1
  3754                           indf2	equ	0xFDF
  3755                           postinc2	equ	0xFDE
  3756                           postdec2	equ	0xFDD
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _DotStar_Show *****************
  3762 ;; Defined at:
  3763 ;;		line 66 in file "Pattern_DotStarLED.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  pixelPointer    2   38[BANK0 ] PTR unsigned long 
  3766 ;;		 -> PixelPattern(120), 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3778 ;;      Params:         0       2       0       0
  3779 ;;      Locals:         0       0       0       0
  3780 ;;      Temps:          0       0       0       0
  3781 ;;      Totals:         0       2       0       0
  3782 ;;Total ram usage:        2 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:   11
  3785 ;; This function calls:
  3786 ;;		_SPI32_TransmitFrames
  3787 ;;		_memcpy
  3788 ;; This function is called by:
  3789 ;;		_ShowPattern
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text19
  3794  0014DC                     __ptext19:
  3795                           	opt stack 0
  3796  0014DC                     _DotStar_Show:
  3797                           	opt stack 16
  3798                           
  3799                           ;Pattern_DotStarLED.c: 68: memcpy(PixelFrames+1, pixelPointer, sizeof(uint32_t)*Length);
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;incstack = 0
  3803  0014DC  0E04               	movlw	low (_PixelFrames+4)
  3804  0014DE  0100               	movlb	0	; () banked
  3805  0014E0  6FBB               	movwf	memcpy@d1& (0+255),b
  3806  0014E2  0E01               	movlw	high (_PixelFrames+4)
  3807  0014E4  0100               	movlb	0	; () banked
  3808  0014E6  6FBC               	movwf	(memcpy@d1+1)& (0+255),b
  3809  0014E8  C0E1  F0BD         	movff	DotStar_Show@pixelPointer,memcpy@s1
  3810  0014EC  C0E2  F0BE         	movff	DotStar_Show@pixelPointer+1,memcpy@s1+1
  3811  0014F0  0100               	movlb	0	; () banked
  3812  0014F2  519B               	movf	_Length& (0+255),w,b
  3813  0014F4  0D04               	mullw	4
  3814  0014F6  CFF3 F0BF          	movff	prodl,memcpy@n
  3815  0014FA  CFF4 F0C0          	movff	prodh,memcpy@n+1
  3816  0014FE  EC02  F00A         	call	_memcpy	;wreg free
  3817                           
  3818                           ;Pattern_DotStarLED.c: 70: SPI32_TransmitFrames(PixelFrames,Length+2);
  3819  001502  0E00               	movlw	low _PixelFrames
  3820  001504  0100               	movlb	0	; () banked
  3821  001506  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  3822  001508  0E01               	movlw	high _PixelFrames
  3823  00150A  0100               	movlb	0	; () banked
  3824  00150C  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  3825  00150E  0100               	movlb	0	; () banked
  3826  001510  519B               	movf	_Length& (0+255),w,b
  3827  001512  0F02               	addlw	2
  3828  001514  0100               	movlb	0	; () banked
  3829  001516  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  3830  001518  EC19  F00B         	call	_SPI32_TransmitFrames	;wreg free
  3831  00151C  0012               	return		;funcret
  3832  00151E                     __end_of_DotStar_Show:
  3833                           	opt stack 0
  3834                           tosu	equ	0xFFF
  3835                           tosh	equ	0xFFE
  3836                           tosl	equ	0xFFD
  3837                           pclath	equ	0xFFA
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           postdec1	equ	0xFE5
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _memcpy *****************
  3856 ;; Defined at:
  3857 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  d1              2    0[BANK0 ] PTR void 
  3860 ;;		 -> PixelFrames(128), 
  3861 ;;  s1              2    2[BANK0 ] PTR const void 
  3862 ;;		 -> PixelPattern(120), 
  3863 ;;  n               2    4[BANK0 ] unsigned int 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  3866 ;;		 -> PixelPattern(120), 
  3867 ;;  d               2    6[BANK0 ] PTR unsigned char 
  3868 ;;		 -> PixelFrames(128), 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2    0[BANK0 ] PTR void 
  3871 ;; Registers used:
  3872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3878 ;;      Params:         0       6       0       0
  3879 ;;      Locals:         0       4       0       0
  3880 ;;      Temps:          0       0       0       0
  3881 ;;      Totals:         0      10       0       0
  3882 ;;Total ram usage:       10 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    6
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_DotStar_Show
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text20
  3893  001404                     __ptext20:
  3894                           	opt stack 0
  3895  001404                     _memcpy:
  3896                           	opt stack 20
  3897                           
  3898                           ;incstack = 0
  3899  001404  C0BD  F0C3         	movff	memcpy@s1,memcpy@s
  3900  001408  C0BE  F0C4         	movff	memcpy@s1+1,memcpy@s+1
  3901  00140C  C0BB  F0C1         	movff	memcpy@d1,memcpy@d
  3902  001410  C0BC  F0C2         	movff	memcpy@d1+1,memcpy@d+1
  3903  001414  D010               	goto	l2094
  3904  001416                     l2088:
  3905  001416  C0C3  FFD9         	movff	memcpy@s,fsr2l
  3906  00141A  C0C4  FFDA         	movff	memcpy@s+1,fsr2h
  3907  00141E  C0C1  FFE1         	movff	memcpy@d,fsr1l
  3908  001422  C0C2  FFE2         	movff	memcpy@d+1,fsr1h
  3909  001426  CFDF FFE7          	movff	indf2,indf1
  3910  00142A  0100               	movlb	0	; () banked
  3911  00142C  4BC3               	infsnz	memcpy@s& (0+255),f,b
  3912  00142E  2BC4               	incf	(memcpy@s+1)& (0+255),f,b
  3913                           
  3914                           ; BSR set to: 0
  3915  001430  0100               	movlb	0	; () banked
  3916  001432  4BC1               	infsnz	memcpy@d& (0+255),f,b
  3917  001434  2BC2               	incf	(memcpy@d+1)& (0+255),f,b
  3918  001436                     l2094:
  3919  001436  0100               	movlb	0	; () banked
  3920  001438  07BF               	decf	memcpy@n& (0+255),f,b
  3921  00143A  A0D8               	btfss	status,0,c
  3922  00143C  07C0               	decf	(memcpy@n+1)& (0+255),f,b
  3923  00143E  0100               	movlb	0	; () banked
  3924  001440  29BF               	incf	memcpy@n& (0+255),w,b
  3925  001442  E1E9               	bnz	l2088
  3926  001444  0100               	movlb	0	; () banked
  3927  001446  29C0               	incf	(memcpy@n+1)& (0+255),w,b
  3928  001448  B4D8               	btfsc	status,2,c
  3929  00144A  0012               	return	
  3930  00144C  D7E4               	goto	l2088
  3931  00144E                     __end_of_memcpy:
  3932                           	opt stack 0
  3933                           tosu	equ	0xFFF
  3934                           tosh	equ	0xFFE
  3935                           tosl	equ	0xFFD
  3936                           pclath	equ	0xFFA
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           indf1	equ	0xFE7
  3946                           postdec1	equ	0xFE5
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _SPI32_TransmitFrames *****************
  3957 ;; Defined at:
  3958 ;;		line 229 in file "SPI32_ControlService.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  3961 ;;		 -> OffFrames(128), PixelFrames(128), 
  3962 ;;  numFrames       1   34[BANK0 ] unsigned char 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3974 ;;      Params:         0       3       0       0
  3975 ;;      Locals:         0       3       0       0
  3976 ;;      Temps:          0       0       0       0
  3977 ;;      Totals:         0       6       0       0
  3978 ;;Total ram usage:        6 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:   10
  3981 ;; This function calls:
  3982 ;;		_PostSPI32ControlService
  3983 ;; This function is called by:
  3984 ;;		_DotStar_Show
  3985 ;;		_DotStar_Off
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text21
  3990  001632                     __ptext21:
  3991                           	opt stack 0
  3992  001632                     _SPI32_TransmitFrames:
  3993                           	opt stack 16
  3994                           
  3995                           ;SPI32_ControlService.c: 231: if(CurrentState == SPI32_Waiting4Send){
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;incstack = 0
  3999  001632  0100               	movlb	0	; () banked
  4000  001634  0597               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  4001  001636  A4D8               	btfss	status,2,c
  4002  001638  0012               	return	
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;SPI32_ControlService.c: 233: FrameIndex = 0;
  4006  00163A  0E00               	movlw	0
  4007  00163C  0100               	movlb	0	; () banked
  4008  00163E  6F9A               	movwf	_FrameIndex& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;SPI32_ControlService.c: 235: FramePointer = framePointer;
  4012  001640  C0DB  F08F         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  4013  001644  C0DC  F090         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;SPI32_ControlService.c: 237: NumFrames = numFrames;
  4017  001648  C0DD  F09D         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;SPI32_ControlService.c: 238: ES_Event transmitEvent;
  4021                           ;SPI32_ControlService.c: 239: transmitEvent.EventType = SPI32_TRANSMIT;
  4022  00164C  0E09               	movlw	9
  4023  00164E  0100               	movlb	0	; () banked
  4024  001650  6FDE               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;SPI32_ControlService.c: 240: PostSPI32ControlService(transmitEvent);
  4028  001652  C0DE  F0D8         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  4029  001656  C0DF  F0D9         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  4030  00165A  C0E0  F0DA         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  4031  00165E  EC97  F00B         	call	_PostSPI32ControlService	;wreg free
  4032  001662  0012               	return	
  4033  001664                     __end_of_SPI32_TransmitFrames:
  4034                           	opt stack 0
  4035                           tosu	equ	0xFFF
  4036                           tosh	equ	0xFFE
  4037                           tosl	equ	0xFFD
  4038                           pclath	equ	0xFFA
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           indf1	equ	0xFE7
  4048                           postdec1	equ	0xFE5
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _PostPatternControlService *****************
  4059 ;; Defined at:
  4060 ;;		line 135 in file "Pattern_ControlService.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      unsigned char 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4074 ;;      Params:         0       3       0       0
  4075 ;;      Locals:         0       0       0       0
  4076 ;;      Temps:          0       0       0       0
  4077 ;;      Totals:         0       3       0       0
  4078 ;;Total ram usage:        3 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    9
  4081 ;; This function calls:
  4082 ;;		_ES_PostToService
  4083 ;; This function is called by:
  4084 ;;		_RunPatternControlService
  4085 ;;		_ES_Timer_Tick_Resp
  4086 ;;		_PostToList
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text22
  4091  00177C                     __ptext22:
  4092                           	opt stack 0
  4093  00177C                     _PostPatternControlService:
  4094                           	opt stack 18
  4095                           
  4096                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  4097                           
  4098                           ;incstack = 0
  4099  00177C  C0D8  F0D2         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  4100  001780  C0D9  F0D3         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4101  001784  C0DA  F0D4         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4102  001788  0100               	movlb	0	; () banked
  4103  00178A  519C               	movf	_MyPriority& (0+255),w,b
  4104  00178C  EC0A  F009         	call	_ES_PostToService
  4105  001790  0012               	return	
  4106  001792                     __end_of_PostPatternControlService:
  4107                           	opt stack 0
  4108                           tosu	equ	0xFFF
  4109                           tosh	equ	0xFFE
  4110                           tosl	equ	0xFFD
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           indf1	equ	0xFE7
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _PostSPI32ControlService *****************
  4132 ;; Defined at:
  4133 ;;		line 117 in file "SPI32_ControlService.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      unsigned char 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       3       0       0
  4148 ;;      Locals:         0       0       0       0
  4149 ;;      Temps:          0       0       0       0
  4150 ;;      Totals:         0       3       0       0
  4151 ;;Total ram usage:        3 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    9
  4154 ;; This function calls:
  4155 ;;		_ES_PostToService
  4156 ;; This function is called by:
  4157 ;;		_SPI32_TransmitFrames
  4158 ;;		_ES_Timer_Tick_Resp
  4159 ;;		_PostToList
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text23
  4164  00172E                     __ptext23:
  4165                           	opt stack 0
  4166  00172E                     _PostSPI32ControlService:
  4167                           	opt stack 0
  4168                           
  4169                           ;Skip over the trampoline to the duplicate function for level 2
  4170  00172E  B23E               	btfsc	btemp,1,c
  4171  001730  EFD4  F00B         	goto	i2_PostSPI32ControlService
  4172  001734                     _PostSPI32ControlService$intlevel0:
  4173                           	opt stack 18
  4174                           
  4175                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  4176                           
  4177                           ;incstack = 0
  4178  001734  C0D8  F0D2         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  4179  001738  C0D9  F0D3         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4180  00173C  C0DA  F0D4         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4181  001740  0100               	movlb	0	; () banked
  4182  001742  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  4183  001744  EC0A  F009         	call	_ES_PostToService
  4184  001748  0012               	return	
  4185  00174A                     __end_of_PostSPI32ControlService:
  4186                           	opt stack 0
  4187                           tosu	equ	0xFFF
  4188                           tosh	equ	0xFFE
  4189                           tosl	equ	0xFFD
  4190                           pclath	equ	0xFFA
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           indf1	equ	0xFE7
  4200                           postdec1	equ	0xFE5
  4201                           fsr1h	equ	0xFE2
  4202                           fsr1l	equ	0xFE1
  4203                           indf2	equ	0xFDF
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _PausePattern *****************
  4211 ;; Defined at:
  4212 ;;		line 293 in file "Pattern_ControlService.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4226 ;;      Params:         0       0       0       0
  4227 ;;      Locals:         0       0       0       0
  4228 ;;      Temps:          0       0       0       0
  4229 ;;      Totals:         0       0       0       0
  4230 ;;Total ram usage:        0 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    7
  4233 ;; This function calls:
  4234 ;;		_ES_Timer_StopTimer
  4235 ;; This function is called by:
  4236 ;;		_RunPatternControlService
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text24
  4241  0017EC                     __ptext24:
  4242                           	opt stack 0
  4243  0017EC                     _PausePattern:
  4244                           	opt stack 21
  4245                           
  4246                           ;Pattern_ControlService.c: 295: ES_Timer_StopTimer(0);
  4247                           
  4248                           ;incstack = 0
  4249  0017EC  0E00               	movlw	0
  4250  0017EE  ECDB  F009         	call	_ES_Timer_StopTimer
  4251  0017F2  0012               	return		;funcret
  4252  0017F4                     __end_of_PausePattern:
  4253                           	opt stack 0
  4254                           tosu	equ	0xFFF
  4255                           tosh	equ	0xFFE
  4256                           tosl	equ	0xFFD
  4257                           pclath	equ	0xFFA
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           postinc0	equ	0xFEE
  4265                           wreg	equ	0xFE8
  4266                           indf1	equ	0xFE7
  4267                           postdec1	equ	0xFE5
  4268                           fsr1h	equ	0xFE2
  4269                           fsr1l	equ	0xFE1
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           fsr2h	equ	0xFDA
  4274                           fsr2l	equ	0xFD9
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function _ES_Timer_StopTimer *****************
  4278 ;; Defined at:
  4279 ;;		line 205 in file "ES_Timers.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  Num             1    wreg     unsigned char 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  Num             1    4[BANK0 ] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      enum E15473
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4293 ;;      Params:         0       0       0       0
  4294 ;;      Locals:         0       1       0       0
  4295 ;;      Temps:          0       4       0       0
  4296 ;;      Totals:         0       5       0       0
  4297 ;;Total ram usage:        5 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    6
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_StopPattern
  4304 ;;		_PausePattern
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text25
  4309  0013B6                     __ptext25:
  4310                           	opt stack 0
  4311  0013B6                     _ES_Timer_StopTimer:
  4312                           	opt stack 21
  4313                           
  4314                           ;incstack = 0
  4315                           ;ES_Timer_StopTimer@Num stored from wreg
  4316  0013B6  0100               	movlb	0	; () banked
  4317  0013B8  6FBF               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  4318                           
  4319                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  4320  0013BA  0E0F               	movlw	15
  4321  0013BC  0100               	movlb	0	; () banked
  4322  0013BE  65BF               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  4323  0013C0  D001               	goto	l2216
  4324  0013C2  0012               	return	
  4325  0013C4                     l2216:
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  4329  0013C4  0100               	movlb	0	; () banked
  4330  0013C6  51BF               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  4331  0013C8  0D02               	mullw	2
  4332  0013CA  0E01               	movlw	low _BitNum2SetMask
  4333  0013CC  24F3               	addwf	prodl,w,c
  4334  0013CE  6EF6               	movwf	tblptrl,c
  4335  0013D0  0E03               	movlw	high _BitNum2SetMask
  4336  0013D2  20F4               	addwfc	prodh,w,c
  4337  0013D4  6EF7               	movwf	tblptrh,c
  4338  0013D6                     	if	0	;There are less than 3 active tblptr bytes
  4339  0013D6                     	endif
  4340  0013D6  0009               	tblrd		*+
  4341  0013D8  CFF5 F0BB          	movff	tablat,??_ES_Timer_StopTimer
  4342  0013DC  0009               	tblrd		*+
  4343  0013DE  CFF5 F0BC          	movff	tablat,??_ES_Timer_StopTimer+1
  4344  0013E2  0100               	movlb	0	; () banked
  4345  0013E4  1DBB               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  4346  0013E6  0100               	movlb	0	; () banked
  4347  0013E8  6FBD               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  4348  0013EA  0100               	movlb	0	; () banked
  4349  0013EC  1DBC               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  4350  0013EE  0100               	movlb	0	; () banked
  4351  0013F0  6FBE               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  4352  0013F2  0100               	movlb	0	; () banked
  4353  0013F4  51BD               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  4354  0013F6  0100               	movlb	0	; () banked
  4355  0013F8  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  4356  0013FA  0100               	movlb	0	; () banked
  4357  0013FC  51BE               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  4358  0013FE  0100               	movlb	0	; () banked
  4359  001400  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4360  001402  0012               	return	
  4361  001404                     __end_of_ES_Timer_StopTimer:
  4362                           	opt stack 0
  4363                           tosu	equ	0xFFF
  4364                           tosh	equ	0xFFE
  4365                           tosl	equ	0xFFD
  4366                           pclath	equ	0xFFA
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           indf1	equ	0xFE7
  4376                           postdec1	equ	0xFE5
  4377                           fsr1h	equ	0xFE2
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _ES_DeQueue *****************
  4387 ;; Defined at:
  4388 ;;		line 164 in file "ES_Queue.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4391 ;;		 -> Queue1(12), Queue0(12), 
  4392 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  4393 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  4396 ;;		 -> Queue1(12), Queue0(12), 
  4397 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  4398 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      unsigned char 
  4401 ;; Registers used:
  4402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4408 ;;      Params:         0       4       0       0
  4409 ;;      Locals:         0       4       0       0
  4410 ;;      Temps:          0       2       0       0
  4411 ;;      Totals:         0      10       0       0
  4412 ;;Total ram usage:       10 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    7
  4415 ;; This function calls:
  4416 ;;		___lbmod
  4417 ;;		___wmul
  4418 ;; This function is called by:
  4419 ;;		_ES_Run
  4420 ;;		_ES_RecallEvents
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text26
  4425  000536                     __ptext26:
  4426                           	opt stack 0
  4427  000536                     _ES_DeQueue:
  4428                           	opt stack 22
  4429                           
  4430                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  4431                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  4432                           ;ES_Queue.c: 168: uint8_t NumLeft;
  4433                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;incstack = 0
  4437  000536  C0C7  F0CF         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  4438  00053A  C0C8  F0D0         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  4439                           
  4440                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  4441  00053E  0100               	movlb	0	; () banked
  4442  000540  EE20 F002          	lfsr	2,2
  4443  000544  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4444  000546  26D9               	addwf	fsr2l,f,c
  4445  000548  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4446  00054A  22DA               	addwfc	fsr2h,f,c
  4447  00054C  50DF               	movf	indf2,w,c
  4448  00054E  B4D8               	btfsc	status,2,c
  4449  000550  D06F               	goto	l2420
  4450                           
  4451                           ; BSR set to: 0
  4452                           
  4453                           ;ES_Queue.c: 172: {
  4454                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4455  000552  CFF2 F0CD          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  4456  000556  9EF2               	bcf	intcon,7,c	;volatile
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  4460                           
  4461                           ; BSR set to: 0
  4462  000558  0100               	movlb	0	; () banked
  4463  00055A  EE20 F001          	lfsr	2,1
  4464  00055E  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4465  000560  26D9               	addwf	fsr2l,f,c
  4466  000562  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4467  000564  22DA               	addwfc	fsr2h,f,c
  4468  000566  50DF               	movf	indf2,w,c
  4469  000568  0100               	movlb	0	; () banked
  4470  00056A  6FCB               	movwf	??_ES_DeQueue& (0+255),b
  4471  00056C  0E01               	movlw	1
  4472  00056E  0100               	movlb	0	; () banked
  4473  000570  25CB               	addwf	??_ES_DeQueue& (0+255),w,b
  4474  000572  0100               	movlb	0	; () banked
  4475  000574  6FC1               	movwf	___wmul@multiplier& (0+255),b
  4476  000576  0100               	movlb	0	; () banked
  4477  000578  6BC2               	clrf	(___wmul@multiplier+1)& (0+255),b
  4478  00057A  0E00               	movlw	0
  4479  00057C  23C2               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  4480  00057E  0E00               	movlw	0
  4481  000580  0100               	movlb	0	; () banked
  4482  000582  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4483  000584  0E03               	movlw	3
  4484  000586  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  4485  000588  ECCA  F00A         	call	___wmul	;wreg free
  4486  00058C  0100               	movlb	0	; () banked
  4487  00058E  51C1               	movf	?___wmul& (0+255),w,b
  4488  000590  0100               	movlb	0	; () banked
  4489  000592  25C7               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  4490  000594  6ED9               	movwf	fsr2l,c
  4491  000596  0100               	movlb	0	; () banked
  4492  000598  51C2               	movf	(?___wmul+1)& (0+255),w,b
  4493  00059A  0100               	movlb	0	; () banked
  4494  00059C  21C8               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  4495  00059E  6EDA               	movwf	fsr2h,c
  4496  0005A0  C0C9  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  4497  0005A4  C0CA  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  4498  0005A8  CFDE FFE6          	movff	postinc2,postinc1
  4499  0005AC  CFDE FFE6          	movff	postinc2,postinc1
  4500  0005B0  CFDE FFE6          	movff	postinc2,postinc1
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  4504  0005B4  0100               	movlb	0	; () banked
  4505  0005B6  EE20 F001          	lfsr	2,1
  4506  0005BA  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4507  0005BC  26D9               	addwf	fsr2l,f,c
  4508  0005BE  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4509  0005C0  22DA               	addwfc	fsr2h,f,c
  4510  0005C2  2ADF               	incf	indf2,f,c
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  4514  0005C4  C0CF  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  4515  0005C8  C0D0  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  4516  0005CC  0100               	movlb	0	; () banked
  4517  0005CE  EE10 F001          	lfsr	1,1
  4518  0005D2  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4519  0005D4  26E1               	addwf	fsr1l,f,c
  4520  0005D6  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4521  0005D8  22E2               	addwfc	fsr1h,f,c
  4522  0005DA  50DE               	movf	postinc2,w,c
  4523  0005DC  5CE6               	subwf	postinc1,w,c
  4524  0005DE  A0D8               	btfss	status,0,c
  4525  0005E0  D019               	goto	l2416
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  4529  0005E2  0100               	movlb	0	; () banked
  4530  0005E4  EE20 F001          	lfsr	2,1
  4531  0005E8  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4532  0005EA  26D9               	addwf	fsr2l,f,c
  4533  0005EC  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4534  0005EE  22DA               	addwfc	fsr2h,f,c
  4535  0005F0  C0CF  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  4536  0005F4  C0D0  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  4537  0005F8  50E7               	movf	indf1,w,c
  4538  0005FA  0100               	movlb	0	; () banked
  4539  0005FC  6FBB               	movwf	___lbmod@divisor& (0+255),b
  4540  0005FE  0100               	movlb	0	; () banked
  4541  000600  EE10 F001          	lfsr	1,1
  4542  000604  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4543  000606  26E1               	addwf	fsr1l,f,c
  4544  000608  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4545  00060A  22E2               	addwfc	fsr1h,f,c
  4546  00060C  50E7               	movf	indf1,w,c
  4547  00060E  EC4C  F00A         	call	___lbmod
  4548  000612  6EDF               	movwf	indf2,c
  4549  000614                     l2416:
  4550                           
  4551                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  4552  000614  0100               	movlb	0	; () banked
  4553  000616  EE20 F002          	lfsr	2,2
  4554  00061A  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4555  00061C  26D9               	addwf	fsr2l,f,c
  4556  00061E  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4557  000620  22DA               	addwfc	fsr2h,f,c
  4558  000622  06DF               	decf	indf2,f,c
  4559  000624  50DF               	movf	indf2,w,c
  4560  000626  0100               	movlb	0	; () banked
  4561  000628  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  4565  00062A  C0CD  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  4566                           
  4567                           ;ES_Queue.c: 183: }else {
  4568  00062E  D014               	goto	l2426
  4569  000630                     l2420:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  4573  000630  C0C9  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  4574  000634  C0CA  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  4575  000638  0E00               	movlw	0
  4576  00063A  6EDF               	movwf	indf2,c
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  4580  00063C  0100               	movlb	0	; () banked
  4581  00063E  EE20 F001          	lfsr	2,1
  4582  000642  51C9               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  4583  000644  26D9               	addwf	fsr2l,f,c
  4584  000646  51CA               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  4585  000648  22DA               	addwfc	fsr2h,f,c
  4586  00064A  0E00               	movlw	0
  4587  00064C  6EDE               	movwf	postinc2,c
  4588  00064E  0E00               	movlw	0
  4589  000650  6EDD               	movwf	postdec2,c
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;ES_Queue.c: 186: NumLeft = 0;
  4593  000652  0E00               	movlw	0
  4594  000654  0100               	movlb	0	; () banked
  4595  000656  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4596  000658                     l2426:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;ES_Queue.c: 187: }
  4600                           ;ES_Queue.c: 188: return NumLeft;
  4601  000658  0100               	movlb	0	; () banked
  4602  00065A  51CE               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  4603  00065C  0012               	return	
  4604  00065E                     __end_of_ES_DeQueue:
  4605                           	opt stack 0
  4606                           tosu	equ	0xFFF
  4607                           tosh	equ	0xFFE
  4608                           tosl	equ	0xFFD
  4609                           pclath	equ	0xFFA
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           indf1	equ	0xFE7
  4620                           postinc1	equ	0xFE6
  4621                           postdec1	equ	0xFE5
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function ___lbmod *****************
  4632 ;; Defined at:
  4633 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  dividend        1    wreg     unsigned char 
  4636 ;;  divisor         1    0[BANK0 ] unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  dividend        1    1[BANK0 ] unsigned char 
  4639 ;;  rem             1    3[BANK0 ] unsigned char 
  4640 ;;  counter         1    2[BANK0 ] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      unsigned char 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4650 ;;      Params:         0       1       0       0
  4651 ;;      Locals:         0       3       0       0
  4652 ;;      Temps:          0       0       0       0
  4653 ;;      Totals:         0       4       0       0
  4654 ;;Total ram usage:        4 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    6
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		_ES_DeQueue
  4661 ;;		_UpdatePattern
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text27
  4666  001498                     __ptext27:
  4667                           	opt stack 0
  4668  001498                     ___lbmod:
  4669                           	opt stack 20
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;incstack = 0
  4673                           ;___lbmod@dividend stored from wreg
  4674  001498  0100               	movlb	0	; () banked
  4675  00149A  6FBC               	movwf	___lbmod@dividend& (0+255),b
  4676  00149C  0E08               	movlw	8
  4677  00149E  0100               	movlb	0	; () banked
  4678  0014A0  6FBD               	movwf	___lbmod@counter& (0+255),b
  4679  0014A2  0E00               	movlw	0
  4680  0014A4  0100               	movlb	0	; () banked
  4681  0014A6  6FBE               	movwf	___lbmod@rem& (0+255),b
  4682  0014A8                     l2120:
  4683                           
  4684                           ; BSR set to: 0
  4685  0014A8  90D8               	bcf	status,0,c
  4686  0014AA  0100               	movlb	0	; () banked
  4687  0014AC  35BC               	rlcf	___lbmod@dividend& (0+255),w,b
  4688  0014AE  0100               	movlb	0	; () banked
  4689  0014B0  35BE               	rlcf	___lbmod@rem& (0+255),w,b
  4690  0014B2  0100               	movlb	0	; () banked
  4691  0014B4  6FBE               	movwf	___lbmod@rem& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694  0014B6  0100               	movlb	0	; () banked
  4695  0014B8  90D8               	bcf	status,0,c
  4696  0014BA  37BC               	rlcf	___lbmod@dividend& (0+255),f,b
  4697                           
  4698                           ; BSR set to: 0
  4699  0014BC  0100               	movlb	0	; () banked
  4700  0014BE  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4701  0014C0  0100               	movlb	0	; () banked
  4702  0014C2  5DBE               	subwf	___lbmod@rem& (0+255),w,b
  4703  0014C4  A0D8               	btfss	status,0,c
  4704  0014C6  D004               	goto	l2128
  4705                           
  4706                           ; BSR set to: 0
  4707  0014C8  0100               	movlb	0	; () banked
  4708  0014CA  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4709  0014CC  0100               	movlb	0	; () banked
  4710  0014CE  5FBE               	subwf	___lbmod@rem& (0+255),f,b
  4711  0014D0                     l2128:
  4712                           
  4713                           ; BSR set to: 0
  4714  0014D0  0100               	movlb	0	; () banked
  4715  0014D2  2FBD               	decfsz	___lbmod@counter& (0+255),f,b
  4716  0014D4  D7E9               	goto	l2120
  4717                           
  4718                           ; BSR set to: 0
  4719                           
  4720                           ; BSR set to: 0
  4721  0014D6  0100               	movlb	0	; () banked
  4722  0014D8  51BE               	movf	___lbmod@rem& (0+255),w,b
  4723  0014DA  0012               	return	
  4724  0014DC                     __end_of___lbmod:
  4725                           	opt stack 0
  4726                           tosu	equ	0xFFF
  4727                           tosh	equ	0xFFE
  4728                           tosl	equ	0xFFD
  4729                           pclath	equ	0xFFA
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           intcon	equ	0xFF2
  4737                           postinc0	equ	0xFEE
  4738                           wreg	equ	0xFE8
  4739                           indf1	equ	0xFE7
  4740                           postinc1	equ	0xFE6
  4741                           postdec1	equ	0xFE5
  4742                           fsr1h	equ	0xFE2
  4743                           fsr1l	equ	0xFE1
  4744                           indf2	equ	0xFDF
  4745                           postinc2	equ	0xFDE
  4746                           postdec2	equ	0xFDD
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function _ES_CheckUserEvents *****************
  4752 ;; Defined at:
  4753 ;;		line 46 in file "ES_CheckEvents.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;		None
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  i               1    0[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  1    wreg      unsigned char 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4767 ;;      Params:         0       0       0       0
  4768 ;;      Locals:         0       1       0       0
  4769 ;;      Temps:          0       0       0       0
  4770 ;;      Totals:         0       1       0       0
  4771 ;;Total ram usage:        1 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    7
  4774 ;; This function calls:
  4775 ;;		_Check4Keystroke
  4776 ;; This function is called by:
  4777 ;;		_ES_Run
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text28
  4782  00144E                     __ptext28:
  4783                           	opt stack 0
  4784  00144E                     _ES_CheckUserEvents:
  4785                           	opt stack 22
  4786                           
  4787                           ;ES_CheckEvents.c: 48: uint8_t i;
  4788                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;incstack = 0
  4792  00144E  0E00               	movlw	0
  4793  001450  0100               	movlb	0	; () banked
  4794  001452  6FBB               	movwf	ES_CheckUserEvents@i& (0+255),b
  4795  001454  0100               	movlb	0	; () banked
  4796  001456  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4797  001458  0100               	movlb	0	; () banked
  4798  00145A  A4D8               	btfss	status,2,c
  4799  00145C  0012               	return	
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  4803                           
  4804                           ; BSR set to: 0
  4805                           
  4806                           ; BSR set to: 0
  4807  00145E  0100               	movlb	0	; () banked
  4808  001460  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4809  001462  0D02               	mullw	2
  4810  001464  0E5E               	movlw	low _ES_EventList
  4811  001466  24F3               	addwf	prodl,w,c
  4812  001468  6EF6               	movwf	tblptrl,c
  4813  00146A  0E03               	movlw	high _ES_EventList
  4814  00146C  20F4               	addwfc	prodh,w,c
  4815  00146E  6EF7               	movwf	tblptrh,c
  4816  001470                     	if	0	;There are less than 3 active tblptr bytes
  4817  001470                     	endif
  4818  001470  D801               	call	u1448
  4819  001472  D00C               	goto	u1449
  4820  001474                     u1448:
  4821  001474  0005               	push	
  4822  001476  6EFA               	movwf	pclath,c
  4823  001478  0009               	tblrd		*+
  4824  00147A  50F5               	movf	tablat,w,c
  4825  00147C  6EFD               	movwf	tosl,c
  4826  00147E  0009               	tblrd		*+
  4827  001480  50F5               	movf	tablat,w,c
  4828  001482  6EFE               	movwf	tosh,c
  4829  001484  50F8               	movf	tblptru,w,c
  4830  001486  6EFF               	movwf	tosu,c
  4831  001488  50FA               	movf	pclath,w,c
  4832  00148A  0012               	return		;indir
  4833  00148C                     u1449:
  4834  00148C  06E8               	decf	wreg,f,c
  4835  00148E  B4D8               	btfsc	status,2,c
  4836  001490  0012               	return	
  4837                           
  4838                           ;ES_CheckEvents.c: 52: break;
  4839  001492  0100               	movlb	0	; () banked
  4840  001494  2BBB               	incf	ES_CheckUserEvents@i& (0+255),f,b
  4841  001496  D7DE               	goto	L11
  4842  001498                     __end_of_ES_CheckUserEvents:
  4843                           	opt stack 0
  4844                           tosu	equ	0xFFF
  4845                           tosh	equ	0xFFE
  4846                           tosl	equ	0xFFD
  4847                           pclath	equ	0xFFA
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           indf1	equ	0xFE7
  4858                           postinc1	equ	0xFE6
  4859                           postdec1	equ	0xFE5
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _Check4Keystroke *****************
  4870 ;; Defined at:
  4871 ;;		line 62 in file "EventCheckers.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      unsigned char 
  4878 ;; Registers used:
  4879 ;;		wreg
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4885 ;;      Params:         0       0       0       0
  4886 ;;      Locals:         0       0       0       0
  4887 ;;      Temps:          0       0       0       0
  4888 ;;      Totals:         0       0       0       0
  4889 ;;Total ram usage:        0 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    6
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_ES_CheckUserEvents
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text29
  4900  001800                     __ptext29:
  4901                           	opt stack 0
  4902  001800                     _Check4Keystroke:
  4903                           	opt stack 22
  4904                           
  4905                           ;EventCheckers.c: 78: return 0;
  4906                           
  4907                           ;incstack = 0
  4908  001800  0E00               	movlw	0
  4909  001802  0012               	return	
  4910  001804                     __end_of_Check4Keystroke:
  4911                           	opt stack 0
  4912                           tosu	equ	0xFFF
  4913                           tosh	equ	0xFFE
  4914                           tosl	equ	0xFFD
  4915                           pclath	equ	0xFFA
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           intcon	equ	0xFF2
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           indf1	equ	0xFE7
  4926                           postinc1	equ	0xFE6
  4927                           postdec1	equ	0xFE5
  4928                           fsr1h	equ	0xFE2
  4929                           fsr1l	equ	0xFE1
  4930                           indf2	equ	0xFDF
  4931                           postinc2	equ	0xFDE
  4932                           postdec2	equ	0xFDD
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _ES_Initialize *****************
  4938 ;; Defined at:
  4939 ;;		line 242 in file "ES_Framework.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  NewRate         2   33[BANK0 ] enum E15424
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  i               1   35[BANK0 ] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      enum E15495
  4946 ;; Registers used:
  4947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4953 ;;      Params:         0       2       0       0
  4954 ;;      Locals:         0       1       0       0
  4955 ;;      Temps:          0       0       0       0
  4956 ;;      Totals:         0       3       0       0
  4957 ;;Total ram usage:        3 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:   10
  4960 ;; This function calls:
  4961 ;;		_ES_InitQueue
  4962 ;;		_ES_Timer_Init
  4963 ;;		_InitPatternControlService
  4964 ;;		_InitSPI32ControlService
  4965 ;; This function is called by:
  4966 ;;		_main
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text30
  4971  000964                     __ptext30:
  4972                           	opt stack 0
  4973  000964                     _ES_Initialize:
  4974                           	opt stack 20
  4975                           
  4976                           ;ES_Framework.c: 243: uint8_t i;
  4977                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4978                           
  4979                           ;incstack = 0
  4980  000964  C0DC  F0BD         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4981  000968  C0DD  F0BE         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4982  00096C  ECE6  F00B         	call	_ES_Timer_Init	;wreg free
  4983                           
  4984                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4985  000970  0E00               	movlw	0
  4986  000972  0100               	movlb	0	; () banked
  4987  000974  6FDE               	movwf	ES_Initialize@i& (0+255),b
  4988  000976                     l2598:
  4989                           
  4990                           ; BSR set to: 0
  4991  000976  0E01               	movlw	1
  4992  000978  0100               	movlb	0	; () banked
  4993  00097A  65DE               	cpfsgt	ES_Initialize@i& (0+255),b
  4994  00097C  D001               	goto	l2602
  4995  00097E  D066               	goto	l2622
  4996  000980                     l2602:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  5000                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  5001  000980  0100               	movlb	0	; () banked
  5002  000982  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5003  000984  0D04               	mullw	4
  5004  000986  0E50               	movlw	low _ServDescList
  5005  000988  24F3               	addwf	prodl,w,c
  5006  00098A  6EF6               	movwf	tblptrl,c
  5007  00098C  0E03               	movlw	high _ServDescList
  5008  00098E  20F4               	addwfc	prodh,w,c
  5009  000990  6EF7               	movwf	tblptrh,c
  5010  000992                     	if	0	;There are less than 3 active tblptr bytes
  5011  000992                     	endif
  5012  000992  0009               	tblrd		*+
  5013  000994  50F5               	movf	tablat,w,c
  5014  000996  0009               	tblrd		*+
  5015  000998  10F5               	iorwf	tablat,w,c
  5016  00099A  B4D8               	btfsc	status,2,c
  5017  00099C  D013               	goto	l2606
  5018                           
  5019                           ; BSR set to: 0
  5020  00099E  0100               	movlb	0	; () banked
  5021  0009A0  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5022  0009A2  0D04               	mullw	4
  5023  0009A4  0E02               	movlw	2
  5024  0009A6  26F3               	addwf	prodl,f,c
  5025  0009A8  0E00               	movlw	0
  5026  0009AA  22F4               	addwfc	prodh,f,c
  5027  0009AC  0E50               	movlw	low _ServDescList
  5028  0009AE  24F3               	addwf	prodl,w,c
  5029  0009B0  6EF6               	movwf	tblptrl,c
  5030  0009B2  0E03               	movlw	high _ServDescList
  5031  0009B4  20F4               	addwfc	prodh,w,c
  5032  0009B6  6EF7               	movwf	tblptrh,c
  5033  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  5034  0009B8                     	endif
  5035  0009B8  0009               	tblrd		*+
  5036  0009BA  50F5               	movf	tablat,w,c
  5037  0009BC  0009               	tblrd		*+
  5038  0009BE  10F5               	iorwf	tablat,w,c
  5039  0009C0  A4D8               	btfss	status,2,c
  5040  0009C2  D002               	goto	l2610
  5041  0009C4                     l2606:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;ES_Framework.c: 249: return FailedPointer;
  5045  0009C4  0E03               	movlw	3
  5046                           
  5047                           ; BSR set to: 0
  5048  0009C6  0012               	return	
  5049  0009C8                     l2610:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  5053  0009C8  0100               	movlb	0	; () banked
  5054  0009CA  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5055  0009CC  0D03               	mullw	3
  5056  0009CE  0E58               	movlw	low _EventQueues
  5057  0009D0  24F3               	addwf	prodl,w,c
  5058  0009D2  6EF6               	movwf	tblptrl,c
  5059  0009D4  0E03               	movlw	high _EventQueues
  5060  0009D6  20F4               	addwfc	prodh,w,c
  5061  0009D8  6EF7               	movwf	tblptrh,c
  5062  0009DA                     	if	0	;There are less than 3 active tblptr bytes
  5063  0009DA                     	endif
  5064  0009DA  0009               	tblrd		*+
  5065  0009DC  CFF5 F0BB          	movff	tablat,ES_InitQueue@pBlock
  5066  0009E0  000A               	tblrd		*-
  5067  0009E2  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock+1
  5068  0009E6  0100               	movlb	0	; () banked
  5069  0009E8  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5070  0009EA  0D03               	mullw	3
  5071  0009EC  0E02               	movlw	2
  5072  0009EE  26F3               	addwf	prodl,f,c
  5073  0009F0  0E00               	movlw	0
  5074  0009F2  22F4               	addwfc	prodh,f,c
  5075  0009F4  0E58               	movlw	low _EventQueues
  5076  0009F6  24F3               	addwf	prodl,w,c
  5077  0009F8  6EF6               	movwf	tblptrl,c
  5078  0009FA  0E03               	movlw	high _EventQueues
  5079  0009FC  20F4               	addwfc	prodh,w,c
  5080  0009FE  6EF7               	movwf	tblptrh,c
  5081  000A00                     	if	0	;There are less than 3 active tblptr bytes
  5082  000A00                     	endif
  5083  000A00  0008               	tblrd		*
  5084  000A02  CFF5 F0BD          	movff	tablat,ES_InitQueue@BlockSize
  5085  000A06  EC8F  F00A         	call	_ES_InitQueue	;wreg free
  5086                           
  5087                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5088  000A0A  0100               	movlb	0	; () banked
  5089  000A0C  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5090  000A0E  0D04               	mullw	4
  5091  000A10  0E50               	movlw	low _ServDescList
  5092  000A12  24F3               	addwf	prodl,w,c
  5093  000A14  6EF6               	movwf	tblptrl,c
  5094  000A16  0E03               	movlw	high _ServDescList
  5095  000A18  20F4               	addwfc	prodh,w,c
  5096  000A1A  6EF7               	movwf	tblptrh,c
  5097  000A1C                     	if	0	;There are less than 3 active tblptr bytes
  5098  000A1C                     	endif
  5099  000A1C  D801               	call	u1698
  5100  000A1E  D00E               	goto	u1699
  5101  000A20                     u1698:
  5102  000A20  0005               	push	
  5103  000A22  6EFA               	movwf	pclath,c
  5104  000A24  0009               	tblrd		*+
  5105  000A26  50F5               	movf	tablat,w,c
  5106  000A28  6EFD               	movwf	tosl,c
  5107  000A2A  0009               	tblrd		*+
  5108  000A2C  50F5               	movf	tablat,w,c
  5109  000A2E  6EFE               	movwf	tosh,c
  5110  000A30  50F8               	movf	tblptru,w,c
  5111  000A32  6EFF               	movwf	tosu,c
  5112  000A34  50FA               	movf	pclath,w,c
  5113  000A36  0100               	movlb	0	; () banked
  5114  000A38  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5115  000A3A  0012               	return		;indir
  5116  000A3C                     u1699:
  5117  000A3C  06E8               	decf	wreg,f,c
  5118  000A3E  B4D8               	btfsc	status,2,c
  5119  000A40  D002               	goto	l2618
  5120                           
  5121                           ;ES_Framework.c: 254: return FailedInit;
  5122  000A42  0E05               	movlw	5
  5123  000A44  0012               	return	
  5124  000A46                     l2618:
  5125  000A46  0100               	movlb	0	; () banked
  5126  000A48  2BDE               	incf	ES_Initialize@i& (0+255),f,b
  5127  000A4A  D795               	goto	l2598
  5128  000A4C                     l2622:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;ES_Framework.c: 255: }
  5132                           ;ES_Framework.c: 256: return Success;
  5133  000A4C  0E00               	movlw	0
  5134  000A4E  0012               	return	
  5135  000A50                     __end_of_ES_Initialize:
  5136                           	opt stack 0
  5137                           tosu	equ	0xFFF
  5138                           tosh	equ	0xFFE
  5139                           tosl	equ	0xFFD
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           postinc1	equ	0xFE6
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _InitPatternControlService *****************
  5163 ;; Defined at:
  5164 ;;		line 97 in file "Pattern_ControlService.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  Priority        1    wreg     unsigned char 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  Priority        1   32[BANK0 ] unsigned char 
  5169 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      unsigned char 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5179 ;;      Params:         0       0       0       0
  5180 ;;      Locals:         0       4       0       0
  5181 ;;      Temps:          0       0       0       0
  5182 ;;      Totals:         0       4       0       0
  5183 ;;Total ram usage:        4 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    9
  5186 ;; This function calls:
  5187 ;;		_DotStar_Init
  5188 ;;		_ES_PostToService
  5189 ;;		_SetupPattern
  5190 ;; This function is called by:
  5191 ;;		_ES_Initialize
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text31
  5196  001364                     __ptext31:
  5197                           	opt stack 0
  5198  001364                     _InitPatternControlService:
  5199                           	opt stack 20
  5200                           
  5201                           ;incstack = 0
  5202                           ;InitPatternControlService@Priority stored from wreg
  5203  001364  0100               	movlb	0	; () banked
  5204  001366  6FDB               	movwf	InitPatternControlService@Priority& (0+255),b
  5205                           
  5206                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  5207                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  5208  001368  C0DB  F09C         	movff	InitPatternControlService@Priority,_MyPriority
  5209                           
  5210                           ;Pattern_ControlService.c: 103: DotStar_Init(11);
  5211  00136C  0E0B               	movlw	11
  5212  00136E  EC99  F005         	call	_DotStar_Init
  5213                           
  5214                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 11);
  5215  001372  0EF2               	movlw	low _PatternConfigs
  5216  001374  0100               	movlb	0	; () banked
  5217  001376  6FBB               	movwf	SetupPattern@configs& (0+255),b
  5218  001378  0E00               	movlw	high _PatternConfigs
  5219  00137A  0100               	movlb	0	; () banked
  5220  00137C  6FBC               	movwf	(SetupPattern@configs+1)& (0+255),b
  5221  00137E  0E0B               	movlw	11
  5222  001380  0100               	movlb	0	; () banked
  5223  001382  6FBD               	movwf	SetupPattern@numPixels& (0+255),b
  5224  001384  ECDF  F00B         	call	_SetupPattern	;wreg free
  5225                           
  5226                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  5227  001388  0E00               	movlw	0
  5228  00138A  0100               	movlb	0	; () banked
  5229  00138C  6F99               	movwf	_CurrentState& (0+255),b
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  5233  00138E  0E02               	movlw	2
  5234  001390  0100               	movlb	0	; () banked
  5235  001392  6FD8               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5239  001394  C0D8  F0D2         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  5240  001398  C0D9  F0D3         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5241  00139C  C0DA  F0D4         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5242  0013A0  0100               	movlb	0	; () banked
  5243  0013A2  519C               	movf	_MyPriority& (0+255),w,b
  5244  0013A4  EC0A  F009         	call	_ES_PostToService
  5245  0013A8  06E8               	decf	wreg,f,c
  5246  0013AA  A4D8               	btfss	status,2,c
  5247  0013AC  D002               	goto	l2472
  5248                           
  5249                           ;Pattern_ControlService.c: 110: {
  5250                           ;Pattern_ControlService.c: 111: return 1;
  5251  0013AE  0E01               	movlw	1
  5252                           
  5253                           ;Pattern_ControlService.c: 112: }else
  5254  0013B0  0012               	return	
  5255  0013B2                     l2472:
  5256                           
  5257                           ;Pattern_ControlService.c: 113: {
  5258                           ;Pattern_ControlService.c: 114: return 0;
  5259  0013B2  0E00               	movlw	0
  5260  0013B4  0012               	return	
  5261  0013B6                     __end_of_InitPatternControlService:
  5262                           	opt stack 0
  5263                           tosu	equ	0xFFF
  5264                           tosh	equ	0xFFE
  5265                           tosl	equ	0xFFD
  5266                           pclath	equ	0xFFA
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postinc1	equ	0xFE6
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _InitSPI32ControlService *****************
  5289 ;; Defined at:
  5290 ;;		line 80 in file "SPI32_ControlService.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  Priority        1    wreg     unsigned char 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  Priority        1   32[BANK0 ] unsigned char 
  5295 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      unsigned char 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5305 ;;      Params:         0       0       0       0
  5306 ;;      Locals:         0       4       0       0
  5307 ;;      Temps:          0       0       0       0
  5308 ;;      Totals:         0       4       0       0
  5309 ;;Total ram usage:        4 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    9
  5312 ;; This function calls:
  5313 ;;		_ES_PostToService
  5314 ;;		_SPI32_Init
  5315 ;; This function is called by:
  5316 ;;		_ES_Initialize
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text32
  5321  00155A                     __ptext32:
  5322                           	opt stack 0
  5323  00155A                     _InitSPI32ControlService:
  5324                           	opt stack 20
  5325                           
  5326                           ;incstack = 0
  5327                           ;InitSPI32ControlService@Priority stored from wreg
  5328  00155A  0100               	movlb	0	; () banked
  5329  00155C  6FDB               	movwf	InitSPI32ControlService@Priority& (0+255),b
  5330                           
  5331                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  5332                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  5333  00155E  C0DB  F098         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  5334                           
  5335                           ;SPI32_ControlService.c: 86: SPI32_Init();
  5336  001562  ECFA  F00B         	call	_SPI32_Init	;wreg free
  5337                           
  5338                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  5339  001566  0E00               	movlw	0
  5340  001568  0100               	movlb	0	; () banked
  5341  00156A  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  5345  00156C  0E02               	movlw	2
  5346  00156E  0100               	movlb	0	; () banked
  5347  001570  6FD8               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5351  001572  C0D8  F0D2         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  5352  001576  C0D9  F0D3         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5353  00157A  C0DA  F0D4         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5354  00157E  0100               	movlb	0	; () banked
  5355  001580  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  5356  001582  EC0A  F009         	call	_ES_PostToService
  5357  001586  06E8               	decf	wreg,f,c
  5358  001588  A4D8               	btfss	status,2,c
  5359  00158A  D002               	goto	l2538
  5360                           
  5361                           ;SPI32_ControlService.c: 92: {
  5362                           ;SPI32_ControlService.c: 93: return 1;
  5363  00158C  0E01               	movlw	1
  5364                           
  5365                           ;SPI32_ControlService.c: 94: }else
  5366  00158E  0012               	return	
  5367  001590                     l2538:
  5368                           
  5369                           ;SPI32_ControlService.c: 95: {
  5370                           ;SPI32_ControlService.c: 96: return 0;
  5371  001590  0E00               	movlw	0
  5372  001592  0012               	return	
  5373  001594                     __end_of_InitSPI32ControlService:
  5374                           	opt stack 0
  5375                           tosu	equ	0xFFF
  5376                           tosh	equ	0xFFE
  5377                           tosl	equ	0xFFD
  5378                           pclath	equ	0xFFA
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           postinc0	equ	0xFEE
  5387                           wreg	equ	0xFE8
  5388                           indf1	equ	0xFE7
  5389                           postinc1	equ	0xFE6
  5390                           postdec1	equ	0xFE5
  5391                           fsr1h	equ	0xFE2
  5392                           fsr1l	equ	0xFE1
  5393                           indf2	equ	0xFDF
  5394                           postinc2	equ	0xFDE
  5395                           postdec2	equ	0xFDD
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _SPI32_Init *****************
  5401 ;; Defined at:
  5402 ;;		line 64 in file "SPI32_HW.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5416 ;;      Params:         0       0       0       0
  5417 ;;      Locals:         0       0       0       0
  5418 ;;      Temps:          0       0       0       0
  5419 ;;      Totals:         0       0       0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    7
  5423 ;; This function calls:
  5424 ;;		_HW_Init
  5425 ;; This function is called by:
  5426 ;;		_InitSPI32ControlService
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text33
  5431  0017F4                     __ptext33:
  5432                           	opt stack 0
  5433  0017F4                     _SPI32_Init:
  5434                           	opt stack 21
  5435                           
  5436                           ;SPI32_HW.c: 66: HW_Init();
  5437                           
  5438                           ;incstack = 0
  5439  0017F4  EC6A  F00B         	call	_HW_Init	;wreg free
  5440  0017F8  0012               	return		;funcret
  5441  0017FA                     __end_of_SPI32_Init:
  5442                           	opt stack 0
  5443                           tosu	equ	0xFFF
  5444                           tosh	equ	0xFFE
  5445                           tosl	equ	0xFFD
  5446                           pclath	equ	0xFFA
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           indf1	equ	0xFE7
  5457                           postinc1	equ	0xFE6
  5458                           postdec1	equ	0xFE5
  5459                           fsr1h	equ	0xFE2
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _HW_Init *****************
  5469 ;; Defined at:
  5470 ;;		line 117 in file "SPI32_HW.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;		None
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5484 ;;      Params:         0       0       0       0
  5485 ;;      Locals:         0       0       0       0
  5486 ;;      Temps:          0       0       0       0
  5487 ;;      Totals:         0       0       0       0
  5488 ;;Total ram usage:        0 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    6
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_SPI32_Init
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text34
  5499  0016D4                     __ptext34:
  5500                           	opt stack 0
  5501  0016D4                     _HW_Init:
  5502                           	opt stack 21
  5503                           
  5504                           ;SPI32_HW.c: 123: PORTC = 0x00;
  5505                           
  5506                           ;incstack = 0
  5507  0016D4  0E00               	movlw	0
  5508  0016D6  6E82               	movwf	3970,c	;volatile
  5509                           
  5510                           ;SPI32_HW.c: 124: LATC = 0x00;
  5511  0016D8  0E00               	movlw	0
  5512  0016DA  6E8B               	movwf	3979,c	;volatile
  5513                           
  5514                           ;SPI32_HW.c: 125: ADCON1 = 0x0F;
  5515  0016DC  0E0F               	movlw	15
  5516  0016DE  6EC1               	movwf	4033,c	;volatile
  5517                           
  5518                           ;SPI32_HW.c: 126: TRISC = 0x00;
  5519  0016E0  0E00               	movlw	0
  5520  0016E2  6E94               	movwf	3988,c	;volatile
  5521                           
  5522                           ;SPI32_HW.c: 128: SSPIE = 1;
  5523  0016E4  869D               	bsf	3997,3,c	;volatile
  5524                           
  5525                           ;SPI32_HW.c: 132: SSPCON1 = 0x00;
  5526  0016E6  0E00               	movlw	0
  5527  0016E8  6EC6               	movwf	4038,c	;volatile
  5528                           
  5529                           ;SPI32_HW.c: 133: SSPSTAT = 0b01000000;
  5530  0016EA  0E40               	movlw	64
  5531  0016EC  6EC7               	movwf	4039,c	;volatile
  5532                           
  5533                           ;SPI32_HW.c: 134: SSPADD = 0xFF;
  5534  0016EE  68C8               	setf	4040,c	;volatile
  5535                           
  5536                           ;SPI32_HW.c: 135: SSPCON1 = 0b00110010;
  5537  0016F0  0E32               	movlw	50
  5538  0016F2  6EC6               	movwf	4038,c	;volatile
  5539  0016F4  0012               	return		;funcret
  5540  0016F6                     __end_of_HW_Init:
  5541                           	opt stack 0
  5542                           tosu	equ	0xFFF
  5543                           tosh	equ	0xFFE
  5544                           tosl	equ	0xFFD
  5545                           pclath	equ	0xFFA
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           indf1	equ	0xFE7
  5556                           postinc1	equ	0xFE6
  5557                           postdec1	equ	0xFE5
  5558                           fsr1h	equ	0xFE2
  5559                           fsr1l	equ	0xFE1
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _SetupPattern *****************
  5568 ;; Defined at:
  5569 ;;		line 69 in file "Pattern_RGBPatterns.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  5572 ;;		 -> PatternConfigs(5), 
  5573 ;;  numPixels       1    2[BANK0 ] unsigned char 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5585 ;;      Params:         0       3       0       0
  5586 ;;      Locals:         0       0       0       0
  5587 ;;      Temps:          0       0       0       0
  5588 ;;      Totals:         0       3       0       0
  5589 ;;Total ram usage:        3 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    6
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_InitPatternControlService
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text35
  5600  0017BE                     __ptext35:
  5601                           	opt stack 0
  5602  0017BE                     _SetupPattern:
  5603                           	opt stack 22
  5604                           
  5605                           ;Pattern_RGBPatterns.c: 71: PatternConfigs = configs;
  5606                           
  5607                           ;incstack = 0
  5608  0017BE  C0BB  F08D         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  5609  0017C2  C0BC  F08E         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  5610                           
  5611                           ;Pattern_RGBPatterns.c: 73: Length = numPixels;
  5612  0017C6  C0BD  F096         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  5613  0017CA  0012               	return		;funcret
  5614  0017CC                     __end_of_SetupPattern:
  5615                           	opt stack 0
  5616                           tosu	equ	0xFFF
  5617                           tosh	equ	0xFFE
  5618                           tosl	equ	0xFFD
  5619                           pclath	equ	0xFFA
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           postinc0	equ	0xFEE
  5628                           wreg	equ	0xFE8
  5629                           indf1	equ	0xFE7
  5630                           postinc1	equ	0xFE6
  5631                           postdec1	equ	0xFE5
  5632                           fsr1h	equ	0xFE2
  5633                           fsr1l	equ	0xFE1
  5634                           indf2	equ	0xFDF
  5635                           postinc2	equ	0xFDE
  5636                           postdec2	equ	0xFDD
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function _ES_PostToService *****************
  5642 ;; Defined at:
  5643 ;;		line 351 in file "ES_Framework.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  WhichService    1    wreg     unsigned char 
  5646 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  WhichService    1   28[BANK0 ] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      unsigned char 
  5651 ;; Registers used:
  5652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5658 ;;      Params:         0       3       0       0
  5659 ;;      Locals:         0       1       0       0
  5660 ;;      Temps:          0       2       0       0
  5661 ;;      Totals:         0       6       0       0
  5662 ;;Total ram usage:        6 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    8
  5665 ;; This function calls:
  5666 ;;		_ES_EnQueueFIFO
  5667 ;; This function is called by:
  5668 ;;		_InitPatternControlService
  5669 ;;		_PostPatternControlService
  5670 ;;		_InitSPI32ControlService
  5671 ;;		_PostSPI32ControlService
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           	psect	text36
  5676  001214                     __ptext36:
  5677                           	opt stack 0
  5678  001214                     _ES_PostToService:
  5679                           	opt stack 18
  5680                           
  5681                           ;incstack = 0
  5682                           ;ES_PostToService@WhichService stored from wreg
  5683  001214  0100               	movlb	0	; () banked
  5684  001216  6FD7               	movwf	ES_PostToService@WhichService& (0+255),b
  5685                           
  5686                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5687                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5688                           ;ES_Framework.c: 354: 1 )){
  5689  001218  0E02               	movlw	2
  5690  00121A  0100               	movlb	0	; () banked
  5691  00121C  61D7               	cpfslt	ES_PostToService@WhichService& (0+255),b
  5692  00121E  D033               	goto	l2078
  5693                           
  5694                           ; BSR set to: 0
  5695  001220  0100               	movlb	0	; () banked
  5696  001222  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5697  001224  0D03               	mullw	3
  5698  001226  0E58               	movlw	low _EventQueues
  5699  001228  24F3               	addwf	prodl,w,c
  5700  00122A  6EF6               	movwf	tblptrl,c
  5701  00122C  0E03               	movlw	high _EventQueues
  5702  00122E  20F4               	addwfc	prodh,w,c
  5703  001230  6EF7               	movwf	tblptrh,c
  5704  001232                     	if	0	;There are less than 3 active tblptr bytes
  5705  001232                     	endif
  5706  001232  0009               	tblrd		*+
  5707  001234  CFF5 F0C7          	movff	tablat,ES_EnQueueFIFO@pBlock
  5708  001238  000A               	tblrd		*-
  5709  00123A  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  5710  00123E  C0D2  F0C9         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  5711  001242  C0D3  F0CA         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  5712  001246  C0D4  F0CB         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  5713  00124A  EC28  F005         	call	_ES_EnQueueFIFO	;wreg free
  5714  00124E  06E8               	decf	wreg,f,c
  5715  001250  A4D8               	btfss	status,2,c
  5716  001252  D019               	goto	l2078
  5717                           
  5718                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  5719  001254  0100               	movlb	0	; () banked
  5720  001256  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5721  001258  0D02               	mullw	2
  5722  00125A  0E01               	movlw	low _BitNum2SetMask
  5723  00125C  24F3               	addwf	prodl,w,c
  5724  00125E  6EF6               	movwf	tblptrl,c
  5725  001260  0E03               	movlw	high _BitNum2SetMask
  5726  001262  20F4               	addwfc	prodh,w,c
  5727  001264  6EF7               	movwf	tblptrh,c
  5728  001266                     	if	0	;There are less than 3 active tblptr bytes
  5729  001266                     	endif
  5730  001266  0009               	tblrd		*+
  5731  001268  CFF5 F0D5          	movff	tablat,??_ES_PostToService
  5732  00126C  0009               	tblrd		*+
  5733  00126E  CFF5 F0D6          	movff	tablat,??_ES_PostToService+1
  5734  001272  0100               	movlb	0	; () banked
  5735  001274  51D5               	movf	??_ES_PostToService& (0+255),w,b
  5736  001276  0100               	movlb	0	; () banked
  5737  001278  1391               	iorwf	_Ready& (0+255),f,b
  5738  00127A  0100               	movlb	0	; () banked
  5739  00127C  51D6               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5740  00127E  0100               	movlb	0	; () banked
  5741  001280  1392               	iorwf	(_Ready+1)& (0+255),f,b
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;ES_Framework.c: 356: return 1;
  5745  001282  0E01               	movlw	1
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;ES_Framework.c: 357: } else
  5749                           
  5750                           ; BSR set to: 0
  5751  001284  0012               	return	
  5752  001286                     l2078:
  5753                           
  5754                           ;ES_Framework.c: 358: return 0;
  5755  001286  0E00               	movlw	0
  5756  001288  0012               	return	
  5757  00128A                     __end_of_ES_PostToService:
  5758                           	opt stack 0
  5759                           tosu	equ	0xFFF
  5760                           tosh	equ	0xFFE
  5761                           tosl	equ	0xFFD
  5762                           pclath	equ	0xFFA
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           indf1	equ	0xFE7
  5773                           postinc1	equ	0xFE6
  5774                           postdec1	equ	0xFE5
  5775                           fsr1h	equ	0xFE2
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784 ;; *************** function _ES_EnQueueFIFO *****************
  5785 ;; Defined at:
  5786 ;;		line 85 in file "ES_Queue.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5789 ;;		 -> Queue1(12), Queue0(12), 
  5790 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5793 ;;		 -> Queue1(12), Queue0(12), 
  5794 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      unsigned char 
  5797 ;; Registers used:
  5798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5804 ;;      Params:         0       5       0       0
  5805 ;;      Locals:         0       3       0       0
  5806 ;;      Temps:          0       3       0       0
  5807 ;;      Totals:         0      11       0       0
  5808 ;;Total ram usage:       11 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    7
  5811 ;; This function calls:
  5812 ;;		___awmod
  5813 ;;		___wmul
  5814 ;; This function is called by:
  5815 ;;		_ES_PostToService
  5816 ;;		_ES_PostAll
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text37
  5821  000A50                     __ptext37:
  5822                           	opt stack 0
  5823  000A50                     _ES_EnQueueFIFO:
  5824                           	opt stack 18
  5825                           
  5826                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5827                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5828                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5829                           
  5830                           ;incstack = 0
  5831  000A50  C0C7  F0D0         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5832  000A54  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5833                           
  5834                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5835  000A58  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5836  000A5C  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5837  000A60  0100               	movlb	0	; () banked
  5838  000A62  EE10 F002          	lfsr	1,2
  5839  000A66  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5840  000A68  26E1               	addwf	fsr1l,f,c
  5841  000A6A  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5842  000A6C  22E2               	addwfc	fsr1h,f,c
  5843  000A6E  50DE               	movf	postinc2,w,c
  5844  000A70  5CE6               	subwf	postinc1,w,c
  5845  000A72  B0D8               	btfsc	status,0,c
  5846  000A74  D05C               	goto	l2062
  5847                           
  5848                           ; BSR set to: 0
  5849                           
  5850                           ;ES_Queue.c: 92: {
  5851                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5852  000A76  CFF2 F0CF          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5853  000A7A  9EF2               	bcf	intcon,7,c	;volatile
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5857                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5858                           
  5859                           ; BSR set to: 0
  5860  000A7C  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5861  000A80  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5862  000A84  50DF               	movf	indf2,w,c
  5863  000A86  0100               	movlb	0	; () banked
  5864  000A88  6FCC               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5865  000A8A  0100               	movlb	0	; () banked
  5866  000A8C  51CC               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5867  000A8E  0100               	movlb	0	; () banked
  5868  000A90  6FBD               	movwf	___awmod@divisor& (0+255),b
  5869  000A92  6BBE               	clrf	(___awmod@divisor+1)& (0+255),b
  5870  000A94  0100               	movlb	0	; () banked
  5871  000A96  EE20 F002          	lfsr	2,2
  5872  000A9A  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5873  000A9C  26D9               	addwf	fsr2l,f,c
  5874  000A9E  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5875  000AA0  22DA               	addwfc	fsr2h,f,c
  5876  000AA2  50DF               	movf	indf2,w,c
  5877  000AA4  0100               	movlb	0	; () banked
  5878  000AA6  6FCD               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5879  000AA8  0100               	movlb	0	; () banked
  5880  000AAA  EE20 F001          	lfsr	2,1
  5881  000AAE  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5882  000AB0  26D9               	addwf	fsr2l,f,c
  5883  000AB2  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5884  000AB4  22DA               	addwfc	fsr2h,f,c
  5885  000AB6  50DF               	movf	indf2,w,c
  5886  000AB8  0100               	movlb	0	; () banked
  5887  000ABA  6FCE               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5888  000ABC  0100               	movlb	0	; () banked
  5889  000ABE  51CE               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5890  000AC0  0100               	movlb	0	; () banked
  5891  000AC2  25CD               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5892  000AC4  0100               	movlb	0	; () banked
  5893  000AC6  6FBB               	movwf	___awmod@dividend& (0+255),b
  5894  000AC8  0100               	movlb	0	; () banked
  5895  000ACA  6BBC               	clrf	(___awmod@dividend+1)& (0+255),b
  5896  000ACC  0100               	movlb	0	; () banked
  5897  000ACE  37BC               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5898  000AD0  EC62  F007         	call	___awmod	;wreg free
  5899  000AD4  0E01               	movlw	1
  5900  000AD6  0100               	movlb	0	; () banked
  5901  000AD8  25BB               	addwf	?___awmod& (0+255),w,b
  5902  000ADA  0100               	movlb	0	; () banked
  5903  000ADC  6FC1               	movwf	___wmul@multiplier& (0+255),b
  5904  000ADE  0E00               	movlw	0
  5905  000AE0  0100               	movlb	0	; () banked
  5906  000AE2  21BC               	addwfc	(?___awmod+1)& (0+255),w,b
  5907  000AE4  0100               	movlb	0	; () banked
  5908  000AE6  6FC2               	movwf	(___wmul@multiplier+1)& (0+255),b
  5909  000AE8  0E00               	movlw	0
  5910  000AEA  0100               	movlb	0	; () banked
  5911  000AEC  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5912  000AEE  0E03               	movlw	3
  5913  000AF0  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5914  000AF2  ECCA  F00A         	call	___wmul	;wreg free
  5915  000AF6  0100               	movlb	0	; () banked
  5916  000AF8  51C1               	movf	?___wmul& (0+255),w,b
  5917  000AFA  0100               	movlb	0	; () banked
  5918  000AFC  25C7               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5919  000AFE  6ED9               	movwf	fsr2l,c
  5920  000B00  0100               	movlb	0	; () banked
  5921  000B02  51C2               	movf	(?___wmul+1)& (0+255),w,b
  5922  000B04  0100               	movlb	0	; () banked
  5923  000B06  21C8               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5924  000B08  6EDA               	movwf	fsr2h,c
  5925  000B0A  C0C9  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5926  000B0E  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5927  000B12  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5931  000B16  0100               	movlb	0	; () banked
  5932  000B18  EE20 F002          	lfsr	2,2
  5933  000B1C  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5934  000B1E  26D9               	addwf	fsr2l,f,c
  5935  000B20  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5936  000B22  22DA               	addwfc	fsr2h,f,c
  5937  000B24  2ADF               	incf	indf2,f,c
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5941  000B26  C0CF  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;ES_Queue.c: 101: return(1);
  5945  000B2A  0E01               	movlw	1
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;ES_Queue.c: 102: }else
  5949                           
  5950                           ; BSR set to: 0
  5951  000B2C  0012               	return	
  5952  000B2E                     l2062:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;ES_Queue.c: 103: return(0);
  5956  000B2E  0E00               	movlw	0
  5957                           
  5958                           ; BSR set to: 0
  5959  000B30  0012               	return	
  5960  000B32                     __end_of_ES_EnQueueFIFO:
  5961                           	opt stack 0
  5962                           tosu	equ	0xFFF
  5963                           tosh	equ	0xFFE
  5964                           tosl	equ	0xFFD
  5965                           pclath	equ	0xFFA
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           postinc0	equ	0xFEE
  5974                           wreg	equ	0xFE8
  5975                           indf1	equ	0xFE7
  5976                           postinc1	equ	0xFE6
  5977                           postdec1	equ	0xFE5
  5978                           fsr1h	equ	0xFE2
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function ___wmul *****************
  5988 ;; Defined at:
  5989 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5992 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  product         2   10[BANK0 ] unsigned int 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  2    6[BANK0 ] unsigned int 
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0, prodl, prodh
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6004 ;;      Params:         0       4       0       0
  6005 ;;      Locals:         0       2       0       0
  6006 ;;      Temps:          0       0       0       0
  6007 ;;      Totals:         0       6       0       0
  6008 ;;Total ram usage:        6 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    6
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		_ES_EnQueueFIFO
  6015 ;;		_ES_DeQueue
  6016 ;;		i2_ES_EnQueueFIFO
  6017 ;;		_ES_EnQueueLIFO
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text38
  6022  001594                     __ptext38:
  6023                           	opt stack 0
  6024  001594                     ___wmul:
  6025                           	opt stack 18
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;incstack = 0
  6029  001594  0100               	movlb	0	; () banked
  6030  001596  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6031  001598  0100               	movlb	0	; () banked
  6032  00159A  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6033  00159C  CFF3 F0C5          	movff	prodl,___wmul@product
  6034  0015A0  CFF4 F0C6          	movff	prodh,___wmul@product+1
  6035  0015A4  0100               	movlb	0	; () banked
  6036  0015A6  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6037  0015A8  0100               	movlb	0	; () banked
  6038  0015AA  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6039  0015AC  50F3               	movf	prodl,w,c
  6040  0015AE  0100               	movlb	0	; () banked
  6041  0015B0  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6042  0015B2  0100               	movlb	0	; () banked
  6043  0015B4  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6044  0015B6  0100               	movlb	0	; () banked
  6045  0015B8  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6046  0015BA  50F3               	movf	prodl,w,c
  6047  0015BC  0100               	movlb	0	; () banked
  6048  0015BE  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 0
  6051  0015C0  C0C5  F0C1         	movff	___wmul@product,?___wmul
  6052  0015C4  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  6053  0015C8  0012               	return	
  6054  0015CA                     __end_of___wmul:
  6055                           	opt stack 0
  6056                           tosu	equ	0xFFF
  6057                           tosh	equ	0xFFE
  6058                           tosl	equ	0xFFD
  6059                           pclath	equ	0xFFA
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           postinc0	equ	0xFEE
  6068                           wreg	equ	0xFE8
  6069                           indf1	equ	0xFE7
  6070                           postinc1	equ	0xFE6
  6071                           postdec1	equ	0xFE5
  6072                           fsr1h	equ	0xFE2
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           fsr2h	equ	0xFDA
  6078                           fsr2l	equ	0xFD9
  6079                           status	equ	0xFD8
  6080                           
  6081 ;; *************** function ___awmod *****************
  6082 ;; Defined at:
  6083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  dividend        2    0[BANK0 ] int 
  6086 ;;  divisor         2    2[BANK0 ] int 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  sign            1    5[BANK0 ] unsigned char 
  6089 ;;  counter         1    4[BANK0 ] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  2    0[BANK0 ] int 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6099 ;;      Params:         0       4       0       0
  6100 ;;      Locals:         0       2       0       0
  6101 ;;      Temps:          0       0       0       0
  6102 ;;      Totals:         0       6       0       0
  6103 ;;Total ram usage:        6 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    6
  6106 ;; This function calls:
  6107 ;;		Nothing
  6108 ;; This function is called by:
  6109 ;;		_ES_EnQueueFIFO
  6110 ;;		i2_ES_EnQueueFIFO
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text39
  6115  000EC4                     __ptext39:
  6116                           	opt stack 0
  6117  000EC4                     ___awmod:
  6118                           	opt stack 18
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;incstack = 0
  6122  000EC4  0E00               	movlw	0
  6123  000EC6  0100               	movlb	0	; () banked
  6124  000EC8  6FC0               	movwf	___awmod@sign& (0+255),b
  6125                           
  6126                           ; BSR set to: 0
  6127  000ECA  0100               	movlb	0	; () banked
  6128  000ECC  AFBC               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6129  000ECE  D008               	goto	l2018
  6130                           
  6131                           ; BSR set to: 0
  6132  000ED0  0100               	movlb	0	; () banked
  6133  000ED2  6DBB               	negf	___awmod@dividend& (0+255),b
  6134  000ED4  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6135  000ED6  B0D8               	btfsc	status,0,c
  6136  000ED8  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6137                           
  6138                           ; BSR set to: 0
  6139  000EDA  0E01               	movlw	1
  6140  000EDC  0100               	movlb	0	; () banked
  6141  000EDE  6FC0               	movwf	___awmod@sign& (0+255),b
  6142  000EE0                     l2018:
  6143                           
  6144                           ; BSR set to: 0
  6145  000EE0  0100               	movlb	0	; () banked
  6146  000EE2  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6147  000EE4  D005               	goto	l2022
  6148                           
  6149                           ; BSR set to: 0
  6150  000EE6  0100               	movlb	0	; () banked
  6151  000EE8  6DBD               	negf	___awmod@divisor& (0+255),b
  6152  000EEA  1FBE               	comf	(___awmod@divisor+1)& (0+255),f,b
  6153  000EEC  B0D8               	btfsc	status,0,c
  6154  000EEE  2BBE               	incf	(___awmod@divisor+1)& (0+255),f,b
  6155  000EF0                     l2022:
  6156                           
  6157                           ; BSR set to: 0
  6158  000EF0  0100               	movlb	0	; () banked
  6159  000EF2  51BD               	movf	___awmod@divisor& (0+255),w,b
  6160  000EF4  0100               	movlb	0	; () banked
  6161  000EF6  11BE               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6162  000EF8  B4D8               	btfsc	status,2,c
  6163  000EFA  D026               	goto	l2038
  6164                           
  6165                           ; BSR set to: 0
  6166  000EFC  0E01               	movlw	1
  6167  000EFE  0100               	movlb	0	; () banked
  6168  000F00  6FBF               	movwf	___awmod@counter& (0+255),b
  6169  000F02  D006               	goto	l2028
  6170  000F04                     l2026:
  6171                           
  6172                           ; BSR set to: 0
  6173  000F04  0100               	movlb	0	; () banked
  6174  000F06  90D8               	bcf	status,0,c
  6175  000F08  37BD               	rlcf	___awmod@divisor& (0+255),f,b
  6176  000F0A  37BE               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6177  000F0C  0100               	movlb	0	; () banked
  6178  000F0E  2BBF               	incf	___awmod@counter& (0+255),f,b
  6179  000F10                     l2028:
  6180                           
  6181                           ; BSR set to: 0
  6182  000F10  0100               	movlb	0	; () banked
  6183  000F12  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6184  000F14  D7F7               	goto	l2026
  6185  000F16                     l2030:
  6186                           
  6187                           ; BSR set to: 0
  6188  000F16  0100               	movlb	0	; () banked
  6189  000F18  51BD               	movf	___awmod@divisor& (0+255),w,b
  6190  000F1A  0100               	movlb	0	; () banked
  6191  000F1C  5DBB               	subwf	___awmod@dividend& (0+255),w,b
  6192  000F1E  0100               	movlb	0	; () banked
  6193  000F20  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6194  000F22  0100               	movlb	0	; () banked
  6195  000F24  59BC               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6196  000F26  A0D8               	btfss	status,0,c
  6197  000F28  D008               	goto	l2034
  6198                           
  6199                           ; BSR set to: 0
  6200  000F2A  0100               	movlb	0	; () banked
  6201  000F2C  51BD               	movf	___awmod@divisor& (0+255),w,b
  6202  000F2E  0100               	movlb	0	; () banked
  6203  000F30  5FBB               	subwf	___awmod@dividend& (0+255),f,b
  6204  000F32  0100               	movlb	0	; () banked
  6205  000F34  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6206  000F36  0100               	movlb	0	; () banked
  6207  000F38  5BBC               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6208  000F3A                     l2034:
  6209                           
  6210                           ; BSR set to: 0
  6211  000F3A  0100               	movlb	0	; () banked
  6212  000F3C  90D8               	bcf	status,0,c
  6213  000F3E  33BE               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6214  000F40  33BD               	rrcf	___awmod@divisor& (0+255),f,b
  6215                           
  6216                           ; BSR set to: 0
  6217  000F42  0100               	movlb	0	; () banked
  6218  000F44  2FBF               	decfsz	___awmod@counter& (0+255),f,b
  6219  000F46  D7E7               	goto	l2030
  6220  000F48                     l2038:
  6221                           
  6222                           ; BSR set to: 0
  6223  000F48  0100               	movlb	0	; () banked
  6224  000F4A  51C0               	movf	___awmod@sign& (0+255),w,b
  6225  000F4C  0100               	movlb	0	; () banked
  6226  000F4E  B4D8               	btfsc	status,2,c
  6227  000F50  D005               	goto	l2042
  6228                           
  6229                           ; BSR set to: 0
  6230  000F52  0100               	movlb	0	; () banked
  6231  000F54  6DBB               	negf	___awmod@dividend& (0+255),b
  6232  000F56  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6233  000F58  B0D8               	btfsc	status,0,c
  6234  000F5A  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6235  000F5C                     l2042:
  6236                           
  6237                           ; BSR set to: 0
  6238  000F5C  C0BB  F0BB         	movff	___awmod@dividend,?___awmod
  6239  000F60  C0BC  F0BC         	movff	___awmod@dividend+1,?___awmod+1
  6240  000F64  0012               	return	
  6241  000F66                     __end_of___awmod:
  6242                           	opt stack 0
  6243                           tosu	equ	0xFFF
  6244                           tosh	equ	0xFFE
  6245                           tosl	equ	0xFFD
  6246                           pclath	equ	0xFFA
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           intcon	equ	0xFF2
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           indf1	equ	0xFE7
  6257                           postinc1	equ	0xFE6
  6258                           postdec1	equ	0xFE5
  6259                           fsr1h	equ	0xFE2
  6260                           fsr1l	equ	0xFE1
  6261                           indf2	equ	0xFDF
  6262                           postinc2	equ	0xFDE
  6263                           postdec2	equ	0xFDD
  6264                           fsr2h	equ	0xFDA
  6265                           fsr2l	equ	0xFD9
  6266                           status	equ	0xFD8
  6267                           
  6268 ;; *************** function _DotStar_Init *****************
  6269 ;; Defined at:
  6270 ;;		line 41 in file "Pattern_DotStarLED.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;  numPixels       1    wreg     unsigned char 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6275 ;;  i               1    3[BANK0 ] unsigned char 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6285 ;;      Params:         0       0       0       0
  6286 ;;      Locals:         0       2       0       0
  6287 ;;      Temps:          0       2       0       0
  6288 ;;      Totals:         0       4       0       0
  6289 ;;Total ram usage:        4 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    6
  6292 ;; This function calls:
  6293 ;;		Nothing
  6294 ;; This function is called by:
  6295 ;;		_InitPatternControlService
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text40
  6300  000B32                     __ptext40:
  6301                           	opt stack 0
  6302  000B32                     _DotStar_Init:
  6303                           	opt stack 22
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;incstack = 0
  6307                           ;DotStar_Init@numPixels stored from wreg
  6308  000B32  0100               	movlb	0	; () banked
  6309  000B34  6FBD               	movwf	DotStar_Init@numPixels& (0+255),b
  6310                           
  6311                           ;Pattern_DotStarLED.c: 50: Length = numPixels;
  6312  000B36  C0BD  F09B         	movff	DotStar_Init@numPixels,_Length
  6313                           
  6314                           ;Pattern_DotStarLED.c: 52: PixelFrames[0] = 0xffffffff;
  6315  000B3A  0101               	movlb	1	; () banked
  6316  000B3C  6900               	setf	_PixelFrames& (0+255),b
  6317  000B3E  6901               	setf	(_PixelFrames+1)& (0+255),b
  6318  000B40  6902               	setf	(_PixelFrames+2)& (0+255),b
  6319  000B42  6903               	setf	(_PixelFrames+3)& (0+255),b
  6320                           
  6321                           ; BSR set to: 1
  6322                           ;Pattern_DotStarLED.c: 53: PixelFrames[Length+1] = 0x0;
  6323  000B44  0100               	movlb	0	; () banked
  6324  000B46  519B               	movf	_Length& (0+255),w,b
  6325  000B48  0100               	movlb	0	; () banked
  6326  000B4A  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6327  000B4C  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6328  000B4E  0100               	movlb	0	; () banked
  6329  000B50  90D8               	bcf	status,0,c
  6330  000B52  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6331  000B54  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6332  000B56  0100               	movlb	0	; () banked
  6333  000B58  90D8               	bcf	status,0,c
  6334  000B5A  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6335  000B5C  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6336  000B5E  0E04               	movlw	4
  6337  000B60  0100               	movlb	0	; () banked
  6338  000B62  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6339  000B64  0E00               	movlw	0
  6340  000B66  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6341  000B68  0E00               	movlw	low _PixelFrames
  6342  000B6A  0100               	movlb	0	; () banked
  6343  000B6C  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6344  000B6E  6ED9               	movwf	fsr2l,c
  6345  000B70  0E01               	movlw	high _PixelFrames
  6346  000B72  0100               	movlb	0	; () banked
  6347  000B74  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6348  000B76  6EDA               	movwf	fsr2h,c
  6349  000B78  6ADE               	clrf	postinc2,c
  6350  000B7A  6ADE               	clrf	postinc2,c
  6351  000B7C  6ADE               	clrf	postinc2,c
  6352  000B7E  6ADD               	clrf	postdec2,c
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;Pattern_DotStarLED.c: 55: OffFrames[0] = 0xffffffff;
  6356  000B80  0102               	movlb	2	; () banked
  6357  000B82  6900               	setf	_OffFrames& (0+255),b
  6358  000B84  6901               	setf	(_OffFrames+1)& (0+255),b
  6359  000B86  6902               	setf	(_OffFrames+2)& (0+255),b
  6360  000B88  6903               	setf	(_OffFrames+3)& (0+255),b
  6361                           
  6362                           ; BSR set to: 2
  6363                           ;Pattern_DotStarLED.c: 56: OffFrames[Length+1] = 0x0;
  6364  000B8A  0100               	movlb	0	; () banked
  6365  000B8C  519B               	movf	_Length& (0+255),w,b
  6366  000B8E  0100               	movlb	0	; () banked
  6367  000B90  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6368  000B92  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6369  000B94  0100               	movlb	0	; () banked
  6370  000B96  90D8               	bcf	status,0,c
  6371  000B98  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6372  000B9A  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6373  000B9C  0100               	movlb	0	; () banked
  6374  000B9E  90D8               	bcf	status,0,c
  6375  000BA0  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6376  000BA2  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6377  000BA4  0E04               	movlw	4
  6378  000BA6  0100               	movlb	0	; () banked
  6379  000BA8  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6380  000BAA  0E00               	movlw	0
  6381  000BAC  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6382  000BAE  0E00               	movlw	low _OffFrames
  6383  000BB0  0100               	movlb	0	; () banked
  6384  000BB2  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6385  000BB4  6ED9               	movwf	fsr2l,c
  6386  000BB6  0E02               	movlw	high _OffFrames
  6387  000BB8  0100               	movlb	0	; () banked
  6388  000BBA  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6389  000BBC  6EDA               	movwf	fsr2h,c
  6390  000BBE  6ADE               	clrf	postinc2,c
  6391  000BC0  6ADE               	clrf	postinc2,c
  6392  000BC2  6ADE               	clrf	postinc2,c
  6393  000BC4  6ADD               	clrf	postdec2,c
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;Pattern_DotStarLED.c: 57: for(uint8_t i=1;i<=Length;i++){
  6397  000BC6  0E01               	movlw	1
  6398  000BC8  0100               	movlb	0	; () banked
  6399  000BCA  6FBE               	movwf	DotStar_Init@i& (0+255),b
  6400  000BCC  D013               	goto	l2338
  6401  000BCE                     l2334:
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;Pattern_DotStarLED.c: 58: OffFrames[i] = 0xe0000000;
  6405  000BCE  0100               	movlb	0	; () banked
  6406  000BD0  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6407  000BD2  0D04               	mullw	4
  6408  000BD4  0E00               	movlw	low _OffFrames
  6409  000BD6  24F3               	addwf	prodl,w,c
  6410  000BD8  6ED9               	movwf	fsr2l,c
  6411  000BDA  0E02               	movlw	high _OffFrames
  6412  000BDC  20F4               	addwfc	prodh,w,c
  6413  000BDE  6EDA               	movwf	fsr2h,c
  6414  000BE0  0E00               	movlw	0
  6415  000BE2  6EDE               	movwf	postinc2,c
  6416  000BE4  0E00               	movlw	0
  6417  000BE6  6EDE               	movwf	postinc2,c
  6418  000BE8  0E00               	movlw	0
  6419  000BEA  6EDE               	movwf	postinc2,c
  6420  000BEC  0EE0               	movlw	224
  6421  000BEE  6EDD               	movwf	postdec2,c
  6422                           
  6423                           ; BSR set to: 0
  6424  000BF0  0100               	movlb	0	; () banked
  6425  000BF2  2BBE               	incf	DotStar_Init@i& (0+255),f,b
  6426  000BF4                     l2338:
  6427                           
  6428                           ; BSR set to: 0
  6429  000BF4  0100               	movlb	0	; () banked
  6430  000BF6  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6431  000BF8  0100               	movlb	0	; () banked
  6432  000BFA  5D9B               	subwf	_Length& (0+255),w,b
  6433  000BFC  A0D8               	btfss	status,0,c
  6434  000BFE  0012               	return	
  6435  000C00  D7E6               	goto	l2334
  6436  000C02                     __end_of_DotStar_Init:
  6437                           	opt stack 0
  6438                           tosu	equ	0xFFF
  6439                           tosh	equ	0xFFE
  6440                           tosl	equ	0xFFD
  6441                           pclath	equ	0xFFA
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postinc1	equ	0xFE6
  6453                           postdec1	equ	0xFE5
  6454                           fsr1h	equ	0xFE2
  6455                           fsr1l	equ	0xFE1
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function _ES_Timer_Init *****************
  6464 ;; Defined at:
  6465 ;;		line 130 in file "ES_Timers.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  Rate            2    2[BANK0 ] enum E15424
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;		None
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6479 ;;      Params:         0       2       0       0
  6480 ;;      Locals:         0       0       0       0
  6481 ;;      Temps:          0       0       0       0
  6482 ;;      Totals:         0       2       0       0
  6483 ;;Total ram usage:        2 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    7
  6486 ;; This function calls:
  6487 ;;		__HW_Timer_Init
  6488 ;; This function is called by:
  6489 ;;		_ES_Initialize
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           	psect	text41
  6494  0017CC                     __ptext41:
  6495                           	opt stack 0
  6496  0017CC                     _ES_Timer_Init:
  6497                           	opt stack 22
  6498                           
  6499                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;incstack = 0
  6503  0017CC  C0BD  F0BB         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  6504  0017D0  C0BE  F0BC         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  6505  0017D4  ECA5  F00B         	call	__HW_Timer_Init	;wreg free
  6506  0017D8  0012               	return		;funcret
  6507  0017DA                     __end_of_ES_Timer_Init:
  6508                           	opt stack 0
  6509                           tosu	equ	0xFFF
  6510                           tosh	equ	0xFFE
  6511                           tosl	equ	0xFFD
  6512                           pclath	equ	0xFFA
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           indf1	equ	0xFE7
  6523                           postinc1	equ	0xFE6
  6524                           postdec1	equ	0xFE5
  6525                           fsr1h	equ	0xFE2
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function __HW_Timer_Init *****************
  6535 ;; Defined at:
  6536 ;;		line 71 in file "ES_Port.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  Rate            2    0[BANK0 ] enum E15412
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6550 ;;      Params:         0       2       0       0
  6551 ;;      Locals:         0       0       0       0
  6552 ;;      Temps:          0       0       0       0
  6553 ;;      Totals:         0       2       0       0
  6554 ;;Total ram usage:        2 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    6
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_ES_Timer_Init
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text42
  6565  00174A                     __ptext42:
  6566                           	opt stack 0
  6567  00174A                     __HW_Timer_Init:
  6568                           	opt stack 22
  6569                           
  6570                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  6571                           
  6572                           ;incstack = 0
  6573  00174A  0E04               	movlw	4
  6574  00174C  6E9D               	movwf	3997,c	;volatile
  6575                           
  6576                           ;ES_Port.c: 84: INTCON = 0b01000000;
  6577  00174E  0E40               	movlw	64
  6578  001750  6EF2               	movwf	intcon,c	;volatile
  6579                           
  6580                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  6581  001752  0E0A               	movlw	10
  6582  001754  6EBD               	movwf	4029,c	;volatile
  6583                           
  6584                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  6585  001756  0E01               	movlw	1
  6586  001758  6EBE               	movwf	4030,c	;volatile
  6587                           
  6588                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  6589  00175A  0E00               	movlw	0
  6590  00175C  6EBF               	movwf	4031,c	;volatile
  6591                           
  6592                           ;ES_Port.c: 106: T1CON = 0b00100001;
  6593  00175E  0E21               	movlw	33
  6594  001760  6ECD               	movwf	4045,c	;volatile
  6595                           
  6596                           ;ES_Port.c: 108: {GIE = 1;};
  6597  001762  8EF2               	bsf	intcon,7,c	;volatile
  6598  001764  0012               	return		;funcret
  6599  001766                     __end_of__HW_Timer_Init:
  6600                           	opt stack 0
  6601                           tosu	equ	0xFFF
  6602                           tosh	equ	0xFFE
  6603                           tosl	equ	0xFFD
  6604                           pclath	equ	0xFFA
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           intcon	equ	0xFF2
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           indf1	equ	0xFE7
  6615                           postinc1	equ	0xFE6
  6616                           postdec1	equ	0xFE5
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function _ES_InitQueue *****************
  6627 ;; Defined at:
  6628 ;;		line 58 in file "ES_Queue.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  6631 ;;		 -> Queue1(12), Queue0(12), 
  6632 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  6635 ;;		 -> Queue1(12), Queue0(12), 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      unsigned char 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6645 ;;      Params:         0       3       0       0
  6646 ;;      Locals:         0       2       0       0
  6647 ;;      Temps:          0       0       0       0
  6648 ;;      Totals:         0       5       0       0
  6649 ;;Total ram usage:        5 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    6
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_ES_Initialize
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text43
  6660  00151E                     __ptext43:
  6661                           	opt stack 0
  6662  00151E                     _ES_InitQueue:
  6663                           	opt stack 23
  6664                           
  6665                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  6666                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  6667                           
  6668                           ;incstack = 0
  6669  00151E  C0BB  F0BE         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  6670  001522  C0BC  F0BF         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  6671                           
  6672                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  6673  001526  0100               	movlb	0	; () banked
  6674  001528  05BD               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  6675  00152A  C0BE  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  6676  00152E  C0BF  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  6677  001532  6EDF               	movwf	indf2,c
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  6681  001534  0100               	movlb	0	; () banked
  6682  001536  EE20 F001          	lfsr	2,1
  6683  00153A  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6684  00153C  26D9               	addwf	fsr2l,f,c
  6685  00153E  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6686  001540  22DA               	addwfc	fsr2h,f,c
  6687  001542  0E00               	movlw	0
  6688  001544  6EDF               	movwf	indf2,c
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  6692  001546  0100               	movlb	0	; () banked
  6693  001548  EE20 F002          	lfsr	2,2
  6694  00154C  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6695  00154E  26D9               	addwf	fsr2l,f,c
  6696  001550  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6697  001552  22DA               	addwfc	fsr2h,f,c
  6698  001554  0E00               	movlw	0
  6699  001556  6EDF               	movwf	indf2,c
  6700  001558  0012               	return	
  6701  00155A                     __end_of_ES_InitQueue:
  6702                           	opt stack 0
  6703                           tosu	equ	0xFFF
  6704                           tosh	equ	0xFFE
  6705                           tosl	equ	0xFFD
  6706                           pclath	equ	0xFFA
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           postinc0	equ	0xFEE
  6715                           wreg	equ	0xFE8
  6716                           indf1	equ	0xFE7
  6717                           postinc1	equ	0xFE6
  6718                           postdec1	equ	0xFE5
  6719                           fsr1h	equ	0xFE2
  6720                           fsr1l	equ	0xFE1
  6721                           indf2	equ	0xFDF
  6722                           postinc2	equ	0xFDE
  6723                           postdec2	equ	0xFDD
  6724                           fsr2h	equ	0xFDA
  6725                           fsr2l	equ	0xFD9
  6726                           status	equ	0xFD8
  6727                           
  6728 ;; *************** function _ISR *****************
  6729 ;; Defined at:
  6730 ;;		line 111 in file "ES_Port.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;		None
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;		None
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  1    wreg      void 
  6737 ;; Registers used:
  6738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6744 ;;      Params:         0       0       0       0
  6745 ;;      Locals:         0       0       0       0
  6746 ;;      Temps:         16       0       0       0
  6747 ;;      Totals:        16       0       0       0
  6748 ;;Total ram usage:       16 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    5
  6751 ;; This function calls:
  6752 ;;		_SPI32_EOTResponse
  6753 ;; This function is called by:
  6754 ;;		Interrupt level 2
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	intcode
  6759  000008                     __pintcode:
  6760                           	opt stack 0
  6761  000008                     _ISR:
  6762                           	opt stack 16
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;incstack = 0
  6766  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6767  00000A  CFFA F026          	movff	pclath,??_ISR+2
  6768  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  6769  000012  EDBD  F006         	call	int_func,f	;refresh shadow registers
  6770                           tosu	equ	0xFFF
  6771                           tosh	equ	0xFFE
  6772                           tosl	equ	0xFFD
  6773                           pclatu	equ	0xFFB
  6774                           pclath	equ	0xFFA
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           intcon	equ	0xFF2
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf1	equ	0xFE7
  6785                           postinc1	equ	0xFE6
  6786                           postdec1	equ	0xFE5
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796                           	psect	intcode_body
  6797  000D7A                     __pintcode_body:
  6798                           	opt stack 16
  6799  000D7A                     int_func:
  6800                           	opt stack 16
  6801  000D7A  0006               	pop		; remove dummy address from shadow register refresh
  6802  000D7C  CFE9 F028          	movff	fsr0l,??_ISR+4
  6803  000D80  CFEA F029          	movff	fsr0h,??_ISR+5
  6804  000D84  CFE1 F02A          	movff	fsr1l,??_ISR+6
  6805  000D88  CFE2 F02B          	movff	fsr1h,??_ISR+7
  6806  000D8C  CFD9 F02C          	movff	fsr2l,??_ISR+8
  6807  000D90  CFDA F02D          	movff	fsr2h,??_ISR+9
  6808  000D94  CFF3 F02E          	movff	prodl,??_ISR+10
  6809  000D98  CFF4 F02F          	movff	prodh,??_ISR+11
  6810  000D9C  CFF6 F030          	movff	tblptrl,??_ISR+12
  6811  000DA0  CFF7 F031          	movff	tblptrh,??_ISR+13
  6812  000DA4  CFF8 F032          	movff	tblptru,??_ISR+14
  6813  000DA8  CFF5 F033          	movff	tablat,??_ISR+15
  6814                           
  6815                           ;ES_Port.c: 114: static unsigned int LastTime;
  6816                           ;ES_Port.c: 115: static unsigned int NextTime;
  6817                           ;ES_Port.c: 117: if (CCP1IF == 1)
  6818  000DAC  A49E               	btfss	3998,2,c	;volatile
  6819  000DAE  D015               	goto	i2l2744
  6820                           
  6821                           ;ES_Port.c: 118: {
  6822                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  6823  000DB0  50BF               	movf	4031,w,c	;volatile
  6824  000DB2  6E24               	movwf	??_ISR& (0+255),c
  6825  000DB4  50BE               	movf	4030,w,c	;volatile
  6826  000DB6  6E34               	movwf	ISR@LastTime,c
  6827  000DB8  C024  F035         	movff	??_ISR,ISR@LastTime+1
  6828                           
  6829                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  6830  000DBC  0E20               	movlw	32
  6831  000DBE  2434               	addwf	ISR@LastTime,w,c
  6832  000DC0  6E36               	movwf	ISR@NextTime,c
  6833  000DC2  0E4E               	movlw	78
  6834  000DC4  2035               	addwfc	ISR@LastTime+1,w,c
  6835  000DC6  6E37               	movwf	ISR@NextTime+1,c
  6836                           
  6837                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  6838  000DC8  5037               	movf	ISR@NextTime+1,w,c
  6839  000DCA  6EBF               	movwf	4031,c	;volatile
  6840                           
  6841                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  6842  000DCC  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  6843                           
  6844                           ;ES_Port.c: 123: CCP1IF = 0;
  6845  000DD0  949E               	bcf	3998,2,c	;volatile
  6846                           
  6847                           ;ES_Port.c: 124: TickCount++;
  6848  000DD2  0100               	movlb	0	; () banked
  6849  000DD4  2B9F               	incf	_TickCount& (0+255),f,b	;volatile
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;ES_Port.c: 125: SysTickCounter++;
  6853  000DD6  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  6854  000DD8  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  6855  000DDA                     i2l2744:
  6856                           
  6857                           ;ES_Port.c: 126: }
  6858                           ;ES_Port.c: 127: if (SSPIF == 1)
  6859  000DDA  A69E               	btfss	3998,3,c	;volatile
  6860  000DDC  D003               	goto	i2l149
  6861                           
  6862                           ;ES_Port.c: 128: {
  6863                           ;ES_Port.c: 129: SSPIF = 0;
  6864  000DDE  969E               	bcf	3998,3,c	;volatile
  6865                           
  6866                           ;ES_Port.c: 130: SPI32_EOTResponse();
  6867  000DE0  ECC9  F00B         	call	_SPI32_EOTResponse	;wreg free
  6868  000DE4                     i2l149:
  6869  000DE4  C033  FFF5         	movff	??_ISR+15,tablat
  6870  000DE8  C032  FFF8         	movff	??_ISR+14,tblptru
  6871  000DEC  C031  FFF7         	movff	??_ISR+13,tblptrh
  6872  000DF0  C030  FFF6         	movff	??_ISR+12,tblptrl
  6873  000DF4  C02F  FFF4         	movff	??_ISR+11,prodh
  6874  000DF8  C02E  FFF3         	movff	??_ISR+10,prodl
  6875  000DFC  C02D  FFDA         	movff	??_ISR+9,fsr2h
  6876  000E00  C02C  FFD9         	movff	??_ISR+8,fsr2l
  6877  000E04  C02B  FFE2         	movff	??_ISR+7,fsr1h
  6878  000E08  C02A  FFE1         	movff	??_ISR+6,fsr1l
  6879  000E0C  C029  FFEA         	movff	??_ISR+5,fsr0h
  6880  000E10  C028  FFE9         	movff	??_ISR+4,fsr0l
  6881  000E14  C027  FFFB         	movff	??_ISR+3,pclatu
  6882  000E18  C026  FFFA         	movff	??_ISR+2,pclath
  6883  000E1C  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6884  000E1E  0011               	retfie		f
  6885  000E20                     __end_of_ISR:
  6886                           	opt stack 0
  6887                           tosu	equ	0xFFF
  6888                           tosh	equ	0xFFE
  6889                           tosl	equ	0xFFD
  6890                           pclatu	equ	0xFFB
  6891                           pclath	equ	0xFFA
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodh	equ	0xFF4
  6897                           prodl	equ	0xFF3
  6898                           intcon	equ	0xFF2
  6899                           postinc0	equ	0xFEE
  6900                           fsr0h	equ	0xFEA
  6901                           fsr0l	equ	0xFE9
  6902                           wreg	equ	0xFE8
  6903                           indf1	equ	0xFE7
  6904                           postinc1	equ	0xFE6
  6905                           postdec1	equ	0xFE5
  6906                           fsr1h	equ	0xFE2
  6907                           fsr1l	equ	0xFE1
  6908                           indf2	equ	0xFDF
  6909                           postinc2	equ	0xFDE
  6910                           postdec2	equ	0xFDD
  6911                           fsr2h	equ	0xFDA
  6912                           fsr2l	equ	0xFD9
  6913                           status	equ	0xFD8
  6914                           
  6915 ;; *************** function _SPI32_EOTResponse *****************
  6916 ;; Defined at:
  6917 ;;		line 156 in file "SPI32_HW.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;		None
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  1    wreg      void 
  6924 ;; Registers used:
  6925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6931 ;;      Params:         0       0       0       0
  6932 ;;      Locals:         3       0       0       0
  6933 ;;      Temps:          0       0       0       0
  6934 ;;      Totals:         3       0       0       0
  6935 ;;Total ram usage:        3 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    4
  6938 ;; This function calls:
  6939 ;;		i2_PostSPI32ControlService
  6940 ;; This function is called by:
  6941 ;;		_ISR
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text45
  6946  001792                     __ptext45:
  6947                           	opt stack 0
  6948  001792                     _SPI32_EOTResponse:
  6949                           	opt stack 16
  6950                           
  6951                           ;SPI32_HW.c: 159: ES_Event EOTevent;
  6952                           ;SPI32_HW.c: 160: EOTevent.EventType = ES_TIMEOUT;
  6953                           
  6954                           ;incstack = 0
  6955  001792  0E03               	movlw	3
  6956  001794  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  6957                           
  6958                           ;SPI32_HW.c: 161: PostSPI32ControlService(EOTevent);
  6959  001796  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  6960  00179A  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  6961  00179E  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  6962  0017A2  ECD4  F00B         	call	i2_PostSPI32ControlService	;wreg free
  6963  0017A6  0012               	return		;funcret
  6964  0017A8                     __end_of_SPI32_EOTResponse:
  6965                           	opt stack 0
  6966                           tosu	equ	0xFFF
  6967                           tosh	equ	0xFFE
  6968                           tosl	equ	0xFFD
  6969                           pclatu	equ	0xFFB
  6970                           pclath	equ	0xFFA
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           intcon	equ	0xFF2
  6978                           postinc0	equ	0xFEE
  6979                           fsr0h	equ	0xFEA
  6980                           fsr0l	equ	0xFE9
  6981                           wreg	equ	0xFE8
  6982                           indf1	equ	0xFE7
  6983                           postinc1	equ	0xFE6
  6984                           postdec1	equ	0xFE5
  6985                           fsr1h	equ	0xFE2
  6986                           fsr1l	equ	0xFE1
  6987                           indf2	equ	0xFDF
  6988                           postinc2	equ	0xFDE
  6989                           postdec2	equ	0xFDD
  6990                           fsr2h	equ	0xFDA
  6991                           fsr2l	equ	0xFD9
  6992                           status	equ	0xFD8
  6993                           
  6994 ;; *************** function i2_PostSPI32ControlService *****************
  6995 ;; Defined at:
  6996 ;;		line 117 in file "SPI32_ControlService.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;		None
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      unsigned char 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7010 ;;      Params:         3       0       0       0
  7011 ;;      Locals:         0       0       0       0
  7012 ;;      Temps:          0       0       0       0
  7013 ;;      Totals:         3       0       0       0
  7014 ;;Total ram usage:        3 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    3
  7017 ;; This function calls:
  7018 ;;		i2_ES_PostToService
  7019 ;; This function is called by:
  7020 ;;		_SPI32_EOTResponse
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text46
  7025  0017A8                     __ptext46:
  7026                           	opt stack 0
  7027  0017A8                     i2_PostSPI32ControlService:
  7028                           	opt stack 16
  7029                           
  7030                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  7031                           ;	Return value of i2_PostSPI32ControlService is never used
  7032                           
  7033                           ;incstack = 0
  7034  0017A8  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  7035  0017AC  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  7036  0017B0  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  7037  0017B4  0100               	movlb	0	; () banked
  7038  0017B6  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  7039  0017B8  EC7D  F009         	call	i2_ES_PostToService
  7040  0017BC  0012               	return	
  7041  0017BE                     __end_ofi2_PostSPI32ControlService:
  7042                           	opt stack 0
  7043                           tosu	equ	0xFFF
  7044                           tosh	equ	0xFFE
  7045                           tosl	equ	0xFFD
  7046                           pclatu	equ	0xFFB
  7047                           pclath	equ	0xFFA
  7048                           tblptru	equ	0xFF8
  7049                           tblptrh	equ	0xFF7
  7050                           tblptrl	equ	0xFF6
  7051                           tablat	equ	0xFF5
  7052                           prodh	equ	0xFF4
  7053                           prodl	equ	0xFF3
  7054                           intcon	equ	0xFF2
  7055                           postinc0	equ	0xFEE
  7056                           fsr0h	equ	0xFEA
  7057                           fsr0l	equ	0xFE9
  7058                           wreg	equ	0xFE8
  7059                           indf1	equ	0xFE7
  7060                           postinc1	equ	0xFE6
  7061                           postdec1	equ	0xFE5
  7062                           fsr1h	equ	0xFE2
  7063                           fsr1l	equ	0xFE1
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           fsr2h	equ	0xFDA
  7068                           fsr2l	equ	0xFD9
  7069                           status	equ	0xFD8
  7070                           
  7071 ;; *************** function i2_ES_PostToService *****************
  7072 ;; Defined at:
  7073 ;;		line 351 in file "ES_Framework.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  WhichService    1    wreg     unsigned char 
  7076 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  WhichService    1   28[COMRAM] unsigned char 
  7079 ;; Return value:  Size  Location     Type
  7080 ;;                  1    wreg      unsigned char 
  7081 ;; Registers used:
  7082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7088 ;;      Params:         3       0       0       0
  7089 ;;      Locals:         1       0       0       0
  7090 ;;      Temps:          2       0       0       0
  7091 ;;      Totals:         6       0       0       0
  7092 ;;Total ram usage:        6 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    2
  7095 ;; This function calls:
  7096 ;;		i2_ES_EnQueueFIFO
  7097 ;; This function is called by:
  7098 ;;		i2_PostSPI32ControlService
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text47
  7103  0012FA                     __ptext47:
  7104                           	opt stack 0
  7105  0012FA                     i2_ES_PostToService:
  7106                           	opt stack 16
  7107                           
  7108                           ;incstack = 0
  7109                           ;i2ES_PostToService@WhichService stored from wreg
  7110  0012FA  6E1D               	movwf	i2ES_PostToService@WhichService,c
  7111                           
  7112                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  7113                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  7114                           ;ES_Framework.c: 354: 1 )){
  7115  0012FC  0E02               	movlw	2
  7116  0012FE  601D               	cpfslt	i2ES_PostToService@WhichService,c
  7117  001300  D02F               	goto	i2l2382
  7118  001302  501D               	movf	i2ES_PostToService@WhichService,w,c
  7119  001304  0D03               	mullw	3
  7120  001306  0E58               	movlw	low _EventQueues
  7121  001308  24F3               	addwf	prodl,w,c
  7122  00130A  6EF6               	movwf	tblptrl,c
  7123  00130C  0E03               	movlw	high _EventQueues
  7124  00130E  20F4               	addwfc	prodh,w,c
  7125  001310  6EF7               	movwf	tblptrh,c
  7126  001312                     	if	0	;There are less than 3 active tblptr bytes
  7127  001312                     	endif
  7128  001312  0009               	tblrd		*+
  7129  001314  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  7130  001318  000A               	tblrd		*-
  7131  00131A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  7132  00131E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  7133  001322  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  7134  001326  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  7135  00132A  EC63  F006         	call	i2_ES_EnQueueFIFO	;wreg free
  7136  00132E  06E8               	decf	wreg,f,c
  7137  001330  A4D8               	btfss	status,2,c
  7138  001332  D016               	goto	i2l2382
  7139                           
  7140                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  7141  001334  501D               	movf	i2ES_PostToService@WhichService,w,c
  7142  001336  0D02               	mullw	2
  7143  001338  0E01               	movlw	low _BitNum2SetMask
  7144  00133A  24F3               	addwf	prodl,w,c
  7145  00133C  6EF6               	movwf	tblptrl,c
  7146  00133E  0E03               	movlw	high _BitNum2SetMask
  7147  001340  20F4               	addwfc	prodh,w,c
  7148  001342  6EF7               	movwf	tblptrh,c
  7149  001344                     	if	0	;There are less than 3 active tblptr bytes
  7150  001344                     	endif
  7151  001344  0009               	tblrd		*+
  7152  001346  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  7153  00134A  0009               	tblrd		*+
  7154  00134C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  7155  001350  501B               	movf	??i2_ES_PostToService,w,c
  7156  001352  0100               	movlb	0	; () banked
  7157  001354  1391               	iorwf	_Ready& (0+255),f,b
  7158  001356  501C               	movf	??i2_ES_PostToService+1,w,c
  7159  001358  0100               	movlb	0	; () banked
  7160  00135A  1392               	iorwf	(_Ready+1)& (0+255),f,b
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;ES_Framework.c: 356: return 1;
  7164  00135C  0E01               	movlw	1
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;ES_Framework.c: 357: } else
  7168                           
  7169                           ; BSR set to: 0
  7170  00135E  0012               	return	
  7171  001360                     i2l2382:
  7172                           
  7173                           ;ES_Framework.c: 358: return 0;
  7174  001360  0E00               	movlw	0
  7175  001362  0012               	return	
  7176  001364                     __end_ofi2_ES_PostToService:
  7177                           	opt stack 0
  7178                           tosu	equ	0xFFF
  7179                           tosh	equ	0xFFE
  7180                           tosl	equ	0xFFD
  7181                           pclatu	equ	0xFFB
  7182                           pclath	equ	0xFFA
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           indf1	equ	0xFE7
  7195                           postinc1	equ	0xFE6
  7196                           postdec1	equ	0xFE5
  7197                           fsr1h	equ	0xFE2
  7198                           fsr1l	equ	0xFE1
  7199                           indf2	equ	0xFDF
  7200                           postinc2	equ	0xFDE
  7201                           postdec2	equ	0xFDD
  7202                           fsr2h	equ	0xFDA
  7203                           fsr2l	equ	0xFD9
  7204                           status	equ	0xFD8
  7205                           
  7206 ;; *************** function i2_ES_EnQueueFIFO *****************
  7207 ;; Defined at:
  7208 ;;		line 85 in file "ES_Queue.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  7211 ;;		 -> Queue1(12), Queue0(12), 
  7212 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  7215 ;;		 -> Queue1(12), Queue0(12), 
  7216 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      unsigned char 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7226 ;;      Params:         5       0       0       0
  7227 ;;      Locals:         3       0       0       0
  7228 ;;      Temps:          3       0       0       0
  7229 ;;      Totals:        11       0       0       0
  7230 ;;Total ram usage:       11 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    1
  7233 ;; This function calls:
  7234 ;;		i2___awmod
  7235 ;;		i2___wmul
  7236 ;; This function is called by:
  7237 ;;		i2_ES_PostToService
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text48
  7242  000CC6                     __ptext48:
  7243                           	opt stack 0
  7244  000CC6                     i2_ES_EnQueueFIFO:
  7245                           	opt stack 16
  7246                           
  7247                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  7248                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  7249                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  7250                           
  7251                           ;incstack = 0
  7252  000CC6  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  7253  000CCA  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  7254                           
  7255                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  7256  000CCE  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7257  000CD2  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7258  000CD6  EE10 F002          	lfsr	1,2
  7259  000CDA  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7260  000CDC  26E1               	addwf	fsr1l,f,c
  7261  000CDE  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7262  000CE0  22E2               	addwfc	fsr1h,f,c
  7263  000CE2  50DE               	movf	postinc2,w,c
  7264  000CE4  5CE6               	subwf	postinc1,w,c
  7265  000CE6  B0D8               	btfsc	status,0,c
  7266  000CE8  D046               	goto	i2l2290
  7267                           
  7268                           ;ES_Queue.c: 92: {
  7269                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7270  000CEA  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  7271  000CEE  9EF2               	bcf	intcon,7,c	;volatile
  7272                           
  7273                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  7274                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  7275  000CF0  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7276  000CF4  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7277  000CF8  50DF               	movf	indf2,w,c
  7278  000CFA  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  7279  000CFC  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  7280  000CFE  6E03               	movwf	i2___awmod@divisor,c
  7281  000D00  6A04               	clrf	i2___awmod@divisor+1,c
  7282  000D02  EE20 F002          	lfsr	2,2
  7283  000D06  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7284  000D08  26D9               	addwf	fsr2l,f,c
  7285  000D0A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7286  000D0C  22DA               	addwfc	fsr2h,f,c
  7287  000D0E  50DF               	movf	indf2,w,c
  7288  000D10  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  7289  000D12  EE20 F001          	lfsr	2,1
  7290  000D16  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7291  000D18  26D9               	addwf	fsr2l,f,c
  7292  000D1A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7293  000D1C  22DA               	addwfc	fsr2h,f,c
  7294  000D1E  50DF               	movf	indf2,w,c
  7295  000D20  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  7296  000D22  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  7297  000D24  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  7298  000D26  6E01               	movwf	i2___awmod@dividend,c
  7299  000D28  6A02               	clrf	i2___awmod@dividend+1,c
  7300  000D2A  3602               	rlcf	i2___awmod@dividend+1,f,c
  7301  000D2C  EC45  F009         	call	i2___awmod	;wreg free
  7302  000D30  0E01               	movlw	1
  7303  000D32  2401               	addwf	?i2___awmod,w,c
  7304  000D34  6E07               	movwf	i2___wmul@multiplier,c
  7305  000D36  0E00               	movlw	0
  7306  000D38  2002               	addwfc	?i2___awmod+1,w,c
  7307  000D3A  6E08               	movwf	i2___wmul@multiplier+1,c
  7308  000D3C  0E00               	movlw	0
  7309  000D3E  6E0A               	movwf	i2___wmul@multiplicand+1,c
  7310  000D40  0E03               	movlw	3
  7311  000D42  6E09               	movwf	i2___wmul@multiplicand,c
  7312  000D44  EC45  F00B         	call	i2___wmul	;wreg free
  7313  000D48  5007               	movf	?i2___wmul,w,c
  7314  000D4A  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  7315  000D4C  6ED9               	movwf	fsr2l,c
  7316  000D4E  5008               	movf	?i2___wmul+1,w,c
  7317  000D50  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  7318  000D52  6EDA               	movwf	fsr2h,c
  7319  000D54  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  7320  000D58  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  7321  000D5C  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  7322                           
  7323                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7324  000D60  EE20 F002          	lfsr	2,2
  7325  000D64  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7326  000D66  26D9               	addwf	fsr2l,f,c
  7327  000D68  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7328  000D6A  22DA               	addwfc	fsr2h,f,c
  7329  000D6C  2ADF               	incf	indf2,f,c
  7330                           
  7331                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7332  000D6E  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  7333                           
  7334                           ;ES_Queue.c: 101: return(1);
  7335  000D72  0E01               	movlw	1
  7336                           
  7337                           ;ES_Queue.c: 102: }else
  7338  000D74  0012               	return	
  7339  000D76                     i2l2290:
  7340                           
  7341                           ;ES_Queue.c: 103: return(0);
  7342  000D76  0E00               	movlw	0
  7343  000D78  0012               	return	
  7344  000D7A                     __end_ofi2_ES_EnQueueFIFO:
  7345                           	opt stack 0
  7346                           tosu	equ	0xFFF
  7347                           tosh	equ	0xFFE
  7348                           tosl	equ	0xFFD
  7349                           pclatu	equ	0xFFB
  7350                           pclath	equ	0xFFA
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           postinc0	equ	0xFEE
  7359                           fsr0h	equ	0xFEA
  7360                           fsr0l	equ	0xFE9
  7361                           wreg	equ	0xFE8
  7362                           indf1	equ	0xFE7
  7363                           postinc1	equ	0xFE6
  7364                           postdec1	equ	0xFE5
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           fsr2h	equ	0xFDA
  7371                           fsr2l	equ	0xFD9
  7372                           status	equ	0xFD8
  7373                           
  7374 ;; *************** function i2___wmul *****************
  7375 ;; Defined at:
  7376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  multiplier      2    6[COMRAM] unsigned int 
  7379 ;;  multiplicand    2    8[COMRAM] unsigned int 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  __wmul          2   10[COMRAM] unsigned int 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  2    6[COMRAM] unsigned int 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0, prodl, prodh
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7391 ;;      Params:         4       0       0       0
  7392 ;;      Locals:         2       0       0       0
  7393 ;;      Temps:          0       0       0       0
  7394 ;;      Totals:         6       0       0       0
  7395 ;;Total ram usage:        6 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		i2_ES_EnQueueFIFO
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text49
  7405  00168A                     __ptext49:
  7406                           	opt stack 0
  7407  00168A                     i2___wmul:
  7408                           	opt stack 16
  7409                           
  7410                           ;incstack = 0
  7411  00168A  5007               	movf	i2___wmul@multiplier,w,c
  7412  00168C  0209               	mulwf	i2___wmul@multiplicand,c
  7413  00168E  CFF3 F00B          	movff	prodl,i2___wmul@product
  7414  001692  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7415  001696  5007               	movf	i2___wmul@multiplier,w,c
  7416  001698  020A               	mulwf	i2___wmul@multiplicand+1,c
  7417  00169A  50F3               	movf	prodl,w,c
  7418  00169C  260C               	addwf	i2___wmul@product+1,f,c
  7419  00169E  5008               	movf	i2___wmul@multiplier+1,w,c
  7420  0016A0  0209               	mulwf	i2___wmul@multiplicand,c
  7421  0016A2  50F3               	movf	prodl,w,c
  7422  0016A4  260C               	addwf	i2___wmul@product+1,f,c
  7423  0016A6  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7424  0016AA  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7425  0016AE  0012               	return	
  7426  0016B0                     __end_ofi2___wmul:
  7427                           	opt stack 0
  7428                           tosu	equ	0xFFF
  7429                           tosh	equ	0xFFE
  7430                           tosl	equ	0xFFD
  7431                           pclatu	equ	0xFFB
  7432                           pclath	equ	0xFFA
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           intcon	equ	0xFF2
  7440                           postinc0	equ	0xFEE
  7441                           fsr0h	equ	0xFEA
  7442                           fsr0l	equ	0xFE9
  7443                           wreg	equ	0xFE8
  7444                           indf1	equ	0xFE7
  7445                           postinc1	equ	0xFE6
  7446                           postdec1	equ	0xFE5
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function i2___awmod *****************
  7457 ;; Defined at:
  7458 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  dividend        2    0[COMRAM] int 
  7461 ;;  divisor         2    2[COMRAM] int 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  __awmod         1    5[COMRAM] unsigned char 
  7464 ;;  __awmod         1    4[COMRAM] unsigned char 
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  2    0[COMRAM] int 
  7467 ;; Registers used:
  7468 ;;		wreg, status,2, status,0
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7474 ;;      Params:         4       0       0       0
  7475 ;;      Locals:         2       0       0       0
  7476 ;;      Temps:          0       0       0       0
  7477 ;;      Totals:         6       0       0       0
  7478 ;;Total ram usage:        6 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		i2_ES_EnQueueFIFO
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text50
  7488  00128A                     __ptext50:
  7489                           	opt stack 0
  7490  00128A                     i2___awmod:
  7491                           	opt stack 16
  7492                           
  7493                           ;incstack = 0
  7494  00128A  0E00               	movlw	0
  7495  00128C  6E06               	movwf	i2___awmod@sign,c
  7496  00128E  AE02               	btfss	i2___awmod@dividend+1,7,c
  7497  001290  D006               	goto	i2l2164
  7498  001292  6C01               	negf	i2___awmod@dividend,c
  7499  001294  1E02               	comf	i2___awmod@dividend+1,f,c
  7500  001296  B0D8               	btfsc	status,0,c
  7501  001298  2A02               	incf	i2___awmod@dividend+1,f,c
  7502  00129A  0E01               	movlw	1
  7503  00129C  6E06               	movwf	i2___awmod@sign,c
  7504  00129E                     i2l2164:
  7505  00129E  AE04               	btfss	i2___awmod@divisor+1,7,c
  7506  0012A0  D004               	goto	i2l2168
  7507  0012A2  6C03               	negf	i2___awmod@divisor,c
  7508  0012A4  1E04               	comf	i2___awmod@divisor+1,f,c
  7509  0012A6  B0D8               	btfsc	status,0,c
  7510  0012A8  2A04               	incf	i2___awmod@divisor+1,f,c
  7511  0012AA                     i2l2168:
  7512  0012AA  5003               	movf	i2___awmod@divisor,w,c
  7513  0012AC  1004               	iorwf	i2___awmod@divisor+1,w,c
  7514  0012AE  B4D8               	btfsc	status,2,c
  7515  0012B0  D018               	goto	i2l2184
  7516  0012B2  0E01               	movlw	1
  7517  0012B4  6E05               	movwf	i2___awmod@counter,c
  7518  0012B6  D004               	goto	i2l2174
  7519  0012B8                     i2l2172:
  7520  0012B8  90D8               	bcf	status,0,c
  7521  0012BA  3603               	rlcf	i2___awmod@divisor,f,c
  7522  0012BC  3604               	rlcf	i2___awmod@divisor+1,f,c
  7523  0012BE  2A05               	incf	i2___awmod@counter,f,c
  7524  0012C0                     i2l2174:
  7525  0012C0  AE04               	btfss	i2___awmod@divisor+1,7,c
  7526  0012C2  D7FA               	goto	i2l2172
  7527  0012C4                     i2l2176:
  7528  0012C4  5003               	movf	i2___awmod@divisor,w,c
  7529  0012C6  5C01               	subwf	i2___awmod@dividend,w,c
  7530  0012C8  5004               	movf	i2___awmod@divisor+1,w,c
  7531  0012CA  5802               	subwfb	i2___awmod@dividend+1,w,c
  7532  0012CC  A0D8               	btfss	status,0,c
  7533  0012CE  D004               	goto	i2l2180
  7534  0012D0  5003               	movf	i2___awmod@divisor,w,c
  7535  0012D2  5E01               	subwf	i2___awmod@dividend,f,c
  7536  0012D4  5004               	movf	i2___awmod@divisor+1,w,c
  7537  0012D6  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7538  0012D8                     i2l2180:
  7539  0012D8  90D8               	bcf	status,0,c
  7540  0012DA  3204               	rrcf	i2___awmod@divisor+1,f,c
  7541  0012DC  3203               	rrcf	i2___awmod@divisor,f,c
  7542  0012DE  2E05               	decfsz	i2___awmod@counter,f,c
  7543  0012E0  D7F1               	goto	i2l2176
  7544  0012E2                     i2l2184:
  7545  0012E2  5006               	movf	i2___awmod@sign,w,c
  7546  0012E4  B4D8               	btfsc	status,2,c
  7547  0012E6  D004               	goto	i2l2188
  7548  0012E8  6C01               	negf	i2___awmod@dividend,c
  7549  0012EA  1E02               	comf	i2___awmod@dividend+1,f,c
  7550  0012EC  B0D8               	btfsc	status,0,c
  7551  0012EE  2A02               	incf	i2___awmod@dividend+1,f,c
  7552  0012F0                     i2l2188:
  7553  0012F0  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7554  0012F4  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7555  0012F8  0012               	return	
  7556  0012FA                     __end_ofi2___awmod:
  7557                           	opt stack 0
  7558                           tosu	equ	0xFFF
  7559                           tosh	equ	0xFFE
  7560                           tosl	equ	0xFFD
  7561                           pclatu	equ	0xFFB
  7562                           pclath	equ	0xFFA
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           postinc0	equ	0xFEE
  7571                           fsr0h	equ	0xFEA
  7572                           fsr0l	equ	0xFE9
  7573                           wreg	equ	0xFE8
  7574                           indf1	equ	0xFE7
  7575                           postinc1	equ	0xFE6
  7576                           postdec1	equ	0xFE5
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           tosu	equ	0xFFF
  7586                           tosh	equ	0xFFE
  7587                           tosl	equ	0xFFD
  7588                           pclatu	equ	0xFFB
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           postinc0	equ	0xFEE
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           indf1	equ	0xFE7
  7602                           postinc1	equ	0xFE6
  7603                           postdec1	equ	0xFE5
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           fsr2h	equ	0xFDA
  7610                           fsr2l	equ	0xFD9
  7611                           status	equ	0xFD8
  7612                           
  7613                           	psect	text51
  7614  000000                     __ptext51:
  7615                           	opt stack 0
  7616                           tosu	equ	0xFFF
  7617                           tosh	equ	0xFFE
  7618                           tosl	equ	0xFFD
  7619                           pclatu	equ	0xFFB
  7620                           pclath	equ	0xFFA
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           postinc0	equ	0xFEE
  7629                           fsr0h	equ	0xFEA
  7630                           fsr0l	equ	0xFE9
  7631                           wreg	equ	0xFE8
  7632                           indf1	equ	0xFE7
  7633                           postinc1	equ	0xFE6
  7634                           postdec1	equ	0xFE5
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644                           	psect	rparam
  7645  0000                     tosu	equ	0xFFF
  7646                           tosh	equ	0xFFE
  7647                           tosl	equ	0xFFD
  7648                           pclatu	equ	0xFFB
  7649                           pclath	equ	0xFFA
  7650                           tblptru	equ	0xFF8
  7651                           tblptrh	equ	0xFF7
  7652                           tblptrl	equ	0xFF6
  7653                           tablat	equ	0xFF5
  7654                           prodh	equ	0xFF4
  7655                           prodl	equ	0xFF3
  7656                           intcon	equ	0xFF2
  7657                           postinc0	equ	0xFEE
  7658                           fsr0h	equ	0xFEA
  7659                           fsr0l	equ	0xFE9
  7660                           wreg	equ	0xFE8
  7661                           indf1	equ	0xFE7
  7662                           postinc1	equ	0xFE6
  7663                           postdec1	equ	0xFE5
  7664                           fsr1h	equ	0xFE2
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           fsr2h	equ	0xFDA
  7670                           fsr2l	equ	0xFD9
  7671                           status	equ	0xFD8
  7672                           
  7673                           	psect	temp
  7674  00003E                     btemp:
  7675                           	opt stack 0
  7676  00003E                     	ds	1
  7677  0000                     int$flags	set	btemp
  7678                           tosu	equ	0xFFF
  7679                           tosh	equ	0xFFE
  7680                           tosl	equ	0xFFD
  7681                           pclatu	equ	0xFFB
  7682                           pclath	equ	0xFFA
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           intcon	equ	0xFF2
  7690                           postinc0	equ	0xFEE
  7691                           fsr0h	equ	0xFEA
  7692                           fsr0l	equ	0xFE9
  7693                           wreg	equ	0xFE8
  7694                           indf1	equ	0xFE7
  7695                           postinc1	equ	0xFE6
  7696                           postdec1	equ	0xFE5
  7697                           fsr1h	equ	0xFE2
  7698                           fsr1l	equ	0xFE1
  7699                           indf2	equ	0xFDF
  7700                           postinc2	equ	0xFDE
  7701                           postdec2	equ	0xFDD
  7702                           fsr2h	equ	0xFDA
  7703                           fsr2l	equ	0xFD9
  7704                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        58
    BSS         476
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      61
    BANK0           160     55     151
    BANK1           256      0     180
    BANK2           256      0     248

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@s1	PTR const void  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 128
		 -> OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 128
		 -> NULL(NULL[0]), OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    sp__memcpy	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    DotStar_Show@pixelPointer	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__UpdatePattern	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S111$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunPatternControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _DotStar_Off->_SPI32_TransmitFrames
    _ShowPattern->_DotStar_Show
    _UpdatePattern->___lmul
    _DotStar_Show->_SPI32_TransmitFrames
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27318
                                             54 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   20459
                                             49 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6048
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6048
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                               7     4      3     230
                                             40 BANK0      7     4      3
                       _GetNextFrame
                     _SPI32_SendByte
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   11378
                                             40 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0    3337
                        _DotStar_Off
                 _ES_Timer_StopTimer
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _DotStar_Off                                          0     0      0    3293
               _SPI32_TransmitFrames
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0    5004
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                       11     9      2    1057
                                             12 BANK0     11     9      2
                            ___lbmod
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                         2     0      2    3739
                                             38 BANK0      2     0      2
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     348
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    3293
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    2922
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    2793
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2313
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     284
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6463
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    2740
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    3004
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2695
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0     868
                                             35 COMRAM    16    16      0
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     868
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             ___lbmod
             ___llmod
             ___lmul
           _memcpy (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           ___lbmod
           ___llmod
           ___lmul
       _StopPattern
         _DotStar_Off
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
         _ES_Timer_StopTimer
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendByte
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      F8       8       96.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B4       6       70.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     37      97       4       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     280       9        0.0%
DATA                 0      0     280      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Oct 31 22:41:03 2016

                   ??__HW_Timer_Init 00BD                  ES_CheckUserEvents@i 00BB  
                __HW_Timer_Init@Rate 00BB                  ___wmul@multiplicand 00C3  
                    ??_UpdatePattern 00C9  RunPatternControlService@ReturnEvent 00E6  
                                l324 0CB8                                  l453 0862  
                                l529 111C                                  l901 0FEE  
              __end_of_ES_Initialize 0A50                                  _GIE 007F97  
                                _ISR 0008            __end_of_SPI32_EOTResponse 17A8  
                       ___awmod@sign 00C0              __end_of_Check4Keystroke 1804  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00CF  
            ES_EnQueueFIFO@Event2Add 00C9                    ?_ES_PostToService 00D2  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 008D                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0088                                 l2030 0F16  
                               l2022 0EF0                                 l2110 11B0  
                               l2120 14A8                                 l2042 0F5C  
                               l2034 0F3A                                 l2026 0F04  
                               l2018 0EE0                                 l2114 11D6  
                               l2028 0F10                                 l2140 0F92  
                               l2204 0EB8                                 l2038 0F48  
                               l2062 0B2E                                 l2142 0F98  
                               l2302 0672                                 l2128 14D0  
                               l2216 13C4                                 l2240 03F0  
                               l2208 0EBE                                 l2312 06EA  
                               l2146 0FDC                                 l2138 0F82  
                               l2314 0728                                 l2420 0630  
                               l2244 049A                                 l2500 0C64  
                               l2334 0BCE                                 l2078 1286  
                               l2094 1436                                 l2238 03E8  
                               l2254 0500                                 l2416 0614  
                               l2088 1416                                 l2256 0528  
                               l2512 0C86                                 l2520 0C9C  
                               l2338 0BF4                                 l2610 09C8  
                               l2602 0980                                 l2426 0658  
                               l2506 0C76                                 l2194 0E2C  
                               l2444 1768                                 l2606 09C4  
                               l2622 0A4C                                 l2472 13B2  
                               l2544 077C                                 l2448 1770  
                               l2632 08F4                                 l2538 1590  
                               l2618 0A46                                 l2562 07C8  
                               l2554 07AE                                 l2490 0C44  
                               l2642 095E                                 l2626 0872  
                               l2810 10BC                                 l2556 07B2  
                               l2548 0788                                 l2484 0C32  
                               l2812 10CE                                 l2820 1104  
                               l2574 07F4                                 l2494 0C54  
                               l2478 0C0A                                 l2638 0948  
                               l2654 160C                                 l2814 10E0  
                               l2584 0832                                 l2568 07DE  
                               l2488 0C40                                 l2656 1614  
                               l2816 10F2                                 l2588 083A  
                               l2598 0976                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 u1310 0400  
                               u1320 0402                                 u1244 0E52  
                               u1245 0E4A                                 _LATC 000F8B  
                               u1448 1474                                 u1449 148C  
                               u1388 06D2                                 _PIE1 000F9D  
                               u1738 091E                                 u1739 0936  
                               u1698 0A20                                 u1699 0A3C  
                 ??_ES_PostToService 00D5                      __end_of_HW_Init 16F6  
                               _main 1090                          ?_ES_DeQueue 00C7  
          Pattern_RGBPatterns@Length 0096                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 003E  
                      main@ErrorType 00F1                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016    __end_of_InitPatternControlService 13B6  
                    ?_SPI32_SendByte 0001                          ?_SPI32_Init 0001  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
               __end_of_GetNextFrame 16D4                                ??_ISR 0024  
                 ES_Run@HighestPrior 00F0                  __end_of_DotStar_Off 172E  
                              ?_main 0001                __end_of_ES_Timer_Init 17DA  
                    __end_of___awmod 0F66                      __end_of___lbmod 14DC  
                              _T1CON 000FCD                      __end_of___llmod 1000  
                         _DistList00 0360                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l149 0DE4          ??i2_PostSPI32ControlService 0021  
                              _PORTC 000F82                                _TRISC 000F94  
                              _SSPIE 007CEB                                _SSPIF 007CF3  
                      __CFG_PWRT$OFF 000000                 _SPI32_TransmitFrames 1632  
                ___lmul@multiplicand 00BF                                _Ready 0091  
    __end_of_InitSPI32ControlService 1594                           _FrameIndex 009A  
              SPI32_SendByte@newByte 00BB                                _putch 1804  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 16B0  
                              status 000FD8                   __size_ofi2___awmod 0070  
                    __initialization 1000               ES_GetMSBitSet@LoopCntr 00C4  
         __end_of_ES_CheckUserEvents 1498                         __end_of_main 111E  
                  ES_Timer_Init@Rate 00BD                  __end_of_EventQueues 035E  
                             ??_main 00F1                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 0016  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 00DB     __end_of__HW_Process_Pending_Ints 177C  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 0C02                 __end_of_DotStar_Show 151E  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 00BB                               _CCP1IF 007CF2  
                   ___llmod@dividend 00BB                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 009C  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BD  
                             i2l2180 12D8                               i2l2172 12B8  
                             i2l2164 129E                               i2l2174 12C0  
                             i2l2176 12C4                               i2l2184 12E2  
                             i2l2168 12AA                               i2l2290 0D76  
                             i2l2188 12F0                               i2l2382 1360  
                             i2l2744 0DDA                               _INTCON 000FF2  
                             _ES_Run 0870                               _SSPADD 000FC8  
                             _SSPBUF 000FC9            i2_PostSPI32ControlService 17A8  
                   ??_ES_EnQueueFIFO 00CC                       _Timer2PostFunc 0321  
                             _Length 009B        SPI32_TransmitFrames@numFrames 00DD  
                      ?_PausePattern 0001                               _Queue0 00A0  
                             _Queue1 00AC                       _SysTickCounter 0038  
                        _DotStar_Off 1712                               ___lmul 119E  
           ??_RunSPI32ControlService 00E6                               ___wmul 1594  
    InitSPI32ControlService@Priority 00DB                            ??___awmod 00BF  
                          ??___lbmod 00BC                            ??___llmod 00C3  
                             _memcpy 1404          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 1058                               clear_1 1064  
                             clear_2 1070                               clear_3 107C  
                    ___awmod@divisor 00BD                        ??_ShowPattern 00E3  
          ES_Timer_InitTimer@NewTime 00BB                      ___awmod@counter 00BF  
                             _printf 15FE                          ISR@LastTime 0034  
                       __pdataCOMRAM 003D               ES_InitQueue@pThisQueue 00BE  
                  __end_ofi2___awmod 12FA                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00CF  
             UpdatePattern@patternID 00D0              ES_GetMSBitSet@Val2Check 00BB  
                    ___lbmod@divisor 00BB                           __accesstop 0060  
            __end_of__initialization 1082               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BD      RunSPI32ControlService@ThisEvent 00E3  
                    __CFG_PBADEN$OFF 000000    __size_of_RunPatternControlService 00C4  
          ?_RunPatternControlService 00E3                __size_of_GetNextFrame 0024  
                      ___rparam_used 000001          ??_InitPatternControlService 00D8  
                     ??_PausePattern 00C0                          _EventQueues 0358  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                       __pidataBANK0 17FA                         __pidataBANK1 15CA  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 00BB  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 1734                        __end_of_putch 1806  
                    _TMR_ActiveFlags 0093               ??_SPI32_TransmitFrames 00DE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00C2  
                      ?_ResetPattern 0001                  __end_of_ShowPattern 168A  
                      ??_StopPattern 00E1                       _TMR_TimerArray 0060  
                       _GetNextFrame 16B0             ES_EnQueueFIFO@pThisQueue 00D0  
                            ??_putch 00BB             __HW_Process_Pending_Ints 1766  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                     ??_SPI32_SendByte 00BB  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00CB  
                       ??_SPI32_Init 00BB             ?_PostSPI32ControlService 00D8  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BE  
                            ?___lmul 00BB                              ?___wmul 00C1  
    __size_of_RunSPI32ControlService 00FC                              _CCP1CON 000FBD  
                            ?_memcpy 00BB                       ___lmul@product 00C3  
                            ?_printf 00BB                __size_of_DotStar_Init 00D0  
                     ??_ResetPattern 00BB                __end_of_UpdatePattern 0536  
              __size_of_DotStar_Show 0042                           ??i2___wmul 000B  
          _InitPatternControlService 1364                   __end_of_ES_DeQueue 065E  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 00BF  
                            _HW_Init 16D4                              _SSPCON1 000FC6  
                 __end_of_SPI32_Init 17FA                              _SSPSTAT 000FC7  
   SPI32_ControlService@CurrentState 0097                      __size_of_ES_Run 00F4  
                __end_of_StopPattern 1712                          _PixelFrames 0100  
                      ?_SetupPattern 00BB               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
 i2PostSPI32ControlService@ThisEvent 001E     PostSPI32ControlService@ThisEvent 00D8  
   InitSPI32ControlService@ThisEvent 00D8            i2ES_EnQueueFIFO@Event2Add 000F  
            UpdatePattern@brightness 00CF                         _DotStar_Init 0B32  
                       _DotStar_Show 14DC                      __size_of___lmul 0076  
         ?_PostPatternControlService 00D8                              ___awmod 0EC4  
                            ___lbmod 1498                      __size_of___wmul 0036  
                            ___llmod 0F66   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 00BF  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1000  
                    __size_of_memcpy 004A                              __ramtop 0300  
                        _ShowPattern 1664                              __ptext0 1090  
                            __ptext1 15FE                              __ptext2 1804  
                            __ptext3 0870                              __ptext4 1766  
                            __ptext5 065E                              __ptext6 0E20  
                            __ptext7 0C02                              __ptext8 0774  
                            __ptext9 17DA             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 0E18  
                       _FramePointer 008F              __size_of__HW_Timer_Init 001C  
                   ___awmod@dividend 00BB                   _ES_CheckUserEvents 144E  
                    ES_Run@ThisEvent 00B8                 __end_of_PausePattern 17F4  
             _RunSPI32ControlService 0774                       __pintcode_body 0D7A  
               end_of_initialization 1082                  ?_ES_CheckUserEvents 0001  
                            memcpy@d 00C1                              memcpy@n 00BF  
                            memcpy@s 00C3            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 0D7A  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 174A  
       ES_PostToService@WhichService 00D7                       ??_SetupPattern 00BE  
             __size_of_ES_Timer_Init 000E             DotStar_Show@pixelPointer 00E1  
                       ?_DotStar_Off 0001                              printf@c 00BF  
                            printf@f 00BB              _InitSPI32ControlService 155A  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE    __end_of_PostPatternControlService 1792  
               ??_ES_CheckUserEvents 00BB                        _ES_Initialize 0964  
   __end_of_RunPatternControlService 0CC6                     ___lbmod@dividend 00BC  
  RunPatternControlService@ThisEvent 00E3   PostPatternControlService@ThisEvent 00D8  
 InitPatternControlService@ThisEvent 00D8                 __end_of_ES_EventList 0360  
                        _StopPattern 16F6                 __end_of_ES_InitQueue 155A  
                          i2___awmod 128A                       ES_Initialize@i 00DE  
                        ___lbmod@rem 00BE             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 0964                 __end_of_ResetPattern 17EC  
                          _GenColors 0180                   __end_of_DistList00 0364  
                   _ES_PostToService 1214           __end_of_ES_Timer_InitTimer 119E  
               __end_of_ServDescList 0358                       __end_of___lmul 1214  
                     __end_of___wmul 15CA                        __pidataCOMRAM 1806  
                     __end_of_memcpy 144E                SetupPattern@numPixels 00BD  
                     ?_ES_Initialize 00DC                            _OffFrames 0200  
         ??__HW_Process_Pending_Ints 00DF                        _ES_Timer_Init 17CC  
                   i2___wmul@product 000B                       __end_of_printf 1632  
         __end_of_ES_Timer_Tick_Resp 0774                  start_initialization 1000  
                        __end_of_ISR 0E20                    __size_ofi2___wmul 0026  
                       _CurrentFrame 0080                         _CurrentState 0099  
                         ?i2___awmod 0001   __size_of_InitPatternControlService 0052  
                           ??_ES_Run 00EC                     __CFG_OSC$IRCIO67 000000  
                    ___llmod@divisor 00BF                            _TickCount 009F  
                    ___llmod@counter 00C3                            _NumFrames 009D  
         __end_ofi2_ES_PostToService 1364            ??_InitSPI32ControlService 00D8  
         __end_of_ES_Timer_StopTimer 1404                            _NumPixels 003C  
            __size_of_ES_GetMSBitSet 00A4                            _TestColor 0084  
                           ??___lmul 00C3                             ??___wmul 00C5  
                        __pdataBANK0 00F2                          __pdataBANK1 0180  
                           ??_memcpy 00C1              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 00BD            SPI32_EOTResponse@EOTevent 0021  
              __size_of_PausePattern 0008                       ?_ES_Timer_Init 00BD  
                     __HW_Timer_Init 174A                 __end_of_SetupPattern 17CC  
                        __pbssCOMRAM 0034     __size_of_PostSPI32ControlService 001C  
      __size_of_SPI32_TransmitFrames 0032                        __pcstackBANK0 00BB  
                 ES_InitQueue@pBlock 00BB    RunPatternControlService@testEvent 00E9  
                           ?_HW_Init 0001             _RunPatternControlService 0C02  
   SPI32_TransmitFrames@framePointer 00DB                     i2_ES_EnQueueFIFO 0CC6  
                      __PRIMASK_temp 003A                    ??_Check4Keystroke 00BB  
                       _PausePattern 17EC                            __pintcode 0008  
                           ?___awmod 00BB                             ?___lbmod 00BB  
                           ?___llmod 00BB          ??_PostPatternControlService 00DB  
               __size_of_DotStar_Off 001C                      ??_ES_Initialize 00DE  
           ES_PostToService@TheEvent 00D2               __end_of__HW_Timer_Init 1766  
                       ?_ShowPattern 0001                          __smallconst 0300  
              __size_of_ES_InitQueue 003C              ?_RunSPI32ControlService 00E3  
                        ??i2___awmod 0005                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 00DC  
          ES_GetMSBitSet@Nybble2Test 00C3                   _PatternStepCounter 009E  
                     ___wmul@product 00C5               __size_of_UpdatePattern 0178  
              DotStar_Init@numPixels 00BD                         _ES_EventList 035E  
            __size_of_SPI32_SendByte 000A                         _ES_InitQueue 151E  
                    ??_ES_Timer_Init 00BF       i2ES_PostToService@WhichService 001D  
                    ?__HW_Timer_Init 00BB                    ___wmul@multiplier 00C1  
     __end_of_RunSPI32ControlService 0870                             i2___wmul 168A  
                       _ResetPattern 17E4                   ES_DeQueue@SaveCrit 00CD  
               ES_EnQueueFIFO@pBlock 00C7             __end_of_ES_PostToService 128A  
                       ?_StopPattern 0001            _PostPatternControlService 177C  
                  ___lmul@multiplier 00BB                            copy_data0 1014  
                          copy_data1 1034                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00F2  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                       _PixelPattern 0280                             __Hrparam 0000  
                     _ES_GetMSBitSet 0E20                             __Lrparam 0000  
  RunSPI32ControlService@ReturnEvent 00E7                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                   __size_of___llmod 009A                       _ES_EnQueueFIFO 0A50  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 172E  
                      _UpdatePattern 03BE                   _ES_Timer_InitTimer 111E  
             __end_of_BitNum2SetMask 0321                             __ptext10 16B0  
                           __ptext11 16F6                             __ptext20 1404  
                           __ptext12 17E4                             __ptext21 1632  
                           __ptext13 1712                             __ptext30 0964  
                           __ptext22 177C                             __ptext14 1664  
                           __ptext31 1364                             __ptext23 172E  
                           __ptext15 03BE                             __ptext40 0B32  
                           __ptext32 155A                             __ptext24 17EC  
                           __ptext16 119E                             __ptext41 17CC  
                           __ptext33 17F4                             __ptext25 13B6  
                           __ptext17 0F66                             __ptext50 128A  
                           __ptext42 174A                             __ptext34 16D4  
                           __ptext26 0536                             __ptext18 111E  
                           __ptext51 0000                             __ptext43 151E  
                           __ptext35 17BE                             __ptext27 1498  
                           __ptext19 14DC                             __ptext36 1214  
                           __ptext28 144E                             __ptext45 1792  
                           __ptext37 0A50                             __ptext29 1800  
                           __ptext46 17A8                             __ptext38 1594  
                           __ptext47 12FA                             __ptext39 0EC4  
                           __ptext48 0CC6                             __ptext49 168A  
                      ?_GetNextFrame 00BB    ES_Timer_Tick_Resp@NeedsProcessing 008B  
                     UpdatePattern@i 00D1                  ?_ES_Timer_InitTimer 00BB  
                      __size_of_main 008E                   _ES_Timer_Tick_Resp 065E  
             __end_of_ES_GetMSBitSet 0EC4                         _SetupPattern 17BE  
                ?_ES_Timer_Tick_Resp 0001               __end_of_ES_EnQueueFIFO 0B32  
                           int$flags 003E                  SetupPattern@configs 00BB  
               ??_ES_Timer_InitTimer 00BD       SPI32_ControlService@MyPriority 0098  
                      _MaxBrightness 003D                    ES_DeQueue@NumLeft 00CE  
                 i2_ES_PostToService 12FA                        DotStar_Init@i 00BE  
           __end_ofi2_ES_EnQueueFIFO 0D7A                   _ES_Timer_StopTimer 13B6  
                     ?_UpdatePattern 00C7           ??_RunPatternControlService 00E6  
                  i2___awmod@divisor 0003                    i2___awmod@counter 0005  
               __size_of_ShowPattern 0026    __end_ofi2_PostSPI32ControlService 17BE  
                           memcpy@d1 00BB                             memcpy@s1 00BD  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 00BF  
               ??_ES_Timer_Tick_Resp 00DB                  ?_ES_Timer_StopTimer 0001  
                    _Check4Keystroke 1800                             intlevel2 0000  
                         _ES_DeQueue 0536    __size_of__HW_Process_Pending_Ints 0016  
          ?__HW_Process_Pending_Ints 0001                      ?_ES_GetMSBitSet 00BB  
       __end_of_SPI32_TransmitFrames 1664                 ??i2_ES_PostToService 001B  
                         _SPI32_Init 17F4                        ?_DotStar_Init 0001  
                      ?_DotStar_Show 00E1                 ??_ES_Timer_StopTimer 00BB  
                     _SPI32_SendByte 17DA  ES_Timer_Tick_Resp@NextTimer2Process 0095  
                           printf@ap 00BD                      ?_ES_EnQueueFIFO 00C7  
          ??_PostSPI32ControlService 00DB                     ES_DeQueue@pBlock 00C7  
  SPI32_TransmitFrames@transmitEvent 00DE    InitPatternControlService@Priority 00DB  
                  _SPI32_EOTResponse 1792               ES_DeQueue@pReturnEvent 00C9  
              ES_InitQueue@BlockSize 00BD                   ?_SPI32_EOTResponse 0001  
               __size_of_StopPattern 001C             ?_InitSPI32ControlService 0001  
                ??_SPI32_EOTResponse 0021           ?_InitPatternControlService 0001  
 __size_of_PostPatternControlService 0016               __end_of_SPI32_SendByte 17E4  
                     ??_DotStar_Init 00BB                        ??_DotStar_Off 00E1  
                     ??_DotStar_Show 00E3  
