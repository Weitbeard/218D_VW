

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 21 14:14:07 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0090                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  0116                     	;# 
   103  0117                     	;# 
   104  011D                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  018E                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0197                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020D                     	;# 
   129  0210                     	;# 
   130  0211                     	;# 
   131  0211                     	;# 
   132  0212                     	;# 
   133  0212                     	;# 
   134  0213                     	;# 
   135  0213                     	;# 
   136  0214                     	;# 
   137  0214                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0216                     	;# 
   142  0216                     	;# 
   143  0217                     	;# 
   144  0217                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0298                     	;# 
   150  0298                     	;# 
   151  0299                     	;# 
   152  029A                     	;# 
   153  0394                     	;# 
   154  0395                     	;# 
   155  0396                     	;# 
   156  0FE4                     	;# 
   157  0FE5                     	;# 
   158  0FE6                     	;# 
   159  0FE7                     	;# 
   160  0FE8                     	;# 
   161  0FE9                     	;# 
   162  0FEA                     	;# 
   163  0FEB                     	;# 
   164  0FED                     	;# 
   165  0FEE                     	;# 
   166  0FEF                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721                           
  1722                           	psect	stringtext
  1723  0051                     __pstringtext:	
  1724  0051                     _BitNum2SetMask:	
  1725  0051  3401               	retlw	1
  1726  0052  3400               	retlw	0
  1727  0053  3402               	retlw	2
  1728  0054  3400               	retlw	0
  1729  0055  3404               	retlw	4
  1730  0056  3400               	retlw	0
  1731  0057  3408               	retlw	8
  1732  0058  3400               	retlw	0
  1733  0059  3410               	retlw	16
  1734  005A  3400               	retlw	0
  1735  005B  3420               	retlw	32
  1736  005C  3400               	retlw	0
  1737  005D  3440               	retlw	64
  1738  005E  3400               	retlw	0
  1739  005F  3480               	retlw	128
  1740  0060  3400               	retlw	0
  1741  0061  3400               	retlw	0
  1742  0062  3401               	retlw	1
  1743  0063  3400               	retlw	0
  1744  0064  3402               	retlw	2
  1745  0065  3400               	retlw	0
  1746  0066  3404               	retlw	4
  1747  0067  3400               	retlw	0
  1748  0068  3408               	retlw	8
  1749  0069  3400               	retlw	0
  1750  006A  3410               	retlw	16
  1751  006B  3400               	retlw	0
  1752  006C  3420               	retlw	32
  1753  006D  3400               	retlw	0
  1754  006E  3440               	retlw	64
  1755  006F  3400               	retlw	0
  1756  0070  3480               	retlw	128
  1757  0071                     __end_of_BitNum2SetMask:	
  1758  0071                     _Timer2PostFunc:	
  1759  0071  34DD               	retlw	low _PostToggleService
  1760  0072  340E               	retlw	high _PostToggleService
  1761  0073  3402               	retlw	low _PostSPI_Service
  1762  0074  340F               	retlw	high _PostSPI_Service
  1763  0075  3400               	retlw	0
  1764  0076  3400               	retlw	0
  1765  0077  3400               	retlw	0
  1766  0078  3400               	retlw	0
  1767  0079  3400               	retlw	0
  1768  007A  3400               	retlw	0
  1769  007B  3400               	retlw	0
  1770  007C  3400               	retlw	0
  1771  007D  3400               	retlw	0
  1772  007E  3400               	retlw	0
  1773  007F  3400               	retlw	0
  1774  0080  3400               	retlw	0
  1775  0081  3400               	retlw	0
  1776  0082  3400               	retlw	0
  1777  0083  3400               	retlw	0
  1778  0084  3400               	retlw	0
  1779  0085  3400               	retlw	0
  1780  0086  3400               	retlw	0
  1781  0087  3400               	retlw	0
  1782  0088  3400               	retlw	0
  1783  0089  3400               	retlw	0
  1784  008A  3400               	retlw	0
  1785  008B  3400               	retlw	0
  1786  008C  3400               	retlw	0
  1787  008D  3400               	retlw	0
  1788  008E  3400               	retlw	0
  1789  008F  3400               	retlw	0
  1790  0090  3400               	retlw	0
  1791  0091                     __end_of_Timer2PostFunc:	
  1792  0091                     _Nybble2MSBitNum:	
  1793  0091  3400               	retlw	0
  1794  0092  3401               	retlw	1
  1795  0093  3401               	retlw	1
  1796  0094  3402               	retlw	2
  1797  0095  3402               	retlw	2
  1798  0096  3402               	retlw	2
  1799  0097  3402               	retlw	2
  1800  0098  3403               	retlw	3
  1801  0099  3403               	retlw	3
  1802  009A  3403               	retlw	3
  1803  009B  3403               	retlw	3
  1804  009C  3403               	retlw	3
  1805  009D  3403               	retlw	3
  1806  009E  3403               	retlw	3
  1807  009F  3403               	retlw	3
  1808  00A0                     __end_of_Nybble2MSBitNum:	
  1809  00A0                     _ServDescList:	
  1810  00A0  344A               	retlw	low _InitToggleService
  1811  00A1  3407               	retlw	high _InitToggleService
  1812  00A2  34DE               	retlw	low _RunToggleService
  1813  00A3  340F               	retlw	high _RunToggleService
  1814  00A4  34D2               	retlw	low _InitSPI_Service
  1815  00A5  3407               	retlw	high _InitSPI_Service
  1816  00A6  345A               	retlw	low _RunSPI_Service
  1817  00A7  3402               	retlw	high _RunSPI_Service
  1818  00A8                     __end_of_ServDescList:	
  1819  00A8                     _EventQueues:	
  1820  00A8  3454               	retlw	low (_Queue0| (0+256))
  1821  00A9  3401               	retlw	high (_Queue0| (0+256))
  1822  00AA  3406               	retlw	6
  1823  00AB  34CA               	retlw	low (_Queue1| 0)
  1824  00AC  3400               	retlw	high (_Queue1| 0)
  1825  00AD  3404               	retlw	4
  1826  00AE                     __end_of_EventQueues:	
  1827  00AE                     _ES_EventList:	
  1828  00AE  3402               	retlw	low _Check4Keystroke
  1829  00AF  3400               	retlw	high _Check4Keystroke
  1830  00B0  3480               	retlw	low _CheckButtonEvents
  1831  00B1  3407               	retlw	high _CheckButtonEvents
  1832  00B2                     __end_of_ES_EventList:	
  1833  00B2                     _DistList00:	
  1834  00B2  34DD               	retlw	low _PostToggleService
  1835  00B3  340E               	retlw	high _PostToggleService
  1836  00B4                     __end_of_DistList00:	
  1837  000B                     _INTCON	set	11
  1838  000C                     _PORTA	set	12
  1839  000E                     _PORTC	set	14
  1840  0018                     _T1CON	set	24
  1841  008A                     _CCP1IF	set	138
  1842  005F                     _GIE	set	95
  1843  0060                     _RA0	set	96
  1844  0061                     _RA1	set	97
  1845  0062                     _RA2	set	98
  1846  008B                     _SSPIF	set	139
  1847  0091                     _PIE1	set	145
  1848  008C                     _TRISA	set	140
  1849  008E                     _TRISC	set	142
  1850  04CB                     _IRCF0	set	1227
  1851  04CC                     _IRCF1	set	1228
  1852  04CD                     _IRCF2	set	1229
  1853  04CE                     _IRCF3	set	1230
  1854  048B                     _SSPIE	set	1163
  1855  010C                     _LATA	set	268
  1856  010E                     _LATC	set	270
  1857  018C                     _ANSELA	set	396
  1858  018E                     _ANSELC	set	398
  1859  0212                     _SSPADD	set	530
  1860  0211                     _SSPBUF	set	529
  1861  0215                     _SSPCON1	set	533
  1862  0214                     _SSPSTAT	set	532
  1863  0214                     _SSPSTATbits	set	532
  1864  0293                     _CCP1CON	set	659
  1865  0292                     _CCPR1H	set	658
  1866  0291                     _CCPR1L	set	657
  1867  00B4                     STR_1:	
  1868  00B4  3446               	retlw	70	;'F'
  1869  00B5  3461               	retlw	97	;'a'
  1870  00B6  3469               	retlw	105	;'i'
  1871  00B7  346C               	retlw	108	;'l'
  1872  00B8  3465               	retlw	101	;'e'
  1873  00B9  3464               	retlw	100	;'d'
  1874  00BA  3420               	retlw	32	;' '
  1875  00BB  346F               	retlw	111	;'o'
  1876  00BC  346E               	retlw	110	;'n'
  1877  00BD  3420               	retlw	32	;' '
  1878  00BE  3461               	retlw	97	;'a'
  1879  00BF  3474               	retlw	116	;'t'
  1880  00C0  3474               	retlw	116	;'t'
  1881  00C1  3465               	retlw	101	;'e'
  1882  00C2  346D               	retlw	109	;'m'
  1883  00C3  3470               	retlw	112	;'p'
  1884  00C4  3474               	retlw	116	;'t'
  1885  00C5  3420               	retlw	32	;' '
  1886  00C6  3474               	retlw	116	;'t'
  1887  00C7  346F               	retlw	111	;'o'
  1888  00C8  3420               	retlw	32	;' '
  1889  00C9  3450               	retlw	80	;'P'
  1890  00CA  346F               	retlw	111	;'o'
  1891  00CB  3473               	retlw	115	;'s'
  1892  00CC  3474               	retlw	116	;'t'
  1893  00CD  340A               	retlw	10
  1894  00CE  3400               	retlw	0
  1895  00CF                     STR_2:	
  1896  00CF  3446               	retlw	70	;'F'
  1897  00D0  3461               	retlw	97	;'a'
  1898  00D1  3469               	retlw	105	;'i'
  1899  00D2  346C               	retlw	108	;'l'
  1900  00D3  3465               	retlw	101	;'e'
  1901  00D4  3464               	retlw	100	;'d'
  1902  00D5  3420               	retlw	32	;' '
  1903  00D6  346F               	retlw	111	;'o'
  1904  00D7  346E               	retlw	110	;'n'
  1905  00D8  3420               	retlw	32	;' '
  1906  00D9  344E               	retlw	78	;'N'
  1907  00DA  3455               	retlw	85	;'U'
  1908  00DB  344C               	retlw	76	;'L'
  1909  00DC  344C               	retlw	76	;'L'
  1910  00DD  3420               	retlw	32	;' '
  1911  00DE  3470               	retlw	112	;'p'
  1912  00DF  346F               	retlw	111	;'o'
  1913  00E0  3469               	retlw	105	;'i'
  1914  00E1  346E               	retlw	110	;'n'
  1915  00E2  3474               	retlw	116	;'t'
  1916  00E3  3465               	retlw	101	;'e'
  1917  00E4  3472               	retlw	114	;'r'
  1918  00E5  340A               	retlw	10
  1919  00E6  3400               	retlw	0
  1920  00E7                     STR_3:	
  1921  00E7  3446               	retlw	70	;'F'
  1922  00E8  3461               	retlw	97	;'a'
  1923  00E9  3469               	retlw	105	;'i'
  1924  00EA  346C               	retlw	108	;'l'
  1925  00EB  3465               	retlw	101	;'e'
  1926  00EC  3464               	retlw	100	;'d'
  1927  00ED  3420               	retlw	32	;' '
  1928  00EE  3449               	retlw	73	;'I'
  1929  00EF  346E               	retlw	110	;'n'
  1930  00F0  3469               	retlw	105	;'i'
  1931  00F1  3474               	retlw	116	;'t'
  1932  00F2  3469               	retlw	105	;'i'
  1933  00F3  3461               	retlw	97	;'a'
  1934  00F4  346C               	retlw	108	;'l'
  1935  00F5  3469               	retlw	105	;'i'
  1936  00F6  347A               	retlw	122	;'z'
  1937  00F7  3461               	retlw	97	;'a'
  1938  00F8  3474               	retlw	116	;'t'
  1939  00F9  3469               	retlw	105	;'i'
  1940  00FA  346F               	retlw	111	;'o'
  1941  00FB  346E               	retlw	110	;'n'
  1942  00FC  340A               	retlw	10
  1943  00FD  3400               	retlw	0
  1944  00FE                     STR_4:	
  1945  00FE  344F               	retlw	79	;'O'
  1946  00FF  3474               	retlw	116	;'t'
  1947  0100  3468               	retlw	104	;'h'
  1948  0101  3465               	retlw	101	;'e'
  1949  0102  3472               	retlw	114	;'r'
  1950  0103  3420               	retlw	32	;' '
  1951  0104  3446               	retlw	70	;'F'
  1952  0105  3461               	retlw	97	;'a'
  1953  0106  3469               	retlw	105	;'i'
  1954  0107  346C               	retlw	108	;'l'
  1955  0108  3475               	retlw	117	;'u'
  1956  0109  3472               	retlw	114	;'r'
  1957  010A  3465               	retlw	101	;'e'
  1958  010B  340A               	retlw	10
  1959  010C  3400               	retlw	0
  1960                           
  1961                           ; #config settings
  1962  0000                     
  1963                           	psect	cinit
  1964  0036                     start_initialization:	
  1965  0036                     __initialization:	
  1966                           
  1967                           ; Clear objects allocated to BANK0
  1968  0036  303C               	movlw	low __pbssBANK0
  1969  0037  0084               	movwf	4
  1970  0038  3000               	movlw	high __pbssBANK0
  1971  0039  0085               	movwf	5
  1972  003A  3018               	movlw	24
  1973  003B  318E  2690  3180   	fcall	clear_ram0
  1974                           
  1975                           ; Clear objects allocated to BANK1
  1976  003E  30A0               	movlw	low __pbssBANK1
  1977  003F  0084               	movwf	4
  1978  0040  3000               	movlw	high __pbssBANK1
  1979  0041  0085               	movwf	5
  1980  0042  3039               	movlw	57
  1981  0043  318E  2690  3180   	fcall	clear_ram0
  1982                           
  1983                           ; Clear objects allocated to BANK2
  1984  0046  3020               	movlw	low __pbssBANK2
  1985  0047  0084               	movwf	4
  1986  0048  3001               	movlw	high __pbssBANK2
  1987  0049  0085               	movwf	5
  1988  004A  3046               	movlw	70
  1989  004B  318E  2690         	fcall	clear_ram0
  1990  004D                     end_of_initialization:	
  1991                           ;End of C runtime variable initialization code
  1992                           
  1993  004D                     __end_of__initialization:	
  1994  004D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1995  004E  0020               	movlb	0
  1996  004F  3185  2DA6         	ljmp	_main	;jump to C main() function
  1997                           
  1998                           	psect	bssBANK0
  1999  003C                     __pbssBANK0:	
  2000  003C                     _BGR:	
  2001  003C                     	ds	3
  2002  003F                     ES_Timer_Tick_Resp@NeedsProcessing:	
  2003  003F                     	ds	2
  2004  0041                     ISR@LastTime:	
  2005  0041                     	ds	2
  2006  0043                     ISR@NextTime:	
  2007  0043                     	ds	2
  2008  0045                     _SysTickCounter:	
  2009  0045                     	ds	2
  2010  0047                     _TMR_ActiveFlags:	
  2011  0047                     	ds	2
  2012  0049                     __PRIMASK_temp:	
  2013  0049                     	ds	2
  2014  004B                     Button@CurrentState:	
  2015  004B                     	ds	1
  2016  004C                     Button@MyPriority:	
  2017  004C                     	ds	1
  2018  004D                     ES_Timer_Tick_Resp@NextTimer2Process:	
  2019  004D                     	ds	1
  2020  004E                     SPI_Service@MyPriority:	
  2021  004E                     	ds	1
  2022  004F                     TemplateService@MyPriority:	
  2023  004F                     	ds	1
  2024  0050                     ToggleService@MyPriority:	
  2025  0050                     	ds	1
  2026  0051                     _CurrentState:	
  2027  0051                     	ds	1
  2028  0052                     _MyPriority:	
  2029  0052                     	ds	1
  2030  0053                     _TickCount:	
  2031  0053                     	ds	1
  2032                           
  2033                           	psect	bssBANK1
  2034  00A0                     __pbssBANK1:	
  2035  00A0                     _TMR_TimerArray:	
  2036  00A0                     	ds	32
  2037  00C0                     ES_Timer_Tick_Resp@NewEvent:	
  2038  00C0                     	ds	3
  2039  00C3                     _Ready:	
  2040  00C3                     	ds	2
  2041  00C5                     SPI_Service@CurrentState:	
  2042  00C5                     	ds	1
  2043  00C6                     _FirstSend:	
  2044  00C6                     	ds	1
  2045  00C7                     _LEDColor:	
  2046  00C7                     	ds	1
  2047  00C8                     _LastButtonState:	
  2048  00C8                     	ds	1
  2049  00C9                     _NumBytesLeft:	
  2050  00C9                     	ds	1
  2051  00CA                     _Queue1:	
  2052  00CA                     	ds	12
  2053  00D6                     ES_Run@ThisEvent:	
  2054  00D6                     	ds	3
  2055                           
  2056                           	psect	bssBANK2
  2057  0120                     __pbssBANK2:	
  2058  0120                     _BytesToSend:	
  2059  0120                     	ds	52
  2060  0154                     _Queue0:	
  2061  0154                     	ds	18
  2062                           
  2063                           	psect	clrtext
  2064  0E90                     clear_ram0:	
  2065                           ;	Called with FSR0 containing the base address, and
  2066                           ;	WREG with the size to clear
  2067                           
  2068  0E90  0064               	clrwdt	;clear the watchdog before getting into this loop
  2069  0E91                     clrloop0:	
  2070  0E91  0180               	clrf	0	;clear RAM location pointed to by FSR
  2071  0E92  3101               	addfsr 0,1
  2072  0E93  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2073  0E94  2E91               	goto	clrloop0	;have we reached the end yet?
  2074  0E95  3400               	retlw	0	;all done for this memory range, return
  2075                           
  2076                           	psect	cstackBANK3
  2077  01A0                     __pcstackBANK3:	
  2078  01A0                     ?_InitToggleService:	
  2079  01A0                     ?_InitSPI_Service:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  01A0                     ?_PostToggleService:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  01A0                     ?_PostSPI_Service:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  01A0                     ?_PostButtonDebounceSM:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  01A0                     InitToggleService@Priority:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  01A0                     InitSPI_Service@Priority:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  01A0                     PostToggleService@ThisEvent:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  01A0                     PostSPI_Service@ThisEvent:	
  2101                           ; 3 bytes @ 0x0
  2102                           
  2103  01A0                     PostButtonDebounceSM@ThisEvent:	
  2104                           ; 3 bytes @ 0x0
  2105                           
  2106                           
  2107                           ; 3 bytes @ 0x0
  2108  01A0                     	ds	1
  2109  01A1                     ??_InitToggleService:	
  2110  01A1                     ??_InitSPI_Service:	
  2111                           ; 1 bytes @ 0x1
  2112                           
  2113                           
  2114                           ; 1 bytes @ 0x1
  2115  01A1                     	ds	1
  2116  01A2                     InitToggleService@ThisEvent:	
  2117                           
  2118                           ; 3 bytes @ 0x2
  2119  01A2                     	ds	1
  2120  01A3                     ??_CheckButtonEvents:	
  2121  01A3                     ??_ES_Timer_Tick_Resp:	
  2122                           ; 1 bytes @ 0x3
  2123                           
  2124  01A3                     ??_sendByte:	
  2125                           ; 1 bytes @ 0x3
  2126                           
  2127                           
  2128                           ; 1 bytes @ 0x3
  2129  01A3                     	ds	1
  2130  01A4                     sendByte@dummy:	
  2131  01A4                     CheckButtonEvents@ReturnVal:	
  2132                           ; 1 bytes @ 0x4
  2133                           
  2134                           
  2135                           ; 1 bytes @ 0x4
  2136  01A4                     	ds	1
  2137  01A5                     ?_ES_Initialize:	
  2138  01A5                     ES_Initialize@NewRate:	
  2139                           ; 1 bytes @ 0x5
  2140                           
  2141  01A5                     sendByte@ThisEvent:	
  2142                           ; 2 bytes @ 0x5
  2143                           
  2144  01A5                     CheckButtonEvents@ThisEvent:	
  2145                           ; 3 bytes @ 0x5
  2146                           
  2147                           
  2148                           ; 3 bytes @ 0x5
  2149  01A5                     	ds	2
  2150  01A7                     ??_ES_Initialize:	
  2151                           
  2152                           ; 1 bytes @ 0x7
  2153  01A7                     	ds	1
  2154  01A8                     sendByte@Data:	
  2155  01A8                     CheckButtonEvents@CurrentButtonState:	
  2156                           ; 1 bytes @ 0x8
  2157                           
  2158                           
  2159                           ; 1 bytes @ 0x8
  2160  01A8                     	ds	1
  2161  01A9                     ??_ES_CheckUserEvents:	
  2162  01A9                     ?_RunToggleService:	
  2163                           ; 1 bytes @ 0x9
  2164                           
  2165  01A9                     ?_RunSPI_Service:	
  2166                           ; 3 bytes @ 0x9
  2167                           
  2168  01A9                     RunToggleService@ThisEvent:	
  2169                           ; 3 bytes @ 0x9
  2170                           
  2171  01A9                     RunSPI_Service@ThisEvent:	
  2172                           ; 3 bytes @ 0x9
  2173                           
  2174                           
  2175                           ; 3 bytes @ 0x9
  2176  01A9                     	ds	2
  2177  01AB                     ES_CheckUserEvents@i:	
  2178                           
  2179                           ; 1 bytes @ 0xB
  2180  01AB                     	ds	1
  2181  01AC                     ??_RunSPI_Service:	
  2182  01AC                     RunToggleService@ReturnEvent:	
  2183                           ; 1 bytes @ 0xC
  2184                           
  2185                           
  2186                           ; 3 bytes @ 0xC
  2187  01AC                     	ds	1
  2188  01AD                     RunSPI_Service@ReturnEvent:	
  2189                           
  2190                           ; 3 bytes @ 0xD
  2191  01AD                     	ds	2
  2192  01AF                     ES_Initialize@i:	
  2193                           
  2194                           ; 1 bytes @ 0xF
  2195  01AF                     	ds	1
  2196  01B0                     RunSPI_Service@ThisEvent_771:	
  2197                           
  2198                           ; 3 bytes @ 0x10
  2199  01B0                     	ds	3
  2200  01B3                     ??_ES_Run:	
  2201                           
  2202                           ; 1 bytes @ 0x13
  2203  01B3                     	ds	4
  2204  01B7                     _ES_Run$1255:	
  2205                           
  2206                           ; 2 bytes @ 0x17
  2207  01B7                     	ds	2
  2208  01B9                     ES_Run@HighestPrior:	
  2209                           
  2210                           ; 1 bytes @ 0x19
  2211  01B9                     	ds	1
  2212  01BA                     ??_main:	
  2213                           
  2214                           ; 1 bytes @ 0x1A
  2215  01BA                     	ds	1
  2216  01BB                     main@ErrorType:	
  2217                           
  2218                           ; 1 bytes @ 0x1B
  2219  01BB                     	ds	1
  2220                           
  2221                           	psect	cstackBANK2
  2222  0166                     __pcstackBANK2:	
  2223  0166                     ?_ES_PostToService:	
  2224  0166                     ES_DeQueue@SaveCrit:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0166                     ES_PostToService@TheEvent:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230                           
  2231                           ; 3 bytes @ 0x0
  2232  0166                     	ds	1
  2233  0167                     ES_DeQueue@NumLeft:	
  2234                           
  2235                           ; 1 bytes @ 0x1
  2236  0167                     	ds	1
  2237  0168                     ES_DeQueue@pThisQueue:	
  2238                           
  2239                           ; 2 bytes @ 0x2
  2240  0168                     	ds	1
  2241  0169                     ??_ES_PostToService:	
  2242                           
  2243                           ; 1 bytes @ 0x3
  2244  0169                     	ds	4
  2245  016D                     _ES_PostToService$1261:	
  2246                           
  2247                           ; 2 bytes @ 0x7
  2248  016D                     	ds	2
  2249  016F                     ES_PostToService@WhichService:	
  2250                           
  2251                           ; 1 bytes @ 0x9
  2252  016F                     	ds	1
  2253                           
  2254                           	psect	cstackBANK1
  2255  00D9                     __pcstackBANK1:	
  2256  00D9                     ?_ES_GetMSBitSet:	
  2257  00D9                     ?_SetBGR:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  00D9                     ??_FormPacket:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  00D9                     ?__HW_Timer_Init:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  00D9                     ?_ES_Timer_InitTimer:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  00D9                     ?___lbmod:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  00D9                     ?_printf:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  00D9                     ?___awmod:	
  2276                           ; 2 bytes @ 0x0
  2277                           
  2278  00D9                     SetBGR@G:	
  2279                           ; 2 bytes @ 0x0
  2280                           
  2281  00D9                     ___lbmod@divisor:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  00D9                     ES_GetMSBitSet@Val2Check:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  00D9                     __HW_Timer_Init@Rate:	
  2288                           ; 2 bytes @ 0x0
  2289                           
  2290  00D9                     ES_Timer_InitTimer@NewTime:	
  2291                           ; 2 bytes @ 0x0
  2292                           
  2293  00D9                     printf@f:	
  2294                           ; 2 bytes @ 0x0
  2295                           
  2296  00D9                     ___awmod@divisor:	
  2297                           ; 2 bytes @ 0x0
  2298                           
  2299                           
  2300                           ; 2 bytes @ 0x0
  2301  00D9                     	ds	1
  2302  00DA                     ??___lbmod:	
  2303  00DA                     SetBGR@R:	
  2304                           ; 1 bytes @ 0x1
  2305                           
  2306                           
  2307                           ; 1 bytes @ 0x1
  2308  00DA                     	ds	1
  2309  00DB                     ?_ES_Timer_Init:	
  2310  00DB                     ??_ES_GetMSBitSet:	
  2311                           ; 1 bytes @ 0x2
  2312                           
  2313  00DB                     ??_printf:	
  2314                           ; 1 bytes @ 0x2
  2315                           
  2316  00DB                     ??_SetBGR:	
  2317                           ; 1 bytes @ 0x2
  2318                           
  2319  00DB                     ??_ES_Timer_InitTimer:	
  2320                           ; 1 bytes @ 0x2
  2321                           
  2322  00DB                     FormPacket@i:	
  2323                           ; 1 bytes @ 0x2
  2324                           
  2325  00DB                     ES_Timer_Init@Rate:	
  2326                           ; 1 bytes @ 0x2
  2327                           
  2328  00DB                     ___awmod@dividend:	
  2329                           ; 2 bytes @ 0x2
  2330                           
  2331                           
  2332                           ; 2 bytes @ 0x2
  2333  00DB                     	ds	1
  2334  00DC                     FormPacket@i_797:	
  2335  00DC                     SetBGR@B:	
  2336                           ; 1 bytes @ 0x3
  2337                           
  2338  00DC                     ___lbmod@dividend:	
  2339                           ; 1 bytes @ 0x3
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0x3
  2343  00DC                     	ds	1
  2344  00DD                     ??___awmod:	
  2345  00DD                     FormPacket@ledNum:	
  2346                           ; 1 bytes @ 0x4
  2347                           
  2348  00DD                     ___lbmod@counter:	
  2349                           ; 1 bytes @ 0x4
  2350                           
  2351                           
  2352                           ; 1 bytes @ 0x4
  2353  00DD                     	ds	1
  2354  00DE                     FormPacket@j:	
  2355  00DE                     printf@ap:	
  2356                           ; 1 bytes @ 0x5
  2357                           
  2358  00DE                     ___awmod@counter:	
  2359                           ; 1 bytes @ 0x5
  2360                           
  2361  00DE                     ___lbmod@rem:	
  2362                           ; 1 bytes @ 0x5
  2363                           
  2364                           
  2365                           ; 1 bytes @ 0x5
  2366  00DE                     	ds	1
  2367  00DF                     ??_InitSPI:	
  2368  00DF                     ES_GetMSBitSet@ReturnVal:	
  2369                           ; 1 bytes @ 0x6
  2370                           
  2371  00DF                     ES_Timer_InitTimer@Num:	
  2372                           ; 1 bytes @ 0x6
  2373                           
  2374  00DF                     printf@c:	
  2375                           ; 1 bytes @ 0x6
  2376                           
  2377  00DF                     ___awmod@sign:	
  2378                           ; 1 bytes @ 0x6
  2379                           
  2380                           
  2381                           ; 1 bytes @ 0x6
  2382  00DF                     	ds	1
  2383  00E0                     ?___wmul:	
  2384  00E0                     ES_GetMSBitSet@Nybble2Test:	
  2385                           ; 2 bytes @ 0x7
  2386                           
  2387  00E0                     ___wmul@multiplier:	
  2388                           ; 1 bytes @ 0x7
  2389                           
  2390                           
  2391                           ; 2 bytes @ 0x7
  2392  00E0                     	ds	1
  2393  00E1                     ES_GetMSBitSet@LoopCntr:	
  2394                           
  2395                           ; 1 bytes @ 0x8
  2396  00E1                     	ds	1
  2397  00E2                     ___wmul@multiplicand:	
  2398                           
  2399                           ; 2 bytes @ 0x9
  2400  00E2                     	ds	2
  2401  00E4                     ___wmul@product:	
  2402                           
  2403                           ; 2 bytes @ 0xB
  2404  00E4                     	ds	2
  2405  00E6                     ?_ES_DeQueue:	
  2406  00E6                     ?_ES_InitQueue:	
  2407                           ; 1 bytes @ 0xD
  2408                           
  2409  00E6                     ?_ES_EnQueueFIFO:	
  2410                           ; 1 bytes @ 0xD
  2411                           
  2412  00E6                     ES_InitQueue@pBlock:	
  2413                           ; 1 bytes @ 0xD
  2414                           
  2415  00E6                     ES_EnQueueFIFO@pBlock:	
  2416                           ; 2 bytes @ 0xD
  2417                           
  2418  00E6                     ES_DeQueue@pBlock:	
  2419                           ; 2 bytes @ 0xD
  2420                           
  2421                           
  2422                           ; 2 bytes @ 0xD
  2423  00E6                     	ds	2
  2424  00E8                     ES_InitQueue@BlockSize:	
  2425  00E8                     ES_DeQueue@pReturnEvent:	
  2426                           ; 1 bytes @ 0xF
  2427                           
  2428  00E8                     ES_EnQueueFIFO@Event2Add:	
  2429                           ; 1 bytes @ 0xF
  2430                           
  2431                           
  2432                           ; 3 bytes @ 0xF
  2433  00E8                     	ds	1
  2434  00E9                     ??_ES_DeQueue:	
  2435  00E9                     ??_ES_InitQueue:	
  2436                           ; 1 bytes @ 0x10
  2437                           
  2438                           
  2439                           ; 1 bytes @ 0x10
  2440  00E9                     	ds	1
  2441  00EA                     ES_InitQueue@pThisQueue:	
  2442                           
  2443                           ; 2 bytes @ 0x11
  2444  00EA                     	ds	1
  2445  00EB                     ??_ES_EnQueueFIFO:	
  2446                           
  2447                           ; 1 bytes @ 0x12
  2448  00EB                     	ds	2
  2449  00ED                     ES_EnQueueFIFO@SaveCrit:	
  2450                           
  2451                           ; 1 bytes @ 0x14
  2452  00ED                     	ds	1
  2453  00EE                     ES_EnQueueFIFO@pThisQueue:	
  2454                           
  2455                           ; 2 bytes @ 0x15
  2456  00EE                     	ds	2
  2457                           
  2458                           	psect	cstackCOMMON
  2459  0070                     __pcstackCOMMON:	
  2460  0070                     ?_Check4Keystroke:	
  2461  0070                     ?_CheckButtonEvents:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?__HW_Process_Pending_Ints:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_EOTResponse:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_ES_Timer_Tick_Resp:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_InitSPI:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?_FormPacket:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?_sendByte:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?_putch:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?_ES_CheckUserEvents:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_ES_Run:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?_ISR:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ?_GetInputLine:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ?_main:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?i1___awmod:	
  2501                           ; 2 bytes @ 0x0
  2502                           
  2503  0070                     putch@c:	
  2504                           ; 2 bytes @ 0x0
  2505                           
  2506  0070                     i1___awmod@divisor:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509                           
  2510                           ; 2 bytes @ 0x0
  2511  0070                     	ds	2
  2512  0072                     i1___awmod@dividend:	
  2513                           
  2514                           ; 2 bytes @ 0x2
  2515  0072                     	ds	2
  2516  0074                     ??i1___awmod:	
  2517                           
  2518                           ; 1 bytes @ 0x4
  2519  0074                     	ds	1
  2520  0075                     i1___awmod@counter:	
  2521                           
  2522                           ; 1 bytes @ 0x5
  2523  0075                     	ds	1
  2524  0076                     i1___awmod@sign:	
  2525                           
  2526                           ; 1 bytes @ 0x6
  2527  0076                     	ds	1
  2528  0077                     ?i1___wmul:	
  2529  0077                     i1___wmul@multiplier:	
  2530                           ; 2 bytes @ 0x7
  2531                           
  2532                           
  2533                           ; 2 bytes @ 0x7
  2534  0077                     	ds	2
  2535  0079                     i1___wmul@multiplicand:	
  2536                           
  2537                           ; 2 bytes @ 0x9
  2538  0079                     	ds	2
  2539  007B                     ??i1___wmul:	
  2540  007B                     i1___wmul@product:	
  2541                           ; 1 bytes @ 0xB
  2542                           
  2543                           
  2544                           ; 2 bytes @ 0xB
  2545  007B                     	ds	2
  2546  007D                     ??_EOTResponse:	
  2547  007D                     ??i1_PostSPI_Service:	
  2548                           ; 1 bytes @ 0xD
  2549                           
  2550                           
  2551                           ; 1 bytes @ 0xD
  2552  007D                     	ds	1
  2553                           
  2554                           	psect	cstackBANK0
  2555  0020                     __pcstackBANK0:	
  2556  0020                     ?i1_ES_EnQueueFIFO:	
  2557  0020                     i1ES_EnQueueFIFO@pBlock:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560                           
  2561                           ; 2 bytes @ 0x0
  2562  0020                     	ds	2
  2563  0022                     i1ES_EnQueueFIFO@Event2Add:	
  2564                           
  2565                           ; 3 bytes @ 0x2
  2566  0022                     	ds	3
  2567  0025                     ??i1_ES_EnQueueFIFO:	
  2568                           
  2569                           ; 1 bytes @ 0x5
  2570  0025                     	ds	2
  2571  0027                     i1ES_EnQueueFIFO@SaveCrit:	
  2572                           
  2573                           ; 1 bytes @ 0x7
  2574  0027                     	ds	1
  2575  0028                     i1ES_EnQueueFIFO@pThisQueue:	
  2576                           
  2577                           ; 2 bytes @ 0x8
  2578  0028                     	ds	2
  2579  002A                     ?i1_ES_PostToService:	
  2580  002A                     i1ES_PostToService@TheEvent:	
  2581                           ; 1 bytes @ 0xA
  2582                           
  2583                           
  2584                           ; 3 bytes @ 0xA
  2585  002A                     	ds	3
  2586  002D                     ??i1_ES_PostToService:	
  2587                           
  2588                           ; 1 bytes @ 0xD
  2589  002D                     	ds	4
  2590  0031                     i1_ES_PostToService$1333:	
  2591                           
  2592                           ; 2 bytes @ 0x11
  2593  0031                     	ds	2
  2594  0033                     i1ES_PostToService@WhichService:	
  2595                           
  2596                           ; 1 bytes @ 0x13
  2597  0033                     	ds	1
  2598  0034                     ?i1_PostSPI_Service:	
  2599  0034                     i1PostSPI_Service@ThisEvent:	
  2600                           ; 1 bytes @ 0x14
  2601                           
  2602                           
  2603                           ; 3 bytes @ 0x14
  2604  0034                     	ds	3
  2605  0037                     EOTResponse@ThisEvent:	
  2606                           
  2607                           ; 3 bytes @ 0x17
  2608  0037                     	ds	3
  2609  003A                     ??_ISR:	
  2610                           
  2611                           ; 1 bytes @ 0x1A
  2612  003A                     	ds	2
  2613  003C                     ??_Check4Keystroke:	
  2614  003C                     ??_RunToggleService:	
  2615                           ; 1 bytes @ 0x1C
  2616                           
  2617  003C                     ??_ES_Timer_Init:	
  2618                           ; 1 bytes @ 0x1C
  2619                           
  2620  003C                     ??__HW_Process_Pending_Ints:	
  2621                           ; 1 bytes @ 0x1C
  2622                           
  2623  003C                     ??_PostToggleService:	
  2624                           ; 1 bytes @ 0x1C
  2625                           
  2626  003C                     ??_PostSPI_Service:	
  2627                           ; 1 bytes @ 0x1C
  2628                           
  2629  003C                     ??_PostButtonDebounceSM:	
  2630                           ; 1 bytes @ 0x1C
  2631                           
  2632  003C                     ??_putch:	
  2633                           ; 1 bytes @ 0x1C
  2634                           
  2635  003C                     ??__HW_Timer_Init:	
  2636                           ; 1 bytes @ 0x1C
  2637                           
  2638  003C                     ??_GetInputLine:	
  2639                           ; 1 bytes @ 0x1C
  2640                           
  2641  003C                     ??___wmul:	
  2642                           ; 1 bytes @ 0x1C
  2643                           
  2644                           
  2645                           	psect	maintext
  2646  05A6                     __pmaintext:	
  2647                           ; 1 bytes @ 0x1C
  2648 ;;
  2649 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2650 ;;
  2651 ;; *************** function _main *****************
  2652 ;; Defined at:
  2653 ;;		line 24 in file "main.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  ErrorType       1   27[BANK3 ] enum E2147
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  2  337[None  ] int 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : B1F/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2668 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  2669 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  2670 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  2671 ;;Total ram usage:        2 bytes
  2672 ;; Hardware stack levels required when called:   13
  2673 ;; This function calls:
  2674 ;;		_ES_Initialize
  2675 ;;		_ES_Run
  2676 ;;		_printf
  2677 ;; This function is called by:
  2678 ;;		Startup code after reset
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function _main
  2684  05A6                     _main:	
  2685                           
  2686                           ;main.c: 27: IRCF0 = 1;
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2690  05A6  0021               	movlb	1	; select bank1
  2691  05A7  1599               	bsf	25,3	;volatile
  2692                           
  2693                           ;main.c: 28: IRCF1 = 1;
  2694  05A8  1619               	bsf	25,4	;volatile
  2695                           
  2696                           ;main.c: 29: IRCF2 = 1;
  2697  05A9  1699               	bsf	25,5	;volatile
  2698                           
  2699                           ;main.c: 30: IRCF3 = 1;
  2700  05AA  1719               	bsf	25,6	;volatile
  2701                           
  2702                           ;main.c: 37: ES_Return_t ErrorType;
  2703                           ;main.c: 53: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  2704  05AB  303F               	movlw	63
  2705  05AC  0023               	movlb	3	; select bank3
  2706  05AD  00A5               	movwf	ES_Initialize@NewRate^(0+384)
  2707  05AE  309C               	movlw	156
  2708  05AF  00A6               	movwf	(ES_Initialize@NewRate^(0+384)+1)
  2709  05B0  3181  210D  3185   	fcall	_ES_Initialize
  2710  05B3  0023               	movlb	3	; select bank3
  2711  05B4  00BA               	movwf	??_main^(0+384)
  2712  05B5  083A               	movf	??_main^(0+384),w
  2713  05B6  00BB               	movwf	main@ErrorType^(0+384)
  2714                           
  2715                           ;main.c: 54: if ( ErrorType == Success ) {
  2716  05B7  083B               	movf	main@ErrorType^(0+384),w
  2717  05B8  1D03               	btfss	3,2
  2718  05B9  2DE6               	goto	l3680
  2719                           
  2720                           ;main.c: 56: ErrorType = ES_Run();
  2721  05BA  3182  22F7  3185   	fcall	_ES_Run
  2722  05BD  0023               	movlb	3	; select bank3
  2723  05BE  00BA               	movwf	??_main^(0+384)
  2724  05BF  083A               	movf	??_main^(0+384),w
  2725  05C0  00BB               	movwf	main@ErrorType^(0+384)
  2726                           
  2727                           ;main.c: 58: }
  2728                           ;main.c: 60: switch (ErrorType){
  2729  05C1  2DE6               	goto	l3680
  2730  05C2                     l3670:	
  2731                           ;main.c: 61: case FailedPost:
  2732                           
  2733                           
  2734                           ;main.c: 62: printf("Failed on attempt to Post\n");
  2735  05C2  30B4               	movlw	low (STR_1| (0+32768))
  2736  05C3  0021               	movlb	1	; select bank1
  2737  05C4  00D9               	movwf	printf@f^(0+128)
  2738  05C5  3080               	movlw	high (STR_1| (0+32768))
  2739  05C6  00DA               	movwf	(printf@f^(0+128)+1)
  2740  05C7  318F  2782  3185   	fcall	_printf
  2741                           
  2742                           ;main.c: 63: break;
  2743  05CA  2DF2               	goto	l345
  2744  05CB                     l3672:	
  2745                           ;main.c: 64: case FailedPointer:
  2746                           
  2747                           
  2748                           ;main.c: 65: printf("Failed on NULL pointer\n");
  2749  05CB  30CF               	movlw	low (STR_2| (0+32768))
  2750  05CC  0021               	movlb	1	; select bank1
  2751  05CD  00D9               	movwf	printf@f^(0+128)
  2752  05CE  3080               	movlw	high (STR_2| (0+32768))
  2753  05CF  00DA               	movwf	(printf@f^(0+128)+1)
  2754  05D0  318F  2782  3185   	fcall	_printf
  2755                           
  2756                           ;main.c: 66: break;
  2757  05D3  2DF2               	goto	l345
  2758  05D4                     l3674:	
  2759                           ;main.c: 67: case FailedInit:
  2760                           
  2761                           
  2762                           ;main.c: 68: printf("Failed Initialization\n");
  2763  05D4  30E7               	movlw	low (STR_3| (0+32768))
  2764  05D5  0021               	movlb	1	; select bank1
  2765  05D6  00D9               	movwf	printf@f^(0+128)
  2766  05D7  3080               	movlw	high (STR_3| (0+32768))
  2767  05D8  00DA               	movwf	(printf@f^(0+128)+1)
  2768  05D9  318F  2782  3185   	fcall	_printf
  2769                           
  2770                           ;main.c: 69: break;
  2771  05DC  2DF2               	goto	l345
  2772  05DD                     l3676:	
  2773                           ;main.c: 70: default:
  2774                           
  2775                           
  2776                           ;main.c: 71: printf("Other Failure\n");
  2777  05DD  30FE               	movlw	low (STR_4| (0+32768))
  2778  05DE  0021               	movlb	1	; select bank1
  2779  05DF  00D9               	movwf	printf@f^(0+128)
  2780  05E0  3080               	movlw	high (STR_4| (0+32768))
  2781  05E1  00DA               	movwf	(printf@f^(0+128)+1)
  2782  05E2  318F  2782  3185   	fcall	_printf
  2783                           
  2784                           ;main.c: 73: }
  2785                           
  2786                           ;main.c: 72: break;
  2787  05E5  2DF2               	goto	l345
  2788  05E6                     l3680:	
  2789  05E6  0023               	movlb	3	; select bank3
  2790  05E7  083B               	movf	main@ErrorType^(0+384),w
  2791                           
  2792                           ; Switch size 1, requested type "space"
  2793                           ; Number of cases is 3, Range of values is 1 to 5
  2794                           ; switch strategies available:
  2795                           ; Name         Instructions Cycles
  2796                           ; simple_byte           10     6 (average)
  2797                           ; direct_byte           19     9 (fixed)
  2798                           ; jumptable            263     9 (fixed)
  2799                           ;	Chosen strategy is simple_byte
  2800  05E8  3A01               	xorlw	1	; case 1
  2801  05E9  1903               	skipnz
  2802  05EA  2DC2               	goto	l3670
  2803  05EB  3A02               	xorlw	2	; case 3
  2804  05EC  1903               	skipnz
  2805  05ED  2DCB               	goto	l3672
  2806  05EE  3A06               	xorlw	6	; case 5
  2807  05EF  1903               	skipnz
  2808  05F0  2DD4               	goto	l3674
  2809  05F1  2DDD               	goto	l3676
  2810  05F2                     l345:	
  2811                           ;main.c: 74: for(;;)
  2812                           
  2813                           
  2814                           ;main.c: 75: ;
  2815  05F2  2DF2               	goto	l345
  2816  05F3                     __end_of_main:	
  2817                           
  2818                           	psect	text1
  2819  0F82                     __ptext1:	
  2820 ;; *************** function _printf *****************
  2821 ;; Defined at:
  2822 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  2825 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  tmpval          4    0        struct .
  2828 ;;  cp              2    0        PTR const unsigned char 
  2829 ;;  len             2    0        unsigned int 
  2830 ;;  val             2    0        unsigned int 
  2831 ;;  c               1    6[BANK1 ] char 
  2832 ;;  ap              1    5[BANK1 ] PTR void [1]
  2833 ;;		 -> ?_printf(2), 
  2834 ;;  flag            1    0        unsigned char 
  2835 ;;  prec            1    0        char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  2    0[BANK1 ] int 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2845 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2846 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2847 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2848 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  2849 ;;Total ram usage:        7 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    7
  2852 ;; This function calls:
  2853 ;;		_putch
  2854 ;; This function is called by:
  2855 ;;		_main
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _printf
  2861  0F82                     _printf:	
  2862                           
  2863                           ;doprnt.c: 466: va_list ap;
  2864                           ;doprnt.c: 499: signed char c;
  2865                           ;doprnt.c: 506: signed char prec;
  2866                           ;doprnt.c: 508: unsigned char flag;
  2867                           ;doprnt.c: 523: union {
  2868                           ;doprnt.c: 524: unsigned long vd;
  2869                           ;doprnt.c: 525: double integ;
  2870                           ;doprnt.c: 526: } tmpval;
  2871                           ;doprnt.c: 528: unsigned int val;
  2872                           ;doprnt.c: 529: unsigned len;
  2873                           ;doprnt.c: 530: const char * cp;
  2874                           ;doprnt.c: 533: *ap = __va_start();
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2878  0F82  30DB               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2879  0F83  0021               	movlb	1	; select bank1
  2880  0F84  00DB               	movwf	??_printf^(0+128)
  2881  0F85  085B               	movf	??_printf^(0+128),w
  2882  0F86  00DE               	movwf	printf@ap^(0+128)
  2883  0F87                     l3530:	
  2884                           ;doprnt.c: 543: }
  2885                           ;doprnt.c: 1422: {
  2886                           
  2887                           ;doprnt.c: 542: continue;
  2888                           
  2889                           ;doprnt.c: 536: while(c = *f++) {
  2890                           
  2891  0F87  0021               	movlb	1	; select bank1
  2892  0F88  085A               	movf	(printf@f+1)^(0+128),w
  2893  0F89  00DC               	movwf	(??_printf^(0+128)+1)
  2894  0F8A  0859               	movf	printf@f^(0+128),w
  2895  0F8B  00DB               	movwf	??_printf^(0+128)
  2896  0F8C  0AD9               	incf	printf@f^(0+128),f
  2897  0F8D  1903               	skipnz
  2898  0F8E  0ADA               	incf	(printf@f+1)^(0+128),f
  2899  0F8F  085B               	movf	??_printf^(0+128),w
  2900  0F90  0084               	movwf	4
  2901  0F91  085C               	movf	(??_printf+1)^(0+128),w
  2902  0F92  0085               	movwf	5
  2903  0F93  0800               	movf	0,w	;code access
  2904  0F94  00DD               	movwf	(??_printf+2)^(0+128)
  2905  0F95  085D               	movf	(??_printf+2)^(0+128),w
  2906  0F96  00DF               	movwf	printf@c^(0+128)
  2907  0F97  085F               	movf	printf@c^(0+128),w
  2908  0F98  1903               	btfsc	3,2
  2909  0F99  0008               	return
  2910                           
  2911                           ;doprnt.c: 540: {
  2912                           ;doprnt.c: 541: (putch(c) );
  2913  0F9A  085F               	movf	printf@c^(0+128),w
  2914  0F9B  3187  27FF  318F   	fcall	_putch
  2915  0F9E  2F87               	goto	l3530
  2916  0F9F                     __end_of_printf:	
  2917                           ;doprnt.c: 1469: }
  2918                           ;doprnt.c: 1533: }
  2919                           ;doprnt.c: 1540: return 0;
  2920                           ;	Return value of _printf is never used
  2921                           
  2922                           
  2923                           	psect	text2
  2924  07FF                     __ptext2:	
  2925 ;; *************** function _putch *****************
  2926 ;; Defined at:
  2927 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  c               1    wreg     unsigned char 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  c               1    0[COMMON] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    6
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_printf
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _putch
  2957  07FF                     _putch:	
  2958                           
  2959                           ;incstack = 0
  2960                           ; Regs used in _putch: [wreg]
  2961  07FF  0008               	return
  2962  0800                     __end_of_putch:	
  2963                           
  2964                           	psect	text3
  2965  02F7                     __ptext3:	
  2966 ;; *************** function _ES_Run *****************
  2967 ;; Defined at:
  2968 ;;		line 277 in file "ES_Framework.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  HighestPrior    1   25[BANK3 ] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      enum E1982
  2975 ;; Registers used:
  2976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2983 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  2984 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  2985 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
  2986 ;;Total ram usage:        7 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:   12
  2989 ;; This function calls:
  2990 ;;		_ES_CheckUserEvents
  2991 ;;		_ES_DeQueue
  2992 ;;		_ES_GetMSBitSet
  2993 ;;		_RunSPI_Service
  2994 ;;		_RunToggleService
  2995 ;;		__HW_Process_Pending_Ints
  2996 ;;		___wmul
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _ES_Run
  3004  02F7                     _ES_Run:	
  3005                           
  3006                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  3007                           
  3008                           ;incstack = 0
  3009                           ; Regs used in _ES_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3010                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  3011                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  3012                           ;ES_Framework.c: 282: while(1){
  3013  02F7  2B79               	goto	l3486
  3014  02F8                     l3474:	
  3015                           
  3016                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  3017  02F8  0021               	movlb	1	; select bank1
  3018  02F9  0844               	movf	(_Ready+1)^(0+128),w
  3019  02FA  00DA               	movwf	(ES_GetMSBitSet@Val2Check+1)^(0+128)
  3020  02FB  0843               	movf	_Ready^(0+128),w
  3021  02FC  00D9               	movwf	ES_GetMSBitSet@Val2Check^(0+128)
  3022  02FD  3186  263F  3182   	fcall	_ES_GetMSBitSet
  3023  0300  0023               	movlb	3	; select bank3
  3024  0301  00B3               	movwf	??_ES_Run^(0+384)
  3025  0302  0833               	movf	??_ES_Run^(0+384),w
  3026  0303  00B9               	movwf	ES_Run@HighestPrior^(0+384)
  3027                           
  3028                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  3029  0304  0839               	movf	ES_Run@HighestPrior^(0+384),w
  3030  0305  00B3               	movwf	??_ES_Run^(0+384)
  3031  0306  01B4               	clrf	(??_ES_Run^(0+384)+1)
  3032  0307  0833               	movf	??_ES_Run^(0+384),w
  3033  0308  0021               	movlb	1	; select bank1
  3034  0309  00E0               	movwf	___wmul@multiplier^(0+128)
  3035  030A  0023               	movlb	3	; select bank3
  3036  030B  0834               	movf	(??_ES_Run+1)^(0+384),w
  3037  030C  0021               	movlb	1	; select bank1
  3038  030D  00E1               	movwf	(___wmul@multiplier+1)^(0+128)
  3039  030E  3003               	movlw	3
  3040  030F  00E2               	movwf	___wmul@multiplicand^(0+128)
  3041  0310  3000               	movlw	0
  3042  0311  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  3043  0312  318F  2766  3182   	fcall	___wmul
  3044  0315  0021               	movlb	1	; select bank1
  3045  0316  0861               	movf	(?___wmul+1)^(0+128),w
  3046  0317  0085               	movwf	5
  3047  0318  0860               	movf	?___wmul^(0+128),w
  3048  0319  0084               	movwf	4
  3049  031A  30A8               	movlw	low (_EventQueues| (0+32768))
  3050  031B  0784               	addwf	4,f
  3051  031C  3080               	movlw	high (_EventQueues| (0+32768))
  3052  031D  3D85               	addwfc	5,f
  3053  031E  3F00               	moviw [0]fsr0
  3054  031F  0023               	movlb	3	; select bank3
  3055  0320  00B7               	movwf	_ES_Run$1255^(0+384)
  3056  0321  3F01               	moviw [1]fsr0
  3057  0322  00B8               	movwf	(_ES_Run$1255+1)^(0+384)
  3058                           
  3059                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  3060  0323  0838               	movf	(_ES_Run$1255+1)^(0+384),w
  3061  0324  0021               	movlb	1	; select bank1
  3062  0325  00E7               	movwf	(ES_DeQueue@pBlock+1)^(0+128)
  3063  0326  0023               	movlb	3	; select bank3
  3064  0327  0837               	movf	_ES_Run$1255^(0+384),w
  3065  0328  0021               	movlb	1	; select bank1
  3066  0329  00E6               	movwf	ES_DeQueue@pBlock^(0+128)
  3067  032A  30D6               	movlw	(low (ES_Run@ThisEvent| 0))& (0+255)
  3068  032B  0023               	movlb	3	; select bank3
  3069  032C  00B3               	movwf	??_ES_Run^(0+384)
  3070  032D  0833               	movf	??_ES_Run^(0+384),w
  3071  032E  0021               	movlb	1	; select bank1
  3072  032F  00E8               	movwf	ES_DeQueue@pReturnEvent^(0+128)
  3073  0330  3181  21BB  3182   	fcall	_ES_DeQueue
  3074  0333  3A00               	xorlw	0
  3075  0334  1D03               	skipz
  3076  0335  2B4F               	goto	l3480
  3077                           
  3078                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  3079  0336  0023               	movlb	3	; select bank3
  3080  0337  0839               	movf	ES_Run@HighestPrior^(0+384),w
  3081  0338  00B3               	movwf	??_ES_Run^(0+384)
  3082  0339  01B4               	clrf	(??_ES_Run^(0+384)+1)
  3083  033A  35B3               	lslf	??_ES_Run^(0+384),f
  3084  033B  0DB4               	rlf	(??_ES_Run^(0+384)+1),f
  3085  033C  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  3086  033D  0733               	addwf	??_ES_Run^(0+384),w
  3087  033E  0084               	movwf	4
  3088  033F  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  3089  0340  3D34               	addwfc	(??_ES_Run+1)^(0+384),w
  3090  0341  0085               	movwf	5
  3091  0342  3F00               	moviw [0]fsr0
  3092  0343  00B5               	movwf	(??_ES_Run+2)^(0+384)
  3093  0344  3F01               	moviw [1]fsr0
  3094  0345  00B6               	movwf	((??_ES_Run+2)^(0+384)+1)
  3095  0346  09B5               	comf	(??_ES_Run+2)^(0+384),f
  3096  0347  09B6               	comf	((??_ES_Run+2)^(0+384)+1),f
  3097  0348  0835               	movf	(??_ES_Run+2)^(0+384),w
  3098  0349  0021               	movlb	1	; select bank1
  3099  034A  05C3               	andwf	_Ready^(0+128),f
  3100  034B  0023               	movlb	3	; select bank3
  3101  034C  0836               	movf	(??_ES_Run+3)^(0+384),w
  3102  034D  0021               	movlb	1	; select bank1
  3103  034E  05C4               	andwf	(_Ready+1)^(0+128),f
  3104  034F                     l3480:	
  3105                           
  3106                           ;ES_Framework.c: 291: }
  3107                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType !=
  3108                           ;ES_Framework.c: 293: ES_NO_EVENT) {
  3109  034F  0021               	movlb	1	; select bank1
  3110  0350  0856               	movf	ES_Run@ThisEvent^(0+128),w
  3111  0351  0023               	movlb	3	; select bank3
  3112  0352  00A9               	movwf	RunSPI_Service@ThisEvent^(0+384)
  3113  0353  0021               	movlb	1	; select bank1
  3114  0354  0857               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  3115  0355  0023               	movlb	3	; select bank3
  3116  0356  00AA               	movwf	(RunSPI_Service@ThisEvent+1)^(0+384)
  3117  0357  0021               	movlb	1	; select bank1
  3118  0358  0858               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  3119  0359  0023               	movlb	3	; select bank3
  3120  035A  00AB               	movwf	(RunSPI_Service@ThisEvent+2)^(0+384)
  3121  035B  0839               	movf	ES_Run@HighestPrior^(0+384),w
  3122  035C  00B3               	movwf	??_ES_Run^(0+384)
  3123  035D  01B4               	clrf	(??_ES_Run^(0+384)+1)
  3124  035E  35B3               	lslf	??_ES_Run^(0+384),f
  3125  035F  0DB4               	rlf	(??_ES_Run^(0+384)+1),f
  3126  0360  35B3               	lslf	??_ES_Run^(0+384),f
  3127  0361  0DB4               	rlf	(??_ES_Run^(0+384)+1),f
  3128  0362  0833               	movf	??_ES_Run^(0+384),w
  3129  0363  3E02               	addlw	2
  3130  0364  00B5               	movwf	(??_ES_Run+2)^(0+384)
  3131  0365  3000               	movlw	0
  3132  0366  3D34               	addwfc	(??_ES_Run+1)^(0+384),w
  3133  0367  00B6               	movwf	(??_ES_Run+3)^(0+384)
  3134  0368  30A0               	movlw	low (_ServDescList| (0+32768))
  3135  0369  0735               	addwf	(??_ES_Run+2)^(0+384),w
  3136  036A  0084               	movwf	4
  3137  036B  3080               	movlw	high (_ServDescList| (0+32768))
  3138  036C  3D36               	addwfc	(??_ES_Run+3)^(0+384),w
  3139  036D  0085               	movwf	5
  3140  036E  3F01               	moviw [1]fsr0
  3141  036F  008A               	movwf	10
  3142  0370  3F00               	moviw [0]fsr0
  3143  0371  000A               	callw
  3144  0372  3182               	pagesel	$
  3145  0373  0023               	movlb	3	; select bank3
  3146  0374  0829               	movf	?_RunSPI_Service^(0+384),w
  3147  0375  1903               	btfsc	3,2
  3148  0376  2B79               	goto	l3486
  3149                           
  3150                           ;ES_Framework.c: 294: return FailedRun;
  3151  0377  3002               	movlw	2
  3152  0378  0008               	return
  3153  0379                     l3486:	
  3154  0379  318E  26A1  3182   	fcall	__HW_Process_Pending_Ints
  3155  037C  3A00               	xorlw	0
  3156  037D  1903               	skipnz
  3157  037E  2B84               	goto	l3490
  3158  037F  0021               	movlb	1	; select bank1
  3159  0380  0843               	movf	_Ready^(0+128),w
  3160  0381  0444               	iorwf	(_Ready+1)^(0+128),w
  3161  0382  1D03               	btfss	3,2
  3162  0383  2AF8               	goto	l3474
  3163  0384                     l3490:	
  3164                           
  3165                           ;ES_Framework.c: 295: }
  3166                           ;ES_Framework.c: 296: }
  3167                           ;ES_Framework.c: 299: ES_CheckUserEvents();
  3168  0384  318F  279F  3182   	fcall	_ES_CheckUserEvents
  3169  0387  2B79               	goto	l3486
  3170  0388                     __end_of_ES_Run:	
  3171                           ;ES_Framework.c: 300: }
  3172                           ;ES_Framework.c: 302: return Success;
  3173                           
  3174                           
  3175                           	psect	text4
  3176  0EA1                     __ptext4:	
  3177 ;; *************** function __HW_Process_Pending_Ints *****************
  3178 ;; Defined at:
  3179 ;;		line 210 in file "ES_Port.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      unsigned char 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:   11
  3200 ;; This function calls:
  3201 ;;		_ES_Timer_Tick_Resp
  3202 ;; This function is called by:
  3203 ;;		_ES_Run
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function __HW_Process_Pending_Ints
  3209  0EA1                     __HW_Process_Pending_Ints:	
  3210  0EA1                     l3300:	
  3211                           ;ES_Port.c: 212: while (TickCount > 0)
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in __HW_Process_Pending_Ints: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3215                           
  3216  0EA1  0020               	movlb	0	; select bank0
  3217  0EA2  0853               	movf	_TickCount,w	;volatile
  3218  0EA3  1903               	btfsc	3,2
  3219  0EA4  2EAC               	goto	l3302
  3220                           
  3221                           ;ES_Port.c: 213: {
  3222                           ;ES_Port.c: 215: ES_Timer_Tick_Resp();
  3223  0EA5  3183  2388  318E   	fcall	_ES_Timer_Tick_Resp
  3224                           
  3225                           ;ES_Port.c: 216: TickCount--;
  3226  0EA8  3001               	movlw	1
  3227  0EA9  0020               	movlb	0	; select bank0
  3228  0EAA  02D3               	subwf	_TickCount,f	;volatile
  3229  0EAB  2EA1               	goto	l3300
  3230  0EAC                     l3302:	
  3231                           
  3232                           ;ES_Port.c: 217: }
  3233                           ;ES_Port.c: 219: return 1;
  3234  0EAC  3001               	movlw	1
  3235  0EAD  0008               	return
  3236  0EAE                     __end_of__HW_Process_Pending_Ints:	
  3237                           
  3238                           	psect	text5
  3239  0388                     __ptext5:	
  3240 ;; *************** function _ES_Timer_Tick_Resp *****************
  3241 ;; Defined at:
  3242 ;;		line 284 in file "ES_Timers.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3258 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3259 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3260 ;;Total ram usage:        4 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:   10
  3263 ;; This function calls:
  3264 ;;		Absolute function
  3265 ;;		_ES_GetMSBitSet
  3266 ;;		_PostSPI_Service
  3267 ;;		_PostToggleService
  3268 ;; This function is called by:
  3269 ;;		__HW_Process_Pending_Ints
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _ES_Timer_Tick_Resp
  3275  0388                     _ES_Timer_Tick_Resp:	
  3276                           
  3277                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  3278                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  3279                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  3280                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _ES_Timer_Tick_Resp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3284  0388  0020               	movlb	0	; select bank0
  3285  0389  0847               	movf	_TMR_ActiveFlags,w
  3286  038A  0448               	iorwf	_TMR_ActiveFlags+1,w
  3287  038B  1903               	btfsc	3,2
  3288  038C  0008               	return
  3289                           
  3290                           ;ES_Timers.c: 291: {
  3291                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  3292  038D  0848               	movf	_TMR_ActiveFlags+1,w
  3293  038E  00C0               	movwf	ES_Timer_Tick_Resp@NeedsProcessing+1
  3294  038F  0847               	movf	_TMR_ActiveFlags,w
  3295  0390  00BF               	movwf	ES_Timer_Tick_Resp@NeedsProcessing
  3296  0391                     l3118:	
  3297                           ;ES_Timers.c: 294: do{
  3298                           
  3299                           
  3300                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  3301  0391  0840               	movf	ES_Timer_Tick_Resp@NeedsProcessing+1,w
  3302  0392  0021               	movlb	1	; select bank1
  3303  0393  00DA               	movwf	(ES_GetMSBitSet@Val2Check+1)^(0+128)
  3304  0394  0020               	movlb	0	; select bank0
  3305  0395  083F               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w
  3306  0396  0021               	movlb	1	; select bank1
  3307  0397  00D9               	movwf	ES_GetMSBitSet@Val2Check^(0+128)
  3308  0398  3186  263F  3183   	fcall	_ES_GetMSBitSet
  3309  039B  0023               	movlb	3	; select bank3
  3310  039C  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3311  039D  0823               	movf	??_ES_Timer_Tick_Resp^(0+384),w
  3312  039E  0020               	movlb	0	; select bank0
  3313  039F  00CD               	movwf	ES_Timer_Tick_Resp@NextTimer2Process
  3314                           
  3315                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  3316  03A0  354D               	lslf	ES_Timer_Tick_Resp@NextTimer2Process,w
  3317  03A1  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  3318  03A2  0086               	movwf	6
  3319  03A3  0187               	clrf	7
  3320  03A4  3001               	movlw	1
  3321  03A5  0281               	subwf	1,f
  3322  03A6  3141               	addfsr 1,1
  3323  03A7  3000               	movlw	0
  3324  03A8  3B81               	subwfb	1,f
  3325  03A9  317F               	addfsr 1,-1
  3326  03AA  0016               	moviw fsr1++
  3327  03AB  0401               	iorwf	1,w
  3328  03AC  1D03               	btfss	3,2
  3329  03AD  2BF7               	goto	l3128
  3330                           
  3331                           ;ES_Timers.c: 299: {
  3332                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  3333  03AE  3003               	movlw	3
  3334  03AF  0023               	movlb	3	; select bank3
  3335  03B0  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3336  03B1  0823               	movf	??_ES_Timer_Tick_Resp^(0+384),w
  3337  03B2  0021               	movlb	1	; select bank1
  3338  03B3  00C0               	movwf	ES_Timer_Tick_Resp@NewEvent^(0+128)
  3339                           
  3340                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  3341  03B4  0020               	movlb	0	; select bank0
  3342  03B5  084D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w
  3343  03B6  0023               	movlb	3	; select bank3
  3344  03B7  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3345  03B8  01A4               	clrf	(??_ES_Timer_Tick_Resp^(0+384)+1)
  3346  03B9  0823               	movf	??_ES_Timer_Tick_Resp^(0+384),w
  3347  03BA  0021               	movlb	1	; select bank1
  3348  03BB  00C1               	movwf	(ES_Timer_Tick_Resp@NewEvent^(0+128)+1)
  3349  03BC  0023               	movlb	3	; select bank3
  3350  03BD  0824               	movf	(??_ES_Timer_Tick_Resp+1)^(0+384),w
  3351  03BE  0021               	movlb	1	; select bank1
  3352  03BF  00C2               	movwf	((ES_Timer_Tick_Resp@NewEvent+1)^(0+128)+1)
  3353                           
  3354                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  3355  03C0  0840               	movf	ES_Timer_Tick_Resp@NewEvent^(0+128),w
  3356  03C1  0023               	movlb	3	; select bank3
  3357  03C2  00A0               	movwf	PostSPI_Service@ThisEvent^(0+384)
  3358  03C3  0021               	movlb	1	; select bank1
  3359  03C4  0841               	movf	(ES_Timer_Tick_Resp@NewEvent+1)^(0+128),w
  3360  03C5  0023               	movlb	3	; select bank3
  3361  03C6  00A1               	movwf	(PostSPI_Service@ThisEvent+1)^(0+384)
  3362  03C7  0021               	movlb	1	; select bank1
  3363  03C8  0842               	movf	(ES_Timer_Tick_Resp@NewEvent+2)^(0+128),w
  3364  03C9  0023               	movlb	3	; select bank3
  3365  03CA  00A2               	movwf	(PostSPI_Service@ThisEvent+2)^(0+384)
  3366  03CB  0020               	movlb	0	; select bank0
  3367  03CC  084D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w
  3368  03CD  0023               	movlb	3	; select bank3
  3369  03CE  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3370  03CF  01A4               	clrf	(??_ES_Timer_Tick_Resp^(0+384)+1)
  3371  03D0  35A3               	lslf	??_ES_Timer_Tick_Resp^(0+384),f
  3372  03D1  0DA4               	rlf	(??_ES_Timer_Tick_Resp^(0+384)+1),f
  3373  03D2  3071               	movlw	low (_Timer2PostFunc| (0+32768))
  3374  03D3  0723               	addwf	??_ES_Timer_Tick_Resp^(0+384),w
  3375  03D4  0084               	movwf	4
  3376  03D5  3080               	movlw	high (_Timer2PostFunc| (0+32768))
  3377  03D6  3D24               	addwfc	(??_ES_Timer_Tick_Resp+1)^(0+384),w
  3378  03D7  0085               	movwf	5
  3379  03D8  3F01               	moviw [1]fsr0
  3380  03D9  008A               	movwf	10
  3381  03DA  3F00               	moviw [0]fsr0
  3382  03DB  000A               	callw
  3383  03DC  3183               	pagesel	$
  3384                           
  3385                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  3386  03DD  0020               	movlb	0	; select bank0
  3387  03DE  084D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w
  3388  03DF  0023               	movlb	3	; select bank3
  3389  03E0  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3390  03E1  01A4               	clrf	(??_ES_Timer_Tick_Resp^(0+384)+1)
  3391  03E2  35A3               	lslf	??_ES_Timer_Tick_Resp^(0+384),f
  3392  03E3  0DA4               	rlf	(??_ES_Timer_Tick_Resp^(0+384)+1),f
  3393  03E4  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  3394  03E5  0723               	addwf	??_ES_Timer_Tick_Resp^(0+384),w
  3395  03E6  0084               	movwf	4
  3396  03E7  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  3397  03E8  3D24               	addwfc	(??_ES_Timer_Tick_Resp+1)^(0+384),w
  3398  03E9  0085               	movwf	5
  3399  03EA  3F00               	moviw [0]fsr0
  3400  03EB  00A5               	movwf	(??_ES_Timer_Tick_Resp+2)^(0+384)
  3401  03EC  3F01               	moviw [1]fsr0
  3402  03ED  00A6               	movwf	((??_ES_Timer_Tick_Resp+2)^(0+384)+1)
  3403  03EE  09A5               	comf	(??_ES_Timer_Tick_Resp+2)^(0+384),f
  3404  03EF  09A6               	comf	((??_ES_Timer_Tick_Resp+2)^(0+384)+1),f
  3405  03F0  0825               	movf	(??_ES_Timer_Tick_Resp+2)^(0+384),w
  3406  03F1  0020               	movlb	0	; select bank0
  3407  03F2  05C7               	andwf	_TMR_ActiveFlags,f
  3408  03F3  0023               	movlb	3	; select bank3
  3409  03F4  0826               	movf	(??_ES_Timer_Tick_Resp+3)^(0+384),w
  3410  03F5  0020               	movlb	0	; select bank0
  3411  03F6  05C8               	andwf	_TMR_ActiveFlags+1,f
  3412  03F7                     l3128:	
  3413                           
  3414                           ;ES_Timers.c: 306: }
  3415                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  3416  03F7  084D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w
  3417  03F8  0023               	movlb	3	; select bank3
  3418  03F9  00A3               	movwf	??_ES_Timer_Tick_Resp^(0+384)
  3419  03FA  01A4               	clrf	(??_ES_Timer_Tick_Resp^(0+384)+1)
  3420  03FB  35A3               	lslf	??_ES_Timer_Tick_Resp^(0+384),f
  3421  03FC  0DA4               	rlf	(??_ES_Timer_Tick_Resp^(0+384)+1),f
  3422  03FD  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  3423  03FE  0723               	addwf	??_ES_Timer_Tick_Resp^(0+384),w
  3424  03FF  0084               	movwf	4
  3425  0400  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  3426  0401  3D24               	addwfc	(??_ES_Timer_Tick_Resp+1)^(0+384),w
  3427  0402  0085               	movwf	5
  3428  0403  3F00               	moviw [0]fsr0
  3429  0404  00A5               	movwf	(??_ES_Timer_Tick_Resp+2)^(0+384)
  3430  0405  3F01               	moviw [1]fsr0
  3431  0406  00A6               	movwf	((??_ES_Timer_Tick_Resp+2)^(0+384)+1)
  3432  0407  09A5               	comf	(??_ES_Timer_Tick_Resp+2)^(0+384),f
  3433  0408  09A6               	comf	((??_ES_Timer_Tick_Resp+2)^(0+384)+1),f
  3434  0409  0825               	movf	(??_ES_Timer_Tick_Resp+2)^(0+384),w
  3435  040A  0020               	movlb	0	; select bank0
  3436  040B  05BF               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f
  3437  040C  0023               	movlb	3	; select bank3
  3438  040D  0826               	movf	(??_ES_Timer_Tick_Resp+3)^(0+384),w
  3439  040E  0020               	movlb	0	; select bank0
  3440  040F  05C0               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f
  3441                           
  3442                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  3443  0410  083F               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w
  3444  0411  0440               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w
  3445  0412  1903               	btfsc	3,2
  3446  0413  0008               	return
  3447  0414  2B91               	goto	l3118
  3448  0415                     __end_of_ES_Timer_Tick_Resp:	
  3449                           
  3450                           	psect	text6
  3451  0F02                     __ptext6:	
  3452 ;; *************** function _PostSPI_Service *****************
  3453 ;; Defined at:
  3454 ;;		line 84 in file "SPI_Service.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  ThisEvent       3    0[BANK3 ] struct ES_Event_t
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      unsigned char 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3468 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3472 ;;Total ram usage:        3 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    9
  3475 ;; This function calls:
  3476 ;;		_ES_PostToService
  3477 ;; This function is called by:
  3478 ;;		_RunSPI_Service
  3479 ;;		_sendByte
  3480 ;;		_ES_Timer_Tick_Resp
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           
  3485                           ;psect for function _PostSPI_Service
  3486  0F02                     _PostSPI_Service:	
  3487                           
  3488                           ;Skip over the trampoline to the duplicate function for level 1
  3489  0F02  1C7E               	btfss	126,0
  3490  0F03  2F06               	goto	l3012
  3491  0F04  318E  2E96         	ljmp	i1l3440
  3492  0F06                     _PostSPI_Service$intlevel0:	
  3493  0F06                     l3012:	
  3494                           ;incstack = 0
  3495                           ; Regs used in _PostSPI_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3496                           
  3497                           
  3498                           ;SPI_Service.c: 86: return ES_PostToService( MyPriority, ThisEvent);
  3499                           ;	Return value of _PostSPI_Service is never used
  3500  0F06  0023               	movlb	3	; select bank3
  3501  0F07  0820               	movf	PostSPI_Service@ThisEvent^(0+384),w
  3502  0F08  0022               	movlb	2	; select bank2
  3503  0F09  00E6               	movwf	ES_PostToService@TheEvent^(0+256)
  3504  0F0A  0023               	movlb	3	; select bank3
  3505  0F0B  0821               	movf	(PostSPI_Service@ThisEvent+1)^(0+384),w
  3506  0F0C  0022               	movlb	2	; select bank2
  3507  0F0D  00E7               	movwf	(ES_PostToService@TheEvent+1)^(0+256)
  3508  0F0E  0023               	movlb	3	; select bank3
  3509  0F0F  0822               	movf	(PostSPI_Service@ThisEvent+2)^(0+384),w
  3510  0F10  0022               	movlb	2	; select bank2
  3511  0F11  00E8               	movwf	(ES_PostToService@TheEvent+2)^(0+256)
  3512  0F12  0020               	movlb	0	; select bank0
  3513  0F13  084E               	movf	SPI_Service@MyPriority,w
  3514  0F14  3185  254D         	fcall	_ES_PostToService
  3515  0F16  0008               	return
  3516  0F17                     __end_of_PostSPI_Service:	
  3517                           
  3518                           	psect	text7
  3519  0EDD                     __ptext7:	
  3520 ;; *************** function _PostToggleService *****************
  3521 ;; Defined at:
  3522 ;;		line 106 in file "ToggleService.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  ThisEvent       3    0[BANK3 ] struct ES_Event_t
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      unsigned char 
  3529 ;; Registers used:
  3530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3536 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3540 ;;Total ram usage:        3 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    9
  3543 ;; This function calls:
  3544 ;;		_ES_PostToService
  3545 ;; This function is called by:
  3546 ;;		_ES_Timer_Tick_Resp
  3547 ;;		_PostToList
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _PostToggleService
  3553  0EDD                     _PostToggleService:	
  3554                           
  3555                           ;ToggleService.c: 108: return ES_PostToService( MyPriority, ThisEvent);
  3556                           
  3557                           ;incstack = 0
  3558                           ; Regs used in _PostToggleService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3559  0EDD  0023               	movlb	3	; select bank3
  3560  0EDE  0820               	movf	PostToggleService@ThisEvent^(0+384),w
  3561  0EDF  0022               	movlb	2	; select bank2
  3562  0EE0  00E6               	movwf	ES_PostToService@TheEvent^(0+256)
  3563  0EE1  0023               	movlb	3	; select bank3
  3564  0EE2  0821               	movf	(PostToggleService@ThisEvent+1)^(0+384),w
  3565  0EE3  0022               	movlb	2	; select bank2
  3566  0EE4  00E7               	movwf	(ES_PostToService@TheEvent+1)^(0+256)
  3567  0EE5  0023               	movlb	3	; select bank3
  3568  0EE6  0822               	movf	(PostToggleService@ThisEvent+2)^(0+384),w
  3569  0EE7  0022               	movlb	2	; select bank2
  3570  0EE8  00E8               	movwf	(ES_PostToService@TheEvent+2)^(0+256)
  3571  0EE9  0020               	movlb	0	; select bank0
  3572  0EEA  0850               	movf	ToggleService@MyPriority,w
  3573  0EEB  3185  254D         	fcall	_ES_PostToService
  3574  0EED  0008               	return
  3575  0EEE                     __end_of_PostToggleService:	
  3576                           
  3577                           	psect	text8
  3578  063F                     __ptext8:	
  3579 ;; *************** function _ES_GetMSBitSet *****************
  3580 ;; Defined at:
  3581 ;;		line 79 in file "ES_LookupTables.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  Val2Check       2    0[BANK1 ] unsigned int 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  LoopCntr        1    8[BANK1 ] char 
  3586 ;;  Nybble2Test     1    7[BANK1 ] unsigned char 
  3587 ;;  ReturnVal       1    6[BANK1 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      unsigned char 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3597 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3598 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3599 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3600 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  3601 ;;Total ram usage:        9 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    6
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_ES_Run
  3608 ;;		_ES_Timer_Tick_Resp
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           
  3613                           ;psect for function _ES_GetMSBitSet
  3614  063F                     _ES_GetMSBitSet:	
  3615                           
  3616                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  3617                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  3618                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _ES_GetMSBitSet: [wreg-fsr0h+status,2+status,0+pclath]
  3622  063F  3080               	movlw	128
  3623  0640  0021               	movlb	1	; select bank1
  3624  0641  00DB               	movwf	??_ES_GetMSBitSet^(0+128)
  3625  0642  085B               	movf	??_ES_GetMSBitSet^(0+128),w
  3626  0643  00DF               	movwf	ES_GetMSBitSet@ReturnVal^(0+128)
  3627                           
  3628                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  3629  0644  3003               	movlw	3
  3630  0645  00DB               	movwf	??_ES_GetMSBitSet^(0+128)
  3631  0646  085B               	movf	??_ES_GetMSBitSet^(0+128),w
  3632  0647  00E1               	movwf	ES_GetMSBitSet@LoopCntr^(0+128)
  3633                           
  3634                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  3635  0648  1BE1               	btfsc	ES_GetMSBitSet@LoopCntr^(0+128),7
  3636  0649  2E83               	goto	l3004
  3637  064A                     l2996:	
  3638                           
  3639                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  3640                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  3641                           ;ES_LookupTables.c: 91: 0x0F);
  3642  064A  085A               	movf	(ES_GetMSBitSet@Val2Check+1)^(0+128),w
  3643  064B  00DC               	movwf	(??_ES_GetMSBitSet^(0+128)+1)
  3644  064C  0859               	movf	ES_GetMSBitSet@Val2Check^(0+128),w
  3645  064D  00DB               	movwf	??_ES_GetMSBitSet^(0+128)
  3646  064E  0861               	movf	ES_GetMSBitSet@LoopCntr^(0+128),w
  3647  064F  00DD               	movwf	(??_ES_GetMSBitSet+2)^(0+128)
  3648  0650  3001               	movlw	1
  3649  0651                     u2855:	
  3650  0651  35DD               	lslf	(??_ES_GetMSBitSet+2)^(0+128),f
  3651  0652  3EFF               	addlw	-1
  3652  0653  1D03               	skipz
  3653  0654  2E51               	goto	u2855
  3654  0655  355D               	lslf	(??_ES_GetMSBitSet+2)^(0+128),w
  3655  0656  0A89               	incf	9,f
  3656  0657  2E5A               	goto	u2864
  3657  0658                     u2865:	
  3658  0658  36DC               	lsrf	(??_ES_GetMSBitSet^(0+128)+1),f
  3659  0659  0CDB               	rrf	??_ES_GetMSBitSet^(0+128),f
  3660  065A                     u2864:	
  3661  065A  0B89               	decfsz	9,f
  3662  065B  2E58               	goto	u2865
  3663  065C  085B               	movf	??_ES_GetMSBitSet^(0+128),w
  3664  065D  390F               	andlw	15
  3665  065E  00DE               	movwf	(??_ES_GetMSBitSet+3)^(0+128)
  3666  065F  085E               	movf	(??_ES_GetMSBitSet+3)^(0+128),w
  3667  0660  00E0               	movwf	ES_GetMSBitSet@Nybble2Test^(0+128)
  3668                           
  3669                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  3670  0661  0860               	movf	ES_GetMSBitSet@Nybble2Test^(0+128),w
  3671  0662  1903               	btfsc	3,2
  3672  0663  2E7D               	goto	l3000
  3673                           
  3674                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  3675                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  3676  0664  0861               	movf	ES_GetMSBitSet@LoopCntr^(0+128),w
  3677  0665  00DB               	movwf	??_ES_GetMSBitSet^(0+128)
  3678  0666  3002               	movlw	2
  3679  0667                     u2885:	
  3680  0667  35DB               	lslf	??_ES_GetMSBitSet^(0+128),f
  3681  0668  0B89               	decfsz	9,f
  3682  0669  2E67               	goto	u2885
  3683  066A  0860               	movf	ES_GetMSBitSet@Nybble2Test^(0+128),w
  3684  066B  3EFF               	addlw	255
  3685  066C  00DC               	movwf	(??_ES_GetMSBitSet+1)^(0+128)
  3686  066D  30FF               	movlw	255
  3687  066E  1803               	skipnc
  3688  066F  3000               	movlw	0
  3689  0670  00DD               	movwf	((??_ES_GetMSBitSet+1)^(0+128)+1)
  3690  0671  3091               	movlw	low (_Nybble2MSBitNum| (0+32768))
  3691  0672  075C               	addwf	(??_ES_GetMSBitSet+1)^(0+128),w
  3692  0673  0084               	movwf	4
  3693  0674  3080               	movlw	high (_Nybble2MSBitNum| (0+32768))
  3694  0675  3D5D               	addwfc	(??_ES_GetMSBitSet+2)^(0+128),w
  3695  0676  0085               	movwf	5
  3696  0677  0800               	movf	0,w	;code access
  3697  0678  075B               	addwf	??_ES_GetMSBitSet^(0+128),w
  3698  0679  00DE               	movwf	(??_ES_GetMSBitSet+3)^(0+128)
  3699  067A  085E               	movf	(??_ES_GetMSBitSet+3)^(0+128),w
  3700  067B  00DF               	movwf	ES_GetMSBitSet@ReturnVal^(0+128)
  3701                           
  3702                           ;ES_LookupTables.c: 96: break;
  3703  067C  2E83               	goto	l3004
  3704  067D                     l3000:	
  3705  067D  30FF               	movlw	255
  3706  067E  00DB               	movwf	??_ES_GetMSBitSet^(0+128)
  3707  067F  085B               	movf	??_ES_GetMSBitSet^(0+128),w
  3708  0680  07E1               	addwf	ES_GetMSBitSet@LoopCntr^(0+128),f
  3709  0681  1FE1               	btfss	ES_GetMSBitSet@LoopCntr^(0+128),7
  3710  0682  2E4A               	goto	l2996
  3711  0683                     l3004:	
  3712                           
  3713                           ;ES_LookupTables.c: 97: }
  3714                           ;ES_LookupTables.c: 98: }
  3715                           ;ES_LookupTables.c: 99: return ReturnVal;
  3716  0683  085F               	movf	ES_GetMSBitSet@ReturnVal^(0+128),w
  3717  0684  0008               	return
  3718  0685                     __end_of_ES_GetMSBitSet:	
  3719                           
  3720                           	psect	text9
  3721  025A                     __ptext9:	
  3722 ;; *************** function _RunSPI_Service *****************
  3723 ;; Defined at:
  3724 ;;		line 100 in file "SPI_Service.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  ThisEvent       3    9[BANK3 ] struct ES_Event_t
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  ThisEvent       3   16[BANK3 ] struct ES_Event_t
  3729 ;;  ReturnEvent     3   13[BANK3 ] struct ES_Event_t
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  3    9[BANK3 ] struct ES_Event_t
  3732 ;; Registers used:
  3733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3739 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3740 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  3741 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Totals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  3743 ;;Total ram usage:       10 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:   11
  3746 ;; This function calls:
  3747 ;;		_ES_Timer_InitTimer
  3748 ;;		_FormPacket
  3749 ;;		_PostSPI_Service
  3750 ;;		_SetBGR
  3751 ;;		_sendByte
  3752 ;; This function is called by:
  3753 ;;		_ES_Run
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _RunSPI_Service
  3759  025A                     _RunSPI_Service:	
  3760                           
  3761                           ;SPI_Service.c: 102: ES_Event ReturnEvent;
  3762                           ;SPI_Service.c: 103: if (ThisEvent.EventType == ES_TIMEOUT) {
  3763                           
  3764                           ;incstack = 0
  3765                           ; Regs used in _RunSPI_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3766  025A  3003               	movlw	3
  3767  025B  0023               	movlb	3	; select bank3
  3768  025C  0629               	xorwf	RunSPI_Service@ThisEvent^(0+384),w
  3769  025D  1D03               	btfss	3,2
  3770  025E  2AA7               	goto	l3400
  3771                           
  3772                           ;SPI_Service.c: 104: if (ThisEvent.EventParam == 1){
  3773  025F  032A               	decf	(RunSPI_Service@ThisEvent^(0+384)+1),w
  3774  0260  042B               	iorwf	((RunSPI_Service@ThisEvent+1)^(0+384)+1),w
  3775  0261  1D03               	btfss	3,2
  3776  0262  2AA7               	goto	l3400
  3777                           
  3778                           ;SPI_Service.c: 105: if (RA0 == 1)
  3779  0263  0020               	movlb	0	; select bank0
  3780  0264  1C0C               	btfss	12,0	;volatile
  3781  0265  2A68               	goto	l440
  3782                           
  3783                           ;SPI_Service.c: 106: {
  3784                           ;SPI_Service.c: 107: RA0 = 0;
  3785  0266  100C               	bcf	12,0	;volatile
  3786                           
  3787                           ;SPI_Service.c: 108: } else {
  3788  0267  2A69               	goto	l3380
  3789  0268                     l440:	
  3790                           
  3791                           ;SPI_Service.c: 109: RA0 = 1;
  3792  0268  140C               	bsf	12,0	;volatile
  3793  0269                     l3380:	
  3794                           
  3795                           ;SPI_Service.c: 110: }
  3796                           ;SPI_Service.c: 111: if (LEDColor == 0) {
  3797  0269  0021               	movlb	1	; select bank1
  3798  026A  0847               	movf	_LEDColor^(0+128),w
  3799  026B  1D03               	btfss	3,2
  3800  026C  2A7C               	goto	l3386
  3801                           
  3802                           ;SPI_Service.c: 112: SetBGR(0x00, 0xFF, 0x00);
  3803  026D  30FF               	movlw	255
  3804  026E  0023               	movlb	3	; select bank3
  3805  026F  00AC               	movwf	??_RunSPI_Service^(0+384)
  3806  0270  082C               	movf	??_RunSPI_Service^(0+384),w
  3807  0271  0021               	movlb	1	; select bank1
  3808  0272  00D9               	movwf	SetBGR@G^(0+128)
  3809  0273  01DA               	clrf	SetBGR@R^(0+128)
  3810  0274  3000               	movlw	0
  3811  0275  318E  26EE  3182   	fcall	_SetBGR
  3812                           
  3813                           ;SPI_Service.c: 113: LEDColor = 1;
  3814  0278  0021               	movlb	1	; select bank1
  3815  0279  01C7               	clrf	_LEDColor^(0+128)
  3816  027A  0AC7               	incf	_LEDColor^(0+128),f
  3817                           
  3818                           ;SPI_Service.c: 114: } else if (LEDColor ==1) {
  3819  027B  2A99               	goto	l3396
  3820  027C                     l3386:	
  3821  027C  0347               	decf	_LEDColor^(0+128),w
  3822  027D  1D03               	btfss	3,2
  3823  027E  2A91               	goto	l3392
  3824                           
  3825                           ;SPI_Service.c: 115: SetBGR(0x00, 0x00, 0xFF);
  3826  027F  01D9               	clrf	SetBGR@G^(0+128)
  3827  0280  30FF               	movlw	255
  3828  0281  0023               	movlb	3	; select bank3
  3829  0282  00AC               	movwf	??_RunSPI_Service^(0+384)
  3830  0283  082C               	movf	??_RunSPI_Service^(0+384),w
  3831  0284  0021               	movlb	1	; select bank1
  3832  0285  00DA               	movwf	SetBGR@R^(0+128)
  3833  0286  3000               	movlw	0
  3834  0287  318E  26EE  3182   	fcall	_SetBGR
  3835                           
  3836                           ;SPI_Service.c: 116: LEDColor = 2;
  3837  028A  3002               	movlw	2
  3838  028B  0023               	movlb	3	; select bank3
  3839  028C  00AC               	movwf	??_RunSPI_Service^(0+384)
  3840  028D  082C               	movf	??_RunSPI_Service^(0+384),w
  3841  028E  0021               	movlb	1	; select bank1
  3842  028F  00C7               	movwf	_LEDColor^(0+128)
  3843                           
  3844                           ;SPI_Service.c: 117: } else {
  3845  0290  2A99               	goto	l3396
  3846  0291                     l3392:	
  3847                           
  3848                           ;SPI_Service.c: 118: SetBGR(0xFF, 0x00, 0x00);
  3849  0291  01D9               	clrf	SetBGR@G^(0+128)
  3850  0292  01DA               	clrf	SetBGR@R^(0+128)
  3851  0293  30FF               	movlw	255
  3852  0294  318E  26EE  3182   	fcall	_SetBGR
  3853                           
  3854                           ;SPI_Service.c: 119: LEDColor = 0;
  3855  0297  0021               	movlb	1	; select bank1
  3856  0298  01C7               	clrf	_LEDColor^(0+128)
  3857  0299                     l3396:	
  3858                           
  3859                           ;SPI_Service.c: 120: }
  3860                           ;SPI_Service.c: 122: ES_Event ThisEvent;
  3861                           ;SPI_Service.c: 123: ThisEvent.EventType = SEND_TRIGGER;
  3862  0299  3008               	movlw	8
  3863  029A  0023               	movlb	3	; select bank3
  3864  029B  00AC               	movwf	??_RunSPI_Service^(0+384)
  3865  029C  082C               	movf	??_RunSPI_Service^(0+384),w
  3866  029D  00B0               	movwf	RunSPI_Service@ThisEvent_771^(0+384)
  3867                           
  3868                           ;SPI_Service.c: 124: PostSPI_Service(ThisEvent);
  3869  029E  0830               	movf	RunSPI_Service@ThisEvent_771^(0+384),w
  3870  029F  00A0               	movwf	PostSPI_Service@ThisEvent^(0+384)
  3871  02A0  0831               	movf	(RunSPI_Service@ThisEvent_771+1)^(0+384),w
  3872  02A1  00A1               	movwf	(PostSPI_Service@ThisEvent+1)^(0+384)
  3873  02A2  0832               	movf	(RunSPI_Service@ThisEvent_771+2)^(0+384),w
  3874  02A3  00A2               	movwf	(PostSPI_Service@ThisEvent+2)^(0+384)
  3875  02A4  318F  2702  3182   	fcall	_PostSPI_Service
  3876  02A7                     l3400:	
  3877                           
  3878                           ;SPI_Service.c: 126: }
  3879                           ;SPI_Service.c: 127: }
  3880                           ;SPI_Service.c: 128: if (CurrentState == Waiting2Send) {
  3881  02A7  0021               	movlb	1	; select bank1
  3882  02A8  0345               	decf	SPI_Service@CurrentState^(0+128),w
  3883  02A9  1D03               	btfss	3,2
  3884  02AA  2ABA               	goto	l3412
  3885                           
  3886                           ;SPI_Service.c: 129: if (ThisEvent.EventType == SEND_TRIGGER) {
  3887  02AB  3008               	movlw	8
  3888  02AC  0023               	movlb	3	; select bank3
  3889  02AD  0629               	xorwf	RunSPI_Service@ThisEvent^(0+384),w
  3890  02AE  1D03               	btfss	3,2
  3891  02AF  2AEE               	goto	l3434
  3892                           
  3893                           ;SPI_Service.c: 130: CurrentState = Sending;
  3894  02B0  0021               	movlb	1	; select bank1
  3895  02B1  01C5               	clrf	SPI_Service@CurrentState^(0+128)
  3896                           
  3897                           ;SPI_Service.c: 131: NumBytesLeft--;
  3898  02B2  3001               	movlw	1
  3899  02B3  02C9               	subwf	_NumBytesLeft^(0+128),f
  3900                           
  3901                           ;SPI_Service.c: 132: FormPacket();
  3902  02B4  3184  2415  3182   	fcall	_FormPacket
  3903                           
  3904                           ;SPI_Service.c: 133: sendByte(BytesToSend[0]);
  3905  02B7  0022               	movlb	2	; select bank2
  3906  02B8  0820               	movf	_BytesToSend^(0+256),w
  3907  02B9  2AEC               	goto	L1
  3908  02BA                     l3412:	
  3909                           ;SPI_Service.c: 134: }
  3910                           ;SPI_Service.c: 135: } else if (CurrentState == Sending) {
  3911                           
  3912  02BA  0021               	movlb	1	; select bank1
  3913  02BB  0845               	movf	SPI_Service@CurrentState^(0+128),w
  3914  02BC  1D03               	btfss	3,2
  3915  02BD  2AEE               	goto	l3434
  3916                           
  3917                           ;SPI_Service.c: 136: if (ThisEvent.EventType == BYTE_SENT) {
  3918  02BE  3005               	movlw	5
  3919  02BF  0023               	movlb	3	; select bank3
  3920  02C0  0629               	xorwf	RunSPI_Service@ThisEvent^(0+384),w
  3921  02C1  1D03               	btfss	3,2
  3922  02C2  2ADE               	goto	l3430
  3923                           
  3924                           ;SPI_Service.c: 137: if (NumBytesLeft == 0) {
  3925  02C3  0021               	movlb	1	; select bank1
  3926  02C4  0849               	movf	_NumBytesLeft^(0+128),w
  3927  02C5  1D03               	btfss	3,2
  3928  02C6  2ADB               	goto	l3426
  3929                           
  3930                           ;SPI_Service.c: 138: NumBytesLeft = 8 + 11*4;
  3931  02C7  3034               	movlw	52
  3932  02C8  0023               	movlb	3	; select bank3
  3933  02C9  00AC               	movwf	??_RunSPI_Service^(0+384)
  3934  02CA  082C               	movf	??_RunSPI_Service^(0+384),w
  3935  02CB  0021               	movlb	1	; select bank1
  3936  02CC  00C9               	movwf	_NumBytesLeft^(0+128)
  3937                           
  3938                           ;SPI_Service.c: 139: FirstSend = 1;
  3939  02CD  01C6               	clrf	_FirstSend^(0+128)
  3940  02CE  0AC6               	incf	_FirstSend^(0+128),f
  3941                           
  3942                           ;SPI_Service.c: 140: ES_Timer_InitTimer(1, 50);
  3943  02CF  3032               	movlw	50
  3944  02D0  00D9               	movwf	ES_Timer_InitTimer@NewTime^(0+128)
  3945  02D1  3000               	movlw	0
  3946  02D2  00DA               	movwf	(ES_Timer_InitTimer@NewTime^(0+128)+1)
  3947  02D3  3001               	movlw	1
  3948  02D4  3187  2710  3182   	fcall	_ES_Timer_InitTimer
  3949                           
  3950                           ;SPI_Service.c: 141: CurrentState = Waiting2Send;
  3951  02D7  0021               	movlb	1	; select bank1
  3952  02D8  01C5               	clrf	SPI_Service@CurrentState^(0+128)
  3953  02D9  0AC5               	incf	SPI_Service@CurrentState^(0+128),f
  3954                           
  3955                           ;SPI_Service.c: 142: } else {
  3956  02DA  2AEE               	goto	l3434
  3957  02DB                     l3426:	
  3958                           
  3959                           ;SPI_Service.c: 143: NumBytesLeft--;
  3960  02DB  3001               	movlw	1
  3961  02DC  02C9               	subwf	_NumBytesLeft^(0+128),f
  3962  02DD  2AE4               	goto	L2
  3963  02DE                     l3430:	
  3964                           ;SPI_Service.c: 145: }
  3965                           ;SPI_Service.c: 146: } else if(ThisEvent.EventType == BUF_NOT_READY) {
  3966                           
  3967                           ;SPI_Service.c: 144: sendByte(BytesToSend[8 + 11*4 - NumBytesLeft - 1]);
  3968                           
  3969  02DE  3009               	movlw	9
  3970  02DF  0023               	movlb	3	; select bank3
  3971  02E0  0629               	xorwf	RunSPI_Service@ThisEvent^(0+384),w
  3972  02E1  1D03               	btfss	3,2
  3973  02E2  2AEE               	goto	l3434
  3974                           
  3975                           ;SPI_Service.c: 147: sendByte(BytesToSend[8 + 11*4 - NumBytesLeft - 1]);
  3976  02E3  0021               	movlb	1	; select bank1
  3977  02E4                     L2:	
  3978  02E4  0349               	decf	_NumBytesLeft^(0+128),w
  3979  02E5  3AFF               	xorlw	255
  3980  02E6  3E33               	addlw	51
  3981  02E7  3E20               	addlw	(low (_BytesToSend| (0+256)))& (0+255)
  3982  02E8  0086               	movwf	6
  3983  02E9  3001               	movlw	1	; select bank2/3
  3984  02EA  0087               	movwf	7
  3985  02EB  0801               	movf	1,w
  3986  02EC                     L1:	
  3987  02EC  3187  27AC         	fcall	_sendByte
  3988  02EE                     l3434:	
  3989                           
  3990                           ;SPI_Service.c: 148: }
  3991                           ;SPI_Service.c: 149: }
  3992                           ;SPI_Service.c: 151: ReturnEvent.EventType = ES_NO_EVENT;
  3993  02EE  0023               	movlb	3	; select bank3
  3994  02EF  01AD               	clrf	RunSPI_Service@ReturnEvent^(0+384)
  3995                           
  3996                           ;SPI_Service.c: 152: return(ReturnEvent);
  3997  02F0  082D               	movf	RunSPI_Service@ReturnEvent^(0+384),w
  3998  02F1  00A9               	movwf	?_RunSPI_Service^(0+384)
  3999  02F2  082E               	movf	(RunSPI_Service@ReturnEvent+1)^(0+384),w
  4000  02F3  00AA               	movwf	(?_RunSPI_Service+1)^(0+384)
  4001  02F4  082F               	movf	(RunSPI_Service@ReturnEvent+2)^(0+384),w
  4002  02F5  00AB               	movwf	(?_RunSPI_Service+2)^(0+384)
  4003  02F6  0008               	return
  4004  02F7                     __end_of_RunSPI_Service:	
  4005                           
  4006                           	psect	text10
  4007  0FDE                     __ptext10:	
  4008 ;; *************** function _RunToggleService *****************
  4009 ;; Defined at:
  4010 ;;		line 128 in file "ToggleService.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  ThisEvent       3    9[BANK3 ] struct ES_Event_t
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  ReturnEvent     3   12[BANK3 ] struct ES_Event_t
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  3    9[BANK3 ] struct ES_Event_t
  4017 ;; Registers used:
  4018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4024 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4028 ;;Total ram usage:        6 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    7
  4031 ;; This function calls:
  4032 ;;		_ES_Timer_InitTimer
  4033 ;; This function is called by:
  4034 ;;		_ES_Run
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _RunToggleService
  4040  0FDE                     _RunToggleService:	
  4041                           
  4042                           ;ToggleService.c: 130: ES_Event ReturnEvent;
  4043                           ;ToggleService.c: 131: ReturnEvent.EventType = ES_NO_EVENT;
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _RunToggleService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4047  0FDE  0023               	movlb	3	; select bank3
  4048  0FDF  01AC               	clrf	RunToggleService@ReturnEvent^(0+384)
  4049                           
  4050                           ;ToggleService.c: 135: if (ThisEvent.EventType == ES_TIMEOUT) {
  4051  0FE0  3003               	movlw	3
  4052  0FE1  0629               	xorwf	RunToggleService@ThisEvent^(0+384),w
  4053  0FE2  1D03               	btfss	3,2
  4054  0FE3  2FF8               	goto	l3350
  4055                           
  4056                           ;ToggleService.c: 136: if (ThisEvent.EventParam == 0) {
  4057  0FE4  082A               	movf	(RunToggleService@ThisEvent^(0+384)+1),w
  4058  0FE5  042B               	iorwf	((RunToggleService@ThisEvent+1)^(0+384)+1),w
  4059  0FE6  1D03               	btfss	3,2
  4060  0FE7  2FF8               	goto	l3350
  4061                           
  4062                           ;ToggleService.c: 137: if (RA1 == 1) {
  4063  0FE8  0020               	movlb	0	; select bank0
  4064  0FE9  1C8C               	btfss	12,1	;volatile
  4065  0FEA  2FED               	goto	l378
  4066                           
  4067                           ;ToggleService.c: 138: RA1 = 0;
  4068  0FEB  108C               	bcf	12,1	;volatile
  4069                           
  4070                           ;ToggleService.c: 139: } else if (RA1 == 0) {
  4071  0FEC  2FF0               	goto	l3348
  4072  0FED                     l378:	
  4073  0FED  188C               	btfsc	12,1	;volatile
  4074  0FEE  2FF0               	goto	l3348
  4075                           
  4076                           ;ToggleService.c: 140: RA1 = 1;
  4077  0FEF  148C               	bsf	12,1	;volatile
  4078  0FF0                     l3348:	
  4079                           
  4080                           ;ToggleService.c: 141: }
  4081                           ;ToggleService.c: 142: ES_Timer_InitTimer(0,100);
  4082  0FF0  3064               	movlw	100
  4083  0FF1  0021               	movlb	1	; select bank1
  4084  0FF2  00D9               	movwf	ES_Timer_InitTimer@NewTime^(0+128)
  4085  0FF3  3000               	movlw	0
  4086  0FF4  00DA               	movwf	(ES_Timer_InitTimer@NewTime^(0+128)+1)
  4087  0FF5  3000               	movlw	0
  4088  0FF6  3187  2710         	fcall	_ES_Timer_InitTimer
  4089  0FF8                     l3350:	
  4090                           
  4091                           ;ToggleService.c: 143: }
  4092                           ;ToggleService.c: 144: }
  4093                           ;ToggleService.c: 145: return ReturnEvent;
  4094  0FF8  0023               	movlb	3	; select bank3
  4095  0FF9  082C               	movf	RunToggleService@ReturnEvent^(0+384),w
  4096  0FFA  00A9               	movwf	?_RunToggleService^(0+384)
  4097  0FFB  082D               	movf	(RunToggleService@ReturnEvent+1)^(0+384),w
  4098  0FFC  00AA               	movwf	(?_RunToggleService+1)^(0+384)
  4099  0FFD  082E               	movf	(RunToggleService@ReturnEvent+2)^(0+384),w
  4100  0FFE  00AB               	movwf	(?_RunToggleService+2)^(0+384)
  4101  0FFF  0008               	return
  4102  1000                     __end_of_RunToggleService:	
  4103                           
  4104                           	psect	text11
  4105  07AC                     __ptext11:	
  4106 ;; *************** function _sendByte *****************
  4107 ;; Defined at:
  4108 ;;		line 155 in file "SPI_Service.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  Data            1    wreg     unsigned char 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  Data            1    8[BANK3 ] unsigned char 
  4113 ;;  ThisEvent       3    5[BANK3 ] struct ES_Event_t
  4114 ;;  dummy           1    4[BANK3 ] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4128 ;;Total ram usage:        6 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:   10
  4131 ;; This function calls:
  4132 ;;		_PostSPI_Service
  4133 ;; This function is called by:
  4134 ;;		_RunSPI_Service
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function _sendByte
  4140  07AC                     _sendByte:	
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _sendByte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4144                           ;sendByte@Data stored from wreg
  4145  07AC  0023               	movlb	3	; select bank3
  4146  07AD  00A8               	movwf	sendByte@Data^(0+384)
  4147                           
  4148                           ;SPI_Service.c: 156: if (FirstSend == 1) {
  4149  07AE  0021               	movlb	1	; select bank1
  4150  07AF  0346               	decf	_FirstSend^(0+128),w
  4151  07B0  1D03               	btfss	3,2
  4152  07B1  2FB8               	goto	l458
  4153                           
  4154                           ;SPI_Service.c: 157: FirstSend = 0;
  4155  07B2  01C6               	clrf	_FirstSend^(0+128)
  4156                           
  4157                           ;SPI_Service.c: 158: SSPBUF = Data;
  4158  07B3  0023               	movlb	3	; select bank3
  4159  07B4  0828               	movf	sendByte@Data^(0+384),w
  4160  07B5  0024               	movlb	4	; select bank4
  4161  07B6  0091               	movwf	17	;volatile
  4162                           
  4163                           ;SPI_Service.c: 159: } else if (SSPSTATbits.BF != 0) {
  4164  07B7  0008               	return
  4165  07B8                     l458:	
  4166  07B8  0024               	movlb	4	; select bank4
  4167  07B9  1C14               	btfss	20,0	;volatile
  4168  07BA  2FC4               	goto	l3172
  4169                           
  4170                           ;SPI_Service.c: 160: uint8_t dummy = SSPBUF;
  4171  07BB  0811               	movf	17,w	;volatile
  4172  07BC  0023               	movlb	3	; select bank3
  4173  07BD  00A3               	movwf	??_sendByte^(0+384)
  4174  07BE  0823               	movf	??_sendByte^(0+384),w
  4175  07BF  00A4               	movwf	sendByte@dummy^(0+384)
  4176                           
  4177                           ;SPI_Service.c: 161: SSPBUF = Data;
  4178  07C0  0828               	movf	sendByte@Data^(0+384),w
  4179  07C1  0024               	movlb	4	; select bank4
  4180  07C2  0091               	movwf	17	;volatile
  4181                           
  4182                           ;SPI_Service.c: 162: } else {
  4183  07C3  0008               	return
  4184  07C4                     l3172:	
  4185                           
  4186                           ;SPI_Service.c: 165: ES_Event ThisEvent;
  4187                           ;SPI_Service.c: 166: ThisEvent.EventType = BUF_NOT_READY;
  4188  07C4  3009               	movlw	9
  4189  07C5  0023               	movlb	3	; select bank3
  4190  07C6  00A3               	movwf	??_sendByte^(0+384)
  4191  07C7  0823               	movf	??_sendByte^(0+384),w
  4192  07C8  00A5               	movwf	sendByte@ThisEvent^(0+384)
  4193                           
  4194                           ;SPI_Service.c: 167: PostSPI_Service(ThisEvent);
  4195  07C9  0825               	movf	sendByte@ThisEvent^(0+384),w
  4196  07CA  00A0               	movwf	PostSPI_Service@ThisEvent^(0+384)
  4197  07CB  0826               	movf	(sendByte@ThisEvent+1)^(0+384),w
  4198  07CC  00A1               	movwf	(PostSPI_Service@ThisEvent+1)^(0+384)
  4199  07CD  0827               	movf	(sendByte@ThisEvent+2)^(0+384),w
  4200  07CE  00A2               	movwf	(PostSPI_Service@ThisEvent+2)^(0+384)
  4201  07CF  318F  2702         	fcall	_PostSPI_Service
  4202  07D1  0008               	return
  4203  07D2                     __end_of_sendByte:	
  4204                           
  4205                           	psect	text12
  4206  01BB                     __ptext12:	
  4207 ;; *************** function _ES_DeQueue *****************
  4208 ;; Defined at:
  4209 ;;		line 164 in file "ES_Queue.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  pBlock          2   13[BANK1 ] PTR struct ES_Event_t
  4212 ;;		 -> Queue1(12), Queue0(18), 
  4213 ;;  pReturnEvent    1   15[BANK1 ] PTR struct ES_Event_t
  4214 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  pThisQueue      2    2[BANK2 ] PTR struct .
  4217 ;;		 -> Queue1(12), Queue0(18), 
  4218 ;;  NumLeft         1    1[BANK2 ] unsigned char 
  4219 ;;  SaveCrit        1    0[BANK2 ] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      unsigned char 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4229 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Totals:         0       0       7       4       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;Total ram usage:       11 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    7
  4236 ;; This function calls:
  4237 ;;		___lbmod
  4238 ;;		___wmul
  4239 ;; This function is called by:
  4240 ;;		_ES_Run
  4241 ;;		_ES_RecallEvents
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _ES_DeQueue
  4247  01BB                     _ES_DeQueue:	
  4248                           
  4249                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  4250                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  4251                           ;ES_Queue.c: 168: uint8_t NumLeft;
  4252                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _ES_DeQueue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4256  01BB  0021               	movlb	1	; select bank1
  4257  01BC  0867               	movf	(ES_DeQueue@pBlock+1)^(0+128),w
  4258  01BD  0022               	movlb	2	; select bank2
  4259  01BE  00E9               	movwf	(ES_DeQueue@pThisQueue+1)^(0+256)
  4260  01BF  0021               	movlb	1	; select bank1
  4261  01C0  0866               	movf	ES_DeQueue@pBlock^(0+128),w
  4262  01C1  0022               	movlb	2	; select bank2
  4263  01C2  00E8               	movwf	ES_DeQueue@pThisQueue^(0+256)
  4264                           
  4265                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  4266  01C3  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4267  01C4  0086               	movwf	6
  4268  01C5  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4269  01C6  0087               	movwf	7
  4270  01C7  3142               	addfsr 1,2
  4271  01C8  0801               	movf	1,w
  4272  01C9  1903               	btfsc	3,2
  4273  01CA  2A4B               	goto	l3274
  4274                           
  4275                           ;ES_Queue.c: 172: {
  4276                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4277  01CB  080B               	movf	11,w	;volatile
  4278  01CC  0021               	movlb	1	; select bank1
  4279  01CD  00E9               	movwf	??_ES_DeQueue^(0+128)
  4280  01CE  0869               	movf	??_ES_DeQueue^(0+128),w
  4281  01CF  0022               	movlb	2	; select bank2
  4282  01D0  00E6               	movwf	ES_DeQueue@SaveCrit^(0+256)
  4283  01D1  138B               	bcf	11,7	;volatile
  4284                           
  4285                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  4286  01D2  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4287  01D3  0086               	movwf	6
  4288  01D4  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4289  01D5  0087               	movwf	7
  4290  01D6  3141               	addfsr 1,1
  4291  01D7  0801               	movf	1,w
  4292  01D8  3E01               	addlw	1
  4293  01D9  0021               	movlb	1	; select bank1
  4294  01DA  00E0               	movwf	___wmul@multiplier^(0+128)
  4295  01DB  3000               	movlw	0
  4296  01DC  1803               	skipnc
  4297  01DD  3001               	movlw	1
  4298  01DE  00E1               	movwf	(___wmul@multiplier^(0+128)+1)
  4299  01DF  3003               	movlw	3
  4300  01E0  00E2               	movwf	___wmul@multiplicand^(0+128)
  4301  01E1  3000               	movlw	0
  4302  01E2  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  4303  01E3  318F  2766  3181   	fcall	___wmul
  4304  01E6  0021               	movlb	1	; select bank1
  4305  01E7  0860               	movf	?___wmul^(0+128),w
  4306  01E8  0766               	addwf	ES_DeQueue@pBlock^(0+128),w
  4307  01E9  0086               	movwf	6
  4308  01EA  0861               	movf	(?___wmul+1)^(0+128),w
  4309  01EB  3D67               	addwfc	(ES_DeQueue@pBlock+1)^(0+128),w
  4310  01EC  0087               	movwf	7
  4311  01ED  3F40               	moviw [0]fsr1
  4312  01EE  00E9               	movwf	??_ES_DeQueue^(0+128)
  4313  01EF  3F41               	moviw [1]fsr1
  4314  01F0  00EA               	movwf	(??_ES_DeQueue^(0+128)+1)
  4315  01F1  3F42               	moviw [2]fsr1
  4316  01F2  00EB               	movwf	(??_ES_DeQueue^(0+128)+2)
  4317  01F3  0868               	movf	ES_DeQueue@pReturnEvent^(0+128),w
  4318  01F4  0086               	movwf	6
  4319  01F5  0187               	clrf	7
  4320  01F6  0869               	movf	??_ES_DeQueue^(0+128),w
  4321  01F7  3FC0               	movwi [0]fsr1
  4322  01F8  086A               	movf	(??_ES_DeQueue+1)^(0+128),w
  4323  01F9  3FC1               	movwi [1]fsr1
  4324  01FA  086B               	movf	(??_ES_DeQueue+2)^(0+128),w
  4325  01FB  3FC2               	movwi [2]fsr1
  4326                           
  4327                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  4328  01FC  3001               	movlw	1
  4329  01FD  00E9               	movwf	??_ES_DeQueue^(0+128)
  4330  01FE  0022               	movlb	2	; select bank2
  4331  01FF  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4332  0200  0086               	movwf	6
  4333  0201  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4334  0202  0087               	movwf	7
  4335  0203  3141               	addfsr 1,1
  4336  0204  0021               	movlb	1	; select bank1
  4337  0205  0869               	movf	??_ES_DeQueue^(0+128),w
  4338  0206  0781               	addwf	1,f
  4339                           
  4340                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  4341  0207  0022               	movlb	2	; select bank2
  4342  0208  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4343  0209  0086               	movwf	6
  4344  020A  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4345  020B  0087               	movwf	7
  4346  020C  3141               	addfsr 1,1
  4347  020D  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4348  020E  0084               	movwf	4
  4349  020F  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4350  0210  0085               	movwf	5
  4351  0211  0800               	movf	0,w
  4352  0212  0201               	subwf	1,w
  4353  0213  1C03               	skipc
  4354  0214  2A3A               	goto	l3270
  4355                           
  4356                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  4357  0215  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4358  0216  0086               	movwf	6
  4359  0217  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4360  0218  0087               	movwf	7
  4361  0219  0801               	movf	1,w
  4362  021A  0021               	movlb	1	; select bank1
  4363  021B  00E9               	movwf	??_ES_DeQueue^(0+128)
  4364  021C  0869               	movf	??_ES_DeQueue^(0+128),w
  4365  021D  00D9               	movwf	___lbmod@divisor^(0+128)
  4366  021E  0022               	movlb	2	; select bank2
  4367  021F  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4368  0220  0086               	movwf	6
  4369  0221  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4370  0222  0087               	movwf	7
  4371  0223  3141               	addfsr 1,1
  4372  0224  0801               	movf	1,w
  4373  0225  318F  27BE  3181   	fcall	___lbmod
  4374  0228  0021               	movlb	1	; select bank1
  4375  0229  00EA               	movwf	(??_ES_DeQueue+1)^(0+128)
  4376  022A  0022               	movlb	2	; select bank2
  4377  022B  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4378  022C  3E01               	addlw	1
  4379  022D  0021               	movlb	1	; select bank1
  4380  022E  00EB               	movwf	(??_ES_DeQueue+2)^(0+128)
  4381  022F  3000               	movlw	0
  4382  0230  0022               	movlb	2	; select bank2
  4383  0231  3D69               	addwfc	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4384  0232  0021               	movlb	1	; select bank1
  4385  0233  00EC               	movwf	(??_ES_DeQueue+3)^(0+128)
  4386  0234  086B               	movf	(??_ES_DeQueue+2)^(0+128),w
  4387  0235  0086               	movwf	6
  4388  0236  086C               	movf	(??_ES_DeQueue+3)^(0+128),w
  4389  0237  0087               	movwf	7
  4390  0238  086A               	movf	(??_ES_DeQueue+1)^(0+128),w
  4391  0239  0081               	movwf	1
  4392  023A                     l3270:	
  4393                           
  4394                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  4395  023A  0022               	movlb	2	; select bank2
  4396  023B  0868               	movf	ES_DeQueue@pThisQueue^(0+256),w
  4397  023C  0086               	movwf	6
  4398  023D  0869               	movf	(ES_DeQueue@pThisQueue+1)^(0+256),w
  4399  023E  0087               	movwf	7
  4400  023F  3142               	addfsr 1,2
  4401  0240  3F40               	moviw [0]fsr1
  4402  0241  0309               	decf	9,w
  4403  0242  3FC0               	movwi [0]fsr1
  4404  0243  0021               	movlb	1	; select bank1
  4405  0244  00E9               	movwf	??_ES_DeQueue^(0+128)
  4406  0245  0869               	movf	??_ES_DeQueue^(0+128),w
  4407  0246  0022               	movlb	2	; select bank2
  4408  0247  00E7               	movwf	ES_DeQueue@NumLeft^(0+256)
  4409                           
  4410                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  4411  0248  0866               	movf	ES_DeQueue@SaveCrit^(0+256),w
  4412  0249  008B               	movwf	11	;volatile
  4413                           
  4414                           ;ES_Queue.c: 183: }else {
  4415  024A  2A58               	goto	l3278
  4416  024B                     l3274:	
  4417                           
  4418                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  4419  024B  0021               	movlb	1	; select bank1
  4420  024C  0868               	movf	ES_DeQueue@pReturnEvent^(0+128),w
  4421  024D  0086               	movwf	6
  4422  024E  0187               	clrf	7
  4423  024F  0181               	clrf	1
  4424                           
  4425                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  4426  0250  0A68               	incf	ES_DeQueue@pReturnEvent^(0+128),w
  4427  0251  0086               	movwf	6
  4428  0252  0187               	clrf	7
  4429  0253  3000               	movlw	0
  4430  0254  3FC0               	movwi [0]fsr1
  4431  0255  3FC1               	movwi [1]fsr1
  4432                           
  4433                           ;ES_Queue.c: 186: NumLeft = 0;
  4434  0256  0022               	movlb	2	; select bank2
  4435  0257  01E7               	clrf	ES_DeQueue@NumLeft^(0+256)
  4436  0258                     l3278:	
  4437                           
  4438                           ;ES_Queue.c: 187: }
  4439                           ;ES_Queue.c: 188: return NumLeft;
  4440  0258  0867               	movf	ES_DeQueue@NumLeft^(0+256),w
  4441  0259  0008               	return
  4442  025A                     __end_of_ES_DeQueue:	
  4443                           
  4444                           	psect	text13
  4445  0FBE                     __ptext13:	
  4446 ;; *************** function ___lbmod *****************
  4447 ;; Defined at:
  4448 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  dividend        1    wreg     unsigned char 
  4451 ;;  divisor         1    0[BANK1 ] unsigned char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  dividend        1    3[BANK1 ] unsigned char 
  4454 ;;  rem             1    5[BANK1 ] unsigned char 
  4455 ;;  counter         1    4[BANK1 ] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      unsigned char 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4465 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;Total ram usage:        6 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    6
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_ES_DeQueue
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function ___lbmod
  4481  0FBE                     ___lbmod:	
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4485                           ;___lbmod@dividend stored from wreg
  4486  0FBE  0021               	movlb	1	; select bank1
  4487  0FBF  00DC               	movwf	___lbmod@dividend^(0+128)
  4488  0FC0  3008               	movlw	8
  4489  0FC1  00DA               	movwf	??___lbmod^(0+128)
  4490  0FC2  085A               	movf	??___lbmod^(0+128),w
  4491  0FC3  00DD               	movwf	___lbmod@counter^(0+128)
  4492  0FC4  01DE               	clrf	___lbmod@rem^(0+128)
  4493  0FC5                     l3204:	
  4494  0FC5  085C               	movf	___lbmod@dividend^(0+128),w
  4495  0FC6  00DA               	movwf	??___lbmod^(0+128)
  4496  0FC7  3007               	movlw	7
  4497  0FC8                     u3165:	
  4498  0FC8  36DA               	lsrf	??___lbmod^(0+128),f
  4499  0FC9  0B89               	decfsz	9,f
  4500  0FCA  2FC8               	goto	u3165
  4501  0FCB  355E               	lslf	___lbmod@rem^(0+128),w
  4502  0FCC  045A               	iorwf	??___lbmod^(0+128),w
  4503  0FCD  00DB               	movwf	(??___lbmod+1)^(0+128)
  4504  0FCE  085B               	movf	(??___lbmod+1)^(0+128),w
  4505  0FCF  00DE               	movwf	___lbmod@rem^(0+128)
  4506  0FD0  1003               	clrc
  4507  0FD1  0DDC               	rlf	___lbmod@dividend^(0+128),f
  4508  0FD2  0859               	movf	___lbmod@divisor^(0+128),w
  4509  0FD3  025E               	subwf	___lbmod@rem^(0+128),w
  4510  0FD4  1C03               	skipc
  4511  0FD5  2FD8               	goto	l812
  4512  0FD6  0859               	movf	___lbmod@divisor^(0+128),w
  4513  0FD7  02DE               	subwf	___lbmod@rem^(0+128),f
  4514  0FD8                     l812:	
  4515  0FD8  3001               	movlw	1
  4516  0FD9  02DD               	subwf	___lbmod@counter^(0+128),f
  4517  0FDA  1D03               	btfss	3,2
  4518  0FDB  2FC5               	goto	l3204
  4519  0FDC  085E               	movf	___lbmod@rem^(0+128),w
  4520  0FDD  0008               	return
  4521  0FDE                     __end_of___lbmod:	
  4522                           
  4523                           	psect	text14
  4524  0F9F                     __ptext14:	
  4525 ;; *************** function _ES_CheckUserEvents *****************
  4526 ;; Defined at:
  4527 ;;		line 46 in file "ES_CheckEvents.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  i               1   11[BANK3 ] unsigned char 
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      unsigned char 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4545 ;;Total ram usage:        3 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:   11
  4548 ;; This function calls:
  4549 ;;		_Check4Keystroke
  4550 ;;		_CheckButtonEvents
  4551 ;; This function is called by:
  4552 ;;		_ES_Run
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _ES_CheckUserEvents
  4558  0F9F                     _ES_CheckUserEvents:	
  4559                           
  4560                           ;ES_CheckEvents.c: 48: uint8_t i;
  4561                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _ES_CheckUserEvents: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4565  0F9F  0023               	movlb	3	; select bank3
  4566  0FA0  01AB               	clrf	ES_CheckUserEvents@i^(0+384)
  4567  0FA1                     L3:	
  4568  0FA1  3002               	movlw	2
  4569  0FA2  022B               	subwf	ES_CheckUserEvents@i^(0+384),w
  4570  0FA3  1803               	btfsc	3,0
  4571  0FA4  0008               	return
  4572                           
  4573                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  4574  0FA5  082B               	movf	ES_CheckUserEvents@i^(0+384),w
  4575  0FA6  00A9               	movwf	??_ES_CheckUserEvents^(0+384)
  4576  0FA7  01AA               	clrf	(??_ES_CheckUserEvents^(0+384)+1)
  4577  0FA8  35A9               	lslf	??_ES_CheckUserEvents^(0+384),f
  4578  0FA9  0DAA               	rlf	(??_ES_CheckUserEvents^(0+384)+1),f
  4579  0FAA  30AE               	movlw	low (_ES_EventList| (0+32768))
  4580  0FAB  0729               	addwf	??_ES_CheckUserEvents^(0+384),w
  4581  0FAC  0084               	movwf	4
  4582  0FAD  3080               	movlw	high (_ES_EventList| (0+32768))
  4583  0FAE  3D2A               	addwfc	(??_ES_CheckUserEvents+1)^(0+384),w
  4584  0FAF  0085               	movwf	5
  4585  0FB0  3F01               	moviw [1]fsr0
  4586  0FB1  008A               	movwf	10
  4587  0FB2  3F00               	moviw [0]fsr0
  4588  0FB3  000A               	callw
  4589  0FB4  318F               	pagesel	$
  4590  0FB5  3A01               	xorlw	1
  4591  0FB6  1903               	btfsc	3,2
  4592  0FB7  0008               	return
  4593                           
  4594                           ;ES_CheckEvents.c: 52: break;
  4595  0FB8  3001               	movlw	1
  4596  0FB9  0023               	movlb	3	; select bank3
  4597  0FBA  00A9               	movwf	??_ES_CheckUserEvents^(0+384)
  4598  0FBB  0829               	movf	??_ES_CheckUserEvents^(0+384),w
  4599  0FBC  07AB               	addwf	ES_CheckUserEvents@i^(0+384),f
  4600  0FBD  2FA1               	goto	L3
  4601  0FBE                     __end_of_ES_CheckUserEvents:	
  4602                           ;ES_CheckEvents.c: 56: else
  4603                           ;ES_CheckEvents.c: 57: return(1);
  4604                           ;	Return value of _ES_CheckUserEvents is never used
  4605                           
  4606                           ;ES_CheckEvents.c: 55: return (0);
  4607                           ;	Return value of _ES_CheckUserEvents is never used
  4608                           
  4609                           
  4610                           	psect	text15
  4611  0002                     __ptext15:	
  4612 ;; *************** function _Check4Keystroke *****************
  4613 ;; Defined at:
  4614 ;;		line 108 in file "EventCheckers.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      unsigned char 
  4621 ;; Registers used:
  4622 ;;		wreg
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;Total ram usage:        0 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    6
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_ES_CheckUserEvents
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _Check4Keystroke
  4644  0002                     _Check4Keystroke:	
  4645                           
  4646                           ;EventCheckers.c: 124: return 0;
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _Check4Keystroke: [wreg]
  4650  0002  3000               	movlw	0
  4651  0003  0008               	return
  4652  0004                     __end_of_Check4Keystroke:	
  4653                           
  4654                           	psect	text16
  4655  0780                     __ptext16:	
  4656 ;; *************** function _CheckButtonEvents *****************
  4657 ;; Defined at:
  4658 ;;		line 59 in file "Button.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  ThisEvent       3    5[BANK3 ] struct ES_Event_t
  4663 ;;  CurrentButto    1    8[BANK3 ] unsigned char 
  4664 ;;  ReturnVal       1    4[BANK3 ] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      unsigned char 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  4678 ;;Total ram usage:        6 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:   10
  4681 ;; This function calls:
  4682 ;;		_GetInputLine
  4683 ;;		_PostButtonDebounceSM
  4684 ;; This function is called by:
  4685 ;;		_ES_CheckUserEvents
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _CheckButtonEvents
  4691  0780                     _CheckButtonEvents:	
  4692                           
  4693                           ;Button.c: 61: uint8_t CurrentButtonState;
  4694                           ;Button.c: 62: bool ReturnVal = 0;
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _CheckButtonEvents: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4698  0780  0023               	movlb	3	; select bank3
  4699  0781  01A4               	clrf	CheckButtonEvents@ReturnVal^(0+384)
  4700                           
  4701                           ;Button.c: 64: CurrentButtonState = GetInputLine();
  4702  0782  318E  268B  3187   	fcall	_GetInputLine
  4703  0785  0023               	movlb	3	; select bank3
  4704  0786  00A3               	movwf	??_CheckButtonEvents^(0+384)
  4705  0787  0823               	movf	??_CheckButtonEvents^(0+384),w
  4706  0788  00A8               	movwf	CheckButtonEvents@CurrentButtonState^(0+384)
  4707                           
  4708                           ;Button.c: 66: if (CurrentButtonState != LastButtonState) {
  4709  0789  0828               	movf	CheckButtonEvents@CurrentButtonState^(0+384),w
  4710  078A  0021               	movlb	1	; select bank1
  4711  078B  0648               	xorwf	_LastButtonState^(0+128),w
  4712  078C  1903               	skipnz
  4713  078D  2FA3               	goto	l3194
  4714                           
  4715                           ;Button.c: 68: ReturnVal = 1;
  4716  078E  0023               	movlb	3	; select bank3
  4717  078F  01A4               	clrf	CheckButtonEvents@ReturnVal^(0+384)
  4718  0790  0AA4               	incf	CheckButtonEvents@ReturnVal^(0+384),f
  4719                           
  4720                           ;Button.c: 69: ES_Event ThisEvent;
  4721                           ;Button.c: 71: if (CurrentButtonState != 1) {
  4722  0791  0328               	decf	CheckButtonEvents@CurrentButtonState^(0+384),w
  4723  0792  1903               	btfsc	3,2
  4724  0793  2F96               	goto	l3190
  4725                           
  4726                           ;Button.c: 73: ThisEvent.EventType = DBButtonDown;
  4727  0794  3007               	movlw	7
  4728  0795  2F98               	goto	L4
  4729  0796                     l3190:	
  4730                           ;Button.c: 76: } else {
  4731                           
  4732                           ;Button.c: 74: PostButtonDebounceSM(ThisEvent);
  4733                           
  4734                           
  4735                           ;Button.c: 78: ThisEvent.EventType = DBButtonUp;
  4736  0796  3006               	movlw	6
  4737  0797  0023               	movlb	3	; select bank3
  4738  0798                     L4:	
  4739  0798  00A3               	movwf	??_CheckButtonEvents^(0+384)
  4740  0799  0823               	movf	??_CheckButtonEvents^(0+384),w
  4741  079A  00A5               	movwf	CheckButtonEvents@ThisEvent^(0+384)
  4742                           
  4743                           ;Button.c: 79: PostButtonDebounceSM(ThisEvent);
  4744  079B  0825               	movf	CheckButtonEvents@ThisEvent^(0+384),w
  4745  079C  00A0               	movwf	PostButtonDebounceSM@ThisEvent^(0+384)
  4746  079D  0826               	movf	(CheckButtonEvents@ThisEvent+1)^(0+384),w
  4747  079E  00A1               	movwf	(PostButtonDebounceSM@ThisEvent+1)^(0+384)
  4748  079F  0827               	movf	(CheckButtonEvents@ThisEvent+2)^(0+384),w
  4749  07A0  00A2               	movwf	(PostButtonDebounceSM@ThisEvent+2)^(0+384)
  4750  07A1  318E  26CC         	fcall	_PostButtonDebounceSM
  4751  07A3                     l3194:	
  4752                           
  4753                           ;Button.c: 80: }
  4754                           ;Button.c: 81: }
  4755                           ;Button.c: 83: LastButtonState = CurrentButtonState;
  4756  07A3  0023               	movlb	3	; select bank3
  4757  07A4  0828               	movf	CheckButtonEvents@CurrentButtonState^(0+384),w
  4758  07A5  00A3               	movwf	??_CheckButtonEvents^(0+384)
  4759  07A6  0823               	movf	??_CheckButtonEvents^(0+384),w
  4760  07A7  0021               	movlb	1	; select bank1
  4761  07A8  00C8               	movwf	_LastButtonState^(0+128)
  4762                           
  4763                           ;Button.c: 85: return ReturnVal;
  4764  07A9  0023               	movlb	3	; select bank3
  4765  07AA  0824               	movf	CheckButtonEvents@ReturnVal^(0+384),w
  4766  07AB  0008               	return
  4767  07AC                     __end_of_CheckButtonEvents:	
  4768                           
  4769                           	psect	text17
  4770  0ECC                     __ptext17:	
  4771 ;; *************** function _PostButtonDebounceSM *****************
  4772 ;; Defined at:
  4773 ;;		line 89 in file "Button.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  ThisEvent       3    0[BANK3 ] struct ES_Event_t
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      unsigned char 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4787 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4791 ;;Total ram usage:        3 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    9
  4794 ;; This function calls:
  4795 ;;		_ES_PostToService
  4796 ;; This function is called by:
  4797 ;;		_CheckButtonEvents
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _PostButtonDebounceSM
  4803  0ECC                     _PostButtonDebounceSM:	
  4804                           
  4805                           ;Button.c: 92: return ES_PostToService(MyPriority, ThisEvent);
  4806                           ;	Return value of _PostButtonDebounceSM is never used
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _PostButtonDebounceSM: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4810  0ECC  0023               	movlb	3	; select bank3
  4811  0ECD  0820               	movf	PostButtonDebounceSM@ThisEvent^(0+384),w
  4812  0ECE  0022               	movlb	2	; select bank2
  4813  0ECF  00E6               	movwf	ES_PostToService@TheEvent^(0+256)
  4814  0ED0  0023               	movlb	3	; select bank3
  4815  0ED1  0821               	movf	(PostButtonDebounceSM@ThisEvent+1)^(0+384),w
  4816  0ED2  0022               	movlb	2	; select bank2
  4817  0ED3  00E7               	movwf	(ES_PostToService@TheEvent+1)^(0+256)
  4818  0ED4  0023               	movlb	3	; select bank3
  4819  0ED5  0822               	movf	(PostButtonDebounceSM@ThisEvent+2)^(0+384),w
  4820  0ED6  0022               	movlb	2	; select bank2
  4821  0ED7  00E8               	movwf	(ES_PostToService@TheEvent+2)^(0+256)
  4822  0ED8  0020               	movlb	0	; select bank0
  4823  0ED9  084C               	movf	Button@MyPriority,w
  4824  0EDA  3185  254D         	fcall	_ES_PostToService
  4825  0EDC  0008               	return
  4826  0EDD                     __end_of_PostButtonDebounceSM:	
  4827                           
  4828                           	psect	text18
  4829  0E8B                     __ptext18:	
  4830 ;; *************** function _GetInputLine *****************
  4831 ;; Defined at:
  4832 ;;		line 37 in file "Button.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      unsigned char 
  4839 ;; Registers used:
  4840 ;;		wreg
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    6
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_CheckButtonEvents
  4857 ;;		_InitializeButtonDebounce
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _GetInputLine
  4863  0E8B                     _GetInputLine:	
  4864                           
  4865                           ;Button.c: 39: return RA2;
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _GetInputLine: [wreg]
  4869  0E8B  3000               	movlw	0
  4870  0E8C  0020               	movlb	0	; select bank0
  4871  0E8D  190C               	btfsc	12,2	;volatile
  4872  0E8E  3001               	movlw	1
  4873  0E8F  0008               	return
  4874  0E90                     __end_of_GetInputLine:	
  4875                           
  4876                           	psect	text19
  4877  010D                     __ptext19:	
  4878 ;; *************** function _ES_Initialize *****************
  4879 ;; Defined at:
  4880 ;;		line 242 in file "ES_Framework.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  NewRate         2    5[BANK3 ] enum E1911
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  i               1   15[BANK3 ] unsigned char 
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  1    wreg      enum E1982
  4887 ;; Registers used:
  4888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4894 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4895 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Totals:         0       0       0       0      11       0       0       0       0       0       0       0       
      +0       0
  4898 ;;Total ram usage:       11 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:   10
  4901 ;; This function calls:
  4902 ;;		_ES_InitQueue
  4903 ;;		_ES_Timer_Init
  4904 ;;		_InitSPI_Service
  4905 ;;		_InitToggleService
  4906 ;;		___wmul
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _ES_Initialize
  4914  010D                     _ES_Initialize:	
  4915                           
  4916                           ;ES_Framework.c: 243: uint8_t i;
  4917                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in _ES_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4921  010D  0023               	movlb	3	; select bank3
  4922  010E  0826               	movf	(ES_Initialize@NewRate+1)^(0+384),w
  4923  010F  0021               	movlb	1	; select bank1
  4924  0110  00DC               	movwf	(ES_Timer_Init@Rate+1)^(0+128)
  4925  0111  0023               	movlb	3	; select bank3
  4926  0112  0825               	movf	ES_Initialize@NewRate^(0+384),w
  4927  0113  0021               	movlb	1	; select bank1
  4928  0114  00DB               	movwf	ES_Timer_Init@Rate^(0+128)
  4929  0115  3187  27F7  3181   	fcall	_ES_Timer_Init
  4930                           
  4931                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4932  0118  0023               	movlb	3	; select bank3
  4933  0119  01AF               	clrf	ES_Initialize@i^(0+384)
  4934  011A  3002               	movlw	2
  4935  011B  022F               	subwf	ES_Initialize@i^(0+384),w
  4936  011C  1803               	btfsc	3,0
  4937  011D  29B9               	goto	l3470
  4938  011E                     l3452:	
  4939                           
  4940                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4941                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4942  011E  082F               	movf	ES_Initialize@i^(0+384),w
  4943  011F  00A7               	movwf	??_ES_Initialize^(0+384)
  4944  0120  01A8               	clrf	(??_ES_Initialize^(0+384)+1)
  4945  0121  35A7               	lslf	??_ES_Initialize^(0+384),f
  4946  0122  0DA8               	rlf	(??_ES_Initialize^(0+384)+1),f
  4947  0123  35A7               	lslf	??_ES_Initialize^(0+384),f
  4948  0124  0DA8               	rlf	(??_ES_Initialize^(0+384)+1),f
  4949  0125  30A0               	movlw	low (_ServDescList| (0+32768))
  4950  0126  0727               	addwf	??_ES_Initialize^(0+384),w
  4951  0127  0084               	movwf	4
  4952  0128  3080               	movlw	high (_ServDescList| (0+32768))
  4953  0129  3D28               	addwfc	(??_ES_Initialize+1)^(0+384),w
  4954  012A  0085               	movwf	5
  4955  012B  0012               	moviw fsr0++
  4956  012C  00A9               	movwf	(??_ES_Initialize+2)^(0+384)
  4957  012D  0012               	moviw fsr0++
  4958  012E  04A9               	iorwf	(??_ES_Initialize+2)^(0+384),f
  4959  012F  1903               	btfsc	3,2
  4960  0130  294A               	goto	l3456
  4961  0131  082F               	movf	ES_Initialize@i^(0+384),w
  4962  0132  00A7               	movwf	??_ES_Initialize^(0+384)
  4963  0133  01A8               	clrf	(??_ES_Initialize^(0+384)+1)
  4964  0134  35A7               	lslf	??_ES_Initialize^(0+384),f
  4965  0135  0DA8               	rlf	(??_ES_Initialize^(0+384)+1),f
  4966  0136  35A7               	lslf	??_ES_Initialize^(0+384),f
  4967  0137  0DA8               	rlf	(??_ES_Initialize^(0+384)+1),f
  4968  0138  0827               	movf	??_ES_Initialize^(0+384),w
  4969  0139  3E02               	addlw	2
  4970  013A  00A9               	movwf	(??_ES_Initialize+2)^(0+384)
  4971  013B  3000               	movlw	0
  4972  013C  3D28               	addwfc	(??_ES_Initialize+1)^(0+384),w
  4973  013D  00AA               	movwf	(??_ES_Initialize+3)^(0+384)
  4974  013E  30A0               	movlw	low (_ServDescList| (0+32768))
  4975  013F  0729               	addwf	(??_ES_Initialize+2)^(0+384),w
  4976  0140  0084               	movwf	4
  4977  0141  3080               	movlw	high (_ServDescList| (0+32768))
  4978  0142  3D2A               	addwfc	(??_ES_Initialize+3)^(0+384),w
  4979  0143  0085               	movwf	5
  4980  0144  0012               	moviw fsr0++
  4981  0145  00AB               	movwf	(??_ES_Initialize+4)^(0+384)
  4982  0146  0012               	moviw fsr0++
  4983  0147  04AB               	iorwf	(??_ES_Initialize+4)^(0+384),f
  4984  0148  1D03               	btfss	3,2
  4985  0149  294C               	goto	l3460
  4986  014A                     l3456:	
  4987                           
  4988                           ;ES_Framework.c: 249: return FailedPointer;
  4989  014A  3003               	movlw	3
  4990  014B  0008               	return
  4991  014C                     l3460:	
  4992                           
  4993                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4994  014C  082F               	movf	ES_Initialize@i^(0+384),w
  4995  014D  00A7               	movwf	??_ES_Initialize^(0+384)
  4996  014E  01A8               	clrf	(??_ES_Initialize^(0+384)+1)
  4997  014F  0827               	movf	??_ES_Initialize^(0+384),w
  4998  0150  0021               	movlb	1	; select bank1
  4999  0151  00E0               	movwf	___wmul@multiplier^(0+128)
  5000  0152  0023               	movlb	3	; select bank3
  5001  0153  0828               	movf	(??_ES_Initialize+1)^(0+384),w
  5002  0154  0021               	movlb	1	; select bank1
  5003  0155  00E1               	movwf	(___wmul@multiplier+1)^(0+128)
  5004  0156  3003               	movlw	3
  5005  0157  00E2               	movwf	___wmul@multiplicand^(0+128)
  5006  0158  3000               	movlw	0
  5007  0159  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  5008  015A  318F  2766  3181   	fcall	___wmul
  5009  015D  0021               	movlb	1	; select bank1
  5010  015E  0861               	movf	(?___wmul+1)^(0+128),w
  5011  015F  0085               	movwf	5
  5012  0160  0860               	movf	?___wmul^(0+128),w
  5013  0161  0084               	movwf	4
  5014  0162  30A8               	movlw	low (_EventQueues| (0+32768))
  5015  0163  0784               	addwf	4,f
  5016  0164  3080               	movlw	high (_EventQueues| (0+32768))
  5017  0165  3D85               	addwfc	5,f
  5018  0166  3F00               	moviw [0]fsr0
  5019  0167  00E6               	movwf	ES_InitQueue@pBlock^(0+128)
  5020  0168  3F01               	moviw [1]fsr0
  5021  0169  00E7               	movwf	(ES_InitQueue@pBlock+1)^(0+128)
  5022  016A  0023               	movlb	3	; select bank3
  5023  016B  082F               	movf	ES_Initialize@i^(0+384),w
  5024  016C  00AA               	movwf	(??_ES_Initialize+3)^(0+384)
  5025  016D  01AB               	clrf	((??_ES_Initialize+3)^(0+384)+1)
  5026  016E  082A               	movf	(??_ES_Initialize+3)^(0+384),w
  5027  016F  0021               	movlb	1	; select bank1
  5028  0170  00E0               	movwf	___wmul@multiplier^(0+128)
  5029  0171  0023               	movlb	3	; select bank3
  5030  0172  082B               	movf	(??_ES_Initialize+4)^(0+384),w
  5031  0173  0021               	movlb	1	; select bank1
  5032  0174  00E1               	movwf	(___wmul@multiplier+1)^(0+128)
  5033  0175  3003               	movlw	3
  5034  0176  00E2               	movwf	___wmul@multiplicand^(0+128)
  5035  0177  3000               	movlw	0
  5036  0178  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  5037  0179  318F  2766  3181   	fcall	___wmul
  5038  017C  0021               	movlb	1	; select bank1
  5039  017D  0860               	movf	?___wmul^(0+128),w
  5040  017E  3E02               	addlw	2
  5041  017F  0023               	movlb	3	; select bank3
  5042  0180  00AC               	movwf	(??_ES_Initialize+5)^(0+384)
  5043  0181  3000               	movlw	0
  5044  0182  0021               	movlb	1	; select bank1
  5045  0183  3D61               	addwfc	(?___wmul+1)^(0+128),w
  5046  0184  0023               	movlb	3	; select bank3
  5047  0185  00AD               	movwf	(??_ES_Initialize+6)^(0+384)
  5048  0186  30A8               	movlw	low (_EventQueues| (0+32768))
  5049  0187  072C               	addwf	(??_ES_Initialize+5)^(0+384),w
  5050  0188  0084               	movwf	4
  5051  0189  3080               	movlw	high (_EventQueues| (0+32768))
  5052  018A  3D2D               	addwfc	(??_ES_Initialize+6)^(0+384),w
  5053  018B  0085               	movwf	5
  5054  018C  0800               	movf	0,w	;code access
  5055  018D  00AE               	movwf	(??_ES_Initialize+7)^(0+384)
  5056  018E  082E               	movf	(??_ES_Initialize+7)^(0+384),w
  5057  018F  0021               	movlb	1	; select bank1
  5058  0190  00E8               	movwf	ES_InitQueue@BlockSize^(0+128)
  5059  0191  318F  274B  3181   	fcall	_ES_InitQueue
  5060                           
  5061                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5062  0194  0023               	movlb	3	; select bank3
  5063  0195  082F               	movf	ES_Initialize@i^(0+384),w
  5064  0196  00A7               	movwf	??_ES_Initialize^(0+384)
  5065  0197  0827               	movf	??_ES_Initialize^(0+384),w
  5066  0198  00A0               	movwf	InitSPI_Service@Priority^(0+384)
  5067  0199  082F               	movf	ES_Initialize@i^(0+384),w
  5068  019A  00A8               	movwf	(??_ES_Initialize+1)^(0+384)
  5069  019B  01A9               	clrf	((??_ES_Initialize+1)^(0+384)+1)
  5070  019C  35A8               	lslf	(??_ES_Initialize+1)^(0+384),f
  5071  019D  0DA9               	rlf	((??_ES_Initialize+1)^(0+384)+1),f
  5072  019E  35A8               	lslf	(??_ES_Initialize+1)^(0+384),f
  5073  019F  0DA9               	rlf	((??_ES_Initialize+1)^(0+384)+1),f
  5074  01A0  30A0               	movlw	low (_ServDescList| (0+32768))
  5075  01A1  0728               	addwf	(??_ES_Initialize+1)^(0+384),w
  5076  01A2  0084               	movwf	4
  5077  01A3  3080               	movlw	high (_ServDescList| (0+32768))
  5078  01A4  3D29               	addwfc	(??_ES_Initialize+2)^(0+384),w
  5079  01A5  0085               	movwf	5
  5080  01A6  3F01               	moviw [1]fsr0
  5081  01A7  008A               	movwf	10
  5082  01A8  3F00               	moviw [0]fsr0
  5083  01A9  000A               	callw
  5084  01AA  3181               	pagesel	$
  5085  01AB  3A01               	xorlw	1
  5086  01AC  1903               	skipnz
  5087  01AD  29B0               	goto	l3466
  5088                           
  5089                           ;ES_Framework.c: 254: return FailedInit;
  5090  01AE  3005               	movlw	5
  5091  01AF  0008               	return
  5092  01B0                     l3466:	
  5093  01B0  3001               	movlw	1
  5094  01B1  0023               	movlb	3	; select bank3
  5095  01B2  00A7               	movwf	??_ES_Initialize^(0+384)
  5096  01B3  0827               	movf	??_ES_Initialize^(0+384),w
  5097  01B4  07AF               	addwf	ES_Initialize@i^(0+384),f
  5098  01B5  3002               	movlw	2
  5099  01B6  022F               	subwf	ES_Initialize@i^(0+384),w
  5100  01B7  1C03               	skipc
  5101  01B8  291E               	goto	l3452
  5102  01B9                     l3470:	
  5103                           
  5104                           ;ES_Framework.c: 255: }
  5105                           ;ES_Framework.c: 256: return Success;
  5106  01B9  3000               	movlw	0
  5107  01BA  0008               	return
  5108  01BB                     __end_of_ES_Initialize:	
  5109                           
  5110                           	psect	text20
  5111  07D2                     __ptext20:	
  5112 ;; *************** function _InitSPI_Service *****************
  5113 ;; Defined at:
  5114 ;;		line 58 in file "SPI_Service.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  Priority        1    0[BANK3 ] unsigned char 
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      unsigned char 
  5121 ;; Registers used:
  5122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5128 ;;      Params:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5132 ;;Total ram usage:        2 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    8
  5135 ;; This function calls:
  5136 ;;		_ES_Timer_InitTimer
  5137 ;;		_InitSPI
  5138 ;;		_SetBGR
  5139 ;; This function is called by:
  5140 ;;		_ES_Initialize
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _InitSPI_Service
  5146  07D2                     _InitSPI_Service:	
  5147                           
  5148                           ;SPI_Service.c: 61: MyPriority = Priority;
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _InitSPI_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5152  07D2  0023               	movlb	3	; select bank3
  5153  07D3  0820               	movf	InitSPI_Service@Priority^(0+384),w
  5154  07D4  00A1               	movwf	??_InitSPI_Service^(0+384)
  5155  07D5  0821               	movf	??_InitSPI_Service^(0+384),w
  5156  07D6  0020               	movlb	0	; select bank0
  5157  07D7  00CE               	movwf	SPI_Service@MyPriority
  5158                           
  5159                           ;SPI_Service.c: 62: FirstSend = 1;
  5160  07D8  0021               	movlb	1	; select bank1
  5161  07D9  01C6               	clrf	_FirstSend^(0+128)
  5162  07DA  0AC6               	incf	_FirstSend^(0+128),f
  5163                           
  5164                           ;SPI_Service.c: 63: LEDColor = 0;
  5165  07DB  01C7               	clrf	_LEDColor^(0+128)
  5166                           
  5167                           ;SPI_Service.c: 64: SetBGR(0x00, 0xFF, 0x00);
  5168  07DC  30FF               	movlw	255
  5169  07DD  0023               	movlb	3	; select bank3
  5170  07DE  00A1               	movwf	??_InitSPI_Service^(0+384)
  5171  07DF  0821               	movf	??_InitSPI_Service^(0+384),w
  5172  07E0  0021               	movlb	1	; select bank1
  5173  07E1  00D9               	movwf	SetBGR@G^(0+128)
  5174  07E2  01DA               	clrf	SetBGR@R^(0+128)
  5175  07E3  3000               	movlw	0
  5176  07E4  318E  26EE  3187   	fcall	_SetBGR
  5177                           
  5178                           ;SPI_Service.c: 65: CurrentState = Waiting2Send;
  5179  07E7  0021               	movlb	1	; select bank1
  5180  07E8  01C5               	clrf	SPI_Service@CurrentState^(0+128)
  5181  07E9  0AC5               	incf	SPI_Service@CurrentState^(0+128),f
  5182                           
  5183                           ;SPI_Service.c: 66: InitSPI();
  5184  07EA  318F  2717  3187   	fcall	_InitSPI
  5185                           
  5186                           ;SPI_Service.c: 67: ES_Timer_InitTimer(1, 50*3);
  5187  07ED  3096               	movlw	150
  5188  07EE  0021               	movlb	1	; select bank1
  5189  07EF  00D9               	movwf	ES_Timer_InitTimer@NewTime^(0+128)
  5190  07F0  3000               	movlw	0
  5191  07F1  00DA               	movwf	(ES_Timer_InitTimer@NewTime^(0+128)+1)
  5192  07F2  3001               	movlw	1
  5193  07F3  3187  2710         	fcall	_ES_Timer_InitTimer
  5194                           
  5195                           ;SPI_Service.c: 68: return 1;
  5196  07F5  3001               	movlw	1
  5197  07F6  0008               	return
  5198  07F7                     __end_of_InitSPI_Service:	
  5199                           
  5200                           	psect	text21
  5201  074A                     __ptext21:	
  5202 ;; *************** function _InitToggleService *****************
  5203 ;; Defined at:
  5204 ;;		line 62 in file "ToggleService.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  Priority        1    0[BANK3 ] unsigned char 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  ThisEvent       3    2[BANK3 ] struct ES_Event_t
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      unsigned char 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5218 ;;      Params:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  5222 ;;Total ram usage:        5 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    9
  5225 ;; This function calls:
  5226 ;;		_ES_PostToService
  5227 ;;		_ES_Timer_InitTimer
  5228 ;; This function is called by:
  5229 ;;		_ES_Initialize
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _InitToggleService
  5235  074A                     _InitToggleService:	
  5236                           
  5237                           ;ToggleService.c: 64: ES_Event ThisEvent;
  5238                           ;ToggleService.c: 66: MyPriority = Priority;
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _InitToggleService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5242  074A  0023               	movlb	3	; select bank3
  5243  074B  0820               	movf	InitToggleService@Priority^(0+384),w
  5244  074C  00A1               	movwf	??_InitToggleService^(0+384)
  5245  074D  0821               	movf	??_InitToggleService^(0+384),w
  5246  074E  0020               	movlb	0	; select bank0
  5247  074F  00D0               	movwf	ToggleService@MyPriority
  5248                           
  5249                           ;ToggleService.c: 70: PORTA = 0x00;
  5250  0750  018C               	clrf	12	;volatile
  5251                           
  5252                           ;ToggleService.c: 71: LATA = 0x00;
  5253  0751  0022               	movlb	2	; select bank2
  5254  0752  018C               	clrf	12	;volatile
  5255                           
  5256                           ;ToggleService.c: 72: ANSELA = 0x00;
  5257  0753  0023               	movlb	3	; select bank3
  5258  0754  018C               	clrf	12	;volatile
  5259                           
  5260                           ;ToggleService.c: 73: TRISA = 0b11111100;
  5261  0755  30FC               	movlw	252
  5262  0756  0021               	movlb	1	; select bank1
  5263  0757  008C               	movwf	12	;volatile
  5264                           
  5265                           ;ToggleService.c: 74: RA1 = 1;
  5266  0758  0020               	movlb	0	; select bank0
  5267  0759  148C               	bsf	12,1	;volatile
  5268                           
  5269                           ;ToggleService.c: 75: RA0 = 0;
  5270  075A  100C               	bcf	12,0	;volatile
  5271                           
  5272                           ;ToggleService.c: 76: ES_Timer_InitTimer(0,100);
  5273  075B  3064               	movlw	100
  5274  075C  0021               	movlb	1	; select bank1
  5275  075D  00D9               	movwf	ES_Timer_InitTimer@NewTime^(0+128)
  5276  075E  3000               	movlw	0
  5277  075F  00DA               	movwf	(ES_Timer_InitTimer@NewTime^(0+128)+1)
  5278  0760  3000               	movlw	0
  5279  0761  3187  2710  3187   	fcall	_ES_Timer_InitTimer
  5280                           
  5281                           ;ToggleService.c: 79: ThisEvent.EventType = ES_INIT;
  5282  0764  3002               	movlw	2
  5283  0765  0023               	movlb	3	; select bank3
  5284  0766  00A1               	movwf	??_InitToggleService^(0+384)
  5285  0767  0821               	movf	??_InitToggleService^(0+384),w
  5286  0768  00A2               	movwf	InitToggleService@ThisEvent^(0+384)
  5287                           
  5288                           ;ToggleService.c: 80: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5289  0769  0822               	movf	InitToggleService@ThisEvent^(0+384),w
  5290  076A  0022               	movlb	2	; select bank2
  5291  076B  00E6               	movwf	ES_PostToService@TheEvent^(0+256)
  5292  076C  0023               	movlb	3	; select bank3
  5293  076D  0823               	movf	(InitToggleService@ThisEvent+1)^(0+384),w
  5294  076E  0022               	movlb	2	; select bank2
  5295  076F  00E7               	movwf	(ES_PostToService@TheEvent+1)^(0+256)
  5296  0770  0023               	movlb	3	; select bank3
  5297  0771  0824               	movf	(InitToggleService@ThisEvent+2)^(0+384),w
  5298  0772  0022               	movlb	2	; select bank2
  5299  0773  00E8               	movwf	(ES_PostToService@TheEvent+2)^(0+256)
  5300  0774  0020               	movlb	0	; select bank0
  5301  0775  0850               	movf	ToggleService@MyPriority,w
  5302  0776  3185  254D  3187   	fcall	_ES_PostToService
  5303  0779  3A01               	xorlw	1
  5304  077A  1D03               	skipz
  5305  077B  2F7E               	goto	l3332
  5306                           
  5307                           ;ToggleService.c: 81: {
  5308                           ;ToggleService.c: 82: return 1;
  5309  077C  3001               	movlw	1
  5310                           
  5311                           ;ToggleService.c: 83: }else
  5312  077D  0008               	return
  5313  077E                     l3332:	
  5314                           
  5315                           ;ToggleService.c: 84: {
  5316                           ;ToggleService.c: 85: return 0;
  5317  077E  3000               	movlw	0
  5318  077F  0008               	return
  5319  0780                     __end_of_InitToggleService:	
  5320                           
  5321                           	psect	text22
  5322  054D                     __ptext22:	
  5323 ;; *************** function _ES_PostToService *****************
  5324 ;; Defined at:
  5325 ;;		line 352 in file "ES_Framework.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  WhichService    1    wreg     unsigned char 
  5328 ;;  TheEvent        3    0[BANK2 ] struct ES_Event_t
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  WhichService    1    9[BANK2 ] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      unsigned char 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5340 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;Total ram usage:       10 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    8
  5347 ;; This function calls:
  5348 ;;		_ES_EnQueueFIFO
  5349 ;;		___wmul
  5350 ;; This function is called by:
  5351 ;;		_InitToggleService
  5352 ;;		_PostToggleService
  5353 ;;		_PostSPI_Service
  5354 ;;		_PostButtonDebounceSM
  5355 ;;		_InitTemplateFSM
  5356 ;;		_PostTemplateFSM
  5357 ;;		_InitTemplateService
  5358 ;;		_PostTemplateService
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _ES_PostToService
  5364  054D                     _ES_PostToService:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _ES_PostToService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5368                           ;ES_PostToService@WhichService stored from wreg
  5369  054D  0022               	movlb	2	; select bank2
  5370  054E  00EF               	movwf	ES_PostToService@WhichService^(0+256)
  5371                           
  5372                           ;ES_Framework.c: 353: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5373                           ;ES_Framework.c: 354: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5374                           ;ES_Framework.c: 355: 1 )){
  5375  054F  3002               	movlw	2
  5376  0550  026F               	subwf	ES_PostToService@WhichService^(0+256),w
  5377  0551  1803               	skipnc
  5378  0552  2DA4               	goto	l2934
  5379  0553  086F               	movf	ES_PostToService@WhichService^(0+256),w
  5380  0554  00E9               	movwf	??_ES_PostToService^(0+256)
  5381  0555  01EA               	clrf	(??_ES_PostToService^(0+256)+1)
  5382  0556  0869               	movf	??_ES_PostToService^(0+256),w
  5383  0557  0021               	movlb	1	; select bank1
  5384  0558  00E0               	movwf	___wmul@multiplier^(0+128)
  5385  0559  0022               	movlb	2	; select bank2
  5386  055A  086A               	movf	(??_ES_PostToService+1)^(0+256),w
  5387  055B  0021               	movlb	1	; select bank1
  5388  055C  00E1               	movwf	(___wmul@multiplier+1)^(0+128)
  5389  055D  3003               	movlw	3
  5390  055E  00E2               	movwf	___wmul@multiplicand^(0+128)
  5391  055F  3000               	movlw	0
  5392  0560  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  5393  0561  318F  2766  3185   	fcall	___wmul
  5394  0564  0021               	movlb	1	; select bank1
  5395  0565  0861               	movf	(?___wmul+1)^(0+128),w
  5396  0566  0085               	movwf	5
  5397  0567  0860               	movf	?___wmul^(0+128),w
  5398  0568  0084               	movwf	4
  5399  0569  30A8               	movlw	low (_EventQueues| (0+32768))
  5400  056A  0784               	addwf	4,f
  5401  056B  3080               	movlw	high (_EventQueues| (0+32768))
  5402  056C  3D85               	addwfc	5,f
  5403  056D  3F00               	moviw [0]fsr0
  5404  056E  0022               	movlb	2	; select bank2
  5405  056F  00ED               	movwf	_ES_PostToService$1261^(0+256)
  5406  0570  3F01               	moviw [1]fsr0
  5407  0571  00EE               	movwf	(_ES_PostToService$1261+1)^(0+256)
  5408  0572  086E               	movf	(_ES_PostToService$1261+1)^(0+256),w
  5409  0573  0021               	movlb	1	; select bank1
  5410  0574  00E7               	movwf	(ES_EnQueueFIFO@pBlock+1)^(0+128)
  5411  0575  0022               	movlb	2	; select bank2
  5412  0576  086D               	movf	_ES_PostToService$1261^(0+256),w
  5413  0577  0021               	movlb	1	; select bank1
  5414  0578  00E6               	movwf	ES_EnQueueFIFO@pBlock^(0+128)
  5415  0579  0022               	movlb	2	; select bank2
  5416  057A  0866               	movf	ES_PostToService@TheEvent^(0+256),w
  5417  057B  0021               	movlb	1	; select bank1
  5418  057C  00E8               	movwf	ES_EnQueueFIFO@Event2Add^(0+128)
  5419  057D  0022               	movlb	2	; select bank2
  5420  057E  0867               	movf	(ES_PostToService@TheEvent+1)^(0+256),w
  5421  057F  0021               	movlb	1	; select bank1
  5422  0580  00E9               	movwf	(ES_EnQueueFIFO@Event2Add+1)^(0+128)
  5423  0581  0022               	movlb	2	; select bank2
  5424  0582  0868               	movf	(ES_PostToService@TheEvent+2)^(0+256),w
  5425  0583  0021               	movlb	1	; select bank1
  5426  0584  00EA               	movwf	(ES_EnQueueFIFO@Event2Add+2)^(0+128)
  5427  0585  3184  2494  3185   	fcall	_ES_EnQueueFIFO
  5428  0588  3A01               	xorlw	1
  5429  0589  1D03               	skipz
  5430  058A  2DA4               	goto	l2934
  5431                           
  5432                           ;ES_Framework.c: 356: Ready |= BitNum2SetMask[WhichService];
  5433  058B  0022               	movlb	2	; select bank2
  5434  058C  086F               	movf	ES_PostToService@WhichService^(0+256),w
  5435  058D  00E9               	movwf	??_ES_PostToService^(0+256)
  5436  058E  01EA               	clrf	(??_ES_PostToService^(0+256)+1)
  5437  058F  35E9               	lslf	??_ES_PostToService^(0+256),f
  5438  0590  0DEA               	rlf	(??_ES_PostToService^(0+256)+1),f
  5439  0591  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  5440  0592  0769               	addwf	??_ES_PostToService^(0+256),w
  5441  0593  0084               	movwf	4
  5442  0594  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  5443  0595  3D6A               	addwfc	(??_ES_PostToService+1)^(0+256),w
  5444  0596  0085               	movwf	5
  5445  0597  3F00               	moviw [0]fsr0
  5446  0598  00EB               	movwf	(??_ES_PostToService+2)^(0+256)
  5447  0599  3F01               	moviw [1]fsr0
  5448  059A  00EC               	movwf	((??_ES_PostToService+2)^(0+256)+1)
  5449  059B  086B               	movf	(??_ES_PostToService+2)^(0+256),w
  5450  059C  0021               	movlb	1	; select bank1
  5451  059D  04C3               	iorwf	_Ready^(0+128),f
  5452  059E  0022               	movlb	2	; select bank2
  5453  059F  086C               	movf	(??_ES_PostToService+3)^(0+256),w
  5454  05A0  0021               	movlb	1	; select bank1
  5455  05A1  04C4               	iorwf	(_Ready+1)^(0+128),f
  5456                           
  5457                           ;ES_Framework.c: 357: return 1;
  5458  05A2  3001               	movlw	1
  5459                           
  5460                           ;ES_Framework.c: 358: } else
  5461  05A3  0008               	return
  5462  05A4                     l2934:	
  5463                           
  5464                           ;ES_Framework.c: 359: return 0;
  5465  05A4  3000               	movlw	0
  5466  05A5  0008               	return
  5467  05A6                     __end_of_ES_PostToService:	
  5468                           
  5469                           	psect	text23
  5470  0494                     __ptext23:	
  5471 ;; *************** function _ES_EnQueueFIFO *****************
  5472 ;; Defined at:
  5473 ;;		line 85 in file "ES_Queue.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  pBlock          2   13[BANK1 ] PTR struct ES_Event_t
  5476 ;;		 -> Queue1(12), Queue0(18), 
  5477 ;;  Event2Add       3   15[BANK1 ] struct ES_Event_t
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  pThisQueue      2   21[BANK1 ] PTR struct .
  5480 ;;		 -> Queue1(12), Queue0(18), 
  5481 ;;  SaveCrit        1   20[BANK1 ] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:       10 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    7
  5498 ;; This function calls:
  5499 ;;		___awmod
  5500 ;;		___wmul
  5501 ;; This function is called by:
  5502 ;;		_ES_PostToService
  5503 ;;		_ES_PostAll
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _ES_EnQueueFIFO
  5509  0494                     _ES_EnQueueFIFO:	
  5510                           
  5511                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5512                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5513                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _ES_EnQueueFIFO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5517  0494  0021               	movlb	1	; select bank1
  5518  0495  0867               	movf	(ES_EnQueueFIFO@pBlock+1)^(0+128),w
  5519  0496  00EF               	movwf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128)
  5520  0497  0866               	movf	ES_EnQueueFIFO@pBlock^(0+128),w
  5521  0498  00EE               	movwf	ES_EnQueueFIFO@pThisQueue^(0+128)
  5522                           
  5523                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5524  0499  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5525  049A  0086               	movwf	6
  5526  049B  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5527  049C  0087               	movwf	7
  5528  049D  3142               	addfsr 1,2
  5529  049E  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5530  049F  0084               	movwf	4
  5531  04A0  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5532  04A1  0085               	movwf	5
  5533  04A2  0800               	movf	0,w
  5534  04A3  0201               	subwf	1,w
  5535  04A4  1803               	skipnc
  5536  04A5  2CEF               	goto	l2916
  5537                           
  5538                           ;ES_Queue.c: 92: {
  5539                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5540  04A6  080B               	movf	11,w	;volatile
  5541  04A7  00EB               	movwf	??_ES_EnQueueFIFO^(0+128)
  5542  04A8  086B               	movf	??_ES_EnQueueFIFO^(0+128),w
  5543  04A9  00ED               	movwf	ES_EnQueueFIFO@SaveCrit^(0+128)
  5544  04AA  138B               	bcf	11,7	;volatile
  5545                           
  5546                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5547                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5548  04AB  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5549  04AC  0086               	movwf	6
  5550  04AD  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5551  04AE  0087               	movwf	7
  5552  04AF  0801               	movf	1,w
  5553  04B0  00EB               	movwf	??_ES_EnQueueFIFO^(0+128)
  5554  04B1  01EC               	clrf	(??_ES_EnQueueFIFO^(0+128)+1)
  5555  04B2  086B               	movf	??_ES_EnQueueFIFO^(0+128),w
  5556  04B3  00D9               	movwf	___awmod@divisor^(0+128)
  5557  04B4  086C               	movf	(??_ES_EnQueueFIFO+1)^(0+128),w
  5558  04B5  00DA               	movwf	(___awmod@divisor+1)^(0+128)
  5559  04B6  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5560  04B7  0086               	movwf	6
  5561  04B8  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5562  04B9  0087               	movwf	7
  5563  04BA  3142               	addfsr 1,2
  5564  04BB  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5565  04BC  0084               	movwf	4
  5566  04BD  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5567  04BE  0085               	movwf	5
  5568  04BF  3101               	addfsr 0,1
  5569  04C0  0800               	movf	0,w
  5570  04C1  0701               	addwf	1,w
  5571  04C2  00DB               	movwf	___awmod@dividend^(0+128)
  5572  04C3  01DC               	clrf	(___awmod@dividend^(0+128)+1)
  5573  04C4  0DDC               	rlf	(___awmod@dividend+1)^(0+128),f
  5574  04C5  3186  2685  3184   	fcall	___awmod
  5575  04C8  0021               	movlb	1	; select bank1
  5576  04C9  0859               	movf	?___awmod^(0+128),w
  5577  04CA  3E01               	addlw	1
  5578  04CB  00E0               	movwf	___wmul@multiplier^(0+128)
  5579  04CC  3000               	movlw	0
  5580  04CD  3D5A               	addwfc	(?___awmod+1)^(0+128),w
  5581  04CE  00E1               	movwf	(___wmul@multiplier+1)^(0+128)
  5582  04CF  3003               	movlw	3
  5583  04D0  00E2               	movwf	___wmul@multiplicand^(0+128)
  5584  04D1  3000               	movlw	0
  5585  04D2  00E3               	movwf	(___wmul@multiplicand^(0+128)+1)
  5586  04D3  318F  2766         	fcall	___wmul
  5587  04D5  0021               	movlb	1	; select bank1
  5588  04D6  0860               	movf	?___wmul^(0+128),w
  5589  04D7  0766               	addwf	ES_EnQueueFIFO@pBlock^(0+128),w
  5590  04D8  0086               	movwf	6
  5591  04D9  0861               	movf	(?___wmul+1)^(0+128),w
  5592  04DA  3D67               	addwfc	(ES_EnQueueFIFO@pBlock+1)^(0+128),w
  5593  04DB  0087               	movwf	7
  5594  04DC  0868               	movf	ES_EnQueueFIFO@Event2Add^(0+128),w
  5595  04DD  3FC0               	movwi [0]fsr1
  5596  04DE  0869               	movf	(ES_EnQueueFIFO@Event2Add+1)^(0+128),w
  5597  04DF  3FC1               	movwi [1]fsr1
  5598  04E0  086A               	movf	(ES_EnQueueFIFO@Event2Add+2)^(0+128),w
  5599  04E1  3FC2               	movwi [2]fsr1
  5600                           
  5601                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5602  04E2  3001               	movlw	1
  5603  04E3  00EB               	movwf	??_ES_EnQueueFIFO^(0+128)
  5604  04E4  086E               	movf	ES_EnQueueFIFO@pThisQueue^(0+128),w
  5605  04E5  0086               	movwf	6
  5606  04E6  086F               	movf	(ES_EnQueueFIFO@pThisQueue+1)^(0+128),w
  5607  04E7  0087               	movwf	7
  5608  04E8  3142               	addfsr 1,2
  5609  04E9  086B               	movf	??_ES_EnQueueFIFO^(0+128),w
  5610  04EA  0781               	addwf	1,f
  5611                           
  5612                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5613  04EB  086D               	movf	ES_EnQueueFIFO@SaveCrit^(0+128),w
  5614  04EC  008B               	movwf	11	;volatile
  5615                           
  5616                           ;ES_Queue.c: 101: return(1);
  5617  04ED  3001               	movlw	1
  5618                           
  5619                           ;ES_Queue.c: 102: }else
  5620  04EE  0008               	return
  5621  04EF                     l2916:	
  5622                           
  5623                           ;ES_Queue.c: 103: return(0);
  5624  04EF  3000               	movlw	0
  5625  04F0  0008               	return
  5626  04F1                     __end_of_ES_EnQueueFIFO:	
  5627                           
  5628                           	psect	text24
  5629  0F66                     __ptext24:	
  5630 ;; *************** function ___wmul *****************
  5631 ;; Defined at:
  5632 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;  multiplier      2    7[BANK1 ] unsigned int 
  5635 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  product         2   11[BANK1 ] unsigned int 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  2    7[BANK1 ] unsigned int 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5647 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;Total ram usage:        6 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    6
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_ES_Initialize
  5658 ;;		_ES_Run
  5659 ;;		_ES_PostToService
  5660 ;;		_ES_PostAll
  5661 ;;		_ES_PostToServiceLIFO
  5662 ;;		_ES_DeQueue
  5663 ;;		_ES_EnQueueFIFO
  5664 ;;		_ES_EnQueueLIFO
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function ___wmul
  5670  0F66                     ___wmul:	
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5674  0F66  0021               	movlb	1	; select bank1
  5675  0F67  01E4               	clrf	___wmul@product^(0+128)
  5676  0F68  01E5               	clrf	(___wmul@product+1)^(0+128)
  5677  0F69                     l2846:	
  5678  0F69  1C60               	btfss	___wmul@multiplier^(0+128),0
  5679  0F6A  2F6F               	goto	l543
  5680  0F6B  0862               	movf	___wmul@multiplicand^(0+128),w
  5681  0F6C  07E4               	addwf	___wmul@product^(0+128),f
  5682  0F6D  0863               	movf	(___wmul@multiplicand+1)^(0+128),w
  5683  0F6E  3DE5               	addwfc	(___wmul@product+1)^(0+128),f
  5684  0F6F                     l543:	
  5685  0F6F  3001               	movlw	1
  5686  0F70                     u2565:	
  5687  0F70  35E2               	lslf	___wmul@multiplicand^(0+128),f
  5688  0F71  0DE3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  5689  0F72  0B89               	decfsz	9,f
  5690  0F73  2F70               	goto	u2565
  5691  0F74  3001               	movlw	1
  5692  0F75                     u2575:	
  5693  0F75  36E1               	lsrf	(___wmul@multiplier+1)^(0+128),f
  5694  0F76  0CE0               	rrf	___wmul@multiplier^(0+128),f
  5695  0F77  0B89               	decfsz	9,f
  5696  0F78  2F75               	goto	u2575
  5697  0F79  0860               	movf	___wmul@multiplier^(0+128),w
  5698  0F7A  0461               	iorwf	(___wmul@multiplier+1)^(0+128),w
  5699  0F7B  1D03               	btfss	3,2
  5700  0F7C  2F69               	goto	l2846
  5701  0F7D  0865               	movf	(___wmul@product+1)^(0+128),w
  5702  0F7E  00E1               	movwf	(?___wmul+1)^(0+128)
  5703  0F7F  0864               	movf	___wmul@product^(0+128),w
  5704  0F80  00E0               	movwf	?___wmul^(0+128)
  5705  0F81  0008               	return
  5706  0F82                     __end_of___wmul:	
  5707                           
  5708                           	psect	text25
  5709  0685                     __ptext25:	
  5710 ;; *************** function ___awmod *****************
  5711 ;; Defined at:
  5712 ;;		line 6 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  divisor         2    0[BANK1 ] int 
  5715 ;;  dividend        2    2[BANK1 ] int 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  sign            1    6[BANK1 ] unsigned char 
  5718 ;;  counter         1    5[BANK1 ] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  2    0[BANK1 ] int 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5728 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;Total ram usage:        7 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    6
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_ES_EnQueueFIFO
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function ___awmod
  5744  0685                     ___awmod:	
  5745                           
  5746                           ;incstack = 0
  5747                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5748  0685  0021               	movlb	1	; select bank1
  5749  0686  01DF               	clrf	___awmod@sign^(0+128)
  5750  0687  1FDC               	btfss	(___awmod@dividend+1)^(0+128),7
  5751  0688  2E90               	goto	l2866
  5752  0689  09DB               	comf	___awmod@dividend^(0+128),f
  5753  068A  09DC               	comf	(___awmod@dividend+1)^(0+128),f
  5754  068B  0ADB               	incf	___awmod@dividend^(0+128),f
  5755  068C  1903               	skipnz
  5756  068D  0ADC               	incf	(___awmod@dividend+1)^(0+128),f
  5757  068E  01DF               	clrf	___awmod@sign^(0+128)
  5758  068F  0ADF               	incf	___awmod@sign^(0+128),f
  5759  0690                     l2866:	
  5760  0690  1FDA               	btfss	(___awmod@divisor+1)^(0+128),7
  5761  0691  2E97               	goto	l2870
  5762  0692  09D9               	comf	___awmod@divisor^(0+128),f
  5763  0693  09DA               	comf	(___awmod@divisor+1)^(0+128),f
  5764  0694  0AD9               	incf	___awmod@divisor^(0+128),f
  5765  0695  1903               	skipnz
  5766  0696  0ADA               	incf	(___awmod@divisor+1)^(0+128),f
  5767  0697                     l2870:	
  5768  0697  0859               	movf	___awmod@divisor^(0+128),w
  5769  0698  045A               	iorwf	(___awmod@divisor+1)^(0+128),w
  5770  0699  1903               	btfsc	3,2
  5771  069A  2EBE               	goto	l2888
  5772  069B  01DE               	clrf	___awmod@counter^(0+128)
  5773  069C  0ADE               	incf	___awmod@counter^(0+128),f
  5774  069D                     l2878:	
  5775  069D  1BDA               	btfsc	(___awmod@divisor+1)^(0+128),7
  5776  069E  2EA9               	goto	l2880
  5777  069F  3001               	movlw	1
  5778  06A0                     u2625:	
  5779  06A0  35D9               	lslf	___awmod@divisor^(0+128),f
  5780  06A1  0DDA               	rlf	(___awmod@divisor+1)^(0+128),f
  5781  06A2  0B89               	decfsz	9,f
  5782  06A3  2EA0               	goto	u2625
  5783  06A4  3001               	movlw	1
  5784  06A5  00DD               	movwf	??___awmod^(0+128)
  5785  06A6  085D               	movf	??___awmod^(0+128),w
  5786  06A7  07DE               	addwf	___awmod@counter^(0+128),f
  5787  06A8  2E9D               	goto	l2878
  5788  06A9                     l2880:	
  5789  06A9  085A               	movf	(___awmod@divisor+1)^(0+128),w
  5790  06AA  025C               	subwf	(___awmod@dividend+1)^(0+128),w
  5791  06AB  1D03               	skipz
  5792  06AC  2EAF               	goto	u2645
  5793  06AD  0859               	movf	___awmod@divisor^(0+128),w
  5794  06AE  025B               	subwf	___awmod@dividend^(0+128),w
  5795  06AF                     u2645:	
  5796  06AF  1C03               	skipc
  5797  06B0  2EB5               	goto	l2884
  5798  06B1  0859               	movf	___awmod@divisor^(0+128),w
  5799  06B2  02DB               	subwf	___awmod@dividend^(0+128),f
  5800  06B3  085A               	movf	(___awmod@divisor+1)^(0+128),w
  5801  06B4  3BDC               	subwfb	(___awmod@dividend+1)^(0+128),f
  5802  06B5                     l2884:	
  5803  06B5  3001               	movlw	1
  5804  06B6                     u2655:	
  5805  06B6  36DA               	lsrf	(___awmod@divisor+1)^(0+128),f
  5806  06B7  0CD9               	rrf	___awmod@divisor^(0+128),f
  5807  06B8  0B89               	decfsz	9,f
  5808  06B9  2EB6               	goto	u2655
  5809  06BA  3001               	movlw	1
  5810  06BB  02DE               	subwf	___awmod@counter^(0+128),f
  5811  06BC  1D03               	btfss	3,2
  5812  06BD  2EA9               	goto	l2880
  5813  06BE                     l2888:	
  5814  06BE  085F               	movf	___awmod@sign^(0+128),w
  5815  06BF  1903               	btfsc	3,2
  5816  06C0  2EC6               	goto	l2892
  5817  06C1  09DB               	comf	___awmod@dividend^(0+128),f
  5818  06C2  09DC               	comf	(___awmod@dividend+1)^(0+128),f
  5819  06C3  0ADB               	incf	___awmod@dividend^(0+128),f
  5820  06C4  1903               	skipnz
  5821  06C5  0ADC               	incf	(___awmod@dividend+1)^(0+128),f
  5822  06C6                     l2892:	
  5823  06C6  085C               	movf	(___awmod@dividend+1)^(0+128),w
  5824  06C7  00DA               	movwf	(?___awmod+1)^(0+128)
  5825  06C8  085B               	movf	___awmod@dividend^(0+128),w
  5826  06C9  00D9               	movwf	?___awmod^(0+128)
  5827  06CA  0008               	return
  5828  06CB                     __end_of___awmod:	
  5829                           
  5830                           	psect	text26
  5831  0EEE                     __ptext26:	
  5832 ;; *************** function _SetBGR *****************
  5833 ;; Defined at:
  5834 ;;		line 223 in file "SPI_Service.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  B               1    wreg     unsigned char 
  5837 ;;  G               1    0[BANK1 ] unsigned char 
  5838 ;;  R               1    1[BANK1 ] unsigned char 
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  B               1    3[BANK1 ] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      void 
  5843 ;; Registers used:
  5844 ;;		wreg
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5850 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;Total ram usage:        4 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    6
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_InitSPI_Service
  5861 ;;		_RunSPI_Service
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           
  5866                           ;psect for function _SetBGR
  5867  0EEE                     _SetBGR:	
  5868                           
  5869                           ;incstack = 0
  5870                           ; Regs used in _SetBGR: [wreg]
  5871                           ;SetBGR@B stored from wreg
  5872  0EEE  0021               	movlb	1	; select bank1
  5873  0EEF  00DC               	movwf	SetBGR@B^(0+128)
  5874                           
  5875                           ;SPI_Service.c: 224: BGR[0] = B;
  5876  0EF0  085C               	movf	SetBGR@B^(0+128),w
  5877  0EF1  00DB               	movwf	??_SetBGR^(0+128)
  5878  0EF2  085B               	movf	??_SetBGR^(0+128),w
  5879  0EF3  0020               	movlb	0	; select bank0
  5880  0EF4  00BC               	movwf	_BGR
  5881                           
  5882                           ;SPI_Service.c: 225: BGR[1] = G;
  5883  0EF5  0021               	movlb	1	; select bank1
  5884  0EF6  0859               	movf	SetBGR@G^(0+128),w
  5885  0EF7  00DB               	movwf	??_SetBGR^(0+128)
  5886  0EF8  085B               	movf	??_SetBGR^(0+128),w
  5887  0EF9  0020               	movlb	0	; select bank0
  5888  0EFA  00BD               	movwf	_BGR+1
  5889                           
  5890                           ;SPI_Service.c: 226: BGR[2] = R;
  5891  0EFB  0021               	movlb	1	; select bank1
  5892  0EFC  085A               	movf	SetBGR@R^(0+128),w
  5893  0EFD  00DB               	movwf	??_SetBGR^(0+128)
  5894  0EFE  085B               	movf	??_SetBGR^(0+128),w
  5895  0EFF  0020               	movlb	0	; select bank0
  5896  0F00  00BE               	movwf	_BGR+2
  5897  0F01  0008               	return
  5898  0F02                     __end_of_SetBGR:	
  5899                           
  5900                           	psect	text27
  5901  0F17                     __ptext27:	
  5902 ;; *************** function _InitSPI *****************
  5903 ;; Defined at:
  5904 ;;		line 179 in file "SPI_Service.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:        1 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    7
  5925 ;; This function calls:
  5926 ;;		_FormPacket
  5927 ;; This function is called by:
  5928 ;;		_InitSPI_Service
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           
  5933                           ;psect for function _InitSPI
  5934  0F17                     _InitSPI:	
  5935                           
  5936                           ;SPI_Service.c: 183: PORTC = 0x00;
  5937                           
  5938                           ;incstack = 0
  5939                           ; Regs used in _InitSPI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5940  0F17  0020               	movlb	0	; select bank0
  5941  0F18  018E               	clrf	14	;volatile
  5942                           
  5943                           ;SPI_Service.c: 184: LATC = 0x00;
  5944  0F19  0022               	movlb	2	; select bank2
  5945  0F1A  018E               	clrf	14	;volatile
  5946                           
  5947                           ;SPI_Service.c: 185: ANSELC = 0x00;
  5948  0F1B  0023               	movlb	3	; select bank3
  5949  0F1C  018E               	clrf	14	;volatile
  5950                           
  5951                           ;SPI_Service.c: 186: TRISC = 0x00;
  5952  0F1D  0021               	movlb	1	; select bank1
  5953  0F1E  018E               	clrf	14	;volatile
  5954                           
  5955                           ;SPI_Service.c: 188: SSPIE = 1;
  5956  0F1F  1591               	bsf	17,3	;volatile
  5957                           
  5958                           ;SPI_Service.c: 192: SSPCON1 = 0x00;
  5959  0F20  0024               	movlb	4	; select bank4
  5960  0F21  0195               	clrf	21	;volatile
  5961                           
  5962                           ;SPI_Service.c: 193: SSPSTAT = 0b01000000;
  5963  0F22  3040               	movlw	64
  5964  0F23  0094               	movwf	20	;volatile
  5965                           
  5966                           ;SPI_Service.c: 194: SSPADD = 0xFF;
  5967  0F24  30FF               	movlw	255
  5968  0F25  0092               	movwf	18	;volatile
  5969                           
  5970                           ;SPI_Service.c: 195: SSPCON1 = 0b00111010;
  5971  0F26  303A               	movlw	58
  5972  0F27  0095               	movwf	21	;volatile
  5973                           
  5974                           ;SPI_Service.c: 196: NumBytesLeft = 8 + 11*4;
  5975  0F28  3034               	movlw	52
  5976  0F29  0021               	movlb	1	; select bank1
  5977  0F2A  00DF               	movwf	??_InitSPI^(0+128)
  5978  0F2B  085F               	movf	??_InitSPI^(0+128),w
  5979  0F2C  00C9               	movwf	_NumBytesLeft^(0+128)
  5980                           
  5981                           ;SPI_Service.c: 197: FormPacket();
  5982  0F2D  3184  2415         	fcall	_FormPacket
  5983  0F2F  0008               	return
  5984  0F30                     __end_of_InitSPI:	
  5985                           
  5986                           	psect	text28
  5987  0415                     __ptext28:	
  5988 ;; *************** function _FormPacket *****************
  5989 ;; Defined at:
  5990 ;;		line 201 in file "SPI_Service.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  j               1    5[BANK1 ] unsigned char 
  5995 ;;  i               1    3[BANK1 ] unsigned char 
  5996 ;;  ledNum          1    4[BANK1 ] unsigned char 
  5997 ;;  i               1    2[BANK1 ] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;Total ram usage:        6 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    6
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_RunSPI_Service
  6018 ;;		_InitSPI
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _FormPacket
  6024  0415                     _FormPacket:	
  6025                           
  6026                           ;SPI_Service.c: 202: for (uint8_t i=0; i < 4; i++) {
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _FormPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  6030  0415  0021               	movlb	1	; select bank1
  6031  0416  01DB               	clrf	FormPacket@i^(0+128)
  6032  0417  3004               	movlw	4
  6033  0418  025B               	subwf	FormPacket@i^(0+128),w
  6034  0419  1803               	btfsc	3,0
  6035  041A  2C29               	goto	l3028
  6036  041B                     l3022:	
  6037                           
  6038                           ;SPI_Service.c: 203: BytesToSend[i] = 0x00;
  6039  041B  085B               	movf	FormPacket@i^(0+128),w
  6040  041C  3E20               	addlw	(low (_BytesToSend| (0+256)))& (0+255)
  6041  041D  0086               	movwf	6
  6042  041E  3001               	movlw	1	; select bank2/3
  6043  041F  0087               	movwf	7
  6044  0420  0181               	clrf	1
  6045  0421  3001               	movlw	1
  6046  0422  00D9               	movwf	??_FormPacket^(0+128)
  6047  0423  0859               	movf	??_FormPacket^(0+128),w
  6048  0424  07DB               	addwf	FormPacket@i^(0+128),f
  6049  0425  3004               	movlw	4
  6050  0426  025B               	subwf	FormPacket@i^(0+128),w
  6051  0427  1C03               	skipc
  6052  0428  2C1B               	goto	l3022
  6053  0429                     l3028:	
  6054                           
  6055                           ;SPI_Service.c: 204: }
  6056                           ;SPI_Service.c: 205: for (uint8_t ledNum=0; ledNum < 11; ledNum++) {
  6057  0429  01DD               	clrf	FormPacket@ledNum^(0+128)
  6058  042A  300B               	movlw	11
  6059  042B  025D               	subwf	FormPacket@ledNum^(0+128),w
  6060  042C  1803               	btfsc	3,0
  6061  042D  2C83               	goto	l3062
  6062  042E                     l3034:	
  6063                           
  6064                           ;SPI_Service.c: 206: for (uint8_t j=0; j < 4; j++) {
  6065  042E  01DE               	clrf	FormPacket@j^(0+128)
  6066  042F  3004               	movlw	4
  6067  0430  025E               	subwf	FormPacket@j^(0+128),w
  6068  0431  1803               	btfsc	3,0
  6069  0432  2C7B               	goto	l3058
  6070  0433                     l3040:	
  6071                           
  6072                           ;SPI_Service.c: 207: if (j==0) {
  6073  0433  085E               	movf	FormPacket@j^(0+128),w
  6074  0434  1D03               	btfss	3,2
  6075  0435  2C40               	goto	l3044
  6076                           
  6077                           ;SPI_Service.c: 208: BytesToSend[4+4*ledNum+j] = 0xFF;
  6078  0436  30FF               	movlw	255
  6079  0437  00D9               	movwf	??_FormPacket^(0+128)
  6080  0438  085D               	movf	FormPacket@ledNum^(0+128),w
  6081  0439  00DA               	movwf	(??_FormPacket+1)^(0+128)
  6082  043A  3001               	movlw	1
  6083  043B                     u2955:	
  6084  043B  35DA               	lslf	(??_FormPacket+1)^(0+128),f
  6085  043C  3EFF               	addlw	-1
  6086  043D  1D03               	skipz
  6087  043E  2C3B               	goto	u2955
  6088  043F  2C6A               	goto	L7
  6089  0440                     l3044:	
  6090                           ;SPI_Service.c: 209: } else if (j==1) {
  6091                           
  6092  0440  035E               	decf	FormPacket@j^(0+128),w
  6093  0441  1D03               	btfss	3,2
  6094  0442  2C4F               	goto	l3048
  6095                           
  6096                           ;SPI_Service.c: 210: BytesToSend[4+4*ledNum+j] = BGR[0];
  6097  0443  0020               	movlb	0	; select bank0
  6098  0444  083C               	movf	_BGR,w
  6099  0445  0021               	movlb	1	; select bank1
  6100  0446  00D9               	movwf	??_FormPacket^(0+128)
  6101  0447  085D               	movf	FormPacket@ledNum^(0+128),w
  6102  0448  00DA               	movwf	(??_FormPacket+1)^(0+128)
  6103  0449  3001               	movlw	1
  6104  044A                     u2975:	
  6105  044A  35DA               	lslf	(??_FormPacket+1)^(0+128),f
  6106  044B  3EFF               	addlw	-1
  6107  044C  1D03               	skipz
  6108  044D  2C4A               	goto	u2975
  6109  044E  2C6A               	goto	L7
  6110  044F                     l3048:	
  6111                           ;SPI_Service.c: 211: } else if (j==2) {
  6112                           
  6113  044F  3002               	movlw	2
  6114  0450  065E               	xorwf	FormPacket@j^(0+128),w
  6115  0451  1D03               	btfss	3,2
  6116  0452  2C5F               	goto	l3052
  6117                           
  6118                           ;SPI_Service.c: 212: BytesToSend[4+4*ledNum+j] = BGR[1];
  6119  0453  0020               	movlb	0	; select bank0
  6120  0454  083D               	movf	_BGR+1,w
  6121  0455  0021               	movlb	1	; select bank1
  6122  0456  00D9               	movwf	??_FormPacket^(0+128)
  6123  0457  085D               	movf	FormPacket@ledNum^(0+128),w
  6124  0458  00DA               	movwf	(??_FormPacket+1)^(0+128)
  6125  0459  3001               	movlw	1
  6126  045A                     u2995:	
  6127  045A  35DA               	lslf	(??_FormPacket+1)^(0+128),f
  6128  045B  3EFF               	addlw	-1
  6129  045C  1D03               	skipz
  6130  045D  2C5A               	goto	u2995
  6131  045E  2C6A               	goto	L7
  6132  045F                     l3052:	
  6133                           ;SPI_Service.c: 213: } else {
  6134                           
  6135                           
  6136                           ;SPI_Service.c: 214: BytesToSend[4+4*ledNum+j] = BGR[2];
  6137  045F  0020               	movlb	0	; select bank0
  6138  0460  083E               	movf	_BGR+2,w
  6139  0461  0021               	movlb	1	; select bank1
  6140  0462  00D9               	movwf	??_FormPacket^(0+128)
  6141  0463  085D               	movf	FormPacket@ledNum^(0+128),w
  6142  0464  00DA               	movwf	(??_FormPacket+1)^(0+128)
  6143  0465  3001               	movlw	1
  6144  0466                     u3005:	
  6145  0466  35DA               	lslf	(??_FormPacket+1)^(0+128),f
  6146  0467  3EFF               	addlw	-1
  6147  0468  1D03               	skipz
  6148  0469  2C66               	goto	u3005
  6149  046A                     L7:	
  6150  046A  355A               	lslf	(??_FormPacket+1)^(0+128),w
  6151  046B  075E               	addwf	FormPacket@j^(0+128),w
  6152  046C  3E04               	addlw	4
  6153  046D  3E20               	addlw	(low (_BytesToSend| (0+256)))& (0+255)
  6154  046E  0086               	movwf	6
  6155  046F  3001               	movlw	1	; select bank2/3
  6156  0470  0087               	movwf	7
  6157  0471  0859               	movf	??_FormPacket^(0+128),w
  6158  0472  0081               	movwf	1
  6159  0473  3001               	movlw	1
  6160  0474  00D9               	movwf	??_FormPacket^(0+128)
  6161  0475  0859               	movf	??_FormPacket^(0+128),w
  6162  0476  07DE               	addwf	FormPacket@j^(0+128),f
  6163  0477  3004               	movlw	4
  6164  0478  025E               	subwf	FormPacket@j^(0+128),w
  6165  0479  1C03               	skipc
  6166  047A  2C33               	goto	l3040
  6167  047B                     l3058:	
  6168  047B  3001               	movlw	1
  6169  047C  00D9               	movwf	??_FormPacket^(0+128)
  6170  047D  0859               	movf	??_FormPacket^(0+128),w
  6171  047E  07DD               	addwf	FormPacket@ledNum^(0+128),f
  6172  047F  300B               	movlw	11
  6173  0480  025D               	subwf	FormPacket@ledNum^(0+128),w
  6174  0481  1C03               	skipc
  6175  0482  2C2E               	goto	l3034
  6176  0483                     l3062:	
  6177                           
  6178                           ;SPI_Service.c: 215: }
  6179                           ;SPI_Service.c: 216: }
  6180                           ;SPI_Service.c: 217: }
  6181                           ;SPI_Service.c: 218: for (uint8_t i=0; i < 4; i++) {
  6182  0483  01DC               	clrf	FormPacket@i_797^(0+128)
  6183  0484                     L8:	
  6184  0484  3004               	movlw	4
  6185  0485  025C               	subwf	FormPacket@i_797^(0+128),w
  6186  0486  1803               	btfsc	3,0
  6187  0487  0008               	return
  6188                           
  6189                           ;SPI_Service.c: 219: BytesToSend[4+11*4 + i] = 0x00;
  6190  0488  085C               	movf	FormPacket@i_797^(0+128),w
  6191  0489  3E30               	addlw	48
  6192  048A  3E20               	addlw	(low (_BytesToSend| (0+256)))& (0+255)
  6193  048B  0086               	movwf	6
  6194  048C  3001               	movlw	1	; select bank2/3
  6195  048D  0087               	movwf	7
  6196  048E  0181               	clrf	1
  6197  048F  3001               	movlw	1
  6198  0490  00D9               	movwf	??_FormPacket^(0+128)
  6199  0491  0859               	movf	??_FormPacket^(0+128),w
  6200  0492  07DC               	addwf	FormPacket@i_797^(0+128),f
  6201  0493  2C84               	goto	L8
  6202  0494                     __end_of_FormPacket:	
  6203                           
  6204                           	psect	text29
  6205  0710                     __ptext29:	
  6206 ;; *************** function _ES_Timer_InitTimer *****************
  6207 ;; Defined at:
  6208 ;;		line 229 in file "ES_Timers.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  Num             1    wreg     unsigned char 
  6211 ;;  NewTime         2    0[BANK1 ] unsigned int 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  Num             1    6[BANK1 ] unsigned char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      enum E1960
  6216 ;; Registers used:
  6217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6223 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;Total ram usage:        7 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    6
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_InitToggleService
  6234 ;;		_RunToggleService
  6235 ;;		_InitSPI_Service
  6236 ;;		_RunSPI_Service
  6237 ;;		_InitializeButtonDebounce
  6238 ;;		_RunButtonDebounceSM
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _ES_Timer_InitTimer
  6244  0710                     _ES_Timer_InitTimer:	
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _ES_Timer_InitTimer: [wreg-fsr1h+status,2+status,0+pclath]
  6248                           ;ES_Timer_InitTimer@Num stored from wreg
  6249  0710  0021               	movlb	1	; select bank1
  6250  0711  00DF               	movwf	ES_Timer_InitTimer@Num^(0+128)
  6251                           
  6252                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6253                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6254                           ;ES_Timers.c: 236: (NewTime == 0) )
  6255  0712  3010               	movlw	16
  6256  0713  025F               	subwf	ES_Timer_InitTimer@Num^(0+128),w
  6257  0714  1803               	skipnc
  6258  0715  0008               	return
  6259  0716  085F               	movf	ES_Timer_InitTimer@Num^(0+128),w
  6260  0717  00DB               	movwf	??_ES_Timer_InitTimer^(0+128)
  6261  0718  01DC               	clrf	(??_ES_Timer_InitTimer^(0+128)+1)
  6262  0719  35DB               	lslf	??_ES_Timer_InitTimer^(0+128),f
  6263  071A  0DDC               	rlf	(??_ES_Timer_InitTimer^(0+128)+1),f
  6264  071B  3071               	movlw	low (_Timer2PostFunc| (0+32768))
  6265  071C  075B               	addwf	??_ES_Timer_InitTimer^(0+128),w
  6266  071D  0084               	movwf	4
  6267  071E  3080               	movlw	high (_Timer2PostFunc| (0+32768))
  6268  071F  3D5C               	addwfc	(??_ES_Timer_InitTimer+1)^(0+128),w
  6269  0720  0085               	movwf	5
  6270  0721  0012               	moviw fsr0++
  6271  0722  00DD               	movwf	(??_ES_Timer_InitTimer+2)^(0+128)
  6272  0723  0012               	moviw fsr0++
  6273  0724  04DD               	iorwf	(??_ES_Timer_InitTimer+2)^(0+128),f
  6274  0725  1903               	btfsc	3,2
  6275  0726  0008               	return
  6276  0727  0859               	movf	ES_Timer_InitTimer@NewTime^(0+128),w
  6277  0728  045A               	iorwf	(ES_Timer_InitTimer@NewTime+1)^(0+128),w
  6278  0729  1903               	btfsc	3,2
  6279  072A  0008               	return
  6280                           
  6281                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6282                           
  6283                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6284                           ;	Return value of _ES_Timer_InitTimer is never used
  6285  072B  355F               	lslf	ES_Timer_InitTimer@Num^(0+128),w
  6286  072C  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  6287  072D  0086               	movwf	6
  6288  072E  0187               	clrf	7
  6289  072F  0859               	movf	ES_Timer_InitTimer@NewTime^(0+128),w
  6290  0730  3FC0               	movwi [0]fsr1
  6291  0731  085A               	movf	(ES_Timer_InitTimer@NewTime+1)^(0+128),w
  6292  0732  3FC1               	movwi [1]fsr1
  6293                           
  6294                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6295  0733  085F               	movf	ES_Timer_InitTimer@Num^(0+128),w
  6296  0734  00DB               	movwf	??_ES_Timer_InitTimer^(0+128)
  6297  0735  01DC               	clrf	(??_ES_Timer_InitTimer^(0+128)+1)
  6298  0736  35DB               	lslf	??_ES_Timer_InitTimer^(0+128),f
  6299  0737  0DDC               	rlf	(??_ES_Timer_InitTimer^(0+128)+1),f
  6300  0738  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  6301  0739  075B               	addwf	??_ES_Timer_InitTimer^(0+128),w
  6302  073A  0084               	movwf	4
  6303  073B  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  6304  073C  3D5C               	addwfc	(??_ES_Timer_InitTimer+1)^(0+128),w
  6305  073D  0085               	movwf	5
  6306  073E  3F00               	moviw [0]fsr0
  6307  073F  00DD               	movwf	(??_ES_Timer_InitTimer+2)^(0+128)
  6308  0740  3F01               	moviw [1]fsr0
  6309  0741  00DE               	movwf	((??_ES_Timer_InitTimer+2)^(0+128)+1)
  6310  0742  085D               	movf	(??_ES_Timer_InitTimer+2)^(0+128),w
  6311  0743  0020               	movlb	0	; select bank0
  6312  0744  04C7               	iorwf	_TMR_ActiveFlags,f
  6313  0745  0021               	movlb	1	; select bank1
  6314  0746  085E               	movf	(??_ES_Timer_InitTimer+3)^(0+128),w
  6315  0747  0020               	movlb	0	; select bank0
  6316  0748  04C8               	iorwf	_TMR_ActiveFlags+1,f
  6317  0749  0008               	return
  6318  074A                     __end_of_ES_Timer_InitTimer:	
  6319                           ;ES_Timers.c: 240: return ES_Timer_OK;
  6320                           ;	Return value of _ES_Timer_InitTimer is never used
  6321                           
  6322                           
  6323                           	psect	text30
  6324  07F7                     __ptext30:	
  6325 ;; *************** function _ES_Timer_Init *****************
  6326 ;; Defined at:
  6327 ;;		line 130 in file "ES_Timers.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  Rate            2    2[BANK1 ] enum E1911
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;		None
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      void 
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0, pclath, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6341 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6345 ;;Total ram usage:        2 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    7
  6348 ;; This function calls:
  6349 ;;		__HW_Timer_Init
  6350 ;; This function is called by:
  6351 ;;		_ES_Initialize
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _ES_Timer_Init
  6357  07F7                     _ES_Timer_Init:	
  6358                           
  6359                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _ES_Timer_Init: [wreg+status,2+status,0+pclath+cstack]
  6363  07F7  0021               	movlb	1	; select bank1
  6364  07F8  085C               	movf	(ES_Timer_Init@Rate+1)^(0+128),w
  6365  07F9  00DA               	movwf	(__HW_Timer_Init@Rate+1)^(0+128)
  6366  07FA  085B               	movf	ES_Timer_Init@Rate^(0+128),w
  6367  07FB  00D9               	movwf	__HW_Timer_Init@Rate^(0+128)
  6368  07FC  318E  26BC         	fcall	__HW_Timer_Init
  6369  07FE  0008               	return
  6370  07FF                     __end_of_ES_Timer_Init:	
  6371                           
  6372                           	psect	text31
  6373  0EBC                     __ptext31:	
  6374 ;; *************** function __HW_Timer_Init *****************
  6375 ;; Defined at:
  6376 ;;		line 74 in file "ES_Port.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  Rate            2    0[BANK1 ] enum E1896
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;		None
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  1    wreg      void 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    6
  6397 ;; This function calls:
  6398 ;;		Nothing
  6399 ;; This function is called by:
  6400 ;;		_ES_Timer_Init
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function __HW_Timer_Init
  6406  0EBC                     __HW_Timer_Init:	
  6407                           
  6408                           ;ES_Port.c: 82: PIE1 = 0b00000100;
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in __HW_Timer_Init: [wreg+status,2]
  6412  0EBC  3004               	movlw	4
  6413  0EBD  0021               	movlb	1	; select bank1
  6414  0EBE  0091               	movwf	17	;volatile
  6415                           
  6416                           ;ES_Port.c: 87: INTCON = 0b01000000;
  6417  0EBF  3040               	movlw	64
  6418  0EC0  008B               	movwf	11	;volatile
  6419                           
  6420                           ;ES_Port.c: 93: CCP1CON = 0b00001010;
  6421  0EC1  300A               	movlw	10
  6422  0EC2  0025               	movlb	5	; select bank5
  6423  0EC3  0093               	movwf	19	;volatile
  6424                           
  6425                           ;ES_Port.c: 97: CCPR1L = 0b00000001;
  6426  0EC4  3001               	movlw	1
  6427  0EC5  0091               	movwf	17	;volatile
  6428                           
  6429                           ;ES_Port.c: 101: CCPR1H = 0b00000000;
  6430  0EC6  0192               	clrf	18	;volatile
  6431                           
  6432                           ;ES_Port.c: 109: T1CON = 0b00100001;
  6433  0EC7  3021               	movlw	33
  6434  0EC8  0020               	movlb	0	; select bank0
  6435  0EC9  0098               	movwf	24	;volatile
  6436                           
  6437                           ;ES_Port.c: 111: {GIE = 1;};
  6438  0ECA  178B               	bsf	11,7	;volatile
  6439  0ECB  0008               	return
  6440  0ECC                     __end_of__HW_Timer_Init:	
  6441                           
  6442                           	psect	text32
  6443  0F4B                     __ptext32:	
  6444 ;; *************** function _ES_InitQueue *****************
  6445 ;; Defined at:
  6446 ;;		line 58 in file "ES_Queue.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  pBlock          2   13[BANK1 ] PTR struct ES_Event_t
  6449 ;;		 -> Queue1(12), Queue0(18), 
  6450 ;;  BlockSize       1   15[BANK1 ] unsigned char 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  pThisQueue      2   17[BANK1 ] PTR struct .
  6453 ;;		 -> Queue1(12), Queue0(18), 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  1    wreg      unsigned char 
  6456 ;; Registers used:
  6457 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6463 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;Total ram usage:        6 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    6
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_ES_Initialize
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _ES_InitQueue
  6479  0F4B                     _ES_InitQueue:	
  6480                           
  6481                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  6482                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  6483                           
  6484                           ;incstack = 0
  6485                           ; Regs used in _ES_InitQueue: [wreg+fsr1l+fsr1h+status,2+status,0]
  6486  0F4B  0021               	movlb	1	; select bank1
  6487  0F4C  0867               	movf	(ES_InitQueue@pBlock+1)^(0+128),w
  6488  0F4D  00EB               	movwf	(ES_InitQueue@pThisQueue+1)^(0+128)
  6489  0F4E  0866               	movf	ES_InitQueue@pBlock^(0+128),w
  6490  0F4F  00EA               	movwf	ES_InitQueue@pThisQueue^(0+128)
  6491                           
  6492                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  6493  0F50  0868               	movf	ES_InitQueue@BlockSize^(0+128),w
  6494  0F51  3EFF               	addlw	255
  6495  0F52  00E9               	movwf	??_ES_InitQueue^(0+128)
  6496  0F53  086A               	movf	ES_InitQueue@pThisQueue^(0+128),w
  6497  0F54  0086               	movwf	6
  6498  0F55  086B               	movf	(ES_InitQueue@pThisQueue+1)^(0+128),w
  6499  0F56  0087               	movwf	7
  6500  0F57  0869               	movf	??_ES_InitQueue^(0+128),w
  6501  0F58  0081               	movwf	1
  6502                           
  6503                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  6504  0F59  086A               	movf	ES_InitQueue@pThisQueue^(0+128),w
  6505  0F5A  0086               	movwf	6
  6506  0F5B  086B               	movf	(ES_InitQueue@pThisQueue+1)^(0+128),w
  6507  0F5C  0087               	movwf	7
  6508  0F5D  3141               	addfsr 1,1
  6509  0F5E  0181               	clrf	1
  6510                           
  6511                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  6512  0F5F  086A               	movf	ES_InitQueue@pThisQueue^(0+128),w
  6513  0F60  0086               	movwf	6
  6514  0F61  086B               	movf	(ES_InitQueue@pThisQueue+1)^(0+128),w
  6515  0F62  0087               	movwf	7
  6516  0F63  3142               	addfsr 1,2
  6517  0F64  0181               	clrf	1
  6518  0F65  0008               	return
  6519  0F66                     __end_of_ES_InitQueue:	
  6520                           ;ES_Queue.c: 67: return(pThisQueue->QueueSize);
  6521                           ;	Return value of _ES_InitQueue is never used
  6522                           
  6523                           
  6524                           	psect	intentry
  6525  0004                     __pintentry:	
  6526 ;; *************** function _ISR *****************
  6527 ;; Defined at:
  6528 ;;		line 114 in file "ES_Port.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;Total ram usage:        2 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    5
  6549 ;; This function calls:
  6550 ;;		_EOTResponse
  6551 ;; This function is called by:
  6552 ;;		Interrupt level 1
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556  0004                     _ISR:	
  6557                           
  6558                           ;incstack = 0
  6559  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6560                           
  6561                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6562  0005  3180               	pagesel	$
  6563  0006  0020               	movlb	0	; select bank0
  6564  0007  087F               	movf	127,w
  6565  0008  00BB               	movwf	??_ISR+1
  6566                           
  6567                           ;ES_Port.c: 117: static unsigned int LastTime;
  6568                           ;ES_Port.c: 118: static unsigned int NextTime;
  6569                           ;ES_Port.c: 120: if (CCP1IF == 1)
  6570  0009  1D11               	btfss	17,2	;volatile
  6571  000A  282A               	goto	i1l3602
  6572                           
  6573                           ;ES_Port.c: 121: {
  6574                           ;ES_Port.c: 122: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  6575  000B  0025               	movlb	5	; select bank5
  6576  000C  0812               	movf	18,w	;volatile
  6577  000D  0020               	movlb	0	; select bank0
  6578  000E  00C2               	movwf	ISR@LastTime+1
  6579  000F  0025               	movlb	5	; select bank5
  6580  0010  0811               	movf	17,w	;volatile
  6581  0011  0020               	movlb	0	; select bank0
  6582  0012  00C1               	movwf	ISR@LastTime
  6583                           
  6584                           ;ES_Port.c: 123: NextTime = LastTime + ((32000000L/4/4)/100);
  6585  0013  0841               	movf	ISR@LastTime,w
  6586  0014  3E20               	addlw	32
  6587  0015  00C3               	movwf	ISR@NextTime
  6588  0016  304E               	movlw	78
  6589  0017  3D42               	addwfc	ISR@LastTime+1,w
  6590  0018  00C4               	movwf	ISR@NextTime+1
  6591                           
  6592                           ;ES_Port.c: 124: CCPR1H = (unsigned char)(NextTime >> 8);
  6593  0019  0844               	movf	ISR@NextTime+1,w
  6594  001A  0025               	movlb	5	; select bank5
  6595  001B  0092               	movwf	18	;volatile
  6596                           
  6597                           ;ES_Port.c: 125: CCPR1L = (unsigned char)(NextTime & 0xFF);
  6598  001C  0020               	movlb	0	; select bank0
  6599  001D  0843               	movf	ISR@NextTime,w
  6600  001E  0025               	movlb	5	; select bank5
  6601  001F  0091               	movwf	17	;volatile
  6602                           
  6603                           ;ES_Port.c: 126: CCP1IF = 0;
  6604  0020  0020               	movlb	0	; select bank0
  6605  0021  1111               	bcf	17,2	;volatile
  6606                           
  6607                           ;ES_Port.c: 127: TickCount++;
  6608  0022  3001               	movlw	1
  6609  0023  00BA               	movwf	??_ISR
  6610  0024  083A               	movf	??_ISR,w
  6611  0025  07D3               	addwf	_TickCount,f	;volatile
  6612                           
  6613                           ;ES_Port.c: 128: SysTickCounter++;
  6614  0026  3001               	movlw	1
  6615  0027  07C5               	addwf	_SysTickCounter,f	;volatile
  6616  0028  3000               	movlw	0
  6617  0029  3DC6               	addwfc	_SysTickCounter+1,f	;volatile
  6618  002A                     i1l3602:	
  6619                           
  6620                           ;ES_Port.c: 129: }
  6621                           ;ES_Port.c: 130: if (SSPIF == 1)
  6622  002A  1D91               	btfss	17,3	;volatile
  6623  002B  282F               	goto	i1l151
  6624                           
  6625                           ;ES_Port.c: 131: {
  6626                           ;ES_Port.c: 132: SSPIF = 0;
  6627  002C  1191               	bcf	17,3	;volatile
  6628                           
  6629                           ;ES_Port.c: 133: EOTResponse();
  6630  002D  318E  26AE         	fcall	_EOTResponse
  6631  002F                     i1l151:	
  6632  002F  0020               	movlb	0	; select bank0
  6633  0030  083B               	movf	??_ISR+1,w
  6634  0031  00FF               	movwf	127
  6635  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6636  0033  0009               	retfie
  6637  0034                     __end_of_ISR:	
  6638                           
  6639                           	psect	text34
  6640  0EAE                     __ptext34:	
  6641 ;; *************** function _EOTResponse *****************
  6642 ;; Defined at:
  6643 ;;		line 171 in file "SPI_Service.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  ThisEvent       3   23[BANK0 ] struct ES_Event_t
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        4 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		i1_PostSPI_Service
  6666 ;; This function is called by:
  6667 ;;		_ISR
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function _EOTResponse
  6673  0EAE                     _EOTResponse:	
  6674                           
  6675                           ;SPI_Service.c: 172: ES_Event ThisEvent;
  6676                           ;SPI_Service.c: 173: ThisEvent.EventType = BYTE_SENT;
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _EOTResponse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6680  0EAE  3005               	movlw	5
  6681  0EAF  00FD               	movwf	??_EOTResponse
  6682  0EB0  087D               	movf	??_EOTResponse,w
  6683  0EB1  0020               	movlb	0	; select bank0
  6684  0EB2  00B7               	movwf	EOTResponse@ThisEvent
  6685                           
  6686                           ;SPI_Service.c: 174: PostSPI_Service(ThisEvent);
  6687  0EB3  0837               	movf	EOTResponse@ThisEvent,w
  6688  0EB4  00B4               	movwf	i1PostSPI_Service@ThisEvent
  6689  0EB5  0838               	movf	EOTResponse@ThisEvent+1,w
  6690  0EB6  00B5               	movwf	i1PostSPI_Service@ThisEvent+1
  6691  0EB7  0839               	movf	EOTResponse@ThisEvent+2,w
  6692  0EB8  00B6               	movwf	i1PostSPI_Service@ThisEvent+2
  6693  0EB9  318E  2696         	fcall	i1_PostSPI_Service
  6694  0EBB  0008               	return
  6695  0EBC                     __end_of_EOTResponse:	
  6696                           
  6697                           	psect	text35
  6698  0E96                     __ptext35:	
  6699 ;; *************** function i1_PostSPI_Service *****************
  6700 ;; Defined at:
  6701 ;;		line 84 in file "SPI_Service.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  1    wreg      unsigned char 
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        3 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    3
  6722 ;; This function calls:
  6723 ;;		i1_ES_PostToService
  6724 ;; This function is called by:
  6725 ;;		_EOTResponse
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function i1_PostSPI_Service
  6731  0E96                     i1_PostSPI_Service:	
  6732  0E96                     i1l3440:	
  6733                           ;incstack = 0
  6734                           ; Regs used in i1_PostSPI_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6735                           
  6736                           
  6737                           ;SPI_Service.c: 86: return ES_PostToService( MyPriority, ThisEvent);
  6738                           ;	Return value of i1_PostSPI_Service is never used
  6739  0E96  0020               	movlb	0	; select bank0
  6740  0E97  0834               	movf	i1PostSPI_Service@ThisEvent,w
  6741  0E98  00AA               	movwf	i1ES_PostToService@TheEvent
  6742  0E99  0835               	movf	i1PostSPI_Service@ThisEvent+1,w
  6743  0E9A  00AB               	movwf	i1ES_PostToService@TheEvent+1
  6744  0E9B  0836               	movf	i1PostSPI_Service@ThisEvent+2,w
  6745  0E9C  00AC               	movwf	i1ES_PostToService@TheEvent+2
  6746  0E9D  084E               	movf	SPI_Service@MyPriority,w
  6747  0E9E  3185  25F3         	fcall	i1_ES_PostToService
  6748  0EA0  0008               	return
  6749  0EA1                     __end_ofi1_PostSPI_Service:	
  6750                           
  6751                           	psect	text36
  6752  05F3                     __ptext36:	
  6753 ;; *************** function i1_ES_PostToService *****************
  6754 ;; Defined at:
  6755 ;;		line 352 in file "ES_Framework.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;  WhichService    1    wreg     unsigned char 
  6758 ;;  TheEvent        3   10[BANK0 ] struct ES_Event_t
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;  WhichService    1   19[BANK0 ] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6770 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;Total ram usage:       10 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    2
  6777 ;; This function calls:
  6778 ;;		i1_ES_EnQueueFIFO
  6779 ;;		i1___wmul
  6780 ;; This function is called by:
  6781 ;;		i1_PostSPI_Service
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           
  6786                           ;psect for function i1_ES_PostToService
  6787  05F3                     i1_ES_PostToService:	
  6788                           
  6789                           ;incstack = 0
  6790                           ; Regs used in i1_ES_PostToService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6791                           ;i1ES_PostToService@WhichService stored from wreg
  6792  05F3  0020               	movlb	0	; select bank0
  6793  05F4  00B3               	movwf	i1ES_PostToService@WhichService
  6794                           
  6795                           ;ES_Framework.c: 353: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6796                           ;ES_Framework.c: 354: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6797                           ;ES_Framework.c: 355: 1 )){
  6798  05F5  3002               	movlw	2
  6799  05F6  0233               	subwf	i1ES_PostToService@WhichService,w
  6800  05F7  1803               	skipnc
  6801  05F8  2E3D               	goto	i1l3230
  6802  05F9  0833               	movf	i1ES_PostToService@WhichService,w
  6803  05FA  00AD               	movwf	??i1_ES_PostToService
  6804  05FB  01AE               	clrf	??i1_ES_PostToService+1
  6805  05FC  082D               	movf	??i1_ES_PostToService,w
  6806  05FD  00F7               	movwf	i1___wmul@multiplier
  6807  05FE  082E               	movf	??i1_ES_PostToService+1,w
  6808  05FF  00F8               	movwf	i1___wmul@multiplier+1
  6809  0600  3003               	movlw	3
  6810  0601  00F9               	movwf	i1___wmul@multiplicand
  6811  0602  3000               	movlw	0
  6812  0603  00FA               	movwf	i1___wmul@multiplicand+1
  6813  0604  318F  2730  3185   	fcall	i1___wmul
  6814  0607  0878               	movf	?i1___wmul+1,w
  6815  0608  0085               	movwf	5
  6816  0609  0877               	movf	?i1___wmul,w
  6817  060A  0084               	movwf	4
  6818  060B  30A8               	movlw	low (_EventQueues| (0+32768))
  6819  060C  0784               	addwf	4,f
  6820  060D  3080               	movlw	high (_EventQueues| (0+32768))
  6821  060E  3D85               	addwfc	5,f
  6822  060F  3F00               	moviw [0]fsr0
  6823  0610  0020               	movlb	0	; select bank0
  6824  0611  00B1               	movwf	i1_ES_PostToService$1333
  6825  0612  3F01               	moviw [1]fsr0
  6826  0613  00B2               	movwf	i1_ES_PostToService$1333+1
  6827  0614  0832               	movf	i1_ES_PostToService$1333+1,w
  6828  0615  00A1               	movwf	i1ES_EnQueueFIFO@pBlock+1
  6829  0616  0831               	movf	i1_ES_PostToService$1333,w
  6830  0617  00A0               	movwf	i1ES_EnQueueFIFO@pBlock
  6831  0618  082A               	movf	i1ES_PostToService@TheEvent,w
  6832  0619  00A2               	movwf	i1ES_EnQueueFIFO@Event2Add
  6833  061A  082B               	movf	i1ES_PostToService@TheEvent+1,w
  6834  061B  00A3               	movwf	i1ES_EnQueueFIFO@Event2Add+1
  6835  061C  082C               	movf	i1ES_PostToService@TheEvent+2,w
  6836  061D  00A4               	movwf	i1ES_EnQueueFIFO@Event2Add+2
  6837  061E  3184  24F1  3185   	fcall	i1_ES_EnQueueFIFO
  6838  0621  3A01               	xorlw	1
  6839  0622  1D03               	skipz
  6840  0623  2E3D               	goto	i1l3230
  6841                           
  6842                           ;ES_Framework.c: 356: Ready |= BitNum2SetMask[WhichService];
  6843  0624  0020               	movlb	0	; select bank0
  6844  0625  0833               	movf	i1ES_PostToService@WhichService,w
  6845  0626  00AD               	movwf	??i1_ES_PostToService
  6846  0627  01AE               	clrf	??i1_ES_PostToService+1
  6847  0628  35AD               	lslf	??i1_ES_PostToService,f
  6848  0629  0DAE               	rlf	??i1_ES_PostToService+1,f
  6849  062A  3051               	movlw	low (_BitNum2SetMask| (0+32768))
  6850  062B  072D               	addwf	??i1_ES_PostToService,w
  6851  062C  0084               	movwf	4
  6852  062D  3080               	movlw	high (_BitNum2SetMask| (0+32768))
  6853  062E  3D2E               	addwfc	??i1_ES_PostToService+1,w
  6854  062F  0085               	movwf	5
  6855  0630  3F00               	moviw [0]fsr0
  6856  0631  00AF               	movwf	??i1_ES_PostToService+2
  6857  0632  3F01               	moviw [1]fsr0
  6858  0633  00B0               	movwf	??i1_ES_PostToService+3
  6859  0634  082F               	movf	??i1_ES_PostToService+2,w
  6860  0635  0021               	movlb	1	; select bank1
  6861  0636  04C3               	iorwf	_Ready^(0+128),f
  6862  0637  0020               	movlb	0	; select bank0
  6863  0638  0830               	movf	??i1_ES_PostToService+3,w
  6864  0639  0021               	movlb	1	; select bank1
  6865  063A  04C4               	iorwf	(_Ready+1)^(0+128),f
  6866                           
  6867                           ;ES_Framework.c: 357: return 1;
  6868  063B  3001               	movlw	1
  6869                           
  6870                           ;ES_Framework.c: 358: } else
  6871  063C  0008               	return
  6872  063D                     i1l3230:	
  6873                           
  6874                           ;ES_Framework.c: 359: return 0;
  6875  063D  3000               	movlw	0
  6876  063E  0008               	return
  6877  063F                     __end_ofi1_ES_PostToService:	
  6878                           
  6879                           	psect	text37
  6880  04F1                     __ptext37:	
  6881 ;; *************** function i1_ES_EnQueueFIFO *****************
  6882 ;; Defined at:
  6883 ;;		line 85 in file "ES_Queue.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  6886 ;;		 -> Queue1(12), Queue0(18), 
  6887 ;;  Event2Add       3    2[BANK0 ] struct ES_Event_t
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  ES_EnQueueFI    2    8[BANK0 ] PTR struct .
  6890 ;;		 -> Queue1(12), Queue0(18), 
  6891 ;;  ES_EnQueueFI    1    7[BANK0 ] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      unsigned char 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6901 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;Total ram usage:       10 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    1
  6908 ;; This function calls:
  6909 ;;		i1___awmod
  6910 ;;		i1___wmul
  6911 ;; This function is called by:
  6912 ;;		i1_ES_PostToService
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function i1_ES_EnQueueFIFO
  6918  04F1                     i1_ES_EnQueueFIFO:	
  6919                           
  6920                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6921                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6922                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in i1_ES_EnQueueFIFO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6926  04F1  0020               	movlb	0	; select bank0
  6927  04F2  0821               	movf	i1ES_EnQueueFIFO@pBlock+1,w
  6928  04F3  00A9               	movwf	i1ES_EnQueueFIFO@pThisQueue+1
  6929  04F4  0820               	movf	i1ES_EnQueueFIFO@pBlock,w
  6930  04F5  00A8               	movwf	i1ES_EnQueueFIFO@pThisQueue
  6931                           
  6932                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6933  04F6  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  6934  04F7  0086               	movwf	6
  6935  04F8  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  6936  04F9  0087               	movwf	7
  6937  04FA  3142               	addfsr 1,2
  6938  04FB  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  6939  04FC  0084               	movwf	4
  6940  04FD  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  6941  04FE  0085               	movwf	5
  6942  04FF  0800               	movf	0,w
  6943  0500  0201               	subwf	1,w
  6944  0501  1803               	skipnc
  6945  0502  2D4B               	goto	i1l3102
  6946                           
  6947                           ;ES_Queue.c: 92: {
  6948                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6949  0503  080B               	movf	11,w	;volatile
  6950  0504  00A5               	movwf	??i1_ES_EnQueueFIFO
  6951  0505  0825               	movf	??i1_ES_EnQueueFIFO,w
  6952  0506  00A7               	movwf	i1ES_EnQueueFIFO@SaveCrit
  6953  0507  138B               	bcf	11,7	;volatile
  6954                           
  6955                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6956                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6957  0508  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  6958  0509  0086               	movwf	6
  6959  050A  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  6960  050B  0087               	movwf	7
  6961  050C  0801               	movf	1,w
  6962  050D  00A5               	movwf	??i1_ES_EnQueueFIFO
  6963  050E  01A6               	clrf	??i1_ES_EnQueueFIFO+1
  6964  050F  0825               	movf	??i1_ES_EnQueueFIFO,w
  6965  0510  00F0               	movwf	i1___awmod@divisor
  6966  0511  0826               	movf	??i1_ES_EnQueueFIFO+1,w
  6967  0512  00F1               	movwf	i1___awmod@divisor+1
  6968  0513  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  6969  0514  0086               	movwf	6
  6970  0515  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  6971  0516  0087               	movwf	7
  6972  0517  3142               	addfsr 1,2
  6973  0518  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  6974  0519  0084               	movwf	4
  6975  051A  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  6976  051B  0085               	movwf	5
  6977  051C  3101               	addfsr 0,1
  6978  051D  0800               	movf	0,w
  6979  051E  0701               	addwf	1,w
  6980  051F  00F2               	movwf	i1___awmod@dividend
  6981  0520  01F3               	clrf	i1___awmod@dividend+1
  6982  0521  0DF3               	rlf	i1___awmod@dividend+1,f
  6983  0522  3186  26CB  3184   	fcall	i1___awmod
  6984  0525  0870               	movf	?i1___awmod,w
  6985  0526  3E01               	addlw	1
  6986  0527  00F7               	movwf	i1___wmul@multiplier
  6987  0528  3000               	movlw	0
  6988  0529  3D71               	addwfc	?i1___awmod+1,w
  6989  052A  00F8               	movwf	i1___wmul@multiplier+1
  6990  052B  3003               	movlw	3
  6991  052C  00F9               	movwf	i1___wmul@multiplicand
  6992  052D  3000               	movlw	0
  6993  052E  00FA               	movwf	i1___wmul@multiplicand+1
  6994  052F  318F  2730         	fcall	i1___wmul
  6995  0531  0877               	movf	?i1___wmul,w
  6996  0532  0020               	movlb	0	; select bank0
  6997  0533  0720               	addwf	i1ES_EnQueueFIFO@pBlock,w
  6998  0534  0086               	movwf	6
  6999  0535  0878               	movf	?i1___wmul+1,w
  7000  0536  3D21               	addwfc	i1ES_EnQueueFIFO@pBlock+1,w
  7001  0537  0087               	movwf	7
  7002  0538  0822               	movf	i1ES_EnQueueFIFO@Event2Add,w
  7003  0539  3FC0               	movwi [0]fsr1
  7004  053A  0823               	movf	i1ES_EnQueueFIFO@Event2Add+1,w
  7005  053B  3FC1               	movwi [1]fsr1
  7006  053C  0824               	movf	i1ES_EnQueueFIFO@Event2Add+2,w
  7007  053D  3FC2               	movwi [2]fsr1
  7008                           
  7009                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7010  053E  3001               	movlw	1
  7011  053F  00A5               	movwf	??i1_ES_EnQueueFIFO
  7012  0540  0828               	movf	i1ES_EnQueueFIFO@pThisQueue,w
  7013  0541  0086               	movwf	6
  7014  0542  0829               	movf	i1ES_EnQueueFIFO@pThisQueue+1,w
  7015  0543  0087               	movwf	7
  7016  0544  3142               	addfsr 1,2
  7017  0545  0825               	movf	??i1_ES_EnQueueFIFO,w
  7018  0546  0781               	addwf	1,f
  7019                           
  7020                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7021  0547  0827               	movf	i1ES_EnQueueFIFO@SaveCrit,w
  7022  0548  008B               	movwf	11	;volatile
  7023                           
  7024                           ;ES_Queue.c: 101: return(1);
  7025  0549  3001               	movlw	1
  7026                           
  7027                           ;ES_Queue.c: 102: }else
  7028  054A  0008               	return
  7029  054B                     i1l3102:	
  7030                           
  7031                           ;ES_Queue.c: 103: return(0);
  7032  054B  3000               	movlw	0
  7033  054C  0008               	return
  7034  054D                     __end_ofi1_ES_EnQueueFIFO:	
  7035                           
  7036                           	psect	text38
  7037  0F30                     __ptext38:	
  7038 ;; *************** function i1___wmul *****************
  7039 ;; Defined at:
  7040 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  multiplier      2    7[COMMON] unsigned int 
  7043 ;;  multiplicand    2    9[COMMON] unsigned int 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  __wmul          2   11[COMMON] unsigned int 
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  2    7[COMMON] unsigned int 
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;Total ram usage:        6 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		i1_ES_PostToService
  7065 ;;		i1_ES_EnQueueFIFO
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function i1___wmul
  7071  0F30                     i1___wmul:	
  7072                           
  7073                           ;incstack = 0
  7074                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  7075  0F30  01FB               	clrf	i1___wmul@product
  7076  0F31  01FC               	clrf	i1___wmul@product+1
  7077  0F32                     i1l2940:	
  7078  0F32  1C77               	btfss	i1___wmul@multiplier,0
  7079  0F33  2F38               	goto	i1l543
  7080  0F34  0879               	movf	i1___wmul@multiplicand,w
  7081  0F35  07FB               	addwf	i1___wmul@product,f
  7082  0F36  087A               	movf	i1___wmul@multiplicand+1,w
  7083  0F37  3DFC               	addwfc	i1___wmul@product+1,f
  7084  0F38                     i1l543:	
  7085  0F38  3001               	movlw	1
  7086  0F39                     u272_25:	
  7087  0F39  35F9               	lslf	i1___wmul@multiplicand,f
  7088  0F3A  0DFA               	rlf	i1___wmul@multiplicand+1,f
  7089  0F3B  0B89               	decfsz	9,f
  7090  0F3C  2F39               	goto	u272_25
  7091  0F3D  3001               	movlw	1
  7092  0F3E                     u273_25:	
  7093  0F3E  36F8               	lsrf	i1___wmul@multiplier+1,f
  7094  0F3F  0CF7               	rrf	i1___wmul@multiplier,f
  7095  0F40  0B89               	decfsz	9,f
  7096  0F41  2F3E               	goto	u273_25
  7097  0F42  0877               	movf	i1___wmul@multiplier,w
  7098  0F43  0478               	iorwf	i1___wmul@multiplier+1,w
  7099  0F44  1D03               	btfss	3,2
  7100  0F45  2F32               	goto	i1l2940
  7101  0F46  087C               	movf	i1___wmul@product+1,w
  7102  0F47  00F8               	movwf	?i1___wmul+1
  7103  0F48  087B               	movf	i1___wmul@product,w
  7104  0F49  00F7               	movwf	?i1___wmul
  7105  0F4A  0008               	return
  7106  0F4B                     __end_ofi1___wmul:	
  7107                           
  7108                           	psect	text39
  7109  06CB                     __ptext39:	
  7110 ;; *************** function i1___awmod *****************
  7111 ;; Defined at:
  7112 ;;		line 6 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  divisor         2    0[COMMON] int 
  7115 ;;  dividend        2    2[COMMON] int 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  __awmod         1    6[COMMON] unsigned char 
  7118 ;;  __awmod         1    5[COMMON] unsigned char 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  2    0[COMMON] int 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;Total ram usage:        7 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		i1_ES_EnQueueFIFO
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function i1___awmod
  7143  06CB                     i1___awmod:	
  7144                           
  7145                           ;incstack = 0
  7146                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  7147  06CB  01F6               	clrf	i1___awmod@sign
  7148  06CC  1FF3               	btfss	i1___awmod@dividend+1,7
  7149  06CD  2ED5               	goto	i1l2960
  7150  06CE  09F2               	comf	i1___awmod@dividend,f
  7151  06CF  09F3               	comf	i1___awmod@dividend+1,f
  7152  06D0  0AF2               	incf	i1___awmod@dividend,f
  7153  06D1  1903               	skipnz
  7154  06D2  0AF3               	incf	i1___awmod@dividend+1,f
  7155  06D3  01F6               	clrf	i1___awmod@sign
  7156  06D4  0AF6               	incf	i1___awmod@sign,f
  7157  06D5                     i1l2960:	
  7158  06D5  1FF1               	btfss	i1___awmod@divisor+1,7
  7159  06D6  2EDC               	goto	i1l2964
  7160  06D7  09F0               	comf	i1___awmod@divisor,f
  7161  06D8  09F1               	comf	i1___awmod@divisor+1,f
  7162  06D9  0AF0               	incf	i1___awmod@divisor,f
  7163  06DA  1903               	skipnz
  7164  06DB  0AF1               	incf	i1___awmod@divisor+1,f
  7165  06DC                     i1l2964:	
  7166  06DC  0870               	movf	i1___awmod@divisor,w
  7167  06DD  0471               	iorwf	i1___awmod@divisor+1,w
  7168  06DE  1903               	btfsc	3,2
  7169  06DF  2F03               	goto	i1l2982
  7170  06E0  01F5               	clrf	i1___awmod@counter
  7171  06E1  0AF5               	incf	i1___awmod@counter,f
  7172  06E2                     i1l2972:	
  7173  06E2  1BF1               	btfsc	i1___awmod@divisor+1,7
  7174  06E3  2EEE               	goto	i1l2974
  7175  06E4  3001               	movlw	1
  7176  06E5                     u278_25:	
  7177  06E5  35F0               	lslf	i1___awmod@divisor,f
  7178  06E6  0DF1               	rlf	i1___awmod@divisor+1,f
  7179  06E7  0B89               	decfsz	9,f
  7180  06E8  2EE5               	goto	u278_25
  7181  06E9  3001               	movlw	1
  7182  06EA  00F4               	movwf	??i1___awmod
  7183  06EB  0874               	movf	??i1___awmod,w
  7184  06EC  07F5               	addwf	i1___awmod@counter,f
  7185  06ED  2EE2               	goto	i1l2972
  7186  06EE                     i1l2974:	
  7187  06EE  0871               	movf	i1___awmod@divisor+1,w
  7188  06EF  0273               	subwf	i1___awmod@dividend+1,w
  7189  06F0  1D03               	skipz
  7190  06F1  2EF4               	goto	u280_25
  7191  06F2  0870               	movf	i1___awmod@divisor,w
  7192  06F3  0272               	subwf	i1___awmod@dividend,w
  7193  06F4                     u280_25:	
  7194  06F4  1C03               	skipc
  7195  06F5  2EFA               	goto	i1l2978
  7196  06F6  0870               	movf	i1___awmod@divisor,w
  7197  06F7  02F2               	subwf	i1___awmod@dividend,f
  7198  06F8  0871               	movf	i1___awmod@divisor+1,w
  7199  06F9  3BF3               	subwfb	i1___awmod@dividend+1,f
  7200  06FA                     i1l2978:	
  7201  06FA  3001               	movlw	1
  7202  06FB                     u281_25:	
  7203  06FB  36F1               	lsrf	i1___awmod@divisor+1,f
  7204  06FC  0CF0               	rrf	i1___awmod@divisor,f
  7205  06FD  0B89               	decfsz	9,f
  7206  06FE  2EFB               	goto	u281_25
  7207  06FF  3001               	movlw	1
  7208  0700  02F5               	subwf	i1___awmod@counter,f
  7209  0701  1D03               	btfss	3,2
  7210  0702  2EEE               	goto	i1l2974
  7211  0703                     i1l2982:	
  7212  0703  0876               	movf	i1___awmod@sign,w
  7213  0704  1903               	btfsc	3,2
  7214  0705  2F0B               	goto	i1l2986
  7215  0706  09F2               	comf	i1___awmod@dividend,f
  7216  0707  09F3               	comf	i1___awmod@dividend+1,f
  7217  0708  0AF2               	incf	i1___awmod@dividend,f
  7218  0709  1903               	skipnz
  7219  070A  0AF3               	incf	i1___awmod@dividend+1,f
  7220  070B                     i1l2986:	
  7221  070B  0873               	movf	i1___awmod@dividend+1,w
  7222  070C  00F1               	movwf	?i1___awmod+1
  7223  070D  0872               	movf	i1___awmod@dividend,w
  7224  070E  00F0               	movwf	?i1___awmod
  7225  070F  0008               	return
  7226  0710                     __end_ofi1___awmod:	
  7227  007E                     btemp	set	126	;btemp
  7228  007E                     int$flags	set	126
  7229  007E                     wtemp	set	126
  7230  007E                     wtemp0	set	126
  7231  0080                     wtemp1	set	128
  7232  0082                     wtemp2	set	130
  7233  0084                     wtemp3	set	132
  7234  0086                     wtemp4	set	134
  7235  0088                     wtemp5	set	136
  7236  007F                     wtemp6	set	127
  7237  007E                     ttemp	set	126
  7238  007E                     ttemp0	set	126
  7239  0081                     ttemp1	set	129
  7240  0084                     ttemp2	set	132
  7241  0087                     ttemp3	set	135
  7242  007F                     ttemp4	set	127
  7243  007E                     ltemp	set	126
  7244  007E                     ltemp0	set	126
  7245  0082                     ltemp1	set	130
  7246  0086                     ltemp2	set	134
  7247  0080                     ltemp3	set	128


Data Sizes:
    Strings     89
    Constant    99
    Data        0
    BSS         151
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      52
    BANK1            80     23      80
    BANK2            80     10      80
    BANK3            80     28      28
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i1_ES_PostToService$1333	const PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_Timer_Tick_Resp$1271	const PTR FTN(struct ES_Event_t,)unsigned char  size(2) Largest target is 1
		 -> PostSPI_Service(), PostToggleService(), Absolute function(), 

    ES_CheckUserEvents$1270	const PTR FTN()unsigned char  size(2) Largest target is 1
		 -> CheckButtonEvents(), Check4Keystroke(), 

    ES_PostToService$1261	const PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_Run$1255	const PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI_Service(), PostToggleService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(1) Largest target is 3
		 -> ES_Run@ThisEvent(BANK1[3]), ES_RecallEvents@RecalledEvent(COMMON[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostToggleService(), 

    S119$pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK1[12]), Queue0(BANK2[18]), 

    S88$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI_Service(), RunToggleService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI_Service(), RunToggleService(), 

    S88$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI_Service(), InitToggleService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI_Service(), InitToggleService(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> CheckButtonEvents(), Check4Keystroke(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_EOTResponse
    i1_ES_PostToService->i1___wmul
    i1_ES_EnQueueFIFO->i1___wmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_EOTResponse
    _EOTResponse->i1_PostSPI_Service
    i1_PostSPI_Service->i1_ES_PostToService
    i1_ES_PostToService->i1_ES_EnQueueFIFO

Critical Paths under _main in BANK1

    _ES_DeQueue->___wmul
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _InitSPI->_FormPacket
    _ES_Timer_Init->__HW_Timer_Init
    _ES_InitQueue->___wmul

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _PostToggleService->_ES_PostToService
    _PostSPI_Service->_ES_PostToService
    _PostButtonDebounceSM->_ES_PostToService
    _InitToggleService->_ES_PostToService

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ES_Run
    _ES_Run->_RunSPI_Service
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostSPI_Service
    _ES_Timer_Tick_Resp->_PostToggleService
    _RunSPI_Service->_sendByte
    _sendByte->_PostSPI_Service
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _ES_Initialize->_InitToggleService

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   58973
                                             26 BANK3      2     2      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              19    17      2     428
                                              0 BANK1      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               7     7      0   45317
                                             19 BANK3      7     7      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                     _RunSPI_Service *
                   _RunToggleService *
           __HW_Process_Pending_Ints
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   14196
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   14196
                                              3 BANK3      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                    _PostSPI_Service *
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    6744
                                              0 BANK3      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                       9     7      2     443
                                              0 BANK1      9     7      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3     915
                                              9 BANK3      6     3      3
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (2) _RunSPI_Service                                      10     7      3   16712
                                              9 BANK3     10     7      3
                 _ES_Timer_InitTimer
                         _FormPacket
                    _PostSPI_Service
                             _SetBGR
                           _sendByte
 ---------------------------------------------------------------------------------
 (3) _sendByte                                             6     6      0    7108
                                              3 BANK3      6     6      0
                    _PostSPI_Service
 ---------------------------------------------------------------------------------
 (4) _PostSPI_Service                                      3     0      3    7009
                                              0 BANK3      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          11     8      3    3410
                                             13 BANK1      7     4      3
                                              0 BANK2      4     4      0
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     322
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   3     3      0    7220
                                              9 BANK3      3     3      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    6     6      0    7090
                                              3 BANK3      6     6      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    6889
                                              0 BANK3      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                       11     9      2   13160
                                              5 BANK3     11     9      2
                       _ES_InitQueue
                      _ES_Timer_Init
                    _InitSPI_Service *
                  _InitToggleService *
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    5     4      1    7559
                                              0 BANK3      5     4      1
                   _ES_PostToService
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                    10     7      3    6678
                                              0 BANK2     10     7      3
                     _ES_EnQueueFIFO
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      10     5      5    3509
                                             13 BANK1     10     5      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2320
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              7     3      4     613
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _InitSPI_Service                                      2     1      1    2400
                                              0 BANK3      2     1      1
                 _ES_Timer_InitTimer
                            _InitSPI
                             _SetBGR
 ---------------------------------------------------------------------------------
 (3) _SetBGR                                               4     2      2     813
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _InitSPI                                              1     1      0     675
                                              6 BANK1      1     1      0
                         _FormPacket
 ---------------------------------------------------------------------------------
 (3) _FormPacket                                           6     6      0     675
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   7     5      2     816
                                              0 BANK1      7     5      2
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                              2 BANK1      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         6     3      3     295
                                             13 BANK1      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  2     2      0    1530
                                             26 BANK0      2     2      0
                        _EOTResponse
 ---------------------------------------------------------------------------------
 (9) _EOTResponse                                          4     4      0    1530
                                             13 COMMON     1     1      0
                                             23 BANK0      3     3      0
                  i1_PostSPI_Service
 ---------------------------------------------------------------------------------
 (10) i1_PostSPI_Service                                   3     0      3    1496
                                             20 BANK0      3     0      3
                 i1_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i1_ES_PostToService                                 10     7      3    1430
                                             10 BANK0     10     7      3
                   i1_ES_EnQueueFIFO
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1_ES_EnQueueFIFO                                   10     5      5    1062
                                              0 BANK0     10     5      5
                          i1___awmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     204
                                              7 COMMON     6     2      4
                          i1___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i1___awmod                                           7     3      4     503
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
       ___wmul (ARG)
         ___awmod (ARG)
     _ES_Timer_Init
       __HW_Timer_Init
     _InitSPI_Service *
       _ES_Timer_InitTimer
       _InitSPI
         _FormPacket
       _SetBGR
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
         ___wmul
           ___awmod (ARG)
       _ES_Timer_InitTimer
     ___wmul *
       ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunSPI_Service *
       _ES_Timer_InitTimer
       _FormPacket
       _PostSPI_Service
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
           ___wmul
             ___awmod (ARG)
       _SetBGR
       _sendByte
         _PostSPI_Service
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
     _RunToggleService *
       _ES_Timer_InitTimer
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostSPI_Service *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
     ___wmul *
       ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _EOTResponse
     i1_PostSPI_Service
       i1_ES_PostToService
         i1_ES_EnQueueFIFO
           i1___awmod
           i1___wmul
             i1___awmod (ARG)
         i1___wmul
           i1___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      34       5       65.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     17      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     1C      1C      11       35.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      FE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      FE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 21 14:14:07 2016

                   ??__HW_Timer_Init 003C                  ES_CheckUserEvents@i 01AB  
         CheckButtonEvents@ReturnVal 01A4                          _SSPSTATbits 0214  
                __HW_Timer_Init@Rate 00D9                  ___wmul@multiplicand 00E2  
                   i1___wmul@product 007B             PostSPI_Service@ThisEvent 01A0  
                                l440 0268                                  l345 05F2  
                                l543 0F6F                                  l458 07B8  
                                l378 0FED                                  l812 0FD8  
                                _BGR 003C                __end_of_ES_Initialize 01BB  
                                _GIE 005F                                  _RA0 0060  
                                _RA1 0061                                  _RA2 0062  
                                _ISR 0004                         ___awmod@sign 00DF  
            __end_of_Check4Keystroke 0004                                  wreg 0009  
             ES_EnQueueFIFO@SaveCrit 00ED              ES_EnQueueFIFO@Event2Add 00E8  
                  ?_ES_PostToService 0166                                 ?_ISR 0070  
         ES_Timer_Tick_Resp@NewEvent 00C0                                 l3000 067D  
                               l3004 0683                                 l3012 0F06  
                               l3022 041B                                 l3040 0433  
                               l3034 042E                                 l3052 045F  
                               l3044 0440                                 l3028 0429  
                               l3204 0FC5                                 l3300 0EA1  
                               l3062 0483                                 l3118 0391  
                               l3302 0EAC                                 l3048 044F  
                               l3400 02A7                                 l3128 03F7  
                               l3058 047B                                 l3332 077E  
                               l3172 07C4                                 l3412 02BA  
                               l3190 0796                                 l3270 023A  
                               l3350 0FF8                                 l3430 02DE  
                               l3194 07A3                                 l3274 024B  
                               l3426 02DB                                 l3434 02EE  
                               l3530 0F87                                 l3460 014C  
                               l3452 011E                                 l3348 0FF0  
                               l3380 0269                                 l3470 01B9  
                               l3278 0258                                 l3456 014A  
                               l3392 0291                                 l3480 034F  
                               l3466 01B0                                 l3386 027C  
                               l3490 0384                                 l3474 02F8  
                               l2916 04EF                                 l3396 0299  
                               l2870 0697                                 l2846 0F69  
                               l2934 05A4                                 l3486 0379  
                               l3670 05C2                                 l2880 06A9  
                               l3672 05CB                                 l3680 05E6  
                               l2866 0690                                 l3674 05D4  
                               l2892 06C6                                 l2884 06B5  
                               l3676 05DD                                 l2878 069D  
                               l2888 06BE                                 l2996 064A  
                               STR_1 00B4                                 STR_2 00CF  
                               STR_3 00E7                                 STR_4 00FE  
                               u3005 0466                                 _LATA 010C  
                               _LATC 010E                                 u3165 0FC8  
                               _PIE1 0091                                 u2625 06A0  
                               u2645 06AF                                 u2565 0F70  
                               u2655 06B6                                 u2575 0F75  
                               u2855 0651                                 u2864 065A  
                               u2865 0658                                 u2955 043B  
                               u2885 0667                                 u2975 044A  
                               u2995 045A                   ??_ES_PostToService 0169  
                               _main 05A6                          ?_ES_DeQueue 00E6  
                        FormPacket@i 00DB                          FormPacket@j 00DE  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        main@ErrorType 01BB  
                      __CFG_BOREN$ON 0000                ?_PostButtonDebounceSM 01A0  
                               ltemp 007E                                 start 0034  
                               ttemp 007E            i1ES_EnQueueFIFO@Event2Add 0022  
                               wtemp 007E                        __CFG_MCLRE$ON 0000  
         i1PostSPI_Service@ThisEvent 0034                 __end_of_GetInputLine 0E90  
                    __end_of_InitSPI 0F30                                ??_ISR 003A  
            __end_of_InitSPI_Service 07F7                         ?_EOTResponse 0070  
            __size_of_RunSPI_Service 009D                   ES_Run@HighestPrior 01B9  
              _ES_PostToService$1261 016D                                ?_main 0070  
              __end_of_ES_Timer_Init 07FF                        __CFG_WDTE$OFF 0000  
                    __end_of___awmod 06CB                      __end_of___lbmod 0FDE  
           __end_of_RunToggleService 1000                                _T1CON 0018  
                         _DistList00 00B2                                _IRCF0 04CB  
                              _IRCF1 04CC                                _IRCF2 04CD  
                              _IRCF3 04CE                                i1l151 002F  
                              i1l543 0F38           __size_of_CheckButtonEvents 002C  
                              _PORTA 000C                                _PORTC 000E  
                              _TRISA 008C                                _TRISC 008E  
                              _SSPIE 048B                                _SSPIF 008B  
                              _Ready 00C3          __size_ofi1_ES_PostToService 004C  
                     i1___awmod@sign 0076                                _putch 07FF  
                   i1_ES_EnQueueFIFO 04F1                                pclath 000A  
                   __end_ofi1___wmul 0F4B                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                  i1___wmul@multiplier 0077  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                           _FormPacket 0415  
                 __size_ofi1___awmod 0045                      __initialization 0036  
             ES_GetMSBitSet@LoopCntr 00E1           __end_of_ES_CheckUserEvents 0FBE  
                       __end_of_main 05F3                    ES_Timer_Init@Rate 00DB  
                __end_of_EventQueues 00AE                               ??_main 01BA  
                __size_of_ES_DeQueue 009F                      _Nybble2MSBitNum 0091  
   __end_of__HW_Process_Pending_Ints 0EAE                     ?_Check4Keystroke 0070  
                             _CCP1IF 008A                               _CCPR1H 0292  
                             _CCPR1L 0291                           _MyPriority 0052  
                             _ANSELA 018C                               ?_putch 0070  
                             _ANSELC 018E                     ??_ES_GetMSBitSet 00DB  
                             i1l3102 054B                               i1l3230 063D  
                             i1l3440 0E96                               i1l3602 002A  
                             i1l2940 0F32                               i1l2960 06D5  
                             i1l2972 06E2                               i1l2964 06DC  
                             i1l2974 06EE                               i1l2982 0703  
                             i1l2986 070B                               i1l2978 06FA  
                             _INTCON 000B                               u280_25 06F4  
                             u272_25 0F39                               u281_25 06FB  
                             u273_25 0F3E                               u278_25 06E5  
                             _ES_Run 02F7               ??_PostButtonDebounceSM 003C  
                             _SSPADD 0212                               _SSPBUF 0211  
                          ??_InitSPI 00DF                     ??_ES_EnQueueFIFO 00EB  
                     _Timer2PostFunc 0071                       __CFG_PWRTE$OFF 0000  
                             _SetBGR 0EEE                               _Queue0 0154  
                             _Queue1 00CA                       _SysTickCounter 0045  
                             ___wmul 0F66                            ??___awmod 00DD  
                          ??___lbmod 00DA                     ?_InitSPI_Service 01A0  
        __size_of_ES_Timer_InitTimer 003A                      ___awmod@divisor 00D9  
          ES_Timer_InitTimer@NewTime 00D9                      ___awmod@counter 00DE  
                             _printf 0F82                     __end_of_sendByte 07D2  
                        ISR@LastTime 0041                    __end_ofi1___awmod 0710  
             ES_InitQueue@pThisQueue 00EA                          ISR@NextTime 0043  
                             putch@c 0070          __size_of_ES_Timer_Tick_Resp 008D  
               ES_DeQueue@pThisQueue 0168              ES_GetMSBitSet@Val2Check 00D9  
                    ___lbmod@divisor 00D9              __end_of__initialization 004D  
             __end_of_Timer2PostFunc 0091                      ___lbmod@counter 00DD  
                        ?_FormPacket 0070                __size_of_GetInputLine 0005  
                  i1_PostSPI_Service 0E96                   ?i1_PostSPI_Service 0034  
                        _EventQueues 00A8                       __pcstackCOMMON 0070  
           __size_of_PostSPI_Service 0015                       _RunSPI_Service 025A  
                      ?_ES_InitQueue 00E6              __end_of_Nybble2MSBitNum 00A0  
                      __end_of_putch 0800                  ??i1_PostSPI_Service 007D  
                    _TMR_ActiveFlags 0047                          _BytesToSend 0120  
               __size_of_EOTResponse 000E                            ?i1___wmul 0077  
            ES_GetMSBitSet@ReturnVal 00DF            RunSPI_Service@ReturnEvent 01AD  
                     _TMR_TimerArray 00A0                         _GetInputLine 0E8B  
           ES_EnQueueFIFO@pThisQueue 00EE              InitSPI_Service@Priority 01A0  
                            ??_putch 003C             __HW_Process_Pending_Ints 0EA1  
                         __pbssBANK0 003C                           __pbssBANK1 00A0  
                         __pbssBANK2 0120            __end_ofi1_PostSPI_Service 0EA1  
                            ?_ES_Run 0070                         ??_ES_DeQueue 00E9  
                            ?_SetBGR 00D9               __end_of_RunSPI_Service 02F7  
                         __pmaintext 05A6            __size_of_ES_PostToService 0059  
                     ??_ES_InitQueue 00E9                              ?___wmul 00E0  
                      sendByte@dummy 01A4                           __pintentry 0004  
           __end_ofi1_ES_EnQueueFIFO 054D                              _CCP1CON 0293  
                            ?_printf 00D9                           ??i1___wmul 007B  
         i1ES_EnQueueFIFO@pThisQueue 0028                    ?_RunToggleService 01A9  
                __size_of_FormPacket 007F                   __end_of_ES_DeQueue 025A  
          _PostSPI_Service$intlevel0 0F06                   ??_RunToggleService 003C  
                  sendByte@ThisEvent 01A5                              _SSPCON1 0215  
                            _SSPSTAT 0214                              SetBGR@B 00DC  
                            SetBGR@G 00D9                              SetBGR@R 00DA  
                    __size_of_ES_Run 0091                              _InitSPI 0F17  
            ToggleService@MyPriority 0050                            ?_sendByte 0070  
             __size_of_ES_Initialize 00AE                      __size_of_SetBGR 0014  
                    ?_RunSPI_Service 01A9                              ___awmod 0685  
                            ___lbmod 0FBE                      __size_of___wmul 001C  
              ES_Timer_InitTimer@Num 00DF                              __ptext1 0F82  
                            __ptext2 07FF                              __ptext3 02F7  
                            __ptext4 0EA1                              __ptext5 0388  
                            __ptext6 0F02                              __ptext7 0EDD  
                            __ptext8 063F                              __ptext9 025A  
                    __size_of_printf 001D                    ??_PostSPI_Service 003C  
                  _PostToggleService 0EDD                         __size_of_ISR 0030  
         __end_ofi1_ES_PostToService 063F              __size_of__HW_Timer_Init 0010  
                   ___awmod@dividend 00DB                   _ES_CheckUserEvents 0F9F  
                 ?_PostToggleService 01A0                      ES_Run@ThisEvent 00D6  
          InitToggleService@Priority 01A0                              clrloop0 0E91  
               end_of_initialization 004D                  ?_ES_CheckUserEvents 0070  
                ??_PostToggleService 003C           __size_ofi1_PostSPI_Service 000B  
              SPI_Service@MyPriority 004E                   Button@CurrentState 004B  
       ES_PostToService@WhichService 016F               __size_of_ES_Timer_Init 0008  
                         ??_sendByte 01A3                              printf@c 00DF  
                            printf@f 00D9                         __pstringtext 0051  
               ??_ES_CheckUserEvents 01A9                i1___wmul@multiplicand 0079  
          __end_of_PostToggleService 0EEE                        _ES_Initialize 010D  
                   __CFG_FOSC$INTOSC 0000                     ___lbmod@dividend 00DC  
                          i1___awmod 06CB                 __end_of_ES_EventList 00B2  
               __end_of_ES_InitQueue 0F66                       ES_Initialize@i 01AF  
                        ___lbmod@rem 00DE             __size_of_Check4Keystroke 0002  
         PostToggleService@ThisEvent 01A0                         ??_FormPacket 00D9  
          RunToggleService@ThisEvent 01A9                       __end_of_ES_Run 0388  
      __size_of_PostButtonDebounceSM 0011                   __end_of_DistList00 00B4  
                   _ES_PostToService 054D                       __end_of_SetBGR 0F02  
         __end_of_ES_Timer_InitTimer 074A                 __end_of_ServDescList 00A8  
                     __end_of___wmul 0F82                       ?_ES_Initialize 01A5  
         ??__HW_Process_Pending_Ints 003C                        _ES_Timer_Init 07F7  
                     __end_of_printf 0F9F                            _FirstSend 00C6  
         __end_of_ES_Timer_Tick_Resp 0415             __size_of_InitSPI_Service 0025  
                start_initialization 0036                   __end_of_FormPacket 0494  
                  __size_ofi1___wmul 001B                          __end_of_ISR 0034  
                         ?i1___awmod 0070                         _CurrentState 0051  
                           ??_ES_Run 01B3                    _InitToggleService 074A  
                          _TickCount 0053                             ??_SetBGR 00DB  
                 ?_InitToggleService 01A0              __size_of_ES_GetMSBitSet 0046  
          TemplateService@MyPriority 004F                        ??_EOTResponse 007D  
                           ??___wmul 003C                   i1___awmod@dividend 0072  
                ??_InitToggleService 01A1                    ?i1_ES_EnQueueFIFO 0020  
         __size_of_PostToggleService 0011              __size_of_ES_EnQueueFIFO 005D  
                           ??_printf 00DB                       ?_ES_Timer_Init 00DB  
                 ??i1_ES_EnQueueFIFO 0025                       __HW_Timer_Init 0EBC  
                          ___latbits 0003                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D9                        __pcstackBANK2 0166  
                      __pcstackBANK3 01A0                   ES_InitQueue@pBlock 00E6  
        RunSPI_Service@ThisEvent_771 01B0            __end_of_InitToggleService 0780  
                   ??_RunSPI_Service 01AC  CheckButtonEvents@CurrentButtonState 01A8  
          __size_of_RunToggleService 0022                        __PRIMASK_temp 0049  
                           ?_InitSPI 0070                      _PostSPI_Service 0F02  
                       sendByte@Data 01A8                    ??_Check4Keystroke 003C  
                  __size_of_sendByte 0026              SPI_Service@CurrentState 00C5  
                           ?___awmod 00D9                             ?___lbmod 00D9  
                    ??_ES_Initialize 01A7             ES_PostToService@TheEvent 0166  
             __end_of__HW_Timer_Init 0ECC        PostButtonDebounceSM@ThisEvent 01A0  
                __end_of_EOTResponse 0EBC                __size_of_ES_InitQueue 001B  
             i1ES_EnQueueFIFO@pBlock 0020                          ??i1___awmod 0074  
        RunToggleService@ReturnEvent 01AC                       __size_of_putch 0001  
               ES_Initialize@NewRate 01A5                    ??_InitSPI_Service 01A1  
          ES_GetMSBitSet@Nybble2Test 00E0                   i1_ES_PostToService 05F3  
                           _LEDColor 00C7                       ___wmul@product 00E4  
                          clear_ram0 0E90                     FormPacket@ledNum 00DD  
         i1ES_PostToService@TheEvent 002A                  ?i1_ES_PostToService 002A  
                       _ES_EventList 00AE                         _NumBytesLeft 00C9  
                       _ES_InitQueue 0F4B                      ??_ES_Timer_Init 003C  
           i1ES_EnQueueFIFO@SaveCrit 0027                      ?__HW_Timer_Init 00D9  
                  ___wmul@multiplier 00E0                             i1___wmul 0F30  
                 ES_DeQueue@SaveCrit 0166                 ES_EnQueueFIFO@pBlock 00E6  
               ??i1_ES_PostToService 002D             __end_of_ES_PostToService 05A6  
                     _BitNum2SetMask 0051                         _ServDescList 00A0  
         __size_of_InitToggleService 0036              __end_of_PostSPI_Service 0F17  
                   __size_of_InitSPI 0019                       _ES_GetMSBitSet 063F  
                  i1___awmod@divisor 0070                          _EOTResponse 0EAE  
                  i1___awmod@counter 0075                     __size_of___awmod 0046  
                   __size_of___lbmod 0020          __size_of_ES_CheckUserEvents 001F  
                     _ES_EnQueueFIFO 0494         __end_of_PostButtonDebounceSM 0EDD  
     i1ES_PostToService@WhichService 0033                   _ES_Timer_InitTimer 0710  
                      ?_GetInputLine 0070               __end_of_BitNum2SetMask 0071  
                           __ptext10 0FDE                             __ptext11 07AC  
                           __ptext20 07D2                             __ptext12 01BB  
                           __ptext21 074A                             __ptext13 0FBE  
                           __ptext30 07F7                             __ptext22 054D  
                           __ptext14 0F9F                             __ptext31 0EBC  
                           __ptext23 0494                             __ptext15 0002  
                           __ptext32 0F4B                             __ptext24 0F66  
                           __ptext16 0780                             __ptext25 0685  
                           __ptext17 0ECC                             __ptext34 0EAE  
                           __ptext26 0EEE                             __ptext18 0E8B  
                           __ptext35 0E96                             __ptext27 0F17  
                           __ptext19 010D                             __ptext36 05F3  
                           __ptext28 0415                             __ptext37 04F1  
                           __ptext29 0710                             __ptext38 0F30  
                           __ptext39 06CB    ES_Timer_Tick_Resp@NeedsProcessing 003F  
                ?_ES_Timer_InitTimer 00D9                        __size_of_main 004D  
                   _RunToggleService 0FDE                   _ES_Timer_Tick_Resp 0388  
             __end_of_ES_GetMSBitSet 0685                      FormPacket@i_797 00DC  
                           _sendByte 07AC           InitToggleService@ThisEvent 01A2  
                        _ES_Run$1255 01B7                  ?_ES_Timer_Tick_Resp 0070  
               EOTResponse@ThisEvent 0037               __end_of_ES_EnQueueFIFO 04F1  
                           int$flags 007E                 ??_ES_Timer_InitTimer 00DB  
                  ES_DeQueue@NumLeft 0167                     Button@MyPriority 004C  
                     ??_GetInputLine 003C                    _CheckButtonEvents 0780  
               ??_ES_Timer_Tick_Resp 01A3                   ?_CheckButtonEvents 0070  
          __size_ofi1_ES_EnQueueFIFO 005C                      _Check4Keystroke 0002  
                           intlevel1 0000                     ?_PostSPI_Service 01A0  
            RunSPI_Service@ThisEvent 01A9                           _ES_DeQueue 01BB  
  __size_of__HW_Process_Pending_Ints 000D            ?__HW_Process_Pending_Ints 0070  
                    ?_ES_GetMSBitSet 00D9                  ??_CheckButtonEvents 01A3  
            i1_ES_PostToService$1333 0031  ES_Timer_Tick_Resp@NextTimer2Process 004D  
                           printf@ap 00DE                      ?_ES_EnQueueFIFO 00E6  
                   ES_DeQueue@pBlock 00E6                      _InitSPI_Service 07D2  
          __end_of_CheckButtonEvents 07AC                      _LastButtonState 00C8  
             ES_DeQueue@pReturnEvent 00E8                ES_InitQueue@BlockSize 00E8  
               _PostButtonDebounceSM 0ECC           CheckButtonEvents@ThisEvent 01A5  
