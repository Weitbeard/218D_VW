

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Oct 26 15:10:25 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           	psect	smallconst
    59  000300                     __psmallconst:
    60                           	opt stack 0
    61  000300  00                 	db	0
    62  000301                     _BitNum2SetMask:
    63                           	opt stack 0
    64  000301  0001               	dw	1
    65  000303  0002               	dw	2
    66  000305  0004               	dw	4
    67  000307  0008               	dw	8
    68  000309  0010               	dw	16
    69  00030B  0020               	dw	32
    70  00030D  0040               	dw	64
    71  00030F  0080               	dw	128
    72  000311  0100               	dw	256
    73  000313  0200               	dw	512
    74  000315  0400               	dw	1024
    75  000317  0800               	dw	2048
    76  000319  1000               	dw	4096
    77  00031B  2000               	dw	8192
    78  00031D  4000               	dw	16384
    79  00031F  8000               	dw	32768
    80  000321                     __end_of_BitNum2SetMask:
    81                           	opt stack 0
    82  000321                     _Timer2PostFunc:
    83                           	opt stack 0
    84  000321  D6                 	db	low _PostToggleService
    85  000322  13                 	db	high _PostToggleService
    86  000323  88                 	db	low _PostSPI_Service
    87  000324  13                 	db	high _PostSPI_Service
    88  000325  00                 	db	0
    89  000326  00                 	db	0
    90  000327  00                 	db	0
    91  000328  00                 	db	0
    92  000329  00                 	db	0
    93  00032A  00                 	db	0
    94  00032B  00                 	db	0
    95  00032C  00                 	db	0
    96  00032D  00                 	db	0
    97  00032E  00                 	db	0
    98  00032F  00                 	db	0
    99  000330  00                 	db	0
   100  000331  00                 	db	0
   101  000332  00                 	db	0
   102  000333  00                 	db	0
   103  000334  00                 	db	0
   104  000335  00                 	db	0
   105  000336  00                 	db	0
   106  000337  00                 	db	0
   107  000338  00                 	db	0
   108  000339  00                 	db	0
   109  00033A  00                 	db	0
   110  00033B  00                 	db	0
   111  00033C  00                 	db	0
   112  00033D  00                 	db	0
   113  00033E  00                 	db	0
   114  00033F  00                 	db	0
   115  000340  00                 	db	0
   116  000341                     __end_of_Timer2PostFunc:
   117                           	opt stack 0
   118  000341                     _Nybble2MSBitNum:
   119                           	opt stack 0
   120  000341  00                 	db	0
   121  000342  01                 	db	1
   122  000343  01                 	db	1
   123  000344  02                 	db	2
   124  000345  02                 	db	2
   125  000346  02                 	db	2
   126  000347  02                 	db	2
   127  000348  03                 	db	3
   128  000349  03                 	db	3
   129  00034A  03                 	db	3
   130  00034B  03                 	db	3
   131  00034C  03                 	db	3
   132  00034D  03                 	db	3
   133  00034E  03                 	db	3
   134  00034F  03                 	db	3
   135  000350                     __end_of_Nybble2MSBitNum:
   136                           	opt stack 0
   137  000350                     _ServDescList:
   138                           	opt stack 0
   139  000350  F2                 	db	low _InitToggleService
   140  000351  10                 	db	high _InitToggleService
   141  000352  90                 	db	low _RunToggleService
   142  000353  11                 	db	high _RunToggleService
   143  000354  1A                 	db	low _InitSPI_Service
   144  000355  12                 	db	high _InitSPI_Service
   145  000356  BE                 	db	low _RunSPI_Service
   146  000357  03                 	db	high _RunSPI_Service
   147  000358                     __end_of_ServDescList:
   148                           	opt stack 0
   149  000358                     _EventQueues:
   150                           	opt stack 0
   151  000358  96                 	db	low _Queue0
   152  000359  00                 	db	high _Queue0
   153  00035A  06                 	db	6
   154  00035B  A8                 	db	low _Queue1
   155  00035C  00                 	db	high _Queue1
   156  00035D  04                 	db	4
   157  00035E                     __end_of_EventQueues:
   158                           	opt stack 0
   159  00035E                     _ES_EventList:
   160                           	opt stack 0
   161  00035E  60                 	db	low _Check4Keystroke
   162  00035F  14                 	db	high _Check4Keystroke
   163  000360  92                 	db	low _CheckButtonEvents
   164  000361  10                 	db	high _CheckButtonEvents
   165  000362                     __end_of_ES_EventList:
   166                           	opt stack 0
   167  000362                     _DistList00:
   168                           	opt stack 0
   169  000362  D6                 	db	low _PostToggleService
   170  000363  13                 	db	high _PostToggleService
   171  000364                     __end_of_DistList00:
   172                           	opt stack 0
   173  0000                     _ADCON1	set	4033
   174  0000                     _CCP1CON	set	4029
   175  0000                     _CCPR1H	set	4031
   176  0000                     _CCPR1L	set	4030
   177  0000                     _INTCON	set	4082
   178  0000                     _LATA	set	3977
   179  0000                     _LATC	set	3979
   180  0000                     _PIE1	set	3997
   181  0000                     _PORTA	set	3968
   182  0000                     _PORTC	set	3970
   183  0000                     _SSPADD	set	4040
   184  0000                     _SSPBUF	set	4041
   185  0000                     _SSPCON1	set	4038
   186  0000                     _SSPSTAT	set	4039
   187  0000                     _T1CON	set	4045
   188  0000                     _TRISA	set	3986
   189  0000                     _TRISC	set	3988
   190  0000                     _CCP1IF	set	31986
   191  0000                     _GIE	set	32663
   192  0000                     _IRCF0	set	32412
   193  0000                     _IRCF1	set	32413
   194  0000                     _IRCF2	set	32414
   195  0000                     _LATA0	set	31816
   196  0000                     _LATA1	set	31817
   197  0000                     _LATA2	set	31818
   198  0000                     _SSPIE	set	31979
   199  0000                     _SSPIF	set	31987
   200  000364                     STR_1:
   201  000364  46                 	db	70	;'F'
   202  000365  61                 	db	97	;'a'
   203  000366  69                 	db	105	;'i'
   204  000367  6C                 	db	108	;'l'
   205  000368  65                 	db	101	;'e'
   206  000369  64                 	db	100	;'d'
   207  00036A  20                 	db	32
   208  00036B  6F                 	db	111	;'o'
   209  00036C  6E                 	db	110	;'n'
   210  00036D  20                 	db	32
   211  00036E  61                 	db	97	;'a'
   212  00036F  74                 	db	116	;'t'
   213  000370  74                 	db	116	;'t'
   214  000371  65                 	db	101	;'e'
   215  000372  6D                 	db	109	;'m'
   216  000373  70                 	db	112	;'p'
   217  000374  74                 	db	116	;'t'
   218  000375  20                 	db	32
   219  000376  74                 	db	116	;'t'
   220  000377  6F                 	db	111	;'o'
   221  000378  20                 	db	32
   222  000379  50                 	db	80	;'P'
   223  00037A  6F                 	db	111	;'o'
   224  00037B  73                 	db	115	;'s'
   225  00037C  74                 	db	116	;'t'
   226  00037D  0A                 	db	10
   227  00037E  00                 	db	0
   228  00037F                     STR_2:
   229  00037F  46                 	db	70	;'F'
   230  000380  61                 	db	97	;'a'
   231  000381  69                 	db	105	;'i'
   232  000382  6C                 	db	108	;'l'
   233  000383  65                 	db	101	;'e'
   234  000384  64                 	db	100	;'d'
   235  000385  20                 	db	32
   236  000386  6F                 	db	111	;'o'
   237  000387  6E                 	db	110	;'n'
   238  000388  20                 	db	32
   239  000389  4E                 	db	78	;'N'
   240  00038A  55                 	db	85	;'U'
   241  00038B  4C                 	db	76	;'L'
   242  00038C  4C                 	db	76	;'L'
   243  00038D  20                 	db	32
   244  00038E  70                 	db	112	;'p'
   245  00038F  6F                 	db	111	;'o'
   246  000390  69                 	db	105	;'i'
   247  000391  6E                 	db	110	;'n'
   248  000392  74                 	db	116	;'t'
   249  000393  65                 	db	101	;'e'
   250  000394  72                 	db	114	;'r'
   251  000395  0A                 	db	10
   252  000396  00                 	db	0
   253  000397                     STR_3:
   254  000397  46                 	db	70	;'F'
   255  000398  61                 	db	97	;'a'
   256  000399  69                 	db	105	;'i'
   257  00039A  6C                 	db	108	;'l'
   258  00039B  65                 	db	101	;'e'
   259  00039C  64                 	db	100	;'d'
   260  00039D  20                 	db	32
   261  00039E  49                 	db	73	;'I'
   262  00039F  6E                 	db	110	;'n'
   263  0003A0  69                 	db	105	;'i'
   264  0003A1  74                 	db	116	;'t'
   265  0003A2  69                 	db	105	;'i'
   266  0003A3  61                 	db	97	;'a'
   267  0003A4  6C                 	db	108	;'l'
   268  0003A5  69                 	db	105	;'i'
   269  0003A6  7A                 	db	122	;'z'
   270  0003A7  61                 	db	97	;'a'
   271  0003A8  74                 	db	116	;'t'
   272  0003A9  69                 	db	105	;'i'
   273  0003AA  6F                 	db	111	;'o'
   274  0003AB  6E                 	db	110	;'n'
   275  0003AC  0A                 	db	10
   276  0003AD  00                 	db	0
   277  0003AE                     STR_4:
   278  0003AE  4F                 	db	79	;'O'
   279  0003AF  74                 	db	116	;'t'
   280  0003B0  68                 	db	104	;'h'
   281  0003B1  65                 	db	101	;'e'
   282  0003B2  72                 	db	114	;'r'
   283  0003B3  20                 	db	32
   284  0003B4  46                 	db	70	;'F'
   285  0003B5  61                 	db	97	;'a'
   286  0003B6  69                 	db	105	;'i'
   287  0003B7  6C                 	db	108	;'l'
   288  0003B8  75                 	db	117	;'u'
   289  0003B9  72                 	db	114	;'r'
   290  0003BA  65                 	db	101	;'e'
   291  0003BB  0A                 	db	10
   292  0003BC  00                 	db	0
   293                           
   294                           ; #config settings
   295  0003BD  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	cinit
   298  001304                     __pcinit:
   299                           	opt stack 0
   300  001304                     start_initialization:
   301                           	opt stack 0
   302  001304                     __initialization:
   303                           	opt stack 0
   304                           
   305                           ; Clear objects allocated to BANK1 (52 bytes)
   306  001304  EE01  F000         	lfsr	0,__pbssBANK1
   307  001308  0E34               	movlw	52
   308  00130A                     clear_0:
   309  00130A  6AEE               	clrf	postinc0,c
   310  00130C  06E8               	decf	wreg,f,c
   311  00130E  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to BANK0 (87 bytes)
   314  001310  EE00  F060         	lfsr	0,__pbssBANK0
   315  001314  0E57               	movlw	87
   316  001316                     clear_1:
   317  001316  6AEE               	clrf	postinc0,c
   318  001318  06E8               	decf	wreg,f,c
   319  00131A  E1FD               	bnz	clear_1
   320                           
   321                           ; Clear objects allocated to COMRAM (12 bytes)
   322  00131C  EE00  F034         	lfsr	0,__pbssCOMRAM
   323  001320  0E0C               	movlw	12
   324  001322                     clear_2:
   325  001322  6AEE               	clrf	postinc0,c
   326  001324  06E8               	decf	wreg,f,c
   327  001326  E1FD               	bnz	clear_2
   328  001328                     end_of_initialization:
   329                           	opt stack 0
   330  001328                     __end_of__initialization:
   331                           	opt stack 0
   332  001328  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   333  00132A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   334  00132C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  00132E  6EF8               	movwf	tblptru,c
   336  001330  0100               	movlb	0
   337  001332  EF1A  F007         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	bssCOMRAM
   343  000034                     __pbssCOMRAM:
   344                           	opt stack 0
   345  000034                     ISR@LastTime:
   346                           	opt stack 0
   347  000034                     	ds	2
   348  000036                     ISR@NextTime:
   349                           	opt stack 0
   350  000036                     	ds	2
   351  000038                     _SysTickCounter:
   352                           	opt stack 0
   353  000038                     	ds	2
   354  00003A                     __PRIMASK_temp:
   355                           	opt stack 0
   356  00003A                     	ds	2
   357  00003C                     Button@CurrentState:
   358                           	opt stack 0
   359  00003C                     	ds	1
   360  00003D                     TemplateService@MyPriority:
   361                           	opt stack 0
   362  00003D                     	ds	1
   363  00003E                     _CurrentState:
   364                           	opt stack 0
   365  00003E                     	ds	1
   366  00003F                     _MyPriority:
   367                           	opt stack 0
   368  00003F                     	ds	1
   369                           tblptru	equ	0xFF8
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           
   373                           	psect	bssBANK0
   374  000060                     __pbssBANK0:
   375                           	opt stack 0
   376  000060                     _TMR_TimerArray:
   377                           	opt stack 0
   378  000060                     	ds	32
   379  000080                     ES_Timer_Tick_Resp@NewEvent:
   380                           	opt stack 0
   381  000080                     	ds	3
   382  000083                     _BGR:
   383                           	opt stack 0
   384  000083                     	ds	3
   385  000086                     ES_Timer_Tick_Resp@NeedsProcessing:
   386                           	opt stack 0
   387  000086                     	ds	2
   388  000088                     _Ready:
   389                           	opt stack 0
   390  000088                     	ds	2
   391  00008A                     _TMR_ActiveFlags:
   392                           	opt stack 0
   393  00008A                     	ds	2
   394  00008C                     Button@MyPriority:
   395                           	opt stack 0
   396  00008C                     	ds	1
   397  00008D                     ES_Timer_Tick_Resp@NextTimer2Process:
   398                           	opt stack 0
   399  00008D                     	ds	1
   400  00008E                     SPI_Service@CurrentState:
   401                           	opt stack 0
   402  00008E                     	ds	1
   403  00008F                     SPI_Service@MyPriority:
   404                           	opt stack 0
   405  00008F                     	ds	1
   406  000090                     ToggleService@MyPriority:
   407                           	opt stack 0
   408  000090                     	ds	1
   409  000091                     _FirstSend:
   410                           	opt stack 0
   411  000091                     	ds	1
   412  000092                     _LEDColor:
   413                           	opt stack 0
   414  000092                     	ds	1
   415  000093                     _LastButtonState:
   416                           	opt stack 0
   417  000093                     	ds	1
   418  000094                     _NumBytesLeft:
   419                           	opt stack 0
   420  000094                     	ds	1
   421  000095                     _TickCount:
   422                           	opt stack 0
   423  000095                     	ds	1
   424  000096                     _Queue0:
   425                           	opt stack 0
   426  000096                     	ds	18
   427  0000A8                     _Queue1:
   428                           	opt stack 0
   429  0000A8                     	ds	12
   430  0000B4                     ES_Run@ThisEvent:
   431                           	opt stack 0
   432  0000B4                     	ds	3
   433                           tblptru	equ	0xFF8
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437                           	psect	bssBANK1
   438  000100                     __pbssBANK1:
   439                           	opt stack 0
   440  000100                     _BytesToSend:
   441                           	opt stack 0
   442  000100                     	ds	52
   443                           tblptru	equ	0xFF8
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447                           	psect	cstackBANK0
   448  0000B7                     __pcstackBANK0:
   449                           	opt stack 0
   450  0000B7                     ??_FormPacket:
   451  0000B7                     ?_printf:
   452                           	opt stack 0
   453  0000B7                     ?___awmod:
   454                           	opt stack 0
   455  0000B7                     sendByte@Data:
   456                           	opt stack 0
   457  0000B7                     SetBGR@G:
   458                           	opt stack 0
   459  0000B7                     ___lbmod@divisor:
   460                           	opt stack 0
   461  0000B7                     ES_GetMSBitSet@Val2Check:
   462                           	opt stack 0
   463  0000B7                     __HW_Timer_Init@Rate:
   464                           	opt stack 0
   465  0000B7                     ES_InitQueue@pBlock:
   466                           	opt stack 0
   467  0000B7                     ES_Timer_InitTimer@NewTime:
   468                           	opt stack 0
   469  0000B7                     printf@f:
   470                           	opt stack 0
   471  0000B7                     ___awmod@dividend:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x0
   475  0000B7                     	ds	1
   476  0000B8                     SetBGR@R:
   477                           	opt stack 0
   478  0000B8                     ___lbmod@dividend:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x1
   482  0000B8                     	ds	1
   483  0000B9                     ??_ES_GetMSBitSet:
   484  0000B9                     ??_ES_Timer_InitTimer:
   485  0000B9                     ES_InitQueue@BlockSize:
   486                           	opt stack 0
   487  0000B9                     FormPacket@i:
   488                           	opt stack 0
   489  0000B9                     SetBGR@B:
   490                           	opt stack 0
   491  0000B9                     ___lbmod@counter:
   492                           	opt stack 0
   493  0000B9                     ES_Timer_Init@Rate:
   494                           	opt stack 0
   495  0000B9                     printf@ap:
   496                           	opt stack 0
   497  0000B9                     ___awmod@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x2
   501  0000B9                     	ds	1
   502  0000BA                     FormPacket@i_765:
   503                           	opt stack 0
   504  0000BA                     ___lbmod@rem:
   505                           	opt stack 0
   506  0000BA                     ES_InitQueue@pThisQueue:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x3
   510  0000BA                     	ds	1
   511  0000BB                     ES_Timer_InitTimer@Num:
   512                           	opt stack 0
   513  0000BB                     FormPacket@ledNum:
   514                           	opt stack 0
   515  0000BB                     printf@c:
   516                           	opt stack 0
   517  0000BB                     ___awmod@counter:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x4
   521  0000BB                     	ds	1
   522  0000BC                     FormPacket@j:
   523                           	opt stack 0
   524  0000BC                     ___awmod@sign:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x5
   528  0000BC                     	ds	1
   529  0000BD                     ?___wmul:
   530                           	opt stack 0
   531  0000BD                     InitSPI_Service@Priority:
   532                           	opt stack 0
   533  0000BD                     ___wmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x6
   537  0000BD                     	ds	1
   538  0000BE                     ES_GetMSBitSet@ReturnVal:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x7
   542  0000BE                     	ds	1
   543  0000BF                     ES_GetMSBitSet@Nybble2Test:
   544                           	opt stack 0
   545  0000BF                     ___wmul@multiplicand:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x8
   549  0000BF                     	ds	1
   550  0000C0                     ES_GetMSBitSet@LoopCntr:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x9
   554  0000C0                     	ds	1
   555  0000C1                     ___wmul@product:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0xA
   559  0000C1                     	ds	2
   560  0000C3                     ES_EnQueueFIFO@pBlock:
   561                           	opt stack 0
   562  0000C3                     ES_DeQueue@pBlock:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0xC
   566  0000C3                     	ds	2
   567  0000C5                     ES_DeQueue@pReturnEvent:
   568                           	opt stack 0
   569  0000C5                     ES_EnQueueFIFO@Event2Add:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0xE
   573  0000C5                     	ds	2
   574  0000C7                     ??_ES_DeQueue:
   575                           
   576                           ; 1 bytes @ 0x10
   577  0000C7                     	ds	1
   578  0000C8                     ??_ES_EnQueueFIFO:
   579                           
   580                           ; 1 bytes @ 0x11
   581  0000C8                     	ds	1
   582  0000C9                     ES_DeQueue@SaveCrit:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x12
   586  0000C9                     	ds	1
   587  0000CA                     ES_DeQueue@NumLeft:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x13
   591  0000CA                     	ds	1
   592  0000CB                     ES_EnQueueFIFO@SaveCrit:
   593                           	opt stack 0
   594  0000CB                     ES_DeQueue@pThisQueue:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x14
   598  0000CB                     	ds	1
   599  0000CC                     ES_EnQueueFIFO@pThisQueue:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x15
   603  0000CC                     	ds	2
   604  0000CE                     ES_PostToService@TheEvent:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x17
   608  0000CE                     	ds	3
   609  0000D1                     ??_ES_PostToService:
   610                           
   611                           ; 1 bytes @ 0x1A
   612  0000D1                     	ds	2
   613  0000D3                     ES_PostToService@WhichService:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1C
   617  0000D3                     	ds	1
   618  0000D4                     InitToggleService@ThisEvent:
   619                           	opt stack 0
   620  0000D4                     PostToggleService@ThisEvent:
   621                           	opt stack 0
   622  0000D4                     PostSPI_Service@ThisEvent:
   623                           	opt stack 0
   624  0000D4                     PostButtonDebounceSM@ThisEvent:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x1D
   628  0000D4                     	ds	3
   629  0000D7                     ??_ES_Timer_Tick_Resp:
   630  0000D7                     ?_RunToggleService:
   631                           	opt stack 0
   632  0000D7                     ?_RunSPI_Service:
   633                           	opt stack 0
   634  0000D7                     InitToggleService@Priority:
   635                           	opt stack 0
   636  0000D7                     CheckButtonEvents@ReturnVal:
   637                           	opt stack 0
   638  0000D7                     RunToggleService@ThisEvent:
   639                           	opt stack 0
   640  0000D7                     RunSPI_Service@ThisEvent:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x20
   644  0000D7                     	ds	1
   645  0000D8                     ES_Initialize@NewRate:
   646                           	opt stack 0
   647  0000D8                     CheckButtonEvents@ThisEvent:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x21
   651  0000D8                     	ds	2
   652  0000DA                     ??_RunSPI_Service:
   653  0000DA                     ES_Initialize@i:
   654                           	opt stack 0
   655  0000DA                     RunToggleService@ReturnEvent:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x23
   659  0000DA                     	ds	1
   660  0000DB                     CheckButtonEvents@CurrentButtonState:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x24
   664  0000DB                     	ds	1
   665  0000DC                     ES_CheckUserEvents@i:
   666                           	opt stack 0
   667  0000DC                     RunSPI_Service@ReturnEvent:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x25
   671  0000DC                     	ds	3
   672  0000DF                     RunSPI_Service@ThisEvent_751:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x28
   676  0000DF                     	ds	3
   677  0000E2                     ??_ES_Run:
   678                           
   679                           ; 1 bytes @ 0x2B
   680  0000E2                     	ds	4
   681  0000E6                     ES_Run@HighestPrior:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2F
   685  0000E6                     	ds	1
   686  0000E7                     main@ErrorType:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x30
   690  0000E7                     	ds	1
   691                           tblptru	equ	0xFF8
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           
   695                           	psect	cstackCOMRAM
   696  000001                     __pcstackCOMRAM:
   697                           	opt stack 0
   698  000001                     ?i2___awmod:
   699                           	opt stack 0
   700  000001                     i2___awmod@dividend:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x0
   704  000001                     	ds	2
   705  000003                     i2___awmod@divisor:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x2
   709  000003                     	ds	2
   710  000005                     i2___awmod@counter:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x4
   714  000005                     	ds	1
   715  000006                     i2___awmod@sign:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x5
   719  000006                     	ds	1
   720  000007                     ?i2___wmul:
   721                           	opt stack 0
   722  000007                     i2___wmul@multiplier:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x6
   726  000007                     	ds	2
   727  000009                     i2___wmul@multiplicand:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x8
   731  000009                     	ds	2
   732  00000B                     i2___wmul@product:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0xA
   736  00000B                     	ds	2
   737  00000D                     i2ES_EnQueueFIFO@pBlock:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0xC
   741  00000D                     	ds	2
   742  00000F                     i2ES_EnQueueFIFO@Event2Add:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0xE
   746  00000F                     	ds	3
   747  000012                     ??i2_ES_EnQueueFIFO:
   748                           
   749                           ; 1 bytes @ 0x11
   750  000012                     	ds	3
   751  000015                     i2ES_EnQueueFIFO@SaveCrit:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x14
   755  000015                     	ds	1
   756  000016                     i2ES_EnQueueFIFO@pThisQueue:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x15
   760  000016                     	ds	2
   761  000018                     i2ES_PostToService@TheEvent:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x17
   765  000018                     	ds	3
   766  00001B                     ??i2_ES_PostToService:
   767                           
   768                           ; 1 bytes @ 0x1A
   769  00001B                     	ds	2
   770  00001D                     i2ES_PostToService@WhichService:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x1C
   774  00001D                     	ds	1
   775  00001E                     i2PostSPI_Service@ThisEvent:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0x1D
   779  00001E                     	ds	3
   780  000021                     EOTResponse@ThisEvent:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x20
   784  000021                     	ds	3
   785  000024                     ??_ISR:
   786                           
   787                           ; 1 bytes @ 0x23
   788  000024                     	ds	16
   789                           tblptru	equ	0xFF8
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           
   793 ;;
   794 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   795 ;;
   796 ;; *************** function _main *****************
   797 ;; Defined at:
   798 ;;		line 25 in file "main.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  ErrorType       1   48[BANK0 ] enum E15671
   803 ;; Return value:  Size  Location     Type
   804 ;;                  2  335[None  ] int 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   812 ;;      Params:         0       0       0       0
   813 ;;      Locals:         0       1       0       0
   814 ;;      Temps:          0       0       0       0
   815 ;;      Totals:         0       1       0       0
   816 ;;Total ram usage:        1 bytes
   817 ;; Hardware stack levels required when called:   13
   818 ;; This function calls:
   819 ;;		_ES_Initialize
   820 ;;		_ES_Run
   821 ;;		_printf
   822 ;; This function is called by:
   823 ;;		Startup code after reset
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text0
   828  000E34                     __ptext0:
   829                           	opt stack 0
   830  000E34                     _main:
   831                           	opt stack 18
   832                           
   833                           ;main.c: 28: IRCF0 = 1;
   834                           
   835                           ;incstack = 0
   836  000E34  88D3               	bsf	4051,4,c	;volatile
   837                           
   838                           ;main.c: 29: IRCF1 = 1;
   839  000E36  8AD3               	bsf	4051,5,c	;volatile
   840                           
   841                           ;main.c: 30: IRCF2 = 1;
   842  000E38  8CD3               	bsf	4051,6,c	;volatile
   843                           
   844                           ;main.c: 38: ES_Return_t ErrorType;
   845                           ;main.c: 54: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   846  000E3A  0E9C               	movlw	156
   847  000E3C  0100               	movlb	0	; () banked
   848  000E3E  6FD9               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   849  000E40  0E3F               	movlw	63
   850  000E42  6FD8               	movwf	ES_Initialize@NewRate& (0+255),b
   851  000E44  ECE3  F004         	call	_ES_Initialize	;wreg free
   852  000E48  0100               	movlb	0	; () banked
   853  000E4A  6FE7               	movwf	main@ErrorType& (0+255),b
   854                           
   855                           ; BSR set to: 0
   856                           ;main.c: 55: if ( ErrorType == Success ) {
   857  000E4C  0100               	movlb	0	; () banked
   858  000E4E  51E7               	movf	main@ErrorType& (0+255),w,b
   859  000E50  0100               	movlb	0	; () banked
   860  000E52  A4D8               	btfss	status,2,c
   861  000E54  D029               	goto	l2846
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 57: ErrorType = ES_Run();
   865  000E56  EC69  F004         	call	_ES_Run	;wreg free
   866  000E5A  0100               	movlb	0	; () banked
   867  000E5C  6FE7               	movwf	main@ErrorType& (0+255),b
   868                           
   869                           ; BSR set to: 0
   870                           ;main.c: 59: }
   871                           ;main.c: 61: switch (ErrorType){
   872  000E5E  D024               	goto	l2846
   873  000E60                     l2836:
   874                           
   875                           ; BSR set to: 0
   876                           ;main.c: 63: printf("Failed on attempt to Post\n");
   877  000E60  0E64               	movlw	low STR_1
   878  000E62  0100               	movlb	0	; () banked
   879  000E64  6FB7               	movwf	printf@f& (0+255),b
   880  000E66  0E03               	movlw	high STR_1
   881  000E68  0100               	movlb	0	; () banked
   882  000E6A  6FB8               	movwf	(printf@f+1)& (0+255),b
   883  000E6C  EC68  F009         	call	_printf	;wreg free
   884                           
   885                           ;main.c: 64: break;
   886  000E70  D027               	goto	l343
   887  000E72                     l2838:
   888                           
   889                           ;main.c: 66: printf("Failed on NULL pointer\n");
   890  000E72  0E7F               	movlw	low STR_2
   891  000E74  0100               	movlb	0	; () banked
   892  000E76  6FB7               	movwf	printf@f& (0+255),b
   893  000E78  0E03               	movlw	high STR_2
   894  000E7A  0100               	movlb	0	; () banked
   895  000E7C  6FB8               	movwf	(printf@f+1)& (0+255),b
   896  000E7E  EC68  F009         	call	_printf	;wreg free
   897                           
   898                           ;main.c: 67: break;
   899  000E82  D01E               	goto	l343
   900  000E84                     l2840:
   901                           
   902                           ;main.c: 69: printf("Failed Initialization\n");
   903  000E84  0E97               	movlw	low STR_3
   904  000E86  0100               	movlb	0	; () banked
   905  000E88  6FB7               	movwf	printf@f& (0+255),b
   906  000E8A  0E03               	movlw	high STR_3
   907  000E8C  0100               	movlb	0	; () banked
   908  000E8E  6FB8               	movwf	(printf@f+1)& (0+255),b
   909  000E90  EC68  F009         	call	_printf	;wreg free
   910                           
   911                           ;main.c: 70: break;
   912  000E94  D015               	goto	l343
   913  000E96                     l2842:
   914                           
   915                           ;main.c: 72: printf("Other Failure\n");
   916  000E96  0EAE               	movlw	low STR_4
   917  000E98  0100               	movlb	0	; () banked
   918  000E9A  6FB7               	movwf	printf@f& (0+255),b
   919  000E9C  0E03               	movlw	high STR_4
   920  000E9E  0100               	movlb	0	; () banked
   921  000EA0  6FB8               	movwf	(printf@f+1)& (0+255),b
   922  000EA2  EC68  F009         	call	_printf	;wreg free
   923                           
   924                           ;main.c: 74: }
   925                           
   926                           ;main.c: 73: break;
   927  000EA6  D00C               	goto	l343
   928  000EA8                     l2846:
   929  000EA8  0100               	movlb	0	; () banked
   930  000EAA  51E7               	movf	main@ErrorType& (0+255),w,b
   931                           
   932                           ; Switch size 1, requested type "space"
   933                           ; Number of cases is 3, Range of values is 1 to 5
   934                           ; switch strategies available:
   935                           ; Name         Instructions Cycles
   936                           ; simple_byte           10     6 (average)
   937                           ;	Chosen strategy is simple_byte
   938  000EAC  0A01               	xorlw	1	; case 1
   939  000EAE  B4D8               	btfsc	status,2,c
   940  000EB0  D7D7               	goto	l2836
   941  000EB2  0A02               	xorlw	2	; case 3
   942  000EB4  B4D8               	btfsc	status,2,c
   943  000EB6  D7DD               	goto	l2838
   944  000EB8  0A06               	xorlw	6	; case 5
   945  000EBA  B4D8               	btfsc	status,2,c
   946  000EBC  D7E3               	goto	l2840
   947  000EBE  D7EB               	goto	l2842
   948  000EC0                     l343:
   949                           
   950                           ;main.c: 76: ;
   951  000EC0  D7FF               	goto	l343
   952  000EC2                     __end_of_main:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           status	equ	0xFD8
   958                           
   959 ;; *************** function _printf *****************
   960 ;; Defined at:
   961 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   964 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  tmpval          4    0        struct .
   967 ;;  cp              3    0        PTR const unsigned char 
   968 ;;  ap              2    2[BANK0 ] PTR void [1]
   969 ;;		 -> ?_printf(2), 
   970 ;;  len             2    0        unsigned int 
   971 ;;  val             2    0        unsigned int 
   972 ;;  c               1    4[BANK0 ] char 
   973 ;;  flag            1    0        unsigned char 
   974 ;;  prec            1    0        char 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  2    0[BANK0 ] int 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   984 ;;      Params:         0       2       0       0
   985 ;;      Locals:         0       3       0       0
   986 ;;      Temps:          0       0       0       0
   987 ;;      Totals:         0       5       0       0
   988 ;;Total ram usage:        5 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    7
   991 ;; This function calls:
   992 ;;		_putch
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text1
   999  0012D0                     __ptext1:
  1000                           	opt stack 0
  1001  0012D0                     _printf:
  1002                           	opt stack 23
  1003                           
  1004                           ;doprnt.c: 466: va_list ap;
  1005                           ;doprnt.c: 499: signed char c;
  1006                           ;doprnt.c: 506: signed char prec;
  1007                           ;doprnt.c: 508: unsigned char flag;
  1008                           ;doprnt.c: 523: union {
  1009                           ;doprnt.c: 524: unsigned long vd;
  1010                           ;doprnt.c: 525: double integ;
  1011                           ;doprnt.c: 526: } tmpval;
  1012                           ;doprnt.c: 528: unsigned int val;
  1013                           ;doprnt.c: 529: unsigned len;
  1014                           ;doprnt.c: 530: const char * cp;
  1015                           ;doprnt.c: 533: *ap = __va_start();
  1016                           
  1017                           ;incstack = 0
  1018  0012D0  0EB9               	movlw	low (?_printf+2)
  1019  0012D2  0100               	movlb	0	; () banked
  1020  0012D4  6FB9               	movwf	printf@ap& (0+255),b
  1021  0012D6  0E00               	movlw	high (?_printf+2)
  1022  0012D8  0100               	movlb	0	; () banked
  1023  0012DA  6FBA               	movwf	(printf@ap+1)& (0+255),b
  1024                           
  1025                           ;doprnt.c: 536: while(c = *f++) {
  1026  0012DC  D004               	goto	l2676
  1027  0012DE                     l2674:
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;doprnt.c: 540: {
  1031                           ;doprnt.c: 541: (putch(c) );
  1032  0012DE  0100               	movlb	0	; () banked
  1033  0012E0  51BB               	movf	printf@c& (0+255),w,b
  1034  0012E2  EC32  F00A         	call	_putch
  1035  0012E6                     l2676:
  1036  0012E6  C0B7  FFF6         	movff	printf@f,tblptrl
  1037  0012EA  C0B8  FFF7         	movff	printf@f+1,tblptrh
  1038  0012EE  0100               	movlb	0	; () banked
  1039  0012F0  4BB7               	infsnz	printf@f& (0+255),f,b
  1040  0012F2  2BB8               	incf	(printf@f+1)& (0+255),f,b
  1041  0012F4                     	if	0	;tblptru may be non-zero
  1042  0012F4                     	endif
  1043  0012F4                     	if	0	;tblptru may be non-zero
  1044  0012F4                     	endif
  1045  0012F4  0008               	tblrd		*
  1046  0012F6  CFF5 F0BB          	movff	tablat,printf@c
  1047  0012FA  0100               	movlb	0	; () banked
  1048  0012FC  51BB               	movf	printf@c& (0+255),w,b
  1049  0012FE  B4D8               	btfsc	status,2,c
  1050  001300  0012               	return	
  1051  001302  D7ED               	goto	l2674
  1052  001304                     __end_of_printf:
  1053                           	opt stack 0
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           status	equ	0xFD8
  1061                           
  1062 ;; *************** function _putch *****************
  1063 ;; Defined at:
  1064 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  c               1    wreg     unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  c               1    0[COMRAM] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1078 ;;      Params:         0       0       0       0
  1079 ;;      Locals:         0       0       0       0
  1080 ;;      Temps:          0       0       0       0
  1081 ;;      Totals:         0       0       0       0
  1082 ;;Total ram usage:        0 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    6
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_printf
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text2
  1093  001464                     __ptext2:
  1094                           	opt stack 0
  1095  001464                     _putch:
  1096                           	opt stack 23
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;incstack = 0
  1100  001464  0012               	return		;funcret
  1101  001466                     __end_of_putch:
  1102                           	opt stack 0
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _ES_Run *****************
  1112 ;; Defined at:
  1113 ;;		line 277 in file "ES_Framework.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  HighestPrior    1   47[BANK0 ] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      enum E15498
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1127 ;;      Params:         0       0       0       0
  1128 ;;      Locals:         0       1       0       0
  1129 ;;      Temps:          0       4       0       0
  1130 ;;      Totals:         0       5       0       0
  1131 ;;Total ram usage:        5 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:   12
  1134 ;; This function calls:
  1135 ;;		_ES_CheckUserEvents
  1136 ;;		_ES_DeQueue
  1137 ;;		_ES_GetMSBitSet
  1138 ;;		_RunSPI_Service
  1139 ;;		_RunToggleService
  1140 ;;		__HW_Process_Pending_Ints
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text3
  1147  0008D2                     __ptext3:
  1148                           	opt stack 0
  1149  0008D2                     _ES_Run:
  1150                           	opt stack 18
  1151                           
  1152                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1153                           
  1154                           ;incstack = 0
  1155                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1156                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1157                           ;ES_Framework.c: 282: while(1){
  1158  0008D2  D06B               	goto	l2634
  1159  0008D4                     l2622:
  1160                           
  1161                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1162  0008D4  C088  F0B7         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1163  0008D8  C089  F0B8         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1164  0008DC  EC77  F006         	call	_ES_GetMSBitSet	;wreg free
  1165  0008E0  0100               	movlb	0	; () banked
  1166  0008E2  6FE6               	movwf	ES_Run@HighestPrior& (0+255),b
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1170  0008E4  0100               	movlb	0	; () banked
  1171  0008E6  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1172  0008E8  0D03               	mullw	3
  1173  0008EA  0E58               	movlw	low _EventQueues
  1174  0008EC  24F3               	addwf	prodl,w,c
  1175  0008EE  6EF6               	movwf	tblptrl,c
  1176  0008F0  0E03               	movlw	high _EventQueues
  1177  0008F2  20F4               	addwfc	prodh,w,c
  1178  0008F4  6EF7               	movwf	tblptrh,c
  1179  0008F6                     	if	0	;There are less than 3 active tblptr bytes
  1180  0008F6                     	endif
  1181  0008F6  0009               	tblrd		*+
  1182  0008F8  CFF5 F0C3          	movff	tablat,ES_DeQueue@pBlock
  1183  0008FC  000A               	tblrd		*-
  1184  0008FE  CFF5 F0C4          	movff	tablat,ES_DeQueue@pBlock+1
  1185  000902  0EB4               	movlw	low ES_Run@ThisEvent
  1186  000904  0100               	movlb	0	; () banked
  1187  000906  6FC5               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1188  000908  0E00               	movlw	high ES_Run@ThisEvent
  1189  00090A  0100               	movlb	0	; () banked
  1190  00090C  6FC6               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1191  00090E  EC4A  F003         	call	_ES_DeQueue	;wreg free
  1192  000912  0900               	iorlw	0
  1193  000914  A4D8               	btfss	status,2,c
  1194  000916  D01F               	goto	l2628
  1195                           
  1196                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1197  000918  0100               	movlb	0	; () banked
  1198  00091A  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1199  00091C  0D02               	mullw	2
  1200  00091E  0E01               	movlw	low _BitNum2SetMask
  1201  000920  24F3               	addwf	prodl,w,c
  1202  000922  6EF6               	movwf	tblptrl,c
  1203  000924  0E03               	movlw	high _BitNum2SetMask
  1204  000926  20F4               	addwfc	prodh,w,c
  1205  000928  6EF7               	movwf	tblptrh,c
  1206  00092A                     	if	0	;There are less than 3 active tblptr bytes
  1207  00092A                     	endif
  1208  00092A  0009               	tblrd		*+
  1209  00092C  CFF5 F0E2          	movff	tablat,??_ES_Run
  1210  000930  0009               	tblrd		*+
  1211  000932  CFF5 F0E3          	movff	tablat,??_ES_Run+1
  1212  000936  0100               	movlb	0	; () banked
  1213  000938  1DE2               	comf	??_ES_Run& (0+255),w,b
  1214  00093A  0100               	movlb	0	; () banked
  1215  00093C  6FE4               	movwf	(??_ES_Run+2)& (0+255),b
  1216  00093E  0100               	movlb	0	; () banked
  1217  000940  1DE3               	comf	(??_ES_Run+1)& (0+255),w,b
  1218  000942  0100               	movlb	0	; () banked
  1219  000944  6FE5               	movwf	(??_ES_Run+3)& (0+255),b
  1220  000946  0100               	movlb	0	; () banked
  1221  000948  51E4               	movf	(??_ES_Run+2)& (0+255),w,b
  1222  00094A  0100               	movlb	0	; () banked
  1223  00094C  1788               	andwf	_Ready& (0+255),f,b
  1224  00094E  0100               	movlb	0	; () banked
  1225  000950  51E5               	movf	(??_ES_Run+3)& (0+255),w,b
  1226  000952  0100               	movlb	0	; () banked
  1227  000954  1789               	andwf	(_Ready+1)& (0+255),f,b
  1228  000956                     l2628:
  1229                           
  1230                           ;ES_Framework.c: 291: }
  1231                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType !=
  1232                           ;ES_Framework.c: 293: ES_NO_EVENT) {
  1233  000956  C0B4  F0D7         	movff	ES_Run@ThisEvent,RunSPI_Service@ThisEvent
  1234  00095A  C0B5  F0D8         	movff	ES_Run@ThisEvent+1,RunSPI_Service@ThisEvent+1
  1235  00095E  C0B6  F0D9         	movff	ES_Run@ThisEvent+2,RunSPI_Service@ThisEvent+2
  1236  000962  0100               	movlb	0	; () banked
  1237  000964  51E6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1238  000966  0D04               	mullw	4
  1239  000968  0E02               	movlw	2
  1240  00096A  26F3               	addwf	prodl,f,c
  1241  00096C  0E00               	movlw	0
  1242  00096E  22F4               	addwfc	prodh,f,c
  1243  000970  0E50               	movlw	low _ServDescList
  1244  000972  24F3               	addwf	prodl,w,c
  1245  000974  6EF6               	movwf	tblptrl,c
  1246  000976  0E03               	movlw	high _ServDescList
  1247  000978  20F4               	addwfc	prodh,w,c
  1248  00097A  6EF7               	movwf	tblptrh,c
  1249  00097C                     	if	0	;There are less than 3 active tblptr bytes
  1250  00097C                     	endif
  1251  00097C  D801               	call	u1788
  1252  00097E  D00C               	goto	u1789
  1253  000980                     u1788:
  1254  000980  0005               	push	
  1255  000982  6EFA               	movwf	pclath,c
  1256  000984  0009               	tblrd		*+
  1257  000986  50F5               	movf	tablat,w,c
  1258  000988  6EFD               	movwf	tosl,c
  1259  00098A  0009               	tblrd		*+
  1260  00098C  50F5               	movf	tablat,w,c
  1261  00098E  6EFE               	movwf	tosh,c
  1262  000990  50F8               	movf	tblptru,w,c
  1263  000992  6EFF               	movwf	tosu,c
  1264  000994  50FA               	movf	pclath,w,c
  1265  000996  0012               	return		;indir
  1266  000998                     u1789:
  1267  000998  0ED7               	movlw	low ?_RunSPI_Service
  1268  00099A  6ED9               	movwf	fsr2l,c
  1269  00099C  0E00               	movlw	high ?_RunSPI_Service
  1270  00099E  6EDA               	movwf	fsr2h,c
  1271  0009A0  50DF               	movf	indf2,w,c
  1272  0009A2  B4D8               	btfsc	status,2,c
  1273  0009A4  D002               	goto	l2634
  1274                           
  1275                           ;ES_Framework.c: 294: return FailedRun;
  1276  0009A6  0E02               	movlw	2
  1277  0009A8  0012               	return	
  1278  0009AA                     l2634:
  1279  0009AA  ECE0  F009         	call	__HW_Process_Pending_Ints	;wreg free
  1280  0009AE  0900               	iorlw	0
  1281  0009B0  B4D8               	btfsc	status,2,c
  1282  0009B2  D006               	goto	l2638
  1283  0009B4  0100               	movlb	0	; () banked
  1284  0009B6  5188               	movf	_Ready& (0+255),w,b
  1285  0009B8  0100               	movlb	0	; () banked
  1286  0009BA  1189               	iorwf	(_Ready+1)& (0+255),w,b
  1287  0009BC  A4D8               	btfss	status,2,c
  1288  0009BE  D78A               	goto	l2622
  1289  0009C0                     l2638:
  1290                           
  1291                           ;ES_Framework.c: 295: }
  1292                           ;ES_Framework.c: 296: }
  1293                           ;ES_Framework.c: 299: ES_CheckUserEvents();
  1294  0009C0  ECA3  F008         	call	_ES_CheckUserEvents	;wreg free
  1295  0009C4  D7F2               	goto	l2634
  1296  0009C6                     __end_of_ES_Run:
  1297                           	opt stack 0
  1298                           tosu	equ	0xFFF
  1299                           tosh	equ	0xFFE
  1300                           tosl	equ	0xFFD
  1301                           pclath	equ	0xFFA
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           prodh	equ	0xFF4
  1307                           prodl	equ	0xFF3
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           indf2	equ	0xFDF
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function __HW_Process_Pending_Ints *****************
  1316 ;; Defined at:
  1317 ;;		line 210 in file "ES_Port.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      unsigned char 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1331 ;;      Params:         0       0       0       0
  1332 ;;      Locals:         0       0       0       0
  1333 ;;      Temps:          0       0       0       0
  1334 ;;      Totals:         0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:   11
  1338 ;; This function calls:
  1339 ;;		_ES_Timer_Tick_Resp
  1340 ;; This function is called by:
  1341 ;;		_ES_Run
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  0013C0                     __ptext4:
  1347                           	opt stack 0
  1348  0013C0                     __HW_Process_Pending_Ints:
  1349                           	opt stack 18
  1350                           
  1351                           ;ES_Port.c: 212: while (TickCount > 0)
  1352                           
  1353                           ;incstack = 0
  1354  0013C0  D004               	goto	l2448
  1355  0013C2                     l2444:
  1356                           
  1357                           ;ES_Port.c: 213: {
  1358                           ;ES_Port.c: 215: ES_Timer_Tick_Resp();
  1359  0013C2  ECDE  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1360                           
  1361                           ;ES_Port.c: 216: TickCount--;
  1362  0013C6  0100               	movlb	0	; () banked
  1363  0013C8  0795               	decf	_TickCount& (0+255),f,b	;volatile
  1364  0013CA                     l2448:
  1365  0013CA  0100               	movlb	0	; () banked
  1366  0013CC  5195               	movf	_TickCount& (0+255),w,b	;volatile
  1367  0013CE  A4D8               	btfss	status,2,c
  1368  0013D0  D7F8               	goto	l2444
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;ES_Port.c: 217: }
  1372                           ;ES_Port.c: 219: return 1;
  1373                           
  1374                           ; BSR set to: 0
  1375  0013D2  0E01               	movlw	1
  1376  0013D4  0012               	return	
  1377  0013D6                     __end_of__HW_Process_Pending_Ints:
  1378                           	opt stack 0
  1379                           tosu	equ	0xFFF
  1380                           tosh	equ	0xFFE
  1381                           tosl	equ	0xFFD
  1382                           pclath	equ	0xFFA
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           indf2	equ	0xFDF
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _ES_Timer_Tick_Resp *****************
  1397 ;; Defined at:
  1398 ;;		line 284 in file "ES_Timers.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1412 ;;      Params:         0       0       0       0
  1413 ;;      Locals:         0       0       0       0
  1414 ;;      Temps:          0       4       0       0
  1415 ;;      Totals:         0       4       0       0
  1416 ;;Total ram usage:        4 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:   10
  1419 ;; This function calls:
  1420 ;;		Absolute function
  1421 ;;		_ES_GetMSBitSet
  1422 ;;		_PostSPI_Service
  1423 ;;		_PostToggleService
  1424 ;; This function is called by:
  1425 ;;		__HW_Process_Pending_Ints
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text5
  1430  0007BC                     __ptext5:
  1431                           	opt stack 0
  1432  0007BC                     _ES_Timer_Tick_Resp:
  1433                           	opt stack 18
  1434                           
  1435                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1436                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1437                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1438                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;incstack = 0
  1442  0007BC  0100               	movlb	0	; () banked
  1443  0007BE  518A               	movf	_TMR_ActiveFlags& (0+255),w,b
  1444  0007C0  0100               	movlb	0	; () banked
  1445  0007C2  118B               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1446  0007C4  B4D8               	btfsc	status,2,c
  1447  0007C6  0012               	return	
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;ES_Timers.c: 291: {
  1451                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1452  0007C8  C08A  F086         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1453  0007CC  C08B  F087         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1454  0007D0                     l2280:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1458  0007D0  C086  F0B7         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1459  0007D4  C087  F0B8         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1460  0007D8  EC77  F006         	call	_ES_GetMSBitSet	;wreg free
  1461  0007DC  0100               	movlb	0	; () banked
  1462  0007DE  6F8D               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1466  0007E0  0100               	movlb	0	; () banked
  1467  0007E2  518D               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1468  0007E4  0D02               	mullw	2
  1469  0007E6  0E60               	movlw	low _TMR_TimerArray
  1470  0007E8  24F3               	addwf	prodl,w,c
  1471  0007EA  6ED9               	movwf	fsr2l,c
  1472  0007EC  0E00               	movlw	high _TMR_TimerArray
  1473  0007EE  20F4               	addwfc	prodh,w,c
  1474  0007F0  6EDA               	movwf	fsr2h,c
  1475  0007F2  06DE               	decf	postinc2,f,c
  1476  0007F4  0E00               	movlw	0
  1477  0007F6  5ADD               	subwfb	postdec2,f,c
  1478  0007F8  50DE               	movf	postinc2,w,c
  1479  0007FA  10DE               	iorwf	postinc2,w,c
  1480  0007FC  A4D8               	btfss	status,2,c
  1481  0007FE  D043               	goto	l2292
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;ES_Timers.c: 299: {
  1485                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1486  000800  0E03               	movlw	3
  1487  000802  0100               	movlb	0	; () banked
  1488  000804  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1492  000806  C08D  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1493  00080A  0100               	movlb	0	; () banked
  1494  00080C  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1498  00080E  C080  F0D4         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI_Service@ThisEvent
  1499  000812  C081  F0D5         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI_Service@ThisEvent+1
  1500  000816  C082  F0D6         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI_Service@ThisEvent+2
  1501  00081A  0100               	movlb	0	; () banked
  1502  00081C  518D               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1503  00081E  0D02               	mullw	2
  1504  000820  0E21               	movlw	low _Timer2PostFunc
  1505  000822  24F3               	addwf	prodl,w,c
  1506  000824  6EF6               	movwf	tblptrl,c
  1507  000826  0E03               	movlw	high _Timer2PostFunc
  1508  000828  20F4               	addwfc	prodh,w,c
  1509  00082A  6EF7               	movwf	tblptrh,c
  1510  00082C                     	if	0	;There are less than 3 active tblptr bytes
  1511  00082C                     	endif
  1512  00082C  D801               	call	u1388
  1513  00082E  D00C               	goto	l2290
  1514  000830                     u1388:
  1515  000830  0005               	push	
  1516  000832  6EFA               	movwf	pclath,c
  1517  000834  0009               	tblrd		*+
  1518  000836  50F5               	movf	tablat,w,c
  1519  000838  6EFD               	movwf	tosl,c
  1520  00083A  0009               	tblrd		*+
  1521  00083C  50F5               	movf	tablat,w,c
  1522  00083E  6EFE               	movwf	tosh,c
  1523  000840  50F8               	movf	tblptru,w,c
  1524  000842  6EFF               	movwf	tosu,c
  1525  000844  50FA               	movf	pclath,w,c
  1526  000846  0012               	return		;indir
  1527  000848                     l2290:
  1528                           
  1529                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1530  000848  0100               	movlb	0	; () banked
  1531  00084A  518D               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1532  00084C  0D02               	mullw	2
  1533  00084E  0E01               	movlw	low _BitNum2SetMask
  1534  000850  24F3               	addwf	prodl,w,c
  1535  000852  6EF6               	movwf	tblptrl,c
  1536  000854  0E03               	movlw	high _BitNum2SetMask
  1537  000856  20F4               	addwfc	prodh,w,c
  1538  000858  6EF7               	movwf	tblptrh,c
  1539  00085A                     	if	0	;There are less than 3 active tblptr bytes
  1540  00085A                     	endif
  1541  00085A  0009               	tblrd		*+
  1542  00085C  CFF5 F0D7          	movff	tablat,??_ES_Timer_Tick_Resp
  1543  000860  0009               	tblrd		*+
  1544  000862  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1545  000866  0100               	movlb	0	; () banked
  1546  000868  1DD7               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1547  00086A  0100               	movlb	0	; () banked
  1548  00086C  6FD9               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1549  00086E  0100               	movlb	0	; () banked
  1550  000870  1DD8               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1551  000872  0100               	movlb	0	; () banked
  1552  000874  6FDA               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1553  000876  0100               	movlb	0	; () banked
  1554  000878  51D9               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1555  00087A  0100               	movlb	0	; () banked
  1556  00087C  178A               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1557  00087E  0100               	movlb	0	; () banked
  1558  000880  51DA               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1559  000882  0100               	movlb	0	; () banked
  1560  000884  178B               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1561  000886                     l2292:
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;ES_Timers.c: 306: }
  1565                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1566  000886  0100               	movlb	0	; () banked
  1567  000888  518D               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1568  00088A  0D02               	mullw	2
  1569  00088C  0E01               	movlw	low _BitNum2SetMask
  1570  00088E  24F3               	addwf	prodl,w,c
  1571  000890  6EF6               	movwf	tblptrl,c
  1572  000892  0E03               	movlw	high _BitNum2SetMask
  1573  000894  20F4               	addwfc	prodh,w,c
  1574  000896  6EF7               	movwf	tblptrh,c
  1575  000898                     	if	0	;There are less than 3 active tblptr bytes
  1576  000898                     	endif
  1577  000898  0009               	tblrd		*+
  1578  00089A  CFF5 F0D7          	movff	tablat,??_ES_Timer_Tick_Resp
  1579  00089E  0009               	tblrd		*+
  1580  0008A0  CFF5 F0D8          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1581  0008A4  0100               	movlb	0	; () banked
  1582  0008A6  1DD7               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1583  0008A8  0100               	movlb	0	; () banked
  1584  0008AA  6FD9               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1585  0008AC  0100               	movlb	0	; () banked
  1586  0008AE  1DD8               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1587  0008B0  0100               	movlb	0	; () banked
  1588  0008B2  6FDA               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1589  0008B4  0100               	movlb	0	; () banked
  1590  0008B6  51D9               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1591  0008B8  0100               	movlb	0	; () banked
  1592  0008BA  1786               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1593  0008BC  0100               	movlb	0	; () banked
  1594  0008BE  51DA               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1595  0008C0  0100               	movlb	0	; () banked
  1596  0008C2  1787               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1600  0008C4  0100               	movlb	0	; () banked
  1601  0008C6  5186               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1602  0008C8  0100               	movlb	0	; () banked
  1603  0008CA  1187               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1604  0008CC  B4D8               	btfsc	status,2,c
  1605  0008CE  0012               	return	
  1606  0008D0  D77F               	goto	l2280
  1607  0008D2                     __end_of_ES_Timer_Tick_Resp:
  1608                           	opt stack 0
  1609                           tosu	equ	0xFFF
  1610                           tosh	equ	0xFFE
  1611                           tosl	equ	0xFFD
  1612                           pclath	equ	0xFFA
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           prodh	equ	0xFF4
  1618                           prodl	equ	0xFF3
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           postdec2	equ	0xFDD
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _PostSPI_Service *****************
  1629 ;; Defined at:
  1630 ;;		line 82 in file "SPI_Service.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;		None
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      unsigned char 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1644 ;;      Params:         0       3       0       0
  1645 ;;      Locals:         0       0       0       0
  1646 ;;      Temps:          0       0       0       0
  1647 ;;      Totals:         0       3       0       0
  1648 ;;Total ram usage:        3 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    9
  1651 ;; This function calls:
  1652 ;;		_ES_PostToService
  1653 ;; This function is called by:
  1654 ;;		_RunSPI_Service
  1655 ;;		_ES_Timer_Tick_Resp
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text6
  1660  001388                     __ptext6:
  1661                           	opt stack 0
  1662  001388                     _PostSPI_Service:
  1663                           	opt stack 0
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;Skip over the trampoline to the duplicate function for level 2
  1667  001388  B240               	btfsc	btemp,1,c
  1668  00138A  EF0C  F00A         	goto	i2_PostSPI_Service
  1669  00138E                     _PostSPI_Service$intlevel0:
  1670                           	opt stack 18
  1671                           
  1672                           ;SPI_Service.c: 84: return ES_PostToService( MyPriority, ThisEvent);
  1673                           ;	Return value of _PostSPI_Service is never used
  1674                           
  1675                           ;incstack = 0
  1676  00138E  C0D4  F0CE         	movff	PostSPI_Service@ThisEvent,ES_PostToService@TheEvent
  1677  001392  C0D5  F0CF         	movff	PostSPI_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  1678  001396  C0D6  F0D0         	movff	PostSPI_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  1679  00139A  0100               	movlb	0	; () banked
  1680  00139C  518F               	movf	SPI_Service@MyPriority& (0+255),w,b
  1681  00139E  ECA1  F007         	call	_ES_PostToService
  1682  0013A2  0012               	return	
  1683  0013A4                     __end_of_PostSPI_Service:
  1684                           	opt stack 0
  1685                           tosu	equ	0xFFF
  1686                           tosh	equ	0xFFE
  1687                           tosl	equ	0xFFD
  1688                           pclath	equ	0xFFA
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           prodh	equ	0xFF4
  1694                           prodl	equ	0xFF3
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           indf2	equ	0xFDF
  1698                           postinc2	equ	0xFDE
  1699                           postdec2	equ	0xFDD
  1700                           fsr2h	equ	0xFDA
  1701                           fsr2l	equ	0xFD9
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _PostToggleService *****************
  1705 ;; Defined at:
  1706 ;;		line 107 in file "ToggleService.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      unsigned char 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1720 ;;      Params:         0       3       0       0
  1721 ;;      Locals:         0       0       0       0
  1722 ;;      Temps:          0       0       0       0
  1723 ;;      Totals:         0       3       0       0
  1724 ;;Total ram usage:        3 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    9
  1727 ;; This function calls:
  1728 ;;		_ES_PostToService
  1729 ;; This function is called by:
  1730 ;;		_ES_Timer_Tick_Resp
  1731 ;;		_PostToList
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text7
  1736  0013D6                     __ptext7:
  1737                           	opt stack 0
  1738  0013D6                     _PostToggleService:
  1739                           	opt stack 18
  1740                           
  1741                           ;ToggleService.c: 109: return ES_PostToService( MyPriority, ThisEvent);
  1742                           
  1743                           ;incstack = 0
  1744  0013D6  C0D4  F0CE         	movff	PostToggleService@ThisEvent,ES_PostToService@TheEvent
  1745  0013DA  C0D5  F0CF         	movff	PostToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  1746  0013DE  C0D6  F0D0         	movff	PostToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  1747  0013E2  0100               	movlb	0	; () banked
  1748  0013E4  5190               	movf	ToggleService@MyPriority& (0+255),w,b
  1749  0013E6  ECA1  F007         	call	_ES_PostToService
  1750  0013EA  0012               	return	
  1751  0013EC                     __end_of_PostToggleService:
  1752                           	opt stack 0
  1753                           tosu	equ	0xFFF
  1754                           tosh	equ	0xFFE
  1755                           tosl	equ	0xFFD
  1756                           pclath	equ	0xFFA
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           prodh	equ	0xFF4
  1762                           prodl	equ	0xFF3
  1763                           postinc0	equ	0xFEE
  1764                           wreg	equ	0xFE8
  1765                           indf2	equ	0xFDF
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _ES_GetMSBitSet *****************
  1773 ;; Defined at:
  1774 ;;		line 79 in file "ES_LookupTables.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  LoopCntr        1    9[BANK0 ] char 
  1779 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1780 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      unsigned char 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1790 ;;      Params:         0       2       0       0
  1791 ;;      Locals:         0       3       0       0
  1792 ;;      Temps:          0       5       0       0
  1793 ;;      Totals:         0      10       0       0
  1794 ;;Total ram usage:       10 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    6
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_ES_Run
  1801 ;;		_ES_Timer_Tick_Resp
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text8
  1806  000CEE                     __ptext8:
  1807                           	opt stack 0
  1808  000CEE                     _ES_GetMSBitSet:
  1809                           	opt stack 21
  1810                           
  1811                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1812                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1813                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1814                           
  1815                           ;incstack = 0
  1816  000CEE  0E80               	movlw	128
  1817  000CF0  0100               	movlb	0	; () banked
  1818  000CF2  6FBE               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1819                           
  1820                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1821  000CF4  0E03               	movlw	3
  1822  000CF6  0100               	movlb	0	; () banked
  1823  000CF8  6FC0               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1824  000CFA                     l2160:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1828  000CFA  0100               	movlb	0	; () banked
  1829  000CFC  BFC0               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1830  000CFE  D046               	goto	l2174
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1834                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1835                           ;ES_LookupTables.c: 91: 0x0F);
  1836                           
  1837                           ; BSR set to: 0
  1838                           
  1839                           ; BSR set to: 0
  1840  000D00  0100               	movlb	0	; () banked
  1841  000D02  51C0               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1842  000D04  0D04               	mullw	4
  1843  000D06  CFF3 F0B9          	movff	prodl,??_ES_GetMSBitSet
  1844  000D0A  C0B7  F0BA         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1845  000D0E  C0B8  F0BB         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1846  000D12  0100               	movlb	0	; () banked
  1847  000D14  2BB9               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1848  000D16  D004               	goto	u1214
  1849  000D18                     u1215:
  1850  000D18  0100               	movlb	0	; () banked
  1851  000D1A  90D8               	bcf	status,0,c
  1852  000D1C  33BB               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1853  000D1E  33BA               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1854  000D20                     u1214:
  1855  000D20  0100               	movlb	0	; () banked
  1856  000D22  2FB9               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1857  000D24  D7F9               	goto	u1215
  1858  000D26  0100               	movlb	0	; () banked
  1859  000D28  51BA               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1860  000D2A  0B0F               	andlw	15
  1861  000D2C  0100               	movlb	0	; () banked
  1862  000D2E  6FBF               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1866  000D30  0100               	movlb	0	; () banked
  1867  000D32  51BF               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1868  000D34  0100               	movlb	0	; () banked
  1869  000D36  B4D8               	btfsc	status,2,c
  1870  000D38  D026               	goto	l2170
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1874                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1875  000D3A  0EFF               	movlw	255
  1876  000D3C  0100               	movlb	0	; () banked
  1877  000D3E  6FB9               	movwf	??_ES_GetMSBitSet& (0+255),b
  1878  000D40  0EFF               	movlw	255
  1879  000D42  0100               	movlb	0	; () banked
  1880  000D44  6FBA               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1881  000D46  0100               	movlb	0	; () banked
  1882  000D48  51BF               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1883  000D4A  0100               	movlb	0	; () banked
  1884  000D4C  6FBB               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1885  000D4E  6BBC               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1886  000D50  0100               	movlb	0	; () banked
  1887  000D52  51B9               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1888  000D54  0100               	movlb	0	; () banked
  1889  000D56  27BB               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1890  000D58  0100               	movlb	0	; () banked
  1891  000D5A  51BA               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1892  000D5C  0100               	movlb	0	; () banked
  1893  000D5E  23BC               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1894  000D60  0E41               	movlw	low _Nybble2MSBitNum
  1895  000D62  0100               	movlb	0	; () banked
  1896  000D64  25BB               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1897  000D66  6EF6               	movwf	tblptrl,c
  1898  000D68  0E03               	movlw	high _Nybble2MSBitNum
  1899  000D6A  21BC               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1900  000D6C  6EF7               	movwf	tblptrh,c
  1901  000D6E                     	if	0	;There are less than 3 active tblptr bytes
  1902  000D6E                     	endif
  1903  000D6E  0008               	tblrd		*
  1904  000D70  CFF5 F0BD          	movff	tablat,??_ES_GetMSBitSet+4
  1905  000D74  0100               	movlb	0	; () banked
  1906  000D76  51C0               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1907  000D78  0D04               	mullw	4
  1908  000D7A  50F3               	movf	prodl,w,c
  1909  000D7C  0100               	movlb	0	; () banked
  1910  000D7E  25BD               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1911  000D80  0100               	movlb	0	; () banked
  1912  000D82  6FBE               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1913                           
  1914                           ;ES_LookupTables.c: 96: break;
  1915  000D84  D003               	goto	l2174
  1916  000D86                     l2170:
  1917                           
  1918                           ; BSR set to: 0
  1919  000D86  0100               	movlb	0	; () banked
  1920  000D88  07C0               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1921  000D8A  D7B7               	goto	l2160
  1922  000D8C                     l2174:
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;ES_LookupTables.c: 97: }
  1926                           ;ES_LookupTables.c: 98: }
  1927                           ;ES_LookupTables.c: 99: return ReturnVal;
  1928  000D8C  0100               	movlb	0	; () banked
  1929  000D8E  51BE               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1930  000D90  0012               	return	
  1931  000D92                     __end_of_ES_GetMSBitSet:
  1932                           	opt stack 0
  1933                           tosu	equ	0xFFF
  1934                           tosh	equ	0xFFE
  1935                           tosl	equ	0xFFD
  1936                           pclath	equ	0xFFA
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           indf2	equ	0xFDF
  1946                           postinc2	equ	0xFDE
  1947                           postdec2	equ	0xFDD
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _RunSPI_Service *****************
  1953 ;; Defined at:
  1954 ;;		line 98 in file "SPI_Service.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  ThisEvent       3   32[BANK0 ] struct ES_Event_t
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  1959 ;;  ReturnEvent     3   37[BANK0 ] struct ES_Event_t
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  3   32[BANK0 ] struct ES_Event_t
  1962 ;; Registers used:
  1963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1969 ;;      Params:         0       3       0       0
  1970 ;;      Locals:         0       6       0       0
  1971 ;;      Temps:          0       2       0       0
  1972 ;;      Totals:         0      11       0       0
  1973 ;;Total ram usage:       11 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:   10
  1976 ;; This function calls:
  1977 ;;		_ES_Timer_InitTimer
  1978 ;;		_FormPacket
  1979 ;;		_PostSPI_Service
  1980 ;;		_SetBGR
  1981 ;;		_sendByte
  1982 ;; This function is called by:
  1983 ;;		_ES_Run
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text9
  1988  0003BE                     __ptext9:
  1989                           	opt stack 0
  1990  0003BE                     _RunSPI_Service:
  1991                           	opt stack 19
  1992                           
  1993                           ;SPI_Service.c: 100: ES_Event ReturnEvent;
  1994                           ;SPI_Service.c: 101: if (ThisEvent.EventType == ES_TIMEOUT) {
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;incstack = 0
  1998  0003BE  0E03               	movlw	3
  1999  0003C0  0100               	movlb	0	; () banked
  2000  0003C2  19D7               	xorwf	RunSPI_Service@ThisEvent& (0+255),w,b
  2001  0003C4  A4D8               	btfss	status,2,c
  2002  0003C6  D040               	goto	l2548
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;SPI_Service.c: 102: if (ThisEvent.EventParam == 1){
  2006  0003C8  0100               	movlb	0	; () banked
  2007  0003CA  05D8               	decf	(RunSPI_Service@ThisEvent+1)& (0+255),w,b
  2008  0003CC  0100               	movlb	0	; () banked
  2009  0003CE  11D9               	iorwf	(RunSPI_Service@ThisEvent+2)& (0+255),w,b
  2010  0003D0  A4D8               	btfss	status,2,c
  2011  0003D2  D03A               	goto	l2548
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;SPI_Service.c: 103: if (LATA0 == 1)
  2015  0003D4  A089               	btfss	3977,0,c	;volatile
  2016  0003D6  D002               	goto	l436
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;SPI_Service.c: 104: {
  2020                           ;SPI_Service.c: 105: LATA0 = 0;
  2021  0003D8  9089               	bcf	3977,0,c	;volatile
  2022                           
  2023                           ;SPI_Service.c: 106: } else {
  2024  0003DA  D001               	goto	l2528
  2025  0003DC                     l436:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;SPI_Service.c: 107: LATA0 = 1;
  2029  0003DC  8089               	bsf	3977,0,c	;volatile
  2030  0003DE                     l2528:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;SPI_Service.c: 108: }
  2034                           ;SPI_Service.c: 109: if (LEDColor == 0) {
  2035  0003DE  0100               	movlb	0	; () banked
  2036  0003E0  5192               	movf	_LEDColor& (0+255),w,b
  2037  0003E2  A4D8               	btfss	status,2,c
  2038  0003E4  D00B               	goto	l2534
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;SPI_Service.c: 110: SetBGR(0x00, 0xFF, 0x00);
  2042  0003E6  0EFF               	movlw	255
  2043  0003E8  0100               	movlb	0	; () banked
  2044  0003EA  6FB7               	movwf	SetBGR@G& (0+255),b
  2045  0003EC  0E00               	movlw	0
  2046  0003EE  0100               	movlb	0	; () banked
  2047  0003F0  6FB8               	movwf	SetBGR@R& (0+255),b
  2048  0003F2  0E00               	movlw	0
  2049  0003F4  EC17  F00A         	call	_SetBGR
  2050                           
  2051                           ;SPI_Service.c: 111: LEDColor = 1;
  2052  0003F8  0E01               	movlw	1
  2053  0003FA  D019               	goto	L2
  2054  0003FC                     l2534:
  2055                           
  2056                           ; BSR set to: 0
  2057  0003FC  0100               	movlb	0	; () banked
  2058  0003FE  0592               	decf	_LEDColor& (0+255),w,b
  2059  000400  A4D8               	btfss	status,2,c
  2060  000402  D00B               	goto	l2540
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;SPI_Service.c: 113: SetBGR(0x00, 0x00, 0xFF);
  2064  000404  0E00               	movlw	0
  2065  000406  0100               	movlb	0	; () banked
  2066  000408  6FB7               	movwf	SetBGR@G& (0+255),b
  2067  00040A  0EFF               	movlw	255
  2068  00040C  0100               	movlb	0	; () banked
  2069  00040E  6FB8               	movwf	SetBGR@R& (0+255),b
  2070  000410  0E00               	movlw	0
  2071  000412  EC17  F00A         	call	_SetBGR
  2072                           
  2073                           ;SPI_Service.c: 114: LEDColor = 2;
  2074  000416  0E02               	movlw	2
  2075  000418  D00A               	goto	L2
  2076  00041A                     l2540:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;SPI_Service.c: 116: SetBGR(0xFF, 0x00, 0x00);
  2080  00041A  0E00               	movlw	0
  2081  00041C  0100               	movlb	0	; () banked
  2082  00041E  6FB7               	movwf	SetBGR@G& (0+255),b
  2083  000420  0E00               	movlw	0
  2084  000422  0100               	movlb	0	; () banked
  2085  000424  6FB8               	movwf	SetBGR@R& (0+255),b
  2086  000426  0EFF               	movlw	255
  2087  000428  EC17  F00A         	call	_SetBGR
  2088                           
  2089                           ;SPI_Service.c: 117: LEDColor = 0;
  2090  00042C  0E00               	movlw	0
  2091  00042E                     L2:
  2092  00042E  0100               	movlb	0	; () banked
  2093  000430  6F92               	movwf	_LEDColor& (0+255),b
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;SPI_Service.c: 118: }
  2097                           ;SPI_Service.c: 120: ES_Event ThisEvent;
  2098                           ;SPI_Service.c: 121: ThisEvent.EventType = SEND_TRIGGER;
  2099                           
  2100                           ; BSR set to: 0
  2101                           
  2102                           ; BSR set to: 0
  2103  000432  0E08               	movlw	8
  2104  000434  0100               	movlb	0	; () banked
  2105  000436  6FDF               	movwf	RunSPI_Service@ThisEvent_751& (0+255),b
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;SPI_Service.c: 122: PostSPI_Service(ThisEvent);
  2109  000438  C0DF  F0D4         	movff	RunSPI_Service@ThisEvent_751,PostSPI_Service@ThisEvent
  2110  00043C  C0E0  F0D5         	movff	RunSPI_Service@ThisEvent_751+1,PostSPI_Service@ThisEvent+1
  2111  000440  C0E1  F0D6         	movff	RunSPI_Service@ThisEvent_751+2,PostSPI_Service@ThisEvent+2
  2112  000444  ECC4  F009         	call	_PostSPI_Service	;wreg free
  2113  000448                     l2548:
  2114                           
  2115                           ;SPI_Service.c: 124: }
  2116                           ;SPI_Service.c: 125: }
  2117                           ;SPI_Service.c: 126: if (CurrentState == Waiting2Send) {
  2118  000448  0100               	movlb	0	; () banked
  2119  00044A  058E               	decf	SPI_Service@CurrentState& (0+255),w,b
  2120  00044C  A4D8               	btfss	status,2,c
  2121  00044E  D011               	goto	l2560
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;SPI_Service.c: 127: if (ThisEvent.EventType == SEND_TRIGGER) {
  2125  000450  0E08               	movlw	8
  2126  000452  0100               	movlb	0	; () banked
  2127  000454  19D7               	xorwf	RunSPI_Service@ThisEvent& (0+255),w,b
  2128  000456  A4D8               	btfss	status,2,c
  2129  000458  D067               	goto	l2580
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;SPI_Service.c: 128: CurrentState = Sending;
  2133  00045A  0E00               	movlw	0
  2134  00045C  0100               	movlb	0	; () banked
  2135  00045E  6F8E               	movwf	SPI_Service@CurrentState& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;SPI_Service.c: 129: NumBytesLeft--;
  2139  000460  0100               	movlb	0	; () banked
  2140  000462  0794               	decf	_NumBytesLeft& (0+255),f,b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;SPI_Service.c: 130: FormPacket();
  2144  000464  EC9E  F002         	call	_FormPacket	;wreg free
  2145                           
  2146                           ;SPI_Service.c: 131: sendByte(BytesToSend[0]);
  2147  000468  0101               	movlb	1	; () banked
  2148  00046A  5100               	movf	_BytesToSend& (0+255),w,b
  2149  00046C  EC27  F00A         	call	_sendByte
  2150                           
  2151                           ;SPI_Service.c: 132: }
  2152                           ;SPI_Service.c: 133: } else if (CurrentState == Sending) {
  2153  000470  D05B               	goto	l2580
  2154  000472                     l2560:
  2155  000472  0100               	movlb	0	; () banked
  2156  000474  518E               	movf	SPI_Service@CurrentState& (0+255),w,b
  2157  000476  A4D8               	btfss	status,2,c
  2158  000478  D057               	goto	l2580
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;SPI_Service.c: 134: if (ThisEvent.EventType == BYTE_SENT) {
  2162  00047A  0E05               	movlw	5
  2163  00047C  0100               	movlb	0	; () banked
  2164  00047E  19D7               	xorwf	RunSPI_Service@ThisEvent& (0+255),w,b
  2165  000480  A4D8               	btfss	status,2,c
  2166  000482  D033               	goto	l2576
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;SPI_Service.c: 135: if (NumBytesLeft == 0) {
  2170  000484  0100               	movlb	0	; () banked
  2171  000486  5194               	movf	_NumBytesLeft& (0+255),w,b
  2172  000488  A4D8               	btfss	status,2,c
  2173  00048A  D012               	goto	l2572
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;SPI_Service.c: 136: NumBytesLeft = 8 + 11*4;
  2177  00048C  0E34               	movlw	52
  2178  00048E  0100               	movlb	0	; () banked
  2179  000490  6F94               	movwf	_NumBytesLeft& (0+255),b
  2180                           
  2181                           ;SPI_Service.c: 137: FirstSend = 1;
  2182  000492  0E01               	movlw	1
  2183  000494  0100               	movlb	0	; () banked
  2184  000496  6F91               	movwf	_FirstSend& (0+255),b
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;SPI_Service.c: 138: ES_Timer_InitTimer(1, 50);
  2188  000498  0E00               	movlw	0
  2189  00049A  0100               	movlb	0	; () banked
  2190  00049C  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2191  00049E  0E32               	movlw	50
  2192  0004A0  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2193  0004A2  0E01               	movlw	1
  2194  0004A4  EC61  F007         	call	_ES_Timer_InitTimer
  2195                           
  2196                           ;SPI_Service.c: 139: CurrentState = Waiting2Send;
  2197  0004A8  0E01               	movlw	1
  2198  0004AA  0100               	movlb	0	; () banked
  2199  0004AC  6F8E               	movwf	SPI_Service@CurrentState& (0+255),b
  2200                           
  2201                           ;SPI_Service.c: 140: } else {
  2202  0004AE  D03C               	goto	l2580
  2203  0004B0                     l2572:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;SPI_Service.c: 141: NumBytesLeft--;
  2207  0004B0  0100               	movlb	0	; () banked
  2208  0004B2  0794               	decf	_NumBytesLeft& (0+255),f,b
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;SPI_Service.c: 142: sendByte(BytesToSend[8 + 11*4 - NumBytesLeft - 1]);
  2212  0004B4  0100               	movlb	0	; () banked
  2213  0004B6  5194               	movf	_NumBytesLeft& (0+255),w,b
  2214  0004B8  0100               	movlb	0	; () banked
  2215  0004BA  6FDA               	movwf	??_RunSPI_Service& (0+255),b
  2216  0004BC  6BDB               	clrf	(??_RunSPI_Service+1)& (0+255),b
  2217  0004BE  0100               	movlb	0	; () banked
  2218  0004C0  1FDA               	comf	??_RunSPI_Service& (0+255),f,b
  2219  0004C2  1FDB               	comf	(??_RunSPI_Service+1)& (0+255),f,b
  2220  0004C4  4BDA               	infsnz	??_RunSPI_Service& (0+255),f,b
  2221  0004C6  2BDB               	incf	(??_RunSPI_Service+1)& (0+255),f,b
  2222  0004C8  0E33               	movlw	51
  2223  0004CA  0100               	movlb	0	; () banked
  2224  0004CC  27DA               	addwf	??_RunSPI_Service& (0+255),f,b
  2225  0004CE  0E00               	movlw	0
  2226  0004D0  23DB               	addwfc	(??_RunSPI_Service+1)& (0+255),f,b
  2227  0004D2  0E00               	movlw	low _BytesToSend
  2228  0004D4  0100               	movlb	0	; () banked
  2229  0004D6  25DA               	addwf	??_RunSPI_Service& (0+255),w,b
  2230  0004D8  6ED9               	movwf	fsr2l,c
  2231  0004DA  0E01               	movlw	high _BytesToSend
  2232  0004DC  0100               	movlb	0	; () banked
  2233  0004DE  21DB               	addwfc	(??_RunSPI_Service+1)& (0+255),w,b
  2234  0004E0  6EDA               	movwf	fsr2h,c
  2235  0004E2  50DF               	movf	indf2,w,c
  2236  0004E4  EC27  F00A         	call	_sendByte
  2237                           
  2238                           ;SPI_Service.c: 143: }
  2239                           ;SPI_Service.c: 144: } else if(ThisEvent.EventType == BUF_NOT_READY) {
  2240  0004E8  D01F               	goto	l2580
  2241  0004EA                     l2576:
  2242  0004EA  0E09               	movlw	9
  2243  0004EC  0100               	movlb	0	; () banked
  2244  0004EE  19D7               	xorwf	RunSPI_Service@ThisEvent& (0+255),w,b
  2245  0004F0  A4D8               	btfss	status,2,c
  2246  0004F2  D01A               	goto	l2580
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;SPI_Service.c: 145: sendByte(BytesToSend[8 + 11*4 - NumBytesLeft - 1]);
  2250  0004F4  0100               	movlb	0	; () banked
  2251  0004F6  5194               	movf	_NumBytesLeft& (0+255),w,b
  2252  0004F8  0100               	movlb	0	; () banked
  2253  0004FA  6FDA               	movwf	??_RunSPI_Service& (0+255),b
  2254  0004FC  6BDB               	clrf	(??_RunSPI_Service+1)& (0+255),b
  2255  0004FE  0100               	movlb	0	; () banked
  2256  000500  1FDA               	comf	??_RunSPI_Service& (0+255),f,b
  2257  000502  1FDB               	comf	(??_RunSPI_Service+1)& (0+255),f,b
  2258  000504  4BDA               	infsnz	??_RunSPI_Service& (0+255),f,b
  2259  000506  2BDB               	incf	(??_RunSPI_Service+1)& (0+255),f,b
  2260  000508  0E33               	movlw	51
  2261  00050A  0100               	movlb	0	; () banked
  2262  00050C  27DA               	addwf	??_RunSPI_Service& (0+255),f,b
  2263  00050E  0E00               	movlw	0
  2264  000510  23DB               	addwfc	(??_RunSPI_Service+1)& (0+255),f,b
  2265  000512  0E00               	movlw	low _BytesToSend
  2266  000514  0100               	movlb	0	; () banked
  2267  000516  25DA               	addwf	??_RunSPI_Service& (0+255),w,b
  2268  000518  6ED9               	movwf	fsr2l,c
  2269  00051A  0E01               	movlw	high _BytesToSend
  2270  00051C  0100               	movlb	0	; () banked
  2271  00051E  21DB               	addwfc	(??_RunSPI_Service+1)& (0+255),w,b
  2272  000520  6EDA               	movwf	fsr2h,c
  2273  000522  50DF               	movf	indf2,w,c
  2274  000524  EC27  F00A         	call	_sendByte
  2275  000528                     l2580:
  2276                           
  2277                           ;SPI_Service.c: 146: }
  2278                           ;SPI_Service.c: 147: }
  2279                           ;SPI_Service.c: 149: ReturnEvent.EventType = ES_NO_EVENT;
  2280  000528  0E00               	movlw	0
  2281  00052A  0100               	movlb	0	; () banked
  2282  00052C  6FDC               	movwf	RunSPI_Service@ReturnEvent& (0+255),b
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;SPI_Service.c: 150: return(ReturnEvent);
  2286  00052E  C0DC  F0D7         	movff	RunSPI_Service@ReturnEvent,?_RunSPI_Service
  2287  000532  C0DD  F0D8         	movff	RunSPI_Service@ReturnEvent+1,?_RunSPI_Service+1
  2288  000536  C0DE  F0D9         	movff	RunSPI_Service@ReturnEvent+2,?_RunSPI_Service+2
  2289  00053A  0012               	return	
  2290  00053C                     __end_of_RunSPI_Service:
  2291                           	opt stack 0
  2292                           tosu	equ	0xFFF
  2293                           tosh	equ	0xFFE
  2294                           tosl	equ	0xFFD
  2295                           pclath	equ	0xFFA
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           indf2	equ	0xFDF
  2305                           postinc2	equ	0xFDE
  2306                           postdec2	equ	0xFDD
  2307                           fsr2h	equ	0xFDA
  2308                           fsr2l	equ	0xFD9
  2309                           status	equ	0xFD8
  2310                           
  2311 ;; *************** function _RunToggleService *****************
  2312 ;; Defined at:
  2313 ;;		line 129 in file "ToggleService.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  ThisEvent       3   32[BANK0 ] struct ES_Event_t
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  ReturnEvent     3   35[BANK0 ] struct ES_Event_t
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  3   32[BANK0 ] struct ES_Event_t
  2320 ;; Registers used:
  2321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2327 ;;      Params:         0       3       0       0
  2328 ;;      Locals:         0       3       0       0
  2329 ;;      Temps:          0       0       0       0
  2330 ;;      Totals:         0       6       0       0
  2331 ;;Total ram usage:        6 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    7
  2334 ;; This function calls:
  2335 ;;		_ES_Timer_InitTimer
  2336 ;; This function is called by:
  2337 ;;		_ES_Run
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text10
  2342  001190                     __ptext10:
  2343                           	opt stack 0
  2344  001190                     _RunToggleService:
  2345                           	opt stack 22
  2346                           
  2347                           ;ToggleService.c: 131: ES_Event ReturnEvent;
  2348                           ;ToggleService.c: 132: ReturnEvent.EventType = ES_NO_EVENT;
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;incstack = 0
  2352  001190  0E00               	movlw	0
  2353  001192  0100               	movlb	0	; () banked
  2354  001194  6FDA               	movwf	RunToggleService@ReturnEvent& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;ToggleService.c: 136: if (ThisEvent.EventType == ES_TIMEOUT) {
  2358  001196  0E03               	movlw	3
  2359  001198  0100               	movlb	0	; () banked
  2360  00119A  19D7               	xorwf	RunToggleService@ThisEvent& (0+255),w,b
  2361  00119C  A4D8               	btfss	status,2,c
  2362  00119E  D014               	goto	l2498
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;ToggleService.c: 137: if (ThisEvent.EventParam == 0) {
  2366  0011A0  0100               	movlb	0	; () banked
  2367  0011A2  51D8               	movf	(RunToggleService@ThisEvent+1)& (0+255),w,b
  2368  0011A4  0100               	movlb	0	; () banked
  2369  0011A6  11D9               	iorwf	(RunToggleService@ThisEvent+2)& (0+255),w,b
  2370  0011A8  A4D8               	btfss	status,2,c
  2371  0011AA  D00E               	goto	l2498
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;ToggleService.c: 138: if (LATA1 == 1) {
  2375  0011AC  A289               	btfss	3977,1,c	;volatile
  2376  0011AE  D002               	goto	l376
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;ToggleService.c: 139: LATA1 = 0;
  2380  0011B0  9289               	bcf	3977,1,c	;volatile
  2381                           
  2382                           ;ToggleService.c: 140: } else if (LATA1 == 0) {
  2383  0011B2  D002               	goto	l2496
  2384  0011B4                     l376:
  2385                           
  2386                           ; BSR set to: 0
  2387  0011B4  A289               	btfss	3977,1,c	;volatile
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;ToggleService.c: 141: LATA1 = 1;
  2391  0011B6  8289               	bsf	3977,1,c	;volatile
  2392  0011B8                     l2496:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;ToggleService.c: 142: }
  2396                           ;ToggleService.c: 143: ES_Timer_InitTimer(0,50);
  2397  0011B8  0E00               	movlw	0
  2398  0011BA  0100               	movlb	0	; () banked
  2399  0011BC  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  2400  0011BE  0E32               	movlw	50
  2401  0011C0  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  2402  0011C2  0E00               	movlw	0
  2403  0011C4  EC61  F007         	call	_ES_Timer_InitTimer
  2404  0011C8                     l2498:
  2405                           
  2406                           ;ToggleService.c: 144: }
  2407                           ;ToggleService.c: 145: }
  2408                           ;ToggleService.c: 146: return ReturnEvent;
  2409  0011C8  C0DA  F0D7         	movff	RunToggleService@ReturnEvent,?_RunToggleService
  2410  0011CC  C0DB  F0D8         	movff	RunToggleService@ReturnEvent+1,?_RunToggleService+1
  2411  0011D0  C0DC  F0D9         	movff	RunToggleService@ReturnEvent+2,?_RunToggleService+2
  2412  0011D4  0012               	return	
  2413  0011D6                     __end_of_RunToggleService:
  2414                           	opt stack 0
  2415                           tosu	equ	0xFFF
  2416                           tosh	equ	0xFFE
  2417                           tosl	equ	0xFFD
  2418                           pclath	equ	0xFFA
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _sendByte *****************
  2435 ;; Defined at:
  2436 ;;		line 168 in file "SPI_Service.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  Data            1    wreg     unsigned char 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  Data            1    0[BANK0 ] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2450 ;;      Params:         0       0       0       0
  2451 ;;      Locals:         0       1       0       0
  2452 ;;      Temps:          0       0       0       0
  2453 ;;      Totals:         0       1       0       0
  2454 ;;Total ram usage:        1 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    6
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_RunSPI_Service
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text11
  2465  00144E                     __ptext11:
  2466                           	opt stack 0
  2467  00144E                     _sendByte:
  2468                           	opt stack 22
  2469                           
  2470                           ;incstack = 0
  2471                           ;sendByte@Data stored from wreg
  2472  00144E  0100               	movlb	0	; () banked
  2473  001450  6FB7               	movwf	sendByte@Data& (0+255),b
  2474                           
  2475                           ;SPI_Service.c: 181: SSPBUF = Data;
  2476  001452  C0B7  FFC9         	movff	sendByte@Data,4041	;volatile
  2477  001456  0012               	return		;funcret
  2478  001458                     __end_of_sendByte:
  2479                           	opt stack 0
  2480                           tosu	equ	0xFFF
  2481                           tosh	equ	0xFFE
  2482                           tosl	equ	0xFFD
  2483                           pclath	equ	0xFFA
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           indf2	equ	0xFDF
  2493                           postinc2	equ	0xFDE
  2494                           postdec2	equ	0xFDD
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _ES_DeQueue *****************
  2500 ;; Defined at:
  2501 ;;		line 164 in file "ES_Queue.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  2504 ;;		 -> Queue1(12), Queue0(18), 
  2505 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  2506 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  2509 ;;		 -> Queue1(12), Queue0(18), 
  2510 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  2511 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      unsigned char 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2521 ;;      Params:         0       4       0       0
  2522 ;;      Locals:         0       4       0       0
  2523 ;;      Temps:          0       2       0       0
  2524 ;;      Totals:         0      10       0       0
  2525 ;;Total ram usage:       10 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    7
  2528 ;; This function calls:
  2529 ;;		___lbmod
  2530 ;;		___wmul
  2531 ;; This function is called by:
  2532 ;;		_ES_Run
  2533 ;;		_ES_RecallEvents
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text12
  2538  000694                     __ptext12:
  2539                           	opt stack 0
  2540  000694                     _ES_DeQueue:
  2541                           	opt stack 22
  2542                           
  2543                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2544                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2545                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2546                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2547                           
  2548                           ;incstack = 0
  2549  000694  C0C3  F0CB         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2550  000698  C0C4  F0CC         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2551                           
  2552                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2553  00069C  0100               	movlb	0	; () banked
  2554  00069E  EE20 F002          	lfsr	2,2
  2555  0006A2  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2556  0006A4  26D9               	addwf	fsr2l,f,c
  2557  0006A6  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2558  0006A8  22DA               	addwfc	fsr2h,f,c
  2559  0006AA  50DF               	movf	indf2,w,c
  2560  0006AC  B4D8               	btfsc	status,2,c
  2561  0006AE  D06F               	goto	l2420
  2562                           
  2563                           ; BSR set to: 0
  2564                           
  2565                           ;ES_Queue.c: 172: {
  2566                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2567  0006B0  CFF2 F0C9          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2568  0006B4  9EF2               	bcf	intcon,7,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2572                           
  2573                           ; BSR set to: 0
  2574  0006B6  0100               	movlb	0	; () banked
  2575  0006B8  EE20 F001          	lfsr	2,1
  2576  0006BC  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2577  0006BE  26D9               	addwf	fsr2l,f,c
  2578  0006C0  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2579  0006C2  22DA               	addwfc	fsr2h,f,c
  2580  0006C4  50DF               	movf	indf2,w,c
  2581  0006C6  0100               	movlb	0	; () banked
  2582  0006C8  6FC7               	movwf	??_ES_DeQueue& (0+255),b
  2583  0006CA  0E01               	movlw	1
  2584  0006CC  0100               	movlb	0	; () banked
  2585  0006CE  25C7               	addwf	??_ES_DeQueue& (0+255),w,b
  2586  0006D0  0100               	movlb	0	; () banked
  2587  0006D2  6FBD               	movwf	___wmul@multiplier& (0+255),b
  2588  0006D4  0100               	movlb	0	; () banked
  2589  0006D6  6BBE               	clrf	(___wmul@multiplier+1)& (0+255),b
  2590  0006D8  0E00               	movlw	0
  2591  0006DA  23BE               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  2592  0006DC  0E00               	movlw	0
  2593  0006DE  0100               	movlb	0	; () banked
  2594  0006E0  6FC0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2595  0006E2  0E03               	movlw	3
  2596  0006E4  6FBF               	movwf	___wmul@multiplicand& (0+255),b
  2597  0006E6  EC4D  F009         	call	___wmul	;wreg free
  2598  0006EA  0100               	movlb	0	; () banked
  2599  0006EC  51BD               	movf	?___wmul& (0+255),w,b
  2600  0006EE  0100               	movlb	0	; () banked
  2601  0006F0  25C3               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  2602  0006F2  6ED9               	movwf	fsr2l,c
  2603  0006F4  0100               	movlb	0	; () banked
  2604  0006F6  51BE               	movf	(?___wmul+1)& (0+255),w,b
  2605  0006F8  0100               	movlb	0	; () banked
  2606  0006FA  21C4               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  2607  0006FC  6EDA               	movwf	fsr2h,c
  2608  0006FE  C0C5  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2609  000702  C0C6  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2610  000706  CFDE FFE6          	movff	postinc2,postinc1
  2611  00070A  CFDE FFE6          	movff	postinc2,postinc1
  2612  00070E  CFDE FFE6          	movff	postinc2,postinc1
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2616  000712  0100               	movlb	0	; () banked
  2617  000714  EE20 F001          	lfsr	2,1
  2618  000718  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2619  00071A  26D9               	addwf	fsr2l,f,c
  2620  00071C  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2621  00071E  22DA               	addwfc	fsr2h,f,c
  2622  000720  2ADF               	incf	indf2,f,c
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2626  000722  C0CB  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2627  000726  C0CC  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2628  00072A  0100               	movlb	0	; () banked
  2629  00072C  EE10 F001          	lfsr	1,1
  2630  000730  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2631  000732  26E1               	addwf	fsr1l,f,c
  2632  000734  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2633  000736  22E2               	addwfc	fsr1h,f,c
  2634  000738  50DE               	movf	postinc2,w,c
  2635  00073A  5CE6               	subwf	postinc1,w,c
  2636  00073C  A0D8               	btfss	status,0,c
  2637  00073E  D019               	goto	l2416
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2641  000740  0100               	movlb	0	; () banked
  2642  000742  EE20 F001          	lfsr	2,1
  2643  000746  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2644  000748  26D9               	addwf	fsr2l,f,c
  2645  00074A  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2646  00074C  22DA               	addwfc	fsr2h,f,c
  2647  00074E  C0CB  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2648  000752  C0CC  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2649  000756  50E7               	movf	indf1,w,c
  2650  000758  0100               	movlb	0	; () banked
  2651  00075A  6FB7               	movwf	___lbmod@divisor& (0+255),b
  2652  00075C  0100               	movlb	0	; () banked
  2653  00075E  EE10 F001          	lfsr	1,1
  2654  000762  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2655  000764  26E1               	addwf	fsr1l,f,c
  2656  000766  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2657  000768  22E2               	addwfc	fsr1h,f,c
  2658  00076A  50E7               	movf	indf1,w,c
  2659  00076C  ECEB  F008         	call	___lbmod
  2660  000770  6EDF               	movwf	indf2,c
  2661  000772                     l2416:
  2662                           
  2663                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2664  000772  0100               	movlb	0	; () banked
  2665  000774  EE20 F002          	lfsr	2,2
  2666  000778  51CB               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2667  00077A  26D9               	addwf	fsr2l,f,c
  2668  00077C  51CC               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2669  00077E  22DA               	addwfc	fsr2h,f,c
  2670  000780  06DF               	decf	indf2,f,c
  2671  000782  50DF               	movf	indf2,w,c
  2672  000784  0100               	movlb	0	; () banked
  2673  000786  6FCA               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2677  000788  C0C9  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2678                           
  2679                           ;ES_Queue.c: 183: }else {
  2680  00078C  D014               	goto	l2426
  2681  00078E                     l2420:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2685  00078E  C0C5  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2686  000792  C0C6  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2687  000796  0E00               	movlw	0
  2688  000798  6EDF               	movwf	indf2,c
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2692  00079A  0100               	movlb	0	; () banked
  2693  00079C  EE20 F001          	lfsr	2,1
  2694  0007A0  51C5               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  2695  0007A2  26D9               	addwf	fsr2l,f,c
  2696  0007A4  51C6               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  2697  0007A6  22DA               	addwfc	fsr2h,f,c
  2698  0007A8  0E00               	movlw	0
  2699  0007AA  6EDE               	movwf	postinc2,c
  2700  0007AC  0E00               	movlw	0
  2701  0007AE  6EDD               	movwf	postdec2,c
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;ES_Queue.c: 186: NumLeft = 0;
  2705  0007B0  0E00               	movlw	0
  2706  0007B2  0100               	movlb	0	; () banked
  2707  0007B4  6FCA               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2708  0007B6                     l2426:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;ES_Queue.c: 187: }
  2712                           ;ES_Queue.c: 188: return NumLeft;
  2713  0007B6  0100               	movlb	0	; () banked
  2714  0007B8  51CA               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  2715  0007BA  0012               	return	
  2716  0007BC                     __end_of_ES_DeQueue:
  2717                           	opt stack 0
  2718                           tosu	equ	0xFFF
  2719                           tosh	equ	0xFFE
  2720                           tosl	equ	0xFFD
  2721                           pclath	equ	0xFFA
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           intcon	equ	0xFF2
  2729                           postinc0	equ	0xFEE
  2730                           wreg	equ	0xFE8
  2731                           indf1	equ	0xFE7
  2732                           postinc1	equ	0xFE6
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8
  2741                           
  2742 ;; *************** function ___lbmod *****************
  2743 ;; Defined at:
  2744 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  dividend        1    wreg     unsigned char 
  2747 ;;  divisor         1    0[BANK0 ] unsigned char 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  dividend        1    1[BANK0 ] unsigned char 
  2750 ;;  rem             1    3[BANK0 ] unsigned char 
  2751 ;;  counter         1    2[BANK0 ] unsigned char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      unsigned char 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2761 ;;      Params:         0       1       0       0
  2762 ;;      Locals:         0       3       0       0
  2763 ;;      Temps:          0       0       0       0
  2764 ;;      Totals:         0       4       0       0
  2765 ;;Total ram usage:        4 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    6
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_ES_DeQueue
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text13
  2776  0011D6                     __ptext13:
  2777                           	opt stack 0
  2778  0011D6                     ___lbmod:
  2779                           	opt stack 22
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;incstack = 0
  2783                           ;___lbmod@dividend stored from wreg
  2784  0011D6  0100               	movlb	0	; () banked
  2785  0011D8  6FB8               	movwf	___lbmod@dividend& (0+255),b
  2786  0011DA  0E08               	movlw	8
  2787  0011DC  0100               	movlb	0	; () banked
  2788  0011DE  6FB9               	movwf	___lbmod@counter& (0+255),b
  2789  0011E0  0E00               	movlw	0
  2790  0011E2  0100               	movlb	0	; () banked
  2791  0011E4  6FBA               	movwf	___lbmod@rem& (0+255),b
  2792  0011E6                     l2354:
  2793                           
  2794                           ; BSR set to: 0
  2795  0011E6  90D8               	bcf	status,0,c
  2796  0011E8  0100               	movlb	0	; () banked
  2797  0011EA  35B8               	rlcf	___lbmod@dividend& (0+255),w,b
  2798  0011EC  0100               	movlb	0	; () banked
  2799  0011EE  35BA               	rlcf	___lbmod@rem& (0+255),w,b
  2800  0011F0  0100               	movlb	0	; () banked
  2801  0011F2  6FBA               	movwf	___lbmod@rem& (0+255),b
  2802                           
  2803                           ; BSR set to: 0
  2804  0011F4  0100               	movlb	0	; () banked
  2805  0011F6  90D8               	bcf	status,0,c
  2806  0011F8  37B8               	rlcf	___lbmod@dividend& (0+255),f,b
  2807                           
  2808                           ; BSR set to: 0
  2809  0011FA  0100               	movlb	0	; () banked
  2810  0011FC  51B7               	movf	___lbmod@divisor& (0+255),w,b
  2811  0011FE  0100               	movlb	0	; () banked
  2812  001200  5DBA               	subwf	___lbmod@rem& (0+255),w,b
  2813  001202  A0D8               	btfss	status,0,c
  2814  001204  D004               	goto	l2362
  2815                           
  2816                           ; BSR set to: 0
  2817  001206  0100               	movlb	0	; () banked
  2818  001208  51B7               	movf	___lbmod@divisor& (0+255),w,b
  2819  00120A  0100               	movlb	0	; () banked
  2820  00120C  5FBA               	subwf	___lbmod@rem& (0+255),f,b
  2821  00120E                     l2362:
  2822                           
  2823                           ; BSR set to: 0
  2824  00120E  0100               	movlb	0	; () banked
  2825  001210  2FB9               	decfsz	___lbmod@counter& (0+255),f,b
  2826  001212  D7E9               	goto	l2354
  2827                           
  2828                           ; BSR set to: 0
  2829                           
  2830                           ; BSR set to: 0
  2831  001214  0100               	movlb	0	; () banked
  2832  001216  51BA               	movf	___lbmod@rem& (0+255),w,b
  2833  001218  0012               	return	
  2834  00121A                     __end_of___lbmod:
  2835                           	opt stack 0
  2836                           tosu	equ	0xFFF
  2837                           tosh	equ	0xFFE
  2838                           tosl	equ	0xFFD
  2839                           pclath	equ	0xFFA
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           intcon	equ	0xFF2
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           indf1	equ	0xFE7
  2850                           postinc1	equ	0xFE6
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           postinc2	equ	0xFDE
  2855                           postdec2	equ	0xFDD
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function _ES_CheckUserEvents *****************
  2861 ;; Defined at:
  2862 ;;		line 46 in file "ES_CheckEvents.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  i               1   37[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      unsigned char 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2876 ;;      Params:         0       0       0       0
  2877 ;;      Locals:         0       1       0       0
  2878 ;;      Temps:          0       0       0       0
  2879 ;;      Totals:         0       1       0       0
  2880 ;;Total ram usage:        1 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:   11
  2883 ;; This function calls:
  2884 ;;		_Check4Keystroke
  2885 ;;		_CheckButtonEvents
  2886 ;; This function is called by:
  2887 ;;		_ES_Run
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text14
  2892  001146                     __ptext14:
  2893                           	opt stack 0
  2894  001146                     _ES_CheckUserEvents:
  2895                           	opt stack 18
  2896                           
  2897                           ;ES_CheckEvents.c: 48: uint8_t i;
  2898                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;incstack = 0
  2902  001146  0E00               	movlw	0
  2903  001148  0100               	movlb	0	; () banked
  2904  00114A  6FDC               	movwf	ES_CheckUserEvents@i& (0+255),b
  2905  00114C                     l2386:
  2906                           
  2907                           ; BSR set to: 0
  2908  00114C  0E01               	movlw	1
  2909  00114E  0100               	movlb	0	; () banked
  2910  001150  65DC               	cpfsgt	ES_CheckUserEvents@i& (0+255),b
  2911  001152  D001               	goto	l2390
  2912  001154  0012               	return	
  2913  001156                     l2390:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2917  001156  0100               	movlb	0	; () banked
  2918  001158  51DC               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2919  00115A  0D02               	mullw	2
  2920  00115C  0E5E               	movlw	low _ES_EventList
  2921  00115E  24F3               	addwf	prodl,w,c
  2922  001160  6EF6               	movwf	tblptrl,c
  2923  001162  0E03               	movlw	high _ES_EventList
  2924  001164  20F4               	addwfc	prodh,w,c
  2925  001166  6EF7               	movwf	tblptrh,c
  2926  001168                     	if	0	;There are less than 3 active tblptr bytes
  2927  001168                     	endif
  2928  001168  D801               	call	u1498
  2929  00116A  D00C               	goto	u1499
  2930  00116C                     u1498:
  2931  00116C  0005               	push	
  2932  00116E  6EFA               	movwf	pclath,c
  2933  001170  0009               	tblrd		*+
  2934  001172  50F5               	movf	tablat,w,c
  2935  001174  6EFD               	movwf	tosl,c
  2936  001176  0009               	tblrd		*+
  2937  001178  50F5               	movf	tablat,w,c
  2938  00117A  6EFE               	movwf	tosh,c
  2939  00117C  50F8               	movf	tblptru,w,c
  2940  00117E  6EFF               	movwf	tosu,c
  2941  001180  50FA               	movf	pclath,w,c
  2942  001182  0012               	return		;indir
  2943  001184                     u1499:
  2944  001184  06E8               	decf	wreg,f,c
  2945  001186  B4D8               	btfsc	status,2,c
  2946  001188  0012               	return	
  2947                           
  2948                           ;ES_CheckEvents.c: 52: break;
  2949  00118A  0100               	movlb	0	; () banked
  2950  00118C  2BDC               	incf	ES_CheckUserEvents@i& (0+255),f,b
  2951  00118E  D7DE               	goto	l2386
  2952  001190                     __end_of_ES_CheckUserEvents:
  2953                           	opt stack 0
  2954                           tosu	equ	0xFFF
  2955                           tosh	equ	0xFFE
  2956                           tosl	equ	0xFFD
  2957                           pclath	equ	0xFFA
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           intcon	equ	0xFF2
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           indf1	equ	0xFE7
  2968                           postinc1	equ	0xFE6
  2969                           fsr1h	equ	0xFE2
  2970                           fsr1l	equ	0xFE1
  2971                           indf2	equ	0xFDF
  2972                           postinc2	equ	0xFDE
  2973                           postdec2	equ	0xFDD
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _Check4Keystroke *****************
  2979 ;; Defined at:
  2980 ;;		line 108 in file "EventCheckers.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      unsigned char 
  2987 ;; Registers used:
  2988 ;;		wreg
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2994 ;;      Params:         0       0       0       0
  2995 ;;      Locals:         0       0       0       0
  2996 ;;      Temps:          0       0       0       0
  2997 ;;      Totals:         0       0       0       0
  2998 ;;Total ram usage:        0 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    6
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_ES_CheckUserEvents
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text15
  3009  001460                     __ptext15:
  3010                           	opt stack 0
  3011  001460                     _Check4Keystroke:
  3012                           	opt stack 22
  3013                           
  3014                           ;EventCheckers.c: 124: return 0;
  3015                           
  3016                           ;incstack = 0
  3017  001460  0E00               	movlw	0
  3018  001462  0012               	return	
  3019  001464                     __end_of_Check4Keystroke:
  3020                           	opt stack 0
  3021                           tosu	equ	0xFFF
  3022                           tosh	equ	0xFFE
  3023                           tosl	equ	0xFFD
  3024                           pclath	equ	0xFFA
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           intcon	equ	0xFF2
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           indf1	equ	0xFE7
  3035                           postinc1	equ	0xFE6
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           postdec2	equ	0xFDD
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _CheckButtonEvents *****************
  3046 ;; Defined at:
  3047 ;;		line 59 in file "Button.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  ThisEvent       3   33[BANK0 ] struct ES_Event_t
  3052 ;;  CurrentButto    1   36[BANK0 ] unsigned char 
  3053 ;;  ReturnVal       1   32[BANK0 ] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      unsigned char 
  3056 ;; Registers used:
  3057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3063 ;;      Params:         0       0       0       0
  3064 ;;      Locals:         0       5       0       0
  3065 ;;      Temps:          0       0       0       0
  3066 ;;      Totals:         0       5       0       0
  3067 ;;Total ram usage:        5 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:   10
  3070 ;; This function calls:
  3071 ;;		_GetInputLine
  3072 ;;		_PostButtonDebounceSM
  3073 ;; This function is called by:
  3074 ;;		_ES_CheckUserEvents
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text16
  3079  001092                     __ptext16:
  3080                           	opt stack 0
  3081  001092                     _CheckButtonEvents:
  3082                           	opt stack 18
  3083                           
  3084                           ;Button.c: 61: uint8_t CurrentButtonState;
  3085                           ;Button.c: 62: bool ReturnVal = 0;
  3086                           
  3087                           ;incstack = 0
  3088  001092  0E00               	movlw	0
  3089  001094  0100               	movlb	0	; () banked
  3090  001096  6FD7               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;Button.c: 64: CurrentButtonState = GetInputLine();
  3094  001098  EC2C  F00A         	call	_GetInputLine	;wreg free
  3095  00109C  0100               	movlb	0	; () banked
  3096  00109E  6FDB               	movwf	CheckButtonEvents@CurrentButtonState& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;Button.c: 66: if (CurrentButtonState != LastButtonState) {
  3100  0010A0  0100               	movlb	0	; () banked
  3101  0010A2  5193               	movf	_LastButtonState& (0+255),w,b
  3102  0010A4  0100               	movlb	0	; () banked
  3103  0010A6  19DB               	xorwf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3104  0010A8  B4D8               	btfsc	status,2,c
  3105  0010AA  D01E               	goto	l2346
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;Button.c: 68: ReturnVal = 1;
  3109  0010AC  0E01               	movlw	1
  3110  0010AE  0100               	movlb	0	; () banked
  3111  0010B0  6FD7               	movwf	CheckButtonEvents@ReturnVal& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;Button.c: 69: ES_Event ThisEvent;
  3115                           ;Button.c: 71: if (CurrentButtonState != 1) {
  3116  0010B2  0100               	movlb	0	; () banked
  3117  0010B4  05DB               	decf	CheckButtonEvents@CurrentButtonState& (0+255),w,b
  3118  0010B6  B4D8               	btfsc	status,2,c
  3119  0010B8  D00C               	goto	l2342
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;Button.c: 73: ThisEvent.EventType = DBButtonDown;
  3123  0010BA  0E07               	movlw	7
  3124  0010BC  0100               	movlb	0	; () banked
  3125  0010BE  6FD8               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;Button.c: 74: PostButtonDebounceSM(ThisEvent);
  3129  0010C0  C0D8  F0D4         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3130  0010C4  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3131  0010C8  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3132  0010CC  ECF6  F009         	call	_PostButtonDebounceSM	;wreg free
  3133                           
  3134                           ;Button.c: 76: } else {
  3135  0010D0  D00B               	goto	l2346
  3136  0010D2                     l2342:
  3137                           
  3138                           ;Button.c: 78: ThisEvent.EventType = DBButtonUp;
  3139  0010D2  0E06               	movlw	6
  3140  0010D4  0100               	movlb	0	; () banked
  3141  0010D6  6FD8               	movwf	CheckButtonEvents@ThisEvent& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;Button.c: 79: PostButtonDebounceSM(ThisEvent);
  3145  0010D8  C0D8  F0D4         	movff	CheckButtonEvents@ThisEvent,PostButtonDebounceSM@ThisEvent
  3146  0010DC  C0D9  F0D5         	movff	CheckButtonEvents@ThisEvent+1,PostButtonDebounceSM@ThisEvent+1
  3147  0010E0  C0DA  F0D6         	movff	CheckButtonEvents@ThisEvent+2,PostButtonDebounceSM@ThisEvent+2
  3148  0010E4  ECF6  F009         	call	_PostButtonDebounceSM	;wreg free
  3149  0010E8                     l2346:
  3150                           
  3151                           ;Button.c: 80: }
  3152                           ;Button.c: 81: }
  3153                           ;Button.c: 83: LastButtonState = CurrentButtonState;
  3154  0010E8  C0DB  F093         	movff	CheckButtonEvents@CurrentButtonState,_LastButtonState
  3155                           
  3156                           ;Button.c: 85: return ReturnVal;
  3157  0010EC  0100               	movlb	0	; () banked
  3158  0010EE  51D7               	movf	CheckButtonEvents@ReturnVal& (0+255),w,b
  3159  0010F0  0012               	return	
  3160  0010F2                     __end_of_CheckButtonEvents:
  3161                           	opt stack 0
  3162                           tosu	equ	0xFFF
  3163                           tosh	equ	0xFFE
  3164                           tosl	equ	0xFFD
  3165                           pclath	equ	0xFFA
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           indf1	equ	0xFE7
  3176                           postinc1	equ	0xFE6
  3177                           fsr1h	equ	0xFE2
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _PostButtonDebounceSM *****************
  3187 ;; Defined at:
  3188 ;;		line 89 in file "Button.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      unsigned char 
  3195 ;; Registers used:
  3196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3202 ;;      Params:         0       3       0       0
  3203 ;;      Locals:         0       0       0       0
  3204 ;;      Temps:          0       0       0       0
  3205 ;;      Totals:         0       3       0       0
  3206 ;;Total ram usage:        3 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    9
  3209 ;; This function calls:
  3210 ;;		_ES_PostToService
  3211 ;; This function is called by:
  3212 ;;		_CheckButtonEvents
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text17
  3217  0013EC                     __ptext17:
  3218                           	opt stack 0
  3219  0013EC                     _PostButtonDebounceSM:
  3220                           	opt stack 18
  3221                           
  3222                           ;Button.c: 92: return ES_PostToService(MyPriority, ThisEvent);
  3223                           ;	Return value of _PostButtonDebounceSM is never used
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;incstack = 0
  3227  0013EC  C0D4  F0CE         	movff	PostButtonDebounceSM@ThisEvent,ES_PostToService@TheEvent
  3228  0013F0  C0D5  F0CF         	movff	PostButtonDebounceSM@ThisEvent+1,ES_PostToService@TheEvent+1
  3229  0013F4  C0D6  F0D0         	movff	PostButtonDebounceSM@ThisEvent+2,ES_PostToService@TheEvent+2
  3230  0013F8  0100               	movlb	0	; () banked
  3231  0013FA  518C               	movf	Button@MyPriority& (0+255),w,b
  3232  0013FC  ECA1  F007         	call	_ES_PostToService
  3233  001400  0012               	return	
  3234  001402                     __end_of_PostButtonDebounceSM:
  3235                           	opt stack 0
  3236                           tosu	equ	0xFFF
  3237                           tosh	equ	0xFFE
  3238                           tosl	equ	0xFFD
  3239                           pclath	equ	0xFFA
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           intcon	equ	0xFF2
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           indf1	equ	0xFE7
  3250                           postinc1	equ	0xFE6
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _GetInputLine *****************
  3261 ;; Defined at:
  3262 ;;		line 37 in file "Button.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      unsigned char 
  3269 ;; Registers used:
  3270 ;;		wreg
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3276 ;;      Params:         0       0       0       0
  3277 ;;      Locals:         0       0       0       0
  3278 ;;      Temps:          0       0       0       0
  3279 ;;      Totals:         0       0       0       0
  3280 ;;Total ram usage:        0 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    6
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_CheckButtonEvents
  3287 ;;		_InitializeButtonDebounce
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text18
  3292  001458                     __ptext18:
  3293                           	opt stack 0
  3294  001458                     _GetInputLine:
  3295                           	opt stack 21
  3296                           
  3297                           ;Button.c: 39: return LATA2;
  3298                           
  3299                           ;incstack = 0
  3300  001458  0E00               	movlw	0
  3301  00145A  B489               	btfsc	3977,2,c	;volatile
  3302  00145C  0E01               	movlw	1
  3303  00145E  0012               	return	
  3304  001460                     __end_of_GetInputLine:
  3305                           	opt stack 0
  3306                           tosu	equ	0xFFF
  3307                           tosh	equ	0xFFE
  3308                           tosl	equ	0xFFD
  3309                           pclath	equ	0xFFA
  3310                           tblptru	equ	0xFF8
  3311                           tblptrh	equ	0xFF7
  3312                           tblptrl	equ	0xFF6
  3313                           tablat	equ	0xFF5
  3314                           prodh	equ	0xFF4
  3315                           prodl	equ	0xFF3
  3316                           intcon	equ	0xFF2
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           indf1	equ	0xFE7
  3320                           postinc1	equ	0xFE6
  3321                           fsr1h	equ	0xFE2
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _ES_Initialize *****************
  3331 ;; Defined at:
  3332 ;;		line 242 in file "ES_Framework.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  NewRate         2   33[BANK0 ] enum E15427
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  i               1   35[BANK0 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      enum E15498
  3339 ;; Registers used:
  3340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       2       0       0
  3347 ;;      Locals:         0       1       0       0
  3348 ;;      Temps:          0       0       0       0
  3349 ;;      Totals:         0       3       0       0
  3350 ;;Total ram usage:        3 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:   10
  3353 ;; This function calls:
  3354 ;;		_ES_InitQueue
  3355 ;;		_ES_Timer_Init
  3356 ;;		_InitSPI_Service
  3357 ;;		_InitToggleService
  3358 ;; This function is called by:
  3359 ;;		_main
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text19
  3364  0009C6                     __ptext19:
  3365                           	opt stack 0
  3366  0009C6                     _ES_Initialize:
  3367                           	opt stack 20
  3368                           
  3369                           ;ES_Framework.c: 243: uint8_t i;
  3370                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  3371                           
  3372                           ;incstack = 0
  3373  0009C6  C0D8  F0B9         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  3374  0009CA  C0D9  F0BA         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  3375  0009CE  EC20  F00A         	call	_ES_Timer_Init	;wreg free
  3376                           
  3377                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  3378  0009D2  0E00               	movlw	0
  3379  0009D4  0100               	movlb	0	; () banked
  3380  0009D6  6FDA               	movwf	ES_Initialize@i& (0+255),b
  3381  0009D8                     l2594:
  3382                           
  3383                           ; BSR set to: 0
  3384  0009D8  0E01               	movlw	1
  3385  0009DA  0100               	movlb	0	; () banked
  3386  0009DC  65DA               	cpfsgt	ES_Initialize@i& (0+255),b
  3387  0009DE  D001               	goto	l2598
  3388  0009E0  D066               	goto	l2618
  3389  0009E2                     l2598:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  3393                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  3394  0009E2  0100               	movlb	0	; () banked
  3395  0009E4  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3396  0009E6  0D04               	mullw	4
  3397  0009E8  0E50               	movlw	low _ServDescList
  3398  0009EA  24F3               	addwf	prodl,w,c
  3399  0009EC  6EF6               	movwf	tblptrl,c
  3400  0009EE  0E03               	movlw	high _ServDescList
  3401  0009F0  20F4               	addwfc	prodh,w,c
  3402  0009F2  6EF7               	movwf	tblptrh,c
  3403  0009F4                     	if	0	;There are less than 3 active tblptr bytes
  3404  0009F4                     	endif
  3405  0009F4  0009               	tblrd		*+
  3406  0009F6  50F5               	movf	tablat,w,c
  3407  0009F8  0009               	tblrd		*+
  3408  0009FA  10F5               	iorwf	tablat,w,c
  3409  0009FC  B4D8               	btfsc	status,2,c
  3410  0009FE  D013               	goto	l2602
  3411                           
  3412                           ; BSR set to: 0
  3413  000A00  0100               	movlb	0	; () banked
  3414  000A02  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3415  000A04  0D04               	mullw	4
  3416  000A06  0E02               	movlw	2
  3417  000A08  26F3               	addwf	prodl,f,c
  3418  000A0A  0E00               	movlw	0
  3419  000A0C  22F4               	addwfc	prodh,f,c
  3420  000A0E  0E50               	movlw	low _ServDescList
  3421  000A10  24F3               	addwf	prodl,w,c
  3422  000A12  6EF6               	movwf	tblptrl,c
  3423  000A14  0E03               	movlw	high _ServDescList
  3424  000A16  20F4               	addwfc	prodh,w,c
  3425  000A18  6EF7               	movwf	tblptrh,c
  3426  000A1A                     	if	0	;There are less than 3 active tblptr bytes
  3427  000A1A                     	endif
  3428  000A1A  0009               	tblrd		*+
  3429  000A1C  50F5               	movf	tablat,w,c
  3430  000A1E  0009               	tblrd		*+
  3431  000A20  10F5               	iorwf	tablat,w,c
  3432  000A22  A4D8               	btfss	status,2,c
  3433  000A24  D002               	goto	l2606
  3434  000A26                     l2602:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;ES_Framework.c: 249: return FailedPointer;
  3438  000A26  0E03               	movlw	3
  3439                           
  3440                           ; BSR set to: 0
  3441  000A28  0012               	return	
  3442  000A2A                     l2606:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  3446  000A2A  0100               	movlb	0	; () banked
  3447  000A2C  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3448  000A2E  0D03               	mullw	3
  3449  000A30  0E58               	movlw	low _EventQueues
  3450  000A32  24F3               	addwf	prodl,w,c
  3451  000A34  6EF6               	movwf	tblptrl,c
  3452  000A36  0E03               	movlw	high _EventQueues
  3453  000A38  20F4               	addwfc	prodh,w,c
  3454  000A3A  6EF7               	movwf	tblptrh,c
  3455  000A3C                     	if	0	;There are less than 3 active tblptr bytes
  3456  000A3C                     	endif
  3457  000A3C  0009               	tblrd		*+
  3458  000A3E  CFF5 F0B7          	movff	tablat,ES_InitQueue@pBlock
  3459  000A42  000A               	tblrd		*-
  3460  000A44  CFF5 F0B8          	movff	tablat,ES_InitQueue@pBlock+1
  3461  000A48  0100               	movlb	0	; () banked
  3462  000A4A  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3463  000A4C  0D03               	mullw	3
  3464  000A4E  0E02               	movlw	2
  3465  000A50  26F3               	addwf	prodl,f,c
  3466  000A52  0E00               	movlw	0
  3467  000A54  22F4               	addwfc	prodh,f,c
  3468  000A56  0E58               	movlw	low _EventQueues
  3469  000A58  24F3               	addwf	prodl,w,c
  3470  000A5A  6EF6               	movwf	tblptrl,c
  3471  000A5C  0E03               	movlw	high _EventQueues
  3472  000A5E  20F4               	addwfc	prodh,w,c
  3473  000A60  6EF7               	movwf	tblptrh,c
  3474  000A62                     	if	0	;There are less than 3 active tblptr bytes
  3475  000A62                     	endif
  3476  000A62  0008               	tblrd		*
  3477  000A64  CFF5 F0B9          	movff	tablat,ES_InitQueue@BlockSize
  3478  000A68  EC2F  F009         	call	_ES_InitQueue	;wreg free
  3479                           
  3480                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  3481  000A6C  0100               	movlb	0	; () banked
  3482  000A6E  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3483  000A70  0D04               	mullw	4
  3484  000A72  0E50               	movlw	low _ServDescList
  3485  000A74  24F3               	addwf	prodl,w,c
  3486  000A76  6EF6               	movwf	tblptrl,c
  3487  000A78  0E03               	movlw	high _ServDescList
  3488  000A7A  20F4               	addwfc	prodh,w,c
  3489  000A7C  6EF7               	movwf	tblptrh,c
  3490  000A7E                     	if	0	;There are less than 3 active tblptr bytes
  3491  000A7E                     	endif
  3492  000A7E  D801               	call	u1748
  3493  000A80  D00E               	goto	u1749
  3494  000A82                     u1748:
  3495  000A82  0005               	push	
  3496  000A84  6EFA               	movwf	pclath,c
  3497  000A86  0009               	tblrd		*+
  3498  000A88  50F5               	movf	tablat,w,c
  3499  000A8A  6EFD               	movwf	tosl,c
  3500  000A8C  0009               	tblrd		*+
  3501  000A8E  50F5               	movf	tablat,w,c
  3502  000A90  6EFE               	movwf	tosh,c
  3503  000A92  50F8               	movf	tblptru,w,c
  3504  000A94  6EFF               	movwf	tosu,c
  3505  000A96  50FA               	movf	pclath,w,c
  3506  000A98  0100               	movlb	0	; () banked
  3507  000A9A  51DA               	movf	ES_Initialize@i& (0+255),w,b
  3508  000A9C  0012               	return		;indir
  3509  000A9E                     u1749:
  3510  000A9E  06E8               	decf	wreg,f,c
  3511  000AA0  B4D8               	btfsc	status,2,c
  3512  000AA2  D002               	goto	l2614
  3513                           
  3514                           ;ES_Framework.c: 254: return FailedInit;
  3515  000AA4  0E05               	movlw	5
  3516  000AA6  0012               	return	
  3517  000AA8                     l2614:
  3518  000AA8  0100               	movlb	0	; () banked
  3519  000AAA  2BDA               	incf	ES_Initialize@i& (0+255),f,b
  3520  000AAC  D795               	goto	l2594
  3521  000AAE                     l2618:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;ES_Framework.c: 255: }
  3525                           ;ES_Framework.c: 256: return Success;
  3526  000AAE  0E00               	movlw	0
  3527  000AB0  0012               	return	
  3528  000AB2                     __end_of_ES_Initialize:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           indf1	equ	0xFE7
  3544                           postinc1	equ	0xFE6
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _InitSPI_Service *****************
  3555 ;; Defined at:
  3556 ;;		line 56 in file "SPI_Service.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  Priority        1    wreg     unsigned char 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  Priority        1    6[BANK0 ] unsigned char 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      unsigned char 
  3563 ;; Registers used:
  3564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3570 ;;      Params:         0       0       0       0
  3571 ;;      Locals:         0       1       0       0
  3572 ;;      Temps:          0       0       0       0
  3573 ;;      Totals:         0       1       0       0
  3574 ;;Total ram usage:        1 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    8
  3577 ;; This function calls:
  3578 ;;		_ES_Timer_InitTimer
  3579 ;;		_InitSPI
  3580 ;;		_SetBGR
  3581 ;; This function is called by:
  3582 ;;		_ES_Initialize
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text20
  3587  00121A                     __ptext20:
  3588                           	opt stack 0
  3589  00121A                     _InitSPI_Service:
  3590                           	opt stack 21
  3591                           
  3592                           ;incstack = 0
  3593                           ;InitSPI_Service@Priority stored from wreg
  3594  00121A  0100               	movlb	0	; () banked
  3595  00121C  6FBD               	movwf	InitSPI_Service@Priority& (0+255),b
  3596                           
  3597                           ;SPI_Service.c: 59: MyPriority = Priority;
  3598  00121E  C0BD  F08F         	movff	InitSPI_Service@Priority,SPI_Service@MyPriority
  3599                           
  3600                           ;SPI_Service.c: 60: FirstSend = 1;
  3601  001222  0E01               	movlw	1
  3602  001224  0100               	movlb	0	; () banked
  3603  001226  6F91               	movwf	_FirstSend& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;SPI_Service.c: 61: LEDColor = 0;
  3607  001228  0E00               	movlw	0
  3608  00122A  0100               	movlb	0	; () banked
  3609  00122C  6F92               	movwf	_LEDColor& (0+255),b
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;SPI_Service.c: 62: SetBGR(0x00, 0xFF, 0x00);
  3613  00122E  0EFF               	movlw	255
  3614  001230  0100               	movlb	0	; () banked
  3615  001232  6FB7               	movwf	SetBGR@G& (0+255),b
  3616  001234  0E00               	movlw	0
  3617  001236  0100               	movlb	0	; () banked
  3618  001238  6FB8               	movwf	SetBGR@R& (0+255),b
  3619  00123A  0E00               	movlw	0
  3620  00123C  EC17  F00A         	call	_SetBGR
  3621                           
  3622                           ;SPI_Service.c: 63: CurrentState = Waiting2Send;
  3623  001240  0E01               	movlw	1
  3624  001242  0100               	movlb	0	; () banked
  3625  001244  6F8E               	movwf	SPI_Service@CurrentState& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;SPI_Service.c: 64: InitSPI();
  3629  001246  EC9B  F009         	call	_InitSPI	;wreg free
  3630                           
  3631                           ;SPI_Service.c: 65: ES_Timer_InitTimer(1, 50*3);
  3632  00124A  0E00               	movlw	0
  3633  00124C  0100               	movlb	0	; () banked
  3634  00124E  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3635  001250  0E96               	movlw	150
  3636  001252  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  3637  001254  0E01               	movlw	1
  3638  001256  EC61  F007         	call	_ES_Timer_InitTimer
  3639                           
  3640                           ;SPI_Service.c: 66: return 1;
  3641  00125A  0E01               	movlw	1
  3642  00125C  0012               	return	
  3643  00125E                     __end_of_InitSPI_Service:
  3644                           	opt stack 0
  3645                           tosu	equ	0xFFF
  3646                           tosh	equ	0xFFE
  3647                           tosl	equ	0xFFD
  3648                           pclath	equ	0xFFA
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           postinc0	equ	0xFEE
  3657                           wreg	equ	0xFE8
  3658                           indf1	equ	0xFE7
  3659                           postinc1	equ	0xFE6
  3660                           fsr1h	equ	0xFE2
  3661                           fsr1l	equ	0xFE1
  3662                           indf2	equ	0xFDF
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _InitToggleService *****************
  3670 ;; Defined at:
  3671 ;;		line 62 in file "ToggleService.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  Priority        1    wreg     unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  Priority        1   32[BANK0 ] unsigned char 
  3676 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      unsigned char 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3686 ;;      Params:         0       0       0       0
  3687 ;;      Locals:         0       4       0       0
  3688 ;;      Temps:          0       0       0       0
  3689 ;;      Totals:         0       4       0       0
  3690 ;;Total ram usage:        4 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    9
  3693 ;; This function calls:
  3694 ;;		_ES_PostToService
  3695 ;;		_ES_Timer_InitTimer
  3696 ;; This function is called by:
  3697 ;;		_ES_Initialize
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text21
  3702  0010F2                     __ptext21:
  3703                           	opt stack 0
  3704  0010F2                     _InitToggleService:
  3705                           	opt stack 20
  3706                           
  3707                           ;incstack = 0
  3708                           ;InitToggleService@Priority stored from wreg
  3709  0010F2  0100               	movlb	0	; () banked
  3710  0010F4  6FD7               	movwf	InitToggleService@Priority& (0+255),b
  3711                           
  3712                           ;ToggleService.c: 64: ES_Event ThisEvent;
  3713                           ;ToggleService.c: 66: MyPriority = Priority;
  3714  0010F6  C0D7  F090         	movff	InitToggleService@Priority,ToggleService@MyPriority
  3715                           
  3716                           ;ToggleService.c: 70: PORTA = 0x00;
  3717  0010FA  0E00               	movlw	0
  3718  0010FC  6E80               	movwf	3968,c	;volatile
  3719                           
  3720                           ;ToggleService.c: 71: LATA = 0x00;
  3721  0010FE  0E00               	movlw	0
  3722  001100  6E89               	movwf	3977,c	;volatile
  3723                           
  3724                           ;ToggleService.c: 73: ADCON1 = 0x0F;
  3725  001102  0E0F               	movlw	15
  3726  001104  6EC1               	movwf	4033,c	;volatile
  3727                           
  3728                           ;ToggleService.c: 74: TRISA = 0b11111100;
  3729  001106  0EFC               	movlw	252
  3730  001108  6E92               	movwf	3986,c	;volatile
  3731                           
  3732                           ;ToggleService.c: 75: LATA1 = 1;
  3733  00110A  8289               	bsf	3977,1,c	;volatile
  3734                           
  3735                           ;ToggleService.c: 76: LATA0 = 0;
  3736  00110C  9089               	bcf	3977,0,c	;volatile
  3737                           
  3738                           ;ToggleService.c: 77: ES_Timer_InitTimer(0,50);
  3739  00110E  0E00               	movlw	0
  3740  001110  0100               	movlb	0	; () banked
  3741  001112  6FB8               	movwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3742  001114  0E32               	movlw	50
  3743  001116  6FB7               	movwf	ES_Timer_InitTimer@NewTime& (0+255),b
  3744  001118  0E00               	movlw	0
  3745  00111A  EC61  F007         	call	_ES_Timer_InitTimer
  3746                           
  3747                           ;ToggleService.c: 80: ThisEvent.EventType = ES_INIT;
  3748  00111E  0E02               	movlw	2
  3749  001120  0100               	movlb	0	; () banked
  3750  001122  6FD4               	movwf	InitToggleService@ThisEvent& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;ToggleService.c: 81: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  3754  001124  C0D4  F0CE         	movff	InitToggleService@ThisEvent,ES_PostToService@TheEvent
  3755  001128  C0D5  F0CF         	movff	InitToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  3756  00112C  C0D6  F0D0         	movff	InitToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  3757  001130  0100               	movlb	0	; () banked
  3758  001132  5190               	movf	ToggleService@MyPriority& (0+255),w,b
  3759  001134  ECA1  F007         	call	_ES_PostToService
  3760  001138  06E8               	decf	wreg,f,c
  3761  00113A  A4D8               	btfss	status,2,c
  3762  00113C  D002               	goto	l2480
  3763                           
  3764                           ;ToggleService.c: 82: {
  3765                           ;ToggleService.c: 83: return 1;
  3766  00113E  0E01               	movlw	1
  3767                           
  3768                           ;ToggleService.c: 84: }else
  3769  001140  0012               	return	
  3770  001142                     l2480:
  3771                           
  3772                           ;ToggleService.c: 85: {
  3773                           ;ToggleService.c: 86: return 0;
  3774  001142  0E00               	movlw	0
  3775  001144  0012               	return	
  3776  001146                     __end_of_InitToggleService:
  3777                           	opt stack 0
  3778                           tosu	equ	0xFFF
  3779                           tosh	equ	0xFFE
  3780                           tosl	equ	0xFFD
  3781                           pclath	equ	0xFFA
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           indf1	equ	0xFE7
  3792                           postinc1	equ	0xFE6
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _ES_PostToService *****************
  3803 ;; Defined at:
  3804 ;;		line 352 in file "ES_Framework.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  WhichService    1    wreg     unsigned char 
  3807 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  WhichService    1   28[BANK0 ] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      unsigned char 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3819 ;;      Params:         0       3       0       0
  3820 ;;      Locals:         0       1       0       0
  3821 ;;      Temps:          0       2       0       0
  3822 ;;      Totals:         0       6       0       0
  3823 ;;Total ram usage:        6 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    8
  3826 ;; This function calls:
  3827 ;;		_ES_EnQueueFIFO
  3828 ;; This function is called by:
  3829 ;;		_InitToggleService
  3830 ;;		_PostToggleService
  3831 ;;		_PostSPI_Service
  3832 ;;		_PostButtonDebounceSM
  3833 ;;		_InitTemplateFSM
  3834 ;;		_PostTemplateFSM
  3835 ;;		_InitTemplateService
  3836 ;;		_PostTemplateService
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text22
  3841  000F42                     __ptext22:
  3842                           	opt stack 0
  3843  000F42                     _ES_PostToService:
  3844                           	opt stack 18
  3845                           
  3846                           ;incstack = 0
  3847                           ;ES_PostToService@WhichService stored from wreg
  3848  000F42  0100               	movlb	0	; () banked
  3849  000F44  6FD3               	movwf	ES_PostToService@WhichService& (0+255),b
  3850                           
  3851                           ;ES_Framework.c: 353: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3852                           ;ES_Framework.c: 354: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3853                           ;ES_Framework.c: 355: 1 )){
  3854  000F46  0E02               	movlw	2
  3855  000F48  0100               	movlb	0	; () banked
  3856  000F4A  61D3               	cpfslt	ES_PostToService@WhichService& (0+255),b
  3857  000F4C  D033               	goto	l2112
  3858                           
  3859                           ; BSR set to: 0
  3860  000F4E  0100               	movlb	0	; () banked
  3861  000F50  51D3               	movf	ES_PostToService@WhichService& (0+255),w,b
  3862  000F52  0D03               	mullw	3
  3863  000F54  0E58               	movlw	low _EventQueues
  3864  000F56  24F3               	addwf	prodl,w,c
  3865  000F58  6EF6               	movwf	tblptrl,c
  3866  000F5A  0E03               	movlw	high _EventQueues
  3867  000F5C  20F4               	addwfc	prodh,w,c
  3868  000F5E  6EF7               	movwf	tblptrh,c
  3869  000F60                     	if	0	;There are less than 3 active tblptr bytes
  3870  000F60                     	endif
  3871  000F60  0009               	tblrd		*+
  3872  000F62  CFF5 F0C3          	movff	tablat,ES_EnQueueFIFO@pBlock
  3873  000F66  000A               	tblrd		*-
  3874  000F68  CFF5 F0C4          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3875  000F6C  C0CE  F0C5         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3876  000F70  C0CF  F0C6         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3877  000F74  C0D0  F0C7         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3878  000F78  EC59  F005         	call	_ES_EnQueueFIFO	;wreg free
  3879  000F7C  06E8               	decf	wreg,f,c
  3880  000F7E  A4D8               	btfss	status,2,c
  3881  000F80  D019               	goto	l2112
  3882                           
  3883                           ;ES_Framework.c: 356: Ready |= BitNum2SetMask[WhichService];
  3884  000F82  0100               	movlb	0	; () banked
  3885  000F84  51D3               	movf	ES_PostToService@WhichService& (0+255),w,b
  3886  000F86  0D02               	mullw	2
  3887  000F88  0E01               	movlw	low _BitNum2SetMask
  3888  000F8A  24F3               	addwf	prodl,w,c
  3889  000F8C  6EF6               	movwf	tblptrl,c
  3890  000F8E  0E03               	movlw	high _BitNum2SetMask
  3891  000F90  20F4               	addwfc	prodh,w,c
  3892  000F92  6EF7               	movwf	tblptrh,c
  3893  000F94                     	if	0	;There are less than 3 active tblptr bytes
  3894  000F94                     	endif
  3895  000F94  0009               	tblrd		*+
  3896  000F96  CFF5 F0D1          	movff	tablat,??_ES_PostToService
  3897  000F9A  0009               	tblrd		*+
  3898  000F9C  CFF5 F0D2          	movff	tablat,??_ES_PostToService+1
  3899  000FA0  0100               	movlb	0	; () banked
  3900  000FA2  51D1               	movf	??_ES_PostToService& (0+255),w,b
  3901  000FA4  0100               	movlb	0	; () banked
  3902  000FA6  1388               	iorwf	_Ready& (0+255),f,b
  3903  000FA8  0100               	movlb	0	; () banked
  3904  000FAA  51D2               	movf	(??_ES_PostToService+1)& (0+255),w,b
  3905  000FAC  0100               	movlb	0	; () banked
  3906  000FAE  1389               	iorwf	(_Ready+1)& (0+255),f,b
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;ES_Framework.c: 357: return 1;
  3910  000FB0  0E01               	movlw	1
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;ES_Framework.c: 358: } else
  3914                           
  3915                           ; BSR set to: 0
  3916  000FB2  0012               	return	
  3917  000FB4                     l2112:
  3918                           
  3919                           ;ES_Framework.c: 359: return 0;
  3920  000FB4  0E00               	movlw	0
  3921  000FB6  0012               	return	
  3922  000FB8                     __end_of_ES_PostToService:
  3923                           	opt stack 0
  3924                           tosu	equ	0xFFF
  3925                           tosh	equ	0xFFE
  3926                           tosl	equ	0xFFD
  3927                           pclath	equ	0xFFA
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           indf1	equ	0xFE7
  3938                           postinc1	equ	0xFE6
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _ES_EnQueueFIFO *****************
  3949 ;; Defined at:
  3950 ;;		line 85 in file "ES_Queue.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3953 ;;		 -> Queue1(12), Queue0(18), 
  3954 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  3957 ;;		 -> Queue1(12), Queue0(18), 
  3958 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      unsigned char 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3968 ;;      Params:         0       5       0       0
  3969 ;;      Locals:         0       3       0       0
  3970 ;;      Temps:          0       3       0       0
  3971 ;;      Totals:         0      11       0       0
  3972 ;;Total ram usage:       11 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    7
  3975 ;; This function calls:
  3976 ;;		___awmod
  3977 ;;		___wmul
  3978 ;; This function is called by:
  3979 ;;		_ES_PostToService
  3980 ;;		_ES_PostAll
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text23
  3985  000AB2                     __ptext23:
  3986                           	opt stack 0
  3987  000AB2                     _ES_EnQueueFIFO:
  3988                           	opt stack 18
  3989                           
  3990                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3991                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3992                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3993                           
  3994                           ;incstack = 0
  3995  000AB2  C0C3  F0CC         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3996  000AB6  C0C4  F0CD         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3997                           
  3998                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3999  000ABA  C0CC  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  4000  000ABE  C0CD  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4001  000AC2  0100               	movlb	0	; () banked
  4002  000AC4  EE10 F002          	lfsr	1,2
  4003  000AC8  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  4004  000ACA  26E1               	addwf	fsr1l,f,c
  4005  000ACC  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  4006  000ACE  22E2               	addwfc	fsr1h,f,c
  4007  000AD0  50DE               	movf	postinc2,w,c
  4008  000AD2  5CE6               	subwf	postinc1,w,c
  4009  000AD4  B0D8               	btfsc	status,0,c
  4010  000AD6  D05C               	goto	l2096
  4011                           
  4012                           ; BSR set to: 0
  4013                           
  4014                           ;ES_Queue.c: 92: {
  4015                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4016  000AD8  CFF2 F0CB          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  4017  000ADC  9EF2               	bcf	intcon,7,c	;volatile
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  4021                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  4022                           
  4023                           ; BSR set to: 0
  4024  000ADE  C0CC  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  4025  000AE2  C0CD  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4026  000AE6  50DF               	movf	indf2,w,c
  4027  000AE8  0100               	movlb	0	; () banked
  4028  000AEA  6FC8               	movwf	??_ES_EnQueueFIFO& (0+255),b
  4029  000AEC  0100               	movlb	0	; () banked
  4030  000AEE  51C8               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  4031  000AF0  0100               	movlb	0	; () banked
  4032  000AF2  6FB9               	movwf	___awmod@divisor& (0+255),b
  4033  000AF4  6BBA               	clrf	(___awmod@divisor+1)& (0+255),b
  4034  000AF6  0100               	movlb	0	; () banked
  4035  000AF8  EE20 F002          	lfsr	2,2
  4036  000AFC  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  4037  000AFE  26D9               	addwf	fsr2l,f,c
  4038  000B00  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  4039  000B02  22DA               	addwfc	fsr2h,f,c
  4040  000B04  50DF               	movf	indf2,w,c
  4041  000B06  0100               	movlb	0	; () banked
  4042  000B08  6FC9               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  4043  000B0A  0100               	movlb	0	; () banked
  4044  000B0C  EE20 F001          	lfsr	2,1
  4045  000B10  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  4046  000B12  26D9               	addwf	fsr2l,f,c
  4047  000B14  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  4048  000B16  22DA               	addwfc	fsr2h,f,c
  4049  000B18  50DF               	movf	indf2,w,c
  4050  000B1A  0100               	movlb	0	; () banked
  4051  000B1C  6FCA               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  4052  000B1E  0100               	movlb	0	; () banked
  4053  000B20  51CA               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  4054  000B22  0100               	movlb	0	; () banked
  4055  000B24  25C9               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  4056  000B26  0100               	movlb	0	; () banked
  4057  000B28  6FB7               	movwf	___awmod@dividend& (0+255),b
  4058  000B2A  0100               	movlb	0	; () banked
  4059  000B2C  6BB8               	clrf	(___awmod@dividend+1)& (0+255),b
  4060  000B2E  0100               	movlb	0	; () banked
  4061  000B30  37B8               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  4062  000B32  ECC9  F006         	call	___awmod	;wreg free
  4063  000B36  0E01               	movlw	1
  4064  000B38  0100               	movlb	0	; () banked
  4065  000B3A  25B7               	addwf	?___awmod& (0+255),w,b
  4066  000B3C  0100               	movlb	0	; () banked
  4067  000B3E  6FBD               	movwf	___wmul@multiplier& (0+255),b
  4068  000B40  0E00               	movlw	0
  4069  000B42  0100               	movlb	0	; () banked
  4070  000B44  21B8               	addwfc	(?___awmod+1)& (0+255),w,b
  4071  000B46  0100               	movlb	0	; () banked
  4072  000B48  6FBE               	movwf	(___wmul@multiplier+1)& (0+255),b
  4073  000B4A  0E00               	movlw	0
  4074  000B4C  0100               	movlb	0	; () banked
  4075  000B4E  6FC0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4076  000B50  0E03               	movlw	3
  4077  000B52  6FBF               	movwf	___wmul@multiplicand& (0+255),b
  4078  000B54  EC4D  F009         	call	___wmul	;wreg free
  4079  000B58  0100               	movlb	0	; () banked
  4080  000B5A  51BD               	movf	?___wmul& (0+255),w,b
  4081  000B5C  0100               	movlb	0	; () banked
  4082  000B5E  25C3               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  4083  000B60  6ED9               	movwf	fsr2l,c
  4084  000B62  0100               	movlb	0	; () banked
  4085  000B64  51BE               	movf	(?___wmul+1)& (0+255),w,b
  4086  000B66  0100               	movlb	0	; () banked
  4087  000B68  21C4               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  4088  000B6A  6EDA               	movwf	fsr2h,c
  4089  000B6C  C0C5  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  4090  000B70  C0C6  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  4091  000B74  C0C7  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  4095  000B78  0100               	movlb	0	; () banked
  4096  000B7A  EE20 F002          	lfsr	2,2
  4097  000B7E  51CC               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  4098  000B80  26D9               	addwf	fsr2l,f,c
  4099  000B82  51CD               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  4100  000B84  22DA               	addwfc	fsr2h,f,c
  4101  000B86  2ADF               	incf	indf2,f,c
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  4105  000B88  C0CB  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;ES_Queue.c: 101: return(1);
  4109  000B8C  0E01               	movlw	1
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;ES_Queue.c: 102: }else
  4113                           
  4114                           ; BSR set to: 0
  4115  000B8E  0012               	return	
  4116  000B90                     l2096:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;ES_Queue.c: 103: return(0);
  4120  000B90  0E00               	movlw	0
  4121                           
  4122                           ; BSR set to: 0
  4123  000B92  0012               	return	
  4124  000B94                     __end_of_ES_EnQueueFIFO:
  4125                           	opt stack 0
  4126                           tosu	equ	0xFFF
  4127                           tosh	equ	0xFFE
  4128                           tosl	equ	0xFFD
  4129                           pclath	equ	0xFFA
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           indf1	equ	0xFE7
  4140                           postinc1	equ	0xFE6
  4141                           fsr1h	equ	0xFE2
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           fsr2h	equ	0xFDA
  4147                           fsr2l	equ	0xFD9
  4148                           status	equ	0xFD8
  4149                           
  4150 ;; *************** function ___wmul *****************
  4151 ;; Defined at:
  4152 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  multiplier      2    6[BANK0 ] unsigned int 
  4155 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  product         2   10[BANK0 ] unsigned int 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2    6[BANK0 ] unsigned int 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0, prodl, prodh
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4167 ;;      Params:         0       4       0       0
  4168 ;;      Locals:         0       2       0       0
  4169 ;;      Temps:          0       0       0       0
  4170 ;;      Totals:         0       6       0       0
  4171 ;;Total ram usage:        6 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    6
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_ES_EnQueueFIFO
  4178 ;;		_ES_DeQueue
  4179 ;;		i2_ES_EnQueueFIFO
  4180 ;;		_ES_EnQueueLIFO
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text24
  4185  00129A                     __ptext24:
  4186                           	opt stack 0
  4187  00129A                     ___wmul:
  4188                           	opt stack 18
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;incstack = 0
  4192  00129A  0100               	movlb	0	; () banked
  4193  00129C  51BD               	movf	___wmul@multiplier& (0+255),w,b
  4194  00129E  0100               	movlb	0	; () banked
  4195  0012A0  03BF               	mulwf	___wmul@multiplicand& (0+255),b
  4196  0012A2  CFF3 F0C1          	movff	prodl,___wmul@product
  4197  0012A6  CFF4 F0C2          	movff	prodh,___wmul@product+1
  4198  0012AA  0100               	movlb	0	; () banked
  4199  0012AC  51BD               	movf	___wmul@multiplier& (0+255),w,b
  4200  0012AE  0100               	movlb	0	; () banked
  4201  0012B0  03C0               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4202  0012B2  50F3               	movf	prodl,w,c
  4203  0012B4  0100               	movlb	0	; () banked
  4204  0012B6  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
  4205  0012B8  0100               	movlb	0	; () banked
  4206  0012BA  51BE               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4207  0012BC  0100               	movlb	0	; () banked
  4208  0012BE  03BF               	mulwf	___wmul@multiplicand& (0+255),b
  4209  0012C0  50F3               	movf	prodl,w,c
  4210  0012C2  0100               	movlb	0	; () banked
  4211  0012C4  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
  4212                           
  4213                           ; BSR set to: 0
  4214  0012C6  C0C1  F0BD         	movff	___wmul@product,?___wmul
  4215  0012CA  C0C2  F0BE         	movff	___wmul@product+1,?___wmul+1
  4216  0012CE  0012               	return	
  4217  0012D0                     __end_of___wmul:
  4218                           	opt stack 0
  4219                           tosu	equ	0xFFF
  4220                           tosh	equ	0xFFE
  4221                           tosl	equ	0xFFD
  4222                           pclath	equ	0xFFA
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           intcon	equ	0xFF2
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           indf1	equ	0xFE7
  4233                           postinc1	equ	0xFE6
  4234                           fsr1h	equ	0xFE2
  4235                           fsr1l	equ	0xFE1
  4236                           indf2	equ	0xFDF
  4237                           postinc2	equ	0xFDE
  4238                           postdec2	equ	0xFDD
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function ___awmod *****************
  4244 ;; Defined at:
  4245 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  dividend        2    0[BANK0 ] int 
  4248 ;;  divisor         2    2[BANK0 ] int 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  sign            1    5[BANK0 ] unsigned char 
  4251 ;;  counter         1    4[BANK0 ] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  2    0[BANK0 ] int 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4261 ;;      Params:         0       4       0       0
  4262 ;;      Locals:         0       2       0       0
  4263 ;;      Temps:          0       0       0       0
  4264 ;;      Totals:         0       6       0       0
  4265 ;;Total ram usage:        6 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    6
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_ES_EnQueueFIFO
  4272 ;;		i2_ES_EnQueueFIFO
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text25
  4277  000D92                     __ptext25:
  4278                           	opt stack 0
  4279  000D92                     ___awmod:
  4280                           	opt stack 18
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;incstack = 0
  4284  000D92  0E00               	movlw	0
  4285  000D94  0100               	movlb	0	; () banked
  4286  000D96  6FBC               	movwf	___awmod@sign& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289  000D98  0100               	movlb	0	; () banked
  4290  000D9A  AFB8               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4291  000D9C  D008               	goto	l2052
  4292                           
  4293                           ; BSR set to: 0
  4294  000D9E  0100               	movlb	0	; () banked
  4295  000DA0  6DB7               	negf	___awmod@dividend& (0+255),b
  4296  000DA2  1FB8               	comf	(___awmod@dividend+1)& (0+255),f,b
  4297  000DA4  B0D8               	btfsc	status,0,c
  4298  000DA6  2BB8               	incf	(___awmod@dividend+1)& (0+255),f,b
  4299                           
  4300                           ; BSR set to: 0
  4301  000DA8  0E01               	movlw	1
  4302  000DAA  0100               	movlb	0	; () banked
  4303  000DAC  6FBC               	movwf	___awmod@sign& (0+255),b
  4304  000DAE                     l2052:
  4305                           
  4306                           ; BSR set to: 0
  4307  000DAE  0100               	movlb	0	; () banked
  4308  000DB0  AFBA               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4309  000DB2  D005               	goto	l2056
  4310                           
  4311                           ; BSR set to: 0
  4312  000DB4  0100               	movlb	0	; () banked
  4313  000DB6  6DB9               	negf	___awmod@divisor& (0+255),b
  4314  000DB8  1FBA               	comf	(___awmod@divisor+1)& (0+255),f,b
  4315  000DBA  B0D8               	btfsc	status,0,c
  4316  000DBC  2BBA               	incf	(___awmod@divisor+1)& (0+255),f,b
  4317  000DBE                     l2056:
  4318                           
  4319                           ; BSR set to: 0
  4320  000DBE  0100               	movlb	0	; () banked
  4321  000DC0  51B9               	movf	___awmod@divisor& (0+255),w,b
  4322  000DC2  0100               	movlb	0	; () banked
  4323  000DC4  11BA               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4324  000DC6  B4D8               	btfsc	status,2,c
  4325  000DC8  D026               	goto	l2072
  4326                           
  4327                           ; BSR set to: 0
  4328  000DCA  0E01               	movlw	1
  4329  000DCC  0100               	movlb	0	; () banked
  4330  000DCE  6FBB               	movwf	___awmod@counter& (0+255),b
  4331  000DD0  D006               	goto	l2062
  4332  000DD2                     l2060:
  4333                           
  4334                           ; BSR set to: 0
  4335  000DD2  0100               	movlb	0	; () banked
  4336  000DD4  90D8               	bcf	status,0,c
  4337  000DD6  37B9               	rlcf	___awmod@divisor& (0+255),f,b
  4338  000DD8  37BA               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4339  000DDA  0100               	movlb	0	; () banked
  4340  000DDC  2BBB               	incf	___awmod@counter& (0+255),f,b
  4341  000DDE                     l2062:
  4342                           
  4343                           ; BSR set to: 0
  4344  000DDE  0100               	movlb	0	; () banked
  4345  000DE0  AFBA               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4346  000DE2  D7F7               	goto	l2060
  4347  000DE4                     l2064:
  4348                           
  4349                           ; BSR set to: 0
  4350  000DE4  0100               	movlb	0	; () banked
  4351  000DE6  51B9               	movf	___awmod@divisor& (0+255),w,b
  4352  000DE8  0100               	movlb	0	; () banked
  4353  000DEA  5DB7               	subwf	___awmod@dividend& (0+255),w,b
  4354  000DEC  0100               	movlb	0	; () banked
  4355  000DEE  51BA               	movf	(___awmod@divisor+1)& (0+255),w,b
  4356  000DF0  0100               	movlb	0	; () banked
  4357  000DF2  59B8               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4358  000DF4  A0D8               	btfss	status,0,c
  4359  000DF6  D008               	goto	l2068
  4360                           
  4361                           ; BSR set to: 0
  4362  000DF8  0100               	movlb	0	; () banked
  4363  000DFA  51B9               	movf	___awmod@divisor& (0+255),w,b
  4364  000DFC  0100               	movlb	0	; () banked
  4365  000DFE  5FB7               	subwf	___awmod@dividend& (0+255),f,b
  4366  000E00  0100               	movlb	0	; () banked
  4367  000E02  51BA               	movf	(___awmod@divisor+1)& (0+255),w,b
  4368  000E04  0100               	movlb	0	; () banked
  4369  000E06  5BB8               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4370  000E08                     l2068:
  4371                           
  4372                           ; BSR set to: 0
  4373  000E08  0100               	movlb	0	; () banked
  4374  000E0A  90D8               	bcf	status,0,c
  4375  000E0C  33BA               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4376  000E0E  33B9               	rrcf	___awmod@divisor& (0+255),f,b
  4377                           
  4378                           ; BSR set to: 0
  4379  000E10  0100               	movlb	0	; () banked
  4380  000E12  2FBB               	decfsz	___awmod@counter& (0+255),f,b
  4381  000E14  D7E7               	goto	l2064
  4382  000E16                     l2072:
  4383                           
  4384                           ; BSR set to: 0
  4385  000E16  0100               	movlb	0	; () banked
  4386  000E18  51BC               	movf	___awmod@sign& (0+255),w,b
  4387  000E1A  0100               	movlb	0	; () banked
  4388  000E1C  B4D8               	btfsc	status,2,c
  4389  000E1E  D005               	goto	l2076
  4390                           
  4391                           ; BSR set to: 0
  4392  000E20  0100               	movlb	0	; () banked
  4393  000E22  6DB7               	negf	___awmod@dividend& (0+255),b
  4394  000E24  1FB8               	comf	(___awmod@dividend+1)& (0+255),f,b
  4395  000E26  B0D8               	btfsc	status,0,c
  4396  000E28  2BB8               	incf	(___awmod@dividend+1)& (0+255),f,b
  4397  000E2A                     l2076:
  4398                           
  4399                           ; BSR set to: 0
  4400  000E2A  C0B7  F0B7         	movff	___awmod@dividend,?___awmod
  4401  000E2E  C0B8  F0B8         	movff	___awmod@dividend+1,?___awmod+1
  4402  000E32  0012               	return	
  4403  000E34                     __end_of___awmod:
  4404                           	opt stack 0
  4405                           tosu	equ	0xFFF
  4406                           tosh	equ	0xFFE
  4407                           tosl	equ	0xFFD
  4408                           pclath	equ	0xFFA
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           postinc0	equ	0xFEE
  4417                           wreg	equ	0xFE8
  4418                           indf1	equ	0xFE7
  4419                           postinc1	equ	0xFE6
  4420                           fsr1h	equ	0xFE2
  4421                           fsr1l	equ	0xFE1
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function _SetBGR *****************
  4430 ;; Defined at:
  4431 ;;		line 236 in file "SPI_Service.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  B               1    wreg     unsigned char 
  4434 ;;  G               1    0[BANK0 ] unsigned char 
  4435 ;;  R               1    1[BANK0 ] unsigned char 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  B               1    2[BANK0 ] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4447 ;;      Params:         0       2       0       0
  4448 ;;      Locals:         0       1       0       0
  4449 ;;      Temps:          0       0       0       0
  4450 ;;      Totals:         0       3       0       0
  4451 ;;Total ram usage:        3 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    6
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_InitSPI_Service
  4458 ;;		_RunSPI_Service
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text26
  4463  00142E                     __ptext26:
  4464                           	opt stack 0
  4465  00142E                     _SetBGR:
  4466                           	opt stack 22
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;incstack = 0
  4470                           ;SetBGR@B stored from wreg
  4471  00142E  0100               	movlb	0	; () banked
  4472  001430  6FB9               	movwf	SetBGR@B& (0+255),b
  4473                           
  4474                           ;SPI_Service.c: 237: BGR[0] = B;
  4475  001432  C0B9  F083         	movff	SetBGR@B,_BGR
  4476                           
  4477                           ;SPI_Service.c: 238: BGR[1] = G;
  4478  001436  C0B7  F084         	movff	SetBGR@G,_BGR+1
  4479                           
  4480                           ;SPI_Service.c: 239: BGR[2] = R;
  4481  00143A  C0B8  F085         	movff	SetBGR@R,_BGR+2
  4482  00143E  0012               	return		;funcret
  4483  001440                     __end_of_SetBGR:
  4484                           	opt stack 0
  4485                           tosu	equ	0xFFF
  4486                           tosh	equ	0xFFE
  4487                           tosl	equ	0xFFD
  4488                           pclath	equ	0xFFA
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           intcon	equ	0xFF2
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           indf1	equ	0xFE7
  4499                           postinc1	equ	0xFE6
  4500                           fsr1h	equ	0xFE2
  4501                           fsr1l	equ	0xFE1
  4502                           indf2	equ	0xFDF
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function _InitSPI *****************
  4510 ;; Defined at:
  4511 ;;		line 192 in file "SPI_Service.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4525 ;;      Params:         0       0       0       0
  4526 ;;      Locals:         0       0       0       0
  4527 ;;      Temps:          0       0       0       0
  4528 ;;      Totals:         0       0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    7
  4532 ;; This function calls:
  4533 ;;		_FormPacket
  4534 ;; This function is called by:
  4535 ;;		_InitSPI_Service
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text27
  4540  001336                     __ptext27:
  4541                           	opt stack 0
  4542  001336                     _InitSPI:
  4543                           	opt stack 21
  4544                           
  4545                           ;SPI_Service.c: 196: PORTC = 0x00;
  4546                           
  4547                           ;incstack = 0
  4548  001336  0E00               	movlw	0
  4549  001338  6E82               	movwf	3970,c	;volatile
  4550                           
  4551                           ;SPI_Service.c: 197: LATC = 0x00;
  4552  00133A  0E00               	movlw	0
  4553  00133C  6E8B               	movwf	3979,c	;volatile
  4554                           
  4555                           ;SPI_Service.c: 198: ADCON1 = 0x0F;
  4556  00133E  0E0F               	movlw	15
  4557  001340  6EC1               	movwf	4033,c	;volatile
  4558                           
  4559                           ;SPI_Service.c: 199: TRISC = 0x00;
  4560  001342  0E00               	movlw	0
  4561  001344  6E94               	movwf	3988,c	;volatile
  4562                           
  4563                           ;SPI_Service.c: 201: SSPIE = 1;
  4564  001346  869D               	bsf	3997,3,c	;volatile
  4565                           
  4566                           ;SPI_Service.c: 205: SSPCON1 = 0x00;
  4567  001348  0E00               	movlw	0
  4568  00134A  6EC6               	movwf	4038,c	;volatile
  4569                           
  4570                           ;SPI_Service.c: 206: SSPSTAT = 0b01000000;
  4571  00134C  0E40               	movlw	64
  4572  00134E  6EC7               	movwf	4039,c	;volatile
  4573                           
  4574                           ;SPI_Service.c: 207: SSPADD = 0xFF;
  4575  001350  68C8               	setf	4040,c	;volatile
  4576                           
  4577                           ;SPI_Service.c: 208: SSPCON1 = 0b00110010;
  4578  001352  0E32               	movlw	50
  4579  001354  6EC6               	movwf	4038,c	;volatile
  4580                           
  4581                           ;SPI_Service.c: 209: NumBytesLeft = 8 + 11*4;
  4582  001356  0E34               	movlw	52
  4583  001358  0100               	movlb	0	; () banked
  4584  00135A  6F94               	movwf	_NumBytesLeft& (0+255),b
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;SPI_Service.c: 210: FormPacket();
  4588  00135C  EC9E  F002         	call	_FormPacket	;wreg free
  4589  001360  0012               	return		;funcret
  4590  001362                     __end_of_InitSPI:
  4591                           	opt stack 0
  4592                           tosu	equ	0xFFF
  4593                           tosh	equ	0xFFE
  4594                           tosl	equ	0xFFD
  4595                           pclath	equ	0xFFA
  4596                           tblptru	equ	0xFF8
  4597                           tblptrh	equ	0xFF7
  4598                           tblptrl	equ	0xFF6
  4599                           tablat	equ	0xFF5
  4600                           prodh	equ	0xFF4
  4601                           prodl	equ	0xFF3
  4602                           intcon	equ	0xFF2
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           indf1	equ	0xFE7
  4606                           postinc1	equ	0xFE6
  4607                           fsr1h	equ	0xFE2
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _FormPacket *****************
  4617 ;; Defined at:
  4618 ;;		line 214 in file "SPI_Service.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  j               1    5[BANK0 ] unsigned char 
  4623 ;;  i               1    3[BANK0 ] unsigned char 
  4624 ;;  ledNum          1    4[BANK0 ] unsigned char 
  4625 ;;  i               1    2[BANK0 ] unsigned char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4635 ;;      Params:         0       0       0       0
  4636 ;;      Locals:         0       4       0       0
  4637 ;;      Temps:          0       2       0       0
  4638 ;;      Totals:         0       6       0       0
  4639 ;;Total ram usage:        6 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    6
  4642 ;; This function calls:
  4643 ;;		Nothing
  4644 ;; This function is called by:
  4645 ;;		_RunSPI_Service
  4646 ;;		_InitSPI
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text28
  4651  00053C                     __ptext28:
  4652                           	opt stack 0
  4653  00053C                     _FormPacket:
  4654                           	opt stack 22
  4655                           
  4656                           ;SPI_Service.c: 215: for (uint8_t i=0; i < 4; i++) {
  4657                           
  4658                           ;incstack = 0
  4659  00053C  0E00               	movlw	0
  4660  00053E  0100               	movlb	0	; () banked
  4661  000540  6FB9               	movwf	FormPacket@i& (0+255),b
  4662  000542                     l2188:
  4663                           
  4664                           ; BSR set to: 0
  4665  000542  0E03               	movlw	3
  4666  000544  0100               	movlb	0	; () banked
  4667  000546  65B9               	cpfsgt	FormPacket@i& (0+255),b
  4668  000548  D001               	goto	l2192
  4669  00054A  D00E               	goto	l2198
  4670  00054C                     l2192:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;SPI_Service.c: 216: BytesToSend[i] = 0x00;
  4674  00054C  0100               	movlb	0	; () banked
  4675  00054E  51B9               	movf	FormPacket@i& (0+255),w,b
  4676  000550  0D01               	mullw	1
  4677  000552  0E00               	movlw	low _BytesToSend
  4678  000554  24F3               	addwf	prodl,w,c
  4679  000556  6ED9               	movwf	fsr2l,c
  4680  000558  0E01               	movlw	high _BytesToSend
  4681  00055A  20F4               	addwfc	prodh,w,c
  4682  00055C  6EDA               	movwf	fsr2h,c
  4683  00055E  0E00               	movlw	0
  4684  000560  6EDF               	movwf	indf2,c
  4685                           
  4686                           ; BSR set to: 0
  4687  000562  0100               	movlb	0	; () banked
  4688  000564  2BB9               	incf	FormPacket@i& (0+255),f,b
  4689  000566  D7ED               	goto	l2188
  4690  000568                     l2198:
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;SPI_Service.c: 217: }
  4694                           ;SPI_Service.c: 218: for (uint8_t ledNum=0; ledNum < 11; ledNum++) {
  4695  000568  0E00               	movlw	0
  4696  00056A  0100               	movlb	0	; () banked
  4697  00056C  6FBB               	movwf	FormPacket@ledNum& (0+255),b
  4698  00056E                     l2200:
  4699                           
  4700                           ; BSR set to: 0
  4701  00056E  0E0A               	movlw	10
  4702  000570  0100               	movlb	0	; () banked
  4703  000572  65BB               	cpfsgt	FormPacket@ledNum& (0+255),b
  4704  000574  D001               	goto	l2204
  4705  000576  D06F               	goto	l2232
  4706  000578                     l2204:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;SPI_Service.c: 219: for (uint8_t j=0; j < 4; j++) {
  4710  000578  0E00               	movlw	0
  4711  00057A  0100               	movlb	0	; () banked
  4712  00057C  6FBC               	movwf	FormPacket@j& (0+255),b
  4713  00057E                     l2206:
  4714                           
  4715                           ; BSR set to: 0
  4716  00057E  0E03               	movlw	3
  4717  000580  0100               	movlb	0	; () banked
  4718  000582  65BC               	cpfsgt	FormPacket@j& (0+255),b
  4719  000584  D001               	goto	l2210
  4720  000586  D064               	goto	l2228
  4721  000588                     l2210:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;SPI_Service.c: 220: if (j==0) {
  4725  000588  0100               	movlb	0	; () banked
  4726  00058A  51BC               	movf	FormPacket@j& (0+255),w,b
  4727  00058C  0100               	movlb	0	; () banked
  4728  00058E  A4D8               	btfss	status,2,c
  4729  000590  D015               	goto	l2214
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;SPI_Service.c: 221: BytesToSend[4+4*ledNum+j] = 0xFF;
  4733  000592  0100               	movlb	0	; () banked
  4734  000594  51BB               	movf	FormPacket@ledNum& (0+255),w,b
  4735  000596  0D04               	mullw	4
  4736  000598  0100               	movlb	0	; () banked
  4737  00059A  51BC               	movf	FormPacket@j& (0+255),w,b
  4738  00059C  26F3               	addwf	prodl,f,c
  4739  00059E  0E00               	movlw	0
  4740  0005A0  22F4               	addwfc	prodh,f,c
  4741  0005A2  0E04               	movlw	4
  4742  0005A4  26F3               	addwf	prodl,f,c
  4743  0005A6  0E00               	movlw	0
  4744  0005A8  22F4               	addwfc	prodh,f,c
  4745  0005AA  0E00               	movlw	low _BytesToSend
  4746  0005AC  24F3               	addwf	prodl,w,c
  4747  0005AE  6ED9               	movwf	fsr2l,c
  4748  0005B0  0E01               	movlw	high _BytesToSend
  4749  0005B2  20F4               	addwfc	prodh,w,c
  4750  0005B4  6EDA               	movwf	fsr2h,c
  4751  0005B6  0EFF               	movlw	255
  4752  0005B8  6EDF               	movwf	indf2,c
  4753                           
  4754                           ;SPI_Service.c: 222: } else if (j==1) {
  4755  0005BA  D047               	goto	l2224
  4756  0005BC                     l2214:
  4757                           
  4758                           ; BSR set to: 0
  4759  0005BC  0100               	movlb	0	; () banked
  4760  0005BE  05BC               	decf	FormPacket@j& (0+255),w,b
  4761  0005C0  A4D8               	btfss	status,2,c
  4762  0005C2  D015               	goto	l2218
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;SPI_Service.c: 223: BytesToSend[4+4*ledNum+j] = BGR[0];
  4766  0005C4  0100               	movlb	0	; () banked
  4767  0005C6  51BB               	movf	FormPacket@ledNum& (0+255),w,b
  4768  0005C8  0D04               	mullw	4
  4769  0005CA  0100               	movlb	0	; () banked
  4770  0005CC  51BC               	movf	FormPacket@j& (0+255),w,b
  4771  0005CE  26F3               	addwf	prodl,f,c
  4772  0005D0  0E00               	movlw	0
  4773  0005D2  22F4               	addwfc	prodh,f,c
  4774  0005D4  0E04               	movlw	4
  4775  0005D6  26F3               	addwf	prodl,f,c
  4776  0005D8  0E00               	movlw	0
  4777  0005DA  22F4               	addwfc	prodh,f,c
  4778  0005DC  0E00               	movlw	low _BytesToSend
  4779  0005DE  24F3               	addwf	prodl,w,c
  4780  0005E0  6ED9               	movwf	fsr2l,c
  4781  0005E2  0E01               	movlw	high _BytesToSend
  4782  0005E4  20F4               	addwfc	prodh,w,c
  4783  0005E6  6EDA               	movwf	fsr2h,c
  4784  0005E8  C083  FFDF         	movff	_BGR,indf2
  4785                           
  4786                           ;SPI_Service.c: 224: } else if (j==2) {
  4787  0005EC  D02E               	goto	l2224
  4788  0005EE                     l2218:
  4789                           
  4790                           ; BSR set to: 0
  4791  0005EE  0E02               	movlw	2
  4792  0005F0  0100               	movlb	0	; () banked
  4793  0005F2  19BC               	xorwf	FormPacket@j& (0+255),w,b
  4794  0005F4  A4D8               	btfss	status,2,c
  4795  0005F6  D015               	goto	l2222
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;SPI_Service.c: 225: BytesToSend[4+4*ledNum+j] = BGR[1];
  4799  0005F8  0100               	movlb	0	; () banked
  4800  0005FA  51BB               	movf	FormPacket@ledNum& (0+255),w,b
  4801  0005FC  0D04               	mullw	4
  4802  0005FE  0100               	movlb	0	; () banked
  4803  000600  51BC               	movf	FormPacket@j& (0+255),w,b
  4804  000602  26F3               	addwf	prodl,f,c
  4805  000604  0E00               	movlw	0
  4806  000606  22F4               	addwfc	prodh,f,c
  4807  000608  0E04               	movlw	4
  4808  00060A  26F3               	addwf	prodl,f,c
  4809  00060C  0E00               	movlw	0
  4810  00060E  22F4               	addwfc	prodh,f,c
  4811  000610  0E00               	movlw	low _BytesToSend
  4812  000612  24F3               	addwf	prodl,w,c
  4813  000614  6ED9               	movwf	fsr2l,c
  4814  000616  0E01               	movlw	high _BytesToSend
  4815  000618  20F4               	addwfc	prodh,w,c
  4816  00061A  6EDA               	movwf	fsr2h,c
  4817  00061C  C084  FFDF         	movff	_BGR+1,indf2
  4818                           
  4819                           ;SPI_Service.c: 226: } else {
  4820  000620  D014               	goto	l2224
  4821  000622                     l2222:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;SPI_Service.c: 227: BytesToSend[4+4*ledNum+j] = BGR[2];
  4825  000622  0100               	movlb	0	; () banked
  4826  000624  51BB               	movf	FormPacket@ledNum& (0+255),w,b
  4827  000626  0D04               	mullw	4
  4828  000628  0100               	movlb	0	; () banked
  4829  00062A  51BC               	movf	FormPacket@j& (0+255),w,b
  4830  00062C  26F3               	addwf	prodl,f,c
  4831  00062E  0E00               	movlw	0
  4832  000630  22F4               	addwfc	prodh,f,c
  4833  000632  0E04               	movlw	4
  4834  000634  26F3               	addwf	prodl,f,c
  4835  000636  0E00               	movlw	0
  4836  000638  22F4               	addwfc	prodh,f,c
  4837  00063A  0E00               	movlw	low _BytesToSend
  4838  00063C  24F3               	addwf	prodl,w,c
  4839  00063E  6ED9               	movwf	fsr2l,c
  4840  000640  0E01               	movlw	high _BytesToSend
  4841  000642  20F4               	addwfc	prodh,w,c
  4842  000644  6EDA               	movwf	fsr2h,c
  4843  000646  C085  FFDF         	movff	_BGR+2,indf2
  4844  00064A                     l2224:
  4845                           
  4846                           ; BSR set to: 0
  4847  00064A  0100               	movlb	0	; () banked
  4848  00064C  2BBC               	incf	FormPacket@j& (0+255),f,b
  4849  00064E  D797               	goto	l2206
  4850  000650                     l2228:
  4851                           
  4852                           ; BSR set to: 0
  4853  000650  0100               	movlb	0	; () banked
  4854  000652  2BBB               	incf	FormPacket@ledNum& (0+255),f,b
  4855  000654  D78C               	goto	l2200
  4856  000656                     l2232:
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;SPI_Service.c: 228: }
  4860                           ;SPI_Service.c: 229: }
  4861                           ;SPI_Service.c: 230: }
  4862                           ;SPI_Service.c: 231: for (uint8_t i=0; i < 4; i++) {
  4863  000656  0E00               	movlw	0
  4864  000658  0100               	movlb	0	; () banked
  4865  00065A  6FBA               	movwf	FormPacket@i_765& (0+255),b
  4866  00065C                     l2234:
  4867                           
  4868                           ; BSR set to: 0
  4869  00065C  0E03               	movlw	3
  4870  00065E  0100               	movlb	0	; () banked
  4871  000660  65BA               	cpfsgt	FormPacket@i_765& (0+255),b
  4872  000662  D001               	goto	l2238
  4873  000664  0012               	return	
  4874  000666                     l2238:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;SPI_Service.c: 232: BytesToSend[4+11*4 + i] = 0x00;
  4878  000666  0100               	movlb	0	; () banked
  4879  000668  51BA               	movf	FormPacket@i_765& (0+255),w,b
  4880  00066A  0100               	movlb	0	; () banked
  4881  00066C  6FB7               	movwf	??_FormPacket& (0+255),b
  4882  00066E  6BB8               	clrf	(??_FormPacket+1)& (0+255),b
  4883  000670  0E30               	movlw	48
  4884  000672  0100               	movlb	0	; () banked
  4885  000674  27B7               	addwf	??_FormPacket& (0+255),f,b
  4886  000676  0E00               	movlw	0
  4887  000678  23B8               	addwfc	(??_FormPacket+1)& (0+255),f,b
  4888  00067A  0E00               	movlw	low _BytesToSend
  4889  00067C  0100               	movlb	0	; () banked
  4890  00067E  25B7               	addwf	??_FormPacket& (0+255),w,b
  4891  000680  6ED9               	movwf	fsr2l,c
  4892  000682  0E01               	movlw	high _BytesToSend
  4893  000684  0100               	movlb	0	; () banked
  4894  000686  21B8               	addwfc	(??_FormPacket+1)& (0+255),w,b
  4895  000688  6EDA               	movwf	fsr2h,c
  4896  00068A  0E00               	movlw	0
  4897  00068C  6EDF               	movwf	indf2,c
  4898                           
  4899                           ; BSR set to: 0
  4900  00068E  0100               	movlb	0	; () banked
  4901  000690  2BBA               	incf	FormPacket@i_765& (0+255),f,b
  4902  000692  D7E4               	goto	l2234
  4903  000694                     __end_of_FormPacket:
  4904                           	opt stack 0
  4905                           tosu	equ	0xFFF
  4906                           tosh	equ	0xFFE
  4907                           tosl	equ	0xFFD
  4908                           pclath	equ	0xFFA
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           indf1	equ	0xFE7
  4919                           postinc1	equ	0xFE6
  4920                           fsr1h	equ	0xFE2
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _ES_Timer_InitTimer *****************
  4930 ;; Defined at:
  4931 ;;		line 229 in file "ES_Timers.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  Num             1    wreg     unsigned char 
  4934 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  Num             1    4[BANK0 ] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      enum E15476
  4939 ;; Registers used:
  4940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4946 ;;      Params:         0       2       0       0
  4947 ;;      Locals:         0       1       0       0
  4948 ;;      Temps:          0       2       0       0
  4949 ;;      Totals:         0       5       0       0
  4950 ;;Total ram usage:        5 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    6
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_InitToggleService
  4957 ;;		_RunToggleService
  4958 ;;		_InitSPI_Service
  4959 ;;		_RunSPI_Service
  4960 ;;		_InitializeButtonDebounce
  4961 ;;		_RunButtonDebounceSM
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text29
  4966  000EC2                     __ptext29:
  4967                           	opt stack 0
  4968  000EC2                     _ES_Timer_InitTimer:
  4969                           	opt stack 22
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;incstack = 0
  4973                           ;ES_Timer_InitTimer@Num stored from wreg
  4974  000EC2  0100               	movlb	0	; () banked
  4975  000EC4  6FBB               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4976                           
  4977                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4978                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4979                           ;ES_Timers.c: 236: (NewTime == 0) )
  4980  000EC6  0E10               	movlw	16
  4981  000EC8  0100               	movlb	0	; () banked
  4982  000ECA  61BB               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4983  000ECC  0012               	return	
  4984                           
  4985                           ; BSR set to: 0
  4986  000ECE  0100               	movlb	0	; () banked
  4987  000ED0  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4988  000ED2  0D02               	mullw	2
  4989  000ED4  0E21               	movlw	low _Timer2PostFunc
  4990  000ED6  24F3               	addwf	prodl,w,c
  4991  000ED8  6EF6               	movwf	tblptrl,c
  4992  000EDA  0E03               	movlw	high _Timer2PostFunc
  4993  000EDC  20F4               	addwfc	prodh,w,c
  4994  000EDE  6EF7               	movwf	tblptrh,c
  4995  000EE0                     	if	0	;There are less than 3 active tblptr bytes
  4996  000EE0                     	endif
  4997  000EE0  0009               	tblrd		*+
  4998  000EE2  50F5               	movf	tablat,w,c
  4999  000EE4  0009               	tblrd		*+
  5000  000EE6  10F5               	iorwf	tablat,w,c
  5001  000EE8  B4D8               	btfsc	status,2,c
  5002  000EEA  0012               	return	
  5003                           
  5004                           ; BSR set to: 0
  5005  000EEC  0100               	movlb	0	; () banked
  5006  000EEE  51B7               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  5007  000EF0  0100               	movlb	0	; () banked
  5008  000EF2  11B8               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  5009  000EF4  B4D8               	btfsc	status,2,c
  5010  000EF6  0012               	return	
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  5014                           
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  5019                           ;	Return value of _ES_Timer_InitTimer is never used
  5020  000EF8  0100               	movlb	0	; () banked
  5021  000EFA  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5022  000EFC  0D02               	mullw	2
  5023  000EFE  0E60               	movlw	low _TMR_TimerArray
  5024  000F00  24F3               	addwf	prodl,w,c
  5025  000F02  6ED9               	movwf	fsr2l,c
  5026  000F04  0E00               	movlw	high _TMR_TimerArray
  5027  000F06  20F4               	addwfc	prodh,w,c
  5028  000F08  6EDA               	movwf	fsr2h,c
  5029  000F0A  C0B7  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  5030  000F0E  C0B8  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  5034  000F12  0100               	movlb	0	; () banked
  5035  000F14  51BB               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5036  000F16  0D02               	mullw	2
  5037  000F18  0E01               	movlw	low _BitNum2SetMask
  5038  000F1A  24F3               	addwf	prodl,w,c
  5039  000F1C  6EF6               	movwf	tblptrl,c
  5040  000F1E  0E03               	movlw	high _BitNum2SetMask
  5041  000F20  20F4               	addwfc	prodh,w,c
  5042  000F22  6EF7               	movwf	tblptrh,c
  5043  000F24                     	if	0	;There are less than 3 active tblptr bytes
  5044  000F24                     	endif
  5045  000F24  0009               	tblrd		*+
  5046  000F26  CFF5 F0B9          	movff	tablat,??_ES_Timer_InitTimer
  5047  000F2A  0009               	tblrd		*+
  5048  000F2C  CFF5 F0BA          	movff	tablat,??_ES_Timer_InitTimer+1
  5049  000F30  0100               	movlb	0	; () banked
  5050  000F32  51B9               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  5051  000F34  0100               	movlb	0	; () banked
  5052  000F36  138A               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  5053  000F38  0100               	movlb	0	; () banked
  5054  000F3A  51BA               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  5055  000F3C  0100               	movlb	0	; () banked
  5056  000F3E  138B               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  5057  000F40  0012               	return	
  5058  000F42                     __end_of_ES_Timer_InitTimer:
  5059                           	opt stack 0
  5060                           tosu	equ	0xFFF
  5061                           tosh	equ	0xFFE
  5062                           tosl	equ	0xFFD
  5063                           pclath	equ	0xFFA
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           indf1	equ	0xFE7
  5074                           postinc1	equ	0xFE6
  5075                           fsr1h	equ	0xFE2
  5076                           fsr1l	equ	0xFE1
  5077                           indf2	equ	0xFDF
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function _ES_Timer_Init *****************
  5085 ;; Defined at:
  5086 ;;		line 130 in file "ES_Timers.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  Rate            2    2[BANK0 ] enum E15427
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5100 ;;      Params:         0       2       0       0
  5101 ;;      Locals:         0       0       0       0
  5102 ;;      Temps:          0       0       0       0
  5103 ;;      Totals:         0       2       0       0
  5104 ;;Total ram usage:        2 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    7
  5107 ;; This function calls:
  5108 ;;		__HW_Timer_Init
  5109 ;; This function is called by:
  5110 ;;		_ES_Initialize
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text30
  5115  001440                     __ptext30:
  5116                           	opt stack 0
  5117  001440                     _ES_Timer_Init:
  5118                           	opt stack 22
  5119                           
  5120                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;incstack = 0
  5124  001440  C0B9  F0B7         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  5125  001444  C0BA  F0B8         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  5126  001448  ECD2  F009         	call	__HW_Timer_Init	;wreg free
  5127  00144C  0012               	return		;funcret
  5128  00144E                     __end_of_ES_Timer_Init:
  5129                           	opt stack 0
  5130                           tosu	equ	0xFFF
  5131                           tosh	equ	0xFFE
  5132                           tosl	equ	0xFFD
  5133                           pclath	equ	0xFFA
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           indf1	equ	0xFE7
  5144                           postinc1	equ	0xFE6
  5145                           fsr1h	equ	0xFE2
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function __HW_Timer_Init *****************
  5155 ;; Defined at:
  5156 ;;		line 74 in file "ES_Port.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  Rate            2    0[BANK0 ] enum E15412
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  1    wreg      void 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5170 ;;      Params:         0       2       0       0
  5171 ;;      Locals:         0       0       0       0
  5172 ;;      Temps:          0       0       0       0
  5173 ;;      Totals:         0       2       0       0
  5174 ;;Total ram usage:        2 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    6
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_ES_Timer_Init
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text31
  5185  0013A4                     __ptext31:
  5186                           	opt stack 0
  5187  0013A4                     __HW_Timer_Init:
  5188                           	opt stack 22
  5189                           
  5190                           ;ES_Port.c: 82: PIE1 = 0b00000100;
  5191                           
  5192                           ;incstack = 0
  5193  0013A4  0E04               	movlw	4
  5194  0013A6  6E9D               	movwf	3997,c	;volatile
  5195                           
  5196                           ;ES_Port.c: 87: INTCON = 0b01000000;
  5197  0013A8  0E40               	movlw	64
  5198  0013AA  6EF2               	movwf	intcon,c	;volatile
  5199                           
  5200                           ;ES_Port.c: 93: CCP1CON = 0b00001010;
  5201  0013AC  0E0A               	movlw	10
  5202  0013AE  6EBD               	movwf	4029,c	;volatile
  5203                           
  5204                           ;ES_Port.c: 97: CCPR1L = 0b00000001;
  5205  0013B0  0E01               	movlw	1
  5206  0013B2  6EBE               	movwf	4030,c	;volatile
  5207                           
  5208                           ;ES_Port.c: 101: CCPR1H = 0b00000000;
  5209  0013B4  0E00               	movlw	0
  5210  0013B6  6EBF               	movwf	4031,c	;volatile
  5211                           
  5212                           ;ES_Port.c: 109: T1CON = 0b00100001;
  5213  0013B8  0E21               	movlw	33
  5214  0013BA  6ECD               	movwf	4045,c	;volatile
  5215                           
  5216                           ;ES_Port.c: 111: {GIE = 1;};
  5217  0013BC  8EF2               	bsf	intcon,7,c	;volatile
  5218  0013BE  0012               	return		;funcret
  5219  0013C0                     __end_of__HW_Timer_Init:
  5220                           	opt stack 0
  5221                           tosu	equ	0xFFF
  5222                           tosh	equ	0xFFE
  5223                           tosl	equ	0xFFD
  5224                           pclath	equ	0xFFA
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           indf1	equ	0xFE7
  5235                           postinc1	equ	0xFE6
  5236                           fsr1h	equ	0xFE2
  5237                           fsr1l	equ	0xFE1
  5238                           indf2	equ	0xFDF
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           fsr2h	equ	0xFDA
  5242                           fsr2l	equ	0xFD9
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _ES_InitQueue *****************
  5246 ;; Defined at:
  5247 ;;		line 58 in file "ES_Queue.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  5250 ;;		 -> Queue1(12), Queue0(18), 
  5251 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  5254 ;;		 -> Queue1(12), Queue0(18), 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      unsigned char 
  5257 ;; Registers used:
  5258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5264 ;;      Params:         0       3       0       0
  5265 ;;      Locals:         0       2       0       0
  5266 ;;      Temps:          0       0       0       0
  5267 ;;      Totals:         0       5       0       0
  5268 ;;Total ram usage:        5 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    6
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_ES_Initialize
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text32
  5279  00125E                     __ptext32:
  5280                           	opt stack 0
  5281  00125E                     _ES_InitQueue:
  5282                           	opt stack 23
  5283                           
  5284                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  5285                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  5286                           
  5287                           ;incstack = 0
  5288  00125E  C0B7  F0BA         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  5289  001262  C0B8  F0BB         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  5290                           
  5291                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  5292  001266  0100               	movlb	0	; () banked
  5293  001268  05B9               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  5294  00126A  C0BA  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  5295  00126E  C0BB  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  5296  001272  6EDF               	movwf	indf2,c
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  5300  001274  0100               	movlb	0	; () banked
  5301  001276  EE20 F001          	lfsr	2,1
  5302  00127A  51BA               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5303  00127C  26D9               	addwf	fsr2l,f,c
  5304  00127E  51BB               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5305  001280  22DA               	addwfc	fsr2h,f,c
  5306  001282  0E00               	movlw	0
  5307  001284  6EDF               	movwf	indf2,c
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  5311  001286  0100               	movlb	0	; () banked
  5312  001288  EE20 F002          	lfsr	2,2
  5313  00128C  51BA               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  5314  00128E  26D9               	addwf	fsr2l,f,c
  5315  001290  51BB               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  5316  001292  22DA               	addwfc	fsr2h,f,c
  5317  001294  0E00               	movlw	0
  5318  001296  6EDF               	movwf	indf2,c
  5319  001298  0012               	return	
  5320  00129A                     __end_of_ES_InitQueue:
  5321                           	opt stack 0
  5322                           tosu	equ	0xFFF
  5323                           tosh	equ	0xFFE
  5324                           tosl	equ	0xFFD
  5325                           pclath	equ	0xFFA
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           intcon	equ	0xFF2
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           fsr1h	equ	0xFE2
  5338                           fsr1l	equ	0xFE1
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           postdec2	equ	0xFDD
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _ISR *****************
  5347 ;; Defined at:
  5348 ;;		line 114 in file "ES_Port.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5362 ;;      Params:         0       0       0       0
  5363 ;;      Locals:         0       0       0       0
  5364 ;;      Temps:         16       0       0       0
  5365 ;;      Totals:        16       0       0       0
  5366 ;;Total ram usage:       16 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    5
  5369 ;; This function calls:
  5370 ;;		_EOTResponse
  5371 ;; This function is called by:
  5372 ;;		Interrupt level 2
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	intcode
  5377  000008                     __pintcode:
  5378                           	opt stack 0
  5379  000008                     _ISR:
  5380                           	opt stack 18
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;incstack = 0
  5384  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5385  00000A  CFFA F026          	movff	pclath,??_ISR+2
  5386  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  5387  000012  ED24  F006         	call	int_func,f	;refresh shadow registers
  5388                           tosu	equ	0xFFF
  5389                           tosh	equ	0xFFE
  5390                           tosl	equ	0xFFD
  5391                           pclatu	equ	0xFFB
  5392                           pclath	equ	0xFFA
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           intcon	equ	0xFF2
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           indf1	equ	0xFE7
  5403                           postinc1	equ	0xFE6
  5404                           fsr1h	equ	0xFE2
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           fsr2h	equ	0xFDA
  5410                           fsr2l	equ	0xFD9
  5411                           status	equ	0xFD8
  5412                           
  5413                           	psect	intcode_body
  5414  000C48                     __pintcode_body:
  5415                           	opt stack 18
  5416  000C48                     int_func:
  5417                           	opt stack 18
  5418  000C48  0006               	pop		; remove dummy address from shadow register refresh
  5419  000C4A  CFE9 F028          	movff	fsr0l,??_ISR+4
  5420  000C4E  CFEA F029          	movff	fsr0h,??_ISR+5
  5421  000C52  CFE1 F02A          	movff	fsr1l,??_ISR+6
  5422  000C56  CFE2 F02B          	movff	fsr1h,??_ISR+7
  5423  000C5A  CFD9 F02C          	movff	fsr2l,??_ISR+8
  5424  000C5E  CFDA F02D          	movff	fsr2h,??_ISR+9
  5425  000C62  CFF3 F02E          	movff	prodl,??_ISR+10
  5426  000C66  CFF4 F02F          	movff	prodh,??_ISR+11
  5427  000C6A  CFF6 F030          	movff	tblptrl,??_ISR+12
  5428  000C6E  CFF7 F031          	movff	tblptrh,??_ISR+13
  5429  000C72  CFF8 F032          	movff	tblptru,??_ISR+14
  5430  000C76  CFF5 F033          	movff	tablat,??_ISR+15
  5431                           
  5432                           ;ES_Port.c: 117: static unsigned int LastTime;
  5433                           ;ES_Port.c: 118: static unsigned int NextTime;
  5434                           ;ES_Port.c: 120: if (CCP1IF == 1)
  5435  000C7A  A49E               	btfss	3998,2,c	;volatile
  5436  000C7C  D015               	goto	i2l2740
  5437                           
  5438                           ;ES_Port.c: 121: {
  5439                           ;ES_Port.c: 122: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  5440  000C7E  50BF               	movf	4031,w,c	;volatile
  5441  000C80  6E24               	movwf	??_ISR& (0+255),c
  5442  000C82  50BE               	movf	4030,w,c	;volatile
  5443  000C84  6E34               	movwf	ISR@LastTime,c
  5444  000C86  C024  F035         	movff	??_ISR,ISR@LastTime+1
  5445                           
  5446                           ;ES_Port.c: 123: NextTime = LastTime + ((32000000L/4/4)/100);
  5447  000C8A  0E20               	movlw	32
  5448  000C8C  2434               	addwf	ISR@LastTime,w,c
  5449  000C8E  6E36               	movwf	ISR@NextTime,c
  5450  000C90  0E4E               	movlw	78
  5451  000C92  2035               	addwfc	ISR@LastTime+1,w,c
  5452  000C94  6E37               	movwf	ISR@NextTime+1,c
  5453                           
  5454                           ;ES_Port.c: 124: CCPR1H = (unsigned char)(NextTime >> 8);
  5455  000C96  5037               	movf	ISR@NextTime+1,w,c
  5456  000C98  6EBF               	movwf	4031,c	;volatile
  5457                           
  5458                           ;ES_Port.c: 125: CCPR1L = (unsigned char)(NextTime & 0xFF);
  5459  000C9A  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  5460                           
  5461                           ;ES_Port.c: 126: CCP1IF = 0;
  5462  000C9E  949E               	bcf	3998,2,c	;volatile
  5463                           
  5464                           ;ES_Port.c: 127: TickCount++;
  5465  000CA0  0100               	movlb	0	; () banked
  5466  000CA2  2B95               	incf	_TickCount& (0+255),f,b	;volatile
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;ES_Port.c: 128: SysTickCounter++;
  5470  000CA4  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  5471  000CA6  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  5472  000CA8                     i2l2740:
  5473                           
  5474                           ;ES_Port.c: 129: }
  5475                           ;ES_Port.c: 130: if (SSPIF == 1)
  5476  000CA8  A69E               	btfss	3998,3,c	;volatile
  5477  000CAA  D003               	goto	i2l151
  5478                           
  5479                           ;ES_Port.c: 131: {
  5480                           ;ES_Port.c: 132: SSPIF = 0;
  5481  000CAC  969E               	bcf	3998,3,c	;volatile
  5482                           
  5483                           ;ES_Port.c: 133: EOTResponse();
  5484  000CAE  EC01  F00A         	call	_EOTResponse	;wreg free
  5485  000CB2                     i2l151:
  5486  000CB2  C033  FFF5         	movff	??_ISR+15,tablat
  5487  000CB6  C032  FFF8         	movff	??_ISR+14,tblptru
  5488  000CBA  C031  FFF7         	movff	??_ISR+13,tblptrh
  5489  000CBE  C030  FFF6         	movff	??_ISR+12,tblptrl
  5490  000CC2  C02F  FFF4         	movff	??_ISR+11,prodh
  5491  000CC6  C02E  FFF3         	movff	??_ISR+10,prodl
  5492  000CCA  C02D  FFDA         	movff	??_ISR+9,fsr2h
  5493  000CCE  C02C  FFD9         	movff	??_ISR+8,fsr2l
  5494  000CD2  C02B  FFE2         	movff	??_ISR+7,fsr1h
  5495  000CD6  C02A  FFE1         	movff	??_ISR+6,fsr1l
  5496  000CDA  C029  FFEA         	movff	??_ISR+5,fsr0h
  5497  000CDE  C028  FFE9         	movff	??_ISR+4,fsr0l
  5498  000CE2  C027  FFFB         	movff	??_ISR+3,pclatu
  5499  000CE6  C026  FFFA         	movff	??_ISR+2,pclath
  5500  000CEA  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5501  000CEC  0011               	retfie		f
  5502  000CEE                     __end_of_ISR:
  5503                           	opt stack 0
  5504                           tosu	equ	0xFFF
  5505                           tosh	equ	0xFFE
  5506                           tosl	equ	0xFFD
  5507                           pclatu	equ	0xFFB
  5508                           pclath	equ	0xFFA
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           postinc0	equ	0xFEE
  5517                           fsr0h	equ	0xFEA
  5518                           fsr0l	equ	0xFE9
  5519                           wreg	equ	0xFE8
  5520                           indf1	equ	0xFE7
  5521                           postinc1	equ	0xFE6
  5522                           fsr1h	equ	0xFE2
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _EOTResponse *****************
  5532 ;; Defined at:
  5533 ;;		line 184 in file "SPI_Service.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  ThisEvent       3   32[COMRAM] struct ES_Event_t
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5547 ;;      Params:         0       0       0       0
  5548 ;;      Locals:         3       0       0       0
  5549 ;;      Temps:          0       0       0       0
  5550 ;;      Totals:         3       0       0       0
  5551 ;;Total ram usage:        3 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    4
  5554 ;; This function calls:
  5555 ;;		i2_PostSPI_Service
  5556 ;; This function is called by:
  5557 ;;		_ISR
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text34
  5562  001402                     __ptext34:
  5563                           	opt stack 0
  5564  001402                     _EOTResponse:
  5565                           	opt stack 18
  5566                           
  5567                           ;SPI_Service.c: 185: ES_Event ThisEvent;
  5568                           ;SPI_Service.c: 186: ThisEvent.EventType = BYTE_SENT;
  5569                           
  5570                           ;incstack = 0
  5571  001402  0E05               	movlw	5
  5572  001404  6E21               	movwf	EOTResponse@ThisEvent,c
  5573                           
  5574                           ;SPI_Service.c: 187: PostSPI_Service(ThisEvent);
  5575  001406  C021  F01E         	movff	EOTResponse@ThisEvent,i2PostSPI_Service@ThisEvent
  5576  00140A  C022  F01F         	movff	EOTResponse@ThisEvent+1,i2PostSPI_Service@ThisEvent+1
  5577  00140E  C023  F020         	movff	EOTResponse@ThisEvent+2,i2PostSPI_Service@ThisEvent+2
  5578  001412  EC0C  F00A         	call	i2_PostSPI_Service	;wreg free
  5579  001416  0012               	return		;funcret
  5580  001418                     __end_of_EOTResponse:
  5581                           	opt stack 0
  5582                           tosu	equ	0xFFF
  5583                           tosh	equ	0xFFE
  5584                           tosl	equ	0xFFD
  5585                           pclatu	equ	0xFFB
  5586                           pclath	equ	0xFFA
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           postinc0	equ	0xFEE
  5595                           fsr0h	equ	0xFEA
  5596                           fsr0l	equ	0xFE9
  5597                           wreg	equ	0xFE8
  5598                           indf1	equ	0xFE7
  5599                           postinc1	equ	0xFE6
  5600                           fsr1h	equ	0xFE2
  5601                           fsr1l	equ	0xFE1
  5602                           indf2	equ	0xFDF
  5603                           postinc2	equ	0xFDE
  5604                           postdec2	equ	0xFDD
  5605                           fsr2h	equ	0xFDA
  5606                           fsr2l	equ	0xFD9
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function i2_PostSPI_Service *****************
  5610 ;; Defined at:
  5611 ;;		line 82 in file "SPI_Service.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      unsigned char 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5625 ;;      Params:         3       0       0       0
  5626 ;;      Locals:         0       0       0       0
  5627 ;;      Temps:          0       0       0       0
  5628 ;;      Totals:         3       0       0       0
  5629 ;;Total ram usage:        3 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    3
  5632 ;; This function calls:
  5633 ;;		i2_ES_PostToService
  5634 ;; This function is called by:
  5635 ;;		_EOTResponse
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text35
  5640  001418                     __ptext35:
  5641                           	opt stack 0
  5642  001418                     i2_PostSPI_Service:
  5643                           	opt stack 18
  5644                           
  5645                           ;SPI_Service.c: 84: return ES_PostToService( MyPriority, ThisEvent);
  5646                           ;	Return value of i2_PostSPI_Service is never used
  5647                           
  5648                           ;incstack = 0
  5649  001418  C01E  F018         	movff	i2PostSPI_Service@ThisEvent,i2ES_PostToService@TheEvent
  5650  00141C  C01F  F019         	movff	i2PostSPI_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
  5651  001420  C020  F01A         	movff	i2PostSPI_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
  5652  001424  0100               	movlb	0	; () banked
  5653  001426  518F               	movf	SPI_Service@MyPriority& (0+255),w,b
  5654  001428  EC14  F008         	call	i2_ES_PostToService
  5655  00142C  0012               	return	
  5656  00142E                     __end_ofi2_PostSPI_Service:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclatu	equ	0xFFB
  5662                           pclath	equ	0xFFA
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           postinc0	equ	0xFEE
  5671                           fsr0h	equ	0xFEA
  5672                           fsr0l	equ	0xFE9
  5673                           wreg	equ	0xFE8
  5674                           indf1	equ	0xFE7
  5675                           postinc1	equ	0xFE6
  5676                           fsr1h	equ	0xFE2
  5677                           fsr1l	equ	0xFE1
  5678                           indf2	equ	0xFDF
  5679                           postinc2	equ	0xFDE
  5680                           postdec2	equ	0xFDD
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function i2_ES_PostToService *****************
  5686 ;; Defined at:
  5687 ;;		line 352 in file "ES_Framework.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  WhichService    1    wreg     unsigned char 
  5690 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  WhichService    1   28[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      unsigned char 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5702 ;;      Params:         3       0       0       0
  5703 ;;      Locals:         1       0       0       0
  5704 ;;      Temps:          2       0       0       0
  5705 ;;      Totals:         6       0       0       0
  5706 ;;Total ram usage:        6 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    2
  5709 ;; This function calls:
  5710 ;;		i2_ES_EnQueueFIFO
  5711 ;; This function is called by:
  5712 ;;		i2_PostSPI_Service
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text36
  5717  001028                     __ptext36:
  5718                           	opt stack 0
  5719  001028                     i2_ES_PostToService:
  5720                           	opt stack 18
  5721                           
  5722                           ;incstack = 0
  5723                           ;i2ES_PostToService@WhichService stored from wreg
  5724  001028  6E1D               	movwf	i2ES_PostToService@WhichService,c
  5725                           
  5726                           ;ES_Framework.c: 353: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5727                           ;ES_Framework.c: 354: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5728                           ;ES_Framework.c: 355: 1 )){
  5729  00102A  0E02               	movlw	2
  5730  00102C  601D               	cpfslt	i2ES_PostToService@WhichService,c
  5731  00102E  D02F               	goto	i2l2380
  5732  001030  501D               	movf	i2ES_PostToService@WhichService,w,c
  5733  001032  0D03               	mullw	3
  5734  001034  0E58               	movlw	low _EventQueues
  5735  001036  24F3               	addwf	prodl,w,c
  5736  001038  6EF6               	movwf	tblptrl,c
  5737  00103A  0E03               	movlw	high _EventQueues
  5738  00103C  20F4               	addwfc	prodh,w,c
  5739  00103E  6EF7               	movwf	tblptrh,c
  5740  001040                     	if	0	;There are less than 3 active tblptr bytes
  5741  001040                     	endif
  5742  001040  0009               	tblrd		*+
  5743  001042  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  5744  001046  000A               	tblrd		*-
  5745  001048  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  5746  00104C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  5747  001050  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  5748  001054  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  5749  001058  ECCA  F005         	call	i2_ES_EnQueueFIFO	;wreg free
  5750  00105C  06E8               	decf	wreg,f,c
  5751  00105E  A4D8               	btfss	status,2,c
  5752  001060  D016               	goto	i2l2380
  5753                           
  5754                           ;ES_Framework.c: 356: Ready |= BitNum2SetMask[WhichService];
  5755  001062  501D               	movf	i2ES_PostToService@WhichService,w,c
  5756  001064  0D02               	mullw	2
  5757  001066  0E01               	movlw	low _BitNum2SetMask
  5758  001068  24F3               	addwf	prodl,w,c
  5759  00106A  6EF6               	movwf	tblptrl,c
  5760  00106C  0E03               	movlw	high _BitNum2SetMask
  5761  00106E  20F4               	addwfc	prodh,w,c
  5762  001070  6EF7               	movwf	tblptrh,c
  5763  001072                     	if	0	;There are less than 3 active tblptr bytes
  5764  001072                     	endif
  5765  001072  0009               	tblrd		*+
  5766  001074  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  5767  001078  0009               	tblrd		*+
  5768  00107A  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  5769  00107E  501B               	movf	??i2_ES_PostToService,w,c
  5770  001080  0100               	movlb	0	; () banked
  5771  001082  1388               	iorwf	_Ready& (0+255),f,b
  5772  001084  501C               	movf	??i2_ES_PostToService+1,w,c
  5773  001086  0100               	movlb	0	; () banked
  5774  001088  1389               	iorwf	(_Ready+1)& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;ES_Framework.c: 357: return 1;
  5778  00108A  0E01               	movlw	1
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;ES_Framework.c: 358: } else
  5782                           
  5783                           ; BSR set to: 0
  5784  00108C  0012               	return	
  5785  00108E                     i2l2380:
  5786                           
  5787                           ;ES_Framework.c: 359: return 0;
  5788  00108E  0E00               	movlw	0
  5789  001090  0012               	return	
  5790  001092                     __end_ofi2_ES_PostToService:
  5791                           	opt stack 0
  5792                           tosu	equ	0xFFF
  5793                           tosh	equ	0xFFE
  5794                           tosl	equ	0xFFD
  5795                           pclatu	equ	0xFFB
  5796                           pclath	equ	0xFFA
  5797                           tblptru	equ	0xFF8
  5798                           tblptrh	equ	0xFF7
  5799                           tblptrl	equ	0xFF6
  5800                           tablat	equ	0xFF5
  5801                           prodh	equ	0xFF4
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           postinc0	equ	0xFEE
  5805                           fsr0h	equ	0xFEA
  5806                           fsr0l	equ	0xFE9
  5807                           wreg	equ	0xFE8
  5808                           indf1	equ	0xFE7
  5809                           postinc1	equ	0xFE6
  5810                           fsr1h	equ	0xFE2
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function i2_ES_EnQueueFIFO *****************
  5820 ;; Defined at:
  5821 ;;		line 85 in file "ES_Queue.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  5824 ;;		 -> Queue1(12), Queue0(18), 
  5825 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  5828 ;;		 -> Queue1(12), Queue0(18), 
  5829 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      unsigned char 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5839 ;;      Params:         5       0       0       0
  5840 ;;      Locals:         3       0       0       0
  5841 ;;      Temps:          3       0       0       0
  5842 ;;      Totals:        11       0       0       0
  5843 ;;Total ram usage:       11 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    1
  5846 ;; This function calls:
  5847 ;;		i2___awmod
  5848 ;;		i2___wmul
  5849 ;; This function is called by:
  5850 ;;		i2_ES_PostToService
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text37
  5855  000B94                     __ptext37:
  5856                           	opt stack 0
  5857  000B94                     i2_ES_EnQueueFIFO:
  5858                           	opt stack 18
  5859                           
  5860                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5861                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5862                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5863                           
  5864                           ;incstack = 0
  5865  000B94  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  5866  000B98  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  5867                           
  5868                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5869  000B9C  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  5870  000BA0  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5871  000BA4  EE10 F002          	lfsr	1,2
  5872  000BA8  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  5873  000BAA  26E1               	addwf	fsr1l,f,c
  5874  000BAC  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  5875  000BAE  22E2               	addwfc	fsr1h,f,c
  5876  000BB0  50DE               	movf	postinc2,w,c
  5877  000BB2  5CE6               	subwf	postinc1,w,c
  5878  000BB4  B0D8               	btfsc	status,0,c
  5879  000BB6  D046               	goto	i2l2268
  5880                           
  5881                           ;ES_Queue.c: 92: {
  5882                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5883  000BB8  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  5884  000BBC  9EF2               	bcf	intcon,7,c	;volatile
  5885                           
  5886                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5887                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5888  000BBE  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  5889  000BC2  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5890  000BC6  50DF               	movf	indf2,w,c
  5891  000BC8  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  5892  000BCA  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  5893  000BCC  6E03               	movwf	i2___awmod@divisor,c
  5894  000BCE  6A04               	clrf	i2___awmod@divisor+1,c
  5895  000BD0  EE20 F002          	lfsr	2,2
  5896  000BD4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  5897  000BD6  26D9               	addwf	fsr2l,f,c
  5898  000BD8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  5899  000BDA  22DA               	addwfc	fsr2h,f,c
  5900  000BDC  50DF               	movf	indf2,w,c
  5901  000BDE  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  5902  000BE0  EE20 F001          	lfsr	2,1
  5903  000BE4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  5904  000BE6  26D9               	addwf	fsr2l,f,c
  5905  000BE8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  5906  000BEA  22DA               	addwfc	fsr2h,f,c
  5907  000BEC  50DF               	movf	indf2,w,c
  5908  000BEE  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  5909  000BF0  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  5910  000BF2  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  5911  000BF4  6E01               	movwf	i2___awmod@dividend,c
  5912  000BF6  6A02               	clrf	i2___awmod@dividend+1,c
  5913  000BF8  3602               	rlcf	i2___awmod@dividend+1,f,c
  5914  000BFA  ECDC  F007         	call	i2___awmod	;wreg free
  5915  000BFE  0E01               	movlw	1
  5916  000C00  2401               	addwf	?i2___awmod,w,c
  5917  000C02  6E07               	movwf	i2___wmul@multiplier,c
  5918  000C04  0E00               	movlw	0
  5919  000C06  2002               	addwfc	?i2___awmod+1,w,c
  5920  000C08  6E08               	movwf	i2___wmul@multiplier+1,c
  5921  000C0A  0E00               	movlw	0
  5922  000C0C  6E0A               	movwf	i2___wmul@multiplicand+1,c
  5923  000C0E  0E03               	movlw	3
  5924  000C10  6E09               	movwf	i2___wmul@multiplicand,c
  5925  000C12  ECB1  F009         	call	i2___wmul	;wreg free
  5926  000C16  5007               	movf	?i2___wmul,w,c
  5927  000C18  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  5928  000C1A  6ED9               	movwf	fsr2l,c
  5929  000C1C  5008               	movf	?i2___wmul+1,w,c
  5930  000C1E  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  5931  000C20  6EDA               	movwf	fsr2h,c
  5932  000C22  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  5933  000C26  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  5934  000C2A  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  5935                           
  5936                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5937  000C2E  EE20 F002          	lfsr	2,2
  5938  000C32  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  5939  000C34  26D9               	addwf	fsr2l,f,c
  5940  000C36  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  5941  000C38  22DA               	addwfc	fsr2h,f,c
  5942  000C3A  2ADF               	incf	indf2,f,c
  5943                           
  5944                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5945  000C3C  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5946                           
  5947                           ;ES_Queue.c: 101: return(1);
  5948  000C40  0E01               	movlw	1
  5949                           
  5950                           ;ES_Queue.c: 102: }else
  5951  000C42  0012               	return	
  5952  000C44                     i2l2268:
  5953                           
  5954                           ;ES_Queue.c: 103: return(0);
  5955  000C44  0E00               	movlw	0
  5956  000C46  0012               	return	
  5957  000C48                     __end_ofi2_ES_EnQueueFIFO:
  5958                           	opt stack 0
  5959                           tosu	equ	0xFFF
  5960                           tosh	equ	0xFFE
  5961                           tosl	equ	0xFFD
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           postinc0	equ	0xFEE
  5972                           fsr0h	equ	0xFEA
  5973                           fsr0l	equ	0xFE9
  5974                           wreg	equ	0xFE8
  5975                           indf1	equ	0xFE7
  5976                           postinc1	equ	0xFE6
  5977                           fsr1h	equ	0xFE2
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function i2___wmul *****************
  5987 ;; Defined at:
  5988 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  multiplier      2    6[COMRAM] unsigned int 
  5991 ;;  multiplicand    2    8[COMRAM] unsigned int 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  __wmul          2   10[COMRAM] unsigned int 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  2    6[COMRAM] unsigned int 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, prodl, prodh
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6003 ;;      Params:         4       0       0       0
  6004 ;;      Locals:         2       0       0       0
  6005 ;;      Temps:          0       0       0       0
  6006 ;;      Totals:         6       0       0       0
  6007 ;;Total ram usage:        6 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		i2_ES_EnQueueFIFO
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text38
  6017  001362                     __ptext38:
  6018                           	opt stack 0
  6019  001362                     i2___wmul:
  6020                           	opt stack 18
  6021                           
  6022                           ;incstack = 0
  6023  001362  5007               	movf	i2___wmul@multiplier,w,c
  6024  001364  0209               	mulwf	i2___wmul@multiplicand,c
  6025  001366  CFF3 F00B          	movff	prodl,i2___wmul@product
  6026  00136A  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  6027  00136E  5007               	movf	i2___wmul@multiplier,w,c
  6028  001370  020A               	mulwf	i2___wmul@multiplicand+1,c
  6029  001372  50F3               	movf	prodl,w,c
  6030  001374  260C               	addwf	i2___wmul@product+1,f,c
  6031  001376  5008               	movf	i2___wmul@multiplier+1,w,c
  6032  001378  0209               	mulwf	i2___wmul@multiplicand,c
  6033  00137A  50F3               	movf	prodl,w,c
  6034  00137C  260C               	addwf	i2___wmul@product+1,f,c
  6035  00137E  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  6036  001382  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  6037  001386  0012               	return	
  6038  001388                     __end_ofi2___wmul:
  6039                           	opt stack 0
  6040                           tosu	equ	0xFFF
  6041                           tosh	equ	0xFFE
  6042                           tosl	equ	0xFFD
  6043                           pclatu	equ	0xFFB
  6044                           pclath	equ	0xFFA
  6045                           tblptru	equ	0xFF8
  6046                           tblptrh	equ	0xFF7
  6047                           tblptrl	equ	0xFF6
  6048                           tablat	equ	0xFF5
  6049                           prodh	equ	0xFF4
  6050                           prodl	equ	0xFF3
  6051                           intcon	equ	0xFF2
  6052                           postinc0	equ	0xFEE
  6053                           fsr0h	equ	0xFEA
  6054                           fsr0l	equ	0xFE9
  6055                           wreg	equ	0xFE8
  6056                           indf1	equ	0xFE7
  6057                           postinc1	equ	0xFE6
  6058                           fsr1h	equ	0xFE2
  6059                           fsr1l	equ	0xFE1
  6060                           indf2	equ	0xFDF
  6061                           postinc2	equ	0xFDE
  6062                           postdec2	equ	0xFDD
  6063                           fsr2h	equ	0xFDA
  6064                           fsr2l	equ	0xFD9
  6065                           status	equ	0xFD8
  6066                           
  6067 ;; *************** function i2___awmod *****************
  6068 ;; Defined at:
  6069 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  dividend        2    0[COMRAM] int 
  6072 ;;  divisor         2    2[COMRAM] int 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  __awmod         1    5[COMRAM] unsigned char 
  6075 ;;  __awmod         1    4[COMRAM] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  2    0[COMRAM] int 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6085 ;;      Params:         4       0       0       0
  6086 ;;      Locals:         2       0       0       0
  6087 ;;      Temps:          0       0       0       0
  6088 ;;      Totals:         6       0       0       0
  6089 ;;Total ram usage:        6 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		i2_ES_EnQueueFIFO
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text39
  6099  000FB8                     __ptext39:
  6100                           	opt stack 0
  6101  000FB8                     i2___awmod:
  6102                           	opt stack 18
  6103                           
  6104                           ;incstack = 0
  6105  000FB8  0E00               	movlw	0
  6106  000FBA  6E06               	movwf	i2___awmod@sign,c
  6107  000FBC  AE02               	btfss	i2___awmod@dividend+1,7,c
  6108  000FBE  D006               	goto	i2l2130
  6109  000FC0  6C01               	negf	i2___awmod@dividend,c
  6110  000FC2  1E02               	comf	i2___awmod@dividend+1,f,c
  6111  000FC4  B0D8               	btfsc	status,0,c
  6112  000FC6  2A02               	incf	i2___awmod@dividend+1,f,c
  6113  000FC8  0E01               	movlw	1
  6114  000FCA  6E06               	movwf	i2___awmod@sign,c
  6115  000FCC                     i2l2130:
  6116  000FCC  AE04               	btfss	i2___awmod@divisor+1,7,c
  6117  000FCE  D004               	goto	i2l2134
  6118  000FD0  6C03               	negf	i2___awmod@divisor,c
  6119  000FD2  1E04               	comf	i2___awmod@divisor+1,f,c
  6120  000FD4  B0D8               	btfsc	status,0,c
  6121  000FD6  2A04               	incf	i2___awmod@divisor+1,f,c
  6122  000FD8                     i2l2134:
  6123  000FD8  5003               	movf	i2___awmod@divisor,w,c
  6124  000FDA  1004               	iorwf	i2___awmod@divisor+1,w,c
  6125  000FDC  B4D8               	btfsc	status,2,c
  6126  000FDE  D018               	goto	i2l2150
  6127  000FE0  0E01               	movlw	1
  6128  000FE2  6E05               	movwf	i2___awmod@counter,c
  6129  000FE4  D004               	goto	i2l2140
  6130  000FE6                     i2l2138:
  6131  000FE6  90D8               	bcf	status,0,c
  6132  000FE8  3603               	rlcf	i2___awmod@divisor,f,c
  6133  000FEA  3604               	rlcf	i2___awmod@divisor+1,f,c
  6134  000FEC  2A05               	incf	i2___awmod@counter,f,c
  6135  000FEE                     i2l2140:
  6136  000FEE  AE04               	btfss	i2___awmod@divisor+1,7,c
  6137  000FF0  D7FA               	goto	i2l2138
  6138  000FF2                     i2l2142:
  6139  000FF2  5003               	movf	i2___awmod@divisor,w,c
  6140  000FF4  5C01               	subwf	i2___awmod@dividend,w,c
  6141  000FF6  5004               	movf	i2___awmod@divisor+1,w,c
  6142  000FF8  5802               	subwfb	i2___awmod@dividend+1,w,c
  6143  000FFA  A0D8               	btfss	status,0,c
  6144  000FFC  D004               	goto	i2l2146
  6145  000FFE  5003               	movf	i2___awmod@divisor,w,c
  6146  001000  5E01               	subwf	i2___awmod@dividend,f,c
  6147  001002  5004               	movf	i2___awmod@divisor+1,w,c
  6148  001004  5A02               	subwfb	i2___awmod@dividend+1,f,c
  6149  001006                     i2l2146:
  6150  001006  90D8               	bcf	status,0,c
  6151  001008  3204               	rrcf	i2___awmod@divisor+1,f,c
  6152  00100A  3203               	rrcf	i2___awmod@divisor,f,c
  6153  00100C  2E05               	decfsz	i2___awmod@counter,f,c
  6154  00100E  D7F1               	goto	i2l2142
  6155  001010                     i2l2150:
  6156  001010  5006               	movf	i2___awmod@sign,w,c
  6157  001012  B4D8               	btfsc	status,2,c
  6158  001014  D004               	goto	i2l2154
  6159  001016  6C01               	negf	i2___awmod@dividend,c
  6160  001018  1E02               	comf	i2___awmod@dividend+1,f,c
  6161  00101A  B0D8               	btfsc	status,0,c
  6162  00101C  2A02               	incf	i2___awmod@dividend+1,f,c
  6163  00101E                     i2l2154:
  6164  00101E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  6165  001022  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  6166  001026  0012               	return	
  6167  001028                     __end_ofi2___awmod:
  6168                           	opt stack 0
  6169                           tosu	equ	0xFFF
  6170                           tosh	equ	0xFFE
  6171                           tosl	equ	0xFFD
  6172                           pclatu	equ	0xFFB
  6173                           pclath	equ	0xFFA
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           postinc0	equ	0xFEE
  6182                           fsr0h	equ	0xFEA
  6183                           fsr0l	equ	0xFE9
  6184                           wreg	equ	0xFE8
  6185                           indf1	equ	0xFE7
  6186                           postinc1	equ	0xFE6
  6187                           fsr1h	equ	0xFE2
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           tosu	equ	0xFFF
  6196                           tosh	equ	0xFFE
  6197                           tosl	equ	0xFFD
  6198                           pclatu	equ	0xFFB
  6199                           pclath	equ	0xFFA
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           postinc0	equ	0xFEE
  6208                           fsr0h	equ	0xFEA
  6209                           fsr0l	equ	0xFE9
  6210                           wreg	equ	0xFE8
  6211                           indf1	equ	0xFE7
  6212                           postinc1	equ	0xFE6
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222                           	psect	text40
  6223  000000                     __ptext40:
  6224                           	opt stack 0
  6225                           tosu	equ	0xFFF
  6226                           tosh	equ	0xFFE
  6227                           tosl	equ	0xFFD
  6228                           pclatu	equ	0xFFB
  6229                           pclath	equ	0xFFA
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           postinc0	equ	0xFEE
  6238                           fsr0h	equ	0xFEA
  6239                           fsr0l	equ	0xFE9
  6240                           wreg	equ	0xFE8
  6241                           indf1	equ	0xFE7
  6242                           postinc1	equ	0xFE6
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252                           	psect	rparam
  6253  0000                     tosu	equ	0xFFF
  6254                           tosh	equ	0xFFE
  6255                           tosl	equ	0xFFD
  6256                           pclatu	equ	0xFFB
  6257                           pclath	equ	0xFFA
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           postinc0	equ	0xFEE
  6266                           fsr0h	equ	0xFEA
  6267                           fsr0l	equ	0xFE9
  6268                           wreg	equ	0xFE8
  6269                           indf1	equ	0xFE7
  6270                           postinc1	equ	0xFE6
  6271                           fsr1h	equ	0xFE2
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280                           	psect	temp
  6281  000040                     btemp:
  6282                           	opt stack 0
  6283  000040                     	ds	1
  6284  0000                     int$flags	set	btemp
  6285                           tosu	equ	0xFFF
  6286                           tosh	equ	0xFFE
  6287                           tosl	equ	0xFFD
  6288                           pclatu	equ	0xFFB
  6289                           pclath	equ	0xFFA
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon	equ	0xFF2
  6297                           postinc0	equ	0xFEE
  6298                           fsr0h	equ	0xFEA
  6299                           fsr0l	equ	0xFE9
  6300                           wreg	equ	0xFE8
  6301                           indf1	equ	0xFE7
  6302                           postinc1	equ	0xFE6
  6303                           fsr1h	equ	0xFE2
  6304                           fsr1l	equ	0xFE1
  6305                           indf2	equ	0xFDF
  6306                           postinc2	equ	0xFDE
  6307                           postdec2	equ	0xFDD
  6308                           fsr2h	equ	0xFDA
  6309                           fsr2l	equ	0xFD9
  6310                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        0
    BSS         151
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      63
    BANK0           160     49     136
    BANK1           256      0      52
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI_Service(), PostToggleService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostToggleService(), 

    S121$pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue1(BANK0[12]), Queue0(BANK0[18]), 

    S90$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI_Service(), RunToggleService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI_Service(), RunToggleService(), 

    S90$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI_Service(), InitToggleService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI_Service(), InitToggleService(), 

    ES_EventList	const PTR FTN()unsigned char [2] size(2) Largest target is 1
		 -> CheckButtonEvents(), Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_EOTResponse
    _EOTResponse->i2_PostSPI_Service
    i2_PostSPI_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI_Service
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostSPI_Service
    _ES_Timer_Tick_Resp->_PostToggleService
    _PostToggleService->_ES_PostToService
    _RunSPI_Service->_PostSPI_Service
    _PostSPI_Service->_ES_PostToService
    _ES_DeQueue->___wmul
    _ES_CheckUserEvents->_CheckButtonEvents
    _CheckButtonEvents->_PostButtonDebounceSM
    _PostButtonDebounceSM->_ES_PostToService
    _ES_Initialize->_InitToggleService
    _InitToggleService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _InitSPI->_FormPacket
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   25242
                                             48 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   18589
                                             43 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                     _RunSPI_Service *
                   _RunToggleService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6580
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6580
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                    _PostSPI_Service *
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    3047
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3     732
                                             32 BANK0      6     3      3
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (2) _RunSPI_Service                                      11     8      3    5240
                                             32 BANK0     11     8      3
                 _ES_Timer_InitTimer
                         _FormPacket
                    _PostSPI_Service
                             _SetBGR
                           _sendByte
 ---------------------------------------------------------------------------------
 (3) _sendByte                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _PostSPI_Service                                      3     0      3    3200
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2237
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0    3400
                                             37 BANK0      1     1      0
                    _Check4Keystroke *
                  _CheckButtonEvents *
 ---------------------------------------------------------------------------------
 (3) _CheckButtonEvents                                    5     5      0    3310
                                             32 BANK0      5     5      0
                       _GetInputLine
               _PostButtonDebounceSM
 ---------------------------------------------------------------------------------
 (4) _PostButtonDebounceSM                                 3     0      3    3173
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _GetInputLine                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6257
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                    _InitSPI_Service *
                  _InitToggleService *
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    4     4      0    3708
                                             29 BANK0      4     4      0
                   _ES_PostToService
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2999
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitSPI_Service                                      1     1      0    1830
                                              6 BANK0      1     1      0
                 _ES_Timer_InitTimer
                            _InitSPI
                             _SetBGR
 ---------------------------------------------------------------------------------
 (3) _SetBGR                                               3     1      2     674
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _InitSPI                                              0     0      0     470
                         _FormPacket
 ---------------------------------------------------------------------------------
 (3) _FormPacket                                           6     6      0     470
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     664
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     868
                                             35 COMRAM    16    16      0
                        _EOTResponse
 ---------------------------------------------------------------------------------
 (9) _EOTResponse                                          3     3      0     868
                                             32 COMRAM     3     3      0
                  i2_PostSPI_Service
 ---------------------------------------------------------------------------------
 (10) i2_PostSPI_Service                                   3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (12) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitSPI_Service *
       _ES_Timer_InitTimer
       _InitSPI
         _FormPacket
       _SetBGR
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
       _CheckButtonEvents *
         _GetInputLine
         _PostButtonDebounceSM
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunSPI_Service *
       _ES_Timer_InitTimer
       _FormPacket
       _PostSPI_Service
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _SetBGR
       _sendByte
     _RunToggleService *
       _ES_Timer_InitTimer
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostSPI_Service *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _EOTResponse
     i2_PostSPI_Service
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      34       6       20.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     31      88       4       85.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3F       1       67.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FB       9        0.0%
DATA                 0      0      FB      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Oct 26 15:10:25 2016

                   ??__HW_Timer_Init 00B9                  ES_CheckUserEvents@i 00DC  
         CheckButtonEvents@ReturnVal 00D7                  __HW_Timer_Init@Rate 00B7  
                ___wmul@multiplicand 00BF             PostSPI_Service@ThisEvent 00D4  
                                l343 0EC0                                  l436 03DC  
                                l376 11B4                                  _BGR 0083  
              __end_of_ES_Initialize 0AB2                                  _GIE 007F97  
                                _ISR 0008                         ___awmod@sign 00BC  
            __end_of_Check4Keystroke 1464                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00CB              ES_EnQueueFIFO@Event2Add 00C5  
                  ?_ES_PostToService 00CE                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0080                                 l2200 056E  
                               l2112 0FB4                                 l2210 0588  
                               l2204 0578                                 l2060 0DD2  
                               l2052 0DAE                                 l2222 0622  
                               l2214 05BC                                 l2206 057E  
                               l2062 0DDE                                 l2224 064A  
                               l2232 0656                                 l2064 0DE4  
                               l2072 0E16                                 l2056 0DBE  
                               l2160 0CFA                                 l2234 065C  
                               l2218 05EE                                 l2170 0D86  
                               l2228 0650                                 l2076 0E2A  
                               l2068 0E08                                 l2420 078E  
                               l2238 0666                                 l2342 10D2  
                               l2174 0D8C                                 l2192 054C  
                               l2096 0B90                                 l2416 0772  
                               l2280 07D0                                 l2602 0A26  
                               l2346 10E8                                 l2362 120E  
                               l2354 11E6                                 l2426 07B6  
                               l2290 0848                                 l2188 0542  
                               l2540 041A                                 l2292 0886  
                               l2444 13C2                                 l2198 0568  
                               l2614 0AA8                                 l2606 0A2A  
                               l2390 1156                                 l2534 03FC  
                               l2622 08D4                                 l2480 1142  
                               l2560 0472                                 l2528 03DE  
                               l2448 13CA                                 l2618 0AAE  
                               l2386 114C                                 l2634 09AA  
                               l2572 04B0                                 l2580 0528  
                               l2548 0448                                 l2628 0956  
                               l2638 09C0                                 l2496 11B8  
                               l2576 04EA                                 l2840 0E84  
                               l2594 09D8                                 l2498 11C8  
                               l2674 12DE                                 l2842 0E96  
                               l2676 12E6                                 l2836 0E60  
                               l2598 09E2                                 l2838 0E72  
                               l2846 0EA8                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 u1214 0D20  
                               u1215 0D18                                 _LATA 000F89  
                               _LATC 000F8B                                 u1388 0830  
                               _PIE1 000F9D                                 u1498 116C  
                               u1499 1184                                 u1748 0A82  
                               u1749 0A9E                                 u1788 0980  
                               u1789 0998                   ??_ES_PostToService 00D1  
                               _main 0E34                          ?_ES_DeQueue 00C3  
                        FormPacket@i 00B9                          FormPacket@j 00BC  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0040                        main@ErrorType 00E7  
                               pclat 000FFA                ?_PostButtonDebounceSM 00D4  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                 __end_of_GetInputLine 1460  
                    __end_of_InitSPI 1362                                ??_ISR 0024  
            __end_of_InitSPI_Service 125E                         ?_EOTResponse 0001  
            __size_of_RunSPI_Service 017E                   ES_Run@HighestPrior 00E6  
                              ?_main 0001                __end_of_ES_Timer_Init 144E  
                    __end_of___awmod 0E34                      __end_of___lbmod 121A  
           __end_of_RunToggleService 11D6                                _T1CON 000FCD  
                         _DistList00 0362                                _LATA0 007C48  
                              _LATA1 007C49                                _LATA2 007C4A  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                i2l151 0CB2  
         __size_of_CheckButtonEvents 0060                                _PORTA 000F80  
                              _PORTC 000F82                                _TRISA 000F92  
                              _TRISC 000F94                                _SSPIE 007CEB  
                              _SSPIF 007CF3                        __CFG_PWRT$OFF 000000  
                              _Ready 0088                                _putch 1464  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 1388  
                              status 000FD8                           _FormPacket 053C  
                 __size_ofi2___awmod 0070                      __initialization 1304  
             ES_GetMSBitSet@LoopCntr 00C0           __end_of_ES_CheckUserEvents 1190  
                       __end_of_main 0EC2                    ES_Timer_Init@Rate 00B9  
                __end_of_EventQueues 035E                               ??_main 00E7  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 13D6                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                               _ADCON1 000FC1  
                             _CCP1IF 007CF2                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 003F  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00B9  
                             i2l2130 0FCC                               i2l2140 0FEE  
                             i2l2142 0FF2                               i2l2150 1010  
                             i2l2134 0FD8                               i2l2154 101E  
                             i2l2146 1006                               i2l2138 0FE6  
                             i2l2268 0C44                               i2l2380 108E  
                             i2l2740 0CA8                               _INTCON 000FF2  
                             _ES_Run 08D2               ??_PostButtonDebounceSM 00D7  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                          ??_InitSPI 00BD                     ??_ES_EnQueueFIFO 00C8  
                     _Timer2PostFunc 0321                               _SetBGR 142E  
                             _Queue0 0096                               _Queue1 00A8  
                     _SysTickCounter 0038                               ___wmul 129A  
                          ??___awmod 00BB                            ??___lbmod 00B8  
                   ?_InitSPI_Service 0001          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 130A                               clear_1 1316  
                             clear_2 1322                      ___awmod@divisor 00B9  
          ES_Timer_InitTimer@NewTime 00B7                      ___awmod@counter 00BB  
                             _printf 12D0                     __end_of_sendByte 1458  
                        ISR@LastTime 0034               ES_InitQueue@pThisQueue 00BA  
                  __end_ofi2___awmod 1028                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00CB  
            ES_GetMSBitSet@Val2Check 00B7                      ___lbmod@divisor 00B7  
                         __accesstop 0060              __end_of__initialization 1328  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 00B9  
                    __CFG_PBADEN$OFF 000000                          ?_FormPacket 0001  
              __size_of_GetInputLine 0008                        ___rparam_used 000001  
                        _EventQueues 0358          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001             __size_of_PostSPI_Service 001C  
                     _RunSPI_Service 03BE                        ?_ES_InitQueue 00B7  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 1466  
                    _TMR_ActiveFlags 008A                          _BytesToSend 0100  
               __size_of_EOTResponse 0016                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 00BE            RunSPI_Service@ReturnEvent 00DC  
                     _TMR_TimerArray 0060                         _GetInputLine 1458  
           ES_EnQueueFIFO@pThisQueue 00CC              InitSPI_Service@Priority 00BD  
                            ??_putch 00B7             __HW_Process_Pending_Ints 13C0  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00C7  
                            ?_SetBGR 00B7               __end_of_RunSPI_Service 053C  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BA  
                            ?___wmul 00BD                    i2_PostSPI_Service 1418  
                            _CCP1CON 000FBD                   ?i2_PostSPI_Service 001E  
                            ?_printf 00B7                           ??i2___wmul 000B  
                  ?_RunToggleService 00D7                  __size_of_FormPacket 0158  
                 __end_of_ES_DeQueue 07BC               i2ES_EnQueueFIFO@pBlock 000D  
                ??i2_PostSPI_Service 0021            _PostSPI_Service$intlevel0 138E  
                 ??_RunToggleService 00DA                              _SSPCON1 000FC6  
                            _SSPSTAT 000FC7                              SetBGR@B 00B9  
                            SetBGR@G 00B7                              SetBGR@R 00B8  
                    __size_of_ES_Run 00F4                              _InitSPI 1336  
            ToggleService@MyPriority 0090                            ?_sendByte 0001  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000                      __size_of_SetBGR 0012  
          __end_ofi2_PostSPI_Service 142E                      ?_RunSPI_Service 00D7  
          i2ES_EnQueueFIFO@Event2Add 000F                              ___awmod 0D92  
                            ___lbmod 11D6                      __size_of___wmul 0036  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 00BB  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1304  
                            __ramtop 0300                              __ptext0 0E34  
                            __ptext1 12D0                              __ptext2 1464  
                            __ptext3 08D2                              __ptext4 13C0  
                            __ptext5 07BC                              __ptext6 1388  
                            __ptext7 13D6                              __ptext8 0CEE  
                            __ptext9 03BE             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                    ??_PostSPI_Service 00D7  
                  _PostToggleService 13D6                         __size_of_ISR 0CE6  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 00B7  
                 _ES_CheckUserEvents 1146                   ?_PostToggleService 00D4  
                    ES_Run@ThisEvent 00B4            InitToggleService@Priority 00D7  
                     __pintcode_body 0C48                 end_of_initialization 1328  
                ?_ES_CheckUserEvents 0001                  ??_PostToggleService 00D7  
              SPI_Service@MyPriority 008F            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                   Button@CurrentState 003C  
                            int_func 0C48                  i2___wmul@multiplier 0007  
       ES_PostToService@WhichService 00D3               __size_of_ES_Timer_Init 000E  
                         ??_sendByte 00B7                              printf@c 00BB  
                            printf@f 00B7                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ??_ES_CheckUserEvents 00DC  
          __end_of_PostToggleService 13EC                        _ES_Initialize 09C6  
                   ___lbmod@dividend 00B8                 __end_of_ES_EventList 0362  
               __end_of_ES_InitQueue 129A                            i2___awmod 0FB8  
                     ES_Initialize@i 00DA                          ___lbmod@rem 00BA  
           __size_of_Check4Keystroke 0004           PostToggleService@ThisEvent 00D4  
                       ??_FormPacket 00B7            RunToggleService@ThisEvent 00D7  
                     __end_of_ES_Run 09C6        __size_of_PostButtonDebounceSM 0016  
                 __end_of_DistList00 0364           __size_ofi2_PostSPI_Service 0016  
                   _ES_PostToService 0F42                       __end_of_SetBGR 1440  
         __end_of_ES_Timer_InitTimer 0F42                 __end_of_ServDescList 0358  
                     __end_of___wmul 12D0                       ?_ES_Initialize 00D8  
         ??__HW_Process_Pending_Ints 00DB                        _ES_Timer_Init 1440  
                   i2___wmul@product 000B                       __end_of_printf 1304  
                          _FirstSend 0091           __end_of_ES_Timer_Tick_Resp 08D2  
           __size_of_InitSPI_Service 0044                  start_initialization 1304  
                 __end_of_FormPacket 0694                          __end_of_ISR 0CEE  
                  __size_ofi2___wmul 0026                         _CurrentState 003E  
                         ?i2___awmod 0001                             ??_ES_Run 00E2  
                   __CFG_OSC$IRCIO67 000000                    _InitToggleService 10F2  
                          _TickCount 0095           __end_ofi2_ES_PostToService 1092  
                           ??_SetBGR 00B9                   ?_InitToggleService 0001  
            __size_of_ES_GetMSBitSet 00A4            TemplateService@MyPriority 003D  
                      ??_EOTResponse 0021                             ??___wmul 00C1  
                ??_InitToggleService 00D4           __size_of_PostToggleService 0016  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00B9  
                     ?_ES_Timer_Init 00B9                       __HW_Timer_Init 13A4  
                        __pbssCOMRAM 0034                        __pcstackBANK0 00B7  
                 ES_InitQueue@pBlock 00B7          RunSPI_Service@ThisEvent_751 00DF  
          __end_of_InitToggleService 1146                     ??_RunSPI_Service 00DA  
                   i2_ES_EnQueueFIFO 0B94  CheckButtonEvents@CurrentButtonState 00DB  
          __size_of_RunToggleService 0046                        __PRIMASK_temp 003A  
                           ?_InitSPI 0001                      _PostSPI_Service 1388  
                       sendByte@Data 00B7                    ??_Check4Keystroke 00B7  
                          __pintcode 0008                    __size_of_sendByte 000A  
            SPI_Service@CurrentState 008E                             ?___awmod 00B7  
                           ?___lbmod 00B7                      ??_ES_Initialize 00DA  
           ES_PostToService@TheEvent 00CE               __end_of__HW_Timer_Init 13C0  
      PostButtonDebounceSM@ThisEvent 00D4                  __end_of_EOTResponse 1418  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
                        ??i2___awmod 0005          RunToggleService@ReturnEvent 00DA  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00D8  
                  ??_InitSPI_Service 00BD            ES_GetMSBitSet@Nybble2Test 00BF  
                           _LEDColor 0092                       ___wmul@product 00C1  
                   FormPacket@ledNum 00BB                         _ES_EventList 035E  
                       _NumBytesLeft 0094                         _ES_InitQueue 125E  
                    ??_ES_Timer_Init 00BB       i2ES_PostToService@WhichService 001D  
         i2PostSPI_Service@ThisEvent 001E                      ?__HW_Timer_Init 00B7  
                  ___wmul@multiplier 00BD                             i2___wmul 1362  
                 ES_DeQueue@SaveCrit 00C9                 ES_EnQueueFIFO@pBlock 00C3  
           __end_of_ES_PostToService 0FB8                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
         __size_of_InitToggleService 0054              __end_of_PostSPI_Service 13A4  
                   __size_of_InitSPI 002C                             __Hrparam 0000  
                     _ES_GetMSBitSet 0CEE                             __Lrparam 0000  
                        _EOTResponse 1402                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                i2___wmul@multiplicand 0009  
        __size_of_ES_CheckUserEvents 004A                       _ES_EnQueueFIFO 0AB2  
       __end_of_PostButtonDebounceSM 1402                   _ES_Timer_InitTimer 0EC2  
                      ?_GetInputLine 0001               __end_of_BitNum2SetMask 0321  
                           __ptext10 1190                             __ptext11 144E  
                           __ptext20 121A                             __ptext12 0694  
                           __ptext21 10F2                             __ptext13 11D6  
                           __ptext30 1440                             __ptext22 0F42  
                           __ptext14 1146                             __ptext31 13A4  
                           __ptext23 0AB2                             __ptext15 1460  
                           __ptext40 0000                             __ptext32 125E  
                           __ptext24 129A                             __ptext16 1092  
                           __ptext25 0D92                             __ptext17 13EC  
                           __ptext34 1402                             __ptext26 142E  
                           __ptext18 1458                             __ptext35 1418  
                           __ptext27 1336                             __ptext19 09C6  
                           __ptext36 1028                             __ptext28 053C  
                           __ptext37 0B94                             __ptext29 0EC2  
                           __ptext38 1362                             __ptext39 0FB8  
  ES_Timer_Tick_Resp@NeedsProcessing 0086                  ?_ES_Timer_InitTimer 00B7  
                      __size_of_main 008E                     _RunToggleService 1190  
                 _ES_Timer_Tick_Resp 07BC               __end_of_ES_GetMSBitSet 0D92  
                    FormPacket@i_765 00BA                             _sendByte 144E  
         InitToggleService@ThisEvent 00D4                  ?_ES_Timer_Tick_Resp 0001  
               EOTResponse@ThisEvent 0021               __end_of_ES_EnQueueFIFO 0B94  
                           int$flags 0040                 ??_ES_Timer_InitTimer 00B9  
                  ES_DeQueue@NumLeft 00CA                   i2_ES_PostToService 1028  
           __end_ofi2_ES_EnQueueFIFO 0C48                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005                     Button@MyPriority 008C  
                     ??_GetInputLine 00B7                  ?i2_ES_PostToService 0018  
                  _CheckButtonEvents 1092                 ??_ES_Timer_Tick_Resp 00D7  
                 ?_CheckButtonEvents 0001                      _Check4Keystroke 1460  
                           intlevel2 0000                     ?_PostSPI_Service 00D4  
            RunSPI_Service@ThisEvent 00D7                           _ES_DeQueue 0694  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
                    ?_ES_GetMSBitSet 00B7                  ??_CheckButtonEvents 00D7  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 008D  
                           printf@ap 00B9                      ?_ES_EnQueueFIFO 00C3  
                   ES_DeQueue@pBlock 00C3                      _InitSPI_Service 121A  
          __end_of_CheckButtonEvents 10F2                      _LastButtonState 0093  
             ES_DeQueue@pReturnEvent 00C5                ES_InitQueue@BlockSize 00B9  
               _PostButtonDebounceSM 13EC           CheckButtonEvents@ThisEvent 00D8  
