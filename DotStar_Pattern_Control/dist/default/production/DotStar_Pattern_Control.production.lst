

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Oct 31 22:18:01 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK2,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0017E2                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _MaxBrightness
    81  0017E2  1F                 	db	31
    82                           
    83                           	psect	idataBANK0
    84  0017D6                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _PatternConfigs
    88  0017D6  00                 	db	0
    89  0017D7  FF                 	db	255
    90  0017D8  1F                 	db	31
    91  0017D9  00                 	db	0
    92  0017DA  64                 	db	100
    93                           
    94                           	psect	idataBANK2
    95  0015A6                     __pidataBANK2:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _GenColors
    99  0015A6  0000               	dw	0
   100  0015A8  00FF               	dw	255
   101  0015AA  A500               	dw	42240
   102  0015AC  00FF               	dw	255
   103  0015AE  FF00               	dw	65280
   104  0015B0  00FF               	dw	255
   105  0015B2  8000               	dw	32768
   106  0015B4  0080               	dw	128
   107  0015B6  FF00               	dw	65280
   108  0015B8  0000               	dw	0
   109  0015BA  8000               	dw	32768
   110  0015BC  0000               	dw	0
   111  0015BE  FFFF               	dw	65535
   112  0015C0  0000               	dw	0
   113  0015C2  8080               	dw	32896
   114  0015C4  0000               	dw	0
   115  0015C6  00FF               	dw	255
   116  0015C8  0000               	dw	0
   117  0015CA  0080               	dw	128
   118  0015CC  0000               	dw	0
   119  0015CE  00FF               	dw	255
   120  0015D0  00FF               	dw	255
   121  0015D2  0080               	dw	128
   122  0015D4  0080               	dw	128
   123  0015D6  0000               	dw	0
   124  0015D8  0080               	dw	128
   125                           
   126                           	psect	smallconst
   127  000300                     __psmallconst:
   128                           	opt stack 0
   129  000300  00                 	db	0
   130  000301                     _BitNum2SetMask:
   131                           	opt stack 0
   132  000301  0001               	dw	1
   133  000303  0002               	dw	2
   134  000305  0004               	dw	4
   135  000307  0008               	dw	8
   136  000309  0010               	dw	16
   137  00030B  0020               	dw	32
   138  00030D  0040               	dw	64
   139  00030F  0080               	dw	128
   140  000311  0100               	dw	256
   141  000313  0200               	dw	512
   142  000315  0400               	dw	1024
   143  000317  0800               	dw	2048
   144  000319  1000               	dw	4096
   145  00031B  2000               	dw	8192
   146  00031D  4000               	dw	16384
   147  00031F  8000               	dw	32768
   148  000321                     __end_of_BitNum2SetMask:
   149                           	opt stack 0
   150  000321                     _Timer2PostFunc:
   151                           	opt stack 0
   152  000321  58                 	db	low _PostPatternControlService
   153  000322  17                 	db	high _PostPatternControlService
   154  000323  0A                 	db	low _PostSPI32ControlService
   155  000324  17                 	db	high _PostSPI32ControlService
   156  000325  00                 	db	0
   157  000326  00                 	db	0
   158  000327  00                 	db	0
   159  000328  00                 	db	0
   160  000329  00                 	db	0
   161  00032A  00                 	db	0
   162  00032B  00                 	db	0
   163  00032C  00                 	db	0
   164  00032D  00                 	db	0
   165  00032E  00                 	db	0
   166  00032F  00                 	db	0
   167  000330  00                 	db	0
   168  000331  00                 	db	0
   169  000332  00                 	db	0
   170  000333  00                 	db	0
   171  000334  00                 	db	0
   172  000335  00                 	db	0
   173  000336  00                 	db	0
   174  000337  00                 	db	0
   175  000338  00                 	db	0
   176  000339  00                 	db	0
   177  00033A  00                 	db	0
   178  00033B  00                 	db	0
   179  00033C  00                 	db	0
   180  00033D  00                 	db	0
   181  00033E  00                 	db	0
   182  00033F  00                 	db	0
   183  000340  00                 	db	0
   184  000341                     __end_of_Timer2PostFunc:
   185                           	opt stack 0
   186  000341                     _Nybble2MSBitNum:
   187                           	opt stack 0
   188  000341  00                 	db	0
   189  000342  01                 	db	1
   190  000343  01                 	db	1
   191  000344  02                 	db	2
   192  000345  02                 	db	2
   193  000346  02                 	db	2
   194  000347  02                 	db	2
   195  000348  03                 	db	3
   196  000349  03                 	db	3
   197  00034A  03                 	db	3
   198  00034B  03                 	db	3
   199  00034C  03                 	db	3
   200  00034D  03                 	db	3
   201  00034E  03                 	db	3
   202  00034F  03                 	db	3
   203  000350                     __end_of_Nybble2MSBitNum:
   204                           	opt stack 0
   205  000350                     _ServDescList:
   206                           	opt stack 0
   207  000350  40                 	db	low _InitPatternControlService
   208  000351  13                 	db	high _InitPatternControlService
   209  000352  D6                 	db	low _RunPatternControlService
   210  000353  0B                 	db	high _RunPatternControlService
   211  000354  36                 	db	low _InitSPI32ControlService
   212  000355  15                 	db	high _InitSPI32ControlService
   213  000356  48                 	db	low _RunSPI32ControlService
   214  000357  07                 	db	high _RunSPI32ControlService
   215  000358                     __end_of_ServDescList:
   216                           	opt stack 0
   217  000358                     _EventQueues:
   218                           	opt stack 0
   219  000358  A0                 	db	low _Queue0
   220  000359  00                 	db	high _Queue0
   221  00035A  04                 	db	4
   222  00035B  AC                 	db	low _Queue1
   223  00035C  00                 	db	high _Queue1
   224  00035D  04                 	db	4
   225  00035E                     __end_of_EventQueues:
   226                           	opt stack 0
   227  00035E                     _ES_EventList:
   228                           	opt stack 0
   229  00035E  DC                 	db	low _Check4Keystroke
   230  00035F  17                 	db	high _Check4Keystroke
   231  000360                     __end_of_ES_EventList:
   232                           	opt stack 0
   233  000360                     _DistList00:
   234                           	opt stack 0
   235  000360  58                 	db	low _PostPatternControlService
   236  000361  17                 	db	high _PostPatternControlService
   237  000362  0A                 	db	low _PostSPI32ControlService
   238  000363  17                 	db	high _PostSPI32ControlService
   239  000364                     __end_of_DistList00:
   240                           	opt stack 0
   241  0000                     _ADCON1	set	4033
   242  0000                     _CCP1CON	set	4029
   243  0000                     _CCPR1H	set	4031
   244  0000                     _CCPR1L	set	4030
   245  0000                     _INTCON	set	4082
   246  0000                     _LATC	set	3979
   247  0000                     _PIE1	set	3997
   248  0000                     _PORTC	set	3970
   249  0000                     _SSPADD	set	4040
   250  0000                     _SSPBUF	set	4041
   251  0000                     _SSPCON1	set	4038
   252  0000                     _SSPSTAT	set	4039
   253  0000                     _T1CON	set	4045
   254  0000                     _TRISC	set	3988
   255  0000                     _CCP1IF	set	31986
   256  0000                     _GIE	set	32663
   257  0000                     _IRCF0	set	32412
   258  0000                     _IRCF1	set	32413
   259  0000                     _IRCF2	set	32414
   260  0000                     _SSPIE	set	31979
   261  0000                     _SSPIF	set	31987
   262  000364                     STR_1:
   263  000364  46                 	db	70	;'F'
   264  000365  61                 	db	97	;'a'
   265  000366  69                 	db	105	;'i'
   266  000367  6C                 	db	108	;'l'
   267  000368  65                 	db	101	;'e'
   268  000369  64                 	db	100	;'d'
   269  00036A  20                 	db	32
   270  00036B  6F                 	db	111	;'o'
   271  00036C  6E                 	db	110	;'n'
   272  00036D  20                 	db	32
   273  00036E  61                 	db	97	;'a'
   274  00036F  74                 	db	116	;'t'
   275  000370  74                 	db	116	;'t'
   276  000371  65                 	db	101	;'e'
   277  000372  6D                 	db	109	;'m'
   278  000373  70                 	db	112	;'p'
   279  000374  74                 	db	116	;'t'
   280  000375  20                 	db	32
   281  000376  74                 	db	116	;'t'
   282  000377  6F                 	db	111	;'o'
   283  000378  20                 	db	32
   284  000379  50                 	db	80	;'P'
   285  00037A  6F                 	db	111	;'o'
   286  00037B  73                 	db	115	;'s'
   287  00037C  74                 	db	116	;'t'
   288  00037D  0A                 	db	10
   289  00037E  00                 	db	0
   290  00037F                     STR_2:
   291  00037F  46                 	db	70	;'F'
   292  000380  61                 	db	97	;'a'
   293  000381  69                 	db	105	;'i'
   294  000382  6C                 	db	108	;'l'
   295  000383  65                 	db	101	;'e'
   296  000384  64                 	db	100	;'d'
   297  000385  20                 	db	32
   298  000386  6F                 	db	111	;'o'
   299  000387  6E                 	db	110	;'n'
   300  000388  20                 	db	32
   301  000389  4E                 	db	78	;'N'
   302  00038A  55                 	db	85	;'U'
   303  00038B  4C                 	db	76	;'L'
   304  00038C  4C                 	db	76	;'L'
   305  00038D  20                 	db	32
   306  00038E  70                 	db	112	;'p'
   307  00038F  6F                 	db	111	;'o'
   308  000390  69                 	db	105	;'i'
   309  000391  6E                 	db	110	;'n'
   310  000392  74                 	db	116	;'t'
   311  000393  65                 	db	101	;'e'
   312  000394  72                 	db	114	;'r'
   313  000395  0A                 	db	10
   314  000396  00                 	db	0
   315  000397                     STR_3:
   316  000397  46                 	db	70	;'F'
   317  000398  61                 	db	97	;'a'
   318  000399  69                 	db	105	;'i'
   319  00039A  6C                 	db	108	;'l'
   320  00039B  65                 	db	101	;'e'
   321  00039C  64                 	db	100	;'d'
   322  00039D  20                 	db	32
   323  00039E  49                 	db	73	;'I'
   324  00039F  6E                 	db	110	;'n'
   325  0003A0  69                 	db	105	;'i'
   326  0003A1  74                 	db	116	;'t'
   327  0003A2  69                 	db	105	;'i'
   328  0003A3  61                 	db	97	;'a'
   329  0003A4  6C                 	db	108	;'l'
   330  0003A5  69                 	db	105	;'i'
   331  0003A6  7A                 	db	122	;'z'
   332  0003A7  61                 	db	97	;'a'
   333  0003A8  74                 	db	116	;'t'
   334  0003A9  69                 	db	105	;'i'
   335  0003AA  6F                 	db	111	;'o'
   336  0003AB  6E                 	db	110	;'n'
   337  0003AC  0A                 	db	10
   338  0003AD  00                 	db	0
   339  0003AE                     STR_4:
   340  0003AE  4F                 	db	79	;'O'
   341  0003AF  74                 	db	116	;'t'
   342  0003B0  68                 	db	104	;'h'
   343  0003B1  65                 	db	101	;'e'
   344  0003B2  72                 	db	114	;'r'
   345  0003B3  20                 	db	32
   346  0003B4  46                 	db	70	;'F'
   347  0003B5  61                 	db	97	;'a'
   348  0003B6  69                 	db	105	;'i'
   349  0003B7  6C                 	db	108	;'l'
   350  0003B8  75                 	db	117	;'u'
   351  0003B9  72                 	db	114	;'r'
   352  0003BA  65                 	db	101	;'e'
   353  0003BB  0A                 	db	10
   354  0003BC  00                 	db	0
   355                           
   356                           ; #config settings
   357  0003BD  00                 	db	0	; dummy byte at the end
   358  0000                     
   359                           	psect	cinit
   360  000FD4                     __pcinit:
   361                           	opt stack 0
   362  000FD4                     start_initialization:
   363                           	opt stack 0
   364  000FD4                     __initialization:
   365                           	opt stack 0
   366                           
   367                           ; Initialize objects allocated to BANK2 (52 bytes)
   368                           ; load TBLPTR registers with __pidataBANK2
   369  000FD4  0EA6               	movlw	low __pidataBANK2
   370  000FD6  6EF6               	movwf	tblptrl,c
   371  000FD8  0E15               	movlw	high __pidataBANK2
   372  000FDA  6EF7               	movwf	tblptrh,c
   373  000FDC  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   374  000FDE  6EF8               	movwf	tblptru,c
   375  000FE0  EE02  F078         	lfsr	0,__pdataBANK2
   376  000FE4  EE10 F034          	lfsr	1,52
   377  000FE8                     copy_data0:
   378  000FE8  0009               	tblrd		*+
   379  000FEA  CFF5 FFEE          	movff	tablat,postinc0
   380  000FEE  50E5               	movf	postdec1,w,c
   381  000FF0  50E1               	movf	fsr1l,w,c
   382  000FF2  E1FA               	bnz	copy_data0
   383                           
   384                           ; Initialize objects allocated to BANK0 (5 bytes)
   385                           ; load TBLPTR registers with __pidataBANK0
   386  000FF4  0ED6               	movlw	low __pidataBANK0
   387  000FF6  6EF6               	movwf	tblptrl,c
   388  000FF8  0E17               	movlw	high __pidataBANK0
   389  000FFA  6EF7               	movwf	tblptrh,c
   390  000FFC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   391  000FFE  6EF8               	movwf	tblptru,c
   392  001000  EE00  F0F2         	lfsr	0,__pdataBANK0
   393  001004  EE10 F005          	lfsr	1,5
   394  001008                     copy_data1:
   395  001008  0009               	tblrd		*+
   396  00100A  CFF5 FFEE          	movff	tablat,postinc0
   397  00100E  50E5               	movf	postdec1,w,c
   398  001010  50E1               	movf	fsr1l,w,c
   399  001012  E1FA               	bnz	copy_data1
   400                           
   401                           ; Initialize objects allocated to COMRAM (1 bytes)
   402                           ; load TBLPTR registers with __pidataCOMRAM
   403  001014  0EE2               	movlw	low __pidataCOMRAM
   404  001016  6EF6               	movwf	tblptrl,c
   405  001018  0E17               	movlw	high __pidataCOMRAM
   406  00101A  6EF7               	movwf	tblptrh,c
   407  00101C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   408  00101E  6EF8               	movwf	tblptru,c
   409  001020  0009               	tblrd		*+	;fetch initializer
   410  001022  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   411                           
   412                           ; Clear objects allocated to BANK2 (120 bytes)
   413  001026  EE02  F000         	lfsr	0,__pbssBANK2
   414  00102A  0E78               	movlw	120
   415  00102C                     clear_0:
   416  00102C  6AEE               	clrf	postinc0,c
   417  00102E  06E8               	decf	wreg,f,c
   418  001030  E1FD               	bnz	clear_0
   419                           
   420                           ; Clear objects allocated to BANK1 (256 bytes)
   421  001032  EE01  F000         	lfsr	0,__pbssBANK1
   422  001036  EE11 F000          	lfsr	1,256
   423  00103A                     clear_1:
   424  00103A  6AEE               	clrf	postinc0,c
   425  00103C  50E5               	movf	postdec1,w,c
   426  00103E  50E1               	movf	fsr1l,w,c
   427  001040  E1FC               	bnz	clear_1
   428  001042  50E2               	movf	fsr1h,w,c
   429  001044  E1FA               	bnz	clear_1
   430                           
   431                           ; Clear objects allocated to BANK0 (91 bytes)
   432  001046  EE00  F060         	lfsr	0,__pbssBANK0
   433  00104A  0E5B               	movlw	91
   434  00104C                     clear_2:
   435  00104C  6AEE               	clrf	postinc0,c
   436  00104E  06E8               	decf	wreg,f,c
   437  001050  E1FD               	bnz	clear_2
   438                           
   439                           ; Clear objects allocated to COMRAM (9 bytes)
   440  001052  EE00  F034         	lfsr	0,__pbssCOMRAM
   441  001056  0E09               	movlw	9
   442  001058                     clear_3:
   443  001058  6AEE               	clrf	postinc0,c
   444  00105A  06E8               	decf	wreg,f,c
   445  00105C  E1FD               	bnz	clear_3
   446  00105E                     end_of_initialization:
   447                           	opt stack 0
   448  00105E                     __end_of__initialization:
   449                           	opt stack 0
   450  00105E  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   451  001060  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   452  001062  0E00               	movlw	low (__Lmediumconst shr (0+16))
   453  001064  6EF8               	movwf	tblptru,c
   454  001066  0100               	movlb	0
   455  001068  EF36  F008         	goto	_main	;jump to C main() function
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1h	equ	0xFE2
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssCOMRAM
   467  000034                     __pbssCOMRAM:
   468                           	opt stack 0
   469  000034                     ISR@LastTime:
   470                           	opt stack 0
   471  000034                     	ds	2
   472  000036                     ISR@NextTime:
   473                           	opt stack 0
   474  000036                     	ds	2
   475  000038                     _SysTickCounter:
   476                           	opt stack 0
   477  000038                     	ds	2
   478  00003A                     __PRIMASK_temp:
   479                           	opt stack 0
   480  00003A                     	ds	2
   481  00003C                     	ds	1
   482                           tblptru	equ	0xFF8
   483                           tblptrh	equ	0xFF7
   484                           tblptrl	equ	0xFF6
   485                           tablat	equ	0xFF5
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           postdec1	equ	0xFE5
   489                           fsr1h	equ	0xFE2
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	dataCOMRAM
   493  00003D                     __pdataCOMRAM:
   494                           	opt stack 0
   495  00003D                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1h	equ	0xFE2
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	bssBANK0
   507  000060                     __pbssBANK0:
   508                           	opt stack 0
   509  000060                     _TMR_TimerArray:
   510                           	opt stack 0
   511  000060                     	ds	32
   512  000080                     _CurrentFrame:
   513                           	opt stack 0
   514  000080                     	ds	4
   515  000084                     _TestColor:
   516                           	opt stack 0
   517  000084                     	ds	4
   518  000088                     ES_Timer_Tick_Resp@NewEvent:
   519                           	opt stack 0
   520  000088                     	ds	3
   521  00008B                     ES_Timer_Tick_Resp@NeedsProcessing:
   522                           	opt stack 0
   523  00008B                     	ds	2
   524  00008D                     Pattern_RGBPatterns@PatternConfigs:
   525                           	opt stack 0
   526  00008D                     	ds	2
   527  00008F                     _FramePointer:
   528                           	opt stack 0
   529  00008F                     	ds	2
   530  000091                     _Ready:
   531                           	opt stack 0
   532  000091                     	ds	2
   533  000093                     _TMR_ActiveFlags:
   534                           	opt stack 0
   535  000093                     	ds	2
   536  000095                     ES_Timer_Tick_Resp@NextTimer2Process:
   537                           	opt stack 0
   538  000095                     	ds	1
   539  000096                     Pattern_RGBPatterns@Length:
   540                           	opt stack 0
   541  000096                     	ds	1
   542  000097                     SPI32_ControlService@CurrentState:
   543                           	opt stack 0
   544  000097                     	ds	1
   545  000098                     SPI32_ControlService@MyPriority:
   546                           	opt stack 0
   547  000098                     	ds	1
   548  000099                     _CurrentState:
   549                           	opt stack 0
   550  000099                     	ds	1
   551  00009A                     _FrameIndex:
   552                           	opt stack 0
   553  00009A                     	ds	1
   554  00009B                     _Length:
   555                           	opt stack 0
   556  00009B                     	ds	1
   557  00009C                     _MyPriority:
   558                           	opt stack 0
   559  00009C                     	ds	1
   560  00009D                     _NumFrames:
   561                           	opt stack 0
   562  00009D                     	ds	1
   563  00009E                     _PatternStepCounter:
   564                           	opt stack 0
   565  00009E                     	ds	1
   566  00009F                     _TickCount:
   567                           	opt stack 0
   568  00009F                     	ds	1
   569  0000A0                     _Queue0:
   570                           	opt stack 0
   571  0000A0                     	ds	12
   572  0000AC                     _Queue1:
   573                           	opt stack 0
   574  0000AC                     	ds	12
   575  0000B8                     ES_Run@ThisEvent:
   576                           	opt stack 0
   577  0000B8                     	ds	3
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1h	equ	0xFE2
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	dataBANK0
   589  0000F2                     __pdataBANK0:
   590                           	opt stack 0
   591  0000F2                     _PatternConfigs:
   592                           	opt stack 0
   593  0000F2                     	ds	5
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	bssBANK1
   605  000100                     __pbssBANK1:
   606                           	opt stack 0
   607  000100                     _OffFrames:
   608                           	opt stack 0
   609  000100                     	ds	128
   610  000180                     _PixelFrames:
   611                           	opt stack 0
   612  000180                     	ds	128
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1h	equ	0xFE2
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	bssBANK2
   624  000200                     __pbssBANK2:
   625                           	opt stack 0
   626  000200                     _PixelPattern:
   627                           	opt stack 0
   628  000200                     	ds	120
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1h	equ	0xFE2
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK2
   640  000278                     __pdataBANK2:
   641                           	opt stack 0
   642  000278                     	ds	52
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postdec1	equ	0xFE5
   650                           fsr1h	equ	0xFE2
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	cstackBANK0
   654  0000BB                     __pcstackBANK0:
   655                           	opt stack 0
   656  0000BB                     ??_DotStar_Init:
   657  0000BB                     ??_ES_Timer_StopTimer:
   658  0000BB                     ?_printf:
   659                           	opt stack 0
   660  0000BB                     ?___awmod:
   661                           	opt stack 0
   662  0000BB                     ?_GetNextFrame:
   663                           	opt stack 0
   664  0000BB                     ?___lmul:
   665                           	opt stack 0
   666  0000BB                     ?___llmod:
   667                           	opt stack 0
   668  0000BB                     ES_CheckUserEvents@i:
   669                           	opt stack 0
   670  0000BB                     SPI32_SendByte@newByte:
   671                           	opt stack 0
   672  0000BB                     ___lbmod@divisor:
   673                           	opt stack 0
   674  0000BB                     ES_GetMSBitSet@Val2Check:
   675                           	opt stack 0
   676  0000BB                     __HW_Timer_Init@Rate:
   677                           	opt stack 0
   678  0000BB                     ES_InitQueue@pBlock:
   679                           	opt stack 0
   680  0000BB                     ES_Timer_InitTimer@NewTime:
   681                           	opt stack 0
   682  0000BB                     SetupPattern@configs:
   683                           	opt stack 0
   684  0000BB                     printf@f:
   685                           	opt stack 0
   686  0000BB                     ___awmod@dividend:
   687                           	opt stack 0
   688  0000BB                     memcpy@d1:
   689                           	opt stack 0
   690  0000BB                     ___lmul@multiplier:
   691                           	opt stack 0
   692  0000BB                     ___llmod@dividend:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x0
   696  0000BB                     	ds	1
   697  0000BC                     ___lbmod@dividend:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x1
   701  0000BC                     	ds	1
   702  0000BD                     ??_ES_GetMSBitSet:
   703  0000BD                     ??_ES_Timer_InitTimer:
   704  0000BD                     ES_InitQueue@BlockSize:
   705                           	opt stack 0
   706  0000BD                     DotStar_Init@numPixels:
   707                           	opt stack 0
   708  0000BD                     SetupPattern@numPixels:
   709                           	opt stack 0
   710  0000BD                     ___lbmod@counter:
   711                           	opt stack 0
   712  0000BD                     ES_Timer_Init@Rate:
   713                           	opt stack 0
   714  0000BD                     printf@ap:
   715                           	opt stack 0
   716  0000BD                     ___awmod@divisor:
   717                           	opt stack 0
   718  0000BD                     memcpy@s1:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x2
   722  0000BD                     	ds	1
   723  0000BE                     DotStar_Init@i:
   724                           	opt stack 0
   725  0000BE                     ___lbmod@rem:
   726                           	opt stack 0
   727  0000BE                     ES_InitQueue@pThisQueue:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x3
   731  0000BE                     	ds	1
   732  0000BF                     ES_Timer_StopTimer@Num:
   733                           	opt stack 0
   734  0000BF                     ES_Timer_InitTimer@Num:
   735                           	opt stack 0
   736  0000BF                     printf@c:
   737                           	opt stack 0
   738  0000BF                     ___awmod@counter:
   739                           	opt stack 0
   740  0000BF                     memcpy@n:
   741                           	opt stack 0
   742  0000BF                     ___lmul@multiplicand:
   743                           	opt stack 0
   744  0000BF                     ___llmod@divisor:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0x4
   748  0000BF                     	ds	1
   749  0000C0                     ___awmod@sign:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x5
   753  0000C0                     	ds	1
   754  0000C1                     ?___wmul:
   755                           	opt stack 0
   756  0000C1                     ___wmul@multiplier:
   757                           	opt stack 0
   758  0000C1                     memcpy@d:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x6
   762  0000C1                     	ds	1
   763  0000C2                     ES_GetMSBitSet@ReturnVal:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x7
   767  0000C2                     	ds	1
   768  0000C3                     ES_GetMSBitSet@Nybble2Test:
   769                           	opt stack 0
   770  0000C3                     ___llmod@counter:
   771                           	opt stack 0
   772  0000C3                     ___wmul@multiplicand:
   773                           	opt stack 0
   774  0000C3                     memcpy@s:
   775                           	opt stack 0
   776  0000C3                     ___lmul@product:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x8
   780  0000C3                     	ds	1
   781  0000C4                     ES_GetMSBitSet@LoopCntr:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x9
   785  0000C4                     	ds	1
   786  0000C5                     ___wmul@product:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xA
   790  0000C5                     	ds	2
   791  0000C7                     ?_UpdatePattern:
   792                           	opt stack 0
   793  0000C7                     ES_EnQueueFIFO@pBlock:
   794                           	opt stack 0
   795  0000C7                     ES_DeQueue@pBlock:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0xC
   799  0000C7                     	ds	2
   800  0000C9                     ??_UpdatePattern:
   801  0000C9                     ES_DeQueue@pReturnEvent:
   802                           	opt stack 0
   803  0000C9                     ES_EnQueueFIFO@Event2Add:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0xE
   807  0000C9                     	ds	2
   808  0000CB                     ??_ES_DeQueue:
   809                           
   810                           ; 1 bytes @ 0x10
   811  0000CB                     	ds	1
   812  0000CC                     ??_ES_EnQueueFIFO:
   813                           
   814                           ; 1 bytes @ 0x11
   815  0000CC                     	ds	1
   816  0000CD                     ES_DeQueue@SaveCrit:
   817                           	opt stack 0
   818  0000CD                     UpdatePattern@brightness:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x12
   822  0000CD                     	ds	1
   823  0000CE                     ES_DeQueue@NumLeft:
   824                           	opt stack 0
   825  0000CE                     UpdatePattern@patternID:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x13
   829  0000CE                     	ds	1
   830  0000CF                     ES_EnQueueFIFO@SaveCrit:
   831                           	opt stack 0
   832  0000CF                     UpdatePattern@i:
   833                           	opt stack 0
   834  0000CF                     ES_DeQueue@pThisQueue:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x14
   838  0000CF                     	ds	1
   839  0000D0                     ES_EnQueueFIFO@pThisQueue:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x15
   843  0000D0                     	ds	2
   844  0000D2                     ES_PostToService@TheEvent:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x17
   848  0000D2                     	ds	3
   849  0000D5                     ??_ES_PostToService:
   850                           
   851                           ; 1 bytes @ 0x1A
   852  0000D5                     	ds	2
   853  0000D7                     ES_PostToService@WhichService:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x1C
   857  0000D7                     	ds	1
   858  0000D8                     InitPatternControlService@ThisEvent:
   859                           	opt stack 0
   860  0000D8                     PostPatternControlService@ThisEvent:
   861                           	opt stack 0
   862  0000D8                     InitSPI32ControlService@ThisEvent:
   863                           	opt stack 0
   864  0000D8                     PostSPI32ControlService@ThisEvent:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x1D
   868  0000D8                     	ds	3
   869  0000DB                     ??_ES_Timer_Tick_Resp:
   870  0000DB                     InitPatternControlService@Priority:
   871                           	opt stack 0
   872  0000DB                     InitSPI32ControlService@Priority:
   873                           	opt stack 0
   874  0000DB                     SPI32_TransmitFrames@framePointer:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x20
   878  0000DB                     	ds	1
   879  0000DC                     ES_Initialize@NewRate:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x21
   883  0000DC                     	ds	1
   884  0000DD                     SPI32_TransmitFrames@numFrames:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x22
   888  0000DD                     	ds	1
   889  0000DE                     ES_Initialize@i:
   890                           	opt stack 0
   891  0000DE                     SPI32_TransmitFrames@transmitEvent:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x23
   895  0000DE                     	ds	1
   896  0000DF                     
   897                           ; 1 bytes @ 0x24
   898  0000DF                     	ds	2
   899  0000E1                     DotStar_Show@pixelPointer:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x26
   903  0000E1                     	ds	2
   904  0000E3                     ?_RunPatternControlService:
   905                           	opt stack 0
   906  0000E3                     ?_RunSPI32ControlService:
   907                           	opt stack 0
   908  0000E3                     RunPatternControlService@ThisEvent:
   909                           	opt stack 0
   910  0000E3                     RunSPI32ControlService@ThisEvent:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x28
   914  0000E3                     	ds	3
   915  0000E6                     ??_RunSPI32ControlService:
   916  0000E6                     RunPatternControlService@ReturnEvent:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x2B
   920  0000E6                     	ds	1
   921  0000E7                     RunSPI32ControlService@ReturnEvent:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x2C
   925  0000E7                     	ds	2
   926  0000E9                     RunPatternControlService@testEvent:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x2E
   930  0000E9                     	ds	3
   931  0000EC                     ??_ES_Run:
   932                           
   933                           ; 1 bytes @ 0x31
   934  0000EC                     	ds	4
   935  0000F0                     ES_Run@HighestPrior:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x35
   939  0000F0                     	ds	1
   940  0000F1                     main@ErrorType:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x36
   944  0000F1                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1h	equ	0xFE2
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	cstackCOMRAM
   956  000001                     __pcstackCOMRAM:
   957                           	opt stack 0
   958  000001                     ?i2___awmod:
   959                           	opt stack 0
   960  000001                     i2___awmod@dividend:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x0
   964  000001                     	ds	2
   965  000003                     i2___awmod@divisor:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x2
   969  000003                     	ds	2
   970  000005                     i2___awmod@counter:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x4
   974  000005                     	ds	1
   975  000006                     i2___awmod@sign:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x5
   979  000006                     	ds	1
   980  000007                     ?i2___wmul:
   981                           	opt stack 0
   982  000007                     i2___wmul@multiplier:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x6
   986  000007                     	ds	2
   987  000009                     i2___wmul@multiplicand:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x8
   991  000009                     	ds	2
   992  00000B                     i2___wmul@product:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0xA
   996  00000B                     	ds	2
   997  00000D                     i2ES_EnQueueFIFO@pBlock:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0xC
  1001  00000D                     	ds	2
  1002  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0xE
  1006  00000F                     	ds	3
  1007  000012                     ??i2_ES_EnQueueFIFO:
  1008                           
  1009                           ; 1 bytes @ 0x11
  1010  000012                     	ds	3
  1011  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x14
  1015  000015                     	ds	1
  1016  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x15
  1020  000016                     	ds	2
  1021  000018                     i2ES_PostToService@TheEvent:
  1022                           	opt stack 0
  1023                           
  1024                           ; 3 bytes @ 0x17
  1025  000018                     	ds	3
  1026  00001B                     ??i2_ES_PostToService:
  1027                           
  1028                           ; 1 bytes @ 0x1A
  1029  00001B                     	ds	2
  1030  00001D                     i2ES_PostToService@WhichService:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x1C
  1034  00001D                     	ds	1
  1035  00001E                     i2PostSPI32ControlService@ThisEvent:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x1D
  1039  00001E                     	ds	3
  1040  000021                     SPI32_EOTResponse@EOTevent:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0x20
  1044  000021                     	ds	3
  1045  000024                     ??_ISR:
  1046                           
  1047                           ; 1 bytes @ 0x23
  1048  000024                     	ds	16
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           postinc0	equ	0xFEE
  1054                           wreg	equ	0xFE8
  1055                           postdec1	equ	0xFE5
  1056                           fsr1h	equ	0xFE2
  1057                           fsr1l	equ	0xFE1
  1058                           
  1059 ;;
  1060 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1061 ;;
  1062 ;; *************** function _main *****************
  1063 ;; Defined at:
  1064 ;;		line 24 in file "main.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  ErrorType       1   54[BANK0 ] enum E15647
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  2  521[None  ] int 
  1071 ;; Registers used:
  1072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1078 ;;      Params:         0       0       0       0
  1079 ;;      Locals:         0       1       0       0
  1080 ;;      Temps:          0       0       0       0
  1081 ;;      Totals:         0       1       0       0
  1082 ;;Total ram usage:        1 bytes
  1083 ;; Hardware stack levels required when called:   15
  1084 ;; This function calls:
  1085 ;;		_ES_Initialize
  1086 ;;		_ES_Run
  1087 ;;		_printf
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text0
  1094  00106C                     __ptext0:
  1095                           	opt stack 0
  1096  00106C                     _main:
  1097                           	opt stack 16
  1098                           
  1099                           ;main.c: 27: IRCF0 = 1;
  1100                           
  1101                           ;incstack = 0
  1102  00106C  88D3               	bsf	4051,4,c	;volatile
  1103                           
  1104                           ;main.c: 28: IRCF1 = 1;
  1105  00106E  8AD3               	bsf	4051,5,c	;volatile
  1106                           
  1107                           ;main.c: 29: IRCF2 = 1;
  1108  001070  8CD3               	bsf	4051,6,c	;volatile
  1109                           
  1110                           ;main.c: 37: ES_Return_t ErrorType;
  1111                           ;main.c: 53: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1112  001072  0E9C               	movlw	156
  1113  001074  0100               	movlb	0	; () banked
  1114  001076  6FDD               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1115  001078  0E3F               	movlw	63
  1116  00107A  6FDC               	movwf	ES_Initialize@NewRate& (0+255),b
  1117  00107C  EC9C  F004         	call	_ES_Initialize	;wreg free
  1118  001080  0100               	movlb	0	; () banked
  1119  001082  6FF1               	movwf	main@ErrorType& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 54: if ( ErrorType == Success ) {
  1123  001084  0100               	movlb	0	; () banked
  1124  001086  51F1               	movf	main@ErrorType& (0+255),w,b
  1125  001088  0100               	movlb	0	; () banked
  1126  00108A  A4D8               	btfss	status,2,c
  1127  00108C  D029               	goto	l2820
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 56: ErrorType = ES_Run();
  1131  00108E  EC22  F004         	call	_ES_Run	;wreg free
  1132  001092  0100               	movlb	0	; () banked
  1133  001094  6FF1               	movwf	main@ErrorType& (0+255),b
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 58: }
  1137                           ;main.c: 60: switch (ErrorType){
  1138  001096  D024               	goto	l2820
  1139  001098                     l2810:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 62: printf("Failed on attempt to Post\n");
  1143  001098  0E64               	movlw	low STR_1
  1144  00109A  0100               	movlb	0	; () banked
  1145  00109C  6FBB               	movwf	printf@f& (0+255),b
  1146  00109E  0E03               	movlw	high STR_1
  1147  0010A0  0100               	movlb	0	; () banked
  1148  0010A2  6FBC               	movwf	(printf@f+1)& (0+255),b
  1149  0010A4  ECED  F00A         	call	_printf	;wreg free
  1150                           
  1151                           ;main.c: 63: break;
  1152  0010A8  D027               	goto	l529
  1153  0010AA                     l2812:
  1154                           
  1155                           ;main.c: 65: printf("Failed on NULL pointer\n");
  1156  0010AA  0E7F               	movlw	low STR_2
  1157  0010AC  0100               	movlb	0	; () banked
  1158  0010AE  6FBB               	movwf	printf@f& (0+255),b
  1159  0010B0  0E03               	movlw	high STR_2
  1160  0010B2  0100               	movlb	0	; () banked
  1161  0010B4  6FBC               	movwf	(printf@f+1)& (0+255),b
  1162  0010B6  ECED  F00A         	call	_printf	;wreg free
  1163                           
  1164                           ;main.c: 66: break;
  1165  0010BA  D01E               	goto	l529
  1166  0010BC                     l2814:
  1167                           
  1168                           ;main.c: 68: printf("Failed Initialization\n");
  1169  0010BC  0E97               	movlw	low STR_3
  1170  0010BE  0100               	movlb	0	; () banked
  1171  0010C0  6FBB               	movwf	printf@f& (0+255),b
  1172  0010C2  0E03               	movlw	high STR_3
  1173  0010C4  0100               	movlb	0	; () banked
  1174  0010C6  6FBC               	movwf	(printf@f+1)& (0+255),b
  1175  0010C8  ECED  F00A         	call	_printf	;wreg free
  1176                           
  1177                           ;main.c: 69: break;
  1178  0010CC  D015               	goto	l529
  1179  0010CE                     l2816:
  1180                           
  1181                           ;main.c: 71: printf("Other Failure\n");
  1182  0010CE  0EAE               	movlw	low STR_4
  1183  0010D0  0100               	movlb	0	; () banked
  1184  0010D2  6FBB               	movwf	printf@f& (0+255),b
  1185  0010D4  0E03               	movlw	high STR_4
  1186  0010D6  0100               	movlb	0	; () banked
  1187  0010D8  6FBC               	movwf	(printf@f+1)& (0+255),b
  1188  0010DA  ECED  F00A         	call	_printf	;wreg free
  1189                           
  1190                           ;main.c: 73: }
  1191                           
  1192                           ;main.c: 72: break;
  1193  0010DE  D00C               	goto	l529
  1194  0010E0                     l2820:
  1195  0010E0  0100               	movlb	0	; () banked
  1196  0010E2  51F1               	movf	main@ErrorType& (0+255),w,b
  1197                           
  1198                           ; Switch size 1, requested type "space"
  1199                           ; Number of cases is 3, Range of values is 1 to 5
  1200                           ; switch strategies available:
  1201                           ; Name         Instructions Cycles
  1202                           ; simple_byte           10     6 (average)
  1203                           ;	Chosen strategy is simple_byte
  1204  0010E4  0A01               	xorlw	1	; case 1
  1205  0010E6  B4D8               	btfsc	status,2,c
  1206  0010E8  D7D7               	goto	l2810
  1207  0010EA  0A02               	xorlw	2	; case 3
  1208  0010EC  B4D8               	btfsc	status,2,c
  1209  0010EE  D7DD               	goto	l2812
  1210  0010F0  0A06               	xorlw	6	; case 5
  1211  0010F2  B4D8               	btfsc	status,2,c
  1212  0010F4  D7E3               	goto	l2814
  1213  0010F6  D7EB               	goto	l2816
  1214  0010F8                     l529:
  1215                           
  1216                           ;main.c: 75: ;
  1217  0010F8  D7FF               	goto	l529
  1218  0010FA                     __end_of_main:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1h	equ	0xFE2
  1228                           fsr1l	equ	0xFE1
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _printf *****************
  1232 ;; Defined at:
  1233 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1236 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  tmpval          4    0        struct .
  1239 ;;  cp              3    0        PTR const unsigned char 
  1240 ;;  ap              2    2[BANK0 ] PTR void [1]
  1241 ;;		 -> ?_printf(2), 
  1242 ;;  len             2    0        unsigned int 
  1243 ;;  val             2    0        unsigned int 
  1244 ;;  c               1    4[BANK0 ] char 
  1245 ;;  flag            1    0        unsigned char 
  1246 ;;  prec            1    0        char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    0[BANK0 ] int 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1256 ;;      Params:         0       2       0       0
  1257 ;;      Locals:         0       3       0       0
  1258 ;;      Temps:          0       0       0       0
  1259 ;;      Totals:         0       5       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    7
  1263 ;; This function calls:
  1264 ;;		_putch
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text1
  1271  0015DA                     __ptext1:
  1272                           	opt stack 0
  1273  0015DA                     _printf:
  1274                           	opt stack 23
  1275                           
  1276                           ;doprnt.c: 466: va_list ap;
  1277                           ;doprnt.c: 499: signed char c;
  1278                           ;doprnt.c: 506: signed char prec;
  1279                           ;doprnt.c: 508: unsigned char flag;
  1280                           ;doprnt.c: 523: union {
  1281                           ;doprnt.c: 524: unsigned long vd;
  1282                           ;doprnt.c: 525: double integ;
  1283                           ;doprnt.c: 526: } tmpval;
  1284                           ;doprnt.c: 528: unsigned int val;
  1285                           ;doprnt.c: 529: unsigned len;
  1286                           ;doprnt.c: 530: const char * cp;
  1287                           ;doprnt.c: 533: *ap = __va_start();
  1288                           
  1289                           ;incstack = 0
  1290  0015DA  0EBD               	movlw	low (?_printf+2)
  1291  0015DC  0100               	movlb	0	; () banked
  1292  0015DE  6FBD               	movwf	printf@ap& (0+255),b
  1293  0015E0  0E00               	movlw	high (?_printf+2)
  1294  0015E2  0100               	movlb	0	; () banked
  1295  0015E4  6FBE               	movwf	(printf@ap+1)& (0+255),b
  1296                           
  1297                           ;doprnt.c: 536: while(c = *f++) {
  1298  0015E6  D004               	goto	l2656
  1299  0015E8                     l2654:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;doprnt.c: 540: {
  1303                           ;doprnt.c: 541: (putch(c) );
  1304  0015E8  0100               	movlb	0	; () banked
  1305  0015EA  51BF               	movf	printf@c& (0+255),w,b
  1306  0015EC  ECF0  F00B         	call	_putch
  1307  0015F0                     l2656:
  1308  0015F0  C0BB  FFF6         	movff	printf@f,tblptrl
  1309  0015F4  C0BC  FFF7         	movff	printf@f+1,tblptrh
  1310  0015F8  0100               	movlb	0	; () banked
  1311  0015FA  4BBB               	infsnz	printf@f& (0+255),f,b
  1312  0015FC  2BBC               	incf	(printf@f+1)& (0+255),f,b
  1313  0015FE                     	if	0	;tblptru may be non-zero
  1314  0015FE                     	endif
  1315  0015FE                     	if	0	;tblptru may be non-zero
  1316  0015FE                     	endif
  1317  0015FE  0008               	tblrd		*
  1318  001600  CFF5 F0BF          	movff	tablat,printf@c
  1319  001604  0100               	movlb	0	; () banked
  1320  001606  51BF               	movf	printf@c& (0+255),w,b
  1321  001608  B4D8               	btfsc	status,2,c
  1322  00160A  0012               	return	
  1323  00160C  D7ED               	goto	l2654
  1324  00160E                     __end_of_printf:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _putch *****************
  1338 ;; Defined at:
  1339 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  c               1    wreg     unsigned char 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  c               1    0[COMRAM] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1353 ;;      Params:         0       0       0       0
  1354 ;;      Locals:         0       0       0       0
  1355 ;;      Temps:          0       0       0       0
  1356 ;;      Totals:         0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    6
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_printf
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text2
  1368  0017E0                     __ptext2:
  1369                           	opt stack 0
  1370  0017E0                     _putch:
  1371                           	opt stack 23
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;incstack = 0
  1375  0017E0  0012               	return		;funcret
  1376  0017E2                     __end_of_putch:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postdec1	equ	0xFE5
  1385                           fsr1h	equ	0xFE2
  1386                           fsr1l	equ	0xFE1
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _ES_Run *****************
  1390 ;; Defined at:
  1391 ;;		line 277 in file "ES_Framework.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  HighestPrior    1   53[BANK0 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      enum E15495
  1398 ;; Registers used:
  1399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       0       0       0
  1406 ;;      Locals:         0       1       0       0
  1407 ;;      Temps:          0       4       0       0
  1408 ;;      Totals:         0       5       0       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:   14
  1412 ;; This function calls:
  1413 ;;		_ES_CheckUserEvents
  1414 ;;		_ES_DeQueue
  1415 ;;		_ES_GetMSBitSet
  1416 ;;		_RunPatternControlService
  1417 ;;		_RunSPI32ControlService
  1418 ;;		__HW_Process_Pending_Ints
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text3
  1425  000844                     __ptext3:
  1426                           	opt stack 0
  1427  000844                     _ES_Run:
  1428                           	opt stack 16
  1429                           
  1430                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1431                           
  1432                           ;incstack = 0
  1433                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1434                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1435                           ;ES_Framework.c: 282: while(1){
  1436  000844  D06B               	goto	l2638
  1437  000846                     l2626:
  1438                           
  1439                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1440  000846  C091  F0BB         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1441  00084A  C092  F0BC         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1442  00084E  ECFA  F006         	call	_ES_GetMSBitSet	;wreg free
  1443  000852  0100               	movlb	0	; () banked
  1444  000854  6FF0               	movwf	ES_Run@HighestPrior& (0+255),b
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1448  000856  0100               	movlb	0	; () banked
  1449  000858  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1450  00085A  0D03               	mullw	3
  1451  00085C  0E58               	movlw	low _EventQueues
  1452  00085E  24F3               	addwf	prodl,w,c
  1453  000860  6EF6               	movwf	tblptrl,c
  1454  000862  0E03               	movlw	high _EventQueues
  1455  000864  20F4               	addwfc	prodh,w,c
  1456  000866  6EF7               	movwf	tblptrh,c
  1457  000868                     	if	0	;There are less than 3 active tblptr bytes
  1458  000868                     	endif
  1459  000868  0009               	tblrd		*+
  1460  00086A  CFF5 F0C7          	movff	tablat,ES_DeQueue@pBlock
  1461  00086E  000A               	tblrd		*-
  1462  000870  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock+1
  1463  000874  0EB8               	movlw	low ES_Run@ThisEvent
  1464  000876  0100               	movlb	0	; () banked
  1465  000878  6FC9               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1466  00087A  0E00               	movlw	high ES_Run@ThisEvent
  1467  00087C  0100               	movlb	0	; () banked
  1468  00087E  6FCA               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1469  000880  EC85  F002         	call	_ES_DeQueue	;wreg free
  1470  000884  0900               	iorlw	0
  1471  000886  A4D8               	btfss	status,2,c
  1472  000888  D01F               	goto	l2632
  1473                           
  1474                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1475  00088A  0100               	movlb	0	; () banked
  1476  00088C  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1477  00088E  0D02               	mullw	2
  1478  000890  0E01               	movlw	low _BitNum2SetMask
  1479  000892  24F3               	addwf	prodl,w,c
  1480  000894  6EF6               	movwf	tblptrl,c
  1481  000896  0E03               	movlw	high _BitNum2SetMask
  1482  000898  20F4               	addwfc	prodh,w,c
  1483  00089A  6EF7               	movwf	tblptrh,c
  1484  00089C                     	if	0	;There are less than 3 active tblptr bytes
  1485  00089C                     	endif
  1486  00089C  0009               	tblrd		*+
  1487  00089E  CFF5 F0EC          	movff	tablat,??_ES_Run
  1488  0008A2  0009               	tblrd		*+
  1489  0008A4  CFF5 F0ED          	movff	tablat,??_ES_Run+1
  1490  0008A8  0100               	movlb	0	; () banked
  1491  0008AA  1DEC               	comf	??_ES_Run& (0+255),w,b
  1492  0008AC  0100               	movlb	0	; () banked
  1493  0008AE  6FEE               	movwf	(??_ES_Run+2)& (0+255),b
  1494  0008B0  0100               	movlb	0	; () banked
  1495  0008B2  1DED               	comf	(??_ES_Run+1)& (0+255),w,b
  1496  0008B4  0100               	movlb	0	; () banked
  1497  0008B6  6FEF               	movwf	(??_ES_Run+3)& (0+255),b
  1498  0008B8  0100               	movlb	0	; () banked
  1499  0008BA  51EE               	movf	(??_ES_Run+2)& (0+255),w,b
  1500  0008BC  0100               	movlb	0	; () banked
  1501  0008BE  1791               	andwf	_Ready& (0+255),f,b
  1502  0008C0  0100               	movlb	0	; () banked
  1503  0008C2  51EF               	movf	(??_ES_Run+3)& (0+255),w,b
  1504  0008C4  0100               	movlb	0	; () banked
  1505  0008C6  1792               	andwf	(_Ready+1)& (0+255),f,b
  1506  0008C8                     l2632:
  1507                           
  1508                           ;ES_Framework.c: 291: }
  1509                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1510  0008C8  C0B8  F0E3         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1511  0008CC  C0B9  F0E4         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1512  0008D0  C0BA  F0E5         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1513  0008D4  0100               	movlb	0	; () banked
  1514  0008D6  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1515  0008D8  0D04               	mullw	4
  1516  0008DA  0E02               	movlw	2
  1517  0008DC  26F3               	addwf	prodl,f,c
  1518  0008DE  0E00               	movlw	0
  1519  0008E0  22F4               	addwfc	prodh,f,c
  1520  0008E2  0E50               	movlw	low _ServDescList
  1521  0008E4  24F3               	addwf	prodl,w,c
  1522  0008E6  6EF6               	movwf	tblptrl,c
  1523  0008E8  0E03               	movlw	high _ServDescList
  1524  0008EA  20F4               	addwfc	prodh,w,c
  1525  0008EC  6EF7               	movwf	tblptrh,c
  1526  0008EE                     	if	0	;There are less than 3 active tblptr bytes
  1527  0008EE                     	endif
  1528  0008EE  D801               	call	u1738
  1529  0008F0  D00C               	goto	u1739
  1530  0008F2                     u1738:
  1531  0008F2  0005               	push	
  1532  0008F4  6EFA               	movwf	pclath,c
  1533  0008F6  0009               	tblrd		*+
  1534  0008F8  50F5               	movf	tablat,w,c
  1535  0008FA  6EFD               	movwf	tosl,c
  1536  0008FC  0009               	tblrd		*+
  1537  0008FE  50F5               	movf	tablat,w,c
  1538  000900  6EFE               	movwf	tosh,c
  1539  000902  50F8               	movf	tblptru,w,c
  1540  000904  6EFF               	movwf	tosu,c
  1541  000906  50FA               	movf	pclath,w,c
  1542  000908  0012               	return		;indir
  1543  00090A                     u1739:
  1544  00090A  0EE3               	movlw	low ?_RunSPI32ControlService
  1545  00090C  6ED9               	movwf	fsr2l,c
  1546  00090E  0E00               	movlw	high ?_RunSPI32ControlService
  1547  000910  6EDA               	movwf	fsr2h,c
  1548  000912  50DF               	movf	indf2,w,c
  1549  000914  B4D8               	btfsc	status,2,c
  1550  000916  D002               	goto	l2638
  1551                           
  1552                           ;ES_Framework.c: 293: return FailedRun;
  1553  000918  0E02               	movlw	2
  1554  00091A  0012               	return	
  1555  00091C                     l2638:
  1556  00091C  ECA1  F00B         	call	__HW_Process_Pending_Ints	;wreg free
  1557  000920  0900               	iorlw	0
  1558  000922  B4D8               	btfsc	status,2,c
  1559  000924  D006               	goto	l2642
  1560  000926  0100               	movlb	0	; () banked
  1561  000928  5191               	movf	_Ready& (0+255),w,b
  1562  00092A  0100               	movlb	0	; () banked
  1563  00092C  1192               	iorwf	(_Ready+1)& (0+255),w,b
  1564  00092E  A4D8               	btfss	status,2,c
  1565  000930  D78A               	goto	l2626
  1566  000932                     l2642:
  1567                           
  1568                           ;ES_Framework.c: 294: }
  1569                           ;ES_Framework.c: 295: }
  1570                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1571  000932  EC15  F00A         	call	_ES_CheckUserEvents	;wreg free
  1572  000936  D7F2               	goto	l2638
  1573  000938                     __end_of_ES_Run:
  1574                           	opt stack 0
  1575                           tosu	equ	0xFFF
  1576                           tosh	equ	0xFFE
  1577                           tosl	equ	0xFFD
  1578                           pclath	equ	0xFFA
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1h	equ	0xFE2
  1589                           fsr1l	equ	0xFE1
  1590                           indf2	equ	0xFDF
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function __HW_Process_Pending_Ints *****************
  1596 ;; Defined at:
  1597 ;;		line 207 in file "ES_Port.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      unsigned char 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1611 ;;      Params:         0       0       0       0
  1612 ;;      Locals:         0       0       0       0
  1613 ;;      Temps:          0       0       0       0
  1614 ;;      Totals:         0       0       0       0
  1615 ;;Total ram usage:        0 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:   11
  1618 ;; This function calls:
  1619 ;;		_ES_Timer_Tick_Resp
  1620 ;; This function is called by:
  1621 ;;		_ES_Run
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text4
  1626  001742                     __ptext4:
  1627                           	opt stack 0
  1628  001742                     __HW_Process_Pending_Ints:
  1629                           	opt stack 18
  1630                           
  1631                           ;ES_Port.c: 209: while (TickCount > 0)
  1632                           
  1633                           ;incstack = 0
  1634  001742  D004               	goto	l2448
  1635  001744                     l2444:
  1636                           
  1637                           ;ES_Port.c: 210: {
  1638                           ;ES_Port.c: 212: ES_Timer_Tick_Resp();
  1639  001744  EC19  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1640                           
  1641                           ;ES_Port.c: 213: TickCount--;
  1642  001748  0100               	movlb	0	; () banked
  1643  00174A  079F               	decf	_TickCount& (0+255),f,b	;volatile
  1644  00174C                     l2448:
  1645  00174C  0100               	movlb	0	; () banked
  1646  00174E  519F               	movf	_TickCount& (0+255),w,b	;volatile
  1647  001750  A4D8               	btfss	status,2,c
  1648  001752  D7F8               	goto	l2444
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;ES_Port.c: 214: }
  1652                           ;ES_Port.c: 216: return 1;
  1653                           
  1654                           ; BSR set to: 0
  1655  001754  0E01               	movlw	1
  1656  001756  0012               	return	
  1657  001758                     __end_of__HW_Process_Pending_Ints:
  1658                           	opt stack 0
  1659                           tosu	equ	0xFFF
  1660                           tosh	equ	0xFFE
  1661                           tosl	equ	0xFFD
  1662                           pclath	equ	0xFFA
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           postdec1	equ	0xFE5
  1672                           fsr1h	equ	0xFE2
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _ES_Timer_Tick_Resp *****************
  1680 ;; Defined at:
  1681 ;;		line 284 in file "ES_Timers.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1695 ;;      Params:         0       0       0       0
  1696 ;;      Locals:         0       0       0       0
  1697 ;;      Temps:          0       4       0       0
  1698 ;;      Totals:         0       4       0       0
  1699 ;;Total ram usage:        4 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:   10
  1702 ;; This function calls:
  1703 ;;		Absolute function
  1704 ;;		_ES_GetMSBitSet
  1705 ;;		_PostPatternControlService
  1706 ;;		_PostSPI32ControlService
  1707 ;; This function is called by:
  1708 ;;		__HW_Process_Pending_Ints
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text5
  1713  000632                     __ptext5:
  1714                           	opt stack 0
  1715  000632                     _ES_Timer_Tick_Resp:
  1716                           	opt stack 18
  1717                           
  1718                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1719                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1720                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1721                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;incstack = 0
  1725  000632  0100               	movlb	0	; () banked
  1726  000634  5193               	movf	_TMR_ActiveFlags& (0+255),w,b
  1727  000636  0100               	movlb	0	; () banked
  1728  000638  1194               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1729  00063A  B4D8               	btfsc	status,2,c
  1730  00063C  0012               	return	
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;ES_Timers.c: 291: {
  1734                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1735  00063E  C093  F08B         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1736  000642  C094  F08C         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1737  000646                     l2302:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1741  000646  C08B  F0BB         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1742  00064A  C08C  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1743  00064E  ECFA  F006         	call	_ES_GetMSBitSet	;wreg free
  1744  000652  0100               	movlb	0	; () banked
  1745  000654  6F95               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1749  000656  0100               	movlb	0	; () banked
  1750  000658  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1751  00065A  0D02               	mullw	2
  1752  00065C  0E60               	movlw	low _TMR_TimerArray
  1753  00065E  24F3               	addwf	prodl,w,c
  1754  000660  6ED9               	movwf	fsr2l,c
  1755  000662  0E00               	movlw	high _TMR_TimerArray
  1756  000664  20F4               	addwfc	prodh,w,c
  1757  000666  6EDA               	movwf	fsr2h,c
  1758  000668  06DE               	decf	postinc2,f,c
  1759  00066A  0E00               	movlw	0
  1760  00066C  5ADD               	subwfb	postdec2,f,c
  1761  00066E  50DE               	movf	postinc2,w,c
  1762  000670  10DE               	iorwf	postinc2,w,c
  1763  000672  A4D8               	btfss	status,2,c
  1764  000674  D043               	goto	l2314
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;ES_Timers.c: 299: {
  1768                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1769  000676  0E03               	movlw	3
  1770  000678  0100               	movlb	0	; () banked
  1771  00067A  6F88               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1775  00067C  C095  F089         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1776  000680  0100               	movlb	0	; () banked
  1777  000682  6B8A               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1781  000684  C088  F0D8         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1782  000688  C089  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1783  00068C  C08A  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1784  000690  0100               	movlb	0	; () banked
  1785  000692  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1786  000694  0D02               	mullw	2
  1787  000696  0E21               	movlw	low _Timer2PostFunc
  1788  000698  24F3               	addwf	prodl,w,c
  1789  00069A  6EF6               	movwf	tblptrl,c
  1790  00069C  0E03               	movlw	high _Timer2PostFunc
  1791  00069E  20F4               	addwfc	prodh,w,c
  1792  0006A0  6EF7               	movwf	tblptrh,c
  1793  0006A2                     	if	0	;There are less than 3 active tblptr bytes
  1794  0006A2                     	endif
  1795  0006A2  D801               	call	u1388
  1796  0006A4  D00C               	goto	l2312
  1797  0006A6                     u1388:
  1798  0006A6  0005               	push	
  1799  0006A8  6EFA               	movwf	pclath,c
  1800  0006AA  0009               	tblrd		*+
  1801  0006AC  50F5               	movf	tablat,w,c
  1802  0006AE  6EFD               	movwf	tosl,c
  1803  0006B0  0009               	tblrd		*+
  1804  0006B2  50F5               	movf	tablat,w,c
  1805  0006B4  6EFE               	movwf	tosh,c
  1806  0006B6  50F8               	movf	tblptru,w,c
  1807  0006B8  6EFF               	movwf	tosu,c
  1808  0006BA  50FA               	movf	pclath,w,c
  1809  0006BC  0012               	return		;indir
  1810  0006BE                     l2312:
  1811                           
  1812                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1813  0006BE  0100               	movlb	0	; () banked
  1814  0006C0  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1815  0006C2  0D02               	mullw	2
  1816  0006C4  0E01               	movlw	low _BitNum2SetMask
  1817  0006C6  24F3               	addwf	prodl,w,c
  1818  0006C8  6EF6               	movwf	tblptrl,c
  1819  0006CA  0E03               	movlw	high _BitNum2SetMask
  1820  0006CC  20F4               	addwfc	prodh,w,c
  1821  0006CE  6EF7               	movwf	tblptrh,c
  1822  0006D0                     	if	0	;There are less than 3 active tblptr bytes
  1823  0006D0                     	endif
  1824  0006D0  0009               	tblrd		*+
  1825  0006D2  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1826  0006D6  0009               	tblrd		*+
  1827  0006D8  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1828  0006DC  0100               	movlb	0	; () banked
  1829  0006DE  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1830  0006E0  0100               	movlb	0	; () banked
  1831  0006E2  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1832  0006E4  0100               	movlb	0	; () banked
  1833  0006E6  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1834  0006E8  0100               	movlb	0	; () banked
  1835  0006EA  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1836  0006EC  0100               	movlb	0	; () banked
  1837  0006EE  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1838  0006F0  0100               	movlb	0	; () banked
  1839  0006F2  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1840  0006F4  0100               	movlb	0	; () banked
  1841  0006F6  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1842  0006F8  0100               	movlb	0	; () banked
  1843  0006FA  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1844  0006FC                     l2314:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;ES_Timers.c: 306: }
  1848                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1849  0006FC  0100               	movlb	0	; () banked
  1850  0006FE  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1851  000700  0D02               	mullw	2
  1852  000702  0E01               	movlw	low _BitNum2SetMask
  1853  000704  24F3               	addwf	prodl,w,c
  1854  000706  6EF6               	movwf	tblptrl,c
  1855  000708  0E03               	movlw	high _BitNum2SetMask
  1856  00070A  20F4               	addwfc	prodh,w,c
  1857  00070C  6EF7               	movwf	tblptrh,c
  1858  00070E                     	if	0	;There are less than 3 active tblptr bytes
  1859  00070E                     	endif
  1860  00070E  0009               	tblrd		*+
  1861  000710  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1862  000714  0009               	tblrd		*+
  1863  000716  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1864  00071A  0100               	movlb	0	; () banked
  1865  00071C  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1866  00071E  0100               	movlb	0	; () banked
  1867  000720  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1868  000722  0100               	movlb	0	; () banked
  1869  000724  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1870  000726  0100               	movlb	0	; () banked
  1871  000728  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1872  00072A  0100               	movlb	0	; () banked
  1873  00072C  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1874  00072E  0100               	movlb	0	; () banked
  1875  000730  178B               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1876  000732  0100               	movlb	0	; () banked
  1877  000734  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1878  000736  0100               	movlb	0	; () banked
  1879  000738  178C               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1883  00073A  0100               	movlb	0	; () banked
  1884  00073C  518B               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1885  00073E  0100               	movlb	0	; () banked
  1886  000740  118C               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1887  000742  B4D8               	btfsc	status,2,c
  1888  000744  0012               	return	
  1889  000746  D77F               	goto	l2302
  1890  000748                     __end_of_ES_Timer_Tick_Resp:
  1891                           	opt stack 0
  1892                           tosu	equ	0xFFF
  1893                           tosh	equ	0xFFE
  1894                           tosl	equ	0xFFD
  1895                           pclath	equ	0xFFA
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1h	equ	0xFE2
  1906                           fsr1l	equ	0xFE1
  1907                           indf2	equ	0xFDF
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _ES_GetMSBitSet *****************
  1915 ;; Defined at:
  1916 ;;		line 79 in file "ES_LookupTables.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  LoopCntr        1    9[BANK0 ] char 
  1921 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1922 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      unsigned char 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1932 ;;      Params:         0       2       0       0
  1933 ;;      Locals:         0       3       0       0
  1934 ;;      Temps:          0       5       0       0
  1935 ;;      Totals:         0      10       0       0
  1936 ;;Total ram usage:       10 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    6
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_ES_Run
  1943 ;;		_ES_Timer_Tick_Resp
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text6
  1948  000DF4                     __ptext6:
  1949                           	opt stack 0
  1950  000DF4                     _ES_GetMSBitSet:
  1951                           	opt stack 21
  1952                           
  1953                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1954                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1955                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;incstack = 0
  1959  000DF4  0E80               	movlw	128
  1960  000DF6  0100               	movlb	0	; () banked
  1961  000DF8  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1962                           
  1963                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1964  000DFA  0E03               	movlw	3
  1965  000DFC  0100               	movlb	0	; () banked
  1966  000DFE  6FC4               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1967  000E00                     l2194:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1971  000E00  0100               	movlb	0	; () banked
  1972  000E02  BFC4               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1973  000E04  D046               	goto	l2208
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1977                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1978                           ;ES_LookupTables.c: 91: 0x0F);
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  000E06  0100               	movlb	0	; () banked
  1984  000E08  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1985  000E0A  0D04               	mullw	4
  1986  000E0C  CFF3 F0BD          	movff	prodl,??_ES_GetMSBitSet
  1987  000E10  C0BB  F0BE         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1988  000E14  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1989  000E18  0100               	movlb	0	; () banked
  1990  000E1A  2BBD               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1991  000E1C  D004               	goto	u1244
  1992  000E1E                     u1245:
  1993  000E1E  0100               	movlb	0	; () banked
  1994  000E20  90D8               	bcf	status,0,c
  1995  000E22  33BF               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1996  000E24  33BE               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1997  000E26                     u1244:
  1998  000E26  0100               	movlb	0	; () banked
  1999  000E28  2FBD               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2000  000E2A  D7F9               	goto	u1245
  2001  000E2C  0100               	movlb	0	; () banked
  2002  000E2E  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2003  000E30  0B0F               	andlw	15
  2004  000E32  0100               	movlb	0	; () banked
  2005  000E34  6FC3               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2009  000E36  0100               	movlb	0	; () banked
  2010  000E38  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2011  000E3A  0100               	movlb	0	; () banked
  2012  000E3C  B4D8               	btfsc	status,2,c
  2013  000E3E  D026               	goto	l2204
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2017                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2018  000E40  0EFF               	movlw	255
  2019  000E42  0100               	movlb	0	; () banked
  2020  000E44  6FBD               	movwf	??_ES_GetMSBitSet& (0+255),b
  2021  000E46  0EFF               	movlw	255
  2022  000E48  0100               	movlb	0	; () banked
  2023  000E4A  6FBE               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2024  000E4C  0100               	movlb	0	; () banked
  2025  000E4E  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2026  000E50  0100               	movlb	0	; () banked
  2027  000E52  6FBF               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2028  000E54  6BC0               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2029  000E56  0100               	movlb	0	; () banked
  2030  000E58  51BD               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2031  000E5A  0100               	movlb	0	; () banked
  2032  000E5C  27BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2033  000E5E  0100               	movlb	0	; () banked
  2034  000E60  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2035  000E62  0100               	movlb	0	; () banked
  2036  000E64  23C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2037  000E66  0E41               	movlw	low _Nybble2MSBitNum
  2038  000E68  0100               	movlb	0	; () banked
  2039  000E6A  25BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2040  000E6C  6EF6               	movwf	tblptrl,c
  2041  000E6E  0E03               	movlw	high _Nybble2MSBitNum
  2042  000E70  21C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2043  000E72  6EF7               	movwf	tblptrh,c
  2044  000E74                     	if	0	;There are less than 3 active tblptr bytes
  2045  000E74                     	endif
  2046  000E74  0008               	tblrd		*
  2047  000E76  CFF5 F0C1          	movff	tablat,??_ES_GetMSBitSet+4
  2048  000E7A  0100               	movlb	0	; () banked
  2049  000E7C  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2050  000E7E  0D04               	mullw	4
  2051  000E80  50F3               	movf	prodl,w,c
  2052  000E82  0100               	movlb	0	; () banked
  2053  000E84  25C1               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2054  000E86  0100               	movlb	0	; () banked
  2055  000E88  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2056                           
  2057                           ;ES_LookupTables.c: 96: break;
  2058  000E8A  D003               	goto	l2208
  2059  000E8C                     l2204:
  2060                           
  2061                           ; BSR set to: 0
  2062  000E8C  0100               	movlb	0	; () banked
  2063  000E8E  07C4               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2064  000E90  D7B7               	goto	l2194
  2065  000E92                     l2208:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;ES_LookupTables.c: 97: }
  2069                           ;ES_LookupTables.c: 98: }
  2070                           ;ES_LookupTables.c: 99: return ReturnVal;
  2071  000E92  0100               	movlb	0	; () banked
  2072  000E94  51C2               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2073  000E96  0012               	return	
  2074  000E98                     __end_of_ES_GetMSBitSet:
  2075                           	opt stack 0
  2076                           tosu	equ	0xFFF
  2077                           tosh	equ	0xFFE
  2078                           tosl	equ	0xFFD
  2079                           pclath	equ	0xFFA
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postdec1	equ	0xFE5
  2089                           fsr1h	equ	0xFE2
  2090                           fsr1l	equ	0xFE1
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _RunPatternControlService *****************
  2099 ;; Defined at:
  2100 ;;		line 157 in file "Pattern_ControlService.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  testEvent       3   46[BANK0 ] struct ES_Event_t
  2105 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  3   40[BANK0 ] struct ES_Event_t
  2108 ;; Registers used:
  2109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       3       0       0
  2116 ;;      Locals:         0       6       0       0
  2117 ;;      Temps:          0       0       0       0
  2118 ;;      Totals:         0       9       0       0
  2119 ;;Total ram usage:        9 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:   13
  2122 ;; This function calls:
  2123 ;;		_PausePattern
  2124 ;;		_PostPatternControlService
  2125 ;;		_ShowPattern
  2126 ;;		_StopPattern
  2127 ;; This function is called by:
  2128 ;;		_ES_Run
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text7
  2133  000BD6                     __ptext7:
  2134                           	opt stack 0
  2135  000BD6                     _RunPatternControlService:
  2136                           	opt stack 16
  2137                           
  2138                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2139                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;incstack = 0
  2143  000BD6  0E00               	movlw	0
  2144  000BD8  0100               	movlb	0	; () banked
  2145  000BDA  6FE6               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2146                           
  2147                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2148  000BDC  D049               	goto	l2520
  2149  000BDE                     l2478:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2153  000BDE  0E02               	movlw	2
  2154  000BE0  0100               	movlb	0	; () banked
  2155  000BE2  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2156  000BE4  A4D8               	btfss	status,2,c
  2157  000BE6  D052               	goto	l324
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;Pattern_ControlService.c: 169: CurrentState = Pattern_Off;
  2161  000BE8  0E01               	movlw	1
  2162  000BEA  0100               	movlb	0	; () banked
  2163  000BEC  6F99               	movwf	_CurrentState& (0+255),b
  2164                           
  2165                           ;Pattern_ControlService.c: 172: ES_Event testEvent;
  2166                           ;Pattern_ControlService.c: 173: testEvent.EventType = PATTERN_START;
  2167  000BEE  0E05               	movlw	5
  2168  000BF0  0100               	movlb	0	; () banked
  2169  000BF2  6FE9               	movwf	RunPatternControlService@testEvent& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;Pattern_ControlService.c: 174: PostPatternControlService(testEvent);
  2173  000BF4  C0E9  F0D8         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2174  000BF8  C0EA  F0D9         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2175  000BFC  C0EB  F0DA         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2176  000C00  ECAC  F00B         	call	_PostPatternControlService	;wreg free
  2177                           
  2178                           ;Pattern_ControlService.c: 176: }
  2179                           ;Pattern_ControlService.c: 177: break;
  2180  000C04  D043               	goto	l324
  2181  000C06                     l2484:
  2182                           
  2183                           ;Pattern_ControlService.c: 181: if(ThisEvent.EventType == PATTERN_START){
  2184  000C06  0E05               	movlw	5
  2185  000C08  0100               	movlb	0	; () banked
  2186  000C0A  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2187  000C0C  A4D8               	btfss	status,2,c
  2188  000C0E  D03E               	goto	l324
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;Pattern_ControlService.c: 183: ShowPattern();
  2192  000C10  EC20  F00B         	call	_ShowPattern	;wreg free
  2193  000C14                     l2488:
  2194                           
  2195                           ;Pattern_ControlService.c: 185: CurrentState = Pattern_Running;
  2196  000C14  0E02               	movlw	2
  2197  000C16  D029               	goto	L4
  2198  000C18                     l2490:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;Pattern_ControlService.c: 191: if(ThisEvent.EventType == ES_TIMEOUT){
  2202  000C18  0E03               	movlw	3
  2203  000C1A  0100               	movlb	0	; () banked
  2204  000C1C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2205  000C1E  A4D8               	btfss	status,2,c
  2206  000C20  D003               	goto	l2494
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;Pattern_ControlService.c: 193: ShowPattern();
  2210  000C22  EC20  F00B         	call	_ShowPattern	;wreg free
  2211                           
  2212                           ;Pattern_ControlService.c: 194: }
  2213  000C26  D032               	goto	l324
  2214  000C28                     l2494:
  2215                           
  2216                           ;Pattern_ControlService.c: 196: else if(ThisEvent.EventType == PATTERN_END){
  2217  000C28  0E06               	movlw	6
  2218  000C2A  0100               	movlb	0	; () banked
  2219  000C2C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2220  000C2E  A4D8               	btfss	status,2,c
  2221  000C30  D003               	goto	l2500
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;Pattern_ControlService.c: 198: StopPattern();
  2225  000C32  EC69  F00B         	call	_StopPattern	;wreg free
  2226  000C36  D018               	goto	L12
  2227  000C38                     l2500:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;Pattern_ControlService.c: 203: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2231  000C38  0E07               	movlw	7
  2232  000C3A  0100               	movlb	0	; () banked
  2233  000C3C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2234  000C3E  A4D8               	btfss	status,2,c
  2235  000C40  D025               	goto	l324
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;Pattern_ControlService.c: 205: PausePattern();
  2239  000C42  ECE4  F00B         	call	_PausePattern	;wreg free
  2240                           
  2241                           ;Pattern_ControlService.c: 207: CurrentState = Pattern_Paused;
  2242  000C46  0E03               	movlw	3
  2243  000C48  D010               	goto	L4
  2244  000C4A                     l2506:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;Pattern_ControlService.c: 213: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2248  000C4A  0E08               	movlw	8
  2249  000C4C  0100               	movlb	0	; () banked
  2250  000C4E  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2251  000C50  A4D8               	btfss	status,2,c
  2252  000C52  D003               	goto	l2512
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;Pattern_ControlService.c: 215: ShowPattern();
  2256  000C54  EC20  F00B         	call	_ShowPattern	;wreg free
  2257  000C58  D7DD               	goto	l2488
  2258  000C5A                     l2512:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;Pattern_ControlService.c: 220: else if(ThisEvent.EventType == PATTERN_END){
  2262  000C5A  0E06               	movlw	6
  2263  000C5C  0100               	movlb	0	; () banked
  2264  000C5E  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2265  000C60  A4D8               	btfss	status,2,c
  2266  000C62  D014               	goto	l324
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;Pattern_ControlService.c: 222: StopPattern();
  2270  000C64  EC69  F00B         	call	_StopPattern	;wreg free
  2271  000C68                     L12:
  2272                           
  2273                           ;Pattern_ControlService.c: 224: CurrentState = Pattern_Off;
  2274  000C68  0E01               	movlw	1
  2275  000C6A                     L4:
  2276  000C6A  0100               	movlb	0	; () banked
  2277  000C6C  6F99               	movwf	_CurrentState& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;Pattern_ControlService.c: 227: }
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;Pattern_ControlService.c: 225: }
  2284                           ;Pattern_ControlService.c: 226: break;
  2285                           
  2286                           ; BSR set to: 0
  2287  000C6E  D00E               	goto	l324
  2288  000C70                     l2520:
  2289                           
  2290                           ; BSR set to: 0
  2291  000C70  0100               	movlb	0	; () banked
  2292  000C72  5199               	movf	_CurrentState& (0+255),w,b
  2293                           
  2294                           ; Switch size 1, requested type "space"
  2295                           ; Number of cases is 4, Range of values is 0 to 3
  2296                           ; switch strategies available:
  2297                           ; Name         Instructions Cycles
  2298                           ; simple_byte           13     7 (average)
  2299                           ;	Chosen strategy is simple_byte
  2300  000C74  0A00               	xorlw	0	; case 0
  2301  000C76  B4D8               	btfsc	status,2,c
  2302  000C78  D7B2               	goto	l2478
  2303  000C7A  0A01               	xorlw	1	; case 1
  2304  000C7C  B4D8               	btfsc	status,2,c
  2305  000C7E  D7C3               	goto	l2484
  2306  000C80  0A03               	xorlw	3	; case 2
  2307  000C82  B4D8               	btfsc	status,2,c
  2308  000C84  D7C9               	goto	l2490
  2309  000C86  0A01               	xorlw	1	; case 3
  2310  000C88  B4D8               	btfsc	status,2,c
  2311  000C8A  D7DF               	goto	l2506
  2312  000C8C                     l324:
  2313                           
  2314                           ;Pattern_ControlService.c: 228: return ReturnEvent;
  2315  000C8C  C0E6  F0E3         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2316  000C90  C0E7  F0E4         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2317  000C94  C0E8  F0E5         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2318  000C98  0012               	return		;funcret
  2319  000C9A                     __end_of_RunPatternControlService:
  2320                           	opt stack 0
  2321                           tosu	equ	0xFFF
  2322                           tosh	equ	0xFFE
  2323                           tosl	equ	0xFFD
  2324                           pclath	equ	0xFFA
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _RunSPI32ControlService *****************
  2344 ;; Defined at:
  2345 ;;		line 138 in file "SPI32_ControlService.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  ReturnEvent     3   44[BANK0 ] struct ES_Event_t
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  3   40[BANK0 ] struct ES_Event_t
  2352 ;; Registers used:
  2353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2359 ;;      Params:         0       3       0       0
  2360 ;;      Locals:         0       3       0       0
  2361 ;;      Temps:          0       1       0       0
  2362 ;;      Totals:         0       7       0       0
  2363 ;;Total ram usage:        7 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    7
  2366 ;; This function calls:
  2367 ;;		_GetNextFrame
  2368 ;;		_SPI32_SendByte
  2369 ;; This function is called by:
  2370 ;;		_ES_Run
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text8
  2375  000748                     __ptext8:
  2376                           	opt stack 0
  2377  000748                     _RunSPI32ControlService:
  2378                           	opt stack 22
  2379                           
  2380                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2381                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2382                           
  2383                           ;incstack = 0
  2384  000748  0E00               	movlw	0
  2385  00074A  0100               	movlb	0	; () banked
  2386  00074C  6FE7               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2387                           
  2388                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2389  00074E  D05F               	goto	l2588
  2390  000750                     l2544:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2394  000750  0E02               	movlw	2
  2395  000752  0100               	movlb	0	; () banked
  2396  000754  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2397  000756  A4D8               	btfss	status,2,c
  2398  000758  D06E               	goto	l453
  2399  00075A  D055               	goto	l2584
  2400  00075C                     l2548:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2404  00075C  0E09               	movlw	9
  2405  00075E  0100               	movlb	0	; () banked
  2406  000760  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2407  000762  A4D8               	btfss	status,2,c
  2408  000764  D068               	goto	l453
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2412  000766  EC46  F00B         	call	_GetNextFrame	;wreg free
  2413  00076A  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2414  00076E  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2415  000772  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2416  000776  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2417                           
  2418                           ;SPI32_ControlService.c: 163: SPI32_SendByte(CurrentFrame);
  2419  00077A  0100               	movlb	0	; () banked
  2420  00077C  5180               	movf	_CurrentFrame& (0+255),w,b
  2421  00077E  ECDB  F00B         	call	_SPI32_SendByte
  2422  000782                     l2554:
  2423                           
  2424                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2425  000782  0E02               	movlw	2
  2426  000784  D041               	goto	L10
  2427  000786                     l2556:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2431  000786  0E03               	movlw	3
  2432  000788  0100               	movlb	0	; () banked
  2433  00078A  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2434  00078C  A4D8               	btfss	status,2,c
  2435  00078E  D053               	goto	l453
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;SPI32_ControlService.c: 174: SPI32_SendByte(CurrentFrame>>8);
  2439  000790  0100               	movlb	0	; () banked
  2440  000792  5181               	movf	(_CurrentFrame+1)& (0+255),w,b
  2441  000794  ECDB  F00B         	call	_SPI32_SendByte
  2442                           
  2443                           ;SPI32_ControlService.c: 176: CurrentState = SPI32_SendingByte2;
  2444  000798  0E03               	movlw	3
  2445  00079A  D036               	goto	L10
  2446  00079C                     l2562:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;SPI32_ControlService.c: 184: if(ThisEvent.EventType == ES_TIMEOUT){
  2450  00079C  0E03               	movlw	3
  2451  00079E  0100               	movlb	0	; () banked
  2452  0007A0  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2453  0007A2  A4D8               	btfss	status,2,c
  2454  0007A4  D048               	goto	l453
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;SPI32_ControlService.c: 186: SPI32_SendByte(CurrentFrame>>16);
  2458  0007A6  0100               	movlb	0	; () banked
  2459  0007A8  5182               	movf	(_CurrentFrame+2)& (0+255),w,b
  2460  0007AA  ECDB  F00B         	call	_SPI32_SendByte
  2461                           
  2462                           ;SPI32_ControlService.c: 188: CurrentState = SPI32_SendingByte3;
  2463  0007AE  0E04               	movlw	4
  2464  0007B0  D02B               	goto	L10
  2465  0007B2                     l2568:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;SPI32_ControlService.c: 196: if(ThisEvent.EventType == ES_TIMEOUT){
  2469  0007B2  0E03               	movlw	3
  2470  0007B4  0100               	movlb	0	; () banked
  2471  0007B6  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2472  0007B8  A4D8               	btfss	status,2,c
  2473  0007BA  D03D               	goto	l453
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;SPI32_ControlService.c: 198: SPI32_SendByte(CurrentFrame>>24);
  2477  0007BC  0100               	movlb	0	; () banked
  2478  0007BE  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2479  0007C0  ECDB  F00B         	call	_SPI32_SendByte
  2480                           
  2481                           ;SPI32_ControlService.c: 200: CurrentState = SPI32_SendingByte4;
  2482  0007C4  0E05               	movlw	5
  2483  0007C6  D020               	goto	L10
  2484  0007C8                     l2574:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;SPI32_ControlService.c: 207: if(ThisEvent.EventType == ES_TIMEOUT){
  2488  0007C8  0E03               	movlw	3
  2489  0007CA  0100               	movlb	0	; () banked
  2490  0007CC  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2491  0007CE  A4D8               	btfss	status,2,c
  2492  0007D0  D032               	goto	l453
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;SPI32_ControlService.c: 209: if(FrameIndex++ < NumFrames){
  2496  0007D2  0100               	movlb	0	; () banked
  2497  0007D4  2B9A               	incf	_FrameIndex& (0+255),f,b
  2498  0007D6  059A               	decf	_FrameIndex& (0+255),w,b
  2499  0007D8  0100               	movlb	0	; () banked
  2500  0007DA  6FE6               	movwf	??_RunSPI32ControlService& (0+255),b
  2501  0007DC  0100               	movlb	0	; () banked
  2502  0007DE  519D               	movf	_NumFrames& (0+255),w,b
  2503  0007E0  0100               	movlb	0	; () banked
  2504  0007E2  5DE6               	subwf	??_RunSPI32ControlService& (0+255),w,b
  2505  0007E4  B0D8               	btfsc	status,0,c
  2506  0007E6  D00F               	goto	l2584
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;SPI32_ControlService.c: 211: CurrentFrame = GetNextFrame();
  2510  0007E8  EC46  F00B         	call	_GetNextFrame	;wreg free
  2511  0007EC  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2512  0007F0  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2513  0007F4  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2514  0007F8  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2515                           
  2516                           ;SPI32_ControlService.c: 213: SPI32_SendByte(CurrentFrame);
  2517  0007FC  0100               	movlb	0	; () banked
  2518  0007FE  5180               	movf	_CurrentFrame& (0+255),w,b
  2519  000800  ECDB  F00B         	call	_SPI32_SendByte
  2520  000804  D7BE               	goto	l2554
  2521  000806                     l2584:
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;SPI32_ControlService.c: 218: else{
  2525                           ;SPI32_ControlService.c: 220: CurrentState = SPI32_Waiting4Send;
  2526  000806  0E01               	movlw	1
  2527  000808                     L10:
  2528  000808  0100               	movlb	0	; () banked
  2529  00080A  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;SPI32_ControlService.c: 225: }
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;SPI32_ControlService.c: 221: }
  2536                           ;SPI32_ControlService.c: 222: }
  2537                           ;SPI32_ControlService.c: 223: break;
  2538                           
  2539                           ; BSR set to: 0
  2540  00080C  D014               	goto	l453
  2541  00080E                     l2588:
  2542                           
  2543                           ; BSR set to: 0
  2544  00080E  0100               	movlb	0	; () banked
  2545  000810  5197               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2546                           
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 6, Range of values is 0 to 5
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte           19    10 (average)
  2552                           ;	Chosen strategy is simple_byte
  2553  000812  0A00               	xorlw	0	; case 0
  2554  000814  B4D8               	btfsc	status,2,c
  2555  000816  D79C               	goto	l2544
  2556  000818  0A01               	xorlw	1	; case 1
  2557  00081A  B4D8               	btfsc	status,2,c
  2558  00081C  D79F               	goto	l2548
  2559  00081E  0A03               	xorlw	3	; case 2
  2560  000820  B4D8               	btfsc	status,2,c
  2561  000822  D7B1               	goto	l2556
  2562  000824  0A01               	xorlw	1	; case 3
  2563  000826  B4D8               	btfsc	status,2,c
  2564  000828  D7B9               	goto	l2562
  2565  00082A  0A07               	xorlw	7	; case 4
  2566  00082C  B4D8               	btfsc	status,2,c
  2567  00082E  D7C1               	goto	l2568
  2568  000830  0A01               	xorlw	1	; case 5
  2569  000832  B4D8               	btfsc	status,2,c
  2570  000834  D7C9               	goto	l2574
  2571  000836                     l453:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;SPI32_ControlService.c: 226: return ReturnEvent;
  2575  000836  C0E7  F0E3         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2576  00083A  C0E8  F0E4         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2577  00083E  C0E9  F0E5         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2578                           
  2579                           ; BSR set to: 0
  2580  000842  0012               	return		;funcret
  2581  000844                     __end_of_RunSPI32ControlService:
  2582                           	opt stack 0
  2583                           tosu	equ	0xFFF
  2584                           tosh	equ	0xFFE
  2585                           tosl	equ	0xFFD
  2586                           pclath	equ	0xFFA
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           postdec1	equ	0xFE5
  2596                           fsr1h	equ	0xFE2
  2597                           fsr1l	equ	0xFE1
  2598                           indf2	equ	0xFDF
  2599                           postinc2	equ	0xFDE
  2600                           postdec2	equ	0xFDD
  2601                           fsr2h	equ	0xFDA
  2602                           fsr2l	equ	0xFD9
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function _SPI32_SendByte *****************
  2606 ;; Defined at:
  2607 ;;		line 84 in file "SPI32_HW.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  newByte         1    wreg     unsigned char 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  newByte         1    0[BANK0 ] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2621 ;;      Params:         0       0       0       0
  2622 ;;      Locals:         0       1       0       0
  2623 ;;      Temps:          0       0       0       0
  2624 ;;      Totals:         0       1       0       0
  2625 ;;Total ram usage:        1 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    6
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_RunSPI32ControlService
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text9
  2636  0017B6                     __ptext9:
  2637                           	opt stack 0
  2638  0017B6                     _SPI32_SendByte:
  2639                           	opt stack 22
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;incstack = 0
  2643                           ;SPI32_SendByte@newByte stored from wreg
  2644  0017B6  0100               	movlb	0	; () banked
  2645  0017B8  6FBB               	movwf	SPI32_SendByte@newByte& (0+255),b
  2646                           
  2647                           ;SPI32_HW.c: 97: SSPBUF = newByte;
  2648  0017BA  C0BB  FFC9         	movff	SPI32_SendByte@newByte,4041	;volatile
  2649  0017BE  0012               	return		;funcret
  2650  0017C0                     __end_of_SPI32_SendByte:
  2651                           	opt stack 0
  2652                           tosu	equ	0xFFF
  2653                           tosh	equ	0xFFE
  2654                           tosl	equ	0xFFD
  2655                           pclath	equ	0xFFA
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           postinc0	equ	0xFEE
  2663                           wreg	equ	0xFE8
  2664                           postdec1	equ	0xFE5
  2665                           fsr1h	equ	0xFE2
  2666                           fsr1l	equ	0xFE1
  2667                           indf2	equ	0xFDF
  2668                           postinc2	equ	0xFDE
  2669                           postdec2	equ	0xFDD
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _GetNextFrame *****************
  2675 ;; Defined at:
  2676 ;;		line 248 in file "SPI32_ControlService.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  4    0[BANK0 ] unsigned long 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2690 ;;      Params:         0       4       0       0
  2691 ;;      Locals:         0       0       0       0
  2692 ;;      Temps:          0       0       0       0
  2693 ;;      Totals:         0       4       0       0
  2694 ;;Total ram usage:        4 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    6
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_RunSPI32ControlService
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text10
  2705  00168C                     __ptext10:
  2706                           	opt stack 0
  2707  00168C                     _GetNextFrame:
  2708                           	opt stack 22
  2709                           
  2710                           ;SPI32_ControlService.c: 249: return *(FramePointer++);
  2711                           
  2712                           ;incstack = 0
  2713  00168C  C08F  FFD9         	movff	_FramePointer,fsr2l
  2714  001690  C090  FFDA         	movff	_FramePointer+1,fsr2h
  2715  001694  0100               	movlb	0	; () banked
  2716  001696  0E04               	movlw	4
  2717  001698  278F               	addwf	_FramePointer& (0+255),f,b
  2718  00169A  0E00               	movlw	0
  2719  00169C  2390               	addwfc	(_FramePointer+1)& (0+255),f,b
  2720  00169E  CFDE F0BB          	movff	postinc2,?_GetNextFrame
  2721  0016A2  CFDE F0BC          	movff	postinc2,?_GetNextFrame+1
  2722  0016A6  CFDE F0BD          	movff	postinc2,?_GetNextFrame+2
  2723  0016AA  CFDE F0BE          	movff	postinc2,?_GetNextFrame+3
  2724  0016AE  0012               	return	
  2725  0016B0                     __end_of_GetNextFrame:
  2726                           	opt stack 0
  2727                           tosu	equ	0xFFF
  2728                           tosh	equ	0xFFE
  2729                           tosl	equ	0xFFD
  2730                           pclath	equ	0xFFA
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           prodh	equ	0xFF4
  2736                           prodl	equ	0xFF3
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postdec1	equ	0xFE5
  2740                           fsr1h	equ	0xFE2
  2741                           fsr1l	equ	0xFE1
  2742                           indf2	equ	0xFDF
  2743                           postinc2	equ	0xFDE
  2744                           postdec2	equ	0xFDD
  2745                           fsr2h	equ	0xFDA
  2746                           fsr2l	equ	0xFD9
  2747                           status	equ	0xFD8
  2748                           
  2749 ;; *************** function _StopPattern *****************
  2750 ;; Defined at:
  2751 ;;		line 280 in file "Pattern_ControlService.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2765 ;;      Params:         0       0       0       0
  2766 ;;      Locals:         0       0       0       0
  2767 ;;      Temps:          0       0       0       0
  2768 ;;      Totals:         0       0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:   12
  2772 ;; This function calls:
  2773 ;;		_DotStar_Off
  2774 ;;		_ES_Timer_StopTimer
  2775 ;;		_ResetPattern
  2776 ;; This function is called by:
  2777 ;;		_RunPatternControlService
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text11
  2782  0016D2                     __ptext11:
  2783                           	opt stack 0
  2784  0016D2                     _StopPattern:
  2785                           	opt stack 16
  2786                           
  2787                           ;Pattern_ControlService.c: 281: PatternConfigs[0] = 0;
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;incstack = 0
  2791  0016D2  0E00               	movlw	0
  2792  0016D4  0100               	movlb	0	; () banked
  2793  0016D6  6FF2               	movwf	_PatternConfigs& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  2797  0016D8  0E00               	movlw	0
  2798  0016DA  ECC9  F009         	call	_ES_Timer_StopTimer
  2799                           
  2800                           ;Pattern_ControlService.c: 285: DotStar_Off();
  2801  0016DE  EC77  F00B         	call	_DotStar_Off	;wreg free
  2802                           
  2803                           ;Pattern_ControlService.c: 287: ResetPattern();
  2804  0016E2  ECE0  F00B         	call	_ResetPattern	;wreg free
  2805                           
  2806                           ;Pattern_ControlService.c: 289: PatternConfigs[0] = 0;
  2807  0016E6  0E00               	movlw	0
  2808  0016E8  0100               	movlb	0	; () banked
  2809  0016EA  6FF2               	movwf	_PatternConfigs& (0+255),b
  2810                           
  2811                           ; BSR set to: 0
  2812  0016EC  0012               	return		;funcret
  2813  0016EE                     __end_of_StopPattern:
  2814                           	opt stack 0
  2815                           tosu	equ	0xFFF
  2816                           tosh	equ	0xFFE
  2817                           tosl	equ	0xFFD
  2818                           pclath	equ	0xFFA
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           prodh	equ	0xFF4
  2824                           prodl	equ	0xFF3
  2825                           postinc0	equ	0xFEE
  2826                           wreg	equ	0xFE8
  2827                           postdec1	equ	0xFE5
  2828                           fsr1h	equ	0xFE2
  2829                           fsr1l	equ	0xFE1
  2830                           indf2	equ	0xFDF
  2831                           postinc2	equ	0xFDE
  2832                           postdec2	equ	0xFDD
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8
  2836                           
  2837 ;; *************** function _ResetPattern *****************
  2838 ;; Defined at:
  2839 ;;		line 120 in file "Pattern_RGBPatterns.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;		None
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;		None
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg, status,2
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2853 ;;      Params:         0       0       0       0
  2854 ;;      Locals:         0       0       0       0
  2855 ;;      Temps:          0       0       0       0
  2856 ;;      Totals:         0       0       0       0
  2857 ;;Total ram usage:        0 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:    6
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_StopPattern
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text12
  2868  0017C0                     __ptext12:
  2869                           	opt stack 0
  2870  0017C0                     _ResetPattern:
  2871                           	opt stack 21
  2872                           
  2873                           ;Pattern_RGBPatterns.c: 122: PatternStepCounter=0;
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;incstack = 0
  2877  0017C0  0E00               	movlw	0
  2878  0017C2  0100               	movlb	0	; () banked
  2879  0017C4  6F9E               	movwf	_PatternStepCounter& (0+255),b
  2880                           
  2881                           ; BSR set to: 0
  2882  0017C6  0012               	return		;funcret
  2883  0017C8                     __end_of_ResetPattern:
  2884                           	opt stack 0
  2885                           tosu	equ	0xFFF
  2886                           tosh	equ	0xFFE
  2887                           tosl	equ	0xFFD
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           fsr1h	equ	0xFE2
  2899                           fsr1l	equ	0xFE1
  2900                           indf2	equ	0xFDF
  2901                           postinc2	equ	0xFDE
  2902                           postdec2	equ	0xFDD
  2903                           fsr2h	equ	0xFDA
  2904                           fsr2l	equ	0xFD9
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _DotStar_Off *****************
  2908 ;; Defined at:
  2909 ;;		line 73 in file "Pattern_DotStarLED.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2923 ;;      Params:         0       0       0       0
  2924 ;;      Locals:         0       0       0       0
  2925 ;;      Temps:          0       0       0       0
  2926 ;;      Totals:         0       0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:   11
  2930 ;; This function calls:
  2931 ;;		_SPI32_TransmitFrames
  2932 ;; This function is called by:
  2933 ;;		_StopPattern
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text13
  2938  0016EE                     __ptext13:
  2939                           	opt stack 0
  2940  0016EE                     _DotStar_Off:
  2941                           	opt stack 16
  2942                           
  2943                           ;Pattern_DotStarLED.c: 75: SPI32_TransmitFrames(OffFrames,Length+2);
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;incstack = 0
  2947  0016EE  0E00               	movlw	low _OffFrames
  2948  0016F0  0100               	movlb	0	; () banked
  2949  0016F2  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  2950  0016F4  0E01               	movlw	high _OffFrames
  2951  0016F6  0100               	movlb	0	; () banked
  2952  0016F8  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  2953  0016FA  0100               	movlb	0	; () banked
  2954  0016FC  519B               	movf	_Length& (0+255),w,b
  2955  0016FE  0F02               	addlw	2
  2956  001700  0100               	movlb	0	; () banked
  2957  001702  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  2958  001704  EC07  F00B         	call	_SPI32_TransmitFrames	;wreg free
  2959  001708  0012               	return		;funcret
  2960  00170A                     __end_of_DotStar_Off:
  2961                           	opt stack 0
  2962                           tosu	equ	0xFFF
  2963                           tosh	equ	0xFFE
  2964                           tosl	equ	0xFFD
  2965                           pclath	equ	0xFFA
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           fsr1h	equ	0xFE2
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _ShowPattern *****************
  2985 ;; Defined at:
  2986 ;;		line 270 in file "Pattern_ControlService.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3000 ;;      Params:         0       0       0       0
  3001 ;;      Locals:         0       0       0       0
  3002 ;;      Temps:          0       0       0       0
  3003 ;;      Totals:         0       0       0       0
  3004 ;;Total ram usage:        0 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:   12
  3007 ;; This function calls:
  3008 ;;		_DotStar_Show
  3009 ;;		_ES_Timer_InitTimer
  3010 ;;		_UpdatePattern
  3011 ;; This function is called by:
  3012 ;;		_RunPatternControlService
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text14
  3017  001640                     __ptext14:
  3018                           	opt stack 0
  3019  001640                     _ShowPattern:
  3020                           	opt stack 16
  3021                           
  3022                           ;Pattern_ControlService.c: 272: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3023                           
  3024                           ;incstack = 0
  3025  001640  C0F6  F0BB         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3026  001644  0100               	movlb	0	; () banked
  3027  001646  6BBC               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3028  001648  0E00               	movlw	0
  3029  00164A  EC7D  F008         	call	_ES_Timer_InitTimer
  3030                           
  3031                           ;Pattern_ControlService.c: 274: DotStar_Show(UpdatePattern());
  3032  00164E  ECDF  F001         	call	_UpdatePattern	;wreg free
  3033  001652  C0C7  F0E1         	movff	?_UpdatePattern,DotStar_Show@pixelPointer
  3034  001656  C0C8  F0E2         	movff	?_UpdatePattern+1,DotStar_Show@pixelPointer+1
  3035  00165A  EC5C  F00A         	call	_DotStar_Show	;wreg free
  3036                           
  3037                           ;Pattern_ControlService.c: 276: PatternConfigs[0] = 1;
  3038  00165E  0E01               	movlw	1
  3039  001660  0100               	movlb	0	; () banked
  3040  001662  6FF2               	movwf	_PatternConfigs& (0+255),b
  3041                           
  3042                           ; BSR set to: 0
  3043  001664  0012               	return		;funcret
  3044  001666                     __end_of_ShowPattern:
  3045                           	opt stack 0
  3046                           tosu	equ	0xFFF
  3047                           tosh	equ	0xFFE
  3048                           tosl	equ	0xFFD
  3049                           pclath	equ	0xFFA
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodh	equ	0xFF4
  3055                           prodl	equ	0xFF3
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1h	equ	0xFE2
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _UpdatePattern *****************
  3069 ;; Defined at:
  3070 ;;		line 76 in file "Pattern_RGBPatterns.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  i               1   20[BANK0 ] unsigned char 
  3075 ;;  patternID       1   19[BANK0 ] unsigned char 
  3076 ;;  brightness      1   18[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2   12[BANK0 ] PTR unsigned long 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3086 ;;      Params:         0       2       0       0
  3087 ;;      Locals:         0       3       0       0
  3088 ;;      Temps:          0       4       0       0
  3089 ;;      Totals:         0       9       0       0
  3090 ;;Total ram usage:        9 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    7
  3093 ;; This function calls:
  3094 ;;		___lbmod
  3095 ;;		___llmod
  3096 ;;		___lmul
  3097 ;; This function is called by:
  3098 ;;		_ShowPattern
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text15
  3103  0003BE                     __ptext15:
  3104                           	opt stack 0
  3105  0003BE                     _UpdatePattern:
  3106                           	opt stack 20
  3107                           
  3108                           ;Pattern_RGBPatterns.c: 78: uint8_t patternID = PatternConfigs[1];
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;incstack = 0
  3112  0003BE  0100               	movlb	0	; () banked
  3113  0003C0  EE20 F001          	lfsr	2,1
  3114  0003C4  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3115  0003C6  26D9               	addwf	fsr2l,f,c
  3116  0003C8  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3117  0003CA  22DA               	addwfc	fsr2h,f,c
  3118  0003CC  50DF               	movf	indf2,w,c
  3119  0003CE  0100               	movlb	0	; () banked
  3120  0003D0  6FCE               	movwf	UpdatePattern@patternID& (0+255),b
  3121                           
  3122                           ;Pattern_RGBPatterns.c: 79: uint8_t brightness = PatternConfigs[2];
  3123  0003D2  0100               	movlb	0	; () banked
  3124  0003D4  EE20 F002          	lfsr	2,2
  3125  0003D8  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3126  0003DA  26D9               	addwf	fsr2l,f,c
  3127  0003DC  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3128  0003DE  22DA               	addwfc	fsr2h,f,c
  3129  0003E0  50DF               	movf	indf2,w,c
  3130  0003E2  0100               	movlb	0	; () banked
  3131  0003E4  6FCD               	movwf	UpdatePattern@brightness& (0+255),b
  3132                           
  3133                           ;Pattern_RGBPatterns.c: 82: switch(patternID){
  3134  0003E6  D076               	goto	l2254
  3135  0003E8                     l2238:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3139  0003E8  0E00               	movlw	0
  3140  0003EA  0100               	movlb	0	; () banked
  3141  0003EC  6FCF               	movwf	UpdatePattern@i& (0+255),b
  3142  0003EE  D03F               	goto	l2244
  3143  0003F0                     l2240:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = (0xFF000000 | (i == PatternStepCounter)*T
      +                          estColor);
  3147  0003F0  0100               	movlb	0	; () banked
  3148  0003F2  519E               	movf	_PatternStepCounter& (0+255),w,b
  3149  0003F4  0100               	movlb	0	; () banked
  3150  0003F6  19CF               	xorwf	UpdatePattern@i& (0+255),w,b
  3151  0003F8  A4D8               	btfss	status,2,c
  3152  0003FA  D002               	goto	u1310
  3153  0003FC  0E01               	movlw	1
  3154  0003FE  D001               	goto	u1320
  3155  000400                     u1310:
  3156  000400  0E00               	movlw	0
  3157  000402                     u1320:
  3158  000402  0100               	movlb	0	; () banked
  3159  000404  6FBB               	movwf	___lmul@multiplier& (0+255),b
  3160  000406  6BBC               	clrf	(___lmul@multiplier+1)& (0+255),b
  3161  000408  6BBD               	clrf	(___lmul@multiplier+2)& (0+255),b
  3162  00040A  6BBE               	clrf	(___lmul@multiplier+3)& (0+255),b
  3163  00040C  C084  F0BF         	movff	_TestColor,___lmul@multiplicand
  3164  000410  C085  F0C0         	movff	_TestColor+1,___lmul@multiplicand+1
  3165  000414  C086  F0C1         	movff	_TestColor+2,___lmul@multiplicand+2
  3166  000418  C087  F0C2         	movff	_TestColor+3,___lmul@multiplicand+3
  3167  00041C  ECBD  F008         	call	___lmul	;wreg free
  3168  000420  0E00               	movlw	0
  3169  000422  0100               	movlb	0	; () banked
  3170  000424  11BB               	iorwf	?___lmul& (0+255),w,b
  3171  000426  0100               	movlb	0	; () banked
  3172  000428  6FC9               	movwf	??_UpdatePattern& (0+255),b
  3173  00042A  0E00               	movlw	0
  3174  00042C  0100               	movlb	0	; () banked
  3175  00042E  11BC               	iorwf	(?___lmul+1)& (0+255),w,b
  3176  000430  0100               	movlb	0	; () banked
  3177  000432  6FCA               	movwf	(??_UpdatePattern+1)& (0+255),b
  3178  000434  0E00               	movlw	0
  3179  000436  0100               	movlb	0	; () banked
  3180  000438  11BD               	iorwf	(?___lmul+2)& (0+255),w,b
  3181  00043A  0100               	movlb	0	; () banked
  3182  00043C  6FCB               	movwf	(??_UpdatePattern+2)& (0+255),b
  3183  00043E  0EFF               	movlw	255
  3184  000440  0100               	movlb	0	; () banked
  3185  000442  11BE               	iorwf	(?___lmul+3)& (0+255),w,b
  3186  000444  0100               	movlb	0	; () banked
  3187  000446  6FCC               	movwf	(??_UpdatePattern+3)& (0+255),b
  3188  000448  0100               	movlb	0	; () banked
  3189  00044A  51CF               	movf	UpdatePattern@i& (0+255),w,b
  3190  00044C  0D04               	mullw	4
  3191  00044E  0E00               	movlw	low _PixelPattern
  3192  000450  24F3               	addwf	prodl,w,c
  3193  000452  6ED9               	movwf	fsr2l,c
  3194  000454  0E02               	movlw	high _PixelPattern
  3195  000456  20F4               	addwfc	prodh,w,c
  3196  000458  6EDA               	movwf	fsr2h,c
  3197  00045A  C0C9  FFDE         	movff	??_UpdatePattern,postinc2
  3198  00045E  C0CA  FFDE         	movff	??_UpdatePattern+1,postinc2
  3199  000462  C0CB  FFDE         	movff	??_UpdatePattern+2,postinc2
  3200  000466  C0CC  FFDE         	movff	??_UpdatePattern+3,postinc2
  3201                           
  3202                           ; BSR set to: 0
  3203  00046A  0100               	movlb	0	; () banked
  3204  00046C  2BCF               	incf	UpdatePattern@i& (0+255),f,b
  3205  00046E                     l2244:
  3206                           
  3207                           ; BSR set to: 0
  3208  00046E  0100               	movlb	0	; () banked
  3209  000470  5196               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3210  000472  0100               	movlb	0	; () banked
  3211  000474  5DCF               	subwf	UpdatePattern@i& (0+255),w,b
  3212  000476  A0D8               	btfss	status,0,c
  3213  000478  D7BB               	goto	l2240
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;Pattern_RGBPatterns.c: 109: }
  3217                           ;Pattern_RGBPatterns.c: 110: if(PatternStepCounter++%Length == 0){
  3218                           
  3219                           ; BSR set to: 0
  3220  00047A  C096  F0BB         	movff	Pattern_RGBPatterns@Length,___lbmod@divisor
  3221  00047E  0100               	movlb	0	; () banked
  3222  000480  2B9E               	incf	_PatternStepCounter& (0+255),f,b
  3223  000482  059E               	decf	_PatternStepCounter& (0+255),w,b
  3224  000484  EC3A  F00A         	call	___lbmod
  3225  000488  0900               	iorlw	0
  3226  00048A  A4D8               	btfss	status,2,c
  3227  00048C  D037               	goto	l2256
  3228                           
  3229                           ;Pattern_RGBPatterns.c: 111: TestColor = TestColor++%13;
  3230  00048E  C084  F0BB         	movff	_TestColor,___llmod@dividend
  3231  000492  C085  F0BC         	movff	_TestColor+1,___llmod@dividend+1
  3232  000496  C086  F0BD         	movff	_TestColor+2,___llmod@dividend+2
  3233  00049A  C087  F0BE         	movff	_TestColor+3,___llmod@dividend+3
  3234  00049E  0E0D               	movlw	13
  3235  0004A0  0100               	movlb	0	; () banked
  3236  0004A2  6FBF               	movwf	___llmod@divisor& (0+255),b
  3237  0004A4  0E00               	movlw	0
  3238  0004A6  6FC0               	movwf	(___llmod@divisor+1)& (0+255),b
  3239  0004A8  0E00               	movlw	0
  3240  0004AA  6FC1               	movwf	(___llmod@divisor+2)& (0+255),b
  3241  0004AC  0E00               	movlw	0
  3242  0004AE  6FC2               	movwf	(___llmod@divisor+3)& (0+255),b
  3243  0004B0  EC9D  F007         	call	___llmod	;wreg free
  3244  0004B4  C0BB  F084         	movff	?___llmod,_TestColor
  3245  0004B8  C0BC  F085         	movff	?___llmod+1,_TestColor+1
  3246  0004BC  C0BD  F086         	movff	?___llmod+2,_TestColor+2
  3247  0004C0  C0BE  F087         	movff	?___llmod+3,_TestColor+3
  3248  0004C4  0E01               	movlw	1
  3249  0004C6  0100               	movlb	0	; () banked
  3250  0004C8  2784               	addwf	_TestColor& (0+255),f,b
  3251  0004CA  0E00               	movlw	0
  3252  0004CC  2385               	addwfc	(_TestColor+1)& (0+255),f,b
  3253  0004CE  2386               	addwfc	(_TestColor+2)& (0+255),f,b
  3254  0004D0  2387               	addwfc	(_TestColor+3)& (0+255),f,b
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;Pattern_RGBPatterns.c: 115: }
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;Pattern_RGBPatterns.c: 112: }
  3261                           ;Pattern_RGBPatterns.c: 113: break;
  3262  0004D2  D014               	goto	l2256
  3263  0004D4                     l2254:
  3264                           
  3265                           ; BSR set to: 0
  3266  0004D4  0100               	movlb	0	; () banked
  3267  0004D6  51CE               	movf	UpdatePattern@patternID& (0+255),w,b
  3268                           
  3269                           ; Switch size 1, requested type "space"
  3270                           ; Number of cases is 6, Range of values is 0 to 255
  3271                           ; switch strategies available:
  3272                           ; Name         Instructions Cycles
  3273                           ; simple_byte           19    10 (average)
  3274                           ;	Chosen strategy is simple_byte
  3275  0004D8  0A00               	xorlw	0	; case 0
  3276  0004DA  B4D8               	btfsc	status,2,c
  3277  0004DC  D00F               	goto	l2256
  3278  0004DE  0A01               	xorlw	1	; case 1
  3279  0004E0  B4D8               	btfsc	status,2,c
  3280  0004E2  D00C               	goto	l2256
  3281  0004E4  0A03               	xorlw	3	; case 2
  3282  0004E6  B4D8               	btfsc	status,2,c
  3283  0004E8  D009               	goto	l2256
  3284  0004EA  0A01               	xorlw	1	; case 3
  3285  0004EC  B4D8               	btfsc	status,2,c
  3286  0004EE  D006               	goto	l2256
  3287  0004F0  0A07               	xorlw	7	; case 4
  3288  0004F2  B4D8               	btfsc	status,2,c
  3289  0004F4  D003               	goto	l2256
  3290  0004F6  0AFB               	xorlw	251	; case 255
  3291  0004F8  B4D8               	btfsc	status,2,c
  3292  0004FA  D776               	goto	l2238
  3293  0004FC                     l2256:
  3294                           
  3295                           ;Pattern_RGBPatterns.c: 117: return PixelPattern;
  3296  0004FC  0E00               	movlw	low _PixelPattern
  3297  0004FE  0100               	movlb	0	; () banked
  3298  000500  6FC7               	movwf	?_UpdatePattern& (0+255),b
  3299  000502  0E02               	movlw	high _PixelPattern
  3300  000504  0100               	movlb	0	; () banked
  3301  000506  6FC8               	movwf	(?_UpdatePattern+1)& (0+255),b
  3302  000508  0012               	return	
  3303  00050A                     __end_of_UpdatePattern:
  3304                           	opt stack 0
  3305                           tosu	equ	0xFFF
  3306                           tosh	equ	0xFFE
  3307                           tosl	equ	0xFFD
  3308                           pclath	equ	0xFFA
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           postdec1	equ	0xFE5
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           postdec2	equ	0xFDD
  3323                           fsr2h	equ	0xFDA
  3324                           fsr2l	equ	0xFD9
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function ___lmul *****************
  3328 ;; Defined at:
  3329 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3332 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  product         4    8[BANK0 ] unsigned long 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  4    0[BANK0 ] unsigned long 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3344 ;;      Params:         0       8       0       0
  3345 ;;      Locals:         0       4       0       0
  3346 ;;      Temps:          0       0       0       0
  3347 ;;      Totals:         0      12       0       0
  3348 ;;Total ram usage:       12 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    6
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_UpdatePattern
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text16
  3359  00117A                     __ptext16:
  3360                           	opt stack 0
  3361  00117A                     ___lmul:
  3362                           	opt stack 20
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;incstack = 0
  3366  00117A  0E00               	movlw	0
  3367  00117C  0100               	movlb	0	; () banked
  3368  00117E  6FC3               	movwf	___lmul@product& (0+255),b
  3369  001180  0E00               	movlw	0
  3370  001182  6FC4               	movwf	(___lmul@product+1)& (0+255),b
  3371  001184  0E00               	movlw	0
  3372  001186  6FC5               	movwf	(___lmul@product+2)& (0+255),b
  3373  001188  0E00               	movlw	0
  3374  00118A  6FC6               	movwf	(___lmul@product+3)& (0+255),b
  3375  00118C                     l2110:
  3376                           
  3377                           ; BSR set to: 0
  3378  00118C  0100               	movlb	0	; () banked
  3379  00118E  A1BB               	btfss	___lmul@multiplier& (0+255),0,b
  3380  001190  D010               	goto	l2114
  3381                           
  3382                           ; BSR set to: 0
  3383  001192  0100               	movlb	0	; () banked
  3384  001194  51BF               	movf	___lmul@multiplicand& (0+255),w,b
  3385  001196  0100               	movlb	0	; () banked
  3386  001198  27C3               	addwf	___lmul@product& (0+255),f,b
  3387  00119A  0100               	movlb	0	; () banked
  3388  00119C  51C0               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3389  00119E  0100               	movlb	0	; () banked
  3390  0011A0  23C4               	addwfc	(___lmul@product+1)& (0+255),f,b
  3391  0011A2  0100               	movlb	0	; () banked
  3392  0011A4  51C1               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3393  0011A6  0100               	movlb	0	; () banked
  3394  0011A8  23C5               	addwfc	(___lmul@product+2)& (0+255),f,b
  3395  0011AA  0100               	movlb	0	; () banked
  3396  0011AC  51C2               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3397  0011AE  0100               	movlb	0	; () banked
  3398  0011B0  23C6               	addwfc	(___lmul@product+3)& (0+255),f,b
  3399  0011B2                     l2114:
  3400                           
  3401                           ; BSR set to: 0
  3402  0011B2  0100               	movlb	0	; () banked
  3403  0011B4  90D8               	bcf	status,0,c
  3404  0011B6  37BF               	rlcf	___lmul@multiplicand& (0+255),f,b
  3405  0011B8  37C0               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3406  0011BA  37C1               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3407  0011BC  37C2               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3408                           
  3409                           ; BSR set to: 0
  3410  0011BE  0100               	movlb	0	; () banked
  3411  0011C0  90D8               	bcf	status,0,c
  3412  0011C2  33BE               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3413  0011C4  33BD               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3414  0011C6  33BC               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3415  0011C8  33BB               	rrcf	___lmul@multiplier& (0+255),f,b
  3416  0011CA  0100               	movlb	0	; () banked
  3417  0011CC  51BB               	movf	___lmul@multiplier& (0+255),w,b
  3418  0011CE  0100               	movlb	0	; () banked
  3419  0011D0  11BC               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3420  0011D2  0100               	movlb	0	; () banked
  3421  0011D4  11BD               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3422  0011D6  0100               	movlb	0	; () banked
  3423  0011D8  11BE               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3424  0011DA  A4D8               	btfss	status,2,c
  3425  0011DC  D7D7               	goto	l2110
  3426                           
  3427                           ; BSR set to: 0
  3428  0011DE  C0C3  F0BB         	movff	___lmul@product,?___lmul
  3429  0011E2  C0C4  F0BC         	movff	___lmul@product+1,?___lmul+1
  3430  0011E6  C0C5  F0BD         	movff	___lmul@product+2,?___lmul+2
  3431  0011EA  C0C6  F0BE         	movff	___lmul@product+3,?___lmul+3
  3432                           
  3433                           ; BSR set to: 0
  3434  0011EE  0012               	return		;funcret
  3435  0011F0                     __end_of___lmul:
  3436                           	opt stack 0
  3437                           tosu	equ	0xFFF
  3438                           tosh	equ	0xFFE
  3439                           tosl	equ	0xFFD
  3440                           pclath	equ	0xFFA
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function ___llmod *****************
  3460 ;; Defined at:
  3461 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  dividend        4    0[BANK0 ] unsigned long 
  3464 ;;  divisor         4    4[BANK0 ] unsigned long 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  counter         1    8[BANK0 ] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  4    0[BANK0 ] unsigned long 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3476 ;;      Params:         0       8       0       0
  3477 ;;      Locals:         0       1       0       0
  3478 ;;      Temps:          0       0       0       0
  3479 ;;      Totals:         0       9       0       0
  3480 ;;Total ram usage:        9 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    6
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_UpdatePattern
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text17
  3491  000F3A                     __ptext17:
  3492                           	opt stack 0
  3493  000F3A                     ___llmod:
  3494                           	opt stack 20
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;incstack = 0
  3498  000F3A  0100               	movlb	0	; () banked
  3499  000F3C  51BF               	movf	___llmod@divisor& (0+255),w,b
  3500  000F3E  0100               	movlb	0	; () banked
  3501  000F40  11C0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3502  000F42  0100               	movlb	0	; () banked
  3503  000F44  11C1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3504  000F46  0100               	movlb	0	; () banked
  3505  000F48  11C2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3506  000F4A  B4D8               	btfsc	status,2,c
  3507  000F4C  D03A               	goto	l901
  3508                           
  3509                           ; BSR set to: 0
  3510  000F4E  0E01               	movlw	1
  3511  000F50  0100               	movlb	0	; () banked
  3512  000F52  6FC3               	movwf	___llmod@counter& (0+255),b
  3513  000F54  D008               	goto	l2140
  3514  000F56                     l2138:
  3515                           
  3516                           ; BSR set to: 0
  3517  000F56  0100               	movlb	0	; () banked
  3518  000F58  90D8               	bcf	status,0,c
  3519  000F5A  37BF               	rlcf	___llmod@divisor& (0+255),f,b
  3520  000F5C  37C0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3521  000F5E  37C1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3522  000F60  37C2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3523  000F62  0100               	movlb	0	; () banked
  3524  000F64  2BC3               	incf	___llmod@counter& (0+255),f,b
  3525  000F66                     l2140:
  3526                           
  3527                           ; BSR set to: 0
  3528  000F66  0100               	movlb	0	; () banked
  3529  000F68  AFC2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3530  000F6A  D7F5               	goto	l2138
  3531  000F6C                     l2142:
  3532                           
  3533                           ; BSR set to: 0
  3534  000F6C  0100               	movlb	0	; () banked
  3535  000F6E  51BF               	movf	___llmod@divisor& (0+255),w,b
  3536  000F70  0100               	movlb	0	; () banked
  3537  000F72  5DBB               	subwf	___llmod@dividend& (0+255),w,b
  3538  000F74  0100               	movlb	0	; () banked
  3539  000F76  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3540  000F78  0100               	movlb	0	; () banked
  3541  000F7A  59BC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3542  000F7C  0100               	movlb	0	; () banked
  3543  000F7E  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3544  000F80  0100               	movlb	0	; () banked
  3545  000F82  59BD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3546  000F84  0100               	movlb	0	; () banked
  3547  000F86  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3548  000F88  0100               	movlb	0	; () banked
  3549  000F8A  59BE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3550  000F8C  A0D8               	btfss	status,0,c
  3551  000F8E  D010               	goto	l2146
  3552                           
  3553                           ; BSR set to: 0
  3554  000F90  0100               	movlb	0	; () banked
  3555  000F92  51BF               	movf	___llmod@divisor& (0+255),w,b
  3556  000F94  0100               	movlb	0	; () banked
  3557  000F96  5FBB               	subwf	___llmod@dividend& (0+255),f,b
  3558  000F98  0100               	movlb	0	; () banked
  3559  000F9A  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3560  000F9C  0100               	movlb	0	; () banked
  3561  000F9E  5BBC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3562  000FA0  0100               	movlb	0	; () banked
  3563  000FA2  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3564  000FA4  0100               	movlb	0	; () banked
  3565  000FA6  5BBD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3566  000FA8  0100               	movlb	0	; () banked
  3567  000FAA  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3568  000FAC  0100               	movlb	0	; () banked
  3569  000FAE  5BBE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3570  000FB0                     l2146:
  3571                           
  3572                           ; BSR set to: 0
  3573  000FB0  0100               	movlb	0	; () banked
  3574  000FB2  90D8               	bcf	status,0,c
  3575  000FB4  33C2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3576  000FB6  33C1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3577  000FB8  33C0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3578  000FBA  33BF               	rrcf	___llmod@divisor& (0+255),f,b
  3579                           
  3580                           ; BSR set to: 0
  3581  000FBC  0100               	movlb	0	; () banked
  3582  000FBE  2FC3               	decfsz	___llmod@counter& (0+255),f,b
  3583  000FC0  D7D5               	goto	l2142
  3584  000FC2                     l901:
  3585                           
  3586                           ; BSR set to: 0
  3587  000FC2  C0BB  F0BB         	movff	___llmod@dividend,?___llmod
  3588  000FC6  C0BC  F0BC         	movff	___llmod@dividend+1,?___llmod+1
  3589  000FCA  C0BD  F0BD         	movff	___llmod@dividend+2,?___llmod+2
  3590  000FCE  C0BE  F0BE         	movff	___llmod@dividend+3,?___llmod+3
  3591                           
  3592                           ; BSR set to: 0
  3593  000FD2  0012               	return		;funcret
  3594  000FD4                     __end_of___llmod:
  3595                           	opt stack 0
  3596                           tosu	equ	0xFFF
  3597                           tosh	equ	0xFFE
  3598                           tosl	equ	0xFFD
  3599                           pclath	equ	0xFFA
  3600                           tblptru	equ	0xFF8
  3601                           tblptrh	equ	0xFF7
  3602                           tblptrl	equ	0xFF6
  3603                           tablat	equ	0xFF5
  3604                           prodh	equ	0xFF4
  3605                           prodl	equ	0xFF3
  3606                           postinc0	equ	0xFEE
  3607                           wreg	equ	0xFE8
  3608                           postdec1	equ	0xFE5
  3609                           fsr1h	equ	0xFE2
  3610                           fsr1l	equ	0xFE1
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function _ES_Timer_InitTimer *****************
  3619 ;; Defined at:
  3620 ;;		line 229 in file "ES_Timers.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  Num             1    wreg     unsigned char 
  3623 ;;  NewTime         2    0[BANK0 ] unsigned int 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  Num             1    4[BANK0 ] unsigned char 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      enum E15473
  3628 ;; Registers used:
  3629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3635 ;;      Params:         0       2       0       0
  3636 ;;      Locals:         0       1       0       0
  3637 ;;      Temps:          0       2       0       0
  3638 ;;      Totals:         0       5       0       0
  3639 ;;Total ram usage:        5 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    6
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_ShowPattern
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text18
  3650  0010FA                     __ptext18:
  3651                           	opt stack 0
  3652  0010FA                     _ES_Timer_InitTimer:
  3653                           	opt stack 21
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;incstack = 0
  3657                           ;ES_Timer_InitTimer@Num stored from wreg
  3658  0010FA  0100               	movlb	0	; () banked
  3659  0010FC  6FBF               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  3660                           
  3661                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  3662                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  3663                           ;ES_Timers.c: 236: (NewTime == 0) )
  3664  0010FE  0E10               	movlw	16
  3665  001100  0100               	movlb	0	; () banked
  3666  001102  61BF               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  3667  001104  0012               	return	
  3668                           
  3669                           ; BSR set to: 0
  3670  001106  0100               	movlb	0	; () banked
  3671  001108  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3672  00110A  0D02               	mullw	2
  3673  00110C  0E21               	movlw	low _Timer2PostFunc
  3674  00110E  24F3               	addwf	prodl,w,c
  3675  001110  6EF6               	movwf	tblptrl,c
  3676  001112  0E03               	movlw	high _Timer2PostFunc
  3677  001114  20F4               	addwfc	prodh,w,c
  3678  001116  6EF7               	movwf	tblptrh,c
  3679  001118                     	if	0	;There are less than 3 active tblptr bytes
  3680  001118                     	endif
  3681  001118  0009               	tblrd		*+
  3682  00111A  50F5               	movf	tablat,w,c
  3683  00111C  0009               	tblrd		*+
  3684  00111E  10F5               	iorwf	tablat,w,c
  3685  001120  B4D8               	btfsc	status,2,c
  3686  001122  0012               	return	
  3687                           
  3688                           ; BSR set to: 0
  3689  001124  0100               	movlb	0	; () banked
  3690  001126  51BB               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  3691  001128  0100               	movlb	0	; () banked
  3692  00112A  11BC               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  3693  00112C  B4D8               	btfsc	status,2,c
  3694  00112E  0012               	return	
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  3698                           
  3699                           ; BSR set to: 0
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  3703                           ;	Return value of _ES_Timer_InitTimer is never used
  3704  001130  0100               	movlb	0	; () banked
  3705  001132  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3706  001134  0D02               	mullw	2
  3707  001136  0E60               	movlw	low _TMR_TimerArray
  3708  001138  24F3               	addwf	prodl,w,c
  3709  00113A  6ED9               	movwf	fsr2l,c
  3710  00113C  0E00               	movlw	high _TMR_TimerArray
  3711  00113E  20F4               	addwfc	prodh,w,c
  3712  001140  6EDA               	movwf	fsr2h,c
  3713  001142  C0BB  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  3714  001146  C0BC  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  3718  00114A  0100               	movlb	0	; () banked
  3719  00114C  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3720  00114E  0D02               	mullw	2
  3721  001150  0E01               	movlw	low _BitNum2SetMask
  3722  001152  24F3               	addwf	prodl,w,c
  3723  001154  6EF6               	movwf	tblptrl,c
  3724  001156  0E03               	movlw	high _BitNum2SetMask
  3725  001158  20F4               	addwfc	prodh,w,c
  3726  00115A  6EF7               	movwf	tblptrh,c
  3727  00115C                     	if	0	;There are less than 3 active tblptr bytes
  3728  00115C                     	endif
  3729  00115C  0009               	tblrd		*+
  3730  00115E  CFF5 F0BD          	movff	tablat,??_ES_Timer_InitTimer
  3731  001162  0009               	tblrd		*+
  3732  001164  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer+1
  3733  001168  0100               	movlb	0	; () banked
  3734  00116A  51BD               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  3735  00116C  0100               	movlb	0	; () banked
  3736  00116E  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  3737  001170  0100               	movlb	0	; () banked
  3738  001172  51BE               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  3739  001174  0100               	movlb	0	; () banked
  3740  001176  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  3741  001178  0012               	return	
  3742  00117A                     __end_of_ES_Timer_InitTimer:
  3743                           	opt stack 0
  3744                           tosu	equ	0xFFF
  3745                           tosh	equ	0xFFE
  3746                           tosl	equ	0xFFD
  3747                           pclath	equ	0xFFA
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           postinc0	equ	0xFEE
  3755                           wreg	equ	0xFE8
  3756                           postdec1	equ	0xFE5
  3757                           fsr1h	equ	0xFE2
  3758                           fsr1l	equ	0xFE1
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _DotStar_Show *****************
  3767 ;; Defined at:
  3768 ;;		line 66 in file "Pattern_DotStarLED.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  pixelPointer    2   38[BANK0 ] PTR unsigned long 
  3771 ;;		 -> PixelPattern(120), 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3783 ;;      Params:         0       2       0       0
  3784 ;;      Locals:         0       0       0       0
  3785 ;;      Temps:          0       0       0       0
  3786 ;;      Totals:         0       2       0       0
  3787 ;;Total ram usage:        2 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:   11
  3790 ;; This function calls:
  3791 ;;		_SPI32_TransmitFrames
  3792 ;;		_memcpy
  3793 ;; This function is called by:
  3794 ;;		_ShowPattern
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text19
  3799  0014B8                     __ptext19:
  3800                           	opt stack 0
  3801  0014B8                     _DotStar_Show:
  3802                           	opt stack 16
  3803                           
  3804                           ;Pattern_DotStarLED.c: 68: memcpy(PixelFrames+sizeof(uint32_t), pixelPointer, sizeof(uin
      +                          t32_t)*Length);
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;incstack = 0
  3808  0014B8  0E90               	movlw	low (_PixelFrames+16)
  3809  0014BA  0100               	movlb	0	; () banked
  3810  0014BC  6FBB               	movwf	memcpy@d1& (0+255),b
  3811  0014BE  0E01               	movlw	high (_PixelFrames+16)
  3812  0014C0  0100               	movlb	0	; () banked
  3813  0014C2  6FBC               	movwf	(memcpy@d1+1)& (0+255),b
  3814  0014C4  C0E1  F0BD         	movff	DotStar_Show@pixelPointer,memcpy@s1
  3815  0014C8  C0E2  F0BE         	movff	DotStar_Show@pixelPointer+1,memcpy@s1+1
  3816  0014CC  0100               	movlb	0	; () banked
  3817  0014CE  519B               	movf	_Length& (0+255),w,b
  3818  0014D0  0D04               	mullw	4
  3819  0014D2  CFF3 F0BF          	movff	prodl,memcpy@n
  3820  0014D6  CFF4 F0C0          	movff	prodh,memcpy@n+1
  3821  0014DA  ECF0  F009         	call	_memcpy	;wreg free
  3822                           
  3823                           ;Pattern_DotStarLED.c: 70: SPI32_TransmitFrames(PixelFrames,Length+2);
  3824  0014DE  0E80               	movlw	low _PixelFrames
  3825  0014E0  0100               	movlb	0	; () banked
  3826  0014E2  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  3827  0014E4  0E01               	movlw	high _PixelFrames
  3828  0014E6  0100               	movlb	0	; () banked
  3829  0014E8  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  3830  0014EA  0100               	movlb	0	; () banked
  3831  0014EC  519B               	movf	_Length& (0+255),w,b
  3832  0014EE  0F02               	addlw	2
  3833  0014F0  0100               	movlb	0	; () banked
  3834  0014F2  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  3835  0014F4  EC07  F00B         	call	_SPI32_TransmitFrames	;wreg free
  3836  0014F8  0012               	return		;funcret
  3837  0014FA                     __end_of_DotStar_Show:
  3838                           	opt stack 0
  3839                           tosu	equ	0xFFF
  3840                           tosh	equ	0xFFE
  3841                           tosl	equ	0xFFD
  3842                           pclath	equ	0xFFA
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _memcpy *****************
  3862 ;; Defined at:
  3863 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  d1              2    0[BANK0 ] PTR void 
  3866 ;;		 -> PixelFrames(128), 
  3867 ;;  s1              2    2[BANK0 ] PTR const void 
  3868 ;;		 -> PixelPattern(120), 
  3869 ;;  n               2    4[BANK0 ] unsigned int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  3872 ;;		 -> PixelPattern(120), 
  3873 ;;  d               2    6[BANK0 ] PTR unsigned char 
  3874 ;;		 -> PixelFrames(128), 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  2    0[BANK0 ] PTR void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3884 ;;      Params:         0       6       0       0
  3885 ;;      Locals:         0       4       0       0
  3886 ;;      Temps:          0       0       0       0
  3887 ;;      Totals:         0      10       0       0
  3888 ;;Total ram usage:       10 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    6
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_DotStar_Show
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           	psect	text20
  3899  0013E0                     __ptext20:
  3900                           	opt stack 0
  3901  0013E0                     _memcpy:
  3902                           	opt stack 20
  3903                           
  3904                           ;incstack = 0
  3905  0013E0  C0BD  F0C3         	movff	memcpy@s1,memcpy@s
  3906  0013E4  C0BE  F0C4         	movff	memcpy@s1+1,memcpy@s+1
  3907  0013E8  C0BB  F0C1         	movff	memcpy@d1,memcpy@d
  3908  0013EC  C0BC  F0C2         	movff	memcpy@d1+1,memcpy@d+1
  3909  0013F0  D010               	goto	l2094
  3910  0013F2                     l2088:
  3911  0013F2  C0C3  FFD9         	movff	memcpy@s,fsr2l
  3912  0013F6  C0C4  FFDA         	movff	memcpy@s+1,fsr2h
  3913  0013FA  C0C1  FFE1         	movff	memcpy@d,fsr1l
  3914  0013FE  C0C2  FFE2         	movff	memcpy@d+1,fsr1h
  3915  001402  CFDF FFE7          	movff	indf2,indf1
  3916  001406  0100               	movlb	0	; () banked
  3917  001408  4BC3               	infsnz	memcpy@s& (0+255),f,b
  3918  00140A  2BC4               	incf	(memcpy@s+1)& (0+255),f,b
  3919                           
  3920                           ; BSR set to: 0
  3921  00140C  0100               	movlb	0	; () banked
  3922  00140E  4BC1               	infsnz	memcpy@d& (0+255),f,b
  3923  001410  2BC2               	incf	(memcpy@d+1)& (0+255),f,b
  3924  001412                     l2094:
  3925  001412  0100               	movlb	0	; () banked
  3926  001414  07BF               	decf	memcpy@n& (0+255),f,b
  3927  001416  A0D8               	btfss	status,0,c
  3928  001418  07C0               	decf	(memcpy@n+1)& (0+255),f,b
  3929  00141A  0100               	movlb	0	; () banked
  3930  00141C  29BF               	incf	memcpy@n& (0+255),w,b
  3931  00141E  E1E9               	bnz	l2088
  3932  001420  0100               	movlb	0	; () banked
  3933  001422  29C0               	incf	(memcpy@n+1)& (0+255),w,b
  3934  001424  B4D8               	btfsc	status,2,c
  3935  001426  0012               	return	
  3936  001428  D7E4               	goto	l2088
  3937  00142A                     __end_of_memcpy:
  3938                           	opt stack 0
  3939                           tosu	equ	0xFFF
  3940                           tosh	equ	0xFFE
  3941                           tosl	equ	0xFFD
  3942                           pclath	equ	0xFFA
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           indf1	equ	0xFE7
  3952                           postdec1	equ	0xFE5
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _SPI32_TransmitFrames *****************
  3963 ;; Defined at:
  3964 ;;		line 229 in file "SPI32_ControlService.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  3967 ;;		 -> OffFrames(128), PixelFrames(128), 
  3968 ;;  numFrames       1   34[BANK0 ] unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3980 ;;      Params:         0       3       0       0
  3981 ;;      Locals:         0       3       0       0
  3982 ;;      Temps:          0       0       0       0
  3983 ;;      Totals:         0       6       0       0
  3984 ;;Total ram usage:        6 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:   10
  3987 ;; This function calls:
  3988 ;;		_PostSPI32ControlService
  3989 ;; This function is called by:
  3990 ;;		_DotStar_Show
  3991 ;;		_DotStar_Off
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text21
  3996  00160E                     __ptext21:
  3997                           	opt stack 0
  3998  00160E                     _SPI32_TransmitFrames:
  3999                           	opt stack 16
  4000                           
  4001                           ;SPI32_ControlService.c: 231: if(CurrentState == SPI32_Waiting4Send){
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;incstack = 0
  4005  00160E  0100               	movlb	0	; () banked
  4006  001610  0597               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  4007  001612  A4D8               	btfss	status,2,c
  4008  001614  0012               	return	
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;SPI32_ControlService.c: 233: FrameIndex = 0;
  4012  001616  0E00               	movlw	0
  4013  001618  0100               	movlb	0	; () banked
  4014  00161A  6F9A               	movwf	_FrameIndex& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;SPI32_ControlService.c: 235: FramePointer = framePointer;
  4018  00161C  C0DB  F08F         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  4019  001620  C0DC  F090         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;SPI32_ControlService.c: 237: NumFrames = numFrames;
  4023  001624  C0DD  F09D         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;SPI32_ControlService.c: 238: ES_Event transmitEvent;
  4027                           ;SPI32_ControlService.c: 239: transmitEvent.EventType = SPI32_TRANSMIT;
  4028  001628  0E09               	movlw	9
  4029  00162A  0100               	movlb	0	; () banked
  4030  00162C  6FDE               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;SPI32_ControlService.c: 240: PostSPI32ControlService(transmitEvent);
  4034  00162E  C0DE  F0D8         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  4035  001632  C0DF  F0D9         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  4036  001636  C0E0  F0DA         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  4037  00163A  EC85  F00B         	call	_PostSPI32ControlService	;wreg free
  4038  00163E  0012               	return	
  4039  001640                     __end_of_SPI32_TransmitFrames:
  4040                           	opt stack 0
  4041                           tosu	equ	0xFFF
  4042                           tosh	equ	0xFFE
  4043                           tosl	equ	0xFFD
  4044                           pclath	equ	0xFFA
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           postdec1	equ	0xFE5
  4055                           fsr1h	equ	0xFE2
  4056                           fsr1l	equ	0xFE1
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _PostPatternControlService *****************
  4065 ;; Defined at:
  4066 ;;		line 135 in file "Pattern_ControlService.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      unsigned char 
  4073 ;; Registers used:
  4074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4080 ;;      Params:         0       3       0       0
  4081 ;;      Locals:         0       0       0       0
  4082 ;;      Temps:          0       0       0       0
  4083 ;;      Totals:         0       3       0       0
  4084 ;;Total ram usage:        3 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    9
  4087 ;; This function calls:
  4088 ;;		_ES_PostToService
  4089 ;; This function is called by:
  4090 ;;		_RunPatternControlService
  4091 ;;		_ES_Timer_Tick_Resp
  4092 ;;		_PostToList
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text22
  4097  001758                     __ptext22:
  4098                           	opt stack 0
  4099  001758                     _PostPatternControlService:
  4100                           	opt stack 18
  4101                           
  4102                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  4103                           
  4104                           ;incstack = 0
  4105  001758  C0D8  F0D2         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  4106  00175C  C0D9  F0D3         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4107  001760  C0DA  F0D4         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4108  001764  0100               	movlb	0	; () banked
  4109  001766  519C               	movf	_MyPriority& (0+255),w,b
  4110  001768  ECF8  F008         	call	_ES_PostToService
  4111  00176C  0012               	return	
  4112  00176E                     __end_of_PostPatternControlService:
  4113                           	opt stack 0
  4114                           tosu	equ	0xFFF
  4115                           tosh	equ	0xFFE
  4116                           tosl	equ	0xFFD
  4117                           pclath	equ	0xFFA
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           indf1	equ	0xFE7
  4127                           postdec1	equ	0xFE5
  4128                           fsr1h	equ	0xFE2
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           postdec2	equ	0xFDD
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function _PostSPI32ControlService *****************
  4138 ;; Defined at:
  4139 ;;		line 117 in file "SPI32_ControlService.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      unsigned char 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4153 ;;      Params:         0       3       0       0
  4154 ;;      Locals:         0       0       0       0
  4155 ;;      Temps:          0       0       0       0
  4156 ;;      Totals:         0       3       0       0
  4157 ;;Total ram usage:        3 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    9
  4160 ;; This function calls:
  4161 ;;		_ES_PostToService
  4162 ;; This function is called by:
  4163 ;;		_SPI32_TransmitFrames
  4164 ;;		_ES_Timer_Tick_Resp
  4165 ;;		_PostToList
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text23
  4170  00170A                     __ptext23:
  4171                           	opt stack 0
  4172  00170A                     _PostSPI32ControlService:
  4173                           	opt stack 0
  4174                           
  4175                           ;Skip over the trampoline to the duplicate function for level 2
  4176  00170A  B23E               	btfsc	btemp,1,c
  4177  00170C  EFC2  F00B         	goto	i2_PostSPI32ControlService
  4178  001710                     _PostSPI32ControlService$intlevel0:
  4179                           	opt stack 18
  4180                           
  4181                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  4182                           
  4183                           ;incstack = 0
  4184  001710  C0D8  F0D2         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  4185  001714  C0D9  F0D3         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4186  001718  C0DA  F0D4         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4187  00171C  0100               	movlb	0	; () banked
  4188  00171E  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  4189  001720  ECF8  F008         	call	_ES_PostToService
  4190  001724  0012               	return	
  4191  001726                     __end_of_PostSPI32ControlService:
  4192                           	opt stack 0
  4193                           tosu	equ	0xFFF
  4194                           tosh	equ	0xFFE
  4195                           tosl	equ	0xFFD
  4196                           pclath	equ	0xFFA
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           indf1	equ	0xFE7
  4206                           postdec1	equ	0xFE5
  4207                           fsr1h	equ	0xFE2
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _PausePattern *****************
  4217 ;; Defined at:
  4218 ;;		line 293 in file "Pattern_ControlService.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4232 ;;      Params:         0       0       0       0
  4233 ;;      Locals:         0       0       0       0
  4234 ;;      Temps:          0       0       0       0
  4235 ;;      Totals:         0       0       0       0
  4236 ;;Total ram usage:        0 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		_ES_Timer_StopTimer
  4241 ;; This function is called by:
  4242 ;;		_RunPatternControlService
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text24
  4247  0017C8                     __ptext24:
  4248                           	opt stack 0
  4249  0017C8                     _PausePattern:
  4250                           	opt stack 21
  4251                           
  4252                           ;Pattern_ControlService.c: 295: ES_Timer_StopTimer(0);
  4253                           
  4254                           ;incstack = 0
  4255  0017C8  0E00               	movlw	0
  4256  0017CA  ECC9  F009         	call	_ES_Timer_StopTimer
  4257  0017CE  0012               	return		;funcret
  4258  0017D0                     __end_of_PausePattern:
  4259                           	opt stack 0
  4260                           tosu	equ	0xFFF
  4261                           tosh	equ	0xFFE
  4262                           tosl	equ	0xFFD
  4263                           pclath	equ	0xFFA
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodh	equ	0xFF4
  4269                           prodl	equ	0xFF3
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           indf1	equ	0xFE7
  4273                           postdec1	equ	0xFE5
  4274                           fsr1h	equ	0xFE2
  4275                           fsr1l	equ	0xFE1
  4276                           indf2	equ	0xFDF
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _ES_Timer_StopTimer *****************
  4284 ;; Defined at:
  4285 ;;		line 205 in file "ES_Timers.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  Num             1    wreg     unsigned char 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  Num             1    4[BANK0 ] unsigned char 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      enum E15473
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4299 ;;      Params:         0       0       0       0
  4300 ;;      Locals:         0       1       0       0
  4301 ;;      Temps:          0       4       0       0
  4302 ;;      Totals:         0       5       0       0
  4303 ;;Total ram usage:        5 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    6
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_StopPattern
  4310 ;;		_PausePattern
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text25
  4315  001392                     __ptext25:
  4316                           	opt stack 0
  4317  001392                     _ES_Timer_StopTimer:
  4318                           	opt stack 21
  4319                           
  4320                           ;incstack = 0
  4321                           ;ES_Timer_StopTimer@Num stored from wreg
  4322  001392  0100               	movlb	0	; () banked
  4323  001394  6FBF               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  4324                           
  4325                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  4326  001396  0E0F               	movlw	15
  4327  001398  0100               	movlb	0	; () banked
  4328  00139A  65BF               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  4329  00139C  D001               	goto	l2216
  4330  00139E  0012               	return	
  4331  0013A0                     l2216:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  4335  0013A0  0100               	movlb	0	; () banked
  4336  0013A2  51BF               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  4337  0013A4  0D02               	mullw	2
  4338  0013A6  0E01               	movlw	low _BitNum2SetMask
  4339  0013A8  24F3               	addwf	prodl,w,c
  4340  0013AA  6EF6               	movwf	tblptrl,c
  4341  0013AC  0E03               	movlw	high _BitNum2SetMask
  4342  0013AE  20F4               	addwfc	prodh,w,c
  4343  0013B0  6EF7               	movwf	tblptrh,c
  4344  0013B2                     	if	0	;There are less than 3 active tblptr bytes
  4345  0013B2                     	endif
  4346  0013B2  0009               	tblrd		*+
  4347  0013B4  CFF5 F0BB          	movff	tablat,??_ES_Timer_StopTimer
  4348  0013B8  0009               	tblrd		*+
  4349  0013BA  CFF5 F0BC          	movff	tablat,??_ES_Timer_StopTimer+1
  4350  0013BE  0100               	movlb	0	; () banked
  4351  0013C0  1DBB               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  4352  0013C2  0100               	movlb	0	; () banked
  4353  0013C4  6FBD               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  4354  0013C6  0100               	movlb	0	; () banked
  4355  0013C8  1DBC               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  4356  0013CA  0100               	movlb	0	; () banked
  4357  0013CC  6FBE               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  4358  0013CE  0100               	movlb	0	; () banked
  4359  0013D0  51BD               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  4360  0013D2  0100               	movlb	0	; () banked
  4361  0013D4  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  4362  0013D6  0100               	movlb	0	; () banked
  4363  0013D8  51BE               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  4364  0013DA  0100               	movlb	0	; () banked
  4365  0013DC  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4366  0013DE  0012               	return	
  4367  0013E0                     __end_of_ES_Timer_StopTimer:
  4368                           	opt stack 0
  4369                           tosu	equ	0xFFF
  4370                           tosh	equ	0xFFE
  4371                           tosl	equ	0xFFD
  4372                           pclath	equ	0xFFA
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           postinc0	equ	0xFEE
  4380                           wreg	equ	0xFE8
  4381                           indf1	equ	0xFE7
  4382                           postdec1	equ	0xFE5
  4383                           fsr1h	equ	0xFE2
  4384                           fsr1l	equ	0xFE1
  4385                           indf2	equ	0xFDF
  4386                           postinc2	equ	0xFDE
  4387                           postdec2	equ	0xFDD
  4388                           fsr2h	equ	0xFDA
  4389                           fsr2l	equ	0xFD9
  4390                           status	equ	0xFD8
  4391                           
  4392 ;; *************** function _ES_DeQueue *****************
  4393 ;; Defined at:
  4394 ;;		line 164 in file "ES_Queue.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4397 ;;		 -> Queue1(12), Queue0(12), 
  4398 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  4399 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  4402 ;;		 -> Queue1(12), Queue0(12), 
  4403 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  4404 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      unsigned char 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4414 ;;      Params:         0       4       0       0
  4415 ;;      Locals:         0       4       0       0
  4416 ;;      Temps:          0       2       0       0
  4417 ;;      Totals:         0      10       0       0
  4418 ;;Total ram usage:       10 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    7
  4421 ;; This function calls:
  4422 ;;		___lbmod
  4423 ;;		___wmul
  4424 ;; This function is called by:
  4425 ;;		_ES_Run
  4426 ;;		_ES_RecallEvents
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text26
  4431  00050A                     __ptext26:
  4432                           	opt stack 0
  4433  00050A                     _ES_DeQueue:
  4434                           	opt stack 22
  4435                           
  4436                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  4437                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  4438                           ;ES_Queue.c: 168: uint8_t NumLeft;
  4439                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;incstack = 0
  4443  00050A  C0C7  F0CF         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  4444  00050E  C0C8  F0D0         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  4445                           
  4446                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  4447  000512  0100               	movlb	0	; () banked
  4448  000514  EE20 F002          	lfsr	2,2
  4449  000518  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4450  00051A  26D9               	addwf	fsr2l,f,c
  4451  00051C  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4452  00051E  22DA               	addwfc	fsr2h,f,c
  4453  000520  50DF               	movf	indf2,w,c
  4454  000522  B4D8               	btfsc	status,2,c
  4455  000524  D06F               	goto	l2420
  4456                           
  4457                           ; BSR set to: 0
  4458                           
  4459                           ;ES_Queue.c: 172: {
  4460                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4461  000526  CFF2 F0CD          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  4462  00052A  9EF2               	bcf	intcon,7,c	;volatile
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  4466                           
  4467                           ; BSR set to: 0
  4468  00052C  0100               	movlb	0	; () banked
  4469  00052E  EE20 F001          	lfsr	2,1
  4470  000532  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4471  000534  26D9               	addwf	fsr2l,f,c
  4472  000536  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4473  000538  22DA               	addwfc	fsr2h,f,c
  4474  00053A  50DF               	movf	indf2,w,c
  4475  00053C  0100               	movlb	0	; () banked
  4476  00053E  6FCB               	movwf	??_ES_DeQueue& (0+255),b
  4477  000540  0E01               	movlw	1
  4478  000542  0100               	movlb	0	; () banked
  4479  000544  25CB               	addwf	??_ES_DeQueue& (0+255),w,b
  4480  000546  0100               	movlb	0	; () banked
  4481  000548  6FC1               	movwf	___wmul@multiplier& (0+255),b
  4482  00054A  0100               	movlb	0	; () banked
  4483  00054C  6BC2               	clrf	(___wmul@multiplier+1)& (0+255),b
  4484  00054E  0E00               	movlw	0
  4485  000550  23C2               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  4486  000552  0E00               	movlw	0
  4487  000554  0100               	movlb	0	; () banked
  4488  000556  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4489  000558  0E03               	movlw	3
  4490  00055A  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  4491  00055C  ECB8  F00A         	call	___wmul	;wreg free
  4492  000560  0100               	movlb	0	; () banked
  4493  000562  51C1               	movf	?___wmul& (0+255),w,b
  4494  000564  0100               	movlb	0	; () banked
  4495  000566  25C7               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  4496  000568  6ED9               	movwf	fsr2l,c
  4497  00056A  0100               	movlb	0	; () banked
  4498  00056C  51C2               	movf	(?___wmul+1)& (0+255),w,b
  4499  00056E  0100               	movlb	0	; () banked
  4500  000570  21C8               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  4501  000572  6EDA               	movwf	fsr2h,c
  4502  000574  C0C9  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  4503  000578  C0CA  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  4504  00057C  CFDE FFE6          	movff	postinc2,postinc1
  4505  000580  CFDE FFE6          	movff	postinc2,postinc1
  4506  000584  CFDE FFE6          	movff	postinc2,postinc1
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  4510  000588  0100               	movlb	0	; () banked
  4511  00058A  EE20 F001          	lfsr	2,1
  4512  00058E  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4513  000590  26D9               	addwf	fsr2l,f,c
  4514  000592  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4515  000594  22DA               	addwfc	fsr2h,f,c
  4516  000596  2ADF               	incf	indf2,f,c
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  4520  000598  C0CF  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  4521  00059C  C0D0  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  4522  0005A0  0100               	movlb	0	; () banked
  4523  0005A2  EE10 F001          	lfsr	1,1
  4524  0005A6  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4525  0005A8  26E1               	addwf	fsr1l,f,c
  4526  0005AA  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4527  0005AC  22E2               	addwfc	fsr1h,f,c
  4528  0005AE  50DE               	movf	postinc2,w,c
  4529  0005B0  5CE6               	subwf	postinc1,w,c
  4530  0005B2  A0D8               	btfss	status,0,c
  4531  0005B4  D019               	goto	l2416
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  4535  0005B6  0100               	movlb	0	; () banked
  4536  0005B8  EE20 F001          	lfsr	2,1
  4537  0005BC  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4538  0005BE  26D9               	addwf	fsr2l,f,c
  4539  0005C0  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4540  0005C2  22DA               	addwfc	fsr2h,f,c
  4541  0005C4  C0CF  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  4542  0005C8  C0D0  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  4543  0005CC  50E7               	movf	indf1,w,c
  4544  0005CE  0100               	movlb	0	; () banked
  4545  0005D0  6FBB               	movwf	___lbmod@divisor& (0+255),b
  4546  0005D2  0100               	movlb	0	; () banked
  4547  0005D4  EE10 F001          	lfsr	1,1
  4548  0005D8  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4549  0005DA  26E1               	addwf	fsr1l,f,c
  4550  0005DC  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4551  0005DE  22E2               	addwfc	fsr1h,f,c
  4552  0005E0  50E7               	movf	indf1,w,c
  4553  0005E2  EC3A  F00A         	call	___lbmod
  4554  0005E6  6EDF               	movwf	indf2,c
  4555  0005E8                     l2416:
  4556                           
  4557                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  4558  0005E8  0100               	movlb	0	; () banked
  4559  0005EA  EE20 F002          	lfsr	2,2
  4560  0005EE  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4561  0005F0  26D9               	addwf	fsr2l,f,c
  4562  0005F2  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4563  0005F4  22DA               	addwfc	fsr2h,f,c
  4564  0005F6  06DF               	decf	indf2,f,c
  4565  0005F8  50DF               	movf	indf2,w,c
  4566  0005FA  0100               	movlb	0	; () banked
  4567  0005FC  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  4571  0005FE  C0CD  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  4572                           
  4573                           ;ES_Queue.c: 183: }else {
  4574  000602  D014               	goto	l2426
  4575  000604                     l2420:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  4579  000604  C0C9  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  4580  000608  C0CA  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  4581  00060C  0E00               	movlw	0
  4582  00060E  6EDF               	movwf	indf2,c
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  4586  000610  0100               	movlb	0	; () banked
  4587  000612  EE20 F001          	lfsr	2,1
  4588  000616  51C9               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  4589  000618  26D9               	addwf	fsr2l,f,c
  4590  00061A  51CA               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  4591  00061C  22DA               	addwfc	fsr2h,f,c
  4592  00061E  0E00               	movlw	0
  4593  000620  6EDE               	movwf	postinc2,c
  4594  000622  0E00               	movlw	0
  4595  000624  6EDD               	movwf	postdec2,c
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;ES_Queue.c: 186: NumLeft = 0;
  4599  000626  0E00               	movlw	0
  4600  000628  0100               	movlb	0	; () banked
  4601  00062A  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4602  00062C                     l2426:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;ES_Queue.c: 187: }
  4606                           ;ES_Queue.c: 188: return NumLeft;
  4607  00062C  0100               	movlb	0	; () banked
  4608  00062E  51CE               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  4609  000630  0012               	return	
  4610  000632                     __end_of_ES_DeQueue:
  4611                           	opt stack 0
  4612                           tosu	equ	0xFFF
  4613                           tosh	equ	0xFFE
  4614                           tosl	equ	0xFFD
  4615                           pclath	equ	0xFFA
  4616                           tblptru	equ	0xFF8
  4617                           tblptrh	equ	0xFF7
  4618                           tblptrl	equ	0xFF6
  4619                           tablat	equ	0xFF5
  4620                           prodh	equ	0xFF4
  4621                           prodl	equ	0xFF3
  4622                           intcon	equ	0xFF2
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           indf1	equ	0xFE7
  4626                           postinc1	equ	0xFE6
  4627                           postdec1	equ	0xFE5
  4628                           fsr1h	equ	0xFE2
  4629                           fsr1l	equ	0xFE1
  4630                           indf2	equ	0xFDF
  4631                           postinc2	equ	0xFDE
  4632                           postdec2	equ	0xFDD
  4633                           fsr2h	equ	0xFDA
  4634                           fsr2l	equ	0xFD9
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function ___lbmod *****************
  4638 ;; Defined at:
  4639 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  dividend        1    wreg     unsigned char 
  4642 ;;  divisor         1    0[BANK0 ] unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  dividend        1    1[BANK0 ] unsigned char 
  4645 ;;  rem             1    3[BANK0 ] unsigned char 
  4646 ;;  counter         1    2[BANK0 ] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      unsigned char 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4656 ;;      Params:         0       1       0       0
  4657 ;;      Locals:         0       3       0       0
  4658 ;;      Temps:          0       0       0       0
  4659 ;;      Totals:         0       4       0       0
  4660 ;;Total ram usage:        4 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    6
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_ES_DeQueue
  4667 ;;		_UpdatePattern
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text27
  4672  001474                     __ptext27:
  4673                           	opt stack 0
  4674  001474                     ___lbmod:
  4675                           	opt stack 20
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;incstack = 0
  4679                           ;___lbmod@dividend stored from wreg
  4680  001474  0100               	movlb	0	; () banked
  4681  001476  6FBC               	movwf	___lbmod@dividend& (0+255),b
  4682  001478  0E08               	movlw	8
  4683  00147A  0100               	movlb	0	; () banked
  4684  00147C  6FBD               	movwf	___lbmod@counter& (0+255),b
  4685  00147E  0E00               	movlw	0
  4686  001480  0100               	movlb	0	; () banked
  4687  001482  6FBE               	movwf	___lbmod@rem& (0+255),b
  4688  001484                     l2120:
  4689                           
  4690                           ; BSR set to: 0
  4691  001484  90D8               	bcf	status,0,c
  4692  001486  0100               	movlb	0	; () banked
  4693  001488  35BC               	rlcf	___lbmod@dividend& (0+255),w,b
  4694  00148A  0100               	movlb	0	; () banked
  4695  00148C  35BE               	rlcf	___lbmod@rem& (0+255),w,b
  4696  00148E  0100               	movlb	0	; () banked
  4697  001490  6FBE               	movwf	___lbmod@rem& (0+255),b
  4698                           
  4699                           ; BSR set to: 0
  4700  001492  0100               	movlb	0	; () banked
  4701  001494  90D8               	bcf	status,0,c
  4702  001496  37BC               	rlcf	___lbmod@dividend& (0+255),f,b
  4703                           
  4704                           ; BSR set to: 0
  4705  001498  0100               	movlb	0	; () banked
  4706  00149A  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4707  00149C  0100               	movlb	0	; () banked
  4708  00149E  5DBE               	subwf	___lbmod@rem& (0+255),w,b
  4709  0014A0  A0D8               	btfss	status,0,c
  4710  0014A2  D004               	goto	l2128
  4711                           
  4712                           ; BSR set to: 0
  4713  0014A4  0100               	movlb	0	; () banked
  4714  0014A6  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4715  0014A8  0100               	movlb	0	; () banked
  4716  0014AA  5FBE               	subwf	___lbmod@rem& (0+255),f,b
  4717  0014AC                     l2128:
  4718                           
  4719                           ; BSR set to: 0
  4720  0014AC  0100               	movlb	0	; () banked
  4721  0014AE  2FBD               	decfsz	___lbmod@counter& (0+255),f,b
  4722  0014B0  D7E9               	goto	l2120
  4723                           
  4724                           ; BSR set to: 0
  4725                           
  4726                           ; BSR set to: 0
  4727  0014B2  0100               	movlb	0	; () banked
  4728  0014B4  51BE               	movf	___lbmod@rem& (0+255),w,b
  4729  0014B6  0012               	return	
  4730  0014B8                     __end_of___lbmod:
  4731                           	opt stack 0
  4732                           tosu	equ	0xFFF
  4733                           tosh	equ	0xFFE
  4734                           tosl	equ	0xFFD
  4735                           pclath	equ	0xFFA
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           intcon	equ	0xFF2
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           indf1	equ	0xFE7
  4746                           postinc1	equ	0xFE6
  4747                           postdec1	equ	0xFE5
  4748                           fsr1h	equ	0xFE2
  4749                           fsr1l	equ	0xFE1
  4750                           indf2	equ	0xFDF
  4751                           postinc2	equ	0xFDE
  4752                           postdec2	equ	0xFDD
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function _ES_CheckUserEvents *****************
  4758 ;; Defined at:
  4759 ;;		line 46 in file "ES_CheckEvents.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  i               1    0[BANK0 ] unsigned char 
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      unsigned char 
  4766 ;; Registers used:
  4767 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4773 ;;      Params:         0       0       0       0
  4774 ;;      Locals:         0       1       0       0
  4775 ;;      Temps:          0       0       0       0
  4776 ;;      Totals:         0       1       0       0
  4777 ;;Total ram usage:        1 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; Hardware stack levels required when called:    7
  4780 ;; This function calls:
  4781 ;;		_Check4Keystroke
  4782 ;; This function is called by:
  4783 ;;		_ES_Run
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text28
  4788  00142A                     __ptext28:
  4789                           	opt stack 0
  4790  00142A                     _ES_CheckUserEvents:
  4791                           	opt stack 22
  4792                           
  4793                           ;ES_CheckEvents.c: 48: uint8_t i;
  4794                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;incstack = 0
  4798  00142A  0E00               	movlw	0
  4799  00142C  0100               	movlb	0	; () banked
  4800  00142E  6FBB               	movwf	ES_CheckUserEvents@i& (0+255),b
  4801  001430  0100               	movlb	0	; () banked
  4802  001432  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4803  001434  0100               	movlb	0	; () banked
  4804  001436  A4D8               	btfss	status,2,c
  4805  001438  0012               	return	
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  4809                           
  4810                           ; BSR set to: 0
  4811                           
  4812                           ; BSR set to: 0
  4813  00143A  0100               	movlb	0	; () banked
  4814  00143C  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4815  00143E  0D02               	mullw	2
  4816  001440  0E5E               	movlw	low _ES_EventList
  4817  001442  24F3               	addwf	prodl,w,c
  4818  001444  6EF6               	movwf	tblptrl,c
  4819  001446  0E03               	movlw	high _ES_EventList
  4820  001448  20F4               	addwfc	prodh,w,c
  4821  00144A  6EF7               	movwf	tblptrh,c
  4822  00144C                     	if	0	;There are less than 3 active tblptr bytes
  4823  00144C                     	endif
  4824  00144C  D801               	call	u1448
  4825  00144E  D00C               	goto	u1449
  4826  001450                     u1448:
  4827  001450  0005               	push	
  4828  001452  6EFA               	movwf	pclath,c
  4829  001454  0009               	tblrd		*+
  4830  001456  50F5               	movf	tablat,w,c
  4831  001458  6EFD               	movwf	tosl,c
  4832  00145A  0009               	tblrd		*+
  4833  00145C  50F5               	movf	tablat,w,c
  4834  00145E  6EFE               	movwf	tosh,c
  4835  001460  50F8               	movf	tblptru,w,c
  4836  001462  6EFF               	movwf	tosu,c
  4837  001464  50FA               	movf	pclath,w,c
  4838  001466  0012               	return		;indir
  4839  001468                     u1449:
  4840  001468  06E8               	decf	wreg,f,c
  4841  00146A  B4D8               	btfsc	status,2,c
  4842  00146C  0012               	return	
  4843                           
  4844                           ;ES_CheckEvents.c: 52: break;
  4845  00146E  0100               	movlb	0	; () banked
  4846  001470  2BBB               	incf	ES_CheckUserEvents@i& (0+255),f,b
  4847  001472  D7DE               	goto	L11
  4848  001474                     __end_of_ES_CheckUserEvents:
  4849                           	opt stack 0
  4850                           tosu	equ	0xFFF
  4851                           tosh	equ	0xFFE
  4852                           tosl	equ	0xFFD
  4853                           pclath	equ	0xFFA
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           intcon	equ	0xFF2
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           indf1	equ	0xFE7
  4864                           postinc1	equ	0xFE6
  4865                           postdec1	equ	0xFE5
  4866                           fsr1h	equ	0xFE2
  4867                           fsr1l	equ	0xFE1
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           postdec2	equ	0xFDD
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _Check4Keystroke *****************
  4876 ;; Defined at:
  4877 ;;		line 62 in file "EventCheckers.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;		None
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  1    wreg      unsigned char 
  4884 ;; Registers used:
  4885 ;;		wreg
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4891 ;;      Params:         0       0       0       0
  4892 ;;      Locals:         0       0       0       0
  4893 ;;      Temps:          0       0       0       0
  4894 ;;      Totals:         0       0       0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    6
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_ES_CheckUserEvents
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text29
  4906  0017DC                     __ptext29:
  4907                           	opt stack 0
  4908  0017DC                     _Check4Keystroke:
  4909                           	opt stack 22
  4910                           
  4911                           ;EventCheckers.c: 78: return 0;
  4912                           
  4913                           ;incstack = 0
  4914  0017DC  0E00               	movlw	0
  4915  0017DE  0012               	return	
  4916  0017E0                     __end_of_Check4Keystroke:
  4917                           	opt stack 0
  4918                           tosu	equ	0xFFF
  4919                           tosh	equ	0xFFE
  4920                           tosl	equ	0xFFD
  4921                           pclath	equ	0xFFA
  4922                           tblptru	equ	0xFF8
  4923                           tblptrh	equ	0xFF7
  4924                           tblptrl	equ	0xFF6
  4925                           tablat	equ	0xFF5
  4926                           prodh	equ	0xFF4
  4927                           prodl	equ	0xFF3
  4928                           intcon	equ	0xFF2
  4929                           postinc0	equ	0xFEE
  4930                           wreg	equ	0xFE8
  4931                           indf1	equ	0xFE7
  4932                           postinc1	equ	0xFE6
  4933                           postdec1	equ	0xFE5
  4934                           fsr1h	equ	0xFE2
  4935                           fsr1l	equ	0xFE1
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _ES_Initialize *****************
  4944 ;; Defined at:
  4945 ;;		line 242 in file "ES_Framework.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  NewRate         2   33[BANK0 ] enum E15424
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  i               1   35[BANK0 ] unsigned char 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      enum E15495
  4952 ;; Registers used:
  4953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4959 ;;      Params:         0       2       0       0
  4960 ;;      Locals:         0       1       0       0
  4961 ;;      Temps:          0       0       0       0
  4962 ;;      Totals:         0       3       0       0
  4963 ;;Total ram usage:        3 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:   10
  4966 ;; This function calls:
  4967 ;;		_ES_InitQueue
  4968 ;;		_ES_Timer_Init
  4969 ;;		_InitPatternControlService
  4970 ;;		_InitSPI32ControlService
  4971 ;; This function is called by:
  4972 ;;		_main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text30
  4977  000938                     __ptext30:
  4978                           	opt stack 0
  4979  000938                     _ES_Initialize:
  4980                           	opt stack 20
  4981                           
  4982                           ;ES_Framework.c: 243: uint8_t i;
  4983                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4984                           
  4985                           ;incstack = 0
  4986  000938  C0DC  F0BD         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4987  00093C  C0DD  F0BE         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4988  000940  ECD4  F00B         	call	_ES_Timer_Init	;wreg free
  4989                           
  4990                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4991  000944  0E00               	movlw	0
  4992  000946  0100               	movlb	0	; () banked
  4993  000948  6FDE               	movwf	ES_Initialize@i& (0+255),b
  4994  00094A                     l2598:
  4995                           
  4996                           ; BSR set to: 0
  4997  00094A  0E01               	movlw	1
  4998  00094C  0100               	movlb	0	; () banked
  4999  00094E  65DE               	cpfsgt	ES_Initialize@i& (0+255),b
  5000  000950  D001               	goto	l2602
  5001  000952  D066               	goto	l2622
  5002  000954                     l2602:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  5006                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  5007  000954  0100               	movlb	0	; () banked
  5008  000956  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5009  000958  0D04               	mullw	4
  5010  00095A  0E50               	movlw	low _ServDescList
  5011  00095C  24F3               	addwf	prodl,w,c
  5012  00095E  6EF6               	movwf	tblptrl,c
  5013  000960  0E03               	movlw	high _ServDescList
  5014  000962  20F4               	addwfc	prodh,w,c
  5015  000964  6EF7               	movwf	tblptrh,c
  5016  000966                     	if	0	;There are less than 3 active tblptr bytes
  5017  000966                     	endif
  5018  000966  0009               	tblrd		*+
  5019  000968  50F5               	movf	tablat,w,c
  5020  00096A  0009               	tblrd		*+
  5021  00096C  10F5               	iorwf	tablat,w,c
  5022  00096E  B4D8               	btfsc	status,2,c
  5023  000970  D013               	goto	l2606
  5024                           
  5025                           ; BSR set to: 0
  5026  000972  0100               	movlb	0	; () banked
  5027  000974  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5028  000976  0D04               	mullw	4
  5029  000978  0E02               	movlw	2
  5030  00097A  26F3               	addwf	prodl,f,c
  5031  00097C  0E00               	movlw	0
  5032  00097E  22F4               	addwfc	prodh,f,c
  5033  000980  0E50               	movlw	low _ServDescList
  5034  000982  24F3               	addwf	prodl,w,c
  5035  000984  6EF6               	movwf	tblptrl,c
  5036  000986  0E03               	movlw	high _ServDescList
  5037  000988  20F4               	addwfc	prodh,w,c
  5038  00098A  6EF7               	movwf	tblptrh,c
  5039  00098C                     	if	0	;There are less than 3 active tblptr bytes
  5040  00098C                     	endif
  5041  00098C  0009               	tblrd		*+
  5042  00098E  50F5               	movf	tablat,w,c
  5043  000990  0009               	tblrd		*+
  5044  000992  10F5               	iorwf	tablat,w,c
  5045  000994  A4D8               	btfss	status,2,c
  5046  000996  D002               	goto	l2610
  5047  000998                     l2606:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;ES_Framework.c: 249: return FailedPointer;
  5051  000998  0E03               	movlw	3
  5052                           
  5053                           ; BSR set to: 0
  5054  00099A  0012               	return	
  5055  00099C                     l2610:
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  5059  00099C  0100               	movlb	0	; () banked
  5060  00099E  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5061  0009A0  0D03               	mullw	3
  5062  0009A2  0E58               	movlw	low _EventQueues
  5063  0009A4  24F3               	addwf	prodl,w,c
  5064  0009A6  6EF6               	movwf	tblptrl,c
  5065  0009A8  0E03               	movlw	high _EventQueues
  5066  0009AA  20F4               	addwfc	prodh,w,c
  5067  0009AC  6EF7               	movwf	tblptrh,c
  5068  0009AE                     	if	0	;There are less than 3 active tblptr bytes
  5069  0009AE                     	endif
  5070  0009AE  0009               	tblrd		*+
  5071  0009B0  CFF5 F0BB          	movff	tablat,ES_InitQueue@pBlock
  5072  0009B4  000A               	tblrd		*-
  5073  0009B6  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock+1
  5074  0009BA  0100               	movlb	0	; () banked
  5075  0009BC  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5076  0009BE  0D03               	mullw	3
  5077  0009C0  0E02               	movlw	2
  5078  0009C2  26F3               	addwf	prodl,f,c
  5079  0009C4  0E00               	movlw	0
  5080  0009C6  22F4               	addwfc	prodh,f,c
  5081  0009C8  0E58               	movlw	low _EventQueues
  5082  0009CA  24F3               	addwf	prodl,w,c
  5083  0009CC  6EF6               	movwf	tblptrl,c
  5084  0009CE  0E03               	movlw	high _EventQueues
  5085  0009D0  20F4               	addwfc	prodh,w,c
  5086  0009D2  6EF7               	movwf	tblptrh,c
  5087  0009D4                     	if	0	;There are less than 3 active tblptr bytes
  5088  0009D4                     	endif
  5089  0009D4  0008               	tblrd		*
  5090  0009D6  CFF5 F0BD          	movff	tablat,ES_InitQueue@BlockSize
  5091  0009DA  EC7D  F00A         	call	_ES_InitQueue	;wreg free
  5092                           
  5093                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5094  0009DE  0100               	movlb	0	; () banked
  5095  0009E0  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5096  0009E2  0D04               	mullw	4
  5097  0009E4  0E50               	movlw	low _ServDescList
  5098  0009E6  24F3               	addwf	prodl,w,c
  5099  0009E8  6EF6               	movwf	tblptrl,c
  5100  0009EA  0E03               	movlw	high _ServDescList
  5101  0009EC  20F4               	addwfc	prodh,w,c
  5102  0009EE  6EF7               	movwf	tblptrh,c
  5103  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  5104  0009F0                     	endif
  5105  0009F0  D801               	call	u1698
  5106  0009F2  D00E               	goto	u1699
  5107  0009F4                     u1698:
  5108  0009F4  0005               	push	
  5109  0009F6  6EFA               	movwf	pclath,c
  5110  0009F8  0009               	tblrd		*+
  5111  0009FA  50F5               	movf	tablat,w,c
  5112  0009FC  6EFD               	movwf	tosl,c
  5113  0009FE  0009               	tblrd		*+
  5114  000A00  50F5               	movf	tablat,w,c
  5115  000A02  6EFE               	movwf	tosh,c
  5116  000A04  50F8               	movf	tblptru,w,c
  5117  000A06  6EFF               	movwf	tosu,c
  5118  000A08  50FA               	movf	pclath,w,c
  5119  000A0A  0100               	movlb	0	; () banked
  5120  000A0C  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5121  000A0E  0012               	return		;indir
  5122  000A10                     u1699:
  5123  000A10  06E8               	decf	wreg,f,c
  5124  000A12  B4D8               	btfsc	status,2,c
  5125  000A14  D002               	goto	l2618
  5126                           
  5127                           ;ES_Framework.c: 254: return FailedInit;
  5128  000A16  0E05               	movlw	5
  5129  000A18  0012               	return	
  5130  000A1A                     l2618:
  5131  000A1A  0100               	movlb	0	; () banked
  5132  000A1C  2BDE               	incf	ES_Initialize@i& (0+255),f,b
  5133  000A1E  D795               	goto	l2598
  5134  000A20                     l2622:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;ES_Framework.c: 255: }
  5138                           ;ES_Framework.c: 256: return Success;
  5139  000A20  0E00               	movlw	0
  5140  000A22  0012               	return	
  5141  000A24                     __end_of_ES_Initialize:
  5142                           	opt stack 0
  5143                           tosu	equ	0xFFF
  5144                           tosh	equ	0xFFE
  5145                           tosl	equ	0xFFD
  5146                           pclath	equ	0xFFA
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           indf1	equ	0xFE7
  5157                           postinc1	equ	0xFE6
  5158                           postdec1	equ	0xFE5
  5159                           fsr1h	equ	0xFE2
  5160                           fsr1l	equ	0xFE1
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function _InitPatternControlService *****************
  5169 ;; Defined at:
  5170 ;;		line 97 in file "Pattern_ControlService.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  Priority        1    wreg     unsigned char 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  Priority        1   32[BANK0 ] unsigned char 
  5175 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      unsigned char 
  5178 ;; Registers used:
  5179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5185 ;;      Params:         0       0       0       0
  5186 ;;      Locals:         0       4       0       0
  5187 ;;      Temps:          0       0       0       0
  5188 ;;      Totals:         0       4       0       0
  5189 ;;Total ram usage:        4 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    9
  5192 ;; This function calls:
  5193 ;;		_DotStar_Init
  5194 ;;		_ES_PostToService
  5195 ;;		_SetupPattern
  5196 ;; This function is called by:
  5197 ;;		_ES_Initialize
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text31
  5202  001340                     __ptext31:
  5203                           	opt stack 0
  5204  001340                     _InitPatternControlService:
  5205                           	opt stack 20
  5206                           
  5207                           ;incstack = 0
  5208                           ;InitPatternControlService@Priority stored from wreg
  5209  001340  0100               	movlb	0	; () banked
  5210  001342  6FDB               	movwf	InitPatternControlService@Priority& (0+255),b
  5211                           
  5212                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  5213                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  5214  001344  C0DB  F09C         	movff	InitPatternControlService@Priority,_MyPriority
  5215                           
  5216                           ;Pattern_ControlService.c: 103: DotStar_Init(11);
  5217  001348  0E0B               	movlw	11
  5218  00134A  EC83  F005         	call	_DotStar_Init
  5219                           
  5220                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 11);
  5221  00134E  0EF2               	movlw	low _PatternConfigs
  5222  001350  0100               	movlb	0	; () banked
  5223  001352  6FBB               	movwf	SetupPattern@configs& (0+255),b
  5224  001354  0E00               	movlw	high _PatternConfigs
  5225  001356  0100               	movlb	0	; () banked
  5226  001358  6FBC               	movwf	(SetupPattern@configs+1)& (0+255),b
  5227  00135A  0E0B               	movlw	11
  5228  00135C  0100               	movlb	0	; () banked
  5229  00135E  6FBD               	movwf	SetupPattern@numPixels& (0+255),b
  5230  001360  ECCD  F00B         	call	_SetupPattern	;wreg free
  5231                           
  5232                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  5233  001364  0E00               	movlw	0
  5234  001366  0100               	movlb	0	; () banked
  5235  001368  6F99               	movwf	_CurrentState& (0+255),b
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  5239  00136A  0E02               	movlw	2
  5240  00136C  0100               	movlb	0	; () banked
  5241  00136E  6FD8               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5245  001370  C0D8  F0D2         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  5246  001374  C0D9  F0D3         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5247  001378  C0DA  F0D4         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5248  00137C  0100               	movlb	0	; () banked
  5249  00137E  519C               	movf	_MyPriority& (0+255),w,b
  5250  001380  ECF8  F008         	call	_ES_PostToService
  5251  001384  06E8               	decf	wreg,f,c
  5252  001386  A4D8               	btfss	status,2,c
  5253  001388  D002               	goto	l2472
  5254                           
  5255                           ;Pattern_ControlService.c: 110: {
  5256                           ;Pattern_ControlService.c: 111: return 1;
  5257  00138A  0E01               	movlw	1
  5258                           
  5259                           ;Pattern_ControlService.c: 112: }else
  5260  00138C  0012               	return	
  5261  00138E                     l2472:
  5262                           
  5263                           ;Pattern_ControlService.c: 113: {
  5264                           ;Pattern_ControlService.c: 114: return 0;
  5265  00138E  0E00               	movlw	0
  5266  001390  0012               	return	
  5267  001392                     __end_of_InitPatternControlService:
  5268                           	opt stack 0
  5269                           tosu	equ	0xFFF
  5270                           tosh	equ	0xFFE
  5271                           tosl	equ	0xFFD
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           indf1	equ	0xFE7
  5283                           postinc1	equ	0xFE6
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _InitSPI32ControlService *****************
  5295 ;; Defined at:
  5296 ;;		line 80 in file "SPI32_ControlService.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  Priority        1    wreg     unsigned char 
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  Priority        1   32[BANK0 ] unsigned char 
  5301 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      unsigned char 
  5304 ;; Registers used:
  5305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5311 ;;      Params:         0       0       0       0
  5312 ;;      Locals:         0       4       0       0
  5313 ;;      Temps:          0       0       0       0
  5314 ;;      Totals:         0       4       0       0
  5315 ;;Total ram usage:        4 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    9
  5318 ;; This function calls:
  5319 ;;		_ES_PostToService
  5320 ;;		_SPI32_Init
  5321 ;; This function is called by:
  5322 ;;		_ES_Initialize
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text32
  5327  001536                     __ptext32:
  5328                           	opt stack 0
  5329  001536                     _InitSPI32ControlService:
  5330                           	opt stack 20
  5331                           
  5332                           ;incstack = 0
  5333                           ;InitSPI32ControlService@Priority stored from wreg
  5334  001536  0100               	movlb	0	; () banked
  5335  001538  6FDB               	movwf	InitSPI32ControlService@Priority& (0+255),b
  5336                           
  5337                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  5338                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  5339  00153A  C0DB  F098         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  5340                           
  5341                           ;SPI32_ControlService.c: 86: SPI32_Init();
  5342  00153E  ECE8  F00B         	call	_SPI32_Init	;wreg free
  5343                           
  5344                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  5345  001542  0E00               	movlw	0
  5346  001544  0100               	movlb	0	; () banked
  5347  001546  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  5351  001548  0E02               	movlw	2
  5352  00154A  0100               	movlb	0	; () banked
  5353  00154C  6FD8               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5357  00154E  C0D8  F0D2         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  5358  001552  C0D9  F0D3         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5359  001556  C0DA  F0D4         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5360  00155A  0100               	movlb	0	; () banked
  5361  00155C  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  5362  00155E  ECF8  F008         	call	_ES_PostToService
  5363  001562  06E8               	decf	wreg,f,c
  5364  001564  A4D8               	btfss	status,2,c
  5365  001566  D002               	goto	l2538
  5366                           
  5367                           ;SPI32_ControlService.c: 92: {
  5368                           ;SPI32_ControlService.c: 93: return 1;
  5369  001568  0E01               	movlw	1
  5370                           
  5371                           ;SPI32_ControlService.c: 94: }else
  5372  00156A  0012               	return	
  5373  00156C                     l2538:
  5374                           
  5375                           ;SPI32_ControlService.c: 95: {
  5376                           ;SPI32_ControlService.c: 96: return 0;
  5377  00156C  0E00               	movlw	0
  5378  00156E  0012               	return	
  5379  001570                     __end_of_InitSPI32ControlService:
  5380                           	opt stack 0
  5381                           tosu	equ	0xFFF
  5382                           tosh	equ	0xFFE
  5383                           tosl	equ	0xFFD
  5384                           pclath	equ	0xFFA
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           indf1	equ	0xFE7
  5395                           postinc1	equ	0xFE6
  5396                           postdec1	equ	0xFE5
  5397                           fsr1h	equ	0xFE2
  5398                           fsr1l	equ	0xFE1
  5399                           indf2	equ	0xFDF
  5400                           postinc2	equ	0xFDE
  5401                           postdec2	equ	0xFDD
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _SPI32_Init *****************
  5407 ;; Defined at:
  5408 ;;		line 64 in file "SPI32_HW.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5422 ;;      Params:         0       0       0       0
  5423 ;;      Locals:         0       0       0       0
  5424 ;;      Temps:          0       0       0       0
  5425 ;;      Totals:         0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    7
  5429 ;; This function calls:
  5430 ;;		_HW_Init
  5431 ;; This function is called by:
  5432 ;;		_InitSPI32ControlService
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text33
  5437  0017D0                     __ptext33:
  5438                           	opt stack 0
  5439  0017D0                     _SPI32_Init:
  5440                           	opt stack 21
  5441                           
  5442                           ;SPI32_HW.c: 66: HW_Init();
  5443                           
  5444                           ;incstack = 0
  5445  0017D0  EC58  F00B         	call	_HW_Init	;wreg free
  5446  0017D4  0012               	return		;funcret
  5447  0017D6                     __end_of_SPI32_Init:
  5448                           	opt stack 0
  5449                           tosu	equ	0xFFF
  5450                           tosh	equ	0xFFE
  5451                           tosl	equ	0xFFD
  5452                           pclath	equ	0xFFA
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           postinc0	equ	0xFEE
  5461                           wreg	equ	0xFE8
  5462                           indf1	equ	0xFE7
  5463                           postinc1	equ	0xFE6
  5464                           postdec1	equ	0xFE5
  5465                           fsr1h	equ	0xFE2
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _HW_Init *****************
  5475 ;; Defined at:
  5476 ;;		line 117 in file "SPI32_HW.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5490 ;;      Params:         0       0       0       0
  5491 ;;      Locals:         0       0       0       0
  5492 ;;      Temps:          0       0       0       0
  5493 ;;      Totals:         0       0       0       0
  5494 ;;Total ram usage:        0 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    6
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_SPI32_Init
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text34
  5505  0016B0                     __ptext34:
  5506                           	opt stack 0
  5507  0016B0                     _HW_Init:
  5508                           	opt stack 21
  5509                           
  5510                           ;SPI32_HW.c: 123: PORTC = 0x00;
  5511                           
  5512                           ;incstack = 0
  5513  0016B0  0E00               	movlw	0
  5514  0016B2  6E82               	movwf	3970,c	;volatile
  5515                           
  5516                           ;SPI32_HW.c: 124: LATC = 0x00;
  5517  0016B4  0E00               	movlw	0
  5518  0016B6  6E8B               	movwf	3979,c	;volatile
  5519                           
  5520                           ;SPI32_HW.c: 125: ADCON1 = 0x0F;
  5521  0016B8  0E0F               	movlw	15
  5522  0016BA  6EC1               	movwf	4033,c	;volatile
  5523                           
  5524                           ;SPI32_HW.c: 126: TRISC = 0x00;
  5525  0016BC  0E00               	movlw	0
  5526  0016BE  6E94               	movwf	3988,c	;volatile
  5527                           
  5528                           ;SPI32_HW.c: 128: SSPIE = 1;
  5529  0016C0  869D               	bsf	3997,3,c	;volatile
  5530                           
  5531                           ;SPI32_HW.c: 132: SSPCON1 = 0x00;
  5532  0016C2  0E00               	movlw	0
  5533  0016C4  6EC6               	movwf	4038,c	;volatile
  5534                           
  5535                           ;SPI32_HW.c: 133: SSPSTAT = 0b01000000;
  5536  0016C6  0E40               	movlw	64
  5537  0016C8  6EC7               	movwf	4039,c	;volatile
  5538                           
  5539                           ;SPI32_HW.c: 134: SSPADD = 0xFF;
  5540  0016CA  68C8               	setf	4040,c	;volatile
  5541                           
  5542                           ;SPI32_HW.c: 135: SSPCON1 = 0b00110010;
  5543  0016CC  0E32               	movlw	50
  5544  0016CE  6EC6               	movwf	4038,c	;volatile
  5545  0016D0  0012               	return		;funcret
  5546  0016D2                     __end_of_HW_Init:
  5547                           	opt stack 0
  5548                           tosu	equ	0xFFF
  5549                           tosh	equ	0xFFE
  5550                           tosl	equ	0xFFD
  5551                           pclath	equ	0xFFA
  5552                           tblptru	equ	0xFF8
  5553                           tblptrh	equ	0xFF7
  5554                           tblptrl	equ	0xFF6
  5555                           tablat	equ	0xFF5
  5556                           prodh	equ	0xFF4
  5557                           prodl	equ	0xFF3
  5558                           intcon	equ	0xFF2
  5559                           postinc0	equ	0xFEE
  5560                           wreg	equ	0xFE8
  5561                           indf1	equ	0xFE7
  5562                           postinc1	equ	0xFE6
  5563                           postdec1	equ	0xFE5
  5564                           fsr1h	equ	0xFE2
  5565                           fsr1l	equ	0xFE1
  5566                           indf2	equ	0xFDF
  5567                           postinc2	equ	0xFDE
  5568                           postdec2	equ	0xFDD
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _SetupPattern *****************
  5574 ;; Defined at:
  5575 ;;		line 69 in file "Pattern_RGBPatterns.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  5578 ;;		 -> PatternConfigs(5), 
  5579 ;;  numPixels       1    2[BANK0 ] unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5591 ;;      Params:         0       3       0       0
  5592 ;;      Locals:         0       0       0       0
  5593 ;;      Temps:          0       0       0       0
  5594 ;;      Totals:         0       3       0       0
  5595 ;;Total ram usage:        3 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    6
  5598 ;; This function calls:
  5599 ;;		Nothing
  5600 ;; This function is called by:
  5601 ;;		_InitPatternControlService
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text35
  5606  00179A                     __ptext35:
  5607                           	opt stack 0
  5608  00179A                     _SetupPattern:
  5609                           	opt stack 22
  5610                           
  5611                           ;Pattern_RGBPatterns.c: 71: PatternConfigs = configs;
  5612                           
  5613                           ;incstack = 0
  5614  00179A  C0BB  F08D         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  5615  00179E  C0BC  F08E         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  5616                           
  5617                           ;Pattern_RGBPatterns.c: 73: Length = numPixels;
  5618  0017A2  C0BD  F096         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  5619  0017A6  0012               	return		;funcret
  5620  0017A8                     __end_of_SetupPattern:
  5621                           	opt stack 0
  5622                           tosu	equ	0xFFF
  5623                           tosh	equ	0xFFE
  5624                           tosl	equ	0xFFD
  5625                           pclath	equ	0xFFA
  5626                           tblptru	equ	0xFF8
  5627                           tblptrh	equ	0xFF7
  5628                           tblptrl	equ	0xFF6
  5629                           tablat	equ	0xFF5
  5630                           prodh	equ	0xFF4
  5631                           prodl	equ	0xFF3
  5632                           intcon	equ	0xFF2
  5633                           postinc0	equ	0xFEE
  5634                           wreg	equ	0xFE8
  5635                           indf1	equ	0xFE7
  5636                           postinc1	equ	0xFE6
  5637                           postdec1	equ	0xFE5
  5638                           fsr1h	equ	0xFE2
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _ES_PostToService *****************
  5648 ;; Defined at:
  5649 ;;		line 351 in file "ES_Framework.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  WhichService    1    wreg     unsigned char 
  5652 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  WhichService    1   28[BANK0 ] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      unsigned char 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5664 ;;      Params:         0       3       0       0
  5665 ;;      Locals:         0       1       0       0
  5666 ;;      Temps:          0       2       0       0
  5667 ;;      Totals:         0       6       0       0
  5668 ;;Total ram usage:        6 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    8
  5671 ;; This function calls:
  5672 ;;		_ES_EnQueueFIFO
  5673 ;; This function is called by:
  5674 ;;		_InitPatternControlService
  5675 ;;		_PostPatternControlService
  5676 ;;		_InitSPI32ControlService
  5677 ;;		_PostSPI32ControlService
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text36
  5682  0011F0                     __ptext36:
  5683                           	opt stack 0
  5684  0011F0                     _ES_PostToService:
  5685                           	opt stack 18
  5686                           
  5687                           ;incstack = 0
  5688                           ;ES_PostToService@WhichService stored from wreg
  5689  0011F0  0100               	movlb	0	; () banked
  5690  0011F2  6FD7               	movwf	ES_PostToService@WhichService& (0+255),b
  5691                           
  5692                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5693                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5694                           ;ES_Framework.c: 354: 1 )){
  5695  0011F4  0E02               	movlw	2
  5696  0011F6  0100               	movlb	0	; () banked
  5697  0011F8  61D7               	cpfslt	ES_PostToService@WhichService& (0+255),b
  5698  0011FA  D033               	goto	l2078
  5699                           
  5700                           ; BSR set to: 0
  5701  0011FC  0100               	movlb	0	; () banked
  5702  0011FE  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5703  001200  0D03               	mullw	3
  5704  001202  0E58               	movlw	low _EventQueues
  5705  001204  24F3               	addwf	prodl,w,c
  5706  001206  6EF6               	movwf	tblptrl,c
  5707  001208  0E03               	movlw	high _EventQueues
  5708  00120A  20F4               	addwfc	prodh,w,c
  5709  00120C  6EF7               	movwf	tblptrh,c
  5710  00120E                     	if	0	;There are less than 3 active tblptr bytes
  5711  00120E                     	endif
  5712  00120E  0009               	tblrd		*+
  5713  001210  CFF5 F0C7          	movff	tablat,ES_EnQueueFIFO@pBlock
  5714  001214  000A               	tblrd		*-
  5715  001216  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  5716  00121A  C0D2  F0C9         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  5717  00121E  C0D3  F0CA         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  5718  001222  C0D4  F0CB         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  5719  001226  EC12  F005         	call	_ES_EnQueueFIFO	;wreg free
  5720  00122A  06E8               	decf	wreg,f,c
  5721  00122C  A4D8               	btfss	status,2,c
  5722  00122E  D019               	goto	l2078
  5723                           
  5724                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  5725  001230  0100               	movlb	0	; () banked
  5726  001232  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5727  001234  0D02               	mullw	2
  5728  001236  0E01               	movlw	low _BitNum2SetMask
  5729  001238  24F3               	addwf	prodl,w,c
  5730  00123A  6EF6               	movwf	tblptrl,c
  5731  00123C  0E03               	movlw	high _BitNum2SetMask
  5732  00123E  20F4               	addwfc	prodh,w,c
  5733  001240  6EF7               	movwf	tblptrh,c
  5734  001242                     	if	0	;There are less than 3 active tblptr bytes
  5735  001242                     	endif
  5736  001242  0009               	tblrd		*+
  5737  001244  CFF5 F0D5          	movff	tablat,??_ES_PostToService
  5738  001248  0009               	tblrd		*+
  5739  00124A  CFF5 F0D6          	movff	tablat,??_ES_PostToService+1
  5740  00124E  0100               	movlb	0	; () banked
  5741  001250  51D5               	movf	??_ES_PostToService& (0+255),w,b
  5742  001252  0100               	movlb	0	; () banked
  5743  001254  1391               	iorwf	_Ready& (0+255),f,b
  5744  001256  0100               	movlb	0	; () banked
  5745  001258  51D6               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5746  00125A  0100               	movlb	0	; () banked
  5747  00125C  1392               	iorwf	(_Ready+1)& (0+255),f,b
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;ES_Framework.c: 356: return 1;
  5751  00125E  0E01               	movlw	1
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;ES_Framework.c: 357: } else
  5755                           
  5756                           ; BSR set to: 0
  5757  001260  0012               	return	
  5758  001262                     l2078:
  5759                           
  5760                           ;ES_Framework.c: 358: return 0;
  5761  001262  0E00               	movlw	0
  5762  001264  0012               	return	
  5763  001266                     __end_of_ES_PostToService:
  5764                           	opt stack 0
  5765                           tosu	equ	0xFFF
  5766                           tosh	equ	0xFFE
  5767                           tosl	equ	0xFFD
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           postinc1	equ	0xFE6
  5780                           postdec1	equ	0xFE5
  5781                           fsr1h	equ	0xFE2
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _ES_EnQueueFIFO *****************
  5791 ;; Defined at:
  5792 ;;		line 85 in file "ES_Queue.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5795 ;;		 -> Queue1(12), Queue0(12), 
  5796 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5799 ;;		 -> Queue1(12), Queue0(12), 
  5800 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      unsigned char 
  5803 ;; Registers used:
  5804 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5810 ;;      Params:         0       5       0       0
  5811 ;;      Locals:         0       3       0       0
  5812 ;;      Temps:          0       3       0       0
  5813 ;;      Totals:         0      11       0       0
  5814 ;;Total ram usage:       11 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    7
  5817 ;; This function calls:
  5818 ;;		___awmod
  5819 ;;		___wmul
  5820 ;; This function is called by:
  5821 ;;		_ES_PostToService
  5822 ;;		_ES_PostAll
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text37
  5827  000A24                     __ptext37:
  5828                           	opt stack 0
  5829  000A24                     _ES_EnQueueFIFO:
  5830                           	opt stack 18
  5831                           
  5832                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5833                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5834                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5835                           
  5836                           ;incstack = 0
  5837  000A24  C0C7  F0D0         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5838  000A28  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5839                           
  5840                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5841  000A2C  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5842  000A30  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5843  000A34  0100               	movlb	0	; () banked
  5844  000A36  EE10 F002          	lfsr	1,2
  5845  000A3A  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5846  000A3C  26E1               	addwf	fsr1l,f,c
  5847  000A3E  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5848  000A40  22E2               	addwfc	fsr1h,f,c
  5849  000A42  50DE               	movf	postinc2,w,c
  5850  000A44  5CE6               	subwf	postinc1,w,c
  5851  000A46  B0D8               	btfsc	status,0,c
  5852  000A48  D05C               	goto	l2062
  5853                           
  5854                           ; BSR set to: 0
  5855                           
  5856                           ;ES_Queue.c: 92: {
  5857                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5858  000A4A  CFF2 F0CF          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5859  000A4E  9EF2               	bcf	intcon,7,c	;volatile
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5863                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5864                           
  5865                           ; BSR set to: 0
  5866  000A50  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5867  000A54  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5868  000A58  50DF               	movf	indf2,w,c
  5869  000A5A  0100               	movlb	0	; () banked
  5870  000A5C  6FCC               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5871  000A5E  0100               	movlb	0	; () banked
  5872  000A60  51CC               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5873  000A62  0100               	movlb	0	; () banked
  5874  000A64  6FBD               	movwf	___awmod@divisor& (0+255),b
  5875  000A66  6BBE               	clrf	(___awmod@divisor+1)& (0+255),b
  5876  000A68  0100               	movlb	0	; () banked
  5877  000A6A  EE20 F002          	lfsr	2,2
  5878  000A6E  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5879  000A70  26D9               	addwf	fsr2l,f,c
  5880  000A72  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5881  000A74  22DA               	addwfc	fsr2h,f,c
  5882  000A76  50DF               	movf	indf2,w,c
  5883  000A78  0100               	movlb	0	; () banked
  5884  000A7A  6FCD               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5885  000A7C  0100               	movlb	0	; () banked
  5886  000A7E  EE20 F001          	lfsr	2,1
  5887  000A82  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5888  000A84  26D9               	addwf	fsr2l,f,c
  5889  000A86  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5890  000A88  22DA               	addwfc	fsr2h,f,c
  5891  000A8A  50DF               	movf	indf2,w,c
  5892  000A8C  0100               	movlb	0	; () banked
  5893  000A8E  6FCE               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5894  000A90  0100               	movlb	0	; () banked
  5895  000A92  51CE               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5896  000A94  0100               	movlb	0	; () banked
  5897  000A96  25CD               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5898  000A98  0100               	movlb	0	; () banked
  5899  000A9A  6FBB               	movwf	___awmod@dividend& (0+255),b
  5900  000A9C  0100               	movlb	0	; () banked
  5901  000A9E  6BBC               	clrf	(___awmod@dividend+1)& (0+255),b
  5902  000AA0  0100               	movlb	0	; () banked
  5903  000AA2  37BC               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5904  000AA4  EC4C  F007         	call	___awmod	;wreg free
  5905  000AA8  0E01               	movlw	1
  5906  000AAA  0100               	movlb	0	; () banked
  5907  000AAC  25BB               	addwf	?___awmod& (0+255),w,b
  5908  000AAE  0100               	movlb	0	; () banked
  5909  000AB0  6FC1               	movwf	___wmul@multiplier& (0+255),b
  5910  000AB2  0E00               	movlw	0
  5911  000AB4  0100               	movlb	0	; () banked
  5912  000AB6  21BC               	addwfc	(?___awmod+1)& (0+255),w,b
  5913  000AB8  0100               	movlb	0	; () banked
  5914  000ABA  6FC2               	movwf	(___wmul@multiplier+1)& (0+255),b
  5915  000ABC  0E00               	movlw	0
  5916  000ABE  0100               	movlb	0	; () banked
  5917  000AC0  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5918  000AC2  0E03               	movlw	3
  5919  000AC4  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5920  000AC6  ECB8  F00A         	call	___wmul	;wreg free
  5921  000ACA  0100               	movlb	0	; () banked
  5922  000ACC  51C1               	movf	?___wmul& (0+255),w,b
  5923  000ACE  0100               	movlb	0	; () banked
  5924  000AD0  25C7               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5925  000AD2  6ED9               	movwf	fsr2l,c
  5926  000AD4  0100               	movlb	0	; () banked
  5927  000AD6  51C2               	movf	(?___wmul+1)& (0+255),w,b
  5928  000AD8  0100               	movlb	0	; () banked
  5929  000ADA  21C8               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5930  000ADC  6EDA               	movwf	fsr2h,c
  5931  000ADE  C0C9  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5932  000AE2  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5933  000AE6  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5937  000AEA  0100               	movlb	0	; () banked
  5938  000AEC  EE20 F002          	lfsr	2,2
  5939  000AF0  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5940  000AF2  26D9               	addwf	fsr2l,f,c
  5941  000AF4  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5942  000AF6  22DA               	addwfc	fsr2h,f,c
  5943  000AF8  2ADF               	incf	indf2,f,c
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5947  000AFA  C0CF  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;ES_Queue.c: 101: return(1);
  5951  000AFE  0E01               	movlw	1
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;ES_Queue.c: 102: }else
  5955                           
  5956                           ; BSR set to: 0
  5957  000B00  0012               	return	
  5958  000B02                     l2062:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;ES_Queue.c: 103: return(0);
  5962  000B02  0E00               	movlw	0
  5963                           
  5964                           ; BSR set to: 0
  5965  000B04  0012               	return	
  5966  000B06                     __end_of_ES_EnQueueFIFO:
  5967                           	opt stack 0
  5968                           tosu	equ	0xFFF
  5969                           tosh	equ	0xFFE
  5970                           tosl	equ	0xFFD
  5971                           pclath	equ	0xFFA
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           indf1	equ	0xFE7
  5982                           postinc1	equ	0xFE6
  5983                           postdec1	equ	0xFE5
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function ___wmul *****************
  5994 ;; Defined at:
  5995 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5998 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  product         2   10[BANK0 ] unsigned int 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  2    6[BANK0 ] unsigned int 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0, prodl, prodh
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6010 ;;      Params:         0       4       0       0
  6011 ;;      Locals:         0       2       0       0
  6012 ;;      Temps:          0       0       0       0
  6013 ;;      Totals:         0       6       0       0
  6014 ;;Total ram usage:        6 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    6
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_ES_EnQueueFIFO
  6021 ;;		_ES_DeQueue
  6022 ;;		i2_ES_EnQueueFIFO
  6023 ;;		_ES_EnQueueLIFO
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text38
  6028  001570                     __ptext38:
  6029                           	opt stack 0
  6030  001570                     ___wmul:
  6031                           	opt stack 18
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;incstack = 0
  6035  001570  0100               	movlb	0	; () banked
  6036  001572  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6037  001574  0100               	movlb	0	; () banked
  6038  001576  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6039  001578  CFF3 F0C5          	movff	prodl,___wmul@product
  6040  00157C  CFF4 F0C6          	movff	prodh,___wmul@product+1
  6041  001580  0100               	movlb	0	; () banked
  6042  001582  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6043  001584  0100               	movlb	0	; () banked
  6044  001586  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6045  001588  50F3               	movf	prodl,w,c
  6046  00158A  0100               	movlb	0	; () banked
  6047  00158C  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6048  00158E  0100               	movlb	0	; () banked
  6049  001590  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6050  001592  0100               	movlb	0	; () banked
  6051  001594  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6052  001596  50F3               	movf	prodl,w,c
  6053  001598  0100               	movlb	0	; () banked
  6054  00159A  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057  00159C  C0C5  F0C1         	movff	___wmul@product,?___wmul
  6058  0015A0  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  6059  0015A4  0012               	return	
  6060  0015A6                     __end_of___wmul:
  6061                           	opt stack 0
  6062                           tosu	equ	0xFFF
  6063                           tosh	equ	0xFFE
  6064                           tosl	equ	0xFFD
  6065                           pclath	equ	0xFFA
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodh	equ	0xFF4
  6071                           prodl	equ	0xFF3
  6072                           intcon	equ	0xFF2
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           indf1	equ	0xFE7
  6076                           postinc1	equ	0xFE6
  6077                           postdec1	equ	0xFE5
  6078                           fsr1h	equ	0xFE2
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function ___awmod *****************
  6088 ;; Defined at:
  6089 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  dividend        2    0[BANK0 ] int 
  6092 ;;  divisor         2    2[BANK0 ] int 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  sign            1    5[BANK0 ] unsigned char 
  6095 ;;  counter         1    4[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2    0[BANK0 ] int 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6105 ;;      Params:         0       4       0       0
  6106 ;;      Locals:         0       2       0       0
  6107 ;;      Temps:          0       0       0       0
  6108 ;;      Totals:         0       6       0       0
  6109 ;;Total ram usage:        6 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    6
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_ES_EnQueueFIFO
  6116 ;;		i2_ES_EnQueueFIFO
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text39
  6121  000E98                     __ptext39:
  6122                           	opt stack 0
  6123  000E98                     ___awmod:
  6124                           	opt stack 18
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;incstack = 0
  6128  000E98  0E00               	movlw	0
  6129  000E9A  0100               	movlb	0	; () banked
  6130  000E9C  6FC0               	movwf	___awmod@sign& (0+255),b
  6131                           
  6132                           ; BSR set to: 0
  6133  000E9E  0100               	movlb	0	; () banked
  6134  000EA0  AFBC               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6135  000EA2  D008               	goto	l2018
  6136                           
  6137                           ; BSR set to: 0
  6138  000EA4  0100               	movlb	0	; () banked
  6139  000EA6  6DBB               	negf	___awmod@dividend& (0+255),b
  6140  000EA8  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6141  000EAA  B0D8               	btfsc	status,0,c
  6142  000EAC  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6143                           
  6144                           ; BSR set to: 0
  6145  000EAE  0E01               	movlw	1
  6146  000EB0  0100               	movlb	0	; () banked
  6147  000EB2  6FC0               	movwf	___awmod@sign& (0+255),b
  6148  000EB4                     l2018:
  6149                           
  6150                           ; BSR set to: 0
  6151  000EB4  0100               	movlb	0	; () banked
  6152  000EB6  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6153  000EB8  D005               	goto	l2022
  6154                           
  6155                           ; BSR set to: 0
  6156  000EBA  0100               	movlb	0	; () banked
  6157  000EBC  6DBD               	negf	___awmod@divisor& (0+255),b
  6158  000EBE  1FBE               	comf	(___awmod@divisor+1)& (0+255),f,b
  6159  000EC0  B0D8               	btfsc	status,0,c
  6160  000EC2  2BBE               	incf	(___awmod@divisor+1)& (0+255),f,b
  6161  000EC4                     l2022:
  6162                           
  6163                           ; BSR set to: 0
  6164  000EC4  0100               	movlb	0	; () banked
  6165  000EC6  51BD               	movf	___awmod@divisor& (0+255),w,b
  6166  000EC8  0100               	movlb	0	; () banked
  6167  000ECA  11BE               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6168  000ECC  B4D8               	btfsc	status,2,c
  6169  000ECE  D026               	goto	l2038
  6170                           
  6171                           ; BSR set to: 0
  6172  000ED0  0E01               	movlw	1
  6173  000ED2  0100               	movlb	0	; () banked
  6174  000ED4  6FBF               	movwf	___awmod@counter& (0+255),b
  6175  000ED6  D006               	goto	l2028
  6176  000ED8                     l2026:
  6177                           
  6178                           ; BSR set to: 0
  6179  000ED8  0100               	movlb	0	; () banked
  6180  000EDA  90D8               	bcf	status,0,c
  6181  000EDC  37BD               	rlcf	___awmod@divisor& (0+255),f,b
  6182  000EDE  37BE               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6183  000EE0  0100               	movlb	0	; () banked
  6184  000EE2  2BBF               	incf	___awmod@counter& (0+255),f,b
  6185  000EE4                     l2028:
  6186                           
  6187                           ; BSR set to: 0
  6188  000EE4  0100               	movlb	0	; () banked
  6189  000EE6  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6190  000EE8  D7F7               	goto	l2026
  6191  000EEA                     l2030:
  6192                           
  6193                           ; BSR set to: 0
  6194  000EEA  0100               	movlb	0	; () banked
  6195  000EEC  51BD               	movf	___awmod@divisor& (0+255),w,b
  6196  000EEE  0100               	movlb	0	; () banked
  6197  000EF0  5DBB               	subwf	___awmod@dividend& (0+255),w,b
  6198  000EF2  0100               	movlb	0	; () banked
  6199  000EF4  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6200  000EF6  0100               	movlb	0	; () banked
  6201  000EF8  59BC               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6202  000EFA  A0D8               	btfss	status,0,c
  6203  000EFC  D008               	goto	l2034
  6204                           
  6205                           ; BSR set to: 0
  6206  000EFE  0100               	movlb	0	; () banked
  6207  000F00  51BD               	movf	___awmod@divisor& (0+255),w,b
  6208  000F02  0100               	movlb	0	; () banked
  6209  000F04  5FBB               	subwf	___awmod@dividend& (0+255),f,b
  6210  000F06  0100               	movlb	0	; () banked
  6211  000F08  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6212  000F0A  0100               	movlb	0	; () banked
  6213  000F0C  5BBC               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6214  000F0E                     l2034:
  6215                           
  6216                           ; BSR set to: 0
  6217  000F0E  0100               	movlb	0	; () banked
  6218  000F10  90D8               	bcf	status,0,c
  6219  000F12  33BE               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6220  000F14  33BD               	rrcf	___awmod@divisor& (0+255),f,b
  6221                           
  6222                           ; BSR set to: 0
  6223  000F16  0100               	movlb	0	; () banked
  6224  000F18  2FBF               	decfsz	___awmod@counter& (0+255),f,b
  6225  000F1A  D7E7               	goto	l2030
  6226  000F1C                     l2038:
  6227                           
  6228                           ; BSR set to: 0
  6229  000F1C  0100               	movlb	0	; () banked
  6230  000F1E  51C0               	movf	___awmod@sign& (0+255),w,b
  6231  000F20  0100               	movlb	0	; () banked
  6232  000F22  B4D8               	btfsc	status,2,c
  6233  000F24  D005               	goto	l2042
  6234                           
  6235                           ; BSR set to: 0
  6236  000F26  0100               	movlb	0	; () banked
  6237  000F28  6DBB               	negf	___awmod@dividend& (0+255),b
  6238  000F2A  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6239  000F2C  B0D8               	btfsc	status,0,c
  6240  000F2E  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6241  000F30                     l2042:
  6242                           
  6243                           ; BSR set to: 0
  6244  000F30  C0BB  F0BB         	movff	___awmod@dividend,?___awmod
  6245  000F34  C0BC  F0BC         	movff	___awmod@dividend+1,?___awmod+1
  6246  000F38  0012               	return	
  6247  000F3A                     __end_of___awmod:
  6248                           	opt stack 0
  6249                           tosu	equ	0xFFF
  6250                           tosh	equ	0xFFE
  6251                           tosl	equ	0xFFD
  6252                           pclath	equ	0xFFA
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           indf1	equ	0xFE7
  6263                           postinc1	equ	0xFE6
  6264                           postdec1	equ	0xFE5
  6265                           fsr1h	equ	0xFE2
  6266                           fsr1l	equ	0xFE1
  6267                           indf2	equ	0xFDF
  6268                           postinc2	equ	0xFDE
  6269                           postdec2	equ	0xFDD
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function _DotStar_Init *****************
  6275 ;; Defined at:
  6276 ;;		line 41 in file "Pattern_DotStarLED.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  numPixels       1    wreg     unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6281 ;;  i               1    3[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      void 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       0       0       0
  6292 ;;      Locals:         0       2       0       0
  6293 ;;      Temps:          0       2       0       0
  6294 ;;      Totals:         0       4       0       0
  6295 ;;Total ram usage:        4 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    6
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_InitPatternControlService
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           	psect	text40
  6306  000B06                     __ptext40:
  6307                           	opt stack 0
  6308  000B06                     _DotStar_Init:
  6309                           	opt stack 22
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;incstack = 0
  6313                           ;DotStar_Init@numPixels stored from wreg
  6314  000B06  0100               	movlb	0	; () banked
  6315  000B08  6FBD               	movwf	DotStar_Init@numPixels& (0+255),b
  6316                           
  6317                           ;Pattern_DotStarLED.c: 50: Length = numPixels;
  6318  000B0A  C0BD  F09B         	movff	DotStar_Init@numPixels,_Length
  6319                           
  6320                           ;Pattern_DotStarLED.c: 52: PixelFrames[0] = 0xffffffff;
  6321  000B0E  0101               	movlb	1	; () banked
  6322  000B10  6980               	setf	_PixelFrames& (0+255),b
  6323  000B12  6981               	setf	(_PixelFrames+1)& (0+255),b
  6324  000B14  6982               	setf	(_PixelFrames+2)& (0+255),b
  6325  000B16  6983               	setf	(_PixelFrames+3)& (0+255),b
  6326                           
  6327                           ; BSR set to: 1
  6328                           ;Pattern_DotStarLED.c: 53: PixelFrames[Length+1] = 0x0;
  6329  000B18  0100               	movlb	0	; () banked
  6330  000B1A  519B               	movf	_Length& (0+255),w,b
  6331  000B1C  0100               	movlb	0	; () banked
  6332  000B1E  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6333  000B20  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6334  000B22  0100               	movlb	0	; () banked
  6335  000B24  90D8               	bcf	status,0,c
  6336  000B26  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6337  000B28  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6338  000B2A  0100               	movlb	0	; () banked
  6339  000B2C  90D8               	bcf	status,0,c
  6340  000B2E  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6341  000B30  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6342  000B32  0E04               	movlw	4
  6343  000B34  0100               	movlb	0	; () banked
  6344  000B36  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6345  000B38  0E00               	movlw	0
  6346  000B3A  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6347  000B3C  0E80               	movlw	low _PixelFrames
  6348  000B3E  0100               	movlb	0	; () banked
  6349  000B40  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6350  000B42  6ED9               	movwf	fsr2l,c
  6351  000B44  0E01               	movlw	high _PixelFrames
  6352  000B46  0100               	movlb	0	; () banked
  6353  000B48  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6354  000B4A  6EDA               	movwf	fsr2h,c
  6355  000B4C  6ADE               	clrf	postinc2,c
  6356  000B4E  6ADE               	clrf	postinc2,c
  6357  000B50  6ADE               	clrf	postinc2,c
  6358  000B52  6ADD               	clrf	postdec2,c
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;Pattern_DotStarLED.c: 55: OffFrames[0] = 0xffffffff;
  6362  000B54  0101               	movlb	1	; () banked
  6363  000B56  6900               	setf	_OffFrames& (0+255),b
  6364  000B58  6901               	setf	(_OffFrames+1)& (0+255),b
  6365  000B5A  6902               	setf	(_OffFrames+2)& (0+255),b
  6366  000B5C  6903               	setf	(_OffFrames+3)& (0+255),b
  6367                           
  6368                           ; BSR set to: 1
  6369                           ;Pattern_DotStarLED.c: 56: OffFrames[Length+1] = 0x0;
  6370  000B5E  0100               	movlb	0	; () banked
  6371  000B60  519B               	movf	_Length& (0+255),w,b
  6372  000B62  0100               	movlb	0	; () banked
  6373  000B64  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6374  000B66  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6375  000B68  0100               	movlb	0	; () banked
  6376  000B6A  90D8               	bcf	status,0,c
  6377  000B6C  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6378  000B6E  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6379  000B70  0100               	movlb	0	; () banked
  6380  000B72  90D8               	bcf	status,0,c
  6381  000B74  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6382  000B76  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6383  000B78  0E04               	movlw	4
  6384  000B7A  0100               	movlb	0	; () banked
  6385  000B7C  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6386  000B7E  0E00               	movlw	0
  6387  000B80  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6388  000B82  0E00               	movlw	low _OffFrames
  6389  000B84  0100               	movlb	0	; () banked
  6390  000B86  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6391  000B88  6ED9               	movwf	fsr2l,c
  6392  000B8A  0E01               	movlw	high _OffFrames
  6393  000B8C  0100               	movlb	0	; () banked
  6394  000B8E  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6395  000B90  6EDA               	movwf	fsr2h,c
  6396  000B92  6ADE               	clrf	postinc2,c
  6397  000B94  6ADE               	clrf	postinc2,c
  6398  000B96  6ADE               	clrf	postinc2,c
  6399  000B98  6ADD               	clrf	postdec2,c
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;Pattern_DotStarLED.c: 57: for(uint8_t i=1;i<=Length;i++){
  6403  000B9A  0E01               	movlw	1
  6404  000B9C  0100               	movlb	0	; () banked
  6405  000B9E  6FBE               	movwf	DotStar_Init@i& (0+255),b
  6406  000BA0  D013               	goto	l2338
  6407  000BA2                     l2334:
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;Pattern_DotStarLED.c: 58: OffFrames[i] = 0xe0000000;
  6411  000BA2  0100               	movlb	0	; () banked
  6412  000BA4  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6413  000BA6  0D04               	mullw	4
  6414  000BA8  0E00               	movlw	low _OffFrames
  6415  000BAA  24F3               	addwf	prodl,w,c
  6416  000BAC  6ED9               	movwf	fsr2l,c
  6417  000BAE  0E01               	movlw	high _OffFrames
  6418  000BB0  20F4               	addwfc	prodh,w,c
  6419  000BB2  6EDA               	movwf	fsr2h,c
  6420  000BB4  0E00               	movlw	0
  6421  000BB6  6EDE               	movwf	postinc2,c
  6422  000BB8  0E00               	movlw	0
  6423  000BBA  6EDE               	movwf	postinc2,c
  6424  000BBC  0E00               	movlw	0
  6425  000BBE  6EDE               	movwf	postinc2,c
  6426  000BC0  0EE0               	movlw	224
  6427  000BC2  6EDD               	movwf	postdec2,c
  6428                           
  6429                           ; BSR set to: 0
  6430  000BC4  0100               	movlb	0	; () banked
  6431  000BC6  2BBE               	incf	DotStar_Init@i& (0+255),f,b
  6432  000BC8                     l2338:
  6433                           
  6434                           ; BSR set to: 0
  6435  000BC8  0100               	movlb	0	; () banked
  6436  000BCA  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6437  000BCC  0100               	movlb	0	; () banked
  6438  000BCE  5D9B               	subwf	_Length& (0+255),w,b
  6439  000BD0  A0D8               	btfss	status,0,c
  6440  000BD2  0012               	return	
  6441  000BD4  D7E6               	goto	l2334
  6442  000BD6                     __end_of_DotStar_Init:
  6443                           	opt stack 0
  6444                           tosu	equ	0xFFF
  6445                           tosh	equ	0xFFE
  6446                           tosl	equ	0xFFD
  6447                           pclath	equ	0xFFA
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           indf1	equ	0xFE7
  6458                           postinc1	equ	0xFE6
  6459                           postdec1	equ	0xFE5
  6460                           fsr1h	equ	0xFE2
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           postdec2	equ	0xFDD
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469 ;; *************** function _ES_Timer_Init *****************
  6470 ;; Defined at:
  6471 ;;		line 130 in file "ES_Timers.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  Rate            2    2[BANK0 ] enum E15424
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6485 ;;      Params:         0       2       0       0
  6486 ;;      Locals:         0       0       0       0
  6487 ;;      Temps:          0       0       0       0
  6488 ;;      Totals:         0       2       0       0
  6489 ;;Total ram usage:        2 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    7
  6492 ;; This function calls:
  6493 ;;		__HW_Timer_Init
  6494 ;; This function is called by:
  6495 ;;		_ES_Initialize
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text41
  6500  0017A8                     __ptext41:
  6501                           	opt stack 0
  6502  0017A8                     _ES_Timer_Init:
  6503                           	opt stack 22
  6504                           
  6505                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;incstack = 0
  6509  0017A8  C0BD  F0BB         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  6510  0017AC  C0BE  F0BC         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  6511  0017B0  EC93  F00B         	call	__HW_Timer_Init	;wreg free
  6512  0017B4  0012               	return		;funcret
  6513  0017B6                     __end_of_ES_Timer_Init:
  6514                           	opt stack 0
  6515                           tosu	equ	0xFFF
  6516                           tosh	equ	0xFFE
  6517                           tosl	equ	0xFFD
  6518                           pclath	equ	0xFFA
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           postinc0	equ	0xFEE
  6527                           wreg	equ	0xFE8
  6528                           indf1	equ	0xFE7
  6529                           postinc1	equ	0xFE6
  6530                           postdec1	equ	0xFE5
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function __HW_Timer_Init *****************
  6541 ;; Defined at:
  6542 ;;		line 71 in file "ES_Port.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  Rate            2    0[BANK0 ] enum E15412
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6556 ;;      Params:         0       2       0       0
  6557 ;;      Locals:         0       0       0       0
  6558 ;;      Temps:          0       0       0       0
  6559 ;;      Totals:         0       2       0       0
  6560 ;;Total ram usage:        2 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    6
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_ES_Timer_Init
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text42
  6571  001726                     __ptext42:
  6572                           	opt stack 0
  6573  001726                     __HW_Timer_Init:
  6574                           	opt stack 22
  6575                           
  6576                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  6577                           
  6578                           ;incstack = 0
  6579  001726  0E04               	movlw	4
  6580  001728  6E9D               	movwf	3997,c	;volatile
  6581                           
  6582                           ;ES_Port.c: 84: INTCON = 0b01000000;
  6583  00172A  0E40               	movlw	64
  6584  00172C  6EF2               	movwf	intcon,c	;volatile
  6585                           
  6586                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  6587  00172E  0E0A               	movlw	10
  6588  001730  6EBD               	movwf	4029,c	;volatile
  6589                           
  6590                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  6591  001732  0E01               	movlw	1
  6592  001734  6EBE               	movwf	4030,c	;volatile
  6593                           
  6594                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  6595  001736  0E00               	movlw	0
  6596  001738  6EBF               	movwf	4031,c	;volatile
  6597                           
  6598                           ;ES_Port.c: 106: T1CON = 0b00100001;
  6599  00173A  0E21               	movlw	33
  6600  00173C  6ECD               	movwf	4045,c	;volatile
  6601                           
  6602                           ;ES_Port.c: 108: {GIE = 1;};
  6603  00173E  8EF2               	bsf	intcon,7,c	;volatile
  6604  001740  0012               	return		;funcret
  6605  001742                     __end_of__HW_Timer_Init:
  6606                           	opt stack 0
  6607                           tosu	equ	0xFFF
  6608                           tosh	equ	0xFFE
  6609                           tosl	equ	0xFFD
  6610                           pclath	equ	0xFFA
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           intcon	equ	0xFF2
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           indf1	equ	0xFE7
  6621                           postinc1	equ	0xFE6
  6622                           postdec1	equ	0xFE5
  6623                           fsr1h	equ	0xFE2
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           postinc2	equ	0xFDE
  6627                           postdec2	equ	0xFDD
  6628                           fsr2h	equ	0xFDA
  6629                           fsr2l	equ	0xFD9
  6630                           status	equ	0xFD8
  6631                           
  6632 ;; *************** function _ES_InitQueue *****************
  6633 ;; Defined at:
  6634 ;;		line 58 in file "ES_Queue.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  6637 ;;		 -> Queue1(12), Queue0(12), 
  6638 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  6641 ;;		 -> Queue1(12), Queue0(12), 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      unsigned char 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6651 ;;      Params:         0       3       0       0
  6652 ;;      Locals:         0       2       0       0
  6653 ;;      Temps:          0       0       0       0
  6654 ;;      Totals:         0       5       0       0
  6655 ;;Total ram usage:        5 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    6
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_ES_Initialize
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text43
  6666  0014FA                     __ptext43:
  6667                           	opt stack 0
  6668  0014FA                     _ES_InitQueue:
  6669                           	opt stack 23
  6670                           
  6671                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  6672                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  6673                           
  6674                           ;incstack = 0
  6675  0014FA  C0BB  F0BE         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  6676  0014FE  C0BC  F0BF         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  6677                           
  6678                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  6679  001502  0100               	movlb	0	; () banked
  6680  001504  05BD               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  6681  001506  C0BE  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  6682  00150A  C0BF  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  6683  00150E  6EDF               	movwf	indf2,c
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  6687  001510  0100               	movlb	0	; () banked
  6688  001512  EE20 F001          	lfsr	2,1
  6689  001516  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6690  001518  26D9               	addwf	fsr2l,f,c
  6691  00151A  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6692  00151C  22DA               	addwfc	fsr2h,f,c
  6693  00151E  0E00               	movlw	0
  6694  001520  6EDF               	movwf	indf2,c
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  6698  001522  0100               	movlb	0	; () banked
  6699  001524  EE20 F002          	lfsr	2,2
  6700  001528  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6701  00152A  26D9               	addwf	fsr2l,f,c
  6702  00152C  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6703  00152E  22DA               	addwfc	fsr2h,f,c
  6704  001530  0E00               	movlw	0
  6705  001532  6EDF               	movwf	indf2,c
  6706  001534  0012               	return	
  6707  001536                     __end_of_ES_InitQueue:
  6708                           	opt stack 0
  6709                           tosu	equ	0xFFF
  6710                           tosh	equ	0xFFE
  6711                           tosl	equ	0xFFD
  6712                           pclath	equ	0xFFA
  6713                           tblptru	equ	0xFF8
  6714                           tblptrh	equ	0xFF7
  6715                           tblptrl	equ	0xFF6
  6716                           tablat	equ	0xFF5
  6717                           prodh	equ	0xFF4
  6718                           prodl	equ	0xFF3
  6719                           intcon	equ	0xFF2
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           indf1	equ	0xFE7
  6723                           postinc1	equ	0xFE6
  6724                           postdec1	equ	0xFE5
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           fsr2h	equ	0xFDA
  6731                           fsr2l	equ	0xFD9
  6732                           status	equ	0xFD8
  6733                           
  6734 ;; *************** function _ISR *****************
  6735 ;; Defined at:
  6736 ;;		line 111 in file "ES_Port.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;		None
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6750 ;;      Params:         0       0       0       0
  6751 ;;      Locals:         0       0       0       0
  6752 ;;      Temps:         16       0       0       0
  6753 ;;      Totals:        16       0       0       0
  6754 ;;Total ram usage:       16 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    5
  6757 ;; This function calls:
  6758 ;;		_SPI32_EOTResponse
  6759 ;; This function is called by:
  6760 ;;		Interrupt level 2
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	intcode
  6765  000008                     __pintcode:
  6766                           	opt stack 0
  6767  000008                     _ISR:
  6768                           	opt stack 16
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;incstack = 0
  6772  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6773  00000A  CFFA F026          	movff	pclath,??_ISR+2
  6774  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  6775  000012  EDA7  F006         	call	int_func,f	;refresh shadow registers
  6776                           tosu	equ	0xFFF
  6777                           tosh	equ	0xFFE
  6778                           tosl	equ	0xFFD
  6779                           pclatu	equ	0xFFB
  6780                           pclath	equ	0xFFA
  6781                           tblptru	equ	0xFF8
  6782                           tblptrh	equ	0xFF7
  6783                           tblptrl	equ	0xFF6
  6784                           tablat	equ	0xFF5
  6785                           prodh	equ	0xFF4
  6786                           prodl	equ	0xFF3
  6787                           intcon	equ	0xFF2
  6788                           postinc0	equ	0xFEE
  6789                           wreg	equ	0xFE8
  6790                           indf1	equ	0xFE7
  6791                           postinc1	equ	0xFE6
  6792                           postdec1	equ	0xFE5
  6793                           fsr1h	equ	0xFE2
  6794                           fsr1l	equ	0xFE1
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802                           	psect	intcode_body
  6803  000D4E                     __pintcode_body:
  6804                           	opt stack 16
  6805  000D4E                     int_func:
  6806                           	opt stack 16
  6807  000D4E  0006               	pop		; remove dummy address from shadow register refresh
  6808  000D50  CFE9 F028          	movff	fsr0l,??_ISR+4
  6809  000D54  CFEA F029          	movff	fsr0h,??_ISR+5
  6810  000D58  CFE1 F02A          	movff	fsr1l,??_ISR+6
  6811  000D5C  CFE2 F02B          	movff	fsr1h,??_ISR+7
  6812  000D60  CFD9 F02C          	movff	fsr2l,??_ISR+8
  6813  000D64  CFDA F02D          	movff	fsr2h,??_ISR+9
  6814  000D68  CFF3 F02E          	movff	prodl,??_ISR+10
  6815  000D6C  CFF4 F02F          	movff	prodh,??_ISR+11
  6816  000D70  CFF6 F030          	movff	tblptrl,??_ISR+12
  6817  000D74  CFF7 F031          	movff	tblptrh,??_ISR+13
  6818  000D78  CFF8 F032          	movff	tblptru,??_ISR+14
  6819  000D7C  CFF5 F033          	movff	tablat,??_ISR+15
  6820                           
  6821                           ;ES_Port.c: 114: static unsigned int LastTime;
  6822                           ;ES_Port.c: 115: static unsigned int NextTime;
  6823                           ;ES_Port.c: 117: if (CCP1IF == 1)
  6824  000D80  A49E               	btfss	3998,2,c	;volatile
  6825  000D82  D015               	goto	i2l2744
  6826                           
  6827                           ;ES_Port.c: 118: {
  6828                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  6829  000D84  50BF               	movf	4031,w,c	;volatile
  6830  000D86  6E24               	movwf	??_ISR& (0+255),c
  6831  000D88  50BE               	movf	4030,w,c	;volatile
  6832  000D8A  6E34               	movwf	ISR@LastTime,c
  6833  000D8C  C024  F035         	movff	??_ISR,ISR@LastTime+1
  6834                           
  6835                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  6836  000D90  0E20               	movlw	32
  6837  000D92  2434               	addwf	ISR@LastTime,w,c
  6838  000D94  6E36               	movwf	ISR@NextTime,c
  6839  000D96  0E4E               	movlw	78
  6840  000D98  2035               	addwfc	ISR@LastTime+1,w,c
  6841  000D9A  6E37               	movwf	ISR@NextTime+1,c
  6842                           
  6843                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  6844  000D9C  5037               	movf	ISR@NextTime+1,w,c
  6845  000D9E  6EBF               	movwf	4031,c	;volatile
  6846                           
  6847                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  6848  000DA0  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  6849                           
  6850                           ;ES_Port.c: 123: CCP1IF = 0;
  6851  000DA4  949E               	bcf	3998,2,c	;volatile
  6852                           
  6853                           ;ES_Port.c: 124: TickCount++;
  6854  000DA6  0100               	movlb	0	; () banked
  6855  000DA8  2B9F               	incf	_TickCount& (0+255),f,b	;volatile
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;ES_Port.c: 125: SysTickCounter++;
  6859  000DAA  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  6860  000DAC  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  6861  000DAE                     i2l2744:
  6862                           
  6863                           ;ES_Port.c: 126: }
  6864                           ;ES_Port.c: 127: if (SSPIF == 1)
  6865  000DAE  A69E               	btfss	3998,3,c	;volatile
  6866  000DB0  D003               	goto	i2l149
  6867                           
  6868                           ;ES_Port.c: 128: {
  6869                           ;ES_Port.c: 129: SSPIF = 0;
  6870  000DB2  969E               	bcf	3998,3,c	;volatile
  6871                           
  6872                           ;ES_Port.c: 130: SPI32_EOTResponse();
  6873  000DB4  ECB7  F00B         	call	_SPI32_EOTResponse	;wreg free
  6874  000DB8                     i2l149:
  6875  000DB8  C033  FFF5         	movff	??_ISR+15,tablat
  6876  000DBC  C032  FFF8         	movff	??_ISR+14,tblptru
  6877  000DC0  C031  FFF7         	movff	??_ISR+13,tblptrh
  6878  000DC4  C030  FFF6         	movff	??_ISR+12,tblptrl
  6879  000DC8  C02F  FFF4         	movff	??_ISR+11,prodh
  6880  000DCC  C02E  FFF3         	movff	??_ISR+10,prodl
  6881  000DD0  C02D  FFDA         	movff	??_ISR+9,fsr2h
  6882  000DD4  C02C  FFD9         	movff	??_ISR+8,fsr2l
  6883  000DD8  C02B  FFE2         	movff	??_ISR+7,fsr1h
  6884  000DDC  C02A  FFE1         	movff	??_ISR+6,fsr1l
  6885  000DE0  C029  FFEA         	movff	??_ISR+5,fsr0h
  6886  000DE4  C028  FFE9         	movff	??_ISR+4,fsr0l
  6887  000DE8  C027  FFFB         	movff	??_ISR+3,pclatu
  6888  000DEC  C026  FFFA         	movff	??_ISR+2,pclath
  6889  000DF0  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6890  000DF2  0011               	retfie		f
  6891  000DF4                     __end_of_ISR:
  6892                           	opt stack 0
  6893                           tosu	equ	0xFFF
  6894                           tosh	equ	0xFFE
  6895                           tosl	equ	0xFFD
  6896                           pclatu	equ	0xFFB
  6897                           pclath	equ	0xFFA
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           postinc0	equ	0xFEE
  6906                           fsr0h	equ	0xFEA
  6907                           fsr0l	equ	0xFE9
  6908                           wreg	equ	0xFE8
  6909                           indf1	equ	0xFE7
  6910                           postinc1	equ	0xFE6
  6911                           postdec1	equ	0xFE5
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _SPI32_EOTResponse *****************
  6922 ;; Defined at:
  6923 ;;		line 156 in file "SPI32_HW.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6937 ;;      Params:         0       0       0       0
  6938 ;;      Locals:         3       0       0       0
  6939 ;;      Temps:          0       0       0       0
  6940 ;;      Totals:         3       0       0       0
  6941 ;;Total ram usage:        3 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    4
  6944 ;; This function calls:
  6945 ;;		i2_PostSPI32ControlService
  6946 ;; This function is called by:
  6947 ;;		_ISR
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text45
  6952  00176E                     __ptext45:
  6953                           	opt stack 0
  6954  00176E                     _SPI32_EOTResponse:
  6955                           	opt stack 16
  6956                           
  6957                           ;SPI32_HW.c: 159: ES_Event EOTevent;
  6958                           ;SPI32_HW.c: 160: EOTevent.EventType = ES_TIMEOUT;
  6959                           
  6960                           ;incstack = 0
  6961  00176E  0E03               	movlw	3
  6962  001770  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  6963                           
  6964                           ;SPI32_HW.c: 161: PostSPI32ControlService(EOTevent);
  6965  001772  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  6966  001776  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  6967  00177A  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  6968  00177E  ECC2  F00B         	call	i2_PostSPI32ControlService	;wreg free
  6969  001782  0012               	return		;funcret
  6970  001784                     __end_of_SPI32_EOTResponse:
  6971                           	opt stack 0
  6972                           tosu	equ	0xFFF
  6973                           tosh	equ	0xFFE
  6974                           tosl	equ	0xFFD
  6975                           pclatu	equ	0xFFB
  6976                           pclath	equ	0xFFA
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           postinc0	equ	0xFEE
  6985                           fsr0h	equ	0xFEA
  6986                           fsr0l	equ	0xFE9
  6987                           wreg	equ	0xFE8
  6988                           indf1	equ	0xFE7
  6989                           postinc1	equ	0xFE6
  6990                           postdec1	equ	0xFE5
  6991                           fsr1h	equ	0xFE2
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function i2_PostSPI32ControlService *****************
  7001 ;; Defined at:
  7002 ;;		line 117 in file "SPI32_ControlService.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;		None
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      unsigned char 
  7009 ;; Registers used:
  7010 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7016 ;;      Params:         3       0       0       0
  7017 ;;      Locals:         0       0       0       0
  7018 ;;      Temps:          0       0       0       0
  7019 ;;      Totals:         3       0       0       0
  7020 ;;Total ram usage:        3 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    3
  7023 ;; This function calls:
  7024 ;;		i2_ES_PostToService
  7025 ;; This function is called by:
  7026 ;;		_SPI32_EOTResponse
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           	psect	text46
  7031  001784                     __ptext46:
  7032                           	opt stack 0
  7033  001784                     i2_PostSPI32ControlService:
  7034                           	opt stack 16
  7035                           
  7036                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  7037                           ;	Return value of i2_PostSPI32ControlService is never used
  7038                           
  7039                           ;incstack = 0
  7040  001784  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  7041  001788  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  7042  00178C  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  7043  001790  0100               	movlb	0	; () banked
  7044  001792  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  7045  001794  EC6B  F009         	call	i2_ES_PostToService
  7046  001798  0012               	return	
  7047  00179A                     __end_ofi2_PostSPI32ControlService:
  7048                           	opt stack 0
  7049                           tosu	equ	0xFFF
  7050                           tosh	equ	0xFFE
  7051                           tosl	equ	0xFFD
  7052                           pclatu	equ	0xFFB
  7053                           pclath	equ	0xFFA
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           postinc0	equ	0xFEE
  7062                           fsr0h	equ	0xFEA
  7063                           fsr0l	equ	0xFE9
  7064                           wreg	equ	0xFE8
  7065                           indf1	equ	0xFE7
  7066                           postinc1	equ	0xFE6
  7067                           postdec1	equ	0xFE5
  7068                           fsr1h	equ	0xFE2
  7069                           fsr1l	equ	0xFE1
  7070                           indf2	equ	0xFDF
  7071                           postinc2	equ	0xFDE
  7072                           postdec2	equ	0xFDD
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077 ;; *************** function i2_ES_PostToService *****************
  7078 ;; Defined at:
  7079 ;;		line 351 in file "ES_Framework.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;  WhichService    1    wreg     unsigned char 
  7082 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  WhichService    1   28[COMRAM] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      unsigned char 
  7087 ;; Registers used:
  7088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7094 ;;      Params:         3       0       0       0
  7095 ;;      Locals:         1       0       0       0
  7096 ;;      Temps:          2       0       0       0
  7097 ;;      Totals:         6       0       0       0
  7098 ;;Total ram usage:        6 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    2
  7101 ;; This function calls:
  7102 ;;		i2_ES_EnQueueFIFO
  7103 ;; This function is called by:
  7104 ;;		i2_PostSPI32ControlService
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text47
  7109  0012D6                     __ptext47:
  7110                           	opt stack 0
  7111  0012D6                     i2_ES_PostToService:
  7112                           	opt stack 16
  7113                           
  7114                           ;incstack = 0
  7115                           ;i2ES_PostToService@WhichService stored from wreg
  7116  0012D6  6E1D               	movwf	i2ES_PostToService@WhichService,c
  7117                           
  7118                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  7119                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  7120                           ;ES_Framework.c: 354: 1 )){
  7121  0012D8  0E02               	movlw	2
  7122  0012DA  601D               	cpfslt	i2ES_PostToService@WhichService,c
  7123  0012DC  D02F               	goto	i2l2382
  7124  0012DE  501D               	movf	i2ES_PostToService@WhichService,w,c
  7125  0012E0  0D03               	mullw	3
  7126  0012E2  0E58               	movlw	low _EventQueues
  7127  0012E4  24F3               	addwf	prodl,w,c
  7128  0012E6  6EF6               	movwf	tblptrl,c
  7129  0012E8  0E03               	movlw	high _EventQueues
  7130  0012EA  20F4               	addwfc	prodh,w,c
  7131  0012EC  6EF7               	movwf	tblptrh,c
  7132  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  7133  0012EE                     	endif
  7134  0012EE  0009               	tblrd		*+
  7135  0012F0  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  7136  0012F4  000A               	tblrd		*-
  7137  0012F6  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  7138  0012FA  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  7139  0012FE  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  7140  001302  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  7141  001306  EC4D  F006         	call	i2_ES_EnQueueFIFO	;wreg free
  7142  00130A  06E8               	decf	wreg,f,c
  7143  00130C  A4D8               	btfss	status,2,c
  7144  00130E  D016               	goto	i2l2382
  7145                           
  7146                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  7147  001310  501D               	movf	i2ES_PostToService@WhichService,w,c
  7148  001312  0D02               	mullw	2
  7149  001314  0E01               	movlw	low _BitNum2SetMask
  7150  001316  24F3               	addwf	prodl,w,c
  7151  001318  6EF6               	movwf	tblptrl,c
  7152  00131A  0E03               	movlw	high _BitNum2SetMask
  7153  00131C  20F4               	addwfc	prodh,w,c
  7154  00131E  6EF7               	movwf	tblptrh,c
  7155  001320                     	if	0	;There are less than 3 active tblptr bytes
  7156  001320                     	endif
  7157  001320  0009               	tblrd		*+
  7158  001322  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  7159  001326  0009               	tblrd		*+
  7160  001328  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  7161  00132C  501B               	movf	??i2_ES_PostToService,w,c
  7162  00132E  0100               	movlb	0	; () banked
  7163  001330  1391               	iorwf	_Ready& (0+255),f,b
  7164  001332  501C               	movf	??i2_ES_PostToService+1,w,c
  7165  001334  0100               	movlb	0	; () banked
  7166  001336  1392               	iorwf	(_Ready+1)& (0+255),f,b
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;ES_Framework.c: 356: return 1;
  7170  001338  0E01               	movlw	1
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;ES_Framework.c: 357: } else
  7174                           
  7175                           ; BSR set to: 0
  7176  00133A  0012               	return	
  7177  00133C                     i2l2382:
  7178                           
  7179                           ;ES_Framework.c: 358: return 0;
  7180  00133C  0E00               	movlw	0
  7181  00133E  0012               	return	
  7182  001340                     __end_ofi2_ES_PostToService:
  7183                           	opt stack 0
  7184                           tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclatu	equ	0xFFB
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           fsr0h	equ	0xFEA
  7198                           fsr0l	equ	0xFE9
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postinc1	equ	0xFE6
  7202                           postdec1	equ	0xFE5
  7203                           fsr1h	equ	0xFE2
  7204                           fsr1l	equ	0xFE1
  7205                           indf2	equ	0xFDF
  7206                           postinc2	equ	0xFDE
  7207                           postdec2	equ	0xFDD
  7208                           fsr2h	equ	0xFDA
  7209                           fsr2l	equ	0xFD9
  7210                           status	equ	0xFD8
  7211                           
  7212 ;; *************** function i2_ES_EnQueueFIFO *****************
  7213 ;; Defined at:
  7214 ;;		line 85 in file "ES_Queue.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  7217 ;;		 -> Queue1(12), Queue0(12), 
  7218 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  7221 ;;		 -> Queue1(12), Queue0(12), 
  7222 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      unsigned char 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7232 ;;      Params:         5       0       0       0
  7233 ;;      Locals:         3       0       0       0
  7234 ;;      Temps:          3       0       0       0
  7235 ;;      Totals:        11       0       0       0
  7236 ;;Total ram usage:       11 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    1
  7239 ;; This function calls:
  7240 ;;		i2___awmod
  7241 ;;		i2___wmul
  7242 ;; This function is called by:
  7243 ;;		i2_ES_PostToService
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text48
  7248  000C9A                     __ptext48:
  7249                           	opt stack 0
  7250  000C9A                     i2_ES_EnQueueFIFO:
  7251                           	opt stack 16
  7252                           
  7253                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  7254                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  7255                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  7256                           
  7257                           ;incstack = 0
  7258  000C9A  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  7259  000C9E  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  7260                           
  7261                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  7262  000CA2  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7263  000CA6  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7264  000CAA  EE10 F002          	lfsr	1,2
  7265  000CAE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7266  000CB0  26E1               	addwf	fsr1l,f,c
  7267  000CB2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7268  000CB4  22E2               	addwfc	fsr1h,f,c
  7269  000CB6  50DE               	movf	postinc2,w,c
  7270  000CB8  5CE6               	subwf	postinc1,w,c
  7271  000CBA  B0D8               	btfsc	status,0,c
  7272  000CBC  D046               	goto	i2l2290
  7273                           
  7274                           ;ES_Queue.c: 92: {
  7275                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7276  000CBE  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  7277  000CC2  9EF2               	bcf	intcon,7,c	;volatile
  7278                           
  7279                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  7280                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  7281  000CC4  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7282  000CC8  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7283  000CCC  50DF               	movf	indf2,w,c
  7284  000CCE  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  7285  000CD0  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  7286  000CD2  6E03               	movwf	i2___awmod@divisor,c
  7287  000CD4  6A04               	clrf	i2___awmod@divisor+1,c
  7288  000CD6  EE20 F002          	lfsr	2,2
  7289  000CDA  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7290  000CDC  26D9               	addwf	fsr2l,f,c
  7291  000CDE  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7292  000CE0  22DA               	addwfc	fsr2h,f,c
  7293  000CE2  50DF               	movf	indf2,w,c
  7294  000CE4  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  7295  000CE6  EE20 F001          	lfsr	2,1
  7296  000CEA  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7297  000CEC  26D9               	addwf	fsr2l,f,c
  7298  000CEE  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7299  000CF0  22DA               	addwfc	fsr2h,f,c
  7300  000CF2  50DF               	movf	indf2,w,c
  7301  000CF4  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  7302  000CF6  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  7303  000CF8  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  7304  000CFA  6E01               	movwf	i2___awmod@dividend,c
  7305  000CFC  6A02               	clrf	i2___awmod@dividend+1,c
  7306  000CFE  3602               	rlcf	i2___awmod@dividend+1,f,c
  7307  000D00  EC33  F009         	call	i2___awmod	;wreg free
  7308  000D04  0E01               	movlw	1
  7309  000D06  2401               	addwf	?i2___awmod,w,c
  7310  000D08  6E07               	movwf	i2___wmul@multiplier,c
  7311  000D0A  0E00               	movlw	0
  7312  000D0C  2002               	addwfc	?i2___awmod+1,w,c
  7313  000D0E  6E08               	movwf	i2___wmul@multiplier+1,c
  7314  000D10  0E00               	movlw	0
  7315  000D12  6E0A               	movwf	i2___wmul@multiplicand+1,c
  7316  000D14  0E03               	movlw	3
  7317  000D16  6E09               	movwf	i2___wmul@multiplicand,c
  7318  000D18  EC33  F00B         	call	i2___wmul	;wreg free
  7319  000D1C  5007               	movf	?i2___wmul,w,c
  7320  000D1E  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  7321  000D20  6ED9               	movwf	fsr2l,c
  7322  000D22  5008               	movf	?i2___wmul+1,w,c
  7323  000D24  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  7324  000D26  6EDA               	movwf	fsr2h,c
  7325  000D28  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  7326  000D2C  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  7327  000D30  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  7328                           
  7329                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7330  000D34  EE20 F002          	lfsr	2,2
  7331  000D38  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7332  000D3A  26D9               	addwf	fsr2l,f,c
  7333  000D3C  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7334  000D3E  22DA               	addwfc	fsr2h,f,c
  7335  000D40  2ADF               	incf	indf2,f,c
  7336                           
  7337                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7338  000D42  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  7339                           
  7340                           ;ES_Queue.c: 101: return(1);
  7341  000D46  0E01               	movlw	1
  7342                           
  7343                           ;ES_Queue.c: 102: }else
  7344  000D48  0012               	return	
  7345  000D4A                     i2l2290:
  7346                           
  7347                           ;ES_Queue.c: 103: return(0);
  7348  000D4A  0E00               	movlw	0
  7349  000D4C  0012               	return	
  7350  000D4E                     __end_ofi2_ES_EnQueueFIFO:
  7351                           	opt stack 0
  7352                           tosu	equ	0xFFF
  7353                           tosh	equ	0xFFE
  7354                           tosl	equ	0xFFD
  7355                           pclatu	equ	0xFFB
  7356                           pclath	equ	0xFFA
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           postinc0	equ	0xFEE
  7365                           fsr0h	equ	0xFEA
  7366                           fsr0l	equ	0xFE9
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           postinc1	equ	0xFE6
  7370                           postdec1	equ	0xFE5
  7371                           fsr1h	equ	0xFE2
  7372                           fsr1l	equ	0xFE1
  7373                           indf2	equ	0xFDF
  7374                           postinc2	equ	0xFDE
  7375                           postdec2	equ	0xFDD
  7376                           fsr2h	equ	0xFDA
  7377                           fsr2l	equ	0xFD9
  7378                           status	equ	0xFD8
  7379                           
  7380 ;; *************** function i2___wmul *****************
  7381 ;; Defined at:
  7382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  multiplier      2    6[COMRAM] unsigned int 
  7385 ;;  multiplicand    2    8[COMRAM] unsigned int 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;  __wmul          2   10[COMRAM] unsigned int 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  2    6[COMRAM] unsigned int 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, prodl, prodh
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7397 ;;      Params:         4       0       0       0
  7398 ;;      Locals:         2       0       0       0
  7399 ;;      Temps:          0       0       0       0
  7400 ;;      Totals:         6       0       0       0
  7401 ;;Total ram usage:        6 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		i2_ES_EnQueueFIFO
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text49
  7411  001666                     __ptext49:
  7412                           	opt stack 0
  7413  001666                     i2___wmul:
  7414                           	opt stack 16
  7415                           
  7416                           ;incstack = 0
  7417  001666  5007               	movf	i2___wmul@multiplier,w,c
  7418  001668  0209               	mulwf	i2___wmul@multiplicand,c
  7419  00166A  CFF3 F00B          	movff	prodl,i2___wmul@product
  7420  00166E  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7421  001672  5007               	movf	i2___wmul@multiplier,w,c
  7422  001674  020A               	mulwf	i2___wmul@multiplicand+1,c
  7423  001676  50F3               	movf	prodl,w,c
  7424  001678  260C               	addwf	i2___wmul@product+1,f,c
  7425  00167A  5008               	movf	i2___wmul@multiplier+1,w,c
  7426  00167C  0209               	mulwf	i2___wmul@multiplicand,c
  7427  00167E  50F3               	movf	prodl,w,c
  7428  001680  260C               	addwf	i2___wmul@product+1,f,c
  7429  001682  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7430  001686  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7431  00168A  0012               	return	
  7432  00168C                     __end_ofi2___wmul:
  7433                           	opt stack 0
  7434                           tosu	equ	0xFFF
  7435                           tosh	equ	0xFFE
  7436                           tosl	equ	0xFFD
  7437                           pclatu	equ	0xFFB
  7438                           pclath	equ	0xFFA
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           intcon	equ	0xFF2
  7446                           postinc0	equ	0xFEE
  7447                           fsr0h	equ	0xFEA
  7448                           fsr0l	equ	0xFE9
  7449                           wreg	equ	0xFE8
  7450                           indf1	equ	0xFE7
  7451                           postinc1	equ	0xFE6
  7452                           postdec1	equ	0xFE5
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function i2___awmod *****************
  7463 ;; Defined at:
  7464 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  dividend        2    0[COMRAM] int 
  7467 ;;  divisor         2    2[COMRAM] int 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  __awmod         1    5[COMRAM] unsigned char 
  7470 ;;  __awmod         1    4[COMRAM] unsigned char 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  2    0[COMRAM] int 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7480 ;;      Params:         4       0       0       0
  7481 ;;      Locals:         2       0       0       0
  7482 ;;      Temps:          0       0       0       0
  7483 ;;      Totals:         6       0       0       0
  7484 ;;Total ram usage:        6 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		i2_ES_EnQueueFIFO
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text50
  7494  001266                     __ptext50:
  7495                           	opt stack 0
  7496  001266                     i2___awmod:
  7497                           	opt stack 16
  7498                           
  7499                           ;incstack = 0
  7500  001266  0E00               	movlw	0
  7501  001268  6E06               	movwf	i2___awmod@sign,c
  7502  00126A  AE02               	btfss	i2___awmod@dividend+1,7,c
  7503  00126C  D006               	goto	i2l2164
  7504  00126E  6C01               	negf	i2___awmod@dividend,c
  7505  001270  1E02               	comf	i2___awmod@dividend+1,f,c
  7506  001272  B0D8               	btfsc	status,0,c
  7507  001274  2A02               	incf	i2___awmod@dividend+1,f,c
  7508  001276  0E01               	movlw	1
  7509  001278  6E06               	movwf	i2___awmod@sign,c
  7510  00127A                     i2l2164:
  7511  00127A  AE04               	btfss	i2___awmod@divisor+1,7,c
  7512  00127C  D004               	goto	i2l2168
  7513  00127E  6C03               	negf	i2___awmod@divisor,c
  7514  001280  1E04               	comf	i2___awmod@divisor+1,f,c
  7515  001282  B0D8               	btfsc	status,0,c
  7516  001284  2A04               	incf	i2___awmod@divisor+1,f,c
  7517  001286                     i2l2168:
  7518  001286  5003               	movf	i2___awmod@divisor,w,c
  7519  001288  1004               	iorwf	i2___awmod@divisor+1,w,c
  7520  00128A  B4D8               	btfsc	status,2,c
  7521  00128C  D018               	goto	i2l2184
  7522  00128E  0E01               	movlw	1
  7523  001290  6E05               	movwf	i2___awmod@counter,c
  7524  001292  D004               	goto	i2l2174
  7525  001294                     i2l2172:
  7526  001294  90D8               	bcf	status,0,c
  7527  001296  3603               	rlcf	i2___awmod@divisor,f,c
  7528  001298  3604               	rlcf	i2___awmod@divisor+1,f,c
  7529  00129A  2A05               	incf	i2___awmod@counter,f,c
  7530  00129C                     i2l2174:
  7531  00129C  AE04               	btfss	i2___awmod@divisor+1,7,c
  7532  00129E  D7FA               	goto	i2l2172
  7533  0012A0                     i2l2176:
  7534  0012A0  5003               	movf	i2___awmod@divisor,w,c
  7535  0012A2  5C01               	subwf	i2___awmod@dividend,w,c
  7536  0012A4  5004               	movf	i2___awmod@divisor+1,w,c
  7537  0012A6  5802               	subwfb	i2___awmod@dividend+1,w,c
  7538  0012A8  A0D8               	btfss	status,0,c
  7539  0012AA  D004               	goto	i2l2180
  7540  0012AC  5003               	movf	i2___awmod@divisor,w,c
  7541  0012AE  5E01               	subwf	i2___awmod@dividend,f,c
  7542  0012B0  5004               	movf	i2___awmod@divisor+1,w,c
  7543  0012B2  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7544  0012B4                     i2l2180:
  7545  0012B4  90D8               	bcf	status,0,c
  7546  0012B6  3204               	rrcf	i2___awmod@divisor+1,f,c
  7547  0012B8  3203               	rrcf	i2___awmod@divisor,f,c
  7548  0012BA  2E05               	decfsz	i2___awmod@counter,f,c
  7549  0012BC  D7F1               	goto	i2l2176
  7550  0012BE                     i2l2184:
  7551  0012BE  5006               	movf	i2___awmod@sign,w,c
  7552  0012C0  B4D8               	btfsc	status,2,c
  7553  0012C2  D004               	goto	i2l2188
  7554  0012C4  6C01               	negf	i2___awmod@dividend,c
  7555  0012C6  1E02               	comf	i2___awmod@dividend+1,f,c
  7556  0012C8  B0D8               	btfsc	status,0,c
  7557  0012CA  2A02               	incf	i2___awmod@dividend+1,f,c
  7558  0012CC                     i2l2188:
  7559  0012CC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7560  0012D0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7561  0012D4  0012               	return	
  7562  0012D6                     __end_ofi2___awmod:
  7563                           	opt stack 0
  7564                           tosu	equ	0xFFF
  7565                           tosh	equ	0xFFE
  7566                           tosl	equ	0xFFD
  7567                           pclatu	equ	0xFFB
  7568                           pclath	equ	0xFFA
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           postinc0	equ	0xFEE
  7577                           fsr0h	equ	0xFEA
  7578                           fsr0l	equ	0xFE9
  7579                           wreg	equ	0xFE8
  7580                           indf1	equ	0xFE7
  7581                           postinc1	equ	0xFE6
  7582                           postdec1	equ	0xFE5
  7583                           fsr1h	equ	0xFE2
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           postdec2	equ	0xFDD
  7588                           fsr2h	equ	0xFDA
  7589                           fsr2l	equ	0xFD9
  7590                           status	equ	0xFD8
  7591                           tosu	equ	0xFFF
  7592                           tosh	equ	0xFFE
  7593                           tosl	equ	0xFFD
  7594                           pclatu	equ	0xFFB
  7595                           pclath	equ	0xFFA
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           postinc0	equ	0xFEE
  7604                           fsr0h	equ	0xFEA
  7605                           fsr0l	equ	0xFE9
  7606                           wreg	equ	0xFE8
  7607                           indf1	equ	0xFE7
  7608                           postinc1	equ	0xFE6
  7609                           postdec1	equ	0xFE5
  7610                           fsr1h	equ	0xFE2
  7611                           fsr1l	equ	0xFE1
  7612                           indf2	equ	0xFDF
  7613                           postinc2	equ	0xFDE
  7614                           postdec2	equ	0xFDD
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619                           	psect	text51
  7620  000000                     __ptext51:
  7621                           	opt stack 0
  7622                           tosu	equ	0xFFF
  7623                           tosh	equ	0xFFE
  7624                           tosl	equ	0xFFD
  7625                           pclatu	equ	0xFFB
  7626                           pclath	equ	0xFFA
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           postinc0	equ	0xFEE
  7635                           fsr0h	equ	0xFEA
  7636                           fsr0l	equ	0xFE9
  7637                           wreg	equ	0xFE8
  7638                           indf1	equ	0xFE7
  7639                           postinc1	equ	0xFE6
  7640                           postdec1	equ	0xFE5
  7641                           fsr1h	equ	0xFE2
  7642                           fsr1l	equ	0xFE1
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650                           	psect	rparam
  7651  0000                     tosu	equ	0xFFF
  7652                           tosh	equ	0xFFE
  7653                           tosl	equ	0xFFD
  7654                           pclatu	equ	0xFFB
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           postinc0	equ	0xFEE
  7664                           fsr0h	equ	0xFEA
  7665                           fsr0l	equ	0xFE9
  7666                           wreg	equ	0xFE8
  7667                           indf1	equ	0xFE7
  7668                           postinc1	equ	0xFE6
  7669                           postdec1	equ	0xFE5
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679                           	psect	temp
  7680  00003E                     btemp:
  7681                           	opt stack 0
  7682  00003E                     	ds	1
  7683  0000                     int$flags	set	btemp
  7684                           tosu	equ	0xFFF
  7685                           tosh	equ	0xFFE
  7686                           tosl	equ	0xFFD
  7687                           pclatu	equ	0xFFB
  7688                           pclath	equ	0xFFA
  7689                           tblptru	equ	0xFF8
  7690                           tblptrh	equ	0xFF7
  7691                           tblptrl	equ	0xFF6
  7692                           tablat	equ	0xFF5
  7693                           prodh	equ	0xFF4
  7694                           prodl	equ	0xFF3
  7695                           intcon	equ	0xFF2
  7696                           postinc0	equ	0xFEE
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           indf1	equ	0xFE7
  7701                           postinc1	equ	0xFE6
  7702                           postdec1	equ	0xFE5
  7703                           fsr1h	equ	0xFE2
  7704                           fsr1l	equ	0xFE1
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        58
    BSS         476
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      61
    BANK0           160     55     151
    BANK1           256      0     256
    BANK2           256      0     172

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@s1	PTR const void  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 128
		 -> OffFrames(BANK1[128]), PixelFrames(BANK1[128]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 128
		 -> NULL(NULL[0]), OffFrames(BANK1[128]), PixelFrames(BANK1[128]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    sp__memcpy	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    DotStar_Show@pixelPointer	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__UpdatePattern	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S111$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunPatternControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _DotStar_Off->_SPI32_TransmitFrames
    _ShowPattern->_DotStar_Show
    _UpdatePattern->___lmul
    _DotStar_Show->_SPI32_TransmitFrames
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27318
                                             54 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   20459
                                             49 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6048
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6048
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                               7     4      3     230
                                             40 BANK0      7     4      3
                       _GetNextFrame
                     _SPI32_SendByte
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   11378
                                             40 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0    3337
                        _DotStar_Off
                 _ES_Timer_StopTimer
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _DotStar_Off                                          0     0      0    3293
               _SPI32_TransmitFrames
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0    5004
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        9     7      2    1057
                                             12 BANK0      9     7      2
                            ___lbmod
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                         2     0      2    3739
                                             38 BANK0      2     0      2
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     348
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    3293
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    2922
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    2793
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2313
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     284
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6463
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    2740
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    3004
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2695
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0     868
                                             35 COMRAM    16    16      0
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     868
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             ___lbmod
             ___llmod
             ___lmul
           _memcpy (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           ___lbmod
           ___llmod
           ___lmul
       _StopPattern
         _DotStar_Off
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
         _ES_Timer_StopTimer
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendByte
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      AC       8       67.2%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     37      97       4       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     280       9        0.0%
DATA                 0      0     280      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Oct 31 22:18:01 2016

                   ??__HW_Timer_Init 00BD                  ES_CheckUserEvents@i 00BB  
                __HW_Timer_Init@Rate 00BB                  ___wmul@multiplicand 00C3  
                    ??_UpdatePattern 00C9  RunPatternControlService@ReturnEvent 00E6  
                                l324 0C8C                                  l453 0836  
                                l529 10F8                                  l901 0FC2  
              __end_of_ES_Initialize 0A24                                  _GIE 007F97  
                                _ISR 0008            __end_of_SPI32_EOTResponse 1784  
                       ___awmod@sign 00C0              __end_of_Check4Keystroke 17E0  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00CF  
            ES_EnQueueFIFO@Event2Add 00C9                    ?_ES_PostToService 00D2  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 008D                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0088                                 l2030 0EEA  
                               l2022 0EC4                                 l2110 118C  
                               l2120 1484                                 l2042 0F30  
                               l2034 0F0E                                 l2026 0ED8  
                               l2018 0EB4                                 l2114 11B2  
                               l2028 0EE4                                 l2140 0F66  
                               l2204 0E8C                                 l2038 0F1C  
                               l2062 0B02                                 l2142 0F6C  
                               l2302 0646                                 l2128 14AC  
                               l2216 13A0                                 l2240 03F0  
                               l2208 0E92                                 l2312 06BE  
                               l2146 0FB0                                 l2138 0F56  
                               l2314 06FC                                 l2420 0604  
                               l2244 046E                                 l2500 0C38  
                               l2334 0BA2                                 l2078 1262  
                               l2094 1412                                 l2238 03E8  
                               l2254 04D4                                 l2416 05E8  
                               l2088 13F2                                 l2256 04FC  
                               l2512 0C5A                                 l2520 0C70  
                               l2338 0BC8                                 l2610 099C  
                               l2602 0954                                 l2426 062C  
                               l2506 0C4A                                 l2194 0E00  
                               l2444 1744                                 l2606 0998  
                               l2622 0A20                                 l2472 138E  
                               l2544 0750                                 l2448 174C  
                               l2632 08C8                                 l2538 156C  
                               l2618 0A1A                                 l2562 079C  
                               l2554 0782                                 l2490 0C18  
                               l2642 0932                                 l2626 0846  
                               l2810 1098                                 l2556 0786  
                               l2548 075C                                 l2484 0C06  
                               l2812 10AA                                 l2820 10E0  
                               l2574 07C8                                 l2494 0C28  
                               l2478 0BDE                                 l2638 091C  
                               l2654 15E8                                 l2814 10BC  
                               l2584 0806                                 l2568 07B2  
                               l2488 0C14                                 l2656 15F0  
                               l2816 10CE                                 l2588 080E  
                               l2598 094A                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 u1310 0400  
                               u1320 0402                                 u1244 0E26  
                               u1245 0E1E                                 _LATC 000F8B  
                               u1448 1450                                 u1449 1468  
                               u1388 06A6                                 _PIE1 000F9D  
                               u1738 08F2                                 u1739 090A  
                               u1698 09F4                                 u1699 0A10  
                 ??_ES_PostToService 00D5                      __end_of_HW_Init 16D2  
                               _main 106C                          ?_ES_DeQueue 00C7  
          Pattern_RGBPatterns@Length 0096                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 003E  
                      main@ErrorType 00F1                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016    __end_of_InitPatternControlService 1392  
                    ?_SPI32_SendByte 0001                          ?_SPI32_Init 0001  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
               __end_of_GetNextFrame 16B0                                ??_ISR 0024  
                 ES_Run@HighestPrior 00F0                  __end_of_DotStar_Off 170A  
                              ?_main 0001                __end_of_ES_Timer_Init 17B6  
                    __end_of___awmod 0F3A                      __end_of___lbmod 14B8  
                              _T1CON 000FCD                      __end_of___llmod 0FD4  
                         _DistList00 0360                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l149 0DB8          ??i2_PostSPI32ControlService 0021  
                              _PORTC 000F82                                _TRISC 000F94  
                              _SSPIE 007CEB                                _SSPIF 007CF3  
                      __CFG_PWRT$OFF 000000                 _SPI32_TransmitFrames 160E  
                ___lmul@multiplicand 00BF                                _Ready 0091  
    __end_of_InitSPI32ControlService 1570                           _FrameIndex 009A  
              SPI32_SendByte@newByte 00BB                                _putch 17E0  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 168C  
                              status 000FD8                   __size_ofi2___awmod 0070  
                    __initialization 0FD4               ES_GetMSBitSet@LoopCntr 00C4  
         __end_of_ES_CheckUserEvents 1474                         __end_of_main 10FA  
                  ES_Timer_Init@Rate 00BD                  __end_of_EventQueues 035E  
                             ??_main 00F1                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 0016  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 00DB     __end_of__HW_Process_Pending_Ints 1758  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 0BD6                 __end_of_DotStar_Show 14FA  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 00BB                               _CCP1IF 007CF2  
                   ___llmod@dividend 00BB                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 009C  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BD  
                             i2l2180 12B4                               i2l2172 1294  
                             i2l2164 127A                               i2l2174 129C  
                             i2l2176 12A0                               i2l2184 12BE  
                             i2l2168 1286                               i2l2290 0D4A  
                             i2l2188 12CC                               i2l2382 133C  
                             i2l2744 0DAE                               _INTCON 000FF2  
                             _ES_Run 0844                               _SSPADD 000FC8  
                             _SSPBUF 000FC9            i2_PostSPI32ControlService 1784  
                   ??_ES_EnQueueFIFO 00CC                       _Timer2PostFunc 0321  
                             _Length 009B        SPI32_TransmitFrames@numFrames 00DD  
                      ?_PausePattern 0001                               _Queue0 00A0  
                             _Queue1 00AC                       _SysTickCounter 0038  
                        _DotStar_Off 16EE                               ___lmul 117A  
           ??_RunSPI32ControlService 00E6                               ___wmul 1570  
    InitSPI32ControlService@Priority 00DB                            ??___awmod 00BF  
                          ??___lbmod 00BC                            ??___llmod 00C3  
                             _memcpy 13E0          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 102C                               clear_1 103A  
                             clear_2 104C                               clear_3 1058  
                    ___awmod@divisor 00BD                        ??_ShowPattern 00E3  
          ES_Timer_InitTimer@NewTime 00BB                      ___awmod@counter 00BF  
                             _printf 15DA                          ISR@LastTime 0034  
                       __pdataCOMRAM 003D               ES_InitQueue@pThisQueue 00BE  
                  __end_ofi2___awmod 12D6                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00CF  
             UpdatePattern@patternID 00CE              ES_GetMSBitSet@Val2Check 00BB  
                    ___lbmod@divisor 00BB                           __accesstop 0060  
            __end_of__initialization 105E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BD      RunSPI32ControlService@ThisEvent 00E3  
                    __CFG_PBADEN$OFF 000000    __size_of_RunPatternControlService 00C4  
          ?_RunPatternControlService 00E3                __size_of_GetNextFrame 0024  
                      ___rparam_used 000001          ??_InitPatternControlService 00D8  
                     ??_PausePattern 00C0                          _EventQueues 0358  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                       __pidataBANK0 17D6                         __pidataBANK2 15A6  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 00BB  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 1710                        __end_of_putch 17E2  
                    _TMR_ActiveFlags 0093               ??_SPI32_TransmitFrames 00DE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00C2  
                      ?_ResetPattern 0001                  __end_of_ShowPattern 1666  
                      ??_StopPattern 00E1                       _TMR_TimerArray 0060  
                       _GetNextFrame 168C             ES_EnQueueFIFO@pThisQueue 00D0  
                            ??_putch 00BB             __HW_Process_Pending_Ints 1742  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                     ??_SPI32_SendByte 00BB  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00CB  
                       ??_SPI32_Init 00BB             ?_PostSPI32ControlService 00D8  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BE  
                            ?___lmul 00BB                              ?___wmul 00C1  
    __size_of_RunSPI32ControlService 00FC                              _CCP1CON 000FBD  
                            ?_memcpy 00BB                       ___lmul@product 00C3  
                            ?_printf 00BB                __size_of_DotStar_Init 00D0  
                     ??_ResetPattern 00BB                __end_of_UpdatePattern 050A  
              __size_of_DotStar_Show 0042                           ??i2___wmul 000B  
          _InitPatternControlService 1340                   __end_of_ES_DeQueue 0632  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 00BF  
                            _HW_Init 16B0                              _SSPCON1 000FC6  
                 __end_of_SPI32_Init 17D6                              _SSPSTAT 000FC7  
   SPI32_ControlService@CurrentState 0097                      __size_of_ES_Run 00F4  
                __end_of_StopPattern 16EE                          _PixelFrames 0180  
                      ?_SetupPattern 00BB               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
 i2PostSPI32ControlService@ThisEvent 001E     PostSPI32ControlService@ThisEvent 00D8  
   InitSPI32ControlService@ThisEvent 00D8            i2ES_EnQueueFIFO@Event2Add 000F  
            UpdatePattern@brightness 00CD                         _DotStar_Init 0B06  
                       _DotStar_Show 14B8                      __size_of___lmul 0076  
         ?_PostPatternControlService 00D8                              ___awmod 0E98  
                            ___lbmod 1474                      __size_of___wmul 0036  
                            ___llmod 0F3A   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 00BF  
         i2ES_PostToService@TheEvent 0018                              __pcinit 0FD4  
                    __size_of_memcpy 004A                              __ramtop 0300  
                        _ShowPattern 1640                              __ptext0 106C  
                            __ptext1 15DA                              __ptext2 17E0  
                            __ptext3 0844                              __ptext4 1742  
                            __ptext5 0632                              __ptext6 0DF4  
                            __ptext7 0BD6                              __ptext8 0748  
                            __ptext9 17B6             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 0DEC  
                       _FramePointer 008F              __size_of__HW_Timer_Init 001C  
                   ___awmod@dividend 00BB                   _ES_CheckUserEvents 142A  
                    ES_Run@ThisEvent 00B8                 __end_of_PausePattern 17D0  
             _RunSPI32ControlService 0748                       __pintcode_body 0D4E  
               end_of_initialization 105E                  ?_ES_CheckUserEvents 0001  
                            memcpy@d 00C1                              memcpy@n 00BF  
                            memcpy@s 00C3            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 0D4E  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 1726  
       ES_PostToService@WhichService 00D7                       ??_SetupPattern 00BE  
             __size_of_ES_Timer_Init 000E             DotStar_Show@pixelPointer 00E1  
                       ?_DotStar_Off 0001                              printf@c 00BF  
                            printf@f 00BB              _InitSPI32ControlService 1536  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE    __end_of_PostPatternControlService 176E  
               ??_ES_CheckUserEvents 00BB                        _ES_Initialize 0938  
   __end_of_RunPatternControlService 0C9A                     ___lbmod@dividend 00BC  
  RunPatternControlService@ThisEvent 00E3   PostPatternControlService@ThisEvent 00D8  
 InitPatternControlService@ThisEvent 00D8                 __end_of_ES_EventList 0360  
                        _StopPattern 16D2                 __end_of_ES_InitQueue 1536  
                          i2___awmod 1266                       ES_Initialize@i 00DE  
                        ___lbmod@rem 00BE             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 0938                 __end_of_ResetPattern 17C8  
                          _GenColors 0278                   __end_of_DistList00 0364  
                   _ES_PostToService 11F0           __end_of_ES_Timer_InitTimer 117A  
               __end_of_ServDescList 0358                       __end_of___lmul 11F0  
                     __end_of___wmul 15A6                        __pidataCOMRAM 17E2  
                     __end_of_memcpy 142A                SetupPattern@numPixels 00BD  
                     ?_ES_Initialize 00DC                            _OffFrames 0100  
         ??__HW_Process_Pending_Ints 00DF                        _ES_Timer_Init 17A8  
                   i2___wmul@product 000B                       __end_of_printf 160E  
         __end_of_ES_Timer_Tick_Resp 0748                  start_initialization 0FD4  
                        __end_of_ISR 0DF4                    __size_ofi2___wmul 0026  
                       _CurrentFrame 0080                         _CurrentState 0099  
                         ?i2___awmod 0001   __size_of_InitPatternControlService 0052  
                           ??_ES_Run 00EC                     __CFG_OSC$IRCIO67 000000  
                    ___llmod@divisor 00BF                            _TickCount 009F  
                    ___llmod@counter 00C3                            _NumFrames 009D  
         __end_ofi2_ES_PostToService 1340            ??_InitSPI32ControlService 00D8  
         __end_of_ES_Timer_StopTimer 13E0                            _NumPixels 003C  
            __size_of_ES_GetMSBitSet 00A4                            _TestColor 0084  
                           ??___lmul 00C3                             ??___wmul 00C5  
                        __pdataBANK0 00F2                          __pdataBANK2 0278  
                           ??_memcpy 00C1              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 00BD            SPI32_EOTResponse@EOTevent 0021  
              __size_of_PausePattern 0008                       ?_ES_Timer_Init 00BD  
                     __HW_Timer_Init 1726                 __end_of_SetupPattern 17A8  
                        __pbssCOMRAM 0034     __size_of_PostSPI32ControlService 001C  
      __size_of_SPI32_TransmitFrames 0032                        __pcstackBANK0 00BB  
                 ES_InitQueue@pBlock 00BB    RunPatternControlService@testEvent 00E9  
                           ?_HW_Init 0001             _RunPatternControlService 0BD6  
   SPI32_TransmitFrames@framePointer 00DB                     i2_ES_EnQueueFIFO 0C9A  
                      __PRIMASK_temp 003A                    ??_Check4Keystroke 00BB  
                       _PausePattern 17C8                            __pintcode 0008  
                           ?___awmod 00BB                             ?___lbmod 00BB  
                           ?___llmod 00BB          ??_PostPatternControlService 00DB  
               __size_of_DotStar_Off 001C                      ??_ES_Initialize 00DE  
           ES_PostToService@TheEvent 00D2               __end_of__HW_Timer_Init 1742  
                       ?_ShowPattern 0001                          __smallconst 0300  
              __size_of_ES_InitQueue 003C              ?_RunSPI32ControlService 00E3  
                        ??i2___awmod 0005                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 00DC  
          ES_GetMSBitSet@Nybble2Test 00C3                   _PatternStepCounter 009E  
                     ___wmul@product 00C5               __size_of_UpdatePattern 014C  
              DotStar_Init@numPixels 00BD                         _ES_EventList 035E  
            __size_of_SPI32_SendByte 000A                         _ES_InitQueue 14FA  
                    ??_ES_Timer_Init 00BF       i2ES_PostToService@WhichService 001D  
                    ?__HW_Timer_Init 00BB                    ___wmul@multiplier 00C1  
     __end_of_RunSPI32ControlService 0844                             i2___wmul 1666  
                       _ResetPattern 17C0                   ES_DeQueue@SaveCrit 00CD  
               ES_EnQueueFIFO@pBlock 00C7             __end_of_ES_PostToService 1266  
                       ?_StopPattern 0001            _PostPatternControlService 1758  
                  ___lmul@multiplier 00BB                            copy_data0 0FE8  
                          copy_data1 1008                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00F2  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                       _PixelPattern 0200                             __Hrparam 0000  
                     _ES_GetMSBitSet 0DF4                             __Lrparam 0000  
  RunSPI32ControlService@ReturnEvent 00E7                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                   __size_of___llmod 009A                       _ES_EnQueueFIFO 0A24  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 170A  
                      _UpdatePattern 03BE                   _ES_Timer_InitTimer 10FA  
             __end_of_BitNum2SetMask 0321                             __ptext10 168C  
                           __ptext11 16D2                             __ptext20 13E0  
                           __ptext12 17C0                             __ptext21 160E  
                           __ptext13 16EE                             __ptext30 0938  
                           __ptext22 1758                             __ptext14 1640  
                           __ptext31 1340                             __ptext23 170A  
                           __ptext15 03BE                             __ptext40 0B06  
                           __ptext32 1536                             __ptext24 17C8  
                           __ptext16 117A                             __ptext41 17A8  
                           __ptext33 17D0                             __ptext25 1392  
                           __ptext17 0F3A                             __ptext50 1266  
                           __ptext42 1726                             __ptext34 16B0  
                           __ptext26 050A                             __ptext18 10FA  
                           __ptext51 0000                             __ptext43 14FA  
                           __ptext35 179A                             __ptext27 1474  
                           __ptext19 14B8                             __ptext36 11F0  
                           __ptext28 142A                             __ptext45 176E  
                           __ptext37 0A24                             __ptext29 17DC  
                           __ptext46 1784                             __ptext38 1570  
                           __ptext47 12D6                             __ptext39 0E98  
                           __ptext48 0C9A                             __ptext49 1666  
                      ?_GetNextFrame 00BB    ES_Timer_Tick_Resp@NeedsProcessing 008B  
                     UpdatePattern@i 00CF                  ?_ES_Timer_InitTimer 00BB  
                      __size_of_main 008E                   _ES_Timer_Tick_Resp 0632  
             __end_of_ES_GetMSBitSet 0E98                         _SetupPattern 179A  
                ?_ES_Timer_Tick_Resp 0001               __end_of_ES_EnQueueFIFO 0B06  
                           int$flags 003E                  SetupPattern@configs 00BB  
               ??_ES_Timer_InitTimer 00BD       SPI32_ControlService@MyPriority 0098  
                      _MaxBrightness 003D                    ES_DeQueue@NumLeft 00CE  
                 i2_ES_PostToService 12D6                        DotStar_Init@i 00BE  
           __end_ofi2_ES_EnQueueFIFO 0D4E                   _ES_Timer_StopTimer 1392  
                     ?_UpdatePattern 00C7           ??_RunPatternControlService 00E6  
                  i2___awmod@divisor 0003                    i2___awmod@counter 0005  
               __size_of_ShowPattern 0026    __end_ofi2_PostSPI32ControlService 179A  
                           memcpy@d1 00BB                             memcpy@s1 00BD  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 00BF  
               ??_ES_Timer_Tick_Resp 00DB                  ?_ES_Timer_StopTimer 0001  
                    _Check4Keystroke 17DC                             intlevel2 0000  
                         _ES_DeQueue 050A    __size_of__HW_Process_Pending_Ints 0016  
          ?__HW_Process_Pending_Ints 0001                      ?_ES_GetMSBitSet 00BB  
       __end_of_SPI32_TransmitFrames 1640                 ??i2_ES_PostToService 001B  
                         _SPI32_Init 17D0                        ?_DotStar_Init 0001  
                      ?_DotStar_Show 00E1                 ??_ES_Timer_StopTimer 00BB  
                     _SPI32_SendByte 17B6  ES_Timer_Tick_Resp@NextTimer2Process 0095  
                           printf@ap 00BD                      ?_ES_EnQueueFIFO 00C7  
          ??_PostSPI32ControlService 00DB                     ES_DeQueue@pBlock 00C7  
  SPI32_TransmitFrames@transmitEvent 00DE    InitPatternControlService@Priority 00DB  
                  _SPI32_EOTResponse 176E               ES_DeQueue@pReturnEvent 00C9  
              ES_InitQueue@BlockSize 00BD                   ?_SPI32_EOTResponse 0001  
               __size_of_StopPattern 001C             ?_InitSPI32ControlService 0001  
                ??_SPI32_EOTResponse 0021           ?_InitPatternControlService 0001  
 __size_of_PostPatternControlService 0016               __end_of_SPI32_SendByte 17C0  
                     ??_DotStar_Init 00BB                        ??_DotStar_Off 00E1  
                     ??_DotStar_Show 00E3  
