

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan 22 22:56:29 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	idataCOMRAM
    93  002B24                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for ProcessReceive@LastButton
    97  002B24  FF                 	db	255
    98                           
    99                           ;initializer for _MaxBrightness
   100  002B25  1F                 	db	31
   101                           
   102                           ;initializer for _PatternConfigs
   103  002B26  FF                 	db	255
   104  002B27  1F                 	db	31
   105  002B28  25                 	db	37
   106  002B29  01                 	db	1
   107                           
   108                           	psect	idataBANK0
   109  002AD4                     __pidataBANK0:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _IdlePattern
   113  002AD4  10                 	db	low _CenterBreathe
   114  002AD5  08                 	db	high _CenterBreathe
   115                           
   116                           ;initializer for _ListeningPattern
   117  002AD6  8C                 	db	low _SingleFocusPulse
   118  002AD7  10                 	db	high _SingleFocusPulse
   119                           
   120                           ;initializer for _SpeakingPattern
   121  002AD8  8C                 	db	low _SingleFocusPulse
   122  002AD9  10                 	db	high _SingleFocusPulse
   123                           
   124                           ;initializer for _TestPattern
   125  002ADA  92                 	db	low _HueTest
   126  002ADB  18                 	db	high _HueTest
   127                           
   128                           ;initializer for _ThinkingPattern
   129  002ADC  78                 	db	low _SingleFadedLoop
   130  002ADD  0B                 	db	high _SingleFadedLoop
   131                           
   132                           ;initializer for _WelcomePattern
   133  002ADE  96                 	db	low _FullPulseHold
   134  002ADF  12                 	db	high _FullPulseHold
   135                           
   136                           ;initializer for CenterBreathe@rising
   137  002AE0  01                 	db	1
   138                           
   139                           ;initializer for FullPulseHold@rising
   140  002AE1  01                 	db	1
   141                           
   142                           ;initializer for _FrameByte
   143  002AE2  03                 	db	3
   144                           
   145                           	psect	smallconst
   146  000300                     __psmallconst:
   147                           	opt stack 0
   148  000300  00                 	db	0
   149  000301                     __end_of_ES_EventList:
   150                           	opt stack 0
   151  000301                     _BitNum2SetMask:
   152                           	opt stack 0
   153  000301  0001               	dw	1
   154  000303  0002               	dw	2
   155  000305  0004               	dw	4
   156  000307  0008               	dw	8
   157  000309  0010               	dw	16
   158  00030B  0020               	dw	32
   159  00030D  0040               	dw	64
   160  00030F  0080               	dw	128
   161  000311  0100               	dw	256
   162  000313  0200               	dw	512
   163  000315  0400               	dw	1024
   164  000317  0800               	dw	2048
   165  000319  1000               	dw	4096
   166  00031B  2000               	dw	8192
   167  00031D  4000               	dw	16384
   168  00031F  8000               	dw	32768
   169  000321                     __end_of_BitNum2SetMask:
   170                           	opt stack 0
   171  000321                     _Timer2PostFunc:
   172                           	opt stack 0
   173  000321  E0                 	db	low _PostPatternControlService
   174  000322  29                 	db	high _PostPatternControlService
   175  000323  FC                 	db	low _PostSPI32ControlService
   176  000324  29                 	db	high _PostSPI32ControlService
   177  000325  00                 	db	0
   178  000326  00                 	db	0
   179  000327  00                 	db	0
   180  000328  00                 	db	0
   181  000329  00                 	db	0
   182  00032A  00                 	db	0
   183  00032B  00                 	db	0
   184  00032C  00                 	db	0
   185  00032D  00                 	db	0
   186  00032E  00                 	db	0
   187  00032F  00                 	db	0
   188  000330  00                 	db	0
   189  000331  00                 	db	0
   190  000332  00                 	db	0
   191  000333  00                 	db	0
   192  000334  00                 	db	0
   193  000335  00                 	db	0
   194  000336  00                 	db	0
   195  000337  00                 	db	0
   196  000338  00                 	db	0
   197  000339  00                 	db	0
   198  00033A  00                 	db	0
   199  00033B  00                 	db	0
   200  00033C  00                 	db	0
   201  00033D  00                 	db	0
   202  00033E  00                 	db	0
   203  00033F  00                 	db	0
   204  000340  00                 	db	0
   205  000341                     __end_of_Timer2PostFunc:
   206                           	opt stack 0
   207  000341                     _Nybble2MSBitNum:
   208                           	opt stack 0
   209  000341  00                 	db	0
   210  000342  01                 	db	1
   211  000343  01                 	db	1
   212  000344  02                 	db	2
   213  000345  02                 	db	2
   214  000346  02                 	db	2
   215  000347  02                 	db	2
   216  000348  03                 	db	3
   217  000349  03                 	db	3
   218  00034A  03                 	db	3
   219  00034B  03                 	db	3
   220  00034C  03                 	db	3
   221  00034D  03                 	db	3
   222  00034E  03                 	db	3
   223  00034F  03                 	db	3
   224  000350                     __end_of_Nybble2MSBitNum:
   225                           	opt stack 0
   226  000350                     _ServDescList:
   227                           	opt stack 0
   228  000350  A4                 	db	low _InitPatternControlService
   229  000351  25                 	db	high _InitPatternControlService
   230  000352  1C                 	db	low _RunPatternControlService
   231  000353  1D                 	db	high _RunPatternControlService
   232  000354  08                 	db	low _InitSPI32ControlService
   233  000355  28                 	db	high _InitSPI32ControlService
   234  000356  8C                 	db	low _RunSPI32ControlService
   235  000357  17                 	db	high _RunSPI32ControlService
   236  000358                     __end_of_ServDescList:
   237                           	opt stack 0
   238  000358                     _EventQueues:
   239                           	opt stack 0
   240  000358  4B                 	db	low _Queue0
   241  000359  00                 	db	high _Queue0
   242  00035A  04                 	db	4
   243  00035B  B8                 	db	low _Queue1
   244  00035C  01                 	db	high _Queue1
   245  00035D  04                 	db	4
   246  00035E                     __end_of_EventQueues:
   247                           	opt stack 0
   248  0000                     _RXF0EIDH	set	3842
   249  0000                     _RXF0EIDL	set	3843
   250  0000                     _RXF0SIDH	set	3840
   251  0000                     _RXF0SIDL	set	3841
   252  0000                     _RXM0EIDH	set	3866
   253  0000                     _RXM0EIDL	set	3867
   254  0000                     _RXM0SIDH	set	3864
   255  0000                     _RXM0SIDL	set	3865
   256  0000                     _TXB0CONbits	set	3904
   257  0000                     _ADCON1	set	4033
   258  0000                     _BRGCON1bits	set	3952
   259  0000                     _BRGCON2bits	set	3953
   260  0000                     _BRGCON3bits	set	3954
   261  0000                     _CANCON	set	3951
   262  0000                     _CANSTATbits	set	3950
   263  0000                     _CCP1CON	set	4029
   264  0000                     _CCPR1H	set	4031
   265  0000                     _CCPR1L	set	4030
   266  0000                     _CIOCON	set	3955
   267  0000                     _ECANCON	set	3959
   268  0000                     _INTCON	set	4082
   269  0000                     _LATA	set	3977
   270  0000                     _LATB	set	3978
   271  0000                     _LATC	set	3979
   272  0000                     _PIE1	set	3997
   273  0000                     _PORTA	set	3968
   274  0000                     _PORTB	set	3969
   275  0000                     _PORTC	set	3970
   276  0000                     _RXB0CONbits	set	3936
   277  0000                     _RXB0D0	set	3942
   278  0000                     _RXB0D1	set	3943
   279  0000                     _RXB0D2	set	3944
   280  0000                     _RXB0EIDH	set	3939
   281  0000                     _RXB0EIDL	set	3940
   282  0000                     _RXB0SIDH	set	3937
   283  0000                     _RXB0SIDL	set	3938
   284  0000                     _SSPADD	set	4040
   285  0000                     _SSPBUF	set	4041
   286  0000                     _SSPCON1	set	4038
   287  0000                     _SSPSTAT	set	4039
   288  0000                     _T1CON	set	4045
   289  0000                     _TRISA	set	3986
   290  0000                     _TRISBbits	set	3987
   291  0000                     _TRISC	set	3988
   292  0000                     _CCP1IF	set	31986
   293  0000                     _ERRIE	set	32029
   294  0000                     _ERRIF	set	32037
   295  0000                     _GIE	set	32663
   296  0000                     _IRXIE	set	32031
   297  0000                     _IRXIF	set	32039
   298  0000                     _PEIE	set	32662
   299  0000                     _RXB0IE	set	32024
   300  0000                     _RXB0IF	set	32032
   301  0000                     _SSPIE	set	31979
   302  0000                     _SSPIF	set	31987
   303  0000                     _TXB0IE	set	32026
   304  0000                     _TXB0IF	set	32034
   305  00035E                     STR_1:
   306  00035E  46                 	db	70	;'F'
   307  00035F  61                 	db	97	;'a'
   308  000360  69                 	db	105	;'i'
   309  000361  6C                 	db	108	;'l'
   310  000362  65                 	db	101	;'e'
   311  000363  64                 	db	100	;'d'
   312  000364  20                 	db	32
   313  000365  6F                 	db	111	;'o'
   314  000366  6E                 	db	110	;'n'
   315  000367  20                 	db	32
   316  000368  61                 	db	97	;'a'
   317  000369  74                 	db	116	;'t'
   318  00036A  74                 	db	116	;'t'
   319  00036B  65                 	db	101	;'e'
   320  00036C  6D                 	db	109	;'m'
   321  00036D  70                 	db	112	;'p'
   322  00036E  74                 	db	116	;'t'
   323  00036F  20                 	db	32
   324  000370  74                 	db	116	;'t'
   325  000371  6F                 	db	111	;'o'
   326  000372  20                 	db	32
   327  000373  50                 	db	80	;'P'
   328  000374  6F                 	db	111	;'o'
   329  000375  73                 	db	115	;'s'
   330  000376  74                 	db	116	;'t'
   331  000377  0A                 	db	10
   332  000378  00                 	db	0
   333  000379                     STR_2:
   334  000379  46                 	db	70	;'F'
   335  00037A  61                 	db	97	;'a'
   336  00037B  69                 	db	105	;'i'
   337  00037C  6C                 	db	108	;'l'
   338  00037D  65                 	db	101	;'e'
   339  00037E  64                 	db	100	;'d'
   340  00037F  20                 	db	32
   341  000380  6F                 	db	111	;'o'
   342  000381  6E                 	db	110	;'n'
   343  000382  20                 	db	32
   344  000383  4E                 	db	78	;'N'
   345  000384  55                 	db	85	;'U'
   346  000385  4C                 	db	76	;'L'
   347  000386  4C                 	db	76	;'L'
   348  000387  20                 	db	32
   349  000388  70                 	db	112	;'p'
   350  000389  6F                 	db	111	;'o'
   351  00038A  69                 	db	105	;'i'
   352  00038B  6E                 	db	110	;'n'
   353  00038C  74                 	db	116	;'t'
   354  00038D  65                 	db	101	;'e'
   355  00038E  72                 	db	114	;'r'
   356  00038F  0A                 	db	10
   357  000390  00                 	db	0
   358  000391                     STR_3:
   359  000391  46                 	db	70	;'F'
   360  000392  61                 	db	97	;'a'
   361  000393  69                 	db	105	;'i'
   362  000394  6C                 	db	108	;'l'
   363  000395  65                 	db	101	;'e'
   364  000396  64                 	db	100	;'d'
   365  000397  20                 	db	32
   366  000398  49                 	db	73	;'I'
   367  000399  6E                 	db	110	;'n'
   368  00039A  69                 	db	105	;'i'
   369  00039B  74                 	db	116	;'t'
   370  00039C  69                 	db	105	;'i'
   371  00039D  61                 	db	97	;'a'
   372  00039E  6C                 	db	108	;'l'
   373  00039F  69                 	db	105	;'i'
   374  0003A0  7A                 	db	122	;'z'
   375  0003A1  61                 	db	97	;'a'
   376  0003A2  74                 	db	116	;'t'
   377  0003A3  69                 	db	105	;'i'
   378  0003A4  6F                 	db	111	;'o'
   379  0003A5  6E                 	db	110	;'n'
   380  0003A6  0A                 	db	10
   381  0003A7  00                 	db	0
   382  0003A8                     STR_4:
   383  0003A8  4F                 	db	79	;'O'
   384  0003A9  74                 	db	116	;'t'
   385  0003AA  68                 	db	104	;'h'
   386  0003AB  65                 	db	101	;'e'
   387  0003AC  72                 	db	114	;'r'
   388  0003AD  20                 	db	32
   389  0003AE  46                 	db	70	;'F'
   390  0003AF  61                 	db	97	;'a'
   391  0003B0  69                 	db	105	;'i'
   392  0003B1  6C                 	db	108	;'l'
   393  0003B2  75                 	db	117	;'u'
   394  0003B3  72                 	db	114	;'r'
   395  0003B4  65                 	db	101	;'e'
   396  0003B5  0A                 	db	10
   397  0003B6  00                 	db	0
   398                           
   399                           ; #config settings
   400  0003B7  00                 	db	0	; dummy byte at the end
   401  0000                     
   402                           	psect	cinit
   403  0021D6                     __pcinit:
   404                           	opt stack 0
   405  0021D6                     start_initialization:
   406                           	opt stack 0
   407  0021D6                     __initialization:
   408                           	opt stack 0
   409                           
   410                           ; Initialize objects allocated to BANK0 (15 bytes)
   411                           ; load TBLPTR registers with __pidataBANK0
   412  0021D6  0ED4               	movlw	low __pidataBANK0
   413  0021D8  6EF6               	movwf	tblptrl,c
   414  0021DA  0E2A               	movlw	high __pidataBANK0
   415  0021DC  6EF7               	movwf	tblptrh,c
   416  0021DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   417  0021E0  6EF8               	movwf	tblptru,c
   418  0021E2  EE00  F0F0         	lfsr	0,__pdataBANK0
   419  0021E6  EE10 F00F          	lfsr	1,15
   420  0021EA                     copy_data0:
   421  0021EA  0009               	tblrd		*+
   422  0021EC  CFF5 FFEE          	movff	tablat,postinc0
   423  0021F0  50E5               	movf	postdec1,w,c
   424  0021F2  50E1               	movf	fsr1l,w,c
   425  0021F4  E1FA               	bnz	copy_data0
   426                           
   427                           ; Initialize objects allocated to COMRAM (6 bytes)
   428                           ; load TBLPTR registers with __pidataCOMRAM
   429  0021F6  0E24               	movlw	low __pidataCOMRAM
   430  0021F8  6EF6               	movwf	tblptrl,c
   431  0021FA  0E2B               	movlw	high __pidataCOMRAM
   432  0021FC  6EF7               	movwf	tblptrh,c
   433  0021FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   434  002200  6EF8               	movwf	tblptru,c
   435  002202  EE00  F057         	lfsr	0,__pdataCOMRAM
   436  002206  EE10 F006          	lfsr	1,6
   437  00220A                     copy_data1:
   438  00220A  0009               	tblrd		*+
   439  00220C  CFF5 FFEE          	movff	tablat,postinc0
   440  002210  50E5               	movf	postdec1,w,c
   441  002212  50E1               	movf	fsr1l,w,c
   442  002214  E1FA               	bnz	copy_data1
   443                           
   444                           ; Clear objects allocated to BIGRAM (316 bytes)
   445  002216  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   446  00221A  EE11 F03C          	lfsr	1,316
   447  00221E                     clear_0:
   448  00221E  6AEE               	clrf	postinc0,c
   449  002220  50E5               	movf	postdec1,w,c
   450  002222  50E1               	movf	fsr1l,w,c
   451  002224  E1FC               	bnz	clear_0
   452  002226  50E2               	movf	fsr1h,w,c
   453  002228  E1FA               	bnz	clear_0
   454                           
   455                           ; Clear objects allocated to BANK1 (196 bytes)
   456  00222A  EE01  F000         	lfsr	0,__pbssBANK1
   457  00222E  0EC4               	movlw	196
   458  002230                     clear_1:
   459  002230  6AEE               	clrf	postinc0,c
   460  002232  06E8               	decf	wreg,f,c
   461  002234  E1FD               	bnz	clear_1
   462                           
   463                           ; Clear objects allocated to BANK0 (34 bytes)
   464  002236  EE00  F0CE         	lfsr	0,__pbssBANK0
   465  00223A  0E22               	movlw	34
   466  00223C                     clear_2:
   467  00223C  6AEE               	clrf	postinc0,c
   468  00223E  06E8               	decf	wreg,f,c
   469  002240  E1FD               	bnz	clear_2
   470                           
   471                           ; Clear objects allocated to COMRAM (33 bytes)
   472  002242  EE00  F036         	lfsr	0,__pbssCOMRAM
   473  002246  0E21               	movlw	33
   474  002248                     clear_3:
   475  002248  6AEE               	clrf	postinc0,c
   476  00224A  06E8               	decf	wreg,f,c
   477  00224C  E1FD               	bnz	clear_3
   478  00224E                     end_of_initialization:
   479                           	opt stack 0
   480  00224E                     __end_of__initialization:
   481                           	opt stack 0
   482  00224E  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   483  002250  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   484  002252  0E00               	movlw	low (__Lmediumconst shr (0+16))
   485  002254  6EF8               	movwf	tblptru,c
   486  002256  0100               	movlb	0
   487  002258  EFA5  F010         	goto	_main	;jump to C main() function
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1h	equ	0xFE2
   496                           fsr1l	equ	0xFE1
   497                           
   498                           	psect	bssCOMRAM
   499  000036                     __pbssCOMRAM:
   500                           	opt stack 0
   501  000036                     _TransmitFrame:
   502                           	opt stack 0
   503  000036                     	ds	4
   504  00003A                     ES_Timer_Tick_Resp@NewEvent:
   505                           	opt stack 0
   506  00003A                     	ds	3
   507  00003D                     ISR@LastTime:
   508                           	opt stack 0
   509  00003D                     	ds	2
   510  00003F                     ISR@NextTime:
   511                           	opt stack 0
   512  00003F                     	ds	2
   513  000041                     _SysTickCounter:
   514                           	opt stack 0
   515  000041                     	ds	2
   516  000043                     __PRIMASK_temp:
   517                           	opt stack 0
   518  000043                     	ds	2
   519  000045                     	ds	1
   520  000046                     	ds	1
   521  000047                     	ds	1
   522  000048                     _CurrentPattern:
   523                           	opt stack 0
   524  000048                     	ds	1
   525  000049                     	ds	1
   526  00004A                     	ds	1
   527  00004B                     _Queue0:
   528                           	opt stack 0
   529  00004B                     	ds	12
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1h	equ	0xFE2
   538                           fsr1l	equ	0xFE1
   539                           
   540                           	psect	dataCOMRAM
   541  000057                     __pdataCOMRAM:
   542                           	opt stack 0
   543  000057                     ProcessReceive@LastButton:
   544                           	opt stack 0
   545  000057                     	ds	1
   546  000058                     _MaxBrightness:
   547                           	opt stack 0
   548  000058                     	ds	1
   549  000059                     _PatternConfigs:
   550                           	opt stack 0
   551  000059                     	ds	4
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1h	equ	0xFE2
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	bssBANK0
   563  0000CE                     __pbssBANK0:
   564                           	opt stack 0
   565  0000CE                     _CurrentFrame:
   566                           	opt stack 0
   567  0000CE                     	ds	4
   568  0000D2                     ES_Timer_Tick_Resp@NeedsProcessing:
   569                           	opt stack 0
   570  0000D2                     	ds	2
   571  0000D4                     _FramePointer:
   572                           	opt stack 0
   573  0000D4                     	ds	2
   574  0000D6                     _ListeningFocus:
   575                           	opt stack 0
   576  0000D6                     	ds	2
   577  0000D8                     _PatternID:
   578                           	opt stack 0
   579  0000D8                     	ds	2
   580  0000DA                     _Ready:
   581                           	opt stack 0
   582  0000DA                     	ds	2
   583  0000DC                     _TMR_ActiveFlags:
   584                           	opt stack 0
   585  0000DC                     	ds	2
   586  0000DE                     ES_Timer_Tick_Resp@NextTimer2Process:
   587                           	opt stack 0
   588  0000DE                     	ds	1
   589  0000DF                     SPI32_ControlService@CurrentState:
   590                           	opt stack 0
   591  0000DF                     	ds	1
   592  0000E0                     SPI32_ControlService@MyPriority:
   593                           	opt stack 0
   594  0000E0                     	ds	1
   595  0000E1                     _CurrentState:
   596                           	opt stack 0
   597  0000E1                     	ds	1
   598  0000E2                     _FrameIndex:
   599                           	opt stack 0
   600  0000E2                     	ds	1
   601  0000E3                     _MyPriority:
   602                           	opt stack 0
   603  0000E3                     	ds	1
   604  0000E4                     _NumFrames:
   605                           	opt stack 0
   606  0000E4                     	ds	1
   607  0000E5                     _TickCount:
   608                           	opt stack 0
   609  0000E5                     	ds	1
   610  0000E6                     _CycleCounter:
   611                           	opt stack 0
   612  0000E6                     	ds	4
   613  0000EA                     ES_Run@ThisEvent:
   614                           	opt stack 0
   615  0000EA                     	ds	3
   616  0000ED                     _Brightness:
   617                           	opt stack 0
   618  0000ED                     	ds	2
   619  0000EF                     _PatternStepCounter:
   620                           	opt stack 0
   621  0000EF                     	ds	1
   622                           tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           postdec1	equ	0xFE5
   629                           fsr1h	equ	0xFE2
   630                           fsr1l	equ	0xFE1
   631                           
   632                           	psect	dataBANK0
   633  0000F0                     __pdataBANK0:
   634                           	opt stack 0
   635  0000F0                     _IdlePattern:
   636                           	opt stack 0
   637  0000F0                     	ds	2
   638  0000F2                     _ListeningPattern:
   639                           	opt stack 0
   640  0000F2                     	ds	2
   641  0000F4                     _SpeakingPattern:
   642                           	opt stack 0
   643  0000F4                     	ds	2
   644  0000F6                     _TestPattern:
   645                           	opt stack 0
   646  0000F6                     	ds	2
   647  0000F8                     _ThinkingPattern:
   648                           	opt stack 0
   649  0000F8                     	ds	2
   650  0000FA                     _WelcomePattern:
   651                           	opt stack 0
   652  0000FA                     	ds	2
   653  0000FC                     CenterBreathe@rising:
   654                           	opt stack 0
   655  0000FC                     	ds	1
   656  0000FD                     FullPulseHold@rising:
   657                           	opt stack 0
   658  0000FD                     	ds	1
   659  0000FE                     _FrameByte:
   660                           	opt stack 0
   661  0000FE                     	ds	1
   662                           tblptru	equ	0xFF8
   663                           tblptrh	equ	0xFF7
   664                           tblptrl	equ	0xFF6
   665                           tablat	equ	0xFF5
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           postdec1	equ	0xFE5
   669                           fsr1h	equ	0xFE2
   670                           fsr1l	equ	0xFE1
   671                           
   672                           	psect	bssBANK1
   673  000100                     __pbssBANK1:
   674                           	opt stack 0
   675  000100                     _TMR_TimerArray:
   676                           	opt stack 0
   677  000100                     	ds	32
   678  000120                     _PixelPattern:
   679                           	opt stack 0
   680  000120                     	ds	152
   681  0001B8                     _Queue1:
   682                           	opt stack 0
   683  0001B8                     	ds	12
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1h	equ	0xFE2
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	bssBIGRAM
   695  0001C4                     __pbssBIGRAM:
   696                           	opt stack 0
   697  0001C4                     _PixelFrames:
   698                           	opt stack 0
   699  0001C4                     	ds	316
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1h	equ	0xFE2
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	cstackBANK0
   711  000060                     __pcstackBANK0:
   712                           	opt stack 0
   713  000060                     ??_ES_Timer_StopTimer:
   714  000060                     ?_PatternOff:
   715                           	opt stack 0
   716  000060                     ?_printf:
   717                           	opt stack 0
   718  000060                     ?___awdiv:
   719                           	opt stack 0
   720  000060                     ?___awmod:
   721                           	opt stack 0
   722  000060                     ?_GetNextFrame:
   723                           	opt stack 0
   724  000060                     ___lbmod@divisor:
   725                           	opt stack 0
   726  000060                     ES_GetMSBitSet@Val2Check:
   727                           	opt stack 0
   728  000060                     __HW_Timer_Init@Rate:
   729                           	opt stack 0
   730  000060                     ES_InitQueue@pBlock:
   731                           	opt stack 0
   732  000060                     ES_Timer_InitTimer@NewTime:
   733                           	opt stack 0
   734  000060                     DotStar_Init@brightnessPointer:
   735                           	opt stack 0
   736  000060                     FullPulseHold@ptrnPointer:
   737                           	opt stack 0
   738  000060                     SetupPattern@patternIDPointer:
   739                           	opt stack 0
   740  000060                     printf@f:
   741                           	opt stack 0
   742  000060                     ___awdiv@dividend:
   743                           	opt stack 0
   744  000060                     ___awmod@dividend:
   745                           	opt stack 0
   746  000060                     SPI32_SendFrame@newFrame:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x0
   750  000060                     	ds	1
   751  000061                     ___lbmod@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x1
   755  000061                     	ds	1
   756  000062                     ??_ES_GetMSBitSet:
   757  000062                     ??_ES_Timer_InitTimer:
   758  000062                     ES_InitQueue@BlockSize:
   759                           	opt stack 0
   760  000062                     PatternOff@i:
   761                           	opt stack 0
   762  000062                     ___lbmod@counter:
   763                           	opt stack 0
   764  000062                     ES_Timer_Init@Rate:
   765                           	opt stack 0
   766  000062                     FullPulseHold@ptrnStepCounter:
   767                           	opt stack 0
   768  000062                     SetupPattern@listeningFocusPointer:
   769                           	opt stack 0
   770  000062                     printf@ap:
   771                           	opt stack 0
   772  000062                     ___awdiv@divisor:
   773                           	opt stack 0
   774  000062                     ___awmod@divisor:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x2
   778  000062                     	ds	1
   779  000063                     ___lbmod@rem:
   780                           	opt stack 0
   781  000063                     ES_InitQueue@pThisQueue:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x3
   785  000063                     	ds	1
   786  000064                     ??_SPI32_SendFrame:
   787  000064                     ES_Timer_StopTimer@Num:
   788                           	opt stack 0
   789  000064                     ES_Timer_InitTimer@Num:
   790                           	opt stack 0
   791  000064                     printf@c:
   792                           	opt stack 0
   793  000064                     ___awdiv@counter:
   794                           	opt stack 0
   795  000064                     ___awmod@counter:
   796                           	opt stack 0
   797  000064                     FullPulseHold@cycleCounter:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x4
   801  000064                     	ds	1
   802  000065                     ___awdiv@sign:
   803                           	opt stack 0
   804  000065                     ___awmod@sign:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x5
   808  000065                     	ds	1
   809  000066                     ?___wmul:
   810                           	opt stack 0
   811  000066                     FullPulseHold@base_hue:
   812                           	opt stack 0
   813  000066                     ___wmul@multiplier:
   814                           	opt stack 0
   815  000066                     ___awdiv@quotient:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x6
   819  000066                     	ds	1
   820  000067                     ES_GetMSBitSet@ReturnVal:
   821                           	opt stack 0
   822  000067                     FullPulseHold@base_sat:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x7
   826  000067                     	ds	1
   827  000068                     ES_GetMSBitSet@Nybble2Test:
   828                           	opt stack 0
   829  000068                     FullPulseHold@15697:
   830                           	opt stack 0
   831  000068                     CenterBreathe@ptrnPointer:
   832                           	opt stack 0
   833  000068                     SingleFadedLoop@ptrnPointer:
   834                           	opt stack 0
   835  000068                     SingleFocusPulse@ptrnPointer:
   836                           	opt stack 0
   837  000068                     ___wmul@multiplicand:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x8
   841  000068                     	ds	1
   842  000069                     ES_GetMSBitSet@LoopCntr:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x9
   846  000069                     	ds	1
   847  00006A                     ??_FullPulseHold:
   848  00006A                     CenterBreathe@ptrnStepCounter:
   849                           	opt stack 0
   850  00006A                     SingleFadedLoop@ptrnStepCounter:
   851                           	opt stack 0
   852  00006A                     SingleFocusPulse@ptrnStepCounter:
   853                           	opt stack 0
   854  00006A                     ___wmul@product:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0xA
   858  00006A                     	ds	2
   859  00006C                     ?___lwdiv:
   860                           	opt stack 0
   861  00006C                     ES_EnQueueFIFO@pBlock:
   862                           	opt stack 0
   863  00006C                     ES_DeQueue@pBlock:
   864                           	opt stack 0
   865  00006C                     CenterBreathe@cycleCounter:
   866                           	opt stack 0
   867  00006C                     SingleFadedLoop@cycleCounter:
   868                           	opt stack 0
   869  00006C                     SingleFocusPulse@cycleCounter:
   870                           	opt stack 0
   871  00006C                     ___lwdiv@dividend:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0xC
   875  00006C                     	ds	2
   876  00006E                     CenterBreathe@base_hue:
   877                           	opt stack 0
   878  00006E                     SingleFadedLoop@base_hue:
   879                           	opt stack 0
   880  00006E                     SingleFocusPulse@base_hue:
   881                           	opt stack 0
   882  00006E                     ES_DeQueue@pReturnEvent:
   883                           	opt stack 0
   884  00006E                     ___lwdiv@divisor:
   885                           	opt stack 0
   886  00006E                     ES_EnQueueFIFO@Event2Add:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0xE
   890  00006E                     	ds	1
   891  00006F                     CenterBreathe@base_sat:
   892                           	opt stack 0
   893  00006F                     SingleFadedLoop@base_sat:
   894                           	opt stack 0
   895  00006F                     SingleFocusPulse@base_sat:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0xF
   899  00006F                     	ds	1
   900  000070                     ??_ES_DeQueue:
   901  000070                     CenterBreathe@15707:
   902                           	opt stack 0
   903  000070                     SingleFadedLoop@15720:
   904                           	opt stack 0
   905  000070                     SingleFocusPulse@focus:
   906                           	opt stack 0
   907  000070                     ___lwdiv@quotient:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x10
   911  000070                     	ds	1
   912  000071                     ??_ES_EnQueueFIFO:
   913                           
   914                           ; 1 bytes @ 0x11
   915  000071                     	ds	1
   916  000072                     ??_CenterBreathe:
   917  000072                     ??_SingleFadedLoop:
   918  000072                     ??_SingleFocusPulse:
   919  000072                     ES_DeQueue@SaveCrit:
   920                           	opt stack 0
   921  000072                     ___lwdiv@counter:
   922                           	opt stack 0
   923  000072                     _FullPulseHold$1218:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x12
   927  000072                     	ds	1
   928  000073                     ES_DeQueue@NumLeft:
   929                           	opt stack 0
   930  000073                     HSV_to_RGB@HSV_Value:
   931                           	opt stack 0
   932  000073                     HueTest@ptrnPointer:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x13
   936  000073                     	ds	1
   937  000074                     ES_EnQueueFIFO@SaveCrit:
   938                           	opt stack 0
   939  000074                     FullPulseHold@val:
   940                           	opt stack 0
   941  000074                     ES_DeQueue@pThisQueue:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x14
   945  000074                     	ds	1
   946  000075                     ??_HSV_to_RGB:
   947  000075                     FullPulseHold@i:
   948                           	opt stack 0
   949  000075                     ES_EnQueueFIFO@pThisQueue:
   950                           	opt stack 0
   951  000075                     HueTest@ptrnStepCounter:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x15
   955  000075                     	ds	2
   956  000077                     HueTest@cycleCounter:
   957                           	opt stack 0
   958  000077                     ES_PostToService@TheEvent:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x17
   962  000077                     	ds	2
   963  000079                     HueTest@base_hue:
   964                           	opt stack 0
   965  000079                     _SingleFocusPulse$1275:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x19
   969  000079                     	ds	1
   970  00007A                     ??_ES_PostToService:
   971  00007A                     HueTest@base_sat:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x1A
   975  00007A                     	ds	1
   976  00007B                     HueTest@15689:
   977                           	opt stack 0
   978  00007B                     _CenterBreathe$1232:
   979                           	opt stack 0
   980  00007B                     _SingleFocusPulse$1276:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1B
   984  00007B                     	ds	1
   985  00007C                     ES_PostToService@WhichService:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1C
   989  00007C                     	ds	1
   990  00007D                     ??_HueTest:
   991  00007D                     SingleFocusPulse@val:
   992                           	opt stack 0
   993  00007D                     _CenterBreathe$1233:
   994                           	opt stack 0
   995  00007D                     _SingleFadedLoop$1250:
   996                           	opt stack 0
   997  00007D                     InitPatternControlService@ThisEvent:
   998                           	opt stack 0
   999  00007D                     PostPatternControlService@ThisEvent:
  1000                           	opt stack 0
  1001  00007D                     InitSPI32ControlService@ThisEvent:
  1002                           	opt stack 0
  1003  00007D                     PostSPI32ControlService@ThisEvent:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x1D
  1007  00007D                     	ds	1
  1008  00007E                     SingleFocusPulse@x:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x1E
  1012  00007E                     	ds	1
  1013  00007F                     SingleFocusPulse@head:
  1014                           	opt stack 0
  1015  00007F                     _CenterBreathe$1234:
  1016                           	opt stack 0
  1017  00007F                     _SingleFadedLoop$1251:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x1F
  1021  00007F                     	ds	1
  1022  000080                     ??_ES_Timer_Tick_Resp:
  1023  000080                     InitPatternControlService@Priority:
  1024                           	opt stack 0
  1025  000080                     InitSPI32ControlService@Priority:
  1026                           	opt stack 0
  1027  000080                     HueTest@i:
  1028                           	opt stack 0
  1029  000080                     SingleFocusPulse@i:
  1030                           	opt stack 0
  1031  000080                     SPI32_TransmitFrames@framePointer:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x20
  1035  000080                     	ds	1
  1036  000081                     SingleFadedLoop@val:
  1037                           	opt stack 0
  1038  000081                     ES_Initialize@NewRate:
  1039                           	opt stack 0
  1040  000081                     _CenterBreathe$1235:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x21
  1044  000081                     	ds	1
  1045  000082                     SPI32_TransmitFrames@numFrames:
  1046                           	opt stack 0
  1047  000082                     SingleFadedLoop@x:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x22
  1051  000082                     	ds	1
  1052  000083                     ES_Initialize@i:
  1053                           	opt stack 0
  1054  000083                     SingleFadedLoop@i:
  1055                           	opt stack 0
  1056  000083                     _CenterBreathe$1236:
  1057                           	opt stack 0
  1058  000083                     SPI32_TransmitFrames@transmitEvent:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x23
  1062  000083                     	ds	1
  1063  000084                     
  1064                           ; 1 bytes @ 0x24
  1065  000084                     	ds	1
  1066  000085                     _CenterBreathe$1237:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x25
  1070  000085                     	ds	2
  1071  000087                     _CenterBreathe$1238:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x27
  1075  000087                     	ds	2
  1076  000089                     _CenterBreathe$1239:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x29
  1080  000089                     	ds	2
  1081  00008B                     CenterBreathe@fade_thresh:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x2B
  1085  00008B                     	ds	1
  1086  00008C                     CenterBreathe@val:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x2C
  1090  00008C                     	ds	1
  1091  00008D                     CenterBreathe@pulseWidth:
  1092                           	opt stack 0
  1093  00008D                     HSV_to_RGB@h:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x2D
  1097  00008D                     	ds	1
  1098  00008E                     CenterBreathe@x:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x2E
  1102  00008E                     	ds	1
  1103  00008F                     CenterBreathe@i:
  1104                           	opt stack 0
  1105  00008F                     HSV_to_RGB@region:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x2F
  1109  00008F                     	ds	1
  1110  000090                     ?_UpdatePattern:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x30
  1114  000090                     	ds	1
  1115  000091                     HSV_to_RGB@fpart:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x31
  1119  000091                     	ds	1
  1120  000092                     UpdatePattern@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x32
  1124  000092                     	ds	1
  1125  000093                     UpdatePattern@i_1364:
  1126                           	opt stack 0
  1127  000093                     HSV_to_RGB@r:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x33
  1131  000093                     	ds	2
  1132  000095                     HSV_to_RGB@g:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x35
  1136  000095                     	ds	2
  1137  000097                     HSV_to_RGB@b:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x37
  1141  000097                     	ds	2
  1142  000099                     HSV_to_RGB@q:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x39
  1146  000099                     	ds	2
  1147  00009B                     HSV_to_RGB@t:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x3B
  1151  00009B                     	ds	2
  1152  00009D                     _HSV_to_RGB$1987:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x3D
  1156  00009D                     	ds	2
  1157  00009F                     HSV_to_RGB@s:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x3F
  1161  00009F                     	ds	2
  1162  0000A1                     HSV_to_RGB@p:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x41
  1166  0000A1                     	ds	2
  1167  0000A3                     HSV_to_RGB@v:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x43
  1171  0000A3                     	ds	2
  1172  0000A5                     DotStar_Show@patternPointer:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x45
  1176  0000A5                     	ds	2
  1177  0000A7                     ??_DotStar_Show:
  1178                           
  1179                           ; 1 bytes @ 0x47
  1180  0000A7                     	ds	19
  1181  0000BA                     DotStar_Show@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x5A
  1185  0000BA                     	ds	1
  1186  0000BB                     ?_RunPatternControlService:
  1187                           	opt stack 0
  1188  0000BB                     ?_RunSPI32ControlService:
  1189                           	opt stack 0
  1190  0000BB                     RunPatternControlService@ThisEvent:
  1191                           	opt stack 0
  1192  0000BB                     RunSPI32ControlService@ThisEvent:
  1193                           	opt stack 0
  1194                           
  1195                           ; 3 bytes @ 0x5B
  1196  0000BB                     	ds	3
  1197  0000BE                     ??_RunSPI32ControlService:
  1198  0000BE                     RunPatternControlService@ReturnEvent:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0x5E
  1202  0000BE                     	ds	3
  1203  0000C1                     RunPatternControlService@testEvent:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x61
  1207  0000C1                     	ds	4
  1208  0000C5                     RunSPI32ControlService@ReturnEvent:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x65
  1212  0000C5                     	ds	3
  1213  0000C8                     ??_ES_Run:
  1214                           
  1215                           ; 1 bytes @ 0x68
  1216  0000C8                     	ds	4
  1217  0000CC                     ES_Run@HighestPrior:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x6C
  1221  0000CC                     	ds	1
  1222  0000CD                     main@ErrorType:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x6D
  1226  0000CD                     	ds	1
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postdec1	equ	0xFE5
  1234                           fsr1h	equ	0xFE2
  1235                           fsr1l	equ	0xFE1
  1236                           
  1237                           	psect	cstackCOMRAM
  1238  000001                     __pcstackCOMRAM:
  1239                           	opt stack 0
  1240  000001                     ?i2___awdiv:
  1241                           	opt stack 0
  1242  000001                     ?i2___awmod:
  1243                           	opt stack 0
  1244  000001                     SetPattern@PatternID:
  1245                           	opt stack 0
  1246  000001                     SetListenFocus@listFocus:
  1247                           	opt stack 0
  1248  000001                     i2___awdiv@dividend:
  1249                           	opt stack 0
  1250  000001                     i2___awmod@dividend:
  1251                           	opt stack 0
  1252  000001                     i2SPI32_SendFrame@newFrame:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x0
  1256  000001                     	ds	2
  1257  000003                     i2___awdiv@divisor:
  1258                           	opt stack 0
  1259  000003                     i2___awmod@divisor:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x2
  1263  000003                     	ds	2
  1264  000005                     ??i2_SPI32_SendFrame:
  1265  000005                     i2___awdiv@counter:
  1266                           	opt stack 0
  1267  000005                     i2___awmod@counter:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x4
  1271  000005                     	ds	1
  1272  000006                     i2___awdiv@sign:
  1273                           	opt stack 0
  1274  000006                     i2___awmod@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x5
  1278  000006                     	ds	1
  1279  000007                     ?i2___wmul:
  1280                           	opt stack 0
  1281  000007                     i2___awdiv@quotient:
  1282                           	opt stack 0
  1283  000007                     i2___wmul@multiplier:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x6
  1287  000007                     	ds	2
  1288  000009                     SetBrightness@newBrightness:
  1289                           	opt stack 0
  1290  000009                     i2___wmul@multiplicand:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x8
  1294  000009                     	ds	2
  1295  00000B                     SetBrightness@brightness:
  1296                           	opt stack 0
  1297  00000B                     i2___wmul@product:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0xA
  1301  00000B                     	ds	2
  1302  00000D                     i2ES_EnQueueFIFO@pBlock:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0xC
  1306  00000D                     	ds	2
  1307  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1308                           	opt stack 0
  1309                           
  1310                           ; 3 bytes @ 0xE
  1311  00000F                     	ds	3
  1312  000012                     ??i2_ES_EnQueueFIFO:
  1313                           
  1314                           ; 1 bytes @ 0x11
  1315  000012                     	ds	3
  1316  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x14
  1320  000015                     	ds	1
  1321  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x15
  1325  000016                     	ds	2
  1326  000018                     i2ES_PostToService@TheEvent:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x17
  1330  000018                     	ds	3
  1331  00001B                     ??i2_ES_PostToService:
  1332                           
  1333                           ; 1 bytes @ 0x1A
  1334  00001B                     	ds	2
  1335  00001D                     i2ES_PostToService@WhichService:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x1C
  1339  00001D                     	ds	1
  1340  00001E                     i2PostPatternControlService@ThisEvent:
  1341                           	opt stack 0
  1342  00001E                     i2PostSPI32ControlService@ThisEvent:
  1343                           	opt stack 0
  1344                           
  1345                           ; 3 bytes @ 0x1D
  1346  00001E                     	ds	3
  1347  000021                     _ProcessReceive$1196:
  1348                           	opt stack 0
  1349  000021                     SPI32_EOTResponse@EOTevent:
  1350                           	opt stack 0
  1351                           
  1352                           ; 3 bytes @ 0x20
  1353  000021                     	ds	2
  1354  000023                     ProcessReceive@Event2Post:
  1355                           	opt stack 0
  1356                           
  1357                           ; 3 bytes @ 0x22
  1358  000023                     	ds	3
  1359  000026                     ??_ISR:
  1360                           
  1361                           ; 1 bytes @ 0x25
  1362  000026                     	ds	16
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           fsr1h	equ	0xFE2
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373 ;;
  1374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1375 ;;
  1376 ;; *************** function _main *****************
  1377 ;; Defined at:
  1378 ;;		line 25 in file "main.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  ErrorType       1  109[BANK0 ] enum E15646
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  2  475[None  ] int 
  1385 ;; Registers used:
  1386 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1392 ;;      Params:         0       0       0       0
  1393 ;;      Locals:         0       1       0       0
  1394 ;;      Temps:          0       0       0       0
  1395 ;;      Totals:         0       1       0       0
  1396 ;;Total ram usage:        1 bytes
  1397 ;; Hardware stack levels required when called:   16
  1398 ;; This function calls:
  1399 ;;		_ES_Initialize
  1400 ;;		_ES_Run
  1401 ;;		_printf
  1402 ;; This function is called by:
  1403 ;;		Startup code after reset
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text0
  1408  00214A                     __ptext0:
  1409                           	opt stack 0
  1410  00214A                     _main:
  1411                           	opt stack 15
  1412                           
  1413                           ;main.c: 27: ADCON1 = 0x0F;
  1414                           
  1415                           ;incstack = 0
  1416  00214A  0E0F               	movlw	15
  1417  00214C  6EC1               	movwf	4033,c	;volatile
  1418                           
  1419                           ;main.c: 34: ES_Return_t ErrorType;
  1420                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1421  00214E  0E9C               	movlw	156
  1422  002150  0100               	movlb	0	; () banked
  1423  002152  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1424  002154  0E3F               	movlw	63
  1425  002156  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1426  002158  EC40  F00D         	call	_ES_Initialize	;wreg free
  1427  00215C  0100               	movlb	0	; () banked
  1428  00215E  6FCD               	movwf	main@ErrorType& (0+255),b
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 51: if ( ErrorType == Success ) {
  1432  002160  0100               	movlb	0	; () banked
  1433  002162  51CD               	movf	main@ErrorType& (0+255),w,b
  1434  002164  0100               	movlb	0	; () banked
  1435  002166  A4D8               	btfss	status,2,c
  1436  002168  D029               	goto	l3938
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;main.c: 53: ErrorType = ES_Run();
  1440  00216A  ECC8  F00C         	call	_ES_Run	;wreg free
  1441  00216E  0100               	movlb	0	; () banked
  1442  002170  6FCD               	movwf	main@ErrorType& (0+255),b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 55: }
  1446                           ;main.c: 57: switch (ErrorType){
  1447  002172  D024               	goto	l3938
  1448  002174                     l3928:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1452  002174  0E5E               	movlw	low STR_1
  1453  002176  0100               	movlb	0	; () banked
  1454  002178  6F60               	movwf	printf@f& (0+255),b
  1455  00217A  0E03               	movlw	high STR_1
  1456  00217C  0100               	movlb	0	; () banked
  1457  00217E  6F61               	movwf	(printf@f+1)& (0+255),b
  1458  002180  EC59  F014         	call	_printf	;wreg free
  1459                           
  1460                           ;main.c: 60: break;
  1461  002184  D027               	goto	l483
  1462  002186                     l3930:
  1463                           
  1464                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1465  002186  0E79               	movlw	low STR_2
  1466  002188  0100               	movlb	0	; () banked
  1467  00218A  6F60               	movwf	printf@f& (0+255),b
  1468  00218C  0E03               	movlw	high STR_2
  1469  00218E  0100               	movlb	0	; () banked
  1470  002190  6F61               	movwf	(printf@f+1)& (0+255),b
  1471  002192  EC59  F014         	call	_printf	;wreg free
  1472                           
  1473                           ;main.c: 63: break;
  1474  002196  D01E               	goto	l483
  1475  002198                     l3932:
  1476                           
  1477                           ;main.c: 65: printf("Failed Initialization\n");
  1478  002198  0E91               	movlw	low STR_3
  1479  00219A  0100               	movlb	0	; () banked
  1480  00219C  6F60               	movwf	printf@f& (0+255),b
  1481  00219E  0E03               	movlw	high STR_3
  1482  0021A0  0100               	movlb	0	; () banked
  1483  0021A2  6F61               	movwf	(printf@f+1)& (0+255),b
  1484  0021A4  EC59  F014         	call	_printf	;wreg free
  1485                           
  1486                           ;main.c: 66: break;
  1487  0021A8  D015               	goto	l483
  1488  0021AA                     l3934:
  1489                           
  1490                           ;main.c: 68: printf("Other Failure\n");
  1491  0021AA  0EA8               	movlw	low STR_4
  1492  0021AC  0100               	movlb	0	; () banked
  1493  0021AE  6F60               	movwf	printf@f& (0+255),b
  1494  0021B0  0E03               	movlw	high STR_4
  1495  0021B2  0100               	movlb	0	; () banked
  1496  0021B4  6F61               	movwf	(printf@f+1)& (0+255),b
  1497  0021B6  EC59  F014         	call	_printf	;wreg free
  1498                           
  1499                           ;main.c: 70: }
  1500                           
  1501                           ;main.c: 69: break;
  1502  0021BA  D00C               	goto	l483
  1503  0021BC                     l3938:
  1504  0021BC  0100               	movlb	0	; () banked
  1505  0021BE  51CD               	movf	main@ErrorType& (0+255),w,b
  1506                           
  1507                           ; Switch size 1, requested type "space"
  1508                           ; Number of cases is 3, Range of values is 1 to 5
  1509                           ; switch strategies available:
  1510                           ; Name         Instructions Cycles
  1511                           ; simple_byte           10     6 (average)
  1512                           ;	Chosen strategy is simple_byte
  1513  0021C0  0A01               	xorlw	1	; case 1
  1514  0021C2  B4D8               	btfsc	status,2,c
  1515  0021C4  D7D7               	goto	l3928
  1516  0021C6  0A02               	xorlw	2	; case 3
  1517  0021C8  B4D8               	btfsc	status,2,c
  1518  0021CA  D7DD               	goto	l3930
  1519  0021CC  0A06               	xorlw	6	; case 5
  1520  0021CE  B4D8               	btfsc	status,2,c
  1521  0021D0  D7E3               	goto	l3932
  1522  0021D2  D7EB               	goto	l3934
  1523  0021D4                     l483:
  1524                           
  1525                           ;main.c: 72: ;
  1526  0021D4  D7FF               	goto	l483
  1527  0021D6                     __end_of_main:
  1528                           	opt stack 0
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1h	equ	0xFE2
  1537                           fsr1l	equ	0xFE1
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _printf *****************
  1541 ;; Defined at:
  1542 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1545 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  tmpval          4    0        struct .
  1548 ;;  cp              3    0        PTR const unsigned char 
  1549 ;;  ap              2    2[BANK0 ] PTR void [1]
  1550 ;;		 -> ?_printf(2), 
  1551 ;;  len             2    0        unsigned int 
  1552 ;;  val             2    0        unsigned int 
  1553 ;;  c               1    4[BANK0 ] char 
  1554 ;;  flag            1    0        unsigned char 
  1555 ;;  prec            1    0        char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  2    0[BANK0 ] int 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1565 ;;      Params:         0       2       0       0
  1566 ;;      Locals:         0       3       0       0
  1567 ;;      Temps:          0       0       0       0
  1568 ;;      Totals:         0       5       0       0
  1569 ;;Total ram usage:        5 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    8
  1572 ;; This function calls:
  1573 ;;		_putch
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text1
  1580  0028B2                     __ptext1:
  1581                           	opt stack 0
  1582  0028B2                     _printf:
  1583                           	opt stack 22
  1584                           
  1585                           ;doprnt.c: 466: va_list ap;
  1586                           ;doprnt.c: 499: signed char c;
  1587                           ;doprnt.c: 506: signed char prec;
  1588                           ;doprnt.c: 508: unsigned char flag;
  1589                           ;doprnt.c: 523: union {
  1590                           ;doprnt.c: 524: unsigned long vd;
  1591                           ;doprnt.c: 525: double integ;
  1592                           ;doprnt.c: 526: } tmpval;
  1593                           ;doprnt.c: 528: unsigned int val;
  1594                           ;doprnt.c: 529: unsigned len;
  1595                           ;doprnt.c: 530: const char * cp;
  1596                           ;doprnt.c: 533: *ap = __va_start();
  1597                           
  1598                           ;incstack = 0
  1599  0028B2  0E62               	movlw	low (?_printf+2)
  1600  0028B4  0100               	movlb	0	; () banked
  1601  0028B6  6F62               	movwf	printf@ap& (0+255),b
  1602  0028B8  0E00               	movlw	high (?_printf+2)
  1603  0028BA  0100               	movlb	0	; () banked
  1604  0028BC  6F63               	movwf	(printf@ap+1)& (0+255),b
  1605                           
  1606                           ;doprnt.c: 536: while(c = *f++) {
  1607  0028BE  D004               	goto	l3784
  1608  0028C0                     l3782:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;doprnt.c: 540: {
  1612                           ;doprnt.c: 541: (putch(c) );
  1613  0028C0  0100               	movlb	0	; () banked
  1614  0028C2  5164               	movf	printf@c& (0+255),w,b
  1615  0028C4  EC9B  F015         	call	_putch
  1616  0028C8                     l3784:
  1617  0028C8  C060  FFF6         	movff	printf@f,tblptrl
  1618  0028CC  C061  FFF7         	movff	printf@f+1,tblptrh
  1619  0028D0  0100               	movlb	0	; () banked
  1620  0028D2  4B60               	infsnz	printf@f& (0+255),f,b
  1621  0028D4  2B61               	incf	(printf@f+1)& (0+255),f,b
  1622  0028D6                     	if	0	;tblptru may be non-zero
  1623  0028D6                     	endif
  1624  0028D6                     	if	0	;tblptru may be non-zero
  1625  0028D6                     	endif
  1626  0028D6  0008               	tblrd		*
  1627  0028D8  CFF5 F064          	movff	tablat,printf@c
  1628  0028DC  0100               	movlb	0	; () banked
  1629  0028DE  5164               	movf	printf@c& (0+255),w,b
  1630  0028E0  B4D8               	btfsc	status,2,c
  1631  0028E2  0012               	return	
  1632  0028E4  D7ED               	goto	l3782
  1633  0028E6                     __end_of_printf:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1h	equ	0xFE2
  1643                           fsr1l	equ	0xFE1
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _putch *****************
  1647 ;; Defined at:
  1648 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  c               1    wreg     unsigned char 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  c               1    0[COMRAM] unsigned char 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1662 ;;      Params:         0       0       0       0
  1663 ;;      Locals:         0       0       0       0
  1664 ;;      Temps:          0       0       0       0
  1665 ;;      Totals:         0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    7
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_printf
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text2
  1677  002B36                     __ptext2:
  1678                           	opt stack 0
  1679  002B36                     _putch:
  1680                           	opt stack 22
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;incstack = 0
  1684  002B36  0012               	return		;funcret
  1685  002B38                     __end_of_putch:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1h	equ	0xFE2
  1695                           fsr1l	equ	0xFE1
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _ES_Run *****************
  1699 ;; Defined at:
  1700 ;;		line 277 in file "ES_Framework.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  HighestPrior    1  108[BANK0 ] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      enum E15494
  1707 ;; Registers used:
  1708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1714 ;;      Params:         0       0       0       0
  1715 ;;      Locals:         0       1       0       0
  1716 ;;      Temps:          0       4       0       0
  1717 ;;      Totals:         0       5       0       0
  1718 ;;Total ram usage:        5 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:   15
  1721 ;; This function calls:
  1722 ;;		_ES_DeQueue
  1723 ;;		_ES_GetMSBitSet
  1724 ;;		_RunPatternControlService
  1725 ;;		_RunSPI32ControlService
  1726 ;;		__HW_Process_Pending_Ints
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text3
  1733  001990                     __ptext3:
  1734                           	opt stack 0
  1735  001990                     _ES_Run:
  1736                           	opt stack 15
  1737                           
  1738                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1739                           
  1740                           ;incstack = 0
  1741                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1742                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1743                           ;ES_Framework.c: 282: while(1){
  1744  001990  D06B               	goto	l3756
  1745  001992                     l3744:
  1746                           
  1747                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1748  001992  C0DA  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1749  001996  C0DB  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1750  00199A  EC02  F010         	call	_ES_GetMSBitSet	;wreg free
  1751  00199E  0100               	movlb	0	; () banked
  1752  0019A0  6FCC               	movwf	ES_Run@HighestPrior& (0+255),b
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1756  0019A2  0100               	movlb	0	; () banked
  1757  0019A4  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1758  0019A6  0D03               	mullw	3
  1759  0019A8  0E58               	movlw	low _EventQueues
  1760  0019AA  24F3               	addwf	prodl,w,c
  1761  0019AC  6EF6               	movwf	tblptrl,c
  1762  0019AE  0E03               	movlw	high _EventQueues
  1763  0019B0  20F4               	addwfc	prodh,w,c
  1764  0019B2  6EF7               	movwf	tblptrh,c
  1765  0019B4                     	if	0	;There are less than 3 active tblptr bytes
  1766  0019B4                     	endif
  1767  0019B4  0009               	tblrd		*+
  1768  0019B6  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1769  0019BA  000A               	tblrd		*-
  1770  0019BC  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1771  0019C0  0EEA               	movlw	low ES_Run@ThisEvent
  1772  0019C2  0100               	movlb	0	; () banked
  1773  0019C4  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1774  0019C6  0E00               	movlw	high ES_Run@ThisEvent
  1775  0019C8  0100               	movlb	0	; () banked
  1776  0019CA  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1777  0019CC  ECA9  F00A         	call	_ES_DeQueue	;wreg free
  1778  0019D0  0900               	iorlw	0
  1779  0019D2  A4D8               	btfss	status,2,c
  1780  0019D4  D01F               	goto	l3750
  1781                           
  1782                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1783  0019D6  0100               	movlb	0	; () banked
  1784  0019D8  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1785  0019DA  0D02               	mullw	2
  1786  0019DC  0E01               	movlw	low _BitNum2SetMask
  1787  0019DE  24F3               	addwf	prodl,w,c
  1788  0019E0  6EF6               	movwf	tblptrl,c
  1789  0019E2  0E03               	movlw	high _BitNum2SetMask
  1790  0019E4  20F4               	addwfc	prodh,w,c
  1791  0019E6  6EF7               	movwf	tblptrh,c
  1792  0019E8                     	if	0	;There are less than 3 active tblptr bytes
  1793  0019E8                     	endif
  1794  0019E8  0009               	tblrd		*+
  1795  0019EA  CFF5 F0C8          	movff	tablat,??_ES_Run
  1796  0019EE  0009               	tblrd		*+
  1797  0019F0  CFF5 F0C9          	movff	tablat,??_ES_Run+1
  1798  0019F4  0100               	movlb	0	; () banked
  1799  0019F6  1DC8               	comf	??_ES_Run& (0+255),w,b
  1800  0019F8  0100               	movlb	0	; () banked
  1801  0019FA  6FCA               	movwf	(??_ES_Run+2)& (0+255),b
  1802  0019FC  0100               	movlb	0	; () banked
  1803  0019FE  1DC9               	comf	(??_ES_Run+1)& (0+255),w,b
  1804  001A00  0100               	movlb	0	; () banked
  1805  001A02  6FCB               	movwf	(??_ES_Run+3)& (0+255),b
  1806  001A04  0100               	movlb	0	; () banked
  1807  001A06  51CA               	movf	(??_ES_Run+2)& (0+255),w,b
  1808  001A08  0100               	movlb	0	; () banked
  1809  001A0A  17DA               	andwf	_Ready& (0+255),f,b
  1810  001A0C  0100               	movlb	0	; () banked
  1811  001A0E  51CB               	movf	(??_ES_Run+3)& (0+255),w,b
  1812  001A10  0100               	movlb	0	; () banked
  1813  001A12  17DB               	andwf	(_Ready+1)& (0+255),f,b
  1814  001A14                     l3750:
  1815                           
  1816                           ;ES_Framework.c: 291: }
  1817                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1818  001A14  C0EA  F0BB         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1819  001A18  C0EB  F0BC         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1820  001A1C  C0EC  F0BD         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1821  001A20  0100               	movlb	0	; () banked
  1822  001A22  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1823  001A24  0D04               	mullw	4
  1824  001A26  0E02               	movlw	2
  1825  001A28  26F3               	addwf	prodl,f,c
  1826  001A2A  0E00               	movlw	0
  1827  001A2C  22F4               	addwfc	prodh,f,c
  1828  001A2E  0E50               	movlw	low _ServDescList
  1829  001A30  24F3               	addwf	prodl,w,c
  1830  001A32  6EF6               	movwf	tblptrl,c
  1831  001A34  0E03               	movlw	high _ServDescList
  1832  001A36  20F4               	addwfc	prodh,w,c
  1833  001A38  6EF7               	movwf	tblptrh,c
  1834  001A3A                     	if	0	;There are less than 3 active tblptr bytes
  1835  001A3A                     	endif
  1836  001A3A  D801               	call	u2818
  1837  001A3C  D00C               	goto	u2819
  1838  001A3E                     u2818:
  1839  001A3E  0005               	push	
  1840  001A40  6EFA               	movwf	pclath,c
  1841  001A42  0009               	tblrd		*+
  1842  001A44  50F5               	movf	tablat,w,c
  1843  001A46  6EFD               	movwf	tosl,c
  1844  001A48  0009               	tblrd		*+
  1845  001A4A  50F5               	movf	tablat,w,c
  1846  001A4C  6EFE               	movwf	tosh,c
  1847  001A4E  50F8               	movf	tblptru,w,c
  1848  001A50  6EFF               	movwf	tosu,c
  1849  001A52  50FA               	movf	pclath,w,c
  1850  001A54  0012               	return		;indir
  1851  001A56                     u2819:
  1852  001A56  0EBB               	movlw	low ?_RunSPI32ControlService
  1853  001A58  6ED9               	movwf	fsr2l,c
  1854  001A5A  0E00               	movlw	high ?_RunSPI32ControlService
  1855  001A5C  6EDA               	movwf	fsr2h,c
  1856  001A5E  50DF               	movf	indf2,w,c
  1857  001A60  B4D8               	btfsc	status,2,c
  1858  001A62  D002               	goto	l3756
  1859                           
  1860                           ;ES_Framework.c: 293: return FailedRun;
  1861  001A64  0E02               	movlw	2
  1862  001A66  0012               	return	
  1863  001A68                     l3756:
  1864  001A68  EC40  F015         	call	__HW_Process_Pending_Ints	;wreg free
  1865  001A6C  0900               	iorlw	0
  1866  001A6E  B4D8               	btfsc	status,2,c
  1867  001A70  D7FB               	goto	l3756
  1868  001A72  0100               	movlb	0	; () banked
  1869  001A74  51DA               	movf	_Ready& (0+255),w,b
  1870  001A76  0100               	movlb	0	; () banked
  1871  001A78  11DB               	iorwf	(_Ready+1)& (0+255),w,b
  1872  001A7A  B4D8               	btfsc	status,2,c
  1873  001A7C  D7F5               	goto	l3756
  1874  001A7E  D789               	goto	l3744
  1875  001A80                     __end_of_ES_Run:
  1876                           	opt stack 0
  1877                           tosu	equ	0xFFF
  1878                           tosh	equ	0xFFE
  1879                           tosl	equ	0xFFD
  1880                           pclath	equ	0xFFA
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           prodh	equ	0xFF4
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1h	equ	0xFE2
  1891                           fsr1l	equ	0xFE1
  1892                           indf2	equ	0xFDF
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function __HW_Process_Pending_Ints *****************
  1898 ;; Defined at:
  1899 ;;		line 225 in file "ES_Port.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      unsigned char 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1913 ;;      Params:         0       0       0       0
  1914 ;;      Locals:         0       0       0       0
  1915 ;;      Temps:          0       0       0       0
  1916 ;;      Totals:         0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:   12
  1920 ;; This function calls:
  1921 ;;		_ES_Timer_Tick_Resp
  1922 ;; This function is called by:
  1923 ;;		_ES_Run
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text4
  1928  002A80                     __ptext4:
  1929                           	opt stack 0
  1930  002A80                     __HW_Process_Pending_Ints:
  1931                           	opt stack 17
  1932                           
  1933                           ;ES_Port.c: 227: while (TickCount > 0)
  1934                           
  1935                           ;incstack = 0
  1936  002A80  D004               	goto	l3532
  1937  002A82                     l3528:
  1938                           
  1939                           ;ES_Port.c: 228: {
  1940                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1941  002A82  EC3D  F00B         	call	_ES_Timer_Tick_Resp	;wreg free
  1942                           
  1943                           ;ES_Port.c: 231: TickCount--;
  1944  002A86  0100               	movlb	0	; () banked
  1945  002A88  07E5               	decf	_TickCount& (0+255),f,b	;volatile
  1946  002A8A                     l3532:
  1947  002A8A  0100               	movlb	0	; () banked
  1948  002A8C  51E5               	movf	_TickCount& (0+255),w,b	;volatile
  1949  002A8E  A4D8               	btfss	status,2,c
  1950  002A90  D7F8               	goto	l3528
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;ES_Port.c: 232: }
  1954                           ;ES_Port.c: 234: return 1;
  1955                           
  1956                           ; BSR set to: 0
  1957  002A92  0E01               	movlw	1
  1958  002A94  0012               	return	
  1959  002A96                     __end_of__HW_Process_Pending_Ints:
  1960                           	opt stack 0
  1961                           tosu	equ	0xFFF
  1962                           tosh	equ	0xFFE
  1963                           tosl	equ	0xFFD
  1964                           pclath	equ	0xFFA
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           postdec1	equ	0xFE5
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           indf2	equ	0xFDF
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _ES_Timer_Tick_Resp *****************
  1982 ;; Defined at:
  1983 ;;		line 284 in file "ES_Timers.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1997 ;;      Params:         0       0       0       0
  1998 ;;      Locals:         0       0       0       0
  1999 ;;      Temps:          0       4       0       0
  2000 ;;      Totals:         0       4       0       0
  2001 ;;Total ram usage:        4 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:   11
  2004 ;; This function calls:
  2005 ;;		Absolute function
  2006 ;;		_ES_GetMSBitSet
  2007 ;;		_PostPatternControlService
  2008 ;;		_PostSPI32ControlService
  2009 ;; This function is called by:
  2010 ;;		__HW_Process_Pending_Ints
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text5
  2015  00167A                     __ptext5:
  2016                           	opt stack 0
  2017  00167A                     _ES_Timer_Tick_Resp:
  2018                           	opt stack 17
  2019                           
  2020                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  2021                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  2022                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  2023                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;incstack = 0
  2027  00167A  0100               	movlb	0	; () banked
  2028  00167C  51DC               	movf	_TMR_ActiveFlags& (0+255),w,b
  2029  00167E  0100               	movlb	0	; () banked
  2030  001680  11DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  2031  001682  B4D8               	btfsc	status,2,c
  2032  001684  0012               	return	
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;ES_Timers.c: 291: {
  2036                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  2037  001686  C0DC  F0D2         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  2038  00168A  C0DD  F0D3         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  2039  00168E                     l3404:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2043  00168E  C0D2  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  2044  001692  C0D3  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  2045  001696  EC02  F010         	call	_ES_GetMSBitSet	;wreg free
  2046  00169A  0100               	movlb	0	; () banked
  2047  00169C  6FDE               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  2051  00169E  0100               	movlb	0	; () banked
  2052  0016A0  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2053  0016A2  0D02               	mullw	2
  2054  0016A4  0E00               	movlw	low _TMR_TimerArray
  2055  0016A6  24F3               	addwf	prodl,w,c
  2056  0016A8  6ED9               	movwf	fsr2l,c
  2057  0016AA  0E01               	movlw	high _TMR_TimerArray
  2058  0016AC  20F4               	addwfc	prodh,w,c
  2059  0016AE  6EDA               	movwf	fsr2h,c
  2060  0016B0  06DE               	decf	postinc2,f,c
  2061  0016B2  0E00               	movlw	0
  2062  0016B4  5ADD               	subwfb	postdec2,f,c
  2063  0016B6  50DE               	movf	postinc2,w,c
  2064  0016B8  10DE               	iorwf	postinc2,w,c
  2065  0016BA  A4D8               	btfss	status,2,c
  2066  0016BC  D041               	goto	l3416
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;ES_Timers.c: 299: {
  2070                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  2071  0016BE  0E03               	movlw	3
  2072  0016C0  6E3A               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2076  0016C2  C0DE  F03B         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2077  0016C6  6A3C               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2081  0016C8  C03A  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2082  0016CC  C03B  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2083  0016D0  C03C  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2084  0016D4  0100               	movlb	0	; () banked
  2085  0016D6  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2086  0016D8  0D02               	mullw	2
  2087  0016DA  0E21               	movlw	low _Timer2PostFunc
  2088  0016DC  24F3               	addwf	prodl,w,c
  2089  0016DE  6EF6               	movwf	tblptrl,c
  2090  0016E0  0E03               	movlw	high _Timer2PostFunc
  2091  0016E2  20F4               	addwfc	prodh,w,c
  2092  0016E4  6EF7               	movwf	tblptrh,c
  2093  0016E6                     	if	0	;There are less than 3 active tblptr bytes
  2094  0016E6                     	endif
  2095  0016E6  D801               	call	u2458
  2096  0016E8  D00C               	goto	l3414
  2097  0016EA                     u2458:
  2098  0016EA  0005               	push	
  2099  0016EC  6EFA               	movwf	pclath,c
  2100  0016EE  0009               	tblrd		*+
  2101  0016F0  50F5               	movf	tablat,w,c
  2102  0016F2  6EFD               	movwf	tosl,c
  2103  0016F4  0009               	tblrd		*+
  2104  0016F6  50F5               	movf	tablat,w,c
  2105  0016F8  6EFE               	movwf	tosh,c
  2106  0016FA  50F8               	movf	tblptru,w,c
  2107  0016FC  6EFF               	movwf	tosu,c
  2108  0016FE  50FA               	movf	pclath,w,c
  2109  001700  0012               	return		;indir
  2110  001702                     l3414:
  2111                           
  2112                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2113  001702  0100               	movlb	0	; () banked
  2114  001704  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2115  001706  0D02               	mullw	2
  2116  001708  0E01               	movlw	low _BitNum2SetMask
  2117  00170A  24F3               	addwf	prodl,w,c
  2118  00170C  6EF6               	movwf	tblptrl,c
  2119  00170E  0E03               	movlw	high _BitNum2SetMask
  2120  001710  20F4               	addwfc	prodh,w,c
  2121  001712  6EF7               	movwf	tblptrh,c
  2122  001714                     	if	0	;There are less than 3 active tblptr bytes
  2123  001714                     	endif
  2124  001714  0009               	tblrd		*+
  2125  001716  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2126  00171A  0009               	tblrd		*+
  2127  00171C  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2128  001720  0100               	movlb	0	; () banked
  2129  001722  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2130  001724  0100               	movlb	0	; () banked
  2131  001726  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2132  001728  0100               	movlb	0	; () banked
  2133  00172A  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2134  00172C  0100               	movlb	0	; () banked
  2135  00172E  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2136  001730  0100               	movlb	0	; () banked
  2137  001732  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2138  001734  0100               	movlb	0	; () banked
  2139  001736  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2140  001738  0100               	movlb	0	; () banked
  2141  00173A  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2142  00173C  0100               	movlb	0	; () banked
  2143  00173E  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2144  001740                     l3416:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;ES_Timers.c: 306: }
  2148                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2149  001740  0100               	movlb	0	; () banked
  2150  001742  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2151  001744  0D02               	mullw	2
  2152  001746  0E01               	movlw	low _BitNum2SetMask
  2153  001748  24F3               	addwf	prodl,w,c
  2154  00174A  6EF6               	movwf	tblptrl,c
  2155  00174C  0E03               	movlw	high _BitNum2SetMask
  2156  00174E  20F4               	addwfc	prodh,w,c
  2157  001750  6EF7               	movwf	tblptrh,c
  2158  001752                     	if	0	;There are less than 3 active tblptr bytes
  2159  001752                     	endif
  2160  001752  0009               	tblrd		*+
  2161  001754  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2162  001758  0009               	tblrd		*+
  2163  00175A  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2164  00175E  0100               	movlb	0	; () banked
  2165  001760  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2166  001762  0100               	movlb	0	; () banked
  2167  001764  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2168  001766  0100               	movlb	0	; () banked
  2169  001768  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2170  00176A  0100               	movlb	0	; () banked
  2171  00176C  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2172  00176E  0100               	movlb	0	; () banked
  2173  001770  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2174  001772  0100               	movlb	0	; () banked
  2175  001774  17D2               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2176  001776  0100               	movlb	0	; () banked
  2177  001778  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2178  00177A  0100               	movlb	0	; () banked
  2179  00177C  17D3               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2183  00177E  0100               	movlb	0	; () banked
  2184  001780  51D2               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2185  001782  0100               	movlb	0	; () banked
  2186  001784  11D3               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2187  001786  B4D8               	btfsc	status,2,c
  2188  001788  0012               	return	
  2189  00178A  D781               	goto	l3404
  2190  00178C                     __end_of_ES_Timer_Tick_Resp:
  2191                           	opt stack 0
  2192                           tosu	equ	0xFFF
  2193                           tosh	equ	0xFFE
  2194                           tosl	equ	0xFFD
  2195                           pclath	equ	0xFFA
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postdec1	equ	0xFE5
  2205                           fsr1h	equ	0xFE2
  2206                           fsr1l	equ	0xFE1
  2207                           indf2	equ	0xFDF
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _ES_GetMSBitSet *****************
  2215 ;; Defined at:
  2216 ;;		line 79 in file "ES_LookupTables.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  LoopCntr        1    9[BANK0 ] char 
  2221 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2222 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      unsigned char 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2232 ;;      Params:         0       2       0       0
  2233 ;;      Locals:         0       3       0       0
  2234 ;;      Temps:          0       5       0       0
  2235 ;;      Totals:         0      10       0       0
  2236 ;;Total ram usage:       10 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    7
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_ES_Run
  2243 ;;		_ES_Timer_Tick_Resp
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	text6
  2248  002004                     __ptext6:
  2249                           	opt stack 0
  2250  002004                     _ES_GetMSBitSet:
  2251                           	opt stack 20
  2252                           
  2253                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2254                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2255                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;incstack = 0
  2259  002004  0E80               	movlw	128
  2260  002006  0100               	movlb	0	; () banked
  2261  002008  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2262                           
  2263                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2264  00200A  0E03               	movlw	3
  2265  00200C  0100               	movlb	0	; () banked
  2266  00200E  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2267  002010                     l3166:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2271  002010  0100               	movlb	0	; () banked
  2272  002012  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2273  002014  D046               	goto	l3180
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2277                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2278                           ;ES_LookupTables.c: 91: 0x0F);
  2279                           
  2280                           ; BSR set to: 0
  2281                           
  2282                           ; BSR set to: 0
  2283  002016  0100               	movlb	0	; () banked
  2284  002018  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2285  00201A  0D04               	mullw	4
  2286  00201C  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2287  002020  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2288  002024  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2289  002028  0100               	movlb	0	; () banked
  2290  00202A  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2291  00202C  D004               	goto	u2124
  2292  00202E                     u2125:
  2293  00202E  0100               	movlb	0	; () banked
  2294  002030  90D8               	bcf	status,0,c
  2295  002032  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2296  002034  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2297  002036                     u2124:
  2298  002036  0100               	movlb	0	; () banked
  2299  002038  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2300  00203A  D7F9               	goto	u2125
  2301  00203C  0100               	movlb	0	; () banked
  2302  00203E  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2303  002040  0B0F               	andlw	15
  2304  002042  0100               	movlb	0	; () banked
  2305  002044  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2309  002046  0100               	movlb	0	; () banked
  2310  002048  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2311  00204A  0100               	movlb	0	; () banked
  2312  00204C  B4D8               	btfsc	status,2,c
  2313  00204E  D026               	goto	l3176
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2317                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2318  002050  0EFF               	movlw	255
  2319  002052  0100               	movlb	0	; () banked
  2320  002054  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2321  002056  0EFF               	movlw	255
  2322  002058  0100               	movlb	0	; () banked
  2323  00205A  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2324  00205C  0100               	movlb	0	; () banked
  2325  00205E  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2326  002060  0100               	movlb	0	; () banked
  2327  002062  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2328  002064  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2329  002066  0100               	movlb	0	; () banked
  2330  002068  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2331  00206A  0100               	movlb	0	; () banked
  2332  00206C  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2333  00206E  0100               	movlb	0	; () banked
  2334  002070  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2335  002072  0100               	movlb	0	; () banked
  2336  002074  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2337  002076  0E41               	movlw	low _Nybble2MSBitNum
  2338  002078  0100               	movlb	0	; () banked
  2339  00207A  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2340  00207C  6EF6               	movwf	tblptrl,c
  2341  00207E  0E03               	movlw	high _Nybble2MSBitNum
  2342  002080  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2343  002082  6EF7               	movwf	tblptrh,c
  2344  002084                     	if	0	;There are less than 3 active tblptr bytes
  2345  002084                     	endif
  2346  002084  0008               	tblrd		*
  2347  002086  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2348  00208A  0100               	movlb	0	; () banked
  2349  00208C  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2350  00208E  0D04               	mullw	4
  2351  002090  50F3               	movf	prodl,w,c
  2352  002092  0100               	movlb	0	; () banked
  2353  002094  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2354  002096  0100               	movlb	0	; () banked
  2355  002098  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2356                           
  2357                           ;ES_LookupTables.c: 96: break;
  2358  00209A  D003               	goto	l3180
  2359  00209C                     l3176:
  2360                           
  2361                           ; BSR set to: 0
  2362  00209C  0100               	movlb	0	; () banked
  2363  00209E  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2364  0020A0  D7B7               	goto	l3166
  2365  0020A2                     l3180:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;ES_LookupTables.c: 97: }
  2369                           ;ES_LookupTables.c: 98: }
  2370                           ;ES_LookupTables.c: 99: return ReturnVal;
  2371  0020A2  0100               	movlb	0	; () banked
  2372  0020A4  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2373  0020A6  0012               	return	
  2374  0020A8                     __end_of_ES_GetMSBitSet:
  2375                           	opt stack 0
  2376                           tosu	equ	0xFFF
  2377                           tosh	equ	0xFFE
  2378                           tosl	equ	0xFFD
  2379                           pclath	equ	0xFFA
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           postdec1	equ	0xFE5
  2389                           fsr1h	equ	0xFE2
  2390                           fsr1l	equ	0xFE1
  2391                           indf2	equ	0xFDF
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _RunPatternControlService *****************
  2399 ;; Defined at:
  2400 ;;		line 159 in file "Pattern_ControlService.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  testEvent       3   97[BANK0 ] struct ES_Event_t
  2405 ;;  ReturnEvent     3   94[BANK0 ] struct ES_Event_t
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  3   91[BANK0 ] struct ES_Event_t
  2408 ;; Registers used:
  2409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2415 ;;      Params:         0       3       0       0
  2416 ;;      Locals:         0       6       0       0
  2417 ;;      Temps:          0       0       0       0
  2418 ;;      Totals:         0       9       0       0
  2419 ;;Total ram usage:        9 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:   14
  2422 ;; This function calls:
  2423 ;;		_PausePattern
  2424 ;;		_PostPatternControlService
  2425 ;;		_ShowPattern
  2426 ;;		_StopPattern
  2427 ;; This function is called by:
  2428 ;;		_ES_Run
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text7
  2433  001D1C                     __ptext7:
  2434                           	opt stack 0
  2435  001D1C                     _RunPatternControlService:
  2436                           	opt stack 15
  2437                           
  2438                           ;Pattern_ControlService.c: 161: ES_Event ReturnEvent;
  2439                           ;Pattern_ControlService.c: 162: ReturnEvent.EventType = ES_NO_EVENT;
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;incstack = 0
  2443  001D1C  0E00               	movlw	0
  2444  001D1E  0100               	movlb	0	; () banked
  2445  001D20  6FBE               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2446                           
  2447                           ;Pattern_ControlService.c: 164: switch(CurrentState){
  2448  001D22  D04B               	goto	l3608
  2449  001D24                     l3564:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;Pattern_ControlService.c: 167: if(ThisEvent.EventType == ES_INIT){
  2453  001D24  0E02               	movlw	2
  2454  001D26  0100               	movlb	0	; () banked
  2455  001D28  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2456  001D2A  A4D8               	btfss	status,2,c
  2457  001D2C  D054               	goto	l326
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;Pattern_ControlService.c: 171: StopPattern();
  2461  001D2E  ECE2  F014         	call	_StopPattern	;wreg free
  2462                           
  2463                           ;Pattern_ControlService.c: 173: CurrentState = Pattern_Off;
  2464  001D32  0E01               	movlw	1
  2465  001D34  0100               	movlb	0	; () banked
  2466  001D36  6FE1               	movwf	_CurrentState& (0+255),b
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;Pattern_ControlService.c: 176: ES_Event testEvent;
  2470                           ;Pattern_ControlService.c: 177: testEvent.EventType = PATTERN_START;
  2471  001D38  0E05               	movlw	5
  2472  001D3A  0100               	movlb	0	; () banked
  2473  001D3C  6FC1               	movwf	RunPatternControlService@testEvent& (0+255),b
  2474                           
  2475                           ;Pattern_ControlService.c: 178: PostPatternControlService(testEvent);
  2476  001D3E  C0C1  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2477  001D42  C0C2  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2478  001D46  C0C3  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2479  001D4A  ECF0  F014         	call	_PostPatternControlService	;wreg free
  2480                           
  2481                           ;Pattern_ControlService.c: 180: }
  2482                           ;Pattern_ControlService.c: 181: break;
  2483  001D4E  D043               	goto	l326
  2484  001D50                     l3572:
  2485                           
  2486                           ;Pattern_ControlService.c: 185: if(ThisEvent.EventType == PATTERN_START){
  2487  001D50  0E05               	movlw	5
  2488  001D52  0100               	movlb	0	; () banked
  2489  001D54  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2490  001D56  A4D8               	btfss	status,2,c
  2491  001D58  D03E               	goto	l326
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;Pattern_ControlService.c: 187: ShowPattern();
  2495  001D5A  ECC3  F014         	call	_ShowPattern	;wreg free
  2496  001D5E                     l3576:
  2497                           
  2498                           ;Pattern_ControlService.c: 189: CurrentState = Pattern_Running;
  2499  001D5E  0E02               	movlw	2
  2500  001D60  D029               	goto	L4
  2501  001D62                     l3578:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;Pattern_ControlService.c: 195: if(ThisEvent.EventType == ES_TIMEOUT){
  2505  001D62  0E03               	movlw	3
  2506  001D64  0100               	movlb	0	; () banked
  2507  001D66  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2508  001D68  A4D8               	btfss	status,2,c
  2509  001D6A  D003               	goto	l3582
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;Pattern_ControlService.c: 197: ShowPattern();
  2513  001D6C  ECC3  F014         	call	_ShowPattern	;wreg free
  2514                           
  2515                           ;Pattern_ControlService.c: 198: }
  2516  001D70  D032               	goto	l326
  2517  001D72                     l3582:
  2518                           
  2519                           ;Pattern_ControlService.c: 200: else if(ThisEvent.EventType == PATTERN_END){
  2520  001D72  0E06               	movlw	6
  2521  001D74  0100               	movlb	0	; () banked
  2522  001D76  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2523  001D78  A4D8               	btfss	status,2,c
  2524  001D7A  D003               	goto	l3588
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;Pattern_ControlService.c: 202: StopPattern();
  2528  001D7C  ECE2  F014         	call	_StopPattern	;wreg free
  2529  001D80  D018               	goto	L23
  2530  001D82                     l3588:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;Pattern_ControlService.c: 207: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2534  001D82  0E07               	movlw	7
  2535  001D84  0100               	movlb	0	; () banked
  2536  001D86  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2537  001D88  A4D8               	btfss	status,2,c
  2538  001D8A  D025               	goto	l326
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;Pattern_ControlService.c: 209: PausePattern();
  2542  001D8C  EC8A  F015         	call	_PausePattern	;wreg free
  2543                           
  2544                           ;Pattern_ControlService.c: 211: CurrentState = Pattern_Paused;
  2545  001D90  0E03               	movlw	3
  2546  001D92  D010               	goto	L4
  2547  001D94                     l3594:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;Pattern_ControlService.c: 217: if(ThisEvent.EventType == PATTERN_START){
  2551  001D94  0E05               	movlw	5
  2552  001D96  0100               	movlb	0	; () banked
  2553  001D98  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2554  001D9A  A4D8               	btfss	status,2,c
  2555  001D9C  D003               	goto	l3600
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;Pattern_ControlService.c: 219: ShowPattern();
  2559  001D9E  ECC3  F014         	call	_ShowPattern	;wreg free
  2560  001DA2  D7DD               	goto	l3576
  2561  001DA4                     l3600:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;Pattern_ControlService.c: 224: else if(ThisEvent.EventType == PATTERN_END){
  2565  001DA4  0E06               	movlw	6
  2566  001DA6  0100               	movlb	0	; () banked
  2567  001DA8  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2568  001DAA  A4D8               	btfss	status,2,c
  2569  001DAC  D014               	goto	l326
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;Pattern_ControlService.c: 226: StopPattern();
  2573  001DAE  ECE2  F014         	call	_StopPattern	;wreg free
  2574  001DB2                     L23:
  2575                           
  2576                           ;Pattern_ControlService.c: 228: CurrentState = Pattern_Off;
  2577  001DB2  0E01               	movlw	1
  2578  001DB4                     L4:
  2579  001DB4  0100               	movlb	0	; () banked
  2580  001DB6  6FE1               	movwf	_CurrentState& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;Pattern_ControlService.c: 231: }
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;Pattern_ControlService.c: 229: }
  2587                           ;Pattern_ControlService.c: 230: break;
  2588                           
  2589                           ; BSR set to: 0
  2590  001DB8  D00E               	goto	l326
  2591  001DBA                     l3608:
  2592                           
  2593                           ; BSR set to: 0
  2594  001DBA  0100               	movlb	0	; () banked
  2595  001DBC  51E1               	movf	_CurrentState& (0+255),w,b
  2596                           
  2597                           ; Switch size 1, requested type "space"
  2598                           ; Number of cases is 4, Range of values is 0 to 3
  2599                           ; switch strategies available:
  2600                           ; Name         Instructions Cycles
  2601                           ; simple_byte           13     7 (average)
  2602                           ;	Chosen strategy is simple_byte
  2603  001DBE  0A00               	xorlw	0	; case 0
  2604  001DC0  B4D8               	btfsc	status,2,c
  2605  001DC2  D7B0               	goto	l3564
  2606  001DC4  0A01               	xorlw	1	; case 1
  2607  001DC6  B4D8               	btfsc	status,2,c
  2608  001DC8  D7C3               	goto	l3572
  2609  001DCA  0A03               	xorlw	3	; case 2
  2610  001DCC  B4D8               	btfsc	status,2,c
  2611  001DCE  D7C9               	goto	l3578
  2612  001DD0  0A01               	xorlw	1	; case 3
  2613  001DD2  B4D8               	btfsc	status,2,c
  2614  001DD4  D7DF               	goto	l3594
  2615  001DD6                     l326:
  2616                           
  2617                           ;Pattern_ControlService.c: 232: return ReturnEvent;
  2618  001DD6  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2619  001DDA  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2620  001DDE  C0C0  F0BD         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2621  001DE2  0012               	return		;funcret
  2622  001DE4                     __end_of_RunPatternControlService:
  2623                           	opt stack 0
  2624                           tosu	equ	0xFFF
  2625                           tosh	equ	0xFFE
  2626                           tosl	equ	0xFFD
  2627                           pclath	equ	0xFFA
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           postdec1	equ	0xFE5
  2637                           fsr1h	equ	0xFE2
  2638                           fsr1l	equ	0xFE1
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _RunSPI32ControlService *****************
  2647 ;; Defined at:
  2648 ;;		line 138 in file "SPI32_ControlService.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  ReturnEvent     3  101[BANK0 ] struct ES_Event_t
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  3   91[BANK0 ] struct ES_Event_t
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2662 ;;      Params:         0       3       0       0
  2663 ;;      Locals:         0       3       0       0
  2664 ;;      Temps:          0       7       0       0
  2665 ;;      Totals:         0      13       0       0
  2666 ;;Total ram usage:       13 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    8
  2669 ;; This function calls:
  2670 ;;		_GetNextFrame
  2671 ;;		_SPI32_SendFrame
  2672 ;; This function is called by:
  2673 ;;		_ES_Run
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text8
  2678  00178C                     __ptext8:
  2679                           	opt stack 0
  2680  00178C                     _RunSPI32ControlService:
  2681                           	opt stack 21
  2682                           
  2683                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2684                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2685                           
  2686                           ;incstack = 0
  2687  00178C  0E00               	movlw	0
  2688  00178E  0100               	movlb	0	; () banked
  2689  001790  6FC5               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2690                           
  2691                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2692  001792  D06D               	goto	l3658
  2693  001794                     l3632:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2697  001794  0E02               	movlw	2
  2698  001796  0100               	movlb	0	; () banked
  2699  001798  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2700  00179A  A4D8               	btfss	status,2,c
  2701  00179C  D073               	goto	l410
  2702  00179E  D063               	goto	l3654
  2703  0017A0                     l3636:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2707  0017A0  0E08               	movlw	8
  2708  0017A2  0100               	movlb	0	; () banked
  2709  0017A4  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2710  0017A6  A4D8               	btfss	status,2,c
  2711  0017A8  D06D               	goto	l410
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2715  0017AA  EC0C  F015         	call	_GetNextFrame	;wreg free
  2716  0017AE  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2717  0017B2  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2718  0017B6  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2719  0017BA  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2720                           
  2721                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2722  0017BE  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2723  0017C2  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2724  0017C6  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2725  0017CA  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2726  0017CE  EC05  F013         	call	_SPI32_SendFrame	;wreg free
  2727                           
  2728                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2729  0017D2  0E02               	movlw	2
  2730  0017D4  D049               	goto	L6
  2731  0017D6                     l3644:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2735  0017D6  0E03               	movlw	3
  2736  0017D8  0100               	movlb	0	; () banked
  2737  0017DA  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2738  0017DC  A4D8               	btfss	status,2,c
  2739  0017DE  D052               	goto	l410
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2743  0017E0  0EFF               	movlw	255
  2744  0017E2  0100               	movlb	0	; () banked
  2745  0017E4  6FBE               	movwf	??_RunSPI32ControlService& (0+255),b
  2746  0017E6  0EFF               	movlw	255
  2747  0017E8  0100               	movlb	0	; () banked
  2748  0017EA  6FBF               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2749  0017EC  0100               	movlb	0	; () banked
  2750  0017EE  51E4               	movf	_NumFrames& (0+255),w,b
  2751  0017F0  0100               	movlb	0	; () banked
  2752  0017F2  6FC0               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2753  0017F4  6BC1               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2754  0017F6  0100               	movlb	0	; () banked
  2755  0017F8  51BE               	movf	??_RunSPI32ControlService& (0+255),w,b
  2756  0017FA  0100               	movlb	0	; () banked
  2757  0017FC  27C0               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2758  0017FE  0100               	movlb	0	; () banked
  2759  001800  51BF               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2760  001802  0100               	movlb	0	; () banked
  2761  001804  23C1               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2762  001806  0100               	movlb	0	; () banked
  2763  001808  2BE2               	incf	_FrameIndex& (0+255),f,b
  2764  00180A  05E2               	decf	_FrameIndex& (0+255),w,b
  2765  00180C  0100               	movlb	0	; () banked
  2766  00180E  6FC2               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2767  001810  6BC3               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2768  001812  0100               	movlb	0	; () banked
  2769  001814  51C0               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2770  001816  0100               	movlb	0	; () banked
  2771  001818  5DC2               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2772  00181A  0100               	movlb	0	; () banked
  2773  00181C  51C3               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2774  00181E  0A80               	xorlw	128
  2775  001820  0100               	movlb	0	; () banked
  2776  001822  6FC4               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2777  001824  0100               	movlb	0	; () banked
  2778  001826  51C1               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2779  001828  0A80               	xorlw	128
  2780  00182A  0100               	movlb	0	; () banked
  2781  00182C  59C4               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2782  00182E  B0D8               	btfsc	status,0,c
  2783  001830  D01A               	goto	l3654
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;SPI32_ControlService.c: 176: FramePointer++;
  2787  001832  0E04               	movlw	4
  2788  001834  0100               	movlb	0	; () banked
  2789  001836  27D4               	addwf	_FramePointer& (0+255),f,b
  2790  001838  0E00               	movlw	0
  2791  00183A  23D5               	addwfc	(_FramePointer+1)& (0+255),f,b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2795  00183C  EC0C  F015         	call	_GetNextFrame	;wreg free
  2796  001840  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2797  001844  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2798  001848  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2799  00184C  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2800                           
  2801                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2802  001850  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2803  001854  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2804  001858  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2805  00185C  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2806  001860  EC05  F013         	call	_SPI32_SendFrame	;wreg free
  2807                           
  2808                           ;SPI32_ControlService.c: 180: }
  2809  001864  D00F               	goto	l410
  2810  001866                     l3654:
  2811                           
  2812                           ;SPI32_ControlService.c: 182: else{
  2813                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2814  001866  0E01               	movlw	1
  2815  001868                     L6:
  2816  001868  0100               	movlb	0	; () banked
  2817  00186A  6FDF               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;SPI32_ControlService.c: 235: }
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;SPI32_ControlService.c: 185: }
  2824                           ;SPI32_ControlService.c: 186: }
  2825                           ;SPI32_ControlService.c: 188: break;
  2826                           
  2827                           ; BSR set to: 0
  2828  00186C  D00B               	goto	l410
  2829  00186E                     l3658:
  2830                           
  2831                           ; BSR set to: 0
  2832  00186E  0100               	movlb	0	; () banked
  2833  001870  51DF               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2834                           
  2835                           ; Switch size 1, requested type "space"
  2836                           ; Number of cases is 3, Range of values is 0 to 2
  2837                           ; switch strategies available:
  2838                           ; Name         Instructions Cycles
  2839                           ; simple_byte           10     6 (average)
  2840                           ;	Chosen strategy is simple_byte
  2841  001872  0A00               	xorlw	0	; case 0
  2842  001874  B4D8               	btfsc	status,2,c
  2843  001876  D78E               	goto	l3632
  2844  001878  0A01               	xorlw	1	; case 1
  2845  00187A  B4D8               	btfsc	status,2,c
  2846  00187C  D791               	goto	l3636
  2847  00187E  0A03               	xorlw	3	; case 2
  2848  001880  B4D8               	btfsc	status,2,c
  2849  001882  D7A9               	goto	l3644
  2850  001884                     l410:
  2851                           
  2852                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2853  001884  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2854  001888  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2855  00188C  C0C7  F0BD         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2856  001890  0012               	return		;funcret
  2857  001892                     __end_of_RunSPI32ControlService:
  2858                           	opt stack 0
  2859                           tosu	equ	0xFFF
  2860                           tosh	equ	0xFFE
  2861                           tosl	equ	0xFFD
  2862                           pclath	equ	0xFFA
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _SPI32_SendFrame *****************
  2882 ;; Defined at:
  2883 ;;		line 85 in file "SPI32_HW.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0, prodl, prodh
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2897 ;;      Params:         0       4       0       0
  2898 ;;      Locals:         0       0       0       0
  2899 ;;      Temps:          0       4       0       0
  2900 ;;      Totals:         0       8       0       0
  2901 ;;Total ram usage:        8 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_RunSPI32ControlService
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text9
  2912  00260A                     __ptext9:
  2913                           	opt stack 0
  2914  00260A                     _SPI32_SendFrame:
  2915                           	opt stack 21
  2916                           
  2917                           ;SPI32_HW.c: 100: if(FrameByte == 4){
  2918                           
  2919                           ;incstack = 0
  2920  00260A  0E04               	movlw	4
  2921  00260C  0100               	movlb	0	; () banked
  2922  00260E  19FE               	xorwf	_FrameByte& (0+255),w,b
  2923  002610  A4D8               	btfss	status,2,c
  2924  002612  D008               	goto	l3464
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
  2928  002614  C060  F036         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2929  002618  C061  F037         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2930  00261C  C062  F038         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2931  002620  C063  F039         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2932  002624                     l3464:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;SPI32_HW.c: 103: }
  2936                           ;SPI32_HW.c: 105: FrameByte--;
  2937  002624  0100               	movlb	0	; () banked
  2938  002626  07FE               	decf	_FrameByte& (0+255),f,b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  2942  002628  0100               	movlb	0	; () banked
  2943  00262A  51FE               	movf	_FrameByte& (0+255),w,b
  2944  00262C  0D08               	mullw	8
  2945  00262E  50F3               	movf	prodl,w,c
  2946  002630  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  2947  002634  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  2948  002638  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  2949  00263C  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  2950  002640  0100               	movlb	0	; () banked
  2951  002642  2AE8               	incf	wreg,f,c
  2952  002644  D005               	goto	u2480
  2953  002646                     u2485:
  2954  002646  90D8               	bcf	status,0,c
  2955  002648  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  2956  00264A  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  2957  00264C  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  2958  00264E  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  2959  002650                     u2480:
  2960  002650  2EE8               	decfsz	wreg,f,c
  2961  002652  D7F9               	goto	u2485
  2962  002654  0100               	movlb	0	; () banked
  2963  002656  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  2964  002658  6EC9               	movwf	4041,c	;volatile
  2965                           
  2966                           ; BSR set to: 0
  2967  00265A  0012               	return		;funcret
  2968  00265C                     __end_of_SPI32_SendFrame:
  2969                           	opt stack 0
  2970                           tosu	equ	0xFFF
  2971                           tosh	equ	0xFFE
  2972                           tosl	equ	0xFFD
  2973                           pclath	equ	0xFFA
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1h	equ	0xFE2
  2984                           fsr1l	equ	0xFE1
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _GetNextFrame *****************
  2993 ;; Defined at:
  2994 ;;		line 258 in file "SPI32_ControlService.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  4    0[BANK0 ] unsigned long 
  3001 ;; Registers used:
  3002 ;;		fsr2l, fsr2h
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3008 ;;      Params:         0       4       0       0
  3009 ;;      Locals:         0       0       0       0
  3010 ;;      Temps:          0       0       0       0
  3011 ;;      Totals:         0       4       0       0
  3012 ;;Total ram usage:        4 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    7
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_RunSPI32ControlService
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text10
  3023  002A18                     __ptext10:
  3024                           	opt stack 0
  3025  002A18                     _GetNextFrame:
  3026                           	opt stack 21
  3027                           
  3028                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;incstack = 0
  3032  002A18  C0D4  FFD9         	movff	_FramePointer,fsr2l
  3033  002A1C  C0D5  FFDA         	movff	_FramePointer+1,fsr2h
  3034  002A20  CFDE F060          	movff	postinc2,?_GetNextFrame
  3035  002A24  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3036  002A28  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3037  002A2C  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3038  002A30  0012               	return	
  3039  002A32                     __end_of_GetNextFrame:
  3040                           	opt stack 0
  3041                           tosu	equ	0xFFF
  3042                           tosh	equ	0xFFE
  3043                           tosl	equ	0xFFD
  3044                           pclath	equ	0xFFA
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           postinc0	equ	0xFEE
  3052                           wreg	equ	0xFE8
  3053                           postdec1	equ	0xFE5
  3054                           fsr1h	equ	0xFE2
  3055                           fsr1l	equ	0xFE1
  3056                           indf2	equ	0xFDF
  3057                           postinc2	equ	0xFDE
  3058                           postdec2	equ	0xFDD
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _StopPattern *****************
  3064 ;; Defined at:
  3065 ;;		line 271 in file "Pattern_ControlService.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3079 ;;      Params:         0       0       0       0
  3080 ;;      Locals:         0       0       0       0
  3081 ;;      Temps:          0       0       0       0
  3082 ;;      Totals:         0       0       0       0
  3083 ;;Total ram usage:        0 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:   13
  3086 ;; This function calls:
  3087 ;;		_DotStar_Show
  3088 ;;		_ES_Timer_StopTimer
  3089 ;;		_PatternOff
  3090 ;;		_ResetPattern
  3091 ;; This function is called by:
  3092 ;;		_RunPatternControlService
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text11
  3097  0029C4                     __ptext11:
  3098                           	opt stack 0
  3099  0029C4                     _StopPattern:
  3100                           	opt stack 15
  3101                           
  3102                           ;Pattern_ControlService.c: 273: ES_Timer_StopTimer(0);
  3103                           
  3104                           ;incstack = 0
  3105  0029C4  0E00               	movlw	0
  3106  0029C6  EC57  F013         	call	_ES_Timer_StopTimer
  3107                           
  3108                           ;Pattern_ControlService.c: 275: DotStar_Show(PatternOff());
  3109  0029CA  ECC7  F013         	call	_PatternOff	;wreg free
  3110  0029CE  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3111  0029D2  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3112  0029D6  EC12  F00A         	call	_DotStar_Show	;wreg free
  3113                           
  3114                           ;Pattern_ControlService.c: 277: ResetPattern();
  3115  0029DA  EC19  F015         	call	_ResetPattern	;wreg free
  3116  0029DE  0012               	return		;funcret
  3117  0029E0                     __end_of_StopPattern:
  3118                           	opt stack 0
  3119                           tosu	equ	0xFFF
  3120                           tosh	equ	0xFFE
  3121                           tosl	equ	0xFFD
  3122                           pclath	equ	0xFFA
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           postdec1	equ	0xFE5
  3132                           fsr1h	equ	0xFE2
  3133                           fsr1l	equ	0xFE1
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _ResetPattern *****************
  3142 ;; Defined at:
  3143 ;;		line 72 in file "Pattern_PtrnGenerator.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3157 ;;      Params:         0       0       0       0
  3158 ;;      Locals:         0       0       0       0
  3159 ;;      Temps:          0       0       0       0
  3160 ;;      Totals:         0       0       0       0
  3161 ;;Total ram usage:        0 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    7
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_StopPattern
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text12
  3172  002A32                     __ptext12:
  3173                           	opt stack 0
  3174  002A32                     _ResetPattern:
  3175                           	opt stack 20
  3176                           
  3177                           ;Pattern_PtrnGenerator.c: 74: PatternStepCounter = 0;
  3178                           
  3179                           ;incstack = 0
  3180  002A32  0E00               	movlw	0
  3181  002A34  0100               	movlb	0	; () banked
  3182  002A36  6FEF               	movwf	_PatternStepCounter& (0+255),b
  3183                           
  3184                           ;Pattern_PtrnGenerator.c: 76: CycleCounter = 0;
  3185  002A38  0E00               	movlw	0
  3186  002A3A  0100               	movlb	0	; () banked
  3187  002A3C  6FE6               	movwf	_CycleCounter& (0+255),b
  3188  002A3E  0E00               	movlw	0
  3189  002A40  6FE7               	movwf	(_CycleCounter+1)& (0+255),b
  3190  002A42  0E00               	movlw	0
  3191  002A44  6FE8               	movwf	(_CycleCounter+2)& (0+255),b
  3192  002A46  0E00               	movlw	0
  3193  002A48  6FE9               	movwf	(_CycleCounter+3)& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196  002A4A  0012               	return		;funcret
  3197  002A4C                     __end_of_ResetPattern:
  3198                           	opt stack 0
  3199                           tosu	equ	0xFFF
  3200                           tosh	equ	0xFFE
  3201                           tosl	equ	0xFFD
  3202                           pclath	equ	0xFFA
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _PatternOff *****************
  3222 ;; Defined at:
  3223 ;;		line 79 in file "Pattern_PtrnGenerator.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  i               1    2[BANK0 ] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  2    0[BANK0 ] PTR unsigned int 
  3230 ;; Registers used:
  3231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3237 ;;      Params:         0       2       0       0
  3238 ;;      Locals:         0       1       0       0
  3239 ;;      Temps:          0       0       0       0
  3240 ;;      Totals:         0       3       0       0
  3241 ;;Total ram usage:        3 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    7
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_StopPattern
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text13
  3252  00278E                     __ptext13:
  3253                           	opt stack 0
  3254  00278E                     _PatternOff:
  3255                           	opt stack 20
  3256                           
  3257                           ;Pattern_PtrnGenerator.c: 80: for(uint8_t i=0;i<76;i++){
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;incstack = 0
  3261  00278E  0E00               	movlw	0
  3262  002790  0100               	movlb	0	; () banked
  3263  002792  6F62               	movwf	PatternOff@i& (0+255),b
  3264  002794                     l3274:
  3265                           
  3266                           ; BSR set to: 0
  3267  002794  0E4B               	movlw	75
  3268  002796  0100               	movlb	0	; () banked
  3269  002798  6562               	cpfsgt	PatternOff@i& (0+255),b
  3270  00279A  D001               	goto	l3278
  3271  00279C  D010               	goto	l3284
  3272  00279E                     l3278:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;Pattern_PtrnGenerator.c: 81: PixelPattern[i] = 0x0;
  3276  00279E  0100               	movlb	0	; () banked
  3277  0027A0  5162               	movf	PatternOff@i& (0+255),w,b
  3278  0027A2  0D02               	mullw	2
  3279  0027A4  0E20               	movlw	low _PixelPattern
  3280  0027A6  24F3               	addwf	prodl,w,c
  3281  0027A8  6ED9               	movwf	fsr2l,c
  3282  0027AA  0E01               	movlw	high _PixelPattern
  3283  0027AC  20F4               	addwfc	prodh,w,c
  3284  0027AE  6EDA               	movwf	fsr2h,c
  3285  0027B0  0E00               	movlw	0
  3286  0027B2  6EDE               	movwf	postinc2,c
  3287  0027B4  0E00               	movlw	0
  3288  0027B6  6EDD               	movwf	postdec2,c
  3289                           
  3290                           ; BSR set to: 0
  3291  0027B8  0100               	movlb	0	; () banked
  3292  0027BA  2B62               	incf	PatternOff@i& (0+255),f,b
  3293  0027BC  D7EB               	goto	l3274
  3294  0027BE                     l3284:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;Pattern_PtrnGenerator.c: 82: }
  3298                           ;Pattern_PtrnGenerator.c: 83: return PixelPattern;
  3299  0027BE  0E20               	movlw	low _PixelPattern
  3300  0027C0  0100               	movlb	0	; () banked
  3301  0027C2  6F60               	movwf	?_PatternOff& (0+255),b
  3302  0027C4  0E01               	movlw	high _PixelPattern
  3303  0027C6  0100               	movlb	0	; () banked
  3304  0027C8  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3305  0027CA  0012               	return	
  3306  0027CC                     __end_of_PatternOff:
  3307                           	opt stack 0
  3308                           tosu	equ	0xFFF
  3309                           tosh	equ	0xFFE
  3310                           tosl	equ	0xFFD
  3311                           pclath	equ	0xFFA
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           prodh	equ	0xFF4
  3317                           prodl	equ	0xFF3
  3318                           postinc0	equ	0xFEE
  3319                           wreg	equ	0xFE8
  3320                           postdec1	equ	0xFE5
  3321                           fsr1h	equ	0xFE2
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _ShowPattern *****************
  3331 ;; Defined at:
  3332 ;;		line 263 in file "Pattern_ControlService.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       0       0       0
  3347 ;;      Locals:         0       0       0       0
  3348 ;;      Temps:          0       0       0       0
  3349 ;;      Totals:         0       0       0       0
  3350 ;;Total ram usage:        0 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:   13
  3353 ;; This function calls:
  3354 ;;		_DotStar_Show
  3355 ;;		_ES_Timer_InitTimer
  3356 ;;		_UpdatePattern
  3357 ;; This function is called by:
  3358 ;;		_RunPatternControlService
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text14
  3363  002986                     __ptext14:
  3364                           	opt stack 0
  3365  002986                     _ShowPattern:
  3366                           	opt stack 15
  3367                           
  3368                           ;Pattern_ControlService.c: 265: ES_Timer_InitTimer(0,PatternConfigs[3]);
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;incstack = 0
  3372  002986  C05C  F060         	movff	_PatternConfigs+3,ES_Timer_InitTimer@NewTime
  3373  00298A  0100               	movlb	0	; () banked
  3374  00298C  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3375  00298E  0E00               	movlw	0
  3376  002990  EC70  F011         	call	_ES_Timer_InitTimer
  3377                           
  3378                           ;Pattern_ControlService.c: 267: DotStar_Show(UpdatePattern());
  3379  002994  EC09  F007         	call	_UpdatePattern	;wreg free
  3380  002998  C090  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3381  00299C  C091  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3382  0029A0  EC12  F00A         	call	_DotStar_Show	;wreg free
  3383  0029A4  0012               	return		;funcret
  3384  0029A6                     __end_of_ShowPattern:
  3385                           	opt stack 0
  3386                           tosu	equ	0xFFF
  3387                           tosh	equ	0xFFE
  3388                           tosl	equ	0xFFD
  3389                           pclath	equ	0xFFA
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           prodh	equ	0xFF4
  3395                           prodl	equ	0xFF3
  3396                           postinc0	equ	0xFEE
  3397                           wreg	equ	0xFE8
  3398                           postdec1	equ	0xFE5
  3399                           fsr1h	equ	0xFE2
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _UpdatePattern *****************
  3409 ;; Defined at:
  3410 ;;		line 86 in file "Pattern_PtrnGenerator.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  i               1   51[BANK0 ] unsigned char 
  3415 ;;  i               1   50[BANK0 ] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2   48[BANK0 ] PTR unsigned int 
  3418 ;; Registers used:
  3419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3425 ;;      Params:         0       2       0       0
  3426 ;;      Locals:         0       2       0       0
  3427 ;;      Temps:          0       0       0       0
  3428 ;;      Totals:         0       4       0       0
  3429 ;;Total ram usage:        4 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    9
  3432 ;; This function calls:
  3433 ;;		_CenterBreathe
  3434 ;;		_FullPulseHold
  3435 ;;		_HueTest
  3436 ;;		_SingleFadedLoop
  3437 ;;		_SingleFocusPulse
  3438 ;; This function is called by:
  3439 ;;		_ShowPattern
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text15
  3444  000E12                     __ptext15:
  3445                           	opt stack 0
  3446  000E12                     _UpdatePattern:
  3447                           	opt stack 18
  3448                           
  3449                           ;Pattern_PtrnGenerator.c: 88: switch(*PatternID){
  3450                           
  3451                           ;incstack = 0
  3452  000E12  D11A               	goto	l3250
  3453  000E14                     l3212:
  3454                           
  3455                           ;Pattern_PtrnGenerator.c: 92: for(uint8_t i=0;i<76;i++){
  3456  000E14  0E00               	movlw	0
  3457  000E16  0100               	movlb	0	; () banked
  3458  000E18  6F92               	movwf	UpdatePattern@i& (0+255),b
  3459  000E1A                     l3214:
  3460                           
  3461                           ; BSR set to: 0
  3462  000E1A  0E4B               	movlw	75
  3463  000E1C  0100               	movlb	0	; () banked
  3464  000E1E  6592               	cpfsgt	UpdatePattern@i& (0+255),b
  3465  000E20  D001               	goto	l3218
  3466  000E22  D12D               	goto	l3252
  3467  000E24                     l3218:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;Pattern_PtrnGenerator.c: 93: PixelPattern[i] = 0x0;
  3471  000E24  0100               	movlb	0	; () banked
  3472  000E26  5192               	movf	UpdatePattern@i& (0+255),w,b
  3473  000E28  0D02               	mullw	2
  3474  000E2A  0E20               	movlw	low _PixelPattern
  3475  000E2C  24F3               	addwf	prodl,w,c
  3476  000E2E  6ED9               	movwf	fsr2l,c
  3477  000E30  0E01               	movlw	high _PixelPattern
  3478  000E32  20F4               	addwfc	prodh,w,c
  3479  000E34  6EDA               	movwf	fsr2h,c
  3480  000E36  0E00               	movlw	0
  3481  000E38  6EDE               	movwf	postinc2,c
  3482  000E3A  0E00               	movlw	0
  3483  000E3C  6EDD               	movwf	postdec2,c
  3484                           
  3485                           ; BSR set to: 0
  3486  000E3E  0100               	movlb	0	; () banked
  3487  000E40  2B92               	incf	UpdatePattern@i& (0+255),f,b
  3488  000E42  D7EB               	goto	l3214
  3489  000E44                     l3224:
  3490                           
  3491                           ;Pattern_PtrnGenerator.c: 99: WelcomePattern(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3492  000E44  0E20               	movlw	low _PixelPattern
  3493  000E46  0100               	movlb	0	; () banked
  3494  000E48  6F60               	movwf	FullPulseHold@ptrnPointer& (0+255),b
  3495  000E4A  0E01               	movlw	high _PixelPattern
  3496  000E4C  0100               	movlb	0	; () banked
  3497  000E4E  6F61               	movwf	(FullPulseHold@ptrnPointer+1)& (0+255),b
  3498  000E50  0EEF               	movlw	low _PatternStepCounter
  3499  000E52  0100               	movlb	0	; () banked
  3500  000E54  6F62               	movwf	FullPulseHold@ptrnStepCounter& (0+255),b
  3501  000E56  0E00               	movlw	high _PatternStepCounter
  3502  000E58  0100               	movlb	0	; () banked
  3503  000E5A  6F63               	movwf	(FullPulseHold@ptrnStepCounter+1)& (0+255),b
  3504  000E5C  0EE6               	movlw	low _CycleCounter
  3505  000E5E  0100               	movlb	0	; () banked
  3506  000E60  6F64               	movwf	FullPulseHold@cycleCounter& (0+255),b
  3507  000E62  0E00               	movlw	high _CycleCounter
  3508  000E64  0100               	movlb	0	; () banked
  3509  000E66  6F65               	movwf	(FullPulseHold@cycleCounter+1)& (0+255),b
  3510  000E68  0E87               	movlw	135
  3511  000E6A  0100               	movlb	0	; () banked
  3512  000E6C  6F66               	movwf	FullPulseHold@base_hue& (0+255),b
  3513  000E6E  0E04               	movlw	4
  3514  000E70  0100               	movlb	0	; () banked
  3515  000E72  6F67               	movwf	FullPulseHold@base_sat& (0+255),b
  3516  000E74  0E00               	movlw	0
  3517  000E76  0100               	movlb	0	; () banked
  3518  000E78  6F68               	movwf	FullPulseHold@15697& (0+255),b
  3519  000E7A  0E00               	movlw	0
  3520  000E7C  0100               	movlb	0	; () banked
  3521  000E7E  6F69               	movwf	(FullPulseHold@15697+1)& (0+255),b
  3522  000E80  D801               	call	u2218
  3523  000E82  D0FD               	goto	l3252
  3524  000E84                     u2218:
  3525  000E84  0005               	push	
  3526  000E86  0100               	movlb	0	; () banked
  3527  000E88  6EFA               	movwf	pclath,c
  3528  000E8A  51FA               	movf	_WelcomePattern& (0+255),w,b
  3529  000E8C  6EFD               	movwf	tosl,c
  3530  000E8E  51FB               	movf	(_WelcomePattern+1)& (0+255),w,b
  3531  000E90  D0BE               	goto	L11
  3532  000E92                     l3226:
  3533                           
  3534                           ;Pattern_PtrnGenerator.c: 103: IdlePattern(PixelPattern, &PatternStepCounter, &CycleCoun
      +                          ter, 135, 4, 0);
  3535  000E92  0E20               	movlw	low _PixelPattern
  3536  000E94  0100               	movlb	0	; () banked
  3537  000E96  6F68               	movwf	CenterBreathe@ptrnPointer& (0+255),b
  3538  000E98  0E01               	movlw	high _PixelPattern
  3539  000E9A  0100               	movlb	0	; () banked
  3540  000E9C  6F69               	movwf	(CenterBreathe@ptrnPointer+1)& (0+255),b
  3541  000E9E  0EEF               	movlw	low _PatternStepCounter
  3542  000EA0  0100               	movlb	0	; () banked
  3543  000EA2  6F6A               	movwf	CenterBreathe@ptrnStepCounter& (0+255),b
  3544  000EA4  0E00               	movlw	high _PatternStepCounter
  3545  000EA6  0100               	movlb	0	; () banked
  3546  000EA8  6F6B               	movwf	(CenterBreathe@ptrnStepCounter+1)& (0+255),b
  3547  000EAA  0EE6               	movlw	low _CycleCounter
  3548  000EAC  0100               	movlb	0	; () banked
  3549  000EAE  6F6C               	movwf	CenterBreathe@cycleCounter& (0+255),b
  3550  000EB0  0E00               	movlw	high _CycleCounter
  3551  000EB2  0100               	movlb	0	; () banked
  3552  000EB4  6F6D               	movwf	(CenterBreathe@cycleCounter+1)& (0+255),b
  3553  000EB6  0E87               	movlw	135
  3554  000EB8  0100               	movlb	0	; () banked
  3555  000EBA  6F6E               	movwf	CenterBreathe@base_hue& (0+255),b
  3556  000EBC  0E04               	movlw	4
  3557  000EBE  0100               	movlb	0	; () banked
  3558  000EC0  6F6F               	movwf	CenterBreathe@base_sat& (0+255),b
  3559  000EC2  0E00               	movlw	0
  3560  000EC4  0100               	movlb	0	; () banked
  3561  000EC6  6F70               	movwf	CenterBreathe@15707& (0+255),b
  3562  000EC8  0E00               	movlw	0
  3563  000ECA  0100               	movlb	0	; () banked
  3564  000ECC  6F71               	movwf	(CenterBreathe@15707+1)& (0+255),b
  3565  000ECE  D801               	call	u2228
  3566  000ED0  D0D6               	goto	l3252
  3567  000ED2                     u2228:
  3568  000ED2  0005               	push	
  3569  000ED4  0100               	movlb	0	; () banked
  3570  000ED6  6EFA               	movwf	pclath,c
  3571  000ED8  51F0               	movf	_IdlePattern& (0+255),w,b
  3572  000EDA  6EFD               	movwf	tosl,c
  3573  000EDC  51F1               	movf	(_IdlePattern+1)& (0+255),w,b
  3574  000EDE  D097               	goto	L11
  3575  000EE0                     l3228:
  3576                           
  3577                           ;Pattern_PtrnGenerator.c: 107: ThinkingPattern(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, 32, 0x0F, 0);
  3578  000EE0  0E20               	movlw	low _PixelPattern
  3579  000EE2  0100               	movlb	0	; () banked
  3580  000EE4  6F68               	movwf	SingleFadedLoop@ptrnPointer& (0+255),b
  3581  000EE6  0E01               	movlw	high _PixelPattern
  3582  000EE8  0100               	movlb	0	; () banked
  3583  000EEA  6F69               	movwf	(SingleFadedLoop@ptrnPointer+1)& (0+255),b
  3584  000EEC  0EEF               	movlw	low _PatternStepCounter
  3585  000EEE  0100               	movlb	0	; () banked
  3586  000EF0  6F6A               	movwf	SingleFadedLoop@ptrnStepCounter& (0+255),b
  3587  000EF2  0E00               	movlw	high _PatternStepCounter
  3588  000EF4  0100               	movlb	0	; () banked
  3589  000EF6  6F6B               	movwf	(SingleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3590  000EF8  0EE6               	movlw	low _CycleCounter
  3591  000EFA  0100               	movlb	0	; () banked
  3592  000EFC  6F6C               	movwf	SingleFadedLoop@cycleCounter& (0+255),b
  3593  000EFE  0E00               	movlw	high _CycleCounter
  3594  000F00  0100               	movlb	0	; () banked
  3595  000F02  6F6D               	movwf	(SingleFadedLoop@cycleCounter+1)& (0+255),b
  3596  000F04  0E20               	movlw	32
  3597  000F06  0100               	movlb	0	; () banked
  3598  000F08  6F6E               	movwf	SingleFadedLoop@base_hue& (0+255),b
  3599  000F0A  0E0F               	movlw	15
  3600  000F0C  0100               	movlb	0	; () banked
  3601  000F0E  6F6F               	movwf	SingleFadedLoop@base_sat& (0+255),b
  3602  000F10  0E00               	movlw	0
  3603  000F12  0100               	movlb	0	; () banked
  3604  000F14  6F70               	movwf	SingleFadedLoop@15720& (0+255),b
  3605  000F16  0E00               	movlw	0
  3606  000F18  0100               	movlb	0	; () banked
  3607  000F1A  6F71               	movwf	(SingleFadedLoop@15720+1)& (0+255),b
  3608  000F1C  D801               	call	u2238
  3609  000F1E  D0AF               	goto	l3252
  3610  000F20                     u2238:
  3611  000F20  0005               	push	
  3612  000F22  0100               	movlb	0	; () banked
  3613  000F24  6EFA               	movwf	pclath,c
  3614  000F26  51F8               	movf	_ThinkingPattern& (0+255),w,b
  3615  000F28  6EFD               	movwf	tosl,c
  3616  000F2A  51F9               	movf	(_ThinkingPattern+1)& (0+255),w,b
  3617  000F2C  D070               	goto	L11
  3618  000F2E                     l3230:
  3619                           
  3620                           ;Pattern_PtrnGenerator.c: 111: SpeakingPattern(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, 170, 0x0F, ListeningFocus);
  3621  000F2E  0E20               	movlw	low _PixelPattern
  3622  000F30  0100               	movlb	0	; () banked
  3623  000F32  6F68               	movwf	SingleFocusPulse@ptrnPointer& (0+255),b
  3624  000F34  0E01               	movlw	high _PixelPattern
  3625  000F36  0100               	movlb	0	; () banked
  3626  000F38  6F69               	movwf	(SingleFocusPulse@ptrnPointer+1)& (0+255),b
  3627  000F3A  0EEF               	movlw	low _PatternStepCounter
  3628  000F3C  0100               	movlb	0	; () banked
  3629  000F3E  6F6A               	movwf	SingleFocusPulse@ptrnStepCounter& (0+255),b
  3630  000F40  0E00               	movlw	high _PatternStepCounter
  3631  000F42  0100               	movlb	0	; () banked
  3632  000F44  6F6B               	movwf	(SingleFocusPulse@ptrnStepCounter+1)& (0+255),b
  3633  000F46  0EE6               	movlw	low _CycleCounter
  3634  000F48  0100               	movlb	0	; () banked
  3635  000F4A  6F6C               	movwf	SingleFocusPulse@cycleCounter& (0+255),b
  3636  000F4C  0E00               	movlw	high _CycleCounter
  3637  000F4E  0100               	movlb	0	; () banked
  3638  000F50  6F6D               	movwf	(SingleFocusPulse@cycleCounter+1)& (0+255),b
  3639  000F52  0EAA               	movlw	170
  3640  000F54  0100               	movlb	0	; () banked
  3641  000F56  6F6E               	movwf	SingleFocusPulse@base_hue& (0+255),b
  3642  000F58  0E0F               	movlw	15
  3643  000F5A  0100               	movlb	0	; () banked
  3644  000F5C  6F6F               	movwf	SingleFocusPulse@base_sat& (0+255),b
  3645  000F5E  C0D6  F070         	movff	_ListeningFocus,SingleFocusPulse@focus
  3646  000F62  C0D7  F071         	movff	_ListeningFocus+1,SingleFocusPulse@focus+1
  3647  000F66  D801               	call	u2248
  3648  000F68  D08A               	goto	l3252
  3649  000F6A                     u2248:
  3650  000F6A  0005               	push	
  3651  000F6C  0100               	movlb	0	; () banked
  3652  000F6E  6EFA               	movwf	pclath,c
  3653  000F70  51F4               	movf	_SpeakingPattern& (0+255),w,b
  3654  000F72  6EFD               	movwf	tosl,c
  3655  000F74  51F5               	movf	(_SpeakingPattern+1)& (0+255),w,b
  3656  000F76  D04B               	goto	L11
  3657  000F78                     l3232:
  3658                           
  3659                           ;Pattern_PtrnGenerator.c: 115: ListeningPattern(PixelPattern, &PatternStepCounter, &Cycl
      +                          eCounter, 85, 0x0F, ListeningFocus);
  3660  000F78  0E20               	movlw	low _PixelPattern
  3661  000F7A  0100               	movlb	0	; () banked
  3662  000F7C  6F68               	movwf	SingleFocusPulse@ptrnPointer& (0+255),b
  3663  000F7E  0E01               	movlw	high _PixelPattern
  3664  000F80  0100               	movlb	0	; () banked
  3665  000F82  6F69               	movwf	(SingleFocusPulse@ptrnPointer+1)& (0+255),b
  3666  000F84  0EEF               	movlw	low _PatternStepCounter
  3667  000F86  0100               	movlb	0	; () banked
  3668  000F88  6F6A               	movwf	SingleFocusPulse@ptrnStepCounter& (0+255),b
  3669  000F8A  0E00               	movlw	high _PatternStepCounter
  3670  000F8C  0100               	movlb	0	; () banked
  3671  000F8E  6F6B               	movwf	(SingleFocusPulse@ptrnStepCounter+1)& (0+255),b
  3672  000F90  0EE6               	movlw	low _CycleCounter
  3673  000F92  0100               	movlb	0	; () banked
  3674  000F94  6F6C               	movwf	SingleFocusPulse@cycleCounter& (0+255),b
  3675  000F96  0E00               	movlw	high _CycleCounter
  3676  000F98  0100               	movlb	0	; () banked
  3677  000F9A  6F6D               	movwf	(SingleFocusPulse@cycleCounter+1)& (0+255),b
  3678  000F9C  0E55               	movlw	85
  3679  000F9E  0100               	movlb	0	; () banked
  3680  000FA0  6F6E               	movwf	SingleFocusPulse@base_hue& (0+255),b
  3681  000FA2  0E0F               	movlw	15
  3682  000FA4  0100               	movlb	0	; () banked
  3683  000FA6  6F6F               	movwf	SingleFocusPulse@base_sat& (0+255),b
  3684  000FA8  C0D6  F070         	movff	_ListeningFocus,SingleFocusPulse@focus
  3685  000FAC  C0D7  F071         	movff	_ListeningFocus+1,SingleFocusPulse@focus+1
  3686  000FB0  D801               	call	u2258
  3687  000FB2  D065               	goto	l3252
  3688  000FB4                     u2258:
  3689  000FB4  0005               	push	
  3690  000FB6  0100               	movlb	0	; () banked
  3691  000FB8  6EFA               	movwf	pclath,c
  3692  000FBA  51F2               	movf	_ListeningPattern& (0+255),w,b
  3693  000FBC  6EFD               	movwf	tosl,c
  3694  000FBE  51F3               	movf	(_ListeningPattern+1)& (0+255),w,b
  3695  000FC0  D026               	goto	L11
  3696  000FC2                     l3234:
  3697                           
  3698                           ;Pattern_PtrnGenerator.c: 120: TestPattern(PixelPattern, &PatternStepCounter, &CycleCoun
      +                          ter, 0, 0x0F, 0);
  3699  000FC2  0E20               	movlw	low _PixelPattern
  3700  000FC4  0100               	movlb	0	; () banked
  3701  000FC6  6F73               	movwf	HueTest@ptrnPointer& (0+255),b
  3702  000FC8  0E01               	movlw	high _PixelPattern
  3703  000FCA  0100               	movlb	0	; () banked
  3704  000FCC  6F74               	movwf	(HueTest@ptrnPointer+1)& (0+255),b
  3705  000FCE  0EEF               	movlw	low _PatternStepCounter
  3706  000FD0  0100               	movlb	0	; () banked
  3707  000FD2  6F75               	movwf	HueTest@ptrnStepCounter& (0+255),b
  3708  000FD4  0E00               	movlw	high _PatternStepCounter
  3709  000FD6  0100               	movlb	0	; () banked
  3710  000FD8  6F76               	movwf	(HueTest@ptrnStepCounter+1)& (0+255),b
  3711  000FDA  0EE6               	movlw	low _CycleCounter
  3712  000FDC  0100               	movlb	0	; () banked
  3713  000FDE  6F77               	movwf	HueTest@cycleCounter& (0+255),b
  3714  000FE0  0E00               	movlw	high _CycleCounter
  3715  000FE2  0100               	movlb	0	; () banked
  3716  000FE4  6F78               	movwf	(HueTest@cycleCounter+1)& (0+255),b
  3717  000FE6  0E00               	movlw	0
  3718  000FE8  0100               	movlb	0	; () banked
  3719  000FEA  6F79               	movwf	HueTest@base_hue& (0+255),b
  3720  000FEC  0E0F               	movlw	15
  3721  000FEE  0100               	movlb	0	; () banked
  3722  000FF0  6F7A               	movwf	HueTest@base_sat& (0+255),b
  3723  000FF2  0E00               	movlw	0
  3724  000FF4  0100               	movlb	0	; () banked
  3725  000FF6  6F7B               	movwf	HueTest@15689& (0+255),b
  3726  000FF8  0E00               	movlw	0
  3727  000FFA  0100               	movlb	0	; () banked
  3728  000FFC  6F7C               	movwf	(HueTest@15689+1)& (0+255),b
  3729  000FFE  D801               	call	u2268
  3730  001000  D03E               	goto	l3252
  3731  001002                     u2268:
  3732  001002  0005               	push	
  3733  001004  0100               	movlb	0	; () banked
  3734  001006  6EFA               	movwf	pclath,c
  3735  001008  51F6               	movf	_TestPattern& (0+255),w,b
  3736  00100A  6EFD               	movwf	tosl,c
  3737  00100C  51F7               	movf	(_TestPattern+1)& (0+255),w,b
  3738  00100E                     L11:
  3739  00100E  6EFE               	movwf	tosh,c
  3740  001010  50F8               	movf	tblptru,w,c
  3741  001012  6EFF               	movwf	tosu,c
  3742  001014  50FA               	movf	pclath,w,c
  3743  001016  0012               	return		;indir
  3744  001018                     l3236:
  3745                           
  3746                           ;Pattern_PtrnGenerator.c: 125: for(uint8_t i=0;i<76;i++){
  3747  001018  0E00               	movlw	0
  3748  00101A  0100               	movlb	0	; () banked
  3749  00101C  6F93               	movwf	UpdatePattern@i_1364& (0+255),b
  3750  00101E                     l3238:
  3751                           
  3752                           ; BSR set to: 0
  3753  00101E  0E4B               	movlw	75
  3754  001020  0100               	movlb	0	; () banked
  3755  001022  6593               	cpfsgt	UpdatePattern@i_1364& (0+255),b
  3756  001024  D001               	goto	l3242
  3757  001026  D02B               	goto	l3252
  3758  001028                     l3242:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;Pattern_PtrnGenerator.c: 126: PixelPattern[i] = 0x0;
  3762  001028  0100               	movlb	0	; () banked
  3763  00102A  5193               	movf	UpdatePattern@i_1364& (0+255),w,b
  3764  00102C  0D02               	mullw	2
  3765  00102E  0E20               	movlw	low _PixelPattern
  3766  001030  24F3               	addwf	prodl,w,c
  3767  001032  6ED9               	movwf	fsr2l,c
  3768  001034  0E01               	movlw	high _PixelPattern
  3769  001036  20F4               	addwfc	prodh,w,c
  3770  001038  6EDA               	movwf	fsr2h,c
  3771  00103A  0E00               	movlw	0
  3772  00103C  6EDE               	movwf	postinc2,c
  3773  00103E  0E00               	movlw	0
  3774  001040  6EDD               	movwf	postdec2,c
  3775                           
  3776                           ; BSR set to: 0
  3777  001042  0100               	movlb	0	; () banked
  3778  001044  2B93               	incf	UpdatePattern@i_1364& (0+255),f,b
  3779  001046  D7EB               	goto	l3238
  3780  001048                     l3250:
  3781  001048  C0D8  FFD9         	movff	_PatternID,fsr2l
  3782  00104C  C0D9  FFDA         	movff	_PatternID+1,fsr2h
  3783  001050  50DF               	movf	indf2,w,c
  3784                           
  3785                           ; Switch size 1, requested type "space"
  3786                           ; Number of cases is 7, Range of values is 0 to 255
  3787                           ; switch strategies available:
  3788                           ; Name         Instructions Cycles
  3789                           ; simple_byte           22    12 (average)
  3790                           ;	Chosen strategy is simple_byte
  3791  001052  0A00               	xorlw	0	; case 0
  3792  001054  B4D8               	btfsc	status,2,c
  3793  001056  D6DE               	goto	l3212
  3794  001058  0A01               	xorlw	1	; case 1
  3795  00105A  B4D8               	btfsc	status,2,c
  3796  00105C  D6F3               	goto	l3224
  3797  00105E  0A03               	xorlw	3	; case 2
  3798  001060  B4D8               	btfsc	status,2,c
  3799  001062  D717               	goto	l3226
  3800  001064  0A01               	xorlw	1	; case 3
  3801  001066  B4D8               	btfsc	status,2,c
  3802  001068  D787               	goto	l3232
  3803  00106A  0A07               	xorlw	7	; case 4
  3804  00106C  B4D8               	btfsc	status,2,c
  3805  00106E  D738               	goto	l3228
  3806  001070  0A01               	xorlw	1	; case 5
  3807  001072  B4D8               	btfsc	status,2,c
  3808  001074  D75C               	goto	l3230
  3809  001076  0AFA               	xorlw	250	; case 255
  3810  001078  B4D8               	btfsc	status,2,c
  3811  00107A  D7A3               	goto	l3234
  3812  00107C  D7CD               	goto	l3236
  3813  00107E                     l3252:
  3814                           
  3815                           ;Pattern_PtrnGenerator.c: 131: return PixelPattern;
  3816  00107E  0E20               	movlw	low _PixelPattern
  3817  001080  0100               	movlb	0	; () banked
  3818  001082  6F90               	movwf	?_UpdatePattern& (0+255),b
  3819  001084  0E01               	movlw	high _PixelPattern
  3820  001086  0100               	movlb	0	; () banked
  3821  001088  6F91               	movwf	(?_UpdatePattern+1)& (0+255),b
  3822  00108A  0012               	return	
  3823  00108C                     __end_of_UpdatePattern:
  3824                           	opt stack 0
  3825                           tosu	equ	0xFFF
  3826                           tosh	equ	0xFFE
  3827                           tosl	equ	0xFFD
  3828                           pclath	equ	0xFFA
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           postinc0	equ	0xFEE
  3836                           wreg	equ	0xFE8
  3837                           postdec1	equ	0xFE5
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _SingleFocusPulse *****************
  3848 ;; Defined at:
  3849 ;;		line 150 in file "Pattern_PtrnFunctions.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  3852 ;;		 -> PixelPattern(152), 
  3853 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  3854 ;;		 -> PatternStepCounter(1), 
  3855 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  3856 ;;		 -> CycleCounter(4), 
  3857 ;;  base_hue        1   14[BANK0 ] unsigned char 
  3858 ;;  base_sat        1   15[BANK0 ] unsigned char 
  3859 ;;  focus           2   16[BANK0 ] PTR void 
  3860 ;;		 -> NULL(0), PatternConfigs(4), 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  i               1   32[BANK0 ] unsigned char 
  3863 ;;  head            1   31[BANK0 ] unsigned char 
  3864 ;;  x               1   30[BANK0 ] unsigned char 
  3865 ;;  val             1   29[BANK0 ] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      void 
  3868 ;; Registers used:
  3869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3875 ;;      Params:         0      10       0       0
  3876 ;;      Locals:         0       8       0       0
  3877 ;;      Temps:          0       7       0       0
  3878 ;;      Totals:         0      25       0       0
  3879 ;;Total ram usage:       25 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    8
  3882 ;; This function calls:
  3883 ;;		___awdiv
  3884 ;;		___awmod
  3885 ;; This function is called by:
  3886 ;;		_UpdatePattern
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text16
  3891  00108C                     __ptext16:
  3892                           	opt stack 0
  3893  00108C                     _SingleFocusPulse:
  3894                           	opt stack 18
  3895                           
  3896                           ;Pattern_PtrnFunctions.c: 151: uint8_t val, x, head;
  3897                           ;Pattern_PtrnFunctions.c: 152: head = *(uint8_t*)focus;
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;incstack = 0
  3901  00108C  C070  FFD9         	movff	SingleFocusPulse@focus,fsr2l
  3902  001090  C071  FFDA         	movff	SingleFocusPulse@focus+1,fsr2h
  3903  001094  50DF               	movf	indf2,w,c
  3904  001096  0100               	movlb	0	; () banked
  3905  001098  6F7F               	movwf	SingleFocusPulse@head& (0+255),b
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;Pattern_PtrnFunctions.c: 154: for(uint8_t i=0;i<76;i++){
  3909  00109A  0E00               	movlw	0
  3910  00109C  0100               	movlb	0	; () banked
  3911  00109E  6F80               	movwf	SingleFocusPulse@i& (0+255),b
  3912  0010A0                     l3116:
  3913                           
  3914                           ; BSR set to: 0
  3915  0010A0  0E4B               	movlw	75
  3916  0010A2  0100               	movlb	0	; () banked
  3917  0010A4  6580               	cpfsgt	SingleFocusPulse@i& (0+255),b
  3918  0010A6  D001               	goto	l3120
  3919  0010A8  D0EA               	goto	l3142
  3920  0010AA                     l3120:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;Pattern_PtrnFunctions.c: 156: x = ((((76+i-head)%76) < ((76+head)%76)) ? ((76+i-head)%7
      +                          6) : ((76+head)%76));
  3924  0010AA  0100               	movlb	0	; () banked
  3925  0010AC  517F               	movf	SingleFocusPulse@head& (0+255),w,b
  3926  0010AE  0100               	movlb	0	; () banked
  3927  0010B0  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  3928  0010B2  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  3929  0010B4  0100               	movlb	0	; () banked
  3930  0010B6  1F72               	comf	??_SingleFocusPulse& (0+255),f,b
  3931  0010B8  1F73               	comf	(??_SingleFocusPulse+1)& (0+255),f,b
  3932  0010BA  4B72               	infsnz	??_SingleFocusPulse& (0+255),f,b
  3933  0010BC  2B73               	incf	(??_SingleFocusPulse+1)& (0+255),f,b
  3934  0010BE  0100               	movlb	0	; () banked
  3935  0010C0  5180               	movf	SingleFocusPulse@i& (0+255),w,b
  3936  0010C2  0100               	movlb	0	; () banked
  3937  0010C4  6F74               	movwf	(??_SingleFocusPulse+2)& (0+255),b
  3938  0010C6  6B75               	clrf	(??_SingleFocusPulse+3)& (0+255),b
  3939  0010C8  0100               	movlb	0	; () banked
  3940  0010CA  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  3941  0010CC  0100               	movlb	0	; () banked
  3942  0010CE  2774               	addwf	(??_SingleFocusPulse+2)& (0+255),f,b
  3943  0010D0  0100               	movlb	0	; () banked
  3944  0010D2  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  3945  0010D4  0100               	movlb	0	; () banked
  3946  0010D6  2375               	addwfc	(??_SingleFocusPulse+3)& (0+255),f,b
  3947  0010D8  0E4C               	movlw	76
  3948  0010DA  0100               	movlb	0	; () banked
  3949  0010DC  2574               	addwf	(??_SingleFocusPulse+2)& (0+255),w,b
  3950  0010DE  0100               	movlb	0	; () banked
  3951  0010E0  6F60               	movwf	___awmod@dividend& (0+255),b
  3952  0010E2  0E00               	movlw	0
  3953  0010E4  0100               	movlb	0	; () banked
  3954  0010E6  2175               	addwfc	(??_SingleFocusPulse+3)& (0+255),w,b
  3955  0010E8  0100               	movlb	0	; () banked
  3956  0010EA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  3957  0010EC  0E00               	movlw	0
  3958  0010EE  0100               	movlb	0	; () banked
  3959  0010F0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3960  0010F2  0E4C               	movlw	76
  3961  0010F4  6F62               	movwf	___awmod@divisor& (0+255),b
  3962  0010F6  EC54  F010         	call	___awmod	;wreg free
  3963  0010FA  C060  F076         	movff	?___awmod,??_SingleFocusPulse+4
  3964  0010FE  C061  F077         	movff	?___awmod+1,??_SingleFocusPulse+5
  3965  001102  0E4C               	movlw	76
  3966  001104  0100               	movlb	0	; () banked
  3967  001106  257F               	addwf	SingleFocusPulse@head& (0+255),w,b
  3968  001108  0100               	movlb	0	; () banked
  3969  00110A  6F60               	movwf	___awmod@dividend& (0+255),b
  3970  00110C  0100               	movlb	0	; () banked
  3971  00110E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3972  001110  0E00               	movlw	0
  3973  001112  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3974  001114  0E00               	movlw	0
  3975  001116  0100               	movlb	0	; () banked
  3976  001118  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3977  00111A  0E4C               	movlw	76
  3978  00111C  6F62               	movwf	___awmod@divisor& (0+255),b
  3979  00111E  EC54  F010         	call	___awmod	;wreg free
  3980  001122  0100               	movlb	0	; () banked
  3981  001124  5160               	movf	?___awmod& (0+255),w,b
  3982  001126  0100               	movlb	0	; () banked
  3983  001128  5D76               	subwf	(??_SingleFocusPulse+4)& (0+255),w,b
  3984  00112A  0100               	movlb	0	; () banked
  3985  00112C  5177               	movf	(??_SingleFocusPulse+5)& (0+255),w,b
  3986  00112E  0A80               	xorlw	128
  3987  001130  0100               	movlb	0	; () banked
  3988  001132  6F78               	movwf	(??_SingleFocusPulse+6)& (0+255),b
  3989  001134  0100               	movlb	0	; () banked
  3990  001136  5161               	movf	(?___awmod+1)& (0+255),w,b
  3991  001138  0A80               	xorlw	128
  3992  00113A  0100               	movlb	0	; () banked
  3993  00113C  5978               	subwfb	(??_SingleFocusPulse+6)& (0+255),w,b
  3994  00113E  A0D8               	btfss	status,0,c
  3995  001140  D011               	goto	l3124
  3996                           
  3997                           ; BSR set to: 0
  3998  001142  0E4C               	movlw	76
  3999  001144  0100               	movlb	0	; () banked
  4000  001146  257F               	addwf	SingleFocusPulse@head& (0+255),w,b
  4001  001148  0100               	movlb	0	; () banked
  4002  00114A  6F60               	movwf	___awmod@dividend& (0+255),b
  4003  00114C  0100               	movlb	0	; () banked
  4004  00114E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4005  001150  0E00               	movlw	0
  4006  001152  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4007  001154  0E00               	movlw	0
  4008  001156  0100               	movlb	0	; () banked
  4009  001158  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4010  00115A  0E4C               	movlw	76
  4011  00115C  6F62               	movwf	___awmod@divisor& (0+255),b
  4012  00115E  EC54  F010         	call	___awmod	;wreg free
  4013  001162  D028               	goto	L12
  4014  001164                     l3124:
  4015  001164  0100               	movlb	0	; () banked
  4016  001166  517F               	movf	SingleFocusPulse@head& (0+255),w,b
  4017  001168  0100               	movlb	0	; () banked
  4018  00116A  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4019  00116C  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4020  00116E  0100               	movlb	0	; () banked
  4021  001170  1F72               	comf	??_SingleFocusPulse& (0+255),f,b
  4022  001172  1F73               	comf	(??_SingleFocusPulse+1)& (0+255),f,b
  4023  001174  4B72               	infsnz	??_SingleFocusPulse& (0+255),f,b
  4024  001176  2B73               	incf	(??_SingleFocusPulse+1)& (0+255),f,b
  4025  001178  0100               	movlb	0	; () banked
  4026  00117A  5180               	movf	SingleFocusPulse@i& (0+255),w,b
  4027  00117C  0100               	movlb	0	; () banked
  4028  00117E  6F74               	movwf	(??_SingleFocusPulse+2)& (0+255),b
  4029  001180  6B75               	clrf	(??_SingleFocusPulse+3)& (0+255),b
  4030  001182  0100               	movlb	0	; () banked
  4031  001184  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4032  001186  0100               	movlb	0	; () banked
  4033  001188  2774               	addwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4034  00118A  0100               	movlb	0	; () banked
  4035  00118C  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4036  00118E  0100               	movlb	0	; () banked
  4037  001190  2375               	addwfc	(??_SingleFocusPulse+3)& (0+255),f,b
  4038  001192  0E4C               	movlw	76
  4039  001194  0100               	movlb	0	; () banked
  4040  001196  2574               	addwf	(??_SingleFocusPulse+2)& (0+255),w,b
  4041  001198  0100               	movlb	0	; () banked
  4042  00119A  6F60               	movwf	___awmod@dividend& (0+255),b
  4043  00119C  0E00               	movlw	0
  4044  00119E  0100               	movlb	0	; () banked
  4045  0011A0  2175               	addwfc	(??_SingleFocusPulse+3)& (0+255),w,b
  4046  0011A2  0100               	movlb	0	; () banked
  4047  0011A4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4048  0011A6  0E00               	movlw	0
  4049  0011A8  0100               	movlb	0	; () banked
  4050  0011AA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4051  0011AC  0E4C               	movlw	76
  4052  0011AE  6F62               	movwf	___awmod@divisor& (0+255),b
  4053  0011B0  EC54  F010         	call	___awmod	;wreg free
  4054  0011B4                     L12:
  4055  0011B4  C060  F079         	movff	?___awmod,_SingleFocusPulse$1275
  4056  0011B8  C061  F07A         	movff	?___awmod+1,_SingleFocusPulse$1275+1
  4057  0011BC  C079  F07E         	movff	_SingleFocusPulse$1275,SingleFocusPulse@x
  4058                           
  4059                           ;Pattern_PtrnFunctions.c: 157: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4060  0011C0  0E04               	movlw	4
  4061  0011C2  0100               	movlb	0	; () banked
  4062  0011C4  657E               	cpfsgt	SingleFocusPulse@x& (0+255),b
  4063  0011C6  D006               	goto	l3132
  4064                           
  4065                           ; BSR set to: 0
  4066  0011C8  0E00               	movlw	0
  4067  0011CA  0100               	movlb	0	; () banked
  4068  0011CC  6F7C               	movwf	(_SingleFocusPulse$1276+1)& (0+255),b
  4069  0011CE  0E00               	movlw	0
  4070  0011D0  6F7B               	movwf	_SingleFocusPulse$1276& (0+255),b
  4071  0011D2  D01F               	goto	l3134
  4072  0011D4                     l3132:
  4073                           
  4074                           ; BSR set to: 0
  4075  0011D4  0100               	movlb	0	; () banked
  4076  0011D6  517E               	movf	SingleFocusPulse@x& (0+255),w,b
  4077  0011D8  0D0F               	mullw	15
  4078  0011DA  CFF3 F060          	movff	prodl,___awdiv@dividend
  4079  0011DE  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4080  0011E2  0E00               	movlw	0
  4081  0011E4  0100               	movlb	0	; () banked
  4082  0011E6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4083  0011E8  0E05               	movlw	5
  4084  0011EA  6F62               	movwf	___awdiv@divisor& (0+255),b
  4085  0011EC  ECF2  F00E         	call	___awdiv	;wreg free
  4086  0011F0  0100               	movlb	0	; () banked
  4087  0011F2  1F60               	comf	?___awdiv& (0+255),f,b
  4088  0011F4  0100               	movlb	0	; () banked
  4089  0011F6  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4090  0011F8  0100               	movlb	0	; () banked
  4091  0011FA  4B60               	infsnz	?___awdiv& (0+255),f,b
  4092  0011FC  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4093  0011FE  0E0F               	movlw	15
  4094  001200  0100               	movlb	0	; () banked
  4095  001202  2560               	addwf	?___awdiv& (0+255),w,b
  4096  001204  0100               	movlb	0	; () banked
  4097  001206  6F7B               	movwf	_SingleFocusPulse$1276& (0+255),b
  4098  001208  0E00               	movlw	0
  4099  00120A  0100               	movlb	0	; () banked
  4100  00120C  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4101  00120E  0100               	movlb	0	; () banked
  4102  001210  6F7C               	movwf	(_SingleFocusPulse$1276+1)& (0+255),b
  4103  001212                     l3134:
  4104                           
  4105                           ; BSR set to: 0
  4106  001212  C07B  F07D         	movff	_SingleFocusPulse$1276,SingleFocusPulse@val
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;Pattern_PtrnFunctions.c: 158: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4110  001216  0100               	movlb	0	; () banked
  4111  001218  516F               	movf	SingleFocusPulse@base_sat& (0+255),w,b
  4112  00121A  0100               	movlb	0	; () banked
  4113  00121C  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4114  00121E  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4115  001220  0100               	movlb	0	; () banked
  4116  001222  3B72               	swapf	??_SingleFocusPulse& (0+255),f,b
  4117  001224  3B73               	swapf	(??_SingleFocusPulse+1)& (0+255),f,b
  4118  001226  0EF0               	movlw	240
  4119  001228  1773               	andwf	(??_SingleFocusPulse+1)& (0+255),f,b
  4120  00122A  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4121  00122C  0B0F               	andlw	15
  4122  00122E  1373               	iorwf	(??_SingleFocusPulse+1)& (0+255),f,b
  4123  001230  0EF0               	movlw	240
  4124  001232  1772               	andwf	??_SingleFocusPulse& (0+255),f,b
  4125  001234  0100               	movlb	0	; () banked
  4126  001236  516E               	movf	SingleFocusPulse@base_hue& (0+255),w,b
  4127  001238  0100               	movlb	0	; () banked
  4128  00123A  6F75               	movwf	(??_SingleFocusPulse+3)& (0+255),b
  4129  00123C  6B74               	clrf	(??_SingleFocusPulse+2)& (0+255),b
  4130  00123E  0100               	movlb	0	; () banked
  4131  001240  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4132  001242  0100               	movlb	0	; () banked
  4133  001244  1374               	iorwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4134  001246  0100               	movlb	0	; () banked
  4135  001248  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4136  00124A  0100               	movlb	0	; () banked
  4137  00124C  1375               	iorwf	(??_SingleFocusPulse+3)& (0+255),f,b
  4138  00124E  0100               	movlb	0	; () banked
  4139  001250  517D               	movf	SingleFocusPulse@val& (0+255),w,b
  4140  001252  0100               	movlb	0	; () banked
  4141  001254  1374               	iorwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4142  001256  0E00               	movlw	0
  4143  001258  1375               	iorwf	(??_SingleFocusPulse+3)& (0+255),f,b
  4144  00125A  0100               	movlb	0	; () banked
  4145  00125C  5180               	movf	SingleFocusPulse@i& (0+255),w,b
  4146  00125E  0D02               	mullw	2
  4147  001260  50F3               	movf	prodl,w,c
  4148  001262  0100               	movlb	0	; () banked
  4149  001264  2568               	addwf	SingleFocusPulse@ptrnPointer& (0+255),w,b
  4150  001266  6ED9               	movwf	fsr2l,c
  4151  001268  50F4               	movf	prodh,w,c
  4152  00126A  0100               	movlb	0	; () banked
  4153  00126C  2169               	addwfc	(SingleFocusPulse@ptrnPointer+1)& (0+255),w,b
  4154  00126E  6EDA               	movwf	fsr2h,c
  4155  001270  C074  FFDE         	movff	??_SingleFocusPulse+2,postinc2
  4156  001274  C075  FFDD         	movff	??_SingleFocusPulse+3,postdec2
  4157                           
  4158                           ; BSR set to: 0
  4159  001278  0100               	movlb	0	; () banked
  4160  00127A  2B80               	incf	SingleFocusPulse@i& (0+255),f,b
  4161  00127C  D711               	goto	l3116
  4162  00127E                     l3142:
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;Pattern_PtrnFunctions.c: 159: }
  4166                           ;Pattern_PtrnFunctions.c: 160: *ptrnStepCounter = *ptrnStepCounter+50;
  4167  00127E  C06A  FFD9         	movff	SingleFocusPulse@ptrnStepCounter,fsr2l
  4168  001282  C06B  FFDA         	movff	SingleFocusPulse@ptrnStepCounter+1,fsr2h
  4169  001286  50DF               	movf	indf2,w,c
  4170  001288  0F32               	addlw	50
  4171  00128A  C06A  FFD9         	movff	SingleFocusPulse@ptrnStepCounter,fsr2l
  4172  00128E  C06B  FFDA         	movff	SingleFocusPulse@ptrnStepCounter+1,fsr2h
  4173  001292  6EDF               	movwf	indf2,c
  4174                           
  4175                           ; BSR set to: 0
  4176  001294  0012               	return		;funcret
  4177  001296                     __end_of_SingleFocusPulse:
  4178                           	opt stack 0
  4179                           tosu	equ	0xFFF
  4180                           tosh	equ	0xFFE
  4181                           tosl	equ	0xFFD
  4182                           pclath	equ	0xFFA
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           prodh	equ	0xFF4
  4188                           prodl	equ	0xFF3
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _SingleFadedLoop *****************
  4202 ;; Defined at:
  4203 ;;		line 124 in file "Pattern_PtrnFunctions.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4206 ;;		 -> PixelPattern(152), 
  4207 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4208 ;;		 -> PatternStepCounter(1), 
  4209 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4210 ;;		 -> CycleCounter(4), 
  4211 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4212 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4213 ;;  15720           2   16[BANK0 ] PTR void 
  4214 ;;		 -> NULL(0), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  i               1   35[BANK0 ] unsigned char 
  4217 ;;  x               1   34[BANK0 ] unsigned char 
  4218 ;;  val             1   33[BANK0 ] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4228 ;;      Params:         0      10       0       0
  4229 ;;      Locals:         0       7       0       0
  4230 ;;      Temps:          0      11       0       0
  4231 ;;      Totals:         0      28       0       0
  4232 ;;Total ram usage:       28 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    8
  4235 ;; This function calls:
  4236 ;;		___awdiv
  4237 ;;		___awmod
  4238 ;; This function is called by:
  4239 ;;		_UpdatePattern
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text17
  4244  000B78                     __ptext17:
  4245                           	opt stack 0
  4246  000B78                     _SingleFadedLoop:
  4247                           	opt stack 18
  4248                           
  4249                           ;Pattern_PtrnFunctions.c: 125: uint8_t val, x;
  4250                           ;Pattern_PtrnFunctions.c: 127: for(uint8_t i=0;i<76;i++){
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;incstack = 0
  4254  000B78  0E00               	movlw	0
  4255  000B7A  0100               	movlb	0	; () banked
  4256  000B7C  6F83               	movwf	SingleFadedLoop@i& (0+255),b
  4257  000B7E                     l3084:
  4258                           
  4259                           ; BSR set to: 0
  4260  000B7E  0E4B               	movlw	75
  4261  000B80  0100               	movlb	0	; () banked
  4262  000B82  6583               	cpfsgt	SingleFadedLoop@i& (0+255),b
  4263  000B84  D001               	goto	l3088
  4264  000B86  D126               	goto	l3110
  4265  000B88                     l3088:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;Pattern_PtrnFunctions.c: 129: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  4269  000B88  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4270  000B8C  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4271  000B90  50DF               	movf	indf2,w,c
  4272  000B92  0100               	movlb	0	; () banked
  4273  000B94  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4274  000B96  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4275  000B98  0100               	movlb	0	; () banked
  4276  000B9A  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4277  000B9C  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4278  000B9E  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4279  000BA0  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4280  000BA2  0100               	movlb	0	; () banked
  4281  000BA4  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4282  000BA6  0100               	movlb	0	; () banked
  4283  000BA8  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4284  000BAA  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4285  000BAC  0100               	movlb	0	; () banked
  4286  000BAE  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4287  000BB0  0100               	movlb	0	; () banked
  4288  000BB2  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4289  000BB4  0100               	movlb	0	; () banked
  4290  000BB6  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4291  000BB8  0100               	movlb	0	; () banked
  4292  000BBA  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4293  000BBC  0E4C               	movlw	76
  4294  000BBE  0100               	movlb	0	; () banked
  4295  000BC0  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4296  000BC2  0100               	movlb	0	; () banked
  4297  000BC4  6F60               	movwf	___awmod@dividend& (0+255),b
  4298  000BC6  0E00               	movlw	0
  4299  000BC8  0100               	movlb	0	; () banked
  4300  000BCA  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4301  000BCC  0100               	movlb	0	; () banked
  4302  000BCE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4303  000BD0  0E00               	movlw	0
  4304  000BD2  0100               	movlb	0	; () banked
  4305  000BD4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4306  000BD6  0E4C               	movlw	76
  4307  000BD8  6F62               	movwf	___awmod@divisor& (0+255),b
  4308  000BDA  EC54  F010         	call	___awmod	;wreg free
  4309  000BDE  C060  F076         	movff	?___awmod,??_SingleFadedLoop+4
  4310  000BE2  C061  F077         	movff	?___awmod+1,??_SingleFadedLoop+5
  4311  000BE6  0100               	movlb	0	; () banked
  4312  000BE8  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4313  000BEA  0100               	movlb	0	; () banked
  4314  000BEC  6F78               	movwf	(??_SingleFadedLoop+6)& (0+255),b
  4315  000BEE  6B79               	clrf	(??_SingleFadedLoop+7)& (0+255),b
  4316  000BF0  0100               	movlb	0	; () banked
  4317  000BF2  1F78               	comf	(??_SingleFadedLoop+6)& (0+255),f,b
  4318  000BF4  1F79               	comf	(??_SingleFadedLoop+7)& (0+255),f,b
  4319  000BF6  4B78               	infsnz	(??_SingleFadedLoop+6)& (0+255),f,b
  4320  000BF8  2B79               	incf	(??_SingleFadedLoop+7)& (0+255),f,b
  4321  000BFA  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4322  000BFE  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4323  000C02  50DF               	movf	indf2,w,c
  4324  000C04  0100               	movlb	0	; () banked
  4325  000C06  6F7A               	movwf	(??_SingleFadedLoop+8)& (0+255),b
  4326  000C08  6B7B               	clrf	(??_SingleFadedLoop+9)& (0+255),b
  4327  000C0A  0100               	movlb	0	; () banked
  4328  000C0C  5178               	movf	(??_SingleFadedLoop+6)& (0+255),w,b
  4329  000C0E  0100               	movlb	0	; () banked
  4330  000C10  277A               	addwf	(??_SingleFadedLoop+8)& (0+255),f,b
  4331  000C12  0100               	movlb	0	; () banked
  4332  000C14  5179               	movf	(??_SingleFadedLoop+7)& (0+255),w,b
  4333  000C16  0100               	movlb	0	; () banked
  4334  000C18  237B               	addwfc	(??_SingleFadedLoop+9)& (0+255),f,b
  4335  000C1A  0E4C               	movlw	76
  4336  000C1C  0100               	movlb	0	; () banked
  4337  000C1E  257A               	addwf	(??_SingleFadedLoop+8)& (0+255),w,b
  4338  000C20  0100               	movlb	0	; () banked
  4339  000C22  6F60               	movwf	___awmod@dividend& (0+255),b
  4340  000C24  0E00               	movlw	0
  4341  000C26  0100               	movlb	0	; () banked
  4342  000C28  217B               	addwfc	(??_SingleFadedLoop+9)& (0+255),w,b
  4343  000C2A  0100               	movlb	0	; () banked
  4344  000C2C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4345  000C2E  0E00               	movlw	0
  4346  000C30  0100               	movlb	0	; () banked
  4347  000C32  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4348  000C34  0E4C               	movlw	76
  4349  000C36  6F62               	movwf	___awmod@divisor& (0+255),b
  4350  000C38  EC54  F010         	call	___awmod	;wreg free
  4351  000C3C  0100               	movlb	0	; () banked
  4352  000C3E  5160               	movf	?___awmod& (0+255),w,b
  4353  000C40  0100               	movlb	0	; () banked
  4354  000C42  5D76               	subwf	(??_SingleFadedLoop+4)& (0+255),w,b
  4355  000C44  0100               	movlb	0	; () banked
  4356  000C46  5177               	movf	(??_SingleFadedLoop+5)& (0+255),w,b
  4357  000C48  0A80               	xorlw	128
  4358  000C4A  0100               	movlb	0	; () banked
  4359  000C4C  6F7C               	movwf	(??_SingleFadedLoop+10)& (0+255),b
  4360  000C4E  0100               	movlb	0	; () banked
  4361  000C50  5161               	movf	(?___awmod+1)& (0+255),w,b
  4362  000C52  0A80               	xorlw	128
  4363  000C54  0100               	movlb	0	; () banked
  4364  000C56  597C               	subwfb	(??_SingleFadedLoop+10)& (0+255),w,b
  4365  000C58  A0D8               	btfss	status,0,c
  4366  000C5A  D02C               	goto	l3092
  4367                           
  4368                           ; BSR set to: 0
  4369  000C5C  0100               	movlb	0	; () banked
  4370  000C5E  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4371  000C60  0100               	movlb	0	; () banked
  4372  000C62  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4373  000C64  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4374  000C66  0100               	movlb	0	; () banked
  4375  000C68  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4376  000C6A  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4377  000C6C  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4378  000C6E  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4379  000C70  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4380  000C74  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4381  000C78  50DF               	movf	indf2,w,c
  4382  000C7A  0100               	movlb	0	; () banked
  4383  000C7C  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4384  000C7E  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4385  000C80  0100               	movlb	0	; () banked
  4386  000C82  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4387  000C84  0100               	movlb	0	; () banked
  4388  000C86  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4389  000C88  0100               	movlb	0	; () banked
  4390  000C8A  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4391  000C8C  0100               	movlb	0	; () banked
  4392  000C8E  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4393  000C90  0E4C               	movlw	76
  4394  000C92  0100               	movlb	0	; () banked
  4395  000C94  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4396  000C96  0100               	movlb	0	; () banked
  4397  000C98  6F60               	movwf	___awmod@dividend& (0+255),b
  4398  000C9A  0E00               	movlw	0
  4399  000C9C  0100               	movlb	0	; () banked
  4400  000C9E  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4401  000CA0  0100               	movlb	0	; () banked
  4402  000CA2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4403  000CA4  0E00               	movlw	0
  4404  000CA6  0100               	movlb	0	; () banked
  4405  000CA8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4406  000CAA  0E4C               	movlw	76
  4407  000CAC  6F62               	movwf	___awmod@divisor& (0+255),b
  4408  000CAE  EC54  F010         	call	___awmod	;wreg free
  4409  000CB2  D02B               	goto	L13
  4410  000CB4                     l3092:
  4411  000CB4  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4412  000CB8  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4413  000CBC  50DF               	movf	indf2,w,c
  4414  000CBE  0100               	movlb	0	; () banked
  4415  000CC0  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4416  000CC2  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4417  000CC4  0100               	movlb	0	; () banked
  4418  000CC6  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4419  000CC8  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4420  000CCA  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4421  000CCC  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4422  000CCE  0100               	movlb	0	; () banked
  4423  000CD0  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4424  000CD2  0100               	movlb	0	; () banked
  4425  000CD4  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4426  000CD6  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4427  000CD8  0100               	movlb	0	; () banked
  4428  000CDA  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4429  000CDC  0100               	movlb	0	; () banked
  4430  000CDE  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4431  000CE0  0100               	movlb	0	; () banked
  4432  000CE2  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4433  000CE4  0100               	movlb	0	; () banked
  4434  000CE6  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4435  000CE8  0E4C               	movlw	76
  4436  000CEA  0100               	movlb	0	; () banked
  4437  000CEC  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4438  000CEE  0100               	movlb	0	; () banked
  4439  000CF0  6F60               	movwf	___awmod@dividend& (0+255),b
  4440  000CF2  0E00               	movlw	0
  4441  000CF4  0100               	movlb	0	; () banked
  4442  000CF6  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4443  000CF8  0100               	movlb	0	; () banked
  4444  000CFA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4445  000CFC  0E00               	movlw	0
  4446  000CFE  0100               	movlb	0	; () banked
  4447  000D00  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4448  000D02  0E4C               	movlw	76
  4449  000D04  6F62               	movwf	___awmod@divisor& (0+255),b
  4450  000D06  EC54  F010         	call	___awmod	;wreg free
  4451  000D0A                     L13:
  4452  000D0A  C060  F07D         	movff	?___awmod,_SingleFadedLoop$1250
  4453  000D0E  C061  F07E         	movff	?___awmod+1,_SingleFadedLoop$1250+1
  4454  000D12  C07D  F082         	movff	_SingleFadedLoop$1250,SingleFadedLoop@x
  4455                           
  4456                           ;Pattern_PtrnFunctions.c: 130: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4457  000D16  0E04               	movlw	4
  4458  000D18  0100               	movlb	0	; () banked
  4459  000D1A  6582               	cpfsgt	SingleFadedLoop@x& (0+255),b
  4460  000D1C  D006               	goto	l3100
  4461                           
  4462                           ; BSR set to: 0
  4463  000D1E  0E00               	movlw	0
  4464  000D20  0100               	movlb	0	; () banked
  4465  000D22  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4466  000D24  0E00               	movlw	0
  4467  000D26  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4468  000D28  D01F               	goto	l3102
  4469  000D2A                     l3100:
  4470                           
  4471                           ; BSR set to: 0
  4472  000D2A  0100               	movlb	0	; () banked
  4473  000D2C  5182               	movf	SingleFadedLoop@x& (0+255),w,b
  4474  000D2E  0D0F               	mullw	15
  4475  000D30  CFF3 F060          	movff	prodl,___awdiv@dividend
  4476  000D34  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4477  000D38  0E00               	movlw	0
  4478  000D3A  0100               	movlb	0	; () banked
  4479  000D3C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4480  000D3E  0E05               	movlw	5
  4481  000D40  6F62               	movwf	___awdiv@divisor& (0+255),b
  4482  000D42  ECF2  F00E         	call	___awdiv	;wreg free
  4483  000D46  0100               	movlb	0	; () banked
  4484  000D48  1F60               	comf	?___awdiv& (0+255),f,b
  4485  000D4A  0100               	movlb	0	; () banked
  4486  000D4C  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4487  000D4E  0100               	movlb	0	; () banked
  4488  000D50  4B60               	infsnz	?___awdiv& (0+255),f,b
  4489  000D52  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4490  000D54  0E0F               	movlw	15
  4491  000D56  0100               	movlb	0	; () banked
  4492  000D58  2560               	addwf	?___awdiv& (0+255),w,b
  4493  000D5A  0100               	movlb	0	; () banked
  4494  000D5C  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4495  000D5E  0E00               	movlw	0
  4496  000D60  0100               	movlb	0	; () banked
  4497  000D62  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4498  000D64  0100               	movlb	0	; () banked
  4499  000D66  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4500  000D68                     l3102:
  4501                           
  4502                           ; BSR set to: 0
  4503  000D68  C07F  F081         	movff	_SingleFadedLoop$1251,SingleFadedLoop@val
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;Pattern_PtrnFunctions.c: 131: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4507  000D6C  0100               	movlb	0	; () banked
  4508  000D6E  516F               	movf	SingleFadedLoop@base_sat& (0+255),w,b
  4509  000D70  0100               	movlb	0	; () banked
  4510  000D72  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4511  000D74  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4512  000D76  0100               	movlb	0	; () banked
  4513  000D78  3B72               	swapf	??_SingleFadedLoop& (0+255),f,b
  4514  000D7A  3B73               	swapf	(??_SingleFadedLoop+1)& (0+255),f,b
  4515  000D7C  0EF0               	movlw	240
  4516  000D7E  1773               	andwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4517  000D80  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4518  000D82  0B0F               	andlw	15
  4519  000D84  1373               	iorwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4520  000D86  0EF0               	movlw	240
  4521  000D88  1772               	andwf	??_SingleFadedLoop& (0+255),f,b
  4522  000D8A  0100               	movlb	0	; () banked
  4523  000D8C  516E               	movf	SingleFadedLoop@base_hue& (0+255),w,b
  4524  000D8E  0100               	movlb	0	; () banked
  4525  000D90  6F75               	movwf	(??_SingleFadedLoop+3)& (0+255),b
  4526  000D92  6B74               	clrf	(??_SingleFadedLoop+2)& (0+255),b
  4527  000D94  0100               	movlb	0	; () banked
  4528  000D96  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4529  000D98  0100               	movlb	0	; () banked
  4530  000D9A  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4531  000D9C  0100               	movlb	0	; () banked
  4532  000D9E  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4533  000DA0  0100               	movlb	0	; () banked
  4534  000DA2  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4535  000DA4  0100               	movlb	0	; () banked
  4536  000DA6  5181               	movf	SingleFadedLoop@val& (0+255),w,b
  4537  000DA8  0100               	movlb	0	; () banked
  4538  000DAA  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4539  000DAC  0E00               	movlw	0
  4540  000DAE  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4541  000DB0  0100               	movlb	0	; () banked
  4542  000DB2  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4543  000DB4  0D02               	mullw	2
  4544  000DB6  50F3               	movf	prodl,w,c
  4545  000DB8  0100               	movlb	0	; () banked
  4546  000DBA  2568               	addwf	SingleFadedLoop@ptrnPointer& (0+255),w,b
  4547  000DBC  6ED9               	movwf	fsr2l,c
  4548  000DBE  50F4               	movf	prodh,w,c
  4549  000DC0  0100               	movlb	0	; () banked
  4550  000DC2  2169               	addwfc	(SingleFadedLoop@ptrnPointer+1)& (0+255),w,b
  4551  000DC4  6EDA               	movwf	fsr2h,c
  4552  000DC6  C074  FFDE         	movff	??_SingleFadedLoop+2,postinc2
  4553  000DCA  C075  FFDD         	movff	??_SingleFadedLoop+3,postdec2
  4554                           
  4555                           ; BSR set to: 0
  4556  000DCE  0100               	movlb	0	; () banked
  4557  000DD0  2B83               	incf	SingleFadedLoop@i& (0+255),f,b
  4558  000DD2  D6D5               	goto	l3084
  4559  000DD4                     l3110:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;Pattern_PtrnFunctions.c: 132: }
  4563                           ;Pattern_PtrnFunctions.c: 133: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4564  000DD4  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4565  000DD8  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4566  000DDC  50DF               	movf	indf2,w,c
  4567  000DDE  0100               	movlb	0	; () banked
  4568  000DE0  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4569  000DE2  0E01               	movlw	1
  4570  000DE4  0100               	movlb	0	; () banked
  4571  000DE6  2572               	addwf	??_SingleFadedLoop& (0+255),w,b
  4572  000DE8  0100               	movlb	0	; () banked
  4573  000DEA  6F60               	movwf	___awmod@dividend& (0+255),b
  4574  000DEC  0100               	movlb	0	; () banked
  4575  000DEE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4576  000DF0  0E00               	movlw	0
  4577  000DF2  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4578  000DF4  0E00               	movlw	0
  4579  000DF6  0100               	movlb	0	; () banked
  4580  000DF8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4581  000DFA  0E4C               	movlw	76
  4582  000DFC  6F62               	movwf	___awmod@divisor& (0+255),b
  4583  000DFE  EC54  F010         	call	___awmod	;wreg free
  4584  000E02  0100               	movlb	0	; () banked
  4585  000E04  5160               	movf	?___awmod& (0+255),w,b
  4586  000E06  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4587  000E0A  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4588  000E0E  6EDF               	movwf	indf2,c
  4589                           
  4590                           ; BSR set to: 0
  4591  000E10  0012               	return		;funcret
  4592  000E12                     __end_of_SingleFadedLoop:
  4593                           	opt stack 0
  4594                           tosu	equ	0xFFF
  4595                           tosh	equ	0xFFE
  4596                           tosl	equ	0xFFD
  4597                           pclath	equ	0xFFA
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           postdec1	equ	0xFE5
  4607                           fsr1h	equ	0xFE2
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _HueTest *****************
  4617 ;; Defined at:
  4618 ;;		line 29 in file "Pattern_PtrnFunctions.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  ptrnPointer     2   19[BANK0 ] PTR unsigned int 
  4621 ;;		 -> PixelPattern(152), 
  4622 ;;  ptrnStepCoun    2   21[BANK0 ] PTR unsigned char 
  4623 ;;		 -> PatternStepCounter(1), 
  4624 ;;  cycleCounter    2   23[BANK0 ] PTR unsigned long 
  4625 ;;		 -> CycleCounter(4), 
  4626 ;;  base_hue        1   25[BANK0 ] unsigned char 
  4627 ;;  base_sat        1   26[BANK0 ] unsigned char 
  4628 ;;  15689           2   27[BANK0 ] PTR void 
  4629 ;;		 -> NULL(0), 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  i               1   32[BANK0 ] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4641 ;;      Params:         0      10       0       0
  4642 ;;      Locals:         0       1       0       0
  4643 ;;      Temps:          0       3       0       0
  4644 ;;      Totals:         0      14       0       0
  4645 ;;Total ram usage:       14 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    8
  4648 ;; This function calls:
  4649 ;;		___awmod
  4650 ;;		___lwdiv
  4651 ;;		___wmul
  4652 ;; This function is called by:
  4653 ;;		_UpdatePattern
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text18
  4658  001892                     __ptext18:
  4659                           	opt stack 0
  4660  001892                     _HueTest:
  4661                           	opt stack 18
  4662                           
  4663                           ;Pattern_PtrnFunctions.c: 32: for(uint8_t i=0;i<76;i++){
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;incstack = 0
  4667  001892  0E00               	movlw	0
  4668  001894  0100               	movlb	0	; () banked
  4669  001896  6F80               	movwf	HueTest@i& (0+255),b
  4670  001898                     l2974:
  4671                           
  4672                           ; BSR set to: 0
  4673  001898  0E4B               	movlw	75
  4674  00189A  0100               	movlb	0	; () banked
  4675  00189C  6580               	cpfsgt	HueTest@i& (0+255),b
  4676  00189E  D001               	goto	l2978
  4677  0018A0  D058               	goto	l2984
  4678  0018A2                     l2978:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;Pattern_PtrnFunctions.c: 33: ptrnPointer[i] = (((uint16_t)(i+*ptrnStepCounter)*255/76)<
      +                          <8) | (base_sat<<4) | 0x0F;
  4682  0018A2  0100               	movlb	0	; () banked
  4683  0018A4  517A               	movf	HueTest@base_sat& (0+255),w,b
  4684  0018A6  0100               	movlb	0	; () banked
  4685  0018A8  6F7D               	movwf	??_HueTest& (0+255),b
  4686  0018AA  6B7E               	clrf	(??_HueTest+1)& (0+255),b
  4687  0018AC  0100               	movlb	0	; () banked
  4688  0018AE  3B7D               	swapf	??_HueTest& (0+255),f,b
  4689  0018B0  3B7E               	swapf	(??_HueTest+1)& (0+255),f,b
  4690  0018B2  0EF0               	movlw	240
  4691  0018B4  177E               	andwf	(??_HueTest+1)& (0+255),f,b
  4692  0018B6  517D               	movf	??_HueTest& (0+255),w,b
  4693  0018B8  0B0F               	andlw	15
  4694  0018BA  137E               	iorwf	(??_HueTest+1)& (0+255),f,b
  4695  0018BC  0EF0               	movlw	240
  4696  0018BE  177D               	andwf	??_HueTest& (0+255),f,b
  4697  0018C0  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  4698  0018C4  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  4699  0018C8  50DF               	movf	indf2,w,c
  4700  0018CA  0100               	movlb	0	; () banked
  4701  0018CC  6F7F               	movwf	(??_HueTest+2)& (0+255),b
  4702  0018CE  0100               	movlb	0	; () banked
  4703  0018D0  5180               	movf	HueTest@i& (0+255),w,b
  4704  0018D2  0100               	movlb	0	; () banked
  4705  0018D4  257F               	addwf	(??_HueTest+2)& (0+255),w,b
  4706  0018D6  0100               	movlb	0	; () banked
  4707  0018D8  6F66               	movwf	___wmul@multiplier& (0+255),b
  4708  0018DA  0100               	movlb	0	; () banked
  4709  0018DC  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  4710  0018DE  0100               	movlb	0	; () banked
  4711  0018E0  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  4712  0018E2  0E00               	movlw	0
  4713  0018E4  0100               	movlb	0	; () banked
  4714  0018E6  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4715  0018E8  6968               	setf	___wmul@multiplicand& (0+255),b
  4716  0018EA  EC3E  F014         	call	___wmul	;wreg free
  4717  0018EE  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  4718  0018F2  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  4719  0018F6  0E00               	movlw	0
  4720  0018F8  0100               	movlb	0	; () banked
  4721  0018FA  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4722  0018FC  0E4C               	movlw	76
  4723  0018FE  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  4724  001900  ECEE  F011         	call	___lwdiv	;wreg free
  4725  001904  0100               	movlb	0	; () banked
  4726  001906  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  4727  00190A  0100               	movlb	0	; () banked
  4728  00190C  6B6C               	clrf	?___lwdiv& (0+255),b
  4729  00190E  0100               	movlb	0	; () banked
  4730  001910  517D               	movf	??_HueTest& (0+255),w,b
  4731  001912  0100               	movlb	0	; () banked
  4732  001914  136C               	iorwf	?___lwdiv& (0+255),f,b
  4733  001916  0100               	movlb	0	; () banked
  4734  001918  517E               	movf	(??_HueTest+1)& (0+255),w,b
  4735  00191A  0100               	movlb	0	; () banked
  4736  00191C  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  4737  00191E  0E0F               	movlw	15
  4738  001920  0100               	movlb	0	; () banked
  4739  001922  136C               	iorwf	?___lwdiv& (0+255),f,b
  4740  001924  0E00               	movlw	0
  4741  001926  0100               	movlb	0	; () banked
  4742  001928  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  4743  00192A  0100               	movlb	0	; () banked
  4744  00192C  5180               	movf	HueTest@i& (0+255),w,b
  4745  00192E  0D02               	mullw	2
  4746  001930  50F3               	movf	prodl,w,c
  4747  001932  0100               	movlb	0	; () banked
  4748  001934  2573               	addwf	HueTest@ptrnPointer& (0+255),w,b
  4749  001936  6ED9               	movwf	fsr2l,c
  4750  001938  50F4               	movf	prodh,w,c
  4751  00193A  0100               	movlb	0	; () banked
  4752  00193C  2174               	addwfc	(HueTest@ptrnPointer+1)& (0+255),w,b
  4753  00193E  6EDA               	movwf	fsr2h,c
  4754  001940  0100               	movlb	0	; () banked
  4755  001942  C06C  FFDE         	movff	?___lwdiv,postinc2
  4756  001946  0100               	movlb	0	; () banked
  4757  001948  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  4758                           
  4759                           ; BSR set to: 0
  4760  00194C  0100               	movlb	0	; () banked
  4761  00194E  2B80               	incf	HueTest@i& (0+255),f,b
  4762  001950  D7A3               	goto	l2974
  4763  001952                     l2984:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;Pattern_PtrnFunctions.c: 34: }
  4767                           ;Pattern_PtrnFunctions.c: 35: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4768  001952  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  4769  001956  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  4770  00195A  50DF               	movf	indf2,w,c
  4771  00195C  0100               	movlb	0	; () banked
  4772  00195E  6F7D               	movwf	??_HueTest& (0+255),b
  4773  001960  0E01               	movlw	1
  4774  001962  0100               	movlb	0	; () banked
  4775  001964  257D               	addwf	??_HueTest& (0+255),w,b
  4776  001966  0100               	movlb	0	; () banked
  4777  001968  6F60               	movwf	___awmod@dividend& (0+255),b
  4778  00196A  0100               	movlb	0	; () banked
  4779  00196C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4780  00196E  0E00               	movlw	0
  4781  001970  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4782  001972  0E00               	movlw	0
  4783  001974  0100               	movlb	0	; () banked
  4784  001976  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4785  001978  0E4C               	movlw	76
  4786  00197A  6F62               	movwf	___awmod@divisor& (0+255),b
  4787  00197C  EC54  F010         	call	___awmod	;wreg free
  4788  001980  0100               	movlb	0	; () banked
  4789  001982  5160               	movf	?___awmod& (0+255),w,b
  4790  001984  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  4791  001988  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  4792  00198C  6EDF               	movwf	indf2,c
  4793                           
  4794                           ; BSR set to: 0
  4795  00198E  0012               	return		;funcret
  4796  001990                     __end_of_HueTest:
  4797                           	opt stack 0
  4798                           tosu	equ	0xFFF
  4799                           tosh	equ	0xFFE
  4800                           tosl	equ	0xFFD
  4801                           pclath	equ	0xFFA
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           postdec1	equ	0xFE5
  4811                           fsr1h	equ	0xFE2
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _FullPulseHold *****************
  4821 ;; Defined at:
  4822 ;;		line 80 in file "Pattern_PtrnFunctions.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  ptrnPointer     2    0[BANK0 ] PTR unsigned int 
  4825 ;;		 -> PixelPattern(152), 
  4826 ;;  ptrnStepCoun    2    2[BANK0 ] PTR unsigned char 
  4827 ;;		 -> PatternStepCounter(1), 
  4828 ;;  cycleCounter    2    4[BANK0 ] PTR unsigned long 
  4829 ;;		 -> CycleCounter(4), 
  4830 ;;  base_hue        1    6[BANK0 ] unsigned char 
  4831 ;;  base_sat        1    7[BANK0 ] unsigned char 
  4832 ;;  15697           2    8[BANK0 ] PTR void 
  4833 ;;		 -> NULL(0), 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  i               1   21[BANK0 ] unsigned char 
  4836 ;;  val             1   20[BANK0 ] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      void 
  4839 ;; Registers used:
  4840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4846 ;;      Params:         0      10       0       0
  4847 ;;      Locals:         0       4       0       0
  4848 ;;      Temps:          0       8       0       0
  4849 ;;      Totals:         0      22       0       0
  4850 ;;Total ram usage:       22 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    7
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_UpdatePattern
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text19
  4861  001296                     __ptext19:
  4862                           	opt stack 0
  4863  001296                     _FullPulseHold:
  4864                           	opt stack 19
  4865                           
  4866                           ;Pattern_PtrnFunctions.c: 81: static bool rising = 1;
  4867                           ;Pattern_PtrnFunctions.c: 82: uint8_t val;
  4868                           ;Pattern_PtrnFunctions.c: 85: val = (*ptrnStepCounter>>4);
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;incstack = 0
  4872  001296  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  4873  00129A  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  4874  00129E  50DF               	movf	indf2,w,c
  4875  0012A0  0100               	movlb	0	; () banked
  4876  0012A2  6F6A               	movwf	??_FullPulseHold& (0+255),b
  4877  0012A4  0100               	movlb	0	; () banked
  4878  0012A6  396A               	swapf	??_FullPulseHold& (0+255),w,b
  4879  0012A8  0B0F               	andlw	15
  4880  0012AA  0100               	movlb	0	; () banked
  4881  0012AC  6F74               	movwf	FullPulseHold@val& (0+255),b
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;Pattern_PtrnFunctions.c: 86: for(uint8_t i=0;i<76;i++){
  4885  0012AE  0E00               	movlw	0
  4886  0012B0  0100               	movlb	0	; () banked
  4887  0012B2  6F75               	movwf	FullPulseHold@i& (0+255),b
  4888  0012B4                     l2990:
  4889                           
  4890                           ; BSR set to: 0
  4891  0012B4  0E4B               	movlw	75
  4892  0012B6  0100               	movlb	0	; () banked
  4893  0012B8  6575               	cpfsgt	FullPulseHold@i& (0+255),b
  4894  0012BA  D001               	goto	l2994
  4895  0012BC  D034               	goto	l3000
  4896  0012BE                     l2994:
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;Pattern_PtrnFunctions.c: 87: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) |
      +                           val;
  4900  0012BE  0100               	movlb	0	; () banked
  4901  0012C0  5167               	movf	FullPulseHold@base_sat& (0+255),w,b
  4902  0012C2  0100               	movlb	0	; () banked
  4903  0012C4  6F6A               	movwf	??_FullPulseHold& (0+255),b
  4904  0012C6  6B6B               	clrf	(??_FullPulseHold+1)& (0+255),b
  4905  0012C8  0100               	movlb	0	; () banked
  4906  0012CA  3B6A               	swapf	??_FullPulseHold& (0+255),f,b
  4907  0012CC  3B6B               	swapf	(??_FullPulseHold+1)& (0+255),f,b
  4908  0012CE  0EF0               	movlw	240
  4909  0012D0  176B               	andwf	(??_FullPulseHold+1)& (0+255),f,b
  4910  0012D2  516A               	movf	??_FullPulseHold& (0+255),w,b
  4911  0012D4  0B0F               	andlw	15
  4912  0012D6  136B               	iorwf	(??_FullPulseHold+1)& (0+255),f,b
  4913  0012D8  0EF0               	movlw	240
  4914  0012DA  176A               	andwf	??_FullPulseHold& (0+255),f,b
  4915  0012DC  0100               	movlb	0	; () banked
  4916  0012DE  5166               	movf	FullPulseHold@base_hue& (0+255),w,b
  4917  0012E0  0100               	movlb	0	; () banked
  4918  0012E2  6F6D               	movwf	(??_FullPulseHold+3)& (0+255),b
  4919  0012E4  6B6C               	clrf	(??_FullPulseHold+2)& (0+255),b
  4920  0012E6  0100               	movlb	0	; () banked
  4921  0012E8  516A               	movf	??_FullPulseHold& (0+255),w,b
  4922  0012EA  0100               	movlb	0	; () banked
  4923  0012EC  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  4924  0012EE  0100               	movlb	0	; () banked
  4925  0012F0  516B               	movf	(??_FullPulseHold+1)& (0+255),w,b
  4926  0012F2  0100               	movlb	0	; () banked
  4927  0012F4  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  4928  0012F6  0100               	movlb	0	; () banked
  4929  0012F8  5174               	movf	FullPulseHold@val& (0+255),w,b
  4930  0012FA  0100               	movlb	0	; () banked
  4931  0012FC  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  4932  0012FE  0E00               	movlw	0
  4933  001300  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  4934  001302  0100               	movlb	0	; () banked
  4935  001304  5175               	movf	FullPulseHold@i& (0+255),w,b
  4936  001306  0D02               	mullw	2
  4937  001308  50F3               	movf	prodl,w,c
  4938  00130A  0100               	movlb	0	; () banked
  4939  00130C  2560               	addwf	FullPulseHold@ptrnPointer& (0+255),w,b
  4940  00130E  6ED9               	movwf	fsr2l,c
  4941  001310  50F4               	movf	prodh,w,c
  4942  001312  0100               	movlb	0	; () banked
  4943  001314  2161               	addwfc	(FullPulseHold@ptrnPointer+1)& (0+255),w,b
  4944  001316  6EDA               	movwf	fsr2h,c
  4945  001318  C06C  FFDE         	movff	??_FullPulseHold+2,postinc2
  4946  00131C  C06D  FFDD         	movff	??_FullPulseHold+3,postdec2
  4947                           
  4948                           ; BSR set to: 0
  4949  001320  0100               	movlb	0	; () banked
  4950  001322  2B75               	incf	FullPulseHold@i& (0+255),f,b
  4951  001324  D7C7               	goto	l2990
  4952  001326                     l3000:
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;Pattern_PtrnFunctions.c: 88: }
  4956                           ;Pattern_PtrnFunctions.c: 89: if(*ptrnStepCounter == 255){
  4957  001326  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  4958  00132A  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  4959  00132E  28DE               	incf	postinc2,w,c
  4960  001330  A4D8               	btfss	status,2,c
  4961  001332  D02F               	goto	l3006
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;Pattern_PtrnFunctions.c: 90: rising = 0;
  4965  001334  0E00               	movlw	0
  4966  001336  D035               	goto	L14
  4967  001338                     l3004:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;Pattern_PtrnFunctions.c: 91: *cycleCounter = *cycleCounter+1;
  4971  001338  0E01               	movlw	1
  4972  00133A  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  4973  00133E  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  4974  001342  CFDE F06A          	movff	postinc2,??_FullPulseHold
  4975  001346  CFDE F06B          	movff	postinc2,??_FullPulseHold+1
  4976  00134A  CFDE F06C          	movff	postinc2,??_FullPulseHold+2
  4977  00134E  CFDE F06D          	movff	postinc2,??_FullPulseHold+3
  4978  001352  0100               	movlb	0	; () banked
  4979  001354  256A               	addwf	??_FullPulseHold& (0+255),w,b
  4980  001356  0100               	movlb	0	; () banked
  4981  001358  6F6E               	movwf	(??_FullPulseHold+4)& (0+255),b
  4982  00135A  0E00               	movlw	0
  4983  00135C  0100               	movlb	0	; () banked
  4984  00135E  216B               	addwfc	(??_FullPulseHold+1)& (0+255),w,b
  4985  001360  0100               	movlb	0	; () banked
  4986  001362  6F6F               	movwf	(??_FullPulseHold+5)& (0+255),b
  4987  001364  0E00               	movlw	0
  4988  001366  0100               	movlb	0	; () banked
  4989  001368  216C               	addwfc	(??_FullPulseHold+2)& (0+255),w,b
  4990  00136A  0100               	movlb	0	; () banked
  4991  00136C  6F70               	movwf	(??_FullPulseHold+6)& (0+255),b
  4992  00136E  0E00               	movlw	0
  4993  001370  0100               	movlb	0	; () banked
  4994  001372  216D               	addwfc	(??_FullPulseHold+3)& (0+255),w,b
  4995  001374  0100               	movlb	0	; () banked
  4996  001376  6F71               	movwf	(??_FullPulseHold+7)& (0+255),b
  4997  001378  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  4998  00137C  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  4999  001380  C06E  FFDE         	movff	??_FullPulseHold+4,postinc2
  5000  001384  C06F  FFDE         	movff	??_FullPulseHold+5,postinc2
  5001  001388  C070  FFDE         	movff	??_FullPulseHold+6,postinc2
  5002  00138C  C071  FFDE         	movff	??_FullPulseHold+7,postinc2
  5003                           
  5004                           ;Pattern_PtrnFunctions.c: 92: }
  5005  001390  D00B               	goto	l3012
  5006  001392                     l3006:
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;Pattern_PtrnFunctions.c: 93: else if(*ptrnStepCounter == 0){
  5010  001392  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5011  001396  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5012  00139A  50DF               	movf	indf2,w,c
  5013  00139C  A4D8               	btfss	status,2,c
  5014  00139E  D004               	goto	l3012
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;Pattern_PtrnFunctions.c: 94: rising = 1;
  5018  0013A0  0E01               	movlw	1
  5019  0013A2                     L14:
  5020  0013A2  0100               	movlb	0	; () banked
  5021  0013A4  6FFD               	movwf	FullPulseHold@rising& (0+255),b
  5022  0013A6  D7C8               	goto	l3004
  5023  0013A8                     l3012:
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;Pattern_PtrnFunctions.c: 96: }
  5027                           ;Pattern_PtrnFunctions.c: 97: if(*cycleCounter < 4){
  5028  0013A8  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5029  0013AC  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5030  0013B0  0E03               	movlw	3
  5031  0013B2  50DB               	movf	plusw2,w,c
  5032  0013B4  E136               	bnz	l661
  5033  0013B6  0E02               	movlw	2
  5034  0013B8  50DB               	movf	plusw2,w,c
  5035  0013BA  E133               	bnz	l661
  5036  0013BC  0E01               	movlw	1
  5037  0013BE  50DB               	movf	plusw2,w,c
  5038  0013C0  E130               	bnz	l661
  5039  0013C2  0E04               	movlw	4
  5040  0013C4  5CDE               	subwf	postinc2,w,c
  5041  0013C6  B0D8               	btfsc	status,0,c
  5042  0013C8  0012               	return	
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;Pattern_PtrnFunctions.c: 98: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnSt
      +                          epCounter-15);
  5046  0013CA  0100               	movlb	0	; () banked
  5047  0013CC  51FD               	movf	FullPulseHold@rising& (0+255),w,b
  5048  0013CE  0100               	movlb	0	; () banked
  5049  0013D0  A4D8               	btfss	status,2,c
  5050  0013D2  D010               	goto	l3018
  5051                           
  5052                           ; BSR set to: 0
  5053  0013D4  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5054  0013D8  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5055  0013DC  50DF               	movf	indf2,w,c
  5056  0013DE  0100               	movlb	0	; () banked
  5057  0013E0  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5058  0013E2  0EF1               	movlw	241
  5059  0013E4  0100               	movlb	0	; () banked
  5060  0013E6  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5061  0013E8  0100               	movlb	0	; () banked
  5062  0013EA  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  5063  0013EC  0100               	movlb	0	; () banked
  5064  0013EE  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  5065  0013F0  0EFF               	movlw	255
  5066  0013F2  D00F               	goto	L15
  5067  0013F4                     l3018:
  5068                           
  5069                           ; BSR set to: 0
  5070  0013F4  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5071  0013F8  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5072  0013FC  50DF               	movf	indf2,w,c
  5073  0013FE  0100               	movlb	0	; () banked
  5074  001400  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5075  001402  0E0F               	movlw	15
  5076  001404  0100               	movlb	0	; () banked
  5077  001406  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5078  001408  0100               	movlb	0	; () banked
  5079  00140A  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  5080  00140C  0100               	movlb	0	; () banked
  5081  00140E  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  5082  001410  0E00               	movlw	0
  5083  001412                     L15:
  5084  001412  2373               	addwfc	(_FullPulseHold$1218+1)& (0+255),f,b
  5085                           
  5086                           ; BSR set to: 0
  5087                           
  5088                           ; BSR set to: 0
  5089  001414  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5090  001418  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5091  00141C  C072  FFDF         	movff	_FullPulseHold$1218,indf2
  5092  001420  0012               	return	
  5093  001422                     l661:
  5094                           
  5095                           ; BSR set to: 0
  5096  001422  0012               	return		;funcret
  5097  001424                     __end_of_FullPulseHold:
  5098                           	opt stack 0
  5099                           tosu	equ	0xFFF
  5100                           tosh	equ	0xFFE
  5101                           tosl	equ	0xFFD
  5102                           pclath	equ	0xFFA
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _CenterBreathe *****************
  5123 ;; Defined at:
  5124 ;;		line 102 in file "Pattern_PtrnFunctions.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  5127 ;;		 -> PixelPattern(152), 
  5128 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  5129 ;;		 -> PatternStepCounter(1), 
  5130 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  5131 ;;		 -> CycleCounter(4), 
  5132 ;;  base_hue        1   14[BANK0 ] unsigned char 
  5133 ;;  base_sat        1   15[BANK0 ] unsigned char 
  5134 ;;  15707           2   16[BANK0 ] PTR void 
  5135 ;;		 -> NULL(0), 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  i               1   47[BANK0 ] unsigned char 
  5138 ;;  x               1   46[BANK0 ] unsigned char 
  5139 ;;  pulseWidth      1   45[BANK0 ] unsigned char 
  5140 ;;  val             1   44[BANK0 ] unsigned char 
  5141 ;;  fade_thresh     1   43[BANK0 ] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5151 ;;      Params:         0      10       0       0
  5152 ;;      Locals:         0      21       0       0
  5153 ;;      Temps:          0       9       0       0
  5154 ;;      Totals:         0      40       0       0
  5155 ;;Total ram usage:       40 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    8
  5158 ;; This function calls:
  5159 ;;		___awdiv
  5160 ;;		___awmod
  5161 ;; This function is called by:
  5162 ;;		_UpdatePattern
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text20
  5167  000810                     __ptext20:
  5168                           	opt stack 0
  5169  000810                     _CenterBreathe:
  5170                           	opt stack 18
  5171                           
  5172                           ;Pattern_PtrnFunctions.c: 103: static bool rising = 1;
  5173                           ;Pattern_PtrnFunctions.c: 104: uint8_t fade_thresh = 10;
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;incstack = 0
  5177  000810  0E0A               	movlw	10
  5178  000812  0100               	movlb	0	; () banked
  5179  000814  6F8B               	movwf	CenterBreathe@fade_thresh& (0+255),b
  5180                           
  5181                           ;Pattern_PtrnFunctions.c: 105: uint8_t val, x, pulseWidth;
  5182                           ;Pattern_PtrnFunctions.c: 107: pulseWidth = 15;
  5183  000816  0E0F               	movlw	15
  5184  000818  0100               	movlb	0	; () banked
  5185  00081A  6F8D               	movwf	CenterBreathe@pulseWidth& (0+255),b
  5186                           
  5187                           ;Pattern_PtrnFunctions.c: 108: for(uint8_t i=0;i<76;i++){
  5188  00081C  0E00               	movlw	0
  5189  00081E  0100               	movlb	0	; () banked
  5190  000820  6F8F               	movwf	CenterBreathe@i& (0+255),b
  5191  000822                     l3024:
  5192                           
  5193                           ; BSR set to: 0
  5194  000822  0E4B               	movlw	75
  5195  000824  0100               	movlb	0	; () banked
  5196  000826  658F               	cpfsgt	CenterBreathe@i& (0+255),b
  5197  000828  D001               	goto	l3030
  5198  00082A  D167               	goto	l3068
  5199  00082C                     l3030:
  5200                           
  5201                           ; BSR set to: 0
  5202  00082C  0E00               	movlw	0
  5203  00082E  0100               	movlb	0	; () banked
  5204  000830  6F7E               	movwf	(_CenterBreathe$1233+1)& (0+255),b
  5205  000832  0E25               	movlw	37
  5206  000834  6F7D               	movwf	_CenterBreathe$1233& (0+255),b
  5207                           
  5208                           ; BSR set to: 0
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  000836  0E00               	movlw	0
  5214  000838  0100               	movlb	0	; () banked
  5215  00083A  6F80               	movwf	(_CenterBreathe$1234+1)& (0+255),b
  5216  00083C  0E25               	movlw	37
  5217  00083E  6F7F               	movwf	_CenterBreathe$1234& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220                           
  5221                           ; BSR set to: 0
  5222  000840  C07F  F072         	movff	_CenterBreathe$1234,??_CenterBreathe
  5223  000844  C080  F073         	movff	_CenterBreathe$1234+1,??_CenterBreathe+1
  5224  000848  0100               	movlb	0	; () banked
  5225  00084A  1F72               	comf	??_CenterBreathe& (0+255),f,b
  5226  00084C  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  5227  00084E  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  5228  000850  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  5229  000852  0100               	movlb	0	; () banked
  5230  000854  518F               	movf	CenterBreathe@i& (0+255),w,b
  5231  000856  0100               	movlb	0	; () banked
  5232  000858  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  5233  00085A  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  5234  00085C  0100               	movlb	0	; () banked
  5235  00085E  5172               	movf	??_CenterBreathe& (0+255),w,b
  5236  000860  0100               	movlb	0	; () banked
  5237  000862  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  5238  000864  0100               	movlb	0	; () banked
  5239  000866  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  5240  000868  0100               	movlb	0	; () banked
  5241  00086A  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  5242  00086C  0E4C               	movlw	76
  5243  00086E  0100               	movlb	0	; () banked
  5244  000870  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  5245  000872  0100               	movlb	0	; () banked
  5246  000874  6F60               	movwf	___awmod@dividend& (0+255),b
  5247  000876  0E00               	movlw	0
  5248  000878  0100               	movlb	0	; () banked
  5249  00087A  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  5250  00087C  0100               	movlb	0	; () banked
  5251  00087E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5252  000880  0E00               	movlw	0
  5253  000882  0100               	movlb	0	; () banked
  5254  000884  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5255  000886  0E4C               	movlw	76
  5256  000888  6F62               	movwf	___awmod@divisor& (0+255),b
  5257  00088A  EC54  F010         	call	___awmod	;wreg free
  5258  00088E  C060  F076         	movff	?___awmod,??_CenterBreathe+4
  5259  000892  C061  F077         	movff	?___awmod+1,??_CenterBreathe+5
  5260  000896  0100               	movlb	0	; () banked
  5261  000898  518F               	movf	CenterBreathe@i& (0+255),w,b
  5262  00089A  0100               	movlb	0	; () banked
  5263  00089C  6F78               	movwf	(??_CenterBreathe+6)& (0+255),b
  5264  00089E  6B79               	clrf	(??_CenterBreathe+7)& (0+255),b
  5265  0008A0  0100               	movlb	0	; () banked
  5266  0008A2  1F78               	comf	(??_CenterBreathe+6)& (0+255),f,b
  5267  0008A4  1F79               	comf	(??_CenterBreathe+7)& (0+255),f,b
  5268  0008A6  4B78               	infsnz	(??_CenterBreathe+6)& (0+255),f,b
  5269  0008A8  2B79               	incf	(??_CenterBreathe+7)& (0+255),f,b
  5270  0008AA  0100               	movlb	0	; () banked
  5271  0008AC  517D               	movf	_CenterBreathe$1233& (0+255),w,b
  5272  0008AE  0100               	movlb	0	; () banked
  5273  0008B0  2778               	addwf	(??_CenterBreathe+6)& (0+255),f,b
  5274  0008B2  0100               	movlb	0	; () banked
  5275  0008B4  517E               	movf	(_CenterBreathe$1233+1)& (0+255),w,b
  5276  0008B6  0100               	movlb	0	; () banked
  5277  0008B8  2379               	addwfc	(??_CenterBreathe+7)& (0+255),f,b
  5278  0008BA  0E4C               	movlw	76
  5279  0008BC  0100               	movlb	0	; () banked
  5280  0008BE  2578               	addwf	(??_CenterBreathe+6)& (0+255),w,b
  5281  0008C0  0100               	movlb	0	; () banked
  5282  0008C2  6F60               	movwf	___awmod@dividend& (0+255),b
  5283  0008C4  0E00               	movlw	0
  5284  0008C6  0100               	movlb	0	; () banked
  5285  0008C8  2179               	addwfc	(??_CenterBreathe+7)& (0+255),w,b
  5286  0008CA  0100               	movlb	0	; () banked
  5287  0008CC  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5288  0008CE  0E00               	movlw	0
  5289  0008D0  0100               	movlb	0	; () banked
  5290  0008D2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5291  0008D4  0E4C               	movlw	76
  5292  0008D6  6F62               	movwf	___awmod@divisor& (0+255),b
  5293  0008D8  EC54  F010         	call	___awmod	;wreg free
  5294  0008DC  0100               	movlb	0	; () banked
  5295  0008DE  5160               	movf	?___awmod& (0+255),w,b
  5296  0008E0  0100               	movlb	0	; () banked
  5297  0008E2  5D76               	subwf	(??_CenterBreathe+4)& (0+255),w,b
  5298  0008E4  0100               	movlb	0	; () banked
  5299  0008E6  5177               	movf	(??_CenterBreathe+5)& (0+255),w,b
  5300  0008E8  0A80               	xorlw	128
  5301  0008EA  0100               	movlb	0	; () banked
  5302  0008EC  6F7A               	movwf	(??_CenterBreathe+8)& (0+255),b
  5303  0008EE  0100               	movlb	0	; () banked
  5304  0008F0  5161               	movf	(?___awmod+1)& (0+255),w,b
  5305  0008F2  0A80               	xorlw	128
  5306  0008F4  0100               	movlb	0	; () banked
  5307  0008F6  597A               	subwfb	(??_CenterBreathe+8)& (0+255),w,b
  5308  0008F8  A0D8               	btfss	status,0,c
  5309  0008FA  D029               	goto	l3044
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314                           
  5315                           ; BSR set to: 0
  5316  0008FC  0E00               	movlw	0
  5317  0008FE  0100               	movlb	0	; () banked
  5318  000900  6F82               	movwf	(_CenterBreathe$1235+1)& (0+255),b
  5319  000902  0E25               	movlw	37
  5320  000904  6F81               	movwf	_CenterBreathe$1235& (0+255),b
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  000906  0100               	movlb	0	; () banked
  5326  000908  518F               	movf	CenterBreathe@i& (0+255),w,b
  5327  00090A  0100               	movlb	0	; () banked
  5328  00090C  6F72               	movwf	??_CenterBreathe& (0+255),b
  5329  00090E  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  5330  000910  0100               	movlb	0	; () banked
  5331  000912  1F72               	comf	??_CenterBreathe& (0+255),f,b
  5332  000914  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  5333  000916  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  5334  000918  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  5335  00091A  0100               	movlb	0	; () banked
  5336  00091C  5181               	movf	_CenterBreathe$1235& (0+255),w,b
  5337  00091E  0100               	movlb	0	; () banked
  5338  000920  2772               	addwf	??_CenterBreathe& (0+255),f,b
  5339  000922  0100               	movlb	0	; () banked
  5340  000924  5182               	movf	(_CenterBreathe$1235+1)& (0+255),w,b
  5341  000926  0100               	movlb	0	; () banked
  5342  000928  2373               	addwfc	(??_CenterBreathe+1)& (0+255),f,b
  5343  00092A  0E4C               	movlw	76
  5344  00092C  0100               	movlb	0	; () banked
  5345  00092E  2572               	addwf	??_CenterBreathe& (0+255),w,b
  5346  000930  0100               	movlb	0	; () banked
  5347  000932  6F60               	movwf	___awmod@dividend& (0+255),b
  5348  000934  0E00               	movlw	0
  5349  000936  0100               	movlb	0	; () banked
  5350  000938  2173               	addwfc	(??_CenterBreathe+1)& (0+255),w,b
  5351  00093A  0100               	movlb	0	; () banked
  5352  00093C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5353  00093E  0E00               	movlw	0
  5354  000940  0100               	movlb	0	; () banked
  5355  000942  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5356  000944  0E4C               	movlw	76
  5357  000946  6F62               	movwf	___awmod@divisor& (0+255),b
  5358  000948  EC54  F010         	call	___awmod	;wreg free
  5359  00094C  D02C               	goto	L16
  5360  00094E                     l3044:
  5361                           
  5362                           ; BSR set to: 0
  5363  00094E  0E00               	movlw	0
  5364  000950  0100               	movlb	0	; () banked
  5365  000952  6F84               	movwf	(_CenterBreathe$1236+1)& (0+255),b
  5366  000954  0E25               	movlw	37
  5367  000956  6F83               	movwf	_CenterBreathe$1236& (0+255),b
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  000958  C083  F072         	movff	_CenterBreathe$1236,??_CenterBreathe
  5373  00095C  C084  F073         	movff	_CenterBreathe$1236+1,??_CenterBreathe+1
  5374  000960  0100               	movlb	0	; () banked
  5375  000962  1F72               	comf	??_CenterBreathe& (0+255),f,b
  5376  000964  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  5377  000966  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  5378  000968  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  5379  00096A  0100               	movlb	0	; () banked
  5380  00096C  518F               	movf	CenterBreathe@i& (0+255),w,b
  5381  00096E  0100               	movlb	0	; () banked
  5382  000970  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  5383  000972  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  5384  000974  0100               	movlb	0	; () banked
  5385  000976  5172               	movf	??_CenterBreathe& (0+255),w,b
  5386  000978  0100               	movlb	0	; () banked
  5387  00097A  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  5388  00097C  0100               	movlb	0	; () banked
  5389  00097E  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  5390  000980  0100               	movlb	0	; () banked
  5391  000982  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  5392  000984  0E4C               	movlw	76
  5393  000986  0100               	movlb	0	; () banked
  5394  000988  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  5395  00098A  0100               	movlb	0	; () banked
  5396  00098C  6F60               	movwf	___awmod@dividend& (0+255),b
  5397  00098E  0E00               	movlw	0
  5398  000990  0100               	movlb	0	; () banked
  5399  000992  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  5400  000994  0100               	movlb	0	; () banked
  5401  000996  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5402  000998  0E00               	movlw	0
  5403  00099A  0100               	movlb	0	; () banked
  5404  00099C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5405  00099E  0E4C               	movlw	76
  5406  0009A0  6F62               	movwf	___awmod@divisor& (0+255),b
  5407  0009A2  EC54  F010         	call	___awmod	;wreg free
  5408  0009A6                     L16:
  5409  0009A6  C060  F07B         	movff	?___awmod,_CenterBreathe$1232
  5410  0009AA  C061  F07C         	movff	?___awmod+1,_CenterBreathe$1232+1
  5411  0009AE  C07B  F08E         	movff	_CenterBreathe$1232,CenterBreathe@x
  5412                           
  5413                           ;Pattern_PtrnFunctions.c: 111: val = (x < fade_thresh ? (ptrnPointer[i]>>4) : (x < pulse
      +                          Width ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  5414  0009B2  0100               	movlb	0	; () banked
  5415  0009B4  518B               	movf	CenterBreathe@fade_thresh& (0+255),w,b
  5416  0009B6  0100               	movlb	0	; () banked
  5417  0009B8  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  5418  0009BA  A0D8               	btfss	status,0,c
  5419  0009BC  D04B               	goto	l3060
  5420                           
  5421                           ; BSR set to: 0
  5422  0009BE  0100               	movlb	0	; () banked
  5423  0009C0  518D               	movf	CenterBreathe@pulseWidth& (0+255),w,b
  5424  0009C2  0100               	movlb	0	; () banked
  5425  0009C4  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  5426  0009C6  A0D8               	btfss	status,0,c
  5427  0009C8  D006               	goto	l3056
  5428                           
  5429                           ; BSR set to: 0
  5430  0009CA  0E00               	movlw	0
  5431  0009CC  0100               	movlb	0	; () banked
  5432  0009CE  6F88               	movwf	(_CenterBreathe$1238+1)& (0+255),b
  5433  0009D0  0E00               	movlw	0
  5434  0009D2  6F87               	movwf	_CenterBreathe$1238& (0+255),b
  5435  0009D4  D03A               	goto	l3058
  5436  0009D6                     l3056:
  5437                           
  5438                           ; BSR set to: 0
  5439  0009D6  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5440  0009DA  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5441  0009DE  50DF               	movf	indf2,w,c
  5442  0009E0  0100               	movlb	0	; () banked
  5443  0009E2  6F72               	movwf	??_CenterBreathe& (0+255),b
  5444  0009E4  0100               	movlb	0	; () banked
  5445  0009E6  5172               	movf	??_CenterBreathe& (0+255),w,b
  5446  0009E8  0100               	movlb	0	; () banked
  5447  0009EA  038E               	mulwf	CenterBreathe@x& (0+255),b
  5448  0009EC  CFF3 F060          	movff	prodl,___awdiv@dividend
  5449  0009F0  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5450  0009F4  C08D  F062         	movff	CenterBreathe@pulseWidth,___awdiv@divisor
  5451  0009F8  0100               	movlb	0	; () banked
  5452  0009FA  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5453  0009FC  ECF2  F00E         	call	___awdiv	;wreg free
  5454  000A00  0100               	movlb	0	; () banked
  5455  000A02  1F60               	comf	?___awdiv& (0+255),f,b
  5456  000A04  0100               	movlb	0	; () banked
  5457  000A06  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5458  000A08  0100               	movlb	0	; () banked
  5459  000A0A  4B60               	infsnz	?___awdiv& (0+255),f,b
  5460  000A0C  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5461  000A0E  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5462  000A12  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5463  000A16  50DF               	movf	indf2,w,c
  5464  000A18  0100               	movlb	0	; () banked
  5465  000A1A  6F73               	movwf	(??_CenterBreathe+1)& (0+255),b
  5466  000A1C  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  5467  000A1E  0100               	movlb	0	; () banked
  5468  000A20  5160               	movf	?___awdiv& (0+255),w,b
  5469  000A22  0100               	movlb	0	; () banked
  5470  000A24  2773               	addwf	(??_CenterBreathe+1)& (0+255),f,b
  5471  000A26  0100               	movlb	0	; () banked
  5472  000A28  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5473  000A2A  0100               	movlb	0	; () banked
  5474  000A2C  2374               	addwfc	(??_CenterBreathe+2)& (0+255),f,b
  5475  000A2E  0E04               	movlw	4
  5476  000A30  0100               	movlb	0	; () banked
  5477  000A32  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  5478  000A34                     u1965:
  5479  000A34  0100               	movlb	0	; () banked
  5480  000A36  3574               	rlcf	(??_CenterBreathe+2)& (0+255),w,b
  5481  000A38  3374               	rrcf	(??_CenterBreathe+2)& (0+255),f,b
  5482  000A3A  3373               	rrcf	(??_CenterBreathe+1)& (0+255),f,b
  5483  000A3C  0100               	movlb	0	; () banked
  5484  000A3E  2F75               	decfsz	(??_CenterBreathe+3)& (0+255),f,b
  5485  000A40  D7F9               	goto	u1965
  5486  000A42  C073  F087         	movff	??_CenterBreathe+1,_CenterBreathe$1238
  5487  000A46  C074  F088         	movff	??_CenterBreathe+2,_CenterBreathe$1238+1
  5488  000A4A                     l3058:
  5489                           
  5490                           ; BSR set to: 0
  5491  000A4A  C087  F085         	movff	_CenterBreathe$1238,_CenterBreathe$1237
  5492  000A4E  C088  F086         	movff	_CenterBreathe$1238+1,_CenterBreathe$1237+1
  5493  000A52  D01D               	goto	l3062
  5494  000A54                     l3060:
  5495                           
  5496                           ; BSR set to: 0
  5497  000A54  0100               	movlb	0	; () banked
  5498  000A56  518F               	movf	CenterBreathe@i& (0+255),w,b
  5499  000A58  0D02               	mullw	2
  5500  000A5A  50F3               	movf	prodl,w,c
  5501  000A5C  0100               	movlb	0	; () banked
  5502  000A5E  2568               	addwf	CenterBreathe@ptrnPointer& (0+255),w,b
  5503  000A60  6ED9               	movwf	fsr2l,c
  5504  000A62  50F4               	movf	prodh,w,c
  5505  000A64  0100               	movlb	0	; () banked
  5506  000A66  2169               	addwfc	(CenterBreathe@ptrnPointer+1)& (0+255),w,b
  5507  000A68  6EDA               	movwf	fsr2h,c
  5508  000A6A  CFDE F072          	movff	postinc2,??_CenterBreathe
  5509  000A6E  CFDD F073          	movff	postdec2,??_CenterBreathe+1
  5510  000A72  0E04               	movlw	4
  5511  000A74  0100               	movlb	0	; () banked
  5512  000A76  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  5513  000A78                     u1975:
  5514  000A78  0100               	movlb	0	; () banked
  5515  000A7A  90D8               	bcf	status,0,c
  5516  000A7C  3373               	rrcf	(??_CenterBreathe+1)& (0+255),f,b
  5517  000A7E  3372               	rrcf	??_CenterBreathe& (0+255),f,b
  5518  000A80  0100               	movlb	0	; () banked
  5519  000A82  2F74               	decfsz	(??_CenterBreathe+2)& (0+255),f,b
  5520  000A84  D7F9               	goto	u1975
  5521  000A86  C072  F085         	movff	??_CenterBreathe,_CenterBreathe$1237
  5522  000A8A  C073  F086         	movff	??_CenterBreathe+1,_CenterBreathe$1237+1
  5523  000A8E                     l3062:
  5524                           
  5525                           ; BSR set to: 0
  5526  000A8E  C085  F08C         	movff	_CenterBreathe$1237,CenterBreathe@val
  5527                           
  5528                           ;Pattern_PtrnFunctions.c: 112: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  5529  000A92  0100               	movlb	0	; () banked
  5530  000A94  516F               	movf	CenterBreathe@base_sat& (0+255),w,b
  5531  000A96  0100               	movlb	0	; () banked
  5532  000A98  6F72               	movwf	??_CenterBreathe& (0+255),b
  5533  000A9A  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  5534  000A9C  0100               	movlb	0	; () banked
  5535  000A9E  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  5536  000AA0  3B73               	swapf	(??_CenterBreathe+1)& (0+255),f,b
  5537  000AA2  0EF0               	movlw	240
  5538  000AA4  1773               	andwf	(??_CenterBreathe+1)& (0+255),f,b
  5539  000AA6  5172               	movf	??_CenterBreathe& (0+255),w,b
  5540  000AA8  0B0F               	andlw	15
  5541  000AAA  1373               	iorwf	(??_CenterBreathe+1)& (0+255),f,b
  5542  000AAC  0EF0               	movlw	240
  5543  000AAE  1772               	andwf	??_CenterBreathe& (0+255),f,b
  5544  000AB0  0100               	movlb	0	; () banked
  5545  000AB2  516E               	movf	CenterBreathe@base_hue& (0+255),w,b
  5546  000AB4  0100               	movlb	0	; () banked
  5547  000AB6  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  5548  000AB8  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  5549  000ABA  0100               	movlb	0	; () banked
  5550  000ABC  5172               	movf	??_CenterBreathe& (0+255),w,b
  5551  000ABE  0100               	movlb	0	; () banked
  5552  000AC0  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  5553  000AC2  0100               	movlb	0	; () banked
  5554  000AC4  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  5555  000AC6  0100               	movlb	0	; () banked
  5556  000AC8  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  5557  000ACA  0100               	movlb	0	; () banked
  5558  000ACC  518C               	movf	CenterBreathe@val& (0+255),w,b
  5559  000ACE  0100               	movlb	0	; () banked
  5560  000AD0  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  5561  000AD2  0E00               	movlw	0
  5562  000AD4  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  5563  000AD6  0100               	movlb	0	; () banked
  5564  000AD8  518F               	movf	CenterBreathe@i& (0+255),w,b
  5565  000ADA  0D02               	mullw	2
  5566  000ADC  50F3               	movf	prodl,w,c
  5567  000ADE  0100               	movlb	0	; () banked
  5568  000AE0  2568               	addwf	CenterBreathe@ptrnPointer& (0+255),w,b
  5569  000AE2  6ED9               	movwf	fsr2l,c
  5570  000AE4  50F4               	movf	prodh,w,c
  5571  000AE6  0100               	movlb	0	; () banked
  5572  000AE8  2169               	addwfc	(CenterBreathe@ptrnPointer+1)& (0+255),w,b
  5573  000AEA  6EDA               	movwf	fsr2h,c
  5574  000AEC  C074  FFDE         	movff	??_CenterBreathe+2,postinc2
  5575  000AF0  C075  FFDD         	movff	??_CenterBreathe+3,postdec2
  5576                           
  5577                           ; BSR set to: 0
  5578  000AF4  0100               	movlb	0	; () banked
  5579  000AF6  2B8F               	incf	CenterBreathe@i& (0+255),f,b
  5580  000AF8  D694               	goto	l3024
  5581  000AFA                     l3068:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;Pattern_PtrnFunctions.c: 113: }
  5585                           ;Pattern_PtrnFunctions.c: 114: if(*ptrnStepCounter == 255){
  5586  000AFA  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5587  000AFE  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5588  000B02  28DE               	incf	postinc2,w,c
  5589  000B04  A4D8               	btfss	status,2,c
  5590  000B06  D002               	goto	l3072
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;Pattern_PtrnFunctions.c: 115: rising = 0;
  5594  000B08  0E00               	movlw	0
  5595  000B0A  D008               	goto	L17
  5596  000B0C                     l3072:
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;Pattern_PtrnFunctions.c: 117: else if(*ptrnStepCounter == 0){
  5600  000B0C  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5601  000B10  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5602  000B14  50DF               	movf	indf2,w,c
  5603  000B16  A4D8               	btfss	status,2,c
  5604  000B18  D003               	goto	l697
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;Pattern_PtrnFunctions.c: 118: rising = 1;
  5608  000B1A  0E01               	movlw	1
  5609  000B1C                     L17:
  5610  000B1C  0100               	movlb	0	; () banked
  5611  000B1E  6FFC               	movwf	CenterBreathe@rising& (0+255),b
  5612  000B20                     l697:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;Pattern_PtrnFunctions.c: 119: }
  5616                           ;Pattern_PtrnFunctions.c: 120: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnS
      +                          tepCounter-15);
  5617  000B20  0100               	movlb	0	; () banked
  5618  000B22  51FC               	movf	CenterBreathe@rising& (0+255),w,b
  5619  000B24  0100               	movlb	0	; () banked
  5620  000B26  A4D8               	btfss	status,2,c
  5621  000B28  D010               	goto	l3078
  5622                           
  5623                           ; BSR set to: 0
  5624  000B2A  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5625  000B2E  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5626  000B32  50DF               	movf	indf2,w,c
  5627  000B34  0100               	movlb	0	; () banked
  5628  000B36  6F72               	movwf	??_CenterBreathe& (0+255),b
  5629  000B38  0EF1               	movlw	241
  5630  000B3A  0100               	movlb	0	; () banked
  5631  000B3C  2572               	addwf	??_CenterBreathe& (0+255),w,b
  5632  000B3E  0100               	movlb	0	; () banked
  5633  000B40  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  5634  000B42  0100               	movlb	0	; () banked
  5635  000B44  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  5636  000B46  0EFF               	movlw	255
  5637  000B48  D00F               	goto	L18
  5638  000B4A                     l3078:
  5639                           
  5640                           ; BSR set to: 0
  5641  000B4A  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5642  000B4E  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5643  000B52  50DF               	movf	indf2,w,c
  5644  000B54  0100               	movlb	0	; () banked
  5645  000B56  6F72               	movwf	??_CenterBreathe& (0+255),b
  5646  000B58  0E0F               	movlw	15
  5647  000B5A  0100               	movlb	0	; () banked
  5648  000B5C  2572               	addwf	??_CenterBreathe& (0+255),w,b
  5649  000B5E  0100               	movlb	0	; () banked
  5650  000B60  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  5651  000B62  0100               	movlb	0	; () banked
  5652  000B64  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  5653  000B66  0E00               	movlw	0
  5654  000B68                     L18:
  5655  000B68  238A               	addwfc	(_CenterBreathe$1239+1)& (0+255),f,b
  5656                           
  5657                           ; BSR set to: 0
  5658                           
  5659                           ; BSR set to: 0
  5660  000B6A  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  5661  000B6E  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  5662  000B72  C089  FFDF         	movff	_CenterBreathe$1239,indf2
  5663                           
  5664                           ; BSR set to: 0
  5665  000B76  0012               	return		;funcret
  5666  000B78                     __end_of_CenterBreathe:
  5667                           	opt stack 0
  5668                           tosu	equ	0xFFF
  5669                           tosh	equ	0xFFE
  5670                           tosl	equ	0xFFD
  5671                           pclath	equ	0xFFA
  5672                           tblptru	equ	0xFF8
  5673                           tblptrh	equ	0xFF7
  5674                           tblptrl	equ	0xFF6
  5675                           tablat	equ	0xFF5
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           postdec1	equ	0xFE5
  5681                           fsr1h	equ	0xFE2
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           plusw2	equ	0xFDB
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function ___awdiv *****************
  5692 ;; Defined at:
  5693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  dividend        2    0[BANK0 ] int 
  5696 ;;  divisor         2    2[BANK0 ] int 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  quotient        2    6[BANK0 ] int 
  5699 ;;  sign            1    5[BANK0 ] unsigned char 
  5700 ;;  counter         1    4[BANK0 ] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  2    0[BANK0 ] int 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5710 ;;      Params:         0       4       0       0
  5711 ;;      Locals:         0       4       0       0
  5712 ;;      Temps:          0       0       0       0
  5713 ;;      Totals:         0       8       0       0
  5714 ;;Total ram usage:        8 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    7
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_CenterBreathe
  5721 ;;		_SingleFadedLoop
  5722 ;;		_SingleFocusPulse
  5723 ;;		_DoubleFadedLoop
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text21
  5728  001DE4                     __ptext21:
  5729                           	opt stack 0
  5730  001DE4                     ___awdiv:
  5731                           	opt stack 18
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;incstack = 0
  5735  001DE4  0E00               	movlw	0
  5736  001DE6  0100               	movlb	0	; () banked
  5737  001DE8  6F65               	movwf	___awdiv@sign& (0+255),b
  5738                           
  5739                           ; BSR set to: 0
  5740  001DEA  0100               	movlb	0	; () banked
  5741  001DEC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5742  001DEE  D008               	goto	l2816
  5743                           
  5744                           ; BSR set to: 0
  5745  001DF0  0100               	movlb	0	; () banked
  5746  001DF2  6D62               	negf	___awdiv@divisor& (0+255),b
  5747  001DF4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5748  001DF6  B0D8               	btfsc	status,0,c
  5749  001DF8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5750                           
  5751                           ; BSR set to: 0
  5752  001DFA  0E01               	movlw	1
  5753  001DFC  0100               	movlb	0	; () banked
  5754  001DFE  6F65               	movwf	___awdiv@sign& (0+255),b
  5755  001E00                     l2816:
  5756                           
  5757                           ; BSR set to: 0
  5758  001E00  0100               	movlb	0	; () banked
  5759  001E02  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5760  001E04  D008               	goto	l2822
  5761                           
  5762                           ; BSR set to: 0
  5763  001E06  0100               	movlb	0	; () banked
  5764  001E08  6D60               	negf	___awdiv@dividend& (0+255),b
  5765  001E0A  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5766  001E0C  B0D8               	btfsc	status,0,c
  5767  001E0E  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5768                           
  5769                           ; BSR set to: 0
  5770  001E10  0E01               	movlw	1
  5771  001E12  0100               	movlb	0	; () banked
  5772  001E14  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5773  001E16                     l2822:
  5774                           
  5775                           ; BSR set to: 0
  5776  001E16  0E00               	movlw	0
  5777  001E18  0100               	movlb	0	; () banked
  5778  001E1A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5779  001E1C  0E00               	movlw	0
  5780  001E1E  6F66               	movwf	___awdiv@quotient& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783  001E20  0100               	movlb	0	; () banked
  5784  001E22  5162               	movf	___awdiv@divisor& (0+255),w,b
  5785  001E24  0100               	movlb	0	; () banked
  5786  001E26  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5787  001E28  B4D8               	btfsc	status,2,c
  5788  001E2A  D02C               	goto	l2844
  5789                           
  5790                           ; BSR set to: 0
  5791  001E2C  0E01               	movlw	1
  5792  001E2E  0100               	movlb	0	; () banked
  5793  001E30  6F64               	movwf	___awdiv@counter& (0+255),b
  5794  001E32  D006               	goto	l2830
  5795  001E34                     l2828:
  5796                           
  5797                           ; BSR set to: 0
  5798  001E34  0100               	movlb	0	; () banked
  5799  001E36  90D8               	bcf	status,0,c
  5800  001E38  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5801  001E3A  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5802  001E3C  0100               	movlb	0	; () banked
  5803  001E3E  2B64               	incf	___awdiv@counter& (0+255),f,b
  5804  001E40                     l2830:
  5805                           
  5806                           ; BSR set to: 0
  5807  001E40  0100               	movlb	0	; () banked
  5808  001E42  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5809  001E44  D7F7               	goto	l2828
  5810  001E46                     l2832:
  5811                           
  5812                           ; BSR set to: 0
  5813  001E46  0100               	movlb	0	; () banked
  5814  001E48  90D8               	bcf	status,0,c
  5815  001E4A  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5816  001E4C  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5817                           
  5818                           ; BSR set to: 0
  5819  001E4E  0100               	movlb	0	; () banked
  5820  001E50  5162               	movf	___awdiv@divisor& (0+255),w,b
  5821  001E52  0100               	movlb	0	; () banked
  5822  001E54  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5823  001E56  0100               	movlb	0	; () banked
  5824  001E58  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5825  001E5A  0100               	movlb	0	; () banked
  5826  001E5C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5827  001E5E  A0D8               	btfss	status,0,c
  5828  001E60  D00A               	goto	l2840
  5829                           
  5830                           ; BSR set to: 0
  5831  001E62  0100               	movlb	0	; () banked
  5832  001E64  5162               	movf	___awdiv@divisor& (0+255),w,b
  5833  001E66  0100               	movlb	0	; () banked
  5834  001E68  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5835  001E6A  0100               	movlb	0	; () banked
  5836  001E6C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5837  001E6E  0100               	movlb	0	; () banked
  5838  001E70  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5839                           
  5840                           ; BSR set to: 0
  5841  001E72  0100               	movlb	0	; () banked
  5842  001E74  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5843  001E76                     l2840:
  5844                           
  5845                           ; BSR set to: 0
  5846  001E76  0100               	movlb	0	; () banked
  5847  001E78  90D8               	bcf	status,0,c
  5848  001E7A  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5849  001E7C  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5850                           
  5851                           ; BSR set to: 0
  5852  001E7E  0100               	movlb	0	; () banked
  5853  001E80  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5854  001E82  D7E1               	goto	l2832
  5855  001E84                     l2844:
  5856                           
  5857                           ; BSR set to: 0
  5858  001E84  0100               	movlb	0	; () banked
  5859  001E86  5165               	movf	___awdiv@sign& (0+255),w,b
  5860  001E88  0100               	movlb	0	; () banked
  5861  001E8A  B4D8               	btfsc	status,2,c
  5862  001E8C  D005               	goto	l2848
  5863                           
  5864                           ; BSR set to: 0
  5865  001E8E  0100               	movlb	0	; () banked
  5866  001E90  6D66               	negf	___awdiv@quotient& (0+255),b
  5867  001E92  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5868  001E94  B0D8               	btfsc	status,0,c
  5869  001E96  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5870  001E98                     l2848:
  5871                           
  5872                           ; BSR set to: 0
  5873  001E98  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5874  001E9C  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5875  001EA0  0012               	return	
  5876  001EA2                     __end_of___awdiv:
  5877                           	opt stack 0
  5878                           tosu	equ	0xFFF
  5879                           tosh	equ	0xFFE
  5880                           tosl	equ	0xFFD
  5881                           pclath	equ	0xFFA
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           postinc0	equ	0xFEE
  5889                           wreg	equ	0xFE8
  5890                           postdec1	equ	0xFE5
  5891                           fsr1h	equ	0xFE2
  5892                           fsr1l	equ	0xFE1
  5893                           indf2	equ	0xFDF
  5894                           postinc2	equ	0xFDE
  5895                           postdec2	equ	0xFDD
  5896                           plusw2	equ	0xFDB
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901 ;; *************** function _ES_Timer_InitTimer *****************
  5902 ;; Defined at:
  5903 ;;		line 229 in file "ES_Timers.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  Num             1    wreg     unsigned char 
  5906 ;;  NewTime         2    0[BANK0 ] unsigned int 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  Num             1    4[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      enum E15472
  5911 ;; Registers used:
  5912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5918 ;;      Params:         0       2       0       0
  5919 ;;      Locals:         0       1       0       0
  5920 ;;      Temps:          0       2       0       0
  5921 ;;      Totals:         0       5       0       0
  5922 ;;Total ram usage:        5 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    7
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_ShowPattern
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text22
  5933  0022E0                     __ptext22:
  5934                           	opt stack 0
  5935  0022E0                     _ES_Timer_InitTimer:
  5936                           	opt stack 20
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;incstack = 0
  5940                           ;ES_Timer_InitTimer@Num stored from wreg
  5941  0022E0  0100               	movlb	0	; () banked
  5942  0022E2  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  5943                           
  5944                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  5945                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  5946                           ;ES_Timers.c: 236: (NewTime == 0) )
  5947  0022E4  0E10               	movlw	16
  5948  0022E6  0100               	movlb	0	; () banked
  5949  0022E8  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  5950  0022EA  0012               	return	
  5951                           
  5952                           ; BSR set to: 0
  5953  0022EC  0100               	movlb	0	; () banked
  5954  0022EE  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5955  0022F0  0D02               	mullw	2
  5956  0022F2  0E21               	movlw	low _Timer2PostFunc
  5957  0022F4  24F3               	addwf	prodl,w,c
  5958  0022F6  6EF6               	movwf	tblptrl,c
  5959  0022F8  0E03               	movlw	high _Timer2PostFunc
  5960  0022FA  20F4               	addwfc	prodh,w,c
  5961  0022FC  6EF7               	movwf	tblptrh,c
  5962  0022FE                     	if	0	;There are less than 3 active tblptr bytes
  5963  0022FE                     	endif
  5964  0022FE  0009               	tblrd		*+
  5965  002300  50F5               	movf	tablat,w,c
  5966  002302  0009               	tblrd		*+
  5967  002304  10F5               	iorwf	tablat,w,c
  5968  002306  B4D8               	btfsc	status,2,c
  5969  002308  0012               	return	
  5970                           
  5971                           ; BSR set to: 0
  5972  00230A  0100               	movlb	0	; () banked
  5973  00230C  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  5974  00230E  0100               	movlb	0	; () banked
  5975  002310  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  5976  002312  B4D8               	btfsc	status,2,c
  5977  002314  0012               	return	
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  5981                           
  5982                           ; BSR set to: 0
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  5986                           ;	Return value of _ES_Timer_InitTimer is never used
  5987  002316  0100               	movlb	0	; () banked
  5988  002318  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5989  00231A  0D02               	mullw	2
  5990  00231C  0E00               	movlw	low _TMR_TimerArray
  5991  00231E  24F3               	addwf	prodl,w,c
  5992  002320  6ED9               	movwf	fsr2l,c
  5993  002322  0E01               	movlw	high _TMR_TimerArray
  5994  002324  20F4               	addwfc	prodh,w,c
  5995  002326  6EDA               	movwf	fsr2h,c
  5996  002328  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  5997  00232C  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6001  002330  0100               	movlb	0	; () banked
  6002  002332  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  6003  002334  0D02               	mullw	2
  6004  002336  0E01               	movlw	low _BitNum2SetMask
  6005  002338  24F3               	addwf	prodl,w,c
  6006  00233A  6EF6               	movwf	tblptrl,c
  6007  00233C  0E03               	movlw	high _BitNum2SetMask
  6008  00233E  20F4               	addwfc	prodh,w,c
  6009  002340  6EF7               	movwf	tblptrh,c
  6010  002342                     	if	0	;There are less than 3 active tblptr bytes
  6011  002342                     	endif
  6012  002342  0009               	tblrd		*+
  6013  002344  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  6014  002348  0009               	tblrd		*+
  6015  00234A  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  6016  00234E  0100               	movlb	0	; () banked
  6017  002350  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  6018  002352  0100               	movlb	0	; () banked
  6019  002354  13DC               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6020  002356  0100               	movlb	0	; () banked
  6021  002358  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  6022  00235A  0100               	movlb	0	; () banked
  6023  00235C  13DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6024  00235E  0012               	return	
  6025  002360                     __end_of_ES_Timer_InitTimer:
  6026                           	opt stack 0
  6027                           tosu	equ	0xFFF
  6028                           tosh	equ	0xFFE
  6029                           tosl	equ	0xFFD
  6030                           pclath	equ	0xFFA
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1h	equ	0xFE2
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           postinc2	equ	0xFDE
  6044                           postdec2	equ	0xFDD
  6045                           plusw2	equ	0xFDB
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function _DotStar_Show *****************
  6051 ;; Defined at:
  6052 ;;		line 61 in file "Pattern_DotStarLED.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  6055 ;;		 -> PixelPattern(152), 
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;  i               1   90[BANK0 ] unsigned char 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6067 ;;      Params:         0       2       0       0
  6068 ;;      Locals:         0       1       0       0
  6069 ;;      Temps:          0      19       0       0
  6070 ;;      Totals:         0      22       0       0
  6071 ;;Total ram usage:       22 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:   12
  6074 ;; This function calls:
  6075 ;;		_HSV_to_RGB
  6076 ;;		_SPI32_TransmitFrames
  6077 ;; This function is called by:
  6078 ;;		_ShowPattern
  6079 ;;		_StopPattern
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text23
  6084  001424                     __ptext23:
  6085                           	opt stack 0
  6086  001424                     _DotStar_Show:
  6087                           	opt stack 15
  6088                           
  6089                           ;Pattern_DotStarLED.c: 62: for(uint8_t i=1; i<=76; i++){
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;incstack = 0
  6093  001424  0E01               	movlw	1
  6094  001426  0100               	movlb	0	; () banked
  6095  001428  6FBA               	movwf	DotStar_Show@i& (0+255),b
  6096  00142A                     l3258:
  6097                           
  6098                           ; BSR set to: 0
  6099  00142A  0E4C               	movlw	76
  6100  00142C  0100               	movlb	0	; () banked
  6101  00142E  65BA               	cpfsgt	DotStar_Show@i& (0+255),b
  6102  001430  D001               	goto	l3262
  6103  001432  D083               	goto	l3270
  6104  001434                     l3262:
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;Pattern_DotStarLED.c: 64: PixelFrames[i] = (0xe0000000 | ((uint32_t)*Brightness<<24) | 
      +                          *(patternPointer+(i-1)));
  6108  001434  0EFE               	movlw	254
  6109  001436  0100               	movlb	0	; () banked
  6110  001438  6FA7               	movwf	??_DotStar_Show& (0+255),b
  6111  00143A  0EFF               	movlw	255
  6112  00143C  0100               	movlb	0	; () banked
  6113  00143E  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  6114  001440  0100               	movlb	0	; () banked
  6115  001442  51BA               	movf	DotStar_Show@i& (0+255),w,b
  6116  001444  0100               	movlb	0	; () banked
  6117  001446  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  6118  001448  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  6119  00144A  90D8               	bcf	status,0,c
  6120  00144C  0100               	movlb	0	; () banked
  6121  00144E  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  6122  001450  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  6123  001452  0100               	movlb	0	; () banked
  6124  001454  51A7               	movf	??_DotStar_Show& (0+255),w,b
  6125  001456  0100               	movlb	0	; () banked
  6126  001458  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  6127  00145A  0100               	movlb	0	; () banked
  6128  00145C  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  6129  00145E  0100               	movlb	0	; () banked
  6130  001460  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  6131  001462  0100               	movlb	0	; () banked
  6132  001464  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  6133  001466  0100               	movlb	0	; () banked
  6134  001468  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  6135  00146A  6ED9               	movwf	fsr2l,c
  6136  00146C  0100               	movlb	0	; () banked
  6137  00146E  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  6138  001470  0100               	movlb	0	; () banked
  6139  001472  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  6140  001474  6EDA               	movwf	fsr2h,c
  6141  001476  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  6142  00147A  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  6143  00147E  C0ED  FFD9         	movff	_Brightness,fsr2l
  6144  001482  C0EE  FFDA         	movff	_Brightness+1,fsr2h
  6145  001486  50DF               	movf	indf2,w,c
  6146  001488  0100               	movlb	0	; () banked
  6147  00148A  6FAD               	movwf	(??_DotStar_Show+6)& (0+255),b
  6148  00148C  C0AD  F0AE         	movff	??_DotStar_Show+6,??_DotStar_Show+7
  6149  001490  0100               	movlb	0	; () banked
  6150  001492  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  6151  001494  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  6152  001496  6BB1               	clrf	(??_DotStar_Show+10)& (0+255),b
  6153  001498  C0AE  F0B1         	movff	??_DotStar_Show+7,??_DotStar_Show+10
  6154  00149C  0100               	movlb	0	; () banked
  6155  00149E  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  6156  0014A0  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  6157  0014A2  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  6158  0014A4  0100               	movlb	0	; () banked
  6159  0014A6  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  6160  0014A8  0100               	movlb	0	; () banked
  6161  0014AA  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  6162  0014AC  0100               	movlb	0	; () banked
  6163  0014AE  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  6164  0014B0  0100               	movlb	0	; () banked
  6165  0014B2  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  6166  0014B4  0100               	movlb	0	; () banked
  6167  0014B6  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  6168  0014B8  0100               	movlb	0	; () banked
  6169  0014BA  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  6170  0014BC  0E00               	movlw	0
  6171  0014BE  0100               	movlb	0	; () banked
  6172  0014C0  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  6173  0014C2  0100               	movlb	0	; () banked
  6174  0014C4  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  6175  0014C6  0E00               	movlw	0
  6176  0014C8  0100               	movlb	0	; () banked
  6177  0014CA  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  6178  0014CC  0100               	movlb	0	; () banked
  6179  0014CE  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  6180  0014D0  0E00               	movlw	0
  6181  0014D2  0100               	movlb	0	; () banked
  6182  0014D4  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  6183  0014D6  0100               	movlb	0	; () banked
  6184  0014D8  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  6185  0014DA  0E00               	movlw	0
  6186  0014DC  0100               	movlb	0	; () banked
  6187  0014DE  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  6188  0014E0  0100               	movlb	0	; () banked
  6189  0014E2  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  6190  0014E4  0E00               	movlw	0
  6191  0014E6  0100               	movlb	0	; () banked
  6192  0014E8  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  6193  0014EA  0100               	movlb	0	; () banked
  6194  0014EC  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  6195  0014EE  0EE0               	movlw	224
  6196  0014F0  0100               	movlb	0	; () banked
  6197  0014F2  11B5               	iorwf	(??_DotStar_Show+14)& (0+255),w,b
  6198  0014F4  0100               	movlb	0	; () banked
  6199  0014F6  6FB9               	movwf	(??_DotStar_Show+18)& (0+255),b
  6200  0014F8  0100               	movlb	0	; () banked
  6201  0014FA  51BA               	movf	DotStar_Show@i& (0+255),w,b
  6202  0014FC  0D04               	mullw	4
  6203  0014FE  0EC4               	movlw	low _PixelFrames
  6204  001500  24F3               	addwf	prodl,w,c
  6205  001502  6ED9               	movwf	fsr2l,c
  6206  001504  0E01               	movlw	high _PixelFrames
  6207  001506  20F4               	addwfc	prodh,w,c
  6208  001508  6EDA               	movwf	fsr2h,c
  6209  00150A  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  6210  00150E  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  6211  001512  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  6212  001516  C0B9  FFDE         	movff	??_DotStar_Show+18,postinc2
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;Pattern_DotStarLED.c: 68: HSV_to_RGB(PixelFrames+i);
  6216  00151A  0100               	movlb	0	; () banked
  6217  00151C  51BA               	movf	DotStar_Show@i& (0+255),w,b
  6218  00151E  0D04               	mullw	4
  6219  001520  0EC4               	movlw	low _PixelFrames
  6220  001522  24F3               	addwf	prodl,w,c
  6221  001524  0100               	movlb	0	; () banked
  6222  001526  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  6223  001528  0E01               	movlw	high _PixelFrames
  6224  00152A  20F4               	addwfc	prodh,w,c
  6225  00152C  0100               	movlb	0	; () banked
  6226  00152E  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  6227  001530  ECDC  F001         	call	_HSV_to_RGB	;wreg free
  6228  001534  0100               	movlb	0	; () banked
  6229  001536  2BBA               	incf	DotStar_Show@i& (0+255),f,b
  6230  001538  D778               	goto	l3258
  6231  00153A                     l3270:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;Pattern_DotStarLED.c: 75: }
  6235                           ;Pattern_DotStarLED.c: 78: SPI32_TransmitFrames(PixelFrames,76+3);
  6236  00153A  0EC4               	movlw	low _PixelFrames
  6237  00153C  0100               	movlb	0	; () banked
  6238  00153E  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  6239  001540  0E01               	movlw	high _PixelFrames
  6240  001542  0100               	movlb	0	; () banked
  6241  001544  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  6242  001546  0E4F               	movlw	79
  6243  001548  0100               	movlb	0	; () banked
  6244  00154A  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  6245  00154C  EC73  F014         	call	_SPI32_TransmitFrames	;wreg free
  6246  001550  0012               	return		;funcret
  6247  001552                     __end_of_DotStar_Show:
  6248                           	opt stack 0
  6249                           tosu	equ	0xFFF
  6250                           tosh	equ	0xFFE
  6251                           tosl	equ	0xFFD
  6252                           pclath	equ	0xFFA
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           postinc0	equ	0xFEE
  6260                           wreg	equ	0xFE8
  6261                           postdec1	equ	0xFE5
  6262                           fsr1h	equ	0xFE2
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           plusw2	equ	0xFDB
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _SPI32_TransmitFrames *****************
  6273 ;; Defined at:
  6274 ;;		line 239 in file "SPI32_ControlService.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  6277 ;;		 -> PixelFrames(316), 
  6278 ;;  numFrames       1   34[BANK0 ] unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6290 ;;      Params:         0       3       0       0
  6291 ;;      Locals:         0       3       0       0
  6292 ;;      Temps:          0       0       0       0
  6293 ;;      Totals:         0       6       0       0
  6294 ;;Total ram usage:        6 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:   11
  6297 ;; This function calls:
  6298 ;;		_PostSPI32ControlService
  6299 ;; This function is called by:
  6300 ;;		_DotStar_Show
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text24
  6305  0028E6                     __ptext24:
  6306                           	opt stack 0
  6307  0028E6                     _SPI32_TransmitFrames:
  6308                           	opt stack 15
  6309                           
  6310                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  6311                           
  6312                           ;incstack = 0
  6313  0028E6  0100               	movlb	0	; () banked
  6314  0028E8  05DF               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  6315  0028EA  A4D8               	btfss	status,2,c
  6316  0028EC  0012               	return	
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  6320  0028EE  0E00               	movlw	0
  6321  0028F0  0100               	movlb	0	; () banked
  6322  0028F2  6FE2               	movwf	_FrameIndex& (0+255),b
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  6326  0028F4  C080  F0D4         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  6327  0028F8  C081  F0D5         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  6331  0028FC  C082  F0E4         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  6335                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  6336  002900  0E08               	movlw	8
  6337  002902  0100               	movlb	0	; () banked
  6338  002904  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  6342  002906  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  6343  00290A  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  6344  00290E  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  6345  002912  ECFE  F014         	call	_PostSPI32ControlService	;wreg free
  6346  002916  0012               	return	
  6347  002918                     __end_of_SPI32_TransmitFrames:
  6348                           	opt stack 0
  6349                           tosu	equ	0xFFF
  6350                           tosh	equ	0xFFE
  6351                           tosl	equ	0xFFD
  6352                           pclath	equ	0xFFA
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           postdec1	equ	0xFE5
  6362                           fsr1h	equ	0xFE2
  6363                           fsr1l	equ	0xFE1
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           plusw2	equ	0xFDB
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _PostPatternControlService *****************
  6373 ;; Defined at:
  6374 ;;		line 137 in file "Pattern_ControlService.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      unsigned char 
  6381 ;; Registers used:
  6382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6388 ;;      Params:         0       3       0       0
  6389 ;;      Locals:         0       0       0       0
  6390 ;;      Temps:          0       0       0       0
  6391 ;;      Totals:         0       3       0       0
  6392 ;;Total ram usage:        3 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:   10
  6395 ;; This function calls:
  6396 ;;		_ES_PostToService
  6397 ;; This function is called by:
  6398 ;;		_RunPatternControlService
  6399 ;;		_ES_Timer_Tick_Resp
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text25
  6404  0029E0                     __ptext25:
  6405                           	opt stack 0
  6406  0029E0                     _PostPatternControlService:
  6407                           	opt stack 0
  6408                           
  6409                           ;Skip over the trampoline to the duplicate function for level 2
  6410  0029E0  B25D               	btfsc	btemp,1,c
  6411  0029E2  EF56  F015         	goto	i2_PostPatternControlService
  6412  0029E6                     _PostPatternControlService$intlevel0:
  6413                           	opt stack 17
  6414                           
  6415                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
  6416                           ;	Return value of _PostPatternControlService is never used
  6417                           
  6418                           ;incstack = 0
  6419  0029E6  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6420  0029EA  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6421  0029EE  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6422  0029F2  0100               	movlb	0	; () banked
  6423  0029F4  51E3               	movf	_MyPriority& (0+255),w,b
  6424  0029F6  EC2A  F012         	call	_ES_PostToService
  6425  0029FA  0012               	return	
  6426  0029FC                     __end_of_PostPatternControlService:
  6427                           	opt stack 0
  6428                           tosu	equ	0xFFF
  6429                           tosh	equ	0xFFE
  6430                           tosl	equ	0xFFD
  6431                           pclath	equ	0xFFA
  6432                           tblptru	equ	0xFF8
  6433                           tblptrh	equ	0xFF7
  6434                           tblptrl	equ	0xFF6
  6435                           tablat	equ	0xFF5
  6436                           prodh	equ	0xFF4
  6437                           prodl	equ	0xFF3
  6438                           postinc0	equ	0xFEE
  6439                           wreg	equ	0xFE8
  6440                           postdec1	equ	0xFE5
  6441                           fsr1h	equ	0xFE2
  6442                           fsr1l	equ	0xFE1
  6443                           indf2	equ	0xFDF
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           plusw2	equ	0xFDB
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _PostSPI32ControlService *****************
  6452 ;; Defined at:
  6453 ;;		line 117 in file "SPI32_ControlService.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  1    wreg      unsigned char 
  6460 ;; Registers used:
  6461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6467 ;;      Params:         0       3       0       0
  6468 ;;      Locals:         0       0       0       0
  6469 ;;      Temps:          0       0       0       0
  6470 ;;      Totals:         0       3       0       0
  6471 ;;Total ram usage:        3 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:   10
  6474 ;; This function calls:
  6475 ;;		_ES_PostToService
  6476 ;; This function is called by:
  6477 ;;		_SPI32_TransmitFrames
  6478 ;;		_ES_Timer_Tick_Resp
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text26
  6483  0029FC                     __ptext26:
  6484                           	opt stack 0
  6485  0029FC                     _PostSPI32ControlService:
  6486                           	opt stack 0
  6487                           
  6488                           ;Skip over the trampoline to the duplicate function for level 2
  6489  0029FC  B25D               	btfsc	btemp,1,c
  6490  0029FE  EF4B  F015         	goto	i2_PostSPI32ControlService
  6491  002A02                     _PostSPI32ControlService$intlevel0:
  6492                           	opt stack 17
  6493                           
  6494                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6495                           ;	Return value of _PostSPI32ControlService is never used
  6496                           
  6497                           ;incstack = 0
  6498  002A02  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  6499  002A06  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6500  002A0A  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6501  002A0E  0100               	movlb	0	; () banked
  6502  002A10  51E0               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6503  002A12  EC2A  F012         	call	_ES_PostToService
  6504  002A16  0012               	return	
  6505  002A18                     __end_of_PostSPI32ControlService:
  6506                           	opt stack 0
  6507                           tosu	equ	0xFFF
  6508                           tosh	equ	0xFFE
  6509                           tosl	equ	0xFFD
  6510                           pclath	equ	0xFFA
  6511                           tblptru	equ	0xFF8
  6512                           tblptrh	equ	0xFF7
  6513                           tblptrl	equ	0xFF6
  6514                           tablat	equ	0xFF5
  6515                           prodh	equ	0xFF4
  6516                           prodl	equ	0xFF3
  6517                           postinc0	equ	0xFEE
  6518                           wreg	equ	0xFE8
  6519                           postdec1	equ	0xFE5
  6520                           fsr1h	equ	0xFE2
  6521                           fsr1l	equ	0xFE1
  6522                           indf2	equ	0xFDF
  6523                           postinc2	equ	0xFDE
  6524                           postdec2	equ	0xFDD
  6525                           plusw2	equ	0xFDB
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _HSV_to_RGB *****************
  6531 ;; Defined at:
  6532 ;;		line 49 in file "Pattern_HSV_Convert.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  6535 ;;		 -> PixelFrames(316), 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  v               2   67[BANK0 ] unsigned int 
  6538 ;;  p               2   65[BANK0 ] unsigned int 
  6539 ;;  s               2   63[BANK0 ] unsigned int 
  6540 ;;  t               2   59[BANK0 ] unsigned int 
  6541 ;;  q               2   57[BANK0 ] unsigned int 
  6542 ;;  b               2   55[BANK0 ] unsigned int 
  6543 ;;  g               2   53[BANK0 ] unsigned int 
  6544 ;;  r               2   51[BANK0 ] unsigned int 
  6545 ;;  fpart           2   49[BANK0 ] unsigned int 
  6546 ;;  region          2   47[BANK0 ] unsigned int 
  6547 ;;  h               2   45[BANK0 ] unsigned int 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6557 ;;      Params:         0       2       0       0
  6558 ;;      Locals:         0      24       0       0
  6559 ;;      Temps:          0      24       0       0
  6560 ;;      Totals:         0      50       0       0
  6561 ;;Total ram usage:       50 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    8
  6564 ;; This function calls:
  6565 ;;		___lwdiv
  6566 ;;		___wmul
  6567 ;; This function is called by:
  6568 ;;		_DotStar_Show
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text27
  6573  0003B8                     __ptext27:
  6574                           	opt stack 0
  6575  0003B8                     _HSV_to_RGB:
  6576                           	opt stack 18
  6577                           
  6578                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  6579                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  6580                           
  6581                           ;incstack = 0
  6582  0003B8  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6583  0003BC  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6584  0003C0  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6585  0003C4  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  6586  0003C8  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  6587  0003CC  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  6588  0003D0  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  6589  0003D4  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  6590  0003D8  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  6591  0003DC  0100               	movlb	0	; () banked
  6592  0003DE  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6593  0003E0  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  6594  0003E4  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  6598  0003E8  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6599  0003EC  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6600  0003F0  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6601  0003F4  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6602  0003F8  0EF0               	movlw	240
  6603  0003FA  0100               	movlb	0	; () banked
  6604  0003FC  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6605  0003FE  0100               	movlb	0	; () banked
  6606  000400  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  6607  000402  0100               	movlb	0	; () banked
  6608  000404  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  6612  000406  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6613  00040A  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6614  00040E  0E04               	movlw	4
  6615  000410  0100               	movlb	0	; () banked
  6616  000412  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  6617  000414                     u1815:
  6618  000414  0100               	movlb	0	; () banked
  6619  000416  90D8               	bcf	status,0,c
  6620  000418  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  6621  00041A  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  6622  00041C  0100               	movlb	0	; () banked
  6623  00041E  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  6624  000420  D7F9               	goto	u1815
  6625  000422  0100               	movlb	0	; () banked
  6626  000424  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6627  000426  0100               	movlb	0	; () banked
  6628  000428  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  6629  00042A  0100               	movlb	0	; () banked
  6630  00042C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6631  00042E  0100               	movlb	0	; () banked
  6632  000430  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  6636  000432  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6637  000436  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6638  00043A  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6639  00043E  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6640  000442  0E0F               	movlw	15
  6641  000444  0100               	movlb	0	; () banked
  6642  000446  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6643  000448  0100               	movlb	0	; () banked
  6644  00044A  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  6645  00044C  0100               	movlb	0	; () banked
  6646  00044E  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  6650  000450  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  6651  000454  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  6652  000458  0100               	movlb	0	; () banked
  6653  00045A  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  6654  00045C  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  6655  00045E  0EF0               	movlw	240
  6656  000460  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6657  000462  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6658  000464  0B0F               	andlw	15
  6659  000466  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6660  000468  0EF0               	movlw	240
  6661  00046A  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  6662  00046C  0100               	movlb	0	; () banked
  6663  00046E  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6664  000470  0100               	movlb	0	; () banked
  6665  000472  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  6666  000474  0100               	movlb	0	; () banked
  6667  000476  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6668  000478  0100               	movlb	0	; () banked
  6669  00047A  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  6673  00047C  0100               	movlb	0	; () banked
  6674  00047E  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  6675  000480  0100               	movlb	0	; () banked
  6676  000482  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  6677  000484  A4D8               	btfss	status,2,c
  6678  000486  D00D               	goto	l2930
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  6682  000488  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6683  00048C  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6684  000490  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  6685  000494  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  6686  000498  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  6687  00049C  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  6688                           
  6689                           ;Pattern_HSV_Convert.c: 61: }
  6690  0004A0  D129               	goto	l2950
  6691  0004A2                     l2930:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;Pattern_HSV_Convert.c: 63: else{
  6695                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  6696  0004A2  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  6697  0004A6  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  6698  0004AA  0E00               	movlw	0
  6699  0004AC  0100               	movlb	0	; () banked
  6700  0004AE  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  6701  0004B0  0E2B               	movlw	43
  6702  0004B2  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  6703  0004B4  ECEE  F011         	call	___lwdiv	;wreg free
  6704  0004B8  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  6705  0004BC  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  6706                           
  6707                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6708  0004C0  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  6709  0004C4  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  6710  0004C8  0E00               	movlw	0
  6711  0004CA  0100               	movlb	0	; () banked
  6712  0004CC  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6713  0004CE  0E2B               	movlw	43
  6714  0004D0  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6715  0004D2  EC3E  F014         	call	___wmul	;wreg free
  6716  0004D6  0100               	movlb	0	; () banked
  6717  0004D8  1F66               	comf	?___wmul& (0+255),f,b
  6718  0004DA  0100               	movlb	0	; () banked
  6719  0004DC  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6720  0004DE  0100               	movlb	0	; () banked
  6721  0004E0  4B66               	infsnz	?___wmul& (0+255),f,b
  6722  0004E2  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6723  0004E4  0100               	movlb	0	; () banked
  6724  0004E6  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  6725  0004E8  0100               	movlb	0	; () banked
  6726  0004EA  2566               	addwf	?___wmul& (0+255),w,b
  6727  0004EC  0100               	movlb	0	; () banked
  6728  0004EE  6F9D               	movwf	_HSV_to_RGB$1987& (0+255),b
  6729  0004F0  0100               	movlb	0	; () banked
  6730  0004F2  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  6731  0004F4  0100               	movlb	0	; () banked
  6732  0004F6  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6733  0004F8  0100               	movlb	0	; () banked
  6734  0004FA  6F9E               	movwf	(_HSV_to_RGB$1987+1)& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6738  0004FC  C09D  F066         	movff	_HSV_to_RGB$1987,___wmul@multiplier
  6739  000500  C09E  F067         	movff	_HSV_to_RGB$1987+1,___wmul@multiplier+1
  6740  000504  0E00               	movlw	0
  6741  000506  0100               	movlb	0	; () banked
  6742  000508  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6743  00050A  0E06               	movlw	6
  6744  00050C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6745  00050E  EC3E  F014         	call	___wmul	;wreg free
  6746  000512  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  6747  000516  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  6748                           
  6749                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  6750  00051A  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6751  00051E  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6752  000522  0100               	movlb	0	; () banked
  6753  000524  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6754  000526  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6755  000528  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6756  00052A  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6757  00052C  0EFF               	movlw	255
  6758  00052E  0100               	movlb	0	; () banked
  6759  000530  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6760  000532  0100               	movlb	0	; () banked
  6761  000534  6F66               	movwf	___wmul@multiplier& (0+255),b
  6762  000536  0E00               	movlw	0
  6763  000538  0100               	movlb	0	; () banked
  6764  00053A  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6765  00053C  0100               	movlb	0	; () banked
  6766  00053E  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6767  000540  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6768  000544  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6769  000548  EC3E  F014         	call	___wmul	;wreg free
  6770  00054C  0100               	movlb	0	; () banked
  6771  00054E  5167               	movf	(?___wmul+1)& (0+255),w,b
  6772  000550  0100               	movlb	0	; () banked
  6773  000552  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  6774  000554  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6778  000556  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  6779  00055A  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  6780  00055E  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  6781  000562  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  6782  000566  EC3E  F014         	call	___wmul	;wreg free
  6783  00056A  0100               	movlb	0	; () banked
  6784  00056C  C067  F066         	movff	?___wmul+1,?___wmul
  6785  000570  0100               	movlb	0	; () banked
  6786  000572  6B67               	clrf	(?___wmul+1)& (0+255),b
  6787  000574  0100               	movlb	0	; () banked
  6788  000576  1F66               	comf	?___wmul& (0+255),f,b
  6789  000578  0100               	movlb	0	; () banked
  6790  00057A  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6791  00057C  0100               	movlb	0	; () banked
  6792  00057E  4B66               	infsnz	?___wmul& (0+255),f,b
  6793  000580  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6794  000582  0EFF               	movlw	255
  6795  000584  0100               	movlb	0	; () banked
  6796  000586  2566               	addwf	?___wmul& (0+255),w,b
  6797  000588  0100               	movlb	0	; () banked
  6798  00058A  6F9D               	movwf	_HSV_to_RGB$1987& (0+255),b
  6799  00058C  0E00               	movlw	0
  6800  00058E  0100               	movlb	0	; () banked
  6801  000590  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6802  000592  0100               	movlb	0	; () banked
  6803  000594  6F9E               	movwf	(_HSV_to_RGB$1987+1)& (0+255),b
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6807  000596  C09D  F066         	movff	_HSV_to_RGB$1987,___wmul@multiplier
  6808  00059A  C09E  F067         	movff	_HSV_to_RGB$1987+1,___wmul@multiplier+1
  6809  00059E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6810  0005A2  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6811  0005A6  EC3E  F014         	call	___wmul	;wreg free
  6812  0005AA  0100               	movlb	0	; () banked
  6813  0005AC  5167               	movf	(?___wmul+1)& (0+255),w,b
  6814  0005AE  0100               	movlb	0	; () banked
  6815  0005B0  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  6816  0005B2  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6820  0005B4  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  6821  0005B8  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  6822  0005BC  0100               	movlb	0	; () banked
  6823  0005BE  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6824  0005C0  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6825  0005C2  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6826  0005C4  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6827  0005C6  0EFF               	movlw	255
  6828  0005C8  0100               	movlb	0	; () banked
  6829  0005CA  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6830  0005CC  0100               	movlb	0	; () banked
  6831  0005CE  6F66               	movwf	___wmul@multiplier& (0+255),b
  6832  0005D0  0E00               	movlw	0
  6833  0005D2  0100               	movlb	0	; () banked
  6834  0005D4  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6835  0005D6  0100               	movlb	0	; () banked
  6836  0005D8  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6837  0005DA  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  6838  0005DE  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  6839  0005E2  EC3E  F014         	call	___wmul	;wreg free
  6840  0005E6  0100               	movlb	0	; () banked
  6841  0005E8  C067  F066         	movff	?___wmul+1,?___wmul
  6842  0005EC  0100               	movlb	0	; () banked
  6843  0005EE  6B67               	clrf	(?___wmul+1)& (0+255),b
  6844  0005F0  0100               	movlb	0	; () banked
  6845  0005F2  1F66               	comf	?___wmul& (0+255),f,b
  6846  0005F4  0100               	movlb	0	; () banked
  6847  0005F6  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6848  0005F8  0100               	movlb	0	; () banked
  6849  0005FA  4B66               	infsnz	?___wmul& (0+255),f,b
  6850  0005FC  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6851  0005FE  0EFF               	movlw	255
  6852  000600  0100               	movlb	0	; () banked
  6853  000602  2566               	addwf	?___wmul& (0+255),w,b
  6854  000604  0100               	movlb	0	; () banked
  6855  000606  6F9D               	movwf	_HSV_to_RGB$1987& (0+255),b
  6856  000608  0E00               	movlw	0
  6857  00060A  0100               	movlb	0	; () banked
  6858  00060C  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6859  00060E  0100               	movlb	0	; () banked
  6860  000610  6F9E               	movwf	(_HSV_to_RGB$1987+1)& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6864  000612  C09D  F066         	movff	_HSV_to_RGB$1987,___wmul@multiplier
  6865  000616  C09E  F067         	movff	_HSV_to_RGB$1987+1,___wmul@multiplier+1
  6866  00061A  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6867  00061E  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6868  000622  EC3E  F014         	call	___wmul	;wreg free
  6869  000626  0100               	movlb	0	; () banked
  6870  000628  5167               	movf	(?___wmul+1)& (0+255),w,b
  6871  00062A  0100               	movlb	0	; () banked
  6872  00062C  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  6873  00062E  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  6874                           
  6875                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  6876  000630  D046               	goto	l2948
  6877  000632                     l491:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  6881  000632  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6882  000636  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6883  00063A  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  6884  00063E  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  6885  000642  D008               	goto	L19
  6886  000644                     l493:
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  6890  000644  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  6891  000648  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  6892  00064C  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6893  000650  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6894  000654                     L19:
  6895  000654  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  6896  000658  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  6897  00065C  D04B               	goto	l2950
  6898  00065E                     l494:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  6902  00065E  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6903  000662  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6904  000666  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6905  00066A  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6906  00066E  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  6907  000672  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  6908  000676  D03E               	goto	l2950
  6909  000678                     l495:
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  6913  000678  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6914  00067C  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6915  000680  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  6916  000684  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  6917  000688  D008               	goto	L20
  6918  00068A                     l496:
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  6922  00068A  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  6923  00068E  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  6924  000692  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6925  000696  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6926  00069A                     L20:
  6927  00069A  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6928  00069E  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6929  0006A2  D028               	goto	l2950
  6930  0006A4                     l497:
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  6934  0006A4  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6935  0006A8  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6936  0006AC  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6937  0006B0  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6938  0006B4  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  6939  0006B8  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;Pattern_HSV_Convert.c: 88: }
  6943  0006BC  D01B               	goto	l2950
  6944  0006BE                     l2948:
  6945                           
  6946                           ; BSR set to: 0
  6947  0006BE  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  6948  0006C2  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  6949                           
  6950                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6951                           ; Switch size 1, requested type "space"
  6952                           ; Number of cases is 1, Range of values is 0 to 0
  6953                           ; switch strategies available:
  6954                           ; Name         Instructions Cycles
  6955                           ; simple_byte            4     3 (average)
  6956                           ;	Chosen strategy is simple_byte
  6957  0006C6  0100               	movlb	0	; () banked
  6958  0006C8  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6959  0006CA  0A00               	xorlw	0	; case 0
  6960  0006CC  A4D8               	btfss	status,2,c
  6961  0006CE  D7EA               	goto	l497
  6962                           
  6963                           ; BSR set to: 0
  6964                           ; Switch size 1, requested type "space"
  6965                           ; Number of cases is 5, Range of values is 0 to 4
  6966                           ; switch strategies available:
  6967                           ; Name         Instructions Cycles
  6968                           ; simple_byte           16     9 (average)
  6969                           ;	Chosen strategy is simple_byte
  6970  0006D0  0100               	movlb	0	; () banked
  6971  0006D2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6972  0006D4  0A00               	xorlw	0	; case 0
  6973  0006D6  B4D8               	btfsc	status,2,c
  6974  0006D8  D7AC               	goto	l491
  6975  0006DA  0A01               	xorlw	1	; case 1
  6976  0006DC  B4D8               	btfsc	status,2,c
  6977  0006DE  D7B2               	goto	l493
  6978  0006E0  0A03               	xorlw	3	; case 2
  6979  0006E2  B4D8               	btfsc	status,2,c
  6980  0006E4  D7BC               	goto	l494
  6981  0006E6  0A01               	xorlw	1	; case 3
  6982  0006E8  B4D8               	btfsc	status,2,c
  6983  0006EA  D7C6               	goto	l495
  6984  0006EC  0A07               	xorlw	7	; case 4
  6985  0006EE  B4D8               	btfsc	status,2,c
  6986  0006F0  D7CC               	goto	l496
  6987  0006F2  D7D8               	goto	l497
  6988  0006F4                     l2950:
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;Pattern_HSV_Convert.c: 89: }
  6992                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  6993  0006F4  0100               	movlb	0	; () banked
  6994  0006F6  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  6995  0006F8  0100               	movlb	0	; () banked
  6996  0006FA  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  6997  0006FC  0100               	movlb	0	; () banked
  6998  0006FE  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  6999  000700  0100               	movlb	0	; () banked
  7000  000702  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  7001  000704  0100               	movlb	0	; () banked
  7002  000706  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  7003  000708  0100               	movlb	0	; () banked
  7004  00070A  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  7005  00070C  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  7006  000710  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  7007  000714  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  7008  000718  0100               	movlb	0	; () banked
  7009  00071A  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  7010  00071C  0100               	movlb	0	; () banked
  7011  00071E  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  7012  000720  0100               	movlb	0	; () banked
  7013  000722  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  7014  000724  0100               	movlb	0	; () banked
  7015  000726  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  7016  000728  0100               	movlb	0	; () banked
  7017  00072A  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  7018  00072C  0100               	movlb	0	; () banked
  7019  00072E  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  7020  000730  0100               	movlb	0	; () banked
  7021  000732  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  7022  000734  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  7023  000738  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  7024  00073C  0100               	movlb	0	; () banked
  7025  00073E  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  7026  000740  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  7027  000742  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  7028  000746  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  7029  00074A  0E00               	movlw	0
  7030  00074C  14DE               	andwf	postinc2,w,c
  7031  00074E  0100               	movlb	0	; () banked
  7032  000750  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  7033  000752  0E00               	movlw	0
  7034  000754  14DE               	andwf	postinc2,w,c
  7035  000756  0100               	movlb	0	; () banked
  7036  000758  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  7037  00075A  0E00               	movlw	0
  7038  00075C  14DE               	andwf	postinc2,w,c
  7039  00075E  0100               	movlb	0	; () banked
  7040  000760  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  7041  000762  0EFF               	movlw	255
  7042  000764  14DE               	andwf	postinc2,w,c
  7043  000766  0100               	movlb	0	; () banked
  7044  000768  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  7045  00076A  0100               	movlb	0	; () banked
  7046  00076C  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  7047  00076E  0100               	movlb	0	; () banked
  7048  000770  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  7049  000772  0100               	movlb	0	; () banked
  7050  000774  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  7051  000776  0100               	movlb	0	; () banked
  7052  000778  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  7053  00077A  0100               	movlb	0	; () banked
  7054  00077C  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  7055  00077E  0100               	movlb	0	; () banked
  7056  000780  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  7057  000782  0100               	movlb	0	; () banked
  7058  000784  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  7059  000786  0100               	movlb	0	; () banked
  7060  000788  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  7061  00078A  0100               	movlb	0	; () banked
  7062  00078C  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  7063  00078E  0100               	movlb	0	; () banked
  7064  000790  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  7065  000792  0100               	movlb	0	; () banked
  7066  000794  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  7067  000796  0100               	movlb	0	; () banked
  7068  000798  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  7069  00079A  0100               	movlb	0	; () banked
  7070  00079C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  7071  00079E  0100               	movlb	0	; () banked
  7072  0007A0  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  7073  0007A2  0100               	movlb	0	; () banked
  7074  0007A4  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  7075  0007A6  0100               	movlb	0	; () banked
  7076  0007A8  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  7077  0007AA  0100               	movlb	0	; () banked
  7078  0007AC  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  7079  0007AE  0100               	movlb	0	; () banked
  7080  0007B0  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  7081  0007B2  0100               	movlb	0	; () banked
  7082  0007B4  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  7083  0007B6  0100               	movlb	0	; () banked
  7084  0007B8  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  7085  0007BA  0100               	movlb	0	; () banked
  7086  0007BC  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  7087  0007BE  0100               	movlb	0	; () banked
  7088  0007C0  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  7089  0007C2  0100               	movlb	0	; () banked
  7090  0007C4  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  7091  0007C6  0100               	movlb	0	; () banked
  7092  0007C8  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  7093  0007CA  0100               	movlb	0	; () banked
  7094  0007CC  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  7095  0007CE  0100               	movlb	0	; () banked
  7096  0007D0  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  7097  0007D2  0100               	movlb	0	; () banked
  7098  0007D4  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  7099  0007D6  0100               	movlb	0	; () banked
  7100  0007D8  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  7101  0007DA  0100               	movlb	0	; () banked
  7102  0007DC  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  7103  0007DE  0100               	movlb	0	; () banked
  7104  0007E0  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  7105  0007E2  0E00               	movlw	0
  7106  0007E4  0100               	movlb	0	; () banked
  7107  0007E6  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  7108  0007E8  0100               	movlb	0	; () banked
  7109  0007EA  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  7110  0007EC  0E00               	movlw	0
  7111  0007EE  0100               	movlb	0	; () banked
  7112  0007F0  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  7113  0007F2  0100               	movlb	0	; () banked
  7114  0007F4  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  7115  0007F6  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  7116  0007FA  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  7117  0007FE  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  7118  000802  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  7119  000806  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  7120  00080A  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  7121  00080E  0012               	return	
  7122  000810                     __end_of_HSV_to_RGB:
  7123                           	opt stack 0
  7124                           tosu	equ	0xFFF
  7125                           tosh	equ	0xFFE
  7126                           tosl	equ	0xFFD
  7127                           pclath	equ	0xFFA
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           postinc0	equ	0xFEE
  7135                           wreg	equ	0xFE8
  7136                           postdec1	equ	0xFE5
  7137                           fsr1h	equ	0xFE2
  7138                           fsr1l	equ	0xFE1
  7139                           indf2	equ	0xFDF
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           plusw2	equ	0xFDB
  7143                           fsr2h	equ	0xFDA
  7144                           fsr2l	equ	0xFD9
  7145                           status	equ	0xFD8
  7146                           
  7147 ;; *************** function ___lwdiv *****************
  7148 ;; Defined at:
  7149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  dividend        2   12[BANK0 ] unsigned int 
  7152 ;;  divisor         2   14[BANK0 ] unsigned int 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  quotient        2   16[BANK0 ] unsigned int 
  7155 ;;  counter         1   18[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2   12[BANK0 ] unsigned int 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7165 ;;      Params:         0       4       0       0
  7166 ;;      Locals:         0       3       0       0
  7167 ;;      Temps:          0       0       0       0
  7168 ;;      Totals:         0       7       0       0
  7169 ;;Total ram usage:        7 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    7
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_HSV_to_RGB
  7176 ;;		_HueTest
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text28
  7181  0023DC                     __ptext28:
  7182                           	opt stack 0
  7183  0023DC                     ___lwdiv:
  7184                           	opt stack 18
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;incstack = 0
  7188  0023DC  0E00               	movlw	0
  7189  0023DE  0100               	movlb	0	; () banked
  7190  0023E0  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7191  0023E2  0E00               	movlw	0
  7192  0023E4  6F70               	movwf	___lwdiv@quotient& (0+255),b
  7193                           
  7194                           ; BSR set to: 0
  7195  0023E6  0100               	movlb	0	; () banked
  7196  0023E8  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7197  0023EA  0100               	movlb	0	; () banked
  7198  0023EC  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7199  0023EE  B4D8               	btfsc	status,2,c
  7200  0023F0  D02C               	goto	l1218
  7201                           
  7202                           ; BSR set to: 0
  7203  0023F2  0E01               	movlw	1
  7204  0023F4  0100               	movlb	0	; () banked
  7205  0023F6  6F72               	movwf	___lwdiv@counter& (0+255),b
  7206  0023F8  D006               	goto	l2860
  7207  0023FA                     l2858:
  7208                           
  7209                           ; BSR set to: 0
  7210  0023FA  0100               	movlb	0	; () banked
  7211  0023FC  90D8               	bcf	status,0,c
  7212  0023FE  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  7213  002400  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7214  002402  0100               	movlb	0	; () banked
  7215  002404  2B72               	incf	___lwdiv@counter& (0+255),f,b
  7216  002406                     l2860:
  7217                           
  7218                           ; BSR set to: 0
  7219  002406  0100               	movlb	0	; () banked
  7220  002408  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7221  00240A  D7F7               	goto	l2858
  7222  00240C                     l2862:
  7223                           
  7224                           ; BSR set to: 0
  7225  00240C  0100               	movlb	0	; () banked
  7226  00240E  90D8               	bcf	status,0,c
  7227  002410  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  7228  002412  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7229                           
  7230                           ; BSR set to: 0
  7231  002414  0100               	movlb	0	; () banked
  7232  002416  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7233  002418  0100               	movlb	0	; () banked
  7234  00241A  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  7235  00241C  0100               	movlb	0	; () banked
  7236  00241E  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7237  002420  0100               	movlb	0	; () banked
  7238  002422  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7239  002424  A0D8               	btfss	status,0,c
  7240  002426  D00A               	goto	l2870
  7241                           
  7242                           ; BSR set to: 0
  7243  002428  0100               	movlb	0	; () banked
  7244  00242A  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7245  00242C  0100               	movlb	0	; () banked
  7246  00242E  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  7247  002430  0100               	movlb	0	; () banked
  7248  002432  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7249  002434  0100               	movlb	0	; () banked
  7250  002436  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7251                           
  7252                           ; BSR set to: 0
  7253  002438  0100               	movlb	0	; () banked
  7254  00243A  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  7255  00243C                     l2870:
  7256                           
  7257                           ; BSR set to: 0
  7258  00243C  0100               	movlb	0	; () banked
  7259  00243E  90D8               	bcf	status,0,c
  7260  002440  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7261  002442  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  7262                           
  7263                           ; BSR set to: 0
  7264  002444  0100               	movlb	0	; () banked
  7265  002446  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  7266  002448  D7E1               	goto	l2862
  7267  00244A                     l1218:
  7268                           
  7269                           ; BSR set to: 0
  7270  00244A  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  7271  00244E  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7272                           
  7273                           ; BSR set to: 0
  7274  002452  0012               	return		;funcret
  7275  002454                     __end_of___lwdiv:
  7276                           	opt stack 0
  7277                           tosu	equ	0xFFF
  7278                           tosh	equ	0xFFE
  7279                           tosl	equ	0xFFD
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           postinc0	equ	0xFEE
  7288                           wreg	equ	0xFE8
  7289                           postdec1	equ	0xFE5
  7290                           fsr1h	equ	0xFE2
  7291                           fsr1l	equ	0xFE1
  7292                           indf2	equ	0xFDF
  7293                           postinc2	equ	0xFDE
  7294                           postdec2	equ	0xFDD
  7295                           plusw2	equ	0xFDB
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300 ;; *************** function _PausePattern *****************
  7301 ;; Defined at:
  7302 ;;		line 281 in file "Pattern_ControlService.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;		None
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7316 ;;      Params:         0       0       0       0
  7317 ;;      Locals:         0       0       0       0
  7318 ;;      Temps:          0       0       0       0
  7319 ;;      Totals:         0       0       0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    8
  7323 ;; This function calls:
  7324 ;;		_ES_Timer_StopTimer
  7325 ;; This function is called by:
  7326 ;;		_RunPatternControlService
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text29
  7331  002B14                     __ptext29:
  7332                           	opt stack 0
  7333  002B14                     _PausePattern:
  7334                           	opt stack 20
  7335                           
  7336                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;incstack = 0
  7340  002B14  0E00               	movlw	0
  7341  002B16  EC57  F013         	call	_ES_Timer_StopTimer
  7342  002B1A  0012               	return		;funcret
  7343  002B1C                     __end_of_PausePattern:
  7344                           	opt stack 0
  7345                           tosu	equ	0xFFF
  7346                           tosh	equ	0xFFE
  7347                           tosl	equ	0xFFD
  7348                           pclath	equ	0xFFA
  7349                           tblptru	equ	0xFF8
  7350                           tblptrh	equ	0xFF7
  7351                           tblptrl	equ	0xFF6
  7352                           tablat	equ	0xFF5
  7353                           prodh	equ	0xFF4
  7354                           prodl	equ	0xFF3
  7355                           postinc0	equ	0xFEE
  7356                           wreg	equ	0xFE8
  7357                           postdec1	equ	0xFE5
  7358                           fsr1h	equ	0xFE2
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           plusw2	equ	0xFDB
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8
  7367                           
  7368 ;; *************** function _ES_Timer_StopTimer *****************
  7369 ;; Defined at:
  7370 ;;		line 205 in file "ES_Timers.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  Num             1    wreg     unsigned char 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  Num             1    4[BANK0 ] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      enum E15472
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7384 ;;      Params:         0       0       0       0
  7385 ;;      Locals:         0       1       0       0
  7386 ;;      Temps:          0       4       0       0
  7387 ;;      Totals:         0       5       0       0
  7388 ;;Total ram usage:        5 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    7
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_StopPattern
  7395 ;;		_PausePattern
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text30
  7400  0026AE                     __ptext30:
  7401                           	opt stack 0
  7402  0026AE                     _ES_Timer_StopTimer:
  7403                           	opt stack 20
  7404                           
  7405                           ;incstack = 0
  7406                           ;ES_Timer_StopTimer@Num stored from wreg
  7407  0026AE  0100               	movlb	0	; () banked
  7408  0026B0  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  7409                           
  7410                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  7411  0026B2  0E0F               	movlw	15
  7412  0026B4  0100               	movlb	0	; () banked
  7413  0026B6  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  7414  0026B8  D001               	goto	l3188
  7415  0026BA  0012               	return	
  7416  0026BC                     l3188:
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  7420  0026BC  0100               	movlb	0	; () banked
  7421  0026BE  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  7422  0026C0  0D02               	mullw	2
  7423  0026C2  0E01               	movlw	low _BitNum2SetMask
  7424  0026C4  24F3               	addwf	prodl,w,c
  7425  0026C6  6EF6               	movwf	tblptrl,c
  7426  0026C8  0E03               	movlw	high _BitNum2SetMask
  7427  0026CA  20F4               	addwfc	prodh,w,c
  7428  0026CC  6EF7               	movwf	tblptrh,c
  7429  0026CE                     	if	0	;There are less than 3 active tblptr bytes
  7430  0026CE                     	endif
  7431  0026CE  0009               	tblrd		*+
  7432  0026D0  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  7433  0026D4  0009               	tblrd		*+
  7434  0026D6  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  7435  0026DA  0100               	movlb	0	; () banked
  7436  0026DC  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  7437  0026DE  0100               	movlb	0	; () banked
  7438  0026E0  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  7439  0026E2  0100               	movlb	0	; () banked
  7440  0026E4  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  7441  0026E6  0100               	movlb	0	; () banked
  7442  0026E8  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  7443  0026EA  0100               	movlb	0	; () banked
  7444  0026EC  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  7445  0026EE  0100               	movlb	0	; () banked
  7446  0026F0  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  7447  0026F2  0100               	movlb	0	; () banked
  7448  0026F4  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  7449  0026F6  0100               	movlb	0	; () banked
  7450  0026F8  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  7451  0026FA  0012               	return	
  7452  0026FC                     __end_of_ES_Timer_StopTimer:
  7453                           	opt stack 0
  7454                           tosu	equ	0xFFF
  7455                           tosh	equ	0xFFE
  7456                           tosl	equ	0xFFD
  7457                           pclath	equ	0xFFA
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           postinc0	equ	0xFEE
  7465                           wreg	equ	0xFE8
  7466                           postdec1	equ	0xFE5
  7467                           fsr1h	equ	0xFE2
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           plusw2	equ	0xFDB
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function _ES_DeQueue *****************
  7478 ;; Defined at:
  7479 ;;		line 164 in file "ES_Queue.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  7482 ;;		 -> Queue1(12), Queue0(12), 
  7483 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  7484 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  7487 ;;		 -> Queue1(12), Queue0(12), 
  7488 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  7489 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      unsigned char 
  7492 ;; Registers used:
  7493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7499 ;;      Params:         0       4       0       0
  7500 ;;      Locals:         0       4       0       0
  7501 ;;      Temps:          0       2       0       0
  7502 ;;      Totals:         0      10       0       0
  7503 ;;Total ram usage:       10 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    8
  7506 ;; This function calls:
  7507 ;;		___lbmod
  7508 ;;		___wmul
  7509 ;; This function is called by:
  7510 ;;		_ES_Run
  7511 ;;		_ES_RecallEvents
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text31
  7516  001552                     __ptext31:
  7517                           	opt stack 0
  7518  001552                     _ES_DeQueue:
  7519                           	opt stack 21
  7520                           
  7521                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  7522                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  7523                           ;ES_Queue.c: 168: uint8_t NumLeft;
  7524                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;incstack = 0
  7528  001552  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  7529  001556  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  7530                           
  7531                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  7532  00155A  0100               	movlb	0	; () banked
  7533  00155C  EE20 F002          	lfsr	2,2
  7534  001560  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7535  001562  26D9               	addwf	fsr2l,f,c
  7536  001564  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7537  001566  22DA               	addwfc	fsr2h,f,c
  7538  001568  50DF               	movf	indf2,w,c
  7539  00156A  B4D8               	btfsc	status,2,c
  7540  00156C  D06F               	goto	l3504
  7541                           
  7542                           ; BSR set to: 0
  7543                           
  7544                           ;ES_Queue.c: 172: {
  7545                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7546  00156E  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  7547  001572  9EF2               	bcf	intcon,7,c	;volatile
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  7551                           
  7552                           ; BSR set to: 0
  7553  001574  0100               	movlb	0	; () banked
  7554  001576  EE20 F001          	lfsr	2,1
  7555  00157A  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7556  00157C  26D9               	addwf	fsr2l,f,c
  7557  00157E  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7558  001580  22DA               	addwfc	fsr2h,f,c
  7559  001582  50DF               	movf	indf2,w,c
  7560  001584  0100               	movlb	0	; () banked
  7561  001586  6F70               	movwf	??_ES_DeQueue& (0+255),b
  7562  001588  0E01               	movlw	1
  7563  00158A  0100               	movlb	0	; () banked
  7564  00158C  2570               	addwf	??_ES_DeQueue& (0+255),w,b
  7565  00158E  0100               	movlb	0	; () banked
  7566  001590  6F66               	movwf	___wmul@multiplier& (0+255),b
  7567  001592  0100               	movlb	0	; () banked
  7568  001594  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  7569  001596  0E00               	movlw	0
  7570  001598  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  7571  00159A  0E00               	movlw	0
  7572  00159C  0100               	movlb	0	; () banked
  7573  00159E  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7574  0015A0  0E03               	movlw	3
  7575  0015A2  6F68               	movwf	___wmul@multiplicand& (0+255),b
  7576  0015A4  EC3E  F014         	call	___wmul	;wreg free
  7577  0015A8  0100               	movlb	0	; () banked
  7578  0015AA  5166               	movf	?___wmul& (0+255),w,b
  7579  0015AC  0100               	movlb	0	; () banked
  7580  0015AE  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  7581  0015B0  6ED9               	movwf	fsr2l,c
  7582  0015B2  0100               	movlb	0	; () banked
  7583  0015B4  5167               	movf	(?___wmul+1)& (0+255),w,b
  7584  0015B6  0100               	movlb	0	; () banked
  7585  0015B8  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  7586  0015BA  6EDA               	movwf	fsr2h,c
  7587  0015BC  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  7588  0015C0  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  7589  0015C4  CFDE FFE6          	movff	postinc2,postinc1
  7590  0015C8  CFDE FFE6          	movff	postinc2,postinc1
  7591  0015CC  CFDE FFE6          	movff	postinc2,postinc1
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  7595  0015D0  0100               	movlb	0	; () banked
  7596  0015D2  EE20 F001          	lfsr	2,1
  7597  0015D6  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7598  0015D8  26D9               	addwf	fsr2l,f,c
  7599  0015DA  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7600  0015DC  22DA               	addwfc	fsr2h,f,c
  7601  0015DE  2ADF               	incf	indf2,f,c
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  7605  0015E0  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  7606  0015E4  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  7607  0015E8  0100               	movlb	0	; () banked
  7608  0015EA  EE10 F001          	lfsr	1,1
  7609  0015EE  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7610  0015F0  26E1               	addwf	fsr1l,f,c
  7611  0015F2  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7612  0015F4  22E2               	addwfc	fsr1h,f,c
  7613  0015F6  50DE               	movf	postinc2,w,c
  7614  0015F8  5CE6               	subwf	postinc1,w,c
  7615  0015FA  A0D8               	btfss	status,0,c
  7616  0015FC  D019               	goto	l3500
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  7620  0015FE  0100               	movlb	0	; () banked
  7621  001600  EE20 F001          	lfsr	2,1
  7622  001604  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7623  001606  26D9               	addwf	fsr2l,f,c
  7624  001608  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7625  00160A  22DA               	addwfc	fsr2h,f,c
  7626  00160C  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  7627  001610  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  7628  001614  50E7               	movf	indf1,w,c
  7629  001616  0100               	movlb	0	; () banked
  7630  001618  6F60               	movwf	___lbmod@divisor& (0+255),b
  7631  00161A  0100               	movlb	0	; () banked
  7632  00161C  EE10 F001          	lfsr	1,1
  7633  001620  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7634  001622  26E1               	addwf	fsr1l,f,c
  7635  001624  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7636  001626  22E2               	addwfc	fsr1h,f,c
  7637  001628  50E7               	movf	indf1,w,c
  7638  00162A  ECA5  F013         	call	___lbmod
  7639  00162E  6EDF               	movwf	indf2,c
  7640  001630                     l3500:
  7641                           
  7642                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  7643  001630  0100               	movlb	0	; () banked
  7644  001632  EE20 F002          	lfsr	2,2
  7645  001636  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7646  001638  26D9               	addwf	fsr2l,f,c
  7647  00163A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7648  00163C  22DA               	addwfc	fsr2h,f,c
  7649  00163E  06DF               	decf	indf2,f,c
  7650  001640  50DF               	movf	indf2,w,c
  7651  001642  0100               	movlb	0	; () banked
  7652  001644  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  7656  001646  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  7657                           
  7658                           ;ES_Queue.c: 183: }else {
  7659  00164A  D014               	goto	l3510
  7660  00164C                     l3504:
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  7664  00164C  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  7665  001650  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  7666  001654  0E00               	movlw	0
  7667  001656  6EDF               	movwf	indf2,c
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  7671  001658  0100               	movlb	0	; () banked
  7672  00165A  EE20 F001          	lfsr	2,1
  7673  00165E  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  7674  001660  26D9               	addwf	fsr2l,f,c
  7675  001662  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  7676  001664  22DA               	addwfc	fsr2h,f,c
  7677  001666  0E00               	movlw	0
  7678  001668  6EDE               	movwf	postinc2,c
  7679  00166A  0E00               	movlw	0
  7680  00166C  6EDD               	movwf	postdec2,c
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;ES_Queue.c: 186: NumLeft = 0;
  7684  00166E  0E00               	movlw	0
  7685  001670  0100               	movlb	0	; () banked
  7686  001672  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7687  001674                     l3510:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;ES_Queue.c: 187: }
  7691                           ;ES_Queue.c: 188: return NumLeft;
  7692  001674  0100               	movlb	0	; () banked
  7693  001676  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  7694  001678  0012               	return	
  7695  00167A                     __end_of_ES_DeQueue:
  7696                           	opt stack 0
  7697                           tosu	equ	0xFFF
  7698                           tosh	equ	0xFFE
  7699                           tosl	equ	0xFFD
  7700                           pclath	equ	0xFFA
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           indf1	equ	0xFE7
  7711                           postinc1	equ	0xFE6
  7712                           postdec1	equ	0xFE5
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function ___lbmod *****************
  7724 ;; Defined at:
  7725 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  dividend        1    wreg     unsigned char 
  7728 ;;  divisor         1    0[BANK0 ] unsigned char 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  dividend        1    1[BANK0 ] unsigned char 
  7731 ;;  rem             1    3[BANK0 ] unsigned char 
  7732 ;;  counter         1    2[BANK0 ] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      unsigned char 
  7735 ;; Registers used:
  7736 ;;		wreg, status,2, status,0
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7742 ;;      Params:         0       1       0       0
  7743 ;;      Locals:         0       3       0       0
  7744 ;;      Temps:          0       0       0       0
  7745 ;;      Totals:         0       4       0       0
  7746 ;;Total ram usage:        4 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    7
  7749 ;; This function calls:
  7750 ;;		Nothing
  7751 ;; This function is called by:
  7752 ;;		_ES_DeQueue
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text32
  7757  00274A                     __ptext32:
  7758                           	opt stack 0
  7759  00274A                     ___lbmod:
  7760                           	opt stack 21
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;incstack = 0
  7764                           ;___lbmod@dividend stored from wreg
  7765  00274A  0100               	movlb	0	; () banked
  7766  00274C  6F61               	movwf	___lbmod@dividend& (0+255),b
  7767  00274E  0E08               	movlw	8
  7768  002750  0100               	movlb	0	; () banked
  7769  002752  6F62               	movwf	___lbmod@counter& (0+255),b
  7770  002754  0E00               	movlw	0
  7771  002756  0100               	movlb	0	; () banked
  7772  002758  6F63               	movwf	___lbmod@rem& (0+255),b
  7773  00275A                     l3470:
  7774                           
  7775                           ; BSR set to: 0
  7776  00275A  90D8               	bcf	status,0,c
  7777  00275C  0100               	movlb	0	; () banked
  7778  00275E  3561               	rlcf	___lbmod@dividend& (0+255),w,b
  7779  002760  0100               	movlb	0	; () banked
  7780  002762  3563               	rlcf	___lbmod@rem& (0+255),w,b
  7781  002764  0100               	movlb	0	; () banked
  7782  002766  6F63               	movwf	___lbmod@rem& (0+255),b
  7783                           
  7784                           ; BSR set to: 0
  7785  002768  0100               	movlb	0	; () banked
  7786  00276A  90D8               	bcf	status,0,c
  7787  00276C  3761               	rlcf	___lbmod@dividend& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 0
  7790  00276E  0100               	movlb	0	; () banked
  7791  002770  5160               	movf	___lbmod@divisor& (0+255),w,b
  7792  002772  0100               	movlb	0	; () banked
  7793  002774  5D63               	subwf	___lbmod@rem& (0+255),w,b
  7794  002776  A0D8               	btfss	status,0,c
  7795  002778  D004               	goto	l3478
  7796                           
  7797                           ; BSR set to: 0
  7798  00277A  0100               	movlb	0	; () banked
  7799  00277C  5160               	movf	___lbmod@divisor& (0+255),w,b
  7800  00277E  0100               	movlb	0	; () banked
  7801  002780  5F63               	subwf	___lbmod@rem& (0+255),f,b
  7802  002782                     l3478:
  7803                           
  7804                           ; BSR set to: 0
  7805  002782  0100               	movlb	0	; () banked
  7806  002784  2F62               	decfsz	___lbmod@counter& (0+255),f,b
  7807  002786  D7E9               	goto	l3470
  7808                           
  7809                           ; BSR set to: 0
  7810                           
  7811                           ; BSR set to: 0
  7812  002788  0100               	movlb	0	; () banked
  7813  00278A  5163               	movf	___lbmod@rem& (0+255),w,b
  7814  00278C  0012               	return	
  7815  00278E                     __end_of___lbmod:
  7816                           	opt stack 0
  7817                           tosu	equ	0xFFF
  7818                           tosh	equ	0xFFE
  7819                           tosl	equ	0xFFD
  7820                           pclath	equ	0xFFA
  7821                           tblptru	equ	0xFF8
  7822                           tblptrh	equ	0xFF7
  7823                           tblptrl	equ	0xFF6
  7824                           tablat	equ	0xFF5
  7825                           prodh	equ	0xFF4
  7826                           prodl	equ	0xFF3
  7827                           intcon	equ	0xFF2
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           indf1	equ	0xFE7
  7831                           postinc1	equ	0xFE6
  7832                           postdec1	equ	0xFE5
  7833                           fsr1h	equ	0xFE2
  7834                           fsr1l	equ	0xFE1
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           plusw2	equ	0xFDB
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _ES_Initialize *****************
  7844 ;; Defined at:
  7845 ;;		line 242 in file "ES_Framework.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  NewRate         2   33[BANK0 ] enum E15423
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  i               1   35[BANK0 ] unsigned char 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      enum E15494
  7852 ;; Registers used:
  7853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7859 ;;      Params:         0       2       0       0
  7860 ;;      Locals:         0       1       0       0
  7861 ;;      Temps:          0       0       0       0
  7862 ;;      Totals:         0       3       0       0
  7863 ;;Total ram usage:        3 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:   11
  7866 ;; This function calls:
  7867 ;;		_ES_InitQueue
  7868 ;;		_ES_Timer_Init
  7869 ;;		_InitPatternControlService
  7870 ;;		_InitSPI32ControlService
  7871 ;; This function is called by:
  7872 ;;		_main
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text33
  7877  001A80                     __ptext33:
  7878                           	opt stack 0
  7879  001A80                     _ES_Initialize:
  7880                           	opt stack 19
  7881                           
  7882                           ;ES_Framework.c: 243: uint8_t i;
  7883                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;incstack = 0
  7887  001A80  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  7888  001A84  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  7889  001A88  EC72  F015         	call	_ES_Timer_Init	;wreg free
  7890                           
  7891                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  7892  001A8C  0E00               	movlw	0
  7893  001A8E  0100               	movlb	0	; () banked
  7894  001A90  6F83               	movwf	ES_Initialize@i& (0+255),b
  7895  001A92                     l3716:
  7896                           
  7897                           ; BSR set to: 0
  7898  001A92  0E01               	movlw	1
  7899  001A94  0100               	movlb	0	; () banked
  7900  001A96  6583               	cpfsgt	ES_Initialize@i& (0+255),b
  7901  001A98  D001               	goto	l3720
  7902  001A9A  D066               	goto	l3740
  7903  001A9C                     l3720:
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  7907                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  7908  001A9C  0100               	movlb	0	; () banked
  7909  001A9E  5183               	movf	ES_Initialize@i& (0+255),w,b
  7910  001AA0  0D04               	mullw	4
  7911  001AA2  0E50               	movlw	low _ServDescList
  7912  001AA4  24F3               	addwf	prodl,w,c
  7913  001AA6  6EF6               	movwf	tblptrl,c
  7914  001AA8  0E03               	movlw	high _ServDescList
  7915  001AAA  20F4               	addwfc	prodh,w,c
  7916  001AAC  6EF7               	movwf	tblptrh,c
  7917  001AAE                     	if	0	;There are less than 3 active tblptr bytes
  7918  001AAE                     	endif
  7919  001AAE  0009               	tblrd		*+
  7920  001AB0  50F5               	movf	tablat,w,c
  7921  001AB2  0009               	tblrd		*+
  7922  001AB4  10F5               	iorwf	tablat,w,c
  7923  001AB6  B4D8               	btfsc	status,2,c
  7924  001AB8  D013               	goto	l3724
  7925                           
  7926                           ; BSR set to: 0
  7927  001ABA  0100               	movlb	0	; () banked
  7928  001ABC  5183               	movf	ES_Initialize@i& (0+255),w,b
  7929  001ABE  0D04               	mullw	4
  7930  001AC0  0E02               	movlw	2
  7931  001AC2  26F3               	addwf	prodl,f,c
  7932  001AC4  0E00               	movlw	0
  7933  001AC6  22F4               	addwfc	prodh,f,c
  7934  001AC8  0E50               	movlw	low _ServDescList
  7935  001ACA  24F3               	addwf	prodl,w,c
  7936  001ACC  6EF6               	movwf	tblptrl,c
  7937  001ACE  0E03               	movlw	high _ServDescList
  7938  001AD0  20F4               	addwfc	prodh,w,c
  7939  001AD2  6EF7               	movwf	tblptrh,c
  7940  001AD4                     	if	0	;There are less than 3 active tblptr bytes
  7941  001AD4                     	endif
  7942  001AD4  0009               	tblrd		*+
  7943  001AD6  50F5               	movf	tablat,w,c
  7944  001AD8  0009               	tblrd		*+
  7945  001ADA  10F5               	iorwf	tablat,w,c
  7946  001ADC  A4D8               	btfss	status,2,c
  7947  001ADE  D002               	goto	l3728
  7948  001AE0                     l3724:
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;ES_Framework.c: 249: return FailedPointer;
  7952  001AE0  0E03               	movlw	3
  7953                           
  7954                           ; BSR set to: 0
  7955  001AE2  0012               	return	
  7956  001AE4                     l3728:
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  7960  001AE4  0100               	movlb	0	; () banked
  7961  001AE6  5183               	movf	ES_Initialize@i& (0+255),w,b
  7962  001AE8  0D03               	mullw	3
  7963  001AEA  0E58               	movlw	low _EventQueues
  7964  001AEC  24F3               	addwf	prodl,w,c
  7965  001AEE  6EF6               	movwf	tblptrl,c
  7966  001AF0  0E03               	movlw	high _EventQueues
  7967  001AF2  20F4               	addwfc	prodh,w,c
  7968  001AF4  6EF7               	movwf	tblptrh,c
  7969  001AF6                     	if	0	;There are less than 3 active tblptr bytes
  7970  001AF6                     	endif
  7971  001AF6  0009               	tblrd		*+
  7972  001AF8  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
  7973  001AFC  000A               	tblrd		*-
  7974  001AFE  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
  7975  001B02  0100               	movlb	0	; () banked
  7976  001B04  5183               	movf	ES_Initialize@i& (0+255),w,b
  7977  001B06  0D03               	mullw	3
  7978  001B08  0E02               	movlw	2
  7979  001B0A  26F3               	addwf	prodl,f,c
  7980  001B0C  0E00               	movlw	0
  7981  001B0E  22F4               	addwfc	prodh,f,c
  7982  001B10  0E58               	movlw	low _EventQueues
  7983  001B12  24F3               	addwf	prodl,w,c
  7984  001B14  6EF6               	movwf	tblptrl,c
  7985  001B16  0E03               	movlw	high _EventQueues
  7986  001B18  20F4               	addwfc	prodh,w,c
  7987  001B1A  6EF7               	movwf	tblptrh,c
  7988  001B1C                     	if	0	;There are less than 3 active tblptr bytes
  7989  001B1C                     	endif
  7990  001B1C  0008               	tblrd		*
  7991  001B1E  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
  7992  001B22  ECE6  F013         	call	_ES_InitQueue	;wreg free
  7993                           
  7994                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  7995  001B26  0100               	movlb	0	; () banked
  7996  001B28  5183               	movf	ES_Initialize@i& (0+255),w,b
  7997  001B2A  0D04               	mullw	4
  7998  001B2C  0E50               	movlw	low _ServDescList
  7999  001B2E  24F3               	addwf	prodl,w,c
  8000  001B30  6EF6               	movwf	tblptrl,c
  8001  001B32  0E03               	movlw	high _ServDescList
  8002  001B34  20F4               	addwfc	prodh,w,c
  8003  001B36  6EF7               	movwf	tblptrh,c
  8004  001B38                     	if	0	;There are less than 3 active tblptr bytes
  8005  001B38                     	endif
  8006  001B38  D801               	call	u2778
  8007  001B3A  D00E               	goto	u2779
  8008  001B3C                     u2778:
  8009  001B3C  0005               	push	
  8010  001B3E  6EFA               	movwf	pclath,c
  8011  001B40  0009               	tblrd		*+
  8012  001B42  50F5               	movf	tablat,w,c
  8013  001B44  6EFD               	movwf	tosl,c
  8014  001B46  0009               	tblrd		*+
  8015  001B48  50F5               	movf	tablat,w,c
  8016  001B4A  6EFE               	movwf	tosh,c
  8017  001B4C  50F8               	movf	tblptru,w,c
  8018  001B4E  6EFF               	movwf	tosu,c
  8019  001B50  50FA               	movf	pclath,w,c
  8020  001B52  0100               	movlb	0	; () banked
  8021  001B54  5183               	movf	ES_Initialize@i& (0+255),w,b
  8022  001B56  0012               	return		;indir
  8023  001B58                     u2779:
  8024  001B58  06E8               	decf	wreg,f,c
  8025  001B5A  B4D8               	btfsc	status,2,c
  8026  001B5C  D002               	goto	l3736
  8027                           
  8028                           ;ES_Framework.c: 254: return FailedInit;
  8029  001B5E  0E05               	movlw	5
  8030  001B60  0012               	return	
  8031  001B62                     l3736:
  8032  001B62  0100               	movlb	0	; () banked
  8033  001B64  2B83               	incf	ES_Initialize@i& (0+255),f,b
  8034  001B66  D795               	goto	l3716
  8035  001B68                     l3740:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;ES_Framework.c: 255: }
  8039                           ;ES_Framework.c: 256: return Success;
  8040  001B68  0E00               	movlw	0
  8041  001B6A  0012               	return	
  8042  001B6C                     __end_of_ES_Initialize:
  8043                           	opt stack 0
  8044                           tosu	equ	0xFFF
  8045                           tosh	equ	0xFFE
  8046                           tosl	equ	0xFFD
  8047                           pclath	equ	0xFFA
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           indf1	equ	0xFE7
  8058                           postinc1	equ	0xFE6
  8059                           postdec1	equ	0xFE5
  8060                           fsr1h	equ	0xFE2
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           plusw2	equ	0xFDB
  8066                           fsr2h	equ	0xFDA
  8067                           fsr2l	equ	0xFD9
  8068                           status	equ	0xFD8
  8069                           
  8070 ;; *************** function _InitPatternControlService *****************
  8071 ;; Defined at:
  8072 ;;		line 97 in file "Pattern_ControlService.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;  Priority        1    wreg     unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  Priority        1   32[BANK0 ] unsigned char 
  8077 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      unsigned char 
  8080 ;; Registers used:
  8081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8087 ;;      Params:         0       0       0       0
  8088 ;;      Locals:         0       4       0       0
  8089 ;;      Temps:          0       0       0       0
  8090 ;;      Totals:         0       4       0       0
  8091 ;;Total ram usage:        4 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:   10
  8094 ;; This function calls:
  8095 ;;		_CAN_Init
  8096 ;;		_DotStar_Init
  8097 ;;		_ES_PostToService
  8098 ;;		_SetupPattern
  8099 ;; This function is called by:
  8100 ;;		_ES_Initialize
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           	psect	text34
  8105  0025A4                     __ptext34:
  8106                           	opt stack 0
  8107  0025A4                     _InitPatternControlService:
  8108                           	opt stack 19
  8109                           
  8110                           ;incstack = 0
  8111                           ;InitPatternControlService@Priority stored from wreg
  8112  0025A4  0100               	movlb	0	; () banked
  8113  0025A6  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
  8114                           
  8115                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  8116                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  8117  0025A8  C080  F0E3         	movff	InitPatternControlService@Priority,_MyPriority
  8118                           
  8119                           ;Pattern_ControlService.c: 103: DotStar_Init(&PatternConfigs[1]);
  8120  0025AC  0E5A               	movlw	low (_PatternConfigs+1)
  8121  0025AE  0100               	movlb	0	; () banked
  8122  0025B0  6F60               	movwf	DotStar_Init@brightnessPointer& (0+255),b
  8123  0025B2  0E00               	movlw	high (_PatternConfigs+1)
  8124  0025B4  0100               	movlb	0	; () banked
  8125  0025B6  6F61               	movwf	(DotStar_Init@brightnessPointer+1)& (0+255),b
  8126  0025B8  EC2E  F013         	call	_DotStar_Init
  8127                           
  8128                           ;Pattern_ControlService.c: 104: SetupPattern(&PatternConfigs[0], &PatternConfigs[2]);
  8129  0025BC  0E59               	movlw	low _PatternConfigs
  8130  0025BE  0100               	movlb	0	; () banked
  8131  0025C0  6F60               	movwf	SetupPattern@patternIDPointer& (0+255),b
  8132  0025C2  0E00               	movlw	high _PatternConfigs
  8133  0025C4  0100               	movlb	0	; () banked
  8134  0025C6  6F61               	movwf	(SetupPattern@patternIDPointer+1)& (0+255),b
  8135  0025C8  0E5B               	movlw	low (_PatternConfigs+2)
  8136  0025CA  0100               	movlb	0	; () banked
  8137  0025CC  6F62               	movwf	SetupPattern@listeningFocusPointer& (0+255),b
  8138  0025CE  0E00               	movlw	high (_PatternConfigs+2)
  8139  0025D0  0100               	movlb	0	; () banked
  8140  0025D2  6F63               	movwf	(SetupPattern@listeningFocusPointer+1)& (0+255),b
  8141  0025D4  EC61  F015         	call	_SetupPattern	;wreg free
  8142                           
  8143                           ;Pattern_ControlService.c: 106: CAN_Init();
  8144  0025D8  EC85  F015         	call	_CAN_Init	;wreg free
  8145                           
  8146                           ;Pattern_ControlService.c: 108: CurrentState = Pattern_Startup;
  8147  0025DC  0E00               	movlw	0
  8148  0025DE  0100               	movlb	0	; () banked
  8149  0025E0  6FE1               	movwf	_CurrentState& (0+255),b
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;Pattern_ControlService.c: 110: ThisEvent.EventType = ES_INIT;
  8153  0025E2  0E02               	movlw	2
  8154  0025E4  0100               	movlb	0	; () banked
  8155  0025E6  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;Pattern_ControlService.c: 111: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8159  0025E8  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  8160  0025EC  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8161  0025F0  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8162  0025F4  0100               	movlb	0	; () banked
  8163  0025F6  51E3               	movf	_MyPriority& (0+255),w,b
  8164  0025F8  EC2A  F012         	call	_ES_PostToService
  8165  0025FC  06E8               	decf	wreg,f,c
  8166  0025FE  A4D8               	btfss	status,2,c
  8167  002600  D002               	goto	l3558
  8168                           
  8169                           ;Pattern_ControlService.c: 112: {
  8170                           ;Pattern_ControlService.c: 113: return 1;
  8171  002602  0E01               	movlw	1
  8172                           
  8173                           ;Pattern_ControlService.c: 114: }else
  8174  002604  0012               	return	
  8175  002606                     l3558:
  8176                           
  8177                           ;Pattern_ControlService.c: 115: {
  8178                           ;Pattern_ControlService.c: 116: return 0;
  8179  002606  0E00               	movlw	0
  8180  002608  0012               	return	
  8181  00260A                     __end_of_InitPatternControlService:
  8182                           	opt stack 0
  8183                           tosu	equ	0xFFF
  8184                           tosh	equ	0xFFE
  8185                           tosl	equ	0xFFD
  8186                           pclath	equ	0xFFA
  8187                           tblptru	equ	0xFF8
  8188                           tblptrh	equ	0xFF7
  8189                           tblptrl	equ	0xFF6
  8190                           tablat	equ	0xFF5
  8191                           prodh	equ	0xFF4
  8192                           prodl	equ	0xFF3
  8193                           intcon	equ	0xFF2
  8194                           postinc0	equ	0xFEE
  8195                           wreg	equ	0xFE8
  8196                           indf1	equ	0xFE7
  8197                           postinc1	equ	0xFE6
  8198                           postdec1	equ	0xFE5
  8199                           fsr1h	equ	0xFE2
  8200                           fsr1l	equ	0xFE1
  8201                           indf2	equ	0xFDF
  8202                           postinc2	equ	0xFDE
  8203                           postdec2	equ	0xFDD
  8204                           plusw2	equ	0xFDB
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _InitSPI32ControlService *****************
  8210 ;; Defined at:
  8211 ;;		line 80 in file "SPI32_ControlService.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  Priority        1    wreg     unsigned char 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  Priority        1   32[BANK0 ] unsigned char 
  8216 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      unsigned char 
  8219 ;; Registers used:
  8220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8226 ;;      Params:         0       0       0       0
  8227 ;;      Locals:         0       4       0       0
  8228 ;;      Temps:          0       0       0       0
  8229 ;;      Totals:         0       4       0       0
  8230 ;;Total ram usage:        4 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:   10
  8233 ;; This function calls:
  8234 ;;		_ES_PostToService
  8235 ;;		_SPI32_Init
  8236 ;; This function is called by:
  8237 ;;		_ES_Initialize
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text35
  8242  002808                     __ptext35:
  8243                           	opt stack 0
  8244  002808                     _InitSPI32ControlService:
  8245                           	opt stack 19
  8246                           
  8247                           ;incstack = 0
  8248                           ;InitSPI32ControlService@Priority stored from wreg
  8249  002808  0100               	movlb	0	; () banked
  8250  00280A  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
  8251                           
  8252                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  8253                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  8254  00280C  C080  F0E0         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  8255                           
  8256                           ;SPI32_ControlService.c: 86: SPI32_Init();
  8257  002810  EC95  F015         	call	_SPI32_Init	;wreg free
  8258                           
  8259                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  8260  002814  0E00               	movlw	0
  8261  002816  0100               	movlb	0	; () banked
  8262  002818  6FDF               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  8266  00281A  0E02               	movlw	2
  8267  00281C  0100               	movlb	0	; () banked
  8268  00281E  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8272  002820  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  8273  002824  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8274  002828  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8275  00282C  0100               	movlb	0	; () banked
  8276  00282E  51E0               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  8277  002830  EC2A  F012         	call	_ES_PostToService
  8278  002834  06E8               	decf	wreg,f,c
  8279  002836  A4D8               	btfss	status,2,c
  8280  002838  D002               	goto	l3626
  8281                           
  8282                           ;SPI32_ControlService.c: 92: {
  8283                           ;SPI32_ControlService.c: 93: return 1;
  8284  00283A  0E01               	movlw	1
  8285                           
  8286                           ;SPI32_ControlService.c: 94: }else
  8287  00283C  0012               	return	
  8288  00283E                     l3626:
  8289                           
  8290                           ;SPI32_ControlService.c: 95: {
  8291                           ;SPI32_ControlService.c: 96: return 0;
  8292  00283E  0E00               	movlw	0
  8293  002840  0012               	return	
  8294  002842                     __end_of_InitSPI32ControlService:
  8295                           	opt stack 0
  8296                           tosu	equ	0xFFF
  8297                           tosh	equ	0xFFE
  8298                           tosl	equ	0xFFD
  8299                           pclath	equ	0xFFA
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postinc1	equ	0xFE6
  8311                           postdec1	equ	0xFE5
  8312                           fsr1h	equ	0xFE2
  8313                           fsr1l	equ	0xFE1
  8314                           indf2	equ	0xFDF
  8315                           postinc2	equ	0xFDE
  8316                           postdec2	equ	0xFDD
  8317                           plusw2	equ	0xFDB
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _SPI32_Init *****************
  8323 ;; Defined at:
  8324 ;;		line 65 in file "SPI32_HW.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      void 
  8331 ;; Registers used:
  8332 ;;		wreg, status,2, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8338 ;;      Params:         0       0       0       0
  8339 ;;      Locals:         0       0       0       0
  8340 ;;      Temps:          0       0       0       0
  8341 ;;      Totals:         0       0       0       0
  8342 ;;Total ram usage:        0 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    8
  8345 ;; This function calls:
  8346 ;;		_HW_Init
  8347 ;; This function is called by:
  8348 ;;		_InitSPI32ControlService
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text36
  8353  002B2A                     __ptext36:
  8354                           	opt stack 0
  8355  002B2A                     _SPI32_Init:
  8356                           	opt stack 20
  8357                           
  8358                           ;SPI32_HW.c: 67: HW_Init();
  8359                           
  8360                           ;incstack = 0
  8361  002B2A  ECB2  F014         	call	_HW_Init	;wreg free
  8362  002B2E  0012               	return		;funcret
  8363  002B30                     __end_of_SPI32_Init:
  8364                           	opt stack 0
  8365                           tosu	equ	0xFFF
  8366                           tosh	equ	0xFFE
  8367                           tosl	equ	0xFFD
  8368                           pclath	equ	0xFFA
  8369                           tblptru	equ	0xFF8
  8370                           tblptrh	equ	0xFF7
  8371                           tblptrl	equ	0xFF6
  8372                           tablat	equ	0xFF5
  8373                           prodh	equ	0xFF4
  8374                           prodl	equ	0xFF3
  8375                           intcon	equ	0xFF2
  8376                           postinc0	equ	0xFEE
  8377                           wreg	equ	0xFE8
  8378                           indf1	equ	0xFE7
  8379                           postinc1	equ	0xFE6
  8380                           postdec1	equ	0xFE5
  8381                           fsr1h	equ	0xFE2
  8382                           fsr1l	equ	0xFE1
  8383                           indf2	equ	0xFDF
  8384                           postinc2	equ	0xFDE
  8385                           postdec2	equ	0xFDD
  8386                           plusw2	equ	0xFDB
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8
  8390                           
  8391 ;; *************** function _HW_Init *****************
  8392 ;; Defined at:
  8393 ;;		line 127 in file "SPI32_HW.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, status,2
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8407 ;;      Params:         0       0       0       0
  8408 ;;      Locals:         0       0       0       0
  8409 ;;      Temps:          0       0       0       0
  8410 ;;      Totals:         0       0       0       0
  8411 ;;Total ram usage:        0 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    7
  8414 ;; This function calls:
  8415 ;;		Nothing
  8416 ;; This function is called by:
  8417 ;;		_SPI32_Init
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text37
  8422  002964                     __ptext37:
  8423                           	opt stack 0
  8424  002964                     _HW_Init:
  8425                           	opt stack 20
  8426                           
  8427                           ;SPI32_HW.c: 133: PORTC = 0x00;
  8428                           
  8429                           ;incstack = 0
  8430  002964  0E00               	movlw	0
  8431  002966  6E82               	movwf	3970,c	;volatile
  8432                           
  8433                           ;SPI32_HW.c: 134: LATC = 0x00;
  8434  002968  0E00               	movlw	0
  8435  00296A  6E8B               	movwf	3979,c	;volatile
  8436                           
  8437                           ;SPI32_HW.c: 135: ADCON1 = 0x0F;
  8438  00296C  0E0F               	movlw	15
  8439  00296E  6EC1               	movwf	4033,c	;volatile
  8440                           
  8441                           ;SPI32_HW.c: 136: TRISC = 0x00;
  8442  002970  0E00               	movlw	0
  8443  002972  6E94               	movwf	3988,c	;volatile
  8444                           
  8445                           ;SPI32_HW.c: 138: SSPIE = 1;
  8446  002974  869D               	bsf	3997,3,c	;volatile
  8447                           
  8448                           ;SPI32_HW.c: 142: SSPCON1 = 0x00;
  8449  002976  0E00               	movlw	0
  8450  002978  6EC6               	movwf	4038,c	;volatile
  8451                           
  8452                           ;SPI32_HW.c: 143: SSPSTAT = 0b01000000;
  8453  00297A  0E40               	movlw	64
  8454  00297C  6EC7               	movwf	4039,c	;volatile
  8455                           
  8456                           ;SPI32_HW.c: 144: SSPADD = 0xFF;
  8457  00297E  68C8               	setf	4040,c	;volatile
  8458                           
  8459                           ;SPI32_HW.c: 145: SSPCON1 = 0b00110000;
  8460  002980  0E30               	movlw	48
  8461  002982  6EC6               	movwf	4038,c	;volatile
  8462  002984  0012               	return		;funcret
  8463  002986                     __end_of_HW_Init:
  8464                           	opt stack 0
  8465                           tosu	equ	0xFFF
  8466                           tosh	equ	0xFFE
  8467                           tosl	equ	0xFFD
  8468                           pclath	equ	0xFFA
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           intcon	equ	0xFF2
  8476                           postinc0	equ	0xFEE
  8477                           wreg	equ	0xFE8
  8478                           indf1	equ	0xFE7
  8479                           postinc1	equ	0xFE6
  8480                           postdec1	equ	0xFE5
  8481                           fsr1h	equ	0xFE2
  8482                           fsr1l	equ	0xFE1
  8483                           indf2	equ	0xFDF
  8484                           postinc2	equ	0xFDE
  8485                           postdec2	equ	0xFDD
  8486                           plusw2	equ	0xFDB
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _SetupPattern *****************
  8492 ;; Defined at:
  8493 ;;		line 66 in file "Pattern_PtrnGenerator.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  patternIDPoi    2    0[BANK0 ] PTR unsigned char 
  8496 ;;		 -> PatternConfigs(4), 
  8497 ;;  listeningFoc    2    2[BANK0 ] PTR unsigned char 
  8498 ;;		 -> PatternConfigs(4), 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8510 ;;      Params:         0       4       0       0
  8511 ;;      Locals:         0       0       0       0
  8512 ;;      Temps:          0       0       0       0
  8513 ;;      Totals:         0       4       0       0
  8514 ;;Total ram usage:        4 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    7
  8517 ;; This function calls:
  8518 ;;		Nothing
  8519 ;; This function is called by:
  8520 ;;		_InitPatternControlService
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           	psect	text38
  8525  002AC2                     __ptext38:
  8526                           	opt stack 0
  8527  002AC2                     _SetupPattern:
  8528                           	opt stack 21
  8529                           
  8530                           ;Pattern_PtrnGenerator.c: 68: PatternID = patternIDPointer;
  8531                           
  8532                           ;incstack = 0
  8533  002AC2  C060  F0D8         	movff	SetupPattern@patternIDPointer,_PatternID
  8534  002AC6  C061  F0D9         	movff	SetupPattern@patternIDPointer+1,_PatternID+1
  8535                           
  8536                           ;Pattern_PtrnGenerator.c: 69: ListeningFocus = listeningFocusPointer;
  8537  002ACA  C062  F0D6         	movff	SetupPattern@listeningFocusPointer,_ListeningFocus
  8538  002ACE  C063  F0D7         	movff	SetupPattern@listeningFocusPointer+1,_ListeningFocus+1
  8539  002AD2  0012               	return		;funcret
  8540  002AD4                     __end_of_SetupPattern:
  8541                           	opt stack 0
  8542                           tosu	equ	0xFFF
  8543                           tosh	equ	0xFFE
  8544                           tosl	equ	0xFFD
  8545                           pclath	equ	0xFFA
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           postinc0	equ	0xFEE
  8554                           wreg	equ	0xFE8
  8555                           indf1	equ	0xFE7
  8556                           postinc1	equ	0xFE6
  8557                           postdec1	equ	0xFE5
  8558                           fsr1h	equ	0xFE2
  8559                           fsr1l	equ	0xFE1
  8560                           indf2	equ	0xFDF
  8561                           postinc2	equ	0xFDE
  8562                           postdec2	equ	0xFDD
  8563                           plusw2	equ	0xFDB
  8564                           fsr2h	equ	0xFDA
  8565                           fsr2l	equ	0xFD9
  8566                           status	equ	0xFD8
  8567                           
  8568 ;; *************** function _ES_PostToService *****************
  8569 ;; Defined at:
  8570 ;;		line 351 in file "ES_Framework.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  WhichService    1    wreg     unsigned char 
  8573 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  WhichService    1   28[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  1    wreg      unsigned char 
  8578 ;; Registers used:
  8579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8585 ;;      Params:         0       3       0       0
  8586 ;;      Locals:         0       1       0       0
  8587 ;;      Temps:          0       2       0       0
  8588 ;;      Totals:         0       6       0       0
  8589 ;;Total ram usage:        6 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    9
  8592 ;; This function calls:
  8593 ;;		_ES_EnQueueFIFO
  8594 ;; This function is called by:
  8595 ;;		_InitPatternControlService
  8596 ;;		_PostPatternControlService
  8597 ;;		_InitSPI32ControlService
  8598 ;;		_PostSPI32ControlService
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text39
  8603  002454                     __ptext39:
  8604                           	opt stack 0
  8605  002454                     _ES_PostToService:
  8606                           	opt stack 17
  8607                           
  8608                           ;incstack = 0
  8609                           ;ES_PostToService@WhichService stored from wreg
  8610  002454  0100               	movlb	0	; () banked
  8611  002456  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
  8612                           
  8613                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  8614                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  8615                           ;ES_Framework.c: 354: 1 )){
  8616  002458  0E02               	movlw	2
  8617  00245A  0100               	movlb	0	; () banked
  8618  00245C  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
  8619  00245E  D033               	goto	l2800
  8620                           
  8621                           ; BSR set to: 0
  8622  002460  0100               	movlb	0	; () banked
  8623  002462  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  8624  002464  0D03               	mullw	3
  8625  002466  0E58               	movlw	low _EventQueues
  8626  002468  24F3               	addwf	prodl,w,c
  8627  00246A  6EF6               	movwf	tblptrl,c
  8628  00246C  0E03               	movlw	high _EventQueues
  8629  00246E  20F4               	addwfc	prodh,w,c
  8630  002470  6EF7               	movwf	tblptrh,c
  8631  002472                     	if	0	;There are less than 3 active tblptr bytes
  8632  002472                     	endif
  8633  002472  0009               	tblrd		*+
  8634  002474  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
  8635  002478  000A               	tblrd		*-
  8636  00247A  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  8637  00247E  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  8638  002482  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  8639  002486  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  8640  00248A  ECB6  F00D         	call	_ES_EnQueueFIFO	;wreg free
  8641  00248E  06E8               	decf	wreg,f,c
  8642  002490  A4D8               	btfss	status,2,c
  8643  002492  D019               	goto	l2800
  8644                           
  8645                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  8646  002494  0100               	movlb	0	; () banked
  8647  002496  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  8648  002498  0D02               	mullw	2
  8649  00249A  0E01               	movlw	low _BitNum2SetMask
  8650  00249C  24F3               	addwf	prodl,w,c
  8651  00249E  6EF6               	movwf	tblptrl,c
  8652  0024A0  0E03               	movlw	high _BitNum2SetMask
  8653  0024A2  20F4               	addwfc	prodh,w,c
  8654  0024A4  6EF7               	movwf	tblptrh,c
  8655  0024A6                     	if	0	;There are less than 3 active tblptr bytes
  8656  0024A6                     	endif
  8657  0024A6  0009               	tblrd		*+
  8658  0024A8  CFF5 F07A          	movff	tablat,??_ES_PostToService
  8659  0024AC  0009               	tblrd		*+
  8660  0024AE  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
  8661  0024B2  0100               	movlb	0	; () banked
  8662  0024B4  517A               	movf	??_ES_PostToService& (0+255),w,b
  8663  0024B6  0100               	movlb	0	; () banked
  8664  0024B8  13DA               	iorwf	_Ready& (0+255),f,b
  8665  0024BA  0100               	movlb	0	; () banked
  8666  0024BC  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
  8667  0024BE  0100               	movlb	0	; () banked
  8668  0024C0  13DB               	iorwf	(_Ready+1)& (0+255),f,b
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;ES_Framework.c: 356: return 1;
  8672  0024C2  0E01               	movlw	1
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;ES_Framework.c: 357: } else
  8676                           
  8677                           ; BSR set to: 0
  8678  0024C4  0012               	return	
  8679  0024C6                     l2800:
  8680                           
  8681                           ;ES_Framework.c: 358: return 0;
  8682  0024C6  0E00               	movlw	0
  8683  0024C8  0012               	return	
  8684  0024CA                     __end_of_ES_PostToService:
  8685                           	opt stack 0
  8686                           tosu	equ	0xFFF
  8687                           tosh	equ	0xFFE
  8688                           tosl	equ	0xFFD
  8689                           pclath	equ	0xFFA
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           indf1	equ	0xFE7
  8700                           postinc1	equ	0xFE6
  8701                           postdec1	equ	0xFE5
  8702                           fsr1h	equ	0xFE2
  8703                           fsr1l	equ	0xFE1
  8704                           indf2	equ	0xFDF
  8705                           postinc2	equ	0xFDE
  8706                           postdec2	equ	0xFDD
  8707                           plusw2	equ	0xFDB
  8708                           fsr2h	equ	0xFDA
  8709                           fsr2l	equ	0xFD9
  8710                           status	equ	0xFD8
  8711                           
  8712 ;; *************** function _ES_EnQueueFIFO *****************
  8713 ;; Defined at:
  8714 ;;		line 85 in file "ES_Queue.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  8717 ;;		 -> Queue1(12), Queue0(12), 
  8718 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  8721 ;;		 -> Queue1(12), Queue0(12), 
  8722 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      unsigned char 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8732 ;;      Params:         0       5       0       0
  8733 ;;      Locals:         0       3       0       0
  8734 ;;      Temps:          0       3       0       0
  8735 ;;      Totals:         0      11       0       0
  8736 ;;Total ram usage:       11 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    8
  8739 ;; This function calls:
  8740 ;;		___awmod
  8741 ;;		___wmul
  8742 ;; This function is called by:
  8743 ;;		_ES_PostToService
  8744 ;;		_ES_PostAll
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text40
  8749  001B6C                     __ptext40:
  8750                           	opt stack 0
  8751  001B6C                     _ES_EnQueueFIFO:
  8752                           	opt stack 17
  8753                           
  8754                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  8755                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  8756                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  8757                           
  8758                           ;incstack = 0
  8759  001B6C  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  8760  001B70  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  8761                           
  8762                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  8763  001B74  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  8764  001B78  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8765  001B7C  0100               	movlb	0	; () banked
  8766  001B7E  EE10 F002          	lfsr	1,2
  8767  001B82  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  8768  001B84  26E1               	addwf	fsr1l,f,c
  8769  001B86  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  8770  001B88  22E2               	addwfc	fsr1h,f,c
  8771  001B8A  50DE               	movf	postinc2,w,c
  8772  001B8C  5CE6               	subwf	postinc1,w,c
  8773  001B8E  B0D8               	btfsc	status,0,c
  8774  001B90  D05C               	goto	l2784
  8775                           
  8776                           ; BSR set to: 0
  8777                           
  8778                           ;ES_Queue.c: 92: {
  8779                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  8780  001B92  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  8781  001B96  9EF2               	bcf	intcon,7,c	;volatile
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  8785                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  8786                           
  8787                           ; BSR set to: 0
  8788  001B98  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  8789  001B9C  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8790  001BA0  50DF               	movf	indf2,w,c
  8791  001BA2  0100               	movlb	0	; () banked
  8792  001BA4  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
  8793  001BA6  0100               	movlb	0	; () banked
  8794  001BA8  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  8795  001BAA  0100               	movlb	0	; () banked
  8796  001BAC  6F62               	movwf	___awmod@divisor& (0+255),b
  8797  001BAE  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  8798  001BB0  0100               	movlb	0	; () banked
  8799  001BB2  EE20 F002          	lfsr	2,2
  8800  001BB6  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  8801  001BB8  26D9               	addwf	fsr2l,f,c
  8802  001BBA  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  8803  001BBC  22DA               	addwfc	fsr2h,f,c
  8804  001BBE  50DF               	movf	indf2,w,c
  8805  001BC0  0100               	movlb	0	; () banked
  8806  001BC2  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  8807  001BC4  0100               	movlb	0	; () banked
  8808  001BC6  EE20 F001          	lfsr	2,1
  8809  001BCA  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  8810  001BCC  26D9               	addwf	fsr2l,f,c
  8811  001BCE  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  8812  001BD0  22DA               	addwfc	fsr2h,f,c
  8813  001BD2  50DF               	movf	indf2,w,c
  8814  001BD4  0100               	movlb	0	; () banked
  8815  001BD6  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  8816  001BD8  0100               	movlb	0	; () banked
  8817  001BDA  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  8818  001BDC  0100               	movlb	0	; () banked
  8819  001BDE  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  8820  001BE0  0100               	movlb	0	; () banked
  8821  001BE2  6F60               	movwf	___awmod@dividend& (0+255),b
  8822  001BE4  0100               	movlb	0	; () banked
  8823  001BE6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8824  001BE8  0100               	movlb	0	; () banked
  8825  001BEA  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  8826  001BEC  EC54  F010         	call	___awmod	;wreg free
  8827  001BF0  0E01               	movlw	1
  8828  001BF2  0100               	movlb	0	; () banked
  8829  001BF4  2560               	addwf	?___awmod& (0+255),w,b
  8830  001BF6  0100               	movlb	0	; () banked
  8831  001BF8  6F66               	movwf	___wmul@multiplier& (0+255),b
  8832  001BFA  0E00               	movlw	0
  8833  001BFC  0100               	movlb	0	; () banked
  8834  001BFE  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  8835  001C00  0100               	movlb	0	; () banked
  8836  001C02  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  8837  001C04  0E00               	movlw	0
  8838  001C06  0100               	movlb	0	; () banked
  8839  001C08  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8840  001C0A  0E03               	movlw	3
  8841  001C0C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  8842  001C0E  EC3E  F014         	call	___wmul	;wreg free
  8843  001C12  0100               	movlb	0	; () banked
  8844  001C14  5166               	movf	?___wmul& (0+255),w,b
  8845  001C16  0100               	movlb	0	; () banked
  8846  001C18  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  8847  001C1A  6ED9               	movwf	fsr2l,c
  8848  001C1C  0100               	movlb	0	; () banked
  8849  001C1E  5167               	movf	(?___wmul+1)& (0+255),w,b
  8850  001C20  0100               	movlb	0	; () banked
  8851  001C22  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  8852  001C24  6EDA               	movwf	fsr2h,c
  8853  001C26  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  8854  001C2A  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  8855  001C2E  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  8859  001C32  0100               	movlb	0	; () banked
  8860  001C34  EE20 F002          	lfsr	2,2
  8861  001C38  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  8862  001C3A  26D9               	addwf	fsr2l,f,c
  8863  001C3C  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  8864  001C3E  22DA               	addwfc	fsr2h,f,c
  8865  001C40  2ADF               	incf	indf2,f,c
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  8869  001C42  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;ES_Queue.c: 101: return(1);
  8873  001C46  0E01               	movlw	1
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;ES_Queue.c: 102: }else
  8877                           
  8878                           ; BSR set to: 0
  8879  001C48  0012               	return	
  8880  001C4A                     l2784:
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;ES_Queue.c: 103: return(0);
  8884  001C4A  0E00               	movlw	0
  8885                           
  8886                           ; BSR set to: 0
  8887  001C4C  0012               	return	
  8888  001C4E                     __end_of_ES_EnQueueFIFO:
  8889                           	opt stack 0
  8890                           tosu	equ	0xFFF
  8891                           tosh	equ	0xFFE
  8892                           tosl	equ	0xFFD
  8893                           pclath	equ	0xFFA
  8894                           tblptru	equ	0xFF8
  8895                           tblptrh	equ	0xFF7
  8896                           tblptrl	equ	0xFF6
  8897                           tablat	equ	0xFF5
  8898                           prodh	equ	0xFF4
  8899                           prodl	equ	0xFF3
  8900                           intcon	equ	0xFF2
  8901                           postinc0	equ	0xFEE
  8902                           wreg	equ	0xFE8
  8903                           indf1	equ	0xFE7
  8904                           postinc1	equ	0xFE6
  8905                           postdec1	equ	0xFE5
  8906                           fsr1h	equ	0xFE2
  8907                           fsr1l	equ	0xFE1
  8908                           indf2	equ	0xFDF
  8909                           postinc2	equ	0xFDE
  8910                           postdec2	equ	0xFDD
  8911                           plusw2	equ	0xFDB
  8912                           fsr2h	equ	0xFDA
  8913                           fsr2l	equ	0xFD9
  8914                           status	equ	0xFD8
  8915                           
  8916 ;; *************** function ___wmul *****************
  8917 ;; Defined at:
  8918 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;  multiplier      2    6[BANK0 ] unsigned int 
  8921 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  product         2   10[BANK0 ] unsigned int 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  2    6[BANK0 ] unsigned int 
  8926 ;; Registers used:
  8927 ;;		wreg, status,2, status,0, prodl, prodh
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8933 ;;      Params:         0       4       0       0
  8934 ;;      Locals:         0       2       0       0
  8935 ;;      Temps:          0       0       0       0
  8936 ;;      Totals:         0       6       0       0
  8937 ;;Total ram usage:        6 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    7
  8940 ;; This function calls:
  8941 ;;		Nothing
  8942 ;; This function is called by:
  8943 ;;		_ES_EnQueueFIFO
  8944 ;;		_ES_DeQueue
  8945 ;;		_HSV_to_RGB
  8946 ;;		_HueTest
  8947 ;;		i2_ES_EnQueueFIFO
  8948 ;;		_ES_EnQueueLIFO
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text41
  8953  00287C                     __ptext41:
  8954                           	opt stack 0
  8955  00287C                     ___wmul:
  8956                           	opt stack 17
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;incstack = 0
  8960  00287C  0100               	movlb	0	; () banked
  8961  00287E  5166               	movf	___wmul@multiplier& (0+255),w,b
  8962  002880  0100               	movlb	0	; () banked
  8963  002882  0368               	mulwf	___wmul@multiplicand& (0+255),b
  8964  002884  CFF3 F06A          	movff	prodl,___wmul@product
  8965  002888  CFF4 F06B          	movff	prodh,___wmul@product+1
  8966  00288C  0100               	movlb	0	; () banked
  8967  00288E  5166               	movf	___wmul@multiplier& (0+255),w,b
  8968  002890  0100               	movlb	0	; () banked
  8969  002892  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8970  002894  50F3               	movf	prodl,w,c
  8971  002896  0100               	movlb	0	; () banked
  8972  002898  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  8973  00289A  0100               	movlb	0	; () banked
  8974  00289C  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8975  00289E  0100               	movlb	0	; () banked
  8976  0028A0  0368               	mulwf	___wmul@multiplicand& (0+255),b
  8977  0028A2  50F3               	movf	prodl,w,c
  8978  0028A4  0100               	movlb	0	; () banked
  8979  0028A6  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  8980                           
  8981                           ; BSR set to: 0
  8982  0028A8  C06A  F066         	movff	___wmul@product,?___wmul
  8983  0028AC  C06B  F067         	movff	___wmul@product+1,?___wmul+1
  8984  0028B0  0012               	return	
  8985  0028B2                     __end_of___wmul:
  8986                           	opt stack 0
  8987                           tosu	equ	0xFFF
  8988                           tosh	equ	0xFFE
  8989                           tosl	equ	0xFFD
  8990                           pclath	equ	0xFFA
  8991                           tblptru	equ	0xFF8
  8992                           tblptrh	equ	0xFF7
  8993                           tblptrl	equ	0xFF6
  8994                           tablat	equ	0xFF5
  8995                           prodh	equ	0xFF4
  8996                           prodl	equ	0xFF3
  8997                           intcon	equ	0xFF2
  8998                           postinc0	equ	0xFEE
  8999                           wreg	equ	0xFE8
  9000                           indf1	equ	0xFE7
  9001                           postinc1	equ	0xFE6
  9002                           postdec1	equ	0xFE5
  9003                           fsr1h	equ	0xFE2
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           plusw2	equ	0xFDB
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013 ;; *************** function ___awmod *****************
  9014 ;; Defined at:
  9015 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  dividend        2    0[BANK0 ] int 
  9018 ;;  divisor         2    2[BANK0 ] int 
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;  sign            1    5[BANK0 ] unsigned char 
  9021 ;;  counter         1    4[BANK0 ] unsigned char 
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  2    0[BANK0 ] int 
  9024 ;; Registers used:
  9025 ;;		wreg, status,2, status,0
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9031 ;;      Params:         0       4       0       0
  9032 ;;      Locals:         0       2       0       0
  9033 ;;      Temps:          0       0       0       0
  9034 ;;      Totals:         0       6       0       0
  9035 ;;Total ram usage:        6 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    7
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_ES_EnQueueFIFO
  9042 ;;		_HueTest
  9043 ;;		_CenterBreathe
  9044 ;;		_SingleFadedLoop
  9045 ;;		_SingleFocusPulse
  9046 ;;		_DoubleFadedLoop
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           	psect	text42
  9051  0020A8                     __ptext42:
  9052                           	opt stack 0
  9053  0020A8                     ___awmod:
  9054                           	opt stack 17
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;incstack = 0
  9058  0020A8  0E00               	movlw	0
  9059  0020AA  0100               	movlb	0	; () banked
  9060  0020AC  6F65               	movwf	___awmod@sign& (0+255),b
  9061                           
  9062                           ; BSR set to: 0
  9063  0020AE  0100               	movlb	0	; () banked
  9064  0020B0  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9065  0020B2  D008               	goto	l2740
  9066                           
  9067                           ; BSR set to: 0
  9068  0020B4  0100               	movlb	0	; () banked
  9069  0020B6  6D60               	negf	___awmod@dividend& (0+255),b
  9070  0020B8  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9071  0020BA  B0D8               	btfsc	status,0,c
  9072  0020BC  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9073                           
  9074                           ; BSR set to: 0
  9075  0020BE  0E01               	movlw	1
  9076  0020C0  0100               	movlb	0	; () banked
  9077  0020C2  6F65               	movwf	___awmod@sign& (0+255),b
  9078  0020C4                     l2740:
  9079                           
  9080                           ; BSR set to: 0
  9081  0020C4  0100               	movlb	0	; () banked
  9082  0020C6  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9083  0020C8  D005               	goto	l2744
  9084                           
  9085                           ; BSR set to: 0
  9086  0020CA  0100               	movlb	0	; () banked
  9087  0020CC  6D62               	negf	___awmod@divisor& (0+255),b
  9088  0020CE  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  9089  0020D0  B0D8               	btfsc	status,0,c
  9090  0020D2  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  9091  0020D4                     l2744:
  9092                           
  9093                           ; BSR set to: 0
  9094  0020D4  0100               	movlb	0	; () banked
  9095  0020D6  5162               	movf	___awmod@divisor& (0+255),w,b
  9096  0020D8  0100               	movlb	0	; () banked
  9097  0020DA  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9098  0020DC  B4D8               	btfsc	status,2,c
  9099  0020DE  D026               	goto	l2760
  9100                           
  9101                           ; BSR set to: 0
  9102  0020E0  0E01               	movlw	1
  9103  0020E2  0100               	movlb	0	; () banked
  9104  0020E4  6F64               	movwf	___awmod@counter& (0+255),b
  9105  0020E6  D006               	goto	l2750
  9106  0020E8                     l2748:
  9107                           
  9108                           ; BSR set to: 0
  9109  0020E8  0100               	movlb	0	; () banked
  9110  0020EA  90D8               	bcf	status,0,c
  9111  0020EC  3762               	rlcf	___awmod@divisor& (0+255),f,b
  9112  0020EE  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9113  0020F0  0100               	movlb	0	; () banked
  9114  0020F2  2B64               	incf	___awmod@counter& (0+255),f,b
  9115  0020F4                     l2750:
  9116                           
  9117                           ; BSR set to: 0
  9118  0020F4  0100               	movlb	0	; () banked
  9119  0020F6  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9120  0020F8  D7F7               	goto	l2748
  9121  0020FA                     l2752:
  9122                           
  9123                           ; BSR set to: 0
  9124  0020FA  0100               	movlb	0	; () banked
  9125  0020FC  5162               	movf	___awmod@divisor& (0+255),w,b
  9126  0020FE  0100               	movlb	0	; () banked
  9127  002100  5D60               	subwf	___awmod@dividend& (0+255),w,b
  9128  002102  0100               	movlb	0	; () banked
  9129  002104  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9130  002106  0100               	movlb	0	; () banked
  9131  002108  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9132  00210A  A0D8               	btfss	status,0,c
  9133  00210C  D008               	goto	l2756
  9134                           
  9135                           ; BSR set to: 0
  9136  00210E  0100               	movlb	0	; () banked
  9137  002110  5162               	movf	___awmod@divisor& (0+255),w,b
  9138  002112  0100               	movlb	0	; () banked
  9139  002114  5F60               	subwf	___awmod@dividend& (0+255),f,b
  9140  002116  0100               	movlb	0	; () banked
  9141  002118  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9142  00211A  0100               	movlb	0	; () banked
  9143  00211C  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9144  00211E                     l2756:
  9145                           
  9146                           ; BSR set to: 0
  9147  00211E  0100               	movlb	0	; () banked
  9148  002120  90D8               	bcf	status,0,c
  9149  002122  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9150  002124  3362               	rrcf	___awmod@divisor& (0+255),f,b
  9151                           
  9152                           ; BSR set to: 0
  9153  002126  0100               	movlb	0	; () banked
  9154  002128  2F64               	decfsz	___awmod@counter& (0+255),f,b
  9155  00212A  D7E7               	goto	l2752
  9156  00212C                     l2760:
  9157                           
  9158                           ; BSR set to: 0
  9159  00212C  0100               	movlb	0	; () banked
  9160  00212E  5165               	movf	___awmod@sign& (0+255),w,b
  9161  002130  0100               	movlb	0	; () banked
  9162  002132  B4D8               	btfsc	status,2,c
  9163  002134  D005               	goto	l2764
  9164                           
  9165                           ; BSR set to: 0
  9166  002136  0100               	movlb	0	; () banked
  9167  002138  6D60               	negf	___awmod@dividend& (0+255),b
  9168  00213A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9169  00213C  B0D8               	btfsc	status,0,c
  9170  00213E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9171  002140                     l2764:
  9172                           
  9173                           ; BSR set to: 0
  9174  002140  C060  F060         	movff	___awmod@dividend,?___awmod
  9175  002144  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  9176  002148  0012               	return	
  9177  00214A                     __end_of___awmod:
  9178                           	opt stack 0
  9179                           tosu	equ	0xFFF
  9180                           tosh	equ	0xFFE
  9181                           tosl	equ	0xFFD
  9182                           pclath	equ	0xFFA
  9183                           tblptru	equ	0xFF8
  9184                           tblptrh	equ	0xFF7
  9185                           tblptrl	equ	0xFF6
  9186                           tablat	equ	0xFF5
  9187                           prodh	equ	0xFF4
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           postinc0	equ	0xFEE
  9191                           wreg	equ	0xFE8
  9192                           indf1	equ	0xFE7
  9193                           postinc1	equ	0xFE6
  9194                           postdec1	equ	0xFE5
  9195                           fsr1h	equ	0xFE2
  9196                           fsr1l	equ	0xFE1
  9197                           indf2	equ	0xFDF
  9198                           postinc2	equ	0xFDE
  9199                           postdec2	equ	0xFDD
  9200                           plusw2	equ	0xFDB
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function _DotStar_Init *****************
  9206 ;; Defined at:
  9207 ;;		line 50 in file "Pattern_DotStarLED.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;  brightnessPo    2    0[BANK0 ] PTR unsigned char 
  9210 ;;		 -> PatternConfigs(4), 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;		None
  9213 ;; Return value:  Size  Location     Type
  9214 ;;                  1    wreg      void 
  9215 ;; Registers used:
  9216 ;;		wreg, status,2, status,0
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9222 ;;      Params:         0       2       0       0
  9223 ;;      Locals:         0       0       0       0
  9224 ;;      Temps:          0       0       0       0
  9225 ;;      Totals:         0       2       0       0
  9226 ;;Total ram usage:        2 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; Hardware stack levels required when called:    7
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		_InitPatternControlService
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text43
  9237  00265C                     __ptext43:
  9238                           	opt stack 0
  9239  00265C                     _DotStar_Init:
  9240                           	opt stack 21
  9241                           
  9242                           ;Pattern_DotStarLED.c: 52: Brightness = brightnessPointer;
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;incstack = 0
  9246  00265C  C060  F0ED         	movff	DotStar_Init@brightnessPointer,_Brightness
  9247  002660  C061  F0EE         	movff	DotStar_Init@brightnessPointer+1,_Brightness+1
  9248                           
  9249                           ;Pattern_DotStarLED.c: 54: PixelFrames[0] = 0x0;
  9250  002664  0E00               	movlw	0
  9251  002666  CFE8 F1C4          	movff	wreg,_PixelFrames
  9252  00266A  0E00               	movlw	0
  9253  00266C  CFE8 F1C5          	movff	wreg,_PixelFrames+1
  9254  002670  0E00               	movlw	0
  9255  002672  CFE8 F1C6          	movff	wreg,_PixelFrames+2
  9256  002676  0E00               	movlw	0
  9257  002678  CFE8 F1C7          	movff	wreg,_PixelFrames+3
  9258                           
  9259                           ;Pattern_DotStarLED.c: 55: PixelFrames[76+1] = 0xffffffff;
  9260  00267C  0EFF               	movlw	255
  9261  00267E  CFE8 F2F8          	movff	wreg,_PixelFrames+308
  9262  002682  0EFF               	movlw	255
  9263  002684  CFE8 F2F9          	movff	wreg,_PixelFrames+309
  9264  002688  0EFF               	movlw	255
  9265  00268A  CFE8 F2FA          	movff	wreg,_PixelFrames+310
  9266  00268E  0EFF               	movlw	255
  9267  002690  CFE8 F2FB          	movff	wreg,_PixelFrames+311
  9268                           
  9269                           ;Pattern_DotStarLED.c: 57: PixelFrames[76+1+1] = 0xffffffff;
  9270  002694  0EFF               	movlw	255
  9271  002696  CFE8 F2FC          	movff	wreg,_PixelFrames+312
  9272  00269A  0EFF               	movlw	255
  9273  00269C  CFE8 F2FD          	movff	wreg,_PixelFrames+313
  9274  0026A0  0EFF               	movlw	255
  9275  0026A2  CFE8 F2FE          	movff	wreg,_PixelFrames+314
  9276  0026A6  0EFF               	movlw	255
  9277  0026A8  CFE8 F2FF          	movff	wreg,_PixelFrames+315
  9278  0026AC  0012               	return		;funcret
  9279  0026AE                     __end_of_DotStar_Init:
  9280                           	opt stack 0
  9281                           tosu	equ	0xFFF
  9282                           tosh	equ	0xFFE
  9283                           tosl	equ	0xFFD
  9284                           pclath	equ	0xFFA
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           intcon	equ	0xFF2
  9292                           postinc0	equ	0xFEE
  9293                           wreg	equ	0xFE8
  9294                           indf1	equ	0xFE7
  9295                           postinc1	equ	0xFE6
  9296                           postdec1	equ	0xFE5
  9297                           fsr1h	equ	0xFE2
  9298                           fsr1l	equ	0xFE1
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           plusw2	equ	0xFDB
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _CAN_Init *****************
  9308 ;; Defined at:
  9309 ;;		line 60 in file "CAN_RX_HW.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      void 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9323 ;;      Params:         0       0       0       0
  9324 ;;      Locals:         0       0       0       0
  9325 ;;      Temps:          0       0       0       0
  9326 ;;      Totals:         0       0       0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    8
  9330 ;; This function calls:
  9331 ;;		_InitCanHardware
  9332 ;;		_InitPins
  9333 ;; This function is called by:
  9334 ;;		_InitPatternControlService
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text44
  9339  002B0A                     __ptext44:
  9340                           	opt stack 0
  9341  002B0A                     _CAN_Init:
  9342                           	opt stack 20
  9343                           
  9344                           ;CAN_RX_HW.c: 61: InitPins();
  9345                           
  9346                           ;incstack = 0
  9347  002B0A  EC26  F015         	call	_InitPins	;wreg free
  9348                           
  9349                           ;CAN_RX_HW.c: 62: InitCanHardware();
  9350  002B0E  ECB0  F011         	call	_InitCanHardware	;wreg free
  9351  002B12  0012               	return		;funcret
  9352  002B14                     __end_of_CAN_Init:
  9353                           	opt stack 0
  9354                           tosu	equ	0xFFF
  9355                           tosh	equ	0xFFE
  9356                           tosl	equ	0xFFD
  9357                           pclath	equ	0xFFA
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           postinc0	equ	0xFEE
  9366                           wreg	equ	0xFE8
  9367                           indf1	equ	0xFE7
  9368                           postinc1	equ	0xFE6
  9369                           postdec1	equ	0xFE5
  9370                           fsr1h	equ	0xFE2
  9371                           fsr1l	equ	0xFE1
  9372                           indf2	equ	0xFDF
  9373                           postinc2	equ	0xFDE
  9374                           postdec2	equ	0xFDD
  9375                           plusw2	equ	0xFDB
  9376                           fsr2h	equ	0xFDA
  9377                           fsr2l	equ	0xFD9
  9378                           status	equ	0xFD8
  9379                           
  9380 ;; *************** function _InitPins *****************
  9381 ;; Defined at:
  9382 ;;		line 163 in file "CAN_RX_HW.c"
  9383 ;; Parameters:    Size  Location     Type
  9384 ;;		None
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;		None
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  1    wreg      void 
  9389 ;; Registers used:
  9390 ;;		wreg, status,2
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9396 ;;      Params:         0       0       0       0
  9397 ;;      Locals:         0       0       0       0
  9398 ;;      Temps:          0       0       0       0
  9399 ;;      Totals:         0       0       0       0
  9400 ;;Total ram usage:        0 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    7
  9403 ;; This function calls:
  9404 ;;		Nothing
  9405 ;; This function is called by:
  9406 ;;		_CAN_Init
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text45
  9411  002A4C                     __ptext45:
  9412                           	opt stack 0
  9413  002A4C                     _InitPins:
  9414                           	opt stack 20
  9415                           
  9416                           ;CAN_RX_HW.c: 166: PORTB = 0x00;
  9417                           
  9418                           ;incstack = 0
  9419  002A4C  0E00               	movlw	0
  9420  002A4E  6E81               	movwf	3969,c	;volatile
  9421                           
  9422                           ;CAN_RX_HW.c: 167: LATB = 0x00;
  9423  002A50  0E00               	movlw	0
  9424  002A52  6E8A               	movwf	3978,c	;volatile
  9425                           
  9426                           ;CAN_RX_HW.c: 168: TRISBbits.TRISB2 = 0;
  9427  002A54  9493               	bcf	3987,2,c	;volatile
  9428                           
  9429                           ;CAN_RX_HW.c: 169: TRISBbits.TRISB3 = 1;
  9430  002A56  8693               	bsf	3987,3,c	;volatile
  9431                           
  9432                           ;CAN_RX_HW.c: 172: PORTA = 0x00;
  9433  002A58  0E00               	movlw	0
  9434  002A5A  6E80               	movwf	3968,c	;volatile
  9435                           
  9436                           ;CAN_RX_HW.c: 173: LATA = 0x00;
  9437  002A5C  0E00               	movlw	0
  9438  002A5E  6E89               	movwf	3977,c	;volatile
  9439                           
  9440                           ;CAN_RX_HW.c: 174: TRISA = 0x00;
  9441  002A60  0E00               	movlw	0
  9442  002A62  6E92               	movwf	3986,c	;volatile
  9443  002A64  0012               	return		;funcret
  9444  002A66                     __end_of_InitPins:
  9445                           	opt stack 0
  9446                           tosu	equ	0xFFF
  9447                           tosh	equ	0xFFE
  9448                           tosl	equ	0xFFD
  9449                           pclath	equ	0xFFA
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           intcon	equ	0xFF2
  9457                           postinc0	equ	0xFEE
  9458                           wreg	equ	0xFE8
  9459                           indf1	equ	0xFE7
  9460                           postinc1	equ	0xFE6
  9461                           postdec1	equ	0xFE5
  9462                           fsr1h	equ	0xFE2
  9463                           fsr1l	equ	0xFE1
  9464                           indf2	equ	0xFDF
  9465                           postinc2	equ	0xFDE
  9466                           postdec2	equ	0xFDD
  9467                           plusw2	equ	0xFDB
  9468                           fsr2h	equ	0xFDA
  9469                           fsr2l	equ	0xFD9
  9470                           status	equ	0xFD8
  9471                           
  9472 ;; *************** function _InitCanHardware *****************
  9473 ;; Defined at:
  9474 ;;		line 103 in file "CAN_RX_HW.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;		None
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;		None
  9479 ;; Return value:  Size  Location     Type
  9480 ;;                  1    wreg      void 
  9481 ;; Registers used:
  9482 ;;		wreg, status,2
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9488 ;;      Params:         0       0       0       0
  9489 ;;      Locals:         0       0       0       0
  9490 ;;      Temps:          0       0       0       0
  9491 ;;      Totals:         0       0       0       0
  9492 ;;Total ram usage:        0 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; Hardware stack levels required when called:    7
  9495 ;; This function calls:
  9496 ;;		Nothing
  9497 ;; This function is called by:
  9498 ;;		_CAN_Init
  9499 ;; This function uses a non-reentrant model
  9500 ;;
  9501                           
  9502                           	psect	text46
  9503  002360                     __ptext46:
  9504                           	opt stack 0
  9505  002360                     _InitCanHardware:
  9506                           	opt stack 20
  9507                           
  9508                           ;CAN_RX_HW.c: 107: CANCON = 0x80;
  9509                           
  9510                           ;incstack = 0
  9511  002360  0E80               	movlw	128
  9512  002362  6E6F               	movwf	3951,c	;volatile
  9513  002364                     l615:
  9514  002364  AE6E               	btfss	3950,7,c	;volatile
  9515  002366  D7FE               	goto	l615
  9516                           
  9517                           ;CAN_RX_HW.c: 110: CIOCON = 0x20;
  9518  002368  0E20               	movlw	32
  9519  00236A  6E73               	movwf	3955,c	;volatile
  9520                           
  9521                           ;CAN_RX_HW.c: 113: BRGCON2bits.SEG2PHTS = 1;
  9522  00236C  8E71               	bsf	3953,7,c	;volatile
  9523                           
  9524                           ;CAN_RX_HW.c: 115: BRGCON1bits.BRP0 = 1;
  9525  00236E  8070               	bsf	3952,0,c	;volatile
  9526                           
  9527                           ;CAN_RX_HW.c: 116: BRGCON1bits.BRP1 = 0;
  9528  002370  9270               	bcf	3952,1,c	;volatile
  9529                           
  9530                           ;CAN_RX_HW.c: 117: BRGCON2bits.PRSEG0 = 0;
  9531  002372  9071               	bcf	3953,0,c	;volatile
  9532                           
  9533                           ;CAN_RX_HW.c: 118: BRGCON2bits.PRSEG1 = 1;
  9534  002374  8271               	bsf	3953,1,c	;volatile
  9535                           
  9536                           ;CAN_RX_HW.c: 119: BRGCON2bits.PRSEG2 = 1;
  9537  002376  8471               	bsf	3953,2,c	;volatile
  9538                           
  9539                           ;CAN_RX_HW.c: 120: BRGCON2bits.SEG1PH0 = 1;
  9540  002378  8671               	bsf	3953,3,c	;volatile
  9541                           
  9542                           ;CAN_RX_HW.c: 121: BRGCON2bits.SEG1PH1 = 0;
  9543  00237A  9871               	bcf	3953,4,c	;volatile
  9544                           
  9545                           ;CAN_RX_HW.c: 122: BRGCON2bits.SEG1PH2 = 1;
  9546  00237C  8A71               	bsf	3953,5,c	;volatile
  9547                           
  9548                           ;CAN_RX_HW.c: 123: BRGCON3bits.SEG2PH0 = 1;
  9549  00237E  8072               	bsf	3954,0,c	;volatile
  9550                           
  9551                           ;CAN_RX_HW.c: 124: BRGCON1bits.SJW0 = 1;
  9552  002380  8C70               	bsf	3952,6,c	;volatile
  9553                           
  9554                           ;CAN_RX_HW.c: 128: RXB0CONbits.RXB0DBEN = 0;
  9555  002382  9460               	bcf	3936,2,c	;volatile
  9556                           
  9557                           ;CAN_RX_HW.c: 129: RXB0CONbits.RXM0 = 0;
  9558  002384  9A60               	bcf	3936,5,c	;volatile
  9559                           
  9560                           ;CAN_RX_HW.c: 130: RXB0CONbits.RXM1 = 0;
  9561  002386  9C60               	bcf	3936,6,c	;volatile
  9562                           
  9563                           ;CAN_RX_HW.c: 131: RXF0SIDH = 0x00;
  9564  002388  0E00               	movlw	0
  9565  00238A  010F               	movlb	15	; () banked
  9566  00238C  6F00               	movwf	0,b	;volatile
  9567                           
  9568                           ;CAN_RX_HW.c: 132: RXF0SIDL = 0x08;
  9569  00238E  0E08               	movlw	8
  9570  002390  010F               	movlb	15	; () banked
  9571  002392  6F01               	movwf	1,b	;volatile
  9572                           
  9573                           ;CAN_RX_HW.c: 133: RXF0EIDH = 0x00;
  9574  002394  0E00               	movlw	0
  9575  002396  010F               	movlb	15	; () banked
  9576  002398  6F02               	movwf	2,b	;volatile
  9577                           
  9578                           ;CAN_RX_HW.c: 134: RXF0EIDL = 0x01;
  9579  00239A  0E01               	movlw	1
  9580  00239C  010F               	movlb	15	; () banked
  9581  00239E  6F03               	movwf	3,b	;volatile
  9582                           
  9583                           ;CAN_RX_HW.c: 136: RXM0SIDH = 0x00;
  9584  0023A0  0E00               	movlw	0
  9585  0023A2  010F               	movlb	15	; () banked
  9586  0023A4  6F18               	movwf	24,b	;volatile
  9587                           
  9588                           ;CAN_RX_HW.c: 137: RXM0SIDL = 0x00;
  9589  0023A6  0E00               	movlw	0
  9590  0023A8  010F               	movlb	15	; () banked
  9591  0023AA  6F19               	movwf	25,b	;volatile
  9592                           
  9593                           ;CAN_RX_HW.c: 138: RXM0EIDH = 0x00;
  9594  0023AC  0E00               	movlw	0
  9595  0023AE  010F               	movlb	15	; () banked
  9596  0023B0  6F1A               	movwf	26,b	;volatile
  9597                           
  9598                           ;CAN_RX_HW.c: 139: RXM0EIDL = 0x01;
  9599  0023B2  0E01               	movlw	1
  9600  0023B4  010F               	movlb	15	; () banked
  9601  0023B6  6F1B               	movwf	27,b	;volatile
  9602                           
  9603                           ;CAN_RX_HW.c: 143: ECANCON = 0x00;
  9604  0023B8  0E00               	movlw	0
  9605  0023BA  6E77               	movwf	3959,c	;volatile
  9606                           
  9607                           ;CAN_RX_HW.c: 144: CANCON = 0b00010000;
  9608  0023BC  0E10               	movlw	16
  9609  0023BE  6E6F               	movwf	3951,c	;volatile
  9610  0023C0                     l618:
  9611  0023C0  BE6E               	btfsc	3950,7,c	;volatile
  9612  0023C2  D7FE               	goto	l618
  9613                           
  9614                           ;CAN_RX_HW.c: 148: RXB0IE = 1;
  9615  0023C4  80A3               	bsf	4003,0,c	;volatile
  9616                           
  9617                           ;CAN_RX_HW.c: 149: ERRIE = 1;
  9618  0023C6  8AA3               	bsf	4003,5,c	;volatile
  9619                           
  9620                           ;CAN_RX_HW.c: 150: IRXIE = 1;
  9621  0023C8  8EA3               	bsf	4003,7,c	;volatile
  9622                           
  9623                           ;CAN_RX_HW.c: 154: RXB0IF = 0;
  9624  0023CA  90A4               	bcf	4004,0,c	;volatile
  9625                           
  9626                           ;CAN_RX_HW.c: 155: ERRIF = 0;
  9627  0023CC  9AA4               	bcf	4004,5,c	;volatile
  9628                           
  9629                           ;CAN_RX_HW.c: 156: IRXIF = 0;
  9630  0023CE  9EA4               	bcf	4004,7,c	;volatile
  9631                           
  9632                           ;CAN_RX_HW.c: 157: TXB0IE = 1;
  9633  0023D0  84A3               	bsf	4003,2,c	;volatile
  9634                           
  9635                           ;CAN_RX_HW.c: 158: TXB0IF = 0;
  9636  0023D2  94A4               	bcf	4004,2,c	;volatile
  9637                           
  9638                           ;CAN_RX_HW.c: 159: TXB0CONbits.TXREQ = 0;
  9639  0023D4  010F               	movlb	15	; () banked
  9640  0023D6  9740               	bcf	64,3,b	;volatile
  9641                           
  9642                           ;CAN_RX_HW.c: 160: RXB0CONbits.RXFUL = 0;
  9643  0023D8  9E60               	bcf	3936,7,c	;volatile
  9644                           
  9645                           ; BSR set to: 15
  9646  0023DA  0012               	return		;funcret
  9647  0023DC                     __end_of_InitCanHardware:
  9648                           	opt stack 0
  9649                           tosu	equ	0xFFF
  9650                           tosh	equ	0xFFE
  9651                           tosl	equ	0xFFD
  9652                           pclath	equ	0xFFA
  9653                           tblptru	equ	0xFF8
  9654                           tblptrh	equ	0xFF7
  9655                           tblptrl	equ	0xFF6
  9656                           tablat	equ	0xFF5
  9657                           prodh	equ	0xFF4
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           postinc0	equ	0xFEE
  9661                           wreg	equ	0xFE8
  9662                           indf1	equ	0xFE7
  9663                           postinc1	equ	0xFE6
  9664                           postdec1	equ	0xFE5
  9665                           fsr1h	equ	0xFE2
  9666                           fsr1l	equ	0xFE1
  9667                           indf2	equ	0xFDF
  9668                           postinc2	equ	0xFDE
  9669                           postdec2	equ	0xFDD
  9670                           plusw2	equ	0xFDB
  9671                           fsr2h	equ	0xFDA
  9672                           fsr2l	equ	0xFD9
  9673                           status	equ	0xFD8
  9674                           
  9675 ;; *************** function _ES_Timer_Init *****************
  9676 ;; Defined at:
  9677 ;;		line 130 in file "ES_Timers.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;  Rate            2    2[BANK0 ] enum E15423
  9680 ;; Auto vars:     Size  Location     Type
  9681 ;;		None
  9682 ;; Return value:  Size  Location     Type
  9683 ;;                  1    wreg      void 
  9684 ;; Registers used:
  9685 ;;		wreg, status,2, cstack
  9686 ;; Tracked objects:
  9687 ;;		On entry : 0/0
  9688 ;;		On exit  : 0/0
  9689 ;;		Unchanged: 0/0
  9690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9691 ;;      Params:         0       2       0       0
  9692 ;;      Locals:         0       0       0       0
  9693 ;;      Temps:          0       0       0       0
  9694 ;;      Totals:         0       2       0       0
  9695 ;;Total ram usage:        2 bytes
  9696 ;; Hardware stack levels used:    1
  9697 ;; Hardware stack levels required when called:    8
  9698 ;; This function calls:
  9699 ;;		__HW_Timer_Init
  9700 ;; This function is called by:
  9701 ;;		_ES_Initialize
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text47
  9706  002AE4                     __ptext47:
  9707                           	opt stack 0
  9708  002AE4                     _ES_Timer_Init:
  9709                           	opt stack 21
  9710                           
  9711                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  9712                           
  9713                           ; BSR set to: 15
  9714                           ;incstack = 0
  9715  002AE4  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  9716  002AE8  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  9717  002AEC  ECD3  F014         	call	__HW_Timer_Init	;wreg free
  9718  002AF0  0012               	return		;funcret
  9719  002AF2                     __end_of_ES_Timer_Init:
  9720                           	opt stack 0
  9721                           tosu	equ	0xFFF
  9722                           tosh	equ	0xFFE
  9723                           tosl	equ	0xFFD
  9724                           pclath	equ	0xFFA
  9725                           tblptru	equ	0xFF8
  9726                           tblptrh	equ	0xFF7
  9727                           tblptrl	equ	0xFF6
  9728                           tablat	equ	0xFF5
  9729                           prodh	equ	0xFF4
  9730                           prodl	equ	0xFF3
  9731                           intcon	equ	0xFF2
  9732                           postinc0	equ	0xFEE
  9733                           wreg	equ	0xFE8
  9734                           indf1	equ	0xFE7
  9735                           postinc1	equ	0xFE6
  9736                           postdec1	equ	0xFE5
  9737                           fsr1h	equ	0xFE2
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           plusw2	equ	0xFDB
  9743                           fsr2h	equ	0xFDA
  9744                           fsr2l	equ	0xFD9
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function __HW_Timer_Init *****************
  9748 ;; Defined at:
  9749 ;;		line 72 in file "ES_Port.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;  Rate            2    0[BANK0 ] enum E15412
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, status,2
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9763 ;;      Params:         0       2       0       0
  9764 ;;      Locals:         0       0       0       0
  9765 ;;      Temps:          0       0       0       0
  9766 ;;      Totals:         0       2       0       0
  9767 ;;Total ram usage:        2 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    7
  9770 ;; This function calls:
  9771 ;;		Nothing
  9772 ;; This function is called by:
  9773 ;;		_ES_Timer_Init
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text48
  9778  0029A6                     __ptext48:
  9779                           	opt stack 0
  9780  0029A6                     __HW_Timer_Init:
  9781                           	opt stack 21
  9782                           
  9783                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  9784                           
  9785                           ;incstack = 0
  9786  0029A6  0E04               	movlw	4
  9787  0029A8  6E9D               	movwf	3997,c	;volatile
  9788                           
  9789                           ;ES_Port.c: 85: INTCON = 0b01000000;
  9790  0029AA  0E40               	movlw	64
  9791  0029AC  6EF2               	movwf	intcon,c	;volatile
  9792                           
  9793                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  9794  0029AE  0E0A               	movlw	10
  9795  0029B0  6EBD               	movwf	4029,c	;volatile
  9796                           
  9797                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  9798  0029B2  0E01               	movlw	1
  9799  0029B4  6EBE               	movwf	4030,c	;volatile
  9800                           
  9801                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  9802  0029B6  0E00               	movlw	0
  9803  0029B8  6EBF               	movwf	4031,c	;volatile
  9804                           
  9805                           ;ES_Port.c: 107: T1CON = 0b00100001;
  9806  0029BA  0E21               	movlw	33
  9807  0029BC  6ECD               	movwf	4045,c	;volatile
  9808                           
  9809                           ;ES_Port.c: 108: PEIE = 1;
  9810  0029BE  8CF2               	bsf	intcon,6,c	;volatile
  9811                           
  9812                           ;ES_Port.c: 109: {GIE = 1;};
  9813  0029C0  8EF2               	bsf	intcon,7,c	;volatile
  9814  0029C2  0012               	return		;funcret
  9815  0029C4                     __end_of__HW_Timer_Init:
  9816                           	opt stack 0
  9817                           tosu	equ	0xFFF
  9818                           tosh	equ	0xFFE
  9819                           tosl	equ	0xFFD
  9820                           pclath	equ	0xFFA
  9821                           tblptru	equ	0xFF8
  9822                           tblptrh	equ	0xFF7
  9823                           tblptrl	equ	0xFF6
  9824                           tablat	equ	0xFF5
  9825                           prodh	equ	0xFF4
  9826                           prodl	equ	0xFF3
  9827                           intcon	equ	0xFF2
  9828                           postinc0	equ	0xFEE
  9829                           wreg	equ	0xFE8
  9830                           indf1	equ	0xFE7
  9831                           postinc1	equ	0xFE6
  9832                           postdec1	equ	0xFE5
  9833                           fsr1h	equ	0xFE2
  9834                           fsr1l	equ	0xFE1
  9835                           indf2	equ	0xFDF
  9836                           postinc2	equ	0xFDE
  9837                           postdec2	equ	0xFDD
  9838                           plusw2	equ	0xFDB
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function _ES_InitQueue *****************
  9844 ;; Defined at:
  9845 ;;		line 58 in file "ES_Queue.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  9848 ;;		 -> Queue1(12), Queue0(12), 
  9849 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  9852 ;;		 -> Queue1(12), Queue0(12), 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      unsigned char 
  9855 ;; Registers used:
  9856 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9862 ;;      Params:         0       3       0       0
  9863 ;;      Locals:         0       2       0       0
  9864 ;;      Temps:          0       0       0       0
  9865 ;;      Totals:         0       5       0       0
  9866 ;;Total ram usage:        5 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    7
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_ES_Initialize
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text49
  9877  0027CC                     __ptext49:
  9878                           	opt stack 0
  9879  0027CC                     _ES_InitQueue:
  9880                           	opt stack 22
  9881                           
  9882                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  9883                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  9884                           
  9885                           ;incstack = 0
  9886  0027CC  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  9887  0027D0  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  9888                           
  9889                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  9890  0027D4  0100               	movlb	0	; () banked
  9891  0027D6  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  9892  0027D8  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  9893  0027DC  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  9894  0027E0  6EDF               	movwf	indf2,c
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  9898  0027E2  0100               	movlb	0	; () banked
  9899  0027E4  EE20 F001          	lfsr	2,1
  9900  0027E8  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  9901  0027EA  26D9               	addwf	fsr2l,f,c
  9902  0027EC  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  9903  0027EE  22DA               	addwfc	fsr2h,f,c
  9904  0027F0  0E00               	movlw	0
  9905  0027F2  6EDF               	movwf	indf2,c
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  9909  0027F4  0100               	movlb	0	; () banked
  9910  0027F6  EE20 F002          	lfsr	2,2
  9911  0027FA  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  9912  0027FC  26D9               	addwf	fsr2l,f,c
  9913  0027FE  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  9914  002800  22DA               	addwfc	fsr2h,f,c
  9915  002802  0E00               	movlw	0
  9916  002804  6EDF               	movwf	indf2,c
  9917  002806  0012               	return	
  9918  002808                     __end_of_ES_InitQueue:
  9919                           	opt stack 0
  9920                           tosu	equ	0xFFF
  9921                           tosh	equ	0xFFE
  9922                           tosl	equ	0xFFD
  9923                           pclath	equ	0xFFA
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           indf1	equ	0xFE7
  9934                           postinc1	equ	0xFE6
  9935                           postdec1	equ	0xFE5
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           plusw2	equ	0xFDB
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function _ISR *****************
  9947 ;; Defined at:
  9948 ;;		line 112 in file "ES_Port.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;		None
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;		None
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  1    wreg      void 
  9955 ;; Registers used:
  9956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9962 ;;      Params:         0       0       0       0
  9963 ;;      Locals:         0       0       0       0
  9964 ;;      Temps:         16       0       0       0
  9965 ;;      Totals:        16       0       0       0
  9966 ;;Total ram usage:       16 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    6
  9969 ;; This function calls:
  9970 ;;		_CAN_BusErrorResponse
  9971 ;;		_CAN_ErrorResponse
  9972 ;;		_CAN_RCVResponse
  9973 ;;		_CAN_XmitResponse
  9974 ;;		_SPI32_EOTResponse
  9975 ;; This function is called by:
  9976 ;;		Interrupt level 2
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	intcode
  9981  000008                     __pintcode:
  9982                           	opt stack 0
  9983  000008                     _ISR:
  9984                           	opt stack 15
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;incstack = 0
  9988  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9989  00000A  CFFA F028          	movff	pclath,??_ISR+2
  9990  00000E  CFFB F029          	movff	pclatu,??_ISR+3
  9991  000012  ED27  F00E         	call	int_func,f	;refresh shadow registers
  9992                           tosu	equ	0xFFF
  9993                           tosh	equ	0xFFE
  9994                           tosl	equ	0xFFD
  9995                           pclatu	equ	0xFFB
  9996                           pclath	equ	0xFFA
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           intcon	equ	0xFF2
 10004                           postinc0	equ	0xFEE
 10005                           wreg	equ	0xFE8
 10006                           indf1	equ	0xFE7
 10007                           postinc1	equ	0xFE6
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           plusw2	equ	0xFDB
 10015                           fsr2h	equ	0xFDA
 10016                           fsr2l	equ	0xFD9
 10017                           status	equ	0xFD8
 10018                           
 10019                           	psect	intcode_body
 10020  001C4E                     __pintcode_body:
 10021                           	opt stack 15
 10022  001C4E                     int_func:
 10023                           	opt stack 15
 10024  001C4E  0006               	pop		; remove dummy address from shadow register refresh
 10025  001C50  CFE9 F02A          	movff	fsr0l,??_ISR+4
 10026  001C54  CFEA F02B          	movff	fsr0h,??_ISR+5
 10027  001C58  CFE1 F02C          	movff	fsr1l,??_ISR+6
 10028  001C5C  CFE2 F02D          	movff	fsr1h,??_ISR+7
 10029  001C60  CFD9 F02E          	movff	fsr2l,??_ISR+8
 10030  001C64  CFDA F02F          	movff	fsr2h,??_ISR+9
 10031  001C68  CFF3 F030          	movff	prodl,??_ISR+10
 10032  001C6C  CFF4 F031          	movff	prodh,??_ISR+11
 10033  001C70  CFF6 F032          	movff	tblptrl,??_ISR+12
 10034  001C74  CFF7 F033          	movff	tblptrh,??_ISR+13
 10035  001C78  CFF8 F034          	movff	tblptru,??_ISR+14
 10036  001C7C  CFF5 F035          	movff	tablat,??_ISR+15
 10037                           
 10038                           ;ES_Port.c: 115: static unsigned int LastTime;
 10039                           ;ES_Port.c: 116: static unsigned int NextTime;
 10040                           ;ES_Port.c: 118: if (CCP1IF == 1)
 10041  001C80  A49E               	btfss	3998,2,c	;volatile
 10042  001C82  D015               	goto	i2l3872
 10043                           
 10044                           ;ES_Port.c: 119: {
 10045                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 10046  001C84  50BF               	movf	4031,w,c	;volatile
 10047  001C86  6E26               	movwf	??_ISR& (0+255),c
 10048  001C88  50BE               	movf	4030,w,c	;volatile
 10049  001C8A  6E3D               	movwf	ISR@LastTime,c
 10050  001C8C  C026  F03E         	movff	??_ISR,ISR@LastTime+1
 10051                           
 10052                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 10053  001C90  0E20               	movlw	32
 10054  001C92  243D               	addwf	ISR@LastTime,w,c
 10055  001C94  6E3F               	movwf	ISR@NextTime,c
 10056  001C96  0E4E               	movlw	78
 10057  001C98  203E               	addwfc	ISR@LastTime+1,w,c
 10058  001C9A  6E40               	movwf	ISR@NextTime+1,c
 10059                           
 10060                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 10061  001C9C  5040               	movf	ISR@NextTime+1,w,c
 10062  001C9E  6EBF               	movwf	4031,c	;volatile
 10063                           
 10064                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 10065  001CA0  C03F  FFBE         	movff	ISR@NextTime,4030	;volatile
 10066                           
 10067                           ;ES_Port.c: 124: CCP1IF = 0;
 10068  001CA4  949E               	bcf	3998,2,c	;volatile
 10069                           
 10070                           ;ES_Port.c: 125: TickCount++;
 10071  001CA6  0100               	movlb	0	; () banked
 10072  001CA8  2BE5               	incf	_TickCount& (0+255),f,b	;volatile
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;ES_Port.c: 126: SysTickCounter++;
 10076  001CAA  4A41               	infsnz	_SysTickCounter,f,c	;volatile
 10077  001CAC  2A42               	incf	_SysTickCounter+1,f,c	;volatile
 10078  001CAE                     i2l3872:
 10079                           
 10080                           ;ES_Port.c: 127: }
 10081                           ;ES_Port.c: 128: if (SSPIF == 1)
 10082  001CAE  A69E               	btfss	3998,3,c	;volatile
 10083  001CB0  D003               	goto	i2l3878
 10084                           
 10085                           ;ES_Port.c: 129: {
 10086                           ;ES_Port.c: 130: SSPIF = 0;
 10087  001CB2  969E               	bcf	3998,3,c	;volatile
 10088                           
 10089                           ;ES_Port.c: 131: SPI32_EOTResponse();
 10090  001CB4  EC21  F014         	call	_SPI32_EOTResponse	;wreg free
 10091  001CB8                     i2l3878:
 10092                           
 10093                           ;ES_Port.c: 132: }
 10094                           ;ES_Port.c: 133: if (TXB0IF == 1)
 10095  001CB8  A4A4               	btfss	4004,2,c	;volatile
 10096  001CBA  D003               	goto	i2l3884
 10097                           
 10098                           ;ES_Port.c: 134: {
 10099                           ;ES_Port.c: 135: TXB0IF = 0;
 10100  001CBC  94A4               	bcf	4004,2,c	;volatile
 10101                           
 10102                           ;ES_Port.c: 136: CAN_XmitResponse();
 10103  001CBE  EC98  F015         	call	_CAN_XmitResponse	;wreg free
 10104  001CC2                     i2l3884:
 10105                           
 10106                           ;ES_Port.c: 137: }
 10107                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 10108  001CC2  A0A4               	btfss	4004,0,c	;volatile
 10109  001CC4  D003               	goto	i2l3890
 10110                           
 10111                           ;ES_Port.c: 139: RXB0IF = 0;
 10112  001CC6  90A4               	bcf	4004,0,c	;volatile
 10113                           
 10114                           ;ES_Port.c: 140: CAN_RCVResponse();
 10115  001CC8  EC79  F015         	call	_CAN_RCVResponse	;wreg free
 10116  001CCC                     i2l3890:
 10117                           
 10118                           ;ES_Port.c: 141: }
 10119                           ;ES_Port.c: 142: if (ERRIF == 1) {
 10120  001CCC  AAA4               	btfss	4004,5,c	;volatile
 10121  001CCE  D003               	goto	i2l3896
 10122                           
 10123                           ;ES_Port.c: 143: ERRIF = 0;
 10124  001CD0  9AA4               	bcf	4004,5,c	;volatile
 10125                           
 10126                           ;ES_Port.c: 144: CAN_ErrorResponse();
 10127  001CD2  EC9C  F015         	call	_CAN_ErrorResponse	;wreg free
 10128  001CD6                     i2l3896:
 10129                           
 10130                           ;ES_Port.c: 145: }
 10131                           ;ES_Port.c: 146: if (IRXIF == 1) {
 10132  001CD6  AEA4               	btfss	4004,7,c	;volatile
 10133  001CD8  D003               	goto	i2l167
 10134                           
 10135                           ;ES_Port.c: 147: IRXIF = 0;
 10136  001CDA  9EA4               	bcf	4004,7,c	;volatile
 10137                           
 10138                           ;ES_Port.c: 148: CAN_BusErrorResponse();
 10139  001CDC  EC9D  F015         	call	_CAN_BusErrorResponse	;wreg free
 10140  001CE0                     i2l167:
 10141  001CE0  C035  FFF5         	movff	??_ISR+15,tablat
 10142  001CE4  C034  FFF8         	movff	??_ISR+14,tblptru
 10143  001CE8  C033  FFF7         	movff	??_ISR+13,tblptrh
 10144  001CEC  C032  FFF6         	movff	??_ISR+12,tblptrl
 10145  001CF0  C031  FFF4         	movff	??_ISR+11,prodh
 10146  001CF4  C030  FFF3         	movff	??_ISR+10,prodl
 10147  001CF8  C02F  FFDA         	movff	??_ISR+9,fsr2h
 10148  001CFC  C02E  FFD9         	movff	??_ISR+8,fsr2l
 10149  001D00  C02D  FFE2         	movff	??_ISR+7,fsr1h
 10150  001D04  C02C  FFE1         	movff	??_ISR+6,fsr1l
 10151  001D08  C02B  FFEA         	movff	??_ISR+5,fsr0h
 10152  001D0C  C02A  FFE9         	movff	??_ISR+4,fsr0l
 10153  001D10  C029  FFFB         	movff	??_ISR+3,pclatu
 10154  001D14  C028  FFFA         	movff	??_ISR+2,pclath
 10155  001D18  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10156  001D1A  0011               	retfie		f
 10157  001D1C                     __end_of_ISR:
 10158                           	opt stack 0
 10159                           tosu	equ	0xFFF
 10160                           tosh	equ	0xFFE
 10161                           tosl	equ	0xFFD
 10162                           pclatu	equ	0xFFB
 10163                           pclath	equ	0xFFA
 10164                           tblptru	equ	0xFF8
 10165                           tblptrh	equ	0xFF7
 10166                           tblptrl	equ	0xFF6
 10167                           tablat	equ	0xFF5
 10168                           prodh	equ	0xFF4
 10169                           prodl	equ	0xFF3
 10170                           intcon	equ	0xFF2
 10171                           postinc0	equ	0xFEE
 10172                           fsr0h	equ	0xFEA
 10173                           fsr0l	equ	0xFE9
 10174                           wreg	equ	0xFE8
 10175                           indf1	equ	0xFE7
 10176                           postinc1	equ	0xFE6
 10177                           postdec1	equ	0xFE5
 10178                           fsr1h	equ	0xFE2
 10179                           fsr1l	equ	0xFE1
 10180                           indf2	equ	0xFDF
 10181                           postinc2	equ	0xFDE
 10182                           postdec2	equ	0xFDD
 10183                           plusw2	equ	0xFDB
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _SPI32_EOTResponse *****************
 10189 ;; Defined at:
 10190 ;;		line 166 in file "SPI32_HW.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10204 ;;      Params:         0       0       0       0
 10205 ;;      Locals:         3       0       0       0
 10206 ;;      Temps:          0       0       0       0
 10207 ;;      Totals:         3       0       0       0
 10208 ;;Total ram usage:        3 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    4
 10211 ;; This function calls:
 10212 ;;		i2_PostSPI32ControlService
 10213 ;;		i2_SPI32_SendFrame
 10214 ;; This function is called by:
 10215 ;;		_ISR
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           	psect	text51
 10220  002842                     __ptext51:
 10221                           	opt stack 0
 10222  002842                     _SPI32_EOTResponse:
 10223                           	opt stack 16
 10224                           
 10225                           ;SPI32_HW.c: 168: if(FrameByte == 0){
 10226                           
 10227                           ;incstack = 0
 10228  002842  0100               	movlb	0	; () banked
 10229  002844  51FE               	movf	_FrameByte& (0+255),w,b
 10230  002846  A4D8               	btfss	status,2,c
 10231  002848  D00E               	goto	i2l3770
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;SPI32_HW.c: 170: FrameByte = 4;
 10235  00284A  0E04               	movlw	4
 10236  00284C  0100               	movlb	0	; () banked
 10237  00284E  6FFE               	movwf	_FrameByte& (0+255),b
 10238                           
 10239                           ;SPI32_HW.c: 172: ES_Event EOTevent;
 10240                           ;SPI32_HW.c: 173: EOTevent.EventType = ES_TIMEOUT;
 10241  002850  0E03               	movlw	3
 10242  002852  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;SPI32_HW.c: 174: PostSPI32ControlService(EOTevent);
 10246  002854  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 10247  002858  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 10248  00285C  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 10249  002860  EC4B  F015         	call	i2_PostSPI32ControlService	;wreg free
 10250                           
 10251                           ;SPI32_HW.c: 175: }
 10252  002864  0012               	return	
 10253  002866                     i2l3770:
 10254                           
 10255                           ;SPI32_HW.c: 176: else{
 10256                           ;SPI32_HW.c: 178: SPI32_SendFrame(TransmitFrame);
 10257  002866  C036  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 10258  00286A  C037  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 10259  00286E  C038  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 10260  002872  C039  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 10261  002876  EC7E  F013         	call	i2_SPI32_SendFrame	;wreg free
 10262  00287A  0012               	return	
 10263  00287C                     __end_of_SPI32_EOTResponse:
 10264                           	opt stack 0
 10265                           tosu	equ	0xFFF
 10266                           tosh	equ	0xFFE
 10267                           tosl	equ	0xFFD
 10268                           pclatu	equ	0xFFB
 10269                           pclath	equ	0xFFA
 10270                           tblptru	equ	0xFF8
 10271                           tblptrh	equ	0xFF7
 10272                           tblptrl	equ	0xFF6
 10273                           tablat	equ	0xFF5
 10274                           prodh	equ	0xFF4
 10275                           prodl	equ	0xFF3
 10276                           intcon	equ	0xFF2
 10277                           postinc0	equ	0xFEE
 10278                           fsr0h	equ	0xFEA
 10279                           fsr0l	equ	0xFE9
 10280                           wreg	equ	0xFE8
 10281                           indf1	equ	0xFE7
 10282                           postinc1	equ	0xFE6
 10283                           postdec1	equ	0xFE5
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           plusw2	equ	0xFDB
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function i2_SPI32_SendFrame *****************
 10295 ;; Defined at:
 10296 ;;		line 85 in file "SPI32_HW.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  newFrame        4    0[COMRAM] unsigned long 
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;		None
 10301 ;; Return value:  Size  Location     Type
 10302 ;;                  1    wreg      void 
 10303 ;; Registers used:
 10304 ;;		wreg, status,2, status,0, prodl, prodh
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10310 ;;      Params:         4       0       0       0
 10311 ;;      Locals:         0       0       0       0
 10312 ;;      Temps:          4       0       0       0
 10313 ;;      Totals:         8       0       0       0
 10314 ;;Total ram usage:        8 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; This function calls:
 10317 ;;		Nothing
 10318 ;; This function is called by:
 10319 ;;		_SPI32_EOTResponse
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           	psect	text52
 10324  0026FC                     __ptext52:
 10325                           	opt stack 0
 10326  0026FC                     i2_SPI32_SendFrame:
 10327                           	opt stack 19
 10328                           
 10329                           ;SPI32_HW.c: 100: if(FrameByte == 4){
 10330                           
 10331                           ;incstack = 0
 10332  0026FC  0E04               	movlw	4
 10333  0026FE  0100               	movlb	0	; () banked
 10334  002700  19FE               	xorwf	_FrameByte& (0+255),w,b
 10335  002702  A4D8               	btfss	status,2,c
 10336  002704  D008               	goto	i2l3708
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
 10340  002706  C001  F036         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 10341  00270A  C002  F037         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 10342  00270E  C003  F038         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 10343  002712  C004  F039         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 10344  002716                     i2l3708:
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;SPI32_HW.c: 103: }
 10348                           ;SPI32_HW.c: 105: FrameByte--;
 10349  002716  0100               	movlb	0	; () banked
 10350  002718  07FE               	decf	_FrameByte& (0+255),f,b
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 10354  00271A  0100               	movlb	0	; () banked
 10355  00271C  51FE               	movf	_FrameByte& (0+255),w,b
 10356  00271E  0D08               	mullw	8
 10357  002720  50F3               	movf	prodl,w,c
 10358  002722  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 10359  002726  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 10360  00272A  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 10361  00272E  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 10362  002732  2AE8               	incf	wreg,f,c
 10363  002734  D005               	goto	i2u273_40
 10364  002736                     i2u273_45:
 10365  002736  90D8               	bcf	status,0,c
 10366  002738  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 10367  00273A  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 10368  00273C  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 10369  00273E  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 10370  002740                     i2u273_40:
 10371  002740  2EE8               	decfsz	wreg,f,c
 10372  002742  D7F9               	goto	i2u273_45
 10373  002744  5005               	movf	??i2_SPI32_SendFrame,w,c
 10374  002746  6EC9               	movwf	4041,c	;volatile
 10375                           
 10376                           ; BSR set to: 0
 10377  002748  0012               	return		;funcret
 10378  00274A                     __end_ofi2_SPI32_SendFrame:
 10379                           	opt stack 0
 10380                           tosu	equ	0xFFF
 10381                           tosh	equ	0xFFE
 10382                           tosl	equ	0xFFD
 10383                           pclatu	equ	0xFFB
 10384                           pclath	equ	0xFFA
 10385                           tblptru	equ	0xFF8
 10386                           tblptrh	equ	0xFF7
 10387                           tblptrl	equ	0xFF6
 10388                           tablat	equ	0xFF5
 10389                           prodh	equ	0xFF4
 10390                           prodl	equ	0xFF3
 10391                           intcon	equ	0xFF2
 10392                           postinc0	equ	0xFEE
 10393                           fsr0h	equ	0xFEA
 10394                           fsr0l	equ	0xFE9
 10395                           wreg	equ	0xFE8
 10396                           indf1	equ	0xFE7
 10397                           postinc1	equ	0xFE6
 10398                           postdec1	equ	0xFE5
 10399                           fsr1h	equ	0xFE2
 10400                           fsr1l	equ	0xFE1
 10401                           indf2	equ	0xFDF
 10402                           postinc2	equ	0xFDE
 10403                           postdec2	equ	0xFDD
 10404                           plusw2	equ	0xFDB
 10405                           fsr2h	equ	0xFDA
 10406                           fsr2l	equ	0xFD9
 10407                           status	equ	0xFD8
 10408                           
 10409 ;; *************** function i2_PostSPI32ControlService *****************
 10410 ;; Defined at:
 10411 ;;		line 117 in file "SPI32_ControlService.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;                  1    wreg      unsigned char 
 10418 ;; Registers used:
 10419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10425 ;;      Params:         3       0       0       0
 10426 ;;      Locals:         0       0       0       0
 10427 ;;      Temps:          0       0       0       0
 10428 ;;      Totals:         3       0       0       0
 10429 ;;Total ram usage:        3 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    3
 10432 ;; This function calls:
 10433 ;;		i2_ES_PostToService
 10434 ;; This function is called by:
 10435 ;;		_SPI32_EOTResponse
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           	psect	text53
 10440  002A96                     __ptext53:
 10441                           	opt stack 0
 10442  002A96                     i2_PostSPI32ControlService:
 10443                           	opt stack 16
 10444                           
 10445                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 10446                           ;	Return value of i2_PostSPI32ControlService is never used
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;incstack = 0
 10450  002A96  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 10451  002A9A  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10452  002A9E  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10453  002AA2  0100               	movlb	0	; () banked
 10454  002AA4  51E0               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10455  002AA6  EC9D  F012         	call	i2_ES_PostToService
 10456  002AAA  0012               	return	
 10457  002AAC                     __end_ofi2_PostSPI32ControlService:
 10458                           	opt stack 0
 10459                           tosu	equ	0xFFF
 10460                           tosh	equ	0xFFE
 10461                           tosl	equ	0xFFD
 10462                           pclatu	equ	0xFFB
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           postinc0	equ	0xFEE
 10472                           fsr0h	equ	0xFEA
 10473                           fsr0l	equ	0xFE9
 10474                           wreg	equ	0xFE8
 10475                           indf1	equ	0xFE7
 10476                           postinc1	equ	0xFE6
 10477                           postdec1	equ	0xFE5
 10478                           fsr1h	equ	0xFE2
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           plusw2	equ	0xFDB
 10484                           fsr2h	equ	0xFDA
 10485                           fsr2l	equ	0xFD9
 10486                           status	equ	0xFD8
 10487                           
 10488 ;; *************** function _CAN_XmitResponse *****************
 10489 ;; Defined at:
 10490 ;;		line 65 in file "CAN_RX_HW.c"
 10491 ;; Parameters:    Size  Location     Type
 10492 ;;		None
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;		None
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  1    wreg      void 
 10497 ;; Registers used:
 10498 ;;		None
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10504 ;;      Params:         0       0       0       0
 10505 ;;      Locals:         0       0       0       0
 10506 ;;      Temps:          0       0       0       0
 10507 ;;      Totals:         0       0       0       0
 10508 ;;Total ram usage:        0 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; This function calls:
 10511 ;;		Nothing
 10512 ;; This function is called by:
 10513 ;;		_ISR
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text54
 10518  002B30                     __ptext54:
 10519                           	opt stack 0
 10520  002B30                     _CAN_XmitResponse:
 10521                           	opt stack 20
 10522                           
 10523                           ;CAN_RX_HW.c: 67: TXB0CONbits.TXREQ = 0;
 10524                           
 10525                           ;incstack = 0
 10526  002B30  010F               	movlb	15	; () banked
 10527  002B32  9740               	bcf	64,3,b	;volatile
 10528                           
 10529                           ; BSR set to: 15
 10530  002B34  0012               	return		;funcret
 10531  002B36                     __end_of_CAN_XmitResponse:
 10532                           	opt stack 0
 10533                           tosu	equ	0xFFF
 10534                           tosh	equ	0xFFE
 10535                           tosl	equ	0xFFD
 10536                           pclatu	equ	0xFFB
 10537                           pclath	equ	0xFFA
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           postinc0	equ	0xFEE
 10546                           fsr0h	equ	0xFEA
 10547                           fsr0l	equ	0xFE9
 10548                           wreg	equ	0xFE8
 10549                           indf1	equ	0xFE7
 10550                           postinc1	equ	0xFE6
 10551                           postdec1	equ	0xFE5
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           plusw2	equ	0xFDB
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _CAN_RCVResponse *****************
 10563 ;; Defined at:
 10564 ;;		line 70 in file "CAN_RX_HW.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;		None
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  2  137[None  ] int 
 10571 ;; Registers used:
 10572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10578 ;;      Params:         0       0       0       0
 10579 ;;      Locals:         0       0       0       0
 10580 ;;      Temps:          0       0       0       0
 10581 ;;      Totals:         0       0       0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    5
 10585 ;; This function calls:
 10586 ;;		_ProcessReceive
 10587 ;; This function is called by:
 10588 ;;		_ISR
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           	psect	text55
 10593  002AF2                     __ptext55:
 10594                           	opt stack 0
 10595  002AF2                     _CAN_RCVResponse:
 10596                           	opt stack 15
 10597                           
 10598                           ;CAN_RX_HW.c: 72: if (RXB0CONbits.RXFUL == 1) {
 10599                           
 10600                           ; BSR set to: 15
 10601                           ;incstack = 0
 10602  002AF2  AE60               	btfss	3936,7,c	;volatile
 10603  002AF4  0012               	return	
 10604                           
 10605                           ;CAN_RX_HW.c: 73: ProcessReceive();
 10606  002AF6  ECAB  F00F         	call	_ProcessReceive	;wreg free
 10607                           
 10608                           ;CAN_RX_HW.c: 74: RXB0CONbits.RXFUL = 0;
 10609  002AFA  9E60               	bcf	3936,7,c	;volatile
 10610  002AFC  0012               	return	
 10611  002AFE                     __end_of_CAN_RCVResponse:
 10612                           	opt stack 0
 10613                           tosu	equ	0xFFF
 10614                           tosh	equ	0xFFE
 10615                           tosl	equ	0xFFD
 10616                           pclatu	equ	0xFFB
 10617                           pclath	equ	0xFFA
 10618                           tblptru	equ	0xFF8
 10619                           tblptrh	equ	0xFF7
 10620                           tblptrl	equ	0xFF6
 10621                           tablat	equ	0xFF5
 10622                           prodh	equ	0xFF4
 10623                           prodl	equ	0xFF3
 10624                           intcon	equ	0xFF2
 10625                           postinc0	equ	0xFEE
 10626                           fsr0h	equ	0xFEA
 10627                           fsr0l	equ	0xFE9
 10628                           wreg	equ	0xFE8
 10629                           indf1	equ	0xFE7
 10630                           postinc1	equ	0xFE6
 10631                           postdec1	equ	0xFE5
 10632                           fsr1h	equ	0xFE2
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           plusw2	equ	0xFDB
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _ProcessReceive *****************
 10643 ;; Defined at:
 10644 ;;		line 177 in file "CAN_RX_HW.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10658 ;;      Params:         0       0       0       0
 10659 ;;      Locals:         5       0       0       0
 10660 ;;      Temps:          0       0       0       0
 10661 ;;      Totals:         5       0       0       0
 10662 ;;Total ram usage:        5 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    4
 10665 ;; This function calls:
 10666 ;;		_SetBrightness
 10667 ;;		_SetListenFocus
 10668 ;;		_SetPattern
 10669 ;;		i2_PostPatternControlService
 10670 ;;		i2___awmod
 10671 ;; This function is called by:
 10672 ;;		_CAN_RCVResponse
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           	psect	text56
 10677  001F56                     __ptext56:
 10678                           	opt stack 0
 10679  001F56                     _ProcessReceive:
 10680                           	opt stack 15
 10681                           
 10682                           ;CAN_RX_HW.c: 179: static uint8_t LastButton = 0xFF;
 10683                           ;CAN_RX_HW.c: 181: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && RXB0E
      +                          IDL == 0x01) {
 10684                           
 10685                           ;incstack = 0
 10686  001F56  5061               	movf	3937,w,c	;volatile
 10687  001F58  A4D8               	btfss	status,2,c
 10688  001F5A  0012               	return	
 10689  001F5C  0E18               	movlw	24
 10690  001F5E  1862               	xorwf	3938,w,c	;volatile
 10691  001F60  A4D8               	btfss	status,2,c
 10692  001F62  0012               	return	
 10693  001F64  5063               	movf	3939,w,c	;volatile
 10694  001F66  A4D8               	btfss	status,2,c
 10695  001F68  0012               	return	
 10696  001F6A  0464               	decf	3940,w,c	;volatile
 10697  001F6C  A4D8               	btfss	status,2,c
 10698  001F6E  0012               	return	
 10699                           
 10700                           ;CAN_RX_HW.c: 182: ES_Event Event2Post;
 10701                           ;CAN_RX_HW.c: 183: if(RXB0D0 != 0xFF){
 10702  001F70  2866               	incf	3942,w,c	;volatile
 10703  001F72  A4D8               	btfss	status,2,c
 10704  001F74  D029               	goto	i2l3692
 10705  001F76  D037               	goto	i2l3694
 10706  001F78                     i2l3672:
 10707                           
 10708                           ;CAN_RX_HW.c: 186: Event2Post.EventType = PATTERN_START;
 10709  001F78  0E05               	movlw	5
 10710  001F7A  D012               	goto	L21
 10711  001F7C                     i2l3674:
 10712                           
 10713                           ;CAN_RX_HW.c: 189: Event2Post.EventType = (LastButton == 0x01 ? PATTERN_END : PATTERN_PA
      +                          USE);
 10714  001F7C  0457               	decf	ProcessReceive@LastButton,w,c
 10715  001F7E  B4D8               	btfsc	status,2,c
 10716  001F80  D004               	goto	i2l3678
 10717  001F82  0E00               	movlw	0
 10718  001F84  6E22               	movwf	_ProcessReceive$1196+1,c
 10719  001F86  0E07               	movlw	7
 10720  001F88  D003               	goto	L22
 10721  001F8A                     i2l3678:
 10722  001F8A  0E00               	movlw	0
 10723  001F8C  6E22               	movwf	_ProcessReceive$1196+1,c
 10724  001F8E  0E06               	movlw	6
 10725  001F90                     L22:
 10726  001F90  6E21               	movwf	_ProcessReceive$1196,c
 10727  001F92  C021  F023         	movff	_ProcessReceive$1196,ProcessReceive@Event2Post
 10728                           
 10729                           ;CAN_RX_HW.c: 190: break;
 10730  001F96  D025               	goto	i2l633
 10731  001F98                     i2l3682:
 10732                           
 10733                           ;CAN_RX_HW.c: 196: SetPattern(0);
 10734  001F98  0E00               	movlw	0
 10735  001F9A  EC7F  F015         	call	_SetPattern
 10736                           
 10737                           ;CAN_RX_HW.c: 197: Event2Post.EventType = PATTERN_END;
 10738  001F9E  0E06               	movlw	6
 10739  001FA0                     L21:
 10740  001FA0  6E23               	movwf	ProcessReceive@Event2Post,c
 10741                           
 10742                           ;CAN_RX_HW.c: 199: break;
 10743  001FA2  D01F               	goto	i2l633
 10744  001FA4                     i2l3686:
 10745                           
 10746                           ;CAN_RX_HW.c: 201: SetPattern(CurrentPattern);
 10747  001FA4  5048               	movf	_CurrentPattern,w,c
 10748  001FA6  EC7F  F015         	call	_SetPattern
 10749                           
 10750                           ;CAN_RX_HW.c: 202: CurrentPattern = (CurrentPattern+1)%6;
 10751  001FAA  0E01               	movlw	1
 10752  001FAC  2448               	addwf	_CurrentPattern,w,c
 10753  001FAE  6E01               	movwf	i2___awmod@dividend,c
 10754  001FB0  6A02               	clrf	i2___awmod@dividend+1,c
 10755  001FB2  0E00               	movlw	0
 10756  001FB4  2202               	addwfc	i2___awmod@dividend+1,f,c
 10757  001FB6  0E00               	movlw	0
 10758  001FB8  6E04               	movwf	i2___awmod@divisor+1,c
 10759  001FBA  0E06               	movlw	6
 10760  001FBC  6E03               	movwf	i2___awmod@divisor,c
 10761  001FBE  EC65  F012         	call	i2___awmod	;wreg free
 10762  001FC2  5001               	movf	?i2___awmod,w,c
 10763  001FC4  6E48               	movwf	_CurrentPattern,c
 10764                           
 10765                           ;CAN_RX_HW.c: 204: }
 10766                           
 10767                           ;CAN_RX_HW.c: 203: break;
 10768  001FC6  D00D               	goto	i2l633
 10769  001FC8                     i2l3692:
 10770  001FC8  5066               	movf	3942,w,c	;volatile
 10771                           
 10772                           ; Switch size 1, requested type "space"
 10773                           ; Number of cases is 4, Range of values is 0 to 3
 10774                           ; switch strategies available:
 10775                           ; Name         Instructions Cycles
 10776                           ; simple_byte           13     7 (average)
 10777                           ;	Chosen strategy is simple_byte
 10778  001FCA  0A00               	xorlw	0	; case 0
 10779  001FCC  B4D8               	btfsc	status,2,c
 10780  001FCE  D7D4               	goto	i2l3672
 10781  001FD0  0A01               	xorlw	1	; case 1
 10782  001FD2  B4D8               	btfsc	status,2,c
 10783  001FD4  D7D3               	goto	i2l3674
 10784  001FD6  0A03               	xorlw	3	; case 2
 10785  001FD8  B4D8               	btfsc	status,2,c
 10786  001FDA  D7DE               	goto	i2l3682
 10787  001FDC  0A01               	xorlw	1	; case 3
 10788  001FDE  B4D8               	btfsc	status,2,c
 10789  001FE0  D7E1               	goto	i2l3686
 10790  001FE2                     i2l633:
 10791                           
 10792                           ;CAN_RX_HW.c: 206: LastButton = RXB0D0;
 10793  001FE2  CF66 F057          	movff	3942,ProcessReceive@LastButton	;volatile
 10794  001FE6                     i2l3694:
 10795                           
 10796                           ;CAN_RX_HW.c: 207: }
 10797                           ;CAN_RX_HW.c: 209: SetBrightness(RXB0D1);
 10798  001FE6  5067               	movf	3943,w,c	;volatile
 10799  001FE8  EC9F  F014         	call	_SetBrightness
 10800                           
 10801                           ;CAN_RX_HW.c: 211: SetListenFocus(RXB0D2);
 10802  001FEC  5068               	movf	3944,w,c	;volatile
 10803  001FEE  EC8E  F015         	call	_SetListenFocus
 10804                           
 10805                           ;CAN_RX_HW.c: 213: PostPatternControlService(Event2Post);
 10806  001FF2  C023  F01E         	movff	ProcessReceive@Event2Post,i2PostPatternControlService@ThisEvent
 10807  001FF6  C024  F01F         	movff	ProcessReceive@Event2Post+1,i2PostPatternControlService@ThisEvent+1
 10808  001FFA  C025  F020         	movff	ProcessReceive@Event2Post+2,i2PostPatternControlService@ThisEvent+2
 10809  001FFE  EC56  F015         	call	i2_PostPatternControlService	;wreg free
 10810  002002  0012               	return	
 10811  002004                     __end_of_ProcessReceive:
 10812                           	opt stack 0
 10813                           tosu	equ	0xFFF
 10814                           tosh	equ	0xFFE
 10815                           tosl	equ	0xFFD
 10816                           pclatu	equ	0xFFB
 10817                           pclath	equ	0xFFA
 10818                           tblptru	equ	0xFF8
 10819                           tblptrh	equ	0xFF7
 10820                           tblptrl	equ	0xFF6
 10821                           tablat	equ	0xFF5
 10822                           prodh	equ	0xFF4
 10823                           prodl	equ	0xFF3
 10824                           intcon	equ	0xFF2
 10825                           postinc0	equ	0xFEE
 10826                           fsr0h	equ	0xFEA
 10827                           fsr0l	equ	0xFE9
 10828                           wreg	equ	0xFE8
 10829                           indf1	equ	0xFE7
 10830                           postinc1	equ	0xFE6
 10831                           postdec1	equ	0xFE5
 10832                           fsr1h	equ	0xFE2
 10833                           fsr1l	equ	0xFE1
 10834                           indf2	equ	0xFDF
 10835                           postinc2	equ	0xFDE
 10836                           postdec2	equ	0xFDD
 10837                           plusw2	equ	0xFDB
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function i2_PostPatternControlService *****************
 10843 ;; Defined at:
 10844 ;;		line 137 in file "Pattern_ControlService.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;		None
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  1    wreg      unsigned char 
 10851 ;; Registers used:
 10852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10858 ;;      Params:         3       0       0       0
 10859 ;;      Locals:         0       0       0       0
 10860 ;;      Temps:          0       0       0       0
 10861 ;;      Totals:         3       0       0       0
 10862 ;;Total ram usage:        3 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    3
 10865 ;; This function calls:
 10866 ;;		i2_ES_PostToService
 10867 ;; This function is called by:
 10868 ;;		_ProcessReceive
 10869 ;; This function uses a non-reentrant model
 10870 ;;
 10871                           
 10872                           	psect	text57
 10873  002AAC                     __ptext57:
 10874                           	opt stack 0
 10875  002AAC                     i2_PostPatternControlService:
 10876                           	opt stack 15
 10877                           
 10878                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
 10879                           ;	Return value of i2_PostPatternControlService is never used
 10880                           
 10881                           ;incstack = 0
 10882  002AAC  C01E  F018         	movff	i2PostPatternControlService@ThisEvent,i2ES_PostToService@TheEvent
 10883  002AB0  C01F  F019         	movff	i2PostPatternControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10884  002AB4  C020  F01A         	movff	i2PostPatternControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10885  002AB8  0100               	movlb	0	; () banked
 10886  002ABA  51E3               	movf	_MyPriority& (0+255),w,b
 10887  002ABC  EC9D  F012         	call	i2_ES_PostToService
 10888  002AC0  0012               	return	
 10889  002AC2                     __end_ofi2_PostPatternControlService:
 10890                           	opt stack 0
 10891                           tosu	equ	0xFFF
 10892                           tosh	equ	0xFFE
 10893                           tosl	equ	0xFFD
 10894                           pclatu	equ	0xFFB
 10895                           pclath	equ	0xFFA
 10896                           tblptru	equ	0xFF8
 10897                           tblptrh	equ	0xFF7
 10898                           tblptrl	equ	0xFF6
 10899                           tablat	equ	0xFF5
 10900                           prodh	equ	0xFF4
 10901                           prodl	equ	0xFF3
 10902                           intcon	equ	0xFF2
 10903                           postinc0	equ	0xFEE
 10904                           fsr0h	equ	0xFEA
 10905                           fsr0l	equ	0xFE9
 10906                           wreg	equ	0xFE8
 10907                           indf1	equ	0xFE7
 10908                           postinc1	equ	0xFE6
 10909                           postdec1	equ	0xFE5
 10910                           fsr1h	equ	0xFE2
 10911                           fsr1l	equ	0xFE1
 10912                           indf2	equ	0xFDF
 10913                           postinc2	equ	0xFDE
 10914                           postdec2	equ	0xFDD
 10915                           plusw2	equ	0xFDB
 10916                           fsr2h	equ	0xFDA
 10917                           fsr2l	equ	0xFD9
 10918                           status	equ	0xFD8
 10919                           
 10920 ;; *************** function i2_ES_PostToService *****************
 10921 ;; Defined at:
 10922 ;;		line 351 in file "ES_Framework.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;  WhichService    1    wreg     unsigned char 
 10925 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;  WhichService    1   28[COMRAM] unsigned char 
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  1    wreg      unsigned char 
 10930 ;; Registers used:
 10931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10937 ;;      Params:         3       0       0       0
 10938 ;;      Locals:         1       0       0       0
 10939 ;;      Temps:          2       0       0       0
 10940 ;;      Totals:         6       0       0       0
 10941 ;;Total ram usage:        6 bytes
 10942 ;; Hardware stack levels used:    1
 10943 ;; Hardware stack levels required when called:    2
 10944 ;; This function calls:
 10945 ;;		i2_ES_EnQueueFIFO
 10946 ;; This function is called by:
 10947 ;;		i2_PostPatternControlService
 10948 ;;		i2_PostSPI32ControlService
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text58
 10953  00253A                     __ptext58:
 10954                           	opt stack 0
 10955  00253A                     i2_ES_PostToService:
 10956                           	opt stack 16
 10957                           
 10958                           ;incstack = 0
 10959                           ;i2ES_PostToService@WhichService stored from wreg
 10960  00253A  6E1D               	movwf	i2ES_PostToService@WhichService,c
 10961                           
 10962                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 10963                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 10964                           ;ES_Framework.c: 354: 1 )){
 10965  00253C  0E02               	movlw	2
 10966  00253E  601D               	cpfslt	i2ES_PostToService@WhichService,c
 10967  002540  D02F               	goto	i2l3344
 10968  002542  501D               	movf	i2ES_PostToService@WhichService,w,c
 10969  002544  0D03               	mullw	3
 10970  002546  0E58               	movlw	low _EventQueues
 10971  002548  24F3               	addwf	prodl,w,c
 10972  00254A  6EF6               	movwf	tblptrl,c
 10973  00254C  0E03               	movlw	high _EventQueues
 10974  00254E  20F4               	addwfc	prodh,w,c
 10975  002550  6EF7               	movwf	tblptrh,c
 10976  002552                     	if	0	;There are less than 3 active tblptr bytes
 10977  002552                     	endif
 10978  002552  0009               	tblrd		*+
 10979  002554  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 10980  002558  000A               	tblrd		*-
 10981  00255A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 10982  00255E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 10983  002562  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 10984  002566  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 10985  00256A  EC51  F00F         	call	i2_ES_EnQueueFIFO	;wreg free
 10986  00256E  06E8               	decf	wreg,f,c
 10987  002570  A4D8               	btfss	status,2,c
 10988  002572  D016               	goto	i2l3344
 10989                           
 10990                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 10991  002574  501D               	movf	i2ES_PostToService@WhichService,w,c
 10992  002576  0D02               	mullw	2
 10993  002578  0E01               	movlw	low _BitNum2SetMask
 10994  00257A  24F3               	addwf	prodl,w,c
 10995  00257C  6EF6               	movwf	tblptrl,c
 10996  00257E  0E03               	movlw	high _BitNum2SetMask
 10997  002580  20F4               	addwfc	prodh,w,c
 10998  002582  6EF7               	movwf	tblptrh,c
 10999  002584                     	if	0	;There are less than 3 active tblptr bytes
 11000  002584                     	endif
 11001  002584  0009               	tblrd		*+
 11002  002586  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 11003  00258A  0009               	tblrd		*+
 11004  00258C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 11005  002590  501B               	movf	??i2_ES_PostToService,w,c
 11006  002592  0100               	movlb	0	; () banked
 11007  002594  13DA               	iorwf	_Ready& (0+255),f,b
 11008  002596  501C               	movf	??i2_ES_PostToService+1,w,c
 11009  002598  0100               	movlb	0	; () banked
 11010  00259A  13DB               	iorwf	(_Ready+1)& (0+255),f,b
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;ES_Framework.c: 356: return 1;
 11014  00259C  0E01               	movlw	1
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;ES_Framework.c: 357: } else
 11018                           
 11019                           ; BSR set to: 0
 11020  00259E  0012               	return	
 11021  0025A0                     i2l3344:
 11022                           
 11023                           ;ES_Framework.c: 358: return 0;
 11024  0025A0  0E00               	movlw	0
 11025  0025A2  0012               	return	
 11026  0025A4                     __end_ofi2_ES_PostToService:
 11027                           	opt stack 0
 11028                           tosu	equ	0xFFF
 11029                           tosh	equ	0xFFE
 11030                           tosl	equ	0xFFD
 11031                           pclatu	equ	0xFFB
 11032                           pclath	equ	0xFFA
 11033                           tblptru	equ	0xFF8
 11034                           tblptrh	equ	0xFF7
 11035                           tblptrl	equ	0xFF6
 11036                           tablat	equ	0xFF5
 11037                           prodh	equ	0xFF4
 11038                           prodl	equ	0xFF3
 11039                           intcon	equ	0xFF2
 11040                           postinc0	equ	0xFEE
 11041                           fsr0h	equ	0xFEA
 11042                           fsr0l	equ	0xFE9
 11043                           wreg	equ	0xFE8
 11044                           indf1	equ	0xFE7
 11045                           postinc1	equ	0xFE6
 11046                           postdec1	equ	0xFE5
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           plusw2	equ	0xFDB
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function i2_ES_EnQueueFIFO *****************
 11058 ;; Defined at:
 11059 ;;		line 85 in file "ES_Queue.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 11062 ;;		 -> Queue1(12), Queue0(12), 
 11063 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 11066 ;;		 -> Queue1(12), Queue0(12), 
 11067 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      unsigned char 
 11070 ;; Registers used:
 11071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11077 ;;      Params:         5       0       0       0
 11078 ;;      Locals:         3       0       0       0
 11079 ;;      Temps:          3       0       0       0
 11080 ;;      Totals:        11       0       0       0
 11081 ;;Total ram usage:       11 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    1
 11084 ;; This function calls:
 11085 ;;		i2___awmod
 11086 ;;		i2___wmul
 11087 ;; This function is called by:
 11088 ;;		i2_ES_PostToService
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           	psect	text59
 11093  001EA2                     __ptext59:
 11094                           	opt stack 0
 11095  001EA2                     i2_ES_EnQueueFIFO:
 11096                           	opt stack 16
 11097                           
 11098                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11099                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11100                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11101                           
 11102                           ;incstack = 0
 11103  001EA2  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 11104  001EA6  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 11105                           
 11106                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11107  001EAA  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11108  001EAE  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11109  001EB2  EE10 F002          	lfsr	1,2
 11110  001EB6  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11111  001EB8  26E1               	addwf	fsr1l,f,c
 11112  001EBA  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11113  001EBC  22E2               	addwfc	fsr1h,f,c
 11114  001EBE  50DE               	movf	postinc2,w,c
 11115  001EC0  5CE6               	subwf	postinc1,w,c
 11116  001EC2  B0D8               	btfsc	status,0,c
 11117  001EC4  D046               	goto	i2l3160
 11118                           
 11119                           ;ES_Queue.c: 92: {
 11120                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11121  001EC6  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 11122  001ECA  9EF2               	bcf	intcon,7,c	;volatile
 11123                           
 11124                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11125                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11126  001ECC  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11127  001ED0  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11128  001ED4  50DF               	movf	indf2,w,c
 11129  001ED6  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 11130  001ED8  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 11131  001EDA  6E03               	movwf	i2___awmod@divisor,c
 11132  001EDC  6A04               	clrf	i2___awmod@divisor+1,c
 11133  001EDE  EE20 F002          	lfsr	2,2
 11134  001EE2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11135  001EE4  26D9               	addwf	fsr2l,f,c
 11136  001EE6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11137  001EE8  22DA               	addwfc	fsr2h,f,c
 11138  001EEA  50DF               	movf	indf2,w,c
 11139  001EEC  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 11140  001EEE  EE20 F001          	lfsr	2,1
 11141  001EF2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11142  001EF4  26D9               	addwf	fsr2l,f,c
 11143  001EF6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11144  001EF8  22DA               	addwfc	fsr2h,f,c
 11145  001EFA  50DF               	movf	indf2,w,c
 11146  001EFC  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 11147  001EFE  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 11148  001F00  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 11149  001F02  6E01               	movwf	i2___awmod@dividend,c
 11150  001F04  6A02               	clrf	i2___awmod@dividend+1,c
 11151  001F06  3602               	rlcf	i2___awmod@dividend+1,f,c
 11152  001F08  EC65  F012         	call	i2___awmod	;wreg free
 11153  001F0C  0E01               	movlw	1
 11154  001F0E  2401               	addwf	?i2___awmod,w,c
 11155  001F10  6E07               	movwf	i2___wmul@multiplier,c
 11156  001F12  0E00               	movlw	0
 11157  001F14  2002               	addwfc	?i2___awmod+1,w,c
 11158  001F16  6E08               	movwf	i2___wmul@multiplier+1,c
 11159  001F18  0E00               	movlw	0
 11160  001F1A  6E0A               	movwf	i2___wmul@multiplicand+1,c
 11161  001F1C  0E03               	movlw	3
 11162  001F1E  6E09               	movwf	i2___wmul@multiplicand,c
 11163  001F20  EC8C  F014         	call	i2___wmul	;wreg free
 11164  001F24  5007               	movf	?i2___wmul,w,c
 11165  001F26  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 11166  001F28  6ED9               	movwf	fsr2l,c
 11167  001F2A  5008               	movf	?i2___wmul+1,w,c
 11168  001F2C  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 11169  001F2E  6EDA               	movwf	fsr2h,c
 11170  001F30  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 11171  001F34  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 11172  001F38  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 11173                           
 11174                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11175  001F3C  EE20 F002          	lfsr	2,2
 11176  001F40  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11177  001F42  26D9               	addwf	fsr2l,f,c
 11178  001F44  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11179  001F46  22DA               	addwfc	fsr2h,f,c
 11180  001F48  2ADF               	incf	indf2,f,c
 11181                           
 11182                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11183  001F4A  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11184                           
 11185                           ;ES_Queue.c: 101: return(1);
 11186  001F4E  0E01               	movlw	1
 11187                           
 11188                           ;ES_Queue.c: 102: }else
 11189  001F50  0012               	return	
 11190  001F52                     i2l3160:
 11191                           
 11192                           ;ES_Queue.c: 103: return(0);
 11193  001F52  0E00               	movlw	0
 11194  001F54  0012               	return	
 11195  001F56                     __end_ofi2_ES_EnQueueFIFO:
 11196                           	opt stack 0
 11197                           tosu	equ	0xFFF
 11198                           tosh	equ	0xFFE
 11199                           tosl	equ	0xFFD
 11200                           pclatu	equ	0xFFB
 11201                           pclath	equ	0xFFA
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           postinc0	equ	0xFEE
 11210                           fsr0h	equ	0xFEA
 11211                           fsr0l	equ	0xFE9
 11212                           wreg	equ	0xFE8
 11213                           indf1	equ	0xFE7
 11214                           postinc1	equ	0xFE6
 11215                           postdec1	equ	0xFE5
 11216                           fsr1h	equ	0xFE2
 11217                           fsr1l	equ	0xFE1
 11218                           indf2	equ	0xFDF
 11219                           postinc2	equ	0xFDE
 11220                           postdec2	equ	0xFDD
 11221                           plusw2	equ	0xFDB
 11222                           fsr2h	equ	0xFDA
 11223                           fsr2l	equ	0xFD9
 11224                           status	equ	0xFD8
 11225                           
 11226 ;; *************** function i2___wmul *****************
 11227 ;; Defined at:
 11228 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  multiplier      2    6[COMRAM] unsigned int 
 11231 ;;  multiplicand    2    8[COMRAM] unsigned int 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  __wmul          2   10[COMRAM] unsigned int 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  2    6[COMRAM] unsigned int 
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, status,0, prodl, prodh
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11243 ;;      Params:         4       0       0       0
 11244 ;;      Locals:         2       0       0       0
 11245 ;;      Temps:          0       0       0       0
 11246 ;;      Totals:         6       0       0       0
 11247 ;;Total ram usage:        6 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; This function calls:
 11250 ;;		Nothing
 11251 ;; This function is called by:
 11252 ;;		i2_ES_EnQueueFIFO
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           	psect	text60
 11257  002918                     __ptext60:
 11258                           	opt stack 0
 11259  002918                     i2___wmul:
 11260                           	opt stack 16
 11261                           
 11262                           ;incstack = 0
 11263  002918  5007               	movf	i2___wmul@multiplier,w,c
 11264  00291A  0209               	mulwf	i2___wmul@multiplicand,c
 11265  00291C  CFF3 F00B          	movff	prodl,i2___wmul@product
 11266  002920  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 11267  002924  5007               	movf	i2___wmul@multiplier,w,c
 11268  002926  020A               	mulwf	i2___wmul@multiplicand+1,c
 11269  002928  50F3               	movf	prodl,w,c
 11270  00292A  260C               	addwf	i2___wmul@product+1,f,c
 11271  00292C  5008               	movf	i2___wmul@multiplier+1,w,c
 11272  00292E  0209               	mulwf	i2___wmul@multiplicand,c
 11273  002930  50F3               	movf	prodl,w,c
 11274  002932  260C               	addwf	i2___wmul@product+1,f,c
 11275  002934  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 11276  002938  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 11277  00293C  0012               	return	
 11278  00293E                     __end_ofi2___wmul:
 11279                           	opt stack 0
 11280                           tosu	equ	0xFFF
 11281                           tosh	equ	0xFFE
 11282                           tosl	equ	0xFFD
 11283                           pclatu	equ	0xFFB
 11284                           pclath	equ	0xFFA
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           postinc0	equ	0xFEE
 11293                           fsr0h	equ	0xFEA
 11294                           fsr0l	equ	0xFE9
 11295                           wreg	equ	0xFE8
 11296                           indf1	equ	0xFE7
 11297                           postinc1	equ	0xFE6
 11298                           postdec1	equ	0xFE5
 11299                           fsr1h	equ	0xFE2
 11300                           fsr1l	equ	0xFE1
 11301                           indf2	equ	0xFDF
 11302                           postinc2	equ	0xFDE
 11303                           postdec2	equ	0xFDD
 11304                           plusw2	equ	0xFDB
 11305                           fsr2h	equ	0xFDA
 11306                           fsr2l	equ	0xFD9
 11307                           status	equ	0xFD8
 11308                           
 11309 ;; *************** function i2___awmod *****************
 11310 ;; Defined at:
 11311 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;  dividend        2    0[COMRAM] int 
 11314 ;;  divisor         2    2[COMRAM] int 
 11315 ;; Auto vars:     Size  Location     Type
 11316 ;;  __awmod         1    5[COMRAM] unsigned char 
 11317 ;;  __awmod         1    4[COMRAM] unsigned char 
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  2    0[COMRAM] int 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11327 ;;      Params:         4       0       0       0
 11328 ;;      Locals:         2       0       0       0
 11329 ;;      Temps:          0       0       0       0
 11330 ;;      Totals:         6       0       0       0
 11331 ;;Total ram usage:        6 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; This function calls:
 11334 ;;		Nothing
 11335 ;; This function is called by:
 11336 ;;		_ProcessReceive
 11337 ;;		i2_ES_EnQueueFIFO
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           	psect	text61
 11342  0024CA                     __ptext61:
 11343                           	opt stack 0
 11344  0024CA                     i2___awmod:
 11345                           	opt stack 16
 11346                           
 11347                           ;incstack = 0
 11348  0024CA  0E00               	movlw	0
 11349  0024CC  6E06               	movwf	i2___awmod@sign,c
 11350  0024CE  AE02               	btfss	i2___awmod@dividend+1,7,c
 11351  0024D0  D006               	goto	i2l2882
 11352  0024D2  6C01               	negf	i2___awmod@dividend,c
 11353  0024D4  1E02               	comf	i2___awmod@dividend+1,f,c
 11354  0024D6  B0D8               	btfsc	status,0,c
 11355  0024D8  2A02               	incf	i2___awmod@dividend+1,f,c
 11356  0024DA  0E01               	movlw	1
 11357  0024DC  6E06               	movwf	i2___awmod@sign,c
 11358  0024DE                     i2l2882:
 11359  0024DE  AE04               	btfss	i2___awmod@divisor+1,7,c
 11360  0024E0  D004               	goto	i2l2886
 11361  0024E2  6C03               	negf	i2___awmod@divisor,c
 11362  0024E4  1E04               	comf	i2___awmod@divisor+1,f,c
 11363  0024E6  B0D8               	btfsc	status,0,c
 11364  0024E8  2A04               	incf	i2___awmod@divisor+1,f,c
 11365  0024EA                     i2l2886:
 11366  0024EA  5003               	movf	i2___awmod@divisor,w,c
 11367  0024EC  1004               	iorwf	i2___awmod@divisor+1,w,c
 11368  0024EE  B4D8               	btfsc	status,2,c
 11369  0024F0  D018               	goto	i2l2902
 11370  0024F2  0E01               	movlw	1
 11371  0024F4  6E05               	movwf	i2___awmod@counter,c
 11372  0024F6  D004               	goto	i2l2892
 11373  0024F8                     i2l2890:
 11374  0024F8  90D8               	bcf	status,0,c
 11375  0024FA  3603               	rlcf	i2___awmod@divisor,f,c
 11376  0024FC  3604               	rlcf	i2___awmod@divisor+1,f,c
 11377  0024FE  2A05               	incf	i2___awmod@counter,f,c
 11378  002500                     i2l2892:
 11379  002500  AE04               	btfss	i2___awmod@divisor+1,7,c
 11380  002502  D7FA               	goto	i2l2890
 11381  002504                     i2l2894:
 11382  002504  5003               	movf	i2___awmod@divisor,w,c
 11383  002506  5C01               	subwf	i2___awmod@dividend,w,c
 11384  002508  5004               	movf	i2___awmod@divisor+1,w,c
 11385  00250A  5802               	subwfb	i2___awmod@dividend+1,w,c
 11386  00250C  A0D8               	btfss	status,0,c
 11387  00250E  D004               	goto	i2l2898
 11388  002510  5003               	movf	i2___awmod@divisor,w,c
 11389  002512  5E01               	subwf	i2___awmod@dividend,f,c
 11390  002514  5004               	movf	i2___awmod@divisor+1,w,c
 11391  002516  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11392  002518                     i2l2898:
 11393  002518  90D8               	bcf	status,0,c
 11394  00251A  3204               	rrcf	i2___awmod@divisor+1,f,c
 11395  00251C  3203               	rrcf	i2___awmod@divisor,f,c
 11396  00251E  2E05               	decfsz	i2___awmod@counter,f,c
 11397  002520  D7F1               	goto	i2l2894
 11398  002522                     i2l2902:
 11399  002522  5006               	movf	i2___awmod@sign,w,c
 11400  002524  B4D8               	btfsc	status,2,c
 11401  002526  D004               	goto	i2l2906
 11402  002528  6C01               	negf	i2___awmod@dividend,c
 11403  00252A  1E02               	comf	i2___awmod@dividend+1,f,c
 11404  00252C  B0D8               	btfsc	status,0,c
 11405  00252E  2A02               	incf	i2___awmod@dividend+1,f,c
 11406  002530                     i2l2906:
 11407  002530  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11408  002534  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11409  002538  0012               	return	
 11410  00253A                     __end_ofi2___awmod:
 11411                           	opt stack 0
 11412                           tosu	equ	0xFFF
 11413                           tosh	equ	0xFFE
 11414                           tosl	equ	0xFFD
 11415                           pclatu	equ	0xFFB
 11416                           pclath	equ	0xFFA
 11417                           tblptru	equ	0xFF8
 11418                           tblptrh	equ	0xFF7
 11419                           tblptrl	equ	0xFF6
 11420                           tablat	equ	0xFF5
 11421                           prodh	equ	0xFF4
 11422                           prodl	equ	0xFF3
 11423                           intcon	equ	0xFF2
 11424                           postinc0	equ	0xFEE
 11425                           fsr0h	equ	0xFEA
 11426                           fsr0l	equ	0xFE9
 11427                           wreg	equ	0xFE8
 11428                           indf1	equ	0xFE7
 11429                           postinc1	equ	0xFE6
 11430                           postdec1	equ	0xFE5
 11431                           fsr1h	equ	0xFE2
 11432                           fsr1l	equ	0xFE1
 11433                           indf2	equ	0xFDF
 11434                           postinc2	equ	0xFDE
 11435                           postdec2	equ	0xFDD
 11436                           plusw2	equ	0xFDB
 11437                           fsr2h	equ	0xFDA
 11438                           fsr2l	equ	0xFD9
 11439                           status	equ	0xFD8
 11440                           
 11441 ;; *************** function _SetPattern *****************
 11442 ;; Defined at:
 11443 ;;		line 236 in file "Pattern_ControlService.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  PatternID       1    wreg     unsigned char 
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  PatternID       1    0[COMRAM] unsigned char 
 11448 ;; Return value:  Size  Location     Type
 11449 ;;                  1    wreg      void 
 11450 ;; Registers used:
 11451 ;;		wreg, status,2, cstack
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/0
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11457 ;;      Params:         0       0       0       0
 11458 ;;      Locals:         1       0       0       0
 11459 ;;      Temps:          0       0       0       0
 11460 ;;      Totals:         1       0       0       0
 11461 ;;Total ram usage:        1 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; Hardware stack levels required when called:    1
 11464 ;; This function calls:
 11465 ;;		i2_ResetPattern
 11466 ;; This function is called by:
 11467 ;;		_ProcessReceive
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           	psect	text62
 11472  002AFE                     __ptext62:
 11473                           	opt stack 0
 11474  002AFE                     _SetPattern:
 11475                           	opt stack 17
 11476                           
 11477                           ;incstack = 0
 11478                           ;SetPattern@PatternID stored from wreg
 11479  002AFE  6E01               	movwf	SetPattern@PatternID,c
 11480                           
 11481                           ;Pattern_ControlService.c: 237: PatternConfigs[0] = PatternID;
 11482  002B00  C001  F059         	movff	SetPattern@PatternID,_PatternConfigs
 11483                           
 11484                           ;Pattern_ControlService.c: 239: ResetPattern();
 11485  002B04  EC33  F015         	call	i2_ResetPattern	;wreg free
 11486  002B08  0012               	return		;funcret
 11487  002B0A                     __end_of_SetPattern:
 11488                           	opt stack 0
 11489                           tosu	equ	0xFFF
 11490                           tosh	equ	0xFFE
 11491                           tosl	equ	0xFFD
 11492                           pclatu	equ	0xFFB
 11493                           pclath	equ	0xFFA
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           postinc0	equ	0xFEE
 11502                           fsr0h	equ	0xFEA
 11503                           fsr0l	equ	0xFE9
 11504                           wreg	equ	0xFE8
 11505                           indf1	equ	0xFE7
 11506                           postinc1	equ	0xFE6
 11507                           postdec1	equ	0xFE5
 11508                           fsr1h	equ	0xFE2
 11509                           fsr1l	equ	0xFE1
 11510                           indf2	equ	0xFDF
 11511                           postinc2	equ	0xFDE
 11512                           postdec2	equ	0xFDD
 11513                           plusw2	equ	0xFDB
 11514                           fsr2h	equ	0xFDA
 11515                           fsr2l	equ	0xFD9
 11516                           status	equ	0xFD8
 11517                           
 11518 ;; *************** function i2_ResetPattern *****************
 11519 ;; Defined at:
 11520 ;;		line 72 in file "Pattern_PtrnGenerator.c"
 11521 ;; Parameters:    Size  Location     Type
 11522 ;;		None
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;		None
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      void 
 11527 ;; Registers used:
 11528 ;;		wreg, status,2
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11534 ;;      Params:         0       0       0       0
 11535 ;;      Locals:         0       0       0       0
 11536 ;;      Temps:          0       0       0       0
 11537 ;;      Totals:         0       0       0       0
 11538 ;;Total ram usage:        0 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; This function calls:
 11541 ;;		Nothing
 11542 ;; This function is called by:
 11543 ;;		_SetPattern
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           	psect	text63
 11548  002A66                     __ptext63:
 11549                           	opt stack 0
 11550  002A66                     i2_ResetPattern:
 11551                           	opt stack 17
 11552                           
 11553                           ;Pattern_PtrnGenerator.c: 74: PatternStepCounter = 0;
 11554                           
 11555                           ;incstack = 0
 11556  002A66  0E00               	movlw	0
 11557  002A68  0100               	movlb	0	; () banked
 11558  002A6A  6FEF               	movwf	_PatternStepCounter& (0+255),b
 11559                           
 11560                           ;Pattern_PtrnGenerator.c: 76: CycleCounter = 0;
 11561  002A6C  0E00               	movlw	0
 11562  002A6E  0100               	movlb	0	; () banked
 11563  002A70  6FE6               	movwf	_CycleCounter& (0+255),b
 11564  002A72  0E00               	movlw	0
 11565  002A74  6FE7               	movwf	(_CycleCounter+1)& (0+255),b
 11566  002A76  0E00               	movlw	0
 11567  002A78  6FE8               	movwf	(_CycleCounter+2)& (0+255),b
 11568  002A7A  0E00               	movlw	0
 11569  002A7C  6FE9               	movwf	(_CycleCounter+3)& (0+255),b
 11570                           
 11571                           ; BSR set to: 0
 11572  002A7E  0012               	return		;funcret
 11573  002A80                     __end_ofi2_ResetPattern:
 11574                           	opt stack 0
 11575                           tosu	equ	0xFFF
 11576                           tosh	equ	0xFFE
 11577                           tosl	equ	0xFFD
 11578                           pclatu	equ	0xFFB
 11579                           pclath	equ	0xFFA
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           postinc0	equ	0xFEE
 11588                           fsr0h	equ	0xFEA
 11589                           fsr0l	equ	0xFE9
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postinc1	equ	0xFE6
 11593                           postdec1	equ	0xFE5
 11594                           fsr1h	equ	0xFE2
 11595                           fsr1l	equ	0xFE1
 11596                           indf2	equ	0xFDF
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           plusw2	equ	0xFDB
 11600                           fsr2h	equ	0xFDA
 11601                           fsr2l	equ	0xFD9
 11602                           status	equ	0xFD8
 11603                           
 11604 ;; *************** function _SetListenFocus *****************
 11605 ;; Defined at:
 11606 ;;		line 249 in file "Pattern_ControlService.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  listFocus       1    wreg     unsigned char 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;  listFocus       1    0[COMRAM] unsigned char 
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  1    wreg      void 
 11613 ;; Registers used:
 11614 ;;		wreg
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11620 ;;      Params:         0       0       0       0
 11621 ;;      Locals:         1       0       0       0
 11622 ;;      Temps:          0       0       0       0
 11623 ;;      Totals:         1       0       0       0
 11624 ;;Total ram usage:        1 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		_ProcessReceive
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           	psect	text64
 11634  002B1C                     __ptext64:
 11635                           	opt stack 0
 11636  002B1C                     _SetListenFocus:
 11637                           	opt stack 18
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;incstack = 0
 11641                           ;SetListenFocus@listFocus stored from wreg
 11642  002B1C  6E01               	movwf	SetListenFocus@listFocus,c
 11643                           
 11644                           ;Pattern_ControlService.c: 250: PatternConfigs[2] = listFocus;
 11645  002B1E  C001  F05B         	movff	SetListenFocus@listFocus,_PatternConfigs+2
 11646  002B22  0012               	return		;funcret
 11647  002B24                     __end_of_SetListenFocus:
 11648                           	opt stack 0
 11649                           tosu	equ	0xFFF
 11650                           tosh	equ	0xFFE
 11651                           tosl	equ	0xFFD
 11652                           pclatu	equ	0xFFB
 11653                           pclath	equ	0xFFA
 11654                           tblptru	equ	0xFF8
 11655                           tblptrh	equ	0xFF7
 11656                           tblptrl	equ	0xFF6
 11657                           tablat	equ	0xFF5
 11658                           prodh	equ	0xFF4
 11659                           prodl	equ	0xFF3
 11660                           intcon	equ	0xFF2
 11661                           postinc0	equ	0xFEE
 11662                           fsr0h	equ	0xFEA
 11663                           fsr0l	equ	0xFE9
 11664                           wreg	equ	0xFE8
 11665                           indf1	equ	0xFE7
 11666                           postinc1	equ	0xFE6
 11667                           postdec1	equ	0xFE5
 11668                           fsr1h	equ	0xFE2
 11669                           fsr1l	equ	0xFE1
 11670                           indf2	equ	0xFDF
 11671                           postinc2	equ	0xFDE
 11672                           postdec2	equ	0xFDD
 11673                           plusw2	equ	0xFDB
 11674                           fsr2h	equ	0xFDA
 11675                           fsr2l	equ	0xFD9
 11676                           status	equ	0xFD8
 11677                           
 11678 ;; *************** function _SetBrightness *****************
 11679 ;; Defined at:
 11680 ;;		line 243 in file "Pattern_ControlService.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;  brightness      1    wreg     unsigned char 
 11683 ;; Auto vars:     Size  Location     Type
 11684 ;;  brightness      1   10[COMRAM] unsigned char 
 11685 ;;  newBrightnes    2    8[COMRAM] unsigned int 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  1    wreg      void 
 11688 ;; Registers used:
 11689 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11695 ;;      Params:         0       0       0       0
 11696 ;;      Locals:         3       0       0       0
 11697 ;;      Temps:          0       0       0       0
 11698 ;;      Totals:         3       0       0       0
 11699 ;;Total ram usage:        3 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    1
 11702 ;; This function calls:
 11703 ;;		i2___awdiv
 11704 ;; This function is called by:
 11705 ;;		_ProcessReceive
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	text65
 11710  00293E                     __ptext65:
 11711                           	opt stack 0
 11712  00293E                     _SetBrightness:
 11713                           	opt stack 17
 11714                           
 11715                           ;incstack = 0
 11716                           ;SetBrightness@brightness stored from wreg
 11717  00293E  6E0B               	movwf	SetBrightness@brightness,c
 11718                           
 11719                           ;Pattern_ControlService.c: 244: uint16_t newBrightness = brightness*MaxBrightness/255;
 11720  002940  500B               	movf	SetBrightness@brightness,w,c
 11721  002942  0258               	mulwf	_MaxBrightness,c
 11722  002944  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 11723  002948  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 11724  00294C  0E00               	movlw	0
 11725  00294E  6E04               	movwf	i2___awdiv@divisor+1,c
 11726  002950  6803               	setf	i2___awdiv@divisor,c
 11727  002952  EC2E  F011         	call	i2___awdiv	;wreg free
 11728  002956  C001  F009         	movff	?i2___awdiv,SetBrightness@newBrightness
 11729  00295A  C002  F00A         	movff	?i2___awdiv+1,SetBrightness@newBrightness+1
 11730                           
 11731                           ;Pattern_ControlService.c: 245: PatternConfigs[1] = newBrightness;
 11732  00295E  C009  F05A         	movff	SetBrightness@newBrightness,_PatternConfigs+1
 11733  002962  0012               	return		;funcret
 11734  002964                     __end_of_SetBrightness:
 11735                           	opt stack 0
 11736                           tosu	equ	0xFFF
 11737                           tosh	equ	0xFFE
 11738                           tosl	equ	0xFFD
 11739                           pclatu	equ	0xFFB
 11740                           pclath	equ	0xFFA
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           postinc0	equ	0xFEE
 11749                           fsr0h	equ	0xFEA
 11750                           fsr0l	equ	0xFE9
 11751                           wreg	equ	0xFE8
 11752                           indf1	equ	0xFE7
 11753                           postinc1	equ	0xFE6
 11754                           postdec1	equ	0xFE5
 11755                           fsr1h	equ	0xFE2
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           postdec2	equ	0xFDD
 11760                           plusw2	equ	0xFDB
 11761                           fsr2h	equ	0xFDA
 11762                           fsr2l	equ	0xFD9
 11763                           status	equ	0xFD8
 11764                           
 11765 ;; *************** function i2___awdiv *****************
 11766 ;; Defined at:
 11767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;  dividend        2    0[COMRAM] int 
 11770 ;;  divisor         2    2[COMRAM] int 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;  __awdiv         2    6[COMRAM] int 
 11773 ;;  __awdiv         1    5[COMRAM] unsigned char 
 11774 ;;  __awdiv         1    4[COMRAM] unsigned char 
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  2    0[COMRAM] int 
 11777 ;; Registers used:
 11778 ;;		wreg, status,2, status,0
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11784 ;;      Params:         4       0       0       0
 11785 ;;      Locals:         4       0       0       0
 11786 ;;      Temps:          0       0       0       0
 11787 ;;      Totals:         8       0       0       0
 11788 ;;Total ram usage:        8 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; This function calls:
 11791 ;;		Nothing
 11792 ;; This function is called by:
 11793 ;;		_SetBrightness
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           	psect	text66
 11798  00225C                     __ptext66:
 11799                           	opt stack 0
 11800  00225C                     i2___awdiv:
 11801                           	opt stack 17
 11802                           
 11803                           ;incstack = 0
 11804  00225C  0E00               	movlw	0
 11805  00225E  6E06               	movwf	i2___awdiv@sign,c
 11806  002260  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11807  002262  D006               	goto	i2l3358
 11808  002264  6C03               	negf	i2___awdiv@divisor,c
 11809  002266  1E04               	comf	i2___awdiv@divisor+1,f,c
 11810  002268  B0D8               	btfsc	status,0,c
 11811  00226A  2A04               	incf	i2___awdiv@divisor+1,f,c
 11812  00226C  0E01               	movlw	1
 11813  00226E  6E06               	movwf	i2___awdiv@sign,c
 11814  002270                     i2l3358:
 11815  002270  AE02               	btfss	i2___awdiv@dividend+1,7,c
 11816  002272  D006               	goto	i2l3364
 11817  002274  6C01               	negf	i2___awdiv@dividend,c
 11818  002276  1E02               	comf	i2___awdiv@dividend+1,f,c
 11819  002278  B0D8               	btfsc	status,0,c
 11820  00227A  2A02               	incf	i2___awdiv@dividend+1,f,c
 11821  00227C  0E01               	movlw	1
 11822  00227E  1A06               	xorwf	i2___awdiv@sign,f,c
 11823  002280                     i2l3364:
 11824  002280  0E00               	movlw	0
 11825  002282  6E08               	movwf	i2___awdiv@quotient+1,c
 11826  002284  0E00               	movlw	0
 11827  002286  6E07               	movwf	i2___awdiv@quotient,c
 11828  002288  5003               	movf	i2___awdiv@divisor,w,c
 11829  00228A  1004               	iorwf	i2___awdiv@divisor+1,w,c
 11830  00228C  B4D8               	btfsc	status,2,c
 11831  00228E  D01C               	goto	i2l3386
 11832  002290  0E01               	movlw	1
 11833  002292  6E05               	movwf	i2___awdiv@counter,c
 11834  002294  D004               	goto	i2l3372
 11835  002296                     i2l3370:
 11836  002296  90D8               	bcf	status,0,c
 11837  002298  3603               	rlcf	i2___awdiv@divisor,f,c
 11838  00229A  3604               	rlcf	i2___awdiv@divisor+1,f,c
 11839  00229C  2A05               	incf	i2___awdiv@counter,f,c
 11840  00229E                     i2l3372:
 11841  00229E  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11842  0022A0  D7FA               	goto	i2l3370
 11843  0022A2                     i2l3374:
 11844  0022A2  90D8               	bcf	status,0,c
 11845  0022A4  3607               	rlcf	i2___awdiv@quotient,f,c
 11846  0022A6  3608               	rlcf	i2___awdiv@quotient+1,f,c
 11847  0022A8  5003               	movf	i2___awdiv@divisor,w,c
 11848  0022AA  5C01               	subwf	i2___awdiv@dividend,w,c
 11849  0022AC  5004               	movf	i2___awdiv@divisor+1,w,c
 11850  0022AE  5802               	subwfb	i2___awdiv@dividend+1,w,c
 11851  0022B0  A0D8               	btfss	status,0,c
 11852  0022B2  D005               	goto	i2l3382
 11853  0022B4  5003               	movf	i2___awdiv@divisor,w,c
 11854  0022B6  5E01               	subwf	i2___awdiv@dividend,f,c
 11855  0022B8  5004               	movf	i2___awdiv@divisor+1,w,c
 11856  0022BA  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 11857  0022BC  8007               	bsf	i2___awdiv@quotient,0,c
 11858  0022BE                     i2l3382:
 11859  0022BE  90D8               	bcf	status,0,c
 11860  0022C0  3204               	rrcf	i2___awdiv@divisor+1,f,c
 11861  0022C2  3203               	rrcf	i2___awdiv@divisor,f,c
 11862  0022C4  2E05               	decfsz	i2___awdiv@counter,f,c
 11863  0022C6  D7ED               	goto	i2l3374
 11864  0022C8                     i2l3386:
 11865  0022C8  5006               	movf	i2___awdiv@sign,w,c
 11866  0022CA  B4D8               	btfsc	status,2,c
 11867  0022CC  D004               	goto	i2l3390
 11868  0022CE  6C07               	negf	i2___awdiv@quotient,c
 11869  0022D0  1E08               	comf	i2___awdiv@quotient+1,f,c
 11870  0022D2  B0D8               	btfsc	status,0,c
 11871  0022D4  2A08               	incf	i2___awdiv@quotient+1,f,c
 11872  0022D6                     i2l3390:
 11873  0022D6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 11874  0022DA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11875  0022DE  0012               	return	
 11876  0022E0                     __end_ofi2___awdiv:
 11877                           	opt stack 0
 11878                           tosu	equ	0xFFF
 11879                           tosh	equ	0xFFE
 11880                           tosl	equ	0xFFD
 11881                           pclatu	equ	0xFFB
 11882                           pclath	equ	0xFFA
 11883                           tblptru	equ	0xFF8
 11884                           tblptrh	equ	0xFF7
 11885                           tblptrl	equ	0xFF6
 11886                           tablat	equ	0xFF5
 11887                           prodh	equ	0xFF4
 11888                           prodl	equ	0xFF3
 11889                           intcon	equ	0xFF2
 11890                           postinc0	equ	0xFEE
 11891                           fsr0h	equ	0xFEA
 11892                           fsr0l	equ	0xFE9
 11893                           wreg	equ	0xFE8
 11894                           indf1	equ	0xFE7
 11895                           postinc1	equ	0xFE6
 11896                           postdec1	equ	0xFE5
 11897                           fsr1h	equ	0xFE2
 11898                           fsr1l	equ	0xFE1
 11899                           indf2	equ	0xFDF
 11900                           postinc2	equ	0xFDE
 11901                           postdec2	equ	0xFDD
 11902                           plusw2	equ	0xFDB
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _CAN_ErrorResponse *****************
 11908 ;; Defined at:
 11909 ;;		line 78 in file "CAN_RX_HW.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;		None
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		None
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11923 ;;      Params:         0       0       0       0
 11924 ;;      Locals:         0       0       0       0
 11925 ;;      Temps:          0       0       0       0
 11926 ;;      Totals:         0       0       0       0
 11927 ;;Total ram usage:        0 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; This function calls:
 11930 ;;		Nothing
 11931 ;; This function is called by:
 11932 ;;		_ISR
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text67
 11937  002B38                     __ptext67:
 11938                           	opt stack 0
 11939  002B38                     _CAN_ErrorResponse:
 11940                           	opt stack 20
 11941                           
 11942                           ;incstack = 0
 11943  002B38  0012               	return		;funcret
 11944  002B3A                     __end_of_CAN_ErrorResponse:
 11945                           	opt stack 0
 11946                           tosu	equ	0xFFF
 11947                           tosh	equ	0xFFE
 11948                           tosl	equ	0xFFD
 11949                           pclatu	equ	0xFFB
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           postinc0	equ	0xFEE
 11959                           fsr0h	equ	0xFEA
 11960                           fsr0l	equ	0xFE9
 11961                           wreg	equ	0xFE8
 11962                           indf1	equ	0xFE7
 11963                           postinc1	equ	0xFE6
 11964                           postdec1	equ	0xFE5
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           plusw2	equ	0xFDB
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _CAN_BusErrorResponse *****************
 11976 ;; Defined at:
 11977 ;;		line 83 in file "CAN_RX_HW.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;		None
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		None
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11991 ;;      Params:         0       0       0       0
 11992 ;;      Locals:         0       0       0       0
 11993 ;;      Temps:          0       0       0       0
 11994 ;;      Totals:         0       0       0       0
 11995 ;;Total ram usage:        0 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; This function calls:
 11998 ;;		Nothing
 11999 ;; This function is called by:
 12000 ;;		_ISR
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text68
 12005  002B3A                     __ptext68:
 12006                           	opt stack 0
 12007  002B3A                     _CAN_BusErrorResponse:
 12008                           	opt stack 20
 12009                           
 12010                           ;incstack = 0
 12011  002B3A  0012               	return		;funcret
 12012  002B3C                     __end_of_CAN_BusErrorResponse:
 12013                           	opt stack 0
 12014                           tosu	equ	0xFFF
 12015                           tosh	equ	0xFFE
 12016                           tosl	equ	0xFFD
 12017                           pclatu	equ	0xFFB
 12018                           pclath	equ	0xFFA
 12019                           tblptru	equ	0xFF8
 12020                           tblptrh	equ	0xFF7
 12021                           tblptrl	equ	0xFF6
 12022                           tablat	equ	0xFF5
 12023                           prodh	equ	0xFF4
 12024                           prodl	equ	0xFF3
 12025                           intcon	equ	0xFF2
 12026                           postinc0	equ	0xFEE
 12027                           fsr0h	equ	0xFEA
 12028                           fsr0l	equ	0xFE9
 12029                           wreg	equ	0xFE8
 12030                           indf1	equ	0xFE7
 12031                           postinc1	equ	0xFE6
 12032                           postdec1	equ	0xFE5
 12033                           fsr1h	equ	0xFE2
 12034                           fsr1l	equ	0xFE1
 12035                           indf2	equ	0xFDF
 12036                           postinc2	equ	0xFDE
 12037                           postdec2	equ	0xFDD
 12038                           plusw2	equ	0xFDB
 12039                           fsr2h	equ	0xFDA
 12040                           fsr2l	equ	0xFD9
 12041                           status	equ	0xFD8
 12042                           tosu	equ	0xFFF
 12043                           tosh	equ	0xFFE
 12044                           tosl	equ	0xFFD
 12045                           pclatu	equ	0xFFB
 12046                           pclath	equ	0xFFA
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           postinc0	equ	0xFEE
 12055                           fsr0h	equ	0xFEA
 12056                           fsr0l	equ	0xFE9
 12057                           wreg	equ	0xFE8
 12058                           indf1	equ	0xFE7
 12059                           postinc1	equ	0xFE6
 12060                           postdec1	equ	0xFE5
 12061                           fsr1h	equ	0xFE2
 12062                           fsr1l	equ	0xFE1
 12063                           indf2	equ	0xFDF
 12064                           postinc2	equ	0xFDE
 12065                           postdec2	equ	0xFDD
 12066                           plusw2	equ	0xFDB
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071                           	psect	text69
 12072  000000                     __ptext69:
 12073                           	opt stack 0
 12074                           tosu	equ	0xFFF
 12075                           tosh	equ	0xFFE
 12076                           tosl	equ	0xFFD
 12077                           pclatu	equ	0xFFB
 12078                           pclath	equ	0xFFA
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           postinc0	equ	0xFEE
 12087                           fsr0h	equ	0xFEA
 12088                           fsr0l	equ	0xFE9
 12089                           wreg	equ	0xFE8
 12090                           indf1	equ	0xFE7
 12091                           postinc1	equ	0xFE6
 12092                           postdec1	equ	0xFE5
 12093                           fsr1h	equ	0xFE2
 12094                           fsr1l	equ	0xFE1
 12095                           indf2	equ	0xFDF
 12096                           postinc2	equ	0xFDE
 12097                           postdec2	equ	0xFDD
 12098                           plusw2	equ	0xFDB
 12099                           fsr2h	equ	0xFDA
 12100                           fsr2l	equ	0xFD9
 12101                           status	equ	0xFD8
 12102                           
 12103                           	psect	rparam
 12104  0000                     tosu	equ	0xFFF
 12105                           tosh	equ	0xFFE
 12106                           tosl	equ	0xFFD
 12107                           pclatu	equ	0xFFB
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           postinc0	equ	0xFEE
 12117                           fsr0h	equ	0xFEA
 12118                           fsr0l	equ	0xFE9
 12119                           wreg	equ	0xFE8
 12120                           indf1	equ	0xFE7
 12121                           postinc1	equ	0xFE6
 12122                           postdec1	equ	0xFE5
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133                           	psect	temp
 12134  00005D                     btemp:
 12135                           	opt stack 0
 12136  00005D                     	ds	1
 12137  0000                     int$flags	set	btemp
 12138                           tosu	equ	0xFFF
 12139                           tosh	equ	0xFFE
 12140                           tosl	equ	0xFFD
 12141                           pclatu	equ	0xFFB
 12142                           pclath	equ	0xFFA
 12143                           tblptru	equ	0xFF8
 12144                           tblptrh	equ	0xFF7
 12145                           tblptrl	equ	0xFF6
 12146                           tablat	equ	0xFF5
 12147                           prodh	equ	0xFF4
 12148                           prodl	equ	0xFF3
 12149                           intcon	equ	0xFF2
 12150                           postinc0	equ	0xFEE
 12151                           fsr0h	equ	0xFEA
 12152                           fsr0l	equ	0xFE9
 12153                           wreg	equ	0xFE8
 12154                           indf1	equ	0xFE7
 12155                           postinc1	equ	0xFE6
 12156                           postdec1	equ	0xFE5
 12157                           fsr1h	equ	0xFE2
 12158                           fsr1l	equ	0xFE1
 12159                           indf2	equ	0xFDF
 12160                           postinc2	equ	0xFDE
 12161                           postdec2	equ	0xFDD
 12162                           plusw2	equ	0xFDB
 12163                           fsr2h	equ	0xFDA
 12164                           fsr2l	equ	0xFD9
 12165                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    93
    Data        21
    BSS         579
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      92
    BANK0           160    110     159
    BANK1           256      0     196
    BANK2           256      0       0

Pointer List with Targets:

    HueTest@15689	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    HueTest@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@15697	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    CenterBreathe@15707	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    CenterBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFadedLoop@15720	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SingleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFocusPulse@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    TestPattern$5	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TestPattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    TestPattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    TestPattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    ListeningPattern$5	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    ListeningPattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    ListeningPattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    ListeningPattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SpeakingPattern$5	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    SpeakingPattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SpeakingPattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    SpeakingPattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    ThinkingPattern$5	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ThinkingPattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    ThinkingPattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    ThinkingPattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    IdlePattern$5	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    IdlePattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    IdlePattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    IdlePattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    WelcomePattern$5	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    WelcomePattern$2	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    WelcomePattern$1	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    WelcomePattern$0	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SetupPattern@listeningFocusPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(COMRAM[4]), 

    ListeningFocus	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    SetupPattern@patternIDPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(COMRAM[4]), 

    PatternID	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    SpeakingPattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> SingleFocusPulse(), 

    ListeningPattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> SingleFocusPulse(), 

    ThinkingPattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> SingleFadedLoop(), 

    IdlePattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> CenterBreathe(), 

    WelcomePattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> FullPulseHold(), 

    TestPattern	PTR FTN(PTR unsigned int ,PTR unsigned char ,PTR unsigned long ,unsigned char ,unsigned char ,PTR void ,)void  size(2) Largest target is 1
		 -> HueTest(), 

    SingleFocusPulse@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    SingleFocusPulse@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFocusPulse@focus	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    SingleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    CenterBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    CenterBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    FullPulseHold@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    FullPulseHold@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    DotStar_Init@brightnessPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(COMRAM[4]), 

    Brightness	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(COMRAM[4]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S105$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S74$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S74$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CAN_RCVResponse->_ProcessReceive
    _ProcessReceive->i2_PostPatternControlService
    i2_PostPatternControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _SetBrightness->i2___awdiv

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_CenterBreathe
    _SingleFocusPulse->___awdiv
    _SingleFadedLoop->___awdiv
    _HueTest->___lwdiv
    _CenterBreathe->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   87978
                                            109 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   73109
                                            104 BANK0      5     5      0
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   14052
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   14052
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             91 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   55016
                                             91 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   11892
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      68
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   36047
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        4     2      2   24059
                                             48 BANK0      4     2      2
                      _CenterBreathe *
                      _FullPulseHold *
                            _HueTest *
                    _SingleFadedLoop *
                   _SingleFocusPulse *
 ---------------------------------------------------------------------------------
 (5) _SingleFocusPulse                                    25    15     10    5475
                                              8 BANK0     25    15     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SingleFadedLoop                                     28    18     10    5178
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _HueTest                                             14     4     10    7051
                                             19 BANK0     14     4     10
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _FullPulseHold                                       22    12     10     741
                                              0 BANK0     22    12     10
 ---------------------------------------------------------------------------------
 (5) _CenterBreathe                                       40    30     10    5478
                                              8 BANK0     40    30     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1008
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        22    20      2   11780
                                             69 BANK0     22    20      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    7105
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    6886
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4389
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     766
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    6833
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3253
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   14473
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    6730
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    7024
                                             29 BANK0      4     4      0
                           _CAN_Init
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         4     0      4     196
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    6685
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    6293
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2385
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    3382
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _CAN_Init                                             0     0      0       0
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (4) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    3013
                                             37 COMRAM    16    16      0
               _CAN_BusErrorResponse
                  _CAN_ErrorResponse
                    _CAN_RCVResponse
                   _CAN_XmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0    1108
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CAN_XmitResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_RCVResponse                                     0     0      0    1905
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      5     5      0    1905
                                             32 COMRAM     5     5      0
                      _SetBrightness
                     _SetListenFocus
                         _SetPattern
        i2_PostPatternControlService
                          i2___awmod
 ---------------------------------------------------------------------------------
 (13) i2_PostPatternControlService                         3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     967
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     827
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) _SetPattern                                          1     1      0      22
                                              0 COMRAM     1     1      0
                     i2_ResetPattern
 ---------------------------------------------------------------------------------
 (14) i2_ResetPattern                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _SetListenFocus                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _SetBrightness                                       3     3      0     397
                                              8 COMRAM     3     3      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (14) i2___awdiv                                           8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (11) _CAN_ErrorResponse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_BusErrorResponse                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _CAN_Init
         _InitCanHardware
         _InitPins
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _CenterBreathe *
               ___awdiv
               ___awmod
             _FullPulseHold *
             _HueTest *
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _SingleFadedLoop *
               ___awdiv
               ___awmod
             _SingleFocusPulse *
               ___awdiv
               ___awmod
         _ES_Timer_InitTimer
         _UpdatePattern
           _CenterBreathe *
             ___awdiv
             ___awmod
           _FullPulseHold *
           _HueTest *
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _SingleFadedLoop *
             ___awdiv
             ___awmod
           _SingleFocusPulse *
             ___awdiv
             ___awmod
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _CenterBreathe *
               ___awdiv
               ___awmod
             _FullPulseHold *
             _HueTest *
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _SingleFadedLoop *
               ___awdiv
               ___awmod
             _SingleFocusPulse *
               ___awdiv
               ___awmod
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CAN_BusErrorResponse
   _CAN_ErrorResponse
   _CAN_RCVResponse
     _ProcessReceive
       _SetBrightness
         i2___awdiv
       _SetListenFocus
       _SetPattern
         i2_ResetPattern
       i2_PostPatternControlService
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
       i2___awmod
   _CAN_XmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6E      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      5C       1       97.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BF       9        0.0%
DATA                 0      0     2FB      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan 22 22:56:29 2017

                    _ListeningPattern 00F2                   HSV_to_RGB@HSV_Value 0073  
                    ??__HW_Timer_Init 0062                   UpdatePattern@i_1364 0093  
                 __HW_Timer_Init@Rate 0060                          ___awdiv@sign 0065  
                 ___wmul@multiplicand 0068                       ??_UpdatePattern 0092  
       DotStar_Init@brightnessPointer 0060                        FullPulseHold@i 0075  
                         __CFG_OSC$HS 000000                __size_of_FullPulseHold 018E  
 RunPatternControlService@ReturnEvent 00BE                                   l410 1884  
                                 l326 1DD6                                   l615 2364  
                                 l618 23C0                                   l491 0632  
                                 l483 21D4                                   l493 0644  
                                 l661 1422                                   l494 065E  
                                 l495 0678                                   l496 068A  
                                 l497 06A4                                   l697 0B20  
               __end_of_ES_Initialize 1B6C                                   _GIE 007F97  
                                 _ISR 0008             __end_of_SPI32_EOTResponse 287C  
              __end_ofi2_ResetPattern 2A80                          ___awmod@sign 0065  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                ES_EnQueueFIFO@SaveCrit 0074  
             ES_EnQueueFIFO@Event2Add 006E                     ?_ES_PostToService 0077  
        FullPulseHold@ptrnStepCounter 0062                                  ?_ISR 0001  
          i2ES_EnQueueFIFO@pThisQueue 0016             FullPulseHold@cycleCounter 0064  
                        __CFG_WDT$OFF 000000            ES_Timer_Tick_Resp@NewEvent 003A  
                                l3000 1326                                  l1218 244A  
                                l3012 13A8                                  l3004 1338  
                                l3100 0D2A                                  l3030 082C  
                                l3006 1392                                  l3102 0D68  
                                l3110 0DD4                                  l3024 0822  
                                l3120 10AA                                  l3018 13F4  
                                l3060 0A54                                  l3044 094E  
                                l3132 11D4                                  l3124 1164  
                                l3116 10A0                                  l3212 0E14  
                                l3062 0A8E                                  l3134 1212  
                                l3142 127E                                  l3230 0F2E  
                                l3214 0E1A                                  l3072 0B0C  
                                l3056 09D6                                  l3232 0F78  
                                l3224 0E44                                  l3058 0A4A  
                                l3242 1028                                  l3234 0FC2  
                                l3226 0E92                                  l3218 0E24  
                                l3250 1048                                  l3500 1630  
                                l3068 0AFA                                  l3092 0CB4  
                                l3084 0B7E                                  l3236 1018  
                                l3228 0EE0                                  l3252 107E  
                                l3180 20A2                                  l3404 168E  
                                l3510 1674                                  l3270 153A  
                                l3262 1434                                  l3078 0B4A  
                                l3238 101E                                  l3166 2010  
                                l3414 1702                                  l2800 24C6  
                                l3504 164C                                  l3088 0B88  
                                l3600 1DA4                                  l3176 209C  
                                l3416 1740                                  l3258 142A  
                                l3274 2794                                  l2740 20C4  
                                l3188 26BC                                  l3284 27BE  
                                l3532 2A8A                                  l2750 20F4  
                                l3470 275A                                  l2830 1E40  
                                l2822 1E16                                  l3278 279E  
                                l2752 20FA                                  l2760 212C  
                                l2744 20D4                                  l3720 1A9C  
                                l2840 1E76                                  l2832 1E46  
                                l2816 1E00                                  l3464 2624  
                                l3632 1794                                  l3608 1DBA  
                                l3528 2A82                                  l3626 283E  
                                l2930 04A2                                  l2764 2140  
                                l2756 211E                                  l2748 20E8  
                                l3724 1AE0                                  l3740 1B68  
                                l3716 1A92                                  l2860 2406  
                                l2828 1E34                                  l2844 1E84  
                                l3644 17D6                                  l3636 17A0  
                                l3572 1D50                                  l3564 1D24  
                                l3558 2606                                  l3478 2782  
                                l2870 243C                                  l2862 240C  
                                l2950 06F4                                  l3654 1866  
                                l3582 1D72                                  l3750 1A14  
                                l2784 1C4A                                  l3736 1B62  
                                l3728 1AE4                                  l2848 1E98  
                                l3576 1D5E                                  l3744 1992  
                                l2858 23FA                                  l3658 186E  
                                l3594 1D94                                  l3578 1D62  
                                l3930 2186                                  l2948 06BE  
                                l3588 1D82                                  l3756 1A68  
                                l3932 2198                                  l2990 12B4  
                                l2974 1898                                  l3782 28C0  
                                l3934 21AA                                  l2984 1952  
                                l3784 28C8                                  l3928 2174  
                                l2994 12BE                                  l2978 18A2  
                                l3938 21BC                                  STR_1 035E  
                                STR_2 0379                                  STR_3 0391  
                                STR_4 03A8                                  u2124 2036  
                                u2125 202E                                  _LATA 000F89  
                                _LATB 000F8A                                  _LATC 000F8B  
                                u2218 0E84                                  u2228 0ED2  
                                u2238 0F20                                  u2248 0F6A  
                                u2258 0FB4                                  u2268 1002  
                                u1815 0414                                  _PIE1 000F9D  
                                u2480 2650                                  u2458 16EA  
                                u2485 2646                                  u2818 1A3E  
                                u2819 1A56                                  _PEIE 007F96  
                                u1965 0A34                                  u1975 0A78  
                                u2778 1B3C                                  u2779 1B58  
                  ??_ES_PostToService 007A                 __end_of_CenterBreathe 0B78  
               SingleFocusPulse@focus 0070                       __end_of_HW_Init 2986  
                                _main 214A                           ?_ES_DeQueue 006C  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 005D                         main@ErrorType 00CD  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 0016  
                    _SingleFocusPulse 108C                      __end_of_CAN_Init 2B14  
   __end_of_InitPatternControlService 260A                           ?_SPI32_Init 0001  
                       __CFG_MCLRE$ON 000000                          ___param_bank 000010  
                     __end_of_HueTest 1990                  __end_of_GetNextFrame 2A32  
                    FullPulseHold@val 0074               __end_of_InitCanHardware 23DC  
                               ??_ISR 0026             CenterBreathe@cycleCounter 006C  
                  ES_Run@HighestPrior 00CC                                 ?_main 0001  
               __end_of_ES_Timer_Init 2AF2                       __end_of___awdiv 1EA2  
                     __end_of___awmod 214A                       __end_of___lbmod 278E  
                     ___awdiv@divisor 0062                                 _T1CON 000FCD  
                     __end_of___lwdiv 2454                                 _ERRIE 007D1D  
                               _ERRIF 007D25                                 i2l167 1CE0  
                               i2l633 1FE2                       ___awdiv@counter 0064  
                               _IRXIE 007D1F                                 _IRXIF 007D27  
         ??i2_PostSPI32ControlService 0021                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _TRISA 000F92                                 _TRISC 000F94  
                               _SSPIE 007CEB                                 _SSPIF 007CF3  
            __size_of_SingleFadedLoop 029A                            _Brightness 00ED  
                       __CFG_PWRT$OFF 000000                       ?i2_ResetPattern 0001  
                _SPI32_TransmitFrames 28E6                       HueTest@base_hue 0079  
                     HueTest@base_sat 007A                           ?_HSV_to_RGB 0073  
                               _Ready 00DA            __size_of_CAN_ErrorResponse 0002  
     __end_of_InitSPI32ControlService 2842                            _FrameIndex 00E2  
                               _putch 2B36                          HueTest@15689 007B  
                      __CFG_BOREN$OFF 000000                                 pclath 000FFA  
                               tablat 000FF5                      SingleFadedLoop@i 0083  
                    SingleFadedLoop@x 0082                      __end_ofi2___wmul 293E  
                               plusw2 000FDB                                 status 000FD8  
                       _FullPulseHold 1296               SPI32_SendFrame@newFrame 0060  
        __end_of_CAN_BusErrorResponse 2B3C                    __size_ofi2___awdiv 0084  
                    ?_SPI32_SendFrame 0060                    __size_ofi2___awmod 0070  
                     __initialization 21D6                ES_GetMSBitSet@LoopCntr 0069  
             SetListenFocus@listFocus 0001                          __end_of_main 21D6  
                   ES_Timer_Init@Rate 0062                      __end_of_InitPins 2A66  
                 __end_of_EventQueues 035E                                ??_main 00CD  
                   ?i2_ES_EnQueueFIFO 000D                         __activetblptr 000002  
          __size_of_SPI32_EOTResponse 003A                   __size_of_ES_DeQueue 0128  
                     _Nybble2MSBitNum 0341                 ?_SPI32_TransmitFrames 0080  
    __end_of__HW_Process_Pending_Ints 2A96              ProcessReceive@Event2Post 0023  
                  ??i2_ES_EnQueueFIFO 0012                           _IdlePattern 00F0  
            ProcessReceive@LastButton 0057                  __end_of_DotStar_Init 26AE  
                __end_of_DotStar_Show 1552                   __size_of_SPI32_Init 0006  
                              _ADCON1 000FC1                             ??_HW_Init 0060  
                              _CCP1IF 007CF2                                _CANCON 000F6F  
                          _PatternOff 278E                                _CCPR1H 000FBF  
                              _CCPR1L 000FBE                      ___awdiv@dividend 0060  
                              _CIOCON 000F73                            _MyPriority 00E3  
                              ?_putch 0001                      ??_ES_GetMSBitSet 0062  
                          _SetPattern 2AFE                    HueTest@ptrnPointer 0073  
                              i2l3160 1F52                                i2l3344 25A0  
                              i2l3370 2296                                i2l3372 229E  
                              i2l3364 2280                                i2l3390 22D6  
                              i2l3382 22BE                                i2l3374 22A2  
                              i2l3358 2270                                i2l2902 2522  
                              i2l3386 22C8                                i2l2906 2530  
                              i2l3708 2716                                i2l3672 1F78  
                              i2l2890 24F8                                i2l2882 24DE  
                              i2l3682 1F98                                i2l3674 1F7C  
                              i2l3770 2866                                i2l2892 2500  
                              i2l3692 1FC8                                i2l2894 2504  
                              i2l2886 24EA                                i2l3686 1FA4  
                              i2l3678 1F8A                                i2l3694 1FE6  
                              i2l3872 1CAE                                _INTCON 000FF2  
                              i2l2898 2518                                i2l3890 1CCC  
                              i2l3884 1CC2                                i2l3878 1CB8  
                              i2l3896 1CD6                        ?_FullPulseHold 0060  
                              _RXB0D0 000F66                                _RXB0D1 000F67  
                              _RXB0D2 000F68                                _RXB0IE 007D18  
                              _RXB0IF 007D20                                _ES_Run 1990  
                              _TXB0IE 007D1A                                _TXB0IF 007D22  
                              _SSPADD 000FC8                                _SSPBUF 000FC9  
           i2_PostSPI32ControlService 2A96                             ??_HueTest 007D  
                    ??_ES_EnQueueFIFO 0071                        _Timer2PostFunc 0321  
       SPI32_TransmitFrames@numFrames 0082                         ?_PausePattern 0001  
                              _Queue0 004B                                _Queue1 01B8  
                      _SysTickCounter 0041                   __size_of_HSV_to_RGB 0458  
            ??_RunSPI32ControlService 00BE                                ___wmul 287C  
     InitSPI32ControlService@Priority 0080                             ??___awdiv 0064  
                           ??___awmod 0064                             ??___lbmod 0061  
                    ?_InitCanHardware 0001                             ??___lwdiv 0070  
         __size_of_ES_Timer_InitTimer 0080                                clear_0 221E  
                              clear_1 2230                                clear_2 223C  
                              clear_3 2248                      ___awdiv@quotient 0066  
                     ___awmod@divisor 0062                         ??_ShowPattern 00BB  
           ES_Timer_InitTimer@NewTime 0060             __size_of_CAN_XmitResponse 0006  
                     ___awmod@counter 0064                                _printf 28B2  
                         ISR@LastTime 003D                        i2___awdiv@sign 0006  
                        __pdataCOMRAM 0057                     __end_ofi2___awdiv 22E0  
              ES_InitQueue@pThisQueue 0063                     __end_ofi2___awmod 253A  
            __size_of_CAN_RCVResponse 000C                          __mediumconst 0000  
                    CAN_RX_HW@ListLoc 0046                           ISR@NextTime 003F  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                      ??_SetListenFocus 0001  
 __end_ofi2_PostPatternControlService 2AC2           i2_PostPatternControlService 2AAC  
                           ?_CAN_Init 0001                                putch@c 0001  
        SetupPattern@patternIDPointer 0060                        i2___awmod@sign 0006  
         __size_of_ES_Timer_Tick_Resp 0112                  ES_DeQueue@pThisQueue 0074  
             ES_GetMSBitSet@Val2Check 0060                     ??_SingleFadedLoop 0072  
                     ___lbmod@divisor 0060                            __accesstop 0060  
             __end_of__initialization 224E                __end_of_Timer2PostFunc 0341  
                     ___lbmod@counter 0062       RunSPI32ControlService@ThisEvent 00BB  
                     __CFG_PBADEN$OFF 000000     __size_of_RunPatternControlService 00C8  
              __size_of_SetBrightness 0026             ?_RunPatternControlService 00BB  
                  FullPulseHold@15697 0068                 __size_of_GetNextFrame 001A  
                       ___rparam_used 000001                 FullPulseHold@base_hue 0066  
               FullPulseHold@base_sat 0067           ??_InitPatternControlService 007D  
                         PatternOff@i 0062                   SingleFocusPulse@val 007D  
                      ??_PausePattern 0065                           _EventQueues 0358  
         __size_ofi2_ES_PostToService 006A                        __pcstackCOMRAM 0001  
                        __pidataBANK0 2AD4           __size_of_ES_Timer_StopTimer 004E  
                       ?_ES_InitQueue 0060      __size_of_InitSPI32ControlService 003A  
                      _CurrentPattern 0048               __end_of_Nybble2MSBitNum 0350  
   _PostSPI32ControlService$intlevel0 2A02                         __end_of_putch 2B38  
                     _TMR_ActiveFlags 00DC                ??_SPI32_TransmitFrames 0083  
                           ?i2___wmul 0007               ES_GetMSBitSet@ReturnVal 0067  
                       ?_ResetPattern 0001                  _CAN_BusErrorResponse 2B3A  
            __end_of_SingleFocusPulse 1296               __size_of_ProcessReceive 00AE  
                 __end_of_ShowPattern 29A6                            ??_CAN_Init 0060  
                       ??_StopPattern 00BB                        _TMR_TimerArray 0100  
                        _GetNextFrame 2A18                           ?_PatternOff 0060  
            ES_EnQueueFIFO@pThisQueue 0075                       ??_FullPulseHold 006A  
                             ??_putch 0060              __HW_Process_Pending_Ints 2A80  
                          __pbssBANK0 00CE                            __pbssBANK1 0100  
                         ?_SetPattern 0001                             ?_InitPins 0001  
                             ?_ES_Run 0001                          ??_ES_DeQueue 0070  
                        ??_SPI32_Init 0060              ?_PostSPI32ControlService 007D  
           __size_of_ES_PostToService 0076                        ??_ES_InitQueue 0063  
                             ?___wmul 0066       __size_of_RunSPI32ControlService 0106  
                             _CCP1CON 000FBD                               _ECANCON 000F77  
                    ??i2_ResetPattern 0001           SingleFocusPulse@ptrnPointer 0068  
                             ?_printf 0060                         _SetBrightness 293E  
               __size_of_DotStar_Init 0052                        ??_ResetPattern 0060  
               __end_of_UpdatePattern 108C                 __size_of_DotStar_Show 012E  
                          ??i2___wmul 000B                 ?_CAN_BusErrorResponse 0001  
           _InitPatternControlService 25A4                    __end_of_ES_DeQueue 167A  
              i2ES_EnQueueFIFO@pBlock 000D                 ES_Timer_StopTimer@Num 0064  
                        ??_HSV_to_RGB 0075                               _HW_Init 2964  
                             _SSPCON1 000FC6                    __end_of_SPI32_Init 2B30  
            SingleFocusPulse@base_hue 006E              SingleFocusPulse@base_sat 006F  
                             _SSPSTAT 000FC7   _PostPatternControlService$intlevel0 29E6  
                   ??_CAN_RCVResponse 0026      SPI32_ControlService@CurrentState 00DF  
                          ??_InitPins 0060                       __size_of_ES_Run 00F0  
          SetBrightness@newBrightness 0009                   __end_of_StopPattern 29E0  
                         _PixelFrames 01C4                               _HueTest 1892  
                       ?_SetupPattern 0060                __size_of_ES_Initialize 00EC  
                             _ListLoc 0049                               __Hparam 0000  
                             __Lparam 0000    i2PostSPI32ControlService@ThisEvent 001E  
    PostSPI32ControlService@ThisEvent 007D      InitSPI32ControlService@ThisEvent 007D  
           i2ES_EnQueueFIFO@Event2Add 000F                          _DotStar_Init 265C  
                        _DotStar_Show 1424                    __end_of_HSV_to_RGB 0810  
                             ___awdiv 1DE4            ?_PostPatternControlService 007D  
                             ___awmod 20A8                               ___lbmod 274A  
                     __size_of___wmul 0036                               ___lwdiv 23DC  
  __size_ofi2_PostSPI32ControlService 0016                          __psmallconst 0300  
                 __size_of_PatternOff 003E                 ES_Timer_InitTimer@Num 0064  
          i2ES_PostToService@TheEvent 0018                               __pcinit 21D6  
                    _CAN_XmitResponse 2B30                               __ramtop 0300  
                 __size_of_SetPattern 000C                        ?_SetBrightness 0001  
              __size_of_CenterBreathe 0368                           _ShowPattern 2986  
                             __ptext0 214A                               __ptext1 28B2  
                             __ptext2 2B36                               __ptext3 1990  
                             __ptext4 2A80                               __ptext5 167A  
                             __ptext6 2004                               __ptext7 1D1C  
                             __ptext8 178C                               __ptext9 260A  
            i2ES_EnQueueFIFO@SaveCrit 0015                       __size_of_printf 0034  
                         _TestPattern 00F6                          __size_of_ISR 1D14  
                         HSV_to_RGB@b 0097                           HSV_to_RGB@g 0095  
                         HSV_to_RGB@h 008D                           HSV_to_RGB@p 00A1  
                         HSV_to_RGB@q 0099                           HSV_to_RGB@r 0093  
                         HSV_to_RGB@s 009F                           HSV_to_RGB@t 009B  
                         HSV_to_RGB@v 00A3                          _FramePointer 00D4  
             __size_of__HW_Timer_Init 001E                      ___awmod@dividend 0060  
                     ES_Run@ThisEvent 00EA                  __end_of_PausePattern 2B1C  
                    CenterBreathe@val 008C                _RunSPI32ControlService 178C  
                      __pintcode_body 1C4E                  end_of_initialization 224E  
                        _CycleCounter 00E6             __size_ofi2_ES_EnQueueFIFO 00B4  
                       __Lmediumconst 0000                               int_func 1C4E  
                 i2___wmul@multiplier 0007       __end_of_PostSPI32ControlService 2A18  
        ES_PostToService@WhichService 007C                        ??_SetupPattern 0064  
              __size_of_ES_Timer_Init 000E                    SingleFadedLoop@val 0081  
            FullPulseHold@ptrnPointer 0060                               printf@c 0064  
                             printf@f 0060               _InitSPI32ControlService 2808  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE     __end_of_PostPatternControlService 29FC  
            __size_of_SPI32_SendFrame 0052                ??_CAN_BusErrorResponse 0001  
           i2SPI32_SendFrame@newFrame 0001                       _SingleFadedLoop 0B78  
                      _WelcomePattern 00FA                         _ES_Initialize 1A80  
                      _ProcessReceive 1F56      __end_of_RunPatternControlService 1DE4  
                    ___lbmod@dividend 0061                   CenterBreathe@rising 00FC  
i2PostPatternControlService@ThisEvent 001E     RunPatternControlService@ThisEvent 00BB  
  PostPatternControlService@ThisEvent 007D    InitPatternControlService@ThisEvent 007D  
                           _TRISBbits 000F93                  __end_of_ES_EventList 0301  
                         _StopPattern 29C4                  __end_of_ES_InitQueue 2808  
                           i2___awdiv 225C                             i2___awmod 24CA  
                      ES_Initialize@i 0083                     __size_of_CAN_Init 000A  
                         ___lbmod@rem 0063                         _CenterBreathe 0810  
                SingleFocusPulse@head 007F                        __end_of_ES_Run 1A80  
                  i2___awdiv@dividend 0001                  __end_of_ResetPattern 2A4C  
                  _CenterBreathe$1232 007B                    _CenterBreathe$1233 007D  
                  _CenterBreathe$1234 007F                    _CenterBreathe$1235 0081  
                  _CenterBreathe$1236 0083                    _CenterBreathe$1237 0085  
                  _CenterBreathe$1238 0087                    _CenterBreathe$1239 0089  
__size_ofi2_PostPatternControlService 0016                      _ES_PostToService 2454  
          __end_of_ES_Timer_InitTimer 2360                  __end_of_ServDescList 0358  
                     ??_SetBrightness 0009                        __end_of___wmul 28B2  
                       __pidataCOMRAM 2B24                     i2_SPI32_SendFrame 26FC  
                           _FrameByte 00FE                __end_of_ProcessReceive 2004  
                      ?_ES_Initialize 0081            ??__HW_Process_Pending_Ints 0084  
                  ?i2_SPI32_SendFrame 0001                         _ES_Timer_Init 2AE4  
                    i2___wmul@product 000B                        __end_of_printf 28E6  
            __size_of_InitCanHardware 007C            __end_of_ES_Timer_Tick_Resp 178C  
                 start_initialization 21D6                    i2___awdiv@quotient 0007  
                   ?_SingleFocusPulse 0068                     SingleFocusPulse@i 0080  
                         __end_of_ISR 1D1C                     __size_ofi2___wmul 0026  
                   SingleFocusPulse@x 007E                          _CurrentFrame 00CE  
                        _CurrentState 00E1                          ??_PatternOff 0062  
                 ??i2_SPI32_SendFrame 0005                    ??_SingleFocusPulse 0072  
                          ?i2___awdiv 0001                            ?i2___awmod 0001  
                 FullPulseHold@rising 00FD                          ??_SetPattern 0001  
                         _CANSTATbits 000F6E    __size_of_InitPatternControlService 0066  
                      ?_CenterBreathe 0068                              ??_ES_Run 00C8  
                           _PatternID 00D8                             _TickCount 00E5  
                           _NumFrames 00E4            __end_ofi2_ES_PostToService 25A4  
                   __size_of_InitPins 001A             ??_InitSPI32ControlService 007D  
            CenterBreathe@fade_thresh 008B            __end_of_ES_Timer_StopTimer 26FC  
                           _NumPixels 004A                   SetPattern@PatternID 0001  
             __size_of_ES_GetMSBitSet 00A4               __end_of_SingleFadedLoop 0E12  
                            ??___wmul 006A             __end_ofi2_SPI32_SendFrame 274A  
                      CenterBreathe@i 008F                        CenterBreathe@x 008E  
                         __pdataBANK0 00F0                  _SingleFadedLoop$1250 007D  
                _SingleFadedLoop$1251 007F                    __end_of_PatternOff 27CC  
             __size_of_ES_EnQueueFIFO 00E2                              ??_printf 0062  
           SPI32_EOTResponse@EOTevent 0021                 __size_of_PausePattern 0008  
                      ?_ES_Timer_Init 0062                    __end_of_SetPattern 2B0A  
                     ?_ProcessReceive 0001                       _CAN_RCVResponse 2AF2  
                      __HW_Timer_Init 29A6                           __pbssBIGRAM 01C4  
                __end_of_SetupPattern 2AD4                           __pbssCOMRAM 0036  
    __size_of_PostSPI32ControlService 001C         __size_of_SPI32_TransmitFrames 0032  
                   ??_SPI32_SendFrame 0064                         __pcstackBANK0 0060  
                         _BRGCON1bits 000F70                           _BRGCON2bits 000F71  
                  ES_InitQueue@pBlock 0060                           _BRGCON3bits 000F72  
   RunPatternControlService@testEvent 00C1                              ?_HW_Init 0001  
            _RunPatternControlService 1D1C                 __end_of_FullPulseHold 1424  
            __end_of_CAN_XmitResponse 2B36      SPI32_TransmitFrames@framePointer 0080  
                    i2_ES_EnQueueFIFO 1EA2                      HSV_to_RGB@region 008F  
                       __PRIMASK_temp 0043                              ?_HueTest 0073  
             __size_of_SetListenFocus 0008                      ___lwdiv@dividend 006C  
             SingleFadedLoop@base_hue 006E               SingleFadedLoop@base_sat 006F  
                        _PausePattern 2B14                             __pintcode 0008  
                            ?___awdiv 0060                              ?___awmod 0060  
                            ?___lbmod 0060            DotStar_Show@patternPointer 00A5  
         ??_PostPatternControlService 0080                              ?___lwdiv 006C  
   SetupPattern@listeningFocusPointer 0062                       ??_ES_Initialize 0083  
            ES_PostToService@TheEvent 0077                __end_of__HW_Timer_Init 29C4  
                        ?_ShowPattern 0001                           __smallconst 0300  
               __size_of_ES_InitQueue 003C               ?_RunSPI32ControlService 00BB  
                            _CAN_Init 2B0A                      ___lwdiv@quotient 0070  
                         ??i2___awdiv 0005                       ??_CenterBreathe 0072  
                         ??i2___awmod 0005                       _ThinkingPattern 00F8  
                      __size_of_putch 0002          CenterBreathe@ptrnStepCounter 006A  
               __size_of_ResetPattern 001A                  ES_Initialize@NewRate 0081  
                   ??_InitCanHardware 0060             ES_GetMSBitSet@Nybble2Test 0068  
                  _PatternStepCounter 00EF                    CenterBreathe@15707 0070  
                      ___wmul@product 006A                __size_of_UpdatePattern 027A  
                            i2u273_40 2740                              i2u273_45 2736  
                            _RXB0EIDH 000F63                              _RXB0EIDL 000F64  
             SetBrightness@brightness 000B                              _RXB0SIDH 000F61  
                            _RXB0SIDL 000F62                              _RXF0EIDH 000F02  
                            _RXF0EIDL 000F03                              _RXF0SIDH 000F00  
                        _ES_EventList 0301                              _RXF0SIDL 000F01  
                    ?_SingleFadedLoop 0068            __size_ofi2_SPI32_SendFrame 004E  
                            _RXM0EIDH 000F1A                              _RXM0EIDL 000F1B  
             __end_of_CAN_RCVResponse 2AFE                          _ES_InitQueue 27CC  
                            _RXM0SIDH 000F18                              _RXM0SIDL 000F19  
                     ??_ES_Timer_Init 0064                        _ListeningFocus 00D6  
      i2ES_PostToService@WhichService 001D                       ?__HW_Timer_Init 0060  
                   ___wmul@multiplier 0066        __end_of_RunSPI32ControlService 1892  
                            i2___wmul 2918                              HueTest@i 0080  
                        _ResetPattern 2A32                     i2___awdiv@divisor 0003  
                  ES_DeQueue@SaveCrit 0072                  ES_EnQueueFIFO@pBlock 006C  
                   i2___awdiv@counter 0005              __end_of_ES_PostToService 24CA  
      SingleFadedLoop@ptrnStepCounter 006A                          ?_StopPattern 0001  
             __size_ofi2_ResetPattern 001A          ?i2_PostPatternControlService 001E  
           _PostPatternControlService 29E0                             copy_data0 21EA  
                           copy_data1 220A                      __size_of_HW_Init 0022  
                      _BitNum2SetMask 0301                        _PatternConfigs 0059  
                        _ServDescList 0350                    i2___awmod@dividend 0001  
                            _InitPins 2A4C                          _PixelPattern 0120  
                 CAN_RX_HW@Brightness 0045                      __size_of_HueTest 00FE  
                            __Hrparam 0000                        _ES_GetMSBitSet 2004  
                  _FullPulseHold$1218 0072                              __Lrparam 0000  
        SingleFocusPulse@cycleCounter 006C     RunSPI32ControlService@ReturnEvent 00C5  
                SingleFadedLoop@15720 0070                       _SpeakingPattern 00F4  
                    __size_of___awdiv 00BE                   _ProcessReceive$1196 0021  
                    __size_of___awmod 00A2                      __size_of___lbmod 0044  
               __size_of_SetupPattern 0012                 i2___wmul@multiplicand 0009  
                      _ES_EnQueueFIFO 1B6C                      __size_of___lwdiv 0078  
          ?i2_PostSPI32ControlService 001E               _PostSPI32ControlService 29FC  
                     HSV_to_RGB@fpart 0091                         _UpdatePattern 0E12  
       __size_of_CAN_BusErrorResponse 0002                    _ES_Timer_InitTimer 22E0  
                     ___lwdiv@divisor 006E                       ___lwdiv@counter 0072  
              __end_of_BitNum2SetMask 0321                              __ptext10 2A18  
                            __ptext11 29C4                              __ptext20 0810  
                            __ptext12 2A32                              __ptext21 1DE4  
                            __ptext13 278E                              __ptext30 26AE  
                            __ptext22 22E0                              __ptext14 2986  
                            __ptext31 1552                              __ptext23 1424  
                            __ptext15 0E12                              __ptext40 1B6C  
                            __ptext32 274A                              __ptext24 28E6  
                            __ptext16 108C                              __ptext41 287C  
                            __ptext33 1A80                              __ptext25 29E0  
                            __ptext17 0B78                              __ptext42 20A8  
                            __ptext34 25A4                              __ptext26 29FC  
                            __ptext18 1892                              __ptext51 2842  
                            __ptext43 265C                              __ptext35 2808  
                            __ptext27 03B8                              __ptext19 1296  
                            __ptext60 2918                              __ptext52 26FC  
                            __ptext44 2B0A                              __ptext36 2B2A  
                            __ptext28 23DC                              __ptext61 24CA  
                            __ptext53 2A96                              __ptext45 2A4C  
                            __ptext37 2964                              __ptext29 2B14  
                            __ptext62 2AFE                              __ptext54 2B30  
                            __ptext46 2360                              __ptext38 2AC2  
                            __ptext63 2A66                              __ptext55 2AF2  
                            __ptext47 2AE4                              __ptext39 2454  
                            __ptext64 2B1C                              __ptext56 1F56  
                            __ptext48 29A6                              __ptext65 293E  
                            __ptext57 2AAC                              __ptext49 27CC  
                            __ptext66 225C                              __ptext58 253A  
                            __ptext67 2B38                              __ptext59 1EA2  
                            __ptext68 2B3A                              __ptext69 0000  
                       ?_GetNextFrame 0060     ES_Timer_Tick_Resp@NeedsProcessing 00D2  
                      UpdatePattern@i 0092                   ?_ES_Timer_InitTimer 0060  
       ??i2_PostPatternControlService 0021                       _HSV_to_RGB$1987 009D  
                       __size_of_main 008C                    _ES_Timer_Tick_Resp 167A  
                      _SetListenFocus 2B1C                __end_of_ES_GetMSBitSet 20A8  
                        _SetupPattern 2AC2             __size_of_SingleFocusPulse 020A  
                 ?_ES_Timer_Tick_Resp 0001                   CAN_RX_HW@MyPriority 0047  
                 HueTest@cycleCounter 0077                __end_of_ES_EnQueueFIFO 1C4E  
                    ??_ProcessReceive 0021                              int$flags 005D  
                     _SPI32_SendFrame 260A                      ?_CAN_RCVResponse 0001  
                ??_ES_Timer_InitTimer 0062        SPI32_ControlService@MyPriority 00E0  
                       _MaxBrightness 0058                     ES_DeQueue@NumLeft 0073  
               __end_of_SetBrightness 2964                    i2_ES_PostToService 253A  
            __end_ofi2_ES_EnQueueFIFO 1F56                    _ES_Timer_StopTimer 26AE  
                      ?_UpdatePattern 0090            ??_RunPatternControlService 00BE  
                       DotStar_Show@i 00BA                           _RXB0CONbits 000F60  
                   i2___awmod@divisor 0003                     i2___awmod@counter 0005  
     SingleFocusPulse@ptrnStepCounter 006A                  __size_of_ShowPattern 0020  
   __end_ofi2_PostSPI32ControlService 2AAC                   ?i2_ES_PostToService 0018  
                      ??_GetNextFrame 0064                  ??_ES_Timer_Tick_Resp 0080  
                 ?_ES_Timer_StopTimer 0001                     _CAN_ErrorResponse 2B38  
                            intlevel2 0000                __end_of_SetListenFocus 2B24  
                  ?_CAN_ErrorResponse 0001                     ?_CAN_XmitResponse 0001  
                          _ES_DeQueue 1552     __size_of__HW_Process_Pending_Ints 0016  
                       _TransmitFrame 0036                HueTest@ptrnStepCounter 0075  
           ?__HW_Process_Pending_Ints 0001                           _TXB0CONbits 000F40  
                     ?_ES_GetMSBitSet 0060          __end_of_SPI32_TransmitFrames 2918  
                  ??_CAN_XmitResponse 0001            SingleFadedLoop@ptrnPointer 0068  
                 ??_CAN_ErrorResponse 0001                  ??i2_ES_PostToService 001B  
                          _SPI32_Init 2B2A                 _SingleFocusPulse$1275 0079  
               _SingleFocusPulse$1276 007B                         ?_DotStar_Init 0060  
                       ?_DotStar_Show 00A5                  ??_ES_Timer_StopTimer 0060  
 ES_Timer_Tick_Resp@NextTimer2Process 00DE                              printf@ap 0062  
                     ?_ES_EnQueueFIFO 006C             ??_PostSPI32ControlService 0080  
               CenterBreathe@base_hue 006E                      ES_DeQueue@pBlock 006C  
               CenterBreathe@base_sat 006F                       _InitCanHardware 2360  
   SPI32_TransmitFrames@transmitEvent 0083     InitPatternControlService@Priority 0080  
         SingleFadedLoop@cycleCounter 006C                     _SPI32_EOTResponse 2842  
                          _HSV_to_RGB 03B8             __end_of_CAN_ErrorResponse 2B3A  
                      i2_ResetPattern 2A66                ES_DeQueue@pReturnEvent 006E  
               ES_InitQueue@BlockSize 0062                    ?_SPI32_EOTResponse 0001  
                __size_of_StopPattern 001C              ?_InitSPI32ControlService 0001  
                     ?_SetListenFocus 0001              CenterBreathe@ptrnPointer 0068  
                 ??_SPI32_EOTResponse 0021               __end_of_SPI32_SendFrame 265C  
          ?_InitPatternControlService 0001               CenterBreathe@pulseWidth 008D  
  __size_of_PostPatternControlService 001C                        ??_DotStar_Init 0062  
                      ??_DotStar_Show 00A7  
