

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec 09 13:06:23 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           	psect	idataCOMRAM
    91  002972                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _MaxBrightness
    95  002972  1F                 	db	31
    96                           
    97                           	psect	idataBANK0
    98  002956                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _FrameByte
   102  002956  03                 	db	3
   103                           
   104                           ;initializer for _PatternConfigs
   105  002957  00                 	db	0
   106  002958  FF                 	db	255
   107  002959  1F                 	db	31
   108  00295A  00                 	db	0
   109  00295B  01                 	db	1
   110                           
   111                           	psect	smallconst
   112  000300                     __psmallconst:
   113                           	opt stack 0
   114  000300  00                 	db	0
   115  000301                     _BitNum2SetMask:
   116                           	opt stack 0
   117  000301  0001               	dw	1
   118  000303  0002               	dw	2
   119  000305  0004               	dw	4
   120  000307  0008               	dw	8
   121  000309  0010               	dw	16
   122  00030B  0020               	dw	32
   123  00030D  0040               	dw	64
   124  00030F  0080               	dw	128
   125  000311  0100               	dw	256
   126  000313  0200               	dw	512
   127  000315  0400               	dw	1024
   128  000317  0800               	dw	2048
   129  000319  1000               	dw	4096
   130  00031B  2000               	dw	8192
   131  00031D  4000               	dw	16384
   132  00031F  8000               	dw	32768
   133  000321                     __end_of_BitNum2SetMask:
   134                           	opt stack 0
   135  000321                     _Timer2PostFunc:
   136                           	opt stack 0
   137  000321  D2                 	db	low _PostPatternControlService
   138  000322  28                 	db	high _PostPatternControlService
   139  000323  50                 	db	low _PostSPI32ControlService
   140  000324  28                 	db	high _PostSPI32ControlService
   141  000325  00                 	db	0
   142  000326  00                 	db	0
   143  000327  00                 	db	0
   144  000328  00                 	db	0
   145  000329  00                 	db	0
   146  00032A  00                 	db	0
   147  00032B  00                 	db	0
   148  00032C  00                 	db	0
   149  00032D  00                 	db	0
   150  00032E  00                 	db	0
   151  00032F  00                 	db	0
   152  000330  00                 	db	0
   153  000331  00                 	db	0
   154  000332  00                 	db	0
   155  000333  00                 	db	0
   156  000334  00                 	db	0
   157  000335  00                 	db	0
   158  000336  00                 	db	0
   159  000337  00                 	db	0
   160  000338  00                 	db	0
   161  000339  00                 	db	0
   162  00033A  00                 	db	0
   163  00033B  00                 	db	0
   164  00033C  00                 	db	0
   165  00033D  00                 	db	0
   166  00033E  00                 	db	0
   167  00033F  00                 	db	0
   168  000340  00                 	db	0
   169  000341                     __end_of_Timer2PostFunc:
   170                           	opt stack 0
   171  000341                     _Nybble2MSBitNum:
   172                           	opt stack 0
   173  000341  00                 	db	0
   174  000342  01                 	db	1
   175  000343  01                 	db	1
   176  000344  02                 	db	2
   177  000345  02                 	db	2
   178  000346  02                 	db	2
   179  000347  02                 	db	2
   180  000348  03                 	db	3
   181  000349  03                 	db	3
   182  00034A  03                 	db	3
   183  00034B  03                 	db	3
   184  00034C  03                 	db	3
   185  00034D  03                 	db	3
   186  00034E  03                 	db	3
   187  00034F  03                 	db	3
   188  000350                     __end_of_Nybble2MSBitNum:
   189                           	opt stack 0
   190  000350                     _ServDescList:
   191                           	opt stack 0
   192  000350  2C                 	db	low _InitPatternControlService
   193  000351  24                 	db	high _InitPatternControlService
   194  000352  16                 	db	low _RunPatternControlService
   195  000353  1B                 	db	high _RunPatternControlService
   196  000354  7A                 	db	low _InitSPI32ControlService
   197  000355  26                 	db	high _InitSPI32ControlService
   198  000356  80                 	db	low _RunSPI32ControlService
   199  000357  16                 	db	high _RunSPI32ControlService
   200  000358  8A                 	db	low _InitCanRX_Service
   201  000359  27                 	db	high _InitCanRX_Service
   202  00035A  9C                 	db	low _RunCanRX_Service
   203  00035B  1C                 	db	high _RunCanRX_Service
   204  00035C                     __end_of_ServDescList:
   205                           	opt stack 0
   206  00035C                     _EventQueues:
   207                           	opt stack 0
   208  00035C  EA                 	db	low _Queue0
   209  00035D  00                 	db	high _Queue0
   210  00035E  04                 	db	4
   211  00035F  43                 	db	low _Queue1
   212  000360  00                 	db	high _Queue1
   213  000361  04                 	db	4
   214  000362  4F                 	db	low _Queue2
   215  000363  00                 	db	high _Queue2
   216  000364  04                 	db	4
   217  000365                     __end_of_EventQueues:
   218                           	opt stack 0
   219  000365                     _ES_EventList:
   220                           	opt stack 0
   221  000365  68                 	db	low _Check4Keystroke
   222  000366  29                 	db	high _Check4Keystroke
   223  000367                     __end_of_ES_EventList:
   224                           	opt stack 0
   225  000367                     _DistList00:
   226                           	opt stack 0
   227  000367  D2                 	db	low _PostPatternControlService
   228  000368  28                 	db	high _PostPatternControlService
   229  000369  50                 	db	low _PostSPI32ControlService
   230  00036A  28                 	db	high _PostSPI32ControlService
   231  00036B                     __end_of_DistList00:
   232                           	opt stack 0
   233  0000                     _RXF0EIDH	set	3842
   234  0000                     _RXF0EIDL	set	3843
   235  0000                     _RXF0SIDH	set	3840
   236  0000                     _RXF0SIDL	set	3841
   237  0000                     _RXM0EIDH	set	3866
   238  0000                     _RXM0EIDL	set	3867
   239  0000                     _RXM0SIDH	set	3864
   240  0000                     _RXM0SIDL	set	3865
   241  0000                     _TXB0CONbits	set	3904
   242  0000                     _ADCON1	set	4033
   243  0000                     _BRGCON1bits	set	3952
   244  0000                     _BRGCON2bits	set	3953
   245  0000                     _BRGCON3bits	set	3954
   246  0000                     _CANCON	set	3951
   247  0000                     _CANSTATbits	set	3950
   248  0000                     _CCP1CON	set	4029
   249  0000                     _CCPR1H	set	4031
   250  0000                     _CCPR1L	set	4030
   251  0000                     _CIOCON	set	3955
   252  0000                     _ECANCON	set	3959
   253  0000                     _INTCON	set	4082
   254  0000                     _LATA	set	3977
   255  0000                     _LATB	set	3978
   256  0000                     _LATC	set	3979
   257  0000                     _PIE1	set	3997
   258  0000                     _PORTA	set	3968
   259  0000                     _PORTB	set	3969
   260  0000                     _PORTC	set	3970
   261  0000                     _RXB0CONbits	set	3936
   262  0000                     _RXB0D0	set	3942
   263  0000                     _RXB0EIDH	set	3939
   264  0000                     _RXB0EIDL	set	3940
   265  0000                     _RXB0SIDH	set	3937
   266  0000                     _RXB0SIDL	set	3938
   267  0000                     _SSPADD	set	4040
   268  0000                     _SSPBUF	set	4041
   269  0000                     _SSPCON1	set	4038
   270  0000                     _SSPSTAT	set	4039
   271  0000                     _T1CON	set	4045
   272  0000                     _TRISA	set	3986
   273  0000                     _TRISBbits	set	3987
   274  0000                     _TRISC	set	3988
   275  0000                     _CCP1IF	set	31986
   276  0000                     _ERRIE	set	32029
   277  0000                     _ERRIF	set	32037
   278  0000                     _GIE	set	32663
   279  0000                     _IRCF0	set	32412
   280  0000                     _IRCF1	set	32413
   281  0000                     _IRCF2	set	32414
   282  0000                     _IRXIE	set	32031
   283  0000                     _IRXIF	set	32039
   284  0000                     _RXB0IE	set	32024
   285  0000                     _RXB0IF	set	32032
   286  0000                     _SCS1	set	32409
   287  0000                     _SSPIE	set	31979
   288  0000                     _SSPIF	set	31987
   289  0000                     _TXB0IE	set	32026
   290  0000                     _TXB0IF	set	32034
   291  00036B                     STR_1:
   292  00036B  46                 	db	70	;'F'
   293  00036C  61                 	db	97	;'a'
   294  00036D  69                 	db	105	;'i'
   295  00036E  6C                 	db	108	;'l'
   296  00036F  65                 	db	101	;'e'
   297  000370  64                 	db	100	;'d'
   298  000371  20                 	db	32
   299  000372  6F                 	db	111	;'o'
   300  000373  6E                 	db	110	;'n'
   301  000374  20                 	db	32
   302  000375  61                 	db	97	;'a'
   303  000376  74                 	db	116	;'t'
   304  000377  74                 	db	116	;'t'
   305  000378  65                 	db	101	;'e'
   306  000379  6D                 	db	109	;'m'
   307  00037A  70                 	db	112	;'p'
   308  00037B  74                 	db	116	;'t'
   309  00037C  20                 	db	32
   310  00037D  74                 	db	116	;'t'
   311  00037E  6F                 	db	111	;'o'
   312  00037F  20                 	db	32
   313  000380  50                 	db	80	;'P'
   314  000381  6F                 	db	111	;'o'
   315  000382  73                 	db	115	;'s'
   316  000383  74                 	db	116	;'t'
   317  000384  0A                 	db	10
   318  000385  00                 	db	0
   319  000386                     STR_2:
   320  000386  46                 	db	70	;'F'
   321  000387  61                 	db	97	;'a'
   322  000388  69                 	db	105	;'i'
   323  000389  6C                 	db	108	;'l'
   324  00038A  65                 	db	101	;'e'
   325  00038B  64                 	db	100	;'d'
   326  00038C  20                 	db	32
   327  00038D  6F                 	db	111	;'o'
   328  00038E  6E                 	db	110	;'n'
   329  00038F  20                 	db	32
   330  000390  4E                 	db	78	;'N'
   331  000391  55                 	db	85	;'U'
   332  000392  4C                 	db	76	;'L'
   333  000393  4C                 	db	76	;'L'
   334  000394  20                 	db	32
   335  000395  70                 	db	112	;'p'
   336  000396  6F                 	db	111	;'o'
   337  000397  69                 	db	105	;'i'
   338  000398  6E                 	db	110	;'n'
   339  000399  74                 	db	116	;'t'
   340  00039A  65                 	db	101	;'e'
   341  00039B  72                 	db	114	;'r'
   342  00039C  0A                 	db	10
   343  00039D  00                 	db	0
   344  00039E                     STR_3:
   345  00039E  46                 	db	70	;'F'
   346  00039F  61                 	db	97	;'a'
   347  0003A0  69                 	db	105	;'i'
   348  0003A1  6C                 	db	108	;'l'
   349  0003A2  65                 	db	101	;'e'
   350  0003A3  64                 	db	100	;'d'
   351  0003A4  20                 	db	32
   352  0003A5  49                 	db	73	;'I'
   353  0003A6  6E                 	db	110	;'n'
   354  0003A7  69                 	db	105	;'i'
   355  0003A8  74                 	db	116	;'t'
   356  0003A9  69                 	db	105	;'i'
   357  0003AA  61                 	db	97	;'a'
   358  0003AB  6C                 	db	108	;'l'
   359  0003AC  69                 	db	105	;'i'
   360  0003AD  7A                 	db	122	;'z'
   361  0003AE  61                 	db	97	;'a'
   362  0003AF  74                 	db	116	;'t'
   363  0003B0  69                 	db	105	;'i'
   364  0003B1  6F                 	db	111	;'o'
   365  0003B2  6E                 	db	110	;'n'
   366  0003B3  0A                 	db	10
   367  0003B4  00                 	db	0
   368  0003B5                     STR_4:
   369  0003B5  4F                 	db	79	;'O'
   370  0003B6  74                 	db	116	;'t'
   371  0003B7  68                 	db	104	;'h'
   372  0003B8  65                 	db	101	;'e'
   373  0003B9  72                 	db	114	;'r'
   374  0003BA  20                 	db	32
   375  0003BB  46                 	db	70	;'F'
   376  0003BC  61                 	db	97	;'a'
   377  0003BD  69                 	db	105	;'i'
   378  0003BE  6C                 	db	108	;'l'
   379  0003BF  75                 	db	117	;'u'
   380  0003C0  72                 	db	114	;'r'
   381  0003C1  65                 	db	101	;'e'
   382  0003C2  0A                 	db	10
   383  0003C3  00                 	db	0
   384                           
   385                           ; #config settings
   386  0003C4  00                 	db	0	; dummy byte at the end
   387  0000                     
   388                           	psect	cinit
   389  002192                     __pcinit:
   390                           	opt stack 0
   391  002192                     start_initialization:
   392                           	opt stack 0
   393  002192                     __initialization:
   394                           	opt stack 0
   395                           
   396                           ; Initialize objects allocated to BANK0 (6 bytes)
   397                           ; load TBLPTR registers with __pidataBANK0
   398  002192  0E56               	movlw	low __pidataBANK0
   399  002194  6EF6               	movwf	tblptrl,c
   400  002196  0E29               	movlw	high __pidataBANK0
   401  002198  6EF7               	movwf	tblptrh,c
   402  00219A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   403  00219C  6EF8               	movwf	tblptru,c
   404  00219E  EE00  F0FA         	lfsr	0,__pdataBANK0
   405  0021A2  EE10 F006          	lfsr	1,6
   406  0021A6                     copy_data0:
   407  0021A6  0009               	tblrd		*+
   408  0021A8  CFF5 FFEE          	movff	tablat,postinc0
   409  0021AC  50E5               	movf	postdec1,w,c
   410  0021AE  50E1               	movf	fsr1l,w,c
   411  0021B0  E1FA               	bnz	copy_data0
   412                           
   413                           ; Initialize objects allocated to COMRAM (1 bytes)
   414                           ; load TBLPTR registers with __pidataCOMRAM
   415  0021B2  0E72               	movlw	low __pidataCOMRAM
   416  0021B4  6EF6               	movwf	tblptrl,c
   417  0021B6  0E29               	movlw	high __pidataCOMRAM
   418  0021B8  6EF7               	movwf	tblptrh,c
   419  0021BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   420  0021BC  6EF8               	movwf	tblptru,c
   421  0021BE  0009               	tblrd		*+	;fetch initializer
   422  0021C0  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   423                           
   424                           ; Clear objects allocated to BIGRAM (316 bytes)
   425  0021C4  EE01  F0B8         	lfsr	0,__pbssBIGRAM
   426  0021C8  EE11 F03C          	lfsr	1,316
   427  0021CC                     clear_0:
   428  0021CC  6AEE               	clrf	postinc0,c
   429  0021CE  50E5               	movf	postdec1,w,c
   430  0021D0  50E1               	movf	fsr1l,w,c
   431  0021D2  E1FC               	bnz	clear_0
   432  0021D4  50E2               	movf	fsr1h,w,c
   433  0021D6  E1FA               	bnz	clear_0
   434                           
   435                           ; Clear objects allocated to BANK1 (184 bytes)
   436  0021D8  EE01  F000         	lfsr	0,__pbssBANK1
   437  0021DC  0EB8               	movlw	184
   438  0021DE                     clear_1:
   439  0021DE  6AEE               	clrf	postinc0,c
   440  0021E0  06E8               	decf	wreg,f,c
   441  0021E2  E1FD               	bnz	clear_1
   442                           
   443                           ; Clear objects allocated to BANK0 (45 bytes)
   444  0021E4  EE00  F0CD         	lfsr	0,__pbssBANK0
   445  0021E8  0E2D               	movlw	45
   446  0021EA                     clear_2:
   447  0021EA  6AEE               	clrf	postinc0,c
   448  0021EC  06E8               	decf	wreg,f,c
   449  0021EE  E1FD               	bnz	clear_2
   450                           
   451                           ; Clear objects allocated to COMRAM (39 bytes)
   452  0021F0  EE00  F034         	lfsr	0,__pbssCOMRAM
   453  0021F4  0E27               	movlw	39
   454  0021F6                     clear_3:
   455  0021F6  6AEE               	clrf	postinc0,c
   456  0021F8  06E8               	decf	wreg,f,c
   457  0021FA  E1FD               	bnz	clear_3
   458  0021FC                     end_of_initialization:
   459                           	opt stack 0
   460  0021FC                     __end_of__initialization:
   461                           	opt stack 0
   462  0021FC  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   463  0021FE  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   464  002200  0E00               	movlw	low (__Lmediumconst shr (0+16))
   465  002202  6EF8               	movwf	tblptru,c
   466  002204  0100               	movlb	0
   467  002206  EFFF  F00F         	goto	_main	;jump to C main() function
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1h	equ	0xFE2
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	bssCOMRAM
   479  000034                     __pbssCOMRAM:
   480                           	opt stack 0
   481  000034                     _TransmitFrame:
   482                           	opt stack 0
   483  000034                     	ds	4
   484  000038                     ISR@LastTime:
   485                           	opt stack 0
   486  000038                     	ds	2
   487  00003A                     ISR@NextTime:
   488                           	opt stack 0
   489  00003A                     	ds	2
   490  00003C                     _SysTickCounter:
   491                           	opt stack 0
   492  00003C                     	ds	2
   493  00003E                     	ds	2
   494  000040                     __PRIMASK_temp:
   495                           	opt stack 0
   496  000040                     	ds	2
   497  000042                     	ds	1
   498  000043                     _Queue1:
   499                           	opt stack 0
   500  000043                     	ds	12
   501  00004F                     _Queue2:
   502                           	opt stack 0
   503  00004F                     	ds	12
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1h	equ	0xFE2
   512                           fsr1l	equ	0xFE1
   513                           
   514                           	psect	dataCOMRAM
   515  00005B                     __pdataCOMRAM:
   516                           	opt stack 0
   517  00005B                     	ds	1
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           postdec1	equ	0xFE5
   525                           fsr1h	equ	0xFE2
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	bssBANK0
   529  0000CD                     __pbssBANK0:
   530                           	opt stack 0
   531  0000CD                     _CurrentFrame:
   532                           	opt stack 0
   533  0000CD                     	ds	4
   534  0000D1                     ES_Timer_Tick_Resp@NewEvent:
   535                           	opt stack 0
   536  0000D1                     	ds	3
   537  0000D4                     ES_Timer_Tick_Resp@NeedsProcessing:
   538                           	opt stack 0
   539  0000D4                     	ds	2
   540  0000D6                     Pattern_RGBPatterns@PatternConfigs:
   541                           	opt stack 0
   542  0000D6                     	ds	2
   543  0000D8                     _FramePointer:
   544                           	opt stack 0
   545  0000D8                     	ds	2
   546  0000DA                     _Ready:
   547                           	opt stack 0
   548  0000DA                     	ds	2
   549  0000DC                     _TMR_ActiveFlags:
   550                           	opt stack 0
   551  0000DC                     	ds	2
   552  0000DE                     CanRX_Service@MyPriority:
   553                           	opt stack 0
   554  0000DE                     	ds	1
   555  0000DF                     ES_Timer_Tick_Resp@NextTimer2Process:
   556                           	opt stack 0
   557  0000DF                     	ds	1
   558  0000E0                     Pattern_RGBPatterns@Length:
   559                           	opt stack 0
   560  0000E0                     	ds	1
   561  0000E1                     SPI32_ControlService@CurrentState:
   562                           	opt stack 0
   563  0000E1                     	ds	1
   564  0000E2                     SPI32_ControlService@MyPriority:
   565                           	opt stack 0
   566  0000E2                     	ds	1
   567  0000E3                     _CurrentState:
   568                           	opt stack 0
   569  0000E3                     	ds	1
   570  0000E4                     _FrameIndex:
   571                           	opt stack 0
   572  0000E4                     	ds	1
   573  0000E5                     _Length:
   574                           	opt stack 0
   575  0000E5                     	ds	1
   576  0000E6                     _MyPriority:
   577                           	opt stack 0
   578  0000E6                     	ds	1
   579  0000E7                     _NumFrames:
   580                           	opt stack 0
   581  0000E7                     	ds	1
   582  0000E8                     _PatternStepCounter:
   583                           	opt stack 0
   584  0000E8                     	ds	1
   585  0000E9                     _TickCount:
   586                           	opt stack 0
   587  0000E9                     	ds	1
   588  0000EA                     _Queue0:
   589                           	opt stack 0
   590  0000EA                     	ds	12
   591  0000F6                     ES_Run@ThisEvent:
   592                           	opt stack 0
   593  0000F6                     	ds	3
   594  0000F9                     _Brightness:
   595                           	opt stack 0
   596  0000F9                     	ds	1
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           postdec1	equ	0xFE5
   604                           fsr1h	equ	0xFE2
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	dataBANK0
   608  0000FA                     __pdataBANK0:
   609                           	opt stack 0
   610  0000FA                     _FrameByte:
   611                           	opt stack 0
   612  0000FA                     	ds	1
   613  0000FB                     _PatternConfigs:
   614                           	opt stack 0
   615  0000FB                     	ds	5
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1h	equ	0xFE2
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	bssBANK1
   627  000100                     __pbssBANK1:
   628                           	opt stack 0
   629  000100                     _TMR_TimerArray:
   630                           	opt stack 0
   631  000100                     	ds	32
   632  000120                     _PixelPattern:
   633                           	opt stack 0
   634  000120                     	ds	152
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1h	equ	0xFE2
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	bssBIGRAM
   646  0001B8                     __pbssBIGRAM:
   647                           	opt stack 0
   648  0001B8                     _PixelFrames:
   649                           	opt stack 0
   650  0001B8                     	ds	316
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1h	equ	0xFE2
   659                           fsr1l	equ	0xFE1
   660                           
   661                           	psect	cstackBANK0
   662  000060                     __pcstackBANK0:
   663                           	opt stack 0
   664  000060                     ??_ES_Timer_StopTimer:
   665  000060                     ?_PatternOff:
   666                           	opt stack 0
   667  000060                     ?_printf:
   668                           	opt stack 0
   669  000060                     ?___awdiv:
   670                           	opt stack 0
   671  000060                     ?___awmod:
   672                           	opt stack 0
   673  000060                     ?_GetNextFrame:
   674                           	opt stack 0
   675  000060                     ES_CheckUserEvents@i:
   676                           	opt stack 0
   677  000060                     SetPattern@PatternID:
   678                           	opt stack 0
   679  000060                     DotStar_Init@brightness:
   680                           	opt stack 0
   681  000060                     ___lbmod@divisor:
   682                           	opt stack 0
   683  000060                     ES_GetMSBitSet@Val2Check:
   684                           	opt stack 0
   685  000060                     __HW_Timer_Init@Rate:
   686                           	opt stack 0
   687  000060                     ES_InitQueue@pBlock:
   688                           	opt stack 0
   689  000060                     ES_Timer_InitTimer@NewTime:
   690                           	opt stack 0
   691  000060                     SetupPattern@configs:
   692                           	opt stack 0
   693  000060                     printf@f:
   694                           	opt stack 0
   695  000060                     ___awdiv@dividend:
   696                           	opt stack 0
   697  000060                     ___awmod@dividend:
   698                           	opt stack 0
   699  000060                     SPI32_SendFrame@newFrame:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x0
   703  000060                     	ds	1
   704  000061                     ??_DotStar_Init:
   705  000061                     ___lbmod@dividend:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x1
   709  000061                     	ds	1
   710  000062                     ??_ES_GetMSBitSet:
   711  000062                     ??_ES_Timer_InitTimer:
   712  000062                     ES_InitQueue@BlockSize:
   713                           	opt stack 0
   714  000062                     SetupPattern@numPixels:
   715                           	opt stack 0
   716  000062                     PatternOff@i:
   717                           	opt stack 0
   718  000062                     ___lbmod@counter:
   719                           	opt stack 0
   720  000062                     ES_Timer_Init@Rate:
   721                           	opt stack 0
   722  000062                     printf@ap:
   723                           	opt stack 0
   724  000062                     ___awdiv@divisor:
   725                           	opt stack 0
   726  000062                     ___awmod@divisor:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x2
   730  000062                     	ds	1
   731  000063                     DotStar_Init@numPixels:
   732                           	opt stack 0
   733  000063                     ___lbmod@rem:
   734                           	opt stack 0
   735  000063                     ES_InitQueue@pThisQueue:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x3
   739  000063                     	ds	1
   740  000064                     ??_SPI32_SendFrame:
   741  000064                     ES_Timer_StopTimer@Num:
   742                           	opt stack 0
   743  000064                     ES_Timer_InitTimer@Num:
   744                           	opt stack 0
   745  000064                     printf@c:
   746                           	opt stack 0
   747  000064                     ___awdiv@counter:
   748                           	opt stack 0
   749  000064                     ___awmod@counter:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x4
   753  000064                     	ds	1
   754  000065                     ___awdiv@sign:
   755                           	opt stack 0
   756  000065                     ___awmod@sign:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x5
   760  000065                     	ds	1
   761  000066                     ?___wmul:
   762                           	opt stack 0
   763  000066                     ___wmul@multiplier:
   764                           	opt stack 0
   765  000066                     ___awdiv@quotient:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x6
   769  000066                     	ds	1
   770  000067                     ES_GetMSBitSet@ReturnVal:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x7
   774  000067                     	ds	1
   775  000068                     ?_IdlePattern:
   776                           	opt stack 0
   777  000068                     ?_ThinkingPattern:
   778                           	opt stack 0
   779  000068                     ?_SpeakingPattern:
   780                           	opt stack 0
   781  000068                     ?_ListeningPattern:
   782                           	opt stack 0
   783  000068                     ES_GetMSBitSet@Nybble2Test:
   784                           	opt stack 0
   785  000068                     ThinkingPattern@pixel:
   786                           	opt stack 0
   787  000068                     ListeningPattern@pixel:
   788                           	opt stack 0
   789  000068                     SpeakingPattern@pixel:
   790                           	opt stack 0
   791  000068                     IdlePattern@pixel:
   792                           	opt stack 0
   793  000068                     ___wmul@multiplicand:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x8
   797  000068                     	ds	1
   798  000069                     ES_GetMSBitSet@LoopCntr:
   799                           	opt stack 0
   800  000069                     ThinkingPattern@stepCount:
   801                           	opt stack 0
   802  000069                     ListeningPattern@stepCount:
   803                           	opt stack 0
   804  000069                     SpeakingPattern@stepCount:
   805                           	opt stack 0
   806  000069                     IdlePattern@stepCount:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x9
   810  000069                     	ds	1
   811  00006A                     ??_IdlePattern:
   812  00006A                     ??_ThinkingPattern:
   813  00006A                     ??_SpeakingPattern:
   814  00006A                     ??_ListeningPattern:
   815  00006A                     ___wmul@product:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0xA
   819  00006A                     	ds	2
   820  00006C                     ?___lwdiv:
   821                           	opt stack 0
   822  00006C                     ES_EnQueueFIFO@pBlock:
   823                           	opt stack 0
   824  00006C                     ES_DeQueue@pBlock:
   825                           	opt stack 0
   826  00006C                     ___lwdiv@dividend:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0xC
   830  00006C                     	ds	2
   831  00006E                     ES_DeQueue@pReturnEvent:
   832                           	opt stack 0
   833  00006E                     ___lwdiv@divisor:
   834                           	opt stack 0
   835  00006E                     ES_EnQueueFIFO@Event2Add:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0xE
   839  00006E                     	ds	2
   840  000070                     ??_ES_DeQueue:
   841  000070                     ___lwdiv@quotient:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x10
   845  000070                     	ds	1
   846  000071                     ??_ES_EnQueueFIFO:
   847                           
   848                           ; 1 bytes @ 0x11
   849  000071                     	ds	1
   850  000072                     ES_DeQueue@SaveCrit:
   851                           	opt stack 0
   852  000072                     ___lwdiv@counter:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x12
   856  000072                     	ds	1
   857  000073                     ES_DeQueue@NumLeft:
   858                           	opt stack 0
   859  000073                     HSV_to_RGB@HSV_Value:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x13
   863  000073                     	ds	1
   864  000074                     ES_EnQueueFIFO@SaveCrit:
   865                           	opt stack 0
   866  000074                     ES_DeQueue@pThisQueue:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x14
   870  000074                     	ds	1
   871  000075                     ??_HSV_to_RGB:
   872  000075                     IdlePattern@hue:
   873                           	opt stack 0
   874  000075                     ES_EnQueueFIFO@pThisQueue:
   875                           	opt stack 0
   876  000075                     ThinkingPattern@pixelHSV:
   877                           	opt stack 0
   878  000075                     ListeningPattern@pixelHSV:
   879                           	opt stack 0
   880  000075                     SpeakingPattern@pixelHSV:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x15
   884  000075                     	ds	1
   885  000076                     IdlePattern@pixelHSV:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x16
   889  000076                     	ds	1
   890  000077                     _ThinkingPattern$744:
   891                           	opt stack 0
   892  000077                     _ListeningPattern$756:
   893                           	opt stack 0
   894  000077                     _SpeakingPattern$768:
   895                           	opt stack 0
   896  000077                     ES_PostToService@TheEvent:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x17
   900  000077                     	ds	1
   901  000078                     _IdlePattern$780:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x18
   905  000078                     	ds	1
   906  000079                     _ThinkingPattern$745:
   907                           	opt stack 0
   908  000079                     _ListeningPattern$757:
   909                           	opt stack 0
   910  000079                     _SpeakingPattern$769:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x19
   914  000079                     	ds	1
   915  00007A                     ??_ES_PostToService:
   916  00007A                     _IdlePattern$781:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x1A
   920  00007A                     	ds	1
   921  00007B                     ThinkingPattern@sat:
   922                           	opt stack 0
   923  00007B                     ListeningPattern@sat:
   924                           	opt stack 0
   925  00007B                     SpeakingPattern@sat:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x1B
   929  00007B                     	ds	1
   930  00007C                     ES_PostToService@WhichService:
   931                           	opt stack 0
   932  00007C                     ThinkingPattern@val:
   933                           	opt stack 0
   934  00007C                     ListeningPattern@val:
   935                           	opt stack 0
   936  00007C                     SpeakingPattern@val:
   937                           	opt stack 0
   938  00007C                     IdlePattern@sat:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x1C
   942  00007C                     	ds	1
   943  00007D                     ThinkingPattern@hue:
   944                           	opt stack 0
   945  00007D                     ListeningPattern@hue:
   946                           	opt stack 0
   947  00007D                     SpeakingPattern@hue:
   948                           	opt stack 0
   949  00007D                     IdlePattern@val:
   950                           	opt stack 0
   951  00007D                     InitPatternControlService@ThisEvent:
   952                           	opt stack 0
   953  00007D                     PostPatternControlService@ThisEvent:
   954                           	opt stack 0
   955  00007D                     InitSPI32ControlService@ThisEvent:
   956                           	opt stack 0
   957  00007D                     PostSPI32ControlService@ThisEvent:
   958                           	opt stack 0
   959  00007D                     InitCanRX_Service@ThisEvent:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x1D
   963  00007D                     	ds	1
   964  00007E                     ThinkingPattern@x:
   965                           	opt stack 0
   966  00007E                     ListeningPattern@x:
   967                           	opt stack 0
   968  00007E                     SpeakingPattern@x:
   969                           	opt stack 0
   970  00007E                     IdlePattern@x:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x1E
   974  00007E                     	ds	1
   975  00007F                     ThinkingPattern@head:
   976                           	opt stack 0
   977  00007F                     ListeningPattern@head:
   978                           	opt stack 0
   979  00007F                     SpeakingPattern@head:
   980                           	opt stack 0
   981  00007F                     IdlePattern@head:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1F
   985  00007F                     	ds	1
   986  000080                     ??_ES_Timer_Tick_Resp:
   987  000080                     ?_UpdatePattern:
   988                           	opt stack 0
   989  000080                     InitPatternControlService@Priority:
   990                           	opt stack 0
   991  000080                     InitSPI32ControlService@Priority:
   992                           	opt stack 0
   993  000080                     InitCanRX_Service@Priority:
   994                           	opt stack 0
   995  000080                     SPI32_TransmitFrames@framePointer:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x20
   999  000080                     	ds	1
  1000  000081                     ES_Initialize@NewRate:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x21
  1004  000081                     	ds	1
  1005  000082                     UpdatePattern@patternID:
  1006                           	opt stack 0
  1007  000082                     SPI32_TransmitFrames@numFrames:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x22
  1011  000082                     	ds	1
  1012  000083                     ES_Initialize@i:
  1013                           	opt stack 0
  1014  000083                     UpdatePattern@i:
  1015                           	opt stack 0
  1016  000083                     SPI32_TransmitFrames@transmitEvent:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x23
  1020  000083                     	ds	1
  1021  000084                     UpdatePattern@i_729:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x24
  1025  000084                     	ds	1
  1026  000085                     UpdatePattern@i_730:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x25
  1030  000085                     	ds	1
  1031  000086                     UpdatePattern@i_731:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x26
  1035  000086                     	ds	1
  1036  000087                     UpdatePattern@i_732:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x27
  1040  000087                     	ds	6
  1041  00008D                     HSV_to_RGB@h:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x2D
  1045  00008D                     	ds	2
  1046  00008F                     HSV_to_RGB@region:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x2F
  1050  00008F                     	ds	2
  1051  000091                     HSV_to_RGB@fpart:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x31
  1055  000091                     	ds	2
  1056  000093                     HSV_to_RGB@r:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x33
  1060  000093                     	ds	2
  1061  000095                     HSV_to_RGB@g:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x35
  1065  000095                     	ds	2
  1066  000097                     HSV_to_RGB@b:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x37
  1070  000097                     	ds	2
  1071  000099                     HSV_to_RGB@q:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x39
  1075  000099                     	ds	2
  1076  00009B                     HSV_to_RGB@t:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x3B
  1080  00009B                     	ds	2
  1081  00009D                     _HSV_to_RGB$2058:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x3D
  1085  00009D                     	ds	2
  1086  00009F                     HSV_to_RGB@s:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x3F
  1090  00009F                     	ds	2
  1091  0000A1                     HSV_to_RGB@p:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x41
  1095  0000A1                     	ds	2
  1096  0000A3                     HSV_to_RGB@v:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x43
  1100  0000A3                     	ds	2
  1101  0000A5                     DotStar_Show@patternPointer:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x45
  1105  0000A5                     	ds	2
  1106  0000A7                     ??_DotStar_Show:
  1107                           
  1108                           ; 1 bytes @ 0x47
  1109  0000A7                     	ds	18
  1110  0000B9                     DotStar_Show@i:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x59
  1114  0000B9                     	ds	1
  1115  0000BA                     ?_RunPatternControlService:
  1116                           	opt stack 0
  1117  0000BA                     ?_RunSPI32ControlService:
  1118                           	opt stack 0
  1119  0000BA                     ?_RunCanRX_Service:
  1120                           	opt stack 0
  1121  0000BA                     RunPatternControlService@ThisEvent:
  1122                           	opt stack 0
  1123  0000BA                     RunSPI32ControlService@ThisEvent:
  1124                           	opt stack 0
  1125  0000BA                     RunCanRX_Service@ThisEvent:
  1126                           	opt stack 0
  1127                           
  1128                           ; 3 bytes @ 0x5A
  1129  0000BA                     	ds	3
  1130  0000BD                     ??_RunSPI32ControlService:
  1131  0000BD                     RunPatternControlService@ReturnEvent:
  1132                           	opt stack 0
  1133  0000BD                     RunCanRX_Service@ReturnEvent:
  1134                           	opt stack 0
  1135                           
  1136                           ; 3 bytes @ 0x5D
  1137  0000BD                     	ds	3
  1138  0000C0                     RunPatternControlService@testEvent:
  1139                           	opt stack 0
  1140  0000C0                     RunCanRX_Service@PatternEvent:
  1141                           	opt stack 0
  1142                           
  1143                           ; 3 bytes @ 0x60
  1144  0000C0                     	ds	4
  1145  0000C4                     RunSPI32ControlService@ReturnEvent:
  1146                           	opt stack 0
  1147                           
  1148                           ; 3 bytes @ 0x64
  1149  0000C4                     	ds	3
  1150  0000C7                     ??_ES_Run:
  1151                           
  1152                           ; 1 bytes @ 0x67
  1153  0000C7                     	ds	4
  1154  0000CB                     ES_Run@HighestPrior:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x6B
  1158  0000CB                     	ds	1
  1159  0000CC                     main@ErrorType:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x6C
  1163  0000CC                     	ds	1
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1h	equ	0xFE2
  1172                           fsr1l	equ	0xFE1
  1173                           
  1174                           	psect	cstackCOMRAM
  1175  000001                     __pcstackCOMRAM:
  1176                           	opt stack 0
  1177  000001                     ?i2___awmod:
  1178                           	opt stack 0
  1179  000001                     i2___awmod@dividend:
  1180                           	opt stack 0
  1181  000001                     i2SPI32_SendFrame@newFrame:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x0
  1185  000001                     	ds	2
  1186  000003                     i2___awmod@divisor:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x2
  1190  000003                     	ds	2
  1191  000005                     ??i2_SPI32_SendFrame:
  1192  000005                     i2___awmod@counter:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x4
  1196  000005                     	ds	1
  1197  000006                     i2___awmod@sign:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x5
  1201  000006                     	ds	1
  1202  000007                     ?i2___wmul:
  1203                           	opt stack 0
  1204  000007                     i2___wmul@multiplier:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x6
  1208  000007                     	ds	2
  1209  000009                     i2___wmul@multiplicand:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x8
  1213  000009                     	ds	2
  1214  00000B                     i2___wmul@product:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0xA
  1218  00000B                     	ds	2
  1219  00000D                     i2ES_EnQueueFIFO@pBlock:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0xC
  1223  00000D                     	ds	2
  1224  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1225                           	opt stack 0
  1226                           
  1227                           ; 3 bytes @ 0xE
  1228  00000F                     	ds	3
  1229  000012                     ??i2_ES_EnQueueFIFO:
  1230                           
  1231                           ; 1 bytes @ 0x11
  1232  000012                     	ds	3
  1233  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x14
  1237  000015                     	ds	1
  1238  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x15
  1242  000016                     	ds	2
  1243  000018                     i2ES_PostToService@TheEvent:
  1244                           	opt stack 0
  1245                           
  1246                           ; 3 bytes @ 0x17
  1247  000018                     	ds	3
  1248  00001B                     ??i2_ES_PostToService:
  1249                           
  1250                           ; 1 bytes @ 0x1A
  1251  00001B                     	ds	2
  1252  00001D                     i2ES_PostToService@WhichService:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x1C
  1256  00001D                     	ds	1
  1257  00001E                     PostCanRX_Service@ThisEvent:
  1258                           	opt stack 0
  1259  00001E                     i2PostSPI32ControlService@ThisEvent:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x1D
  1263  00001E                     	ds	3
  1264  000021                     SPI32_EOTResponse@EOTevent:
  1265                           	opt stack 0
  1266  000021                     ProcessReceive@Event2Post:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x20
  1270  000021                     	ds	3
  1271  000024                     ??_ISR:
  1272                           
  1273                           ; 1 bytes @ 0x23
  1274  000024                     	ds	16
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1h	equ	0xFE2
  1283                           fsr1l	equ	0xFE1
  1284                           
  1285 ;;
  1286 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1287 ;;
  1288 ;; *************** function _main *****************
  1289 ;; Defined at:
  1290 ;;		line 25 in file "main.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  ErrorType       1  108[BANK0 ] enum E15651
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  2  635[None  ] int 
  1297 ;; Registers used:
  1298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1304 ;;      Params:         0       0       0       0
  1305 ;;      Locals:         0       1       0       0
  1306 ;;      Temps:          0       0       0       0
  1307 ;;      Totals:         0       1       0       0
  1308 ;;Total ram usage:        1 bytes
  1309 ;; Hardware stack levels required when called:   16
  1310 ;; This function calls:
  1311 ;;		_ES_Initialize
  1312 ;;		_ES_Run
  1313 ;;		_printf
  1314 ;; This function is called by:
  1315 ;;		Startup code after reset
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text0
  1320  001FFE                     __ptext0:
  1321                           	opt stack 0
  1322  001FFE                     _main:
  1323                           	opt stack 15
  1324                           
  1325                           ;main.c: 28: IRCF0 = 1;
  1326                           
  1327                           ;incstack = 0
  1328  001FFE  88D3               	bsf	4051,4,c	;volatile
  1329                           
  1330                           ;main.c: 29: IRCF1 = 1;
  1331  002000  8AD3               	bsf	4051,5,c	;volatile
  1332                           
  1333                           ;main.c: 30: IRCF2 = 1;
  1334  002002  8CD3               	bsf	4051,6,c	;volatile
  1335                           
  1336                           ;main.c: 31: SCS1 = 1;
  1337  002004  82D3               	bsf	4051,1,c	;volatile
  1338                           
  1339                           ;main.c: 39: ES_Return_t ErrorType;
  1340                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1341  002006  0E9C               	movlw	156
  1342  002008  0100               	movlb	0	; () banked
  1343  00200A  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1344  00200C  0E3F               	movlw	63
  1345  00200E  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1346  002010  EC3D  F00C         	call	_ES_Initialize	;wreg free
  1347  002014  0100               	movlb	0	; () banked
  1348  002016  6FCC               	movwf	main@ErrorType& (0+255),b
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;main.c: 56: if ( ErrorType == Success ) {
  1352  002018  0100               	movlb	0	; () banked
  1353  00201A  51CC               	movf	main@ErrorType& (0+255),w,b
  1354  00201C  0100               	movlb	0	; () banked
  1355  00201E  A4D8               	btfss	status,2,c
  1356  002020  D029               	goto	l3908
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 58: ErrorType = ES_Run();
  1360  002022  ECC3  F00B         	call	_ES_Run	;wreg free
  1361  002026  0100               	movlb	0	; () banked
  1362  002028  6FCC               	movwf	main@ErrorType& (0+255),b
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 60: }
  1366                           ;main.c: 62: switch (ErrorType){
  1367  00202A  D024               	goto	l3908
  1368  00202C                     l3898:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 64: printf("Failed on attempt to Post\n");
  1372  00202C  0E6B               	movlw	low STR_1
  1373  00202E  0100               	movlb	0	; () banked
  1374  002030  6F60               	movwf	printf@f& (0+255),b
  1375  002032  0E03               	movlw	high STR_1
  1376  002034  0100               	movlb	0	; () banked
  1377  002036  6F61               	movwf	(printf@f+1)& (0+255),b
  1378  002038  EC92  F013         	call	_printf	;wreg free
  1379                           
  1380                           ;main.c: 65: break;
  1381  00203C  D027               	goto	l643
  1382  00203E                     l3900:
  1383                           
  1384                           ;main.c: 67: printf("Failed on NULL pointer\n");
  1385  00203E  0E86               	movlw	low STR_2
  1386  002040  0100               	movlb	0	; () banked
  1387  002042  6F60               	movwf	printf@f& (0+255),b
  1388  002044  0E03               	movlw	high STR_2
  1389  002046  0100               	movlb	0	; () banked
  1390  002048  6F61               	movwf	(printf@f+1)& (0+255),b
  1391  00204A  EC92  F013         	call	_printf	;wreg free
  1392                           
  1393                           ;main.c: 68: break;
  1394  00204E  D01E               	goto	l643
  1395  002050                     l3902:
  1396                           
  1397                           ;main.c: 70: printf("Failed Initialization\n");
  1398  002050  0E9E               	movlw	low STR_3
  1399  002052  0100               	movlb	0	; () banked
  1400  002054  6F60               	movwf	printf@f& (0+255),b
  1401  002056  0E03               	movlw	high STR_3
  1402  002058  0100               	movlb	0	; () banked
  1403  00205A  6F61               	movwf	(printf@f+1)& (0+255),b
  1404  00205C  EC92  F013         	call	_printf	;wreg free
  1405                           
  1406                           ;main.c: 71: break;
  1407  002060  D015               	goto	l643
  1408  002062                     l3904:
  1409                           
  1410                           ;main.c: 73: printf("Other Failure\n");
  1411  002062  0EB5               	movlw	low STR_4
  1412  002064  0100               	movlb	0	; () banked
  1413  002066  6F60               	movwf	printf@f& (0+255),b
  1414  002068  0E03               	movlw	high STR_4
  1415  00206A  0100               	movlb	0	; () banked
  1416  00206C  6F61               	movwf	(printf@f+1)& (0+255),b
  1417  00206E  EC92  F013         	call	_printf	;wreg free
  1418                           
  1419                           ;main.c: 75: }
  1420                           
  1421                           ;main.c: 74: break;
  1422  002072  D00C               	goto	l643
  1423  002074                     l3908:
  1424  002074  0100               	movlb	0	; () banked
  1425  002076  51CC               	movf	main@ErrorType& (0+255),w,b
  1426                           
  1427                           ; Switch size 1, requested type "space"
  1428                           ; Number of cases is 3, Range of values is 1 to 5
  1429                           ; switch strategies available:
  1430                           ; Name         Instructions Cycles
  1431                           ; simple_byte           10     6 (average)
  1432                           ;	Chosen strategy is simple_byte
  1433  002078  0A01               	xorlw	1	; case 1
  1434  00207A  B4D8               	btfsc	status,2,c
  1435  00207C  D7D7               	goto	l3898
  1436  00207E  0A02               	xorlw	2	; case 3
  1437  002080  B4D8               	btfsc	status,2,c
  1438  002082  D7DD               	goto	l3900
  1439  002084  0A06               	xorlw	6	; case 5
  1440  002086  B4D8               	btfsc	status,2,c
  1441  002088  D7E3               	goto	l3902
  1442  00208A  D7EB               	goto	l3904
  1443  00208C                     l643:
  1444                           
  1445                           ;main.c: 77: ;
  1446  00208C  D7FF               	goto	l643
  1447  00208E                     __end_of_main:
  1448                           	opt stack 0
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec1	equ	0xFE5
  1456                           fsr1h	equ	0xFE2
  1457                           fsr1l	equ	0xFE1
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _printf *****************
  1461 ;; Defined at:
  1462 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1465 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  tmpval          4    0        struct .
  1468 ;;  cp              3    0        PTR const unsigned char 
  1469 ;;  ap              2    2[BANK0 ] PTR void [1]
  1470 ;;		 -> ?_printf(2), 
  1471 ;;  len             2    0        unsigned int 
  1472 ;;  val             2    0        unsigned int 
  1473 ;;  c               1    4[BANK0 ] char 
  1474 ;;  flag            1    0        unsigned char 
  1475 ;;  prec            1    0        char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2    0[BANK0 ] int 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1485 ;;      Params:         0       2       0       0
  1486 ;;      Locals:         0       3       0       0
  1487 ;;      Temps:          0       0       0       0
  1488 ;;      Totals:         0       5       0       0
  1489 ;;Total ram usage:        5 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    8
  1492 ;; This function calls:
  1493 ;;		_putch
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text1
  1500  002724                     __ptext1:
  1501                           	opt stack 0
  1502  002724                     _printf:
  1503                           	opt stack 22
  1504                           
  1505                           ;doprnt.c: 466: va_list ap;
  1506                           ;doprnt.c: 499: signed char c;
  1507                           ;doprnt.c: 506: signed char prec;
  1508                           ;doprnt.c: 508: unsigned char flag;
  1509                           ;doprnt.c: 523: union {
  1510                           ;doprnt.c: 524: unsigned long vd;
  1511                           ;doprnt.c: 525: double integ;
  1512                           ;doprnt.c: 526: } tmpval;
  1513                           ;doprnt.c: 528: unsigned int val;
  1514                           ;doprnt.c: 529: unsigned len;
  1515                           ;doprnt.c: 530: const char * cp;
  1516                           ;doprnt.c: 533: *ap = __va_start();
  1517                           
  1518                           ;incstack = 0
  1519  002724  0E62               	movlw	low (?_printf+2)
  1520  002726  0100               	movlb	0	; () banked
  1521  002728  6F62               	movwf	printf@ap& (0+255),b
  1522  00272A  0E00               	movlw	high (?_printf+2)
  1523  00272C  0100               	movlb	0	; () banked
  1524  00272E  6F63               	movwf	(printf@ap+1)& (0+255),b
  1525                           
  1526                           ;doprnt.c: 536: while(c = *f++) {
  1527  002730  D004               	goto	l3716
  1528  002732                     l3714:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;doprnt.c: 540: {
  1532                           ;doprnt.c: 541: (putch(c) );
  1533  002732  0100               	movlb	0	; () banked
  1534  002734  5164               	movf	printf@c& (0+255),w,b
  1535  002736  ECB6  F014         	call	_putch
  1536  00273A                     l3716:
  1537  00273A  C060  FFF6         	movff	printf@f,tblptrl
  1538  00273E  C061  FFF7         	movff	printf@f+1,tblptrh
  1539  002742  0100               	movlb	0	; () banked
  1540  002744  4B60               	infsnz	printf@f& (0+255),f,b
  1541  002746  2B61               	incf	(printf@f+1)& (0+255),f,b
  1542  002748                     	if	0	;tblptru may be non-zero
  1543  002748                     	endif
  1544  002748                     	if	0	;tblptru may be non-zero
  1545  002748                     	endif
  1546  002748  0008               	tblrd		*
  1547  00274A  CFF5 F064          	movff	tablat,printf@c
  1548  00274E  0100               	movlb	0	; () banked
  1549  002750  5164               	movf	printf@c& (0+255),w,b
  1550  002752  B4D8               	btfsc	status,2,c
  1551  002754  0012               	return	
  1552  002756  D7ED               	goto	l3714
  1553  002758                     __end_of_printf:
  1554                           	opt stack 0
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1h	equ	0xFE2
  1563                           fsr1l	equ	0xFE1
  1564                           status	equ	0xFD8
  1565                           
  1566 ;; *************** function _putch *****************
  1567 ;; Defined at:
  1568 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  c               1    wreg     unsigned char 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  c               1    0[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1582 ;;      Params:         0       0       0       0
  1583 ;;      Locals:         0       0       0       0
  1584 ;;      Temps:          0       0       0       0
  1585 ;;      Totals:         0       0       0       0
  1586 ;;Total ram usage:        0 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    7
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_printf
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text2
  1597  00296C                     __ptext2:
  1598                           	opt stack 0
  1599  00296C                     _putch:
  1600                           	opt stack 22
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;incstack = 0
  1604  00296C  0012               	return		;funcret
  1605  00296E                     __end_of_putch:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1h	equ	0xFE2
  1615                           fsr1l	equ	0xFE1
  1616                           status	equ	0xFD8
  1617                           
  1618 ;; *************** function _ES_Run *****************
  1619 ;; Defined at:
  1620 ;;		line 277 in file "ES_Framework.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  HighestPrior    1  107[BANK0 ] unsigned char 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      enum E15499
  1627 ;; Registers used:
  1628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1634 ;;      Params:         0       0       0       0
  1635 ;;      Locals:         0       1       0       0
  1636 ;;      Temps:          0       4       0       0
  1637 ;;      Totals:         0       5       0       0
  1638 ;;Total ram usage:        5 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:   15
  1641 ;; This function calls:
  1642 ;;		_ES_CheckUserEvents
  1643 ;;		_ES_DeQueue
  1644 ;;		_ES_GetMSBitSet
  1645 ;;		_RunCanRX_Service
  1646 ;;		_RunPatternControlService
  1647 ;;		_RunSPI32ControlService
  1648 ;;		__HW_Process_Pending_Ints
  1649 ;; This function is called by:
  1650 ;;		_main
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text3
  1655  001786                     __ptext3:
  1656                           	opt stack 0
  1657  001786                     _ES_Run:
  1658                           	opt stack 15
  1659                           
  1660                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1661                           
  1662                           ;incstack = 0
  1663                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1664                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1665                           ;ES_Framework.c: 282: while(1){
  1666  001786  D06B               	goto	l3686
  1667  001788                     l3674:
  1668                           
  1669                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1670  001788  C0DA  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1671  00178C  C0DB  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1672  001790  EC5C  F00F         	call	_ES_GetMSBitSet	;wreg free
  1673  001794  0100               	movlb	0	; () banked
  1674  001796  6FCB               	movwf	ES_Run@HighestPrior& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1678  001798  0100               	movlb	0	; () banked
  1679  00179A  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1680  00179C  0D03               	mullw	3
  1681  00179E  0E5C               	movlw	low _EventQueues
  1682  0017A0  24F3               	addwf	prodl,w,c
  1683  0017A2  6EF6               	movwf	tblptrl,c
  1684  0017A4  0E03               	movlw	high _EventQueues
  1685  0017A6  20F4               	addwfc	prodh,w,c
  1686  0017A8  6EF7               	movwf	tblptrh,c
  1687  0017AA                     	if	0	;There are less than 3 active tblptr bytes
  1688  0017AA                     	endif
  1689  0017AA  0009               	tblrd		*+
  1690  0017AC  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1691  0017B0  000A               	tblrd		*-
  1692  0017B2  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1693  0017B6  0EF6               	movlw	low ES_Run@ThisEvent
  1694  0017B8  0100               	movlb	0	; () banked
  1695  0017BA  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1696  0017BC  0E00               	movlw	high ES_Run@ThisEvent
  1697  0017BE  0100               	movlb	0	; () banked
  1698  0017C0  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1699  0017C2  EC8E  F009         	call	_ES_DeQueue	;wreg free
  1700  0017C6  0900               	iorlw	0
  1701  0017C8  A4D8               	btfss	status,2,c
  1702  0017CA  D01F               	goto	l3680
  1703                           
  1704                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1705  0017CC  0100               	movlb	0	; () banked
  1706  0017CE  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1707  0017D0  0D02               	mullw	2
  1708  0017D2  0E01               	movlw	low _BitNum2SetMask
  1709  0017D4  24F3               	addwf	prodl,w,c
  1710  0017D6  6EF6               	movwf	tblptrl,c
  1711  0017D8  0E03               	movlw	high _BitNum2SetMask
  1712  0017DA  20F4               	addwfc	prodh,w,c
  1713  0017DC  6EF7               	movwf	tblptrh,c
  1714  0017DE                     	if	0	;There are less than 3 active tblptr bytes
  1715  0017DE                     	endif
  1716  0017DE  0009               	tblrd		*+
  1717  0017E0  CFF5 F0C7          	movff	tablat,??_ES_Run
  1718  0017E4  0009               	tblrd		*+
  1719  0017E6  CFF5 F0C8          	movff	tablat,??_ES_Run+1
  1720  0017EA  0100               	movlb	0	; () banked
  1721  0017EC  1DC7               	comf	??_ES_Run& (0+255),w,b
  1722  0017EE  0100               	movlb	0	; () banked
  1723  0017F0  6FC9               	movwf	(??_ES_Run+2)& (0+255),b
  1724  0017F2  0100               	movlb	0	; () banked
  1725  0017F4  1DC8               	comf	(??_ES_Run+1)& (0+255),w,b
  1726  0017F6  0100               	movlb	0	; () banked
  1727  0017F8  6FCA               	movwf	(??_ES_Run+3)& (0+255),b
  1728  0017FA  0100               	movlb	0	; () banked
  1729  0017FC  51C9               	movf	(??_ES_Run+2)& (0+255),w,b
  1730  0017FE  0100               	movlb	0	; () banked
  1731  001800  17DA               	andwf	_Ready& (0+255),f,b
  1732  001802  0100               	movlb	0	; () banked
  1733  001804  51CA               	movf	(??_ES_Run+3)& (0+255),w,b
  1734  001806  0100               	movlb	0	; () banked
  1735  001808  17DB               	andwf	(_Ready+1)& (0+255),f,b
  1736  00180A                     l3680:
  1737                           
  1738                           ;ES_Framework.c: 291: }
  1739                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1740  00180A  C0F6  F0BA         	movff	ES_Run@ThisEvent,RunCanRX_Service@ThisEvent
  1741  00180E  C0F7  F0BB         	movff	ES_Run@ThisEvent+1,RunCanRX_Service@ThisEvent+1
  1742  001812  C0F8  F0BC         	movff	ES_Run@ThisEvent+2,RunCanRX_Service@ThisEvent+2
  1743  001816  0100               	movlb	0	; () banked
  1744  001818  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1745  00181A  0D04               	mullw	4
  1746  00181C  0E02               	movlw	2
  1747  00181E  26F3               	addwf	prodl,f,c
  1748  001820  0E00               	movlw	0
  1749  001822  22F4               	addwfc	prodh,f,c
  1750  001824  0E50               	movlw	low _ServDescList
  1751  001826  24F3               	addwf	prodl,w,c
  1752  001828  6EF6               	movwf	tblptrl,c
  1753  00182A  0E03               	movlw	high _ServDescList
  1754  00182C  20F4               	addwfc	prodh,w,c
  1755  00182E  6EF7               	movwf	tblptrh,c
  1756  001830                     	if	0	;There are less than 3 active tblptr bytes
  1757  001830                     	endif
  1758  001830  D801               	call	u2268
  1759  001832  D00C               	goto	u2269
  1760  001834                     u2268:
  1761  001834  0005               	push	
  1762  001836  6EFA               	movwf	pclath,c
  1763  001838  0009               	tblrd		*+
  1764  00183A  50F5               	movf	tablat,w,c
  1765  00183C  6EFD               	movwf	tosl,c
  1766  00183E  0009               	tblrd		*+
  1767  001840  50F5               	movf	tablat,w,c
  1768  001842  6EFE               	movwf	tosh,c
  1769  001844  50F8               	movf	tblptru,w,c
  1770  001846  6EFF               	movwf	tosu,c
  1771  001848  50FA               	movf	pclath,w,c
  1772  00184A  0012               	return		;indir
  1773  00184C                     u2269:
  1774  00184C  0EBA               	movlw	low ?_RunCanRX_Service
  1775  00184E  6ED9               	movwf	fsr2l,c
  1776  001850  0E00               	movlw	high ?_RunCanRX_Service
  1777  001852  6EDA               	movwf	fsr2h,c
  1778  001854  50DF               	movf	indf2,w,c
  1779  001856  B4D8               	btfsc	status,2,c
  1780  001858  D002               	goto	l3686
  1781                           
  1782                           ;ES_Framework.c: 293: return FailedRun;
  1783  00185A  0E02               	movlw	2
  1784  00185C  0012               	return	
  1785  00185E                     l3686:
  1786  00185E  EC5E  F014         	call	__HW_Process_Pending_Ints	;wreg free
  1787  001862  0900               	iorlw	0
  1788  001864  B4D8               	btfsc	status,2,c
  1789  001866  D006               	goto	l3690
  1790  001868  0100               	movlb	0	; () banked
  1791  00186A  51DA               	movf	_Ready& (0+255),w,b
  1792  00186C  0100               	movlb	0	; () banked
  1793  00186E  11DB               	iorwf	(_Ready+1)& (0+255),w,b
  1794  001870  A4D8               	btfss	status,2,c
  1795  001872  D78A               	goto	l3674
  1796  001874                     l3690:
  1797                           
  1798                           ;ES_Framework.c: 294: }
  1799                           ;ES_Framework.c: 295: }
  1800                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1801  001874  ECB8  F012         	call	_ES_CheckUserEvents	;wreg free
  1802  001878  D7F2               	goto	l3686
  1803  00187A                     __end_of_ES_Run:
  1804                           	opt stack 0
  1805                           tosu	equ	0xFFF
  1806                           tosh	equ	0xFFE
  1807                           tosl	equ	0xFFD
  1808                           pclath	equ	0xFFA
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           indf2	equ	0xFDF
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function __HW_Process_Pending_Ints *****************
  1826 ;; Defined at:
  1827 ;;		line 225 in file "ES_Port.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      unsigned char 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1841 ;;      Params:         0       0       0       0
  1842 ;;      Locals:         0       0       0       0
  1843 ;;      Temps:          0       0       0       0
  1844 ;;      Totals:         0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:   12
  1848 ;; This function calls:
  1849 ;;		_ES_Timer_Tick_Resp
  1850 ;; This function is called by:
  1851 ;;		_ES_Run
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text4
  1856  0028BC                     __ptext4:
  1857                           	opt stack 0
  1858  0028BC                     __HW_Process_Pending_Ints:
  1859                           	opt stack 17
  1860                           
  1861                           ;ES_Port.c: 227: while (TickCount > 0)
  1862                           
  1863                           ;incstack = 0
  1864  0028BC  D004               	goto	l3426
  1865  0028BE                     l3422:
  1866                           
  1867                           ;ES_Port.c: 228: {
  1868                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1869  0028BE  ECB5  F00A         	call	_ES_Timer_Tick_Resp	;wreg free
  1870                           
  1871                           ;ES_Port.c: 231: TickCount--;
  1872  0028C2  0100               	movlb	0	; () banked
  1873  0028C4  07E9               	decf	_TickCount& (0+255),f,b	;volatile
  1874  0028C6                     l3426:
  1875  0028C6  0100               	movlb	0	; () banked
  1876  0028C8  51E9               	movf	_TickCount& (0+255),w,b	;volatile
  1877  0028CA  A4D8               	btfss	status,2,c
  1878  0028CC  D7F8               	goto	l3422
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;ES_Port.c: 232: }
  1882                           ;ES_Port.c: 234: return 1;
  1883                           
  1884                           ; BSR set to: 0
  1885  0028CE  0E01               	movlw	1
  1886  0028D0  0012               	return	
  1887  0028D2                     __end_of__HW_Process_Pending_Ints:
  1888                           	opt stack 0
  1889                           tosu	equ	0xFFF
  1890                           tosh	equ	0xFFE
  1891                           tosl	equ	0xFFD
  1892                           pclath	equ	0xFFA
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           prodh	equ	0xFF4
  1898                           prodl	equ	0xFF3
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1h	equ	0xFE2
  1903                           fsr1l	equ	0xFE1
  1904                           indf2	equ	0xFDF
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _ES_Timer_Tick_Resp *****************
  1910 ;; Defined at:
  1911 ;;		line 284 in file "ES_Timers.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1925 ;;      Params:         0       0       0       0
  1926 ;;      Locals:         0       0       0       0
  1927 ;;      Temps:          0       4       0       0
  1928 ;;      Totals:         0       4       0       0
  1929 ;;Total ram usage:        4 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:   11
  1932 ;; This function calls:
  1933 ;;		Absolute function
  1934 ;;		_ES_GetMSBitSet
  1935 ;;		_PostPatternControlService
  1936 ;;		_PostSPI32ControlService
  1937 ;; This function is called by:
  1938 ;;		__HW_Process_Pending_Ints
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text5
  1943  00156A                     __ptext5:
  1944                           	opt stack 0
  1945  00156A                     _ES_Timer_Tick_Resp:
  1946                           	opt stack 17
  1947                           
  1948                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1949                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1950                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1951                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;incstack = 0
  1955  00156A  0100               	movlb	0	; () banked
  1956  00156C  51DC               	movf	_TMR_ActiveFlags& (0+255),w,b
  1957  00156E  0100               	movlb	0	; () banked
  1958  001570  11DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1959  001572  B4D8               	btfsc	status,2,c
  1960  001574  0012               	return	
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;ES_Timers.c: 291: {
  1964                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1965  001576  C0DC  F0D4         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1966  00157A  C0DD  F0D5         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1967  00157E                     l3230:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1971  00157E  C0D4  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1972  001582  C0D5  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1973  001586  EC5C  F00F         	call	_ES_GetMSBitSet	;wreg free
  1974  00158A  0100               	movlb	0	; () banked
  1975  00158C  6FDF               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1979  00158E  0100               	movlb	0	; () banked
  1980  001590  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1981  001592  0D02               	mullw	2
  1982  001594  0E00               	movlw	low _TMR_TimerArray
  1983  001596  24F3               	addwf	prodl,w,c
  1984  001598  6ED9               	movwf	fsr2l,c
  1985  00159A  0E01               	movlw	high _TMR_TimerArray
  1986  00159C  20F4               	addwfc	prodh,w,c
  1987  00159E  6EDA               	movwf	fsr2h,c
  1988  0015A0  06DE               	decf	postinc2,f,c
  1989  0015A2  0E00               	movlw	0
  1990  0015A4  5ADD               	subwfb	postdec2,f,c
  1991  0015A6  50DE               	movf	postinc2,w,c
  1992  0015A8  10DE               	iorwf	postinc2,w,c
  1993  0015AA  A4D8               	btfss	status,2,c
  1994  0015AC  D043               	goto	l3242
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;ES_Timers.c: 299: {
  1998                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1999  0015AE  0E03               	movlw	3
  2000  0015B0  0100               	movlb	0	; () banked
  2001  0015B2  6FD1               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2005  0015B4  C0DF  F0D2         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2006  0015B8  0100               	movlb	0	; () banked
  2007  0015BA  6BD3               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2011  0015BC  C0D1  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2012  0015C0  C0D2  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2013  0015C4  C0D3  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2014  0015C8  0100               	movlb	0	; () banked
  2015  0015CA  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2016  0015CC  0D02               	mullw	2
  2017  0015CE  0E21               	movlw	low _Timer2PostFunc
  2018  0015D0  24F3               	addwf	prodl,w,c
  2019  0015D2  6EF6               	movwf	tblptrl,c
  2020  0015D4  0E03               	movlw	high _Timer2PostFunc
  2021  0015D6  20F4               	addwfc	prodh,w,c
  2022  0015D8  6EF7               	movwf	tblptrh,c
  2023  0015DA                     	if	0	;There are less than 3 active tblptr bytes
  2024  0015DA                     	endif
  2025  0015DA  D801               	call	u1858
  2026  0015DC  D00C               	goto	l3240
  2027  0015DE                     u1858:
  2028  0015DE  0005               	push	
  2029  0015E0  6EFA               	movwf	pclath,c
  2030  0015E2  0009               	tblrd		*+
  2031  0015E4  50F5               	movf	tablat,w,c
  2032  0015E6  6EFD               	movwf	tosl,c
  2033  0015E8  0009               	tblrd		*+
  2034  0015EA  50F5               	movf	tablat,w,c
  2035  0015EC  6EFE               	movwf	tosh,c
  2036  0015EE  50F8               	movf	tblptru,w,c
  2037  0015F0  6EFF               	movwf	tosu,c
  2038  0015F2  50FA               	movf	pclath,w,c
  2039  0015F4  0012               	return		;indir
  2040  0015F6                     l3240:
  2041                           
  2042                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2043  0015F6  0100               	movlb	0	; () banked
  2044  0015F8  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2045  0015FA  0D02               	mullw	2
  2046  0015FC  0E01               	movlw	low _BitNum2SetMask
  2047  0015FE  24F3               	addwf	prodl,w,c
  2048  001600  6EF6               	movwf	tblptrl,c
  2049  001602  0E03               	movlw	high _BitNum2SetMask
  2050  001604  20F4               	addwfc	prodh,w,c
  2051  001606  6EF7               	movwf	tblptrh,c
  2052  001608                     	if	0	;There are less than 3 active tblptr bytes
  2053  001608                     	endif
  2054  001608  0009               	tblrd		*+
  2055  00160A  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2056  00160E  0009               	tblrd		*+
  2057  001610  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2058  001614  0100               	movlb	0	; () banked
  2059  001616  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2060  001618  0100               	movlb	0	; () banked
  2061  00161A  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2062  00161C  0100               	movlb	0	; () banked
  2063  00161E  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2064  001620  0100               	movlb	0	; () banked
  2065  001622  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2066  001624  0100               	movlb	0	; () banked
  2067  001626  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2068  001628  0100               	movlb	0	; () banked
  2069  00162A  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2070  00162C  0100               	movlb	0	; () banked
  2071  00162E  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2072  001630  0100               	movlb	0	; () banked
  2073  001632  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2074  001634                     l3242:
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;ES_Timers.c: 306: }
  2078                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2079  001634  0100               	movlb	0	; () banked
  2080  001636  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2081  001638  0D02               	mullw	2
  2082  00163A  0E01               	movlw	low _BitNum2SetMask
  2083  00163C  24F3               	addwf	prodl,w,c
  2084  00163E  6EF6               	movwf	tblptrl,c
  2085  001640  0E03               	movlw	high _BitNum2SetMask
  2086  001642  20F4               	addwfc	prodh,w,c
  2087  001644  6EF7               	movwf	tblptrh,c
  2088  001646                     	if	0	;There are less than 3 active tblptr bytes
  2089  001646                     	endif
  2090  001646  0009               	tblrd		*+
  2091  001648  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2092  00164C  0009               	tblrd		*+
  2093  00164E  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2094  001652  0100               	movlb	0	; () banked
  2095  001654  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2096  001656  0100               	movlb	0	; () banked
  2097  001658  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2098  00165A  0100               	movlb	0	; () banked
  2099  00165C  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2100  00165E  0100               	movlb	0	; () banked
  2101  001660  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2102  001662  0100               	movlb	0	; () banked
  2103  001664  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2104  001666  0100               	movlb	0	; () banked
  2105  001668  17D4               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2106  00166A  0100               	movlb	0	; () banked
  2107  00166C  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2108  00166E  0100               	movlb	0	; () banked
  2109  001670  17D5               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2113  001672  0100               	movlb	0	; () banked
  2114  001674  51D4               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2115  001676  0100               	movlb	0	; () banked
  2116  001678  11D5               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2117  00167A  B4D8               	btfsc	status,2,c
  2118  00167C  0012               	return	
  2119  00167E  D77F               	goto	l3230
  2120  001680                     __end_of_ES_Timer_Tick_Resp:
  2121                           	opt stack 0
  2122                           tosu	equ	0xFFF
  2123                           tosh	equ	0xFFE
  2124                           tosl	equ	0xFFD
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           postdec1	equ	0xFE5
  2135                           fsr1h	equ	0xFE2
  2136                           fsr1l	equ	0xFE1
  2137                           indf2	equ	0xFDF
  2138                           postinc2	equ	0xFDE
  2139                           postdec2	equ	0xFDD
  2140                           fsr2h	equ	0xFDA
  2141                           fsr2l	equ	0xFD9
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _ES_GetMSBitSet *****************
  2145 ;; Defined at:
  2146 ;;		line 79 in file "ES_LookupTables.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  LoopCntr        1    9[BANK0 ] char 
  2151 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2152 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      unsigned char 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2162 ;;      Params:         0       2       0       0
  2163 ;;      Locals:         0       3       0       0
  2164 ;;      Temps:          0       5       0       0
  2165 ;;      Totals:         0      10       0       0
  2166 ;;Total ram usage:       10 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    7
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_ES_Run
  2173 ;;		_ES_Timer_Tick_Resp
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text6
  2178  001EB8                     __ptext6:
  2179                           	opt stack 0
  2180  001EB8                     _ES_GetMSBitSet:
  2181                           	opt stack 20
  2182                           
  2183                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2184                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2185                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;incstack = 0
  2189  001EB8  0E80               	movlw	128
  2190  001EBA  0100               	movlb	0	; () banked
  2191  001EBC  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2192                           
  2193                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2194  001EBE  0E03               	movlw	3
  2195  001EC0  0100               	movlb	0	; () banked
  2196  001EC2  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2197  001EC4                     l3072:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2201  001EC4  0100               	movlb	0	; () banked
  2202  001EC6  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2203  001EC8  D046               	goto	l3086
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2207                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2208                           ;ES_LookupTables.c: 91: 0x0F);
  2209                           
  2210                           ; BSR set to: 0
  2211                           
  2212                           ; BSR set to: 0
  2213  001ECA  0100               	movlb	0	; () banked
  2214  001ECC  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2215  001ECE  0D04               	mullw	4
  2216  001ED0  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2217  001ED4  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2218  001ED8  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2219  001EDC  0100               	movlb	0	; () banked
  2220  001EDE  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2221  001EE0  D004               	goto	u1674
  2222  001EE2                     u1675:
  2223  001EE2  0100               	movlb	0	; () banked
  2224  001EE4  90D8               	bcf	status,0,c
  2225  001EE6  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2226  001EE8  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2227  001EEA                     u1674:
  2228  001EEA  0100               	movlb	0	; () banked
  2229  001EEC  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2230  001EEE  D7F9               	goto	u1675
  2231  001EF0  0100               	movlb	0	; () banked
  2232  001EF2  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2233  001EF4  0B0F               	andlw	15
  2234  001EF6  0100               	movlb	0	; () banked
  2235  001EF8  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2239  001EFA  0100               	movlb	0	; () banked
  2240  001EFC  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2241  001EFE  0100               	movlb	0	; () banked
  2242  001F00  B4D8               	btfsc	status,2,c
  2243  001F02  D026               	goto	l3082
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2247                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2248  001F04  0EFF               	movlw	255
  2249  001F06  0100               	movlb	0	; () banked
  2250  001F08  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2251  001F0A  0EFF               	movlw	255
  2252  001F0C  0100               	movlb	0	; () banked
  2253  001F0E  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2254  001F10  0100               	movlb	0	; () banked
  2255  001F12  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2256  001F14  0100               	movlb	0	; () banked
  2257  001F16  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2258  001F18  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2259  001F1A  0100               	movlb	0	; () banked
  2260  001F1C  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2261  001F1E  0100               	movlb	0	; () banked
  2262  001F20  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2263  001F22  0100               	movlb	0	; () banked
  2264  001F24  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2265  001F26  0100               	movlb	0	; () banked
  2266  001F28  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2267  001F2A  0E41               	movlw	low _Nybble2MSBitNum
  2268  001F2C  0100               	movlb	0	; () banked
  2269  001F2E  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2270  001F30  6EF6               	movwf	tblptrl,c
  2271  001F32  0E03               	movlw	high _Nybble2MSBitNum
  2272  001F34  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2273  001F36  6EF7               	movwf	tblptrh,c
  2274  001F38                     	if	0	;There are less than 3 active tblptr bytes
  2275  001F38                     	endif
  2276  001F38  0008               	tblrd		*
  2277  001F3A  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2278  001F3E  0100               	movlb	0	; () banked
  2279  001F40  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2280  001F42  0D04               	mullw	4
  2281  001F44  50F3               	movf	prodl,w,c
  2282  001F46  0100               	movlb	0	; () banked
  2283  001F48  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2284  001F4A  0100               	movlb	0	; () banked
  2285  001F4C  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2286                           
  2287                           ;ES_LookupTables.c: 96: break;
  2288  001F4E  D003               	goto	l3086
  2289  001F50                     l3082:
  2290                           
  2291                           ; BSR set to: 0
  2292  001F50  0100               	movlb	0	; () banked
  2293  001F52  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2294  001F54  D7B7               	goto	l3072
  2295  001F56                     l3086:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;ES_LookupTables.c: 97: }
  2299                           ;ES_LookupTables.c: 98: }
  2300                           ;ES_LookupTables.c: 99: return ReturnVal;
  2301  001F56  0100               	movlb	0	; () banked
  2302  001F58  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2303  001F5A  0012               	return	
  2304  001F5C                     __end_of_ES_GetMSBitSet:
  2305                           	opt stack 0
  2306                           tosu	equ	0xFFF
  2307                           tosh	equ	0xFFE
  2308                           tosl	equ	0xFFD
  2309                           pclath	equ	0xFFA
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1h	equ	0xFE2
  2320                           fsr1l	equ	0xFE1
  2321                           indf2	equ	0xFDF
  2322                           postinc2	equ	0xFDE
  2323                           postdec2	equ	0xFDD
  2324                           fsr2h	equ	0xFDA
  2325                           fsr2l	equ	0xFD9
  2326                           status	equ	0xFD8
  2327                           
  2328 ;; *************** function _RunCanRX_Service *****************
  2329 ;; Defined at:
  2330 ;;		line 137 in file "CanRX_Service.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;  PatternEvent    3   96[BANK0 ] struct ES_Event_t
  2335 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  3   90[BANK0 ] struct ES_Event_t
  2338 ;; Registers used:
  2339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2345 ;;      Params:         0       3       0       0
  2346 ;;      Locals:         0       6       0       0
  2347 ;;      Temps:          0       0       0       0
  2348 ;;      Totals:         0       9       0       0
  2349 ;;Total ram usage:        9 bytes
  2350 ;; Hardware stack levels used:    1
  2351 ;; Hardware stack levels required when called:   11
  2352 ;; This function calls:
  2353 ;;		_InitCanHardware
  2354 ;;		_InitPins
  2355 ;;		_PostPatternControlService
  2356 ;;		_SetPattern
  2357 ;; This function is called by:
  2358 ;;		_ES_Run
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text7
  2363  001C9C                     __ptext7:
  2364                           	opt stack 0
  2365  001C9C                     _RunCanRX_Service:
  2366                           	opt stack 18
  2367                           
  2368                           ;CanRX_Service.c: 139: ES_Event ReturnEvent;
  2369                           ;CanRX_Service.c: 141: switch(ThisEvent.EventType) {
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;incstack = 0
  2373  001C9C  D041               	goto	l3598
  2374  001C9E                     l3570:
  2375                           
  2376                           ;CanRX_Service.c: 143: InitPins();
  2377  001C9E  EC51  F014         	call	_InitPins	;wreg free
  2378                           
  2379                           ;CanRX_Service.c: 144: InitCanHardware();
  2380  001CA2  EC47  F010         	call	_InitCanHardware	;wreg free
  2381                           
  2382                           ;CanRX_Service.c: 145: break;
  2383  001CA6  D04D               	goto	l3600
  2384  001CA8                     l3572:
  2385                           
  2386                           ;CanRX_Service.c: 148: SetPattern(1);
  2387  001CA8  0E01               	movlw	1
  2388  001CAA  EC9E  F014         	call	_SetPattern
  2389                           
  2390                           ;CanRX_Service.c: 149: ES_Event PatternEvent;
  2391                           ;CanRX_Service.c: 150: PatternEvent.EventType = PATTERN_START;
  2392  001CAE  0E05               	movlw	5
  2393  001CB0  0100               	movlb	0	; () banked
  2394  001CB2  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;CanRX_Service.c: 151: PostPatternControlService(PatternEvent);
  2398  001CB4  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2399  001CB8  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2400  001CBC  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2401  001CC0  EC69  F014         	call	_PostPatternControlService	;wreg free
  2402                           
  2403                           ;CanRX_Service.c: 152: break;
  2404  001CC4  D03E               	goto	l3600
  2405  001CC6                     l3578:
  2406                           
  2407                           ;CanRX_Service.c: 155: SetPattern(2);
  2408  001CC6  0E02               	movlw	2
  2409  001CC8  EC9E  F014         	call	_SetPattern
  2410                           
  2411                           ;CanRX_Service.c: 156: ES_Event PatternEvent;
  2412                           ;CanRX_Service.c: 157: PatternEvent.EventType = PATTERN_START;
  2413  001CCC  0E05               	movlw	5
  2414  001CCE  0100               	movlb	0	; () banked
  2415  001CD0  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;CanRX_Service.c: 158: PostPatternControlService(PatternEvent);
  2419  001CD2  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2420  001CD6  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2421  001CDA  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2422  001CDE  EC69  F014         	call	_PostPatternControlService	;wreg free
  2423                           
  2424                           ;CanRX_Service.c: 159: break;
  2425  001CE2  D02F               	goto	l3600
  2426  001CE4                     l3584:
  2427                           
  2428                           ;CanRX_Service.c: 162: SetPattern(3);
  2429  001CE4  0E03               	movlw	3
  2430  001CE6  EC9E  F014         	call	_SetPattern
  2431                           
  2432                           ;CanRX_Service.c: 163: ES_Event PatternEvent;
  2433                           ;CanRX_Service.c: 164: PatternEvent.EventType = PATTERN_START;
  2434  001CEA  0E05               	movlw	5
  2435  001CEC  0100               	movlb	0	; () banked
  2436  001CEE  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;CanRX_Service.c: 165: PostPatternControlService(PatternEvent);
  2440  001CF0  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2441  001CF4  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2442  001CF8  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2443  001CFC  EC69  F014         	call	_PostPatternControlService	;wreg free
  2444                           
  2445                           ;CanRX_Service.c: 166: break;
  2446  001D00  D020               	goto	l3600
  2447  001D02                     l3590:
  2448                           
  2449                           ;CanRX_Service.c: 169: SetPattern(4);
  2450  001D02  0E04               	movlw	4
  2451  001D04  EC9E  F014         	call	_SetPattern
  2452                           
  2453                           ;CanRX_Service.c: 170: ES_Event PatternEvent;
  2454                           ;CanRX_Service.c: 171: PatternEvent.EventType = PATTERN_START;
  2455  001D08  0E05               	movlw	5
  2456  001D0A  0100               	movlb	0	; () banked
  2457  001D0C  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;CanRX_Service.c: 172: PostPatternControlService(PatternEvent);
  2461  001D0E  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2462  001D12  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2463  001D16  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2464  001D1A  EC69  F014         	call	_PostPatternControlService	;wreg free
  2465                           
  2466                           ;CanRX_Service.c: 174: }
  2467                           
  2468                           ;CanRX_Service.c: 173: break;
  2469  001D1E  D011               	goto	l3600
  2470  001D20                     l3598:
  2471  001D20  0100               	movlb	0	; () banked
  2472  001D22  51BA               	movf	RunCanRX_Service@ThisEvent& (0+255),w,b
  2473                           
  2474                           ; Switch size 1, requested type "space"
  2475                           ; Number of cases is 5, Range of values is 2 to 13
  2476                           ; switch strategies available:
  2477                           ; Name         Instructions Cycles
  2478                           ; simple_byte           16     9 (average)
  2479                           ;	Chosen strategy is simple_byte
  2480  001D24  0A02               	xorlw	2	; case 2
  2481  001D26  B4D8               	btfsc	status,2,c
  2482  001D28  D7BA               	goto	l3570
  2483  001D2A  0A08               	xorlw	8	; case 10
  2484  001D2C  B4D8               	btfsc	status,2,c
  2485  001D2E  D7BC               	goto	l3572
  2486  001D30  0A01               	xorlw	1	; case 11
  2487  001D32  B4D8               	btfsc	status,2,c
  2488  001D34  D7D7               	goto	l3584
  2489  001D36  0A07               	xorlw	7	; case 12
  2490  001D38  B4D8               	btfsc	status,2,c
  2491  001D3A  D7C5               	goto	l3578
  2492  001D3C  0A01               	xorlw	1	; case 13
  2493  001D3E  B4D8               	btfsc	status,2,c
  2494  001D40  D7E0               	goto	l3590
  2495  001D42                     l3600:
  2496                           
  2497                           ;CanRX_Service.c: 175: ReturnEvent.EventType = ES_NO_EVENT;
  2498  001D42  0E00               	movlw	0
  2499  001D44  0100               	movlb	0	; () banked
  2500  001D46  6FBD               	movwf	RunCanRX_Service@ReturnEvent& (0+255),b
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;CanRX_Service.c: 176: return ReturnEvent;
  2504  001D48  C0BD  F0BA         	movff	RunCanRX_Service@ReturnEvent,?_RunCanRX_Service
  2505  001D4C  C0BE  F0BB         	movff	RunCanRX_Service@ReturnEvent+1,?_RunCanRX_Service+1
  2506  001D50  C0BF  F0BC         	movff	RunCanRX_Service@ReturnEvent+2,?_RunCanRX_Service+2
  2507  001D54  0012               	return	
  2508  001D56                     __end_of_RunCanRX_Service:
  2509                           	opt stack 0
  2510                           tosu	equ	0xFFF
  2511                           tosh	equ	0xFFE
  2512                           tosl	equ	0xFFD
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           postinc0	equ	0xFEE
  2521                           wreg	equ	0xFE8
  2522                           postdec1	equ	0xFE5
  2523                           fsr1h	equ	0xFE2
  2524                           fsr1l	equ	0xFE1
  2525                           indf2	equ	0xFDF
  2526                           postinc2	equ	0xFDE
  2527                           postdec2	equ	0xFDD
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _RunPatternControlService *****************
  2533 ;; Defined at:
  2534 ;;		line 157 in file "Pattern_ControlService.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  testEvent       3   96[BANK0 ] struct ES_Event_t
  2539 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  3   90[BANK0 ] struct ES_Event_t
  2542 ;; Registers used:
  2543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2549 ;;      Params:         0       3       0       0
  2550 ;;      Locals:         0       6       0       0
  2551 ;;      Temps:          0       0       0       0
  2552 ;;      Totals:         0       9       0       0
  2553 ;;Total ram usage:        9 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:   14
  2556 ;; This function calls:
  2557 ;;		_PausePattern
  2558 ;;		_PostPatternControlService
  2559 ;;		_ShowPattern
  2560 ;;		_StopPattern
  2561 ;; This function is called by:
  2562 ;;		_ES_Run
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text8
  2567  001B16                     __ptext8:
  2568                           	opt stack 0
  2569  001B16                     _RunPatternControlService:
  2570                           	opt stack 15
  2571                           
  2572                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2573                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;incstack = 0
  2577  001B16  0E00               	movlw	0
  2578  001B18  0100               	movlb	0	; () banked
  2579  001B1A  6FBD               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2580                           
  2581                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2582  001B1C  D04B               	goto	l3500
  2583  001B1E                     l3456:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2587  001B1E  0E02               	movlw	2
  2588  001B20  0100               	movlb	0	; () banked
  2589  001B22  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2590  001B24  A4D8               	btfss	status,2,c
  2591  001B26  D054               	goto	l352
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;Pattern_ControlService.c: 169: StopPattern();
  2595  001B28  ECDD  F013         	call	_StopPattern	;wreg free
  2596                           
  2597                           ;Pattern_ControlService.c: 171: CurrentState = Pattern_Off;
  2598  001B2C  0E01               	movlw	1
  2599  001B2E  0100               	movlb	0	; () banked
  2600  001B30  6FE3               	movwf	_CurrentState& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;Pattern_ControlService.c: 174: ES_Event testEvent;
  2604                           ;Pattern_ControlService.c: 175: testEvent.EventType = PATTERN_START;
  2605  001B32  0E05               	movlw	5
  2606  001B34  0100               	movlb	0	; () banked
  2607  001B36  6FC0               	movwf	RunPatternControlService@testEvent& (0+255),b
  2608                           
  2609                           ;Pattern_ControlService.c: 176: PostPatternControlService(testEvent);
  2610  001B38  C0C0  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2611  001B3C  C0C1  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2612  001B40  C0C2  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2613  001B44  EC69  F014         	call	_PostPatternControlService	;wreg free
  2614                           
  2615                           ;Pattern_ControlService.c: 178: }
  2616                           ;Pattern_ControlService.c: 179: break;
  2617  001B48  D043               	goto	l352
  2618  001B4A                     l3464:
  2619                           
  2620                           ;Pattern_ControlService.c: 183: if(ThisEvent.EventType == PATTERN_START){
  2621  001B4A  0E05               	movlw	5
  2622  001B4C  0100               	movlb	0	; () banked
  2623  001B4E  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2624  001B50  A4D8               	btfss	status,2,c
  2625  001B52  D03E               	goto	l352
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;Pattern_ControlService.c: 185: ShowPattern();
  2629  001B54  ECF1  F013         	call	_ShowPattern	;wreg free
  2630  001B58                     l3468:
  2631                           
  2632                           ;Pattern_ControlService.c: 187: CurrentState = Pattern_Running;
  2633  001B58  0E02               	movlw	2
  2634  001B5A  D029               	goto	L4
  2635  001B5C                     l3470:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;Pattern_ControlService.c: 193: if(ThisEvent.EventType == ES_TIMEOUT){
  2639  001B5C  0E03               	movlw	3
  2640  001B5E  0100               	movlb	0	; () banked
  2641  001B60  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2642  001B62  A4D8               	btfss	status,2,c
  2643  001B64  D003               	goto	l3474
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;Pattern_ControlService.c: 195: ShowPattern();
  2647  001B66  ECF1  F013         	call	_ShowPattern	;wreg free
  2648                           
  2649                           ;Pattern_ControlService.c: 196: }
  2650  001B6A  D032               	goto	l352
  2651  001B6C                     l3474:
  2652                           
  2653                           ;Pattern_ControlService.c: 198: else if(ThisEvent.EventType == PATTERN_END){
  2654  001B6C  0E06               	movlw	6
  2655  001B6E  0100               	movlb	0	; () banked
  2656  001B70  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2657  001B72  A4D8               	btfss	status,2,c
  2658  001B74  D003               	goto	l3480
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;Pattern_ControlService.c: 200: StopPattern();
  2662  001B76  ECDD  F013         	call	_StopPattern	;wreg free
  2663  001B7A  D018               	goto	L21
  2664  001B7C                     l3480:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;Pattern_ControlService.c: 205: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2668  001B7C  0E07               	movlw	7
  2669  001B7E  0100               	movlb	0	; () banked
  2670  001B80  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2671  001B82  A4D8               	btfss	status,2,c
  2672  001B84  D025               	goto	l352
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;Pattern_ControlService.c: 207: PausePattern();
  2676  001B86  ECA7  F014         	call	_PausePattern	;wreg free
  2677                           
  2678                           ;Pattern_ControlService.c: 209: CurrentState = Pattern_Paused;
  2679  001B8A  0E03               	movlw	3
  2680  001B8C  D010               	goto	L4
  2681  001B8E                     l3486:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;Pattern_ControlService.c: 215: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2685  001B8E  0E08               	movlw	8
  2686  001B90  0100               	movlb	0	; () banked
  2687  001B92  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2688  001B94  A4D8               	btfss	status,2,c
  2689  001B96  D003               	goto	l3492
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;Pattern_ControlService.c: 217: ShowPattern();
  2693  001B98  ECF1  F013         	call	_ShowPattern	;wreg free
  2694  001B9C  D7DD               	goto	l3468
  2695  001B9E                     l3492:
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;Pattern_ControlService.c: 222: else if(ThisEvent.EventType == PATTERN_END){
  2699  001B9E  0E06               	movlw	6
  2700  001BA0  0100               	movlb	0	; () banked
  2701  001BA2  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2702  001BA4  A4D8               	btfss	status,2,c
  2703  001BA6  D014               	goto	l352
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;Pattern_ControlService.c: 224: StopPattern();
  2707  001BA8  ECDD  F013         	call	_StopPattern	;wreg free
  2708  001BAC                     L21:
  2709                           
  2710                           ;Pattern_ControlService.c: 226: CurrentState = Pattern_Off;
  2711  001BAC  0E01               	movlw	1
  2712  001BAE                     L4:
  2713  001BAE  0100               	movlb	0	; () banked
  2714  001BB0  6FE3               	movwf	_CurrentState& (0+255),b
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;Pattern_ControlService.c: 229: }
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;Pattern_ControlService.c: 227: }
  2721                           ;Pattern_ControlService.c: 228: break;
  2722                           
  2723                           ; BSR set to: 0
  2724  001BB2  D00E               	goto	l352
  2725  001BB4                     l3500:
  2726                           
  2727                           ; BSR set to: 0
  2728  001BB4  0100               	movlb	0	; () banked
  2729  001BB6  51E3               	movf	_CurrentState& (0+255),w,b
  2730                           
  2731                           ; Switch size 1, requested type "space"
  2732                           ; Number of cases is 4, Range of values is 0 to 3
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte           13     7 (average)
  2736                           ;	Chosen strategy is simple_byte
  2737  001BB8  0A00               	xorlw	0	; case 0
  2738  001BBA  B4D8               	btfsc	status,2,c
  2739  001BBC  D7B0               	goto	l3456
  2740  001BBE  0A01               	xorlw	1	; case 1
  2741  001BC0  B4D8               	btfsc	status,2,c
  2742  001BC2  D7C3               	goto	l3464
  2743  001BC4  0A03               	xorlw	3	; case 2
  2744  001BC6  B4D8               	btfsc	status,2,c
  2745  001BC8  D7C9               	goto	l3470
  2746  001BCA  0A01               	xorlw	1	; case 3
  2747  001BCC  B4D8               	btfsc	status,2,c
  2748  001BCE  D7DF               	goto	l3486
  2749  001BD0                     l352:
  2750                           
  2751                           ;Pattern_ControlService.c: 230: return ReturnEvent;
  2752  001BD0  C0BD  F0BA         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2753  001BD4  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2754  001BD8  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2755  001BDC  0012               	return		;funcret
  2756  001BDE                     __end_of_RunPatternControlService:
  2757                           	opt stack 0
  2758                           tosu	equ	0xFFF
  2759                           tosh	equ	0xFFE
  2760                           tosl	equ	0xFFD
  2761                           pclath	equ	0xFFA
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           prodh	equ	0xFF4
  2767                           prodl	equ	0xFF3
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _RunSPI32ControlService *****************
  2781 ;; Defined at:
  2782 ;;		line 138 in file "SPI32_ControlService.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  ReturnEvent     3  100[BANK0 ] struct ES_Event_t
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  3   90[BANK0 ] struct ES_Event_t
  2789 ;; Registers used:
  2790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2796 ;;      Params:         0       3       0       0
  2797 ;;      Locals:         0       3       0       0
  2798 ;;      Temps:          0       7       0       0
  2799 ;;      Totals:         0      13       0       0
  2800 ;;Total ram usage:       13 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    8
  2803 ;; This function calls:
  2804 ;;		_GetNextFrame
  2805 ;;		_SPI32_SendFrame
  2806 ;; This function is called by:
  2807 ;;		_ES_Run
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text9
  2812  001680                     __ptext9:
  2813                           	opt stack 0
  2814  001680                     _RunSPI32ControlService:
  2815                           	opt stack 21
  2816                           
  2817                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2818                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2819                           
  2820                           ;incstack = 0
  2821  001680  0E00               	movlw	0
  2822  001682  0100               	movlb	0	; () banked
  2823  001684  6FC4               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2824                           
  2825                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2826  001686  D06D               	goto	l3550
  2827  001688                     l3524:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2831  001688  0E02               	movlw	2
  2832  00168A  0100               	movlb	0	; () banked
  2833  00168C  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2834  00168E  A4D8               	btfss	status,2,c
  2835  001690  D073               	goto	l564
  2836  001692  D063               	goto	l3546
  2837  001694                     l3528:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2841  001694  0E09               	movlw	9
  2842  001696  0100               	movlb	0	; () banked
  2843  001698  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2844  00169A  A4D8               	btfss	status,2,c
  2845  00169C  D06D               	goto	l564
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2849  00169E  EC44  F014         	call	_GetNextFrame	;wreg free
  2850  0016A2  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2851  0016A6  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2852  0016AA  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2853  0016AE  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2854                           
  2855                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2856  0016B2  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2857  0016B6  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2858  0016BA  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2859  0016BE  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2860  0016C2  EC41  F012         	call	_SPI32_SendFrame	;wreg free
  2861                           
  2862                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2863  0016C6  0E02               	movlw	2
  2864  0016C8  D049               	goto	L6
  2865  0016CA                     l3536:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2869  0016CA  0E03               	movlw	3
  2870  0016CC  0100               	movlb	0	; () banked
  2871  0016CE  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2872  0016D0  A4D8               	btfss	status,2,c
  2873  0016D2  D052               	goto	l564
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2877  0016D4  0EFF               	movlw	255
  2878  0016D6  0100               	movlb	0	; () banked
  2879  0016D8  6FBD               	movwf	??_RunSPI32ControlService& (0+255),b
  2880  0016DA  0EFF               	movlw	255
  2881  0016DC  0100               	movlb	0	; () banked
  2882  0016DE  6FBE               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2883  0016E0  0100               	movlb	0	; () banked
  2884  0016E2  51E7               	movf	_NumFrames& (0+255),w,b
  2885  0016E4  0100               	movlb	0	; () banked
  2886  0016E6  6FBF               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2887  0016E8  6BC0               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2888  0016EA  0100               	movlb	0	; () banked
  2889  0016EC  51BD               	movf	??_RunSPI32ControlService& (0+255),w,b
  2890  0016EE  0100               	movlb	0	; () banked
  2891  0016F0  27BF               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2892  0016F2  0100               	movlb	0	; () banked
  2893  0016F4  51BE               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2894  0016F6  0100               	movlb	0	; () banked
  2895  0016F8  23C0               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2896  0016FA  0100               	movlb	0	; () banked
  2897  0016FC  2BE4               	incf	_FrameIndex& (0+255),f,b
  2898  0016FE  05E4               	decf	_FrameIndex& (0+255),w,b
  2899  001700  0100               	movlb	0	; () banked
  2900  001702  6FC1               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2901  001704  6BC2               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2902  001706  0100               	movlb	0	; () banked
  2903  001708  51BF               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2904  00170A  0100               	movlb	0	; () banked
  2905  00170C  5DC1               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2906  00170E  0100               	movlb	0	; () banked
  2907  001710  51C2               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2908  001712  0A80               	xorlw	128
  2909  001714  0100               	movlb	0	; () banked
  2910  001716  6FC3               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2911  001718  0100               	movlb	0	; () banked
  2912  00171A  51C0               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2913  00171C  0A80               	xorlw	128
  2914  00171E  0100               	movlb	0	; () banked
  2915  001720  59C3               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2916  001722  B0D8               	btfsc	status,0,c
  2917  001724  D01A               	goto	l3546
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;SPI32_ControlService.c: 176: FramePointer++;
  2921  001726  0E04               	movlw	4
  2922  001728  0100               	movlb	0	; () banked
  2923  00172A  27D8               	addwf	_FramePointer& (0+255),f,b
  2924  00172C  0E00               	movlw	0
  2925  00172E  23D9               	addwfc	(_FramePointer+1)& (0+255),f,b
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2929  001730  EC44  F014         	call	_GetNextFrame	;wreg free
  2930  001734  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2931  001738  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2932  00173C  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2933  001740  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2934                           
  2935                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2936  001744  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2937  001748  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2938  00174C  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2939  001750  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2940  001754  EC41  F012         	call	_SPI32_SendFrame	;wreg free
  2941                           
  2942                           ;SPI32_ControlService.c: 180: }
  2943  001758  D00F               	goto	l564
  2944  00175A                     l3546:
  2945                           
  2946                           ;SPI32_ControlService.c: 182: else{
  2947                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2948  00175A  0E01               	movlw	1
  2949  00175C                     L6:
  2950  00175C  0100               	movlb	0	; () banked
  2951  00175E  6FE1               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;SPI32_ControlService.c: 235: }
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;SPI32_ControlService.c: 185: }
  2958                           ;SPI32_ControlService.c: 186: }
  2959                           ;SPI32_ControlService.c: 188: break;
  2960                           
  2961                           ; BSR set to: 0
  2962  001760  D00B               	goto	l564
  2963  001762                     l3550:
  2964                           
  2965                           ; BSR set to: 0
  2966  001762  0100               	movlb	0	; () banked
  2967  001764  51E1               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2968                           
  2969                           ; Switch size 1, requested type "space"
  2970                           ; Number of cases is 3, Range of values is 0 to 2
  2971                           ; switch strategies available:
  2972                           ; Name         Instructions Cycles
  2973                           ; simple_byte           10     6 (average)
  2974                           ;	Chosen strategy is simple_byte
  2975  001766  0A00               	xorlw	0	; case 0
  2976  001768  B4D8               	btfsc	status,2,c
  2977  00176A  D78E               	goto	l3524
  2978  00176C  0A01               	xorlw	1	; case 1
  2979  00176E  B4D8               	btfsc	status,2,c
  2980  001770  D791               	goto	l3528
  2981  001772  0A03               	xorlw	3	; case 2
  2982  001774  B4D8               	btfsc	status,2,c
  2983  001776  D7A9               	goto	l3536
  2984  001778                     l564:
  2985                           
  2986                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2987  001778  C0C4  F0BA         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2988  00177C  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2989  001780  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2990  001784  0012               	return		;funcret
  2991  001786                     __end_of_RunSPI32ControlService:
  2992                           	opt stack 0
  2993                           tosu	equ	0xFFF
  2994                           tosh	equ	0xFFE
  2995                           tosl	equ	0xFFD
  2996                           pclath	equ	0xFFA
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _SPI32_SendFrame *****************
  3016 ;; Defined at:
  3017 ;;		line 86 in file "SPI32_HW.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  newFrame        4    0[BANK0 ] unsigned long 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, prodl, prodh
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3031 ;;      Params:         0       4       0       0
  3032 ;;      Locals:         0       0       0       0
  3033 ;;      Temps:          0       4       0       0
  3034 ;;      Totals:         0       8       0       0
  3035 ;;Total ram usage:        8 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    7
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_RunSPI32ControlService
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text10
  3046  002482                     __ptext10:
  3047                           	opt stack 0
  3048  002482                     _SPI32_SendFrame:
  3049                           	opt stack 21
  3050                           
  3051                           ;SPI32_HW.c: 101: if(FrameByte == 4){
  3052                           
  3053                           ;incstack = 0
  3054  002482  0E04               	movlw	4
  3055  002484  0100               	movlb	0	; () banked
  3056  002486  19FA               	xorwf	_FrameByte& (0+255),w,b
  3057  002488  A4D8               	btfss	status,2,c
  3058  00248A  D008               	goto	l3294
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
  3062  00248C  C060  F034         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  3063  002490  C061  F035         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  3064  002494  C062  F036         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  3065  002498  C063  F037         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  3066  00249C                     l3294:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;SPI32_HW.c: 104: }
  3070                           ;SPI32_HW.c: 106: FrameByte--;
  3071  00249C  0100               	movlb	0	; () banked
  3072  00249E  07FA               	decf	_FrameByte& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  3076  0024A0  0100               	movlb	0	; () banked
  3077  0024A2  51FA               	movf	_FrameByte& (0+255),w,b
  3078  0024A4  0D08               	mullw	8
  3079  0024A6  50F3               	movf	prodl,w,c
  3080  0024A8  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  3081  0024AC  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  3082  0024B0  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  3083  0024B4  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  3084  0024B8  0100               	movlb	0	; () banked
  3085  0024BA  2AE8               	incf	wreg,f,c
  3086  0024BC  D005               	goto	u1880
  3087  0024BE                     u1885:
  3088  0024BE  90D8               	bcf	status,0,c
  3089  0024C0  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  3090  0024C2  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  3091  0024C4  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  3092  0024C6  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  3093  0024C8                     u1880:
  3094  0024C8  2EE8               	decfsz	wreg,f,c
  3095  0024CA  D7F9               	goto	u1885
  3096  0024CC  0100               	movlb	0	; () banked
  3097  0024CE  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  3098  0024D0  6EC9               	movwf	4041,c	;volatile
  3099                           
  3100                           ; BSR set to: 0
  3101  0024D2  0012               	return		;funcret
  3102  0024D4                     __end_of_SPI32_SendFrame:
  3103                           	opt stack 0
  3104                           tosu	equ	0xFFF
  3105                           tosh	equ	0xFFE
  3106                           tosl	equ	0xFFD
  3107                           pclath	equ	0xFFA
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           indf2	equ	0xFDF
  3120                           postinc2	equ	0xFDE
  3121                           postdec2	equ	0xFDD
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _GetNextFrame *****************
  3127 ;; Defined at:
  3128 ;;		line 258 in file "SPI32_ControlService.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  4    0[BANK0 ] unsigned long 
  3135 ;; Registers used:
  3136 ;;		fsr2l, fsr2h
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3142 ;;      Params:         0       4       0       0
  3143 ;;      Locals:         0       0       0       0
  3144 ;;      Temps:          0       0       0       0
  3145 ;;      Totals:         0       4       0       0
  3146 ;;Total ram usage:        4 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    7
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_RunSPI32ControlService
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text11
  3157  002888                     __ptext11:
  3158                           	opt stack 0
  3159  002888                     _GetNextFrame:
  3160                           	opt stack 21
  3161                           
  3162                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;incstack = 0
  3166  002888  C0D8  FFD9         	movff	_FramePointer,fsr2l
  3167  00288C  C0D9  FFDA         	movff	_FramePointer+1,fsr2h
  3168  002890  CFDE F060          	movff	postinc2,?_GetNextFrame
  3169  002894  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3170  002898  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3171  00289C  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3172  0028A0  0012               	return	
  3173  0028A2                     __end_of_GetNextFrame:
  3174                           	opt stack 0
  3175                           tosu	equ	0xFFF
  3176                           tosh	equ	0xFFE
  3177                           tosl	equ	0xFFD
  3178                           pclath	equ	0xFFA
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           postdec1	equ	0xFE5
  3188                           fsr1h	equ	0xFE2
  3189                           fsr1l	equ	0xFE1
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _StopPattern *****************
  3198 ;; Defined at:
  3199 ;;		line 283 in file "Pattern_ControlService.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3213 ;;      Params:         0       0       0       0
  3214 ;;      Locals:         0       0       0       0
  3215 ;;      Temps:          0       0       0       0
  3216 ;;      Totals:         0       0       0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:   13
  3220 ;; This function calls:
  3221 ;;		_DotStar_Show
  3222 ;;		_ES_Timer_StopTimer
  3223 ;;		_PatternOff
  3224 ;;		_ResetPattern
  3225 ;; This function is called by:
  3226 ;;		_RunPatternControlService
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text12
  3231  0027BA                     __ptext12:
  3232                           	opt stack 0
  3233  0027BA                     _StopPattern:
  3234                           	opt stack 15
  3235                           
  3236                           ;Pattern_ControlService.c: 284: PatternConfigs[0] = 0;
  3237                           
  3238                           ;incstack = 0
  3239  0027BA  0E00               	movlw	0
  3240  0027BC  0100               	movlb	0	; () banked
  3241  0027BE  6FFB               	movwf	_PatternConfigs& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;Pattern_ControlService.c: 286: ES_Timer_StopTimer(0);
  3245  0027C0  0E00               	movlw	0
  3246  0027C2  EC6A  F012         	call	_ES_Timer_StopTimer
  3247                           
  3248                           ;Pattern_ControlService.c: 288: DotStar_Show(PatternOff());
  3249  0027C6  ECFF  F012         	call	_PatternOff	;wreg free
  3250  0027CA  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3251  0027CE  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3252  0027D2  EC22  F00A         	call	_DotStar_Show	;wreg free
  3253                           
  3254                           ;Pattern_ControlService.c: 290: ResetPattern();
  3255  0027D6  ECA3  F014         	call	_ResetPattern	;wreg free
  3256                           
  3257                           ;Pattern_ControlService.c: 292: PatternConfigs[0] = 0;
  3258  0027DA  0E00               	movlw	0
  3259  0027DC  0100               	movlb	0	; () banked
  3260  0027DE  6FFB               	movwf	_PatternConfigs& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263  0027E0  0012               	return		;funcret
  3264  0027E2                     __end_of_StopPattern:
  3265                           	opt stack 0
  3266                           tosu	equ	0xFFF
  3267                           tosh	equ	0xFFE
  3268                           tosl	equ	0xFFD
  3269                           pclath	equ	0xFFA
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1h	equ	0xFE2
  3280                           fsr1l	equ	0xFE1
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _ResetPattern *****************
  3289 ;; Defined at:
  3290 ;;		line 192 in file "Pattern_RGBPatterns.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;		None
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3304 ;;      Params:         0       0       0       0
  3305 ;;      Locals:         0       0       0       0
  3306 ;;      Temps:          0       0       0       0
  3307 ;;      Totals:         0       0       0       0
  3308 ;;Total ram usage:        0 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    7
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_StopPattern
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text13
  3319  002946                     __ptext13:
  3320                           	opt stack 0
  3321  002946                     _ResetPattern:
  3322                           	opt stack 20
  3323                           
  3324                           ;Pattern_RGBPatterns.c: 194: PatternStepCounter=0;
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;incstack = 0
  3328  002946  0E00               	movlw	0
  3329  002948  0100               	movlb	0	; () banked
  3330  00294A  6FE8               	movwf	_PatternStepCounter& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333  00294C  0012               	return		;funcret
  3334  00294E                     __end_of_ResetPattern:
  3335                           	opt stack 0
  3336                           tosu	equ	0xFFF
  3337                           tosh	equ	0xFFE
  3338                           tosl	equ	0xFFD
  3339                           pclath	equ	0xFFA
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _PatternOff *****************
  3359 ;; Defined at:
  3360 ;;		line 84 in file "Pattern_RGBPatterns.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  i               1    2[BANK0 ] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  2    0[BANK0 ] PTR unsigned int 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3374 ;;      Params:         0       2       0       0
  3375 ;;      Locals:         0       1       0       0
  3376 ;;      Temps:          0       0       0       0
  3377 ;;      Totals:         0       3       0       0
  3378 ;;Total ram usage:        3 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    7
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_StopPattern
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text14
  3389  0025FE                     __ptext14:
  3390                           	opt stack 0
  3391  0025FE                     _PatternOff:
  3392                           	opt stack 20
  3393                           
  3394                           ;Pattern_RGBPatterns.c: 85: for(uint8_t i=0;i<Length;i++){
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;incstack = 0
  3398  0025FE  0E00               	movlw	0
  3399  002600  0100               	movlb	0	; () banked
  3400  002602  6F62               	movwf	PatternOff@i& (0+255),b
  3401  002604  D00F               	goto	l3192
  3402  002606                     l3188:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;Pattern_RGBPatterns.c: 86: PixelPattern[i] = 0x0;
  3406  002606  0100               	movlb	0	; () banked
  3407  002608  5162               	movf	PatternOff@i& (0+255),w,b
  3408  00260A  0D02               	mullw	2
  3409  00260C  0E20               	movlw	low _PixelPattern
  3410  00260E  24F3               	addwf	prodl,w,c
  3411  002610  6ED9               	movwf	fsr2l,c
  3412  002612  0E01               	movlw	high _PixelPattern
  3413  002614  20F4               	addwfc	prodh,w,c
  3414  002616  6EDA               	movwf	fsr2h,c
  3415  002618  0E00               	movlw	0
  3416  00261A  6EDE               	movwf	postinc2,c
  3417  00261C  0E00               	movlw	0
  3418  00261E  6EDD               	movwf	postdec2,c
  3419                           
  3420                           ; BSR set to: 0
  3421  002620  0100               	movlb	0	; () banked
  3422  002622  2B62               	incf	PatternOff@i& (0+255),f,b
  3423  002624                     l3192:
  3424                           
  3425                           ; BSR set to: 0
  3426  002624  0100               	movlb	0	; () banked
  3427  002626  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3428  002628  0100               	movlb	0	; () banked
  3429  00262A  5D62               	subwf	PatternOff@i& (0+255),w,b
  3430  00262C  A0D8               	btfss	status,0,c
  3431  00262E  D7EB               	goto	l3188
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;Pattern_RGBPatterns.c: 87: }
  3435                           ;Pattern_RGBPatterns.c: 88: return PixelPattern;
  3436                           
  3437                           ; BSR set to: 0
  3438  002630  0E20               	movlw	low _PixelPattern
  3439  002632  0100               	movlb	0	; () banked
  3440  002634  6F60               	movwf	?_PatternOff& (0+255),b
  3441  002636  0E01               	movlw	high _PixelPattern
  3442  002638  0100               	movlb	0	; () banked
  3443  00263A  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3444  00263C  0012               	return	
  3445  00263E                     __end_of_PatternOff:
  3446                           	opt stack 0
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1h	equ	0xFE2
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _ShowPattern *****************
  3470 ;; Defined at:
  3471 ;;		line 273 in file "Pattern_ControlService.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3485 ;;      Params:         0       0       0       0
  3486 ;;      Locals:         0       0       0       0
  3487 ;;      Temps:          0       0       0       0
  3488 ;;      Totals:         0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:   13
  3492 ;; This function calls:
  3493 ;;		_DotStar_Show
  3494 ;;		_ES_Timer_InitTimer
  3495 ;;		_UpdatePattern
  3496 ;; This function is called by:
  3497 ;;		_RunPatternControlService
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text15
  3502  0027E2                     __ptext15:
  3503                           	opt stack 0
  3504  0027E2                     _ShowPattern:
  3505                           	opt stack 15
  3506                           
  3507                           ;Pattern_ControlService.c: 275: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;incstack = 0
  3511  0027E2  C0FF  F060         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3512  0027E6  0100               	movlb	0	; () banked
  3513  0027E8  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3514  0027EA  0E00               	movlw	0
  3515  0027EC  EC89  F010         	call	_ES_Timer_InitTimer
  3516                           
  3517                           ;Pattern_ControlService.c: 277: DotStar_Show(UpdatePattern());
  3518  0027F0  EC0F  F004         	call	_UpdatePattern	;wreg free
  3519  0027F4  C080  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3520  0027F8  C081  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3521  0027FC  EC22  F00A         	call	_DotStar_Show	;wreg free
  3522                           
  3523                           ;Pattern_ControlService.c: 279: PatternConfigs[0] = 1;
  3524  002800  0E01               	movlw	1
  3525  002802  0100               	movlb	0	; () banked
  3526  002804  6FFB               	movwf	_PatternConfigs& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529  002806  0012               	return		;funcret
  3530  002808                     __end_of_ShowPattern:
  3531                           	opt stack 0
  3532                           tosu	equ	0xFFF
  3533                           tosh	equ	0xFFE
  3534                           tosl	equ	0xFFD
  3535                           pclath	equ	0xFFA
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _UpdatePattern *****************
  3555 ;; Defined at:
  3556 ;;		line 92 in file "Pattern_RGBPatterns.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  i               1   39[BANK0 ] unsigned char 
  3561 ;;  i               1   38[BANK0 ] unsigned char 
  3562 ;;  i               1   37[BANK0 ] unsigned char 
  3563 ;;  i               1   36[BANK0 ] unsigned char 
  3564 ;;  i               1   35[BANK0 ] unsigned char 
  3565 ;;  patternID       1   34[BANK0 ] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  2   32[BANK0 ] PTR unsigned int 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3575 ;;      Params:         0       2       0       0
  3576 ;;      Locals:         0       6       0       0
  3577 ;;      Temps:          0       0       0       0
  3578 ;;      Totals:         0       8       0       0
  3579 ;;Total ram usage:        8 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    9
  3582 ;; This function calls:
  3583 ;;		_IdlePattern
  3584 ;;		_ListeningPattern
  3585 ;;		_SpeakingPattern
  3586 ;;		_ThinkingPattern
  3587 ;;		___awmod
  3588 ;;		___lwdiv
  3589 ;;		___wmul
  3590 ;; This function is called by:
  3591 ;;		_ShowPattern
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text16
  3596  00081E                     __ptext16:
  3597                           	opt stack 0
  3598  00081E                     _UpdatePattern:
  3599                           	opt stack 18
  3600                           
  3601                           ;Pattern_RGBPatterns.c: 94: uint8_t patternID = PatternConfigs[1];
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;incstack = 0
  3605  00081E  0100               	movlb	0	; () banked
  3606  000820  EE20 F001          	lfsr	2,1
  3607  000824  51D6               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3608  000826  26D9               	addwf	fsr2l,f,c
  3609  000828  51D7               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3610  00082A  22DA               	addwfc	fsr2h,f,c
  3611  00082C  50DF               	movf	indf2,w,c
  3612  00082E  0100               	movlb	0	; () banked
  3613  000830  6F82               	movwf	UpdatePattern@patternID& (0+255),b
  3614                           
  3615                           ;Pattern_RGBPatterns.c: 97: switch(patternID){
  3616  000832  D11C               	goto	l3168
  3617  000834                     l3116:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;Pattern_RGBPatterns.c: 104: for(uint8_t i=0;i<Length;i++){
  3621  000834  0E00               	movlw	0
  3622  000836  0100               	movlb	0	; () banked
  3623  000838  6F83               	movwf	UpdatePattern@i& (0+255),b
  3624  00083A  D018               	goto	l3122
  3625  00083C                     l3118:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Pattern_RGBPatterns.c: 105: PixelPattern[i] = IdlePattern(1,i,PatternStepCounter);
  3629  00083C  C083  F068         	movff	UpdatePattern@i,IdlePattern@pixel
  3630  000840  C0E8  F069         	movff	_PatternStepCounter,IdlePattern@stepCount
  3631  000844  0E01               	movlw	1
  3632  000846  EC84  F008         	call	_IdlePattern
  3633  00084A  0100               	movlb	0	; () banked
  3634  00084C  5183               	movf	UpdatePattern@i& (0+255),w,b
  3635  00084E  0D02               	mullw	2
  3636  000850  0E20               	movlw	low _PixelPattern
  3637  000852  24F3               	addwf	prodl,w,c
  3638  000854  6ED9               	movwf	fsr2l,c
  3639  000856  0E01               	movlw	high _PixelPattern
  3640  000858  20F4               	addwfc	prodh,w,c
  3641  00085A  6EDA               	movwf	fsr2h,c
  3642  00085C  0100               	movlb	0	; () banked
  3643  00085E  C068  FFDE         	movff	?_IdlePattern,postinc2
  3644  000862  0100               	movlb	0	; () banked
  3645  000864  C069  FFDD         	movff	?_IdlePattern+1,postdec2
  3646                           
  3647                           ; BSR set to: 0
  3648  000868  0100               	movlb	0	; () banked
  3649  00086A  2B83               	incf	UpdatePattern@i& (0+255),f,b
  3650  00086C                     l3122:
  3651                           
  3652                           ; BSR set to: 0
  3653  00086C  0100               	movlb	0	; () banked
  3654  00086E  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3655  000870  0100               	movlb	0	; () banked
  3656  000872  5D83               	subwf	UpdatePattern@i& (0+255),w,b
  3657  000874  A0D8               	btfss	status,0,c
  3658  000876  D7E2               	goto	l3118
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;Pattern_RGBPatterns.c: 106: }
  3662                           ;Pattern_RGBPatterns.c: 107: PatternStepCounter = (PatternStepCounter+1)%Length;
  3663                           
  3664                           ; BSR set to: 0
  3665  000878  0E01               	movlw	1
  3666  00087A  0100               	movlb	0	; () banked
  3667  00087C  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3668  00087E  0100               	movlb	0	; () banked
  3669  000880  6F60               	movwf	___awmod@dividend& (0+255),b
  3670  000882  0100               	movlb	0	; () banked
  3671  000884  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3672  000886  0E00               	movlw	0
  3673  000888  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3674  00088A  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3675  00088E  0100               	movlb	0	; () banked
  3676  000890  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3677  000892  ECAE  F00F         	call	___awmod	;wreg free
  3678  000896  D0E5               	goto	L10
  3679  000898                     l3126:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;Pattern_RGBPatterns.c: 114: for(uint8_t i=0;i<Length;i++){
  3683  000898  0E00               	movlw	0
  3684  00089A  0100               	movlb	0	; () banked
  3685  00089C  6F84               	movwf	UpdatePattern@i_729& (0+255),b
  3686  00089E  D018               	goto	l3132
  3687  0008A0                     l3128:
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;Pattern_RGBPatterns.c: 115: PixelPattern[i] = ThinkingPattern(1,i,PatternStepCounter);
  3691  0008A0  C084  F068         	movff	UpdatePattern@i_729,ThinkingPattern@pixel
  3692  0008A4  C0E8  F069         	movff	_PatternStepCounter,ThinkingPattern@stepCount
  3693  0008A8  0E01               	movlw	1
  3694  0008AA  EC51  F005         	call	_ThinkingPattern
  3695  0008AE  0100               	movlb	0	; () banked
  3696  0008B0  5184               	movf	UpdatePattern@i_729& (0+255),w,b
  3697  0008B2  0D02               	mullw	2
  3698  0008B4  0E20               	movlw	low _PixelPattern
  3699  0008B6  24F3               	addwf	prodl,w,c
  3700  0008B8  6ED9               	movwf	fsr2l,c
  3701  0008BA  0E01               	movlw	high _PixelPattern
  3702  0008BC  20F4               	addwfc	prodh,w,c
  3703  0008BE  6EDA               	movwf	fsr2h,c
  3704  0008C0  0100               	movlb	0	; () banked
  3705  0008C2  C068  FFDE         	movff	?_ThinkingPattern,postinc2
  3706  0008C6  0100               	movlb	0	; () banked
  3707  0008C8  C069  FFDD         	movff	?_ThinkingPattern+1,postdec2
  3708                           
  3709                           ; BSR set to: 0
  3710  0008CC  0100               	movlb	0	; () banked
  3711  0008CE  2B84               	incf	UpdatePattern@i_729& (0+255),f,b
  3712  0008D0                     l3132:
  3713                           
  3714                           ; BSR set to: 0
  3715  0008D0  0100               	movlb	0	; () banked
  3716  0008D2  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3717  0008D4  0100               	movlb	0	; () banked
  3718  0008D6  5D84               	subwf	UpdatePattern@i_729& (0+255),w,b
  3719  0008D8  A0D8               	btfss	status,0,c
  3720  0008DA  D7E2               	goto	l3128
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Pattern_RGBPatterns.c: 116: }
  3724                           ;Pattern_RGBPatterns.c: 117: PatternStepCounter = (PatternStepCounter+1)%Length;
  3725                           
  3726                           ; BSR set to: 0
  3727  0008DC  0E01               	movlw	1
  3728  0008DE  0100               	movlb	0	; () banked
  3729  0008E0  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3730  0008E2  0100               	movlb	0	; () banked
  3731  0008E4  6F60               	movwf	___awmod@dividend& (0+255),b
  3732  0008E6  0100               	movlb	0	; () banked
  3733  0008E8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3734  0008EA  0E00               	movlw	0
  3735  0008EC  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3736  0008EE  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3737  0008F2  0100               	movlb	0	; () banked
  3738  0008F4  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3739  0008F6  ECAE  F00F         	call	___awmod	;wreg free
  3740  0008FA  D0B3               	goto	L10
  3741  0008FC                     l3136:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;Pattern_RGBPatterns.c: 121: for(uint8_t i=0;i<Length;i++){
  3745  0008FC  0E00               	movlw	0
  3746  0008FE  0100               	movlb	0	; () banked
  3747  000900  6F85               	movwf	UpdatePattern@i_730& (0+255),b
  3748  000902  D018               	goto	l3142
  3749  000904                     l3138:
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;Pattern_RGBPatterns.c: 122: PixelPattern[i] = SpeakingPattern(1,i,PatternStepCounter);
  3753  000904  C085  F068         	movff	UpdatePattern@i_730,SpeakingPattern@pixel
  3754  000908  C0E8  F069         	movff	_PatternStepCounter,SpeakingPattern@stepCount
  3755  00090C  0E01               	movlw	1
  3756  00090E  EC62  F006         	call	_SpeakingPattern
  3757  000912  0100               	movlb	0	; () banked
  3758  000914  5185               	movf	UpdatePattern@i_730& (0+255),w,b
  3759  000916  0D02               	mullw	2
  3760  000918  0E20               	movlw	low _PixelPattern
  3761  00091A  24F3               	addwf	prodl,w,c
  3762  00091C  6ED9               	movwf	fsr2l,c
  3763  00091E  0E01               	movlw	high _PixelPattern
  3764  000920  20F4               	addwfc	prodh,w,c
  3765  000922  6EDA               	movwf	fsr2h,c
  3766  000924  0100               	movlb	0	; () banked
  3767  000926  C068  FFDE         	movff	?_SpeakingPattern,postinc2
  3768  00092A  0100               	movlb	0	; () banked
  3769  00092C  C069  FFDD         	movff	?_SpeakingPattern+1,postdec2
  3770                           
  3771                           ; BSR set to: 0
  3772  000930  0100               	movlb	0	; () banked
  3773  000932  2B85               	incf	UpdatePattern@i_730& (0+255),f,b
  3774  000934                     l3142:
  3775                           
  3776                           ; BSR set to: 0
  3777  000934  0100               	movlb	0	; () banked
  3778  000936  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3779  000938  0100               	movlb	0	; () banked
  3780  00093A  5D85               	subwf	UpdatePattern@i_730& (0+255),w,b
  3781  00093C  A0D8               	btfss	status,0,c
  3782  00093E  D7E2               	goto	l3138
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;Pattern_RGBPatterns.c: 123: }
  3786                           ;Pattern_RGBPatterns.c: 124: PatternStepCounter = (PatternStepCounter+1)%Length;
  3787                           
  3788                           ; BSR set to: 0
  3789  000940  0E01               	movlw	1
  3790  000942  0100               	movlb	0	; () banked
  3791  000944  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3792  000946  0100               	movlb	0	; () banked
  3793  000948  6F60               	movwf	___awmod@dividend& (0+255),b
  3794  00094A  0100               	movlb	0	; () banked
  3795  00094C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3796  00094E  0E00               	movlw	0
  3797  000950  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3798  000952  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3799  000956  0100               	movlb	0	; () banked
  3800  000958  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3801  00095A  ECAE  F00F         	call	___awmod	;wreg free
  3802  00095E  D081               	goto	L10
  3803  000960                     l3146:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;Pattern_RGBPatterns.c: 129: for(uint8_t i=0;i<Length;i++){
  3807  000960  0E00               	movlw	0
  3808  000962  0100               	movlb	0	; () banked
  3809  000964  6F86               	movwf	UpdatePattern@i_731& (0+255),b
  3810  000966  D018               	goto	l3152
  3811  000968                     l3148:
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;Pattern_RGBPatterns.c: 130: PixelPattern[i] = ListeningPattern(1,i,PatternStepCounter);
  3815  000968  C086  F068         	movff	UpdatePattern@i_731,ListeningPattern@pixel
  3816  00096C  C0E8  F069         	movff	_PatternStepCounter,ListeningPattern@stepCount
  3817  000970  0E01               	movlw	1
  3818  000972  EC73  F007         	call	_ListeningPattern
  3819  000976  0100               	movlb	0	; () banked
  3820  000978  5186               	movf	UpdatePattern@i_731& (0+255),w,b
  3821  00097A  0D02               	mullw	2
  3822  00097C  0E20               	movlw	low _PixelPattern
  3823  00097E  24F3               	addwf	prodl,w,c
  3824  000980  6ED9               	movwf	fsr2l,c
  3825  000982  0E01               	movlw	high _PixelPattern
  3826  000984  20F4               	addwfc	prodh,w,c
  3827  000986  6EDA               	movwf	fsr2h,c
  3828  000988  0100               	movlb	0	; () banked
  3829  00098A  C068  FFDE         	movff	?_ListeningPattern,postinc2
  3830  00098E  0100               	movlb	0	; () banked
  3831  000990  C069  FFDD         	movff	?_ListeningPattern+1,postdec2
  3832                           
  3833                           ; BSR set to: 0
  3834  000994  0100               	movlb	0	; () banked
  3835  000996  2B86               	incf	UpdatePattern@i_731& (0+255),f,b
  3836  000998                     l3152:
  3837                           
  3838                           ; BSR set to: 0
  3839  000998  0100               	movlb	0	; () banked
  3840  00099A  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3841  00099C  0100               	movlb	0	; () banked
  3842  00099E  5D86               	subwf	UpdatePattern@i_731& (0+255),w,b
  3843  0009A0  A0D8               	btfss	status,0,c
  3844  0009A2  D7E2               	goto	l3148
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Pattern_RGBPatterns.c: 131: }
  3848                           ;Pattern_RGBPatterns.c: 132: PatternStepCounter = (PatternStepCounter+1)%Length;
  3849                           
  3850                           ; BSR set to: 0
  3851  0009A4  0E01               	movlw	1
  3852  0009A6  0100               	movlb	0	; () banked
  3853  0009A8  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3854  0009AA  0100               	movlb	0	; () banked
  3855  0009AC  6F60               	movwf	___awmod@dividend& (0+255),b
  3856  0009AE  0100               	movlb	0	; () banked
  3857  0009B0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3858  0009B2  0E00               	movlw	0
  3859  0009B4  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3860  0009B6  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3861  0009BA  0100               	movlb	0	; () banked
  3862  0009BC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3863  0009BE  ECAE  F00F         	call	___awmod	;wreg free
  3864  0009C2  D04F               	goto	L10
  3865  0009C4                     l3156:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;Pattern_RGBPatterns.c: 137: {
  3869                           ;Pattern_RGBPatterns.c: 179: for(uint8_t i=0;i<Length;i++){
  3870  0009C4  0E00               	movlw	0
  3871  0009C6  0100               	movlb	0	; () banked
  3872  0009C8  6F87               	movwf	UpdatePattern@i_732& (0+255),b
  3873  0009CA  D036               	goto	l3162
  3874  0009CC                     l3158:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;Pattern_RGBPatterns.c: 180: PixelPattern[i] = (((uint16_t)(i+PatternStepCounter)*255/Le
      +                          ngth)<<8) | (0x0F<<4) | 0x0F;
  3878  0009CC  0100               	movlb	0	; () banked
  3879  0009CE  5187               	movf	UpdatePattern@i_732& (0+255),w,b
  3880  0009D0  0100               	movlb	0	; () banked
  3881  0009D2  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3882  0009D4  0100               	movlb	0	; () banked
  3883  0009D6  6F66               	movwf	___wmul@multiplier& (0+255),b
  3884  0009D8  0100               	movlb	0	; () banked
  3885  0009DA  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  3886  0009DC  0100               	movlb	0	; () banked
  3887  0009DE  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  3888  0009E0  0E00               	movlw	0
  3889  0009E2  0100               	movlb	0	; () banked
  3890  0009E4  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3891  0009E6  6968               	setf	___wmul@multiplicand& (0+255),b
  3892  0009E8  EC77  F013         	call	___wmul	;wreg free
  3893  0009EC  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  3894  0009F0  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  3895  0009F4  C0E0  F06E         	movff	Pattern_RGBPatterns@Length,___lwdiv@divisor
  3896  0009F8  0100               	movlb	0	; () banked
  3897  0009FA  6B6F               	clrf	(___lwdiv@divisor+1)& (0+255),b
  3898  0009FC  EC05  F011         	call	___lwdiv	;wreg free
  3899  000A00  0100               	movlb	0	; () banked
  3900  000A02  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  3901  000A06  0100               	movlb	0	; () banked
  3902  000A08  6B6C               	clrf	?___lwdiv& (0+255),b
  3903  000A0A  0EFF               	movlw	255
  3904  000A0C  0100               	movlb	0	; () banked
  3905  000A0E  136C               	iorwf	?___lwdiv& (0+255),f,b
  3906  000A10  0E00               	movlw	0
  3907  000A12  0100               	movlb	0	; () banked
  3908  000A14  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  3909  000A16  0100               	movlb	0	; () banked
  3910  000A18  5187               	movf	UpdatePattern@i_732& (0+255),w,b
  3911  000A1A  0D02               	mullw	2
  3912  000A1C  0E20               	movlw	low _PixelPattern
  3913  000A1E  24F3               	addwf	prodl,w,c
  3914  000A20  6ED9               	movwf	fsr2l,c
  3915  000A22  0E01               	movlw	high _PixelPattern
  3916  000A24  20F4               	addwfc	prodh,w,c
  3917  000A26  6EDA               	movwf	fsr2h,c
  3918  000A28  0100               	movlb	0	; () banked
  3919  000A2A  C06C  FFDE         	movff	?___lwdiv,postinc2
  3920  000A2E  0100               	movlb	0	; () banked
  3921  000A30  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  3922                           
  3923                           ; BSR set to: 0
  3924  000A34  0100               	movlb	0	; () banked
  3925  000A36  2B87               	incf	UpdatePattern@i_732& (0+255),f,b
  3926  000A38                     l3162:
  3927                           
  3928                           ; BSR set to: 0
  3929  000A38  0100               	movlb	0	; () banked
  3930  000A3A  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3931  000A3C  0100               	movlb	0	; () banked
  3932  000A3E  5D87               	subwf	UpdatePattern@i_732& (0+255),w,b
  3933  000A40  A0D8               	btfss	status,0,c
  3934  000A42  D7C4               	goto	l3158
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;Pattern_RGBPatterns.c: 181: }
  3938                           ;Pattern_RGBPatterns.c: 182: PatternStepCounter = (PatternStepCounter+1)%Length;
  3939                           
  3940                           ; BSR set to: 0
  3941  000A44  0E01               	movlw	1
  3942  000A46  0100               	movlb	0	; () banked
  3943  000A48  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3944  000A4A  0100               	movlb	0	; () banked
  3945  000A4C  6F60               	movwf	___awmod@dividend& (0+255),b
  3946  000A4E  0100               	movlb	0	; () banked
  3947  000A50  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3948  000A52  0E00               	movlw	0
  3949  000A54  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3950  000A56  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3951  000A5A  0100               	movlb	0	; () banked
  3952  000A5C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3953  000A5E  ECAE  F00F         	call	___awmod	;wreg free
  3954  000A62                     L10:
  3955  000A62  0100               	movlb	0	; () banked
  3956  000A64  5160               	movf	?___awmod& (0+255),w,b
  3957  000A66  0100               	movlb	0	; () banked
  3958  000A68  6FE8               	movwf	_PatternStepCounter& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;Pattern_RGBPatterns.c: 187: }
  3962                           
  3963                           ;Pattern_RGBPatterns.c: 184: }
  3964                           ;Pattern_RGBPatterns.c: 185: break;
  3965  000A6A  D014               	goto	l3170
  3966  000A6C                     l3168:
  3967                           
  3968                           ; BSR set to: 0
  3969  000A6C  0100               	movlb	0	; () banked
  3970  000A6E  5182               	movf	UpdatePattern@patternID& (0+255),w,b
  3971                           
  3972                           ; Switch size 1, requested type "space"
  3973                           ; Number of cases is 6, Range of values is 0 to 255
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte           19    10 (average)
  3977                           ;	Chosen strategy is simple_byte
  3978  000A70  0A00               	xorlw	0	; case 0
  3979  000A72  B4D8               	btfsc	status,2,c
  3980  000A74  D00F               	goto	l3170
  3981  000A76  0A01               	xorlw	1	; case 1
  3982  000A78  B4D8               	btfsc	status,2,c
  3983  000A7A  D6DC               	goto	l3116
  3984  000A7C  0A03               	xorlw	3	; case 2
  3985  000A7E  B4D8               	btfsc	status,2,c
  3986  000A80  D70B               	goto	l3126
  3987  000A82  0A01               	xorlw	1	; case 3
  3988  000A84  B4D8               	btfsc	status,2,c
  3989  000A86  D73A               	goto	l3136
  3990  000A88  0A07               	xorlw	7	; case 4
  3991  000A8A  B4D8               	btfsc	status,2,c
  3992  000A8C  D769               	goto	l3146
  3993  000A8E  0AFB               	xorlw	251	; case 255
  3994  000A90  B4D8               	btfsc	status,2,c
  3995  000A92  D798               	goto	l3156
  3996  000A94                     l3170:
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;Pattern_RGBPatterns.c: 189: return PixelPattern;
  4000  000A94  0E20               	movlw	low _PixelPattern
  4001  000A96  0100               	movlb	0	; () banked
  4002  000A98  6F80               	movwf	?_UpdatePattern& (0+255),b
  4003  000A9A  0E01               	movlw	high _PixelPattern
  4004  000A9C  0100               	movlb	0	; () banked
  4005  000A9E  6F81               	movwf	(?_UpdatePattern+1)& (0+255),b
  4006  000AA0  0012               	return	
  4007  000AA2                     __end_of_UpdatePattern:
  4008                           	opt stack 0
  4009                           tosu	equ	0xFFF
  4010                           tosh	equ	0xFFE
  4011                           tosl	equ	0xFFD
  4012                           pclath	equ	0xFFA
  4013                           tblptru	equ	0xFF8
  4014                           tblptrh	equ	0xFF7
  4015                           tblptrl	equ	0xFF6
  4016                           tablat	equ	0xFF5
  4017                           prodh	equ	0xFF4
  4018                           prodl	equ	0xFF3
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           fsr1h	equ	0xFE2
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _ThinkingPattern *****************
  4032 ;; Defined at:
  4033 ;;		line 197 in file "Pattern_RGBPatterns.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  pattern         1    wreg     unsigned char 
  4036 ;;  pixel           1    8[BANK0 ] unsigned char 
  4037 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  pattern         1    0[COMRAM] unsigned char 
  4040 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4041 ;;  head            1   31[BANK0 ] unsigned char 
  4042 ;;  x               1   30[BANK0 ] unsigned char 
  4043 ;;  hue             1   29[BANK0 ] unsigned char 
  4044 ;;  val             1   28[BANK0 ] unsigned char 
  4045 ;;  sat             1   27[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  2    8[BANK0 ] unsigned int 
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4055 ;;      Params:         0       2       0       0
  4056 ;;      Locals:         0      11       0       0
  4057 ;;      Temps:          0      11       0       0
  4058 ;;      Totals:         0      24       0       0
  4059 ;;Total ram usage:       24 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    8
  4062 ;; This function calls:
  4063 ;;		___awdiv
  4064 ;;		___awmod
  4065 ;; This function is called by:
  4066 ;;		_UpdatePattern
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text17
  4071  000AA2                     __ptext17:
  4072                           	opt stack 0
  4073  000AA2                     _ThinkingPattern:
  4074                           	opt stack 18
  4075                           
  4076                           ;Pattern_RGBPatterns.c: 198: uint8_t head = stepCount;
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;incstack = 0
  4080  000AA2  C069  F07F         	movff	ThinkingPattern@stepCount,ThinkingPattern@head
  4081                           
  4082                           ;Pattern_RGBPatterns.c: 204: hue = 32;
  4083                           
  4084                           ;Pattern_RGBPatterns.c: 203: default:
  4085                           
  4086                           ;Pattern_RGBPatterns.c: 199: uint16_t pixelHSV;
  4087                           ;Pattern_RGBPatterns.c: 200: uint8_t sat, val, hue, x;
  4088                           ;Pattern_RGBPatterns.c: 202: switch(pattern){
  4089  000AA6  0E20               	movlw	32
  4090  000AA8  0100               	movlb	0	; () banked
  4091  000AAA  6F7D               	movwf	ThinkingPattern@hue& (0+255),b
  4092                           
  4093                           ;Pattern_RGBPatterns.c: 205: sat = 0x0F;
  4094  000AAC  0E0F               	movlw	15
  4095  000AAE  0100               	movlb	0	; () banked
  4096  000AB0  6F7B               	movwf	ThinkingPattern@sat& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;Pattern_RGBPatterns.c: 207: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4100  000AB2  0100               	movlb	0	; () banked
  4101  000AB4  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4102  000AB6  0100               	movlb	0	; () banked
  4103  000AB8  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4104  000ABA  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4105  000ABC  0100               	movlb	0	; () banked
  4106  000ABE  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4107  000AC0  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4108  000AC2  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4109  000AC4  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4110  000AC6  0100               	movlb	0	; () banked
  4111  000AC8  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4112  000ACA  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4113  000ACE  0100               	movlb	0	; () banked
  4114  000AD0  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4115  000AD2  0100               	movlb	0	; () banked
  4116  000AD4  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4117  000AD6  0E00               	movlw	0
  4118  000AD8  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4119  000ADA  0100               	movlb	0	; () banked
  4120  000ADC  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4121  000ADE  0100               	movlb	0	; () banked
  4122  000AE0  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4123  000AE2  0100               	movlb	0	; () banked
  4124  000AE4  6F60               	movwf	___awmod@dividend& (0+255),b
  4125  000AE6  0100               	movlb	0	; () banked
  4126  000AE8  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4127  000AEA  0100               	movlb	0	; () banked
  4128  000AEC  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4129  000AEE  0100               	movlb	0	; () banked
  4130  000AF0  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4131  000AF2  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4132  000AF6  0100               	movlb	0	; () banked
  4133  000AF8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4134  000AFA  ECAE  F00F         	call	___awmod	;wreg free
  4135  000AFE  C060  F06E         	movff	?___awmod,??_ThinkingPattern+4
  4136  000B02  C061  F06F         	movff	?___awmod+1,??_ThinkingPattern+5
  4137  000B06  0100               	movlb	0	; () banked
  4138  000B08  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4139  000B0A  0100               	movlb	0	; () banked
  4140  000B0C  6F70               	movwf	(??_ThinkingPattern+6)& (0+255),b
  4141  000B0E  6B71               	clrf	(??_ThinkingPattern+7)& (0+255),b
  4142  000B10  0100               	movlb	0	; () banked
  4143  000B12  1F70               	comf	(??_ThinkingPattern+6)& (0+255),f,b
  4144  000B14  1F71               	comf	(??_ThinkingPattern+7)& (0+255),f,b
  4145  000B16  4B70               	infsnz	(??_ThinkingPattern+6)& (0+255),f,b
  4146  000B18  2B71               	incf	(??_ThinkingPattern+7)& (0+255),f,b
  4147  000B1A  0100               	movlb	0	; () banked
  4148  000B1C  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4149  000B1E  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+8
  4150  000B22  0100               	movlb	0	; () banked
  4151  000B24  6B73               	clrf	(??_ThinkingPattern+9)& (0+255),b
  4152  000B26  0100               	movlb	0	; () banked
  4153  000B28  2772               	addwf	(??_ThinkingPattern+8)& (0+255),f,b
  4154  000B2A  0E00               	movlw	0
  4155  000B2C  2373               	addwfc	(??_ThinkingPattern+9)& (0+255),f,b
  4156  000B2E  0100               	movlb	0	; () banked
  4157  000B30  5170               	movf	(??_ThinkingPattern+6)& (0+255),w,b
  4158  000B32  0100               	movlb	0	; () banked
  4159  000B34  2572               	addwf	(??_ThinkingPattern+8)& (0+255),w,b
  4160  000B36  0100               	movlb	0	; () banked
  4161  000B38  6F60               	movwf	___awmod@dividend& (0+255),b
  4162  000B3A  0100               	movlb	0	; () banked
  4163  000B3C  5171               	movf	(??_ThinkingPattern+7)& (0+255),w,b
  4164  000B3E  0100               	movlb	0	; () banked
  4165  000B40  2173               	addwfc	(??_ThinkingPattern+9)& (0+255),w,b
  4166  000B42  0100               	movlb	0	; () banked
  4167  000B44  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4168  000B46  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4169  000B4A  0100               	movlb	0	; () banked
  4170  000B4C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4171  000B4E  ECAE  F00F         	call	___awmod	;wreg free
  4172  000B52  0100               	movlb	0	; () banked
  4173  000B54  5160               	movf	?___awmod& (0+255),w,b
  4174  000B56  0100               	movlb	0	; () banked
  4175  000B58  5D6E               	subwf	(??_ThinkingPattern+4)& (0+255),w,b
  4176  000B5A  0100               	movlb	0	; () banked
  4177  000B5C  516F               	movf	(??_ThinkingPattern+5)& (0+255),w,b
  4178  000B5E  0A80               	xorlw	128
  4179  000B60  0100               	movlb	0	; () banked
  4180  000B62  6F74               	movwf	(??_ThinkingPattern+10)& (0+255),b
  4181  000B64  0100               	movlb	0	; () banked
  4182  000B66  5161               	movf	(?___awmod+1)& (0+255),w,b
  4183  000B68  0A80               	xorlw	128
  4184  000B6A  0100               	movlb	0	; () banked
  4185  000B6C  5974               	subwfb	(??_ThinkingPattern+10)& (0+255),w,b
  4186  000B6E  A0D8               	btfss	status,0,c
  4187  000B70  D027               	goto	l2974
  4188                           
  4189                           ; BSR set to: 0
  4190  000B72  0100               	movlb	0	; () banked
  4191  000B74  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4192  000B76  0100               	movlb	0	; () banked
  4193  000B78  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4194  000B7A  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4195  000B7C  0100               	movlb	0	; () banked
  4196  000B7E  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4197  000B80  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4198  000B82  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4199  000B84  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4200  000B86  0100               	movlb	0	; () banked
  4201  000B88  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4202  000B8A  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4203  000B8E  0100               	movlb	0	; () banked
  4204  000B90  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4205  000B92  0100               	movlb	0	; () banked
  4206  000B94  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4207  000B96  0E00               	movlw	0
  4208  000B98  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4209  000B9A  0100               	movlb	0	; () banked
  4210  000B9C  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4211  000B9E  0100               	movlb	0	; () banked
  4212  000BA0  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4213  000BA2  0100               	movlb	0	; () banked
  4214  000BA4  6F60               	movwf	___awmod@dividend& (0+255),b
  4215  000BA6  0100               	movlb	0	; () banked
  4216  000BA8  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4217  000BAA  0100               	movlb	0	; () banked
  4218  000BAC  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4219  000BAE  0100               	movlb	0	; () banked
  4220  000BB0  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4221  000BB2  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4222  000BB6  0100               	movlb	0	; () banked
  4223  000BB8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4224  000BBA  ECAE  F00F         	call	___awmod	;wreg free
  4225  000BBE  D026               	goto	L11
  4226  000BC0                     l2974:
  4227  000BC0  0100               	movlb	0	; () banked
  4228  000BC2  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4229  000BC4  0100               	movlb	0	; () banked
  4230  000BC6  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4231  000BC8  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4232  000BCA  0100               	movlb	0	; () banked
  4233  000BCC  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4234  000BCE  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4235  000BD0  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4236  000BD2  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4237  000BD4  0100               	movlb	0	; () banked
  4238  000BD6  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4239  000BD8  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4240  000BDC  0100               	movlb	0	; () banked
  4241  000BDE  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4242  000BE0  0100               	movlb	0	; () banked
  4243  000BE2  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4244  000BE4  0E00               	movlw	0
  4245  000BE6  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4246  000BE8  0100               	movlb	0	; () banked
  4247  000BEA  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4248  000BEC  0100               	movlb	0	; () banked
  4249  000BEE  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4250  000BF0  0100               	movlb	0	; () banked
  4251  000BF2  6F60               	movwf	___awmod@dividend& (0+255),b
  4252  000BF4  0100               	movlb	0	; () banked
  4253  000BF6  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4254  000BF8  0100               	movlb	0	; () banked
  4255  000BFA  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4256  000BFC  0100               	movlb	0	; () banked
  4257  000BFE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4258  000C00  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4259  000C04  0100               	movlb	0	; () banked
  4260  000C06  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4261  000C08  ECAE  F00F         	call	___awmod	;wreg free
  4262  000C0C                     L11:
  4263  000C0C  C060  F077         	movff	?___awmod,_ThinkingPattern$744
  4264  000C10  C061  F078         	movff	?___awmod+1,_ThinkingPattern$744+1
  4265  000C14  C077  F07E         	movff	_ThinkingPattern$744,ThinkingPattern@x
  4266                           
  4267                           ;Pattern_RGBPatterns.c: 208: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4268  000C18  0E04               	movlw	4
  4269  000C1A  0100               	movlb	0	; () banked
  4270  000C1C  657E               	cpfsgt	ThinkingPattern@x& (0+255),b
  4271  000C1E  D006               	goto	l2982
  4272                           
  4273                           ; BSR set to: 0
  4274  000C20  0E00               	movlw	0
  4275  000C22  0100               	movlb	0	; () banked
  4276  000C24  6F7A               	movwf	(_ThinkingPattern$745+1)& (0+255),b
  4277  000C26  0E00               	movlw	0
  4278  000C28  6F79               	movwf	_ThinkingPattern$745& (0+255),b
  4279  000C2A  D01F               	goto	l2984
  4280  000C2C                     l2982:
  4281                           
  4282                           ; BSR set to: 0
  4283  000C2C  0100               	movlb	0	; () banked
  4284  000C2E  517E               	movf	ThinkingPattern@x& (0+255),w,b
  4285  000C30  0D0F               	mullw	15
  4286  000C32  CFF3 F060          	movff	prodl,___awdiv@dividend
  4287  000C36  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4288  000C3A  0E00               	movlw	0
  4289  000C3C  0100               	movlb	0	; () banked
  4290  000C3E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4291  000C40  0E05               	movlw	5
  4292  000C42  6F62               	movwf	___awdiv@divisor& (0+255),b
  4293  000C44  ECEF  F00D         	call	___awdiv	;wreg free
  4294  000C48  0100               	movlb	0	; () banked
  4295  000C4A  1F60               	comf	?___awdiv& (0+255),f,b
  4296  000C4C  0100               	movlb	0	; () banked
  4297  000C4E  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4298  000C50  0100               	movlb	0	; () banked
  4299  000C52  4B60               	infsnz	?___awdiv& (0+255),f,b
  4300  000C54  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4301  000C56  0E0F               	movlw	15
  4302  000C58  0100               	movlb	0	; () banked
  4303  000C5A  2560               	addwf	?___awdiv& (0+255),w,b
  4304  000C5C  0100               	movlb	0	; () banked
  4305  000C5E  6F79               	movwf	_ThinkingPattern$745& (0+255),b
  4306  000C60  0E00               	movlw	0
  4307  000C62  0100               	movlb	0	; () banked
  4308  000C64  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4309  000C66  0100               	movlb	0	; () banked
  4310  000C68  6F7A               	movwf	(_ThinkingPattern$745+1)& (0+255),b
  4311  000C6A                     l2984:
  4312                           
  4313                           ; BSR set to: 0
  4314  000C6A  C079  F07C         	movff	_ThinkingPattern$745,ThinkingPattern@val
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;Pattern_RGBPatterns.c: 212: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4318                           
  4319                           ; BSR set to: 0
  4320                           
  4321                           ; BSR set to: 0
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;Pattern_RGBPatterns.c: 210: }
  4325                           
  4326                           ;Pattern_RGBPatterns.c: 209: break;
  4327  000C6E  0100               	movlb	0	; () banked
  4328  000C70  517B               	movf	ThinkingPattern@sat& (0+255),w,b
  4329  000C72  0100               	movlb	0	; () banked
  4330  000C74  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4331  000C76  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4332  000C78  0100               	movlb	0	; () banked
  4333  000C7A  3B6A               	swapf	??_ThinkingPattern& (0+255),f,b
  4334  000C7C  3B6B               	swapf	(??_ThinkingPattern+1)& (0+255),f,b
  4335  000C7E  0EF0               	movlw	240
  4336  000C80  176B               	andwf	(??_ThinkingPattern+1)& (0+255),f,b
  4337  000C82  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4338  000C84  0B0F               	andlw	15
  4339  000C86  136B               	iorwf	(??_ThinkingPattern+1)& (0+255),f,b
  4340  000C88  0EF0               	movlw	240
  4341  000C8A  176A               	andwf	??_ThinkingPattern& (0+255),f,b
  4342  000C8C  0100               	movlb	0	; () banked
  4343  000C8E  517D               	movf	ThinkingPattern@hue& (0+255),w,b
  4344  000C90  0100               	movlb	0	; () banked
  4345  000C92  6F6D               	movwf	(??_ThinkingPattern+3)& (0+255),b
  4346  000C94  6B6C               	clrf	(??_ThinkingPattern+2)& (0+255),b
  4347  000C96  0100               	movlb	0	; () banked
  4348  000C98  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4349  000C9A  0100               	movlb	0	; () banked
  4350  000C9C  136C               	iorwf	(??_ThinkingPattern+2)& (0+255),f,b
  4351  000C9E  0100               	movlb	0	; () banked
  4352  000CA0  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4353  000CA2  0100               	movlb	0	; () banked
  4354  000CA4  136D               	iorwf	(??_ThinkingPattern+3)& (0+255),f,b
  4355  000CA6  0100               	movlb	0	; () banked
  4356  000CA8  517C               	movf	ThinkingPattern@val& (0+255),w,b
  4357  000CAA  0100               	movlb	0	; () banked
  4358  000CAC  116C               	iorwf	(??_ThinkingPattern+2)& (0+255),w,b
  4359  000CAE  0100               	movlb	0	; () banked
  4360  000CB0  6F75               	movwf	ThinkingPattern@pixelHSV& (0+255),b
  4361  000CB2  0100               	movlb	0	; () banked
  4362  000CB4  516D               	movf	(??_ThinkingPattern+3)& (0+255),w,b
  4363  000CB6  0100               	movlb	0	; () banked
  4364  000CB8  6F76               	movwf	(ThinkingPattern@pixelHSV+1)& (0+255),b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;Pattern_RGBPatterns.c: 214: return pixelHSV;
  4368  000CBA  C075  F068         	movff	ThinkingPattern@pixelHSV,?_ThinkingPattern
  4369  000CBE  C076  F069         	movff	ThinkingPattern@pixelHSV+1,?_ThinkingPattern+1
  4370  000CC2  0012               	return	
  4371  000CC4                     __end_of_ThinkingPattern:
  4372                           	opt stack 0
  4373                           tosu	equ	0xFFF
  4374                           tosh	equ	0xFFE
  4375                           tosl	equ	0xFFD
  4376                           pclath	equ	0xFFA
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _SpeakingPattern *****************
  4396 ;; Defined at:
  4397 ;;		line 237 in file "Pattern_RGBPatterns.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  pattern         1    wreg     unsigned char 
  4400 ;;  pixel           1    8[BANK0 ] unsigned char 
  4401 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  pattern         1    0[COMRAM] unsigned char 
  4404 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4405 ;;  head            1   31[BANK0 ] unsigned char 
  4406 ;;  x               1   30[BANK0 ] unsigned char 
  4407 ;;  hue             1   29[BANK0 ] unsigned char 
  4408 ;;  val             1   28[BANK0 ] unsigned char 
  4409 ;;  sat             1   27[BANK0 ] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  2    8[BANK0 ] unsigned int 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4419 ;;      Params:         0       2       0       0
  4420 ;;      Locals:         0      11       0       0
  4421 ;;      Temps:          0      11       0       0
  4422 ;;      Totals:         0      24       0       0
  4423 ;;Total ram usage:       24 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    8
  4426 ;; This function calls:
  4427 ;;		___awdiv
  4428 ;;		___awmod
  4429 ;; This function is called by:
  4430 ;;		_UpdatePattern
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text18
  4435  000CC4                     __ptext18:
  4436                           	opt stack 0
  4437  000CC4                     _SpeakingPattern:
  4438                           	opt stack 18
  4439                           
  4440                           ;Pattern_RGBPatterns.c: 238: uint8_t head = stepCount;
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;incstack = 0
  4444  000CC4  C069  F07F         	movff	SpeakingPattern@stepCount,SpeakingPattern@head
  4445                           
  4446                           ;Pattern_RGBPatterns.c: 244: hue = 170;
  4447                           
  4448                           ;Pattern_RGBPatterns.c: 243: default:
  4449                           
  4450                           ;Pattern_RGBPatterns.c: 239: uint16_t pixelHSV;
  4451                           ;Pattern_RGBPatterns.c: 240: uint8_t sat, val, hue, x;
  4452                           ;Pattern_RGBPatterns.c: 242: switch(pattern){
  4453  000CC8  0EAA               	movlw	170
  4454  000CCA  0100               	movlb	0	; () banked
  4455  000CCC  6F7D               	movwf	SpeakingPattern@hue& (0+255),b
  4456                           
  4457                           ;Pattern_RGBPatterns.c: 245: sat = 0x0F;
  4458  000CCE  0E0F               	movlw	15
  4459  000CD0  0100               	movlb	0	; () banked
  4460  000CD2  6F7B               	movwf	SpeakingPattern@sat& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;Pattern_RGBPatterns.c: 247: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4464  000CD4  0100               	movlb	0	; () banked
  4465  000CD6  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4466  000CD8  0100               	movlb	0	; () banked
  4467  000CDA  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4468  000CDC  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4469  000CDE  0100               	movlb	0	; () banked
  4470  000CE0  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4471  000CE2  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4472  000CE4  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4473  000CE6  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4474  000CE8  0100               	movlb	0	; () banked
  4475  000CEA  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4476  000CEC  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4477  000CF0  0100               	movlb	0	; () banked
  4478  000CF2  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4479  000CF4  0100               	movlb	0	; () banked
  4480  000CF6  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4481  000CF8  0E00               	movlw	0
  4482  000CFA  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4483  000CFC  0100               	movlb	0	; () banked
  4484  000CFE  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4485  000D00  0100               	movlb	0	; () banked
  4486  000D02  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4487  000D04  0100               	movlb	0	; () banked
  4488  000D06  6F60               	movwf	___awmod@dividend& (0+255),b
  4489  000D08  0100               	movlb	0	; () banked
  4490  000D0A  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4491  000D0C  0100               	movlb	0	; () banked
  4492  000D0E  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4493  000D10  0100               	movlb	0	; () banked
  4494  000D12  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4495  000D14  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4496  000D18  0100               	movlb	0	; () banked
  4497  000D1A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4498  000D1C  ECAE  F00F         	call	___awmod	;wreg free
  4499  000D20  C060  F06E         	movff	?___awmod,??_SpeakingPattern+4
  4500  000D24  C061  F06F         	movff	?___awmod+1,??_SpeakingPattern+5
  4501  000D28  0100               	movlb	0	; () banked
  4502  000D2A  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4503  000D2C  0100               	movlb	0	; () banked
  4504  000D2E  6F70               	movwf	(??_SpeakingPattern+6)& (0+255),b
  4505  000D30  6B71               	clrf	(??_SpeakingPattern+7)& (0+255),b
  4506  000D32  0100               	movlb	0	; () banked
  4507  000D34  1F70               	comf	(??_SpeakingPattern+6)& (0+255),f,b
  4508  000D36  1F71               	comf	(??_SpeakingPattern+7)& (0+255),f,b
  4509  000D38  4B70               	infsnz	(??_SpeakingPattern+6)& (0+255),f,b
  4510  000D3A  2B71               	incf	(??_SpeakingPattern+7)& (0+255),f,b
  4511  000D3C  0100               	movlb	0	; () banked
  4512  000D3E  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4513  000D40  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+8
  4514  000D44  0100               	movlb	0	; () banked
  4515  000D46  6B73               	clrf	(??_SpeakingPattern+9)& (0+255),b
  4516  000D48  0100               	movlb	0	; () banked
  4517  000D4A  2772               	addwf	(??_SpeakingPattern+8)& (0+255),f,b
  4518  000D4C  0E00               	movlw	0
  4519  000D4E  2373               	addwfc	(??_SpeakingPattern+9)& (0+255),f,b
  4520  000D50  0100               	movlb	0	; () banked
  4521  000D52  5170               	movf	(??_SpeakingPattern+6)& (0+255),w,b
  4522  000D54  0100               	movlb	0	; () banked
  4523  000D56  2572               	addwf	(??_SpeakingPattern+8)& (0+255),w,b
  4524  000D58  0100               	movlb	0	; () banked
  4525  000D5A  6F60               	movwf	___awmod@dividend& (0+255),b
  4526  000D5C  0100               	movlb	0	; () banked
  4527  000D5E  5171               	movf	(??_SpeakingPattern+7)& (0+255),w,b
  4528  000D60  0100               	movlb	0	; () banked
  4529  000D62  2173               	addwfc	(??_SpeakingPattern+9)& (0+255),w,b
  4530  000D64  0100               	movlb	0	; () banked
  4531  000D66  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4532  000D68  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4533  000D6C  0100               	movlb	0	; () banked
  4534  000D6E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4535  000D70  ECAE  F00F         	call	___awmod	;wreg free
  4536  000D74  0100               	movlb	0	; () banked
  4537  000D76  5160               	movf	?___awmod& (0+255),w,b
  4538  000D78  0100               	movlb	0	; () banked
  4539  000D7A  5D6E               	subwf	(??_SpeakingPattern+4)& (0+255),w,b
  4540  000D7C  0100               	movlb	0	; () banked
  4541  000D7E  516F               	movf	(??_SpeakingPattern+5)& (0+255),w,b
  4542  000D80  0A80               	xorlw	128
  4543  000D82  0100               	movlb	0	; () banked
  4544  000D84  6F74               	movwf	(??_SpeakingPattern+10)& (0+255),b
  4545  000D86  0100               	movlb	0	; () banked
  4546  000D88  5161               	movf	(?___awmod+1)& (0+255),w,b
  4547  000D8A  0A80               	xorlw	128
  4548  000D8C  0100               	movlb	0	; () banked
  4549  000D8E  5974               	subwfb	(??_SpeakingPattern+10)& (0+255),w,b
  4550  000D90  A0D8               	btfss	status,0,c
  4551  000D92  D027               	goto	l3002
  4552                           
  4553                           ; BSR set to: 0
  4554  000D94  0100               	movlb	0	; () banked
  4555  000D96  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4556  000D98  0100               	movlb	0	; () banked
  4557  000D9A  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4558  000D9C  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4559  000D9E  0100               	movlb	0	; () banked
  4560  000DA0  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4561  000DA2  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4562  000DA4  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4563  000DA6  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4564  000DA8  0100               	movlb	0	; () banked
  4565  000DAA  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4566  000DAC  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4567  000DB0  0100               	movlb	0	; () banked
  4568  000DB2  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4569  000DB4  0100               	movlb	0	; () banked
  4570  000DB6  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4571  000DB8  0E00               	movlw	0
  4572  000DBA  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4573  000DBC  0100               	movlb	0	; () banked
  4574  000DBE  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4575  000DC0  0100               	movlb	0	; () banked
  4576  000DC2  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4577  000DC4  0100               	movlb	0	; () banked
  4578  000DC6  6F60               	movwf	___awmod@dividend& (0+255),b
  4579  000DC8  0100               	movlb	0	; () banked
  4580  000DCA  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4581  000DCC  0100               	movlb	0	; () banked
  4582  000DCE  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4583  000DD0  0100               	movlb	0	; () banked
  4584  000DD2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4585  000DD4  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4586  000DD8  0100               	movlb	0	; () banked
  4587  000DDA  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4588  000DDC  ECAE  F00F         	call	___awmod	;wreg free
  4589  000DE0  D026               	goto	L12
  4590  000DE2                     l3002:
  4591  000DE2  0100               	movlb	0	; () banked
  4592  000DE4  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4593  000DE6  0100               	movlb	0	; () banked
  4594  000DE8  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4595  000DEA  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4596  000DEC  0100               	movlb	0	; () banked
  4597  000DEE  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4598  000DF0  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4599  000DF2  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4600  000DF4  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4601  000DF6  0100               	movlb	0	; () banked
  4602  000DF8  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4603  000DFA  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4604  000DFE  0100               	movlb	0	; () banked
  4605  000E00  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4606  000E02  0100               	movlb	0	; () banked
  4607  000E04  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4608  000E06  0E00               	movlw	0
  4609  000E08  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4610  000E0A  0100               	movlb	0	; () banked
  4611  000E0C  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4612  000E0E  0100               	movlb	0	; () banked
  4613  000E10  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4614  000E12  0100               	movlb	0	; () banked
  4615  000E14  6F60               	movwf	___awmod@dividend& (0+255),b
  4616  000E16  0100               	movlb	0	; () banked
  4617  000E18  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4618  000E1A  0100               	movlb	0	; () banked
  4619  000E1C  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4620  000E1E  0100               	movlb	0	; () banked
  4621  000E20  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4622  000E22  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4623  000E26  0100               	movlb	0	; () banked
  4624  000E28  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4625  000E2A  ECAE  F00F         	call	___awmod	;wreg free
  4626  000E2E                     L12:
  4627  000E2E  C060  F077         	movff	?___awmod,_SpeakingPattern$768
  4628  000E32  C061  F078         	movff	?___awmod+1,_SpeakingPattern$768+1
  4629  000E36  C077  F07E         	movff	_SpeakingPattern$768,SpeakingPattern@x
  4630                           
  4631                           ;Pattern_RGBPatterns.c: 248: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4632  000E3A  0E04               	movlw	4
  4633  000E3C  0100               	movlb	0	; () banked
  4634  000E3E  657E               	cpfsgt	SpeakingPattern@x& (0+255),b
  4635  000E40  D006               	goto	l3010
  4636                           
  4637                           ; BSR set to: 0
  4638  000E42  0E00               	movlw	0
  4639  000E44  0100               	movlb	0	; () banked
  4640  000E46  6F7A               	movwf	(_SpeakingPattern$769+1)& (0+255),b
  4641  000E48  0E00               	movlw	0
  4642  000E4A  6F79               	movwf	_SpeakingPattern$769& (0+255),b
  4643  000E4C  D01F               	goto	l3012
  4644  000E4E                     l3010:
  4645                           
  4646                           ; BSR set to: 0
  4647  000E4E  0100               	movlb	0	; () banked
  4648  000E50  517E               	movf	SpeakingPattern@x& (0+255),w,b
  4649  000E52  0D0F               	mullw	15
  4650  000E54  CFF3 F060          	movff	prodl,___awdiv@dividend
  4651  000E58  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4652  000E5C  0E00               	movlw	0
  4653  000E5E  0100               	movlb	0	; () banked
  4654  000E60  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4655  000E62  0E05               	movlw	5
  4656  000E64  6F62               	movwf	___awdiv@divisor& (0+255),b
  4657  000E66  ECEF  F00D         	call	___awdiv	;wreg free
  4658  000E6A  0100               	movlb	0	; () banked
  4659  000E6C  1F60               	comf	?___awdiv& (0+255),f,b
  4660  000E6E  0100               	movlb	0	; () banked
  4661  000E70  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4662  000E72  0100               	movlb	0	; () banked
  4663  000E74  4B60               	infsnz	?___awdiv& (0+255),f,b
  4664  000E76  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4665  000E78  0E0F               	movlw	15
  4666  000E7A  0100               	movlb	0	; () banked
  4667  000E7C  2560               	addwf	?___awdiv& (0+255),w,b
  4668  000E7E  0100               	movlb	0	; () banked
  4669  000E80  6F79               	movwf	_SpeakingPattern$769& (0+255),b
  4670  000E82  0E00               	movlw	0
  4671  000E84  0100               	movlb	0	; () banked
  4672  000E86  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4673  000E88  0100               	movlb	0	; () banked
  4674  000E8A  6F7A               	movwf	(_SpeakingPattern$769+1)& (0+255),b
  4675  000E8C                     l3012:
  4676                           
  4677                           ; BSR set to: 0
  4678  000E8C  C079  F07C         	movff	_SpeakingPattern$769,SpeakingPattern@val
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;Pattern_RGBPatterns.c: 252: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4682                           
  4683                           ; BSR set to: 0
  4684                           
  4685                           ; BSR set to: 0
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;Pattern_RGBPatterns.c: 250: }
  4689                           
  4690                           ;Pattern_RGBPatterns.c: 249: break;
  4691  000E90  0100               	movlb	0	; () banked
  4692  000E92  517B               	movf	SpeakingPattern@sat& (0+255),w,b
  4693  000E94  0100               	movlb	0	; () banked
  4694  000E96  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4695  000E98  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4696  000E9A  0100               	movlb	0	; () banked
  4697  000E9C  3B6A               	swapf	??_SpeakingPattern& (0+255),f,b
  4698  000E9E  3B6B               	swapf	(??_SpeakingPattern+1)& (0+255),f,b
  4699  000EA0  0EF0               	movlw	240
  4700  000EA2  176B               	andwf	(??_SpeakingPattern+1)& (0+255),f,b
  4701  000EA4  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4702  000EA6  0B0F               	andlw	15
  4703  000EA8  136B               	iorwf	(??_SpeakingPattern+1)& (0+255),f,b
  4704  000EAA  0EF0               	movlw	240
  4705  000EAC  176A               	andwf	??_SpeakingPattern& (0+255),f,b
  4706  000EAE  0100               	movlb	0	; () banked
  4707  000EB0  517D               	movf	SpeakingPattern@hue& (0+255),w,b
  4708  000EB2  0100               	movlb	0	; () banked
  4709  000EB4  6F6D               	movwf	(??_SpeakingPattern+3)& (0+255),b
  4710  000EB6  6B6C               	clrf	(??_SpeakingPattern+2)& (0+255),b
  4711  000EB8  0100               	movlb	0	; () banked
  4712  000EBA  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4713  000EBC  0100               	movlb	0	; () banked
  4714  000EBE  136C               	iorwf	(??_SpeakingPattern+2)& (0+255),f,b
  4715  000EC0  0100               	movlb	0	; () banked
  4716  000EC2  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4717  000EC4  0100               	movlb	0	; () banked
  4718  000EC6  136D               	iorwf	(??_SpeakingPattern+3)& (0+255),f,b
  4719  000EC8  0100               	movlb	0	; () banked
  4720  000ECA  517C               	movf	SpeakingPattern@val& (0+255),w,b
  4721  000ECC  0100               	movlb	0	; () banked
  4722  000ECE  116C               	iorwf	(??_SpeakingPattern+2)& (0+255),w,b
  4723  000ED0  0100               	movlb	0	; () banked
  4724  000ED2  6F75               	movwf	SpeakingPattern@pixelHSV& (0+255),b
  4725  000ED4  0100               	movlb	0	; () banked
  4726  000ED6  516D               	movf	(??_SpeakingPattern+3)& (0+255),w,b
  4727  000ED8  0100               	movlb	0	; () banked
  4728  000EDA  6F76               	movwf	(SpeakingPattern@pixelHSV+1)& (0+255),b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;Pattern_RGBPatterns.c: 254: return pixelHSV;
  4732  000EDC  C075  F068         	movff	SpeakingPattern@pixelHSV,?_SpeakingPattern
  4733  000EE0  C076  F069         	movff	SpeakingPattern@pixelHSV+1,?_SpeakingPattern+1
  4734  000EE4  0012               	return	
  4735  000EE6                     __end_of_SpeakingPattern:
  4736                           	opt stack 0
  4737                           tosu	equ	0xFFF
  4738                           tosh	equ	0xFFE
  4739                           tosl	equ	0xFFD
  4740                           pclath	equ	0xFFA
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           postdec1	equ	0xFE5
  4750                           fsr1h	equ	0xFE2
  4751                           fsr1l	equ	0xFE1
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _ListeningPattern *****************
  4760 ;; Defined at:
  4761 ;;		line 217 in file "Pattern_RGBPatterns.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  pattern         1    wreg     unsigned char 
  4764 ;;  pixel           1    8[BANK0 ] unsigned char 
  4765 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  pattern         1    0[COMRAM] unsigned char 
  4768 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4769 ;;  head            1   31[BANK0 ] unsigned char 
  4770 ;;  x               1   30[BANK0 ] unsigned char 
  4771 ;;  hue             1   29[BANK0 ] unsigned char 
  4772 ;;  val             1   28[BANK0 ] unsigned char 
  4773 ;;  sat             1   27[BANK0 ] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  2    8[BANK0 ] unsigned int 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4783 ;;      Params:         0       2       0       0
  4784 ;;      Locals:         0      11       0       0
  4785 ;;      Temps:          0      11       0       0
  4786 ;;      Totals:         0      24       0       0
  4787 ;;Total ram usage:       24 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    8
  4790 ;; This function calls:
  4791 ;;		___awdiv
  4792 ;;		___awmod
  4793 ;; This function is called by:
  4794 ;;		_UpdatePattern
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text19
  4799  000EE6                     __ptext19:
  4800                           	opt stack 0
  4801  000EE6                     _ListeningPattern:
  4802                           	opt stack 18
  4803                           
  4804                           ;Pattern_RGBPatterns.c: 218: uint8_t head = stepCount;
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;incstack = 0
  4808  000EE6  C069  F07F         	movff	ListeningPattern@stepCount,ListeningPattern@head
  4809                           
  4810                           ;Pattern_RGBPatterns.c: 224: hue = 85;
  4811                           
  4812                           ;Pattern_RGBPatterns.c: 223: default:
  4813                           
  4814                           ;Pattern_RGBPatterns.c: 219: uint16_t pixelHSV;
  4815                           ;Pattern_RGBPatterns.c: 220: uint8_t sat, val, hue, x;
  4816                           ;Pattern_RGBPatterns.c: 222: switch(pattern){
  4817  000EEA  0E55               	movlw	85
  4818  000EEC  0100               	movlb	0	; () banked
  4819  000EEE  6F7D               	movwf	ListeningPattern@hue& (0+255),b
  4820                           
  4821                           ;Pattern_RGBPatterns.c: 225: sat = 0x0F;
  4822  000EF0  0E0F               	movlw	15
  4823  000EF2  0100               	movlb	0	; () banked
  4824  000EF4  6F7B               	movwf	ListeningPattern@sat& (0+255),b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;Pattern_RGBPatterns.c: 227: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4828  000EF6  0100               	movlb	0	; () banked
  4829  000EF8  517F               	movf	ListeningPattern@head& (0+255),w,b
  4830  000EFA  0100               	movlb	0	; () banked
  4831  000EFC  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4832  000EFE  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4833  000F00  0100               	movlb	0	; () banked
  4834  000F02  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4835  000F04  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4836  000F06  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4837  000F08  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4838  000F0A  0100               	movlb	0	; () banked
  4839  000F0C  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4840  000F0E  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4841  000F12  0100               	movlb	0	; () banked
  4842  000F14  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4843  000F16  0100               	movlb	0	; () banked
  4844  000F18  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4845  000F1A  0E00               	movlw	0
  4846  000F1C  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4847  000F1E  0100               	movlb	0	; () banked
  4848  000F20  516A               	movf	??_ListeningPattern& (0+255),w,b
  4849  000F22  0100               	movlb	0	; () banked
  4850  000F24  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4851  000F26  0100               	movlb	0	; () banked
  4852  000F28  6F60               	movwf	___awmod@dividend& (0+255),b
  4853  000F2A  0100               	movlb	0	; () banked
  4854  000F2C  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4855  000F2E  0100               	movlb	0	; () banked
  4856  000F30  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4857  000F32  0100               	movlb	0	; () banked
  4858  000F34  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4859  000F36  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4860  000F3A  0100               	movlb	0	; () banked
  4861  000F3C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4862  000F3E  ECAE  F00F         	call	___awmod	;wreg free
  4863  000F42  C060  F06E         	movff	?___awmod,??_ListeningPattern+4
  4864  000F46  C061  F06F         	movff	?___awmod+1,??_ListeningPattern+5
  4865  000F4A  0100               	movlb	0	; () banked
  4866  000F4C  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4867  000F4E  0100               	movlb	0	; () banked
  4868  000F50  6F70               	movwf	(??_ListeningPattern+6)& (0+255),b
  4869  000F52  6B71               	clrf	(??_ListeningPattern+7)& (0+255),b
  4870  000F54  0100               	movlb	0	; () banked
  4871  000F56  1F70               	comf	(??_ListeningPattern+6)& (0+255),f,b
  4872  000F58  1F71               	comf	(??_ListeningPattern+7)& (0+255),f,b
  4873  000F5A  4B70               	infsnz	(??_ListeningPattern+6)& (0+255),f,b
  4874  000F5C  2B71               	incf	(??_ListeningPattern+7)& (0+255),f,b
  4875  000F5E  0100               	movlb	0	; () banked
  4876  000F60  517F               	movf	ListeningPattern@head& (0+255),w,b
  4877  000F62  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+8
  4878  000F66  0100               	movlb	0	; () banked
  4879  000F68  6B73               	clrf	(??_ListeningPattern+9)& (0+255),b
  4880  000F6A  0100               	movlb	0	; () banked
  4881  000F6C  2772               	addwf	(??_ListeningPattern+8)& (0+255),f,b
  4882  000F6E  0E00               	movlw	0
  4883  000F70  2373               	addwfc	(??_ListeningPattern+9)& (0+255),f,b
  4884  000F72  0100               	movlb	0	; () banked
  4885  000F74  5170               	movf	(??_ListeningPattern+6)& (0+255),w,b
  4886  000F76  0100               	movlb	0	; () banked
  4887  000F78  2572               	addwf	(??_ListeningPattern+8)& (0+255),w,b
  4888  000F7A  0100               	movlb	0	; () banked
  4889  000F7C  6F60               	movwf	___awmod@dividend& (0+255),b
  4890  000F7E  0100               	movlb	0	; () banked
  4891  000F80  5171               	movf	(??_ListeningPattern+7)& (0+255),w,b
  4892  000F82  0100               	movlb	0	; () banked
  4893  000F84  2173               	addwfc	(??_ListeningPattern+9)& (0+255),w,b
  4894  000F86  0100               	movlb	0	; () banked
  4895  000F88  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4896  000F8A  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4897  000F8E  0100               	movlb	0	; () banked
  4898  000F90  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4899  000F92  ECAE  F00F         	call	___awmod	;wreg free
  4900  000F96  0100               	movlb	0	; () banked
  4901  000F98  5160               	movf	?___awmod& (0+255),w,b
  4902  000F9A  0100               	movlb	0	; () banked
  4903  000F9C  5D6E               	subwf	(??_ListeningPattern+4)& (0+255),w,b
  4904  000F9E  0100               	movlb	0	; () banked
  4905  000FA0  516F               	movf	(??_ListeningPattern+5)& (0+255),w,b
  4906  000FA2  0A80               	xorlw	128
  4907  000FA4  0100               	movlb	0	; () banked
  4908  000FA6  6F74               	movwf	(??_ListeningPattern+10)& (0+255),b
  4909  000FA8  0100               	movlb	0	; () banked
  4910  000FAA  5161               	movf	(?___awmod+1)& (0+255),w,b
  4911  000FAC  0A80               	xorlw	128
  4912  000FAE  0100               	movlb	0	; () banked
  4913  000FB0  5974               	subwfb	(??_ListeningPattern+10)& (0+255),w,b
  4914  000FB2  A0D8               	btfss	status,0,c
  4915  000FB4  D027               	goto	l3030
  4916                           
  4917                           ; BSR set to: 0
  4918  000FB6  0100               	movlb	0	; () banked
  4919  000FB8  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4920  000FBA  0100               	movlb	0	; () banked
  4921  000FBC  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4922  000FBE  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4923  000FC0  0100               	movlb	0	; () banked
  4924  000FC2  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4925  000FC4  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4926  000FC6  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4927  000FC8  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4928  000FCA  0100               	movlb	0	; () banked
  4929  000FCC  517F               	movf	ListeningPattern@head& (0+255),w,b
  4930  000FCE  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4931  000FD2  0100               	movlb	0	; () banked
  4932  000FD4  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4933  000FD6  0100               	movlb	0	; () banked
  4934  000FD8  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4935  000FDA  0E00               	movlw	0
  4936  000FDC  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4937  000FDE  0100               	movlb	0	; () banked
  4938  000FE0  516A               	movf	??_ListeningPattern& (0+255),w,b
  4939  000FE2  0100               	movlb	0	; () banked
  4940  000FE4  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4941  000FE6  0100               	movlb	0	; () banked
  4942  000FE8  6F60               	movwf	___awmod@dividend& (0+255),b
  4943  000FEA  0100               	movlb	0	; () banked
  4944  000FEC  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4945  000FEE  0100               	movlb	0	; () banked
  4946  000FF0  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4947  000FF2  0100               	movlb	0	; () banked
  4948  000FF4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4949  000FF6  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4950  000FFA  0100               	movlb	0	; () banked
  4951  000FFC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4952  000FFE  ECAE  F00F         	call	___awmod	;wreg free
  4953  001002  D026               	goto	L13
  4954  001004                     l3030:
  4955  001004  0100               	movlb	0	; () banked
  4956  001006  517F               	movf	ListeningPattern@head& (0+255),w,b
  4957  001008  0100               	movlb	0	; () banked
  4958  00100A  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4959  00100C  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4960  00100E  0100               	movlb	0	; () banked
  4961  001010  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4962  001012  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4963  001014  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4964  001016  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4965  001018  0100               	movlb	0	; () banked
  4966  00101A  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4967  00101C  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4968  001020  0100               	movlb	0	; () banked
  4969  001022  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4970  001024  0100               	movlb	0	; () banked
  4971  001026  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4972  001028  0E00               	movlw	0
  4973  00102A  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4974  00102C  0100               	movlb	0	; () banked
  4975  00102E  516A               	movf	??_ListeningPattern& (0+255),w,b
  4976  001030  0100               	movlb	0	; () banked
  4977  001032  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4978  001034  0100               	movlb	0	; () banked
  4979  001036  6F60               	movwf	___awmod@dividend& (0+255),b
  4980  001038  0100               	movlb	0	; () banked
  4981  00103A  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4982  00103C  0100               	movlb	0	; () banked
  4983  00103E  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4984  001040  0100               	movlb	0	; () banked
  4985  001042  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4986  001044  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4987  001048  0100               	movlb	0	; () banked
  4988  00104A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4989  00104C  ECAE  F00F         	call	___awmod	;wreg free
  4990  001050                     L13:
  4991  001050  C060  F077         	movff	?___awmod,_ListeningPattern$756
  4992  001054  C061  F078         	movff	?___awmod+1,_ListeningPattern$756+1
  4993  001058  C077  F07E         	movff	_ListeningPattern$756,ListeningPattern@x
  4994                           
  4995                           ;Pattern_RGBPatterns.c: 228: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4996  00105C  0E04               	movlw	4
  4997  00105E  0100               	movlb	0	; () banked
  4998  001060  657E               	cpfsgt	ListeningPattern@x& (0+255),b
  4999  001062  D006               	goto	l3038
  5000                           
  5001                           ; BSR set to: 0
  5002  001064  0E00               	movlw	0
  5003  001066  0100               	movlb	0	; () banked
  5004  001068  6F7A               	movwf	(_ListeningPattern$757+1)& (0+255),b
  5005  00106A  0E00               	movlw	0
  5006  00106C  6F79               	movwf	_ListeningPattern$757& (0+255),b
  5007  00106E  D01F               	goto	l3040
  5008  001070                     l3038:
  5009                           
  5010                           ; BSR set to: 0
  5011  001070  0100               	movlb	0	; () banked
  5012  001072  517E               	movf	ListeningPattern@x& (0+255),w,b
  5013  001074  0D0F               	mullw	15
  5014  001076  CFF3 F060          	movff	prodl,___awdiv@dividend
  5015  00107A  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5016  00107E  0E00               	movlw	0
  5017  001080  0100               	movlb	0	; () banked
  5018  001082  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5019  001084  0E05               	movlw	5
  5020  001086  6F62               	movwf	___awdiv@divisor& (0+255),b
  5021  001088  ECEF  F00D         	call	___awdiv	;wreg free
  5022  00108C  0100               	movlb	0	; () banked
  5023  00108E  1F60               	comf	?___awdiv& (0+255),f,b
  5024  001090  0100               	movlb	0	; () banked
  5025  001092  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5026  001094  0100               	movlb	0	; () banked
  5027  001096  4B60               	infsnz	?___awdiv& (0+255),f,b
  5028  001098  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5029  00109A  0E0F               	movlw	15
  5030  00109C  0100               	movlb	0	; () banked
  5031  00109E  2560               	addwf	?___awdiv& (0+255),w,b
  5032  0010A0  0100               	movlb	0	; () banked
  5033  0010A2  6F79               	movwf	_ListeningPattern$757& (0+255),b
  5034  0010A4  0E00               	movlw	0
  5035  0010A6  0100               	movlb	0	; () banked
  5036  0010A8  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5037  0010AA  0100               	movlb	0	; () banked
  5038  0010AC  6F7A               	movwf	(_ListeningPattern$757+1)& (0+255),b
  5039  0010AE                     l3040:
  5040                           
  5041                           ; BSR set to: 0
  5042  0010AE  C079  F07C         	movff	_ListeningPattern$757,ListeningPattern@val
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;Pattern_RGBPatterns.c: 232: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  5046                           
  5047                           ; BSR set to: 0
  5048                           
  5049                           ; BSR set to: 0
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;Pattern_RGBPatterns.c: 230: }
  5053                           
  5054                           ;Pattern_RGBPatterns.c: 229: break;
  5055  0010B2  0100               	movlb	0	; () banked
  5056  0010B4  517B               	movf	ListeningPattern@sat& (0+255),w,b
  5057  0010B6  0100               	movlb	0	; () banked
  5058  0010B8  6F6A               	movwf	??_ListeningPattern& (0+255),b
  5059  0010BA  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  5060  0010BC  0100               	movlb	0	; () banked
  5061  0010BE  3B6A               	swapf	??_ListeningPattern& (0+255),f,b
  5062  0010C0  3B6B               	swapf	(??_ListeningPattern+1)& (0+255),f,b
  5063  0010C2  0EF0               	movlw	240
  5064  0010C4  176B               	andwf	(??_ListeningPattern+1)& (0+255),f,b
  5065  0010C6  516A               	movf	??_ListeningPattern& (0+255),w,b
  5066  0010C8  0B0F               	andlw	15
  5067  0010CA  136B               	iorwf	(??_ListeningPattern+1)& (0+255),f,b
  5068  0010CC  0EF0               	movlw	240
  5069  0010CE  176A               	andwf	??_ListeningPattern& (0+255),f,b
  5070  0010D0  0100               	movlb	0	; () banked
  5071  0010D2  517D               	movf	ListeningPattern@hue& (0+255),w,b
  5072  0010D4  0100               	movlb	0	; () banked
  5073  0010D6  6F6D               	movwf	(??_ListeningPattern+3)& (0+255),b
  5074  0010D8  6B6C               	clrf	(??_ListeningPattern+2)& (0+255),b
  5075  0010DA  0100               	movlb	0	; () banked
  5076  0010DC  516A               	movf	??_ListeningPattern& (0+255),w,b
  5077  0010DE  0100               	movlb	0	; () banked
  5078  0010E0  136C               	iorwf	(??_ListeningPattern+2)& (0+255),f,b
  5079  0010E2  0100               	movlb	0	; () banked
  5080  0010E4  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  5081  0010E6  0100               	movlb	0	; () banked
  5082  0010E8  136D               	iorwf	(??_ListeningPattern+3)& (0+255),f,b
  5083  0010EA  0100               	movlb	0	; () banked
  5084  0010EC  517C               	movf	ListeningPattern@val& (0+255),w,b
  5085  0010EE  0100               	movlb	0	; () banked
  5086  0010F0  116C               	iorwf	(??_ListeningPattern+2)& (0+255),w,b
  5087  0010F2  0100               	movlb	0	; () banked
  5088  0010F4  6F75               	movwf	ListeningPattern@pixelHSV& (0+255),b
  5089  0010F6  0100               	movlb	0	; () banked
  5090  0010F8  516D               	movf	(??_ListeningPattern+3)& (0+255),w,b
  5091  0010FA  0100               	movlb	0	; () banked
  5092  0010FC  6F76               	movwf	(ListeningPattern@pixelHSV+1)& (0+255),b
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;Pattern_RGBPatterns.c: 234: return pixelHSV;
  5096  0010FE  C075  F068         	movff	ListeningPattern@pixelHSV,?_ListeningPattern
  5097  001102  C076  F069         	movff	ListeningPattern@pixelHSV+1,?_ListeningPattern+1
  5098  001106  0012               	return	
  5099  001108                     __end_of_ListeningPattern:
  5100                           	opt stack 0
  5101                           tosu	equ	0xFFF
  5102                           tosh	equ	0xFFE
  5103                           tosl	equ	0xFFD
  5104                           pclath	equ	0xFFA
  5105                           tblptru	equ	0xFF8
  5106                           tblptrh	equ	0xFF7
  5107                           tblptrl	equ	0xFF6
  5108                           tablat	equ	0xFF5
  5109                           prodh	equ	0xFF4
  5110                           prodl	equ	0xFF3
  5111                           postinc0	equ	0xFEE
  5112                           wreg	equ	0xFE8
  5113                           postdec1	equ	0xFE5
  5114                           fsr1h	equ	0xFE2
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _IdlePattern *****************
  5124 ;; Defined at:
  5125 ;;		line 257 in file "Pattern_RGBPatterns.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  pattern         1    wreg     unsigned char 
  5128 ;;  pixel           1    8[BANK0 ] unsigned char 
  5129 ;;  stepCount       1    9[BANK0 ] unsigned char 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  pattern         1    0[COMRAM] unsigned char 
  5132 ;;  pixelHSV        2   22[BANK0 ] unsigned int 
  5133 ;;  head            1   31[BANK0 ] unsigned char 
  5134 ;;  x               1   30[BANK0 ] unsigned char 
  5135 ;;  val             1   29[BANK0 ] unsigned char 
  5136 ;;  sat             1   28[BANK0 ] unsigned char 
  5137 ;;  hue             1   21[BANK0 ] unsigned char 
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  2    8[BANK0 ] unsigned int 
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5147 ;;      Params:         0       2       0       0
  5148 ;;      Locals:         0      11       0       0
  5149 ;;      Temps:          0      11       0       0
  5150 ;;      Totals:         0      24       0       0
  5151 ;;Total ram usage:       24 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    8
  5154 ;; This function calls:
  5155 ;;		___awdiv
  5156 ;;		___awmod
  5157 ;; This function is called by:
  5158 ;;		_UpdatePattern
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text20
  5163  001108                     __ptext20:
  5164                           	opt stack 0
  5165  001108                     _IdlePattern:
  5166                           	opt stack 18
  5167                           
  5168                           ;Pattern_RGBPatterns.c: 258: uint8_t head = stepCount;
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;incstack = 0
  5172  001108  C069  F07F         	movff	IdlePattern@stepCount,IdlePattern@head
  5173                           
  5174                           ;Pattern_RGBPatterns.c: 264: hue = 0;
  5175                           
  5176                           ;Pattern_RGBPatterns.c: 263: default:
  5177                           
  5178                           ;Pattern_RGBPatterns.c: 259: uint16_t pixelHSV;
  5179                           ;Pattern_RGBPatterns.c: 260: uint8_t sat, val, hue, x;
  5180                           ;Pattern_RGBPatterns.c: 262: switch(pattern){
  5181  00110C  0E00               	movlw	0
  5182  00110E  0100               	movlb	0	; () banked
  5183  001110  6F75               	movwf	IdlePattern@hue& (0+255),b
  5184                           
  5185                           ;Pattern_RGBPatterns.c: 265: sat = 0x0F;
  5186  001112  0E0F               	movlw	15
  5187  001114  0100               	movlb	0	; () banked
  5188  001116  6F7C               	movwf	IdlePattern@sat& (0+255),b
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;Pattern_RGBPatterns.c: 267: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  5192  001118  0100               	movlb	0	; () banked
  5193  00111A  517F               	movf	IdlePattern@head& (0+255),w,b
  5194  00111C  0100               	movlb	0	; () banked
  5195  00111E  6F6A               	movwf	??_IdlePattern& (0+255),b
  5196  001120  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5197  001122  0100               	movlb	0	; () banked
  5198  001124  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5199  001126  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5200  001128  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5201  00112A  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5202  00112C  0100               	movlb	0	; () banked
  5203  00112E  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5204  001130  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5205  001134  0100               	movlb	0	; () banked
  5206  001136  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5207  001138  0100               	movlb	0	; () banked
  5208  00113A  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5209  00113C  0E00               	movlw	0
  5210  00113E  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5211  001140  0100               	movlb	0	; () banked
  5212  001142  516A               	movf	??_IdlePattern& (0+255),w,b
  5213  001144  0100               	movlb	0	; () banked
  5214  001146  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5215  001148  0100               	movlb	0	; () banked
  5216  00114A  6F60               	movwf	___awmod@dividend& (0+255),b
  5217  00114C  0100               	movlb	0	; () banked
  5218  00114E  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5219  001150  0100               	movlb	0	; () banked
  5220  001152  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5221  001154  0100               	movlb	0	; () banked
  5222  001156  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5223  001158  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5224  00115C  0100               	movlb	0	; () banked
  5225  00115E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5226  001160  ECAE  F00F         	call	___awmod	;wreg free
  5227  001164  C060  F06E         	movff	?___awmod,??_IdlePattern+4
  5228  001168  C061  F06F         	movff	?___awmod+1,??_IdlePattern+5
  5229  00116C  0100               	movlb	0	; () banked
  5230  00116E  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5231  001170  0100               	movlb	0	; () banked
  5232  001172  6F70               	movwf	(??_IdlePattern+6)& (0+255),b
  5233  001174  6B71               	clrf	(??_IdlePattern+7)& (0+255),b
  5234  001176  0100               	movlb	0	; () banked
  5235  001178  1F70               	comf	(??_IdlePattern+6)& (0+255),f,b
  5236  00117A  1F71               	comf	(??_IdlePattern+7)& (0+255),f,b
  5237  00117C  4B70               	infsnz	(??_IdlePattern+6)& (0+255),f,b
  5238  00117E  2B71               	incf	(??_IdlePattern+7)& (0+255),f,b
  5239  001180  0100               	movlb	0	; () banked
  5240  001182  517F               	movf	IdlePattern@head& (0+255),w,b
  5241  001184  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+8
  5242  001188  0100               	movlb	0	; () banked
  5243  00118A  6B73               	clrf	(??_IdlePattern+9)& (0+255),b
  5244  00118C  0100               	movlb	0	; () banked
  5245  00118E  2772               	addwf	(??_IdlePattern+8)& (0+255),f,b
  5246  001190  0E00               	movlw	0
  5247  001192  2373               	addwfc	(??_IdlePattern+9)& (0+255),f,b
  5248  001194  0100               	movlb	0	; () banked
  5249  001196  5170               	movf	(??_IdlePattern+6)& (0+255),w,b
  5250  001198  0100               	movlb	0	; () banked
  5251  00119A  2572               	addwf	(??_IdlePattern+8)& (0+255),w,b
  5252  00119C  0100               	movlb	0	; () banked
  5253  00119E  6F60               	movwf	___awmod@dividend& (0+255),b
  5254  0011A0  0100               	movlb	0	; () banked
  5255  0011A2  5171               	movf	(??_IdlePattern+7)& (0+255),w,b
  5256  0011A4  0100               	movlb	0	; () banked
  5257  0011A6  2173               	addwfc	(??_IdlePattern+9)& (0+255),w,b
  5258  0011A8  0100               	movlb	0	; () banked
  5259  0011AA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5260  0011AC  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5261  0011B0  0100               	movlb	0	; () banked
  5262  0011B2  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5263  0011B4  ECAE  F00F         	call	___awmod	;wreg free
  5264  0011B8  0100               	movlb	0	; () banked
  5265  0011BA  5160               	movf	?___awmod& (0+255),w,b
  5266  0011BC  0100               	movlb	0	; () banked
  5267  0011BE  5D6E               	subwf	(??_IdlePattern+4)& (0+255),w,b
  5268  0011C0  0100               	movlb	0	; () banked
  5269  0011C2  516F               	movf	(??_IdlePattern+5)& (0+255),w,b
  5270  0011C4  0A80               	xorlw	128
  5271  0011C6  0100               	movlb	0	; () banked
  5272  0011C8  6F74               	movwf	(??_IdlePattern+10)& (0+255),b
  5273  0011CA  0100               	movlb	0	; () banked
  5274  0011CC  5161               	movf	(?___awmod+1)& (0+255),w,b
  5275  0011CE  0A80               	xorlw	128
  5276  0011D0  0100               	movlb	0	; () banked
  5277  0011D2  5974               	subwfb	(??_IdlePattern+10)& (0+255),w,b
  5278  0011D4  A0D8               	btfss	status,0,c
  5279  0011D6  D027               	goto	l2946
  5280                           
  5281                           ; BSR set to: 0
  5282  0011D8  0100               	movlb	0	; () banked
  5283  0011DA  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5284  0011DC  0100               	movlb	0	; () banked
  5285  0011DE  6F6A               	movwf	??_IdlePattern& (0+255),b
  5286  0011E0  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5287  0011E2  0100               	movlb	0	; () banked
  5288  0011E4  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5289  0011E6  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5290  0011E8  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5291  0011EA  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5292  0011EC  0100               	movlb	0	; () banked
  5293  0011EE  517F               	movf	IdlePattern@head& (0+255),w,b
  5294  0011F0  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5295  0011F4  0100               	movlb	0	; () banked
  5296  0011F6  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5297  0011F8  0100               	movlb	0	; () banked
  5298  0011FA  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5299  0011FC  0E00               	movlw	0
  5300  0011FE  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5301  001200  0100               	movlb	0	; () banked
  5302  001202  516A               	movf	??_IdlePattern& (0+255),w,b
  5303  001204  0100               	movlb	0	; () banked
  5304  001206  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5305  001208  0100               	movlb	0	; () banked
  5306  00120A  6F60               	movwf	___awmod@dividend& (0+255),b
  5307  00120C  0100               	movlb	0	; () banked
  5308  00120E  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5309  001210  0100               	movlb	0	; () banked
  5310  001212  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5311  001214  0100               	movlb	0	; () banked
  5312  001216  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5313  001218  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5314  00121C  0100               	movlb	0	; () banked
  5315  00121E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5316  001220  ECAE  F00F         	call	___awmod	;wreg free
  5317  001224  D026               	goto	L14
  5318  001226                     l2946:
  5319  001226  0100               	movlb	0	; () banked
  5320  001228  517F               	movf	IdlePattern@head& (0+255),w,b
  5321  00122A  0100               	movlb	0	; () banked
  5322  00122C  6F6A               	movwf	??_IdlePattern& (0+255),b
  5323  00122E  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5324  001230  0100               	movlb	0	; () banked
  5325  001232  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5326  001234  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5327  001236  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5328  001238  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5329  00123A  0100               	movlb	0	; () banked
  5330  00123C  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5331  00123E  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5332  001242  0100               	movlb	0	; () banked
  5333  001244  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5334  001246  0100               	movlb	0	; () banked
  5335  001248  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5336  00124A  0E00               	movlw	0
  5337  00124C  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5338  00124E  0100               	movlb	0	; () banked
  5339  001250  516A               	movf	??_IdlePattern& (0+255),w,b
  5340  001252  0100               	movlb	0	; () banked
  5341  001254  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5342  001256  0100               	movlb	0	; () banked
  5343  001258  6F60               	movwf	___awmod@dividend& (0+255),b
  5344  00125A  0100               	movlb	0	; () banked
  5345  00125C  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5346  00125E  0100               	movlb	0	; () banked
  5347  001260  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5348  001262  0100               	movlb	0	; () banked
  5349  001264  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5350  001266  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5351  00126A  0100               	movlb	0	; () banked
  5352  00126C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5353  00126E  ECAE  F00F         	call	___awmod	;wreg free
  5354  001272                     L14:
  5355  001272  C060  F078         	movff	?___awmod,_IdlePattern$780
  5356  001276  C061  F079         	movff	?___awmod+1,_IdlePattern$780+1
  5357  00127A  C078  F07E         	movff	_IdlePattern$780,IdlePattern@x
  5358                           
  5359                           ;Pattern_RGBPatterns.c: 268: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  5360  00127E  0E04               	movlw	4
  5361  001280  0100               	movlb	0	; () banked
  5362  001282  657E               	cpfsgt	IdlePattern@x& (0+255),b
  5363  001284  D006               	goto	l2954
  5364                           
  5365                           ; BSR set to: 0
  5366  001286  0E00               	movlw	0
  5367  001288  0100               	movlb	0	; () banked
  5368  00128A  6F7B               	movwf	(_IdlePattern$781+1)& (0+255),b
  5369  00128C  0E00               	movlw	0
  5370  00128E  6F7A               	movwf	_IdlePattern$781& (0+255),b
  5371  001290  D01F               	goto	l2956
  5372  001292                     l2954:
  5373                           
  5374                           ; BSR set to: 0
  5375  001292  0100               	movlb	0	; () banked
  5376  001294  517E               	movf	IdlePattern@x& (0+255),w,b
  5377  001296  0D0F               	mullw	15
  5378  001298  CFF3 F060          	movff	prodl,___awdiv@dividend
  5379  00129C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5380  0012A0  0E00               	movlw	0
  5381  0012A2  0100               	movlb	0	; () banked
  5382  0012A4  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5383  0012A6  0E05               	movlw	5
  5384  0012A8  6F62               	movwf	___awdiv@divisor& (0+255),b
  5385  0012AA  ECEF  F00D         	call	___awdiv	;wreg free
  5386  0012AE  0100               	movlb	0	; () banked
  5387  0012B0  1F60               	comf	?___awdiv& (0+255),f,b
  5388  0012B2  0100               	movlb	0	; () banked
  5389  0012B4  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5390  0012B6  0100               	movlb	0	; () banked
  5391  0012B8  4B60               	infsnz	?___awdiv& (0+255),f,b
  5392  0012BA  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5393  0012BC  0E0F               	movlw	15
  5394  0012BE  0100               	movlb	0	; () banked
  5395  0012C0  2560               	addwf	?___awdiv& (0+255),w,b
  5396  0012C2  0100               	movlb	0	; () banked
  5397  0012C4  6F7A               	movwf	_IdlePattern$781& (0+255),b
  5398  0012C6  0E00               	movlw	0
  5399  0012C8  0100               	movlb	0	; () banked
  5400  0012CA  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5401  0012CC  0100               	movlb	0	; () banked
  5402  0012CE  6F7B               	movwf	(_IdlePattern$781+1)& (0+255),b
  5403  0012D0                     l2956:
  5404                           
  5405                           ; BSR set to: 0
  5406  0012D0  C07A  F07D         	movff	_IdlePattern$781,IdlePattern@val
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;Pattern_RGBPatterns.c: 272: pixelHSV = ((uint16_t)32<<8) | (sat<<4) | val;
  5410                           
  5411                           ; BSR set to: 0
  5412                           
  5413                           ; BSR set to: 0
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;Pattern_RGBPatterns.c: 270: }
  5417                           
  5418                           ;Pattern_RGBPatterns.c: 269: break;
  5419  0012D4  0100               	movlb	0	; () banked
  5420  0012D6  517C               	movf	IdlePattern@sat& (0+255),w,b
  5421  0012D8  0100               	movlb	0	; () banked
  5422  0012DA  6F6A               	movwf	??_IdlePattern& (0+255),b
  5423  0012DC  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5424  0012DE  0100               	movlb	0	; () banked
  5425  0012E0  3B6A               	swapf	??_IdlePattern& (0+255),f,b
  5426  0012E2  3B6B               	swapf	(??_IdlePattern+1)& (0+255),f,b
  5427  0012E4  0EF0               	movlw	240
  5428  0012E6  176B               	andwf	(??_IdlePattern+1)& (0+255),f,b
  5429  0012E8  516A               	movf	??_IdlePattern& (0+255),w,b
  5430  0012EA  0B0F               	andlw	15
  5431  0012EC  136B               	iorwf	(??_IdlePattern+1)& (0+255),f,b
  5432  0012EE  0EF0               	movlw	240
  5433  0012F0  176A               	andwf	??_IdlePattern& (0+255),f,b
  5434  0012F2  0100               	movlb	0	; () banked
  5435  0012F4  517D               	movf	IdlePattern@val& (0+255),w,b
  5436  0012F6  0100               	movlb	0	; () banked
  5437  0012F8  136A               	iorwf	??_IdlePattern& (0+255),f,b
  5438  0012FA  0E00               	movlw	0
  5439  0012FC  136B               	iorwf	(??_IdlePattern+1)& (0+255),f,b
  5440  0012FE  0E00               	movlw	0
  5441  001300  0100               	movlb	0	; () banked
  5442  001302  116A               	iorwf	??_IdlePattern& (0+255),w,b
  5443  001304  0100               	movlb	0	; () banked
  5444  001306  6F76               	movwf	IdlePattern@pixelHSV& (0+255),b
  5445  001308  0E20               	movlw	32
  5446  00130A  0100               	movlb	0	; () banked
  5447  00130C  116B               	iorwf	(??_IdlePattern+1)& (0+255),w,b
  5448  00130E  0100               	movlb	0	; () banked
  5449  001310  6F77               	movwf	(IdlePattern@pixelHSV+1)& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;Pattern_RGBPatterns.c: 274: return pixelHSV;
  5453  001312  C076  F068         	movff	IdlePattern@pixelHSV,?_IdlePattern
  5454  001316  C077  F069         	movff	IdlePattern@pixelHSV+1,?_IdlePattern+1
  5455  00131A  0012               	return	
  5456  00131C                     __end_of_IdlePattern:
  5457                           	opt stack 0
  5458                           tosu	equ	0xFFF
  5459                           tosh	equ	0xFFE
  5460                           tosl	equ	0xFFD
  5461                           pclath	equ	0xFFA
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function ___awdiv *****************
  5481 ;; Defined at:
  5482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  dividend        2    0[BANK0 ] int 
  5485 ;;  divisor         2    2[BANK0 ] int 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  quotient        2    6[BANK0 ] int 
  5488 ;;  sign            1    5[BANK0 ] unsigned char 
  5489 ;;  counter         1    4[BANK0 ] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  2    0[BANK0 ] int 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5499 ;;      Params:         0       4       0       0
  5500 ;;      Locals:         0       4       0       0
  5501 ;;      Temps:          0       0       0       0
  5502 ;;      Totals:         0       8       0       0
  5503 ;;Total ram usage:        8 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    7
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_ThinkingPattern
  5510 ;;		_ListeningPattern
  5511 ;;		_SpeakingPattern
  5512 ;;		_IdlePattern
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text21
  5517  001BDE                     __ptext21:
  5518                           	opt stack 0
  5519  001BDE                     ___awdiv:
  5520                           	opt stack 18
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;incstack = 0
  5524  001BDE  0E00               	movlw	0
  5525  001BE0  0100               	movlb	0	; () banked
  5526  001BE2  6F65               	movwf	___awdiv@sign& (0+255),b
  5527                           
  5528                           ; BSR set to: 0
  5529  001BE4  0100               	movlb	0	; () banked
  5530  001BE6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5531  001BE8  D008               	goto	l2782
  5532                           
  5533                           ; BSR set to: 0
  5534  001BEA  0100               	movlb	0	; () banked
  5535  001BEC  6D62               	negf	___awdiv@divisor& (0+255),b
  5536  001BEE  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5537  001BF0  B0D8               	btfsc	status,0,c
  5538  001BF2  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5539                           
  5540                           ; BSR set to: 0
  5541  001BF4  0E01               	movlw	1
  5542  001BF6  0100               	movlb	0	; () banked
  5543  001BF8  6F65               	movwf	___awdiv@sign& (0+255),b
  5544  001BFA                     l2782:
  5545                           
  5546                           ; BSR set to: 0
  5547  001BFA  0100               	movlb	0	; () banked
  5548  001BFC  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5549  001BFE  D008               	goto	l2788
  5550                           
  5551                           ; BSR set to: 0
  5552  001C00  0100               	movlb	0	; () banked
  5553  001C02  6D60               	negf	___awdiv@dividend& (0+255),b
  5554  001C04  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5555  001C06  B0D8               	btfsc	status,0,c
  5556  001C08  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5557                           
  5558                           ; BSR set to: 0
  5559  001C0A  0E01               	movlw	1
  5560  001C0C  0100               	movlb	0	; () banked
  5561  001C0E  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5562  001C10                     l2788:
  5563                           
  5564                           ; BSR set to: 0
  5565  001C10  0E00               	movlw	0
  5566  001C12  0100               	movlb	0	; () banked
  5567  001C14  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5568  001C16  0E00               	movlw	0
  5569  001C18  6F66               	movwf	___awdiv@quotient& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572  001C1A  0100               	movlb	0	; () banked
  5573  001C1C  5162               	movf	___awdiv@divisor& (0+255),w,b
  5574  001C1E  0100               	movlb	0	; () banked
  5575  001C20  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5576  001C22  B4D8               	btfsc	status,2,c
  5577  001C24  D02C               	goto	l2810
  5578                           
  5579                           ; BSR set to: 0
  5580  001C26  0E01               	movlw	1
  5581  001C28  0100               	movlb	0	; () banked
  5582  001C2A  6F64               	movwf	___awdiv@counter& (0+255),b
  5583  001C2C  D006               	goto	l2796
  5584  001C2E                     l2794:
  5585                           
  5586                           ; BSR set to: 0
  5587  001C2E  0100               	movlb	0	; () banked
  5588  001C30  90D8               	bcf	status,0,c
  5589  001C32  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5590  001C34  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5591  001C36  0100               	movlb	0	; () banked
  5592  001C38  2B64               	incf	___awdiv@counter& (0+255),f,b
  5593  001C3A                     l2796:
  5594                           
  5595                           ; BSR set to: 0
  5596  001C3A  0100               	movlb	0	; () banked
  5597  001C3C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5598  001C3E  D7F7               	goto	l2794
  5599  001C40                     l2798:
  5600                           
  5601                           ; BSR set to: 0
  5602  001C40  0100               	movlb	0	; () banked
  5603  001C42  90D8               	bcf	status,0,c
  5604  001C44  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5605  001C46  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5606                           
  5607                           ; BSR set to: 0
  5608  001C48  0100               	movlb	0	; () banked
  5609  001C4A  5162               	movf	___awdiv@divisor& (0+255),w,b
  5610  001C4C  0100               	movlb	0	; () banked
  5611  001C4E  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5612  001C50  0100               	movlb	0	; () banked
  5613  001C52  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5614  001C54  0100               	movlb	0	; () banked
  5615  001C56  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5616  001C58  A0D8               	btfss	status,0,c
  5617  001C5A  D00A               	goto	l2806
  5618                           
  5619                           ; BSR set to: 0
  5620  001C5C  0100               	movlb	0	; () banked
  5621  001C5E  5162               	movf	___awdiv@divisor& (0+255),w,b
  5622  001C60  0100               	movlb	0	; () banked
  5623  001C62  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5624  001C64  0100               	movlb	0	; () banked
  5625  001C66  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5626  001C68  0100               	movlb	0	; () banked
  5627  001C6A  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5628                           
  5629                           ; BSR set to: 0
  5630  001C6C  0100               	movlb	0	; () banked
  5631  001C6E  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5632  001C70                     l2806:
  5633                           
  5634                           ; BSR set to: 0
  5635  001C70  0100               	movlb	0	; () banked
  5636  001C72  90D8               	bcf	status,0,c
  5637  001C74  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5638  001C76  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 0
  5641  001C78  0100               	movlb	0	; () banked
  5642  001C7A  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5643  001C7C  D7E1               	goto	l2798
  5644  001C7E                     l2810:
  5645                           
  5646                           ; BSR set to: 0
  5647  001C7E  0100               	movlb	0	; () banked
  5648  001C80  5165               	movf	___awdiv@sign& (0+255),w,b
  5649  001C82  0100               	movlb	0	; () banked
  5650  001C84  B4D8               	btfsc	status,2,c
  5651  001C86  D005               	goto	l2814
  5652                           
  5653                           ; BSR set to: 0
  5654  001C88  0100               	movlb	0	; () banked
  5655  001C8A  6D66               	negf	___awdiv@quotient& (0+255),b
  5656  001C8C  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5657  001C8E  B0D8               	btfsc	status,0,c
  5658  001C90  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5659  001C92                     l2814:
  5660                           
  5661                           ; BSR set to: 0
  5662  001C92  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5663  001C96  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5664  001C9A  0012               	return	
  5665  001C9C                     __end_of___awdiv:
  5666                           	opt stack 0
  5667                           tosu	equ	0xFFF
  5668                           tosh	equ	0xFFE
  5669                           tosl	equ	0xFFD
  5670                           pclath	equ	0xFFA
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           prodh	equ	0xFF4
  5676                           prodl	equ	0xFF3
  5677                           postinc0	equ	0xFEE
  5678                           wreg	equ	0xFE8
  5679                           postdec1	equ	0xFE5
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           postdec2	equ	0xFDD
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _ES_Timer_InitTimer *****************
  5690 ;; Defined at:
  5691 ;;		line 229 in file "ES_Timers.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  Num             1    wreg     unsigned char 
  5694 ;;  NewTime         2    0[BANK0 ] unsigned int 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  Num             1    4[BANK0 ] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      enum E15477
  5699 ;; Registers used:
  5700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5706 ;;      Params:         0       2       0       0
  5707 ;;      Locals:         0       1       0       0
  5708 ;;      Temps:          0       2       0       0
  5709 ;;      Totals:         0       5       0       0
  5710 ;;Total ram usage:        5 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    7
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_ShowPattern
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text22
  5721  002112                     __ptext22:
  5722                           	opt stack 0
  5723  002112                     _ES_Timer_InitTimer:
  5724                           	opt stack 20
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;incstack = 0
  5728                           ;ES_Timer_InitTimer@Num stored from wreg
  5729  002112  0100               	movlb	0	; () banked
  5730  002114  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  5731                           
  5732                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  5733                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  5734                           ;ES_Timers.c: 236: (NewTime == 0) )
  5735  002116  0E10               	movlw	16
  5736  002118  0100               	movlb	0	; () banked
  5737  00211A  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  5738  00211C  0012               	return	
  5739                           
  5740                           ; BSR set to: 0
  5741  00211E  0100               	movlb	0	; () banked
  5742  002120  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5743  002122  0D02               	mullw	2
  5744  002124  0E21               	movlw	low _Timer2PostFunc
  5745  002126  24F3               	addwf	prodl,w,c
  5746  002128  6EF6               	movwf	tblptrl,c
  5747  00212A  0E03               	movlw	high _Timer2PostFunc
  5748  00212C  20F4               	addwfc	prodh,w,c
  5749  00212E  6EF7               	movwf	tblptrh,c
  5750  002130                     	if	0	;There are less than 3 active tblptr bytes
  5751  002130                     	endif
  5752  002130  0009               	tblrd		*+
  5753  002132  50F5               	movf	tablat,w,c
  5754  002134  0009               	tblrd		*+
  5755  002136  10F5               	iorwf	tablat,w,c
  5756  002138  B4D8               	btfsc	status,2,c
  5757  00213A  0012               	return	
  5758                           
  5759                           ; BSR set to: 0
  5760  00213C  0100               	movlb	0	; () banked
  5761  00213E  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  5762  002140  0100               	movlb	0	; () banked
  5763  002142  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  5764  002144  B4D8               	btfsc	status,2,c
  5765  002146  0012               	return	
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  5769                           
  5770                           ; BSR set to: 0
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  5774                           ;	Return value of _ES_Timer_InitTimer is never used
  5775  002148  0100               	movlb	0	; () banked
  5776  00214A  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5777  00214C  0D02               	mullw	2
  5778  00214E  0E00               	movlw	low _TMR_TimerArray
  5779  002150  24F3               	addwf	prodl,w,c
  5780  002152  6ED9               	movwf	fsr2l,c
  5781  002154  0E01               	movlw	high _TMR_TimerArray
  5782  002156  20F4               	addwfc	prodh,w,c
  5783  002158  6EDA               	movwf	fsr2h,c
  5784  00215A  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  5785  00215E  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  5789  002162  0100               	movlb	0	; () banked
  5790  002164  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5791  002166  0D02               	mullw	2
  5792  002168  0E01               	movlw	low _BitNum2SetMask
  5793  00216A  24F3               	addwf	prodl,w,c
  5794  00216C  6EF6               	movwf	tblptrl,c
  5795  00216E  0E03               	movlw	high _BitNum2SetMask
  5796  002170  20F4               	addwfc	prodh,w,c
  5797  002172  6EF7               	movwf	tblptrh,c
  5798  002174                     	if	0	;There are less than 3 active tblptr bytes
  5799  002174                     	endif
  5800  002174  0009               	tblrd		*+
  5801  002176  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  5802  00217A  0009               	tblrd		*+
  5803  00217C  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  5804  002180  0100               	movlb	0	; () banked
  5805  002182  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  5806  002184  0100               	movlb	0	; () banked
  5807  002186  13DC               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  5808  002188  0100               	movlb	0	; () banked
  5809  00218A  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  5810  00218C  0100               	movlb	0	; () banked
  5811  00218E  13DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  5812  002190  0012               	return	
  5813  002192                     __end_of_ES_Timer_InitTimer:
  5814                           	opt stack 0
  5815                           tosu	equ	0xFFF
  5816                           tosh	equ	0xFFE
  5817                           tosl	equ	0xFFD
  5818                           pclath	equ	0xFFA
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           postdec1	equ	0xFE5
  5828                           fsr1h	equ	0xFE2
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           postdec2	equ	0xFDD
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _DotStar_Show *****************
  5838 ;; Defined at:
  5839 ;;		line 76 in file "Pattern_DotStarLED.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  5842 ;;		 -> PixelPattern(152), 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  i               1   89[BANK0 ] unsigned char 
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5854 ;;      Params:         0       2       0       0
  5855 ;;      Locals:         0       1       0       0
  5856 ;;      Temps:          0      18       0       0
  5857 ;;      Totals:         0      21       0       0
  5858 ;;Total ram usage:       21 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:   12
  5861 ;; This function calls:
  5862 ;;		_HSV_to_RGB
  5863 ;;		_SPI32_TransmitFrames
  5864 ;; This function is called by:
  5865 ;;		_ShowPattern
  5866 ;;		_StopPattern
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text23
  5871  001444                     __ptext23:
  5872                           	opt stack 0
  5873  001444                     _DotStar_Show:
  5874                           	opt stack 15
  5875                           
  5876                           ;Pattern_DotStarLED.c: 77: for(uint8_t i=1; i<=Length; i++){
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;incstack = 0
  5880  001444  0E01               	movlw	1
  5881  001446  0100               	movlb	0	; () banked
  5882  001448  6FB9               	movwf	DotStar_Show@i& (0+255),b
  5883  00144A  D07B               	goto	l3182
  5884  00144C                     l3176:
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;Pattern_DotStarLED.c: 79: PixelFrames[i] = (0xe0000000 | ((uint32_t)Brightness<<24) | *
      +                          (patternPointer+(i-1)));
  5888  00144C  0EFE               	movlw	254
  5889  00144E  0100               	movlb	0	; () banked
  5890  001450  6FA7               	movwf	??_DotStar_Show& (0+255),b
  5891  001452  0EFF               	movlw	255
  5892  001454  0100               	movlb	0	; () banked
  5893  001456  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  5894  001458  0100               	movlb	0	; () banked
  5895  00145A  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5896  00145C  0100               	movlb	0	; () banked
  5897  00145E  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  5898  001460  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  5899  001462  90D8               	bcf	status,0,c
  5900  001464  0100               	movlb	0	; () banked
  5901  001466  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  5902  001468  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  5903  00146A  0100               	movlb	0	; () banked
  5904  00146C  51A7               	movf	??_DotStar_Show& (0+255),w,b
  5905  00146E  0100               	movlb	0	; () banked
  5906  001470  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  5907  001472  0100               	movlb	0	; () banked
  5908  001474  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  5909  001476  0100               	movlb	0	; () banked
  5910  001478  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  5911  00147A  0100               	movlb	0	; () banked
  5912  00147C  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  5913  00147E  0100               	movlb	0	; () banked
  5914  001480  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  5915  001482  6ED9               	movwf	fsr2l,c
  5916  001484  0100               	movlb	0	; () banked
  5917  001486  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  5918  001488  0100               	movlb	0	; () banked
  5919  00148A  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  5920  00148C  6EDA               	movwf	fsr2h,c
  5921  00148E  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  5922  001492  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  5923  001496  C0F9  F0AD         	movff	_Brightness,??_DotStar_Show+6
  5924  00149A  0100               	movlb	0	; () banked
  5925  00149C  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  5926  00149E  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  5927  0014A0  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  5928  0014A2  C0AD  F0B0         	movff	??_DotStar_Show+6,??_DotStar_Show+9
  5929  0014A6  0100               	movlb	0	; () banked
  5930  0014A8  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  5931  0014AA  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  5932  0014AC  6BAD               	clrf	(??_DotStar_Show+6)& (0+255),b
  5933  0014AE  0100               	movlb	0	; () banked
  5934  0014B0  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  5935  0014B2  0100               	movlb	0	; () banked
  5936  0014B4  11AD               	iorwf	(??_DotStar_Show+6)& (0+255),w,b
  5937  0014B6  0100               	movlb	0	; () banked
  5938  0014B8  6FB1               	movwf	(??_DotStar_Show+10)& (0+255),b
  5939  0014BA  0100               	movlb	0	; () banked
  5940  0014BC  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  5941  0014BE  0100               	movlb	0	; () banked
  5942  0014C0  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  5943  0014C2  0100               	movlb	0	; () banked
  5944  0014C4  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  5945  0014C6  0E00               	movlw	0
  5946  0014C8  0100               	movlb	0	; () banked
  5947  0014CA  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  5948  0014CC  0100               	movlb	0	; () banked
  5949  0014CE  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  5950  0014D0  0E00               	movlw	0
  5951  0014D2  0100               	movlb	0	; () banked
  5952  0014D4  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  5953  0014D6  0100               	movlb	0	; () banked
  5954  0014D8  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  5955  0014DA  0E00               	movlw	0
  5956  0014DC  0100               	movlb	0	; () banked
  5957  0014DE  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  5958  0014E0  0100               	movlb	0	; () banked
  5959  0014E2  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  5960  0014E4  0E00               	movlw	0
  5961  0014E6  0100               	movlb	0	; () banked
  5962  0014E8  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  5963  0014EA  0100               	movlb	0	; () banked
  5964  0014EC  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  5965  0014EE  0E00               	movlw	0
  5966  0014F0  0100               	movlb	0	; () banked
  5967  0014F2  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  5968  0014F4  0100               	movlb	0	; () banked
  5969  0014F6  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  5970  0014F8  0EE0               	movlw	224
  5971  0014FA  0100               	movlb	0	; () banked
  5972  0014FC  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  5973  0014FE  0100               	movlb	0	; () banked
  5974  001500  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  5975  001502  0100               	movlb	0	; () banked
  5976  001504  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5977  001506  0D04               	mullw	4
  5978  001508  0EB8               	movlw	low _PixelFrames
  5979  00150A  24F3               	addwf	prodl,w,c
  5980  00150C  6ED9               	movwf	fsr2l,c
  5981  00150E  0E01               	movlw	high _PixelFrames
  5982  001510  20F4               	addwfc	prodh,w,c
  5983  001512  6EDA               	movwf	fsr2h,c
  5984  001514  C0B5  FFDE         	movff	??_DotStar_Show+14,postinc2
  5985  001518  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  5986  00151C  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  5987  001520  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;Pattern_DotStarLED.c: 83: HSV_to_RGB(PixelFrames+i);
  5991  001524  0100               	movlb	0	; () banked
  5992  001526  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5993  001528  0D04               	mullw	4
  5994  00152A  0EB8               	movlw	low _PixelFrames
  5995  00152C  24F3               	addwf	prodl,w,c
  5996  00152E  0100               	movlb	0	; () banked
  5997  001530  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  5998  001532  0E01               	movlw	high _PixelFrames
  5999  001534  20F4               	addwfc	prodh,w,c
  6000  001536  0100               	movlb	0	; () banked
  6001  001538  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  6002  00153A  ECE3  F001         	call	_HSV_to_RGB	;wreg free
  6003  00153E  0100               	movlb	0	; () banked
  6004  001540  2BB9               	incf	DotStar_Show@i& (0+255),f,b
  6005  001542                     l3182:
  6006                           
  6007                           ; BSR set to: 0
  6008  001542  0100               	movlb	0	; () banked
  6009  001544  51B9               	movf	DotStar_Show@i& (0+255),w,b
  6010  001546  0100               	movlb	0	; () banked
  6011  001548  5DE5               	subwf	_Length& (0+255),w,b
  6012  00154A  B0D8               	btfsc	status,0,c
  6013  00154C  D77F               	goto	l3176
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;Pattern_DotStarLED.c: 90: }
  6017                           ;Pattern_DotStarLED.c: 93: SPI32_TransmitFrames(PixelFrames,Length+3);
  6018                           
  6019                           ; BSR set to: 0
  6020  00154E  0EB8               	movlw	low _PixelFrames
  6021  001550  0100               	movlb	0	; () banked
  6022  001552  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  6023  001554  0E01               	movlw	high _PixelFrames
  6024  001556  0100               	movlb	0	; () banked
  6025  001558  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  6026  00155A  0100               	movlb	0	; () banked
  6027  00155C  51E5               	movf	_Length& (0+255),w,b
  6028  00155E  0F03               	addlw	3
  6029  001560  0100               	movlb	0	; () banked
  6030  001562  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  6031  001564  ECAC  F013         	call	_SPI32_TransmitFrames	;wreg free
  6032  001568  0012               	return		;funcret
  6033  00156A                     __end_of_DotStar_Show:
  6034                           	opt stack 0
  6035                           tosu	equ	0xFFF
  6036                           tosh	equ	0xFFE
  6037                           tosl	equ	0xFFD
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           postdec1	equ	0xFE5
  6048                           fsr1h	equ	0xFE2
  6049                           fsr1l	equ	0xFE1
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _SPI32_TransmitFrames *****************
  6058 ;; Defined at:
  6059 ;;		line 239 in file "SPI32_ControlService.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  6062 ;;		 -> PixelFrames(316), 
  6063 ;;  numFrames       1   34[BANK0 ] unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6075 ;;      Params:         0       3       0       0
  6076 ;;      Locals:         0       3       0       0
  6077 ;;      Temps:          0       0       0       0
  6078 ;;      Totals:         0       6       0       0
  6079 ;;Total ram usage:        6 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:   11
  6082 ;; This function calls:
  6083 ;;		_PostSPI32ControlService
  6084 ;; This function is called by:
  6085 ;;		_DotStar_Show
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	text24
  6090  002758                     __ptext24:
  6091                           	opt stack 0
  6092  002758                     _SPI32_TransmitFrames:
  6093                           	opt stack 15
  6094                           
  6095                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  6096                           
  6097                           ;incstack = 0
  6098  002758  0100               	movlb	0	; () banked
  6099  00275A  05E1               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  6100  00275C  A4D8               	btfss	status,2,c
  6101  00275E  0012               	return	
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  6105  002760  0E00               	movlw	0
  6106  002762  0100               	movlb	0	; () banked
  6107  002764  6FE4               	movwf	_FrameIndex& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  6111  002766  C080  F0D8         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  6112  00276A  C081  F0D9         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  6116  00276E  C082  F0E7         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  6120                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  6121  002772  0E09               	movlw	9
  6122  002774  0100               	movlb	0	; () banked
  6123  002776  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  6127  002778  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  6128  00277C  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  6129  002780  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  6130  002784  EC28  F014         	call	_PostSPI32ControlService	;wreg free
  6131  002788  0012               	return	
  6132  00278A                     __end_of_SPI32_TransmitFrames:
  6133                           	opt stack 0
  6134                           tosu	equ	0xFFF
  6135                           tosh	equ	0xFFE
  6136                           tosl	equ	0xFFD
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           postinc0	equ	0xFEE
  6145                           wreg	equ	0xFE8
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function _PostPatternControlService *****************
  6157 ;; Defined at:
  6158 ;;		line 135 in file "Pattern_ControlService.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;		None
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      unsigned char 
  6165 ;; Registers used:
  6166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6172 ;;      Params:         0       3       0       0
  6173 ;;      Locals:         0       0       0       0
  6174 ;;      Temps:          0       0       0       0
  6175 ;;      Totals:         0       3       0       0
  6176 ;;Total ram usage:        3 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:   10
  6179 ;; This function calls:
  6180 ;;		_ES_PostToService
  6181 ;; This function is called by:
  6182 ;;		_RunPatternControlService
  6183 ;;		_RunCanRX_Service
  6184 ;;		_ES_Timer_Tick_Resp
  6185 ;;		_PostToList
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text25
  6190  0028D2                     __ptext25:
  6191                           	opt stack 0
  6192  0028D2                     _PostPatternControlService:
  6193                           	opt stack 17
  6194                           
  6195                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  6196                           
  6197                           ;incstack = 0
  6198  0028D2  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6199  0028D6  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6200  0028DA  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6201  0028DE  0100               	movlb	0	; () banked
  6202  0028E0  51E6               	movf	_MyPriority& (0+255),w,b
  6203  0028E2  EC41  F011         	call	_ES_PostToService
  6204  0028E6  0012               	return	
  6205  0028E8                     __end_of_PostPatternControlService:
  6206                           	opt stack 0
  6207                           tosu	equ	0xFFF
  6208                           tosh	equ	0xFFE
  6209                           tosl	equ	0xFFD
  6210                           pclath	equ	0xFFA
  6211                           tblptru	equ	0xFF8
  6212                           tblptrh	equ	0xFF7
  6213                           tblptrl	equ	0xFF6
  6214                           tablat	equ	0xFF5
  6215                           prodh	equ	0xFF4
  6216                           prodl	equ	0xFF3
  6217                           postinc0	equ	0xFEE
  6218                           wreg	equ	0xFE8
  6219                           postdec1	equ	0xFE5
  6220                           fsr1h	equ	0xFE2
  6221                           fsr1l	equ	0xFE1
  6222                           indf2	equ	0xFDF
  6223                           postinc2	equ	0xFDE
  6224                           postdec2	equ	0xFDD
  6225                           fsr2h	equ	0xFDA
  6226                           fsr2l	equ	0xFD9
  6227                           status	equ	0xFD8
  6228                           
  6229 ;; *************** function _PostSPI32ControlService *****************
  6230 ;; Defined at:
  6231 ;;		line 117 in file "SPI32_ControlService.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      unsigned char 
  6238 ;; Registers used:
  6239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6245 ;;      Params:         0       3       0       0
  6246 ;;      Locals:         0       0       0       0
  6247 ;;      Temps:          0       0       0       0
  6248 ;;      Totals:         0       3       0       0
  6249 ;;Total ram usage:        3 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:   10
  6252 ;; This function calls:
  6253 ;;		_ES_PostToService
  6254 ;; This function is called by:
  6255 ;;		_SPI32_TransmitFrames
  6256 ;;		_ES_Timer_Tick_Resp
  6257 ;;		_PostToList
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text26
  6262  002850                     __ptext26:
  6263                           	opt stack 0
  6264  002850                     _PostSPI32ControlService:
  6265                           	opt stack 0
  6266                           
  6267                           ;Skip over the trampoline to the duplicate function for level 2
  6268  002850  B25C               	btfsc	btemp,1,c
  6269  002852  EF74  F014         	goto	i2_PostSPI32ControlService
  6270  002856                     _PostSPI32ControlService$intlevel0:
  6271                           	opt stack 17
  6272                           
  6273                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6274                           
  6275                           ;incstack = 0
  6276  002856  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  6277  00285A  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6278  00285E  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6279  002862  0100               	movlb	0	; () banked
  6280  002864  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6281  002866  EC41  F011         	call	_ES_PostToService
  6282  00286A  0012               	return	
  6283  00286C                     __end_of_PostSPI32ControlService:
  6284                           	opt stack 0
  6285                           tosu	equ	0xFFF
  6286                           tosh	equ	0xFFE
  6287                           tosl	equ	0xFFD
  6288                           pclath	equ	0xFFA
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           postdec1	equ	0xFE5
  6298                           fsr1h	equ	0xFE2
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _HSV_to_RGB *****************
  6308 ;; Defined at:
  6309 ;;		line 49 in file "Pattern_HSV_Convert.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  6312 ;;		 -> PixelFrames(316), 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  v               2   67[BANK0 ] unsigned int 
  6315 ;;  p               2   65[BANK0 ] unsigned int 
  6316 ;;  s               2   63[BANK0 ] unsigned int 
  6317 ;;  t               2   59[BANK0 ] unsigned int 
  6318 ;;  q               2   57[BANK0 ] unsigned int 
  6319 ;;  b               2   55[BANK0 ] unsigned int 
  6320 ;;  g               2   53[BANK0 ] unsigned int 
  6321 ;;  r               2   51[BANK0 ] unsigned int 
  6322 ;;  fpart           2   49[BANK0 ] unsigned int 
  6323 ;;  region          2   47[BANK0 ] unsigned int 
  6324 ;;  h               2   45[BANK0 ] unsigned int 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6334 ;;      Params:         0       2       0       0
  6335 ;;      Locals:         0      24       0       0
  6336 ;;      Temps:          0      24       0       0
  6337 ;;      Totals:         0      50       0       0
  6338 ;;Total ram usage:       50 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    8
  6341 ;; This function calls:
  6342 ;;		___lwdiv
  6343 ;;		___wmul
  6344 ;; This function is called by:
  6345 ;;		_DotStar_Show
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text27
  6350  0003C6                     __ptext27:
  6351                           	opt stack 0
  6352  0003C6                     _HSV_to_RGB:
  6353                           	opt stack 18
  6354                           
  6355                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  6356                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  6357                           
  6358                           ;incstack = 0
  6359  0003C6  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6360  0003CA  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6361  0003CE  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6362  0003D2  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  6363  0003D6  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  6364  0003DA  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  6365  0003DE  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  6366  0003E2  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  6367  0003E6  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  6368  0003EA  0100               	movlb	0	; () banked
  6369  0003EC  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6370  0003EE  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  6371  0003F2  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  6375  0003F6  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6376  0003FA  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6377  0003FE  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6378  000402  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6379  000406  0EF0               	movlw	240
  6380  000408  0100               	movlb	0	; () banked
  6381  00040A  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6382  00040C  0100               	movlb	0	; () banked
  6383  00040E  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  6384  000410  0100               	movlb	0	; () banked
  6385  000412  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  6389  000414  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6390  000418  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6391  00041C  0E04               	movlw	4
  6392  00041E  0100               	movlb	0	; () banked
  6393  000420  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  6394  000422                     u1545:
  6395  000422  0100               	movlb	0	; () banked
  6396  000424  90D8               	bcf	status,0,c
  6397  000426  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  6398  000428  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  6399  00042A  0100               	movlb	0	; () banked
  6400  00042C  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  6401  00042E  D7F9               	goto	u1545
  6402  000430  0100               	movlb	0	; () banked
  6403  000432  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6404  000434  0100               	movlb	0	; () banked
  6405  000436  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  6406  000438  0100               	movlb	0	; () banked
  6407  00043A  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6408  00043C  0100               	movlb	0	; () banked
  6409  00043E  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  6413  000440  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6414  000444  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6415  000448  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6416  00044C  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6417  000450  0E0F               	movlw	15
  6418  000452  0100               	movlb	0	; () banked
  6419  000454  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6420  000456  0100               	movlb	0	; () banked
  6421  000458  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  6422  00045A  0100               	movlb	0	; () banked
  6423  00045C  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  6427  00045E  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  6428  000462  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  6429  000466  0100               	movlb	0	; () banked
  6430  000468  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  6431  00046A  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  6432  00046C  0EF0               	movlw	240
  6433  00046E  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6434  000470  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6435  000472  0B0F               	andlw	15
  6436  000474  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6437  000476  0EF0               	movlw	240
  6438  000478  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  6439  00047A  0100               	movlb	0	; () banked
  6440  00047C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6441  00047E  0100               	movlb	0	; () banked
  6442  000480  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  6443  000482  0100               	movlb	0	; () banked
  6444  000484  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6445  000486  0100               	movlb	0	; () banked
  6446  000488  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  6450  00048A  0100               	movlb	0	; () banked
  6451  00048C  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  6452  00048E  0100               	movlb	0	; () banked
  6453  000490  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  6454  000492  A4D8               	btfss	status,2,c
  6455  000494  D00D               	goto	l2896
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  6459  000496  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6460  00049A  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6461  00049E  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  6462  0004A2  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  6463  0004A6  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  6464  0004AA  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  6465                           
  6466                           ;Pattern_HSV_Convert.c: 61: }
  6467  0004AE  D129               	goto	l2916
  6468  0004B0                     l2896:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;Pattern_HSV_Convert.c: 63: else{
  6472                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  6473  0004B0  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  6474  0004B4  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  6475  0004B8  0E00               	movlw	0
  6476  0004BA  0100               	movlb	0	; () banked
  6477  0004BC  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  6478  0004BE  0E2B               	movlw	43
  6479  0004C0  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  6480  0004C2  EC05  F011         	call	___lwdiv	;wreg free
  6481  0004C6  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  6482  0004CA  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  6483                           
  6484                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6485  0004CE  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  6486  0004D2  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  6487  0004D6  0E00               	movlw	0
  6488  0004D8  0100               	movlb	0	; () banked
  6489  0004DA  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6490  0004DC  0E2B               	movlw	43
  6491  0004DE  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6492  0004E0  EC77  F013         	call	___wmul	;wreg free
  6493  0004E4  0100               	movlb	0	; () banked
  6494  0004E6  1F66               	comf	?___wmul& (0+255),f,b
  6495  0004E8  0100               	movlb	0	; () banked
  6496  0004EA  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6497  0004EC  0100               	movlb	0	; () banked
  6498  0004EE  4B66               	infsnz	?___wmul& (0+255),f,b
  6499  0004F0  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6500  0004F2  0100               	movlb	0	; () banked
  6501  0004F4  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  6502  0004F6  0100               	movlb	0	; () banked
  6503  0004F8  2566               	addwf	?___wmul& (0+255),w,b
  6504  0004FA  0100               	movlb	0	; () banked
  6505  0004FC  6F9D               	movwf	_HSV_to_RGB$2058& (0+255),b
  6506  0004FE  0100               	movlb	0	; () banked
  6507  000500  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  6508  000502  0100               	movlb	0	; () banked
  6509  000504  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6510  000506  0100               	movlb	0	; () banked
  6511  000508  6F9E               	movwf	(_HSV_to_RGB$2058+1)& (0+255),b
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6515  00050A  C09D  F066         	movff	_HSV_to_RGB$2058,___wmul@multiplier
  6516  00050E  C09E  F067         	movff	_HSV_to_RGB$2058+1,___wmul@multiplier+1
  6517  000512  0E00               	movlw	0
  6518  000514  0100               	movlb	0	; () banked
  6519  000516  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6520  000518  0E06               	movlw	6
  6521  00051A  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6522  00051C  EC77  F013         	call	___wmul	;wreg free
  6523  000520  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  6524  000524  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  6525                           
  6526                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  6527  000528  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6528  00052C  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6529  000530  0100               	movlb	0	; () banked
  6530  000532  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6531  000534  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6532  000536  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6533  000538  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6534  00053A  0EFF               	movlw	255
  6535  00053C  0100               	movlb	0	; () banked
  6536  00053E  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6537  000540  0100               	movlb	0	; () banked
  6538  000542  6F66               	movwf	___wmul@multiplier& (0+255),b
  6539  000544  0E00               	movlw	0
  6540  000546  0100               	movlb	0	; () banked
  6541  000548  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6542  00054A  0100               	movlb	0	; () banked
  6543  00054C  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6544  00054E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6545  000552  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6546  000556  EC77  F013         	call	___wmul	;wreg free
  6547  00055A  0100               	movlb	0	; () banked
  6548  00055C  5167               	movf	(?___wmul+1)& (0+255),w,b
  6549  00055E  0100               	movlb	0	; () banked
  6550  000560  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  6551  000562  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6555  000564  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  6556  000568  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  6557  00056C  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  6558  000570  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  6559  000574  EC77  F013         	call	___wmul	;wreg free
  6560  000578  0100               	movlb	0	; () banked
  6561  00057A  C067  F066         	movff	?___wmul+1,?___wmul
  6562  00057E  0100               	movlb	0	; () banked
  6563  000580  6B67               	clrf	(?___wmul+1)& (0+255),b
  6564  000582  0100               	movlb	0	; () banked
  6565  000584  1F66               	comf	?___wmul& (0+255),f,b
  6566  000586  0100               	movlb	0	; () banked
  6567  000588  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6568  00058A  0100               	movlb	0	; () banked
  6569  00058C  4B66               	infsnz	?___wmul& (0+255),f,b
  6570  00058E  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6571  000590  0EFF               	movlw	255
  6572  000592  0100               	movlb	0	; () banked
  6573  000594  2566               	addwf	?___wmul& (0+255),w,b
  6574  000596  0100               	movlb	0	; () banked
  6575  000598  6F9D               	movwf	_HSV_to_RGB$2058& (0+255),b
  6576  00059A  0E00               	movlw	0
  6577  00059C  0100               	movlb	0	; () banked
  6578  00059E  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6579  0005A0  0100               	movlb	0	; () banked
  6580  0005A2  6F9E               	movwf	(_HSV_to_RGB$2058+1)& (0+255),b
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6584  0005A4  C09D  F066         	movff	_HSV_to_RGB$2058,___wmul@multiplier
  6585  0005A8  C09E  F067         	movff	_HSV_to_RGB$2058+1,___wmul@multiplier+1
  6586  0005AC  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6587  0005B0  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6588  0005B4  EC77  F013         	call	___wmul	;wreg free
  6589  0005B8  0100               	movlb	0	; () banked
  6590  0005BA  5167               	movf	(?___wmul+1)& (0+255),w,b
  6591  0005BC  0100               	movlb	0	; () banked
  6592  0005BE  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  6593  0005C0  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6597  0005C2  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  6598  0005C6  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  6599  0005CA  0100               	movlb	0	; () banked
  6600  0005CC  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6601  0005CE  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6602  0005D0  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6603  0005D2  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6604  0005D4  0EFF               	movlw	255
  6605  0005D6  0100               	movlb	0	; () banked
  6606  0005D8  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6607  0005DA  0100               	movlb	0	; () banked
  6608  0005DC  6F66               	movwf	___wmul@multiplier& (0+255),b
  6609  0005DE  0E00               	movlw	0
  6610  0005E0  0100               	movlb	0	; () banked
  6611  0005E2  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6612  0005E4  0100               	movlb	0	; () banked
  6613  0005E6  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6614  0005E8  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  6615  0005EC  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  6616  0005F0  EC77  F013         	call	___wmul	;wreg free
  6617  0005F4  0100               	movlb	0	; () banked
  6618  0005F6  C067  F066         	movff	?___wmul+1,?___wmul
  6619  0005FA  0100               	movlb	0	; () banked
  6620  0005FC  6B67               	clrf	(?___wmul+1)& (0+255),b
  6621  0005FE  0100               	movlb	0	; () banked
  6622  000600  1F66               	comf	?___wmul& (0+255),f,b
  6623  000602  0100               	movlb	0	; () banked
  6624  000604  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6625  000606  0100               	movlb	0	; () banked
  6626  000608  4B66               	infsnz	?___wmul& (0+255),f,b
  6627  00060A  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6628  00060C  0EFF               	movlw	255
  6629  00060E  0100               	movlb	0	; () banked
  6630  000610  2566               	addwf	?___wmul& (0+255),w,b
  6631  000612  0100               	movlb	0	; () banked
  6632  000614  6F9D               	movwf	_HSV_to_RGB$2058& (0+255),b
  6633  000616  0E00               	movlw	0
  6634  000618  0100               	movlb	0	; () banked
  6635  00061A  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6636  00061C  0100               	movlb	0	; () banked
  6637  00061E  6F9E               	movwf	(_HSV_to_RGB$2058+1)& (0+255),b
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6641  000620  C09D  F066         	movff	_HSV_to_RGB$2058,___wmul@multiplier
  6642  000624  C09E  F067         	movff	_HSV_to_RGB$2058+1,___wmul@multiplier+1
  6643  000628  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6644  00062C  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6645  000630  EC77  F013         	call	___wmul	;wreg free
  6646  000634  0100               	movlb	0	; () banked
  6647  000636  5167               	movf	(?___wmul+1)& (0+255),w,b
  6648  000638  0100               	movlb	0	; () banked
  6649  00063A  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  6650  00063C  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  6651                           
  6652                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  6653  00063E  D046               	goto	l2914
  6654  000640                     l651:
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  6658  000640  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6659  000644  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6660  000648  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  6661  00064C  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  6662  000650  D008               	goto	L15
  6663  000652                     l653:
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  6667  000652  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  6668  000656  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  6669  00065A  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6670  00065E  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6671  000662                     L15:
  6672  000662  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  6673  000666  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  6674  00066A  D04B               	goto	l2916
  6675  00066C                     l654:
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  6679  00066C  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6680  000670  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6681  000674  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6682  000678  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6683  00067C  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  6684  000680  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  6685  000684  D03E               	goto	l2916
  6686  000686                     l655:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  6690  000686  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6691  00068A  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6692  00068E  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  6693  000692  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  6694  000696  D008               	goto	L16
  6695  000698                     l656:
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  6699  000698  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  6700  00069C  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  6701  0006A0  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6702  0006A4  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6703  0006A8                     L16:
  6704  0006A8  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6705  0006AC  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6706  0006B0  D028               	goto	l2916
  6707  0006B2                     l657:
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  6711  0006B2  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6712  0006B6  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6713  0006BA  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6714  0006BE  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6715  0006C2  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  6716  0006C6  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;Pattern_HSV_Convert.c: 88: }
  6720  0006CA  D01B               	goto	l2916
  6721  0006CC                     l2914:
  6722                           
  6723                           ; BSR set to: 0
  6724  0006CC  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  6725  0006D0  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  6726                           
  6727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6728                           ; Switch size 1, requested type "space"
  6729                           ; Number of cases is 1, Range of values is 0 to 0
  6730                           ; switch strategies available:
  6731                           ; Name         Instructions Cycles
  6732                           ; simple_byte            4     3 (average)
  6733                           ;	Chosen strategy is simple_byte
  6734  0006D4  0100               	movlb	0	; () banked
  6735  0006D6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6736  0006D8  0A00               	xorlw	0	; case 0
  6737  0006DA  A4D8               	btfss	status,2,c
  6738  0006DC  D7EA               	goto	l657
  6739                           
  6740                           ; BSR set to: 0
  6741                           ; Switch size 1, requested type "space"
  6742                           ; Number of cases is 5, Range of values is 0 to 4
  6743                           ; switch strategies available:
  6744                           ; Name         Instructions Cycles
  6745                           ; simple_byte           16     9 (average)
  6746                           ;	Chosen strategy is simple_byte
  6747  0006DE  0100               	movlb	0	; () banked
  6748  0006E0  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6749  0006E2  0A00               	xorlw	0	; case 0
  6750  0006E4  B4D8               	btfsc	status,2,c
  6751  0006E6  D7AC               	goto	l651
  6752  0006E8  0A01               	xorlw	1	; case 1
  6753  0006EA  B4D8               	btfsc	status,2,c
  6754  0006EC  D7B2               	goto	l653
  6755  0006EE  0A03               	xorlw	3	; case 2
  6756  0006F0  B4D8               	btfsc	status,2,c
  6757  0006F2  D7BC               	goto	l654
  6758  0006F4  0A01               	xorlw	1	; case 3
  6759  0006F6  B4D8               	btfsc	status,2,c
  6760  0006F8  D7C6               	goto	l655
  6761  0006FA  0A07               	xorlw	7	; case 4
  6762  0006FC  B4D8               	btfsc	status,2,c
  6763  0006FE  D7CC               	goto	l656
  6764  000700  D7D8               	goto	l657
  6765  000702                     l2916:
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;Pattern_HSV_Convert.c: 89: }
  6769                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  6770  000702  0100               	movlb	0	; () banked
  6771  000704  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  6772  000706  0100               	movlb	0	; () banked
  6773  000708  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  6774  00070A  0100               	movlb	0	; () banked
  6775  00070C  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  6776  00070E  0100               	movlb	0	; () banked
  6777  000710  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  6778  000712  0100               	movlb	0	; () banked
  6779  000714  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  6780  000716  0100               	movlb	0	; () banked
  6781  000718  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6782  00071A  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  6783  00071E  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  6784  000722  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  6785  000726  0100               	movlb	0	; () banked
  6786  000728  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  6787  00072A  0100               	movlb	0	; () banked
  6788  00072C  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  6789  00072E  0100               	movlb	0	; () banked
  6790  000730  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  6791  000732  0100               	movlb	0	; () banked
  6792  000734  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  6793  000736  0100               	movlb	0	; () banked
  6794  000738  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  6795  00073A  0100               	movlb	0	; () banked
  6796  00073C  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  6797  00073E  0100               	movlb	0	; () banked
  6798  000740  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  6799  000742  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  6800  000746  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  6801  00074A  0100               	movlb	0	; () banked
  6802  00074C  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  6803  00074E  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  6804  000750  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6805  000754  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6806  000758  0E00               	movlw	0
  6807  00075A  14DE               	andwf	postinc2,w,c
  6808  00075C  0100               	movlb	0	; () banked
  6809  00075E  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  6810  000760  0E00               	movlw	0
  6811  000762  14DE               	andwf	postinc2,w,c
  6812  000764  0100               	movlb	0	; () banked
  6813  000766  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  6814  000768  0E00               	movlw	0
  6815  00076A  14DE               	andwf	postinc2,w,c
  6816  00076C  0100               	movlb	0	; () banked
  6817  00076E  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  6818  000770  0EFF               	movlw	255
  6819  000772  14DE               	andwf	postinc2,w,c
  6820  000774  0100               	movlb	0	; () banked
  6821  000776  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  6822  000778  0100               	movlb	0	; () banked
  6823  00077A  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  6824  00077C  0100               	movlb	0	; () banked
  6825  00077E  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  6826  000780  0100               	movlb	0	; () banked
  6827  000782  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  6828  000784  0100               	movlb	0	; () banked
  6829  000786  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  6830  000788  0100               	movlb	0	; () banked
  6831  00078A  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  6832  00078C  0100               	movlb	0	; () banked
  6833  00078E  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  6834  000790  0100               	movlb	0	; () banked
  6835  000792  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  6836  000794  0100               	movlb	0	; () banked
  6837  000796  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  6838  000798  0100               	movlb	0	; () banked
  6839  00079A  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  6840  00079C  0100               	movlb	0	; () banked
  6841  00079E  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  6842  0007A0  0100               	movlb	0	; () banked
  6843  0007A2  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  6844  0007A4  0100               	movlb	0	; () banked
  6845  0007A6  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  6846  0007A8  0100               	movlb	0	; () banked
  6847  0007AA  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6848  0007AC  0100               	movlb	0	; () banked
  6849  0007AE  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  6850  0007B0  0100               	movlb	0	; () banked
  6851  0007B2  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  6852  0007B4  0100               	movlb	0	; () banked
  6853  0007B6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6854  0007B8  0100               	movlb	0	; () banked
  6855  0007BA  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  6856  0007BC  0100               	movlb	0	; () banked
  6857  0007BE  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  6858  0007C0  0100               	movlb	0	; () banked
  6859  0007C2  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  6860  0007C4  0100               	movlb	0	; () banked
  6861  0007C6  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  6862  0007C8  0100               	movlb	0	; () banked
  6863  0007CA  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  6864  0007CC  0100               	movlb	0	; () banked
  6865  0007CE  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  6866  0007D0  0100               	movlb	0	; () banked
  6867  0007D2  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  6868  0007D4  0100               	movlb	0	; () banked
  6869  0007D6  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  6870  0007D8  0100               	movlb	0	; () banked
  6871  0007DA  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  6872  0007DC  0100               	movlb	0	; () banked
  6873  0007DE  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  6874  0007E0  0100               	movlb	0	; () banked
  6875  0007E2  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  6876  0007E4  0100               	movlb	0	; () banked
  6877  0007E6  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  6878  0007E8  0100               	movlb	0	; () banked
  6879  0007EA  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  6880  0007EC  0100               	movlb	0	; () banked
  6881  0007EE  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  6882  0007F0  0E00               	movlw	0
  6883  0007F2  0100               	movlb	0	; () banked
  6884  0007F4  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  6885  0007F6  0100               	movlb	0	; () banked
  6886  0007F8  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  6887  0007FA  0E00               	movlw	0
  6888  0007FC  0100               	movlb	0	; () banked
  6889  0007FE  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  6890  000800  0100               	movlb	0	; () banked
  6891  000802  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  6892  000804  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6893  000808  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6894  00080C  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  6895  000810  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  6896  000814  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  6897  000818  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  6898  00081C  0012               	return	
  6899  00081E                     __end_of_HSV_to_RGB:
  6900                           	opt stack 0
  6901                           tosu	equ	0xFFF
  6902                           tosh	equ	0xFFE
  6903                           tosl	equ	0xFFD
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           postdec1	equ	0xFE5
  6914                           fsr1h	equ	0xFE2
  6915                           fsr1l	equ	0xFE1
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function ___lwdiv *****************
  6924 ;; Defined at:
  6925 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  dividend        2   12[BANK0 ] unsigned int 
  6928 ;;  divisor         2   14[BANK0 ] unsigned int 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  quotient        2   16[BANK0 ] unsigned int 
  6931 ;;  counter         1   18[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  2   12[BANK0 ] unsigned int 
  6934 ;; Registers used:
  6935 ;;		wreg, status,2, status,0
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6941 ;;      Params:         0       4       0       0
  6942 ;;      Locals:         0       3       0       0
  6943 ;;      Temps:          0       0       0       0
  6944 ;;      Totals:         0       7       0       0
  6945 ;;Total ram usage:        7 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    7
  6948 ;; This function calls:
  6949 ;;		Nothing
  6950 ;; This function is called by:
  6951 ;;		_UpdatePattern
  6952 ;;		_HSV_to_RGB
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text28
  6957  00220A                     __ptext28:
  6958                           	opt stack 0
  6959  00220A                     ___lwdiv:
  6960                           	opt stack 18
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;incstack = 0
  6964  00220A  0E00               	movlw	0
  6965  00220C  0100               	movlb	0	; () banked
  6966  00220E  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6967  002210  0E00               	movlw	0
  6968  002212  6F70               	movwf	___lwdiv@quotient& (0+255),b
  6969                           
  6970                           ; BSR set to: 0
  6971  002214  0100               	movlb	0	; () banked
  6972  002216  516E               	movf	___lwdiv@divisor& (0+255),w,b
  6973  002218  0100               	movlb	0	; () banked
  6974  00221A  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6975  00221C  B4D8               	btfsc	status,2,c
  6976  00221E  D02C               	goto	l1210
  6977                           
  6978                           ; BSR set to: 0
  6979  002220  0E01               	movlw	1
  6980  002222  0100               	movlb	0	; () banked
  6981  002224  6F72               	movwf	___lwdiv@counter& (0+255),b
  6982  002226  D006               	goto	l2826
  6983  002228                     l2824:
  6984                           
  6985                           ; BSR set to: 0
  6986  002228  0100               	movlb	0	; () banked
  6987  00222A  90D8               	bcf	status,0,c
  6988  00222C  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  6989  00222E  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6990  002230  0100               	movlb	0	; () banked
  6991  002232  2B72               	incf	___lwdiv@counter& (0+255),f,b
  6992  002234                     l2826:
  6993                           
  6994                           ; BSR set to: 0
  6995  002234  0100               	movlb	0	; () banked
  6996  002236  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6997  002238  D7F7               	goto	l2824
  6998  00223A                     l2828:
  6999                           
  7000                           ; BSR set to: 0
  7001  00223A  0100               	movlb	0	; () banked
  7002  00223C  90D8               	bcf	status,0,c
  7003  00223E  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  7004  002240  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007  002242  0100               	movlb	0	; () banked
  7008  002244  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7009  002246  0100               	movlb	0	; () banked
  7010  002248  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  7011  00224A  0100               	movlb	0	; () banked
  7012  00224C  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7013  00224E  0100               	movlb	0	; () banked
  7014  002250  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7015  002252  A0D8               	btfss	status,0,c
  7016  002254  D00A               	goto	l2836
  7017                           
  7018                           ; BSR set to: 0
  7019  002256  0100               	movlb	0	; () banked
  7020  002258  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7021  00225A  0100               	movlb	0	; () banked
  7022  00225C  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  7023  00225E  0100               	movlb	0	; () banked
  7024  002260  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7025  002262  0100               	movlb	0	; () banked
  7026  002264  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7027                           
  7028                           ; BSR set to: 0
  7029  002266  0100               	movlb	0	; () banked
  7030  002268  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  7031  00226A                     l2836:
  7032                           
  7033                           ; BSR set to: 0
  7034  00226A  0100               	movlb	0	; () banked
  7035  00226C  90D8               	bcf	status,0,c
  7036  00226E  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7037  002270  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  7038                           
  7039                           ; BSR set to: 0
  7040  002272  0100               	movlb	0	; () banked
  7041  002274  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  7042  002276  D7E1               	goto	l2828
  7043  002278                     l1210:
  7044                           
  7045                           ; BSR set to: 0
  7046  002278  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  7047  00227C  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7048                           
  7049                           ; BSR set to: 0
  7050  002280  0012               	return		;funcret
  7051  002282                     __end_of___lwdiv:
  7052                           	opt stack 0
  7053                           tosu	equ	0xFFF
  7054                           tosh	equ	0xFFE
  7055                           tosl	equ	0xFFD
  7056                           pclath	equ	0xFFA
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function _PausePattern *****************
  7076 ;; Defined at:
  7077 ;;		line 296 in file "Pattern_ControlService.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;		None
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      void 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7091 ;;      Params:         0       0       0       0
  7092 ;;      Locals:         0       0       0       0
  7093 ;;      Temps:          0       0       0       0
  7094 ;;      Totals:         0       0       0       0
  7095 ;;Total ram usage:        0 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    8
  7098 ;; This function calls:
  7099 ;;		_ES_Timer_StopTimer
  7100 ;; This function is called by:
  7101 ;;		_RunPatternControlService
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text29
  7106  00294E                     __ptext29:
  7107                           	opt stack 0
  7108  00294E                     _PausePattern:
  7109                           	opt stack 20
  7110                           
  7111                           ;Pattern_ControlService.c: 298: ES_Timer_StopTimer(0);
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;incstack = 0
  7115  00294E  0E00               	movlw	0
  7116  002950  EC6A  F012         	call	_ES_Timer_StopTimer
  7117  002954  0012               	return		;funcret
  7118  002956                     __end_of_PausePattern:
  7119                           	opt stack 0
  7120                           tosu	equ	0xFFF
  7121                           tosh	equ	0xFFE
  7122                           tosl	equ	0xFFD
  7123                           pclath	equ	0xFFA
  7124                           tblptru	equ	0xFF8
  7125                           tblptrh	equ	0xFF7
  7126                           tblptrl	equ	0xFF6
  7127                           tablat	equ	0xFF5
  7128                           prodh	equ	0xFF4
  7129                           prodl	equ	0xFF3
  7130                           postinc0	equ	0xFEE
  7131                           wreg	equ	0xFE8
  7132                           postdec1	equ	0xFE5
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function _ES_Timer_StopTimer *****************
  7143 ;; Defined at:
  7144 ;;		line 205 in file "ES_Timers.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  Num             1    wreg     unsigned char 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  Num             1    4[BANK0 ] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      enum E15477
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7158 ;;      Params:         0       0       0       0
  7159 ;;      Locals:         0       1       0       0
  7160 ;;      Temps:          0       4       0       0
  7161 ;;      Totals:         0       5       0       0
  7162 ;;Total ram usage:        5 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    7
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_StopPattern
  7169 ;;		_PausePattern
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text30
  7174  0024D4                     __ptext30:
  7175                           	opt stack 0
  7176  0024D4                     _ES_Timer_StopTimer:
  7177                           	opt stack 20
  7178                           
  7179                           ;incstack = 0
  7180                           ;ES_Timer_StopTimer@Num stored from wreg
  7181  0024D4  0100               	movlb	0	; () banked
  7182  0024D6  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  7183                           
  7184                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  7185  0024D8  0E0F               	movlw	15
  7186  0024DA  0100               	movlb	0	; () banked
  7187  0024DC  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  7188  0024DE  D001               	goto	l3094
  7189  0024E0  0012               	return	
  7190  0024E2                     l3094:
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  7194  0024E2  0100               	movlb	0	; () banked
  7195  0024E4  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  7196  0024E6  0D02               	mullw	2
  7197  0024E8  0E01               	movlw	low _BitNum2SetMask
  7198  0024EA  24F3               	addwf	prodl,w,c
  7199  0024EC  6EF6               	movwf	tblptrl,c
  7200  0024EE  0E03               	movlw	high _BitNum2SetMask
  7201  0024F0  20F4               	addwfc	prodh,w,c
  7202  0024F2  6EF7               	movwf	tblptrh,c
  7203  0024F4                     	if	0	;There are less than 3 active tblptr bytes
  7204  0024F4                     	endif
  7205  0024F4  0009               	tblrd		*+
  7206  0024F6  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  7207  0024FA  0009               	tblrd		*+
  7208  0024FC  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  7209  002500  0100               	movlb	0	; () banked
  7210  002502  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  7211  002504  0100               	movlb	0	; () banked
  7212  002506  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  7213  002508  0100               	movlb	0	; () banked
  7214  00250A  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  7215  00250C  0100               	movlb	0	; () banked
  7216  00250E  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  7217  002510  0100               	movlb	0	; () banked
  7218  002512  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  7219  002514  0100               	movlb	0	; () banked
  7220  002516  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  7221  002518  0100               	movlb	0	; () banked
  7222  00251A  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  7223  00251C  0100               	movlb	0	; () banked
  7224  00251E  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  7225  002520  0012               	return	
  7226  002522                     __end_of_ES_Timer_StopTimer:
  7227                           	opt stack 0
  7228                           tosu	equ	0xFFF
  7229                           tosh	equ	0xFFE
  7230                           tosl	equ	0xFFD
  7231                           pclath	equ	0xFFA
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           postdec1	equ	0xFE5
  7241                           fsr1h	equ	0xFE2
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _SetPattern *****************
  7251 ;; Defined at:
  7252 ;;		line 248 in file "Pattern_ControlService.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  PatternID       1    wreg     unsigned char 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  PatternID       1    0[BANK0 ] unsigned char 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		wreg
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7266 ;;      Params:         0       0       0       0
  7267 ;;      Locals:         0       1       0       0
  7268 ;;      Temps:          0       0       0       0
  7269 ;;      Totals:         0       1       0       0
  7270 ;;Total ram usage:        1 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    7
  7273 ;; This function calls:
  7274 ;;		Nothing
  7275 ;; This function is called by:
  7276 ;;		_RunCanRX_Service
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text31
  7281  00293C                     __ptext31:
  7282                           	opt stack 0
  7283  00293C                     _SetPattern:
  7284                           	opt stack 21
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;incstack = 0
  7288                           ;SetPattern@PatternID stored from wreg
  7289  00293C  0100               	movlb	0	; () banked
  7290  00293E  6F60               	movwf	SetPattern@PatternID& (0+255),b
  7291                           
  7292                           ;Pattern_ControlService.c: 249: PatternConfigs[1] = PatternID;
  7293  002940  C060  F0FC         	movff	SetPattern@PatternID,_PatternConfigs+1
  7294  002944  0012               	return		;funcret
  7295  002946                     __end_of_SetPattern:
  7296                           	opt stack 0
  7297                           tosu	equ	0xFFF
  7298                           tosh	equ	0xFFE
  7299                           tosl	equ	0xFFD
  7300                           pclath	equ	0xFFA
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           postinc0	equ	0xFEE
  7308                           wreg	equ	0xFE8
  7309                           postdec1	equ	0xFE5
  7310                           fsr1h	equ	0xFE2
  7311                           fsr1l	equ	0xFE1
  7312                           indf2	equ	0xFDF
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function _InitPins *****************
  7320 ;; Defined at:
  7321 ;;		line 274 in file "CanRX_Service.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;		None
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  1    wreg      void 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7335 ;;      Params:         0       0       0       0
  7336 ;;      Locals:         0       0       0       0
  7337 ;;      Temps:          0       0       0       0
  7338 ;;      Totals:         0       0       0       0
  7339 ;;Total ram usage:        0 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    7
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		_RunCanRX_Service
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text32
  7350  0028A2                     __ptext32:
  7351                           	opt stack 0
  7352  0028A2                     _InitPins:
  7353                           	opt stack 21
  7354                           
  7355                           ;CanRX_Service.c: 277: PORTB = 0x00;
  7356                           
  7357                           ;incstack = 0
  7358  0028A2  0E00               	movlw	0
  7359  0028A4  6E81               	movwf	3969,c	;volatile
  7360                           
  7361                           ;CanRX_Service.c: 278: LATB = 0x00;
  7362  0028A6  0E00               	movlw	0
  7363  0028A8  6E8A               	movwf	3978,c	;volatile
  7364                           
  7365                           ;CanRX_Service.c: 279: TRISBbits.TRISB2 = 0;
  7366  0028AA  9493               	bcf	3987,2,c	;volatile
  7367                           
  7368                           ;CanRX_Service.c: 280: TRISBbits.TRISB3 = 1;
  7369  0028AC  8693               	bsf	3987,3,c	;volatile
  7370                           
  7371                           ;CanRX_Service.c: 283: PORTA = 0x00;
  7372  0028AE  0E00               	movlw	0
  7373  0028B0  6E80               	movwf	3968,c	;volatile
  7374                           
  7375                           ;CanRX_Service.c: 284: LATA = 0x00;
  7376  0028B2  0E00               	movlw	0
  7377  0028B4  6E89               	movwf	3977,c	;volatile
  7378                           
  7379                           ;CanRX_Service.c: 285: TRISA = 0x00;
  7380  0028B6  0E00               	movlw	0
  7381  0028B8  6E92               	movwf	3986,c	;volatile
  7382  0028BA  0012               	return		;funcret
  7383  0028BC                     __end_of_InitPins:
  7384                           	opt stack 0
  7385                           tosu	equ	0xFFF
  7386                           tosh	equ	0xFFE
  7387                           tosl	equ	0xFFD
  7388                           pclath	equ	0xFFA
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           postinc0	equ	0xFEE
  7396                           wreg	equ	0xFE8
  7397                           postdec1	equ	0xFE5
  7398                           fsr1h	equ	0xFE2
  7399                           fsr1l	equ	0xFE1
  7400                           indf2	equ	0xFDF
  7401                           postinc2	equ	0xFDE
  7402                           postdec2	equ	0xFDD
  7403                           fsr2h	equ	0xFDA
  7404                           fsr2l	equ	0xFD9
  7405                           status	equ	0xFD8
  7406                           
  7407 ;; *************** function _InitCanHardware *****************
  7408 ;; Defined at:
  7409 ;;		line 206 in file "CanRX_Service.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;		None
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  1    wreg      void 
  7416 ;; Registers used:
  7417 ;;		wreg, status,2
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7423 ;;      Params:         0       0       0       0
  7424 ;;      Locals:         0       0       0       0
  7425 ;;      Temps:          0       0       0       0
  7426 ;;      Totals:         0       0       0       0
  7427 ;;Total ram usage:        0 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    7
  7430 ;; This function calls:
  7431 ;;		Nothing
  7432 ;; This function is called by:
  7433 ;;		_RunCanRX_Service
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text33
  7438  00208E                     __ptext33:
  7439                           	opt stack 0
  7440  00208E                     _InitCanHardware:
  7441                           	opt stack 21
  7442                           
  7443                           ;CanRX_Service.c: 210: CANCON = 0x80;
  7444                           
  7445                           ;incstack = 0
  7446  00208E  0E80               	movlw	128
  7447  002090  6E6F               	movwf	3951,c	;volatile
  7448  002092                     l778:
  7449  002092  AE6E               	btfss	3950,7,c	;volatile
  7450  002094  D7FE               	goto	l778
  7451                           
  7452                           ;CanRX_Service.c: 213: CIOCON = 0x20;
  7453  002096  0E20               	movlw	32
  7454  002098  6E73               	movwf	3955,c	;volatile
  7455                           
  7456                           ;CanRX_Service.c: 216: BRGCON2bits.SEG2PHTS = 1;
  7457  00209A  8E71               	bsf	3953,7,c	;volatile
  7458                           
  7459                           ;CanRX_Service.c: 218: BRGCON1bits.BRP0 = 0;
  7460  00209C  9070               	bcf	3952,0,c	;volatile
  7461                           
  7462                           ;CanRX_Service.c: 219: BRGCON1bits.BRP1 = 1;
  7463  00209E  8270               	bsf	3952,1,c	;volatile
  7464                           
  7465                           ;CanRX_Service.c: 220: BRGCON1bits.BRP2 = 1;
  7466  0020A0  8470               	bsf	3952,2,c	;volatile
  7467                           
  7468                           ;CanRX_Service.c: 221: BRGCON1bits.BRP3 = 0;
  7469  0020A2  9670               	bcf	3952,3,c	;volatile
  7470                           
  7471                           ;CanRX_Service.c: 223: BRGCON2bits.PRSEG0 = 0;
  7472  0020A4  9071               	bcf	3953,0,c	;volatile
  7473                           
  7474                           ;CanRX_Service.c: 224: BRGCON2bits.PRSEG1 = 0;
  7475  0020A6  9271               	bcf	3953,1,c	;volatile
  7476                           
  7477                           ;CanRX_Service.c: 225: BRGCON2bits.PRSEG2 = 0;
  7478  0020A8  9471               	bcf	3953,2,c	;volatile
  7479                           
  7480                           ;CanRX_Service.c: 227: BRGCON2bits.SEG1PH0 = 0;
  7481  0020AA  9671               	bcf	3953,3,c	;volatile
  7482                           
  7483                           ;CanRX_Service.c: 228: BRGCON2bits.SEG1PH1 = 0;
  7484  0020AC  9871               	bcf	3953,4,c	;volatile
  7485                           
  7486                           ;CanRX_Service.c: 229: BRGCON2bits.SEG1PH2 = 0;
  7487  0020AE  9A71               	bcf	3953,5,c	;volatile
  7488                           
  7489                           ;CanRX_Service.c: 231: BRGCON3bits.SEG2PH0 = 1;
  7490  0020B0  8072               	bsf	3954,0,c	;volatile
  7491                           
  7492                           ;CanRX_Service.c: 232: BRGCON3bits.SEG2PH1 = 0;
  7493  0020B2  9272               	bcf	3954,1,c	;volatile
  7494                           
  7495                           ;CanRX_Service.c: 233: BRGCON3bits.SEG2PH2 = 0;
  7496  0020B4  9472               	bcf	3954,2,c	;volatile
  7497                           
  7498                           ;CanRX_Service.c: 235: BRGCON1bits.SJW0 = 0;
  7499  0020B6  9C70               	bcf	3952,6,c	;volatile
  7500                           
  7501                           ;CanRX_Service.c: 239: RXB0CONbits.RXB0DBEN = 0;
  7502  0020B8  9460               	bcf	3936,2,c	;volatile
  7503                           
  7504                           ;CanRX_Service.c: 240: RXB0CONbits.RXM0 = 0;
  7505  0020BA  9A60               	bcf	3936,5,c	;volatile
  7506                           
  7507                           ;CanRX_Service.c: 241: RXB0CONbits.RXM1 = 0;
  7508  0020BC  9C60               	bcf	3936,6,c	;volatile
  7509                           
  7510                           ;CanRX_Service.c: 242: RXF0SIDH = 0x00;
  7511  0020BE  0E00               	movlw	0
  7512  0020C0  010F               	movlb	15	; () banked
  7513  0020C2  6F00               	movwf	0,b	;volatile
  7514                           
  7515                           ;CanRX_Service.c: 243: RXF0SIDL = 0x08;
  7516  0020C4  0E08               	movlw	8
  7517  0020C6  010F               	movlb	15	; () banked
  7518  0020C8  6F01               	movwf	1,b	;volatile
  7519                           
  7520                           ;CanRX_Service.c: 244: RXF0EIDH = 0x00;
  7521  0020CA  0E00               	movlw	0
  7522  0020CC  010F               	movlb	15	; () banked
  7523  0020CE  6F02               	movwf	2,b	;volatile
  7524                           
  7525                           ;CanRX_Service.c: 245: RXF0EIDL = 0x01;
  7526  0020D0  0E01               	movlw	1
  7527  0020D2  010F               	movlb	15	; () banked
  7528  0020D4  6F03               	movwf	3,b	;volatile
  7529                           
  7530                           ;CanRX_Service.c: 247: RXM0SIDH = 0x00;
  7531  0020D6  0E00               	movlw	0
  7532  0020D8  010F               	movlb	15	; () banked
  7533  0020DA  6F18               	movwf	24,b	;volatile
  7534                           
  7535                           ;CanRX_Service.c: 248: RXM0SIDL = 0x00;
  7536  0020DC  0E00               	movlw	0
  7537  0020DE  010F               	movlb	15	; () banked
  7538  0020E0  6F19               	movwf	25,b	;volatile
  7539                           
  7540                           ;CanRX_Service.c: 249: RXM0EIDH = 0x00;
  7541  0020E2  0E00               	movlw	0
  7542  0020E4  010F               	movlb	15	; () banked
  7543  0020E6  6F1A               	movwf	26,b	;volatile
  7544                           
  7545                           ;CanRX_Service.c: 250: RXM0EIDL = 0x01;
  7546  0020E8  0E01               	movlw	1
  7547  0020EA  010F               	movlb	15	; () banked
  7548  0020EC  6F1B               	movwf	27,b	;volatile
  7549                           
  7550                           ;CanRX_Service.c: 254: ECANCON = 0x00;
  7551  0020EE  0E00               	movlw	0
  7552  0020F0  6E77               	movwf	3959,c	;volatile
  7553                           
  7554                           ;CanRX_Service.c: 255: CANCON = 0b00010000;
  7555  0020F2  0E10               	movlw	16
  7556  0020F4  6E6F               	movwf	3951,c	;volatile
  7557  0020F6                     l781:
  7558  0020F6  BE6E               	btfsc	3950,7,c	;volatile
  7559  0020F8  D7FE               	goto	l781
  7560                           
  7561                           ;CanRX_Service.c: 259: RXB0IE = 1;
  7562  0020FA  80A3               	bsf	4003,0,c	;volatile
  7563                           
  7564                           ;CanRX_Service.c: 260: ERRIE = 1;
  7565  0020FC  8AA3               	bsf	4003,5,c	;volatile
  7566                           
  7567                           ;CanRX_Service.c: 261: IRXIE = 1;
  7568  0020FE  8EA3               	bsf	4003,7,c	;volatile
  7569                           
  7570                           ;CanRX_Service.c: 265: RXB0IF = 0;
  7571  002100  90A4               	bcf	4004,0,c	;volatile
  7572                           
  7573                           ;CanRX_Service.c: 266: ERRIF = 0;
  7574  002102  9AA4               	bcf	4004,5,c	;volatile
  7575                           
  7576                           ;CanRX_Service.c: 267: IRXIF = 0;
  7577  002104  9EA4               	bcf	4004,7,c	;volatile
  7578                           
  7579                           ;CanRX_Service.c: 268: TXB0IE = 1;
  7580  002106  84A3               	bsf	4003,2,c	;volatile
  7581                           
  7582                           ;CanRX_Service.c: 269: TXB0IF = 0;
  7583  002108  94A4               	bcf	4004,2,c	;volatile
  7584                           
  7585                           ;CanRX_Service.c: 270: TXB0CONbits.TXREQ = 0;
  7586  00210A  010F               	movlb	15	; () banked
  7587  00210C  9740               	bcf	64,3,b	;volatile
  7588                           
  7589                           ;CanRX_Service.c: 271: RXB0CONbits.RXFUL = 0;
  7590  00210E  9E60               	bcf	3936,7,c	;volatile
  7591                           
  7592                           ; BSR set to: 15
  7593  002110  0012               	return		;funcret
  7594  002112                     __end_of_InitCanHardware:
  7595                           	opt stack 0
  7596                           tosu	equ	0xFFF
  7597                           tosh	equ	0xFFE
  7598                           tosl	equ	0xFFD
  7599                           pclath	equ	0xFFA
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           postinc0	equ	0xFEE
  7607                           wreg	equ	0xFE8
  7608                           postdec1	equ	0xFE5
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _ES_DeQueue *****************
  7619 ;; Defined at:
  7620 ;;		line 164 in file "ES_Queue.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  7623 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  7624 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  7625 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  7628 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  7629 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  7630 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      unsigned char 
  7633 ;; Registers used:
  7634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7640 ;;      Params:         0       4       0       0
  7641 ;;      Locals:         0       4       0       0
  7642 ;;      Temps:          0       2       0       0
  7643 ;;      Totals:         0      10       0       0
  7644 ;;Total ram usage:       10 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    8
  7647 ;; This function calls:
  7648 ;;		___lbmod
  7649 ;;		___wmul
  7650 ;; This function is called by:
  7651 ;;		_ES_Run
  7652 ;;		_ES_RecallEvents
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text34
  7657  00131C                     __ptext34:
  7658                           	opt stack 0
  7659  00131C                     _ES_DeQueue:
  7660                           	opt stack 21
  7661                           
  7662                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  7663                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  7664                           ;ES_Queue.c: 168: uint8_t NumLeft;
  7665                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  7666                           
  7667                           ; BSR set to: 15
  7668                           ;incstack = 0
  7669  00131C  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  7670  001320  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  7671                           
  7672                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  7673  001324  0100               	movlb	0	; () banked
  7674  001326  EE20 F002          	lfsr	2,2
  7675  00132A  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7676  00132C  26D9               	addwf	fsr2l,f,c
  7677  00132E  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7678  001330  22DA               	addwfc	fsr2h,f,c
  7679  001332  50DF               	movf	indf2,w,c
  7680  001334  B4D8               	btfsc	status,2,c
  7681  001336  D06F               	goto	l3398
  7682                           
  7683                           ; BSR set to: 0
  7684                           
  7685                           ;ES_Queue.c: 172: {
  7686                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7687  001338  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  7688  00133C  9EF2               	bcf	intcon,7,c	;volatile
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  7692                           
  7693                           ; BSR set to: 0
  7694  00133E  0100               	movlb	0	; () banked
  7695  001340  EE20 F001          	lfsr	2,1
  7696  001344  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7697  001346  26D9               	addwf	fsr2l,f,c
  7698  001348  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7699  00134A  22DA               	addwfc	fsr2h,f,c
  7700  00134C  50DF               	movf	indf2,w,c
  7701  00134E  0100               	movlb	0	; () banked
  7702  001350  6F70               	movwf	??_ES_DeQueue& (0+255),b
  7703  001352  0E01               	movlw	1
  7704  001354  0100               	movlb	0	; () banked
  7705  001356  2570               	addwf	??_ES_DeQueue& (0+255),w,b
  7706  001358  0100               	movlb	0	; () banked
  7707  00135A  6F66               	movwf	___wmul@multiplier& (0+255),b
  7708  00135C  0100               	movlb	0	; () banked
  7709  00135E  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  7710  001360  0E00               	movlw	0
  7711  001362  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  7712  001364  0E00               	movlw	0
  7713  001366  0100               	movlb	0	; () banked
  7714  001368  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7715  00136A  0E03               	movlw	3
  7716  00136C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  7717  00136E  EC77  F013         	call	___wmul	;wreg free
  7718  001372  0100               	movlb	0	; () banked
  7719  001374  5166               	movf	?___wmul& (0+255),w,b
  7720  001376  0100               	movlb	0	; () banked
  7721  001378  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  7722  00137A  6ED9               	movwf	fsr2l,c
  7723  00137C  0100               	movlb	0	; () banked
  7724  00137E  5167               	movf	(?___wmul+1)& (0+255),w,b
  7725  001380  0100               	movlb	0	; () banked
  7726  001382  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  7727  001384  6EDA               	movwf	fsr2h,c
  7728  001386  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  7729  00138A  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  7730  00138E  CFDE FFE6          	movff	postinc2,postinc1
  7731  001392  CFDE FFE6          	movff	postinc2,postinc1
  7732  001396  CFDE FFE6          	movff	postinc2,postinc1
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  7736  00139A  0100               	movlb	0	; () banked
  7737  00139C  EE20 F001          	lfsr	2,1
  7738  0013A0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7739  0013A2  26D9               	addwf	fsr2l,f,c
  7740  0013A4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7741  0013A6  22DA               	addwfc	fsr2h,f,c
  7742  0013A8  2ADF               	incf	indf2,f,c
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  7746  0013AA  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  7747  0013AE  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  7748  0013B2  0100               	movlb	0	; () banked
  7749  0013B4  EE10 F001          	lfsr	1,1
  7750  0013B8  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7751  0013BA  26E1               	addwf	fsr1l,f,c
  7752  0013BC  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7753  0013BE  22E2               	addwfc	fsr1h,f,c
  7754  0013C0  50DE               	movf	postinc2,w,c
  7755  0013C2  5CE6               	subwf	postinc1,w,c
  7756  0013C4  A0D8               	btfss	status,0,c
  7757  0013C6  D019               	goto	l3394
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  7761  0013C8  0100               	movlb	0	; () banked
  7762  0013CA  EE20 F001          	lfsr	2,1
  7763  0013CE  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7764  0013D0  26D9               	addwf	fsr2l,f,c
  7765  0013D2  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7766  0013D4  22DA               	addwfc	fsr2h,f,c
  7767  0013D6  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  7768  0013DA  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  7769  0013DE  50E7               	movf	indf1,w,c
  7770  0013E0  0100               	movlb	0	; () banked
  7771  0013E2  6F60               	movwf	___lbmod@divisor& (0+255),b
  7772  0013E4  0100               	movlb	0	; () banked
  7773  0013E6  EE10 F001          	lfsr	1,1
  7774  0013EA  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7775  0013EC  26E1               	addwf	fsr1l,f,c
  7776  0013EE  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7777  0013F0  22E2               	addwfc	fsr1h,f,c
  7778  0013F2  50E7               	movf	indf1,w,c
  7779  0013F4  ECDD  F012         	call	___lbmod
  7780  0013F8  6EDF               	movwf	indf2,c
  7781  0013FA                     l3394:
  7782                           
  7783                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  7784  0013FA  0100               	movlb	0	; () banked
  7785  0013FC  EE20 F002          	lfsr	2,2
  7786  001400  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7787  001402  26D9               	addwf	fsr2l,f,c
  7788  001404  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7789  001406  22DA               	addwfc	fsr2h,f,c
  7790  001408  06DF               	decf	indf2,f,c
  7791  00140A  50DF               	movf	indf2,w,c
  7792  00140C  0100               	movlb	0	; () banked
  7793  00140E  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  7797  001410  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  7798                           
  7799                           ;ES_Queue.c: 183: }else {
  7800  001414  D014               	goto	l3404
  7801  001416                     l3398:
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  7805  001416  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  7806  00141A  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  7807  00141E  0E00               	movlw	0
  7808  001420  6EDF               	movwf	indf2,c
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  7812  001422  0100               	movlb	0	; () banked
  7813  001424  EE20 F001          	lfsr	2,1
  7814  001428  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  7815  00142A  26D9               	addwf	fsr2l,f,c
  7816  00142C  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  7817  00142E  22DA               	addwfc	fsr2h,f,c
  7818  001430  0E00               	movlw	0
  7819  001432  6EDE               	movwf	postinc2,c
  7820  001434  0E00               	movlw	0
  7821  001436  6EDD               	movwf	postdec2,c
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;ES_Queue.c: 186: NumLeft = 0;
  7825  001438  0E00               	movlw	0
  7826  00143A  0100               	movlb	0	; () banked
  7827  00143C  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7828  00143E                     l3404:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;ES_Queue.c: 187: }
  7832                           ;ES_Queue.c: 188: return NumLeft;
  7833  00143E  0100               	movlb	0	; () banked
  7834  001440  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  7835  001442  0012               	return	
  7836  001444                     __end_of_ES_DeQueue:
  7837                           	opt stack 0
  7838                           tosu	equ	0xFFF
  7839                           tosh	equ	0xFFE
  7840                           tosl	equ	0xFFD
  7841                           pclath	equ	0xFFA
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           postinc0	equ	0xFEE
  7850                           wreg	equ	0xFE8
  7851                           indf1	equ	0xFE7
  7852                           postinc1	equ	0xFE6
  7853                           postdec1	equ	0xFE5
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function ___lbmod *****************
  7864 ;; Defined at:
  7865 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  dividend        1    wreg     unsigned char 
  7868 ;;  divisor         1    0[BANK0 ] unsigned char 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  dividend        1    1[BANK0 ] unsigned char 
  7871 ;;  rem             1    3[BANK0 ] unsigned char 
  7872 ;;  counter         1    2[BANK0 ] unsigned char 
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      unsigned char 
  7875 ;; Registers used:
  7876 ;;		wreg, status,2, status,0
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7882 ;;      Params:         0       1       0       0
  7883 ;;      Locals:         0       3       0       0
  7884 ;;      Temps:          0       0       0       0
  7885 ;;      Totals:         0       4       0       0
  7886 ;;Total ram usage:        4 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    7
  7889 ;; This function calls:
  7890 ;;		Nothing
  7891 ;; This function is called by:
  7892 ;;		_ES_DeQueue
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           	psect	text35
  7897  0025BA                     __ptext35:
  7898                           	opt stack 0
  7899  0025BA                     ___lbmod:
  7900                           	opt stack 21
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;incstack = 0
  7904                           ;___lbmod@dividend stored from wreg
  7905  0025BA  0100               	movlb	0	; () banked
  7906  0025BC  6F61               	movwf	___lbmod@dividend& (0+255),b
  7907  0025BE  0E08               	movlw	8
  7908  0025C0  0100               	movlb	0	; () banked
  7909  0025C2  6F62               	movwf	___lbmod@counter& (0+255),b
  7910  0025C4  0E00               	movlw	0
  7911  0025C6  0100               	movlb	0	; () banked
  7912  0025C8  6F63               	movwf	___lbmod@rem& (0+255),b
  7913  0025CA                     l3350:
  7914                           
  7915                           ; BSR set to: 0
  7916  0025CA  90D8               	bcf	status,0,c
  7917  0025CC  0100               	movlb	0	; () banked
  7918  0025CE  3561               	rlcf	___lbmod@dividend& (0+255),w,b
  7919  0025D0  0100               	movlb	0	; () banked
  7920  0025D2  3563               	rlcf	___lbmod@rem& (0+255),w,b
  7921  0025D4  0100               	movlb	0	; () banked
  7922  0025D6  6F63               	movwf	___lbmod@rem& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925  0025D8  0100               	movlb	0	; () banked
  7926  0025DA  90D8               	bcf	status,0,c
  7927  0025DC  3761               	rlcf	___lbmod@dividend& (0+255),f,b
  7928                           
  7929                           ; BSR set to: 0
  7930  0025DE  0100               	movlb	0	; () banked
  7931  0025E0  5160               	movf	___lbmod@divisor& (0+255),w,b
  7932  0025E2  0100               	movlb	0	; () banked
  7933  0025E4  5D63               	subwf	___lbmod@rem& (0+255),w,b
  7934  0025E6  A0D8               	btfss	status,0,c
  7935  0025E8  D004               	goto	l3358
  7936                           
  7937                           ; BSR set to: 0
  7938  0025EA  0100               	movlb	0	; () banked
  7939  0025EC  5160               	movf	___lbmod@divisor& (0+255),w,b
  7940  0025EE  0100               	movlb	0	; () banked
  7941  0025F0  5F63               	subwf	___lbmod@rem& (0+255),f,b
  7942  0025F2                     l3358:
  7943                           
  7944                           ; BSR set to: 0
  7945  0025F2  0100               	movlb	0	; () banked
  7946  0025F4  2F62               	decfsz	___lbmod@counter& (0+255),f,b
  7947  0025F6  D7E9               	goto	l3350
  7948                           
  7949                           ; BSR set to: 0
  7950                           
  7951                           ; BSR set to: 0
  7952  0025F8  0100               	movlb	0	; () banked
  7953  0025FA  5163               	movf	___lbmod@rem& (0+255),w,b
  7954  0025FC  0012               	return	
  7955  0025FE                     __end_of___lbmod:
  7956                           	opt stack 0
  7957                           tosu	equ	0xFFF
  7958                           tosh	equ	0xFFE
  7959                           tosl	equ	0xFFD
  7960                           pclath	equ	0xFFA
  7961                           tblptru	equ	0xFF8
  7962                           tblptrh	equ	0xFF7
  7963                           tblptrl	equ	0xFF6
  7964                           tablat	equ	0xFF5
  7965                           prodh	equ	0xFF4
  7966                           prodl	equ	0xFF3
  7967                           intcon	equ	0xFF2
  7968                           postinc0	equ	0xFEE
  7969                           wreg	equ	0xFE8
  7970                           indf1	equ	0xFE7
  7971                           postinc1	equ	0xFE6
  7972                           postdec1	equ	0xFE5
  7973                           fsr1h	equ	0xFE2
  7974                           fsr1l	equ	0xFE1
  7975                           indf2	equ	0xFDF
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function _ES_CheckUserEvents *****************
  7983 ;; Defined at:
  7984 ;;		line 46 in file "ES_CheckEvents.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;  i               1    0[BANK0 ] unsigned char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      unsigned char 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7998 ;;      Params:         0       0       0       0
  7999 ;;      Locals:         0       1       0       0
  8000 ;;      Temps:          0       0       0       0
  8001 ;;      Totals:         0       1       0       0
  8002 ;;Total ram usage:        1 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    8
  8005 ;; This function calls:
  8006 ;;		_Check4Keystroke
  8007 ;; This function is called by:
  8008 ;;		_ES_Run
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text36
  8013  002570                     __ptext36:
  8014                           	opt stack 0
  8015  002570                     _ES_CheckUserEvents:
  8016                           	opt stack 21
  8017                           
  8018                           ;ES_CheckEvents.c: 48: uint8_t i;
  8019                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;incstack = 0
  8023  002570  0E00               	movlw	0
  8024  002572  0100               	movlb	0	; () banked
  8025  002574  6F60               	movwf	ES_CheckUserEvents@i& (0+255),b
  8026  002576  0100               	movlb	0	; () banked
  8027  002578  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  8028  00257A  0100               	movlb	0	; () banked
  8029  00257C  A4D8               	btfss	status,2,c
  8030  00257E  0012               	return	
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  8034                           
  8035                           ; BSR set to: 0
  8036                           
  8037                           ; BSR set to: 0
  8038  002580  0100               	movlb	0	; () banked
  8039  002582  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  8040  002584  0D02               	mullw	2
  8041  002586  0E65               	movlw	low _ES_EventList
  8042  002588  24F3               	addwf	prodl,w,c
  8043  00258A  6EF6               	movwf	tblptrl,c
  8044  00258C  0E03               	movlw	high _ES_EventList
  8045  00258E  20F4               	addwfc	prodh,w,c
  8046  002590  6EF7               	movwf	tblptrh,c
  8047  002592                     	if	0	;There are less than 3 active tblptr bytes
  8048  002592                     	endif
  8049  002592  D801               	call	u1938
  8050  002594  D00C               	goto	u1939
  8051  002596                     u1938:
  8052  002596  0005               	push	
  8053  002598  6EFA               	movwf	pclath,c
  8054  00259A  0009               	tblrd		*+
  8055  00259C  50F5               	movf	tablat,w,c
  8056  00259E  6EFD               	movwf	tosl,c
  8057  0025A0  0009               	tblrd		*+
  8058  0025A2  50F5               	movf	tablat,w,c
  8059  0025A4  6EFE               	movwf	tosh,c
  8060  0025A6  50F8               	movf	tblptru,w,c
  8061  0025A8  6EFF               	movwf	tosu,c
  8062  0025AA  50FA               	movf	pclath,w,c
  8063  0025AC  0012               	return		;indir
  8064  0025AE                     u1939:
  8065  0025AE  06E8               	decf	wreg,f,c
  8066  0025B0  B4D8               	btfsc	status,2,c
  8067  0025B2  0012               	return	
  8068                           
  8069                           ;ES_CheckEvents.c: 52: break;
  8070  0025B4  0100               	movlb	0	; () banked
  8071  0025B6  2B60               	incf	ES_CheckUserEvents@i& (0+255),f,b
  8072  0025B8  D7DE               	goto	L17
  8073  0025BA                     __end_of_ES_CheckUserEvents:
  8074                           	opt stack 0
  8075                           tosu	equ	0xFFF
  8076                           tosh	equ	0xFFE
  8077                           tosl	equ	0xFFD
  8078                           pclath	equ	0xFFA
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           postinc0	equ	0xFEE
  8087                           wreg	equ	0xFE8
  8088                           indf1	equ	0xFE7
  8089                           postinc1	equ	0xFE6
  8090                           postdec1	equ	0xFE5
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _Check4Keystroke *****************
  8101 ;; Defined at:
  8102 ;;		line 62 in file "EventCheckers.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      unsigned char 
  8109 ;; Registers used:
  8110 ;;		wreg
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8116 ;;      Params:         0       0       0       0
  8117 ;;      Locals:         0       0       0       0
  8118 ;;      Temps:          0       0       0       0
  8119 ;;      Totals:         0       0       0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    7
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_ES_CheckUserEvents
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text37
  8131  002968                     __ptext37:
  8132                           	opt stack 0
  8133  002968                     _Check4Keystroke:
  8134                           	opt stack 21
  8135                           
  8136                           ;EventCheckers.c: 78: return 0;
  8137                           
  8138                           ;incstack = 0
  8139  002968  0E00               	movlw	0
  8140  00296A  0012               	return	
  8141  00296C                     __end_of_Check4Keystroke:
  8142                           	opt stack 0
  8143                           tosu	equ	0xFFF
  8144                           tosh	equ	0xFFE
  8145                           tosl	equ	0xFFD
  8146                           pclath	equ	0xFFA
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           postinc0	equ	0xFEE
  8155                           wreg	equ	0xFE8
  8156                           indf1	equ	0xFE7
  8157                           postinc1	equ	0xFE6
  8158                           postdec1	equ	0xFE5
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           fsr2h	equ	0xFDA
  8165                           fsr2l	equ	0xFD9
  8166                           status	equ	0xFD8
  8167                           
  8168 ;; *************** function _ES_Initialize *****************
  8169 ;; Defined at:
  8170 ;;		line 242 in file "ES_Framework.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  NewRate         2   33[BANK0 ] enum E15428
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  i               1   35[BANK0 ] unsigned char 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      enum E15499
  8177 ;; Registers used:
  8178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8184 ;;      Params:         0       2       0       0
  8185 ;;      Locals:         0       1       0       0
  8186 ;;      Temps:          0       0       0       0
  8187 ;;      Totals:         0       3       0       0
  8188 ;;Total ram usage:        3 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:   11
  8191 ;; This function calls:
  8192 ;;		_ES_InitQueue
  8193 ;;		_ES_Timer_Init
  8194 ;;		_InitCanRX_Service
  8195 ;;		_InitPatternControlService
  8196 ;;		_InitSPI32ControlService
  8197 ;; This function is called by:
  8198 ;;		_main
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           	psect	text38
  8203  00187A                     __ptext38:
  8204                           	opt stack 0
  8205  00187A                     _ES_Initialize:
  8206                           	opt stack 19
  8207                           
  8208                           ;ES_Framework.c: 243: uint8_t i;
  8209                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  8210                           
  8211                           ;incstack = 0
  8212  00187A  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  8213  00187E  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  8214  001882  EC91  F014         	call	_ES_Timer_Init	;wreg free
  8215                           
  8216                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  8217  001886  0E00               	movlw	0
  8218  001888  0100               	movlb	0	; () banked
  8219  00188A  6F83               	movwf	ES_Initialize@i& (0+255),b
  8220  00188C                     l3646:
  8221                           
  8222                           ; BSR set to: 0
  8223  00188C  0E02               	movlw	2
  8224  00188E  0100               	movlb	0	; () banked
  8225  001890  6583               	cpfsgt	ES_Initialize@i& (0+255),b
  8226  001892  D001               	goto	l3650
  8227  001894  D066               	goto	l3670
  8228  001896                     l3650:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  8232                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  8233  001896  0100               	movlb	0	; () banked
  8234  001898  5183               	movf	ES_Initialize@i& (0+255),w,b
  8235  00189A  0D04               	mullw	4
  8236  00189C  0E50               	movlw	low _ServDescList
  8237  00189E  24F3               	addwf	prodl,w,c
  8238  0018A0  6EF6               	movwf	tblptrl,c
  8239  0018A2  0E03               	movlw	high _ServDescList
  8240  0018A4  20F4               	addwfc	prodh,w,c
  8241  0018A6  6EF7               	movwf	tblptrh,c
  8242  0018A8                     	if	0	;There are less than 3 active tblptr bytes
  8243  0018A8                     	endif
  8244  0018A8  0009               	tblrd		*+
  8245  0018AA  50F5               	movf	tablat,w,c
  8246  0018AC  0009               	tblrd		*+
  8247  0018AE  10F5               	iorwf	tablat,w,c
  8248  0018B0  B4D8               	btfsc	status,2,c
  8249  0018B2  D013               	goto	l3654
  8250                           
  8251                           ; BSR set to: 0
  8252  0018B4  0100               	movlb	0	; () banked
  8253  0018B6  5183               	movf	ES_Initialize@i& (0+255),w,b
  8254  0018B8  0D04               	mullw	4
  8255  0018BA  0E02               	movlw	2
  8256  0018BC  26F3               	addwf	prodl,f,c
  8257  0018BE  0E00               	movlw	0
  8258  0018C0  22F4               	addwfc	prodh,f,c
  8259  0018C2  0E50               	movlw	low _ServDescList
  8260  0018C4  24F3               	addwf	prodl,w,c
  8261  0018C6  6EF6               	movwf	tblptrl,c
  8262  0018C8  0E03               	movlw	high _ServDescList
  8263  0018CA  20F4               	addwfc	prodh,w,c
  8264  0018CC  6EF7               	movwf	tblptrh,c
  8265  0018CE                     	if	0	;There are less than 3 active tblptr bytes
  8266  0018CE                     	endif
  8267  0018CE  0009               	tblrd		*+
  8268  0018D0  50F5               	movf	tablat,w,c
  8269  0018D2  0009               	tblrd		*+
  8270  0018D4  10F5               	iorwf	tablat,w,c
  8271  0018D6  A4D8               	btfss	status,2,c
  8272  0018D8  D002               	goto	l3658
  8273  0018DA                     l3654:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;ES_Framework.c: 249: return FailedPointer;
  8277  0018DA  0E03               	movlw	3
  8278                           
  8279                           ; BSR set to: 0
  8280  0018DC  0012               	return	
  8281  0018DE                     l3658:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  8285  0018DE  0100               	movlb	0	; () banked
  8286  0018E0  5183               	movf	ES_Initialize@i& (0+255),w,b
  8287  0018E2  0D03               	mullw	3
  8288  0018E4  0E5C               	movlw	low _EventQueues
  8289  0018E6  24F3               	addwf	prodl,w,c
  8290  0018E8  6EF6               	movwf	tblptrl,c
  8291  0018EA  0E03               	movlw	high _EventQueues
  8292  0018EC  20F4               	addwfc	prodh,w,c
  8293  0018EE  6EF7               	movwf	tblptrh,c
  8294  0018F0                     	if	0	;There are less than 3 active tblptr bytes
  8295  0018F0                     	endif
  8296  0018F0  0009               	tblrd		*+
  8297  0018F2  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
  8298  0018F6  000A               	tblrd		*-
  8299  0018F8  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
  8300  0018FC  0100               	movlb	0	; () banked
  8301  0018FE  5183               	movf	ES_Initialize@i& (0+255),w,b
  8302  001900  0D03               	mullw	3
  8303  001902  0E02               	movlw	2
  8304  001904  26F3               	addwf	prodl,f,c
  8305  001906  0E00               	movlw	0
  8306  001908  22F4               	addwfc	prodh,f,c
  8307  00190A  0E5C               	movlw	low _EventQueues
  8308  00190C  24F3               	addwf	prodl,w,c
  8309  00190E  6EF6               	movwf	tblptrl,c
  8310  001910  0E03               	movlw	high _EventQueues
  8311  001912  20F4               	addwfc	prodh,w,c
  8312  001914  6EF7               	movwf	tblptrh,c
  8313  001916                     	if	0	;There are less than 3 active tblptr bytes
  8314  001916                     	endif
  8315  001916  0008               	tblrd		*
  8316  001918  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
  8317  00191C  EC1F  F013         	call	_ES_InitQueue	;wreg free
  8318                           
  8319                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  8320  001920  0100               	movlb	0	; () banked
  8321  001922  5183               	movf	ES_Initialize@i& (0+255),w,b
  8322  001924  0D04               	mullw	4
  8323  001926  0E50               	movlw	low _ServDescList
  8324  001928  24F3               	addwf	prodl,w,c
  8325  00192A  6EF6               	movwf	tblptrl,c
  8326  00192C  0E03               	movlw	high _ServDescList
  8327  00192E  20F4               	addwfc	prodh,w,c
  8328  001930  6EF7               	movwf	tblptrh,c
  8329  001932                     	if	0	;There are less than 3 active tblptr bytes
  8330  001932                     	endif
  8331  001932  D801               	call	u2228
  8332  001934  D00E               	goto	u2229
  8333  001936                     u2228:
  8334  001936  0005               	push	
  8335  001938  6EFA               	movwf	pclath,c
  8336  00193A  0009               	tblrd		*+
  8337  00193C  50F5               	movf	tablat,w,c
  8338  00193E  6EFD               	movwf	tosl,c
  8339  001940  0009               	tblrd		*+
  8340  001942  50F5               	movf	tablat,w,c
  8341  001944  6EFE               	movwf	tosh,c
  8342  001946  50F8               	movf	tblptru,w,c
  8343  001948  6EFF               	movwf	tosu,c
  8344  00194A  50FA               	movf	pclath,w,c
  8345  00194C  0100               	movlb	0	; () banked
  8346  00194E  5183               	movf	ES_Initialize@i& (0+255),w,b
  8347  001950  0012               	return		;indir
  8348  001952                     u2229:
  8349  001952  06E8               	decf	wreg,f,c
  8350  001954  B4D8               	btfsc	status,2,c
  8351  001956  D002               	goto	l3666
  8352                           
  8353                           ;ES_Framework.c: 254: return FailedInit;
  8354  001958  0E05               	movlw	5
  8355  00195A  0012               	return	
  8356  00195C                     l3666:
  8357  00195C  0100               	movlb	0	; () banked
  8358  00195E  2B83               	incf	ES_Initialize@i& (0+255),f,b
  8359  001960  D795               	goto	l3646
  8360  001962                     l3670:
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;ES_Framework.c: 255: }
  8364                           ;ES_Framework.c: 256: return Success;
  8365  001962  0E00               	movlw	0
  8366  001964  0012               	return	
  8367  001966                     __end_of_ES_Initialize:
  8368                           	opt stack 0
  8369                           tosu	equ	0xFFF
  8370                           tosh	equ	0xFFE
  8371                           tosl	equ	0xFFD
  8372                           pclath	equ	0xFFA
  8373                           tblptru	equ	0xFF8
  8374                           tblptrh	equ	0xFF7
  8375                           tblptrl	equ	0xFF6
  8376                           tablat	equ	0xFF5
  8377                           prodh	equ	0xFF4
  8378                           prodl	equ	0xFF3
  8379                           intcon	equ	0xFF2
  8380                           postinc0	equ	0xFEE
  8381                           wreg	equ	0xFE8
  8382                           indf1	equ	0xFE7
  8383                           postinc1	equ	0xFE6
  8384                           postdec1	equ	0xFE5
  8385                           fsr1h	equ	0xFE2
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _InitCanRX_Service *****************
  8395 ;; Defined at:
  8396 ;;		line 86 in file "CanRX_Service.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  Priority        1    wreg     unsigned char 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  Priority        1   32[BANK0 ] unsigned char 
  8401 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      unsigned char 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8411 ;;      Params:         0       0       0       0
  8412 ;;      Locals:         0       4       0       0
  8413 ;;      Temps:          0       0       0       0
  8414 ;;      Totals:         0       4       0       0
  8415 ;;Total ram usage:        4 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:   10
  8418 ;; This function calls:
  8419 ;;		_ES_PostToService
  8420 ;; This function is called by:
  8421 ;;		_ES_Initialize
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text39
  8426  00278A                     __ptext39:
  8427                           	opt stack 0
  8428  00278A                     _InitCanRX_Service:
  8429                           	opt stack 19
  8430                           
  8431                           ;incstack = 0
  8432                           ;InitCanRX_Service@Priority stored from wreg
  8433  00278A  0100               	movlb	0	; () banked
  8434  00278C  6F80               	movwf	InitCanRX_Service@Priority& (0+255),b
  8435                           
  8436                           ;CanRX_Service.c: 88: ES_Event ThisEvent;
  8437                           ;CanRX_Service.c: 90: MyPriority = Priority;
  8438  00278E  C080  F0DE         	movff	InitCanRX_Service@Priority,CanRX_Service@MyPriority
  8439                           
  8440                           ;CanRX_Service.c: 93: ThisEvent.EventType = ES_INIT;
  8441  002792  0E02               	movlw	2
  8442  002794  0100               	movlb	0	; () banked
  8443  002796  6F7D               	movwf	InitCanRX_Service@ThisEvent& (0+255),b
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;CanRX_Service.c: 94: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8447  002798  C07D  F077         	movff	InitCanRX_Service@ThisEvent,ES_PostToService@TheEvent
  8448  00279C  C07E  F078         	movff	InitCanRX_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  8449  0027A0  C07F  F079         	movff	InitCanRX_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  8450  0027A4  0100               	movlb	0	; () banked
  8451  0027A6  51DE               	movf	CanRX_Service@MyPriority& (0+255),w,b
  8452  0027A8  EC41  F011         	call	_ES_PostToService
  8453  0027AC  06E8               	decf	wreg,f,c
  8454  0027AE  A4D8               	btfss	status,2,c
  8455  0027B0  D002               	goto	l3564
  8456                           
  8457                           ;CanRX_Service.c: 95: {
  8458                           ;CanRX_Service.c: 96: return 1;
  8459  0027B2  0E01               	movlw	1
  8460                           
  8461                           ;CanRX_Service.c: 97: }else
  8462  0027B4  0012               	return	
  8463  0027B6                     l3564:
  8464                           
  8465                           ;CanRX_Service.c: 98: {
  8466                           ;CanRX_Service.c: 99: return 0;
  8467  0027B6  0E00               	movlw	0
  8468  0027B8  0012               	return	
  8469  0027BA                     __end_of_InitCanRX_Service:
  8470                           	opt stack 0
  8471                           tosu	equ	0xFFF
  8472                           tosh	equ	0xFFE
  8473                           tosl	equ	0xFFD
  8474                           pclath	equ	0xFFA
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           postinc0	equ	0xFEE
  8483                           wreg	equ	0xFE8
  8484                           indf1	equ	0xFE7
  8485                           postinc1	equ	0xFE6
  8486                           postdec1	equ	0xFE5
  8487                           fsr1h	equ	0xFE2
  8488                           fsr1l	equ	0xFE1
  8489                           indf2	equ	0xFDF
  8490                           postinc2	equ	0xFDE
  8491                           postdec2	equ	0xFDD
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function _InitPatternControlService *****************
  8497 ;; Defined at:
  8498 ;;		line 97 in file "Pattern_ControlService.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  Priority        1    wreg     unsigned char 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  Priority        1   32[BANK0 ] unsigned char 
  8503 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      unsigned char 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8513 ;;      Params:         0       0       0       0
  8514 ;;      Locals:         0       4       0       0
  8515 ;;      Temps:          0       0       0       0
  8516 ;;      Totals:         0       4       0       0
  8517 ;;Total ram usage:        4 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:   10
  8520 ;; This function calls:
  8521 ;;		_DotStar_Init
  8522 ;;		_ES_PostToService
  8523 ;;		_SetupPattern
  8524 ;; This function is called by:
  8525 ;;		_ES_Initialize
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text40
  8530  00242C                     __ptext40:
  8531                           	opt stack 0
  8532  00242C                     _InitPatternControlService:
  8533                           	opt stack 19
  8534                           
  8535                           ;incstack = 0
  8536                           ;InitPatternControlService@Priority stored from wreg
  8537  00242C  0100               	movlb	0	; () banked
  8538  00242E  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
  8539                           
  8540                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  8541                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  8542  002430  C080  F0E6         	movff	InitPatternControlService@Priority,_MyPriority
  8543                           
  8544                           ;Pattern_ControlService.c: 103: DotStar_Init(76,PatternConfigs[2]);
  8545  002434  C0FD  F060         	movff	_PatternConfigs+2,DotStar_Init@brightness
  8546  002438  0E4C               	movlw	76
  8547  00243A  EC05  F00F         	call	_DotStar_Init
  8548                           
  8549                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 76);
  8550  00243E  0EFB               	movlw	low _PatternConfigs
  8551  002440  0100               	movlb	0	; () banked
  8552  002442  6F60               	movwf	SetupPattern@configs& (0+255),b
  8553  002444  0E00               	movlw	high _PatternConfigs
  8554  002446  0100               	movlb	0	; () banked
  8555  002448  6F61               	movwf	(SetupPattern@configs+1)& (0+255),b
  8556  00244A  0E4C               	movlw	76
  8557  00244C  0100               	movlb	0	; () banked
  8558  00244E  6F62               	movwf	SetupPattern@numPixels& (0+255),b
  8559  002450  EC8A  F014         	call	_SetupPattern	;wreg free
  8560                           
  8561                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  8562  002454  0E00               	movlw	0
  8563  002456  0100               	movlb	0	; () banked
  8564  002458  6FE3               	movwf	_CurrentState& (0+255),b
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  8568  00245A  0E02               	movlw	2
  8569  00245C  0100               	movlb	0	; () banked
  8570  00245E  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8574  002460  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  8575  002464  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8576  002468  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8577  00246C  0100               	movlb	0	; () banked
  8578  00246E  51E6               	movf	_MyPriority& (0+255),w,b
  8579  002470  EC41  F011         	call	_ES_PostToService
  8580  002474  06E8               	decf	wreg,f,c
  8581  002476  A4D8               	btfss	status,2,c
  8582  002478  D002               	goto	l3450
  8583                           
  8584                           ;Pattern_ControlService.c: 110: {
  8585                           ;Pattern_ControlService.c: 111: return 1;
  8586  00247A  0E01               	movlw	1
  8587                           
  8588                           ;Pattern_ControlService.c: 112: }else
  8589  00247C  0012               	return	
  8590  00247E                     l3450:
  8591                           
  8592                           ;Pattern_ControlService.c: 113: {
  8593                           ;Pattern_ControlService.c: 114: return 0;
  8594  00247E  0E00               	movlw	0
  8595  002480  0012               	return	
  8596  002482                     __end_of_InitPatternControlService:
  8597                           	opt stack 0
  8598                           tosu	equ	0xFFF
  8599                           tosh	equ	0xFFE
  8600                           tosl	equ	0xFFD
  8601                           pclath	equ	0xFFA
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           intcon	equ	0xFF2
  8609                           postinc0	equ	0xFEE
  8610                           wreg	equ	0xFE8
  8611                           indf1	equ	0xFE7
  8612                           postinc1	equ	0xFE6
  8613                           postdec1	equ	0xFE5
  8614                           fsr1h	equ	0xFE2
  8615                           fsr1l	equ	0xFE1
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _InitSPI32ControlService *****************
  8624 ;; Defined at:
  8625 ;;		line 80 in file "SPI32_ControlService.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  Priority        1    wreg     unsigned char 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  Priority        1   32[BANK0 ] unsigned char 
  8630 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      unsigned char 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8640 ;;      Params:         0       0       0       0
  8641 ;;      Locals:         0       4       0       0
  8642 ;;      Temps:          0       0       0       0
  8643 ;;      Totals:         0       4       0       0
  8644 ;;Total ram usage:        4 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:   10
  8647 ;; This function calls:
  8648 ;;		_ES_PostToService
  8649 ;;		_SPI32_Init
  8650 ;; This function is called by:
  8651 ;;		_ES_Initialize
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           	psect	text41
  8656  00267A                     __ptext41:
  8657                           	opt stack 0
  8658  00267A                     _InitSPI32ControlService:
  8659                           	opt stack 19
  8660                           
  8661                           ;incstack = 0
  8662                           ;InitSPI32ControlService@Priority stored from wreg
  8663  00267A  0100               	movlb	0	; () banked
  8664  00267C  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
  8665                           
  8666                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  8667                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  8668  00267E  C080  F0E2         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  8669                           
  8670                           ;SPI32_ControlService.c: 86: SPI32_Init();
  8671  002682  ECAE  F014         	call	_SPI32_Init	;wreg free
  8672                           
  8673                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  8674  002686  0E00               	movlw	0
  8675  002688  0100               	movlb	0	; () banked
  8676  00268A  6FE1               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  8680  00268C  0E02               	movlw	2
  8681  00268E  0100               	movlb	0	; () banked
  8682  002690  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8686  002692  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  8687  002696  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8688  00269A  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8689  00269E  0100               	movlb	0	; () banked
  8690  0026A0  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  8691  0026A2  EC41  F011         	call	_ES_PostToService
  8692  0026A6  06E8               	decf	wreg,f,c
  8693  0026A8  A4D8               	btfss	status,2,c
  8694  0026AA  D002               	goto	l3518
  8695                           
  8696                           ;SPI32_ControlService.c: 92: {
  8697                           ;SPI32_ControlService.c: 93: return 1;
  8698  0026AC  0E01               	movlw	1
  8699                           
  8700                           ;SPI32_ControlService.c: 94: }else
  8701  0026AE  0012               	return	
  8702  0026B0                     l3518:
  8703                           
  8704                           ;SPI32_ControlService.c: 95: {
  8705                           ;SPI32_ControlService.c: 96: return 0;
  8706  0026B0  0E00               	movlw	0
  8707  0026B2  0012               	return	
  8708  0026B4                     __end_of_InitSPI32ControlService:
  8709                           	opt stack 0
  8710                           tosu	equ	0xFFF
  8711                           tosh	equ	0xFFE
  8712                           tosl	equ	0xFFD
  8713                           pclath	equ	0xFFA
  8714                           tblptru	equ	0xFF8
  8715                           tblptrh	equ	0xFF7
  8716                           tblptrl	equ	0xFF6
  8717                           tablat	equ	0xFF5
  8718                           prodh	equ	0xFF4
  8719                           prodl	equ	0xFF3
  8720                           intcon	equ	0xFF2
  8721                           postinc0	equ	0xFEE
  8722                           wreg	equ	0xFE8
  8723                           indf1	equ	0xFE7
  8724                           postinc1	equ	0xFE6
  8725                           postdec1	equ	0xFE5
  8726                           fsr1h	equ	0xFE2
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735 ;; *************** function _SPI32_Init *****************
  8736 ;; Defined at:
  8737 ;;		line 66 in file "SPI32_HW.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;		None
  8740 ;; Auto vars:     Size  Location     Type
  8741 ;;		None
  8742 ;; Return value:  Size  Location     Type
  8743 ;;                  1    wreg      void 
  8744 ;; Registers used:
  8745 ;;		wreg, status,2, cstack
  8746 ;; Tracked objects:
  8747 ;;		On entry : 0/0
  8748 ;;		On exit  : 0/0
  8749 ;;		Unchanged: 0/0
  8750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8751 ;;      Params:         0       0       0       0
  8752 ;;      Locals:         0       0       0       0
  8753 ;;      Temps:          0       0       0       0
  8754 ;;      Totals:         0       0       0       0
  8755 ;;Total ram usage:        0 bytes
  8756 ;; Hardware stack levels used:    1
  8757 ;; Hardware stack levels required when called:    8
  8758 ;; This function calls:
  8759 ;;		_HW_Init
  8760 ;; This function is called by:
  8761 ;;		_InitSPI32ControlService
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           	psect	text42
  8766  00295C                     __ptext42:
  8767                           	opt stack 0
  8768  00295C                     _SPI32_Init:
  8769                           	opt stack 20
  8770                           
  8771                           ;SPI32_HW.c: 68: HW_Init();
  8772                           
  8773                           ;incstack = 0
  8774  00295C  EC17  F014         	call	_HW_Init	;wreg free
  8775  002960  0012               	return		;funcret
  8776  002962                     __end_of_SPI32_Init:
  8777                           	opt stack 0
  8778                           tosu	equ	0xFFF
  8779                           tosh	equ	0xFFE
  8780                           tosl	equ	0xFFD
  8781                           pclath	equ	0xFFA
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           indf1	equ	0xFE7
  8792                           postinc1	equ	0xFE6
  8793                           postdec1	equ	0xFE5
  8794                           fsr1h	equ	0xFE2
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _HW_Init *****************
  8804 ;; Defined at:
  8805 ;;		line 128 in file "SPI32_HW.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8819 ;;      Params:         0       0       0       0
  8820 ;;      Locals:         0       0       0       0
  8821 ;;      Temps:          0       0       0       0
  8822 ;;      Totals:         0       0       0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    7
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		_SPI32_Init
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text43
  8834  00282E                     __ptext43:
  8835                           	opt stack 0
  8836  00282E                     _HW_Init:
  8837                           	opt stack 20
  8838                           
  8839                           ;SPI32_HW.c: 134: PORTC = 0x00;
  8840                           
  8841                           ;incstack = 0
  8842  00282E  0E00               	movlw	0
  8843  002830  6E82               	movwf	3970,c	;volatile
  8844                           
  8845                           ;SPI32_HW.c: 135: LATC = 0x00;
  8846  002832  0E00               	movlw	0
  8847  002834  6E8B               	movwf	3979,c	;volatile
  8848                           
  8849                           ;SPI32_HW.c: 136: ADCON1 = 0x0F;
  8850  002836  0E0F               	movlw	15
  8851  002838  6EC1               	movwf	4033,c	;volatile
  8852                           
  8853                           ;SPI32_HW.c: 137: TRISC = 0x00;
  8854  00283A  0E00               	movlw	0
  8855  00283C  6E94               	movwf	3988,c	;volatile
  8856                           
  8857                           ;SPI32_HW.c: 139: SSPIE = 1;
  8858  00283E  869D               	bsf	3997,3,c	;volatile
  8859                           
  8860                           ;SPI32_HW.c: 143: SSPCON1 = 0x00;
  8861  002840  0E00               	movlw	0
  8862  002842  6EC6               	movwf	4038,c	;volatile
  8863                           
  8864                           ;SPI32_HW.c: 144: SSPSTAT = 0b01000000;
  8865  002844  0E40               	movlw	64
  8866  002846  6EC7               	movwf	4039,c	;volatile
  8867                           
  8868                           ;SPI32_HW.c: 145: SSPADD = 0xFF;
  8869  002848  68C8               	setf	4040,c	;volatile
  8870                           
  8871                           ;SPI32_HW.c: 146: SSPCON1 = 0b00110000;
  8872  00284A  0E30               	movlw	48
  8873  00284C  6EC6               	movwf	4038,c	;volatile
  8874  00284E  0012               	return		;funcret
  8875  002850                     __end_of_HW_Init:
  8876                           	opt stack 0
  8877                           tosu	equ	0xFFF
  8878                           tosh	equ	0xFFE
  8879                           tosl	equ	0xFFD
  8880                           pclath	equ	0xFFA
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           postinc0	equ	0xFEE
  8889                           wreg	equ	0xFE8
  8890                           indf1	equ	0xFE7
  8891                           postinc1	equ	0xFE6
  8892                           postdec1	equ	0xFE5
  8893                           fsr1h	equ	0xFE2
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _SetupPattern *****************
  8903 ;; Defined at:
  8904 ;;		line 77 in file "Pattern_RGBPatterns.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  8907 ;;		 -> PatternConfigs(5), 
  8908 ;;  numPixels       1    2[BANK0 ] unsigned char 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8920 ;;      Params:         0       3       0       0
  8921 ;;      Locals:         0       0       0       0
  8922 ;;      Temps:          0       0       0       0
  8923 ;;      Totals:         0       3       0       0
  8924 ;;Total ram usage:        3 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    7
  8927 ;; This function calls:
  8928 ;;		Nothing
  8929 ;; This function is called by:
  8930 ;;		_InitPatternControlService
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text44
  8935  002914                     __ptext44:
  8936                           	opt stack 0
  8937  002914                     _SetupPattern:
  8938                           	opt stack 21
  8939                           
  8940                           ;Pattern_RGBPatterns.c: 79: PatternConfigs = configs;
  8941                           
  8942                           ;incstack = 0
  8943  002914  C060  F0D6         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  8944  002918  C061  F0D7         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  8945                           
  8946                           ;Pattern_RGBPatterns.c: 81: Length = numPixels;
  8947  00291C  C062  F0E0         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  8948  002920  0012               	return		;funcret
  8949  002922                     __end_of_SetupPattern:
  8950                           	opt stack 0
  8951                           tosu	equ	0xFFF
  8952                           tosh	equ	0xFFE
  8953                           tosl	equ	0xFFD
  8954                           pclath	equ	0xFFA
  8955                           tblptru	equ	0xFF8
  8956                           tblptrh	equ	0xFF7
  8957                           tblptrl	equ	0xFF6
  8958                           tablat	equ	0xFF5
  8959                           prodh	equ	0xFF4
  8960                           prodl	equ	0xFF3
  8961                           intcon	equ	0xFF2
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           indf1	equ	0xFE7
  8965                           postinc1	equ	0xFE6
  8966                           postdec1	equ	0xFE5
  8967                           fsr1h	equ	0xFE2
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _DotStar_Init *****************
  8977 ;; Defined at:
  8978 ;;		line 48 in file "Pattern_DotStarLED.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  numPixels       1    wreg     unsigned char 
  8981 ;;  brightness      1    0[BANK0 ] unsigned char 
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;  numPixels       1    3[BANK0 ] unsigned char 
  8984 ;; Return value:  Size  Location     Type
  8985 ;;                  1    wreg      void 
  8986 ;; Registers used:
  8987 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8993 ;;      Params:         0       1       0       0
  8994 ;;      Locals:         0       1       0       0
  8995 ;;      Temps:          0       2       0       0
  8996 ;;      Totals:         0       4       0       0
  8997 ;;Total ram usage:        4 bytes
  8998 ;; Hardware stack levels used:    1
  8999 ;; Hardware stack levels required when called:    7
  9000 ;; This function calls:
  9001 ;;		Nothing
  9002 ;; This function is called by:
  9003 ;;		_InitPatternControlService
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	text45
  9008  001E0A                     __ptext45:
  9009                           	opt stack 0
  9010  001E0A                     _DotStar_Init:
  9011                           	opt stack 21
  9012                           
  9013                           ;incstack = 0
  9014                           ;DotStar_Init@numPixels stored from wreg
  9015  001E0A  0100               	movlb	0	; () banked
  9016  001E0C  6F63               	movwf	DotStar_Init@numPixels& (0+255),b
  9017                           
  9018                           ;Pattern_DotStarLED.c: 57: Length = numPixels;
  9019  001E0E  C063  F0E5         	movff	DotStar_Init@numPixels,_Length
  9020                           
  9021                           ;Pattern_DotStarLED.c: 59: Brightness = brightness;
  9022  001E12  C060  F0F9         	movff	DotStar_Init@brightness,_Brightness
  9023                           
  9024                           ;Pattern_DotStarLED.c: 61: PixelFrames[0] = 0x0;
  9025  001E16  0E00               	movlw	0
  9026  001E18  CFE8 F1B8          	movff	wreg,_PixelFrames
  9027  001E1C  0E00               	movlw	0
  9028  001E1E  CFE8 F1B9          	movff	wreg,_PixelFrames+1
  9029  001E22  0E00               	movlw	0
  9030  001E24  CFE8 F1BA          	movff	wreg,_PixelFrames+2
  9031  001E28  0E00               	movlw	0
  9032  001E2A  CFE8 F1BB          	movff	wreg,_PixelFrames+3
  9033                           
  9034                           ;Pattern_DotStarLED.c: 62: PixelFrames[Length+1] = 0xffffffff;
  9035  001E2E  0100               	movlb	0	; () banked
  9036  001E30  51E5               	movf	_Length& (0+255),w,b
  9037  001E32  0100               	movlb	0	; () banked
  9038  001E34  6F61               	movwf	??_DotStar_Init& (0+255),b
  9039  001E36  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9040  001E38  0100               	movlb	0	; () banked
  9041  001E3A  90D8               	bcf	status,0,c
  9042  001E3C  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9043  001E3E  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9044  001E40  0100               	movlb	0	; () banked
  9045  001E42  90D8               	bcf	status,0,c
  9046  001E44  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9047  001E46  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9048  001E48  0E04               	movlw	4
  9049  001E4A  0100               	movlb	0	; () banked
  9050  001E4C  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9051  001E4E  0E00               	movlw	0
  9052  001E50  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9053  001E52  0EB8               	movlw	low _PixelFrames
  9054  001E54  0100               	movlb	0	; () banked
  9055  001E56  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9056  001E58  6ED9               	movwf	fsr2l,c
  9057  001E5A  0E01               	movlw	high _PixelFrames
  9058  001E5C  0100               	movlb	0	; () banked
  9059  001E5E  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9060  001E60  6EDA               	movwf	fsr2h,c
  9061  001E62  0EFF               	movlw	255
  9062  001E64  6EDE               	movwf	postinc2,c
  9063  001E66  0EFF               	movlw	255
  9064  001E68  6EDE               	movwf	postinc2,c
  9065  001E6A  0EFF               	movlw	255
  9066  001E6C  6EDE               	movwf	postinc2,c
  9067  001E6E  0EFF               	movlw	255
  9068  001E70  6EDD               	movwf	postdec2,c
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;Pattern_DotStarLED.c: 63: PixelFrames[Length+1+1] = 0xffffffff;
  9072  001E72  0100               	movlb	0	; () banked
  9073  001E74  51E5               	movf	_Length& (0+255),w,b
  9074  001E76  0100               	movlb	0	; () banked
  9075  001E78  6F61               	movwf	??_DotStar_Init& (0+255),b
  9076  001E7A  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9077  001E7C  0100               	movlb	0	; () banked
  9078  001E7E  90D8               	bcf	status,0,c
  9079  001E80  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9080  001E82  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9081  001E84  0100               	movlb	0	; () banked
  9082  001E86  90D8               	bcf	status,0,c
  9083  001E88  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9084  001E8A  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9085  001E8C  0E08               	movlw	8
  9086  001E8E  0100               	movlb	0	; () banked
  9087  001E90  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9088  001E92  0E00               	movlw	0
  9089  001E94  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9090  001E96  0EB8               	movlw	low _PixelFrames
  9091  001E98  0100               	movlb	0	; () banked
  9092  001E9A  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9093  001E9C  6ED9               	movwf	fsr2l,c
  9094  001E9E  0E01               	movlw	high _PixelFrames
  9095  001EA0  0100               	movlb	0	; () banked
  9096  001EA2  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9097  001EA4  6EDA               	movwf	fsr2h,c
  9098  001EA6  0EFF               	movlw	255
  9099  001EA8  6EDE               	movwf	postinc2,c
  9100  001EAA  0EFF               	movlw	255
  9101  001EAC  6EDE               	movwf	postinc2,c
  9102  001EAE  0EFF               	movlw	255
  9103  001EB0  6EDE               	movwf	postinc2,c
  9104  001EB2  0EFF               	movlw	255
  9105  001EB4  6EDD               	movwf	postdec2,c
  9106                           
  9107                           ; BSR set to: 0
  9108  001EB6  0012               	return		;funcret
  9109  001EB8                     __end_of_DotStar_Init:
  9110                           	opt stack 0
  9111                           tosu	equ	0xFFF
  9112                           tosh	equ	0xFFE
  9113                           tosl	equ	0xFFD
  9114                           pclath	equ	0xFFA
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon	equ	0xFF2
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           indf1	equ	0xFE7
  9125                           postinc1	equ	0xFE6
  9126                           postdec1	equ	0xFE5
  9127                           fsr1h	equ	0xFE2
  9128                           fsr1l	equ	0xFE1
  9129                           indf2	equ	0xFDF
  9130                           postinc2	equ	0xFDE
  9131                           postdec2	equ	0xFDD
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _ES_PostToService *****************
  9137 ;; Defined at:
  9138 ;;		line 351 in file "ES_Framework.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  WhichService    1    wreg     unsigned char 
  9141 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  WhichService    1   28[BANK0 ] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      unsigned char 
  9146 ;; Registers used:
  9147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9153 ;;      Params:         0       3       0       0
  9154 ;;      Locals:         0       1       0       0
  9155 ;;      Temps:          0       2       0       0
  9156 ;;      Totals:         0       6       0       0
  9157 ;;Total ram usage:        6 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    9
  9160 ;; This function calls:
  9161 ;;		_ES_EnQueueFIFO
  9162 ;; This function is called by:
  9163 ;;		_InitPatternControlService
  9164 ;;		_PostPatternControlService
  9165 ;;		_InitSPI32ControlService
  9166 ;;		_PostSPI32ControlService
  9167 ;;		_InitCanRX_Service
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           	psect	text46
  9172  002282                     __ptext46:
  9173                           	opt stack 0
  9174  002282                     _ES_PostToService:
  9175                           	opt stack 17
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;incstack = 0
  9179                           ;ES_PostToService@WhichService stored from wreg
  9180  002282  0100               	movlb	0	; () banked
  9181  002284  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
  9182                           
  9183                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  9184                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  9185                           ;ES_Framework.c: 354: 1 )){
  9186  002286  0E03               	movlw	3
  9187  002288  0100               	movlb	0	; () banked
  9188  00228A  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
  9189  00228C  D033               	goto	l2766
  9190                           
  9191                           ; BSR set to: 0
  9192  00228E  0100               	movlb	0	; () banked
  9193  002290  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  9194  002292  0D03               	mullw	3
  9195  002294  0E5C               	movlw	low _EventQueues
  9196  002296  24F3               	addwf	prodl,w,c
  9197  002298  6EF6               	movwf	tblptrl,c
  9198  00229A  0E03               	movlw	high _EventQueues
  9199  00229C  20F4               	addwfc	prodh,w,c
  9200  00229E  6EF7               	movwf	tblptrh,c
  9201  0022A0                     	if	0	;There are less than 3 active tblptr bytes
  9202  0022A0                     	endif
  9203  0022A0  0009               	tblrd		*+
  9204  0022A2  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
  9205  0022A6  000A               	tblrd		*-
  9206  0022A8  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  9207  0022AC  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  9208  0022B0  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  9209  0022B4  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  9210  0022B8  ECB3  F00C         	call	_ES_EnQueueFIFO	;wreg free
  9211  0022BC  06E8               	decf	wreg,f,c
  9212  0022BE  A4D8               	btfss	status,2,c
  9213  0022C0  D019               	goto	l2766
  9214                           
  9215                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  9216  0022C2  0100               	movlb	0	; () banked
  9217  0022C4  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  9218  0022C6  0D02               	mullw	2
  9219  0022C8  0E01               	movlw	low _BitNum2SetMask
  9220  0022CA  24F3               	addwf	prodl,w,c
  9221  0022CC  6EF6               	movwf	tblptrl,c
  9222  0022CE  0E03               	movlw	high _BitNum2SetMask
  9223  0022D0  20F4               	addwfc	prodh,w,c
  9224  0022D2  6EF7               	movwf	tblptrh,c
  9225  0022D4                     	if	0	;There are less than 3 active tblptr bytes
  9226  0022D4                     	endif
  9227  0022D4  0009               	tblrd		*+
  9228  0022D6  CFF5 F07A          	movff	tablat,??_ES_PostToService
  9229  0022DA  0009               	tblrd		*+
  9230  0022DC  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
  9231  0022E0  0100               	movlb	0	; () banked
  9232  0022E2  517A               	movf	??_ES_PostToService& (0+255),w,b
  9233  0022E4  0100               	movlb	0	; () banked
  9234  0022E6  13DA               	iorwf	_Ready& (0+255),f,b
  9235  0022E8  0100               	movlb	0	; () banked
  9236  0022EA  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
  9237  0022EC  0100               	movlb	0	; () banked
  9238  0022EE  13DB               	iorwf	(_Ready+1)& (0+255),f,b
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;ES_Framework.c: 356: return 1;
  9242  0022F0  0E01               	movlw	1
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;ES_Framework.c: 357: } else
  9246                           
  9247                           ; BSR set to: 0
  9248  0022F2  0012               	return	
  9249  0022F4                     l2766:
  9250                           
  9251                           ;ES_Framework.c: 358: return 0;
  9252  0022F4  0E00               	movlw	0
  9253  0022F6  0012               	return	
  9254  0022F8                     __end_of_ES_PostToService:
  9255                           	opt stack 0
  9256                           tosu	equ	0xFFF
  9257                           tosh	equ	0xFFE
  9258                           tosl	equ	0xFFD
  9259                           pclath	equ	0xFFA
  9260                           tblptru	equ	0xFF8
  9261                           tblptrh	equ	0xFF7
  9262                           tblptrl	equ	0xFF6
  9263                           tablat	equ	0xFF5
  9264                           prodh	equ	0xFF4
  9265                           prodl	equ	0xFF3
  9266                           intcon	equ	0xFF2
  9267                           postinc0	equ	0xFEE
  9268                           wreg	equ	0xFE8
  9269                           indf1	equ	0xFE7
  9270                           postinc1	equ	0xFE6
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function _ES_EnQueueFIFO *****************
  9282 ;; Defined at:
  9283 ;;		line 85 in file "ES_Queue.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  9286 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9287 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  9290 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9291 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      unsigned char 
  9294 ;; Registers used:
  9295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9301 ;;      Params:         0       5       0       0
  9302 ;;      Locals:         0       3       0       0
  9303 ;;      Temps:          0       3       0       0
  9304 ;;      Totals:         0      11       0       0
  9305 ;;Total ram usage:       11 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    8
  9308 ;; This function calls:
  9309 ;;		___awmod
  9310 ;;		___wmul
  9311 ;; This function is called by:
  9312 ;;		_ES_PostToService
  9313 ;;		_ES_PostAll
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           	psect	text47
  9318  001966                     __ptext47:
  9319                           	opt stack 0
  9320  001966                     _ES_EnQueueFIFO:
  9321                           	opt stack 17
  9322                           
  9323                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  9324                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  9325                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  9326                           
  9327                           ;incstack = 0
  9328  001966  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  9329  00196A  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  9330                           
  9331                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  9332  00196E  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9333  001972  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9334  001976  0100               	movlb	0	; () banked
  9335  001978  EE10 F002          	lfsr	1,2
  9336  00197C  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9337  00197E  26E1               	addwf	fsr1l,f,c
  9338  001980  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9339  001982  22E2               	addwfc	fsr1h,f,c
  9340  001984  50DE               	movf	postinc2,w,c
  9341  001986  5CE6               	subwf	postinc1,w,c
  9342  001988  B0D8               	btfsc	status,0,c
  9343  00198A  D05C               	goto	l2750
  9344                           
  9345                           ; BSR set to: 0
  9346                           
  9347                           ;ES_Queue.c: 92: {
  9348                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  9349  00198C  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  9350  001990  9EF2               	bcf	intcon,7,c	;volatile
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  9354                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  9355                           
  9356                           ; BSR set to: 0
  9357  001992  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9358  001996  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9359  00199A  50DF               	movf	indf2,w,c
  9360  00199C  0100               	movlb	0	; () banked
  9361  00199E  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
  9362  0019A0  0100               	movlb	0	; () banked
  9363  0019A2  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  9364  0019A4  0100               	movlb	0	; () banked
  9365  0019A6  6F62               	movwf	___awmod@divisor& (0+255),b
  9366  0019A8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  9367  0019AA  0100               	movlb	0	; () banked
  9368  0019AC  EE20 F002          	lfsr	2,2
  9369  0019B0  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9370  0019B2  26D9               	addwf	fsr2l,f,c
  9371  0019B4  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9372  0019B6  22DA               	addwfc	fsr2h,f,c
  9373  0019B8  50DF               	movf	indf2,w,c
  9374  0019BA  0100               	movlb	0	; () banked
  9375  0019BC  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  9376  0019BE  0100               	movlb	0	; () banked
  9377  0019C0  EE20 F001          	lfsr	2,1
  9378  0019C4  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9379  0019C6  26D9               	addwf	fsr2l,f,c
  9380  0019C8  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9381  0019CA  22DA               	addwfc	fsr2h,f,c
  9382  0019CC  50DF               	movf	indf2,w,c
  9383  0019CE  0100               	movlb	0	; () banked
  9384  0019D0  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  9385  0019D2  0100               	movlb	0	; () banked
  9386  0019D4  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  9387  0019D6  0100               	movlb	0	; () banked
  9388  0019D8  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  9389  0019DA  0100               	movlb	0	; () banked
  9390  0019DC  6F60               	movwf	___awmod@dividend& (0+255),b
  9391  0019DE  0100               	movlb	0	; () banked
  9392  0019E0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  9393  0019E2  0100               	movlb	0	; () banked
  9394  0019E4  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  9395  0019E6  ECAE  F00F         	call	___awmod	;wreg free
  9396  0019EA  0E01               	movlw	1
  9397  0019EC  0100               	movlb	0	; () banked
  9398  0019EE  2560               	addwf	?___awmod& (0+255),w,b
  9399  0019F0  0100               	movlb	0	; () banked
  9400  0019F2  6F66               	movwf	___wmul@multiplier& (0+255),b
  9401  0019F4  0E00               	movlw	0
  9402  0019F6  0100               	movlb	0	; () banked
  9403  0019F8  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  9404  0019FA  0100               	movlb	0	; () banked
  9405  0019FC  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9406  0019FE  0E00               	movlw	0
  9407  001A00  0100               	movlb	0	; () banked
  9408  001A02  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9409  001A04  0E03               	movlw	3
  9410  001A06  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9411  001A08  EC77  F013         	call	___wmul	;wreg free
  9412  001A0C  0100               	movlb	0	; () banked
  9413  001A0E  5166               	movf	?___wmul& (0+255),w,b
  9414  001A10  0100               	movlb	0	; () banked
  9415  001A12  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  9416  001A14  6ED9               	movwf	fsr2l,c
  9417  001A16  0100               	movlb	0	; () banked
  9418  001A18  5167               	movf	(?___wmul+1)& (0+255),w,b
  9419  001A1A  0100               	movlb	0	; () banked
  9420  001A1C  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  9421  001A1E  6EDA               	movwf	fsr2h,c
  9422  001A20  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  9423  001A24  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  9424  001A28  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  9428  001A2C  0100               	movlb	0	; () banked
  9429  001A2E  EE20 F002          	lfsr	2,2
  9430  001A32  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9431  001A34  26D9               	addwf	fsr2l,f,c
  9432  001A36  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9433  001A38  22DA               	addwfc	fsr2h,f,c
  9434  001A3A  2ADF               	incf	indf2,f,c
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  9438  001A3C  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;ES_Queue.c: 101: return(1);
  9442  001A40  0E01               	movlw	1
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;ES_Queue.c: 102: }else
  9446                           
  9447                           ; BSR set to: 0
  9448  001A42  0012               	return	
  9449  001A44                     l2750:
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;ES_Queue.c: 103: return(0);
  9453  001A44  0E00               	movlw	0
  9454                           
  9455                           ; BSR set to: 0
  9456  001A46  0012               	return	
  9457  001A48                     __end_of_ES_EnQueueFIFO:
  9458                           	opt stack 0
  9459                           tosu	equ	0xFFF
  9460                           tosh	equ	0xFFE
  9461                           tosl	equ	0xFFD
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           postinc0	equ	0xFEE
  9471                           wreg	equ	0xFE8
  9472                           indf1	equ	0xFE7
  9473                           postinc1	equ	0xFE6
  9474                           postdec1	equ	0xFE5
  9475                           fsr1h	equ	0xFE2
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function ___wmul *****************
  9485 ;; Defined at:
  9486 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  multiplier      2    6[BANK0 ] unsigned int 
  9489 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  product         2   10[BANK0 ] unsigned int 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  2    6[BANK0 ] unsigned int 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0, prodl, prodh
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9501 ;;      Params:         0       4       0       0
  9502 ;;      Locals:         0       2       0       0
  9503 ;;      Temps:          0       0       0       0
  9504 ;;      Totals:         0       6       0       0
  9505 ;;Total ram usage:        6 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    7
  9508 ;; This function calls:
  9509 ;;		Nothing
  9510 ;; This function is called by:
  9511 ;;		_ES_EnQueueFIFO
  9512 ;;		_ES_DeQueue
  9513 ;;		_UpdatePattern
  9514 ;;		_HSV_to_RGB
  9515 ;;		i2_ES_EnQueueFIFO
  9516 ;;		_ES_EnQueueLIFO
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text48
  9521  0026EE                     __ptext48:
  9522                           	opt stack 0
  9523  0026EE                     ___wmul:
  9524                           	opt stack 17
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;incstack = 0
  9528  0026EE  0100               	movlb	0	; () banked
  9529  0026F0  5166               	movf	___wmul@multiplier& (0+255),w,b
  9530  0026F2  0100               	movlb	0	; () banked
  9531  0026F4  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9532  0026F6  CFF3 F06A          	movff	prodl,___wmul@product
  9533  0026FA  CFF4 F06B          	movff	prodh,___wmul@product+1
  9534  0026FE  0100               	movlb	0	; () banked
  9535  002700  5166               	movf	___wmul@multiplier& (0+255),w,b
  9536  002702  0100               	movlb	0	; () banked
  9537  002704  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9538  002706  50F3               	movf	prodl,w,c
  9539  002708  0100               	movlb	0	; () banked
  9540  00270A  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9541  00270C  0100               	movlb	0	; () banked
  9542  00270E  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9543  002710  0100               	movlb	0	; () banked
  9544  002712  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9545  002714  50F3               	movf	prodl,w,c
  9546  002716  0100               	movlb	0	; () banked
  9547  002718  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9548                           
  9549                           ; BSR set to: 0
  9550  00271A  C06A  F066         	movff	___wmul@product,?___wmul
  9551  00271E  C06B  F067         	movff	___wmul@product+1,?___wmul+1
  9552  002722  0012               	return	
  9553  002724                     __end_of___wmul:
  9554                           	opt stack 0
  9555                           tosu	equ	0xFFF
  9556                           tosh	equ	0xFFE
  9557                           tosl	equ	0xFFD
  9558                           pclath	equ	0xFFA
  9559                           tblptru	equ	0xFF8
  9560                           tblptrh	equ	0xFF7
  9561                           tblptrl	equ	0xFF6
  9562                           tablat	equ	0xFF5
  9563                           prodh	equ	0xFF4
  9564                           prodl	equ	0xFF3
  9565                           intcon	equ	0xFF2
  9566                           postinc0	equ	0xFEE
  9567                           wreg	equ	0xFE8
  9568                           indf1	equ	0xFE7
  9569                           postinc1	equ	0xFE6
  9570                           postdec1	equ	0xFE5
  9571                           fsr1h	equ	0xFE2
  9572                           fsr1l	equ	0xFE1
  9573                           indf2	equ	0xFDF
  9574                           postinc2	equ	0xFDE
  9575                           postdec2	equ	0xFDD
  9576                           fsr2h	equ	0xFDA
  9577                           fsr2l	equ	0xFD9
  9578                           status	equ	0xFD8
  9579                           
  9580 ;; *************** function ___awmod *****************
  9581 ;; Defined at:
  9582 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  dividend        2    0[BANK0 ] int 
  9585 ;;  divisor         2    2[BANK0 ] int 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  sign            1    5[BANK0 ] unsigned char 
  9588 ;;  counter         1    4[BANK0 ] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  2    0[BANK0 ] int 
  9591 ;; Registers used:
  9592 ;;		wreg, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9598 ;;      Params:         0       4       0       0
  9599 ;;      Locals:         0       2       0       0
  9600 ;;      Temps:          0       0       0       0
  9601 ;;      Totals:         0       6       0       0
  9602 ;;Total ram usage:        6 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    7
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_ES_EnQueueFIFO
  9609 ;;		_UpdatePattern
  9610 ;;		_ThinkingPattern
  9611 ;;		_ListeningPattern
  9612 ;;		_SpeakingPattern
  9613 ;;		_IdlePattern
  9614 ;;		i2_ES_EnQueueFIFO
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text49
  9619  001F5C                     __ptext49:
  9620                           	opt stack 0
  9621  001F5C                     ___awmod:
  9622                           	opt stack 17
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;incstack = 0
  9626  001F5C  0E00               	movlw	0
  9627  001F5E  0100               	movlb	0	; () banked
  9628  001F60  6F65               	movwf	___awmod@sign& (0+255),b
  9629                           
  9630                           ; BSR set to: 0
  9631  001F62  0100               	movlb	0	; () banked
  9632  001F64  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9633  001F66  D008               	goto	l2706
  9634                           
  9635                           ; BSR set to: 0
  9636  001F68  0100               	movlb	0	; () banked
  9637  001F6A  6D60               	negf	___awmod@dividend& (0+255),b
  9638  001F6C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9639  001F6E  B0D8               	btfsc	status,0,c
  9640  001F70  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9641                           
  9642                           ; BSR set to: 0
  9643  001F72  0E01               	movlw	1
  9644  001F74  0100               	movlb	0	; () banked
  9645  001F76  6F65               	movwf	___awmod@sign& (0+255),b
  9646  001F78                     l2706:
  9647                           
  9648                           ; BSR set to: 0
  9649  001F78  0100               	movlb	0	; () banked
  9650  001F7A  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9651  001F7C  D005               	goto	l2710
  9652                           
  9653                           ; BSR set to: 0
  9654  001F7E  0100               	movlb	0	; () banked
  9655  001F80  6D62               	negf	___awmod@divisor& (0+255),b
  9656  001F82  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  9657  001F84  B0D8               	btfsc	status,0,c
  9658  001F86  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  9659  001F88                     l2710:
  9660                           
  9661                           ; BSR set to: 0
  9662  001F88  0100               	movlb	0	; () banked
  9663  001F8A  5162               	movf	___awmod@divisor& (0+255),w,b
  9664  001F8C  0100               	movlb	0	; () banked
  9665  001F8E  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9666  001F90  B4D8               	btfsc	status,2,c
  9667  001F92  D026               	goto	l2726
  9668                           
  9669                           ; BSR set to: 0
  9670  001F94  0E01               	movlw	1
  9671  001F96  0100               	movlb	0	; () banked
  9672  001F98  6F64               	movwf	___awmod@counter& (0+255),b
  9673  001F9A  D006               	goto	l2716
  9674  001F9C                     l2714:
  9675                           
  9676                           ; BSR set to: 0
  9677  001F9C  0100               	movlb	0	; () banked
  9678  001F9E  90D8               	bcf	status,0,c
  9679  001FA0  3762               	rlcf	___awmod@divisor& (0+255),f,b
  9680  001FA2  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9681  001FA4  0100               	movlb	0	; () banked
  9682  001FA6  2B64               	incf	___awmod@counter& (0+255),f,b
  9683  001FA8                     l2716:
  9684                           
  9685                           ; BSR set to: 0
  9686  001FA8  0100               	movlb	0	; () banked
  9687  001FAA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9688  001FAC  D7F7               	goto	l2714
  9689  001FAE                     l2718:
  9690                           
  9691                           ; BSR set to: 0
  9692  001FAE  0100               	movlb	0	; () banked
  9693  001FB0  5162               	movf	___awmod@divisor& (0+255),w,b
  9694  001FB2  0100               	movlb	0	; () banked
  9695  001FB4  5D60               	subwf	___awmod@dividend& (0+255),w,b
  9696  001FB6  0100               	movlb	0	; () banked
  9697  001FB8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9698  001FBA  0100               	movlb	0	; () banked
  9699  001FBC  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9700  001FBE  A0D8               	btfss	status,0,c
  9701  001FC0  D008               	goto	l2722
  9702                           
  9703                           ; BSR set to: 0
  9704  001FC2  0100               	movlb	0	; () banked
  9705  001FC4  5162               	movf	___awmod@divisor& (0+255),w,b
  9706  001FC6  0100               	movlb	0	; () banked
  9707  001FC8  5F60               	subwf	___awmod@dividend& (0+255),f,b
  9708  001FCA  0100               	movlb	0	; () banked
  9709  001FCC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9710  001FCE  0100               	movlb	0	; () banked
  9711  001FD0  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9712  001FD2                     l2722:
  9713                           
  9714                           ; BSR set to: 0
  9715  001FD2  0100               	movlb	0	; () banked
  9716  001FD4  90D8               	bcf	status,0,c
  9717  001FD6  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9718  001FD8  3362               	rrcf	___awmod@divisor& (0+255),f,b
  9719                           
  9720                           ; BSR set to: 0
  9721  001FDA  0100               	movlb	0	; () banked
  9722  001FDC  2F64               	decfsz	___awmod@counter& (0+255),f,b
  9723  001FDE  D7E7               	goto	l2718
  9724  001FE0                     l2726:
  9725                           
  9726                           ; BSR set to: 0
  9727  001FE0  0100               	movlb	0	; () banked
  9728  001FE2  5165               	movf	___awmod@sign& (0+255),w,b
  9729  001FE4  0100               	movlb	0	; () banked
  9730  001FE6  B4D8               	btfsc	status,2,c
  9731  001FE8  D005               	goto	l2730
  9732                           
  9733                           ; BSR set to: 0
  9734  001FEA  0100               	movlb	0	; () banked
  9735  001FEC  6D60               	negf	___awmod@dividend& (0+255),b
  9736  001FEE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9737  001FF0  B0D8               	btfsc	status,0,c
  9738  001FF2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9739  001FF4                     l2730:
  9740                           
  9741                           ; BSR set to: 0
  9742  001FF4  C060  F060         	movff	___awmod@dividend,?___awmod
  9743  001FF8  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  9744  001FFC  0012               	return	
  9745  001FFE                     __end_of___awmod:
  9746                           	opt stack 0
  9747                           tosu	equ	0xFFF
  9748                           tosh	equ	0xFFE
  9749                           tosl	equ	0xFFD
  9750                           pclath	equ	0xFFA
  9751                           tblptru	equ	0xFF8
  9752                           tblptrh	equ	0xFF7
  9753                           tblptrl	equ	0xFF6
  9754                           tablat	equ	0xFF5
  9755                           prodh	equ	0xFF4
  9756                           prodl	equ	0xFF3
  9757                           intcon	equ	0xFF2
  9758                           postinc0	equ	0xFEE
  9759                           wreg	equ	0xFE8
  9760                           indf1	equ	0xFE7
  9761                           postinc1	equ	0xFE6
  9762                           postdec1	equ	0xFE5
  9763                           fsr1h	equ	0xFE2
  9764                           fsr1l	equ	0xFE1
  9765                           indf2	equ	0xFDF
  9766                           postinc2	equ	0xFDE
  9767                           postdec2	equ	0xFDD
  9768                           fsr2h	equ	0xFDA
  9769                           fsr2l	equ	0xFD9
  9770                           status	equ	0xFD8
  9771                           
  9772 ;; *************** function _ES_Timer_Init *****************
  9773 ;; Defined at:
  9774 ;;		line 130 in file "ES_Timers.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  Rate            2    2[BANK0 ] enum E15428
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;                  1    wreg      void 
  9781 ;; Registers used:
  9782 ;;		wreg, status,2, cstack
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9788 ;;      Params:         0       2       0       0
  9789 ;;      Locals:         0       0       0       0
  9790 ;;      Temps:          0       0       0       0
  9791 ;;      Totals:         0       2       0       0
  9792 ;;Total ram usage:        2 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:    8
  9795 ;; This function calls:
  9796 ;;		__HW_Timer_Init
  9797 ;; This function is called by:
  9798 ;;		_ES_Initialize
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           	psect	text50
  9803  002922                     __ptext50:
  9804                           	opt stack 0
  9805  002922                     _ES_Timer_Init:
  9806                           	opt stack 21
  9807                           
  9808                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;incstack = 0
  9812  002922  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  9813  002926  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  9814  00292A  EC36  F014         	call	__HW_Timer_Init	;wreg free
  9815  00292E  0012               	return		;funcret
  9816  002930                     __end_of_ES_Timer_Init:
  9817                           	opt stack 0
  9818                           tosu	equ	0xFFF
  9819                           tosh	equ	0xFFE
  9820                           tosl	equ	0xFFD
  9821                           pclath	equ	0xFFA
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           intcon	equ	0xFF2
  9829                           postinc0	equ	0xFEE
  9830                           wreg	equ	0xFE8
  9831                           indf1	equ	0xFE7
  9832                           postinc1	equ	0xFE6
  9833                           postdec1	equ	0xFE5
  9834                           fsr1h	equ	0xFE2
  9835                           fsr1l	equ	0xFE1
  9836                           indf2	equ	0xFDF
  9837                           postinc2	equ	0xFDE
  9838                           postdec2	equ	0xFDD
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function __HW_Timer_Init *****************
  9844 ;; Defined at:
  9845 ;;		line 72 in file "ES_Port.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  Rate            2    0[BANK0 ] enum E15412
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  1    wreg      void 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9859 ;;      Params:         0       2       0       0
  9860 ;;      Locals:         0       0       0       0
  9861 ;;      Temps:          0       0       0       0
  9862 ;;      Totals:         0       2       0       0
  9863 ;;Total ram usage:        2 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    7
  9866 ;; This function calls:
  9867 ;;		Nothing
  9868 ;; This function is called by:
  9869 ;;		_ES_Timer_Init
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           	psect	text51
  9874  00286C                     __ptext51:
  9875                           	opt stack 0
  9876  00286C                     __HW_Timer_Init:
  9877                           	opt stack 21
  9878                           
  9879                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  9880                           
  9881                           ;incstack = 0
  9882  00286C  0E04               	movlw	4
  9883  00286E  6E9D               	movwf	3997,c	;volatile
  9884                           
  9885                           ;ES_Port.c: 85: INTCON = 0b01000000;
  9886  002870  0E40               	movlw	64
  9887  002872  6EF2               	movwf	intcon,c	;volatile
  9888                           
  9889                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  9890  002874  0E0A               	movlw	10
  9891  002876  6EBD               	movwf	4029,c	;volatile
  9892                           
  9893                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  9894  002878  0E01               	movlw	1
  9895  00287A  6EBE               	movwf	4030,c	;volatile
  9896                           
  9897                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  9898  00287C  0E00               	movlw	0
  9899  00287E  6EBF               	movwf	4031,c	;volatile
  9900                           
  9901                           ;ES_Port.c: 107: T1CON = 0b00100001;
  9902  002880  0E21               	movlw	33
  9903  002882  6ECD               	movwf	4045,c	;volatile
  9904                           
  9905                           ;ES_Port.c: 109: {GIE = 1;};
  9906  002884  8EF2               	bsf	intcon,7,c	;volatile
  9907  002886  0012               	return		;funcret
  9908  002888                     __end_of__HW_Timer_Init:
  9909                           	opt stack 0
  9910                           tosu	equ	0xFFF
  9911                           tosh	equ	0xFFE
  9912                           tosl	equ	0xFFD
  9913                           pclath	equ	0xFFA
  9914                           tblptru	equ	0xFF8
  9915                           tblptrh	equ	0xFF7
  9916                           tblptrl	equ	0xFF6
  9917                           tablat	equ	0xFF5
  9918                           prodh	equ	0xFF4
  9919                           prodl	equ	0xFF3
  9920                           intcon	equ	0xFF2
  9921                           postinc0	equ	0xFEE
  9922                           wreg	equ	0xFE8
  9923                           indf1	equ	0xFE7
  9924                           postinc1	equ	0xFE6
  9925                           postdec1	equ	0xFE5
  9926                           fsr1h	equ	0xFE2
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function _ES_InitQueue *****************
  9936 ;; Defined at:
  9937 ;;		line 58 in file "ES_Queue.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  9940 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9941 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  9944 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      unsigned char 
  9947 ;; Registers used:
  9948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9954 ;;      Params:         0       3       0       0
  9955 ;;      Locals:         0       2       0       0
  9956 ;;      Temps:          0       0       0       0
  9957 ;;      Totals:         0       5       0       0
  9958 ;;Total ram usage:        5 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; Hardware stack levels required when called:    7
  9961 ;; This function calls:
  9962 ;;		Nothing
  9963 ;; This function is called by:
  9964 ;;		_ES_Initialize
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text52
  9969  00263E                     __ptext52:
  9970                           	opt stack 0
  9971  00263E                     _ES_InitQueue:
  9972                           	opt stack 22
  9973                           
  9974                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  9975                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  9976                           
  9977                           ;incstack = 0
  9978  00263E  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  9979  002642  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  9980                           
  9981                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  9982  002646  0100               	movlb	0	; () banked
  9983  002648  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  9984  00264A  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  9985  00264E  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  9986  002652  6EDF               	movwf	indf2,c
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  9990  002654  0100               	movlb	0	; () banked
  9991  002656  EE20 F001          	lfsr	2,1
  9992  00265A  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  9993  00265C  26D9               	addwf	fsr2l,f,c
  9994  00265E  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  9995  002660  22DA               	addwfc	fsr2h,f,c
  9996  002662  0E00               	movlw	0
  9997  002664  6EDF               	movwf	indf2,c
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
 10001  002666  0100               	movlb	0	; () banked
 10002  002668  EE20 F002          	lfsr	2,2
 10003  00266C  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 10004  00266E  26D9               	addwf	fsr2l,f,c
 10005  002670  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 10006  002672  22DA               	addwfc	fsr2h,f,c
 10007  002674  0E00               	movlw	0
 10008  002676  6EDF               	movwf	indf2,c
 10009  002678  0012               	return	
 10010  00267A                     __end_of_ES_InitQueue:
 10011                           	opt stack 0
 10012                           tosu	equ	0xFFF
 10013                           tosh	equ	0xFFE
 10014                           tosl	equ	0xFFD
 10015                           pclath	equ	0xFFA
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           indf1	equ	0xFE7
 10026                           postinc1	equ	0xFE6
 10027                           postdec1	equ	0xFE5
 10028                           fsr1h	equ	0xFE2
 10029                           fsr1l	equ	0xFE1
 10030                           indf2	equ	0xFDF
 10031                           postinc2	equ	0xFDE
 10032                           postdec2	equ	0xFDD
 10033                           fsr2h	equ	0xFDA
 10034                           fsr2l	equ	0xFD9
 10035                           status	equ	0xFD8
 10036                           
 10037 ;; *************** function _ISR *****************
 10038 ;; Defined at:
 10039 ;;		line 112 in file "ES_Port.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;		None
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;		None
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      void 
 10046 ;; Registers used:
 10047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10053 ;;      Params:         0       0       0       0
 10054 ;;      Locals:         0       0       0       0
 10055 ;;      Temps:         16       0       0       0
 10056 ;;      Totals:        16       0       0       0
 10057 ;;Total ram usage:       16 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:    6
 10060 ;; This function calls:
 10061 ;;		_BusErrorResponse
 10062 ;;		_CanErrorResponse
 10063 ;;		_CanRCVResponse
 10064 ;;		_CanXmitResponse
 10065 ;;		_SPI32_EOTResponse
 10066 ;; This function is called by:
 10067 ;;		Interrupt level 2
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	intcode
 10072  000008                     __pintcode:
 10073                           	opt stack 0
 10074  000008                     _ISR:
 10075                           	opt stack 15
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;incstack = 0
 10079  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10080  00000A  CFFA F026          	movff	pclath,??_ISR+2
 10081  00000E  CFFB F027          	movff	pclatu,??_ISR+3
 10082  000012  ED24  F00D         	call	int_func,f	;refresh shadow registers
 10083                           tosu	equ	0xFFF
 10084                           tosh	equ	0xFFE
 10085                           tosl	equ	0xFFD
 10086                           pclatu	equ	0xFFB
 10087                           pclath	equ	0xFFA
 10088                           tblptru	equ	0xFF8
 10089                           tblptrh	equ	0xFF7
 10090                           tblptrl	equ	0xFF6
 10091                           tablat	equ	0xFF5
 10092                           prodh	equ	0xFF4
 10093                           prodl	equ	0xFF3
 10094                           intcon	equ	0xFF2
 10095                           postinc0	equ	0xFEE
 10096                           wreg	equ	0xFE8
 10097                           indf1	equ	0xFE7
 10098                           postinc1	equ	0xFE6
 10099                           postdec1	equ	0xFE5
 10100                           fsr1h	equ	0xFE2
 10101                           fsr1l	equ	0xFE1
 10102                           indf2	equ	0xFDF
 10103                           postinc2	equ	0xFDE
 10104                           postdec2	equ	0xFDD
 10105                           fsr2h	equ	0xFDA
 10106                           fsr2l	equ	0xFD9
 10107                           status	equ	0xFD8
 10108                           
 10109                           	psect	intcode_body
 10110  001A48                     __pintcode_body:
 10111                           	opt stack 15
 10112  001A48                     int_func:
 10113                           	opt stack 15
 10114  001A48  0006               	pop		; remove dummy address from shadow register refresh
 10115  001A4A  CFE9 F028          	movff	fsr0l,??_ISR+4
 10116  001A4E  CFEA F029          	movff	fsr0h,??_ISR+5
 10117  001A52  CFE1 F02A          	movff	fsr1l,??_ISR+6
 10118  001A56  CFE2 F02B          	movff	fsr1h,??_ISR+7
 10119  001A5A  CFD9 F02C          	movff	fsr2l,??_ISR+8
 10120  001A5E  CFDA F02D          	movff	fsr2h,??_ISR+9
 10121  001A62  CFF3 F02E          	movff	prodl,??_ISR+10
 10122  001A66  CFF4 F02F          	movff	prodh,??_ISR+11
 10123  001A6A  CFF6 F030          	movff	tblptrl,??_ISR+12
 10124  001A6E  CFF7 F031          	movff	tblptrh,??_ISR+13
 10125  001A72  CFF8 F032          	movff	tblptru,??_ISR+14
 10126  001A76  CFF5 F033          	movff	tablat,??_ISR+15
 10127                           
 10128                           ;ES_Port.c: 115: static unsigned int LastTime;
 10129                           ;ES_Port.c: 116: static unsigned int NextTime;
 10130                           ;ES_Port.c: 118: if (CCP1IF == 1)
 10131  001A7A  A49E               	btfss	3998,2,c	;volatile
 10132  001A7C  D015               	goto	i2l3804
 10133                           
 10134                           ;ES_Port.c: 119: {
 10135                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 10136  001A7E  50BF               	movf	4031,w,c	;volatile
 10137  001A80  6E24               	movwf	??_ISR& (0+255),c
 10138  001A82  50BE               	movf	4030,w,c	;volatile
 10139  001A84  6E38               	movwf	ISR@LastTime,c
 10140  001A86  C024  F039         	movff	??_ISR,ISR@LastTime+1
 10141                           
 10142                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 10143  001A8A  0E20               	movlw	32
 10144  001A8C  2438               	addwf	ISR@LastTime,w,c
 10145  001A8E  6E3A               	movwf	ISR@NextTime,c
 10146  001A90  0E4E               	movlw	78
 10147  001A92  2039               	addwfc	ISR@LastTime+1,w,c
 10148  001A94  6E3B               	movwf	ISR@NextTime+1,c
 10149                           
 10150                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 10151  001A96  503B               	movf	ISR@NextTime+1,w,c
 10152  001A98  6EBF               	movwf	4031,c	;volatile
 10153                           
 10154                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 10155  001A9A  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
 10156                           
 10157                           ;ES_Port.c: 124: CCP1IF = 0;
 10158  001A9E  949E               	bcf	3998,2,c	;volatile
 10159                           
 10160                           ;ES_Port.c: 125: TickCount++;
 10161  001AA0  0100               	movlb	0	; () banked
 10162  001AA2  2BE9               	incf	_TickCount& (0+255),f,b	;volatile
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;ES_Port.c: 126: SysTickCounter++;
 10166  001AA4  4A3C               	infsnz	_SysTickCounter,f,c	;volatile
 10167  001AA6  2A3D               	incf	_SysTickCounter+1,f,c	;volatile
 10168  001AA8                     i2l3804:
 10169                           
 10170                           ;ES_Port.c: 127: }
 10171                           ;ES_Port.c: 128: if (SSPIF == 1)
 10172  001AA8  A69E               	btfss	3998,3,c	;volatile
 10173  001AAA  D003               	goto	i2l3810
 10174                           
 10175                           ;ES_Port.c: 129: {
 10176                           ;ES_Port.c: 130: SSPIF = 0;
 10177  001AAC  969E               	bcf	3998,3,c	;volatile
 10178                           
 10179                           ;ES_Port.c: 131: SPI32_EOTResponse();
 10180  001AAE  EC5A  F013         	call	_SPI32_EOTResponse	;wreg free
 10181  001AB2                     i2l3810:
 10182                           
 10183                           ;ES_Port.c: 132: }
 10184                           ;ES_Port.c: 133: if (TXB0IF == 1)
 10185  001AB2  A4A4               	btfss	4004,2,c	;volatile
 10186  001AB4  D003               	goto	i2l3816
 10187                           
 10188                           ;ES_Port.c: 134: {
 10189                           ;ES_Port.c: 135: TXB0IF = 0;
 10190  001AB6  94A4               	bcf	4004,2,c	;volatile
 10191                           
 10192                           ;ES_Port.c: 136: CanXmitResponse();
 10193  001AB8  ECB1  F014         	call	_CanXmitResponse	;wreg free
 10194  001ABC                     i2l3816:
 10195                           
 10196                           ;ES_Port.c: 137: }
 10197                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 10198  001ABC  A0A4               	btfss	4004,0,c	;volatile
 10199  001ABE  D003               	goto	i2l3822
 10200                           
 10201                           ;ES_Port.c: 139: RXB0IF = 0;
 10202  001AC0  90A4               	bcf	4004,0,c	;volatile
 10203                           
 10204                           ;ES_Port.c: 140: CanRCVResponse();
 10205  001AC2  EC98  F014         	call	_CanRCVResponse	;wreg free
 10206  001AC6                     i2l3822:
 10207                           
 10208                           ;ES_Port.c: 141: }
 10209                           ;ES_Port.c: 142: if (ERRIF == 1) {
 10210  001AC6  AAA4               	btfss	4004,5,c	;volatile
 10211  001AC8  D003               	goto	i2l3828
 10212                           
 10213                           ;ES_Port.c: 143: ERRIF = 0;
 10214  001ACA  9AA4               	bcf	4004,5,c	;volatile
 10215                           
 10216                           ;ES_Port.c: 144: CanErrorResponse();
 10217  001ACC  ECB7  F014         	call	_CanErrorResponse	;wreg free
 10218  001AD0                     i2l3828:
 10219                           
 10220                           ;ES_Port.c: 145: }
 10221                           ;ES_Port.c: 146: if (IRXIF == 1) {
 10222  001AD0  AEA4               	btfss	4004,7,c	;volatile
 10223  001AD2  D003               	goto	i2l175
 10224                           
 10225                           ;ES_Port.c: 147: IRXIF = 0;
 10226  001AD4  9EA4               	bcf	4004,7,c	;volatile
 10227                           
 10228                           ;ES_Port.c: 148: BusErrorResponse();
 10229  001AD6  ECB8  F014         	call	_BusErrorResponse	;wreg free
 10230  001ADA                     i2l175:
 10231  001ADA  C033  FFF5         	movff	??_ISR+15,tablat
 10232  001ADE  C032  FFF8         	movff	??_ISR+14,tblptru
 10233  001AE2  C031  FFF7         	movff	??_ISR+13,tblptrh
 10234  001AE6  C030  FFF6         	movff	??_ISR+12,tblptrl
 10235  001AEA  C02F  FFF4         	movff	??_ISR+11,prodh
 10236  001AEE  C02E  FFF3         	movff	??_ISR+10,prodl
 10237  001AF2  C02D  FFDA         	movff	??_ISR+9,fsr2h
 10238  001AF6  C02C  FFD9         	movff	??_ISR+8,fsr2l
 10239  001AFA  C02B  FFE2         	movff	??_ISR+7,fsr1h
 10240  001AFE  C02A  FFE1         	movff	??_ISR+6,fsr1l
 10241  001B02  C029  FFEA         	movff	??_ISR+5,fsr0h
 10242  001B06  C028  FFE9         	movff	??_ISR+4,fsr0l
 10243  001B0A  C027  FFFB         	movff	??_ISR+3,pclatu
 10244  001B0E  C026  FFFA         	movff	??_ISR+2,pclath
 10245  001B12  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10246  001B14  0011               	retfie		f
 10247  001B16                     __end_of_ISR:
 10248                           	opt stack 0
 10249                           tosu	equ	0xFFF
 10250                           tosh	equ	0xFFE
 10251                           tosl	equ	0xFFD
 10252                           pclatu	equ	0xFFB
 10253                           pclath	equ	0xFFA
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           intcon	equ	0xFF2
 10261                           postinc0	equ	0xFEE
 10262                           fsr0h	equ	0xFEA
 10263                           fsr0l	equ	0xFE9
 10264                           wreg	equ	0xFE8
 10265                           indf1	equ	0xFE7
 10266                           postinc1	equ	0xFE6
 10267                           postdec1	equ	0xFE5
 10268                           fsr1h	equ	0xFE2
 10269                           fsr1l	equ	0xFE1
 10270                           indf2	equ	0xFDF
 10271                           postinc2	equ	0xFDE
 10272                           postdec2	equ	0xFDD
 10273                           fsr2h	equ	0xFDA
 10274                           fsr2l	equ	0xFD9
 10275                           status	equ	0xFD8
 10276                           
 10277 ;; *************** function _SPI32_EOTResponse *****************
 10278 ;; Defined at:
 10279 ;;		line 167 in file "SPI32_HW.c"
 10280 ;; Parameters:    Size  Location     Type
 10281 ;;		None
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      void 
 10286 ;; Registers used:
 10287 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10293 ;;      Params:         0       0       0       0
 10294 ;;      Locals:         3       0       0       0
 10295 ;;      Temps:          0       0       0       0
 10296 ;;      Totals:         3       0       0       0
 10297 ;;Total ram usage:        3 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    4
 10300 ;; This function calls:
 10301 ;;		i2_PostSPI32ControlService
 10302 ;;		i2_SPI32_SendFrame
 10303 ;; This function is called by:
 10304 ;;		_ISR
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text54
 10309  0026B4                     __ptext54:
 10310                           	opt stack 0
 10311  0026B4                     _SPI32_EOTResponse:
 10312                           	opt stack 16
 10313                           
 10314                           ;SPI32_HW.c: 169: if(FrameByte == 0){
 10315                           
 10316                           ;incstack = 0
 10317  0026B4  0100               	movlb	0	; () banked
 10318  0026B6  51FA               	movf	_FrameByte& (0+255),w,b
 10319  0026B8  A4D8               	btfss	status,2,c
 10320  0026BA  D00E               	goto	i2l3702
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;SPI32_HW.c: 171: FrameByte = 4;
 10324  0026BC  0E04               	movlw	4
 10325  0026BE  0100               	movlb	0	; () banked
 10326  0026C0  6FFA               	movwf	_FrameByte& (0+255),b
 10327                           
 10328                           ;SPI32_HW.c: 173: ES_Event EOTevent;
 10329                           ;SPI32_HW.c: 174: EOTevent.EventType = ES_TIMEOUT;
 10330  0026C2  0E03               	movlw	3
 10331  0026C4  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;SPI32_HW.c: 175: PostSPI32ControlService(EOTevent);
 10335  0026C6  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 10336  0026CA  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 10337  0026CE  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 10338  0026D2  EC74  F014         	call	i2_PostSPI32ControlService	;wreg free
 10339                           
 10340                           ;SPI32_HW.c: 176: }
 10341  0026D6  0012               	return	
 10342  0026D8                     i2l3702:
 10343                           
 10344                           ;SPI32_HW.c: 177: else{
 10345                           ;SPI32_HW.c: 179: SPI32_SendFrame(TransmitFrame);
 10346  0026D8  C034  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 10347  0026DC  C035  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 10348  0026E0  C036  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 10349  0026E4  C037  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 10350  0026E8  EC91  F012         	call	i2_SPI32_SendFrame	;wreg free
 10351  0026EC  0012               	return	
 10352  0026EE                     __end_of_SPI32_EOTResponse:
 10353                           	opt stack 0
 10354                           tosu	equ	0xFFF
 10355                           tosh	equ	0xFFE
 10356                           tosl	equ	0xFFD
 10357                           pclatu	equ	0xFFB
 10358                           pclath	equ	0xFFA
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           postinc0	equ	0xFEE
 10367                           fsr0h	equ	0xFEA
 10368                           fsr0l	equ	0xFE9
 10369                           wreg	equ	0xFE8
 10370                           indf1	equ	0xFE7
 10371                           postinc1	equ	0xFE6
 10372                           postdec1	equ	0xFE5
 10373                           fsr1h	equ	0xFE2
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function i2_SPI32_SendFrame *****************
 10383 ;; Defined at:
 10384 ;;		line 86 in file "SPI32_HW.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  newFrame        4    0[COMRAM] unsigned long 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0, prodl, prodh
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10398 ;;      Params:         4       0       0       0
 10399 ;;      Locals:         0       0       0       0
 10400 ;;      Temps:          4       0       0       0
 10401 ;;      Totals:         8       0       0       0
 10402 ;;Total ram usage:        8 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_SPI32_EOTResponse
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text55
 10412  002522                     __ptext55:
 10413                           	opt stack 0
 10414  002522                     i2_SPI32_SendFrame:
 10415                           	opt stack 19
 10416                           
 10417                           ;SPI32_HW.c: 101: if(FrameByte == 4){
 10418                           
 10419                           ;incstack = 0
 10420  002522  0E04               	movlw	4
 10421  002524  0100               	movlb	0	; () banked
 10422  002526  19FA               	xorwf	_FrameByte& (0+255),w,b
 10423  002528  A4D8               	btfss	status,2,c
 10424  00252A  D008               	goto	i2l3638
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
 10428  00252C  C001  F034         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 10429  002530  C002  F035         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 10430  002534  C003  F036         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 10431  002538  C004  F037         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 10432  00253C                     i2l3638:
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;SPI32_HW.c: 104: }
 10436                           ;SPI32_HW.c: 106: FrameByte--;
 10437  00253C  0100               	movlb	0	; () banked
 10438  00253E  07FA               	decf	_FrameByte& (0+255),f,b
 10439                           
 10440                           ; BSR set to: 0
 10441                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 10442  002540  0100               	movlb	0	; () banked
 10443  002542  51FA               	movf	_FrameByte& (0+255),w,b
 10444  002544  0D08               	mullw	8
 10445  002546  50F3               	movf	prodl,w,c
 10446  002548  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 10447  00254C  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 10448  002550  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 10449  002554  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 10450  002558  2AE8               	incf	wreg,f,c
 10451  00255A  D005               	goto	i2u218_40
 10452  00255C                     i2u218_45:
 10453  00255C  90D8               	bcf	status,0,c
 10454  00255E  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 10455  002560  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 10456  002562  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 10457  002564  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 10458  002566                     i2u218_40:
 10459  002566  2EE8               	decfsz	wreg,f,c
 10460  002568  D7F9               	goto	i2u218_45
 10461  00256A  5005               	movf	??i2_SPI32_SendFrame,w,c
 10462  00256C  6EC9               	movwf	4041,c	;volatile
 10463                           
 10464                           ; BSR set to: 0
 10465  00256E  0012               	return		;funcret
 10466  002570                     __end_ofi2_SPI32_SendFrame:
 10467                           	opt stack 0
 10468                           tosu	equ	0xFFF
 10469                           tosh	equ	0xFFE
 10470                           tosl	equ	0xFFD
 10471                           pclatu	equ	0xFFB
 10472                           pclath	equ	0xFFA
 10473                           tblptru	equ	0xFF8
 10474                           tblptrh	equ	0xFF7
 10475                           tblptrl	equ	0xFF6
 10476                           tablat	equ	0xFF5
 10477                           prodh	equ	0xFF4
 10478                           prodl	equ	0xFF3
 10479                           intcon	equ	0xFF2
 10480                           postinc0	equ	0xFEE
 10481                           fsr0h	equ	0xFEA
 10482                           fsr0l	equ	0xFE9
 10483                           wreg	equ	0xFE8
 10484                           indf1	equ	0xFE7
 10485                           postinc1	equ	0xFE6
 10486                           postdec1	equ	0xFE5
 10487                           fsr1h	equ	0xFE2
 10488                           fsr1l	equ	0xFE1
 10489                           indf2	equ	0xFDF
 10490                           postinc2	equ	0xFDE
 10491                           postdec2	equ	0xFDD
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function i2_PostSPI32ControlService *****************
 10497 ;; Defined at:
 10498 ;;		line 117 in file "SPI32_ControlService.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      unsigned char 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10512 ;;      Params:         3       0       0       0
 10513 ;;      Locals:         0       0       0       0
 10514 ;;      Temps:          0       0       0       0
 10515 ;;      Totals:         3       0       0       0
 10516 ;;Total ram usage:        3 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    3
 10519 ;; This function calls:
 10520 ;;		i2_ES_PostToService
 10521 ;; This function is called by:
 10522 ;;		_SPI32_EOTResponse
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text56
 10527  0028E8                     __ptext56:
 10528                           	opt stack 0
 10529  0028E8                     i2_PostSPI32ControlService:
 10530                           	opt stack 16
 10531                           
 10532                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 10533                           ;	Return value of i2_PostSPI32ControlService is never used
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;incstack = 0
 10537  0028E8  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 10538  0028EC  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10539  0028F0  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10540  0028F4  0100               	movlb	0	; () banked
 10541  0028F6  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10542  0028F8  ECB4  F011         	call	i2_ES_PostToService
 10543  0028FC  0012               	return	
 10544  0028FE                     __end_ofi2_PostSPI32ControlService:
 10545                           	opt stack 0
 10546                           tosu	equ	0xFFF
 10547                           tosh	equ	0xFFE
 10548                           tosl	equ	0xFFD
 10549                           pclatu	equ	0xFFB
 10550                           pclath	equ	0xFFA
 10551                           tblptru	equ	0xFF8
 10552                           tblptrh	equ	0xFF7
 10553                           tblptrl	equ	0xFF6
 10554                           tablat	equ	0xFF5
 10555                           prodh	equ	0xFF4
 10556                           prodl	equ	0xFF3
 10557                           intcon	equ	0xFF2
 10558                           postinc0	equ	0xFEE
 10559                           fsr0h	equ	0xFEA
 10560                           fsr0l	equ	0xFE9
 10561                           wreg	equ	0xFE8
 10562                           indf1	equ	0xFE7
 10563                           postinc1	equ	0xFE6
 10564                           postdec1	equ	0xFE5
 10565                           fsr1h	equ	0xFE2
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           fsr2h	equ	0xFDA
 10571                           fsr2l	equ	0xFD9
 10572                           status	equ	0xFD8
 10573                           
 10574 ;; *************** function _CanXmitResponse *****************
 10575 ;; Defined at:
 10576 ;;		line 179 in file "CanRX_Service.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;		None
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;		None
 10581 ;; Return value:  Size  Location     Type
 10582 ;;                  1    wreg      void 
 10583 ;; Registers used:
 10584 ;;		None
 10585 ;; Tracked objects:
 10586 ;;		On entry : 0/0
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10590 ;;      Params:         0       0       0       0
 10591 ;;      Locals:         0       0       0       0
 10592 ;;      Temps:          0       0       0       0
 10593 ;;      Totals:         0       0       0       0
 10594 ;;Total ram usage:        0 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; This function calls:
 10597 ;;		Nothing
 10598 ;; This function is called by:
 10599 ;;		_ISR
 10600 ;; This function uses a non-reentrant model
 10601 ;;
 10602                           
 10603                           	psect	text57
 10604  002962                     __ptext57:
 10605                           	opt stack 0
 10606  002962                     _CanXmitResponse:
 10607                           	opt stack 20
 10608                           
 10609                           ;CanRX_Service.c: 181: TXB0CONbits.TXREQ = 0;
 10610                           
 10611                           ;incstack = 0
 10612  002962  010F               	movlb	15	; () banked
 10613  002964  9740               	bcf	64,3,b	;volatile
 10614                           
 10615                           ; BSR set to: 15
 10616  002966  0012               	return		;funcret
 10617  002968                     __end_of_CanXmitResponse:
 10618                           	opt stack 0
 10619                           tosu	equ	0xFFF
 10620                           tosh	equ	0xFFE
 10621                           tosl	equ	0xFFD
 10622                           pclatu	equ	0xFFB
 10623                           pclath	equ	0xFFA
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           postinc0	equ	0xFEE
 10632                           fsr0h	equ	0xFEA
 10633                           fsr0l	equ	0xFE9
 10634                           wreg	equ	0xFE8
 10635                           indf1	equ	0xFE7
 10636                           postinc1	equ	0xFE6
 10637                           postdec1	equ	0xFE5
 10638                           fsr1h	equ	0xFE2
 10639                           fsr1l	equ	0xFE1
 10640                           indf2	equ	0xFDF
 10641                           postinc2	equ	0xFDE
 10642                           postdec2	equ	0xFDD
 10643                           fsr2h	equ	0xFDA
 10644                           fsr2l	equ	0xFD9
 10645                           status	equ	0xFD8
 10646                           
 10647 ;; *************** function _CanRCVResponse *****************
 10648 ;; Defined at:
 10649 ;;		line 184 in file "CanRX_Service.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;		None
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;		None
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  2  145[None  ] int 
 10656 ;; Registers used:
 10657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10663 ;;      Params:         0       0       0       0
 10664 ;;      Locals:         0       0       0       0
 10665 ;;      Temps:          0       0       0       0
 10666 ;;      Totals:         0       0       0       0
 10667 ;;Total ram usage:        0 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    5
 10670 ;; This function calls:
 10671 ;;		_ProcessReceive
 10672 ;; This function is called by:
 10673 ;;		_ISR
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           	psect	text58
 10678  002930                     __ptext58:
 10679                           	opt stack 0
 10680  002930                     _CanRCVResponse:
 10681                           	opt stack 15
 10682                           
 10683                           ;CanRX_Service.c: 186: if (RXB0CONbits.RXFUL == 1) {
 10684                           
 10685                           ; BSR set to: 15
 10686                           ;incstack = 0
 10687  002930  AE60               	btfss	3936,7,c	;volatile
 10688  002932  0012               	return	
 10689                           
 10690                           ;CanRX_Service.c: 187: ProcessReceive();
 10691  002934  ECE9  F011         	call	_ProcessReceive	;wreg free
 10692                           
 10693                           ;CanRX_Service.c: 188: RXB0CONbits.RXFUL = 0;
 10694  002938  9E60               	bcf	3936,7,c	;volatile
 10695  00293A  0012               	return	
 10696  00293C                     __end_of_CanRCVResponse:
 10697                           	opt stack 0
 10698                           tosu	equ	0xFFF
 10699                           tosh	equ	0xFFE
 10700                           tosl	equ	0xFFD
 10701                           pclatu	equ	0xFFB
 10702                           pclath	equ	0xFFA
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           postinc0	equ	0xFEE
 10711                           fsr0h	equ	0xFEA
 10712                           fsr0l	equ	0xFE9
 10713                           wreg	equ	0xFE8
 10714                           indf1	equ	0xFE7
 10715                           postinc1	equ	0xFE6
 10716                           postdec1	equ	0xFE5
 10717                           fsr1h	equ	0xFE2
 10718                           fsr1l	equ	0xFE1
 10719                           indf2	equ	0xFDF
 10720                           postinc2	equ	0xFDE
 10721                           postdec2	equ	0xFDD
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           
 10726 ;; *************** function _ProcessReceive *****************
 10727 ;; Defined at:
 10728 ;;		line 288 in file "CanRX_Service.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;		None
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;  Event2Post      3   32[COMRAM] struct ES_Event_t
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  1    wreg      void 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10742 ;;      Params:         0       0       0       0
 10743 ;;      Locals:         3       0       0       0
 10744 ;;      Temps:          0       0       0       0
 10745 ;;      Totals:         3       0       0       0
 10746 ;;Total ram usage:        3 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:    4
 10749 ;; This function calls:
 10750 ;;		_PostCanRX_Service
 10751 ;; This function is called by:
 10752 ;;		_CanRCVResponse
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text59
 10757  0023D2                     __ptext59:
 10758                           	opt stack 0
 10759  0023D2                     _ProcessReceive:
 10760                           	opt stack 15
 10761                           
 10762                           ;CanRX_Service.c: 291: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && R
      +                          XB0EIDL == 0x01) {
 10763                           
 10764                           ;incstack = 0
 10765  0023D2  5061               	movf	3937,w,c	;volatile
 10766  0023D4  A4D8               	btfss	status,2,c
 10767  0023D6  0012               	return	
 10768  0023D8  0E18               	movlw	24
 10769  0023DA  1862               	xorwf	3938,w,c	;volatile
 10770  0023DC  A4D8               	btfss	status,2,c
 10771  0023DE  0012               	return	
 10772  0023E0  5063               	movf	3939,w,c	;volatile
 10773  0023E2  A4D8               	btfss	status,2,c
 10774  0023E4  0012               	return	
 10775  0023E6  0464               	decf	3940,w,c	;volatile
 10776  0023E8  A4D8               	btfss	status,2,c
 10777  0023EA  0012               	return	
 10778  0023EC  D009               	goto	i2l3626
 10779  0023EE                     i2l3616:
 10780                           
 10781                           ;CanRX_Service.c: 295: Event2Post.EventType = IDLE_MESSAGE;
 10782  0023EE  0E0A               	movlw	10
 10783  0023F0  D005               	goto	L20
 10784  0023F2                     i2l3618:
 10785                           
 10786                           ;CanRX_Service.c: 298: Event2Post.EventType = SPEAKING_MESSAGE;
 10787  0023F2  0E0B               	movlw	11
 10788  0023F4  D003               	goto	L20
 10789  0023F6                     i2l3620:
 10790                           
 10791                           ;CanRX_Service.c: 301: Event2Post.EventType = THINKING_MESSAGE;
 10792  0023F6  0E0C               	movlw	12
 10793  0023F8  D001               	goto	L20
 10794  0023FA                     i2l3622:
 10795                           
 10796                           ;CanRX_Service.c: 304: Event2Post.EventType = LISTENING_MESSAGE;
 10797  0023FA  0E0D               	movlw	13
 10798  0023FC                     L20:
 10799  0023FC  6E21               	movwf	ProcessReceive@Event2Post,c
 10800                           
 10801                           ;CanRX_Service.c: 306: }
 10802                           
 10803                           ;CanRX_Service.c: 305: break;
 10804  0023FE  D00D               	goto	i2l3628
 10805  002400                     i2l3626:
 10806  002400  5066               	movf	3942,w,c	;volatile
 10807                           
 10808                           ; Switch size 1, requested type "space"
 10809                           ; Number of cases is 4, Range of values is 0 to 3
 10810                           ; switch strategies available:
 10811                           ; Name         Instructions Cycles
 10812                           ; simple_byte           13     7 (average)
 10813                           ;	Chosen strategy is simple_byte
 10814  002402  0A00               	xorlw	0	; case 0
 10815  002404  B4D8               	btfsc	status,2,c
 10816  002406  D7F3               	goto	i2l3616
 10817  002408  0A01               	xorlw	1	; case 1
 10818  00240A  B4D8               	btfsc	status,2,c
 10819  00240C  D7F4               	goto	i2l3620
 10820  00240E  0A03               	xorlw	3	; case 2
 10821  002410  B4D8               	btfsc	status,2,c
 10822  002412  D7EF               	goto	i2l3618
 10823  002414  0A01               	xorlw	1	; case 3
 10824  002416  B4D8               	btfsc	status,2,c
 10825  002418  D7F0               	goto	i2l3622
 10826  00241A                     i2l3628:
 10827                           
 10828                           ;CanRX_Service.c: 307: PostCanRX_Service(Event2Post);
 10829  00241A  C021  F01E         	movff	ProcessReceive@Event2Post,PostCanRX_Service@ThisEvent
 10830  00241E  C022  F01F         	movff	ProcessReceive@Event2Post+1,PostCanRX_Service@ThisEvent+1
 10831  002422  C023  F020         	movff	ProcessReceive@Event2Post+2,PostCanRX_Service@ThisEvent+2
 10832  002426  EC7F  F014         	call	_PostCanRX_Service	;wreg free
 10833  00242A  0012               	return	
 10834  00242C                     __end_of_ProcessReceive:
 10835                           	opt stack 0
 10836                           tosu	equ	0xFFF
 10837                           tosh	equ	0xFFE
 10838                           tosl	equ	0xFFD
 10839                           pclatu	equ	0xFFB
 10840                           pclath	equ	0xFFA
 10841                           tblptru	equ	0xFF8
 10842                           tblptrh	equ	0xFF7
 10843                           tblptrl	equ	0xFF6
 10844                           tablat	equ	0xFF5
 10845                           prodh	equ	0xFF4
 10846                           prodl	equ	0xFF3
 10847                           intcon	equ	0xFF2
 10848                           postinc0	equ	0xFEE
 10849                           fsr0h	equ	0xFEA
 10850                           fsr0l	equ	0xFE9
 10851                           wreg	equ	0xFE8
 10852                           indf1	equ	0xFE7
 10853                           postinc1	equ	0xFE6
 10854                           postdec1	equ	0xFE5
 10855                           fsr1h	equ	0xFE2
 10856                           fsr1l	equ	0xFE1
 10857                           indf2	equ	0xFDF
 10858                           postinc2	equ	0xFDE
 10859                           postdec2	equ	0xFDD
 10860                           fsr2h	equ	0xFDA
 10861                           fsr2l	equ	0xFD9
 10862                           status	equ	0xFD8
 10863                           
 10864 ;; *************** function _PostCanRX_Service *****************
 10865 ;; Defined at:
 10866 ;;		line 117 in file "CanRX_Service.c"
 10867 ;; Parameters:    Size  Location     Type
 10868 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10869 ;; Auto vars:     Size  Location     Type
 10870 ;;		None
 10871 ;; Return value:  Size  Location     Type
 10872 ;;                  1    wreg      unsigned char 
 10873 ;; Registers used:
 10874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10880 ;;      Params:         3       0       0       0
 10881 ;;      Locals:         0       0       0       0
 10882 ;;      Temps:          0       0       0       0
 10883 ;;      Totals:         3       0       0       0
 10884 ;;Total ram usage:        3 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    3
 10887 ;; This function calls:
 10888 ;;		i2_ES_PostToService
 10889 ;; This function is called by:
 10890 ;;		_ProcessReceive
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           	psect	text60
 10895  0028FE                     __ptext60:
 10896                           	opt stack 0
 10897  0028FE                     _PostCanRX_Service:
 10898                           	opt stack 15
 10899                           
 10900                           ;CanRX_Service.c: 119: return ES_PostToService( MyPriority, ThisEvent);
 10901                           ;	Return value of _PostCanRX_Service is never used
 10902                           
 10903                           ;incstack = 0
 10904  0028FE  C01E  F018         	movff	PostCanRX_Service@ThisEvent,i2ES_PostToService@TheEvent
 10905  002902  C01F  F019         	movff	PostCanRX_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10906  002906  C020  F01A         	movff	PostCanRX_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10907  00290A  0100               	movlb	0	; () banked
 10908  00290C  51DE               	movf	CanRX_Service@MyPriority& (0+255),w,b
 10909  00290E  ECB4  F011         	call	i2_ES_PostToService
 10910  002912  0012               	return	
 10911  002914                     __end_of_PostCanRX_Service:
 10912                           	opt stack 0
 10913                           tosu	equ	0xFFF
 10914                           tosh	equ	0xFFE
 10915                           tosl	equ	0xFFD
 10916                           pclatu	equ	0xFFB
 10917                           pclath	equ	0xFFA
 10918                           tblptru	equ	0xFF8
 10919                           tblptrh	equ	0xFF7
 10920                           tblptrl	equ	0xFF6
 10921                           tablat	equ	0xFF5
 10922                           prodh	equ	0xFF4
 10923                           prodl	equ	0xFF3
 10924                           intcon	equ	0xFF2
 10925                           postinc0	equ	0xFEE
 10926                           fsr0h	equ	0xFEA
 10927                           fsr0l	equ	0xFE9
 10928                           wreg	equ	0xFE8
 10929                           indf1	equ	0xFE7
 10930                           postinc1	equ	0xFE6
 10931                           postdec1	equ	0xFE5
 10932                           fsr1h	equ	0xFE2
 10933                           fsr1l	equ	0xFE1
 10934                           indf2	equ	0xFDF
 10935                           postinc2	equ	0xFDE
 10936                           postdec2	equ	0xFDD
 10937                           fsr2h	equ	0xFDA
 10938                           fsr2l	equ	0xFD9
 10939                           status	equ	0xFD8
 10940                           
 10941 ;; *************** function i2_ES_PostToService *****************
 10942 ;; Defined at:
 10943 ;;		line 351 in file "ES_Framework.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  WhichService    1    wreg     unsigned char 
 10946 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  WhichService    1   28[COMRAM] unsigned char 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  1    wreg      unsigned char 
 10951 ;; Registers used:
 10952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10958 ;;      Params:         3       0       0       0
 10959 ;;      Locals:         1       0       0       0
 10960 ;;      Temps:          2       0       0       0
 10961 ;;      Totals:         6       0       0       0
 10962 ;;Total ram usage:        6 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    2
 10965 ;; This function calls:
 10966 ;;		i2_ES_EnQueueFIFO
 10967 ;; This function is called by:
 10968 ;;		_PostCanRX_Service
 10969 ;;		i2_PostSPI32ControlService
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           	psect	text61
 10974  002368                     __ptext61:
 10975                           	opt stack 0
 10976  002368                     i2_ES_PostToService:
 10977                           	opt stack 16
 10978                           
 10979                           ;incstack = 0
 10980                           ;i2ES_PostToService@WhichService stored from wreg
 10981  002368  6E1D               	movwf	i2ES_PostToService@WhichService,c
 10982                           
 10983                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 10984                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 10985                           ;ES_Framework.c: 354: 1 )){
 10986  00236A  0E03               	movlw	3
 10987  00236C  601D               	cpfslt	i2ES_PostToService@WhichService,c
 10988  00236E  D02F               	goto	i2l3218
 10989  002370  501D               	movf	i2ES_PostToService@WhichService,w,c
 10990  002372  0D03               	mullw	3
 10991  002374  0E5C               	movlw	low _EventQueues
 10992  002376  24F3               	addwf	prodl,w,c
 10993  002378  6EF6               	movwf	tblptrl,c
 10994  00237A  0E03               	movlw	high _EventQueues
 10995  00237C  20F4               	addwfc	prodh,w,c
 10996  00237E  6EF7               	movwf	tblptrh,c
 10997  002380                     	if	0	;There are less than 3 active tblptr bytes
 10998  002380                     	endif
 10999  002380  0009               	tblrd		*+
 11000  002382  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 11001  002386  000A               	tblrd		*-
 11002  002388  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 11003  00238C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 11004  002390  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 11005  002394  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 11006  002398  ECAB  F00E         	call	i2_ES_EnQueueFIFO	;wreg free
 11007  00239C  06E8               	decf	wreg,f,c
 11008  00239E  A4D8               	btfss	status,2,c
 11009  0023A0  D016               	goto	i2l3218
 11010                           
 11011                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 11012  0023A2  501D               	movf	i2ES_PostToService@WhichService,w,c
 11013  0023A4  0D02               	mullw	2
 11014  0023A6  0E01               	movlw	low _BitNum2SetMask
 11015  0023A8  24F3               	addwf	prodl,w,c
 11016  0023AA  6EF6               	movwf	tblptrl,c
 11017  0023AC  0E03               	movlw	high _BitNum2SetMask
 11018  0023AE  20F4               	addwfc	prodh,w,c
 11019  0023B0  6EF7               	movwf	tblptrh,c
 11020  0023B2                     	if	0	;There are less than 3 active tblptr bytes
 11021  0023B2                     	endif
 11022  0023B2  0009               	tblrd		*+
 11023  0023B4  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 11024  0023B8  0009               	tblrd		*+
 11025  0023BA  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 11026  0023BE  501B               	movf	??i2_ES_PostToService,w,c
 11027  0023C0  0100               	movlb	0	; () banked
 11028  0023C2  13DA               	iorwf	_Ready& (0+255),f,b
 11029  0023C4  501C               	movf	??i2_ES_PostToService+1,w,c
 11030  0023C6  0100               	movlb	0	; () banked
 11031  0023C8  13DB               	iorwf	(_Ready+1)& (0+255),f,b
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;ES_Framework.c: 356: return 1;
 11035  0023CA  0E01               	movlw	1
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;ES_Framework.c: 357: } else
 11039                           
 11040                           ; BSR set to: 0
 11041  0023CC  0012               	return	
 11042  0023CE                     i2l3218:
 11043                           
 11044                           ;ES_Framework.c: 358: return 0;
 11045  0023CE  0E00               	movlw	0
 11046  0023D0  0012               	return	
 11047  0023D2                     __end_ofi2_ES_PostToService:
 11048                           	opt stack 0
 11049                           tosu	equ	0xFFF
 11050                           tosh	equ	0xFFE
 11051                           tosl	equ	0xFFD
 11052                           pclatu	equ	0xFFB
 11053                           pclath	equ	0xFFA
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           intcon	equ	0xFF2
 11061                           postinc0	equ	0xFEE
 11062                           fsr0h	equ	0xFEA
 11063                           fsr0l	equ	0xFE9
 11064                           wreg	equ	0xFE8
 11065                           indf1	equ	0xFE7
 11066                           postinc1	equ	0xFE6
 11067                           postdec1	equ	0xFE5
 11068                           fsr1h	equ	0xFE2
 11069                           fsr1l	equ	0xFE1
 11070                           indf2	equ	0xFDF
 11071                           postinc2	equ	0xFDE
 11072                           postdec2	equ	0xFDD
 11073                           fsr2h	equ	0xFDA
 11074                           fsr2l	equ	0xFD9
 11075                           status	equ	0xFD8
 11076                           
 11077 ;; *************** function i2_ES_EnQueueFIFO *****************
 11078 ;; Defined at:
 11079 ;;		line 85 in file "ES_Queue.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 11082 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
 11083 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 11086 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
 11087 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  1    wreg      unsigned char 
 11090 ;; Registers used:
 11091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11092 ;; Tracked objects:
 11093 ;;		On entry : 0/0
 11094 ;;		On exit  : 0/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11097 ;;      Params:         5       0       0       0
 11098 ;;      Locals:         3       0       0       0
 11099 ;;      Temps:          3       0       0       0
 11100 ;;      Totals:        11       0       0       0
 11101 ;;Total ram usage:       11 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:    1
 11104 ;; This function calls:
 11105 ;;		i2___awmod
 11106 ;;		i2___wmul
 11107 ;; This function is called by:
 11108 ;;		i2_ES_PostToService
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           	psect	text62
 11113  001D56                     __ptext62:
 11114                           	opt stack 0
 11115  001D56                     i2_ES_EnQueueFIFO:
 11116                           	opt stack 16
 11117                           
 11118                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11119                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11120                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11121                           
 11122                           ;incstack = 0
 11123  001D56  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 11124  001D5A  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 11125                           
 11126                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11127  001D5E  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11128  001D62  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11129  001D66  EE10 F002          	lfsr	1,2
 11130  001D6A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11131  001D6C  26E1               	addwf	fsr1l,f,c
 11132  001D6E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11133  001D70  22E2               	addwfc	fsr1h,f,c
 11134  001D72  50DE               	movf	postinc2,w,c
 11135  001D74  5CE6               	subwf	postinc1,w,c
 11136  001D76  B0D8               	btfsc	status,0,c
 11137  001D78  D046               	goto	i2l3066
 11138                           
 11139                           ;ES_Queue.c: 92: {
 11140                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11141  001D7A  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 11142  001D7E  9EF2               	bcf	intcon,7,c	;volatile
 11143                           
 11144                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11145                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11146  001D80  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11147  001D84  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11148  001D88  50DF               	movf	indf2,w,c
 11149  001D8A  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 11150  001D8C  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 11151  001D8E  6E03               	movwf	i2___awmod@divisor,c
 11152  001D90  6A04               	clrf	i2___awmod@divisor+1,c
 11153  001D92  EE20 F002          	lfsr	2,2
 11154  001D96  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11155  001D98  26D9               	addwf	fsr2l,f,c
 11156  001D9A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11157  001D9C  22DA               	addwfc	fsr2h,f,c
 11158  001D9E  50DF               	movf	indf2,w,c
 11159  001DA0  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 11160  001DA2  EE20 F001          	lfsr	2,1
 11161  001DA6  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11162  001DA8  26D9               	addwf	fsr2l,f,c
 11163  001DAA  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11164  001DAC  22DA               	addwfc	fsr2h,f,c
 11165  001DAE  50DF               	movf	indf2,w,c
 11166  001DB0  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 11167  001DB2  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 11168  001DB4  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 11169  001DB6  6E01               	movwf	i2___awmod@dividend,c
 11170  001DB8  6A02               	clrf	i2___awmod@dividend+1,c
 11171  001DBA  3602               	rlcf	i2___awmod@dividend+1,f,c
 11172  001DBC  EC7C  F011         	call	i2___awmod	;wreg free
 11173  001DC0  0E01               	movlw	1
 11174  001DC2  2401               	addwf	?i2___awmod,w,c
 11175  001DC4  6E07               	movwf	i2___wmul@multiplier,c
 11176  001DC6  0E00               	movlw	0
 11177  001DC8  2002               	addwfc	?i2___awmod+1,w,c
 11178  001DCA  6E08               	movwf	i2___wmul@multiplier+1,c
 11179  001DCC  0E00               	movlw	0
 11180  001DCE  6E0A               	movwf	i2___wmul@multiplicand+1,c
 11181  001DD0  0E03               	movlw	3
 11182  001DD2  6E09               	movwf	i2___wmul@multiplicand,c
 11183  001DD4  EC04  F014         	call	i2___wmul	;wreg free
 11184  001DD8  5007               	movf	?i2___wmul,w,c
 11185  001DDA  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 11186  001DDC  6ED9               	movwf	fsr2l,c
 11187  001DDE  5008               	movf	?i2___wmul+1,w,c
 11188  001DE0  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 11189  001DE2  6EDA               	movwf	fsr2h,c
 11190  001DE4  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 11191  001DE8  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 11192  001DEC  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 11193                           
 11194                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11195  001DF0  EE20 F002          	lfsr	2,2
 11196  001DF4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11197  001DF6  26D9               	addwf	fsr2l,f,c
 11198  001DF8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11199  001DFA  22DA               	addwfc	fsr2h,f,c
 11200  001DFC  2ADF               	incf	indf2,f,c
 11201                           
 11202                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11203  001DFE  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11204                           
 11205                           ;ES_Queue.c: 101: return(1);
 11206  001E02  0E01               	movlw	1
 11207                           
 11208                           ;ES_Queue.c: 102: }else
 11209  001E04  0012               	return	
 11210  001E06                     i2l3066:
 11211                           
 11212                           ;ES_Queue.c: 103: return(0);
 11213  001E06  0E00               	movlw	0
 11214  001E08  0012               	return	
 11215  001E0A                     __end_ofi2_ES_EnQueueFIFO:
 11216                           	opt stack 0
 11217                           tosu	equ	0xFFF
 11218                           tosh	equ	0xFFE
 11219                           tosl	equ	0xFFD
 11220                           pclatu	equ	0xFFB
 11221                           pclath	equ	0xFFA
 11222                           tblptru	equ	0xFF8
 11223                           tblptrh	equ	0xFF7
 11224                           tblptrl	equ	0xFF6
 11225                           tablat	equ	0xFF5
 11226                           prodh	equ	0xFF4
 11227                           prodl	equ	0xFF3
 11228                           intcon	equ	0xFF2
 11229                           postinc0	equ	0xFEE
 11230                           fsr0h	equ	0xFEA
 11231                           fsr0l	equ	0xFE9
 11232                           wreg	equ	0xFE8
 11233                           indf1	equ	0xFE7
 11234                           postinc1	equ	0xFE6
 11235                           postdec1	equ	0xFE5
 11236                           fsr1h	equ	0xFE2
 11237                           fsr1l	equ	0xFE1
 11238                           indf2	equ	0xFDF
 11239                           postinc2	equ	0xFDE
 11240                           postdec2	equ	0xFDD
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function i2___wmul *****************
 11246 ;; Defined at:
 11247 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;  multiplier      2    6[COMRAM] unsigned int 
 11250 ;;  multiplicand    2    8[COMRAM] unsigned int 
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  __wmul          2   10[COMRAM] unsigned int 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  2    6[COMRAM] unsigned int 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0, prodl, prodh
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11262 ;;      Params:         4       0       0       0
 11263 ;;      Locals:         2       0       0       0
 11264 ;;      Temps:          0       0       0       0
 11265 ;;      Totals:         6       0       0       0
 11266 ;;Total ram usage:        6 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; This function calls:
 11269 ;;		Nothing
 11270 ;; This function is called by:
 11271 ;;		i2_ES_EnQueueFIFO
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text63
 11276  002808                     __ptext63:
 11277                           	opt stack 0
 11278  002808                     i2___wmul:
 11279                           	opt stack 16
 11280                           
 11281                           ;incstack = 0
 11282  002808  5007               	movf	i2___wmul@multiplier,w,c
 11283  00280A  0209               	mulwf	i2___wmul@multiplicand,c
 11284  00280C  CFF3 F00B          	movff	prodl,i2___wmul@product
 11285  002810  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 11286  002814  5007               	movf	i2___wmul@multiplier,w,c
 11287  002816  020A               	mulwf	i2___wmul@multiplicand+1,c
 11288  002818  50F3               	movf	prodl,w,c
 11289  00281A  260C               	addwf	i2___wmul@product+1,f,c
 11290  00281C  5008               	movf	i2___wmul@multiplier+1,w,c
 11291  00281E  0209               	mulwf	i2___wmul@multiplicand,c
 11292  002820  50F3               	movf	prodl,w,c
 11293  002822  260C               	addwf	i2___wmul@product+1,f,c
 11294  002824  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 11295  002828  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 11296  00282C  0012               	return	
 11297  00282E                     __end_ofi2___wmul:
 11298                           	opt stack 0
 11299                           tosu	equ	0xFFF
 11300                           tosh	equ	0xFFE
 11301                           tosl	equ	0xFFD
 11302                           pclatu	equ	0xFFB
 11303                           pclath	equ	0xFFA
 11304                           tblptru	equ	0xFF8
 11305                           tblptrh	equ	0xFF7
 11306                           tblptrl	equ	0xFF6
 11307                           tablat	equ	0xFF5
 11308                           prodh	equ	0xFF4
 11309                           prodl	equ	0xFF3
 11310                           intcon	equ	0xFF2
 11311                           postinc0	equ	0xFEE
 11312                           fsr0h	equ	0xFEA
 11313                           fsr0l	equ	0xFE9
 11314                           wreg	equ	0xFE8
 11315                           indf1	equ	0xFE7
 11316                           postinc1	equ	0xFE6
 11317                           postdec1	equ	0xFE5
 11318                           fsr1h	equ	0xFE2
 11319                           fsr1l	equ	0xFE1
 11320                           indf2	equ	0xFDF
 11321                           postinc2	equ	0xFDE
 11322                           postdec2	equ	0xFDD
 11323                           fsr2h	equ	0xFDA
 11324                           fsr2l	equ	0xFD9
 11325                           status	equ	0xFD8
 11326                           
 11327 ;; *************** function i2___awmod *****************
 11328 ;; Defined at:
 11329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11330 ;; Parameters:    Size  Location     Type
 11331 ;;  dividend        2    0[COMRAM] int 
 11332 ;;  divisor         2    2[COMRAM] int 
 11333 ;; Auto vars:     Size  Location     Type
 11334 ;;  __awmod         1    5[COMRAM] unsigned char 
 11335 ;;  __awmod         1    4[COMRAM] unsigned char 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  2    0[COMRAM] int 
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11345 ;;      Params:         4       0       0       0
 11346 ;;      Locals:         2       0       0       0
 11347 ;;      Temps:          0       0       0       0
 11348 ;;      Totals:         6       0       0       0
 11349 ;;Total ram usage:        6 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; This function calls:
 11352 ;;		Nothing
 11353 ;; This function is called by:
 11354 ;;		i2_ES_EnQueueFIFO
 11355 ;; This function uses a non-reentrant model
 11356 ;;
 11357                           
 11358                           	psect	text64
 11359  0022F8                     __ptext64:
 11360                           	opt stack 0
 11361  0022F8                     i2___awmod:
 11362                           	opt stack 16
 11363                           
 11364                           ;incstack = 0
 11365  0022F8  0E00               	movlw	0
 11366  0022FA  6E06               	movwf	i2___awmod@sign,c
 11367  0022FC  AE02               	btfss	i2___awmod@dividend+1,7,c
 11368  0022FE  D006               	goto	i2l2854
 11369  002300  6C01               	negf	i2___awmod@dividend,c
 11370  002302  1E02               	comf	i2___awmod@dividend+1,f,c
 11371  002304  B0D8               	btfsc	status,0,c
 11372  002306  2A02               	incf	i2___awmod@dividend+1,f,c
 11373  002308  0E01               	movlw	1
 11374  00230A  6E06               	movwf	i2___awmod@sign,c
 11375  00230C                     i2l2854:
 11376  00230C  AE04               	btfss	i2___awmod@divisor+1,7,c
 11377  00230E  D004               	goto	i2l2858
 11378  002310  6C03               	negf	i2___awmod@divisor,c
 11379  002312  1E04               	comf	i2___awmod@divisor+1,f,c
 11380  002314  B0D8               	btfsc	status,0,c
 11381  002316  2A04               	incf	i2___awmod@divisor+1,f,c
 11382  002318                     i2l2858:
 11383  002318  5003               	movf	i2___awmod@divisor,w,c
 11384  00231A  1004               	iorwf	i2___awmod@divisor+1,w,c
 11385  00231C  B4D8               	btfsc	status,2,c
 11386  00231E  D018               	goto	i2l2874
 11387  002320  0E01               	movlw	1
 11388  002322  6E05               	movwf	i2___awmod@counter,c
 11389  002324  D004               	goto	i2l2864
 11390  002326                     i2l2862:
 11391  002326  90D8               	bcf	status,0,c
 11392  002328  3603               	rlcf	i2___awmod@divisor,f,c
 11393  00232A  3604               	rlcf	i2___awmod@divisor+1,f,c
 11394  00232C  2A05               	incf	i2___awmod@counter,f,c
 11395  00232E                     i2l2864:
 11396  00232E  AE04               	btfss	i2___awmod@divisor+1,7,c
 11397  002330  D7FA               	goto	i2l2862
 11398  002332                     i2l2866:
 11399  002332  5003               	movf	i2___awmod@divisor,w,c
 11400  002334  5C01               	subwf	i2___awmod@dividend,w,c
 11401  002336  5004               	movf	i2___awmod@divisor+1,w,c
 11402  002338  5802               	subwfb	i2___awmod@dividend+1,w,c
 11403  00233A  A0D8               	btfss	status,0,c
 11404  00233C  D004               	goto	i2l2870
 11405  00233E  5003               	movf	i2___awmod@divisor,w,c
 11406  002340  5E01               	subwf	i2___awmod@dividend,f,c
 11407  002342  5004               	movf	i2___awmod@divisor+1,w,c
 11408  002344  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11409  002346                     i2l2870:
 11410  002346  90D8               	bcf	status,0,c
 11411  002348  3204               	rrcf	i2___awmod@divisor+1,f,c
 11412  00234A  3203               	rrcf	i2___awmod@divisor,f,c
 11413  00234C  2E05               	decfsz	i2___awmod@counter,f,c
 11414  00234E  D7F1               	goto	i2l2866
 11415  002350                     i2l2874:
 11416  002350  5006               	movf	i2___awmod@sign,w,c
 11417  002352  B4D8               	btfsc	status,2,c
 11418  002354  D004               	goto	i2l2878
 11419  002356  6C01               	negf	i2___awmod@dividend,c
 11420  002358  1E02               	comf	i2___awmod@dividend+1,f,c
 11421  00235A  B0D8               	btfsc	status,0,c
 11422  00235C  2A02               	incf	i2___awmod@dividend+1,f,c
 11423  00235E                     i2l2878:
 11424  00235E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11425  002362  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11426  002366  0012               	return	
 11427  002368                     __end_ofi2___awmod:
 11428                           	opt stack 0
 11429                           tosu	equ	0xFFF
 11430                           tosh	equ	0xFFE
 11431                           tosl	equ	0xFFD
 11432                           pclatu	equ	0xFFB
 11433                           pclath	equ	0xFFA
 11434                           tblptru	equ	0xFF8
 11435                           tblptrh	equ	0xFF7
 11436                           tblptrl	equ	0xFF6
 11437                           tablat	equ	0xFF5
 11438                           prodh	equ	0xFF4
 11439                           prodl	equ	0xFF3
 11440                           intcon	equ	0xFF2
 11441                           postinc0	equ	0xFEE
 11442                           fsr0h	equ	0xFEA
 11443                           fsr0l	equ	0xFE9
 11444                           wreg	equ	0xFE8
 11445                           indf1	equ	0xFE7
 11446                           postinc1	equ	0xFE6
 11447                           postdec1	equ	0xFE5
 11448                           fsr1h	equ	0xFE2
 11449                           fsr1l	equ	0xFE1
 11450                           indf2	equ	0xFDF
 11451                           postinc2	equ	0xFDE
 11452                           postdec2	equ	0xFDD
 11453                           fsr2h	equ	0xFDA
 11454                           fsr2l	equ	0xFD9
 11455                           status	equ	0xFD8
 11456                           
 11457 ;; *************** function _CanErrorResponse *****************
 11458 ;; Defined at:
 11459 ;;		line 193 in file "CanRX_Service.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;		None
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;		None
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      void 
 11466 ;; Registers used:
 11467 ;;		None
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11473 ;;      Params:         0       0       0       0
 11474 ;;      Locals:         0       0       0       0
 11475 ;;      Temps:          0       0       0       0
 11476 ;;      Totals:         0       0       0       0
 11477 ;;Total ram usage:        0 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; This function calls:
 11480 ;;		Nothing
 11481 ;; This function is called by:
 11482 ;;		_ISR
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           	psect	text65
 11487  00296E                     __ptext65:
 11488                           	opt stack 0
 11489  00296E                     _CanErrorResponse:
 11490                           	opt stack 20
 11491                           
 11492                           ;incstack = 0
 11493  00296E  0012               	return		;funcret
 11494  002970                     __end_of_CanErrorResponse:
 11495                           	opt stack 0
 11496                           tosu	equ	0xFFF
 11497                           tosh	equ	0xFFE
 11498                           tosl	equ	0xFFD
 11499                           pclatu	equ	0xFFB
 11500                           pclath	equ	0xFFA
 11501                           tblptru	equ	0xFF8
 11502                           tblptrh	equ	0xFF7
 11503                           tblptrl	equ	0xFF6
 11504                           tablat	equ	0xFF5
 11505                           prodh	equ	0xFF4
 11506                           prodl	equ	0xFF3
 11507                           intcon	equ	0xFF2
 11508                           postinc0	equ	0xFEE
 11509                           fsr0h	equ	0xFEA
 11510                           fsr0l	equ	0xFE9
 11511                           wreg	equ	0xFE8
 11512                           indf1	equ	0xFE7
 11513                           postinc1	equ	0xFE6
 11514                           postdec1	equ	0xFE5
 11515                           fsr1h	equ	0xFE2
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function _BusErrorResponse *****************
 11525 ;; Defined at:
 11526 ;;		line 198 in file "CanRX_Service.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;		None
 11531 ;; Return value:  Size  Location     Type
 11532 ;;                  1    wreg      void 
 11533 ;; Registers used:
 11534 ;;		None
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11540 ;;      Params:         0       0       0       0
 11541 ;;      Locals:         0       0       0       0
 11542 ;;      Temps:          0       0       0       0
 11543 ;;      Totals:         0       0       0       0
 11544 ;;Total ram usage:        0 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; This function calls:
 11547 ;;		Nothing
 11548 ;; This function is called by:
 11549 ;;		_ISR
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text66
 11554  002970                     __ptext66:
 11555                           	opt stack 0
 11556  002970                     _BusErrorResponse:
 11557                           	opt stack 20
 11558                           
 11559                           ;incstack = 0
 11560  002970  0012               	return		;funcret
 11561  002972                     __end_of_BusErrorResponse:
 11562                           	opt stack 0
 11563                           tosu	equ	0xFFF
 11564                           tosh	equ	0xFFE
 11565                           tosl	equ	0xFFD
 11566                           pclatu	equ	0xFFB
 11567                           pclath	equ	0xFFA
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           postinc0	equ	0xFEE
 11576                           fsr0h	equ	0xFEA
 11577                           fsr0l	equ	0xFE9
 11578                           wreg	equ	0xFE8
 11579                           indf1	equ	0xFE7
 11580                           postinc1	equ	0xFE6
 11581                           postdec1	equ	0xFE5
 11582                           fsr1h	equ	0xFE2
 11583                           fsr1l	equ	0xFE1
 11584                           indf2	equ	0xFDF
 11585                           postinc2	equ	0xFDE
 11586                           postdec2	equ	0xFDD
 11587                           fsr2h	equ	0xFDA
 11588                           fsr2l	equ	0xFD9
 11589                           status	equ	0xFD8
 11590                           tosu	equ	0xFFF
 11591                           tosh	equ	0xFFE
 11592                           tosl	equ	0xFFD
 11593                           pclatu	equ	0xFFB
 11594                           pclath	equ	0xFFA
 11595                           tblptru	equ	0xFF8
 11596                           tblptrh	equ	0xFF7
 11597                           tblptrl	equ	0xFF6
 11598                           tablat	equ	0xFF5
 11599                           prodh	equ	0xFF4
 11600                           prodl	equ	0xFF3
 11601                           intcon	equ	0xFF2
 11602                           postinc0	equ	0xFEE
 11603                           fsr0h	equ	0xFEA
 11604                           fsr0l	equ	0xFE9
 11605                           wreg	equ	0xFE8
 11606                           indf1	equ	0xFE7
 11607                           postinc1	equ	0xFE6
 11608                           postdec1	equ	0xFE5
 11609                           fsr1h	equ	0xFE2
 11610                           fsr1l	equ	0xFE1
 11611                           indf2	equ	0xFDF
 11612                           postinc2	equ	0xFDE
 11613                           postdec2	equ	0xFDD
 11614                           fsr2h	equ	0xFDA
 11615                           fsr2l	equ	0xFD9
 11616                           status	equ	0xFD8
 11617                           
 11618                           	psect	text67
 11619  000000                     __ptext67:
 11620                           	opt stack 0
 11621                           tosu	equ	0xFFF
 11622                           tosh	equ	0xFFE
 11623                           tosl	equ	0xFFD
 11624                           pclatu	equ	0xFFB
 11625                           pclath	equ	0xFFA
 11626                           tblptru	equ	0xFF8
 11627                           tblptrh	equ	0xFF7
 11628                           tblptrl	equ	0xFF6
 11629                           tablat	equ	0xFF5
 11630                           prodh	equ	0xFF4
 11631                           prodl	equ	0xFF3
 11632                           intcon	equ	0xFF2
 11633                           postinc0	equ	0xFEE
 11634                           fsr0h	equ	0xFEA
 11635                           fsr0l	equ	0xFE9
 11636                           wreg	equ	0xFE8
 11637                           indf1	equ	0xFE7
 11638                           postinc1	equ	0xFE6
 11639                           postdec1	equ	0xFE5
 11640                           fsr1h	equ	0xFE2
 11641                           fsr1l	equ	0xFE1
 11642                           indf2	equ	0xFDF
 11643                           postinc2	equ	0xFDE
 11644                           postdec2	equ	0xFDD
 11645                           fsr2h	equ	0xFDA
 11646                           fsr2l	equ	0xFD9
 11647                           status	equ	0xFD8
 11648                           
 11649                           	psect	rparam
 11650  0000                     tosu	equ	0xFFF
 11651                           tosh	equ	0xFFE
 11652                           tosl	equ	0xFFD
 11653                           pclatu	equ	0xFFB
 11654                           pclath	equ	0xFFA
 11655                           tblptru	equ	0xFF8
 11656                           tblptrh	equ	0xFF7
 11657                           tblptrl	equ	0xFF6
 11658                           tablat	equ	0xFF5
 11659                           prodh	equ	0xFF4
 11660                           prodl	equ	0xFF3
 11661                           intcon	equ	0xFF2
 11662                           postinc0	equ	0xFEE
 11663                           fsr0h	equ	0xFEA
 11664                           fsr0l	equ	0xFE9
 11665                           wreg	equ	0xFE8
 11666                           indf1	equ	0xFE7
 11667                           postinc1	equ	0xFE6
 11668                           postdec1	equ	0xFE5
 11669                           fsr1h	equ	0xFE2
 11670                           fsr1l	equ	0xFE1
 11671                           indf2	equ	0xFDF
 11672                           postinc2	equ	0xFDE
 11673                           postdec2	equ	0xFDD
 11674                           fsr2h	equ	0xFDA
 11675                           fsr2l	equ	0xFD9
 11676                           status	equ	0xFD8
 11677                           
 11678                           	psect	temp
 11679  00005C                     btemp:
 11680                           	opt stack 0
 11681  00005C                     	ds	1
 11682  0000                     int$flags	set	btemp
 11683                           tosu	equ	0xFFF
 11684                           tosh	equ	0xFFE
 11685                           tosl	equ	0xFFD
 11686                           pclatu	equ	0xFFB
 11687                           pclath	equ	0xFFA
 11688                           tblptru	equ	0xFF8
 11689                           tblptrh	equ	0xFF7
 11690                           tblptrl	equ	0xFF6
 11691                           tablat	equ	0xFF5
 11692                           prodh	equ	0xFF4
 11693                           prodl	equ	0xFF3
 11694                           intcon	equ	0xFF2
 11695                           postinc0	equ	0xFEE
 11696                           fsr0h	equ	0xFEA
 11697                           fsr0l	equ	0xFE9
 11698                           wreg	equ	0xFE8
 11699                           indf1	equ	0xFE7
 11700                           postinc1	equ	0xFE6
 11701                           postdec1	equ	0xFE5
 11702                           fsr1h	equ	0xFE2
 11703                           fsr1l	equ	0xFE1
 11704                           indf2	equ	0xFDF
 11705                           postinc2	equ	0xFDE
 11706                           postdec2	equ	0xFDD
 11707                           fsr2h	equ	0xFDA
 11708                           fsr2l	equ	0xFD9
 11709                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        7
    BSS         584
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      91
    BANK0           160    109     160
    BANK1           256      0     184
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S129$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    S88$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), RunSPI32ControlService(), RunPatternControlService(), 

    S88$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CanRCVResponse->_ProcessReceive
    _ProcessReceive->_PostCanRX_Service
    _PostCanRX_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_IdlePattern
    _UpdatePattern->_ListeningPattern
    _UpdatePattern->_SpeakingPattern
    _UpdatePattern->_ThinkingPattern
    _ThinkingPattern->___awdiv
    _SpeakingPattern->___awdiv
    _ListeningPattern->___awdiv
    _IdlePattern->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PausePattern->_ES_Timer_StopTimer
    _PostPatternControlService->_ES_PostToService
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCanRX_Service
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _InitCanRX_Service->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  111791
                                            108 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   88538
                                            103 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunCanRX_Service *
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   15420
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   15420
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     335
                                             90 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   60997
                                             90 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   12718
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      46
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   40404
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        8     6      2   27568
                                             32 BANK0      8     6      2
                        _IdlePattern
                   _ListeningPattern
                    _SpeakingPattern
                    _ThinkingPattern
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _ThinkingPattern                                     25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SpeakingPattern                                     25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _ListeningPattern                                    25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _IdlePattern                                         25    23      2    5022
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     908
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        21    19      2   12628
                                             69 BANK0     21    19      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    7675
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    7456
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4689
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     866
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _RunCanRX_Service                                     9     6      3    7843
                                             90 BANK0      9     6      3
                    _InitCanHardware
                           _InitPins
          _PostPatternControlService
                         _SetPattern
 ---------------------------------------------------------------------------------
 (3) _SetPattern                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    7631
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3453
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   22857
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitCanRX_Service *
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    7274
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    7590
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     3      1     120
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _InitCanRX_Service                                    4     4      0    7274
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    7229
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    6711
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2585
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    3600
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    1911
                                             35 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     964
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     871
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CanXmitResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CanRCVResponse                                      0     0      0     947
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      3     3      0     947
                                             32 COMRAM     3     3      0
                  _PostCanRX_Service
 ---------------------------------------------------------------------------------
 (13) _PostCanRX_Service                                   3     0      3     921
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     823
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) _CanErrorResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _BusErrorResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCanRX_Service *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCanRX_Service *
       _InitCanHardware
       _InitPins
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _SetPattern
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               ___awdiv
               ___awmod
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           _IdlePattern
             ___awdiv
             ___awmod
           _ListeningPattern
             ___awdiv
             ___awmod
           _SpeakingPattern
             ___awdiv
             ___awmod
           _ThinkingPattern
             ___awdiv
             ___awmod
           ___awmod
           ___lwdiv
             ___wmul (ARG)
               ___awmod (ARG)
           ___wmul
             ___awmod (ARG)
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               ___awdiv
               ___awmod
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ProcessReceive
       _PostCanRX_Service
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
   _CanXmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B8       6       71.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      5B       1       96.8%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       9        0.0%
DATA                 0      0     2EF      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec 09 13:06:23 2016

                   _ListeningPattern 0EE6                  HSV_to_RGB@HSV_Value 0073  
                   ??__HW_Timer_Init 0062                  ES_CheckUserEvents@i 0060  
                __HW_Timer_Init@Rate 0060                         ___awdiv@sign 0065  
                ___wmul@multiplicand 0068                      ??_UpdatePattern 0082  
          __size_of_BusErrorResponse 0002  RunPatternControlService@ReturnEvent 00BD  
                                l352 1BD0                                  l651 0640  
                                l643 208C                                  l564 1778  
                                l653 0652                                  l654 066C  
                                l655 0686                                  l656 0698  
                                l657 06B2                                  l781 20F6  
                                l778 2092                __end_of_ES_Initialize 1966  
                                _GIE 007F97                                  _ISR 0008  
          __end_of_SPI32_EOTResponse 26EE                         ___awmod@sign 0065  
            __end_of_Check4Keystroke 296C                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 0074                 _ListeningPattern$756 0077  
               _ListeningPattern$757 0079              ES_EnQueueFIFO@Event2Add 006E  
                  ?_ES_PostToService 0077                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016    Pattern_RGBPatterns@PatternConfigs 00D6  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 00D1  
                               l1210 2278                                 l3010 0E4E  
                               l3002 0DE2                                 l3012 0E8C  
                               l3030 1004                                 l3040 10AE  
                               l3122 086C                                 l3132 08D0  
                               l3116 0834                                 l3038 1070  
                               l3142 0934                                 l3126 0898  
                               l3118 083C                                 l3230 157E  
                               l3152 0998                                 l3136 08FC  
                               l3128 08A0                                 l3072 1EC4  
                               l3240 15F6                                 l3162 0A38  
                               l3146 0960                                 l3138 0904  
                               l3170 0A94                                 l3082 1F50  
                               l3242 1634                                 l3404 143E  
                               l3156 09C4                                 l3148 0968  
                               l3500 1BB4                                 l2710 1F88  
                               l3350 25CA                                 l3094 24E2  
                               l3182 1542                                 l3158 09CC  
                               l3086 1F56                                 l3422 28BE  
                               l3176 144C                                 l3168 0A6C  
                               l3192 2624                                 l3600 1D42  
                               l2730 1FF4                                 l2722 1FD2  
                               l2714 1F9C                                 l2706 1F78  
                               l3450 247E                                 l2810 1C7E  
                               l3426 28C6                                 l2716 1FA8  
                               l3188 2606                                 l3524 1688  
                               l2718 1FAE                                 l2726 1FE0  
                               l2750 1A44                                 l3518 26B0  
                               l3358 25F2                                 l2814 1C92  
                               l2806 1C70                                 l3294 249C  
                               l3550 1762                                 l3470 1B5C  
                               l2824 2228                                 l3536 16CA  
                               l3528 1694                                 l3480 1B7C  
                               l3464 1B4A                                 l3456 1B1E  
                               l3650 1896                                 l3394 13FA  
                               l2826 2234                                 l2914 06CC  
                               l3546 175A                                 l3474 1B6C  
                               l3570 1C9E                                 l3714 2732  
                               l3564 27B6                                 l2836 226A  
                               l2828 223A                                 l2916 0702  
                               l3492 1B9E                                 l3468 1B58  
                               l3572 1CA8                                 l3716 273A  
                               l3900 203E                                 l2766 22F4  
                               l3654 18DA                                 l3670 1962  
                               l3646 188C                                 l3398 1416  
                               l2782 1BFA                                 l3486 1B8E  
                               l3590 1D02                                 l3902 2050  
                               l3584 1CE4                                 l3680 180A  
                               l3904 2062                                 l3666 195C  
                               l3658 18DE                                 l2794 1C2E  
                               l2954 1292                                 l2946 1226  
                               l3578 1CC6                                 l3690 1874  
                               l3674 1788                                 l2796 1C3A  
                               l2788 1C10                                 l2956 12D0  
                               l3908 2074                                 l2798 1C40  
                               l2982 0C2C                                 l2974 0BC0  
                               l3598 1D20                                 l3686 185E  
                               l2896 04B0                                 l2984 0C6A  
                               l3898 202C                                 STR_1 036B  
                               STR_2 0386                                 STR_3 039E  
                               STR_4 03B5                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u2228 1936                                 u2229 1952  
                               u1545 0422                                 u2268 1834  
                               u2269 184C                                 _PIE1 000F9D  
                               u1674 1EEA                                 u1675 1EE2  
                               u1880 24C8                                 u1938 2596  
                               u1858 15DE                                 u1939 25AE  
                               u1885 24BE                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 007A  
                __end_of_IdlePattern 131C                      __end_of_HW_Init 2850  
                               _main 1FFE                          ?_ES_DeQueue 006C  
          Pattern_RGBPatterns@Length 00E0                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 005C  
                      main@ErrorType 00CC                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                     ?_SpeakingPattern 0068  
  __end_of_InitPatternControlService 2482                          ?_SPI32_Init 0001  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
               __end_of_GetNextFrame 28A2                     _RunCanRX_Service 1C9C  
            __end_of_InitCanHardware 2112                                ??_ISR 0024  
                 ES_Run@HighestPrior 00CB             ThinkingPattern@stepCount 0069  
           SpeakingPattern@stepCount 0069                                ?_main 0001  
              __end_of_ES_Timer_Init 2930                      __end_of___awdiv 1C9C  
                    __end_of___awmod 1FFE                      __end_of___lbmod 25FE  
                    ___awdiv@divisor 0062                                _T1CON 000FCD  
                         _DistList00 0367                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                    __end_of___lwdiv 2282                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l175 1ADA  
                    ___awdiv@counter 0064                                _IRXIE 007D1F  
                              _IRXIF 007D27          ??i2_PostSPI32ControlService 0021  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                              _TRISC 000F94                                _SSPIE 007CEB  
                              _SSPIF 007CF3                           _Brightness 00F9  
                      __CFG_PWRT$OFF 000000                 _SPI32_TransmitFrames 2758  
                        ?_HSV_to_RGB 0073                                _Ready 00DA  
    __end_of_InitSPI32ControlService 26B4                           _FrameIndex 00E4  
                              _putch 296C                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                   __end_ofi2___wmul 282E                                status 000FD8  
            SPI32_SendFrame@newFrame 0060                     ?_SPI32_SendFrame 0060  
                 __size_ofi2___awmod 0070           PostCanRX_Service@ThisEvent 001E  
                    __initialization 2192               ES_GetMSBitSet@LoopCntr 0069  
          RunCanRX_Service@ThisEvent 00BA           __end_of_ES_CheckUserEvents 25BA  
                       __end_of_main 208E                    ES_Timer_Init@Rate 0062  
                   __end_of_InitPins 28BC                  __end_of_EventQueues 0365  
                             ??_main 00CC                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002                  SpeakingPattern@head 007F  
         __size_of_SPI32_EOTResponse 003A                  __size_of_ES_DeQueue 0128  
                    _Nybble2MSBitNum 0341                ?_SPI32_TransmitFrames 0080  
        RunCanRX_Service@ReturnEvent 00BD     __end_of__HW_Process_Pending_Ints 28D2  
           ProcessReceive@Event2Post 0021                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                          _IdlePattern 1108  
                  ?_CanErrorResponse 0001                 __end_of_DotStar_Init 1EB8  
               __end_of_DotStar_Show 156A                  __size_of_SPI32_Init 0006  
                             _ADCON1 000FC1                            ??_HW_Init 0060  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                         _PatternOff 25FE                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                     ___awdiv@dividend 0060  
                 ??_CanErrorResponse 0001                               _CIOCON 000F73  
                     IdlePattern@hue 0075                           _MyPriority 00E6  
                     IdlePattern@sat 007C                       IdlePattern@val 007D  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0062  
                         _SetPattern 293C                               i2l3066 1E06  
                             i2l3218 23CE                               i2l3620 23F6  
                             i2l3622 23FA                               i2l3702 26D8  
                             i2l3616 23EE                               i2l3618 23F2  
                             i2l3626 2400                               i2l3810 1AB2  
                             i2l3628 241A                               i2l3804 1AA8  
                             i2l2870 2346                               i2l2862 2326  
                             i2l2854 230C                               i2l3638 253C  
                             i2l3822 1AC6                               i2l2864 232E  
                             i2l3816 1ABC                               i2l2866 2332  
                             i2l2874 2350                               i2l2858 2318  
                             i2l3828 1AD0                               i2l2878 235E  
                             _INTCON 000FF2                               _RXB0D0 000F66  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 1786                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                               _SSPADD 000FC8  
                             _SSPBUF 000FC9            i2_PostSPI32ControlService 28E8  
                   ??_CanRCVResponse 0024                     ??_ES_EnQueueFIFO 0071  
                     _Timer2PostFunc 0321                               _Length 00E5  
      SPI32_TransmitFrames@numFrames 0082                        ?_PausePattern 0001  
                             _Queue0 00EA                               _Queue1 0043  
                             _Queue2 004F                       _SysTickCounter 003C  
                __size_of_HSV_to_RGB 0458             ??_RunSPI32ControlService 00BD  
                             ___wmul 26EE      InitSPI32ControlService@Priority 0080  
                          ??___awdiv 0064                            ??___awmod 0064  
                          ??___lbmod 0061                     ?_InitCanHardware 0001  
                          ??___lwdiv 0070          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 21CC                               clear_1 21DE  
                             clear_2 21EA                               clear_3 21F6  
                   ___awdiv@quotient 0066                     _BusErrorResponse 2970  
                    ___awmod@divisor 0062                        ??_ShowPattern 00BA  
          ES_Timer_InitTimer@NewTime 0060                      ___awmod@counter 0064  
                             _printf 2724                          ISR@LastTime 0038  
                       __pdataCOMRAM 005B               ES_InitQueue@pThisQueue 0063  
                  __end_ofi2___awmod 2368                         __mediumconst 0000  
                        ISR@NextTime 003A                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001             __end_of_ListeningPattern 1108  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 0116  
               ES_DeQueue@pThisQueue 0074               UpdatePattern@patternID 0082  
            ES_GetMSBitSet@Val2Check 0060            InitCanRX_Service@Priority 0080  
                    ___lbmod@divisor 0060                           __accesstop 0060  
            __end_of__initialization 21FC               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0062      RunSPI32ControlService@ThisEvent 00BA  
                    __CFG_PBADEN$OFF 000000    __size_of_RunPatternControlService 00C8  
          ?_RunPatternControlService 00BA                __size_of_GetNextFrame 001A  
                      ___rparam_used 000001          ??_InitPatternControlService 007D  
                        PatternOff@i 0062               ThinkingPattern@pattern 0001  
                     ??_PausePattern 0065               SpeakingPattern@pattern 0001  
                        _EventQueues 035C          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                         __pidataBANK0 2956  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 0060  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 2856                        __end_of_putch 296E  
                    _TMR_ActiveFlags 00DC               ??_SPI32_TransmitFrames 0083  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 0067  
                      ?_ResetPattern 0001              ListeningPattern@pattern 0001  
            __size_of_ProcessReceive 005A                  __end_of_ShowPattern 2808  
                _ThinkingPattern$744 0077                  _ThinkingPattern$745 0079  
               IdlePattern@stepCount 0069                        ??_StopPattern 00BA  
                     _TMR_TimerArray 0100                         _GetNextFrame 2888  
                        ?_PatternOff 0060             __end_of_RunCanRX_Service 1D56  
           ES_EnQueueFIFO@pThisQueue 0075                              ??_putch 0060  
           __HW_Process_Pending_Ints 28BC                           __pbssBANK0 00CD  
                         __pbssBANK1 0100                          ?_SetPattern 0001  
           __size_of_ThinkingPattern 0222                 SpeakingPattern@pixel 0068  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 0070                ListeningPattern@pixel 0068  
                ListeningPattern@hue 007D                  ListeningPattern@sat 007B  
                ListeningPattern@val 007C                         ??_SPI32_Init 0060  
                  ListeningPattern@x 007E             ?_PostSPI32ControlService 007D  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 0063  
                            ?___wmul 0066      __size_of_RunSPI32ControlService 0106  
                            _CCP1CON 000FBD                              _ECANCON 000F77  
                    IdlePattern@head 007F                              ?_printf 0060  
              __size_of_DotStar_Init 00AE                       ??_ResetPattern 0060  
              __end_of_UpdatePattern 0AA2                __size_of_DotStar_Show 0126  
                         ??i2___wmul 000B            _InitPatternControlService 242C  
             DotStar_Init@brightness 0060                   __end_of_ES_DeQueue 1444  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 0064  
                       ??_HSV_to_RGB 0075                              _HW_Init 282E  
                            _SSPCON1 000FC6                   __end_of_SPI32_Init 2962  
                            _SSPSTAT 000FC7     SPI32_ControlService@CurrentState 00E1  
                         ??_InitPins 0060                      __size_of_ES_Run 00F4  
                __end_of_StopPattern 27E2                          _PixelFrames 01B8  
                      ?_SetupPattern 0060               __size_of_ES_Initialize 00EC  
                   SpeakingPattern@x 007E                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
 i2PostSPI32ControlService@ThisEvent 001E     PostSPI32ControlService@ThisEvent 007D  
   InitSPI32ControlService@ThisEvent 007D                              _TestHue 003E  
          i2ES_EnQueueFIFO@Event2Add 000F                         _DotStar_Init 1E0A  
                       _DotStar_Show 1444                   __end_of_HSV_to_RGB 081E  
                            ___awdiv 1BDE           ?_PostPatternControlService 007D  
                            ___awmod 1F5C                              ___lbmod 25BA  
                    __size_of___wmul 0036                              ___lwdiv 220A  
 __size_ofi2_PostSPI32ControlService 0016                         __psmallconst 0300  
                __size_of_PatternOff 0040             __size_of_SpeakingPattern 0222  
              ES_Timer_InitTimer@Num 0064           i2ES_PostToService@TheEvent 0018  
                            __pcinit 2192                              __ramtop 0300  
                __size_of_SetPattern 000A                          _ShowPattern 27E2  
                            __ptext0 1FFE                              __ptext1 2724  
                            __ptext2 296C                              __ptext3 1786  
                            __ptext4 28BC                              __ptext5 156A  
                            __ptext6 1EB8                              __ptext7 1C9C  
                            __ptext8 1B16                              __ptext9 1680  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
                       __size_of_ISR 1B0E                          HSV_to_RGB@b 0097  
                        HSV_to_RGB@g 0095                          HSV_to_RGB@h 008D  
                        HSV_to_RGB@p 00A1                          HSV_to_RGB@q 0099  
                        HSV_to_RGB@r 0093                          HSV_to_RGB@s 009F  
                        HSV_to_RGB@t 009B                          HSV_to_RGB@v 00A3  
                       _FramePointer 00D8              __size_of__HW_Timer_Init 001C  
                   ___awmod@dividend 0060                   _ES_CheckUserEvents 2570  
                       ?_IdlePattern 0068                      ES_Run@ThisEvent 00F6  
               __end_of_PausePattern 2956               _RunSPI32ControlService 1680  
                     __pintcode_body 1A48                 end_of_initialization 21FC  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 2972  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 1A48                  i2___wmul@multiplier 0007  
    __end_of_PostSPI32ControlService 286C         ES_PostToService@WhichService 007C  
                     ??_SetupPattern 0063               __size_of_ES_Timer_Init 000E  
                  ??_ThinkingPattern 006A            __size_of_CanErrorResponse 0002  
                            printf@c 0064                              printf@f 0060  
            _InitSPI32ControlService 267A                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
         InitCanRX_Service@ThisEvent 007D    __end_of_PostPatternControlService 28E8  
               ??_ES_CheckUserEvents 0060             __size_of_SPI32_SendFrame 0052  
          i2SPI32_SendFrame@newFrame 0001                        _ES_Initialize 187A  
                     _ProcessReceive 23D2     __end_of_RunPatternControlService 1BDE  
                   ___lbmod@dividend 0061    RunPatternControlService@ThisEvent 00BA  
 PostPatternControlService@ThisEvent 007D   InitPatternControlService@ThisEvent 007D  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0367  
                        _StopPattern 27BA                   UpdatePattern@i_730 0085  
                 UpdatePattern@i_731 0086                   UpdatePattern@i_732 0087  
                 UpdatePattern@i_729 0084                 __end_of_ES_InitQueue 267A  
                  ?_ListeningPattern 0068                            i2___awmod 22F8  
                     ES_Initialize@i 0083                   ??_ListeningPattern 006A  
                        ___lbmod@rem 0063             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 187A                 __end_of_ResetPattern 294E  
                 __end_of_DistList00 036B              ThinkingPattern@pixelHSV 0075  
            SpeakingPattern@pixelHSV 0075                     _ES_PostToService 2282  
         __end_of_ES_Timer_InitTimer 2192                 __end_of_ServDescList 035C  
                     __end_of___wmul 2724                        __pidataCOMRAM 2972  
                  i2_SPI32_SendFrame 2522                    ??_CanXmitResponse 0001  
                          _FrameByte 00FA               __end_of_ProcessReceive 242C  
              SetupPattern@numPixels 0062                       ?_ES_Initialize 0081  
         ??__HW_Process_Pending_Ints 0084                   ?i2_SPI32_SendFrame 0001  
                      _ES_Timer_Init 2922                     i2___wmul@product 000B  
                     __end_of_printf 2758             __size_of_InitCanHardware 0084  
         __end_of_ES_Timer_Tick_Resp 1680                  start_initialization 2192  
                  ??_SpeakingPattern 006A                          __end_of_ISR 1B16  
                  __size_ofi2___wmul 0026                         _CurrentFrame 00CD  
                       _CurrentState 00E3                         ??_PatternOff 0062  
                ??i2_SPI32_SendFrame 0005                           ?i2___awmod 0001  
                  ?_RunCanRX_Service 00BA                         ??_SetPattern 0060  
                 SpeakingPattern@hue 007D                          _CANSTATbits 000F6E  
                 SpeakingPattern@sat 007B                   SpeakingPattern@val 007C  
 __size_of_InitPatternControlService 0056                             ??_ES_Run 00C7  
                 ??_RunCanRX_Service 00BD                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 00E9                            _NumFrames 00E7  
         __end_ofi2_ES_PostToService 23D2                    __size_of_InitPins 001A  
          ??_InitSPI32ControlService 007D             ListeningPattern@pixelHSV 0075  
         __end_of_ES_Timer_StopTimer 2522                            _NumPixels 0042  
                SetPattern@PatternID 0060              __size_of_ES_GetMSBitSet 00A4  
                           ??___wmul 006A            __end_ofi2_SPI32_SendFrame 2570  
                        __pdataBANK0 00FA                   __end_of_PatternOff 263E  
            __size_of_CanRCVResponse 000C              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 0062              CanRX_Service@MyPriority 00DE  
          SPI32_EOTResponse@EOTevent 0021                __size_of_PausePattern 0008  
                     ?_ES_Timer_Init 0062                   __end_of_SetPattern 2946  
                    ?_ProcessReceive 0001                       __HW_Timer_Init 286C  
                    _IdlePattern$780 0078                      _IdlePattern$781 007A  
                        __pbssBIGRAM 01B8                 __end_of_SetupPattern 2922  
                        __pbssCOMRAM 0034     __size_of_PostSPI32ControlService 001C  
      __size_of_SPI32_TransmitFrames 0032                    ??_SPI32_SendFrame 0064  
                      __pcstackBANK0 0060                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0060  
                        _BRGCON3bits 000F72    RunPatternControlService@testEvent 00C0  
                           ?_HW_Init 0001                 __size_of_IdlePattern 0214  
                IdlePattern@pixelHSV 0076                    _PostCanRX_Service 28FE  
           _RunPatternControlService 1B16                   ?_PostCanRX_Service 001E  
   SPI32_TransmitFrames@framePointer 0080                     i2_ES_EnQueueFIFO 1D56  
                   HSV_to_RGB@region 008F                        __PRIMASK_temp 0040  
               ListeningPattern@head 007F                     _CanErrorResponse 296E  
                   ___lwdiv@dividend 006C                  ??_PostCanRX_Service 0021  
                  ??_Check4Keystroke 0060                         _PausePattern 294E  
                          __pintcode 0008                             ?___awdiv 0060  
                           ?___awmod 0060                             ?___lbmod 0060  
         DotStar_Show@patternPointer 00A5          ??_PostPatternControlService 0080  
                           ?___lwdiv 006C                      ??_ES_Initialize 0083  
           ES_PostToService@TheEvent 0077               __end_of__HW_Timer_Init 2888  
                       ?_ShowPattern 0001                          __smallconst 0300  
              __size_of_ES_InitQueue 003C              ?_RunSPI32ControlService 00BA  
          __end_of_PostCanRX_Service 2914                     ___lwdiv@quotient 0070  
                   IdlePattern@pixel 0068                          ??i2___awmod 0005  
                    _ThinkingPattern 0AA2                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 0081  
                  ??_InitCanHardware 0060            ES_GetMSBitSet@Nybble2Test 0068  
                 _PatternStepCounter 00E8                    ?_BusErrorResponse 0001  
                     ___wmul@product 006A                   ??_BusErrorResponse 0001  
             __size_of_UpdatePattern 0284                DotStar_Init@numPixels 0063  
                           i2u218_40 2566                             i2u218_45 255C  
                           _RXB0EIDH 000F63                             _RXB0EIDL 000F64  
                           _RXB0SIDH 000F61                             _RXB0SIDL 000F62  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01           __size_ofi2_SPI32_SendFrame 004E  
                           _RXM0EIDH 000F1A                             _RXM0EIDL 000F1B  
                       _ES_InitQueue 263E                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 0064  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 0060  
                  ___wmul@multiplier 0066       __end_of_RunSPI32ControlService 1786  
                           i2___wmul 2808                         _ResetPattern 2946  
       RunCanRX_Service@PatternEvent 00C0                   ES_DeQueue@SaveCrit 0072  
               ES_EnQueueFIFO@pBlock 006C             __end_of_ES_PostToService 22F8  
                       ?_StopPattern 0001            _PostPatternControlService 28D2  
                          copy_data0 21A6                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00FB  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 28A2                         _PixelPattern 0120  
                    _CanXmitResponse 2962                         IdlePattern@x 007E  
                           __Hrparam 0000                       _ES_GetMSBitSet 1EB8  
                           __Lrparam 0000            ListeningPattern@stepCount 0069  
          __size_of_ListeningPattern 0222    RunSPI32ControlService@ReturnEvent 00C4  
                  _InitCanRX_Service 278A                      _SpeakingPattern 0CC4  
                   __size_of___awdiv 00BE                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 2930                       _ES_EnQueueFIFO 1966  
                   __size_of___lwdiv 0078                   ?_InitCanRX_Service 0001  
               ThinkingPattern@pixel 0068                   IdlePattern@pattern 0001  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 2850  
            __end_of_ThinkingPattern 0CC4                      HSV_to_RGB@fpart 0091  
                      _UpdatePattern 081E                   _ES_Timer_InitTimer 2112  
                ??_InitCanRX_Service 007D           __size_of_PostCanRX_Service 0016  
                    ___lwdiv@divisor 006E                      ___lwdiv@counter 0072  
             __end_of_BitNum2SetMask 0321                             __ptext10 2482  
                           __ptext11 2888                             __ptext20 1108  
                           __ptext12 27BA                             __ptext21 1BDE  
                           __ptext13 2946                             __ptext30 24D4  
                           __ptext22 2112                             __ptext14 25FE  
                           __ptext31 293C                             __ptext23 1444  
                           __ptext15 27E2                             __ptext40 242C  
                           __ptext32 28A2                             __ptext24 2758  
                           __ptext16 081E                             __ptext41 267A  
                           __ptext33 208E                             __ptext25 28D2  
                           __ptext17 0AA2                             __ptext50 2922  
                           __ptext42 295C                             __ptext34 131C  
                           __ptext26 2850                             __ptext18 0CC4  
                           __ptext51 286C                             __ptext43 282E  
                           __ptext35 25BA                             __ptext27 03C6  
                           __ptext19 0EE6                             __ptext60 28FE  
                           __ptext52 263E                             __ptext44 2914  
                           __ptext36 2570                             __ptext28 220A  
                           __ptext61 2368                             __ptext45 1E0A  
                           __ptext37 2968                             __ptext29 294E  
                           __ptext62 1D56                             __ptext54 26B4  
                           __ptext46 2282                             __ptext38 187A  
                           __ptext63 2808                             __ptext55 2522  
                           __ptext47 1966                             __ptext39 278A  
                           __ptext64 22F8                             __ptext56 28E8  
                           __ptext48 26EE                             __ptext65 296E  
                           __ptext57 2962                             __ptext49 1F5C  
                           __ptext66 2970                             __ptext58 2930  
                           __ptext67 0000                             __ptext59 23D2  
                      ?_GetNextFrame 0060    ES_Timer_Tick_Resp@NeedsProcessing 00D4  
                     UpdatePattern@i 0083                  ?_ES_Timer_InitTimer 0060  
                    _HSV_to_RGB$2058 009D                        __size_of_main 0090  
                 _ES_Timer_Tick_Resp 156A               __end_of_ES_GetMSBitSet 1F5C  
                       _SetupPattern 2914            __end_of_InitCanRX_Service 27BA  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 293C  
             __end_of_ES_EnQueueFIFO 1A48                     ??_ProcessReceive 0021  
                           int$flags 005C            __size_of_RunCanRX_Service 00BA  
                    _SPI32_SendFrame 2482                  SetupPattern@configs 0060  
               ??_ES_Timer_InitTimer 0062       SPI32_ControlService@MyPriority 00E2  
                      _MaxBrightness 005B                    ES_DeQueue@NumLeft 0073  
                 i2_ES_PostToService 2368             __end_ofi2_ES_EnQueueFIFO 1E0A  
                 _ES_Timer_StopTimer 24D4                       ?_UpdatePattern 0080  
         ??_RunPatternControlService 00BD                        DotStar_Show@i 00B9  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005                 __size_of_ShowPattern 0026  
  __end_ofi2_PostSPI32ControlService 28FE             __end_of_CanErrorResponse 2970  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 0064  
               ??_ES_Timer_Tick_Resp 0080                  ?_ES_Timer_StopTimer 0001  
                ThinkingPattern@head 007F              __end_of_CanXmitResponse 2968  
                    _Check4Keystroke 2968                             intlevel2 0000  
                         _ES_DeQueue 131C    __size_of__HW_Process_Pending_Ints 0016  
                      _TransmitFrame 0034            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 0060  
       __end_of_SPI32_TransmitFrames 278A              __end_of_SpeakingPattern 0EE6  
                _SpeakingPattern$768 0077                  _SpeakingPattern$769 0079  
               ??i2_ES_PostToService 001B                           _SPI32_Init 295C  
                      ?_DotStar_Init 0060                        ?_DotStar_Show 00A5  
               ??_ES_Timer_StopTimer 0060  ES_Timer_Tick_Resp@NextTimer2Process 00DF  
                           printf@ap 0062                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 006C            ??_PostSPI32ControlService 0080  
                   ES_DeQueue@pBlock 006C                   ThinkingPattern@hue 007D  
                 ThinkingPattern@sat 007B                   ThinkingPattern@val 007C  
                    _InitCanHardware 208E    SPI32_TransmitFrames@transmitEvent 0083  
                   ?_ThinkingPattern 0068    InitPatternControlService@Priority 0080  
                      ??_IdlePattern 006A                    _SPI32_EOTResponse 26B4  
                         _HSV_to_RGB 03C6               ES_DeQueue@pReturnEvent 006E  
              ES_InitQueue@BlockSize 0062                   ?_SPI32_EOTResponse 0001  
               __size_of_StopPattern 0028             ?_InitSPI32ControlService 0001  
                   ThinkingPattern@x 007E                  ??_SPI32_EOTResponse 0021  
            __end_of_SPI32_SendFrame 24D4           ?_InitPatternControlService 0001  
 __size_of_PostPatternControlService 0016                       ??_DotStar_Init 0061  
         __size_of_InitCanRX_Service 0030                       ??_DotStar_Show 00A7  
