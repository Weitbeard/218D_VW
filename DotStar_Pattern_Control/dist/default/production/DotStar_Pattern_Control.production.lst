

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Jan 23 02:04:35 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94  0000                     
    95                           	psect	idataCOMRAM
    96  003C2C                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for ProcessReceive@LastButton
   100  003C2C  FF                 	db	255
   101                           
   102                           ;initializer for _MaxBrightness
   103  003C2D  1F                 	db	31
   104                           
   105                           	psect	idataBANK0
   106  003C18                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for CenterBreathe@rising
   110  003C18  01                 	db	1
   111                           
   112                           ;initializer for FullPulseHold@rising
   113  003C19  01                 	db	1
   114                           
   115                           ;initializer for _FrameByte
   116  003C1A  03                 	db	3
   117                           
   118                           ;initializer for _PatternConfigs
   119  003C1B  FF                 	db	255
   120  003C1C  1F                 	db	31
   121  003C1D  25                 	db	37
   122  003C1E  01                 	db	1
   123                           
   124                           	psect	smallconst
   125  000300                     __psmallconst:
   126                           	opt stack 0
   127  000300  00                 	db	0
   128  000301                     __end_of_ES_EventList:
   129                           	opt stack 0
   130  000301                     _BitNum2SetMask:
   131                           	opt stack 0
   132  000301  0001               	dw	1
   133  000303  0002               	dw	2
   134  000305  0004               	dw	4
   135  000307  0008               	dw	8
   136  000309  0010               	dw	16
   137  00030B  0020               	dw	32
   138  00030D  0040               	dw	64
   139  00030F  0080               	dw	128
   140  000311  0100               	dw	256
   141  000313  0200               	dw	512
   142  000315  0400               	dw	1024
   143  000317  0800               	dw	2048
   144  000319  1000               	dw	4096
   145  00031B  2000               	dw	8192
   146  00031D  4000               	dw	16384
   147  00031F  8000               	dw	32768
   148  000321                     __end_of_BitNum2SetMask:
   149                           	opt stack 0
   150  000321                     _Timer2PostFunc:
   151                           	opt stack 0
   152  000321  EC                 	db	low _PostPatternControlService
   153  000322  3A                 	db	high _PostPatternControlService
   154  000323  08                 	db	low _PostSPI32ControlService
   155  000324  3B                 	db	high _PostSPI32ControlService
   156  000325  00                 	db	0
   157  000326  00                 	db	0
   158  000327  00                 	db	0
   159  000328  00                 	db	0
   160  000329  00                 	db	0
   161  00032A  00                 	db	0
   162  00032B  00                 	db	0
   163  00032C  00                 	db	0
   164  00032D  00                 	db	0
   165  00032E  00                 	db	0
   166  00032F  00                 	db	0
   167  000330  00                 	db	0
   168  000331  00                 	db	0
   169  000332  00                 	db	0
   170  000333  00                 	db	0
   171  000334  00                 	db	0
   172  000335  00                 	db	0
   173  000336  00                 	db	0
   174  000337  00                 	db	0
   175  000338  00                 	db	0
   176  000339  00                 	db	0
   177  00033A  00                 	db	0
   178  00033B  00                 	db	0
   179  00033C  00                 	db	0
   180  00033D  00                 	db	0
   181  00033E  00                 	db	0
   182  00033F  00                 	db	0
   183  000340  00                 	db	0
   184  000341                     __end_of_Timer2PostFunc:
   185                           	opt stack 0
   186  000341                     _Nybble2MSBitNum:
   187                           	opt stack 0
   188  000341  00                 	db	0
   189  000342  01                 	db	1
   190  000343  01                 	db	1
   191  000344  02                 	db	2
   192  000345  02                 	db	2
   193  000346  02                 	db	2
   194  000347  02                 	db	2
   195  000348  03                 	db	3
   196  000349  03                 	db	3
   197  00034A  03                 	db	3
   198  00034B  03                 	db	3
   199  00034C  03                 	db	3
   200  00034D  03                 	db	3
   201  00034E  03                 	db	3
   202  00034F  03                 	db	3
   203  000350                     __end_of_Nybble2MSBitNum:
   204                           	opt stack 0
   205  000350                     _ServDescList:
   206                           	opt stack 0
   207  000350  90                 	db	low _InitPatternControlService
   208  000351  36                 	db	high _InitPatternControlService
   209  000352  0C                 	db	low _RunPatternControlService
   210  000353  2E                 	db	high _RunPatternControlService
   211  000354  F4                 	db	low _InitSPI32ControlService
   212  000355  38                 	db	high _InitSPI32ControlService
   213  000356  7C                 	db	low _RunSPI32ControlService
   214  000357  28                 	db	high _RunSPI32ControlService
   215  000358                     __end_of_ServDescList:
   216                           	opt stack 0
   217  000358                     _EventQueues:
   218                           	opt stack 0
   219  000358  48                 	db	low _Queue0
   220  000359  00                 	db	high _Queue0
   221  00035A  04                 	db	4
   222  00035B  B8                 	db	low _Queue1
   223  00035C  01                 	db	high _Queue1
   224  00035D  04                 	db	4
   225  00035E                     __end_of_EventQueues:
   226                           	opt stack 0
   227  0000                     _RXF0EIDH	set	3842
   228  0000                     _RXF0EIDL	set	3843
   229  0000                     _RXF0SIDH	set	3840
   230  0000                     _RXF0SIDL	set	3841
   231  0000                     _RXM0EIDH	set	3866
   232  0000                     _RXM0EIDL	set	3867
   233  0000                     _RXM0SIDH	set	3864
   234  0000                     _RXM0SIDL	set	3865
   235  0000                     _TXB0CONbits	set	3904
   236  0000                     _ADCON1	set	4033
   237  0000                     _BRGCON1bits	set	3952
   238  0000                     _BRGCON2bits	set	3953
   239  0000                     _BRGCON3bits	set	3954
   240  0000                     _CANCON	set	3951
   241  0000                     _CANSTATbits	set	3950
   242  0000                     _CCP1CON	set	4029
   243  0000                     _CCPR1H	set	4031
   244  0000                     _CCPR1L	set	4030
   245  0000                     _CIOCON	set	3955
   246  0000                     _ECANCON	set	3959
   247  0000                     _INTCON	set	4082
   248  0000                     _LATA	set	3977
   249  0000                     _LATB	set	3978
   250  0000                     _LATC	set	3979
   251  0000                     _PIE1	set	3997
   252  0000                     _PORTA	set	3968
   253  0000                     _PORTB	set	3969
   254  0000                     _PORTC	set	3970
   255  0000                     _RXB0CONbits	set	3936
   256  0000                     _RXB0D0	set	3942
   257  0000                     _RXB0D1	set	3943
   258  0000                     _RXB0D2	set	3944
   259  0000                     _RXB0EIDH	set	3939
   260  0000                     _RXB0EIDL	set	3940
   261  0000                     _RXB0SIDH	set	3937
   262  0000                     _RXB0SIDL	set	3938
   263  0000                     _SSPADD	set	4040
   264  0000                     _SSPBUF	set	4041
   265  0000                     _SSPCON1	set	4038
   266  0000                     _SSPSTAT	set	4039
   267  0000                     _T1CON	set	4045
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISBbits	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _CCP1IF	set	31986
   272  0000                     _ERRIE	set	32029
   273  0000                     _ERRIF	set	32037
   274  0000                     _GIE	set	32663
   275  0000                     _IRXIE	set	32031
   276  0000                     _IRXIF	set	32039
   277  0000                     _PEIE	set	32662
   278  0000                     _RXB0IE	set	32024
   279  0000                     _RXB0IF	set	32032
   280  0000                     _SSPIE	set	31979
   281  0000                     _SSPIF	set	31987
   282  0000                     _TXB0IE	set	32026
   283  0000                     _TXB0IF	set	32034
   284  00035E                     STR_1:
   285  00035E  46                 	db	70	;'F'
   286  00035F  61                 	db	97	;'a'
   287  000360  69                 	db	105	;'i'
   288  000361  6C                 	db	108	;'l'
   289  000362  65                 	db	101	;'e'
   290  000363  64                 	db	100	;'d'
   291  000364  20                 	db	32
   292  000365  6F                 	db	111	;'o'
   293  000366  6E                 	db	110	;'n'
   294  000367  20                 	db	32
   295  000368  61                 	db	97	;'a'
   296  000369  74                 	db	116	;'t'
   297  00036A  74                 	db	116	;'t'
   298  00036B  65                 	db	101	;'e'
   299  00036C  6D                 	db	109	;'m'
   300  00036D  70                 	db	112	;'p'
   301  00036E  74                 	db	116	;'t'
   302  00036F  20                 	db	32
   303  000370  74                 	db	116	;'t'
   304  000371  6F                 	db	111	;'o'
   305  000372  20                 	db	32
   306  000373  50                 	db	80	;'P'
   307  000374  6F                 	db	111	;'o'
   308  000375  73                 	db	115	;'s'
   309  000376  74                 	db	116	;'t'
   310  000377  0A                 	db	10
   311  000378  00                 	db	0
   312  000379                     STR_2:
   313  000379  46                 	db	70	;'F'
   314  00037A  61                 	db	97	;'a'
   315  00037B  69                 	db	105	;'i'
   316  00037C  6C                 	db	108	;'l'
   317  00037D  65                 	db	101	;'e'
   318  00037E  64                 	db	100	;'d'
   319  00037F  20                 	db	32
   320  000380  6F                 	db	111	;'o'
   321  000381  6E                 	db	110	;'n'
   322  000382  20                 	db	32
   323  000383  4E                 	db	78	;'N'
   324  000384  55                 	db	85	;'U'
   325  000385  4C                 	db	76	;'L'
   326  000386  4C                 	db	76	;'L'
   327  000387  20                 	db	32
   328  000388  70                 	db	112	;'p'
   329  000389  6F                 	db	111	;'o'
   330  00038A  69                 	db	105	;'i'
   331  00038B  6E                 	db	110	;'n'
   332  00038C  74                 	db	116	;'t'
   333  00038D  65                 	db	101	;'e'
   334  00038E  72                 	db	114	;'r'
   335  00038F  0A                 	db	10
   336  000390  00                 	db	0
   337  000391                     STR_3:
   338  000391  46                 	db	70	;'F'
   339  000392  61                 	db	97	;'a'
   340  000393  69                 	db	105	;'i'
   341  000394  6C                 	db	108	;'l'
   342  000395  65                 	db	101	;'e'
   343  000396  64                 	db	100	;'d'
   344  000397  20                 	db	32
   345  000398  49                 	db	73	;'I'
   346  000399  6E                 	db	110	;'n'
   347  00039A  69                 	db	105	;'i'
   348  00039B  74                 	db	116	;'t'
   349  00039C  69                 	db	105	;'i'
   350  00039D  61                 	db	97	;'a'
   351  00039E  6C                 	db	108	;'l'
   352  00039F  69                 	db	105	;'i'
   353  0003A0  7A                 	db	122	;'z'
   354  0003A1  61                 	db	97	;'a'
   355  0003A2  74                 	db	116	;'t'
   356  0003A3  69                 	db	105	;'i'
   357  0003A4  6F                 	db	111	;'o'
   358  0003A5  6E                 	db	110	;'n'
   359  0003A6  0A                 	db	10
   360  0003A7  00                 	db	0
   361  0003A8                     STR_4:
   362  0003A8  4F                 	db	79	;'O'
   363  0003A9  74                 	db	116	;'t'
   364  0003AA  68                 	db	104	;'h'
   365  0003AB  65                 	db	101	;'e'
   366  0003AC  72                 	db	114	;'r'
   367  0003AD  20                 	db	32
   368  0003AE  46                 	db	70	;'F'
   369  0003AF  61                 	db	97	;'a'
   370  0003B0  69                 	db	105	;'i'
   371  0003B1  6C                 	db	108	;'l'
   372  0003B2  75                 	db	117	;'u'
   373  0003B3  72                 	db	114	;'r'
   374  0003B4  65                 	db	101	;'e'
   375  0003B5  0A                 	db	10
   376  0003B6  00                 	db	0
   377                           
   378                           ; #config settings
   379  0003B7  00                 	db	0	; dummy byte at the end
   380  0000                     
   381                           	psect	cinit
   382  0033CE                     __pcinit:
   383                           	opt stack 0
   384  0033CE                     start_initialization:
   385                           	opt stack 0
   386  0033CE                     __initialization:
   387                           	opt stack 0
   388                           
   389                           ; Initialize objects allocated to BANK0 (7 bytes)
   390                           ; load TBLPTR registers with __pidataBANK0
   391  0033CE  0E18               	movlw	low __pidataBANK0
   392  0033D0  6EF6               	movwf	tblptrl,c
   393  0033D2  0E3C               	movlw	high __pidataBANK0
   394  0033D4  6EF7               	movwf	tblptrh,c
   395  0033D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   396  0033D8  6EF8               	movwf	tblptru,c
   397  0033DA  EE00  F0F3         	lfsr	0,__pdataBANK0
   398  0033DE  EE10 F007          	lfsr	1,7
   399  0033E2                     copy_data0:
   400  0033E2  0009               	tblrd		*+
   401  0033E4  CFF5 FFEE          	movff	tablat,postinc0
   402  0033E8  50E5               	movf	postdec1,w,c
   403  0033EA  50E1               	movf	fsr1l,w,c
   404  0033EC  E1FA               	bnz	copy_data0
   405                           
   406                           ; Initialize objects allocated to COMRAM (2 bytes)
   407                           ; load TBLPTR registers with __pidataCOMRAM
   408  0033EE  0E2C               	movlw	low __pidataCOMRAM
   409  0033F0  6EF6               	movwf	tblptrl,c
   410  0033F2  0E3C               	movlw	high __pidataCOMRAM
   411  0033F4  6EF7               	movwf	tblptrh,c
   412  0033F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   413  0033F8  6EF8               	movwf	tblptru,c
   414  0033FA  0009               	tblrd		*+	;fetch initializer
   415  0033FC  CFF5 F054          	movff	tablat,__pdataCOMRAM
   416  003400  0009               	tblrd		*+	;fetch initializer
   417  003402  CFF5 F055          	movff	tablat,__pdataCOMRAM+1
   418                           
   419                           ; Clear objects allocated to BIGRAM (316 bytes)
   420  003406  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   421  00340A  EE11 F03C          	lfsr	1,316
   422  00340E                     clear_0:
   423  00340E  6AEE               	clrf	postinc0,c
   424  003410  50E5               	movf	postdec1,w,c
   425  003412  50E1               	movf	fsr1l,w,c
   426  003414  E1FC               	bnz	clear_0
   427  003416  50E2               	movf	fsr1h,w,c
   428  003418  E1FA               	bnz	clear_0
   429                           
   430                           ; Clear objects allocated to BANK1 (196 bytes)
   431  00341A  EE01  F000         	lfsr	0,__pbssBANK1
   432  00341E  0EC4               	movlw	196
   433  003420                     clear_1:
   434  003420  6AEE               	clrf	postinc0,c
   435  003422  06E8               	decf	wreg,f,c
   436  003424  E1FD               	bnz	clear_1
   437                           
   438                           ; Clear objects allocated to BANK0 (37 bytes)
   439  003426  EE00  F0CE         	lfsr	0,__pbssBANK0
   440  00342A  0E25               	movlw	37
   441  00342C                     clear_2:
   442  00342C  6AEE               	clrf	postinc0,c
   443  00342E  06E8               	decf	wreg,f,c
   444  003430  E1FD               	bnz	clear_2
   445                           
   446                           ; Clear objects allocated to COMRAM (30 bytes)
   447  003432  EE00  F036         	lfsr	0,__pbssCOMRAM
   448  003436  0E1E               	movlw	30
   449  003438                     clear_3:
   450  003438  6AEE               	clrf	postinc0,c
   451  00343A  06E8               	decf	wreg,f,c
   452  00343C  E1FD               	bnz	clear_3
   453  00343E                     end_of_initialization:
   454                           	opt stack 0
   455  00343E                     __end_of__initialization:
   456                           	opt stack 0
   457  00343E  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   458  003440  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   459  003442  0E00               	movlw	low (__Lmediumconst shr (0+16))
   460  003444  6EF8               	movwf	tblptru,c
   461  003446  0100               	movlb	0
   462  003448  EF1F  F019         	goto	_main	;jump to C main() function
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1h	equ	0xFE2
   471                           fsr1l	equ	0xFE1
   472                           
   473                           	psect	bssCOMRAM
   474  000036                     __pbssCOMRAM:
   475                           	opt stack 0
   476  000036                     _TransmitFrame:
   477                           	opt stack 0
   478  000036                     	ds	4
   479  00003A                     ISR@LastTime:
   480                           	opt stack 0
   481  00003A                     	ds	2
   482  00003C                     ISR@NextTime:
   483                           	opt stack 0
   484  00003C                     	ds	2
   485  00003E                     _SysTickCounter:
   486                           	opt stack 0
   487  00003E                     	ds	2
   488  000040                     __PRIMASK_temp:
   489                           	opt stack 0
   490  000040                     	ds	2
   491  000042                     	ds	1
   492  000043                     	ds	1
   493  000044                     	ds	1
   494  000045                     ProcessReceive@CurrentPattern:
   495                           	opt stack 0
   496  000045                     	ds	1
   497  000046                     	ds	1
   498  000047                     	ds	1
   499  000048                     _Queue0:
   500                           	opt stack 0
   501  000048                     	ds	12
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1h	equ	0xFE2
   510                           fsr1l	equ	0xFE1
   511                           
   512                           	psect	dataCOMRAM
   513  000054                     __pdataCOMRAM:
   514                           	opt stack 0
   515  000054                     ProcessReceive@LastButton:
   516                           	opt stack 0
   517  000054                     	ds	1
   518  000055                     _MaxBrightness:
   519                           	opt stack 0
   520  000055                     	ds	1
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1h	equ	0xFE2
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	bssBANK0
   532  0000CE                     __pbssBANK0:
   533                           	opt stack 0
   534  0000CE                     _CurrentFrame:
   535                           	opt stack 0
   536  0000CE                     	ds	4
   537  0000D2                     ES_Timer_Tick_Resp@NewEvent:
   538                           	opt stack 0
   539  0000D2                     	ds	3
   540  0000D5                     ES_Timer_Tick_Resp@NeedsProcessing:
   541                           	opt stack 0
   542  0000D5                     	ds	2
   543  0000D7                     _FramePointer:
   544                           	opt stack 0
   545  0000D7                     	ds	2
   546  0000D9                     _ListeningFocus:
   547                           	opt stack 0
   548  0000D9                     	ds	2
   549  0000DB                     _PatternID:
   550                           	opt stack 0
   551  0000DB                     	ds	2
   552  0000DD                     _Ready:
   553                           	opt stack 0
   554  0000DD                     	ds	2
   555  0000DF                     _TMR_ActiveFlags:
   556                           	opt stack 0
   557  0000DF                     	ds	2
   558  0000E1                     ES_Timer_Tick_Resp@NextTimer2Process:
   559                           	opt stack 0
   560  0000E1                     	ds	1
   561  0000E2                     SPI32_ControlService@CurrentState:
   562                           	opt stack 0
   563  0000E2                     	ds	1
   564  0000E3                     SPI32_ControlService@MyPriority:
   565                           	opt stack 0
   566  0000E3                     	ds	1
   567  0000E4                     _CurrentState:
   568                           	opt stack 0
   569  0000E4                     	ds	1
   570  0000E5                     _FrameIndex:
   571                           	opt stack 0
   572  0000E5                     	ds	1
   573  0000E6                     _MyPriority:
   574                           	opt stack 0
   575  0000E6                     	ds	1
   576  0000E7                     _NumFrames:
   577                           	opt stack 0
   578  0000E7                     	ds	1
   579  0000E8                     _TickCount:
   580                           	opt stack 0
   581  0000E8                     	ds	1
   582  0000E9                     _CycleCounter:
   583                           	opt stack 0
   584  0000E9                     	ds	4
   585  0000ED                     ES_Run@ThisEvent:
   586                           	opt stack 0
   587  0000ED                     	ds	3
   588  0000F0                     _Brightness:
   589                           	opt stack 0
   590  0000F0                     	ds	2
   591  0000F2                     _PatternStepCounter:
   592                           	opt stack 0
   593  0000F2                     	ds	1
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	dataBANK0
   605  0000F3                     __pdataBANK0:
   606                           	opt stack 0
   607  0000F3                     CenterBreathe@rising:
   608                           	opt stack 0
   609  0000F3                     	ds	1
   610  0000F4                     FullPulseHold@rising:
   611                           	opt stack 0
   612  0000F4                     	ds	1
   613  0000F5                     _FrameByte:
   614                           	opt stack 0
   615  0000F5                     	ds	1
   616  0000F6                     _PatternConfigs:
   617                           	opt stack 0
   618  0000F6                     	ds	4
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1h	equ	0xFE2
   627                           fsr1l	equ	0xFE1
   628                           
   629                           	psect	bssBANK1
   630  000100                     __pbssBANK1:
   631                           	opt stack 0
   632  000100                     _TMR_TimerArray:
   633                           	opt stack 0
   634  000100                     	ds	32
   635  000120                     _PixelPattern:
   636                           	opt stack 0
   637  000120                     	ds	152
   638  0001B8                     _Queue1:
   639                           	opt stack 0
   640  0001B8                     	ds	12
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1h	equ	0xFE2
   649                           fsr1l	equ	0xFE1
   650                           
   651                           	psect	bssBIGRAM
   652  0001C4                     __pbssBIGRAM:
   653                           	opt stack 0
   654  0001C4                     _PixelFrames:
   655                           	opt stack 0
   656  0001C4                     	ds	316
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           postdec1	equ	0xFE5
   664                           fsr1h	equ	0xFE2
   665                           fsr1l	equ	0xFE1
   666                           
   667                           	psect	cstackBANK0
   668  000060                     __pcstackBANK0:
   669                           	opt stack 0
   670  000060                     ??_ES_Timer_StopTimer:
   671  000060                     ?_PatternOff:
   672                           	opt stack 0
   673  000060                     ?_printf:
   674                           	opt stack 0
   675  000060                     ?___awdiv:
   676                           	opt stack 0
   677  000060                     ?___awmod:
   678                           	opt stack 0
   679  000060                     ?_GetNextFrame:
   680                           	opt stack 0
   681  000060                     ___lbmod@divisor:
   682                           	opt stack 0
   683  000060                     ES_GetMSBitSet@Val2Check:
   684                           	opt stack 0
   685  000060                     __HW_Timer_Init@Rate:
   686                           	opt stack 0
   687  000060                     ES_InitQueue@pBlock:
   688                           	opt stack 0
   689  000060                     ES_Timer_InitTimer@NewTime:
   690                           	opt stack 0
   691  000060                     DotStar_Init@brightnessPointer:
   692                           	opt stack 0
   693  000060                     FullPulseHold@ptrnPointer:
   694                           	opt stack 0
   695  000060                     SetupPattern@patternIDPointer:
   696                           	opt stack 0
   697  000060                     printf@f:
   698                           	opt stack 0
   699  000060                     ___awdiv@dividend:
   700                           	opt stack 0
   701  000060                     ___awmod@dividend:
   702                           	opt stack 0
   703  000060                     SPI32_SendFrame@newFrame:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x0
   707  000060                     	ds	1
   708  000061                     ___lbmod@dividend:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x1
   712  000061                     	ds	1
   713  000062                     ??_ES_GetMSBitSet:
   714  000062                     ??_ES_Timer_InitTimer:
   715  000062                     ES_InitQueue@BlockSize:
   716                           	opt stack 0
   717  000062                     PatternOff@i:
   718                           	opt stack 0
   719  000062                     ___lbmod@counter:
   720                           	opt stack 0
   721  000062                     ES_Timer_Init@Rate:
   722                           	opt stack 0
   723  000062                     FullPulseHold@ptrnStepCounter:
   724                           	opt stack 0
   725  000062                     SetupPattern@listeningFocusPointer:
   726                           	opt stack 0
   727  000062                     printf@ap:
   728                           	opt stack 0
   729  000062                     ___awdiv@divisor:
   730                           	opt stack 0
   731  000062                     ___awmod@divisor:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x2
   735  000062                     	ds	1
   736  000063                     ___lbmod@rem:
   737                           	opt stack 0
   738  000063                     ES_InitQueue@pThisQueue:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x3
   742  000063                     	ds	1
   743  000064                     ??_SPI32_SendFrame:
   744  000064                     ES_Timer_StopTimer@Num:
   745                           	opt stack 0
   746  000064                     ES_Timer_InitTimer@Num:
   747                           	opt stack 0
   748  000064                     printf@c:
   749                           	opt stack 0
   750  000064                     ___awdiv@counter:
   751                           	opt stack 0
   752  000064                     ___awmod@counter:
   753                           	opt stack 0
   754  000064                     FullPulseHold@cycleCounter:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x4
   758  000064                     	ds	1
   759  000065                     ___awdiv@sign:
   760                           	opt stack 0
   761  000065                     ___awmod@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x5
   765  000065                     	ds	1
   766  000066                     ?___wmul:
   767                           	opt stack 0
   768  000066                     FullPulseHold@base_hue:
   769                           	opt stack 0
   770  000066                     ___wmul@multiplier:
   771                           	opt stack 0
   772  000066                     ___awdiv@quotient:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x6
   776  000066                     	ds	1
   777  000067                     ES_GetMSBitSet@ReturnVal:
   778                           	opt stack 0
   779  000067                     FullPulseHold@base_sat:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x7
   783  000067                     	ds	1
   784  000068                     ES_GetMSBitSet@Nybble2Test:
   785                           	opt stack 0
   786  000068                     FullPulseHold@15711:
   787                           	opt stack 0
   788  000068                     CenterBreathe@ptrnPointer:
   789                           	opt stack 0
   790  000068                     SingleFadedLoop@ptrnPointer:
   791                           	opt stack 0
   792  000068                     DoubleFadedLoop@ptrnPointer:
   793                           	opt stack 0
   794  000068                     BrokenPinwheel@ptrnPointer:
   795                           	opt stack 0
   796  000068                     MirroredQuadrants@ptrnPointer:
   797                           	opt stack 0
   798  000068                     SingleFocusPulse@ptrnPointer:
   799                           	opt stack 0
   800  000068                     ___wmul@multiplicand:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x8
   804  000068                     	ds	1
   805  000069                     ES_GetMSBitSet@LoopCntr:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x9
   809  000069                     	ds	1
   810  00006A                     ??_FullPulseHold:
   811  00006A                     CenterBreathe@ptrnStepCounter:
   812                           	opt stack 0
   813  00006A                     SingleFadedLoop@ptrnStepCounter:
   814                           	opt stack 0
   815  00006A                     DoubleFadedLoop@ptrnStepCounter:
   816                           	opt stack 0
   817  00006A                     BrokenPinwheel@ptrnStepCounter:
   818                           	opt stack 0
   819  00006A                     MirroredQuadrants@ptrnStepCounter:
   820                           	opt stack 0
   821  00006A                     SingleFocusPulse@ptrnStepCounter:
   822                           	opt stack 0
   823  00006A                     ___wmul@product:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0xA
   827  00006A                     	ds	2
   828  00006C                     ?___lwdiv:
   829                           	opt stack 0
   830  00006C                     ES_EnQueueFIFO@pBlock:
   831                           	opt stack 0
   832  00006C                     ES_DeQueue@pBlock:
   833                           	opt stack 0
   834  00006C                     CenterBreathe@cycleCounter:
   835                           	opt stack 0
   836  00006C                     SingleFadedLoop@cycleCounter:
   837                           	opt stack 0
   838  00006C                     DoubleFadedLoop@cycleCounter:
   839                           	opt stack 0
   840  00006C                     BrokenPinwheel@cycleCounter:
   841                           	opt stack 0
   842  00006C                     MirroredQuadrants@cycleCounter:
   843                           	opt stack 0
   844  00006C                     SingleFocusPulse@cycleCounter:
   845                           	opt stack 0
   846  00006C                     ___lwdiv@dividend:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0xC
   850  00006C                     	ds	2
   851  00006E                     CenterBreathe@base_hue:
   852                           	opt stack 0
   853  00006E                     SingleFadedLoop@base_hue:
   854                           	opt stack 0
   855  00006E                     DoubleFadedLoop@base_hue:
   856                           	opt stack 0
   857  00006E                     BrokenPinwheel@base_hue:
   858                           	opt stack 0
   859  00006E                     MirroredQuadrants@base_hue:
   860                           	opt stack 0
   861  00006E                     SingleFocusPulse@base_hue:
   862                           	opt stack 0
   863  00006E                     ES_DeQueue@pReturnEvent:
   864                           	opt stack 0
   865  00006E                     ___lwdiv@divisor:
   866                           	opt stack 0
   867  00006E                     ES_EnQueueFIFO@Event2Add:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0xE
   871  00006E                     	ds	1
   872  00006F                     CenterBreathe@base_sat:
   873                           	opt stack 0
   874  00006F                     SingleFadedLoop@base_sat:
   875                           	opt stack 0
   876  00006F                     DoubleFadedLoop@base_sat:
   877                           	opt stack 0
   878  00006F                     BrokenPinwheel@base_sat:
   879                           	opt stack 0
   880  00006F                     MirroredQuadrants@base_sat:
   881                           	opt stack 0
   882  00006F                     SingleFocusPulse@base_sat:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0xF
   886  00006F                     	ds	1
   887  000070                     ??_ES_DeQueue:
   888  000070                     CenterBreathe@15721:
   889                           	opt stack 0
   890  000070                     SingleFadedLoop@15734:
   891                           	opt stack 0
   892  000070                     DoubleFadedLoop@15744:
   893                           	opt stack 0
   894  000070                     BrokenPinwheel@15769:
   895                           	opt stack 0
   896  000070                     MirroredQuadrants@15787:
   897                           	opt stack 0
   898  000070                     SingleFocusPulse@focus:
   899                           	opt stack 0
   900  000070                     ___lwdiv@quotient:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x10
   904  000070                     	ds	1
   905  000071                     ??_ES_EnQueueFIFO:
   906                           
   907                           ; 1 bytes @ 0x11
   908  000071                     	ds	1
   909  000072                     ??_CenterBreathe:
   910  000072                     ??_SingleFadedLoop:
   911  000072                     ??_DoubleFadedLoop:
   912  000072                     ??_BrokenPinwheel:
   913  000072                     ??_MirroredQuadrants:
   914  000072                     ??_SingleFocusPulse:
   915  000072                     ES_DeQueue@SaveCrit:
   916                           	opt stack 0
   917  000072                     ___lwdiv@counter:
   918                           	opt stack 0
   919  000072                     _FullPulseHold$1218:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x12
   923  000072                     	ds	1
   924  000073                     ES_DeQueue@NumLeft:
   925                           	opt stack 0
   926  000073                     HSV_to_RGB@HSV_Value:
   927                           	opt stack 0
   928  000073                     HueTest@ptrnPointer:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x13
   932  000073                     	ds	1
   933  000074                     ES_EnQueueFIFO@SaveCrit:
   934                           	opt stack 0
   935  000074                     FullPulseHold@val:
   936                           	opt stack 0
   937  000074                     ES_DeQueue@pThisQueue:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x14
   941  000074                     	ds	1
   942  000075                     ??_HSV_to_RGB:
   943  000075                     FullPulseHold@i:
   944                           	opt stack 0
   945  000075                     ES_EnQueueFIFO@pThisQueue:
   946                           	opt stack 0
   947  000075                     HueTest@ptrnStepCounter:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x15
   951  000075                     	ds	2
   952  000077                     HueTest@cycleCounter:
   953                           	opt stack 0
   954  000077                     ES_PostToService@TheEvent:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x17
   958  000077                     	ds	2
   959  000079                     HueTest@base_hue:
   960                           	opt stack 0
   961  000079                     _DoubleFadedLoop$1262:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x19
   965  000079                     	ds	1
   966  00007A                     ??_ES_PostToService:
   967  00007A                     HueTest@base_sat:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x1A
   971  00007A                     	ds	1
   972  00007B                     HueTest@15703:
   973                           	opt stack 0
   974  00007B                     _CenterBreathe$1232:
   975                           	opt stack 0
   976  00007B                     _DoubleFadedLoop$1263:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x1B
   980  00007B                     	ds	1
   981  00007C                     ES_PostToService@WhichService:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1C
   985  00007C                     	ds	1
   986  00007D                     ??_HueTest:
   987  00007D                     _CenterBreathe$1233:
   988                           	opt stack 0
   989  00007D                     _SingleFadedLoop$1250:
   990                           	opt stack 0
   991  00007D                     _DoubleFadedLoop$1265:
   992                           	opt stack 0
   993  00007D                     _BrokenPinwheel$1290:
   994                           	opt stack 0
   995  00007D                     _MirroredQuadrants$1302:
   996                           	opt stack 0
   997  00007D                     _SingleFocusPulse$1316:
   998                           	opt stack 0
   999  00007D                     InitPatternControlService@ThisEvent:
  1000                           	opt stack 0
  1001  00007D                     PostPatternControlService@ThisEvent:
  1002                           	opt stack 0
  1003  00007D                     InitSPI32ControlService@ThisEvent:
  1004                           	opt stack 0
  1005  00007D                     PostSPI32ControlService@ThisEvent:
  1006                           	opt stack 0
  1007                           
  1008                           ; 3 bytes @ 0x1D
  1009  00007D                     	ds	2
  1010  00007F                     _CenterBreathe$1234:
  1011                           	opt stack 0
  1012  00007F                     _SingleFadedLoop$1251:
  1013                           	opt stack 0
  1014  00007F                     _DoubleFadedLoop$1266:
  1015                           	opt stack 0
  1016  00007F                     _BrokenPinwheel$1291:
  1017                           	opt stack 0
  1018  00007F                     _MirroredQuadrants$1303:
  1019                           	opt stack 0
  1020  00007F                     _SingleFocusPulse$1317:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x1F
  1024  00007F                     	ds	1
  1025  000080                     ??_ES_Timer_Tick_Resp:
  1026  000080                     InitPatternControlService@Priority:
  1027                           	opt stack 0
  1028  000080                     InitSPI32ControlService@Priority:
  1029                           	opt stack 0
  1030  000080                     HueTest@i:
  1031                           	opt stack 0
  1032  000080                     SPI32_TransmitFrames@framePointer:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x20
  1036  000080                     	ds	1
  1037  000081                     SingleFadedLoop@val:
  1038                           	opt stack 0
  1039  000081                     DoubleFadedLoop@val:
  1040                           	opt stack 0
  1041  000081                     BrokenPinwheel@x:
  1042                           	opt stack 0
  1043  000081                     MirroredQuadrants@x:
  1044                           	opt stack 0
  1045  000081                     SingleFocusPulse@val:
  1046                           	opt stack 0
  1047  000081                     ES_Initialize@NewRate:
  1048                           	opt stack 0
  1049  000081                     _CenterBreathe$1235:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x21
  1053  000081                     	ds	1
  1054  000082                     SPI32_TransmitFrames@numFrames:
  1055                           	opt stack 0
  1056  000082                     SingleFadedLoop@x:
  1057                           	opt stack 0
  1058  000082                     DoubleFadedLoop@x:
  1059                           	opt stack 0
  1060  000082                     BrokenPinwheel@fade:
  1061                           	opt stack 0
  1062  000082                     MirroredQuadrants@val:
  1063                           	opt stack 0
  1064  000082                     SingleFocusPulse@x:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x22
  1068  000082                     	ds	1
  1069  000083                     ES_Initialize@i:
  1070                           	opt stack 0
  1071  000083                     SingleFadedLoop@i:
  1072                           	opt stack 0
  1073  000083                     DoubleFadedLoop@i:
  1074                           	opt stack 0
  1075  000083                     BrokenPinwheel@val:
  1076                           	opt stack 0
  1077  000083                     MirroredQuadrants@i:
  1078                           	opt stack 0
  1079  000083                     SingleFocusPulse@y:
  1080                           	opt stack 0
  1081  000083                     _CenterBreathe$1236:
  1082                           	opt stack 0
  1083  000083                     SPI32_TransmitFrames@transmitEvent:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x23
  1087  000083                     	ds	1
  1088  000084                     DoubleFadedLoop@i_1264:
  1089                           	opt stack 0
  1090  000084                     BrokenPinwheel@i:
  1091                           	opt stack 0
  1092  000084                     SingleFocusPulse@head:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x24
  1096  000084                     	ds	1
  1097  000085                     SingleFocusPulse@i:
  1098                           	opt stack 0
  1099  000085                     _CenterBreathe$1237:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x25
  1103  000085                     	ds	2
  1104  000087                     _CenterBreathe$1238:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x27
  1108  000087                     	ds	2
  1109  000089                     _CenterBreathe$1239:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x29
  1113  000089                     	ds	2
  1114  00008B                     CenterBreathe@fade_thresh:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x2B
  1118  00008B                     	ds	1
  1119  00008C                     CenterBreathe@val:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x2C
  1123  00008C                     	ds	1
  1124  00008D                     CenterBreathe@pulseWidth:
  1125                           	opt stack 0
  1126  00008D                     HSV_to_RGB@h:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x2D
  1130  00008D                     	ds	1
  1131  00008E                     CenterBreathe@x:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x2E
  1135  00008E                     	ds	1
  1136  00008F                     CenterBreathe@i:
  1137                           	opt stack 0
  1138  00008F                     HSV_to_RGB@region:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x2F
  1142  00008F                     	ds	1
  1143  000090                     ?_UpdatePattern:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x30
  1147  000090                     	ds	1
  1148  000091                     HSV_to_RGB@fpart:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x31
  1152  000091                     	ds	1
  1153  000092                     _UpdatePattern$1970:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x32
  1157  000092                     	ds	1
  1158  000093                     _UpdatePattern$1971:
  1159                           	opt stack 0
  1160  000093                     HSV_to_RGB@r:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x33
  1164  000093                     	ds	1
  1165  000094                     UpdatePattern@i:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x34
  1169  000094                     	ds	1
  1170  000095                     UpdatePattern@i_1348:
  1171                           	opt stack 0
  1172  000095                     HSV_to_RGB@g:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x35
  1176  000095                     	ds	2
  1177  000097                     HSV_to_RGB@b:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x37
  1181  000097                     	ds	2
  1182  000099                     HSV_to_RGB@q:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x39
  1186  000099                     	ds	2
  1187  00009B                     HSV_to_RGB@t:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x3B
  1191  00009B                     	ds	2
  1192  00009D                     _HSV_to_RGB$1969:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x3D
  1196  00009D                     	ds	2
  1197  00009F                     HSV_to_RGB@s:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x3F
  1201  00009F                     	ds	2
  1202  0000A1                     HSV_to_RGB@p:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x41
  1206  0000A1                     	ds	2
  1207  0000A3                     HSV_to_RGB@v:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x43
  1211  0000A3                     	ds	2
  1212  0000A5                     DotStar_Show@patternPointer:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x45
  1216  0000A5                     	ds	2
  1217  0000A7                     ??_DotStar_Show:
  1218                           
  1219                           ; 1 bytes @ 0x47
  1220  0000A7                     	ds	19
  1221  0000BA                     DotStar_Show@i:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x5A
  1225  0000BA                     	ds	1
  1226  0000BB                     ?_RunPatternControlService:
  1227                           	opt stack 0
  1228  0000BB                     ?_RunSPI32ControlService:
  1229                           	opt stack 0
  1230  0000BB                     RunPatternControlService@ThisEvent:
  1231                           	opt stack 0
  1232  0000BB                     RunSPI32ControlService@ThisEvent:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x5B
  1236  0000BB                     	ds	3
  1237  0000BE                     ??_RunSPI32ControlService:
  1238  0000BE                     RunPatternControlService@ReturnEvent:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0x5E
  1242  0000BE                     	ds	3
  1243  0000C1                     RunPatternControlService@testEvent:
  1244                           	opt stack 0
  1245                           
  1246                           ; 3 bytes @ 0x61
  1247  0000C1                     	ds	4
  1248  0000C5                     RunSPI32ControlService@ReturnEvent:
  1249                           	opt stack 0
  1250                           
  1251                           ; 3 bytes @ 0x65
  1252  0000C5                     	ds	3
  1253  0000C8                     ??_ES_Run:
  1254                           
  1255                           ; 1 bytes @ 0x68
  1256  0000C8                     	ds	4
  1257  0000CC                     ES_Run@HighestPrior:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x6C
  1261  0000CC                     	ds	1
  1262  0000CD                     main@ErrorType:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x6D
  1266  0000CD                     	ds	1
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           postdec1	equ	0xFE5
  1274                           fsr1h	equ	0xFE2
  1275                           fsr1l	equ	0xFE1
  1276                           
  1277                           	psect	cstackCOMRAM
  1278  000001                     __pcstackCOMRAM:
  1279                           	opt stack 0
  1280  000001                     ?i2___awdiv:
  1281                           	opt stack 0
  1282  000001                     ?i2___awmod:
  1283                           	opt stack 0
  1284  000001                     SetPattern@PatternID:
  1285                           	opt stack 0
  1286  000001                     i2___awdiv@dividend:
  1287                           	opt stack 0
  1288  000001                     i2___awmod@dividend:
  1289                           	opt stack 0
  1290  000001                     i2SPI32_SendFrame@newFrame:
  1291                           	opt stack 0
  1292                           
  1293                           ; 4 bytes @ 0x0
  1294  000001                     	ds	2
  1295  000003                     i2___awdiv@divisor:
  1296                           	opt stack 0
  1297  000003                     i2___awmod@divisor:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x2
  1301  000003                     	ds	2
  1302  000005                     ??i2_SPI32_SendFrame:
  1303  000005                     i2___awdiv@counter:
  1304                           	opt stack 0
  1305  000005                     i2___awmod@counter:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x4
  1309  000005                     	ds	1
  1310  000006                     i2___awdiv@sign:
  1311                           	opt stack 0
  1312  000006                     i2___awmod@sign:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x5
  1316  000006                     	ds	1
  1317  000007                     ?i2___wmul:
  1318                           	opt stack 0
  1319  000007                     i2___awdiv@quotient:
  1320                           	opt stack 0
  1321  000007                     i2___wmul@multiplier:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x6
  1325  000007                     	ds	2
  1326  000009                     SetListenFocus@listFocus:
  1327                           	opt stack 0
  1328  000009                     SetBrightness@newBrightness:
  1329                           	opt stack 0
  1330  000009                     i2___wmul@multiplicand:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x8
  1334  000009                     	ds	2
  1335  00000B                     SetBrightness@brightness:
  1336                           	opt stack 0
  1337  00000B                     i2___wmul@product:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0xA
  1341  00000B                     	ds	2
  1342  00000D                     i2ES_EnQueueFIFO@pBlock:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0xC
  1346  00000D                     	ds	2
  1347  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1348                           	opt stack 0
  1349                           
  1350                           ; 3 bytes @ 0xE
  1351  00000F                     	ds	3
  1352  000012                     ??i2_ES_EnQueueFIFO:
  1353                           
  1354                           ; 1 bytes @ 0x11
  1355  000012                     	ds	3
  1356  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x14
  1360  000015                     	ds	1
  1361  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x15
  1365  000016                     	ds	2
  1366  000018                     i2ES_PostToService@TheEvent:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x17
  1370  000018                     	ds	3
  1371  00001B                     ??i2_ES_PostToService:
  1372                           
  1373                           ; 1 bytes @ 0x1A
  1374  00001B                     	ds	2
  1375  00001D                     i2ES_PostToService@WhichService:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x1C
  1379  00001D                     	ds	1
  1380  00001E                     i2PostPatternControlService@ThisEvent:
  1381                           	opt stack 0
  1382  00001E                     i2PostSPI32ControlService@ThisEvent:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0x1D
  1386  00001E                     	ds	3
  1387  000021                     _ProcessReceive$1196:
  1388                           	opt stack 0
  1389  000021                     SPI32_EOTResponse@EOTevent:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x20
  1393  000021                     	ds	2
  1394  000023                     ProcessReceive@Event2Post:
  1395                           	opt stack 0
  1396                           
  1397                           ; 3 bytes @ 0x22
  1398  000023                     	ds	3
  1399  000026                     ??_ISR:
  1400                           
  1401                           ; 1 bytes @ 0x25
  1402  000026                     	ds	16
  1403                           tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1h	equ	0xFE2
  1411                           fsr1l	equ	0xFE1
  1412                           
  1413 ;;
  1414 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1415 ;;
  1416 ;; *************** function _main *****************
  1417 ;; Defined at:
  1418 ;;		line 25 in file "main.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  ErrorType       1  109[BANK0 ] enum E15646
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  2  475[None  ] int 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1432 ;;      Params:         0       0       0       0
  1433 ;;      Locals:         0       1       0       0
  1434 ;;      Temps:          0       0       0       0
  1435 ;;      Totals:         0       1       0       0
  1436 ;;Total ram usage:        1 bytes
  1437 ;; Hardware stack levels required when called:   16
  1438 ;; This function calls:
  1439 ;;		_ES_Initialize
  1440 ;;		_ES_Run
  1441 ;;		_printf
  1442 ;; This function is called by:
  1443 ;;		Startup code after reset
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text0
  1448  00323E                     __ptext0:
  1449                           	opt stack 0
  1450  00323E                     _main:
  1451                           	opt stack 15
  1452                           
  1453                           ;main.c: 27: ADCON1 = 0x0F;
  1454                           
  1455                           ;incstack = 0
  1456  00323E  0E0F               	movlw	15
  1457  003240  6EC1               	movwf	4033,c	;volatile
  1458                           
  1459                           ;main.c: 34: ES_Return_t ErrorType;
  1460                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1461  003242  0E9C               	movlw	156
  1462  003244  0100               	movlb	0	; () banked
  1463  003246  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1464  003248  0E3F               	movlw	63
  1465  00324A  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1466  00324C  ECB8  F015         	call	_ES_Initialize	;wreg free
  1467  003250  0100               	movlb	0	; () banked
  1468  003252  6FCD               	movwf	main@ErrorType& (0+255),b
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 51: if ( ErrorType == Success ) {
  1472  003254  0100               	movlb	0	; () banked
  1473  003256  51CD               	movf	main@ErrorType& (0+255),w,b
  1474  003258  0100               	movlb	0	; () banked
  1475  00325A  A4D8               	btfss	status,2,c
  1476  00325C  D029               	goto	l4295
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 53: ErrorType = ES_Run();
  1480  00325E  EC40  F015         	call	_ES_Run	;wreg free
  1481  003262  0100               	movlb	0	; () banked
  1482  003264  6FCD               	movwf	main@ErrorType& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 55: }
  1486                           ;main.c: 57: switch (ErrorType){
  1487  003266  D024               	goto	l4295
  1488  003268                     l4285:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1492  003268  0E5E               	movlw	low STR_1
  1493  00326A  0100               	movlb	0	; () banked
  1494  00326C  6F60               	movwf	printf@f& (0+255),b
  1495  00326E  0E03               	movlw	high STR_1
  1496  003270  0100               	movlb	0	; () banked
  1497  003272  6F61               	movwf	(printf@f+1)& (0+255),b
  1498  003274  ECCF  F01C         	call	_printf	;wreg free
  1499                           
  1500                           ;main.c: 60: break;
  1501  003278  D027               	goto	l483
  1502  00327A                     l4287:
  1503                           
  1504                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1505  00327A  0E79               	movlw	low STR_2
  1506  00327C  0100               	movlb	0	; () banked
  1507  00327E  6F60               	movwf	printf@f& (0+255),b
  1508  003280  0E03               	movlw	high STR_2
  1509  003282  0100               	movlb	0	; () banked
  1510  003284  6F61               	movwf	(printf@f+1)& (0+255),b
  1511  003286  ECCF  F01C         	call	_printf	;wreg free
  1512                           
  1513                           ;main.c: 63: break;
  1514  00328A  D01E               	goto	l483
  1515  00328C                     l4289:
  1516                           
  1517                           ;main.c: 65: printf("Failed Initialization\n");
  1518  00328C  0E91               	movlw	low STR_3
  1519  00328E  0100               	movlb	0	; () banked
  1520  003290  6F60               	movwf	printf@f& (0+255),b
  1521  003292  0E03               	movlw	high STR_3
  1522  003294  0100               	movlb	0	; () banked
  1523  003296  6F61               	movwf	(printf@f+1)& (0+255),b
  1524  003298  ECCF  F01C         	call	_printf	;wreg free
  1525                           
  1526                           ;main.c: 66: break;
  1527  00329C  D015               	goto	l483
  1528  00329E                     l4291:
  1529                           
  1530                           ;main.c: 68: printf("Other Failure\n");
  1531  00329E  0EA8               	movlw	low STR_4
  1532  0032A0  0100               	movlb	0	; () banked
  1533  0032A2  6F60               	movwf	printf@f& (0+255),b
  1534  0032A4  0E03               	movlw	high STR_4
  1535  0032A6  0100               	movlb	0	; () banked
  1536  0032A8  6F61               	movwf	(printf@f+1)& (0+255),b
  1537  0032AA  ECCF  F01C         	call	_printf	;wreg free
  1538                           
  1539                           ;main.c: 70: }
  1540                           
  1541                           ;main.c: 69: break;
  1542  0032AE  D00C               	goto	l483
  1543  0032B0                     l4295:
  1544  0032B0  0100               	movlb	0	; () banked
  1545  0032B2  51CD               	movf	main@ErrorType& (0+255),w,b
  1546                           
  1547                           ; Switch size 1, requested type "space"
  1548                           ; Number of cases is 3, Range of values is 1 to 5
  1549                           ; switch strategies available:
  1550                           ; Name         Instructions Cycles
  1551                           ; simple_byte           10     6 (average)
  1552                           ;	Chosen strategy is simple_byte
  1553  0032B4  0A01               	xorlw	1	; case 1
  1554  0032B6  B4D8               	btfsc	status,2,c
  1555  0032B8  D7D7               	goto	l4285
  1556  0032BA  0A02               	xorlw	2	; case 3
  1557  0032BC  B4D8               	btfsc	status,2,c
  1558  0032BE  D7DD               	goto	l4287
  1559  0032C0  0A06               	xorlw	6	; case 5
  1560  0032C2  B4D8               	btfsc	status,2,c
  1561  0032C4  D7E3               	goto	l4289
  1562  0032C6  D7EB               	goto	l4291
  1563  0032C8                     l483:
  1564                           
  1565                           ;main.c: 72: ;
  1566  0032C8  D7FF               	goto	l483
  1567  0032CA                     __end_of_main:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1h	equ	0xFE2
  1577                           fsr1l	equ	0xFE1
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _printf *****************
  1581 ;; Defined at:
  1582 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1585 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  tmpval          4    0        struct .
  1588 ;;  cp              3    0        PTR const unsigned char 
  1589 ;;  ap              2    2[BANK0 ] PTR void [1]
  1590 ;;		 -> ?_printf(2), 
  1591 ;;  len             2    0        unsigned int 
  1592 ;;  val             2    0        unsigned int 
  1593 ;;  c               1    4[BANK0 ] char 
  1594 ;;  flag            1    0        unsigned char 
  1595 ;;  prec            1    0        char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2    0[BANK0 ] int 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1605 ;;      Params:         0       2       0       0
  1606 ;;      Locals:         0       3       0       0
  1607 ;;      Temps:          0       0       0       0
  1608 ;;      Totals:         0       5       0       0
  1609 ;;Total ram usage:        5 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    8
  1612 ;; This function calls:
  1613 ;;		_putch
  1614 ;; This function is called by:
  1615 ;;		_main
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text1
  1620  00399E                     __ptext1:
  1621                           	opt stack 0
  1622  00399E                     _printf:
  1623                           	opt stack 22
  1624                           
  1625                           ;doprnt.c: 466: va_list ap;
  1626                           ;doprnt.c: 499: signed char c;
  1627                           ;doprnt.c: 506: signed char prec;
  1628                           ;doprnt.c: 508: unsigned char flag;
  1629                           ;doprnt.c: 523: union {
  1630                           ;doprnt.c: 524: unsigned long vd;
  1631                           ;doprnt.c: 525: double integ;
  1632                           ;doprnt.c: 526: } tmpval;
  1633                           ;doprnt.c: 528: unsigned int val;
  1634                           ;doprnt.c: 529: unsigned len;
  1635                           ;doprnt.c: 530: const char * cp;
  1636                           ;doprnt.c: 533: *ap = __va_start();
  1637                           
  1638                           ;incstack = 0
  1639  00399E  0E62               	movlw	low (?_printf+2)
  1640  0039A0  0100               	movlb	0	; () banked
  1641  0039A2  6F62               	movwf	printf@ap& (0+255),b
  1642  0039A4  0E00               	movlw	high (?_printf+2)
  1643  0039A6  0100               	movlb	0	; () banked
  1644  0039A8  6F63               	movwf	(printf@ap+1)& (0+255),b
  1645                           
  1646                           ;doprnt.c: 536: while(c = *f++) {
  1647  0039AA  D004               	goto	l4139
  1648  0039AC                     l4137:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;doprnt.c: 540: {
  1652                           ;doprnt.c: 541: (putch(c) );
  1653  0039AC  0100               	movlb	0	; () banked
  1654  0039AE  5164               	movf	printf@c& (0+255),w,b
  1655  0039B0  EC17  F01E         	call	_putch
  1656  0039B4                     l4139:
  1657  0039B4  C060  FFF6         	movff	printf@f,tblptrl
  1658  0039B8  C061  FFF7         	movff	printf@f+1,tblptrh
  1659  0039BC  0100               	movlb	0	; () banked
  1660  0039BE  4B60               	infsnz	printf@f& (0+255),f,b
  1661  0039C0  2B61               	incf	(printf@f+1)& (0+255),f,b
  1662  0039C2                     	if	0	;tblptru may be non-zero
  1663  0039C2                     	endif
  1664  0039C2                     	if	0	;tblptru may be non-zero
  1665  0039C2                     	endif
  1666  0039C2  0008               	tblrd		*
  1667  0039C4  CFF5 F064          	movff	tablat,printf@c
  1668  0039C8  0100               	movlb	0	; () banked
  1669  0039CA  5164               	movf	printf@c& (0+255),w,b
  1670  0039CC  B4D8               	btfsc	status,2,c
  1671  0039CE  0012               	return	
  1672  0039D0  D7ED               	goto	l4137
  1673  0039D2                     __end_of_printf:
  1674                           	opt stack 0
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           postdec1	equ	0xFE5
  1682                           fsr1h	equ	0xFE2
  1683                           fsr1l	equ	0xFE1
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _putch *****************
  1687 ;; Defined at:
  1688 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  c               1    wreg     unsigned char 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  c               1    0[COMRAM] unsigned char 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1702 ;;      Params:         0       0       0       0
  1703 ;;      Locals:         0       0       0       0
  1704 ;;      Temps:          0       0       0       0
  1705 ;;      Totals:         0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    7
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_printf
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text2
  1717  003C2E                     __ptext2:
  1718                           	opt stack 0
  1719  003C2E                     _putch:
  1720                           	opt stack 22
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;incstack = 0
  1724  003C2E  0012               	return		;funcret
  1725  003C30                     __end_of_putch:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postdec1	equ	0xFE5
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _ES_Run *****************
  1739 ;; Defined at:
  1740 ;;		line 277 in file "ES_Framework.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  HighestPrior    1  108[BANK0 ] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      enum E15494
  1747 ;; Registers used:
  1748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1754 ;;      Params:         0       0       0       0
  1755 ;;      Locals:         0       1       0       0
  1756 ;;      Temps:          0       4       0       0
  1757 ;;      Totals:         0       5       0       0
  1758 ;;Total ram usage:        5 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:   15
  1761 ;; This function calls:
  1762 ;;		_ES_DeQueue
  1763 ;;		_ES_GetMSBitSet
  1764 ;;		_RunPatternControlService
  1765 ;;		_RunSPI32ControlService
  1766 ;;		__HW_Process_Pending_Ints
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text3
  1773  002A80                     __ptext3:
  1774                           	opt stack 0
  1775  002A80                     _ES_Run:
  1776                           	opt stack 15
  1777                           
  1778                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1779                           
  1780                           ;incstack = 0
  1781                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1782                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1783                           ;ES_Framework.c: 282: while(1){
  1784  002A80  D06B               	goto	l4111
  1785  002A82                     l4099:
  1786                           
  1787                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1788  002A82  C0DD  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1789  002A86  C0DE  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1790  002A8A  EC7C  F018         	call	_ES_GetMSBitSet	;wreg free
  1791  002A8E  0100               	movlb	0	; () banked
  1792  002A90  6FCC               	movwf	ES_Run@HighestPrior& (0+255),b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1796  002A92  0100               	movlb	0	; () banked
  1797  002A94  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1798  002A96  0D03               	mullw	3
  1799  002A98  0E58               	movlw	low _EventQueues
  1800  002A9A  24F3               	addwf	prodl,w,c
  1801  002A9C  6EF6               	movwf	tblptrl,c
  1802  002A9E  0E03               	movlw	high _EventQueues
  1803  002AA0  20F4               	addwfc	prodh,w,c
  1804  002AA2  6EF7               	movwf	tblptrh,c
  1805  002AA4                     	if	0	;There are less than 3 active tblptr bytes
  1806  002AA4                     	endif
  1807  002AA4  0009               	tblrd		*+
  1808  002AA6  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1809  002AAA  000A               	tblrd		*-
  1810  002AAC  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1811  002AB0  0EED               	movlw	low ES_Run@ThisEvent
  1812  002AB2  0100               	movlb	0	; () banked
  1813  002AB4  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1814  002AB6  0E00               	movlw	high ES_Run@ThisEvent
  1815  002AB8  0100               	movlb	0	; () banked
  1816  002ABA  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1817  002ABC  EC1F  F013         	call	_ES_DeQueue	;wreg free
  1818  002AC0  0900               	iorlw	0
  1819  002AC2  A4D8               	btfss	status,2,c
  1820  002AC4  D01F               	goto	l4105
  1821                           
  1822                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1823  002AC6  0100               	movlb	0	; () banked
  1824  002AC8  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1825  002ACA  0D02               	mullw	2
  1826  002ACC  0E01               	movlw	low _BitNum2SetMask
  1827  002ACE  24F3               	addwf	prodl,w,c
  1828  002AD0  6EF6               	movwf	tblptrl,c
  1829  002AD2  0E03               	movlw	high _BitNum2SetMask
  1830  002AD4  20F4               	addwfc	prodh,w,c
  1831  002AD6  6EF7               	movwf	tblptrh,c
  1832  002AD8                     	if	0	;There are less than 3 active tblptr bytes
  1833  002AD8                     	endif
  1834  002AD8  0009               	tblrd		*+
  1835  002ADA  CFF5 F0C8          	movff	tablat,??_ES_Run
  1836  002ADE  0009               	tblrd		*+
  1837  002AE0  CFF5 F0C9          	movff	tablat,??_ES_Run+1
  1838  002AE4  0100               	movlb	0	; () banked
  1839  002AE6  1DC8               	comf	??_ES_Run& (0+255),w,b
  1840  002AE8  0100               	movlb	0	; () banked
  1841  002AEA  6FCA               	movwf	(??_ES_Run+2)& (0+255),b
  1842  002AEC  0100               	movlb	0	; () banked
  1843  002AEE  1DC9               	comf	(??_ES_Run+1)& (0+255),w,b
  1844  002AF0  0100               	movlb	0	; () banked
  1845  002AF2  6FCB               	movwf	(??_ES_Run+3)& (0+255),b
  1846  002AF4  0100               	movlb	0	; () banked
  1847  002AF6  51CA               	movf	(??_ES_Run+2)& (0+255),w,b
  1848  002AF8  0100               	movlb	0	; () banked
  1849  002AFA  17DD               	andwf	_Ready& (0+255),f,b
  1850  002AFC  0100               	movlb	0	; () banked
  1851  002AFE  51CB               	movf	(??_ES_Run+3)& (0+255),w,b
  1852  002B00  0100               	movlb	0	; () banked
  1853  002B02  17DE               	andwf	(_Ready+1)& (0+255),f,b
  1854  002B04                     l4105:
  1855                           
  1856                           ;ES_Framework.c: 291: }
  1857                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1858  002B04  C0ED  F0BB         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1859  002B08  C0EE  F0BC         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1860  002B0C  C0EF  F0BD         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1861  002B10  0100               	movlb	0	; () banked
  1862  002B12  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1863  002B14  0D04               	mullw	4
  1864  002B16  0E02               	movlw	2
  1865  002B18  26F3               	addwf	prodl,f,c
  1866  002B1A  0E00               	movlw	0
  1867  002B1C  22F4               	addwfc	prodh,f,c
  1868  002B1E  0E50               	movlw	low _ServDescList
  1869  002B20  24F3               	addwf	prodl,w,c
  1870  002B22  6EF6               	movwf	tblptrl,c
  1871  002B24  0E03               	movlw	high _ServDescList
  1872  002B26  20F4               	addwfc	prodh,w,c
  1873  002B28  6EF7               	movwf	tblptrh,c
  1874  002B2A                     	if	0	;There are less than 3 active tblptr bytes
  1875  002B2A                     	endif
  1876  002B2A  D801               	call	u2998
  1877  002B2C  D00C               	goto	u2999
  1878  002B2E                     u2998:
  1879  002B2E  0005               	push	
  1880  002B30  6EFA               	movwf	pclath,c
  1881  002B32  0009               	tblrd		*+
  1882  002B34  50F5               	movf	tablat,w,c
  1883  002B36  6EFD               	movwf	tosl,c
  1884  002B38  0009               	tblrd		*+
  1885  002B3A  50F5               	movf	tablat,w,c
  1886  002B3C  6EFE               	movwf	tosh,c
  1887  002B3E  50F8               	movf	tblptru,w,c
  1888  002B40  6EFF               	movwf	tosu,c
  1889  002B42  50FA               	movf	pclath,w,c
  1890  002B44  0012               	return		;indir
  1891  002B46                     u2999:
  1892  002B46  0EBB               	movlw	low ?_RunSPI32ControlService
  1893  002B48  6ED9               	movwf	fsr2l,c
  1894  002B4A  0E00               	movlw	high ?_RunSPI32ControlService
  1895  002B4C  6EDA               	movwf	fsr2h,c
  1896  002B4E  50DF               	movf	indf2,w,c
  1897  002B50  B4D8               	btfsc	status,2,c
  1898  002B52  D002               	goto	l4111
  1899                           
  1900                           ;ES_Framework.c: 293: return FailedRun;
  1901  002B54  0E02               	movlw	2
  1902  002B56  0012               	return	
  1903  002B58                     l4111:
  1904  002B58  ECC6  F01D         	call	__HW_Process_Pending_Ints	;wreg free
  1905  002B5C  0900               	iorlw	0
  1906  002B5E  B4D8               	btfsc	status,2,c
  1907  002B60  D7FB               	goto	l4111
  1908  002B62  0100               	movlb	0	; () banked
  1909  002B64  51DD               	movf	_Ready& (0+255),w,b
  1910  002B66  0100               	movlb	0	; () banked
  1911  002B68  11DE               	iorwf	(_Ready+1)& (0+255),w,b
  1912  002B6A  B4D8               	btfsc	status,2,c
  1913  002B6C  D7F5               	goto	l4111
  1914  002B6E  D789               	goto	l4099
  1915  002B70                     __end_of_ES_Run:
  1916                           	opt stack 0
  1917                           tosu	equ	0xFFF
  1918                           tosh	equ	0xFFE
  1919                           tosl	equ	0xFFD
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           postdec1	equ	0xFE5
  1930                           fsr1h	equ	0xFE2
  1931                           fsr1l	equ	0xFE1
  1932                           indf2	equ	0xFDF
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function __HW_Process_Pending_Ints *****************
  1938 ;; Defined at:
  1939 ;;		line 225 in file "ES_Port.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      unsigned char 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1953 ;;      Params:         0       0       0       0
  1954 ;;      Locals:         0       0       0       0
  1955 ;;      Temps:          0       0       0       0
  1956 ;;      Totals:         0       0       0       0
  1957 ;;Total ram usage:        0 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:   12
  1960 ;; This function calls:
  1961 ;;		_ES_Timer_Tick_Resp
  1962 ;; This function is called by:
  1963 ;;		_ES_Run
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text4
  1968  003B8C                     __ptext4:
  1969                           	opt stack 0
  1970  003B8C                     __HW_Process_Pending_Ints:
  1971                           	opt stack 17
  1972                           
  1973                           ;ES_Port.c: 227: while (TickCount > 0)
  1974                           
  1975                           ;incstack = 0
  1976  003B8C  D004               	goto	l3887
  1977  003B8E                     l3883:
  1978                           
  1979                           ;ES_Port.c: 228: {
  1980                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1981  003B8E  ECB3  F013         	call	_ES_Timer_Tick_Resp	;wreg free
  1982                           
  1983                           ;ES_Port.c: 231: TickCount--;
  1984  003B92  0100               	movlb	0	; () banked
  1985  003B94  07E8               	decf	_TickCount& (0+255),f,b	;volatile
  1986  003B96                     l3887:
  1987  003B96  0100               	movlb	0	; () banked
  1988  003B98  51E8               	movf	_TickCount& (0+255),w,b	;volatile
  1989  003B9A  A4D8               	btfss	status,2,c
  1990  003B9C  D7F8               	goto	l3883
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;ES_Port.c: 232: }
  1994                           ;ES_Port.c: 234: return 1;
  1995                           
  1996                           ; BSR set to: 0
  1997  003B9E  0E01               	movlw	1
  1998  003BA0  0012               	return	
  1999  003BA2                     __end_of__HW_Process_Pending_Ints:
  2000                           	opt stack 0
  2001                           tosu	equ	0xFFF
  2002                           tosh	equ	0xFFE
  2003                           tosl	equ	0xFFD
  2004                           pclath	equ	0xFFA
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           prodh	equ	0xFF4
  2010                           prodl	equ	0xFF3
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           postdec1	equ	0xFE5
  2014                           fsr1h	equ	0xFE2
  2015                           fsr1l	equ	0xFE1
  2016                           indf2	equ	0xFDF
  2017                           fsr2h	equ	0xFDA
  2018                           fsr2l	equ	0xFD9
  2019                           status	equ	0xFD8
  2020                           
  2021 ;; *************** function _ES_Timer_Tick_Resp *****************
  2022 ;; Defined at:
  2023 ;;		line 284 in file "ES_Timers.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2037 ;;      Params:         0       0       0       0
  2038 ;;      Locals:         0       0       0       0
  2039 ;;      Temps:          0       4       0       0
  2040 ;;      Totals:         0       4       0       0
  2041 ;;Total ram usage:        4 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:   11
  2044 ;; This function calls:
  2045 ;;		Absolute function
  2046 ;;		_ES_GetMSBitSet
  2047 ;;		_PostPatternControlService
  2048 ;;		_PostSPI32ControlService
  2049 ;; This function is called by:
  2050 ;;		__HW_Process_Pending_Ints
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text5
  2055  002766                     __ptext5:
  2056                           	opt stack 0
  2057  002766                     _ES_Timer_Tick_Resp:
  2058                           	opt stack 17
  2059                           
  2060                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  2061                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  2062                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  2063                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;incstack = 0
  2067  002766  0100               	movlb	0	; () banked
  2068  002768  51DF               	movf	_TMR_ActiveFlags& (0+255),w,b
  2069  00276A  0100               	movlb	0	; () banked
  2070  00276C  11E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  2071  00276E  B4D8               	btfsc	status,2,c
  2072  002770  0012               	return	
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;ES_Timers.c: 291: {
  2076                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  2077  002772  C0DF  F0D5         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  2078  002776  C0E0  F0D6         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  2079  00277A                     l3759:
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2083  00277A  C0D5  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  2084  00277E  C0D6  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  2085  002782  EC7C  F018         	call	_ES_GetMSBitSet	;wreg free
  2086  002786  0100               	movlb	0	; () banked
  2087  002788  6FE1               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  2091  00278A  0100               	movlb	0	; () banked
  2092  00278C  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2093  00278E  0D02               	mullw	2
  2094  002790  0E00               	movlw	low _TMR_TimerArray
  2095  002792  24F3               	addwf	prodl,w,c
  2096  002794  6ED9               	movwf	fsr2l,c
  2097  002796  0E01               	movlw	high _TMR_TimerArray
  2098  002798  20F4               	addwfc	prodh,w,c
  2099  00279A  6EDA               	movwf	fsr2h,c
  2100  00279C  06DE               	decf	postinc2,f,c
  2101  00279E  0E00               	movlw	0
  2102  0027A0  5ADD               	subwfb	postdec2,f,c
  2103  0027A2  50DE               	movf	postinc2,w,c
  2104  0027A4  10DE               	iorwf	postinc2,w,c
  2105  0027A6  A4D8               	btfss	status,2,c
  2106  0027A8  D043               	goto	l3771
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;ES_Timers.c: 299: {
  2110                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  2111  0027AA  0E03               	movlw	3
  2112  0027AC  0100               	movlb	0	; () banked
  2113  0027AE  6FD2               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2117  0027B0  C0E1  F0D3         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2118  0027B4  0100               	movlb	0	; () banked
  2119  0027B6  6BD4               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2123  0027B8  C0D2  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2124  0027BC  C0D3  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2125  0027C0  C0D4  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2126  0027C4  0100               	movlb	0	; () banked
  2127  0027C6  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2128  0027C8  0D02               	mullw	2
  2129  0027CA  0E21               	movlw	low _Timer2PostFunc
  2130  0027CC  24F3               	addwf	prodl,w,c
  2131  0027CE  6EF6               	movwf	tblptrl,c
  2132  0027D0  0E03               	movlw	high _Timer2PostFunc
  2133  0027D2  20F4               	addwfc	prodh,w,c
  2134  0027D4  6EF7               	movwf	tblptrh,c
  2135  0027D6                     	if	0	;There are less than 3 active tblptr bytes
  2136  0027D6                     	endif
  2137  0027D6  D801               	call	u2638
  2138  0027D8  D00C               	goto	l3769
  2139  0027DA                     u2638:
  2140  0027DA  0005               	push	
  2141  0027DC  6EFA               	movwf	pclath,c
  2142  0027DE  0009               	tblrd		*+
  2143  0027E0  50F5               	movf	tablat,w,c
  2144  0027E2  6EFD               	movwf	tosl,c
  2145  0027E4  0009               	tblrd		*+
  2146  0027E6  50F5               	movf	tablat,w,c
  2147  0027E8  6EFE               	movwf	tosh,c
  2148  0027EA  50F8               	movf	tblptru,w,c
  2149  0027EC  6EFF               	movwf	tosu,c
  2150  0027EE  50FA               	movf	pclath,w,c
  2151  0027F0  0012               	return		;indir
  2152  0027F2                     l3769:
  2153                           
  2154                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2155  0027F2  0100               	movlb	0	; () banked
  2156  0027F4  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2157  0027F6  0D02               	mullw	2
  2158  0027F8  0E01               	movlw	low _BitNum2SetMask
  2159  0027FA  24F3               	addwf	prodl,w,c
  2160  0027FC  6EF6               	movwf	tblptrl,c
  2161  0027FE  0E03               	movlw	high _BitNum2SetMask
  2162  002800  20F4               	addwfc	prodh,w,c
  2163  002802  6EF7               	movwf	tblptrh,c
  2164  002804                     	if	0	;There are less than 3 active tblptr bytes
  2165  002804                     	endif
  2166  002804  0009               	tblrd		*+
  2167  002806  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2168  00280A  0009               	tblrd		*+
  2169  00280C  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2170  002810  0100               	movlb	0	; () banked
  2171  002812  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2172  002814  0100               	movlb	0	; () banked
  2173  002816  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2174  002818  0100               	movlb	0	; () banked
  2175  00281A  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2176  00281C  0100               	movlb	0	; () banked
  2177  00281E  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2178  002820  0100               	movlb	0	; () banked
  2179  002822  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2180  002824  0100               	movlb	0	; () banked
  2181  002826  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2182  002828  0100               	movlb	0	; () banked
  2183  00282A  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2184  00282C  0100               	movlb	0	; () banked
  2185  00282E  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2186  002830                     l3771:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;ES_Timers.c: 306: }
  2190                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2191  002830  0100               	movlb	0	; () banked
  2192  002832  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2193  002834  0D02               	mullw	2
  2194  002836  0E01               	movlw	low _BitNum2SetMask
  2195  002838  24F3               	addwf	prodl,w,c
  2196  00283A  6EF6               	movwf	tblptrl,c
  2197  00283C  0E03               	movlw	high _BitNum2SetMask
  2198  00283E  20F4               	addwfc	prodh,w,c
  2199  002840  6EF7               	movwf	tblptrh,c
  2200  002842                     	if	0	;There are less than 3 active tblptr bytes
  2201  002842                     	endif
  2202  002842  0009               	tblrd		*+
  2203  002844  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2204  002848  0009               	tblrd		*+
  2205  00284A  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2206  00284E  0100               	movlb	0	; () banked
  2207  002850  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2208  002852  0100               	movlb	0	; () banked
  2209  002854  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2210  002856  0100               	movlb	0	; () banked
  2211  002858  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2212  00285A  0100               	movlb	0	; () banked
  2213  00285C  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2214  00285E  0100               	movlb	0	; () banked
  2215  002860  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2216  002862  0100               	movlb	0	; () banked
  2217  002864  17D5               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2218  002866  0100               	movlb	0	; () banked
  2219  002868  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2220  00286A  0100               	movlb	0	; () banked
  2221  00286C  17D6               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2225  00286E  0100               	movlb	0	; () banked
  2226  002870  51D5               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2227  002872  0100               	movlb	0	; () banked
  2228  002874  11D6               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2229  002876  B4D8               	btfsc	status,2,c
  2230  002878  0012               	return	
  2231  00287A  D77F               	goto	l3759
  2232  00287C                     __end_of_ES_Timer_Tick_Resp:
  2233                           	opt stack 0
  2234                           tosu	equ	0xFFF
  2235                           tosh	equ	0xFFE
  2236                           tosl	equ	0xFFD
  2237                           pclath	equ	0xFFA
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           prodh	equ	0xFF4
  2243                           prodl	equ	0xFF3
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           postdec1	equ	0xFE5
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _ES_GetMSBitSet *****************
  2257 ;; Defined at:
  2258 ;;		line 79 in file "ES_LookupTables.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  LoopCntr        1    9[BANK0 ] char 
  2263 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2264 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      unsigned char 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2274 ;;      Params:         0       2       0       0
  2275 ;;      Locals:         0       3       0       0
  2276 ;;      Temps:          0       5       0       0
  2277 ;;      Totals:         0      10       0       0
  2278 ;;Total ram usage:       10 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    7
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_ES_Run
  2285 ;;		_ES_Timer_Tick_Resp
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text6
  2290  0030F8                     __ptext6:
  2291                           	opt stack 0
  2292  0030F8                     _ES_GetMSBitSet:
  2293                           	opt stack 20
  2294                           
  2295                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2296                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2297                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;incstack = 0
  2301  0030F8  0E80               	movlw	128
  2302  0030FA  0100               	movlb	0	; () banked
  2303  0030FC  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2304                           
  2305                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2306  0030FE  0E03               	movlw	3
  2307  003100  0100               	movlb	0	; () banked
  2308  003102  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2309  003104                     l3511:
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2313  003104  0100               	movlb	0	; () banked
  2314  003106  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2315  003108  D046               	goto	l3525
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2319                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2320                           ;ES_LookupTables.c: 91: 0x0F);
  2321                           
  2322                           ; BSR set to: 0
  2323                           
  2324                           ; BSR set to: 0
  2325  00310A  0100               	movlb	0	; () banked
  2326  00310C  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2327  00310E  0D04               	mullw	4
  2328  003110  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2329  003114  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2330  003118  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2331  00311C  0100               	movlb	0	; () banked
  2332  00311E  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2333  003120  D004               	goto	u2364
  2334  003122                     u2365:
  2335  003122  0100               	movlb	0	; () banked
  2336  003124  90D8               	bcf	status,0,c
  2337  003126  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2338  003128  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2339  00312A                     u2364:
  2340  00312A  0100               	movlb	0	; () banked
  2341  00312C  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2342  00312E  D7F9               	goto	u2365
  2343  003130  0100               	movlb	0	; () banked
  2344  003132  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2345  003134  0B0F               	andlw	15
  2346  003136  0100               	movlb	0	; () banked
  2347  003138  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2351  00313A  0100               	movlb	0	; () banked
  2352  00313C  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2353  00313E  0100               	movlb	0	; () banked
  2354  003140  B4D8               	btfsc	status,2,c
  2355  003142  D026               	goto	l3521
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2359                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2360  003144  0EFF               	movlw	255
  2361  003146  0100               	movlb	0	; () banked
  2362  003148  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2363  00314A  0EFF               	movlw	255
  2364  00314C  0100               	movlb	0	; () banked
  2365  00314E  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2366  003150  0100               	movlb	0	; () banked
  2367  003152  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2368  003154  0100               	movlb	0	; () banked
  2369  003156  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2370  003158  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2371  00315A  0100               	movlb	0	; () banked
  2372  00315C  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2373  00315E  0100               	movlb	0	; () banked
  2374  003160  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2375  003162  0100               	movlb	0	; () banked
  2376  003164  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2377  003166  0100               	movlb	0	; () banked
  2378  003168  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2379  00316A  0E41               	movlw	low _Nybble2MSBitNum
  2380  00316C  0100               	movlb	0	; () banked
  2381  00316E  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2382  003170  6EF6               	movwf	tblptrl,c
  2383  003172  0E03               	movlw	high _Nybble2MSBitNum
  2384  003174  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2385  003176  6EF7               	movwf	tblptrh,c
  2386  003178                     	if	0	;There are less than 3 active tblptr bytes
  2387  003178                     	endif
  2388  003178  0008               	tblrd		*
  2389  00317A  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2390  00317E  0100               	movlb	0	; () banked
  2391  003180  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2392  003182  0D04               	mullw	4
  2393  003184  50F3               	movf	prodl,w,c
  2394  003186  0100               	movlb	0	; () banked
  2395  003188  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2396  00318A  0100               	movlb	0	; () banked
  2397  00318C  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2398                           
  2399                           ;ES_LookupTables.c: 96: break;
  2400  00318E  D003               	goto	l3525
  2401  003190                     l3521:
  2402                           
  2403                           ; BSR set to: 0
  2404  003190  0100               	movlb	0	; () banked
  2405  003192  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2406  003194  D7B7               	goto	l3511
  2407  003196                     l3525:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;ES_LookupTables.c: 97: }
  2411                           ;ES_LookupTables.c: 98: }
  2412                           ;ES_LookupTables.c: 99: return ReturnVal;
  2413  003196  0100               	movlb	0	; () banked
  2414  003198  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2415  00319A  0012               	return	
  2416  00319C                     __end_of_ES_GetMSBitSet:
  2417                           	opt stack 0
  2418                           tosu	equ	0xFFF
  2419                           tosh	equ	0xFFE
  2420                           tosl	equ	0xFFD
  2421                           pclath	equ	0xFFA
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           prodh	equ	0xFF4
  2427                           prodl	equ	0xFF3
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1h	equ	0xFE2
  2432                           fsr1l	equ	0xFE1
  2433                           indf2	equ	0xFDF
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _RunPatternControlService *****************
  2441 ;; Defined at:
  2442 ;;		line 159 in file "Pattern_ControlService.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  testEvent       3   97[BANK0 ] struct ES_Event_t
  2447 ;;  ReturnEvent     3   94[BANK0 ] struct ES_Event_t
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  3   91[BANK0 ] struct ES_Event_t
  2450 ;; Registers used:
  2451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2457 ;;      Params:         0       3       0       0
  2458 ;;      Locals:         0       6       0       0
  2459 ;;      Temps:          0       0       0       0
  2460 ;;      Totals:         0       9       0       0
  2461 ;;Total ram usage:        9 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:   14
  2464 ;; This function calls:
  2465 ;;		_PausePattern
  2466 ;;		_PostPatternControlService
  2467 ;;		_ShowPattern
  2468 ;;		_StopPattern
  2469 ;; This function is called by:
  2470 ;;		_ES_Run
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text7
  2475  002E0C                     __ptext7:
  2476                           	opt stack 0
  2477  002E0C                     _RunPatternControlService:
  2478                           	opt stack 15
  2479                           
  2480                           ;Pattern_ControlService.c: 161: ES_Event ReturnEvent;
  2481                           ;Pattern_ControlService.c: 162: ReturnEvent.EventType = ES_NO_EVENT;
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;incstack = 0
  2485  002E0C  0E00               	movlw	0
  2486  002E0E  0100               	movlb	0	; () banked
  2487  002E10  6FBE               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2488                           
  2489                           ;Pattern_ControlService.c: 164: switch(CurrentState){
  2490  002E12  D04B               	goto	l3963
  2491  002E14                     l3919:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;Pattern_ControlService.c: 167: if(ThisEvent.EventType == ES_INIT){
  2495  002E14  0E02               	movlw	2
  2496  002E16  0100               	movlb	0	; () banked
  2497  002E18  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2498  002E1A  A4D8               	btfss	status,2,c
  2499  002E1C  D054               	goto	l326
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;Pattern_ControlService.c: 171: StopPattern();
  2503  002E1E  EC68  F01D         	call	_StopPattern	;wreg free
  2504                           
  2505                           ;Pattern_ControlService.c: 173: CurrentState = Pattern_Off;
  2506  002E22  0E01               	movlw	1
  2507  002E24  0100               	movlb	0	; () banked
  2508  002E26  6FE4               	movwf	_CurrentState& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;Pattern_ControlService.c: 176: ES_Event testEvent;
  2512                           ;Pattern_ControlService.c: 177: testEvent.EventType = PATTERN_START;
  2513  002E28  0E05               	movlw	5
  2514  002E2A  0100               	movlb	0	; () banked
  2515  002E2C  6FC1               	movwf	RunPatternControlService@testEvent& (0+255),b
  2516                           
  2517                           ;Pattern_ControlService.c: 178: PostPatternControlService(testEvent);
  2518  002E2E  C0C1  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2519  002E32  C0C2  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2520  002E36  C0C3  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2521  002E3A  EC76  F01D         	call	_PostPatternControlService	;wreg free
  2522                           
  2523                           ;Pattern_ControlService.c: 180: }
  2524                           ;Pattern_ControlService.c: 181: break;
  2525  002E3E  D043               	goto	l326
  2526  002E40                     l3927:
  2527                           
  2528                           ;Pattern_ControlService.c: 185: if(ThisEvent.EventType == PATTERN_START){
  2529  002E40  0E05               	movlw	5
  2530  002E42  0100               	movlb	0	; () banked
  2531  002E44  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2532  002E46  A4D8               	btfss	status,2,c
  2533  002E48  D03E               	goto	l326
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;Pattern_ControlService.c: 187: ShowPattern();
  2537  002E4A  EC39  F01D         	call	_ShowPattern	;wreg free
  2538  002E4E                     l3931:
  2539                           
  2540                           ;Pattern_ControlService.c: 189: CurrentState = Pattern_Running;
  2541  002E4E  0E02               	movlw	2
  2542  002E50  D029               	goto	L4
  2543  002E52                     l3933:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;Pattern_ControlService.c: 195: if(ThisEvent.EventType == ES_TIMEOUT){
  2547  002E52  0E03               	movlw	3
  2548  002E54  0100               	movlb	0	; () banked
  2549  002E56  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2550  002E58  A4D8               	btfss	status,2,c
  2551  002E5A  D003               	goto	l3937
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;Pattern_ControlService.c: 197: ShowPattern();
  2555  002E5C  EC39  F01D         	call	_ShowPattern	;wreg free
  2556                           
  2557                           ;Pattern_ControlService.c: 198: }
  2558  002E60  D032               	goto	l326
  2559  002E62                     l3937:
  2560                           
  2561                           ;Pattern_ControlService.c: 200: else if(ThisEvent.EventType == PATTERN_END){
  2562  002E62  0E06               	movlw	6
  2563  002E64  0100               	movlb	0	; () banked
  2564  002E66  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2565  002E68  A4D8               	btfss	status,2,c
  2566  002E6A  D003               	goto	l3943
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;Pattern_ControlService.c: 202: StopPattern();
  2570  002E6C  EC68  F01D         	call	_StopPattern	;wreg free
  2571  002E70  D018               	goto	L22
  2572  002E72                     l3943:
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;Pattern_ControlService.c: 207: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2576  002E72  0E07               	movlw	7
  2577  002E74  0100               	movlb	0	; () banked
  2578  002E76  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2579  002E78  A4D8               	btfss	status,2,c
  2580  002E7A  D025               	goto	l326
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;Pattern_ControlService.c: 209: PausePattern();
  2584  002E7C  EC08  F01E         	call	_PausePattern	;wreg free
  2585                           
  2586                           ;Pattern_ControlService.c: 211: CurrentState = Pattern_Paused;
  2587  002E80  0E03               	movlw	3
  2588  002E82  D010               	goto	L4
  2589  002E84                     l3949:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;Pattern_ControlService.c: 217: if(ThisEvent.EventType == PATTERN_START){
  2593  002E84  0E05               	movlw	5
  2594  002E86  0100               	movlb	0	; () banked
  2595  002E88  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2596  002E8A  A4D8               	btfss	status,2,c
  2597  002E8C  D003               	goto	l3955
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;Pattern_ControlService.c: 219: ShowPattern();
  2601  002E8E  EC39  F01D         	call	_ShowPattern	;wreg free
  2602  002E92  D7DD               	goto	l3931
  2603  002E94                     l3955:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;Pattern_ControlService.c: 224: else if(ThisEvent.EventType == PATTERN_END){
  2607  002E94  0E06               	movlw	6
  2608  002E96  0100               	movlb	0	; () banked
  2609  002E98  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2610  002E9A  A4D8               	btfss	status,2,c
  2611  002E9C  D014               	goto	l326
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;Pattern_ControlService.c: 226: StopPattern();
  2615  002E9E  EC68  F01D         	call	_StopPattern	;wreg free
  2616  002EA2                     L22:
  2617                           
  2618                           ;Pattern_ControlService.c: 228: CurrentState = Pattern_Off;
  2619  002EA2  0E01               	movlw	1
  2620  002EA4                     L4:
  2621  002EA4  0100               	movlb	0	; () banked
  2622  002EA6  6FE4               	movwf	_CurrentState& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;Pattern_ControlService.c: 231: }
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;Pattern_ControlService.c: 229: }
  2629                           ;Pattern_ControlService.c: 230: break;
  2630                           
  2631                           ; BSR set to: 0
  2632  002EA8  D00E               	goto	l326
  2633  002EAA                     l3963:
  2634                           
  2635                           ; BSR set to: 0
  2636  002EAA  0100               	movlb	0	; () banked
  2637  002EAC  51E4               	movf	_CurrentState& (0+255),w,b
  2638                           
  2639                           ; Switch size 1, requested type "space"
  2640                           ; Number of cases is 4, Range of values is 0 to 3
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte           13     7 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  002EAE  0A00               	xorlw	0	; case 0
  2646  002EB0  B4D8               	btfsc	status,2,c
  2647  002EB2  D7B0               	goto	l3919
  2648  002EB4  0A01               	xorlw	1	; case 1
  2649  002EB6  B4D8               	btfsc	status,2,c
  2650  002EB8  D7C3               	goto	l3927
  2651  002EBA  0A03               	xorlw	3	; case 2
  2652  002EBC  B4D8               	btfsc	status,2,c
  2653  002EBE  D7C9               	goto	l3933
  2654  002EC0  0A01               	xorlw	1	; case 3
  2655  002EC2  B4D8               	btfsc	status,2,c
  2656  002EC4  D7DF               	goto	l3949
  2657  002EC6                     l326:
  2658                           
  2659                           ;Pattern_ControlService.c: 232: return ReturnEvent;
  2660  002EC6  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2661  002ECA  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2662  002ECE  C0C0  F0BD         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2663  002ED2  0012               	return		;funcret
  2664  002ED4                     __end_of_RunPatternControlService:
  2665                           	opt stack 0
  2666                           tosu	equ	0xFFF
  2667                           tosh	equ	0xFFE
  2668                           tosl	equ	0xFFD
  2669                           pclath	equ	0xFFA
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _RunSPI32ControlService *****************
  2689 ;; Defined at:
  2690 ;;		line 138 in file "SPI32_ControlService.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  ReturnEvent     3  101[BANK0 ] struct ES_Event_t
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  3   91[BANK0 ] struct ES_Event_t
  2697 ;; Registers used:
  2698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       3       0       0
  2705 ;;      Locals:         0       3       0       0
  2706 ;;      Temps:          0       7       0       0
  2707 ;;      Totals:         0      13       0       0
  2708 ;;Total ram usage:       13 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    8
  2711 ;; This function calls:
  2712 ;;		_GetNextFrame
  2713 ;;		_SPI32_SendFrame
  2714 ;; This function is called by:
  2715 ;;		_ES_Run
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text8
  2720  00287C                     __ptext8:
  2721                           	opt stack 0
  2722  00287C                     _RunSPI32ControlService:
  2723                           	opt stack 21
  2724                           
  2725                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2726                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2727                           
  2728                           ;incstack = 0
  2729  00287C  0E00               	movlw	0
  2730  00287E  0100               	movlb	0	; () banked
  2731  002880  6FC5               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2732                           
  2733                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2734  002882  D06D               	goto	l4013
  2735  002884                     l3987:
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2739  002884  0E02               	movlw	2
  2740  002886  0100               	movlb	0	; () banked
  2741  002888  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2742  00288A  A4D8               	btfss	status,2,c
  2743  00288C  D073               	goto	l410
  2744  00288E  D063               	goto	l4009
  2745  002890                     l3991:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2749  002890  0E08               	movlw	8
  2750  002892  0100               	movlb	0	; () banked
  2751  002894  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2752  002896  A4D8               	btfss	status,2,c
  2753  002898  D06D               	goto	l410
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2757  00289A  EC92  F01D         	call	_GetNextFrame	;wreg free
  2758  00289E  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2759  0028A2  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2760  0028A6  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2761  0028AA  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2762                           
  2763                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2764  0028AE  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2765  0028B2  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2766  0028B6  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2767  0028BA  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2768  0028BE  EC7B  F01B         	call	_SPI32_SendFrame	;wreg free
  2769                           
  2770                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2771  0028C2  0E02               	movlw	2
  2772  0028C4  D049               	goto	L6
  2773  0028C6                     l3999:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2777  0028C6  0E03               	movlw	3
  2778  0028C8  0100               	movlb	0	; () banked
  2779  0028CA  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2780  0028CC  A4D8               	btfss	status,2,c
  2781  0028CE  D052               	goto	l410
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2785  0028D0  0EFF               	movlw	255
  2786  0028D2  0100               	movlb	0	; () banked
  2787  0028D4  6FBE               	movwf	??_RunSPI32ControlService& (0+255),b
  2788  0028D6  0EFF               	movlw	255
  2789  0028D8  0100               	movlb	0	; () banked
  2790  0028DA  6FBF               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2791  0028DC  0100               	movlb	0	; () banked
  2792  0028DE  51E7               	movf	_NumFrames& (0+255),w,b
  2793  0028E0  0100               	movlb	0	; () banked
  2794  0028E2  6FC0               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2795  0028E4  6BC1               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2796  0028E6  0100               	movlb	0	; () banked
  2797  0028E8  51BE               	movf	??_RunSPI32ControlService& (0+255),w,b
  2798  0028EA  0100               	movlb	0	; () banked
  2799  0028EC  27C0               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2800  0028EE  0100               	movlb	0	; () banked
  2801  0028F0  51BF               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2802  0028F2  0100               	movlb	0	; () banked
  2803  0028F4  23C1               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2804  0028F6  0100               	movlb	0	; () banked
  2805  0028F8  2BE5               	incf	_FrameIndex& (0+255),f,b
  2806  0028FA  05E5               	decf	_FrameIndex& (0+255),w,b
  2807  0028FC  0100               	movlb	0	; () banked
  2808  0028FE  6FC2               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2809  002900  6BC3               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2810  002902  0100               	movlb	0	; () banked
  2811  002904  51C0               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2812  002906  0100               	movlb	0	; () banked
  2813  002908  5DC2               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2814  00290A  0100               	movlb	0	; () banked
  2815  00290C  51C3               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2816  00290E  0A80               	xorlw	128
  2817  002910  0100               	movlb	0	; () banked
  2818  002912  6FC4               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2819  002914  0100               	movlb	0	; () banked
  2820  002916  51C1               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2821  002918  0A80               	xorlw	128
  2822  00291A  0100               	movlb	0	; () banked
  2823  00291C  59C4               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2824  00291E  B0D8               	btfsc	status,0,c
  2825  002920  D01A               	goto	l4009
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;SPI32_ControlService.c: 176: FramePointer++;
  2829  002922  0E04               	movlw	4
  2830  002924  0100               	movlb	0	; () banked
  2831  002926  27D7               	addwf	_FramePointer& (0+255),f,b
  2832  002928  0E00               	movlw	0
  2833  00292A  23D8               	addwfc	(_FramePointer+1)& (0+255),f,b
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2837  00292C  EC92  F01D         	call	_GetNextFrame	;wreg free
  2838  002930  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2839  002934  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2840  002938  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2841  00293C  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2842                           
  2843                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2844  002940  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2845  002944  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2846  002948  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2847  00294C  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2848  002950  EC7B  F01B         	call	_SPI32_SendFrame	;wreg free
  2849                           
  2850                           ;SPI32_ControlService.c: 180: }
  2851  002954  D00F               	goto	l410
  2852  002956                     l4009:
  2853                           
  2854                           ;SPI32_ControlService.c: 182: else{
  2855                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2856  002956  0E01               	movlw	1
  2857  002958                     L6:
  2858  002958  0100               	movlb	0	; () banked
  2859  00295A  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;SPI32_ControlService.c: 235: }
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;SPI32_ControlService.c: 185: }
  2866                           ;SPI32_ControlService.c: 186: }
  2867                           ;SPI32_ControlService.c: 188: break;
  2868                           
  2869                           ; BSR set to: 0
  2870  00295C  D00B               	goto	l410
  2871  00295E                     l4013:
  2872                           
  2873                           ; BSR set to: 0
  2874  00295E  0100               	movlb	0	; () banked
  2875  002960  51E2               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2876                           
  2877                           ; Switch size 1, requested type "space"
  2878                           ; Number of cases is 3, Range of values is 0 to 2
  2879                           ; switch strategies available:
  2880                           ; Name         Instructions Cycles
  2881                           ; simple_byte           10     6 (average)
  2882                           ;	Chosen strategy is simple_byte
  2883  002962  0A00               	xorlw	0	; case 0
  2884  002964  B4D8               	btfsc	status,2,c
  2885  002966  D78E               	goto	l3987
  2886  002968  0A01               	xorlw	1	; case 1
  2887  00296A  B4D8               	btfsc	status,2,c
  2888  00296C  D791               	goto	l3991
  2889  00296E  0A03               	xorlw	3	; case 2
  2890  002970  B4D8               	btfsc	status,2,c
  2891  002972  D7A9               	goto	l3999
  2892  002974                     l410:
  2893                           
  2894                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2895  002974  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2896  002978  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2897  00297C  C0C7  F0BD         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2898  002980  0012               	return		;funcret
  2899  002982                     __end_of_RunSPI32ControlService:
  2900                           	opt stack 0
  2901                           tosu	equ	0xFFF
  2902                           tosh	equ	0xFFE
  2903                           tosl	equ	0xFFD
  2904                           pclath	equ	0xFFA
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1h	equ	0xFE2
  2915                           fsr1l	equ	0xFE1
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _SPI32_SendFrame *****************
  2924 ;; Defined at:
  2925 ;;		line 85 in file "SPI32_HW.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, prodl, prodh
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2939 ;;      Params:         0       4       0       0
  2940 ;;      Locals:         0       0       0       0
  2941 ;;      Temps:          0       4       0       0
  2942 ;;      Totals:         0       8       0       0
  2943 ;;Total ram usage:        8 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    7
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_RunSPI32ControlService
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text9
  2954  0036F6                     __ptext9:
  2955                           	opt stack 0
  2956  0036F6                     _SPI32_SendFrame:
  2957                           	opt stack 21
  2958                           
  2959                           ;SPI32_HW.c: 100: if(FrameByte == 4){
  2960                           
  2961                           ;incstack = 0
  2962  0036F6  0E04               	movlw	4
  2963  0036F8  0100               	movlb	0	; () banked
  2964  0036FA  19F5               	xorwf	_FrameByte& (0+255),w,b
  2965  0036FC  A4D8               	btfss	status,2,c
  2966  0036FE  D008               	goto	l3819
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
  2970  003700  C060  F036         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2971  003704  C061  F037         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2972  003708  C062  F038         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2973  00370C  C063  F039         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2974  003710                     l3819:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;SPI32_HW.c: 103: }
  2978                           ;SPI32_HW.c: 105: FrameByte--;
  2979  003710  0100               	movlb	0	; () banked
  2980  003712  07F5               	decf	_FrameByte& (0+255),f,b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  2984  003714  0100               	movlb	0	; () banked
  2985  003716  51F5               	movf	_FrameByte& (0+255),w,b
  2986  003718  0D08               	mullw	8
  2987  00371A  50F3               	movf	prodl,w,c
  2988  00371C  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  2989  003720  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  2990  003724  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  2991  003728  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  2992  00372C  0100               	movlb	0	; () banked
  2993  00372E  2AE8               	incf	wreg,f,c
  2994  003730  D005               	goto	u2660
  2995  003732                     u2665:
  2996  003732  90D8               	bcf	status,0,c
  2997  003734  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  2998  003736  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  2999  003738  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  3000  00373A  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  3001  00373C                     u2660:
  3002  00373C  2EE8               	decfsz	wreg,f,c
  3003  00373E  D7F9               	goto	u2665
  3004  003740  0100               	movlb	0	; () banked
  3005  003742  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  3006  003744  6EC9               	movwf	4041,c	;volatile
  3007                           
  3008                           ; BSR set to: 0
  3009  003746  0012               	return		;funcret
  3010  003748                     __end_of_SPI32_SendFrame:
  3011                           	opt stack 0
  3012                           tosu	equ	0xFFF
  3013                           tosh	equ	0xFFE
  3014                           tosl	equ	0xFFD
  3015                           pclath	equ	0xFFA
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           indf2	equ	0xFDF
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _GetNextFrame *****************
  3035 ;; Defined at:
  3036 ;;		line 258 in file "SPI32_ControlService.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  4    0[BANK0 ] unsigned long 
  3043 ;; Registers used:
  3044 ;;		fsr2l, fsr2h
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3050 ;;      Params:         0       4       0       0
  3051 ;;      Locals:         0       0       0       0
  3052 ;;      Temps:          0       0       0       0
  3053 ;;      Totals:         0       4       0       0
  3054 ;;Total ram usage:        4 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    7
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_RunSPI32ControlService
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text10
  3065  003B24                     __ptext10:
  3066                           	opt stack 0
  3067  003B24                     _GetNextFrame:
  3068                           	opt stack 21
  3069                           
  3070                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;incstack = 0
  3074  003B24  C0D7  FFD9         	movff	_FramePointer,fsr2l
  3075  003B28  C0D8  FFDA         	movff	_FramePointer+1,fsr2h
  3076  003B2C  CFDE F060          	movff	postinc2,?_GetNextFrame
  3077  003B30  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3078  003B34  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3079  003B38  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3080  003B3C  0012               	return	
  3081  003B3E                     __end_of_GetNextFrame:
  3082                           	opt stack 0
  3083                           tosu	equ	0xFFF
  3084                           tosh	equ	0xFFE
  3085                           tosl	equ	0xFFD
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _StopPattern *****************
  3106 ;; Defined at:
  3107 ;;		line 271 in file "Pattern_ControlService.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3121 ;;      Params:         0       0       0       0
  3122 ;;      Locals:         0       0       0       0
  3123 ;;      Temps:          0       0       0       0
  3124 ;;      Totals:         0       0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   13
  3128 ;; This function calls:
  3129 ;;		_DotStar_Show
  3130 ;;		_ES_Timer_StopTimer
  3131 ;;		_PatternOff
  3132 ;;		_ResetPattern
  3133 ;; This function is called by:
  3134 ;;		_RunPatternControlService
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text11
  3139  003AD0                     __ptext11:
  3140                           	opt stack 0
  3141  003AD0                     _StopPattern:
  3142                           	opt stack 15
  3143                           
  3144                           ;Pattern_ControlService.c: 273: ES_Timer_StopTimer(0);
  3145                           
  3146                           ;incstack = 0
  3147  003AD0  0E00               	movlw	0
  3148  003AD2  ECCD  F01B         	call	_ES_Timer_StopTimer
  3149                           
  3150                           ;Pattern_ControlService.c: 275: DotStar_Show(PatternOff());
  3151  003AD6  EC3D  F01C         	call	_PatternOff	;wreg free
  3152  003ADA  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3153  003ADE  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3154  003AE2  EC88  F012         	call	_DotStar_Show	;wreg free
  3155                           
  3156                           ;Pattern_ControlService.c: 277: ResetPattern();
  3157  003AE6  EC9F  F01D         	call	_ResetPattern	;wreg free
  3158  003AEA  0012               	return		;funcret
  3159  003AEC                     __end_of_StopPattern:
  3160                           	opt stack 0
  3161                           tosu	equ	0xFFF
  3162                           tosh	equ	0xFFE
  3163                           tosl	equ	0xFFD
  3164                           pclath	equ	0xFFA
  3165                           tblptru	equ	0xFF8
  3166                           tblptrh	equ	0xFF7
  3167                           tblptrl	equ	0xFF6
  3168                           tablat	equ	0xFF5
  3169                           prodh	equ	0xFF4
  3170                           prodl	equ	0xFF3
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           postdec1	equ	0xFE5
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _ResetPattern *****************
  3184 ;; Defined at:
  3185 ;;		line 77 in file "Pattern_PtrnGenerator.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       0       0       0
  3200 ;;      Locals:         0       0       0       0
  3201 ;;      Temps:          0       0       0       0
  3202 ;;      Totals:         0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    7
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_StopPattern
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text12
  3214  003B3E                     __ptext12:
  3215                           	opt stack 0
  3216  003B3E                     _ResetPattern:
  3217                           	opt stack 20
  3218                           
  3219                           ;Pattern_PtrnGenerator.c: 79: PatternStepCounter = 0;
  3220                           
  3221                           ;incstack = 0
  3222  003B3E  0E00               	movlw	0
  3223  003B40  0100               	movlb	0	; () banked
  3224  003B42  6FF2               	movwf	_PatternStepCounter& (0+255),b
  3225                           
  3226                           ;Pattern_PtrnGenerator.c: 81: CycleCounter = 0;
  3227  003B44  0E00               	movlw	0
  3228  003B46  0100               	movlb	0	; () banked
  3229  003B48  6FE9               	movwf	_CycleCounter& (0+255),b
  3230  003B4A  0E00               	movlw	0
  3231  003B4C  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
  3232  003B4E  0E00               	movlw	0
  3233  003B50  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
  3234  003B52  0E00               	movlw	0
  3235  003B54  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
  3236                           
  3237                           ; BSR set to: 0
  3238  003B56  0012               	return		;funcret
  3239  003B58                     __end_of_ResetPattern:
  3240                           	opt stack 0
  3241                           tosu	equ	0xFFF
  3242                           tosh	equ	0xFFE
  3243                           tosl	equ	0xFFD
  3244                           pclath	equ	0xFFA
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           fsr1h	equ	0xFE2
  3255                           fsr1l	equ	0xFE1
  3256                           indf2	equ	0xFDF
  3257                           postinc2	equ	0xFDE
  3258                           postdec2	equ	0xFDD
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function _PatternOff *****************
  3264 ;; Defined at:
  3265 ;;		line 84 in file "Pattern_PtrnGenerator.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  i               1    2[BANK0 ] unsigned char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  2    0[BANK0 ] PTR unsigned int 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3279 ;;      Params:         0       2       0       0
  3280 ;;      Locals:         0       1       0       0
  3281 ;;      Temps:          0       0       0       0
  3282 ;;      Totals:         0       3       0       0
  3283 ;;Total ram usage:        3 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    7
  3286 ;; This function calls:
  3287 ;;		Nothing
  3288 ;; This function is called by:
  3289 ;;		_StopPattern
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text13
  3294  00387A                     __ptext13:
  3295                           	opt stack 0
  3296  00387A                     _PatternOff:
  3297                           	opt stack 20
  3298                           
  3299                           ;Pattern_PtrnGenerator.c: 85: for(uint8_t i=0;i<76;i++){
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;incstack = 0
  3303  00387A  0E00               	movlw	0
  3304  00387C  0100               	movlb	0	; () banked
  3305  00387E  6F62               	movwf	PatternOff@i& (0+255),b
  3306  003880                     l3629:
  3307                           
  3308                           ; BSR set to: 0
  3309  003880  0E4B               	movlw	75
  3310  003882  0100               	movlb	0	; () banked
  3311  003884  6562               	cpfsgt	PatternOff@i& (0+255),b
  3312  003886  D001               	goto	l3633
  3313  003888  D010               	goto	l3639
  3314  00388A                     l3633:
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;Pattern_PtrnGenerator.c: 86: PixelPattern[i] = 0x0;
  3318  00388A  0100               	movlb	0	; () banked
  3319  00388C  5162               	movf	PatternOff@i& (0+255),w,b
  3320  00388E  0D02               	mullw	2
  3321  003890  0E20               	movlw	low _PixelPattern
  3322  003892  24F3               	addwf	prodl,w,c
  3323  003894  6ED9               	movwf	fsr2l,c
  3324  003896  0E01               	movlw	high _PixelPattern
  3325  003898  20F4               	addwfc	prodh,w,c
  3326  00389A  6EDA               	movwf	fsr2h,c
  3327  00389C  0E00               	movlw	0
  3328  00389E  6EDE               	movwf	postinc2,c
  3329  0038A0  0E00               	movlw	0
  3330  0038A2  6EDD               	movwf	postdec2,c
  3331                           
  3332                           ; BSR set to: 0
  3333  0038A4  0100               	movlb	0	; () banked
  3334  0038A6  2B62               	incf	PatternOff@i& (0+255),f,b
  3335  0038A8  D7EB               	goto	l3629
  3336  0038AA                     l3639:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;Pattern_PtrnGenerator.c: 87: }
  3340                           ;Pattern_PtrnGenerator.c: 88: return PixelPattern;
  3341  0038AA  0E20               	movlw	low _PixelPattern
  3342  0038AC  0100               	movlb	0	; () banked
  3343  0038AE  6F60               	movwf	?_PatternOff& (0+255),b
  3344  0038B0  0E01               	movlw	high _PixelPattern
  3345  0038B2  0100               	movlb	0	; () banked
  3346  0038B4  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3347  0038B6  0012               	return	
  3348  0038B8                     __end_of_PatternOff:
  3349                           	opt stack 0
  3350                           tosu	equ	0xFFF
  3351                           tosh	equ	0xFFE
  3352                           tosl	equ	0xFFD
  3353                           pclath	equ	0xFFA
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           postdec1	equ	0xFE5
  3363                           fsr1h	equ	0xFE2
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _ShowPattern *****************
  3373 ;; Defined at:
  3374 ;;		line 263 in file "Pattern_ControlService.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3388 ;;      Params:         0       0       0       0
  3389 ;;      Locals:         0       0       0       0
  3390 ;;      Temps:          0       0       0       0
  3391 ;;      Totals:         0       0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:   13
  3395 ;; This function calls:
  3396 ;;		_DotStar_Show
  3397 ;;		_ES_Timer_InitTimer
  3398 ;;		_UpdatePattern
  3399 ;; This function is called by:
  3400 ;;		_RunPatternControlService
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text14
  3405  003A72                     __ptext14:
  3406                           	opt stack 0
  3407  003A72                     _ShowPattern:
  3408                           	opt stack 15
  3409                           
  3410                           ;Pattern_ControlService.c: 265: ES_Timer_InitTimer(0,PatternConfigs[3]);
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;incstack = 0
  3414  003A72  C0F9  F060         	movff	_PatternConfigs+3,ES_Timer_InitTimer@NewTime
  3415  003A76  0100               	movlb	0	; () banked
  3416  003A78  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3417  003A7A  0E00               	movlw	0
  3418  003A7C  ECA7  F019         	call	_ES_Timer_InitTimer
  3419                           
  3420                           ;Pattern_ControlService.c: 267: DotStar_Show(UpdatePattern());
  3421  003A80  EC7E  F00D         	call	_UpdatePattern	;wreg free
  3422  003A84  C090  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3423  003A88  C091  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3424  003A8C  EC88  F012         	call	_DotStar_Show	;wreg free
  3425  003A90  0012               	return		;funcret
  3426  003A92                     __end_of_ShowPattern:
  3427                           	opt stack 0
  3428                           tosu	equ	0xFFF
  3429                           tosh	equ	0xFFE
  3430                           tosl	equ	0xFFD
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           postdec2	equ	0xFDD
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _UpdatePattern *****************
  3451 ;; Defined at:
  3452 ;;		line 91 in file "Pattern_PtrnGenerator.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  i               1   53[BANK0 ] unsigned char 
  3457 ;;  i               1   52[BANK0 ] unsigned char 
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  2   48[BANK0 ] PTR unsigned int 
  3460 ;; Registers used:
  3461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3467 ;;      Params:         0       2       0       0
  3468 ;;      Locals:         0       4       0       0
  3469 ;;      Temps:          0       0       0       0
  3470 ;;      Totals:         0       6       0       0
  3471 ;;Total ram usage:        6 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    9
  3474 ;; This function calls:
  3475 ;;		_BrokenPinwheel
  3476 ;;		_CenterBreathe
  3477 ;;		_DoubleFadedLoop
  3478 ;;		_FullPulseHold
  3479 ;;		_HueTest
  3480 ;;		_MirroredQuadrants
  3481 ;;		_SingleFadedLoop
  3482 ;;		_SingleFocusPulse
  3483 ;;		___awdiv
  3484 ;; This function is called by:
  3485 ;;		_ShowPattern
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text15
  3490  001AFC                     __ptext15:
  3491                           	opt stack 0
  3492  001AFC                     _UpdatePattern:
  3493                           	opt stack 18
  3494                           
  3495                           ;Pattern_PtrnGenerator.c: 93: switch(*PatternID){
  3496                           
  3497                           ;incstack = 0
  3498  001AFC  D177               	goto	l3605
  3499  001AFE                     l3557:
  3500                           
  3501                           ;Pattern_PtrnGenerator.c: 97: for(uint8_t i=0;i<76;i++){
  3502  001AFE  0E00               	movlw	0
  3503  001B00  0100               	movlb	0	; () banked
  3504  001B02  6F94               	movwf	UpdatePattern@i& (0+255),b
  3505  001B04                     l3559:
  3506                           
  3507                           ; BSR set to: 0
  3508  001B04  0E4B               	movlw	75
  3509  001B06  0100               	movlb	0	; () banked
  3510  001B08  6594               	cpfsgt	UpdatePattern@i& (0+255),b
  3511  001B0A  D001               	goto	l3563
  3512  001B0C  D193               	goto	l3607
  3513  001B0E                     l3563:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;Pattern_PtrnGenerator.c: 98: PixelPattern[i] = 0x0;
  3517  001B0E  0100               	movlb	0	; () banked
  3518  001B10  5194               	movf	UpdatePattern@i& (0+255),w,b
  3519  001B12  0D02               	mullw	2
  3520  001B14  0E20               	movlw	low _PixelPattern
  3521  001B16  24F3               	addwf	prodl,w,c
  3522  001B18  6ED9               	movwf	fsr2l,c
  3523  001B1A  0E01               	movlw	high _PixelPattern
  3524  001B1C  20F4               	addwfc	prodh,w,c
  3525  001B1E  6EDA               	movwf	fsr2h,c
  3526  001B20  0E00               	movlw	0
  3527  001B22  6EDE               	movwf	postinc2,c
  3528  001B24  0E00               	movlw	0
  3529  001B26  6EDD               	movwf	postdec2,c
  3530                           
  3531                           ; BSR set to: 0
  3532  001B28  0100               	movlb	0	; () banked
  3533  001B2A  2B94               	incf	UpdatePattern@i& (0+255),f,b
  3534  001B2C  D7EB               	goto	l3559
  3535  001B2E                     l3569:
  3536                           
  3537                           ;Pattern_PtrnGenerator.c: 104: FullPulseHold(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3538  001B2E  0E20               	movlw	low _PixelPattern
  3539  001B30  0100               	movlb	0	; () banked
  3540  001B32  6F60               	movwf	FullPulseHold@ptrnPointer& (0+255),b
  3541  001B34  0E01               	movlw	high _PixelPattern
  3542  001B36  0100               	movlb	0	; () banked
  3543  001B38  6F61               	movwf	(FullPulseHold@ptrnPointer+1)& (0+255),b
  3544  001B3A  0EF2               	movlw	low _PatternStepCounter
  3545  001B3C  0100               	movlb	0	; () banked
  3546  001B3E  6F62               	movwf	FullPulseHold@ptrnStepCounter& (0+255),b
  3547  001B40  0E00               	movlw	high _PatternStepCounter
  3548  001B42  0100               	movlb	0	; () banked
  3549  001B44  6F63               	movwf	(FullPulseHold@ptrnStepCounter+1)& (0+255),b
  3550  001B46  0EE9               	movlw	low _CycleCounter
  3551  001B48  0100               	movlb	0	; () banked
  3552  001B4A  6F64               	movwf	FullPulseHold@cycleCounter& (0+255),b
  3553  001B4C  0E00               	movlw	high _CycleCounter
  3554  001B4E  0100               	movlb	0	; () banked
  3555  001B50  6F65               	movwf	(FullPulseHold@cycleCounter+1)& (0+255),b
  3556  001B52  0E87               	movlw	135
  3557  001B54  0100               	movlb	0	; () banked
  3558  001B56  6F66               	movwf	FullPulseHold@base_hue& (0+255),b
  3559  001B58  0E04               	movlw	4
  3560  001B5A  0100               	movlb	0	; () banked
  3561  001B5C  6F67               	movwf	FullPulseHold@base_sat& (0+255),b
  3562  001B5E  0E00               	movlw	0
  3563  001B60  0100               	movlb	0	; () banked
  3564  001B62  6F68               	movwf	FullPulseHold@15711& (0+255),b
  3565  001B64  0E00               	movlw	0
  3566  001B66  0100               	movlb	0	; () banked
  3567  001B68  6F69               	movwf	(FullPulseHold@15711+1)& (0+255),b
  3568  001B6A  ECC1  F011         	call	_FullPulseHold	;wreg free
  3569                           
  3570                           ;Pattern_PtrnGenerator.c: 105: break;
  3571  001B6E  D162               	goto	l3607
  3572  001B70                     l3571:
  3573                           
  3574                           ;Pattern_PtrnGenerator.c: 108: CenterBreathe(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3575  001B70  0E20               	movlw	low _PixelPattern
  3576  001B72  0100               	movlb	0	; () banked
  3577  001B74  6F68               	movwf	CenterBreathe@ptrnPointer& (0+255),b
  3578  001B76  0E01               	movlw	high _PixelPattern
  3579  001B78  0100               	movlb	0	; () banked
  3580  001B7A  6F69               	movwf	(CenterBreathe@ptrnPointer+1)& (0+255),b
  3581  001B7C  0EF2               	movlw	low _PatternStepCounter
  3582  001B7E  0100               	movlb	0	; () banked
  3583  001B80  6F6A               	movwf	CenterBreathe@ptrnStepCounter& (0+255),b
  3584  001B82  0E00               	movlw	high _PatternStepCounter
  3585  001B84  0100               	movlb	0	; () banked
  3586  001B86  6F6B               	movwf	(CenterBreathe@ptrnStepCounter+1)& (0+255),b
  3587  001B88  0EE9               	movlw	low _CycleCounter
  3588  001B8A  0100               	movlb	0	; () banked
  3589  001B8C  6F6C               	movwf	CenterBreathe@cycleCounter& (0+255),b
  3590  001B8E  0E00               	movlw	high _CycleCounter
  3591  001B90  0100               	movlb	0	; () banked
  3592  001B92  6F6D               	movwf	(CenterBreathe@cycleCounter+1)& (0+255),b
  3593  001B94  0E87               	movlw	135
  3594  001B96  0100               	movlb	0	; () banked
  3595  001B98  6F6E               	movwf	CenterBreathe@base_hue& (0+255),b
  3596  001B9A  0E04               	movlw	4
  3597  001B9C  0100               	movlb	0	; () banked
  3598  001B9E  6F6F               	movwf	CenterBreathe@base_sat& (0+255),b
  3599  001BA0  0E00               	movlw	0
  3600  001BA2  0100               	movlb	0	; () banked
  3601  001BA4  6F70               	movwf	CenterBreathe@15721& (0+255),b
  3602  001BA6  0E00               	movlw	0
  3603  001BA8  0100               	movlb	0	; () banked
  3604  001BAA  6F71               	movwf	(CenterBreathe@15721+1)& (0+255),b
  3605  001BAC  ECD6  F00B         	call	_CenterBreathe	;wreg free
  3606                           
  3607                           ;Pattern_PtrnGenerator.c: 109: break;
  3608  001BB0  D141               	goto	l3607
  3609  001BB2                     l3573:
  3610                           
  3611                           ;Pattern_PtrnGenerator.c: 112: SingleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, 32, 0x0F, 0);
  3612  001BB2  0E20               	movlw	low _PixelPattern
  3613  001BB4  0100               	movlb	0	; () banked
  3614  001BB6  6F68               	movwf	SingleFadedLoop@ptrnPointer& (0+255),b
  3615  001BB8  0E01               	movlw	high _PixelPattern
  3616  001BBA  0100               	movlb	0	; () banked
  3617  001BBC  6F69               	movwf	(SingleFadedLoop@ptrnPointer+1)& (0+255),b
  3618  001BBE  0EF2               	movlw	low _PatternStepCounter
  3619  001BC0  0100               	movlb	0	; () banked
  3620  001BC2  6F6A               	movwf	SingleFadedLoop@ptrnStepCounter& (0+255),b
  3621  001BC4  0E00               	movlw	high _PatternStepCounter
  3622  001BC6  0100               	movlb	0	; () banked
  3623  001BC8  6F6B               	movwf	(SingleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3624  001BCA  0EE9               	movlw	low _CycleCounter
  3625  001BCC  0100               	movlb	0	; () banked
  3626  001BCE  6F6C               	movwf	SingleFadedLoop@cycleCounter& (0+255),b
  3627  001BD0  0E00               	movlw	high _CycleCounter
  3628  001BD2  0100               	movlb	0	; () banked
  3629  001BD4  6F6D               	movwf	(SingleFadedLoop@cycleCounter+1)& (0+255),b
  3630  001BD6  0E20               	movlw	32
  3631  001BD8  0100               	movlb	0	; () banked
  3632  001BDA  6F6E               	movwf	SingleFadedLoop@base_hue& (0+255),b
  3633  001BDC  0E0F               	movlw	15
  3634  001BDE  0100               	movlb	0	; () banked
  3635  001BE0  6F6F               	movwf	SingleFadedLoop@base_sat& (0+255),b
  3636  001BE2  0E00               	movlw	0
  3637  001BE4  0100               	movlb	0	; () banked
  3638  001BE6  6F70               	movwf	SingleFadedLoop@15734& (0+255),b
  3639  001BE8  0E00               	movlw	0
  3640  001BEA  0100               	movlb	0	; () banked
  3641  001BEC  6F71               	movwf	(SingleFadedLoop@15734+1)& (0+255),b
  3642  001BEE  EC74  F010         	call	_SingleFadedLoop	;wreg free
  3643                           
  3644                           ;Pattern_PtrnGenerator.c: 113: break;
  3645  001BF2  D120               	goto	l3607
  3646  001BF4                     l3575:
  3647                           
  3648                           ;Pattern_PtrnGenerator.c: 116: SingleFocusPulse(PixelPattern, &PatternStepCounter, &Cycl
      +                          eCounter, 170, 0x0F, ListeningFocus);
  3649  001BF4  0E20               	movlw	low _PixelPattern
  3650  001BF6  0100               	movlb	0	; () banked
  3651  001BF8  6F68               	movwf	SingleFocusPulse@ptrnPointer& (0+255),b
  3652  001BFA  0E01               	movlw	high _PixelPattern
  3653  001BFC  0100               	movlb	0	; () banked
  3654  001BFE  6F69               	movwf	(SingleFocusPulse@ptrnPointer+1)& (0+255),b
  3655  001C00  0EF2               	movlw	low _PatternStepCounter
  3656  001C02  0100               	movlb	0	; () banked
  3657  001C04  6F6A               	movwf	SingleFocusPulse@ptrnStepCounter& (0+255),b
  3658  001C06  0E00               	movlw	high _PatternStepCounter
  3659  001C08  0100               	movlb	0	; () banked
  3660  001C0A  6F6B               	movwf	(SingleFocusPulse@ptrnStepCounter+1)& (0+255),b
  3661  001C0C  0EE9               	movlw	low _CycleCounter
  3662  001C0E  0100               	movlb	0	; () banked
  3663  001C10  6F6C               	movwf	SingleFocusPulse@cycleCounter& (0+255),b
  3664  001C12  0E00               	movlw	high _CycleCounter
  3665  001C14  0100               	movlb	0	; () banked
  3666  001C16  6F6D               	movwf	(SingleFocusPulse@cycleCounter+1)& (0+255),b
  3667  001C18  0EAA               	movlw	170
  3668  001C1A  0100               	movlb	0	; () banked
  3669  001C1C  6F6E               	movwf	SingleFocusPulse@base_hue& (0+255),b
  3670  001C1E  0E0F               	movlw	15
  3671  001C20  0100               	movlb	0	; () banked
  3672  001C22  6F6F               	movwf	SingleFocusPulse@base_sat& (0+255),b
  3673  001C24  C0D9  F070         	movff	_ListeningFocus,SingleFocusPulse@focus
  3674  001C28  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusPulse@focus+1
  3675  001C2C  EC21  F00F         	call	_SingleFocusPulse	;wreg free
  3676                           
  3677                           ;Pattern_PtrnGenerator.c: 117: break;
  3678  001C30  D101               	goto	l3607
  3679  001C32                     l3577:
  3680                           
  3681                           ;Pattern_PtrnGenerator.c: 120: SingleFocusPulse(PixelPattern, &PatternStepCounter, &Cycl
      +                          eCounter, 85, 0x0F, ListeningFocus);
  3682  001C32  0E20               	movlw	low _PixelPattern
  3683  001C34  0100               	movlb	0	; () banked
  3684  001C36  6F68               	movwf	SingleFocusPulse@ptrnPointer& (0+255),b
  3685  001C38  0E01               	movlw	high _PixelPattern
  3686  001C3A  0100               	movlb	0	; () banked
  3687  001C3C  6F69               	movwf	(SingleFocusPulse@ptrnPointer+1)& (0+255),b
  3688  001C3E  0EF2               	movlw	low _PatternStepCounter
  3689  001C40  0100               	movlb	0	; () banked
  3690  001C42  6F6A               	movwf	SingleFocusPulse@ptrnStepCounter& (0+255),b
  3691  001C44  0E00               	movlw	high _PatternStepCounter
  3692  001C46  0100               	movlb	0	; () banked
  3693  001C48  6F6B               	movwf	(SingleFocusPulse@ptrnStepCounter+1)& (0+255),b
  3694  001C4A  0EE9               	movlw	low _CycleCounter
  3695  001C4C  0100               	movlb	0	; () banked
  3696  001C4E  6F6C               	movwf	SingleFocusPulse@cycleCounter& (0+255),b
  3697  001C50  0E00               	movlw	high _CycleCounter
  3698  001C52  0100               	movlb	0	; () banked
  3699  001C54  6F6D               	movwf	(SingleFocusPulse@cycleCounter+1)& (0+255),b
  3700  001C56  0E55               	movlw	85
  3701  001C58  0100               	movlb	0	; () banked
  3702  001C5A  6F6E               	movwf	SingleFocusPulse@base_hue& (0+255),b
  3703  001C5C  0E0F               	movlw	15
  3704  001C5E  0100               	movlb	0	; () banked
  3705  001C60  6F6F               	movwf	SingleFocusPulse@base_sat& (0+255),b
  3706  001C62  C0D9  F070         	movff	_ListeningFocus,SingleFocusPulse@focus
  3707  001C66  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusPulse@focus+1
  3708  001C6A  EC21  F00F         	call	_SingleFocusPulse	;wreg free
  3709                           
  3710                           ;Pattern_PtrnGenerator.c: 121: break;
  3711  001C6E  D0E2               	goto	l3607
  3712  001C70                     l3579:
  3713                           
  3714                           ;Pattern_PtrnGenerator.c: 126: MirroredQuadrants(PixelPattern, &PatternStepCounter, &Cyc
      +                          leCounter, 135, 0x04, 0);
  3715  001C70  0E20               	movlw	low _PixelPattern
  3716  001C72  0100               	movlb	0	; () banked
  3717  001C74  6F68               	movwf	MirroredQuadrants@ptrnPointer& (0+255),b
  3718  001C76  0E01               	movlw	high _PixelPattern
  3719  001C78  0100               	movlb	0	; () banked
  3720  001C7A  6F69               	movwf	(MirroredQuadrants@ptrnPointer+1)& (0+255),b
  3721  001C7C  0EF2               	movlw	low _PatternStepCounter
  3722  001C7E  0100               	movlb	0	; () banked
  3723  001C80  6F6A               	movwf	MirroredQuadrants@ptrnStepCounter& (0+255),b
  3724  001C82  0E00               	movlw	high _PatternStepCounter
  3725  001C84  0100               	movlb	0	; () banked
  3726  001C86  6F6B               	movwf	(MirroredQuadrants@ptrnStepCounter+1)& (0+255),b
  3727  001C88  0EE9               	movlw	low _CycleCounter
  3728  001C8A  0100               	movlb	0	; () banked
  3729  001C8C  6F6C               	movwf	MirroredQuadrants@cycleCounter& (0+255),b
  3730  001C8E  0E00               	movlw	high _CycleCounter
  3731  001C90  0100               	movlb	0	; () banked
  3732  001C92  6F6D               	movwf	(MirroredQuadrants@cycleCounter+1)& (0+255),b
  3733  001C94  0E87               	movlw	135
  3734  001C96  0100               	movlb	0	; () banked
  3735  001C98  6F6E               	movwf	MirroredQuadrants@base_hue& (0+255),b
  3736  001C9A  0E04               	movlw	4
  3737  001C9C  0100               	movlb	0	; () banked
  3738  001C9E  6F6F               	movwf	MirroredQuadrants@base_sat& (0+255),b
  3739  001CA0  0E00               	movlw	0
  3740  001CA2  0100               	movlb	0	; () banked
  3741  001CA4  6F70               	movwf	MirroredQuadrants@15787& (0+255),b
  3742  001CA6  0E00               	movlw	0
  3743  001CA8  0100               	movlb	0	; () banked
  3744  001CAA  6F71               	movwf	(MirroredQuadrants@15787+1)& (0+255),b
  3745  001CAC  ECC0  F009         	call	_MirroredQuadrants	;wreg free
  3746                           
  3747                           ;Pattern_PtrnGenerator.c: 127: break;
  3748  001CB0  D0C1               	goto	l3607
  3749  001CB2                     l3581:
  3750                           
  3751                           ;Pattern_PtrnGenerator.c: 130: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3752  001CB2  0100               	movlb	0	; () banked
  3753  001CB4  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3754  001CB6  0DFF               	mullw	255
  3755  001CB8  CFF3 F060          	movff	prodl,___awdiv@dividend
  3756  001CBC  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3757  001CC0  0E00               	movlw	0
  3758  001CC2  0100               	movlb	0	; () banked
  3759  001CC4  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3760  001CC6  0E4C               	movlw	76
  3761  001CC8  6F62               	movwf	___awdiv@divisor& (0+255),b
  3762  001CCA  EC6A  F017         	call	___awdiv	;wreg free
  3763  001CCE  0100               	movlb	0	; () banked
  3764  001CD0  5160               	movf	?___awdiv& (0+255),w,b
  3765  001CD2  0100               	movlb	0	; () banked
  3766  001CD4  6F92               	movwf	_UpdatePattern$1970& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;Pattern_PtrnGenerator.c: 130: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3770  001CD6  0E20               	movlw	low _PixelPattern
  3771  001CD8  0100               	movlb	0	; () banked
  3772  001CDA  6F68               	movwf	DoubleFadedLoop@ptrnPointer& (0+255),b
  3773  001CDC  0E01               	movlw	high _PixelPattern
  3774  001CDE  0100               	movlb	0	; () banked
  3775  001CE0  6F69               	movwf	(DoubleFadedLoop@ptrnPointer+1)& (0+255),b
  3776  001CE2  0EF2               	movlw	low _PatternStepCounter
  3777  001CE4  0100               	movlb	0	; () banked
  3778  001CE6  6F6A               	movwf	DoubleFadedLoop@ptrnStepCounter& (0+255),b
  3779  001CE8  0E00               	movlw	high _PatternStepCounter
  3780  001CEA  0100               	movlb	0	; () banked
  3781  001CEC  6F6B               	movwf	(DoubleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3782  001CEE  0EE9               	movlw	low _CycleCounter
  3783  001CF0  0100               	movlb	0	; () banked
  3784  001CF2  6F6C               	movwf	DoubleFadedLoop@cycleCounter& (0+255),b
  3785  001CF4  0E00               	movlw	high _CycleCounter
  3786  001CF6  0100               	movlb	0	; () banked
  3787  001CF8  6F6D               	movwf	(DoubleFadedLoop@cycleCounter+1)& (0+255),b
  3788  001CFA  C092  F06E         	movff	_UpdatePattern$1970,DoubleFadedLoop@base_hue
  3789  001CFE  0E0F               	movlw	15
  3790  001D00  0100               	movlb	0	; () banked
  3791  001D02  6F6F               	movwf	DoubleFadedLoop@base_sat& (0+255),b
  3792  001D04  0E00               	movlw	0
  3793  001D06  0100               	movlb	0	; () banked
  3794  001D08  6F70               	movwf	DoubleFadedLoop@15744& (0+255),b
  3795  001D0A  0E00               	movlw	0
  3796  001D0C  0100               	movlb	0	; () banked
  3797  001D0E  6F71               	movwf	(DoubleFadedLoop@15744+1)& (0+255),b
  3798  001D10  ECDF  F004         	call	_DoubleFadedLoop	;wreg free
  3799                           
  3800                           ;Pattern_PtrnGenerator.c: 131: break;
  3801  001D14  D08F               	goto	l3607
  3802  001D16                     l3585:
  3803                           
  3804                           ;Pattern_PtrnGenerator.c: 134: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3805  001D16  0100               	movlb	0	; () banked
  3806  001D18  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3807  001D1A  0DFF               	mullw	255
  3808  001D1C  CFF3 F060          	movff	prodl,___awdiv@dividend
  3809  001D20  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3810  001D24  0E00               	movlw	0
  3811  001D26  0100               	movlb	0	; () banked
  3812  001D28  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3813  001D2A  0E19               	movlw	25
  3814  001D2C  6F62               	movwf	___awdiv@divisor& (0+255),b
  3815  001D2E  EC6A  F017         	call	___awdiv	;wreg free
  3816  001D32  0100               	movlb	0	; () banked
  3817  001D34  5160               	movf	?___awdiv& (0+255),w,b
  3818  001D36  0100               	movlb	0	; () banked
  3819  001D38  6F93               	movwf	_UpdatePattern$1971& (0+255),b
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;Pattern_PtrnGenerator.c: 134: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3823  001D3A  0E20               	movlw	low _PixelPattern
  3824  001D3C  0100               	movlb	0	; () banked
  3825  001D3E  6F68               	movwf	BrokenPinwheel@ptrnPointer& (0+255),b
  3826  001D40  0E01               	movlw	high _PixelPattern
  3827  001D42  0100               	movlb	0	; () banked
  3828  001D44  6F69               	movwf	(BrokenPinwheel@ptrnPointer+1)& (0+255),b
  3829  001D46  0EF2               	movlw	low _PatternStepCounter
  3830  001D48  0100               	movlb	0	; () banked
  3831  001D4A  6F6A               	movwf	BrokenPinwheel@ptrnStepCounter& (0+255),b
  3832  001D4C  0E00               	movlw	high _PatternStepCounter
  3833  001D4E  0100               	movlb	0	; () banked
  3834  001D50  6F6B               	movwf	(BrokenPinwheel@ptrnStepCounter+1)& (0+255),b
  3835  001D52  0EE9               	movlw	low _CycleCounter
  3836  001D54  0100               	movlb	0	; () banked
  3837  001D56  6F6C               	movwf	BrokenPinwheel@cycleCounter& (0+255),b
  3838  001D58  0E00               	movlw	high _CycleCounter
  3839  001D5A  0100               	movlb	0	; () banked
  3840  001D5C  6F6D               	movwf	(BrokenPinwheel@cycleCounter+1)& (0+255),b
  3841  001D5E  C093  F06E         	movff	_UpdatePattern$1971,BrokenPinwheel@base_hue
  3842  001D62  0E0F               	movlw	15
  3843  001D64  0100               	movlb	0	; () banked
  3844  001D66  6F6F               	movwf	BrokenPinwheel@base_sat& (0+255),b
  3845  001D68  0E00               	movlw	0
  3846  001D6A  0100               	movlb	0	; () banked
  3847  001D6C  6F70               	movwf	BrokenPinwheel@15769& (0+255),b
  3848  001D6E  0E00               	movlw	0
  3849  001D70  0100               	movlb	0	; () banked
  3850  001D72  6F71               	movwf	(BrokenPinwheel@15769+1)& (0+255),b
  3851  001D74  ECDC  F001         	call	_BrokenPinwheel	;wreg free
  3852                           
  3853                           ;Pattern_PtrnGenerator.c: 135: break;
  3854  001D78  D05D               	goto	l3607
  3855  001D7A                     l3589:
  3856                           
  3857                           ;Pattern_PtrnGenerator.c: 147: HueTest(PixelPattern, &PatternStepCounter, &CycleCounter,
      +                           0, 0x0F, 0);
  3858  001D7A  0E20               	movlw	low _PixelPattern
  3859  001D7C  0100               	movlb	0	; () banked
  3860  001D7E  6F73               	movwf	HueTest@ptrnPointer& (0+255),b
  3861  001D80  0E01               	movlw	high _PixelPattern
  3862  001D82  0100               	movlb	0	; () banked
  3863  001D84  6F74               	movwf	(HueTest@ptrnPointer+1)& (0+255),b
  3864  001D86  0EF2               	movlw	low _PatternStepCounter
  3865  001D88  0100               	movlb	0	; () banked
  3866  001D8A  6F75               	movwf	HueTest@ptrnStepCounter& (0+255),b
  3867  001D8C  0E00               	movlw	high _PatternStepCounter
  3868  001D8E  0100               	movlb	0	; () banked
  3869  001D90  6F76               	movwf	(HueTest@ptrnStepCounter+1)& (0+255),b
  3870  001D92  0EE9               	movlw	low _CycleCounter
  3871  001D94  0100               	movlb	0	; () banked
  3872  001D96  6F77               	movwf	HueTest@cycleCounter& (0+255),b
  3873  001D98  0E00               	movlw	high _CycleCounter
  3874  001D9A  0100               	movlb	0	; () banked
  3875  001D9C  6F78               	movwf	(HueTest@cycleCounter+1)& (0+255),b
  3876  001D9E  0E00               	movlw	0
  3877  001DA0  0100               	movlb	0	; () banked
  3878  001DA2  6F79               	movwf	HueTest@base_hue& (0+255),b
  3879  001DA4  0E0F               	movlw	15
  3880  001DA6  0100               	movlb	0	; () banked
  3881  001DA8  6F7A               	movwf	HueTest@base_sat& (0+255),b
  3882  001DAA  0E00               	movlw	0
  3883  001DAC  0100               	movlb	0	; () banked
  3884  001DAE  6F7B               	movwf	HueTest@15703& (0+255),b
  3885  001DB0  0E00               	movlw	0
  3886  001DB2  0100               	movlb	0	; () banked
  3887  001DB4  6F7C               	movwf	(HueTest@15703+1)& (0+255),b
  3888  001DB6  ECC1  F014         	call	_HueTest	;wreg free
  3889                           
  3890                           ;Pattern_PtrnGenerator.c: 148: break;
  3891  001DBA  D03C               	goto	l3607
  3892  001DBC                     l3591:
  3893                           
  3894                           ;Pattern_PtrnGenerator.c: 152: for(uint8_t i=0;i<76;i++){
  3895  001DBC  0E00               	movlw	0
  3896  001DBE  0100               	movlb	0	; () banked
  3897  001DC0  6F95               	movwf	UpdatePattern@i_1348& (0+255),b
  3898  001DC2                     l3593:
  3899                           
  3900                           ; BSR set to: 0
  3901  001DC2  0E4B               	movlw	75
  3902  001DC4  0100               	movlb	0	; () banked
  3903  001DC6  6595               	cpfsgt	UpdatePattern@i_1348& (0+255),b
  3904  001DC8  D001               	goto	l3597
  3905  001DCA  D034               	goto	l3607
  3906  001DCC                     l3597:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;Pattern_PtrnGenerator.c: 153: PixelPattern[i] = 0x0;
  3910  001DCC  0100               	movlb	0	; () banked
  3911  001DCE  5195               	movf	UpdatePattern@i_1348& (0+255),w,b
  3912  001DD0  0D02               	mullw	2
  3913  001DD2  0E20               	movlw	low _PixelPattern
  3914  001DD4  24F3               	addwf	prodl,w,c
  3915  001DD6  6ED9               	movwf	fsr2l,c
  3916  001DD8  0E01               	movlw	high _PixelPattern
  3917  001DDA  20F4               	addwfc	prodh,w,c
  3918  001DDC  6EDA               	movwf	fsr2h,c
  3919  001DDE  0E00               	movlw	0
  3920  001DE0  6EDE               	movwf	postinc2,c
  3921  001DE2  0E00               	movlw	0
  3922  001DE4  6EDD               	movwf	postdec2,c
  3923                           
  3924                           ; BSR set to: 0
  3925  001DE6  0100               	movlb	0	; () banked
  3926  001DE8  2B95               	incf	UpdatePattern@i_1348& (0+255),f,b
  3927  001DEA  D7EB               	goto	l3593
  3928  001DEC                     l3605:
  3929  001DEC  C0DB  FFD9         	movff	_PatternID,fsr2l
  3930  001DF0  C0DC  FFDA         	movff	_PatternID+1,fsr2h
  3931  001DF4  50DF               	movf	indf2,w,c
  3932                           
  3933                           ; Switch size 1, requested type "space"
  3934                           ; Number of cases is 10, Range of values is 0 to 255
  3935                           ; switch strategies available:
  3936                           ; Name         Instructions Cycles
  3937                           ; simple_byte           31    16 (average)
  3938                           ;	Chosen strategy is simple_byte
  3939  001DF6  0A00               	xorlw	0	; case 0
  3940  001DF8  B4D8               	btfsc	status,2,c
  3941  001DFA  D681               	goto	l3557
  3942  001DFC  0A01               	xorlw	1	; case 1
  3943  001DFE  B4D8               	btfsc	status,2,c
  3944  001E00  D696               	goto	l3569
  3945  001E02  0A03               	xorlw	3	; case 2
  3946  001E04  B4D8               	btfsc	status,2,c
  3947  001E06  D6B4               	goto	l3571
  3948  001E08  0A01               	xorlw	1	; case 3
  3949  001E0A  B4D8               	btfsc	status,2,c
  3950  001E0C  D712               	goto	l3577
  3951  001E0E  0A07               	xorlw	7	; case 4
  3952  001E10  B4D8               	btfsc	status,2,c
  3953  001E12  D6CF               	goto	l3573
  3954  001E14  0A01               	xorlw	1	; case 5
  3955  001E16  B4D8               	btfsc	status,2,c
  3956  001E18  D6ED               	goto	l3575
  3957  001E1A  0A03               	xorlw	3	; case 6
  3958  001E1C  B4D8               	btfsc	status,2,c
  3959  001E1E  D728               	goto	l3579
  3960  001E20  0A01               	xorlw	1	; case 7
  3961  001E22  B4D8               	btfsc	status,2,c
  3962  001E24  D746               	goto	l3581
  3963  001E26  0A0F               	xorlw	15	; case 8
  3964  001E28  B4D8               	btfsc	status,2,c
  3965  001E2A  D775               	goto	l3585
  3966  001E2C  0AF7               	xorlw	247	; case 255
  3967  001E2E  B4D8               	btfsc	status,2,c
  3968  001E30  D7A4               	goto	l3589
  3969  001E32  D7C4               	goto	l3591
  3970  001E34                     l3607:
  3971                           
  3972                           ;Pattern_PtrnGenerator.c: 158: return PixelPattern;
  3973  001E34  0E20               	movlw	low _PixelPattern
  3974  001E36  0100               	movlb	0	; () banked
  3975  001E38  6F90               	movwf	?_UpdatePattern& (0+255),b
  3976  001E3A  0E01               	movlw	high _PixelPattern
  3977  001E3C  0100               	movlb	0	; () banked
  3978  001E3E  6F91               	movwf	(?_UpdatePattern+1)& (0+255),b
  3979  001E40  0012               	return	
  3980  001E42                     __end_of_UpdatePattern:
  3981                           	opt stack 0
  3982                           tosu	equ	0xFFF
  3983                           tosh	equ	0xFFE
  3984                           tosl	equ	0xFFD
  3985                           pclath	equ	0xFFA
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1h	equ	0xFE2
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _SingleFocusPulse *****************
  4005 ;; Defined at:
  4006 ;;		line 207 in file "Pattern_PtrnFunctions.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4009 ;;		 -> PixelPattern(152), 
  4010 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4011 ;;		 -> PatternStepCounter(1), 
  4012 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4013 ;;		 -> CycleCounter(4), 
  4014 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4015 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4016 ;;  focus           2   16[BANK0 ] PTR void 
  4017 ;;		 -> NULL(0), PatternConfigs(4), 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  i               1   37[BANK0 ] unsigned char 
  4020 ;;  head            1   36[BANK0 ] unsigned char 
  4021 ;;  y               1   35[BANK0 ] unsigned char 
  4022 ;;  x               1   34[BANK0 ] unsigned char 
  4023 ;;  val             1   33[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4033 ;;      Params:         0      10       0       0
  4034 ;;      Locals:         0       9       0       0
  4035 ;;      Temps:          0      11       0       0
  4036 ;;      Totals:         0      30       0       0
  4037 ;;Total ram usage:       30 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    8
  4040 ;; This function calls:
  4041 ;;		___awdiv
  4042 ;;		___awmod
  4043 ;; This function is called by:
  4044 ;;		_UpdatePattern
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text16
  4049  001E42                     __ptext16:
  4050                           	opt stack 0
  4051  001E42                     _SingleFocusPulse:
  4052                           	opt stack 18
  4053                           
  4054                           ;Pattern_PtrnFunctions.c: 208: uint8_t val, x, y, head;
  4055                           ;Pattern_PtrnFunctions.c: 209: head = *(uint8_t*)focus;
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;incstack = 0
  4059  001E42  C070  FFD9         	movff	SingleFocusPulse@focus,fsr2l
  4060  001E46  C071  FFDA         	movff	SingleFocusPulse@focus+1,fsr2h
  4061  001E4A  50DF               	movf	indf2,w,c
  4062  001E4C  0100               	movlb	0	; () banked
  4063  001E4E  6F84               	movwf	SingleFocusPulse@head& (0+255),b
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;Pattern_PtrnFunctions.c: 211: for(uint8_t i=0;i<76;i++){
  4067  001E50  0E00               	movlw	0
  4068  001E52  0100               	movlb	0	; () banked
  4069  001E54  6F85               	movwf	SingleFocusPulse@i& (0+255),b
  4070  001E56                     l3459:
  4071                           
  4072                           ; BSR set to: 0
  4073  001E56  0E4B               	movlw	75
  4074  001E58  0100               	movlb	0	; () banked
  4075  001E5A  6585               	cpfsgt	SingleFocusPulse@i& (0+255),b
  4076  001E5C  D001               	goto	l3463
  4077  001E5E  D125               	goto	l3487
  4078  001E60                     l3463:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;Pattern_PtrnFunctions.c: 213: y = (5-*ptrnStepCounter%4);
  4082  001E60  C06A  FFD9         	movff	SingleFocusPulse@ptrnStepCounter,fsr2l
  4083  001E64  C06B  FFDA         	movff	SingleFocusPulse@ptrnStepCounter+1,fsr2h
  4084  001E68  50DF               	movf	indf2,w,c
  4085  001E6A  0B03               	andlw	3
  4086  001E6C  0800               	sublw	0
  4087  001E6E  0F05               	addlw	5
  4088  001E70  0100               	movlb	0	; () banked
  4089  001E72  6F83               	movwf	SingleFocusPulse@y& (0+255),b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;Pattern_PtrnFunctions.c: 214: x = ((((76+i-head)%76) < ((76+head-i)%76)) ? ((76+i-head)
      +                          %76) : ((76+head-i)%76));
  4093  001E74  0100               	movlb	0	; () banked
  4094  001E76  5184               	movf	SingleFocusPulse@head& (0+255),w,b
  4095  001E78  0100               	movlb	0	; () banked
  4096  001E7A  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4097  001E7C  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4098  001E7E  0100               	movlb	0	; () banked
  4099  001E80  1F72               	comf	??_SingleFocusPulse& (0+255),f,b
  4100  001E82  1F73               	comf	(??_SingleFocusPulse+1)& (0+255),f,b
  4101  001E84  4B72               	infsnz	??_SingleFocusPulse& (0+255),f,b
  4102  001E86  2B73               	incf	(??_SingleFocusPulse+1)& (0+255),f,b
  4103  001E88  0100               	movlb	0	; () banked
  4104  001E8A  5185               	movf	SingleFocusPulse@i& (0+255),w,b
  4105  001E8C  0100               	movlb	0	; () banked
  4106  001E8E  6F74               	movwf	(??_SingleFocusPulse+2)& (0+255),b
  4107  001E90  6B75               	clrf	(??_SingleFocusPulse+3)& (0+255),b
  4108  001E92  0100               	movlb	0	; () banked
  4109  001E94  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4110  001E96  0100               	movlb	0	; () banked
  4111  001E98  2774               	addwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4112  001E9A  0100               	movlb	0	; () banked
  4113  001E9C  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4114  001E9E  0100               	movlb	0	; () banked
  4115  001EA0  2375               	addwfc	(??_SingleFocusPulse+3)& (0+255),f,b
  4116  001EA2  0E4C               	movlw	76
  4117  001EA4  0100               	movlb	0	; () banked
  4118  001EA6  2574               	addwf	(??_SingleFocusPulse+2)& (0+255),w,b
  4119  001EA8  0100               	movlb	0	; () banked
  4120  001EAA  6F60               	movwf	___awmod@dividend& (0+255),b
  4121  001EAC  0E00               	movlw	0
  4122  001EAE  0100               	movlb	0	; () banked
  4123  001EB0  2175               	addwfc	(??_SingleFocusPulse+3)& (0+255),w,b
  4124  001EB2  0100               	movlb	0	; () banked
  4125  001EB4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4126  001EB6  0E00               	movlw	0
  4127  001EB8  0100               	movlb	0	; () banked
  4128  001EBA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4129  001EBC  0E4C               	movlw	76
  4130  001EBE  6F62               	movwf	___awmod@divisor& (0+255),b
  4131  001EC0  ECCE  F018         	call	___awmod	;wreg free
  4132  001EC4  C060  F076         	movff	?___awmod,??_SingleFocusPulse+4
  4133  001EC8  C061  F077         	movff	?___awmod+1,??_SingleFocusPulse+5
  4134  001ECC  0100               	movlb	0	; () banked
  4135  001ECE  5185               	movf	SingleFocusPulse@i& (0+255),w,b
  4136  001ED0  0100               	movlb	0	; () banked
  4137  001ED2  6F78               	movwf	(??_SingleFocusPulse+6)& (0+255),b
  4138  001ED4  6B79               	clrf	(??_SingleFocusPulse+7)& (0+255),b
  4139  001ED6  0100               	movlb	0	; () banked
  4140  001ED8  1F78               	comf	(??_SingleFocusPulse+6)& (0+255),f,b
  4141  001EDA  1F79               	comf	(??_SingleFocusPulse+7)& (0+255),f,b
  4142  001EDC  4B78               	infsnz	(??_SingleFocusPulse+6)& (0+255),f,b
  4143  001EDE  2B79               	incf	(??_SingleFocusPulse+7)& (0+255),f,b
  4144  001EE0  0100               	movlb	0	; () banked
  4145  001EE2  5184               	movf	SingleFocusPulse@head& (0+255),w,b
  4146  001EE4  0100               	movlb	0	; () banked
  4147  001EE6  6F7A               	movwf	(??_SingleFocusPulse+8)& (0+255),b
  4148  001EE8  6B7B               	clrf	(??_SingleFocusPulse+9)& (0+255),b
  4149  001EEA  0100               	movlb	0	; () banked
  4150  001EEC  5178               	movf	(??_SingleFocusPulse+6)& (0+255),w,b
  4151  001EEE  0100               	movlb	0	; () banked
  4152  001EF0  277A               	addwf	(??_SingleFocusPulse+8)& (0+255),f,b
  4153  001EF2  0100               	movlb	0	; () banked
  4154  001EF4  5179               	movf	(??_SingleFocusPulse+7)& (0+255),w,b
  4155  001EF6  0100               	movlb	0	; () banked
  4156  001EF8  237B               	addwfc	(??_SingleFocusPulse+9)& (0+255),f,b
  4157  001EFA  0E4C               	movlw	76
  4158  001EFC  0100               	movlb	0	; () banked
  4159  001EFE  257A               	addwf	(??_SingleFocusPulse+8)& (0+255),w,b
  4160  001F00  0100               	movlb	0	; () banked
  4161  001F02  6F60               	movwf	___awmod@dividend& (0+255),b
  4162  001F04  0E00               	movlw	0
  4163  001F06  0100               	movlb	0	; () banked
  4164  001F08  217B               	addwfc	(??_SingleFocusPulse+9)& (0+255),w,b
  4165  001F0A  0100               	movlb	0	; () banked
  4166  001F0C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4167  001F0E  0E00               	movlw	0
  4168  001F10  0100               	movlb	0	; () banked
  4169  001F12  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4170  001F14  0E4C               	movlw	76
  4171  001F16  6F62               	movwf	___awmod@divisor& (0+255),b
  4172  001F18  ECCE  F018         	call	___awmod	;wreg free
  4173  001F1C  0100               	movlb	0	; () banked
  4174  001F1E  5160               	movf	?___awmod& (0+255),w,b
  4175  001F20  0100               	movlb	0	; () banked
  4176  001F22  5D76               	subwf	(??_SingleFocusPulse+4)& (0+255),w,b
  4177  001F24  0100               	movlb	0	; () banked
  4178  001F26  5177               	movf	(??_SingleFocusPulse+5)& (0+255),w,b
  4179  001F28  0A80               	xorlw	128
  4180  001F2A  0100               	movlb	0	; () banked
  4181  001F2C  6F7C               	movwf	(??_SingleFocusPulse+10)& (0+255),b
  4182  001F2E  0100               	movlb	0	; () banked
  4183  001F30  5161               	movf	(?___awmod+1)& (0+255),w,b
  4184  001F32  0A80               	xorlw	128
  4185  001F34  0100               	movlb	0	; () banked
  4186  001F36  597C               	subwfb	(??_SingleFocusPulse+10)& (0+255),w,b
  4187  001F38  A0D8               	btfss	status,0,c
  4188  001F3A  D029               	goto	l3469
  4189                           
  4190                           ; BSR set to: 0
  4191  001F3C  0100               	movlb	0	; () banked
  4192  001F3E  5185               	movf	SingleFocusPulse@i& (0+255),w,b
  4193  001F40  0100               	movlb	0	; () banked
  4194  001F42  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4195  001F44  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4196  001F46  0100               	movlb	0	; () banked
  4197  001F48  1F72               	comf	??_SingleFocusPulse& (0+255),f,b
  4198  001F4A  1F73               	comf	(??_SingleFocusPulse+1)& (0+255),f,b
  4199  001F4C  4B72               	infsnz	??_SingleFocusPulse& (0+255),f,b
  4200  001F4E  2B73               	incf	(??_SingleFocusPulse+1)& (0+255),f,b
  4201  001F50  0100               	movlb	0	; () banked
  4202  001F52  5184               	movf	SingleFocusPulse@head& (0+255),w,b
  4203  001F54  0100               	movlb	0	; () banked
  4204  001F56  6F74               	movwf	(??_SingleFocusPulse+2)& (0+255),b
  4205  001F58  6B75               	clrf	(??_SingleFocusPulse+3)& (0+255),b
  4206  001F5A  0100               	movlb	0	; () banked
  4207  001F5C  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4208  001F5E  0100               	movlb	0	; () banked
  4209  001F60  2774               	addwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4210  001F62  0100               	movlb	0	; () banked
  4211  001F64  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4212  001F66  0100               	movlb	0	; () banked
  4213  001F68  2375               	addwfc	(??_SingleFocusPulse+3)& (0+255),f,b
  4214  001F6A  0E4C               	movlw	76
  4215  001F6C  0100               	movlb	0	; () banked
  4216  001F6E  2574               	addwf	(??_SingleFocusPulse+2)& (0+255),w,b
  4217  001F70  0100               	movlb	0	; () banked
  4218  001F72  6F60               	movwf	___awmod@dividend& (0+255),b
  4219  001F74  0E00               	movlw	0
  4220  001F76  0100               	movlb	0	; () banked
  4221  001F78  2175               	addwfc	(??_SingleFocusPulse+3)& (0+255),w,b
  4222  001F7A  0100               	movlb	0	; () banked
  4223  001F7C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4224  001F7E  0E00               	movlw	0
  4225  001F80  0100               	movlb	0	; () banked
  4226  001F82  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4227  001F84  0E4C               	movlw	76
  4228  001F86  6F62               	movwf	___awmod@divisor& (0+255),b
  4229  001F88  ECCE  F018         	call	___awmod	;wreg free
  4230  001F8C  D028               	goto	L7
  4231  001F8E                     l3469:
  4232  001F8E  0100               	movlb	0	; () banked
  4233  001F90  5184               	movf	SingleFocusPulse@head& (0+255),w,b
  4234  001F92  0100               	movlb	0	; () banked
  4235  001F94  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4236  001F96  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4237  001F98  0100               	movlb	0	; () banked
  4238  001F9A  1F72               	comf	??_SingleFocusPulse& (0+255),f,b
  4239  001F9C  1F73               	comf	(??_SingleFocusPulse+1)& (0+255),f,b
  4240  001F9E  4B72               	infsnz	??_SingleFocusPulse& (0+255),f,b
  4241  001FA0  2B73               	incf	(??_SingleFocusPulse+1)& (0+255),f,b
  4242  001FA2  0100               	movlb	0	; () banked
  4243  001FA4  5185               	movf	SingleFocusPulse@i& (0+255),w,b
  4244  001FA6  0100               	movlb	0	; () banked
  4245  001FA8  6F74               	movwf	(??_SingleFocusPulse+2)& (0+255),b
  4246  001FAA  6B75               	clrf	(??_SingleFocusPulse+3)& (0+255),b
  4247  001FAC  0100               	movlb	0	; () banked
  4248  001FAE  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4249  001FB0  0100               	movlb	0	; () banked
  4250  001FB2  2774               	addwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4251  001FB4  0100               	movlb	0	; () banked
  4252  001FB6  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4253  001FB8  0100               	movlb	0	; () banked
  4254  001FBA  2375               	addwfc	(??_SingleFocusPulse+3)& (0+255),f,b
  4255  001FBC  0E4C               	movlw	76
  4256  001FBE  0100               	movlb	0	; () banked
  4257  001FC0  2574               	addwf	(??_SingleFocusPulse+2)& (0+255),w,b
  4258  001FC2  0100               	movlb	0	; () banked
  4259  001FC4  6F60               	movwf	___awmod@dividend& (0+255),b
  4260  001FC6  0E00               	movlw	0
  4261  001FC8  0100               	movlb	0	; () banked
  4262  001FCA  2175               	addwfc	(??_SingleFocusPulse+3)& (0+255),w,b
  4263  001FCC  0100               	movlb	0	; () banked
  4264  001FCE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4265  001FD0  0E00               	movlw	0
  4266  001FD2  0100               	movlb	0	; () banked
  4267  001FD4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4268  001FD6  0E4C               	movlw	76
  4269  001FD8  6F62               	movwf	___awmod@divisor& (0+255),b
  4270  001FDA  ECCE  F018         	call	___awmod	;wreg free
  4271  001FDE                     L7:
  4272  001FDE  C060  F07D         	movff	?___awmod,_SingleFocusPulse$1316
  4273  001FE2  C061  F07E         	movff	?___awmod+1,_SingleFocusPulse$1316+1
  4274  001FE6  C07D  F082         	movff	_SingleFocusPulse$1316,SingleFocusPulse@x
  4275                           
  4276                           ;Pattern_PtrnFunctions.c: 215: val = (x < y ? 0x0F-x*0x0F/y : 0x00);
  4277  001FEA  0100               	movlb	0	; () banked
  4278  001FEC  5183               	movf	SingleFocusPulse@y& (0+255),w,b
  4279  001FEE  0100               	movlb	0	; () banked
  4280  001FF0  5D82               	subwf	SingleFocusPulse@x& (0+255),w,b
  4281  001FF2  A0D8               	btfss	status,0,c
  4282  001FF4  D006               	goto	l3477
  4283                           
  4284                           ; BSR set to: 0
  4285  001FF6  0E00               	movlw	0
  4286  001FF8  0100               	movlb	0	; () banked
  4287  001FFA  6F80               	movwf	(_SingleFocusPulse$1317+1)& (0+255),b
  4288  001FFC  0E00               	movlw	0
  4289  001FFE  6F7F               	movwf	_SingleFocusPulse$1317& (0+255),b
  4290  002000  D01E               	goto	l3479
  4291  002002                     l3477:
  4292                           
  4293                           ; BSR set to: 0
  4294  002002  0100               	movlb	0	; () banked
  4295  002004  5182               	movf	SingleFocusPulse@x& (0+255),w,b
  4296  002006  0D0F               	mullw	15
  4297  002008  CFF3 F060          	movff	prodl,___awdiv@dividend
  4298  00200C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4299  002010  C083  F062         	movff	SingleFocusPulse@y,___awdiv@divisor
  4300  002014  0100               	movlb	0	; () banked
  4301  002016  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4302  002018  EC6A  F017         	call	___awdiv	;wreg free
  4303  00201C  0100               	movlb	0	; () banked
  4304  00201E  1F60               	comf	?___awdiv& (0+255),f,b
  4305  002020  0100               	movlb	0	; () banked
  4306  002022  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4307  002024  0100               	movlb	0	; () banked
  4308  002026  4B60               	infsnz	?___awdiv& (0+255),f,b
  4309  002028  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4310  00202A  0E0F               	movlw	15
  4311  00202C  0100               	movlb	0	; () banked
  4312  00202E  2560               	addwf	?___awdiv& (0+255),w,b
  4313  002030  0100               	movlb	0	; () banked
  4314  002032  6F7F               	movwf	_SingleFocusPulse$1317& (0+255),b
  4315  002034  0E00               	movlw	0
  4316  002036  0100               	movlb	0	; () banked
  4317  002038  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4318  00203A  0100               	movlb	0	; () banked
  4319  00203C  6F80               	movwf	(_SingleFocusPulse$1317+1)& (0+255),b
  4320  00203E                     l3479:
  4321                           
  4322                           ; BSR set to: 0
  4323  00203E  C07F  F081         	movff	_SingleFocusPulse$1317,SingleFocusPulse@val
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;Pattern_PtrnFunctions.c: 216: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4327  002042  0100               	movlb	0	; () banked
  4328  002044  516F               	movf	SingleFocusPulse@base_sat& (0+255),w,b
  4329  002046  0100               	movlb	0	; () banked
  4330  002048  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4331  00204A  6B73               	clrf	(??_SingleFocusPulse+1)& (0+255),b
  4332  00204C  0100               	movlb	0	; () banked
  4333  00204E  3B72               	swapf	??_SingleFocusPulse& (0+255),f,b
  4334  002050  3B73               	swapf	(??_SingleFocusPulse+1)& (0+255),f,b
  4335  002052  0EF0               	movlw	240
  4336  002054  1773               	andwf	(??_SingleFocusPulse+1)& (0+255),f,b
  4337  002056  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4338  002058  0B0F               	andlw	15
  4339  00205A  1373               	iorwf	(??_SingleFocusPulse+1)& (0+255),f,b
  4340  00205C  0EF0               	movlw	240
  4341  00205E  1772               	andwf	??_SingleFocusPulse& (0+255),f,b
  4342  002060  0100               	movlb	0	; () banked
  4343  002062  516E               	movf	SingleFocusPulse@base_hue& (0+255),w,b
  4344  002064  0100               	movlb	0	; () banked
  4345  002066  6F75               	movwf	(??_SingleFocusPulse+3)& (0+255),b
  4346  002068  6B74               	clrf	(??_SingleFocusPulse+2)& (0+255),b
  4347  00206A  0100               	movlb	0	; () banked
  4348  00206C  5172               	movf	??_SingleFocusPulse& (0+255),w,b
  4349  00206E  0100               	movlb	0	; () banked
  4350  002070  1374               	iorwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4351  002072  0100               	movlb	0	; () banked
  4352  002074  5173               	movf	(??_SingleFocusPulse+1)& (0+255),w,b
  4353  002076  0100               	movlb	0	; () banked
  4354  002078  1375               	iorwf	(??_SingleFocusPulse+3)& (0+255),f,b
  4355  00207A  0100               	movlb	0	; () banked
  4356  00207C  5181               	movf	SingleFocusPulse@val& (0+255),w,b
  4357  00207E  0100               	movlb	0	; () banked
  4358  002080  1374               	iorwf	(??_SingleFocusPulse+2)& (0+255),f,b
  4359  002082  0E00               	movlw	0
  4360  002084  1375               	iorwf	(??_SingleFocusPulse+3)& (0+255),f,b
  4361  002086  0100               	movlb	0	; () banked
  4362  002088  5185               	movf	SingleFocusPulse@i& (0+255),w,b
  4363  00208A  0D02               	mullw	2
  4364  00208C  50F3               	movf	prodl,w,c
  4365  00208E  0100               	movlb	0	; () banked
  4366  002090  2568               	addwf	SingleFocusPulse@ptrnPointer& (0+255),w,b
  4367  002092  6ED9               	movwf	fsr2l,c
  4368  002094  50F4               	movf	prodh,w,c
  4369  002096  0100               	movlb	0	; () banked
  4370  002098  2169               	addwfc	(SingleFocusPulse@ptrnPointer+1)& (0+255),w,b
  4371  00209A  6EDA               	movwf	fsr2h,c
  4372  00209C  C074  FFDE         	movff	??_SingleFocusPulse+2,postinc2
  4373  0020A0  C075  FFDD         	movff	??_SingleFocusPulse+3,postdec2
  4374                           
  4375                           ; BSR set to: 0
  4376  0020A4  0100               	movlb	0	; () banked
  4377  0020A6  2B85               	incf	SingleFocusPulse@i& (0+255),f,b
  4378  0020A8  D6D6               	goto	l3459
  4379  0020AA                     l3487:
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;Pattern_PtrnFunctions.c: 217: }
  4383                           ;Pattern_PtrnFunctions.c: 218: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4384  0020AA  C06A  FFD9         	movff	SingleFocusPulse@ptrnStepCounter,fsr2l
  4385  0020AE  C06B  FFDA         	movff	SingleFocusPulse@ptrnStepCounter+1,fsr2h
  4386  0020B2  50DF               	movf	indf2,w,c
  4387  0020B4  0100               	movlb	0	; () banked
  4388  0020B6  6F72               	movwf	??_SingleFocusPulse& (0+255),b
  4389  0020B8  0E01               	movlw	1
  4390  0020BA  0100               	movlb	0	; () banked
  4391  0020BC  2572               	addwf	??_SingleFocusPulse& (0+255),w,b
  4392  0020BE  0100               	movlb	0	; () banked
  4393  0020C0  6F60               	movwf	___awmod@dividend& (0+255),b
  4394  0020C2  0100               	movlb	0	; () banked
  4395  0020C4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4396  0020C6  0E00               	movlw	0
  4397  0020C8  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4398  0020CA  0E00               	movlw	0
  4399  0020CC  0100               	movlb	0	; () banked
  4400  0020CE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4401  0020D0  0E4C               	movlw	76
  4402  0020D2  6F62               	movwf	___awmod@divisor& (0+255),b
  4403  0020D4  ECCE  F018         	call	___awmod	;wreg free
  4404  0020D8  0100               	movlb	0	; () banked
  4405  0020DA  5160               	movf	?___awmod& (0+255),w,b
  4406  0020DC  C06A  FFD9         	movff	SingleFocusPulse@ptrnStepCounter,fsr2l
  4407  0020E0  C06B  FFDA         	movff	SingleFocusPulse@ptrnStepCounter+1,fsr2h
  4408  0020E4  6EDF               	movwf	indf2,c
  4409                           
  4410                           ; BSR set to: 0
  4411  0020E6  0012               	return		;funcret
  4412  0020E8                     __end_of_SingleFocusPulse:
  4413                           	opt stack 0
  4414                           tosu	equ	0xFFF
  4415                           tosh	equ	0xFFE
  4416                           tosl	equ	0xFFD
  4417                           pclath	equ	0xFFA
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           prodh	equ	0xFF4
  4423                           prodl	equ	0xFF3
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           postdec1	equ	0xFE5
  4427                           fsr1h	equ	0xFE2
  4428                           fsr1l	equ	0xFE1
  4429                           indf2	equ	0xFDF
  4430                           postinc2	equ	0xFDE
  4431                           postdec2	equ	0xFDD
  4432                           fsr2h	equ	0xFDA
  4433                           fsr2l	equ	0xFD9
  4434                           status	equ	0xFD8
  4435                           
  4436 ;; *************** function _SingleFadedLoop *****************
  4437 ;; Defined at:
  4438 ;;		line 124 in file "Pattern_PtrnFunctions.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4441 ;;		 -> PixelPattern(152), 
  4442 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4443 ;;		 -> PatternStepCounter(1), 
  4444 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4445 ;;		 -> CycleCounter(4), 
  4446 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4447 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4448 ;;  15734           2   16[BANK0 ] PTR void 
  4449 ;;		 -> NULL(0), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  i               1   35[BANK0 ] unsigned char 
  4452 ;;  x               1   34[BANK0 ] unsigned char 
  4453 ;;  val             1   33[BANK0 ] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4463 ;;      Params:         0      10       0       0
  4464 ;;      Locals:         0       7       0       0
  4465 ;;      Temps:          0      11       0       0
  4466 ;;      Totals:         0      28       0       0
  4467 ;;Total ram usage:       28 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    8
  4470 ;; This function calls:
  4471 ;;		___awdiv
  4472 ;;		___awmod
  4473 ;; This function is called by:
  4474 ;;		_UpdatePattern
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text17
  4479  0020E8                     __ptext17:
  4480                           	opt stack 0
  4481  0020E8                     _SingleFadedLoop:
  4482                           	opt stack 18
  4483                           
  4484                           ;Pattern_PtrnFunctions.c: 125: uint8_t val, x;
  4485                           ;Pattern_PtrnFunctions.c: 127: for(uint8_t i=0;i<76;i++){
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;incstack = 0
  4489  0020E8  0E00               	movlw	0
  4490  0020EA  0100               	movlb	0	; () banked
  4491  0020EC  6F83               	movwf	SingleFadedLoop@i& (0+255),b
  4492  0020EE                     l3285:
  4493                           
  4494                           ; BSR set to: 0
  4495  0020EE  0E4B               	movlw	75
  4496  0020F0  0100               	movlb	0	; () banked
  4497  0020F2  6583               	cpfsgt	SingleFadedLoop@i& (0+255),b
  4498  0020F4  D001               	goto	l3289
  4499  0020F6  D126               	goto	l3311
  4500  0020F8                     l3289:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;Pattern_PtrnFunctions.c: 129: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  4504  0020F8  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4505  0020FC  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4506  002100  50DF               	movf	indf2,w,c
  4507  002102  0100               	movlb	0	; () banked
  4508  002104  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4509  002106  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4510  002108  0100               	movlb	0	; () banked
  4511  00210A  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4512  00210C  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4513  00210E  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4514  002110  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4515  002112  0100               	movlb	0	; () banked
  4516  002114  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4517  002116  0100               	movlb	0	; () banked
  4518  002118  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4519  00211A  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4520  00211C  0100               	movlb	0	; () banked
  4521  00211E  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4522  002120  0100               	movlb	0	; () banked
  4523  002122  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4524  002124  0100               	movlb	0	; () banked
  4525  002126  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4526  002128  0100               	movlb	0	; () banked
  4527  00212A  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4528  00212C  0E4C               	movlw	76
  4529  00212E  0100               	movlb	0	; () banked
  4530  002130  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4531  002132  0100               	movlb	0	; () banked
  4532  002134  6F60               	movwf	___awmod@dividend& (0+255),b
  4533  002136  0E00               	movlw	0
  4534  002138  0100               	movlb	0	; () banked
  4535  00213A  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4536  00213C  0100               	movlb	0	; () banked
  4537  00213E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4538  002140  0E00               	movlw	0
  4539  002142  0100               	movlb	0	; () banked
  4540  002144  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4541  002146  0E4C               	movlw	76
  4542  002148  6F62               	movwf	___awmod@divisor& (0+255),b
  4543  00214A  ECCE  F018         	call	___awmod	;wreg free
  4544  00214E  C060  F076         	movff	?___awmod,??_SingleFadedLoop+4
  4545  002152  C061  F077         	movff	?___awmod+1,??_SingleFadedLoop+5
  4546  002156  0100               	movlb	0	; () banked
  4547  002158  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4548  00215A  0100               	movlb	0	; () banked
  4549  00215C  6F78               	movwf	(??_SingleFadedLoop+6)& (0+255),b
  4550  00215E  6B79               	clrf	(??_SingleFadedLoop+7)& (0+255),b
  4551  002160  0100               	movlb	0	; () banked
  4552  002162  1F78               	comf	(??_SingleFadedLoop+6)& (0+255),f,b
  4553  002164  1F79               	comf	(??_SingleFadedLoop+7)& (0+255),f,b
  4554  002166  4B78               	infsnz	(??_SingleFadedLoop+6)& (0+255),f,b
  4555  002168  2B79               	incf	(??_SingleFadedLoop+7)& (0+255),f,b
  4556  00216A  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4557  00216E  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4558  002172  50DF               	movf	indf2,w,c
  4559  002174  0100               	movlb	0	; () banked
  4560  002176  6F7A               	movwf	(??_SingleFadedLoop+8)& (0+255),b
  4561  002178  6B7B               	clrf	(??_SingleFadedLoop+9)& (0+255),b
  4562  00217A  0100               	movlb	0	; () banked
  4563  00217C  5178               	movf	(??_SingleFadedLoop+6)& (0+255),w,b
  4564  00217E  0100               	movlb	0	; () banked
  4565  002180  277A               	addwf	(??_SingleFadedLoop+8)& (0+255),f,b
  4566  002182  0100               	movlb	0	; () banked
  4567  002184  5179               	movf	(??_SingleFadedLoop+7)& (0+255),w,b
  4568  002186  0100               	movlb	0	; () banked
  4569  002188  237B               	addwfc	(??_SingleFadedLoop+9)& (0+255),f,b
  4570  00218A  0E4C               	movlw	76
  4571  00218C  0100               	movlb	0	; () banked
  4572  00218E  257A               	addwf	(??_SingleFadedLoop+8)& (0+255),w,b
  4573  002190  0100               	movlb	0	; () banked
  4574  002192  6F60               	movwf	___awmod@dividend& (0+255),b
  4575  002194  0E00               	movlw	0
  4576  002196  0100               	movlb	0	; () banked
  4577  002198  217B               	addwfc	(??_SingleFadedLoop+9)& (0+255),w,b
  4578  00219A  0100               	movlb	0	; () banked
  4579  00219C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4580  00219E  0E00               	movlw	0
  4581  0021A0  0100               	movlb	0	; () banked
  4582  0021A2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4583  0021A4  0E4C               	movlw	76
  4584  0021A6  6F62               	movwf	___awmod@divisor& (0+255),b
  4585  0021A8  ECCE  F018         	call	___awmod	;wreg free
  4586  0021AC  0100               	movlb	0	; () banked
  4587  0021AE  5160               	movf	?___awmod& (0+255),w,b
  4588  0021B0  0100               	movlb	0	; () banked
  4589  0021B2  5D76               	subwf	(??_SingleFadedLoop+4)& (0+255),w,b
  4590  0021B4  0100               	movlb	0	; () banked
  4591  0021B6  5177               	movf	(??_SingleFadedLoop+5)& (0+255),w,b
  4592  0021B8  0A80               	xorlw	128
  4593  0021BA  0100               	movlb	0	; () banked
  4594  0021BC  6F7C               	movwf	(??_SingleFadedLoop+10)& (0+255),b
  4595  0021BE  0100               	movlb	0	; () banked
  4596  0021C0  5161               	movf	(?___awmod+1)& (0+255),w,b
  4597  0021C2  0A80               	xorlw	128
  4598  0021C4  0100               	movlb	0	; () banked
  4599  0021C6  597C               	subwfb	(??_SingleFadedLoop+10)& (0+255),w,b
  4600  0021C8  A0D8               	btfss	status,0,c
  4601  0021CA  D02C               	goto	l3293
  4602                           
  4603                           ; BSR set to: 0
  4604  0021CC  0100               	movlb	0	; () banked
  4605  0021CE  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4606  0021D0  0100               	movlb	0	; () banked
  4607  0021D2  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4608  0021D4  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4609  0021D6  0100               	movlb	0	; () banked
  4610  0021D8  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4611  0021DA  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4612  0021DC  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4613  0021DE  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4614  0021E0  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4615  0021E4  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4616  0021E8  50DF               	movf	indf2,w,c
  4617  0021EA  0100               	movlb	0	; () banked
  4618  0021EC  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4619  0021EE  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4620  0021F0  0100               	movlb	0	; () banked
  4621  0021F2  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4622  0021F4  0100               	movlb	0	; () banked
  4623  0021F6  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4624  0021F8  0100               	movlb	0	; () banked
  4625  0021FA  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4626  0021FC  0100               	movlb	0	; () banked
  4627  0021FE  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4628  002200  0E4C               	movlw	76
  4629  002202  0100               	movlb	0	; () banked
  4630  002204  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4631  002206  0100               	movlb	0	; () banked
  4632  002208  6F60               	movwf	___awmod@dividend& (0+255),b
  4633  00220A  0E00               	movlw	0
  4634  00220C  0100               	movlb	0	; () banked
  4635  00220E  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4636  002210  0100               	movlb	0	; () banked
  4637  002212  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4638  002214  0E00               	movlw	0
  4639  002216  0100               	movlb	0	; () banked
  4640  002218  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4641  00221A  0E4C               	movlw	76
  4642  00221C  6F62               	movwf	___awmod@divisor& (0+255),b
  4643  00221E  ECCE  F018         	call	___awmod	;wreg free
  4644  002222  D02B               	goto	L8
  4645  002224                     l3293:
  4646  002224  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4647  002228  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4648  00222C  50DF               	movf	indf2,w,c
  4649  00222E  0100               	movlb	0	; () banked
  4650  002230  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4651  002232  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4652  002234  0100               	movlb	0	; () banked
  4653  002236  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4654  002238  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4655  00223A  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4656  00223C  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4657  00223E  0100               	movlb	0	; () banked
  4658  002240  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4659  002242  0100               	movlb	0	; () banked
  4660  002244  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4661  002246  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4662  002248  0100               	movlb	0	; () banked
  4663  00224A  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4664  00224C  0100               	movlb	0	; () banked
  4665  00224E  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4666  002250  0100               	movlb	0	; () banked
  4667  002252  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4668  002254  0100               	movlb	0	; () banked
  4669  002256  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4670  002258  0E4C               	movlw	76
  4671  00225A  0100               	movlb	0	; () banked
  4672  00225C  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4673  00225E  0100               	movlb	0	; () banked
  4674  002260  6F60               	movwf	___awmod@dividend& (0+255),b
  4675  002262  0E00               	movlw	0
  4676  002264  0100               	movlb	0	; () banked
  4677  002266  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4678  002268  0100               	movlb	0	; () banked
  4679  00226A  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4680  00226C  0E00               	movlw	0
  4681  00226E  0100               	movlb	0	; () banked
  4682  002270  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4683  002272  0E4C               	movlw	76
  4684  002274  6F62               	movwf	___awmod@divisor& (0+255),b
  4685  002276  ECCE  F018         	call	___awmod	;wreg free
  4686  00227A                     L8:
  4687  00227A  C060  F07D         	movff	?___awmod,_SingleFadedLoop$1250
  4688  00227E  C061  F07E         	movff	?___awmod+1,_SingleFadedLoop$1250+1
  4689  002282  C07D  F082         	movff	_SingleFadedLoop$1250,SingleFadedLoop@x
  4690                           
  4691                           ;Pattern_PtrnFunctions.c: 130: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4692  002286  0E04               	movlw	4
  4693  002288  0100               	movlb	0	; () banked
  4694  00228A  6582               	cpfsgt	SingleFadedLoop@x& (0+255),b
  4695  00228C  D006               	goto	l3301
  4696                           
  4697                           ; BSR set to: 0
  4698  00228E  0E00               	movlw	0
  4699  002290  0100               	movlb	0	; () banked
  4700  002292  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4701  002294  0E00               	movlw	0
  4702  002296  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4703  002298  D01F               	goto	l3303
  4704  00229A                     l3301:
  4705                           
  4706                           ; BSR set to: 0
  4707  00229A  0100               	movlb	0	; () banked
  4708  00229C  5182               	movf	SingleFadedLoop@x& (0+255),w,b
  4709  00229E  0D0F               	mullw	15
  4710  0022A0  CFF3 F060          	movff	prodl,___awdiv@dividend
  4711  0022A4  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4712  0022A8  0E00               	movlw	0
  4713  0022AA  0100               	movlb	0	; () banked
  4714  0022AC  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4715  0022AE  0E05               	movlw	5
  4716  0022B0  6F62               	movwf	___awdiv@divisor& (0+255),b
  4717  0022B2  EC6A  F017         	call	___awdiv	;wreg free
  4718  0022B6  0100               	movlb	0	; () banked
  4719  0022B8  1F60               	comf	?___awdiv& (0+255),f,b
  4720  0022BA  0100               	movlb	0	; () banked
  4721  0022BC  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4722  0022BE  0100               	movlb	0	; () banked
  4723  0022C0  4B60               	infsnz	?___awdiv& (0+255),f,b
  4724  0022C2  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4725  0022C4  0E0F               	movlw	15
  4726  0022C6  0100               	movlb	0	; () banked
  4727  0022C8  2560               	addwf	?___awdiv& (0+255),w,b
  4728  0022CA  0100               	movlb	0	; () banked
  4729  0022CC  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4730  0022CE  0E00               	movlw	0
  4731  0022D0  0100               	movlb	0	; () banked
  4732  0022D2  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4733  0022D4  0100               	movlb	0	; () banked
  4734  0022D6  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4735  0022D8                     l3303:
  4736                           
  4737                           ; BSR set to: 0
  4738  0022D8  C07F  F081         	movff	_SingleFadedLoop$1251,SingleFadedLoop@val
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;Pattern_PtrnFunctions.c: 131: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4742  0022DC  0100               	movlb	0	; () banked
  4743  0022DE  516F               	movf	SingleFadedLoop@base_sat& (0+255),w,b
  4744  0022E0  0100               	movlb	0	; () banked
  4745  0022E2  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4746  0022E4  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4747  0022E6  0100               	movlb	0	; () banked
  4748  0022E8  3B72               	swapf	??_SingleFadedLoop& (0+255),f,b
  4749  0022EA  3B73               	swapf	(??_SingleFadedLoop+1)& (0+255),f,b
  4750  0022EC  0EF0               	movlw	240
  4751  0022EE  1773               	andwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4752  0022F0  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4753  0022F2  0B0F               	andlw	15
  4754  0022F4  1373               	iorwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4755  0022F6  0EF0               	movlw	240
  4756  0022F8  1772               	andwf	??_SingleFadedLoop& (0+255),f,b
  4757  0022FA  0100               	movlb	0	; () banked
  4758  0022FC  516E               	movf	SingleFadedLoop@base_hue& (0+255),w,b
  4759  0022FE  0100               	movlb	0	; () banked
  4760  002300  6F75               	movwf	(??_SingleFadedLoop+3)& (0+255),b
  4761  002302  6B74               	clrf	(??_SingleFadedLoop+2)& (0+255),b
  4762  002304  0100               	movlb	0	; () banked
  4763  002306  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4764  002308  0100               	movlb	0	; () banked
  4765  00230A  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4766  00230C  0100               	movlb	0	; () banked
  4767  00230E  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4768  002310  0100               	movlb	0	; () banked
  4769  002312  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4770  002314  0100               	movlb	0	; () banked
  4771  002316  5181               	movf	SingleFadedLoop@val& (0+255),w,b
  4772  002318  0100               	movlb	0	; () banked
  4773  00231A  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4774  00231C  0E00               	movlw	0
  4775  00231E  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4776  002320  0100               	movlb	0	; () banked
  4777  002322  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4778  002324  0D02               	mullw	2
  4779  002326  50F3               	movf	prodl,w,c
  4780  002328  0100               	movlb	0	; () banked
  4781  00232A  2568               	addwf	SingleFadedLoop@ptrnPointer& (0+255),w,b
  4782  00232C  6ED9               	movwf	fsr2l,c
  4783  00232E  50F4               	movf	prodh,w,c
  4784  002330  0100               	movlb	0	; () banked
  4785  002332  2169               	addwfc	(SingleFadedLoop@ptrnPointer+1)& (0+255),w,b
  4786  002334  6EDA               	movwf	fsr2h,c
  4787  002336  C074  FFDE         	movff	??_SingleFadedLoop+2,postinc2
  4788  00233A  C075  FFDD         	movff	??_SingleFadedLoop+3,postdec2
  4789                           
  4790                           ; BSR set to: 0
  4791  00233E  0100               	movlb	0	; () banked
  4792  002340  2B83               	incf	SingleFadedLoop@i& (0+255),f,b
  4793  002342  D6D5               	goto	l3285
  4794  002344                     l3311:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;Pattern_PtrnFunctions.c: 132: }
  4798                           ;Pattern_PtrnFunctions.c: 133: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4799  002344  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4800  002348  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4801  00234C  50DF               	movf	indf2,w,c
  4802  00234E  0100               	movlb	0	; () banked
  4803  002350  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4804  002352  0E01               	movlw	1
  4805  002354  0100               	movlb	0	; () banked
  4806  002356  2572               	addwf	??_SingleFadedLoop& (0+255),w,b
  4807  002358  0100               	movlb	0	; () banked
  4808  00235A  6F60               	movwf	___awmod@dividend& (0+255),b
  4809  00235C  0100               	movlb	0	; () banked
  4810  00235E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4811  002360  0E00               	movlw	0
  4812  002362  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4813  002364  0E00               	movlw	0
  4814  002366  0100               	movlb	0	; () banked
  4815  002368  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4816  00236A  0E4C               	movlw	76
  4817  00236C  6F62               	movwf	___awmod@divisor& (0+255),b
  4818  00236E  ECCE  F018         	call	___awmod	;wreg free
  4819  002372  0100               	movlb	0	; () banked
  4820  002374  5160               	movf	?___awmod& (0+255),w,b
  4821  002376  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4822  00237A  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4823  00237E  6EDF               	movwf	indf2,c
  4824                           
  4825                           ; BSR set to: 0
  4826  002380  0012               	return		;funcret
  4827  002382                     __end_of_SingleFadedLoop:
  4828                           	opt stack 0
  4829                           tosu	equ	0xFFF
  4830                           tosh	equ	0xFFE
  4831                           tosl	equ	0xFFD
  4832                           pclath	equ	0xFFA
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           postdec1	equ	0xFE5
  4842                           fsr1h	equ	0xFE2
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           postdec2	equ	0xFDD
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function _MirroredQuadrants *****************
  4852 ;; Defined at:
  4853 ;;		line 191 in file "Pattern_PtrnFunctions.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4856 ;;		 -> PixelPattern(152), 
  4857 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4858 ;;		 -> PatternStepCounter(1), 
  4859 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4860 ;;		 -> CycleCounter(4), 
  4861 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4862 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4863 ;;  15787           2   16[BANK0 ] PTR void 
  4864 ;;		 -> NULL(0), 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  i               1   35[BANK0 ] unsigned char 
  4867 ;;  val             1   34[BANK0 ] unsigned char 
  4868 ;;  x               1   33[BANK0 ] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4878 ;;      Params:         0      10       0       0
  4879 ;;      Locals:         0       7       0       0
  4880 ;;      Temps:          0      11       0       0
  4881 ;;      Totals:         0      28       0       0
  4882 ;;Total ram usage:       28 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    8
  4885 ;; This function calls:
  4886 ;;		___awdiv
  4887 ;;		___awmod
  4888 ;; This function is called by:
  4889 ;;		_UpdatePattern
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text18
  4894  001380                     __ptext18:
  4895                           	opt stack 0
  4896  001380                     _MirroredQuadrants:
  4897                           	opt stack 18
  4898                           
  4899                           ;Pattern_PtrnFunctions.c: 192: uint8_t val, x;
  4900                           ;Pattern_PtrnFunctions.c: 194: for(uint8_t i=0;i<76/4;i++){
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;incstack = 0
  4904  001380  0E00               	movlw	0
  4905  001382  0100               	movlb	0	; () banked
  4906  001384  6F83               	movwf	MirroredQuadrants@i& (0+255),b
  4907  001386                     l3421:
  4908                           
  4909                           ; BSR set to: 0
  4910  001386  0E12               	movlw	18
  4911  001388  0100               	movlb	0	; () banked
  4912  00138A  6583               	cpfsgt	MirroredQuadrants@i& (0+255),b
  4913  00138C  D001               	goto	l3425
  4914  00138E  D1EF               	goto	l3453
  4915  001390                     l3425:
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;Pattern_PtrnFunctions.c: 196: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  4919  001390  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  4920  001394  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  4921  001398  50DF               	movf	indf2,w,c
  4922  00139A  0100               	movlb	0	; () banked
  4923  00139C  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  4924  00139E  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  4925  0013A0  0100               	movlb	0	; () banked
  4926  0013A2  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  4927  0013A4  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  4928  0013A6  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  4929  0013A8  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  4930  0013AA  0100               	movlb	0	; () banked
  4931  0013AC  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  4932  0013AE  0100               	movlb	0	; () banked
  4933  0013B0  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  4934  0013B2  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  4935  0013B4  0100               	movlb	0	; () banked
  4936  0013B6  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  4937  0013B8  0100               	movlb	0	; () banked
  4938  0013BA  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  4939  0013BC  0100               	movlb	0	; () banked
  4940  0013BE  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  4941  0013C0  0100               	movlb	0	; () banked
  4942  0013C2  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  4943  0013C4  0E4C               	movlw	76
  4944  0013C6  0100               	movlb	0	; () banked
  4945  0013C8  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  4946  0013CA  0100               	movlb	0	; () banked
  4947  0013CC  6F60               	movwf	___awmod@dividend& (0+255),b
  4948  0013CE  0E00               	movlw	0
  4949  0013D0  0100               	movlb	0	; () banked
  4950  0013D2  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  4951  0013D4  0100               	movlb	0	; () banked
  4952  0013D6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4953  0013D8  0E00               	movlw	0
  4954  0013DA  0100               	movlb	0	; () banked
  4955  0013DC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4956  0013DE  0E4C               	movlw	76
  4957  0013E0  6F62               	movwf	___awmod@divisor& (0+255),b
  4958  0013E2  ECCE  F018         	call	___awmod	;wreg free
  4959  0013E6  C060  F076         	movff	?___awmod,??_MirroredQuadrants+4
  4960  0013EA  C061  F077         	movff	?___awmod+1,??_MirroredQuadrants+5
  4961  0013EE  0100               	movlb	0	; () banked
  4962  0013F0  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  4963  0013F2  0100               	movlb	0	; () banked
  4964  0013F4  6F78               	movwf	(??_MirroredQuadrants+6)& (0+255),b
  4965  0013F6  6B79               	clrf	(??_MirroredQuadrants+7)& (0+255),b
  4966  0013F8  0100               	movlb	0	; () banked
  4967  0013FA  1F78               	comf	(??_MirroredQuadrants+6)& (0+255),f,b
  4968  0013FC  1F79               	comf	(??_MirroredQuadrants+7)& (0+255),f,b
  4969  0013FE  4B78               	infsnz	(??_MirroredQuadrants+6)& (0+255),f,b
  4970  001400  2B79               	incf	(??_MirroredQuadrants+7)& (0+255),f,b
  4971  001402  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  4972  001406  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  4973  00140A  50DF               	movf	indf2,w,c
  4974  00140C  0100               	movlb	0	; () banked
  4975  00140E  6F7A               	movwf	(??_MirroredQuadrants+8)& (0+255),b
  4976  001410  6B7B               	clrf	(??_MirroredQuadrants+9)& (0+255),b
  4977  001412  0100               	movlb	0	; () banked
  4978  001414  5178               	movf	(??_MirroredQuadrants+6)& (0+255),w,b
  4979  001416  0100               	movlb	0	; () banked
  4980  001418  277A               	addwf	(??_MirroredQuadrants+8)& (0+255),f,b
  4981  00141A  0100               	movlb	0	; () banked
  4982  00141C  5179               	movf	(??_MirroredQuadrants+7)& (0+255),w,b
  4983  00141E  0100               	movlb	0	; () banked
  4984  001420  237B               	addwfc	(??_MirroredQuadrants+9)& (0+255),f,b
  4985  001422  0E4C               	movlw	76
  4986  001424  0100               	movlb	0	; () banked
  4987  001426  257A               	addwf	(??_MirroredQuadrants+8)& (0+255),w,b
  4988  001428  0100               	movlb	0	; () banked
  4989  00142A  6F60               	movwf	___awmod@dividend& (0+255),b
  4990  00142C  0E00               	movlw	0
  4991  00142E  0100               	movlb	0	; () banked
  4992  001430  217B               	addwfc	(??_MirroredQuadrants+9)& (0+255),w,b
  4993  001432  0100               	movlb	0	; () banked
  4994  001434  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4995  001436  0E00               	movlw	0
  4996  001438  0100               	movlb	0	; () banked
  4997  00143A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4998  00143C  0E4C               	movlw	76
  4999  00143E  6F62               	movwf	___awmod@divisor& (0+255),b
  5000  001440  ECCE  F018         	call	___awmod	;wreg free
  5001  001444  0100               	movlb	0	; () banked
  5002  001446  5160               	movf	?___awmod& (0+255),w,b
  5003  001448  0100               	movlb	0	; () banked
  5004  00144A  5D76               	subwf	(??_MirroredQuadrants+4)& (0+255),w,b
  5005  00144C  0100               	movlb	0	; () banked
  5006  00144E  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5007  001450  0A80               	xorlw	128
  5008  001452  0100               	movlb	0	; () banked
  5009  001454  6F7C               	movwf	(??_MirroredQuadrants+10)& (0+255),b
  5010  001456  0100               	movlb	0	; () banked
  5011  001458  5161               	movf	(?___awmod+1)& (0+255),w,b
  5012  00145A  0A80               	xorlw	128
  5013  00145C  0100               	movlb	0	; () banked
  5014  00145E  597C               	subwfb	(??_MirroredQuadrants+10)& (0+255),w,b
  5015  001460  A0D8               	btfss	status,0,c
  5016  001462  D02C               	goto	l3429
  5017                           
  5018                           ; BSR set to: 0
  5019  001464  0100               	movlb	0	; () banked
  5020  001466  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5021  001468  0100               	movlb	0	; () banked
  5022  00146A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5023  00146C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5024  00146E  0100               	movlb	0	; () banked
  5025  001470  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5026  001472  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5027  001474  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5028  001476  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5029  001478  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5030  00147C  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5031  001480  50DF               	movf	indf2,w,c
  5032  001482  0100               	movlb	0	; () banked
  5033  001484  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5034  001486  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5035  001488  0100               	movlb	0	; () banked
  5036  00148A  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5037  00148C  0100               	movlb	0	; () banked
  5038  00148E  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5039  001490  0100               	movlb	0	; () banked
  5040  001492  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5041  001494  0100               	movlb	0	; () banked
  5042  001496  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5043  001498  0E4C               	movlw	76
  5044  00149A  0100               	movlb	0	; () banked
  5045  00149C  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5046  00149E  0100               	movlb	0	; () banked
  5047  0014A0  6F60               	movwf	___awmod@dividend& (0+255),b
  5048  0014A2  0E00               	movlw	0
  5049  0014A4  0100               	movlb	0	; () banked
  5050  0014A6  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5051  0014A8  0100               	movlb	0	; () banked
  5052  0014AA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5053  0014AC  0E00               	movlw	0
  5054  0014AE  0100               	movlb	0	; () banked
  5055  0014B0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5056  0014B2  0E4C               	movlw	76
  5057  0014B4  6F62               	movwf	___awmod@divisor& (0+255),b
  5058  0014B6  ECCE  F018         	call	___awmod	;wreg free
  5059  0014BA  D02B               	goto	L9
  5060  0014BC                     l3429:
  5061  0014BC  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5062  0014C0  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5063  0014C4  50DF               	movf	indf2,w,c
  5064  0014C6  0100               	movlb	0	; () banked
  5065  0014C8  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5066  0014CA  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5067  0014CC  0100               	movlb	0	; () banked
  5068  0014CE  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5069  0014D0  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5070  0014D2  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5071  0014D4  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5072  0014D6  0100               	movlb	0	; () banked
  5073  0014D8  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5074  0014DA  0100               	movlb	0	; () banked
  5075  0014DC  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5076  0014DE  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5077  0014E0  0100               	movlb	0	; () banked
  5078  0014E2  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5079  0014E4  0100               	movlb	0	; () banked
  5080  0014E6  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5081  0014E8  0100               	movlb	0	; () banked
  5082  0014EA  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5083  0014EC  0100               	movlb	0	; () banked
  5084  0014EE  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5085  0014F0  0E4C               	movlw	76
  5086  0014F2  0100               	movlb	0	; () banked
  5087  0014F4  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5088  0014F6  0100               	movlb	0	; () banked
  5089  0014F8  6F60               	movwf	___awmod@dividend& (0+255),b
  5090  0014FA  0E00               	movlw	0
  5091  0014FC  0100               	movlb	0	; () banked
  5092  0014FE  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5093  001500  0100               	movlb	0	; () banked
  5094  001502  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5095  001504  0E00               	movlw	0
  5096  001506  0100               	movlb	0	; () banked
  5097  001508  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5098  00150A  0E4C               	movlw	76
  5099  00150C  6F62               	movwf	___awmod@divisor& (0+255),b
  5100  00150E  ECCE  F018         	call	___awmod	;wreg free
  5101  001512                     L9:
  5102  001512  C060  F07D         	movff	?___awmod,_MirroredQuadrants$1302
  5103  001516  C061  F07E         	movff	?___awmod+1,_MirroredQuadrants$1302+1
  5104  00151A  C07D  F081         	movff	_MirroredQuadrants$1302,MirroredQuadrants@x
  5105                           
  5106                           ;Pattern_PtrnFunctions.c: 197: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  5107  00151E  0E04               	movlw	4
  5108  001520  0100               	movlb	0	; () banked
  5109  001522  6581               	cpfsgt	MirroredQuadrants@x& (0+255),b
  5110  001524  D006               	goto	l3437
  5111                           
  5112                           ; BSR set to: 0
  5113  001526  0E00               	movlw	0
  5114  001528  0100               	movlb	0	; () banked
  5115  00152A  6F80               	movwf	(_MirroredQuadrants$1303+1)& (0+255),b
  5116  00152C  0E00               	movlw	0
  5117  00152E  6F7F               	movwf	_MirroredQuadrants$1303& (0+255),b
  5118  001530  D01F               	goto	l3439
  5119  001532                     l3437:
  5120                           
  5121                           ; BSR set to: 0
  5122  001532  0100               	movlb	0	; () banked
  5123  001534  5181               	movf	MirroredQuadrants@x& (0+255),w,b
  5124  001536  0D0F               	mullw	15
  5125  001538  CFF3 F060          	movff	prodl,___awdiv@dividend
  5126  00153C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5127  001540  0E00               	movlw	0
  5128  001542  0100               	movlb	0	; () banked
  5129  001544  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5130  001546  0E05               	movlw	5
  5131  001548  6F62               	movwf	___awdiv@divisor& (0+255),b
  5132  00154A  EC6A  F017         	call	___awdiv	;wreg free
  5133  00154E  0100               	movlb	0	; () banked
  5134  001550  1F60               	comf	?___awdiv& (0+255),f,b
  5135  001552  0100               	movlb	0	; () banked
  5136  001554  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5137  001556  0100               	movlb	0	; () banked
  5138  001558  4B60               	infsnz	?___awdiv& (0+255),f,b
  5139  00155A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5140  00155C  0E0F               	movlw	15
  5141  00155E  0100               	movlb	0	; () banked
  5142  001560  2560               	addwf	?___awdiv& (0+255),w,b
  5143  001562  0100               	movlb	0	; () banked
  5144  001564  6F7F               	movwf	_MirroredQuadrants$1303& (0+255),b
  5145  001566  0E00               	movlw	0
  5146  001568  0100               	movlb	0	; () banked
  5147  00156A  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5148  00156C  0100               	movlb	0	; () banked
  5149  00156E  6F80               	movwf	(_MirroredQuadrants$1303+1)& (0+255),b
  5150  001570                     l3439:
  5151                           
  5152                           ; BSR set to: 0
  5153  001570  C07F  F082         	movff	_MirroredQuadrants$1303,MirroredQuadrants@val
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;Pattern_PtrnFunctions.c: 198: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  5157  001574  0100               	movlb	0	; () banked
  5158  001576  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5159  001578  0100               	movlb	0	; () banked
  5160  00157A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5161  00157C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5162  00157E  0100               	movlb	0	; () banked
  5163  001580  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5164  001582  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5165  001584  0EF0               	movlw	240
  5166  001586  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5167  001588  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5168  00158A  0B0F               	andlw	15
  5169  00158C  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5170  00158E  0EF0               	movlw	240
  5171  001590  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5172  001592  0100               	movlb	0	; () banked
  5173  001594  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5174  001596  0100               	movlb	0	; () banked
  5175  001598  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5176  00159A  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5177  00159C  0100               	movlb	0	; () banked
  5178  00159E  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5179  0015A0  0100               	movlb	0	; () banked
  5180  0015A2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5181  0015A4  0100               	movlb	0	; () banked
  5182  0015A6  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5183  0015A8  0100               	movlb	0	; () banked
  5184  0015AA  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5185  0015AC  0100               	movlb	0	; () banked
  5186  0015AE  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5187  0015B0  0100               	movlb	0	; () banked
  5188  0015B2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5189  0015B4  0E00               	movlw	0
  5190  0015B6  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5191  0015B8  0100               	movlb	0	; () banked
  5192  0015BA  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5193  0015BC  0D02               	mullw	2
  5194  0015BE  50F3               	movf	prodl,w,c
  5195  0015C0  0100               	movlb	0	; () banked
  5196  0015C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5197  0015C4  6ED9               	movwf	fsr2l,c
  5198  0015C6  50F4               	movf	prodh,w,c
  5199  0015C8  0100               	movlb	0	; () banked
  5200  0015CA  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5201  0015CC  6EDA               	movwf	fsr2h,c
  5202  0015CE  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5203  0015D2  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;Pattern_PtrnFunctions.c: 199: ptrnPointer[76/2-1-i] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  5207  0015D6  0100               	movlb	0	; () banked
  5208  0015D8  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5209  0015DA  0100               	movlb	0	; () banked
  5210  0015DC  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5211  0015DE  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5212  0015E0  0100               	movlb	0	; () banked
  5213  0015E2  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5214  0015E4  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5215  0015E6  0EF0               	movlw	240
  5216  0015E8  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5217  0015EA  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5218  0015EC  0B0F               	andlw	15
  5219  0015EE  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5220  0015F0  0EF0               	movlw	240
  5221  0015F2  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5222  0015F4  0100               	movlb	0	; () banked
  5223  0015F6  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5224  0015F8  0100               	movlb	0	; () banked
  5225  0015FA  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5226  0015FC  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5227  0015FE  0100               	movlb	0	; () banked
  5228  001600  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5229  001602  0100               	movlb	0	; () banked
  5230  001604  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5231  001606  0100               	movlb	0	; () banked
  5232  001608  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5233  00160A  0100               	movlb	0	; () banked
  5234  00160C  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5235  00160E  0100               	movlb	0	; () banked
  5236  001610  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5237  001612  0100               	movlb	0	; () banked
  5238  001614  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5239  001616  0E00               	movlw	0
  5240  001618  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5241  00161A  0100               	movlb	0	; () banked
  5242  00161C  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5243  00161E  0100               	movlb	0	; () banked
  5244  001620  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5245  001622  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5246  001624  0100               	movlb	0	; () banked
  5247  001626  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5248  001628  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5249  00162A  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5250  00162C  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5251  00162E  90D8               	bcf	status,0,c
  5252  001630  0100               	movlb	0	; () banked
  5253  001632  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5254  001634  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5255  001636  0E4A               	movlw	74
  5256  001638  0100               	movlb	0	; () banked
  5257  00163A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5258  00163C  0E00               	movlw	0
  5259  00163E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5260  001640  0100               	movlb	0	; () banked
  5261  001642  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5262  001644  0100               	movlb	0	; () banked
  5263  001646  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5264  001648  6ED9               	movwf	fsr2l,c
  5265  00164A  0100               	movlb	0	; () banked
  5266  00164C  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5267  00164E  0100               	movlb	0	; () banked
  5268  001650  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5269  001652  6EDA               	movwf	fsr2h,c
  5270  001654  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5271  001658  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;Pattern_PtrnFunctions.c: 200: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5275  00165C  0100               	movlb	0	; () banked
  5276  00165E  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5277  001660  0100               	movlb	0	; () banked
  5278  001662  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5279  001664  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5280  001666  0100               	movlb	0	; () banked
  5281  001668  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5282  00166A  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5283  00166C  0EF0               	movlw	240
  5284  00166E  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5285  001670  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5286  001672  0B0F               	andlw	15
  5287  001674  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5288  001676  0EF0               	movlw	240
  5289  001678  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5290  00167A  0100               	movlb	0	; () banked
  5291  00167C  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5292  00167E  0100               	movlb	0	; () banked
  5293  001680  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5294  001682  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5295  001684  0100               	movlb	0	; () banked
  5296  001686  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5297  001688  0100               	movlb	0	; () banked
  5298  00168A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5299  00168C  0100               	movlb	0	; () banked
  5300  00168E  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5301  001690  0100               	movlb	0	; () banked
  5302  001692  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5303  001694  0100               	movlb	0	; () banked
  5304  001696  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5305  001698  0100               	movlb	0	; () banked
  5306  00169A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5307  00169C  0E00               	movlw	0
  5308  00169E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5309  0016A0  0100               	movlb	0	; () banked
  5310  0016A2  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5311  0016A4  0100               	movlb	0	; () banked
  5312  0016A6  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5313  0016A8  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5314  0016AA  90D8               	bcf	status,0,c
  5315  0016AC  0100               	movlb	0	; () banked
  5316  0016AE  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5317  0016B0  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5318  0016B2  0E4C               	movlw	76
  5319  0016B4  0100               	movlb	0	; () banked
  5320  0016B6  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5321  0016B8  0E00               	movlw	0
  5322  0016BA  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5323  0016BC  0100               	movlb	0	; () banked
  5324  0016BE  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5325  0016C0  0100               	movlb	0	; () banked
  5326  0016C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5327  0016C4  6ED9               	movwf	fsr2l,c
  5328  0016C6  0100               	movlb	0	; () banked
  5329  0016C8  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5330  0016CA  0100               	movlb	0	; () banked
  5331  0016CC  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5332  0016CE  6EDA               	movwf	fsr2h,c
  5333  0016D0  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5334  0016D4  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;Pattern_PtrnFunctions.c: 201: ptrnPointer[76-1-i] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5338  0016D8  0100               	movlb	0	; () banked
  5339  0016DA  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5340  0016DC  0100               	movlb	0	; () banked
  5341  0016DE  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5342  0016E0  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5343  0016E2  0100               	movlb	0	; () banked
  5344  0016E4  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5345  0016E6  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5346  0016E8  0EF0               	movlw	240
  5347  0016EA  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5348  0016EC  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5349  0016EE  0B0F               	andlw	15
  5350  0016F0  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5351  0016F2  0EF0               	movlw	240
  5352  0016F4  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5353  0016F6  0100               	movlb	0	; () banked
  5354  0016F8  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5355  0016FA  0100               	movlb	0	; () banked
  5356  0016FC  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5357  0016FE  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5358  001700  0100               	movlb	0	; () banked
  5359  001702  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5360  001704  0100               	movlb	0	; () banked
  5361  001706  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5362  001708  0100               	movlb	0	; () banked
  5363  00170A  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5364  00170C  0100               	movlb	0	; () banked
  5365  00170E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5366  001710  0100               	movlb	0	; () banked
  5367  001712  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5368  001714  0100               	movlb	0	; () banked
  5369  001716  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5370  001718  0E00               	movlw	0
  5371  00171A  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5372  00171C  0100               	movlb	0	; () banked
  5373  00171E  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5374  001720  0100               	movlb	0	; () banked
  5375  001722  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5376  001724  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5377  001726  0E01               	movlw	1
  5378  001728  0100               	movlb	0	; () banked
  5379  00172A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5380  00172C  0E00               	movlw	0
  5381  00172E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5382  001730  0100               	movlb	0	; () banked
  5383  001732  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5384  001734  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5385  001736  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5386  001738  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5387  00173A  90D8               	bcf	status,0,c
  5388  00173C  0100               	movlb	0	; () banked
  5389  00173E  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5390  001740  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5391  001742  0E98               	movlw	152
  5392  001744  0100               	movlb	0	; () banked
  5393  001746  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5394  001748  0E00               	movlw	0
  5395  00174A  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5396  00174C  0100               	movlb	0	; () banked
  5397  00174E  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5398  001750  0100               	movlb	0	; () banked
  5399  001752  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5400  001754  6ED9               	movwf	fsr2l,c
  5401  001756  0100               	movlb	0	; () banked
  5402  001758  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5403  00175A  0100               	movlb	0	; () banked
  5404  00175C  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5405  00175E  6EDA               	movwf	fsr2h,c
  5406  001760  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5407  001764  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5408                           
  5409                           ; BSR set to: 0
  5410  001768  0100               	movlb	0	; () banked
  5411  00176A  2B83               	incf	MirroredQuadrants@i& (0+255),f,b
  5412  00176C  D60C               	goto	l3421
  5413  00176E                     l3453:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;Pattern_PtrnFunctions.c: 202: }
  5417                           ;Pattern_PtrnFunctions.c: 203: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/3);
  5418  00176E  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5419  001772  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5420  001776  50DF               	movf	indf2,w,c
  5421  001778  0100               	movlb	0	; () banked
  5422  00177A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5423  00177C  0E01               	movlw	1
  5424  00177E  0100               	movlb	0	; () banked
  5425  001780  2572               	addwf	??_MirroredQuadrants& (0+255),w,b
  5426  001782  0100               	movlb	0	; () banked
  5427  001784  6F60               	movwf	___awmod@dividend& (0+255),b
  5428  001786  0100               	movlb	0	; () banked
  5429  001788  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5430  00178A  0E00               	movlw	0
  5431  00178C  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5432  00178E  0E00               	movlw	0
  5433  001790  0100               	movlb	0	; () banked
  5434  001792  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5435  001794  0E19               	movlw	25
  5436  001796  6F62               	movwf	___awmod@divisor& (0+255),b
  5437  001798  ECCE  F018         	call	___awmod	;wreg free
  5438  00179C  0100               	movlb	0	; () banked
  5439  00179E  5160               	movf	?___awmod& (0+255),w,b
  5440  0017A0  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5441  0017A4  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5442  0017A8  6EDF               	movwf	indf2,c
  5443                           
  5444                           ; BSR set to: 0
  5445  0017AA  0012               	return		;funcret
  5446  0017AC                     __end_of_MirroredQuadrants:
  5447                           	opt stack 0
  5448                           tosu	equ	0xFFF
  5449                           tosh	equ	0xFFE
  5450                           tosl	equ	0xFFD
  5451                           pclath	equ	0xFFA
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           fsr1h	equ	0xFE2
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _HueTest *****************
  5471 ;; Defined at:
  5472 ;;		line 29 in file "Pattern_PtrnFunctions.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  ptrnPointer     2   19[BANK0 ] PTR unsigned int 
  5475 ;;		 -> PixelPattern(152), 
  5476 ;;  ptrnStepCoun    2   21[BANK0 ] PTR unsigned char 
  5477 ;;		 -> PatternStepCounter(1), 
  5478 ;;  cycleCounter    2   23[BANK0 ] PTR unsigned long 
  5479 ;;		 -> CycleCounter(4), 
  5480 ;;  base_hue        1   25[BANK0 ] unsigned char 
  5481 ;;  base_sat        1   26[BANK0 ] unsigned char 
  5482 ;;  15703           2   27[BANK0 ] PTR void 
  5483 ;;		 -> NULL(0), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  i               1   32[BANK0 ] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5495 ;;      Params:         0      10       0       0
  5496 ;;      Locals:         0       1       0       0
  5497 ;;      Temps:          0       3       0       0
  5498 ;;      Totals:         0      14       0       0
  5499 ;;Total ram usage:       14 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    8
  5502 ;; This function calls:
  5503 ;;		___awmod
  5504 ;;		___lwdiv
  5505 ;;		___wmul
  5506 ;; This function is called by:
  5507 ;;		_UpdatePattern
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text19
  5512  002982                     __ptext19:
  5513                           	opt stack 0
  5514  002982                     _HueTest:
  5515                           	opt stack 18
  5516                           
  5517                           ;Pattern_PtrnFunctions.c: 32: for(uint8_t i=0;i<76;i++){
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;incstack = 0
  5521  002982  0E00               	movlw	0
  5522  002984  0100               	movlb	0	; () banked
  5523  002986  6F80               	movwf	HueTest@i& (0+255),b
  5524  002988                     l3173:
  5525                           
  5526                           ; BSR set to: 0
  5527  002988  0E4B               	movlw	75
  5528  00298A  0100               	movlb	0	; () banked
  5529  00298C  6580               	cpfsgt	HueTest@i& (0+255),b
  5530  00298E  D001               	goto	l3177
  5531  002990  D058               	goto	l3183
  5532  002992                     l3177:
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;Pattern_PtrnFunctions.c: 33: ptrnPointer[i] = (((uint16_t)(i+*ptrnStepCounter)*255/76)<
      +                          <8) | (base_sat<<4) | 0x0F;
  5536  002992  0100               	movlb	0	; () banked
  5537  002994  517A               	movf	HueTest@base_sat& (0+255),w,b
  5538  002996  0100               	movlb	0	; () banked
  5539  002998  6F7D               	movwf	??_HueTest& (0+255),b
  5540  00299A  6B7E               	clrf	(??_HueTest+1)& (0+255),b
  5541  00299C  0100               	movlb	0	; () banked
  5542  00299E  3B7D               	swapf	??_HueTest& (0+255),f,b
  5543  0029A0  3B7E               	swapf	(??_HueTest+1)& (0+255),f,b
  5544  0029A2  0EF0               	movlw	240
  5545  0029A4  177E               	andwf	(??_HueTest+1)& (0+255),f,b
  5546  0029A6  517D               	movf	??_HueTest& (0+255),w,b
  5547  0029A8  0B0F               	andlw	15
  5548  0029AA  137E               	iorwf	(??_HueTest+1)& (0+255),f,b
  5549  0029AC  0EF0               	movlw	240
  5550  0029AE  177D               	andwf	??_HueTest& (0+255),f,b
  5551  0029B0  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5552  0029B4  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5553  0029B8  50DF               	movf	indf2,w,c
  5554  0029BA  0100               	movlb	0	; () banked
  5555  0029BC  6F7F               	movwf	(??_HueTest+2)& (0+255),b
  5556  0029BE  0100               	movlb	0	; () banked
  5557  0029C0  5180               	movf	HueTest@i& (0+255),w,b
  5558  0029C2  0100               	movlb	0	; () banked
  5559  0029C4  257F               	addwf	(??_HueTest+2)& (0+255),w,b
  5560  0029C6  0100               	movlb	0	; () banked
  5561  0029C8  6F66               	movwf	___wmul@multiplier& (0+255),b
  5562  0029CA  0100               	movlb	0	; () banked
  5563  0029CC  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  5564  0029CE  0100               	movlb	0	; () banked
  5565  0029D0  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  5566  0029D2  0E00               	movlw	0
  5567  0029D4  0100               	movlb	0	; () banked
  5568  0029D6  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5569  0029D8  6968               	setf	___wmul@multiplicand& (0+255),b
  5570  0029DA  ECB4  F01C         	call	___wmul	;wreg free
  5571  0029DE  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  5572  0029E2  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  5573  0029E6  0E00               	movlw	0
  5574  0029E8  0100               	movlb	0	; () banked
  5575  0029EA  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5576  0029EC  0E4C               	movlw	76
  5577  0029EE  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  5578  0029F0  EC64  F01A         	call	___lwdiv	;wreg free
  5579  0029F4  0100               	movlb	0	; () banked
  5580  0029F6  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  5581  0029FA  0100               	movlb	0	; () banked
  5582  0029FC  6B6C               	clrf	?___lwdiv& (0+255),b
  5583  0029FE  0100               	movlb	0	; () banked
  5584  002A00  517D               	movf	??_HueTest& (0+255),w,b
  5585  002A02  0100               	movlb	0	; () banked
  5586  002A04  136C               	iorwf	?___lwdiv& (0+255),f,b
  5587  002A06  0100               	movlb	0	; () banked
  5588  002A08  517E               	movf	(??_HueTest+1)& (0+255),w,b
  5589  002A0A  0100               	movlb	0	; () banked
  5590  002A0C  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5591  002A0E  0E0F               	movlw	15
  5592  002A10  0100               	movlb	0	; () banked
  5593  002A12  136C               	iorwf	?___lwdiv& (0+255),f,b
  5594  002A14  0E00               	movlw	0
  5595  002A16  0100               	movlb	0	; () banked
  5596  002A18  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5597  002A1A  0100               	movlb	0	; () banked
  5598  002A1C  5180               	movf	HueTest@i& (0+255),w,b
  5599  002A1E  0D02               	mullw	2
  5600  002A20  50F3               	movf	prodl,w,c
  5601  002A22  0100               	movlb	0	; () banked
  5602  002A24  2573               	addwf	HueTest@ptrnPointer& (0+255),w,b
  5603  002A26  6ED9               	movwf	fsr2l,c
  5604  002A28  50F4               	movf	prodh,w,c
  5605  002A2A  0100               	movlb	0	; () banked
  5606  002A2C  2174               	addwfc	(HueTest@ptrnPointer+1)& (0+255),w,b
  5607  002A2E  6EDA               	movwf	fsr2h,c
  5608  002A30  0100               	movlb	0	; () banked
  5609  002A32  C06C  FFDE         	movff	?___lwdiv,postinc2
  5610  002A36  0100               	movlb	0	; () banked
  5611  002A38  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  5612                           
  5613                           ; BSR set to: 0
  5614  002A3C  0100               	movlb	0	; () banked
  5615  002A3E  2B80               	incf	HueTest@i& (0+255),f,b
  5616  002A40  D7A3               	goto	l3173
  5617  002A42                     l3183:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;Pattern_PtrnFunctions.c: 34: }
  5621                           ;Pattern_PtrnFunctions.c: 35: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  5622  002A42  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5623  002A46  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5624  002A4A  50DF               	movf	indf2,w,c
  5625  002A4C  0100               	movlb	0	; () banked
  5626  002A4E  6F7D               	movwf	??_HueTest& (0+255),b
  5627  002A50  0E01               	movlw	1
  5628  002A52  0100               	movlb	0	; () banked
  5629  002A54  257D               	addwf	??_HueTest& (0+255),w,b
  5630  002A56  0100               	movlb	0	; () banked
  5631  002A58  6F60               	movwf	___awmod@dividend& (0+255),b
  5632  002A5A  0100               	movlb	0	; () banked
  5633  002A5C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5634  002A5E  0E00               	movlw	0
  5635  002A60  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5636  002A62  0E00               	movlw	0
  5637  002A64  0100               	movlb	0	; () banked
  5638  002A66  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5639  002A68  0E4C               	movlw	76
  5640  002A6A  6F62               	movwf	___awmod@divisor& (0+255),b
  5641  002A6C  ECCE  F018         	call	___awmod	;wreg free
  5642  002A70  0100               	movlb	0	; () banked
  5643  002A72  5160               	movf	?___awmod& (0+255),w,b
  5644  002A74  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5645  002A78  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5646  002A7C  6EDF               	movwf	indf2,c
  5647                           
  5648                           ; BSR set to: 0
  5649  002A7E  0012               	return		;funcret
  5650  002A80                     __end_of_HueTest:
  5651                           	opt stack 0
  5652                           tosu	equ	0xFFF
  5653                           tosh	equ	0xFFE
  5654                           tosl	equ	0xFFD
  5655                           pclath	equ	0xFFA
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           postinc0	equ	0xFEE
  5663                           wreg	equ	0xFE8
  5664                           postdec1	equ	0xFE5
  5665                           fsr1h	equ	0xFE2
  5666                           fsr1l	equ	0xFE1
  5667                           indf2	equ	0xFDF
  5668                           postinc2	equ	0xFDE
  5669                           postdec2	equ	0xFDD
  5670                           fsr2h	equ	0xFDA
  5671                           fsr2l	equ	0xFD9
  5672                           status	equ	0xFD8
  5673                           
  5674 ;; *************** function _FullPulseHold *****************
  5675 ;; Defined at:
  5676 ;;		line 80 in file "Pattern_PtrnFunctions.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  ptrnPointer     2    0[BANK0 ] PTR unsigned int 
  5679 ;;		 -> PixelPattern(152), 
  5680 ;;  ptrnStepCoun    2    2[BANK0 ] PTR unsigned char 
  5681 ;;		 -> PatternStepCounter(1), 
  5682 ;;  cycleCounter    2    4[BANK0 ] PTR unsigned long 
  5683 ;;		 -> CycleCounter(4), 
  5684 ;;  base_hue        1    6[BANK0 ] unsigned char 
  5685 ;;  base_sat        1    7[BANK0 ] unsigned char 
  5686 ;;  15711           2    8[BANK0 ] PTR void 
  5687 ;;		 -> NULL(0), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  i               1   21[BANK0 ] unsigned char 
  5690 ;;  val             1   20[BANK0 ] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5700 ;;      Params:         0      10       0       0
  5701 ;;      Locals:         0       4       0       0
  5702 ;;      Temps:          0       8       0       0
  5703 ;;      Totals:         0      22       0       0
  5704 ;;Total ram usage:       22 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    7
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_UpdatePattern
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text20
  5715  002382                     __ptext20:
  5716                           	opt stack 0
  5717  002382                     _FullPulseHold:
  5718                           	opt stack 19
  5719                           
  5720                           ;Pattern_PtrnFunctions.c: 81: static bool rising = 1;
  5721                           ;Pattern_PtrnFunctions.c: 82: uint8_t val;
  5722                           ;Pattern_PtrnFunctions.c: 85: val = (*ptrnStepCounter>>4);
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;incstack = 0
  5726  002382  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5727  002386  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5728  00238A  50DF               	movf	indf2,w,c
  5729  00238C  0100               	movlb	0	; () banked
  5730  00238E  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5731  002390  0100               	movlb	0	; () banked
  5732  002392  396A               	swapf	??_FullPulseHold& (0+255),w,b
  5733  002394  0B0F               	andlw	15
  5734  002396  0100               	movlb	0	; () banked
  5735  002398  6F74               	movwf	FullPulseHold@val& (0+255),b
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;Pattern_PtrnFunctions.c: 86: for(uint8_t i=0;i<76;i++){
  5739  00239A  0E00               	movlw	0
  5740  00239C  0100               	movlb	0	; () banked
  5741  00239E  6F75               	movwf	FullPulseHold@i& (0+255),b
  5742  0023A0                     l3189:
  5743                           
  5744                           ; BSR set to: 0
  5745  0023A0  0E4B               	movlw	75
  5746  0023A2  0100               	movlb	0	; () banked
  5747  0023A4  6575               	cpfsgt	FullPulseHold@i& (0+255),b
  5748  0023A6  D001               	goto	l3193
  5749  0023A8  D034               	goto	l3199
  5750  0023AA                     l3193:
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;Pattern_PtrnFunctions.c: 87: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) |
      +                           val;
  5754  0023AA  0100               	movlb	0	; () banked
  5755  0023AC  5167               	movf	FullPulseHold@base_sat& (0+255),w,b
  5756  0023AE  0100               	movlb	0	; () banked
  5757  0023B0  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5758  0023B2  6B6B               	clrf	(??_FullPulseHold+1)& (0+255),b
  5759  0023B4  0100               	movlb	0	; () banked
  5760  0023B6  3B6A               	swapf	??_FullPulseHold& (0+255),f,b
  5761  0023B8  3B6B               	swapf	(??_FullPulseHold+1)& (0+255),f,b
  5762  0023BA  0EF0               	movlw	240
  5763  0023BC  176B               	andwf	(??_FullPulseHold+1)& (0+255),f,b
  5764  0023BE  516A               	movf	??_FullPulseHold& (0+255),w,b
  5765  0023C0  0B0F               	andlw	15
  5766  0023C2  136B               	iorwf	(??_FullPulseHold+1)& (0+255),f,b
  5767  0023C4  0EF0               	movlw	240
  5768  0023C6  176A               	andwf	??_FullPulseHold& (0+255),f,b
  5769  0023C8  0100               	movlb	0	; () banked
  5770  0023CA  5166               	movf	FullPulseHold@base_hue& (0+255),w,b
  5771  0023CC  0100               	movlb	0	; () banked
  5772  0023CE  6F6D               	movwf	(??_FullPulseHold+3)& (0+255),b
  5773  0023D0  6B6C               	clrf	(??_FullPulseHold+2)& (0+255),b
  5774  0023D2  0100               	movlb	0	; () banked
  5775  0023D4  516A               	movf	??_FullPulseHold& (0+255),w,b
  5776  0023D6  0100               	movlb	0	; () banked
  5777  0023D8  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5778  0023DA  0100               	movlb	0	; () banked
  5779  0023DC  516B               	movf	(??_FullPulseHold+1)& (0+255),w,b
  5780  0023DE  0100               	movlb	0	; () banked
  5781  0023E0  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5782  0023E2  0100               	movlb	0	; () banked
  5783  0023E4  5174               	movf	FullPulseHold@val& (0+255),w,b
  5784  0023E6  0100               	movlb	0	; () banked
  5785  0023E8  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5786  0023EA  0E00               	movlw	0
  5787  0023EC  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5788  0023EE  0100               	movlb	0	; () banked
  5789  0023F0  5175               	movf	FullPulseHold@i& (0+255),w,b
  5790  0023F2  0D02               	mullw	2
  5791  0023F4  50F3               	movf	prodl,w,c
  5792  0023F6  0100               	movlb	0	; () banked
  5793  0023F8  2560               	addwf	FullPulseHold@ptrnPointer& (0+255),w,b
  5794  0023FA  6ED9               	movwf	fsr2l,c
  5795  0023FC  50F4               	movf	prodh,w,c
  5796  0023FE  0100               	movlb	0	; () banked
  5797  002400  2161               	addwfc	(FullPulseHold@ptrnPointer+1)& (0+255),w,b
  5798  002402  6EDA               	movwf	fsr2h,c
  5799  002404  C06C  FFDE         	movff	??_FullPulseHold+2,postinc2
  5800  002408  C06D  FFDD         	movff	??_FullPulseHold+3,postdec2
  5801                           
  5802                           ; BSR set to: 0
  5803  00240C  0100               	movlb	0	; () banked
  5804  00240E  2B75               	incf	FullPulseHold@i& (0+255),f,b
  5805  002410  D7C7               	goto	l3189
  5806  002412                     l3199:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;Pattern_PtrnFunctions.c: 88: }
  5810                           ;Pattern_PtrnFunctions.c: 89: if(*ptrnStepCounter == 255){
  5811  002412  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5812  002416  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5813  00241A  28DE               	incf	postinc2,w,c
  5814  00241C  A4D8               	btfss	status,2,c
  5815  00241E  D02F               	goto	l3205
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;Pattern_PtrnFunctions.c: 90: rising = 0;
  5819  002420  0E00               	movlw	0
  5820  002422  D035               	goto	L10
  5821  002424                     l3203:
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;Pattern_PtrnFunctions.c: 91: *cycleCounter = *cycleCounter+1;
  5825  002424  0E01               	movlw	1
  5826  002426  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5827  00242A  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5828  00242E  CFDE F06A          	movff	postinc2,??_FullPulseHold
  5829  002432  CFDE F06B          	movff	postinc2,??_FullPulseHold+1
  5830  002436  CFDE F06C          	movff	postinc2,??_FullPulseHold+2
  5831  00243A  CFDE F06D          	movff	postinc2,??_FullPulseHold+3
  5832  00243E  0100               	movlb	0	; () banked
  5833  002440  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5834  002442  0100               	movlb	0	; () banked
  5835  002444  6F6E               	movwf	(??_FullPulseHold+4)& (0+255),b
  5836  002446  0E00               	movlw	0
  5837  002448  0100               	movlb	0	; () banked
  5838  00244A  216B               	addwfc	(??_FullPulseHold+1)& (0+255),w,b
  5839  00244C  0100               	movlb	0	; () banked
  5840  00244E  6F6F               	movwf	(??_FullPulseHold+5)& (0+255),b
  5841  002450  0E00               	movlw	0
  5842  002452  0100               	movlb	0	; () banked
  5843  002454  216C               	addwfc	(??_FullPulseHold+2)& (0+255),w,b
  5844  002456  0100               	movlb	0	; () banked
  5845  002458  6F70               	movwf	(??_FullPulseHold+6)& (0+255),b
  5846  00245A  0E00               	movlw	0
  5847  00245C  0100               	movlb	0	; () banked
  5848  00245E  216D               	addwfc	(??_FullPulseHold+3)& (0+255),w,b
  5849  002460  0100               	movlb	0	; () banked
  5850  002462  6F71               	movwf	(??_FullPulseHold+7)& (0+255),b
  5851  002464  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5852  002468  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5853  00246C  C06E  FFDE         	movff	??_FullPulseHold+4,postinc2
  5854  002470  C06F  FFDE         	movff	??_FullPulseHold+5,postinc2
  5855  002474  C070  FFDE         	movff	??_FullPulseHold+6,postinc2
  5856  002478  C071  FFDE         	movff	??_FullPulseHold+7,postinc2
  5857                           
  5858                           ;Pattern_PtrnFunctions.c: 92: }
  5859  00247C  D00B               	goto	l3211
  5860  00247E                     l3205:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;Pattern_PtrnFunctions.c: 93: else if(*ptrnStepCounter == 0){
  5864  00247E  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5865  002482  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5866  002486  50DF               	movf	indf2,w,c
  5867  002488  A4D8               	btfss	status,2,c
  5868  00248A  D004               	goto	l3211
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;Pattern_PtrnFunctions.c: 94: rising = 1;
  5872  00248C  0E01               	movlw	1
  5873  00248E                     L10:
  5874  00248E  0100               	movlb	0	; () banked
  5875  002490  6FF4               	movwf	FullPulseHold@rising& (0+255),b
  5876  002492  D7C8               	goto	l3203
  5877  002494                     l3211:
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;Pattern_PtrnFunctions.c: 96: }
  5881                           ;Pattern_PtrnFunctions.c: 97: if(*cycleCounter < 4){
  5882  002494  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5883  002498  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5884  00249C  0E03               	movlw	3
  5885  00249E  50DB               	movf	plusw2,w,c
  5886  0024A0  E136               	bnz	l661
  5887  0024A2  0E02               	movlw	2
  5888  0024A4  50DB               	movf	plusw2,w,c
  5889  0024A6  E133               	bnz	l661
  5890  0024A8  0E01               	movlw	1
  5891  0024AA  50DB               	movf	plusw2,w,c
  5892  0024AC  E130               	bnz	l661
  5893  0024AE  0E04               	movlw	4
  5894  0024B0  5CDE               	subwf	postinc2,w,c
  5895  0024B2  B0D8               	btfsc	status,0,c
  5896  0024B4  0012               	return	
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;Pattern_PtrnFunctions.c: 98: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnSt
      +                          epCounter-15);
  5900  0024B6  0100               	movlb	0	; () banked
  5901  0024B8  51F4               	movf	FullPulseHold@rising& (0+255),w,b
  5902  0024BA  0100               	movlb	0	; () banked
  5903  0024BC  A4D8               	btfss	status,2,c
  5904  0024BE  D010               	goto	l3217
  5905                           
  5906                           ; BSR set to: 0
  5907  0024C0  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5908  0024C4  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5909  0024C8  50DF               	movf	indf2,w,c
  5910  0024CA  0100               	movlb	0	; () banked
  5911  0024CC  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5912  0024CE  0EF1               	movlw	241
  5913  0024D0  0100               	movlb	0	; () banked
  5914  0024D2  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5915  0024D4  0100               	movlb	0	; () banked
  5916  0024D6  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  5917  0024D8  0100               	movlb	0	; () banked
  5918  0024DA  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  5919  0024DC  0EFF               	movlw	255
  5920  0024DE  D00F               	goto	L11
  5921  0024E0                     l3217:
  5922                           
  5923                           ; BSR set to: 0
  5924  0024E0  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5925  0024E4  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5926  0024E8  50DF               	movf	indf2,w,c
  5927  0024EA  0100               	movlb	0	; () banked
  5928  0024EC  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5929  0024EE  0E0F               	movlw	15
  5930  0024F0  0100               	movlb	0	; () banked
  5931  0024F2  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5932  0024F4  0100               	movlb	0	; () banked
  5933  0024F6  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  5934  0024F8  0100               	movlb	0	; () banked
  5935  0024FA  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  5936  0024FC  0E00               	movlw	0
  5937  0024FE                     L11:
  5938  0024FE  2373               	addwfc	(_FullPulseHold$1218+1)& (0+255),f,b
  5939                           
  5940                           ; BSR set to: 0
  5941                           
  5942                           ; BSR set to: 0
  5943  002500  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5944  002504  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5945  002508  C072  FFDF         	movff	_FullPulseHold$1218,indf2
  5946  00250C  0012               	return	
  5947  00250E                     l661:
  5948                           
  5949                           ; BSR set to: 0
  5950  00250E  0012               	return		;funcret
  5951  002510                     __end_of_FullPulseHold:
  5952                           	opt stack 0
  5953                           tosu	equ	0xFFF
  5954                           tosh	equ	0xFFE
  5955                           tosl	equ	0xFFD
  5956                           pclath	equ	0xFFA
  5957                           tblptru	equ	0xFF8
  5958                           tblptrh	equ	0xFF7
  5959                           tblptrl	equ	0xFF6
  5960                           tablat	equ	0xFF5
  5961                           prodh	equ	0xFF4
  5962                           prodl	equ	0xFF3
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1h	equ	0xFE2
  5967                           fsr1l	equ	0xFE1
  5968                           indf2	equ	0xFDF
  5969                           postinc2	equ	0xFDE
  5970                           postdec2	equ	0xFDD
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _DoubleFadedLoop *****************
  5977 ;; Defined at:
  5978 ;;		line 136 in file "Pattern_PtrnFunctions.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  5981 ;;		 -> PixelPattern(152), 
  5982 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  5983 ;;		 -> PatternStepCounter(1), 
  5984 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  5985 ;;		 -> CycleCounter(4), 
  5986 ;;  base_hue        1   14[BANK0 ] unsigned char 
  5987 ;;  base_sat        1   15[BANK0 ] unsigned char 
  5988 ;;  15744           2   16[BANK0 ] PTR void 
  5989 ;;		 -> NULL(0), 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  i               1   36[BANK0 ] unsigned char 
  5992 ;;  i               1   35[BANK0 ] unsigned char 
  5993 ;;  x               1   34[BANK0 ] unsigned char 
  5994 ;;  val             1   33[BANK0 ] unsigned char 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      void 
  5997 ;; Registers used:
  5998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6004 ;;      Params:         0      10       0       0
  6005 ;;      Locals:         0      12       0       0
  6006 ;;      Temps:          0       7       0       0
  6007 ;;      Totals:         0      29       0       0
  6008 ;;Total ram usage:       29 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    8
  6011 ;; This function calls:
  6012 ;;		___awdiv
  6013 ;;		___awmod
  6014 ;; This function is called by:
  6015 ;;		_UpdatePattern
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text21
  6020  0009BE                     __ptext21:
  6021                           	opt stack 0
  6022  0009BE                     _DoubleFadedLoop:
  6023                           	opt stack 18
  6024                           
  6025                           ;Pattern_PtrnFunctions.c: 137: uint8_t val, x;
  6026                           ;Pattern_PtrnFunctions.c: 139: for(uint8_t i=0;i<76/4;i++){
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;incstack = 0
  6030  0009BE  0E00               	movlw	0
  6031  0009C0  0100               	movlb	0	; () banked
  6032  0009C2  6F83               	movwf	DoubleFadedLoop@i& (0+255),b
  6033  0009C4                     l3315:
  6034                           
  6035                           ; BSR set to: 0
  6036  0009C4  0E12               	movlw	18
  6037  0009C6  0100               	movlb	0	; () banked
  6038  0009C8  6583               	cpfsgt	DoubleFadedLoop@i& (0+255),b
  6039  0009CA  D001               	goto	l3319
  6040  0009CC  D143               	goto	l3343
  6041  0009CE                     l3319:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;Pattern_PtrnFunctions.c: 141: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6045  0009CE  0E4C               	movlw	76
  6046  0009D0  0100               	movlb	0	; () banked
  6047  0009D2  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6048  0009D4  0100               	movlb	0	; () banked
  6049  0009D6  6F60               	movwf	___awmod@dividend& (0+255),b
  6050  0009D8  0100               	movlb	0	; () banked
  6051  0009DA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6052  0009DC  0E00               	movlw	0
  6053  0009DE  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6054  0009E0  0E00               	movlw	0
  6055  0009E2  0100               	movlb	0	; () banked
  6056  0009E4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6057  0009E6  0E4C               	movlw	76
  6058  0009E8  6F62               	movwf	___awmod@divisor& (0+255),b
  6059  0009EA  ECCE  F018         	call	___awmod	;wreg free
  6060  0009EE  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6061  0009F2  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6062  0009F6  0100               	movlb	0	; () banked
  6063  0009F8  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6064  0009FA  0100               	movlb	0	; () banked
  6065  0009FC  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6066  0009FE  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6067  000A00  0100               	movlb	0	; () banked
  6068  000A02  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6069  000A04  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6070  000A06  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6071  000A08  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6072  000A0A  0E4C               	movlw	76
  6073  000A0C  0100               	movlb	0	; () banked
  6074  000A0E  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6075  000A10  0100               	movlb	0	; () banked
  6076  000A12  6F60               	movwf	___awmod@dividend& (0+255),b
  6077  000A14  0E00               	movlw	0
  6078  000A16  0100               	movlb	0	; () banked
  6079  000A18  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6080  000A1A  0100               	movlb	0	; () banked
  6081  000A1C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6082  000A1E  0E00               	movlw	0
  6083  000A20  0100               	movlb	0	; () banked
  6084  000A22  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6085  000A24  0E4C               	movlw	76
  6086  000A26  6F62               	movwf	___awmod@divisor& (0+255),b
  6087  000A28  ECCE  F018         	call	___awmod	;wreg free
  6088  000A2C  0100               	movlb	0	; () banked
  6089  000A2E  5160               	movf	?___awmod& (0+255),w,b
  6090  000A30  0100               	movlb	0	; () banked
  6091  000A32  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6092  000A34  0100               	movlb	0	; () banked
  6093  000A36  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6094  000A38  0A80               	xorlw	128
  6095  000A3A  0100               	movlb	0	; () banked
  6096  000A3C  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6097  000A3E  0100               	movlb	0	; () banked
  6098  000A40  5161               	movf	(?___awmod+1)& (0+255),w,b
  6099  000A42  0A80               	xorlw	128
  6100  000A44  0100               	movlb	0	; () banked
  6101  000A46  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6102  000A48  A0D8               	btfss	status,0,c
  6103  000A4A  D01C               	goto	l3323
  6104                           
  6105                           ; BSR set to: 0
  6106  000A4C  0100               	movlb	0	; () banked
  6107  000A4E  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6108  000A50  0100               	movlb	0	; () banked
  6109  000A52  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6110  000A54  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6111  000A56  0100               	movlb	0	; () banked
  6112  000A58  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6113  000A5A  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6114  000A5C  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6115  000A5E  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6116  000A60  0E4C               	movlw	76
  6117  000A62  0100               	movlb	0	; () banked
  6118  000A64  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6119  000A66  0100               	movlb	0	; () banked
  6120  000A68  6F60               	movwf	___awmod@dividend& (0+255),b
  6121  000A6A  0E00               	movlw	0
  6122  000A6C  0100               	movlb	0	; () banked
  6123  000A6E  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6124  000A70  0100               	movlb	0	; () banked
  6125  000A72  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6126  000A74  0E00               	movlw	0
  6127  000A76  0100               	movlb	0	; () banked
  6128  000A78  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6129  000A7A  0E4C               	movlw	76
  6130  000A7C  6F62               	movwf	___awmod@divisor& (0+255),b
  6131  000A7E  ECCE  F018         	call	___awmod	;wreg free
  6132  000A82  D010               	goto	L12
  6133  000A84                     l3323:
  6134  000A84  0E4C               	movlw	76
  6135  000A86  0100               	movlb	0	; () banked
  6136  000A88  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6137  000A8A  0100               	movlb	0	; () banked
  6138  000A8C  6F60               	movwf	___awmod@dividend& (0+255),b
  6139  000A8E  0100               	movlb	0	; () banked
  6140  000A90  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6141  000A92  0E00               	movlw	0
  6142  000A94  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6143  000A96  0E00               	movlw	0
  6144  000A98  0100               	movlb	0	; () banked
  6145  000A9A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6146  000A9C  0E4C               	movlw	76
  6147  000A9E  6F62               	movwf	___awmod@divisor& (0+255),b
  6148  000AA0  ECCE  F018         	call	___awmod	;wreg free
  6149  000AA4                     L12:
  6150  000AA4  C060  F079         	movff	?___awmod,_DoubleFadedLoop$1262
  6151  000AA8  C061  F07A         	movff	?___awmod+1,_DoubleFadedLoop$1262+1
  6152  000AAC  C079  F082         	movff	_DoubleFadedLoop$1262,DoubleFadedLoop@x
  6153                           
  6154                           ;Pattern_PtrnFunctions.c: 142: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6155  000AB0  0E04               	movlw	4
  6156  000AB2  0100               	movlb	0	; () banked
  6157  000AB4  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6158  000AB6  D006               	goto	l3331
  6159                           
  6160                           ; BSR set to: 0
  6161  000AB8  0E00               	movlw	0
  6162  000ABA  0100               	movlb	0	; () banked
  6163  000ABC  6F7C               	movwf	(_DoubleFadedLoop$1263+1)& (0+255),b
  6164  000ABE  0E00               	movlw	0
  6165  000AC0  6F7B               	movwf	_DoubleFadedLoop$1263& (0+255),b
  6166  000AC2  D01F               	goto	l3333
  6167  000AC4                     l3331:
  6168                           
  6169                           ; BSR set to: 0
  6170  000AC4  0100               	movlb	0	; () banked
  6171  000AC6  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6172  000AC8  0D0F               	mullw	15
  6173  000ACA  CFF3 F060          	movff	prodl,___awdiv@dividend
  6174  000ACE  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6175  000AD2  0E00               	movlw	0
  6176  000AD4  0100               	movlb	0	; () banked
  6177  000AD6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6178  000AD8  0E05               	movlw	5
  6179  000ADA  6F62               	movwf	___awdiv@divisor& (0+255),b
  6180  000ADC  EC6A  F017         	call	___awdiv	;wreg free
  6181  000AE0  0100               	movlb	0	; () banked
  6182  000AE2  1F60               	comf	?___awdiv& (0+255),f,b
  6183  000AE4  0100               	movlb	0	; () banked
  6184  000AE6  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6185  000AE8  0100               	movlb	0	; () banked
  6186  000AEA  4B60               	infsnz	?___awdiv& (0+255),f,b
  6187  000AEC  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6188  000AEE  0E0F               	movlw	15
  6189  000AF0  0100               	movlb	0	; () banked
  6190  000AF2  2560               	addwf	?___awdiv& (0+255),w,b
  6191  000AF4  0100               	movlb	0	; () banked
  6192  000AF6  6F7B               	movwf	_DoubleFadedLoop$1263& (0+255),b
  6193  000AF8  0E00               	movlw	0
  6194  000AFA  0100               	movlb	0	; () banked
  6195  000AFC  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6196  000AFE  0100               	movlb	0	; () banked
  6197  000B00  6F7C               	movwf	(_DoubleFadedLoop$1263+1)& (0+255),b
  6198  000B02                     l3333:
  6199                           
  6200                           ; BSR set to: 0
  6201  000B02  C07B  F081         	movff	_DoubleFadedLoop$1263,DoubleFadedLoop@val
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;Pattern_PtrnFunctions.c: 143: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6205  000B06  0100               	movlb	0	; () banked
  6206  000B08  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6207  000B0A  0100               	movlb	0	; () banked
  6208  000B0C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6209  000B0E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6210  000B10  0100               	movlb	0	; () banked
  6211  000B12  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6212  000B14  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6213  000B16  0EF0               	movlw	240
  6214  000B18  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6215  000B1A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6216  000B1C  0B0F               	andlw	15
  6217  000B1E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6218  000B20  0EF0               	movlw	240
  6219  000B22  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6220  000B24  0100               	movlb	0	; () banked
  6221  000B26  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6222  000B28  0100               	movlb	0	; () banked
  6223  000B2A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6224  000B2C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6225  000B2E  0100               	movlb	0	; () banked
  6226  000B30  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6227  000B32  0100               	movlb	0	; () banked
  6228  000B34  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6229  000B36  0100               	movlb	0	; () banked
  6230  000B38  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6231  000B3A  0100               	movlb	0	; () banked
  6232  000B3C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6233  000B3E  0100               	movlb	0	; () banked
  6234  000B40  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6235  000B42  0100               	movlb	0	; () banked
  6236  000B44  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6237  000B46  0E00               	movlw	0
  6238  000B48  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6239  000B4A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6240  000B4E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6241  000B52  50DF               	movf	indf2,w,c
  6242  000B54  0100               	movlb	0	; () banked
  6243  000B56  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6244  000B58  0100               	movlb	0	; () banked
  6245  000B5A  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6246  000B5C  0100               	movlb	0	; () banked
  6247  000B5E  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6248  000B60  0100               	movlb	0	; () banked
  6249  000B62  6F60               	movwf	___awmod@dividend& (0+255),b
  6250  000B64  0100               	movlb	0	; () banked
  6251  000B66  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6252  000B68  0100               	movlb	0	; () banked
  6253  000B6A  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6254  000B6C  0E00               	movlw	0
  6255  000B6E  0100               	movlb	0	; () banked
  6256  000B70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6257  000B72  0E4C               	movlw	76
  6258  000B74  6F62               	movwf	___awmod@divisor& (0+255),b
  6259  000B76  ECCE  F018         	call	___awmod	;wreg free
  6260  000B7A  90D8               	bcf	status,0,c
  6261  000B7C  0100               	movlb	0	; () banked
  6262  000B7E  3760               	rlcf	?___awmod& (0+255),f,b
  6263  000B80  0100               	movlb	0	; () banked
  6264  000B82  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6265  000B84  0100               	movlb	0	; () banked
  6266  000B86  5160               	movf	?___awmod& (0+255),w,b
  6267  000B88  0100               	movlb	0	; () banked
  6268  000B8A  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6269  000B8C  6ED9               	movwf	fsr2l,c
  6270  000B8E  0100               	movlb	0	; () banked
  6271  000B90  5161               	movf	(?___awmod+1)& (0+255),w,b
  6272  000B92  0100               	movlb	0	; () banked
  6273  000B94  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6274  000B96  6EDA               	movwf	fsr2h,c
  6275  000B98  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6276  000B9C  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;Pattern_PtrnFunctions.c: 144: ptrnPointer[(i+76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6280  000BA0  0100               	movlb	0	; () banked
  6281  000BA2  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6282  000BA4  0100               	movlb	0	; () banked
  6283  000BA6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6284  000BA8  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6285  000BAA  0100               	movlb	0	; () banked
  6286  000BAC  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6287  000BAE  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6288  000BB0  0EF0               	movlw	240
  6289  000BB2  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6290  000BB4  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6291  000BB6  0B0F               	andlw	15
  6292  000BB8  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6293  000BBA  0EF0               	movlw	240
  6294  000BBC  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6295  000BBE  0100               	movlb	0	; () banked
  6296  000BC0  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6297  000BC2  0100               	movlb	0	; () banked
  6298  000BC4  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6299  000BC6  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6300  000BC8  0100               	movlb	0	; () banked
  6301  000BCA  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6302  000BCC  0100               	movlb	0	; () banked
  6303  000BCE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6304  000BD0  0100               	movlb	0	; () banked
  6305  000BD2  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6306  000BD4  0100               	movlb	0	; () banked
  6307  000BD6  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6308  000BD8  0100               	movlb	0	; () banked
  6309  000BDA  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6310  000BDC  0100               	movlb	0	; () banked
  6311  000BDE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6312  000BE0  0E00               	movlw	0
  6313  000BE2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6314  000BE4  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6315  000BE8  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6316  000BEC  50DF               	movf	indf2,w,c
  6317  000BEE  0100               	movlb	0	; () banked
  6318  000BF0  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6319  000BF2  0100               	movlb	0	; () banked
  6320  000BF4  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6321  000BF6  C083  F077         	movff	DoubleFadedLoop@i,??_DoubleFadedLoop+5
  6322  000BFA  0100               	movlb	0	; () banked
  6323  000BFC  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6324  000BFE  0100               	movlb	0	; () banked
  6325  000C00  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6326  000C02  0E00               	movlw	0
  6327  000C04  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6328  000C06  0E26               	movlw	38
  6329  000C08  0100               	movlb	0	; () banked
  6330  000C0A  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6331  000C0C  0100               	movlb	0	; () banked
  6332  000C0E  6F60               	movwf	___awmod@dividend& (0+255),b
  6333  000C10  0E00               	movlw	0
  6334  000C12  0100               	movlb	0	; () banked
  6335  000C14  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6336  000C16  0100               	movlb	0	; () banked
  6337  000C18  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6338  000C1A  0E00               	movlw	0
  6339  000C1C  0100               	movlb	0	; () banked
  6340  000C1E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6341  000C20  0E4C               	movlw	76
  6342  000C22  6F62               	movwf	___awmod@divisor& (0+255),b
  6343  000C24  ECCE  F018         	call	___awmod	;wreg free
  6344  000C28  90D8               	bcf	status,0,c
  6345  000C2A  0100               	movlb	0	; () banked
  6346  000C2C  3760               	rlcf	?___awmod& (0+255),f,b
  6347  000C2E  0100               	movlb	0	; () banked
  6348  000C30  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6349  000C32  0100               	movlb	0	; () banked
  6350  000C34  5160               	movf	?___awmod& (0+255),w,b
  6351  000C36  0100               	movlb	0	; () banked
  6352  000C38  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6353  000C3A  6ED9               	movwf	fsr2l,c
  6354  000C3C  0100               	movlb	0	; () banked
  6355  000C3E  5161               	movf	(?___awmod+1)& (0+255),w,b
  6356  000C40  0100               	movlb	0	; () banked
  6357  000C42  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6358  000C44  6EDA               	movwf	fsr2h,c
  6359  000C46  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6360  000C4A  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6361                           
  6362                           ; BSR set to: 0
  6363  000C4E  0100               	movlb	0	; () banked
  6364  000C50  2B83               	incf	DoubleFadedLoop@i& (0+255),f,b
  6365  000C52  D6B8               	goto	l3315
  6366  000C54                     l3343:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;Pattern_PtrnFunctions.c: 145: }
  6370                           ;Pattern_PtrnFunctions.c: 146: for(uint8_t i=76*3/4;i<76;i++){
  6371  000C54  0E39               	movlw	57
  6372  000C56  0100               	movlb	0	; () banked
  6373  000C58  6F84               	movwf	DoubleFadedLoop@i_1264& (0+255),b
  6374  000C5A                     l3345:
  6375                           
  6376                           ; BSR set to: 0
  6377  000C5A  0E4B               	movlw	75
  6378  000C5C  0100               	movlb	0	; () banked
  6379  000C5E  6584               	cpfsgt	DoubleFadedLoop@i_1264& (0+255),b
  6380  000C60  D001               	goto	l3349
  6381  000C62  D143               	goto	l3373
  6382  000C64                     l3349:
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;Pattern_PtrnFunctions.c: 148: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6386  000C64  0E4C               	movlw	76
  6387  000C66  0100               	movlb	0	; () banked
  6388  000C68  2584               	addwf	DoubleFadedLoop@i_1264& (0+255),w,b
  6389  000C6A  0100               	movlb	0	; () banked
  6390  000C6C  6F60               	movwf	___awmod@dividend& (0+255),b
  6391  000C6E  0100               	movlb	0	; () banked
  6392  000C70  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6393  000C72  0E00               	movlw	0
  6394  000C74  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6395  000C76  0E00               	movlw	0
  6396  000C78  0100               	movlb	0	; () banked
  6397  000C7A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6398  000C7C  0E4C               	movlw	76
  6399  000C7E  6F62               	movwf	___awmod@divisor& (0+255),b
  6400  000C80  ECCE  F018         	call	___awmod	;wreg free
  6401  000C84  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6402  000C88  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6403  000C8C  0100               	movlb	0	; () banked
  6404  000C8E  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6405  000C90  0100               	movlb	0	; () banked
  6406  000C92  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6407  000C94  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6408  000C96  0100               	movlb	0	; () banked
  6409  000C98  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6410  000C9A  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6411  000C9C  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6412  000C9E  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6413  000CA0  0E4C               	movlw	76
  6414  000CA2  0100               	movlb	0	; () banked
  6415  000CA4  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6416  000CA6  0100               	movlb	0	; () banked
  6417  000CA8  6F60               	movwf	___awmod@dividend& (0+255),b
  6418  000CAA  0E00               	movlw	0
  6419  000CAC  0100               	movlb	0	; () banked
  6420  000CAE  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6421  000CB0  0100               	movlb	0	; () banked
  6422  000CB2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6423  000CB4  0E00               	movlw	0
  6424  000CB6  0100               	movlb	0	; () banked
  6425  000CB8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6426  000CBA  0E4C               	movlw	76
  6427  000CBC  6F62               	movwf	___awmod@divisor& (0+255),b
  6428  000CBE  ECCE  F018         	call	___awmod	;wreg free
  6429  000CC2  0100               	movlb	0	; () banked
  6430  000CC4  5160               	movf	?___awmod& (0+255),w,b
  6431  000CC6  0100               	movlb	0	; () banked
  6432  000CC8  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6433  000CCA  0100               	movlb	0	; () banked
  6434  000CCC  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6435  000CCE  0A80               	xorlw	128
  6436  000CD0  0100               	movlb	0	; () banked
  6437  000CD2  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6438  000CD4  0100               	movlb	0	; () banked
  6439  000CD6  5161               	movf	(?___awmod+1)& (0+255),w,b
  6440  000CD8  0A80               	xorlw	128
  6441  000CDA  0100               	movlb	0	; () banked
  6442  000CDC  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6443  000CDE  A0D8               	btfss	status,0,c
  6444  000CE0  D01C               	goto	l3353
  6445                           
  6446                           ; BSR set to: 0
  6447  000CE2  0100               	movlb	0	; () banked
  6448  000CE4  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6449  000CE6  0100               	movlb	0	; () banked
  6450  000CE8  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6451  000CEA  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6452  000CEC  0100               	movlb	0	; () banked
  6453  000CEE  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6454  000CF0  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6455  000CF2  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6456  000CF4  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6457  000CF6  0E4C               	movlw	76
  6458  000CF8  0100               	movlb	0	; () banked
  6459  000CFA  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6460  000CFC  0100               	movlb	0	; () banked
  6461  000CFE  6F60               	movwf	___awmod@dividend& (0+255),b
  6462  000D00  0E00               	movlw	0
  6463  000D02  0100               	movlb	0	; () banked
  6464  000D04  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6465  000D06  0100               	movlb	0	; () banked
  6466  000D08  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6467  000D0A  0E00               	movlw	0
  6468  000D0C  0100               	movlb	0	; () banked
  6469  000D0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6470  000D10  0E4C               	movlw	76
  6471  000D12  6F62               	movwf	___awmod@divisor& (0+255),b
  6472  000D14  ECCE  F018         	call	___awmod	;wreg free
  6473  000D18  D010               	goto	L13
  6474  000D1A                     l3353:
  6475  000D1A  0E4C               	movlw	76
  6476  000D1C  0100               	movlb	0	; () banked
  6477  000D1E  2584               	addwf	DoubleFadedLoop@i_1264& (0+255),w,b
  6478  000D20  0100               	movlb	0	; () banked
  6479  000D22  6F60               	movwf	___awmod@dividend& (0+255),b
  6480  000D24  0100               	movlb	0	; () banked
  6481  000D26  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6482  000D28  0E00               	movlw	0
  6483  000D2A  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6484  000D2C  0E00               	movlw	0
  6485  000D2E  0100               	movlb	0	; () banked
  6486  000D30  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6487  000D32  0E4C               	movlw	76
  6488  000D34  6F62               	movwf	___awmod@divisor& (0+255),b
  6489  000D36  ECCE  F018         	call	___awmod	;wreg free
  6490  000D3A                     L13:
  6491  000D3A  C060  F07D         	movff	?___awmod,_DoubleFadedLoop$1265
  6492  000D3E  C061  F07E         	movff	?___awmod+1,_DoubleFadedLoop$1265+1
  6493  000D42  C07D  F082         	movff	_DoubleFadedLoop$1265,DoubleFadedLoop@x
  6494                           
  6495                           ;Pattern_PtrnFunctions.c: 149: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6496  000D46  0E04               	movlw	4
  6497  000D48  0100               	movlb	0	; () banked
  6498  000D4A  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6499  000D4C  D006               	goto	l3361
  6500                           
  6501                           ; BSR set to: 0
  6502  000D4E  0E00               	movlw	0
  6503  000D50  0100               	movlb	0	; () banked
  6504  000D52  6F80               	movwf	(_DoubleFadedLoop$1266+1)& (0+255),b
  6505  000D54  0E00               	movlw	0
  6506  000D56  6F7F               	movwf	_DoubleFadedLoop$1266& (0+255),b
  6507  000D58  D01F               	goto	l3363
  6508  000D5A                     l3361:
  6509                           
  6510                           ; BSR set to: 0
  6511  000D5A  0100               	movlb	0	; () banked
  6512  000D5C  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6513  000D5E  0D0F               	mullw	15
  6514  000D60  CFF3 F060          	movff	prodl,___awdiv@dividend
  6515  000D64  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6516  000D68  0E00               	movlw	0
  6517  000D6A  0100               	movlb	0	; () banked
  6518  000D6C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6519  000D6E  0E05               	movlw	5
  6520  000D70  6F62               	movwf	___awdiv@divisor& (0+255),b
  6521  000D72  EC6A  F017         	call	___awdiv	;wreg free
  6522  000D76  0100               	movlb	0	; () banked
  6523  000D78  1F60               	comf	?___awdiv& (0+255),f,b
  6524  000D7A  0100               	movlb	0	; () banked
  6525  000D7C  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6526  000D7E  0100               	movlb	0	; () banked
  6527  000D80  4B60               	infsnz	?___awdiv& (0+255),f,b
  6528  000D82  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6529  000D84  0E0F               	movlw	15
  6530  000D86  0100               	movlb	0	; () banked
  6531  000D88  2560               	addwf	?___awdiv& (0+255),w,b
  6532  000D8A  0100               	movlb	0	; () banked
  6533  000D8C  6F7F               	movwf	_DoubleFadedLoop$1266& (0+255),b
  6534  000D8E  0E00               	movlw	0
  6535  000D90  0100               	movlb	0	; () banked
  6536  000D92  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6537  000D94  0100               	movlb	0	; () banked
  6538  000D96  6F80               	movwf	(_DoubleFadedLoop$1266+1)& (0+255),b
  6539  000D98                     l3363:
  6540                           
  6541                           ; BSR set to: 0
  6542  000D98  C07F  F081         	movff	_DoubleFadedLoop$1266,DoubleFadedLoop@val
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;Pattern_PtrnFunctions.c: 150: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6546  000D9C  0100               	movlb	0	; () banked
  6547  000D9E  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6548  000DA0  0100               	movlb	0	; () banked
  6549  000DA2  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6550  000DA4  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6551  000DA6  0100               	movlb	0	; () banked
  6552  000DA8  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6553  000DAA  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6554  000DAC  0EF0               	movlw	240
  6555  000DAE  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6556  000DB0  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6557  000DB2  0B0F               	andlw	15
  6558  000DB4  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6559  000DB6  0EF0               	movlw	240
  6560  000DB8  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6561  000DBA  0100               	movlb	0	; () banked
  6562  000DBC  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6563  000DBE  0100               	movlb	0	; () banked
  6564  000DC0  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6565  000DC2  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6566  000DC4  0100               	movlb	0	; () banked
  6567  000DC6  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6568  000DC8  0100               	movlb	0	; () banked
  6569  000DCA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6570  000DCC  0100               	movlb	0	; () banked
  6571  000DCE  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6572  000DD0  0100               	movlb	0	; () banked
  6573  000DD2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6574  000DD4  0100               	movlb	0	; () banked
  6575  000DD6  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6576  000DD8  0100               	movlb	0	; () banked
  6577  000DDA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6578  000DDC  0E00               	movlw	0
  6579  000DDE  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6580  000DE0  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6581  000DE4  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6582  000DE8  50DF               	movf	indf2,w,c
  6583  000DEA  0100               	movlb	0	; () banked
  6584  000DEC  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6585  000DEE  0100               	movlb	0	; () banked
  6586  000DF0  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6587  000DF2  0100               	movlb	0	; () banked
  6588  000DF4  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6589  000DF6  0100               	movlb	0	; () banked
  6590  000DF8  6F60               	movwf	___awmod@dividend& (0+255),b
  6591  000DFA  0100               	movlb	0	; () banked
  6592  000DFC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6593  000DFE  0100               	movlb	0	; () banked
  6594  000E00  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6595  000E02  0E00               	movlw	0
  6596  000E04  0100               	movlb	0	; () banked
  6597  000E06  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6598  000E08  0E4C               	movlw	76
  6599  000E0A  6F62               	movwf	___awmod@divisor& (0+255),b
  6600  000E0C  ECCE  F018         	call	___awmod	;wreg free
  6601  000E10  90D8               	bcf	status,0,c
  6602  000E12  0100               	movlb	0	; () banked
  6603  000E14  3760               	rlcf	?___awmod& (0+255),f,b
  6604  000E16  0100               	movlb	0	; () banked
  6605  000E18  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6606  000E1A  0100               	movlb	0	; () banked
  6607  000E1C  5160               	movf	?___awmod& (0+255),w,b
  6608  000E1E  0100               	movlb	0	; () banked
  6609  000E20  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6610  000E22  6ED9               	movwf	fsr2l,c
  6611  000E24  0100               	movlb	0	; () banked
  6612  000E26  5161               	movf	(?___awmod+1)& (0+255),w,b
  6613  000E28  0100               	movlb	0	; () banked
  6614  000E2A  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6615  000E2C  6EDA               	movwf	fsr2h,c
  6616  000E2E  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6617  000E32  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;Pattern_PtrnFunctions.c: 151: ptrnPointer[(i-76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6621  000E36  0100               	movlb	0	; () banked
  6622  000E38  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6623  000E3A  0100               	movlb	0	; () banked
  6624  000E3C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6625  000E3E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6626  000E40  0100               	movlb	0	; () banked
  6627  000E42  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6628  000E44  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6629  000E46  0EF0               	movlw	240
  6630  000E48  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6631  000E4A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6632  000E4C  0B0F               	andlw	15
  6633  000E4E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6634  000E50  0EF0               	movlw	240
  6635  000E52  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6636  000E54  0100               	movlb	0	; () banked
  6637  000E56  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6638  000E58  0100               	movlb	0	; () banked
  6639  000E5A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6640  000E5C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6641  000E5E  0100               	movlb	0	; () banked
  6642  000E60  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6643  000E62  0100               	movlb	0	; () banked
  6644  000E64  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6645  000E66  0100               	movlb	0	; () banked
  6646  000E68  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6647  000E6A  0100               	movlb	0	; () banked
  6648  000E6C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6649  000E6E  0100               	movlb	0	; () banked
  6650  000E70  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6651  000E72  0100               	movlb	0	; () banked
  6652  000E74  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6653  000E76  0E00               	movlw	0
  6654  000E78  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6655  000E7A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6656  000E7E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6657  000E82  50DF               	movf	indf2,w,c
  6658  000E84  0100               	movlb	0	; () banked
  6659  000E86  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6660  000E88  0100               	movlb	0	; () banked
  6661  000E8A  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6662  000E8C  C084  F077         	movff	DoubleFadedLoop@i_1264,??_DoubleFadedLoop+5
  6663  000E90  0100               	movlb	0	; () banked
  6664  000E92  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6665  000E94  0100               	movlb	0	; () banked
  6666  000E96  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6667  000E98  0E00               	movlw	0
  6668  000E9A  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6669  000E9C  0EDA               	movlw	218
  6670  000E9E  0100               	movlb	0	; () banked
  6671  000EA0  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6672  000EA2  0100               	movlb	0	; () banked
  6673  000EA4  6F60               	movwf	___awmod@dividend& (0+255),b
  6674  000EA6  0EFF               	movlw	255
  6675  000EA8  0100               	movlb	0	; () banked
  6676  000EAA  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6677  000EAC  0100               	movlb	0	; () banked
  6678  000EAE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6679  000EB0  0E00               	movlw	0
  6680  000EB2  0100               	movlb	0	; () banked
  6681  000EB4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6682  000EB6  0E4C               	movlw	76
  6683  000EB8  6F62               	movwf	___awmod@divisor& (0+255),b
  6684  000EBA  ECCE  F018         	call	___awmod	;wreg free
  6685  000EBE  90D8               	bcf	status,0,c
  6686  000EC0  0100               	movlb	0	; () banked
  6687  000EC2  3760               	rlcf	?___awmod& (0+255),f,b
  6688  000EC4  0100               	movlb	0	; () banked
  6689  000EC6  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6690  000EC8  0100               	movlb	0	; () banked
  6691  000ECA  5160               	movf	?___awmod& (0+255),w,b
  6692  000ECC  0100               	movlb	0	; () banked
  6693  000ECE  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6694  000ED0  6ED9               	movwf	fsr2l,c
  6695  000ED2  0100               	movlb	0	; () banked
  6696  000ED4  5161               	movf	(?___awmod+1)& (0+255),w,b
  6697  000ED6  0100               	movlb	0	; () banked
  6698  000ED8  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6699  000EDA  6EDA               	movwf	fsr2h,c
  6700  000EDC  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6701  000EE0  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6702                           
  6703                           ; BSR set to: 0
  6704  000EE4  0100               	movlb	0	; () banked
  6705  000EE6  2B84               	incf	DoubleFadedLoop@i_1264& (0+255),f,b
  6706  000EE8  D6B8               	goto	l3345
  6707  000EEA                     l3373:
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;Pattern_PtrnFunctions.c: 152: }
  6711                           ;Pattern_PtrnFunctions.c: 153: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  6712  000EEA  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6713  000EEE  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6714  000EF2  50DF               	movf	indf2,w,c
  6715  000EF4  0100               	movlb	0	; () banked
  6716  000EF6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6717  000EF8  0E01               	movlw	1
  6718  000EFA  0100               	movlb	0	; () banked
  6719  000EFC  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6720  000EFE  0100               	movlb	0	; () banked
  6721  000F00  6F60               	movwf	___awmod@dividend& (0+255),b
  6722  000F02  0100               	movlb	0	; () banked
  6723  000F04  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6724  000F06  0E00               	movlw	0
  6725  000F08  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6726  000F0A  0E00               	movlw	0
  6727  000F0C  0100               	movlb	0	; () banked
  6728  000F0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6729  000F10  0E4C               	movlw	76
  6730  000F12  6F62               	movwf	___awmod@divisor& (0+255),b
  6731  000F14  ECCE  F018         	call	___awmod	;wreg free
  6732  000F18  0100               	movlb	0	; () banked
  6733  000F1A  5160               	movf	?___awmod& (0+255),w,b
  6734  000F1C  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6735  000F20  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6736  000F24  6EDF               	movwf	indf2,c
  6737                           
  6738                           ; BSR set to: 0
  6739  000F26  0012               	return		;funcret
  6740  000F28                     __end_of_DoubleFadedLoop:
  6741                           	opt stack 0
  6742                           tosu	equ	0xFFF
  6743                           tosh	equ	0xFFE
  6744                           tosl	equ	0xFFD
  6745                           pclath	equ	0xFFA
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           postinc0	equ	0xFEE
  6753                           wreg	equ	0xFE8
  6754                           postdec1	equ	0xFE5
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function _CenterBreathe *****************
  6766 ;; Defined at:
  6767 ;;		line 102 in file "Pattern_PtrnFunctions.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  6770 ;;		 -> PixelPattern(152), 
  6771 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  6772 ;;		 -> PatternStepCounter(1), 
  6773 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  6774 ;;		 -> CycleCounter(4), 
  6775 ;;  base_hue        1   14[BANK0 ] unsigned char 
  6776 ;;  base_sat        1   15[BANK0 ] unsigned char 
  6777 ;;  15721           2   16[BANK0 ] PTR void 
  6778 ;;		 -> NULL(0), 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  i               1   47[BANK0 ] unsigned char 
  6781 ;;  x               1   46[BANK0 ] unsigned char 
  6782 ;;  pulseWidth      1   45[BANK0 ] unsigned char 
  6783 ;;  val             1   44[BANK0 ] unsigned char 
  6784 ;;  fade_thresh     1   43[BANK0 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      void 
  6787 ;; Registers used:
  6788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6794 ;;      Params:         0      10       0       0
  6795 ;;      Locals:         0      21       0       0
  6796 ;;      Temps:          0       9       0       0
  6797 ;;      Totals:         0      40       0       0
  6798 ;;Total ram usage:       40 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    8
  6801 ;; This function calls:
  6802 ;;		___awdiv
  6803 ;;		___awmod
  6804 ;; This function is called by:
  6805 ;;		_UpdatePattern
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text22
  6810  0017AC                     __ptext22:
  6811                           	opt stack 0
  6812  0017AC                     _CenterBreathe:
  6813                           	opt stack 18
  6814                           
  6815                           ;Pattern_PtrnFunctions.c: 103: static bool rising = 1;
  6816                           ;Pattern_PtrnFunctions.c: 104: uint8_t fade_thresh = 10;
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;incstack = 0
  6820  0017AC  0E0A               	movlw	10
  6821  0017AE  0100               	movlb	0	; () banked
  6822  0017B0  6F8B               	movwf	CenterBreathe@fade_thresh& (0+255),b
  6823                           
  6824                           ;Pattern_PtrnFunctions.c: 105: uint8_t val, x, pulseWidth;
  6825                           ;Pattern_PtrnFunctions.c: 107: pulseWidth = 15;
  6826  0017B2  0E0F               	movlw	15
  6827  0017B4  0100               	movlb	0	; () banked
  6828  0017B6  6F8D               	movwf	CenterBreathe@pulseWidth& (0+255),b
  6829                           
  6830                           ;Pattern_PtrnFunctions.c: 108: for(uint8_t i=0;i<76;i++){
  6831  0017B8  0E00               	movlw	0
  6832  0017BA  0100               	movlb	0	; () banked
  6833  0017BC  6F8F               	movwf	CenterBreathe@i& (0+255),b
  6834  0017BE                     l3223:
  6835                           
  6836                           ; BSR set to: 0
  6837  0017BE  0E4B               	movlw	75
  6838  0017C0  0100               	movlb	0	; () banked
  6839  0017C2  658F               	cpfsgt	CenterBreathe@i& (0+255),b
  6840  0017C4  D001               	goto	l3229
  6841  0017C6  D15A               	goto	l3269
  6842  0017C8                     l3229:
  6843                           
  6844                           ; BSR set to: 0
  6845  0017C8  0E00               	movlw	0
  6846  0017CA  0100               	movlb	0	; () banked
  6847  0017CC  6F7E               	movwf	(_CenterBreathe$1233+1)& (0+255),b
  6848  0017CE  0E25               	movlw	37
  6849  0017D0  6F7D               	movwf	_CenterBreathe$1233& (0+255),b
  6850                           
  6851                           ; BSR set to: 0
  6852                           
  6853                           ; BSR set to: 0
  6854                           
  6855                           ; BSR set to: 0
  6856  0017D2  0E00               	movlw	0
  6857  0017D4  0100               	movlb	0	; () banked
  6858  0017D6  6F80               	movwf	(_CenterBreathe$1234+1)& (0+255),b
  6859  0017D8  0E25               	movlw	37
  6860  0017DA  6F7F               	movwf	_CenterBreathe$1234& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863                           
  6864                           ; BSR set to: 0
  6865  0017DC  C07F  F072         	movff	_CenterBreathe$1234,??_CenterBreathe
  6866  0017E0  C080  F073         	movff	_CenterBreathe$1234+1,??_CenterBreathe+1
  6867  0017E4  0100               	movlb	0	; () banked
  6868  0017E6  1F72               	comf	??_CenterBreathe& (0+255),f,b
  6869  0017E8  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  6870  0017EA  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  6871  0017EC  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  6872  0017EE  0100               	movlb	0	; () banked
  6873  0017F0  518F               	movf	CenterBreathe@i& (0+255),w,b
  6874  0017F2  0100               	movlb	0	; () banked
  6875  0017F4  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  6876  0017F6  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  6877  0017F8  0100               	movlb	0	; () banked
  6878  0017FA  5172               	movf	??_CenterBreathe& (0+255),w,b
  6879  0017FC  0100               	movlb	0	; () banked
  6880  0017FE  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  6881  001800  0100               	movlb	0	; () banked
  6882  001802  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  6883  001804  0100               	movlb	0	; () banked
  6884  001806  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  6885  001808  0E4C               	movlw	76
  6886  00180A  0100               	movlb	0	; () banked
  6887  00180C  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  6888  00180E  0100               	movlb	0	; () banked
  6889  001810  6F60               	movwf	___awmod@dividend& (0+255),b
  6890  001812  0E00               	movlw	0
  6891  001814  0100               	movlb	0	; () banked
  6892  001816  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  6893  001818  0100               	movlb	0	; () banked
  6894  00181A  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6895  00181C  0E00               	movlw	0
  6896  00181E  0100               	movlb	0	; () banked
  6897  001820  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6898  001822  0E4C               	movlw	76
  6899  001824  6F62               	movwf	___awmod@divisor& (0+255),b
  6900  001826  ECCE  F018         	call	___awmod	;wreg free
  6901  00182A  C060  F076         	movff	?___awmod,??_CenterBreathe+4
  6902  00182E  C061  F077         	movff	?___awmod+1,??_CenterBreathe+5
  6903  001832  0100               	movlb	0	; () banked
  6904  001834  518F               	movf	CenterBreathe@i& (0+255),w,b
  6905  001836  0100               	movlb	0	; () banked
  6906  001838  6F78               	movwf	(??_CenterBreathe+6)& (0+255),b
  6907  00183A  6B79               	clrf	(??_CenterBreathe+7)& (0+255),b
  6908  00183C  0100               	movlb	0	; () banked
  6909  00183E  1F78               	comf	(??_CenterBreathe+6)& (0+255),f,b
  6910  001840  1F79               	comf	(??_CenterBreathe+7)& (0+255),f,b
  6911  001842  4B78               	infsnz	(??_CenterBreathe+6)& (0+255),f,b
  6912  001844  2B79               	incf	(??_CenterBreathe+7)& (0+255),f,b
  6913  001846  0100               	movlb	0	; () banked
  6914  001848  517D               	movf	_CenterBreathe$1233& (0+255),w,b
  6915  00184A  0100               	movlb	0	; () banked
  6916  00184C  2778               	addwf	(??_CenterBreathe+6)& (0+255),f,b
  6917  00184E  0100               	movlb	0	; () banked
  6918  001850  517E               	movf	(_CenterBreathe$1233+1)& (0+255),w,b
  6919  001852  0100               	movlb	0	; () banked
  6920  001854  2379               	addwfc	(??_CenterBreathe+7)& (0+255),f,b
  6921  001856  0E4C               	movlw	76
  6922  001858  0100               	movlb	0	; () banked
  6923  00185A  2578               	addwf	(??_CenterBreathe+6)& (0+255),w,b
  6924  00185C  0100               	movlb	0	; () banked
  6925  00185E  6F60               	movwf	___awmod@dividend& (0+255),b
  6926  001860  0E00               	movlw	0
  6927  001862  0100               	movlb	0	; () banked
  6928  001864  2179               	addwfc	(??_CenterBreathe+7)& (0+255),w,b
  6929  001866  0100               	movlb	0	; () banked
  6930  001868  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6931  00186A  0E00               	movlw	0
  6932  00186C  0100               	movlb	0	; () banked
  6933  00186E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6934  001870  0E4C               	movlw	76
  6935  001872  6F62               	movwf	___awmod@divisor& (0+255),b
  6936  001874  ECCE  F018         	call	___awmod	;wreg free
  6937  001878  0100               	movlb	0	; () banked
  6938  00187A  5160               	movf	?___awmod& (0+255),w,b
  6939  00187C  0100               	movlb	0	; () banked
  6940  00187E  5D76               	subwf	(??_CenterBreathe+4)& (0+255),w,b
  6941  001880  0100               	movlb	0	; () banked
  6942  001882  5177               	movf	(??_CenterBreathe+5)& (0+255),w,b
  6943  001884  0A80               	xorlw	128
  6944  001886  0100               	movlb	0	; () banked
  6945  001888  6F7A               	movwf	(??_CenterBreathe+8)& (0+255),b
  6946  00188A  0100               	movlb	0	; () banked
  6947  00188C  5161               	movf	(?___awmod+1)& (0+255),w,b
  6948  00188E  0A80               	xorlw	128
  6949  001890  0100               	movlb	0	; () banked
  6950  001892  597A               	subwfb	(??_CenterBreathe+8)& (0+255),w,b
  6951  001894  A0D8               	btfss	status,0,c
  6952  001896  D029               	goto	l3243
  6953                           
  6954                           ; BSR set to: 0
  6955                           
  6956                           ; BSR set to: 0
  6957                           
  6958                           ; BSR set to: 0
  6959  001898  0E00               	movlw	0
  6960  00189A  0100               	movlb	0	; () banked
  6961  00189C  6F82               	movwf	(_CenterBreathe$1235+1)& (0+255),b
  6962  00189E  0E25               	movlw	37
  6963  0018A0  6F81               	movwf	_CenterBreathe$1235& (0+255),b
  6964                           
  6965                           ; BSR set to: 0
  6966                           
  6967                           ; BSR set to: 0
  6968  0018A2  0100               	movlb	0	; () banked
  6969  0018A4  518F               	movf	CenterBreathe@i& (0+255),w,b
  6970  0018A6  0100               	movlb	0	; () banked
  6971  0018A8  6F72               	movwf	??_CenterBreathe& (0+255),b
  6972  0018AA  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  6973  0018AC  0100               	movlb	0	; () banked
  6974  0018AE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  6975  0018B0  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  6976  0018B2  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  6977  0018B4  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  6978  0018B6  0100               	movlb	0	; () banked
  6979  0018B8  5181               	movf	_CenterBreathe$1235& (0+255),w,b
  6980  0018BA  0100               	movlb	0	; () banked
  6981  0018BC  2772               	addwf	??_CenterBreathe& (0+255),f,b
  6982  0018BE  0100               	movlb	0	; () banked
  6983  0018C0  5182               	movf	(_CenterBreathe$1235+1)& (0+255),w,b
  6984  0018C2  0100               	movlb	0	; () banked
  6985  0018C4  2373               	addwfc	(??_CenterBreathe+1)& (0+255),f,b
  6986  0018C6  0E4C               	movlw	76
  6987  0018C8  0100               	movlb	0	; () banked
  6988  0018CA  2572               	addwf	??_CenterBreathe& (0+255),w,b
  6989  0018CC  0100               	movlb	0	; () banked
  6990  0018CE  6F60               	movwf	___awmod@dividend& (0+255),b
  6991  0018D0  0E00               	movlw	0
  6992  0018D2  0100               	movlb	0	; () banked
  6993  0018D4  2173               	addwfc	(??_CenterBreathe+1)& (0+255),w,b
  6994  0018D6  0100               	movlb	0	; () banked
  6995  0018D8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6996  0018DA  0E00               	movlw	0
  6997  0018DC  0100               	movlb	0	; () banked
  6998  0018DE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6999  0018E0  0E4C               	movlw	76
  7000  0018E2  6F62               	movwf	___awmod@divisor& (0+255),b
  7001  0018E4  ECCE  F018         	call	___awmod	;wreg free
  7002  0018E8  D02C               	goto	L14
  7003  0018EA                     l3243:
  7004                           
  7005                           ; BSR set to: 0
  7006  0018EA  0E00               	movlw	0
  7007  0018EC  0100               	movlb	0	; () banked
  7008  0018EE  6F84               	movwf	(_CenterBreathe$1236+1)& (0+255),b
  7009  0018F0  0E25               	movlw	37
  7010  0018F2  6F83               	movwf	_CenterBreathe$1236& (0+255),b
  7011                           
  7012                           ; BSR set to: 0
  7013                           
  7014                           ; BSR set to: 0
  7015  0018F4  C083  F072         	movff	_CenterBreathe$1236,??_CenterBreathe
  7016  0018F8  C084  F073         	movff	_CenterBreathe$1236+1,??_CenterBreathe+1
  7017  0018FC  0100               	movlb	0	; () banked
  7018  0018FE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  7019  001900  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7020  001902  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7021  001904  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7022  001906  0100               	movlb	0	; () banked
  7023  001908  518F               	movf	CenterBreathe@i& (0+255),w,b
  7024  00190A  0100               	movlb	0	; () banked
  7025  00190C  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  7026  00190E  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  7027  001910  0100               	movlb	0	; () banked
  7028  001912  5172               	movf	??_CenterBreathe& (0+255),w,b
  7029  001914  0100               	movlb	0	; () banked
  7030  001916  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  7031  001918  0100               	movlb	0	; () banked
  7032  00191A  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7033  00191C  0100               	movlb	0	; () banked
  7034  00191E  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  7035  001920  0E4C               	movlw	76
  7036  001922  0100               	movlb	0	; () banked
  7037  001924  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  7038  001926  0100               	movlb	0	; () banked
  7039  001928  6F60               	movwf	___awmod@dividend& (0+255),b
  7040  00192A  0E00               	movlw	0
  7041  00192C  0100               	movlb	0	; () banked
  7042  00192E  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  7043  001930  0100               	movlb	0	; () banked
  7044  001932  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7045  001934  0E00               	movlw	0
  7046  001936  0100               	movlb	0	; () banked
  7047  001938  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7048  00193A  0E4C               	movlw	76
  7049  00193C  6F62               	movwf	___awmod@divisor& (0+255),b
  7050  00193E  ECCE  F018         	call	___awmod	;wreg free
  7051  001942                     L14:
  7052  001942  C060  F07B         	movff	?___awmod,_CenterBreathe$1232
  7053  001946  C061  F07C         	movff	?___awmod+1,_CenterBreathe$1232+1
  7054  00194A  C07B  F08E         	movff	_CenterBreathe$1232,CenterBreathe@x
  7055                           
  7056                           ;Pattern_PtrnFunctions.c: 111: val = (x < fade_thresh ? (*ptrnStepCounter>>4) : (x < pul
      +                          seWidth ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  7057  00194E  0100               	movlb	0	; () banked
  7058  001950  518B               	movf	CenterBreathe@fade_thresh& (0+255),w,b
  7059  001952  0100               	movlb	0	; () banked
  7060  001954  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7061  001956  A0D8               	btfss	status,0,c
  7062  001958  D04B               	goto	l3259
  7063                           
  7064                           ; BSR set to: 0
  7065  00195A  0100               	movlb	0	; () banked
  7066  00195C  518D               	movf	CenterBreathe@pulseWidth& (0+255),w,b
  7067  00195E  0100               	movlb	0	; () banked
  7068  001960  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7069  001962  A0D8               	btfss	status,0,c
  7070  001964  D006               	goto	l3255
  7071                           
  7072                           ; BSR set to: 0
  7073  001966  0E00               	movlw	0
  7074  001968  0100               	movlb	0	; () banked
  7075  00196A  6F88               	movwf	(_CenterBreathe$1238+1)& (0+255),b
  7076  00196C  0E00               	movlw	0
  7077  00196E  6F87               	movwf	_CenterBreathe$1238& (0+255),b
  7078  001970  D03A               	goto	l3257
  7079  001972                     l3255:
  7080                           
  7081                           ; BSR set to: 0
  7082  001972  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7083  001976  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7084  00197A  50DF               	movf	indf2,w,c
  7085  00197C  0100               	movlb	0	; () banked
  7086  00197E  6F72               	movwf	??_CenterBreathe& (0+255),b
  7087  001980  0100               	movlb	0	; () banked
  7088  001982  5172               	movf	??_CenterBreathe& (0+255),w,b
  7089  001984  0100               	movlb	0	; () banked
  7090  001986  038E               	mulwf	CenterBreathe@x& (0+255),b
  7091  001988  CFF3 F060          	movff	prodl,___awdiv@dividend
  7092  00198C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7093  001990  C08D  F062         	movff	CenterBreathe@pulseWidth,___awdiv@divisor
  7094  001994  0100               	movlb	0	; () banked
  7095  001996  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7096  001998  EC6A  F017         	call	___awdiv	;wreg free
  7097  00199C  0100               	movlb	0	; () banked
  7098  00199E  1F60               	comf	?___awdiv& (0+255),f,b
  7099  0019A0  0100               	movlb	0	; () banked
  7100  0019A2  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7101  0019A4  0100               	movlb	0	; () banked
  7102  0019A6  4B60               	infsnz	?___awdiv& (0+255),f,b
  7103  0019A8  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7104  0019AA  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7105  0019AE  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7106  0019B2  50DF               	movf	indf2,w,c
  7107  0019B4  0100               	movlb	0	; () banked
  7108  0019B6  6F73               	movwf	(??_CenterBreathe+1)& (0+255),b
  7109  0019B8  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7110  0019BA  0100               	movlb	0	; () banked
  7111  0019BC  5160               	movf	?___awdiv& (0+255),w,b
  7112  0019BE  0100               	movlb	0	; () banked
  7113  0019C0  2773               	addwf	(??_CenterBreathe+1)& (0+255),f,b
  7114  0019C2  0100               	movlb	0	; () banked
  7115  0019C4  5161               	movf	(?___awdiv+1)& (0+255),w,b
  7116  0019C6  0100               	movlb	0	; () banked
  7117  0019C8  2374               	addwfc	(??_CenterBreathe+2)& (0+255),f,b
  7118  0019CA  0E04               	movlw	4
  7119  0019CC  0100               	movlb	0	; () banked
  7120  0019CE  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7121  0019D0                     u2055:
  7122  0019D0  0100               	movlb	0	; () banked
  7123  0019D2  3574               	rlcf	(??_CenterBreathe+2)& (0+255),w,b
  7124  0019D4  3374               	rrcf	(??_CenterBreathe+2)& (0+255),f,b
  7125  0019D6  3373               	rrcf	(??_CenterBreathe+1)& (0+255),f,b
  7126  0019D8  0100               	movlb	0	; () banked
  7127  0019DA  2F75               	decfsz	(??_CenterBreathe+3)& (0+255),f,b
  7128  0019DC  D7F9               	goto	u2055
  7129  0019DE  C073  F087         	movff	??_CenterBreathe+1,_CenterBreathe$1238
  7130  0019E2  C074  F088         	movff	??_CenterBreathe+2,_CenterBreathe$1238+1
  7131  0019E6                     l3257:
  7132                           
  7133                           ; BSR set to: 0
  7134  0019E6  C087  F085         	movff	_CenterBreathe$1238,_CenterBreathe$1237
  7135  0019EA  C088  F086         	movff	_CenterBreathe$1238+1,_CenterBreathe$1237+1
  7136  0019EE  D010               	goto	l3261
  7137  0019F0                     l3259:
  7138                           
  7139                           ; BSR set to: 0
  7140  0019F0  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7141  0019F4  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7142  0019F8  50DF               	movf	indf2,w,c
  7143  0019FA  0100               	movlb	0	; () banked
  7144  0019FC  6F72               	movwf	??_CenterBreathe& (0+255),b
  7145  0019FE  0100               	movlb	0	; () banked
  7146  001A00  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7147  001A02  0E0F               	movlw	15
  7148  001A04  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7149  001A06  0100               	movlb	0	; () banked
  7150  001A08  5172               	movf	??_CenterBreathe& (0+255),w,b
  7151  001A0A  0100               	movlb	0	; () banked
  7152  001A0C  6F85               	movwf	_CenterBreathe$1237& (0+255),b
  7153  001A0E  6B86               	clrf	(_CenterBreathe$1237+1)& (0+255),b
  7154  001A10                     l3261:
  7155                           
  7156                           ; BSR set to: 0
  7157  001A10  C085  F08C         	movff	_CenterBreathe$1237,CenterBreathe@val
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;Pattern_PtrnFunctions.c: 112: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7161  001A14  0100               	movlb	0	; () banked
  7162  001A16  516F               	movf	CenterBreathe@base_sat& (0+255),w,b
  7163  001A18  0100               	movlb	0	; () banked
  7164  001A1A  6F72               	movwf	??_CenterBreathe& (0+255),b
  7165  001A1C  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  7166  001A1E  0100               	movlb	0	; () banked
  7167  001A20  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7168  001A22  3B73               	swapf	(??_CenterBreathe+1)& (0+255),f,b
  7169  001A24  0EF0               	movlw	240
  7170  001A26  1773               	andwf	(??_CenterBreathe+1)& (0+255),f,b
  7171  001A28  5172               	movf	??_CenterBreathe& (0+255),w,b
  7172  001A2A  0B0F               	andlw	15
  7173  001A2C  1373               	iorwf	(??_CenterBreathe+1)& (0+255),f,b
  7174  001A2E  0EF0               	movlw	240
  7175  001A30  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7176  001A32  0100               	movlb	0	; () banked
  7177  001A34  516E               	movf	CenterBreathe@base_hue& (0+255),w,b
  7178  001A36  0100               	movlb	0	; () banked
  7179  001A38  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7180  001A3A  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7181  001A3C  0100               	movlb	0	; () banked
  7182  001A3E  5172               	movf	??_CenterBreathe& (0+255),w,b
  7183  001A40  0100               	movlb	0	; () banked
  7184  001A42  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7185  001A44  0100               	movlb	0	; () banked
  7186  001A46  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7187  001A48  0100               	movlb	0	; () banked
  7188  001A4A  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7189  001A4C  0100               	movlb	0	; () banked
  7190  001A4E  518C               	movf	CenterBreathe@val& (0+255),w,b
  7191  001A50  0100               	movlb	0	; () banked
  7192  001A52  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7193  001A54  0E00               	movlw	0
  7194  001A56  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7195  001A58  0100               	movlb	0	; () banked
  7196  001A5A  518F               	movf	CenterBreathe@i& (0+255),w,b
  7197  001A5C  0D02               	mullw	2
  7198  001A5E  50F3               	movf	prodl,w,c
  7199  001A60  0100               	movlb	0	; () banked
  7200  001A62  2568               	addwf	CenterBreathe@ptrnPointer& (0+255),w,b
  7201  001A64  6ED9               	movwf	fsr2l,c
  7202  001A66  50F4               	movf	prodh,w,c
  7203  001A68  0100               	movlb	0	; () banked
  7204  001A6A  2169               	addwfc	(CenterBreathe@ptrnPointer+1)& (0+255),w,b
  7205  001A6C  6EDA               	movwf	fsr2h,c
  7206  001A6E  C074  FFDE         	movff	??_CenterBreathe+2,postinc2
  7207  001A72  C075  FFDD         	movff	??_CenterBreathe+3,postdec2
  7208                           
  7209                           ; BSR set to: 0
  7210  001A76  0100               	movlb	0	; () banked
  7211  001A78  2B8F               	incf	CenterBreathe@i& (0+255),f,b
  7212  001A7A  D6A1               	goto	l3223
  7213  001A7C                     l3269:
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;Pattern_PtrnFunctions.c: 113: }
  7217                           ;Pattern_PtrnFunctions.c: 114: if(*ptrnStepCounter == 255){
  7218  001A7C  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7219  001A80  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7220  001A84  28DE               	incf	postinc2,w,c
  7221  001A86  A4D8               	btfss	status,2,c
  7222  001A88  D002               	goto	l3273
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;Pattern_PtrnFunctions.c: 115: rising = 0;
  7226  001A8A  0E00               	movlw	0
  7227  001A8C  D009               	goto	L15
  7228  001A8E                     l3273:
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;Pattern_PtrnFunctions.c: 117: else if(*ptrnStepCounter == 60){
  7232  001A8E  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7233  001A92  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7234  001A96  0E3C               	movlw	60
  7235  001A98  18DE               	xorwf	postinc2,w,c
  7236  001A9A  A4D8               	btfss	status,2,c
  7237  001A9C  D003               	goto	l697
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;Pattern_PtrnFunctions.c: 118: rising = 1;
  7241  001A9E  0E01               	movlw	1
  7242  001AA0                     L15:
  7243  001AA0  0100               	movlb	0	; () banked
  7244  001AA2  6FF3               	movwf	CenterBreathe@rising& (0+255),b
  7245  001AA4                     l697:
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;Pattern_PtrnFunctions.c: 119: }
  7249                           ;Pattern_PtrnFunctions.c: 120: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnS
      +                          tepCounter-15);
  7250  001AA4  0100               	movlb	0	; () banked
  7251  001AA6  51F3               	movf	CenterBreathe@rising& (0+255),w,b
  7252  001AA8  0100               	movlb	0	; () banked
  7253  001AAA  A4D8               	btfss	status,2,c
  7254  001AAC  D010               	goto	l3279
  7255                           
  7256                           ; BSR set to: 0
  7257  001AAE  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7258  001AB2  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7259  001AB6  50DF               	movf	indf2,w,c
  7260  001AB8  0100               	movlb	0	; () banked
  7261  001ABA  6F72               	movwf	??_CenterBreathe& (0+255),b
  7262  001ABC  0EF1               	movlw	241
  7263  001ABE  0100               	movlb	0	; () banked
  7264  001AC0  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7265  001AC2  0100               	movlb	0	; () banked
  7266  001AC4  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  7267  001AC6  0100               	movlb	0	; () banked
  7268  001AC8  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  7269  001ACA  0EFF               	movlw	255
  7270  001ACC  D00F               	goto	L16
  7271  001ACE                     l3279:
  7272                           
  7273                           ; BSR set to: 0
  7274  001ACE  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7275  001AD2  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7276  001AD6  50DF               	movf	indf2,w,c
  7277  001AD8  0100               	movlb	0	; () banked
  7278  001ADA  6F72               	movwf	??_CenterBreathe& (0+255),b
  7279  001ADC  0E0F               	movlw	15
  7280  001ADE  0100               	movlb	0	; () banked
  7281  001AE0  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7282  001AE2  0100               	movlb	0	; () banked
  7283  001AE4  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  7284  001AE6  0100               	movlb	0	; () banked
  7285  001AE8  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  7286  001AEA  0E00               	movlw	0
  7287  001AEC                     L16:
  7288  001AEC  238A               	addwfc	(_CenterBreathe$1239+1)& (0+255),f,b
  7289                           
  7290                           ; BSR set to: 0
  7291                           
  7292                           ; BSR set to: 0
  7293  001AEE  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7294  001AF2  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7295  001AF6  C089  FFDF         	movff	_CenterBreathe$1239,indf2
  7296                           
  7297                           ; BSR set to: 0
  7298  001AFA  0012               	return		;funcret
  7299  001AFC                     __end_of_CenterBreathe:
  7300                           	opt stack 0
  7301                           tosu	equ	0xFFF
  7302                           tosh	equ	0xFFE
  7303                           tosl	equ	0xFFD
  7304                           pclath	equ	0xFFA
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           postdec1	equ	0xFE5
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function _BrokenPinwheel *****************
  7325 ;; Defined at:
  7326 ;;		line 171 in file "Pattern_PtrnFunctions.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  7329 ;;		 -> PixelPattern(152), 
  7330 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  7331 ;;		 -> PatternStepCounter(1), 
  7332 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  7333 ;;		 -> CycleCounter(4), 
  7334 ;;  base_hue        1   14[BANK0 ] unsigned char 
  7335 ;;  base_sat        1   15[BANK0 ] unsigned char 
  7336 ;;  15769           2   16[BANK0 ] PTR void 
  7337 ;;		 -> NULL(0), 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  i               1   36[BANK0 ] unsigned char 
  7340 ;;  val             1   35[BANK0 ] unsigned char 
  7341 ;;  fade            1   34[BANK0 ] unsigned char 
  7342 ;;  x               1   33[BANK0 ] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7352 ;;      Params:         0      10       0       0
  7353 ;;      Locals:         0       8       0       0
  7354 ;;      Temps:          0      11       0       0
  7355 ;;      Totals:         0      29       0       0
  7356 ;;Total ram usage:       29 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    8
  7359 ;; This function calls:
  7360 ;;		___awdiv
  7361 ;;		___awmod
  7362 ;; This function is called by:
  7363 ;;		_UpdatePattern
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text23
  7368  0003B8                     __ptext23:
  7369                           	opt stack 0
  7370  0003B8                     _BrokenPinwheel:
  7371                           	opt stack 18
  7372                           
  7373                           ;Pattern_PtrnFunctions.c: 172: uint8_t val, x;
  7374                           ;Pattern_PtrnFunctions.c: 173: uint8_t fade = 2;
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;incstack = 0
  7378  0003B8  0E02               	movlw	2
  7379  0003BA  0100               	movlb	0	; () banked
  7380  0003BC  6F82               	movwf	BrokenPinwheel@fade& (0+255),b
  7381                           
  7382                           ;Pattern_PtrnFunctions.c: 175: for(uint8_t i=0;i<76/8;i++){
  7383  0003BE  0E00               	movlw	0
  7384  0003C0  0100               	movlb	0	; () banked
  7385  0003C2  6F84               	movwf	BrokenPinwheel@i& (0+255),b
  7386  0003C4                     l3377:
  7387                           
  7388                           ; BSR set to: 0
  7389  0003C4  0E08               	movlw	8
  7390  0003C6  0100               	movlb	0	; () banked
  7391  0003C8  6584               	cpfsgt	BrokenPinwheel@i& (0+255),b
  7392  0003CA  D001               	goto	l3381
  7393  0003CC  D2D9               	goto	l3417
  7394  0003CE                     l3381:
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;Pattern_PtrnFunctions.c: 177: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  7398  0003CE  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7399  0003D2  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7400  0003D6  50DF               	movf	indf2,w,c
  7401  0003D8  0100               	movlb	0	; () banked
  7402  0003DA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7403  0003DC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7404  0003DE  0100               	movlb	0	; () banked
  7405  0003E0  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7406  0003E2  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7407  0003E4  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7408  0003E6  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7409  0003E8  0100               	movlb	0	; () banked
  7410  0003EA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7411  0003EC  0100               	movlb	0	; () banked
  7412  0003EE  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7413  0003F0  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7414  0003F2  0100               	movlb	0	; () banked
  7415  0003F4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7416  0003F6  0100               	movlb	0	; () banked
  7417  0003F8  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7418  0003FA  0100               	movlb	0	; () banked
  7419  0003FC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7420  0003FE  0100               	movlb	0	; () banked
  7421  000400  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7422  000402  0E4C               	movlw	76
  7423  000404  0100               	movlb	0	; () banked
  7424  000406  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7425  000408  0100               	movlb	0	; () banked
  7426  00040A  6F60               	movwf	___awmod@dividend& (0+255),b
  7427  00040C  0E00               	movlw	0
  7428  00040E  0100               	movlb	0	; () banked
  7429  000410  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7430  000412  0100               	movlb	0	; () banked
  7431  000414  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7432  000416  0E00               	movlw	0
  7433  000418  0100               	movlb	0	; () banked
  7434  00041A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7435  00041C  0E4C               	movlw	76
  7436  00041E  6F62               	movwf	___awmod@divisor& (0+255),b
  7437  000420  ECCE  F018         	call	___awmod	;wreg free
  7438  000424  C060  F076         	movff	?___awmod,??_BrokenPinwheel+4
  7439  000428  C061  F077         	movff	?___awmod+1,??_BrokenPinwheel+5
  7440  00042C  0100               	movlb	0	; () banked
  7441  00042E  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7442  000430  0100               	movlb	0	; () banked
  7443  000432  6F78               	movwf	(??_BrokenPinwheel+6)& (0+255),b
  7444  000434  6B79               	clrf	(??_BrokenPinwheel+7)& (0+255),b
  7445  000436  0100               	movlb	0	; () banked
  7446  000438  1F78               	comf	(??_BrokenPinwheel+6)& (0+255),f,b
  7447  00043A  1F79               	comf	(??_BrokenPinwheel+7)& (0+255),f,b
  7448  00043C  4B78               	infsnz	(??_BrokenPinwheel+6)& (0+255),f,b
  7449  00043E  2B79               	incf	(??_BrokenPinwheel+7)& (0+255),f,b
  7450  000440  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7451  000444  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7452  000448  50DF               	movf	indf2,w,c
  7453  00044A  0100               	movlb	0	; () banked
  7454  00044C  6F7A               	movwf	(??_BrokenPinwheel+8)& (0+255),b
  7455  00044E  6B7B               	clrf	(??_BrokenPinwheel+9)& (0+255),b
  7456  000450  0100               	movlb	0	; () banked
  7457  000452  5178               	movf	(??_BrokenPinwheel+6)& (0+255),w,b
  7458  000454  0100               	movlb	0	; () banked
  7459  000456  277A               	addwf	(??_BrokenPinwheel+8)& (0+255),f,b
  7460  000458  0100               	movlb	0	; () banked
  7461  00045A  5179               	movf	(??_BrokenPinwheel+7)& (0+255),w,b
  7462  00045C  0100               	movlb	0	; () banked
  7463  00045E  237B               	addwfc	(??_BrokenPinwheel+9)& (0+255),f,b
  7464  000460  0E4C               	movlw	76
  7465  000462  0100               	movlb	0	; () banked
  7466  000464  257A               	addwf	(??_BrokenPinwheel+8)& (0+255),w,b
  7467  000466  0100               	movlb	0	; () banked
  7468  000468  6F60               	movwf	___awmod@dividend& (0+255),b
  7469  00046A  0E00               	movlw	0
  7470  00046C  0100               	movlb	0	; () banked
  7471  00046E  217B               	addwfc	(??_BrokenPinwheel+9)& (0+255),w,b
  7472  000470  0100               	movlb	0	; () banked
  7473  000472  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7474  000474  0E00               	movlw	0
  7475  000476  0100               	movlb	0	; () banked
  7476  000478  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7477  00047A  0E4C               	movlw	76
  7478  00047C  6F62               	movwf	___awmod@divisor& (0+255),b
  7479  00047E  ECCE  F018         	call	___awmod	;wreg free
  7480  000482  0100               	movlb	0	; () banked
  7481  000484  5160               	movf	?___awmod& (0+255),w,b
  7482  000486  0100               	movlb	0	; () banked
  7483  000488  5D76               	subwf	(??_BrokenPinwheel+4)& (0+255),w,b
  7484  00048A  0100               	movlb	0	; () banked
  7485  00048C  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7486  00048E  0A80               	xorlw	128
  7487  000490  0100               	movlb	0	; () banked
  7488  000492  6F7C               	movwf	(??_BrokenPinwheel+10)& (0+255),b
  7489  000494  0100               	movlb	0	; () banked
  7490  000496  5161               	movf	(?___awmod+1)& (0+255),w,b
  7491  000498  0A80               	xorlw	128
  7492  00049A  0100               	movlb	0	; () banked
  7493  00049C  597C               	subwfb	(??_BrokenPinwheel+10)& (0+255),w,b
  7494  00049E  A0D8               	btfss	status,0,c
  7495  0004A0  D02C               	goto	l3385
  7496                           
  7497                           ; BSR set to: 0
  7498  0004A2  0100               	movlb	0	; () banked
  7499  0004A4  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7500  0004A6  0100               	movlb	0	; () banked
  7501  0004A8  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7502  0004AA  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7503  0004AC  0100               	movlb	0	; () banked
  7504  0004AE  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7505  0004B0  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7506  0004B2  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7507  0004B4  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7508  0004B6  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7509  0004BA  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7510  0004BE  50DF               	movf	indf2,w,c
  7511  0004C0  0100               	movlb	0	; () banked
  7512  0004C2  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7513  0004C4  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7514  0004C6  0100               	movlb	0	; () banked
  7515  0004C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7516  0004CA  0100               	movlb	0	; () banked
  7517  0004CC  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7518  0004CE  0100               	movlb	0	; () banked
  7519  0004D0  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7520  0004D2  0100               	movlb	0	; () banked
  7521  0004D4  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7522  0004D6  0E4C               	movlw	76
  7523  0004D8  0100               	movlb	0	; () banked
  7524  0004DA  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7525  0004DC  0100               	movlb	0	; () banked
  7526  0004DE  6F60               	movwf	___awmod@dividend& (0+255),b
  7527  0004E0  0E00               	movlw	0
  7528  0004E2  0100               	movlb	0	; () banked
  7529  0004E4  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7530  0004E6  0100               	movlb	0	; () banked
  7531  0004E8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7532  0004EA  0E00               	movlw	0
  7533  0004EC  0100               	movlb	0	; () banked
  7534  0004EE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7535  0004F0  0E4C               	movlw	76
  7536  0004F2  6F62               	movwf	___awmod@divisor& (0+255),b
  7537  0004F4  ECCE  F018         	call	___awmod	;wreg free
  7538  0004F8  D02B               	goto	L17
  7539  0004FA                     l3385:
  7540  0004FA  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7541  0004FE  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7542  000502  50DF               	movf	indf2,w,c
  7543  000504  0100               	movlb	0	; () banked
  7544  000506  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7545  000508  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7546  00050A  0100               	movlb	0	; () banked
  7547  00050C  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7548  00050E  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7549  000510  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7550  000512  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7551  000514  0100               	movlb	0	; () banked
  7552  000516  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7553  000518  0100               	movlb	0	; () banked
  7554  00051A  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7555  00051C  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7556  00051E  0100               	movlb	0	; () banked
  7557  000520  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7558  000522  0100               	movlb	0	; () banked
  7559  000524  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7560  000526  0100               	movlb	0	; () banked
  7561  000528  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7562  00052A  0100               	movlb	0	; () banked
  7563  00052C  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7564  00052E  0E4C               	movlw	76
  7565  000530  0100               	movlb	0	; () banked
  7566  000532  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7567  000534  0100               	movlb	0	; () banked
  7568  000536  6F60               	movwf	___awmod@dividend& (0+255),b
  7569  000538  0E00               	movlw	0
  7570  00053A  0100               	movlb	0	; () banked
  7571  00053C  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7572  00053E  0100               	movlb	0	; () banked
  7573  000540  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7574  000542  0E00               	movlw	0
  7575  000544  0100               	movlb	0	; () banked
  7576  000546  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7577  000548  0E4C               	movlw	76
  7578  00054A  6F62               	movwf	___awmod@divisor& (0+255),b
  7579  00054C  ECCE  F018         	call	___awmod	;wreg free
  7580  000550                     L17:
  7581  000550  C060  F07D         	movff	?___awmod,_BrokenPinwheel$1290
  7582  000554  C061  F07E         	movff	?___awmod+1,_BrokenPinwheel$1290+1
  7583  000558  C07D  F081         	movff	_BrokenPinwheel$1290,BrokenPinwheel@x
  7584                           
  7585                           ;Pattern_PtrnFunctions.c: 178: val = (x < fade ? 0x0F-x*0x0F/fade : 0x00);
  7586  00055C  0100               	movlb	0	; () banked
  7587  00055E  5182               	movf	BrokenPinwheel@fade& (0+255),w,b
  7588  000560  0100               	movlb	0	; () banked
  7589  000562  5D81               	subwf	BrokenPinwheel@x& (0+255),w,b
  7590  000564  A0D8               	btfss	status,0,c
  7591  000566  D006               	goto	l3393
  7592                           
  7593                           ; BSR set to: 0
  7594  000568  0E00               	movlw	0
  7595  00056A  0100               	movlb	0	; () banked
  7596  00056C  6F80               	movwf	(_BrokenPinwheel$1291+1)& (0+255),b
  7597  00056E  0E00               	movlw	0
  7598  000570  6F7F               	movwf	_BrokenPinwheel$1291& (0+255),b
  7599  000572  D01E               	goto	l3395
  7600  000574                     l3393:
  7601                           
  7602                           ; BSR set to: 0
  7603  000574  0100               	movlb	0	; () banked
  7604  000576  5181               	movf	BrokenPinwheel@x& (0+255),w,b
  7605  000578  0D0F               	mullw	15
  7606  00057A  CFF3 F060          	movff	prodl,___awdiv@dividend
  7607  00057E  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7608  000582  C082  F062         	movff	BrokenPinwheel@fade,___awdiv@divisor
  7609  000586  0100               	movlb	0	; () banked
  7610  000588  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7611  00058A  EC6A  F017         	call	___awdiv	;wreg free
  7612  00058E  0100               	movlb	0	; () banked
  7613  000590  1F60               	comf	?___awdiv& (0+255),f,b
  7614  000592  0100               	movlb	0	; () banked
  7615  000594  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7616  000596  0100               	movlb	0	; () banked
  7617  000598  4B60               	infsnz	?___awdiv& (0+255),f,b
  7618  00059A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7619  00059C  0E0F               	movlw	15
  7620  00059E  0100               	movlb	0	; () banked
  7621  0005A0  2560               	addwf	?___awdiv& (0+255),w,b
  7622  0005A2  0100               	movlb	0	; () banked
  7623  0005A4  6F7F               	movwf	_BrokenPinwheel$1291& (0+255),b
  7624  0005A6  0E00               	movlw	0
  7625  0005A8  0100               	movlb	0	; () banked
  7626  0005AA  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  7627  0005AC  0100               	movlb	0	; () banked
  7628  0005AE  6F80               	movwf	(_BrokenPinwheel$1291+1)& (0+255),b
  7629  0005B0                     l3395:
  7630                           
  7631                           ; BSR set to: 0
  7632  0005B0  C07F  F083         	movff	_BrokenPinwheel$1291,BrokenPinwheel@val
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;Pattern_PtrnFunctions.c: 179: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7636  0005B4  0100               	movlb	0	; () banked
  7637  0005B6  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7638  0005B8  0100               	movlb	0	; () banked
  7639  0005BA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7640  0005BC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7641  0005BE  0100               	movlb	0	; () banked
  7642  0005C0  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7643  0005C2  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7644  0005C4  0EF0               	movlw	240
  7645  0005C6  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7646  0005C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7647  0005CA  0B0F               	andlw	15
  7648  0005CC  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7649  0005CE  0EF0               	movlw	240
  7650  0005D0  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7651  0005D2  0100               	movlb	0	; () banked
  7652  0005D4  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7653  0005D6  0100               	movlb	0	; () banked
  7654  0005D8  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7655  0005DA  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7656  0005DC  0100               	movlb	0	; () banked
  7657  0005DE  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7658  0005E0  0100               	movlb	0	; () banked
  7659  0005E2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7660  0005E4  0100               	movlb	0	; () banked
  7661  0005E6  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7662  0005E8  0100               	movlb	0	; () banked
  7663  0005EA  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7664  0005EC  0100               	movlb	0	; () banked
  7665  0005EE  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7666  0005F0  0100               	movlb	0	; () banked
  7667  0005F2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7668  0005F4  0E00               	movlw	0
  7669  0005F6  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7670  0005F8  0100               	movlb	0	; () banked
  7671  0005FA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7672  0005FC  0D02               	mullw	2
  7673  0005FE  50F3               	movf	prodl,w,c
  7674  000600  0100               	movlb	0	; () banked
  7675  000602  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7676  000604  6ED9               	movwf	fsr2l,c
  7677  000606  50F4               	movf	prodh,w,c
  7678  000608  0100               	movlb	0	; () banked
  7679  00060A  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7680  00060C  6EDA               	movwf	fsr2h,c
  7681  00060E  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7682  000612  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;Pattern_PtrnFunctions.c: 180: ptrnPointer[i+76/8] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7686  000616  0100               	movlb	0	; () banked
  7687  000618  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7688  00061A  0100               	movlb	0	; () banked
  7689  00061C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7690  00061E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7691  000620  0100               	movlb	0	; () banked
  7692  000622  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7693  000624  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7694  000626  0EF0               	movlw	240
  7695  000628  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7696  00062A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7697  00062C  0B0F               	andlw	15
  7698  00062E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7699  000630  0EF0               	movlw	240
  7700  000632  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7701  000634  0100               	movlb	0	; () banked
  7702  000636  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7703  000638  0100               	movlb	0	; () banked
  7704  00063A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7705  00063C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7706  00063E  0100               	movlb	0	; () banked
  7707  000640  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7708  000642  0100               	movlb	0	; () banked
  7709  000644  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7710  000646  0100               	movlb	0	; () banked
  7711  000648  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7712  00064A  0100               	movlb	0	; () banked
  7713  00064C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7714  00064E  0100               	movlb	0	; () banked
  7715  000650  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7716  000652  0100               	movlb	0	; () banked
  7717  000654  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7718  000656  0E00               	movlw	0
  7719  000658  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7720  00065A  0100               	movlb	0	; () banked
  7721  00065C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7722  00065E  0100               	movlb	0	; () banked
  7723  000660  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7724  000662  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7725  000664  90D8               	bcf	status,0,c
  7726  000666  0100               	movlb	0	; () banked
  7727  000668  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7728  00066A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7729  00066C  0E12               	movlw	18
  7730  00066E  0100               	movlb	0	; () banked
  7731  000670  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7732  000672  0E00               	movlw	0
  7733  000674  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7734  000676  0100               	movlb	0	; () banked
  7735  000678  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7736  00067A  0100               	movlb	0	; () banked
  7737  00067C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7738  00067E  6ED9               	movwf	fsr2l,c
  7739  000680  0100               	movlb	0	; () banked
  7740  000682  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7741  000684  0100               	movlb	0	; () banked
  7742  000686  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7743  000688  6EDA               	movwf	fsr2h,c
  7744  00068A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7745  00068E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;Pattern_PtrnFunctions.c: 181: ptrnPointer[i+76/4] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7749  000692  0100               	movlb	0	; () banked
  7750  000694  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7751  000696  0100               	movlb	0	; () banked
  7752  000698  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7753  00069A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7754  00069C  0100               	movlb	0	; () banked
  7755  00069E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7756  0006A0  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7757  0006A2  0EF0               	movlw	240
  7758  0006A4  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7759  0006A6  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7760  0006A8  0B0F               	andlw	15
  7761  0006AA  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7762  0006AC  0EF0               	movlw	240
  7763  0006AE  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7764  0006B0  0100               	movlb	0	; () banked
  7765  0006B2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7766  0006B4  0100               	movlb	0	; () banked
  7767  0006B6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7768  0006B8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7769  0006BA  0100               	movlb	0	; () banked
  7770  0006BC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7771  0006BE  0100               	movlb	0	; () banked
  7772  0006C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7773  0006C2  0100               	movlb	0	; () banked
  7774  0006C4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7775  0006C6  0100               	movlb	0	; () banked
  7776  0006C8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7777  0006CA  0100               	movlb	0	; () banked
  7778  0006CC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7779  0006CE  0100               	movlb	0	; () banked
  7780  0006D0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7781  0006D2  0E00               	movlw	0
  7782  0006D4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7783  0006D6  0100               	movlb	0	; () banked
  7784  0006D8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7785  0006DA  0100               	movlb	0	; () banked
  7786  0006DC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7787  0006DE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7788  0006E0  90D8               	bcf	status,0,c
  7789  0006E2  0100               	movlb	0	; () banked
  7790  0006E4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7791  0006E6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7792  0006E8  0E26               	movlw	38
  7793  0006EA  0100               	movlb	0	; () banked
  7794  0006EC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7795  0006EE  0E00               	movlw	0
  7796  0006F0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7797  0006F2  0100               	movlb	0	; () banked
  7798  0006F4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7799  0006F6  0100               	movlb	0	; () banked
  7800  0006F8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7801  0006FA  6ED9               	movwf	fsr2l,c
  7802  0006FC  0100               	movlb	0	; () banked
  7803  0006FE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7804  000700  0100               	movlb	0	; () banked
  7805  000702  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7806  000704  6EDA               	movwf	fsr2h,c
  7807  000706  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7808  00070A  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;Pattern_PtrnFunctions.c: 182: ptrnPointer[i+76*3/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  7812  00070E  0100               	movlb	0	; () banked
  7813  000710  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7814  000712  0100               	movlb	0	; () banked
  7815  000714  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7816  000716  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7817  000718  0100               	movlb	0	; () banked
  7818  00071A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7819  00071C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7820  00071E  0EF0               	movlw	240
  7821  000720  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7822  000722  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7823  000724  0B0F               	andlw	15
  7824  000726  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7825  000728  0EF0               	movlw	240
  7826  00072A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7827  00072C  0100               	movlb	0	; () banked
  7828  00072E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7829  000730  0100               	movlb	0	; () banked
  7830  000732  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7831  000734  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7832  000736  0100               	movlb	0	; () banked
  7833  000738  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7834  00073A  0100               	movlb	0	; () banked
  7835  00073C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7836  00073E  0100               	movlb	0	; () banked
  7837  000740  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7838  000742  0100               	movlb	0	; () banked
  7839  000744  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7840  000746  0100               	movlb	0	; () banked
  7841  000748  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7842  00074A  0100               	movlb	0	; () banked
  7843  00074C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7844  00074E  0E00               	movlw	0
  7845  000750  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7846  000752  0100               	movlb	0	; () banked
  7847  000754  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7848  000756  0100               	movlb	0	; () banked
  7849  000758  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7850  00075A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7851  00075C  90D8               	bcf	status,0,c
  7852  00075E  0100               	movlb	0	; () banked
  7853  000760  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7854  000762  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7855  000764  0E38               	movlw	56
  7856  000766  0100               	movlb	0	; () banked
  7857  000768  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7858  00076A  0E00               	movlw	0
  7859  00076C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7860  00076E  0100               	movlb	0	; () banked
  7861  000770  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7862  000772  0100               	movlb	0	; () banked
  7863  000774  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7864  000776  6ED9               	movwf	fsr2l,c
  7865  000778  0100               	movlb	0	; () banked
  7866  00077A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7867  00077C  0100               	movlb	0	; () banked
  7868  00077E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7869  000780  6EDA               	movwf	fsr2h,c
  7870  000782  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7871  000786  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;Pattern_PtrnFunctions.c: 183: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7875  00078A  0100               	movlb	0	; () banked
  7876  00078C  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7877  00078E  0100               	movlb	0	; () banked
  7878  000790  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7879  000792  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7880  000794  0100               	movlb	0	; () banked
  7881  000796  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7882  000798  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7883  00079A  0EF0               	movlw	240
  7884  00079C  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7885  00079E  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7886  0007A0  0B0F               	andlw	15
  7887  0007A2  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7888  0007A4  0EF0               	movlw	240
  7889  0007A6  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7890  0007A8  0100               	movlb	0	; () banked
  7891  0007AA  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7892  0007AC  0100               	movlb	0	; () banked
  7893  0007AE  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7894  0007B0  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7895  0007B2  0100               	movlb	0	; () banked
  7896  0007B4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7897  0007B6  0100               	movlb	0	; () banked
  7898  0007B8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7899  0007BA  0100               	movlb	0	; () banked
  7900  0007BC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7901  0007BE  0100               	movlb	0	; () banked
  7902  0007C0  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7903  0007C2  0100               	movlb	0	; () banked
  7904  0007C4  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7905  0007C6  0100               	movlb	0	; () banked
  7906  0007C8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7907  0007CA  0E00               	movlw	0
  7908  0007CC  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7909  0007CE  0100               	movlb	0	; () banked
  7910  0007D0  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7911  0007D2  0100               	movlb	0	; () banked
  7912  0007D4  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7913  0007D6  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7914  0007D8  90D8               	bcf	status,0,c
  7915  0007DA  0100               	movlb	0	; () banked
  7916  0007DC  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7917  0007DE  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7918  0007E0  0E4C               	movlw	76
  7919  0007E2  0100               	movlb	0	; () banked
  7920  0007E4  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7921  0007E6  0E00               	movlw	0
  7922  0007E8  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7923  0007EA  0100               	movlb	0	; () banked
  7924  0007EC  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7925  0007EE  0100               	movlb	0	; () banked
  7926  0007F0  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7927  0007F2  6ED9               	movwf	fsr2l,c
  7928  0007F4  0100               	movlb	0	; () banked
  7929  0007F6  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7930  0007F8  0100               	movlb	0	; () banked
  7931  0007FA  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7932  0007FC  6EDA               	movwf	fsr2h,c
  7933  0007FE  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7934  000802  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;Pattern_PtrnFunctions.c: 184: ptrnPointer[i+76*5/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  7938  000806  0100               	movlb	0	; () banked
  7939  000808  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7940  00080A  0100               	movlb	0	; () banked
  7941  00080C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7942  00080E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7943  000810  0100               	movlb	0	; () banked
  7944  000812  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7945  000814  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7946  000816  0EF0               	movlw	240
  7947  000818  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7948  00081A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7949  00081C  0B0F               	andlw	15
  7950  00081E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7951  000820  0EF0               	movlw	240
  7952  000822  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7953  000824  0100               	movlb	0	; () banked
  7954  000826  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7955  000828  0100               	movlb	0	; () banked
  7956  00082A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7957  00082C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7958  00082E  0100               	movlb	0	; () banked
  7959  000830  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7960  000832  0100               	movlb	0	; () banked
  7961  000834  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7962  000836  0100               	movlb	0	; () banked
  7963  000838  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7964  00083A  0100               	movlb	0	; () banked
  7965  00083C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7966  00083E  0100               	movlb	0	; () banked
  7967  000840  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7968  000842  0100               	movlb	0	; () banked
  7969  000844  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7970  000846  0E00               	movlw	0
  7971  000848  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7972  00084A  0100               	movlb	0	; () banked
  7973  00084C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7974  00084E  0100               	movlb	0	; () banked
  7975  000850  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7976  000852  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7977  000854  90D8               	bcf	status,0,c
  7978  000856  0100               	movlb	0	; () banked
  7979  000858  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7980  00085A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7981  00085C  0E5E               	movlw	94
  7982  00085E  0100               	movlb	0	; () banked
  7983  000860  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7984  000862  0E00               	movlw	0
  7985  000864  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7986  000866  0100               	movlb	0	; () banked
  7987  000868  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7988  00086A  0100               	movlb	0	; () banked
  7989  00086C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7990  00086E  6ED9               	movwf	fsr2l,c
  7991  000870  0100               	movlb	0	; () banked
  7992  000872  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7993  000874  0100               	movlb	0	; () banked
  7994  000876  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7995  000878  6EDA               	movwf	fsr2h,c
  7996  00087A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7997  00087E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;Pattern_PtrnFunctions.c: 185: ptrnPointer[i+76*3/4] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8001  000882  0100               	movlb	0	; () banked
  8002  000884  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8003  000886  0100               	movlb	0	; () banked
  8004  000888  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8005  00088A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8006  00088C  0100               	movlb	0	; () banked
  8007  00088E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8008  000890  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8009  000892  0EF0               	movlw	240
  8010  000894  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8011  000896  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8012  000898  0B0F               	andlw	15
  8013  00089A  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8014  00089C  0EF0               	movlw	240
  8015  00089E  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8016  0008A0  0100               	movlb	0	; () banked
  8017  0008A2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8018  0008A4  0100               	movlb	0	; () banked
  8019  0008A6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8020  0008A8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8021  0008AA  0100               	movlb	0	; () banked
  8022  0008AC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8023  0008AE  0100               	movlb	0	; () banked
  8024  0008B0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8025  0008B2  0100               	movlb	0	; () banked
  8026  0008B4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8027  0008B6  0100               	movlb	0	; () banked
  8028  0008B8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8029  0008BA  0100               	movlb	0	; () banked
  8030  0008BC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8031  0008BE  0100               	movlb	0	; () banked
  8032  0008C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8033  0008C2  0E00               	movlw	0
  8034  0008C4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8035  0008C6  0100               	movlb	0	; () banked
  8036  0008C8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8037  0008CA  0100               	movlb	0	; () banked
  8038  0008CC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8039  0008CE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8040  0008D0  90D8               	bcf	status,0,c
  8041  0008D2  0100               	movlb	0	; () banked
  8042  0008D4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8043  0008D6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8044  0008D8  0E72               	movlw	114
  8045  0008DA  0100               	movlb	0	; () banked
  8046  0008DC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8047  0008DE  0E00               	movlw	0
  8048  0008E0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8049  0008E2  0100               	movlb	0	; () banked
  8050  0008E4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8051  0008E6  0100               	movlb	0	; () banked
  8052  0008E8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8053  0008EA  6ED9               	movwf	fsr2l,c
  8054  0008EC  0100               	movlb	0	; () banked
  8055  0008EE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8056  0008F0  0100               	movlb	0	; () banked
  8057  0008F2  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8058  0008F4  6EDA               	movwf	fsr2h,c
  8059  0008F6  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8060  0008FA  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;Pattern_PtrnFunctions.c: 186: ptrnPointer[i+76*7/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8064  0008FE  0100               	movlb	0	; () banked
  8065  000900  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8066  000902  0100               	movlb	0	; () banked
  8067  000904  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8068  000906  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8069  000908  0100               	movlb	0	; () banked
  8070  00090A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8071  00090C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8072  00090E  0EF0               	movlw	240
  8073  000910  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8074  000912  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8075  000914  0B0F               	andlw	15
  8076  000916  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8077  000918  0EF0               	movlw	240
  8078  00091A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8079  00091C  0100               	movlb	0	; () banked
  8080  00091E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8081  000920  0100               	movlb	0	; () banked
  8082  000922  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8083  000924  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8084  000926  0100               	movlb	0	; () banked
  8085  000928  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8086  00092A  0100               	movlb	0	; () banked
  8087  00092C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8088  00092E  0100               	movlb	0	; () banked
  8089  000930  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8090  000932  0100               	movlb	0	; () banked
  8091  000934  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8092  000936  0100               	movlb	0	; () banked
  8093  000938  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8094  00093A  0100               	movlb	0	; () banked
  8095  00093C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8096  00093E  0E00               	movlw	0
  8097  000940  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8098  000942  0100               	movlb	0	; () banked
  8099  000944  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8100  000946  0100               	movlb	0	; () banked
  8101  000948  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8102  00094A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8103  00094C  90D8               	bcf	status,0,c
  8104  00094E  0100               	movlb	0	; () banked
  8105  000950  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8106  000952  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8107  000954  0E84               	movlw	132
  8108  000956  0100               	movlb	0	; () banked
  8109  000958  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8110  00095A  0E00               	movlw	0
  8111  00095C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8112  00095E  0100               	movlb	0	; () banked
  8113  000960  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8114  000962  0100               	movlb	0	; () banked
  8115  000964  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8116  000966  6ED9               	movwf	fsr2l,c
  8117  000968  0100               	movlb	0	; () banked
  8118  00096A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8119  00096C  0100               	movlb	0	; () banked
  8120  00096E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8121  000970  6EDA               	movwf	fsr2h,c
  8122  000972  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8123  000976  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8124                           
  8125                           ; BSR set to: 0
  8126  00097A  0100               	movlb	0	; () banked
  8127  00097C  2B84               	incf	BrokenPinwheel@i& (0+255),f,b
  8128  00097E  D522               	goto	l3377
  8129  000980                     l3417:
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;Pattern_PtrnFunctions.c: 187: }
  8133                           ;Pattern_PtrnFunctions.c: 188: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/3);
  8134  000980  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8135  000984  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8136  000988  50DF               	movf	indf2,w,c
  8137  00098A  0100               	movlb	0	; () banked
  8138  00098C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8139  00098E  0E01               	movlw	1
  8140  000990  0100               	movlb	0	; () banked
  8141  000992  2572               	addwf	??_BrokenPinwheel& (0+255),w,b
  8142  000994  0100               	movlb	0	; () banked
  8143  000996  6F60               	movwf	___awmod@dividend& (0+255),b
  8144  000998  0100               	movlb	0	; () banked
  8145  00099A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8146  00099C  0E00               	movlw	0
  8147  00099E  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  8148  0009A0  0E00               	movlw	0
  8149  0009A2  0100               	movlb	0	; () banked
  8150  0009A4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8151  0009A6  0E19               	movlw	25
  8152  0009A8  6F62               	movwf	___awmod@divisor& (0+255),b
  8153  0009AA  ECCE  F018         	call	___awmod	;wreg free
  8154  0009AE  0100               	movlb	0	; () banked
  8155  0009B0  5160               	movf	?___awmod& (0+255),w,b
  8156  0009B2  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8157  0009B6  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8158  0009BA  6EDF               	movwf	indf2,c
  8159                           
  8160                           ; BSR set to: 0
  8161  0009BC  0012               	return		;funcret
  8162  0009BE                     __end_of_BrokenPinwheel:
  8163                           	opt stack 0
  8164                           tosu	equ	0xFFF
  8165                           tosh	equ	0xFFE
  8166                           tosl	equ	0xFFD
  8167                           pclath	equ	0xFFA
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           postinc0	equ	0xFEE
  8175                           wreg	equ	0xFE8
  8176                           postdec1	equ	0xFE5
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           plusw2	equ	0xFDB
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function ___awdiv *****************
  8188 ;; Defined at:
  8189 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  dividend        2    0[BANK0 ] int 
  8192 ;;  divisor         2    2[BANK0 ] int 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  quotient        2    6[BANK0 ] int 
  8195 ;;  sign            1    5[BANK0 ] unsigned char 
  8196 ;;  counter         1    4[BANK0 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  2    0[BANK0 ] int 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8206 ;;      Params:         0       4       0       0
  8207 ;;      Locals:         0       4       0       0
  8208 ;;      Temps:          0       0       0       0
  8209 ;;      Totals:         0       8       0       0
  8210 ;;Total ram usage:        8 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    7
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_CenterBreathe
  8217 ;;		_SingleFadedLoop
  8218 ;;		_DoubleFadedLoop
  8219 ;;		_BrokenPinwheel
  8220 ;;		_MirroredQuadrants
  8221 ;;		_SingleFocusPulse
  8222 ;;		_UpdatePattern
  8223 ;;		_DoubleBrokenLoop
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text24
  8228  002ED4                     __ptext24:
  8229                           	opt stack 0
  8230  002ED4                     ___awdiv:
  8231                           	opt stack 19
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;incstack = 0
  8235  002ED4  0E00               	movlw	0
  8236  002ED6  0100               	movlb	0	; () banked
  8237  002ED8  6F65               	movwf	___awdiv@sign& (0+255),b
  8238                           
  8239                           ; BSR set to: 0
  8240  002EDA  0100               	movlb	0	; () banked
  8241  002EDC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8242  002EDE  D008               	goto	l3015
  8243                           
  8244                           ; BSR set to: 0
  8245  002EE0  0100               	movlb	0	; () banked
  8246  002EE2  6D62               	negf	___awdiv@divisor& (0+255),b
  8247  002EE4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8248  002EE6  B0D8               	btfsc	status,0,c
  8249  002EE8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8250                           
  8251                           ; BSR set to: 0
  8252  002EEA  0E01               	movlw	1
  8253  002EEC  0100               	movlb	0	; () banked
  8254  002EEE  6F65               	movwf	___awdiv@sign& (0+255),b
  8255  002EF0                     l3015:
  8256                           
  8257                           ; BSR set to: 0
  8258  002EF0  0100               	movlb	0	; () banked
  8259  002EF2  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8260  002EF4  D008               	goto	l3021
  8261                           
  8262                           ; BSR set to: 0
  8263  002EF6  0100               	movlb	0	; () banked
  8264  002EF8  6D60               	negf	___awdiv@dividend& (0+255),b
  8265  002EFA  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8266  002EFC  B0D8               	btfsc	status,0,c
  8267  002EFE  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8268                           
  8269                           ; BSR set to: 0
  8270  002F00  0E01               	movlw	1
  8271  002F02  0100               	movlb	0	; () banked
  8272  002F04  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8273  002F06                     l3021:
  8274                           
  8275                           ; BSR set to: 0
  8276  002F06  0E00               	movlw	0
  8277  002F08  0100               	movlb	0	; () banked
  8278  002F0A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  8279  002F0C  0E00               	movlw	0
  8280  002F0E  6F66               	movwf	___awdiv@quotient& (0+255),b
  8281                           
  8282                           ; BSR set to: 0
  8283  002F10  0100               	movlb	0	; () banked
  8284  002F12  5162               	movf	___awdiv@divisor& (0+255),w,b
  8285  002F14  0100               	movlb	0	; () banked
  8286  002F16  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8287  002F18  B4D8               	btfsc	status,2,c
  8288  002F1A  D02C               	goto	l3043
  8289                           
  8290                           ; BSR set to: 0
  8291  002F1C  0E01               	movlw	1
  8292  002F1E  0100               	movlb	0	; () banked
  8293  002F20  6F64               	movwf	___awdiv@counter& (0+255),b
  8294  002F22  D006               	goto	l3029
  8295  002F24                     l3027:
  8296                           
  8297                           ; BSR set to: 0
  8298  002F24  0100               	movlb	0	; () banked
  8299  002F26  90D8               	bcf	status,0,c
  8300  002F28  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8301  002F2A  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8302  002F2C  0100               	movlb	0	; () banked
  8303  002F2E  2B64               	incf	___awdiv@counter& (0+255),f,b
  8304  002F30                     l3029:
  8305                           
  8306                           ; BSR set to: 0
  8307  002F30  0100               	movlb	0	; () banked
  8308  002F32  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8309  002F34  D7F7               	goto	l3027
  8310  002F36                     l3031:
  8311                           
  8312                           ; BSR set to: 0
  8313  002F36  0100               	movlb	0	; () banked
  8314  002F38  90D8               	bcf	status,0,c
  8315  002F3A  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8316  002F3C  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8317                           
  8318                           ; BSR set to: 0
  8319  002F3E  0100               	movlb	0	; () banked
  8320  002F40  5162               	movf	___awdiv@divisor& (0+255),w,b
  8321  002F42  0100               	movlb	0	; () banked
  8322  002F44  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8323  002F46  0100               	movlb	0	; () banked
  8324  002F48  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8325  002F4A  0100               	movlb	0	; () banked
  8326  002F4C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8327  002F4E  A0D8               	btfss	status,0,c
  8328  002F50  D00A               	goto	l3039
  8329                           
  8330                           ; BSR set to: 0
  8331  002F52  0100               	movlb	0	; () banked
  8332  002F54  5162               	movf	___awdiv@divisor& (0+255),w,b
  8333  002F56  0100               	movlb	0	; () banked
  8334  002F58  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8335  002F5A  0100               	movlb	0	; () banked
  8336  002F5C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8337  002F5E  0100               	movlb	0	; () banked
  8338  002F60  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8339                           
  8340                           ; BSR set to: 0
  8341  002F62  0100               	movlb	0	; () banked
  8342  002F64  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8343  002F66                     l3039:
  8344                           
  8345                           ; BSR set to: 0
  8346  002F66  0100               	movlb	0	; () banked
  8347  002F68  90D8               	bcf	status,0,c
  8348  002F6A  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8349  002F6C  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8350                           
  8351                           ; BSR set to: 0
  8352  002F6E  0100               	movlb	0	; () banked
  8353  002F70  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8354  002F72  D7E1               	goto	l3031
  8355  002F74                     l3043:
  8356                           
  8357                           ; BSR set to: 0
  8358  002F74  0100               	movlb	0	; () banked
  8359  002F76  5165               	movf	___awdiv@sign& (0+255),w,b
  8360  002F78  0100               	movlb	0	; () banked
  8361  002F7A  B4D8               	btfsc	status,2,c
  8362  002F7C  D005               	goto	l3047
  8363                           
  8364                           ; BSR set to: 0
  8365  002F7E  0100               	movlb	0	; () banked
  8366  002F80  6D66               	negf	___awdiv@quotient& (0+255),b
  8367  002F82  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8368  002F84  B0D8               	btfsc	status,0,c
  8369  002F86  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8370  002F88                     l3047:
  8371                           
  8372                           ; BSR set to: 0
  8373  002F88  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8374  002F8C  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8375  002F90  0012               	return	
  8376  002F92                     __end_of___awdiv:
  8377                           	opt stack 0
  8378                           tosu	equ	0xFFF
  8379                           tosh	equ	0xFFE
  8380                           tosl	equ	0xFFD
  8381                           pclath	equ	0xFFA
  8382                           tblptru	equ	0xFF8
  8383                           tblptrh	equ	0xFF7
  8384                           tblptrl	equ	0xFF6
  8385                           tablat	equ	0xFF5
  8386                           prodh	equ	0xFF4
  8387                           prodl	equ	0xFF3
  8388                           postinc0	equ	0xFEE
  8389                           wreg	equ	0xFE8
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           plusw2	equ	0xFDB
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _ES_Timer_InitTimer *****************
  8402 ;; Defined at:
  8403 ;;		line 229 in file "ES_Timers.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  Num             1    wreg     unsigned char 
  8406 ;;  NewTime         2    0[BANK0 ] unsigned int 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  Num             1    4[BANK0 ] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      enum E15472
  8411 ;; Registers used:
  8412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8418 ;;      Params:         0       2       0       0
  8419 ;;      Locals:         0       1       0       0
  8420 ;;      Temps:          0       2       0       0
  8421 ;;      Totals:         0       5       0       0
  8422 ;;Total ram usage:        5 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    7
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_ShowPattern
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text25
  8433  00334E                     __ptext25:
  8434                           	opt stack 0
  8435  00334E                     _ES_Timer_InitTimer:
  8436                           	opt stack 20
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;incstack = 0
  8440                           ;ES_Timer_InitTimer@Num stored from wreg
  8441  00334E  0100               	movlb	0	; () banked
  8442  003350  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  8443                           
  8444                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  8445                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  8446                           ;ES_Timers.c: 236: (NewTime == 0) )
  8447  003352  0E10               	movlw	16
  8448  003354  0100               	movlb	0	; () banked
  8449  003356  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  8450  003358  0012               	return	
  8451                           
  8452                           ; BSR set to: 0
  8453  00335A  0100               	movlb	0	; () banked
  8454  00335C  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8455  00335E  0D02               	mullw	2
  8456  003360  0E21               	movlw	low _Timer2PostFunc
  8457  003362  24F3               	addwf	prodl,w,c
  8458  003364  6EF6               	movwf	tblptrl,c
  8459  003366  0E03               	movlw	high _Timer2PostFunc
  8460  003368  20F4               	addwfc	prodh,w,c
  8461  00336A  6EF7               	movwf	tblptrh,c
  8462  00336C                     	if	0	;There are less than 3 active tblptr bytes
  8463  00336C                     	endif
  8464  00336C  0009               	tblrd		*+
  8465  00336E  50F5               	movf	tablat,w,c
  8466  003370  0009               	tblrd		*+
  8467  003372  10F5               	iorwf	tablat,w,c
  8468  003374  B4D8               	btfsc	status,2,c
  8469  003376  0012               	return	
  8470                           
  8471                           ; BSR set to: 0
  8472  003378  0100               	movlb	0	; () banked
  8473  00337A  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  8474  00337C  0100               	movlb	0	; () banked
  8475  00337E  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  8476  003380  B4D8               	btfsc	status,2,c
  8477  003382  0012               	return	
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  8481                           
  8482                           ; BSR set to: 0
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  8486                           ;	Return value of _ES_Timer_InitTimer is never used
  8487  003384  0100               	movlb	0	; () banked
  8488  003386  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8489  003388  0D02               	mullw	2
  8490  00338A  0E00               	movlw	low _TMR_TimerArray
  8491  00338C  24F3               	addwf	prodl,w,c
  8492  00338E  6ED9               	movwf	fsr2l,c
  8493  003390  0E01               	movlw	high _TMR_TimerArray
  8494  003392  20F4               	addwfc	prodh,w,c
  8495  003394  6EDA               	movwf	fsr2h,c
  8496  003396  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  8497  00339A  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  8501  00339E  0100               	movlb	0	; () banked
  8502  0033A0  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8503  0033A2  0D02               	mullw	2
  8504  0033A4  0E01               	movlw	low _BitNum2SetMask
  8505  0033A6  24F3               	addwf	prodl,w,c
  8506  0033A8  6EF6               	movwf	tblptrl,c
  8507  0033AA  0E03               	movlw	high _BitNum2SetMask
  8508  0033AC  20F4               	addwfc	prodh,w,c
  8509  0033AE  6EF7               	movwf	tblptrh,c
  8510  0033B0                     	if	0	;There are less than 3 active tblptr bytes
  8511  0033B0                     	endif
  8512  0033B0  0009               	tblrd		*+
  8513  0033B2  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  8514  0033B6  0009               	tblrd		*+
  8515  0033B8  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  8516  0033BC  0100               	movlb	0	; () banked
  8517  0033BE  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  8518  0033C0  0100               	movlb	0	; () banked
  8519  0033C2  13DF               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  8520  0033C4  0100               	movlb	0	; () banked
  8521  0033C6  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  8522  0033C8  0100               	movlb	0	; () banked
  8523  0033CA  13E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  8524  0033CC  0012               	return	
  8525  0033CE                     __end_of_ES_Timer_InitTimer:
  8526                           	opt stack 0
  8527                           tosu	equ	0xFFF
  8528                           tosh	equ	0xFFE
  8529                           tosl	equ	0xFFD
  8530                           pclath	equ	0xFFA
  8531                           tblptru	equ	0xFF8
  8532                           tblptrh	equ	0xFF7
  8533                           tblptrl	equ	0xFF6
  8534                           tablat	equ	0xFF5
  8535                           prodh	equ	0xFF4
  8536                           prodl	equ	0xFF3
  8537                           postinc0	equ	0xFEE
  8538                           wreg	equ	0xFE8
  8539                           postdec1	equ	0xFE5
  8540                           fsr1h	equ	0xFE2
  8541                           fsr1l	equ	0xFE1
  8542                           indf2	equ	0xFDF
  8543                           postinc2	equ	0xFDE
  8544                           postdec2	equ	0xFDD
  8545                           plusw2	equ	0xFDB
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           
  8550 ;; *************** function _DotStar_Show *****************
  8551 ;; Defined at:
  8552 ;;		line 61 in file "Pattern_DotStarLED.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  8555 ;;		 -> PixelPattern(152), 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;  i               1   90[BANK0 ] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      void 
  8560 ;; Registers used:
  8561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8567 ;;      Params:         0       2       0       0
  8568 ;;      Locals:         0       1       0       0
  8569 ;;      Temps:          0      19       0       0
  8570 ;;      Totals:         0      22       0       0
  8571 ;;Total ram usage:       22 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:   12
  8574 ;; This function calls:
  8575 ;;		_HSV_to_RGB
  8576 ;;		_SPI32_TransmitFrames
  8577 ;; This function is called by:
  8578 ;;		_ShowPattern
  8579 ;;		_StopPattern
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           	psect	text26
  8584  002510                     __ptext26:
  8585                           	opt stack 0
  8586  002510                     _DotStar_Show:
  8587                           	opt stack 15
  8588                           
  8589                           ;Pattern_DotStarLED.c: 62: for(uint8_t i=1; i<=76; i++){
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;incstack = 0
  8593  002510  0E01               	movlw	1
  8594  002512  0100               	movlb	0	; () banked
  8595  002514  6FBA               	movwf	DotStar_Show@i& (0+255),b
  8596  002516                     l3613:
  8597                           
  8598                           ; BSR set to: 0
  8599  002516  0E4C               	movlw	76
  8600  002518  0100               	movlb	0	; () banked
  8601  00251A  65BA               	cpfsgt	DotStar_Show@i& (0+255),b
  8602  00251C  D001               	goto	l3617
  8603  00251E  D083               	goto	l3625
  8604  002520                     l3617:
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;Pattern_DotStarLED.c: 64: PixelFrames[i] = (0xe0000000 | ((uint32_t)*Brightness<<24) | 
      +                          *(patternPointer+(i-1)));
  8608  002520  0EFE               	movlw	254
  8609  002522  0100               	movlb	0	; () banked
  8610  002524  6FA7               	movwf	??_DotStar_Show& (0+255),b
  8611  002526  0EFF               	movlw	255
  8612  002528  0100               	movlb	0	; () banked
  8613  00252A  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  8614  00252C  0100               	movlb	0	; () banked
  8615  00252E  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8616  002530  0100               	movlb	0	; () banked
  8617  002532  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  8618  002534  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  8619  002536  90D8               	bcf	status,0,c
  8620  002538  0100               	movlb	0	; () banked
  8621  00253A  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  8622  00253C  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  8623  00253E  0100               	movlb	0	; () banked
  8624  002540  51A7               	movf	??_DotStar_Show& (0+255),w,b
  8625  002542  0100               	movlb	0	; () banked
  8626  002544  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  8627  002546  0100               	movlb	0	; () banked
  8628  002548  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  8629  00254A  0100               	movlb	0	; () banked
  8630  00254C  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  8631  00254E  0100               	movlb	0	; () banked
  8632  002550  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  8633  002552  0100               	movlb	0	; () banked
  8634  002554  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  8635  002556  6ED9               	movwf	fsr2l,c
  8636  002558  0100               	movlb	0	; () banked
  8637  00255A  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  8638  00255C  0100               	movlb	0	; () banked
  8639  00255E  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  8640  002560  6EDA               	movwf	fsr2h,c
  8641  002562  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  8642  002566  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  8643  00256A  C0F0  FFD9         	movff	_Brightness,fsr2l
  8644  00256E  C0F1  FFDA         	movff	_Brightness+1,fsr2h
  8645  002572  50DF               	movf	indf2,w,c
  8646  002574  0100               	movlb	0	; () banked
  8647  002576  6FAD               	movwf	(??_DotStar_Show+6)& (0+255),b
  8648  002578  C0AD  F0AE         	movff	??_DotStar_Show+6,??_DotStar_Show+7
  8649  00257C  0100               	movlb	0	; () banked
  8650  00257E  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8651  002580  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8652  002582  6BB1               	clrf	(??_DotStar_Show+10)& (0+255),b
  8653  002584  C0AE  F0B1         	movff	??_DotStar_Show+7,??_DotStar_Show+10
  8654  002588  0100               	movlb	0	; () banked
  8655  00258A  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8656  00258C  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8657  00258E  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  8658  002590  0100               	movlb	0	; () banked
  8659  002592  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  8660  002594  0100               	movlb	0	; () banked
  8661  002596  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  8662  002598  0100               	movlb	0	; () banked
  8663  00259A  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  8664  00259C  0100               	movlb	0	; () banked
  8665  00259E  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  8666  0025A0  0100               	movlb	0	; () banked
  8667  0025A2  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  8668  0025A4  0100               	movlb	0	; () banked
  8669  0025A6  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  8670  0025A8  0E00               	movlw	0
  8671  0025AA  0100               	movlb	0	; () banked
  8672  0025AC  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  8673  0025AE  0100               	movlb	0	; () banked
  8674  0025B0  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  8675  0025B2  0E00               	movlw	0
  8676  0025B4  0100               	movlb	0	; () banked
  8677  0025B6  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  8678  0025B8  0100               	movlb	0	; () banked
  8679  0025BA  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  8680  0025BC  0E00               	movlw	0
  8681  0025BE  0100               	movlb	0	; () banked
  8682  0025C0  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  8683  0025C2  0100               	movlb	0	; () banked
  8684  0025C4  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  8685  0025C6  0E00               	movlw	0
  8686  0025C8  0100               	movlb	0	; () banked
  8687  0025CA  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  8688  0025CC  0100               	movlb	0	; () banked
  8689  0025CE  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  8690  0025D0  0E00               	movlw	0
  8691  0025D2  0100               	movlb	0	; () banked
  8692  0025D4  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  8693  0025D6  0100               	movlb	0	; () banked
  8694  0025D8  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  8695  0025DA  0EE0               	movlw	224
  8696  0025DC  0100               	movlb	0	; () banked
  8697  0025DE  11B5               	iorwf	(??_DotStar_Show+14)& (0+255),w,b
  8698  0025E0  0100               	movlb	0	; () banked
  8699  0025E2  6FB9               	movwf	(??_DotStar_Show+18)& (0+255),b
  8700  0025E4  0100               	movlb	0	; () banked
  8701  0025E6  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8702  0025E8  0D04               	mullw	4
  8703  0025EA  0EC4               	movlw	low _PixelFrames
  8704  0025EC  24F3               	addwf	prodl,w,c
  8705  0025EE  6ED9               	movwf	fsr2l,c
  8706  0025F0  0E01               	movlw	high _PixelFrames
  8707  0025F2  20F4               	addwfc	prodh,w,c
  8708  0025F4  6EDA               	movwf	fsr2h,c
  8709  0025F6  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  8710  0025FA  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  8711  0025FE  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  8712  002602  C0B9  FFDE         	movff	??_DotStar_Show+18,postinc2
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;Pattern_DotStarLED.c: 68: HSV_to_RGB(PixelFrames+i);
  8716  002606  0100               	movlb	0	; () banked
  8717  002608  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8718  00260A  0D04               	mullw	4
  8719  00260C  0EC4               	movlw	low _PixelFrames
  8720  00260E  24F3               	addwf	prodl,w,c
  8721  002610  0100               	movlb	0	; () banked
  8722  002612  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  8723  002614  0E01               	movlw	high _PixelFrames
  8724  002616  20F4               	addwfc	prodh,w,c
  8725  002618  0100               	movlb	0	; () banked
  8726  00261A  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  8727  00261C  EC94  F007         	call	_HSV_to_RGB	;wreg free
  8728  002620  0100               	movlb	0	; () banked
  8729  002622  2BBA               	incf	DotStar_Show@i& (0+255),f,b
  8730  002624  D778               	goto	l3613
  8731  002626                     l3625:
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;Pattern_DotStarLED.c: 75: }
  8735                           ;Pattern_DotStarLED.c: 78: SPI32_TransmitFrames(PixelFrames,76+3);
  8736  002626  0EC4               	movlw	low _PixelFrames
  8737  002628  0100               	movlb	0	; () banked
  8738  00262A  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  8739  00262C  0E01               	movlw	high _PixelFrames
  8740  00262E  0100               	movlb	0	; () banked
  8741  002630  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  8742  002632  0E4F               	movlw	79
  8743  002634  0100               	movlb	0	; () banked
  8744  002636  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  8745  002638  ECE9  F01C         	call	_SPI32_TransmitFrames	;wreg free
  8746  00263C  0012               	return		;funcret
  8747  00263E                     __end_of_DotStar_Show:
  8748                           	opt stack 0
  8749                           tosu	equ	0xFFF
  8750                           tosh	equ	0xFFE
  8751                           tosl	equ	0xFFD
  8752                           pclath	equ	0xFFA
  8753                           tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodh	equ	0xFF4
  8758                           prodl	equ	0xFF3
  8759                           postinc0	equ	0xFEE
  8760                           wreg	equ	0xFE8
  8761                           postdec1	equ	0xFE5
  8762                           fsr1h	equ	0xFE2
  8763                           fsr1l	equ	0xFE1
  8764                           indf2	equ	0xFDF
  8765                           postinc2	equ	0xFDE
  8766                           postdec2	equ	0xFDD
  8767                           plusw2	equ	0xFDB
  8768                           fsr2h	equ	0xFDA
  8769                           fsr2l	equ	0xFD9
  8770                           status	equ	0xFD8
  8771                           
  8772 ;; *************** function _SPI32_TransmitFrames *****************
  8773 ;; Defined at:
  8774 ;;		line 239 in file "SPI32_ControlService.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  8777 ;;		 -> PixelFrames(316), 
  8778 ;;  numFrames       1   34[BANK0 ] unsigned char 
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8790 ;;      Params:         0       3       0       0
  8791 ;;      Locals:         0       3       0       0
  8792 ;;      Temps:          0       0       0       0
  8793 ;;      Totals:         0       6       0       0
  8794 ;;Total ram usage:        6 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:   11
  8797 ;; This function calls:
  8798 ;;		_PostSPI32ControlService
  8799 ;; This function is called by:
  8800 ;;		_DotStar_Show
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           	psect	text27
  8805  0039D2                     __ptext27:
  8806                           	opt stack 0
  8807  0039D2                     _SPI32_TransmitFrames:
  8808                           	opt stack 15
  8809                           
  8810                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  8811                           
  8812                           ;incstack = 0
  8813  0039D2  0100               	movlb	0	; () banked
  8814  0039D4  05E2               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  8815  0039D6  A4D8               	btfss	status,2,c
  8816  0039D8  0012               	return	
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  8820  0039DA  0E00               	movlw	0
  8821  0039DC  0100               	movlb	0	; () banked
  8822  0039DE  6FE5               	movwf	_FrameIndex& (0+255),b
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  8826  0039E0  C080  F0D7         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  8827  0039E4  C081  F0D8         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  8831  0039E8  C082  F0E7         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  8835                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  8836  0039EC  0E08               	movlw	8
  8837  0039EE  0100               	movlb	0	; () banked
  8838  0039F0  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  8842  0039F2  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  8843  0039F6  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  8844  0039FA  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  8845  0039FE  EC84  F01D         	call	_PostSPI32ControlService	;wreg free
  8846  003A02  0012               	return	
  8847  003A04                     __end_of_SPI32_TransmitFrames:
  8848                           	opt stack 0
  8849                           tosu	equ	0xFFF
  8850                           tosh	equ	0xFFE
  8851                           tosl	equ	0xFFD
  8852                           pclath	equ	0xFFA
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           postdec1	equ	0xFE5
  8862                           fsr1h	equ	0xFE2
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           plusw2	equ	0xFDB
  8868                           fsr2h	equ	0xFDA
  8869                           fsr2l	equ	0xFD9
  8870                           status	equ	0xFD8
  8871                           
  8872 ;; *************** function _PostPatternControlService *****************
  8873 ;; Defined at:
  8874 ;;		line 137 in file "Pattern_ControlService.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;		None
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  1    wreg      unsigned char 
  8881 ;; Registers used:
  8882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8888 ;;      Params:         0       3       0       0
  8889 ;;      Locals:         0       0       0       0
  8890 ;;      Temps:          0       0       0       0
  8891 ;;      Totals:         0       3       0       0
  8892 ;;Total ram usage:        3 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:   10
  8895 ;; This function calls:
  8896 ;;		_ES_PostToService
  8897 ;; This function is called by:
  8898 ;;		_RunPatternControlService
  8899 ;;		_ES_Timer_Tick_Resp
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           	psect	text28
  8904  003AEC                     __ptext28:
  8905                           	opt stack 0
  8906  003AEC                     _PostPatternControlService:
  8907                           	opt stack 0
  8908                           
  8909                           ;Skip over the trampoline to the duplicate function for level 2
  8910  003AEC  B256               	btfsc	btemp,1,c
  8911  003AEE  EFDC  F01D         	goto	i2_PostPatternControlService
  8912  003AF2                     _PostPatternControlService$intlevel0:
  8913                           	opt stack 17
  8914                           
  8915                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
  8916                           ;	Return value of _PostPatternControlService is never used
  8917                           
  8918                           ;incstack = 0
  8919  003AF2  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  8920  003AF6  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8921  003AFA  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8922  003AFE  0100               	movlb	0	; () banked
  8923  003B00  51E6               	movf	_MyPriority& (0+255),w,b
  8924  003B02  ECA0  F01A         	call	_ES_PostToService
  8925  003B06  0012               	return	
  8926  003B08                     __end_of_PostPatternControlService:
  8927                           	opt stack 0
  8928                           tosu	equ	0xFFF
  8929                           tosh	equ	0xFFE
  8930                           tosl	equ	0xFFD
  8931                           pclath	equ	0xFFA
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           postinc0	equ	0xFEE
  8939                           wreg	equ	0xFE8
  8940                           postdec1	equ	0xFE5
  8941                           fsr1h	equ	0xFE2
  8942                           fsr1l	equ	0xFE1
  8943                           indf2	equ	0xFDF
  8944                           postinc2	equ	0xFDE
  8945                           postdec2	equ	0xFDD
  8946                           plusw2	equ	0xFDB
  8947                           fsr2h	equ	0xFDA
  8948                           fsr2l	equ	0xFD9
  8949                           status	equ	0xFD8
  8950                           
  8951 ;; *************** function _PostSPI32ControlService *****************
  8952 ;; Defined at:
  8953 ;;		line 117 in file "SPI32_ControlService.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;		None
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  1    wreg      unsigned char 
  8960 ;; Registers used:
  8961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8967 ;;      Params:         0       3       0       0
  8968 ;;      Locals:         0       0       0       0
  8969 ;;      Temps:          0       0       0       0
  8970 ;;      Totals:         0       3       0       0
  8971 ;;Total ram usage:        3 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:   10
  8974 ;; This function calls:
  8975 ;;		_ES_PostToService
  8976 ;; This function is called by:
  8977 ;;		_SPI32_TransmitFrames
  8978 ;;		_ES_Timer_Tick_Resp
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text29
  8983  003B08                     __ptext29:
  8984                           	opt stack 0
  8985  003B08                     _PostSPI32ControlService:
  8986                           	opt stack 0
  8987                           
  8988                           ;Skip over the trampoline to the duplicate function for level 2
  8989  003B08  B256               	btfsc	btemp,1,c
  8990  003B0A  EFD1  F01D         	goto	i2_PostSPI32ControlService
  8991  003B0E                     _PostSPI32ControlService$intlevel0:
  8992                           	opt stack 17
  8993                           
  8994                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  8995                           ;	Return value of _PostSPI32ControlService is never used
  8996                           
  8997                           ;incstack = 0
  8998  003B0E  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  8999  003B12  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  9000  003B16  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  9001  003B1A  0100               	movlb	0	; () banked
  9002  003B1C  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  9003  003B1E  ECA0  F01A         	call	_ES_PostToService
  9004  003B22  0012               	return	
  9005  003B24                     __end_of_PostSPI32ControlService:
  9006                           	opt stack 0
  9007                           tosu	equ	0xFFF
  9008                           tosh	equ	0xFFE
  9009                           tosl	equ	0xFFD
  9010                           pclath	equ	0xFFA
  9011                           tblptru	equ	0xFF8
  9012                           tblptrh	equ	0xFF7
  9013                           tblptrl	equ	0xFF6
  9014                           tablat	equ	0xFF5
  9015                           prodh	equ	0xFF4
  9016                           prodl	equ	0xFF3
  9017                           postinc0	equ	0xFEE
  9018                           wreg	equ	0xFE8
  9019                           postdec1	equ	0xFE5
  9020                           fsr1h	equ	0xFE2
  9021                           fsr1l	equ	0xFE1
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           plusw2	equ	0xFDB
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030 ;; *************** function _HSV_to_RGB *****************
  9031 ;; Defined at:
  9032 ;;		line 49 in file "Pattern_HSV_Convert.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  9035 ;;		 -> PixelFrames(316), 
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;  v               2   67[BANK0 ] unsigned int 
  9038 ;;  p               2   65[BANK0 ] unsigned int 
  9039 ;;  s               2   63[BANK0 ] unsigned int 
  9040 ;;  t               2   59[BANK0 ] unsigned int 
  9041 ;;  q               2   57[BANK0 ] unsigned int 
  9042 ;;  b               2   55[BANK0 ] unsigned int 
  9043 ;;  g               2   53[BANK0 ] unsigned int 
  9044 ;;  r               2   51[BANK0 ] unsigned int 
  9045 ;;  fpart           2   49[BANK0 ] unsigned int 
  9046 ;;  region          2   47[BANK0 ] unsigned int 
  9047 ;;  h               2   45[BANK0 ] unsigned int 
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  1    wreg      void 
  9050 ;; Registers used:
  9051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9057 ;;      Params:         0       2       0       0
  9058 ;;      Locals:         0      24       0       0
  9059 ;;      Temps:          0      24       0       0
  9060 ;;      Totals:         0      50       0       0
  9061 ;;Total ram usage:       50 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    8
  9064 ;; This function calls:
  9065 ;;		___lwdiv
  9066 ;;		___wmul
  9067 ;; This function is called by:
  9068 ;;		_DotStar_Show
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text30
  9073  000F28                     __ptext30:
  9074                           	opt stack 0
  9075  000F28                     _HSV_to_RGB:
  9076                           	opt stack 18
  9077                           
  9078                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  9079                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  9080                           
  9081                           ;incstack = 0
  9082  000F28  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9083  000F2C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9084  000F30  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9085  000F34  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  9086  000F38  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  9087  000F3C  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  9088  000F40  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  9089  000F44  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  9090  000F48  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  9091  000F4C  0100               	movlb	0	; () banked
  9092  000F4E  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9093  000F50  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  9094  000F54  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  9098  000F58  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9099  000F5C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9100  000F60  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9101  000F64  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9102  000F68  0EF0               	movlw	240
  9103  000F6A  0100               	movlb	0	; () banked
  9104  000F6C  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9105  000F6E  0100               	movlb	0	; () banked
  9106  000F70  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  9107  000F72  0100               	movlb	0	; () banked
  9108  000F74  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  9112  000F76  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9113  000F7A  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9114  000F7E  0E04               	movlw	4
  9115  000F80  0100               	movlb	0	; () banked
  9116  000F82  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  9117  000F84                     u1905:
  9118  000F84  0100               	movlb	0	; () banked
  9119  000F86  90D8               	bcf	status,0,c
  9120  000F88  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  9121  000F8A  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  9122  000F8C  0100               	movlb	0	; () banked
  9123  000F8E  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  9124  000F90  D7F9               	goto	u1905
  9125  000F92  0100               	movlb	0	; () banked
  9126  000F94  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9127  000F96  0100               	movlb	0	; () banked
  9128  000F98  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  9129  000F9A  0100               	movlb	0	; () banked
  9130  000F9C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9131  000F9E  0100               	movlb	0	; () banked
  9132  000FA0  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  9136  000FA2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9137  000FA6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9138  000FAA  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9139  000FAE  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9140  000FB2  0E0F               	movlw	15
  9141  000FB4  0100               	movlb	0	; () banked
  9142  000FB6  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9143  000FB8  0100               	movlb	0	; () banked
  9144  000FBA  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  9145  000FBC  0100               	movlb	0	; () banked
  9146  000FBE  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  9150  000FC0  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  9151  000FC4  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  9152  000FC8  0100               	movlb	0	; () banked
  9153  000FCA  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  9154  000FCC  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  9155  000FCE  0EF0               	movlw	240
  9156  000FD0  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9157  000FD2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9158  000FD4  0B0F               	andlw	15
  9159  000FD6  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9160  000FD8  0EF0               	movlw	240
  9161  000FDA  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  9162  000FDC  0100               	movlb	0	; () banked
  9163  000FDE  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9164  000FE0  0100               	movlb	0	; () banked
  9165  000FE2  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  9166  000FE4  0100               	movlb	0	; () banked
  9167  000FE6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9168  000FE8  0100               	movlb	0	; () banked
  9169  000FEA  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  9173  000FEC  0100               	movlb	0	; () banked
  9174  000FEE  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  9175  000FF0  0100               	movlb	0	; () banked
  9176  000FF2  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  9177  000FF4  A4D8               	btfss	status,2,c
  9178  000FF6  D00D               	goto	l3129
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  9182  000FF8  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9183  000FFC  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9184  001000  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  9185  001004  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  9186  001008  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  9187  00100C  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  9188                           
  9189                           ;Pattern_HSV_Convert.c: 61: }
  9190  001010  D129               	goto	l3149
  9191  001012                     l3129:
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;Pattern_HSV_Convert.c: 63: else{
  9195                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  9196  001012  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  9197  001016  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  9198  00101A  0E00               	movlw	0
  9199  00101C  0100               	movlb	0	; () banked
  9200  00101E  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9201  001020  0E2B               	movlw	43
  9202  001022  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  9203  001024  EC64  F01A         	call	___lwdiv	;wreg free
  9204  001028  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  9205  00102C  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  9206                           
  9207                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  9208  001030  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  9209  001034  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  9210  001038  0E00               	movlw	0
  9211  00103A  0100               	movlb	0	; () banked
  9212  00103C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9213  00103E  0E2B               	movlw	43
  9214  001040  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9215  001042  ECB4  F01C         	call	___wmul	;wreg free
  9216  001046  0100               	movlb	0	; () banked
  9217  001048  1F66               	comf	?___wmul& (0+255),f,b
  9218  00104A  0100               	movlb	0	; () banked
  9219  00104C  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9220  00104E  0100               	movlb	0	; () banked
  9221  001050  4B66               	infsnz	?___wmul& (0+255),f,b
  9222  001052  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9223  001054  0100               	movlb	0	; () banked
  9224  001056  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  9225  001058  0100               	movlb	0	; () banked
  9226  00105A  2566               	addwf	?___wmul& (0+255),w,b
  9227  00105C  0100               	movlb	0	; () banked
  9228  00105E  6F9D               	movwf	_HSV_to_RGB$1969& (0+255),b
  9229  001060  0100               	movlb	0	; () banked
  9230  001062  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  9231  001064  0100               	movlb	0	; () banked
  9232  001066  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9233  001068  0100               	movlb	0	; () banked
  9234  00106A  6F9E               	movwf	(_HSV_to_RGB$1969+1)& (0+255),b
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  9238  00106C  C09D  F066         	movff	_HSV_to_RGB$1969,___wmul@multiplier
  9239  001070  C09E  F067         	movff	_HSV_to_RGB$1969+1,___wmul@multiplier+1
  9240  001074  0E00               	movlw	0
  9241  001076  0100               	movlb	0	; () banked
  9242  001078  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9243  00107A  0E06               	movlw	6
  9244  00107C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9245  00107E  ECB4  F01C         	call	___wmul	;wreg free
  9246  001082  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  9247  001086  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  9248                           
  9249                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  9250  00108A  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9251  00108E  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9252  001092  0100               	movlb	0	; () banked
  9253  001094  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9254  001096  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9255  001098  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9256  00109A  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9257  00109C  0EFF               	movlw	255
  9258  00109E  0100               	movlb	0	; () banked
  9259  0010A0  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9260  0010A2  0100               	movlb	0	; () banked
  9261  0010A4  6F66               	movwf	___wmul@multiplier& (0+255),b
  9262  0010A6  0E00               	movlw	0
  9263  0010A8  0100               	movlb	0	; () banked
  9264  0010AA  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9265  0010AC  0100               	movlb	0	; () banked
  9266  0010AE  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9267  0010B0  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9268  0010B4  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9269  0010B8  ECB4  F01C         	call	___wmul	;wreg free
  9270  0010BC  0100               	movlb	0	; () banked
  9271  0010BE  5167               	movf	(?___wmul+1)& (0+255),w,b
  9272  0010C0  0100               	movlb	0	; () banked
  9273  0010C2  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  9274  0010C4  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9278  0010C6  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  9279  0010CA  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  9280  0010CE  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  9281  0010D2  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  9282  0010D6  ECB4  F01C         	call	___wmul	;wreg free
  9283  0010DA  0100               	movlb	0	; () banked
  9284  0010DC  C067  F066         	movff	?___wmul+1,?___wmul
  9285  0010E0  0100               	movlb	0	; () banked
  9286  0010E2  6B67               	clrf	(?___wmul+1)& (0+255),b
  9287  0010E4  0100               	movlb	0	; () banked
  9288  0010E6  1F66               	comf	?___wmul& (0+255),f,b
  9289  0010E8  0100               	movlb	0	; () banked
  9290  0010EA  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9291  0010EC  0100               	movlb	0	; () banked
  9292  0010EE  4B66               	infsnz	?___wmul& (0+255),f,b
  9293  0010F0  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9294  0010F2  0EFF               	movlw	255
  9295  0010F4  0100               	movlb	0	; () banked
  9296  0010F6  2566               	addwf	?___wmul& (0+255),w,b
  9297  0010F8  0100               	movlb	0	; () banked
  9298  0010FA  6F9D               	movwf	_HSV_to_RGB$1969& (0+255),b
  9299  0010FC  0E00               	movlw	0
  9300  0010FE  0100               	movlb	0	; () banked
  9301  001100  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9302  001102  0100               	movlb	0	; () banked
  9303  001104  6F9E               	movwf	(_HSV_to_RGB$1969+1)& (0+255),b
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9307  001106  C09D  F066         	movff	_HSV_to_RGB$1969,___wmul@multiplier
  9308  00110A  C09E  F067         	movff	_HSV_to_RGB$1969+1,___wmul@multiplier+1
  9309  00110E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9310  001112  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9311  001116  ECB4  F01C         	call	___wmul	;wreg free
  9312  00111A  0100               	movlb	0	; () banked
  9313  00111C  5167               	movf	(?___wmul+1)& (0+255),w,b
  9314  00111E  0100               	movlb	0	; () banked
  9315  001120  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  9316  001122  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9320  001124  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  9321  001128  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  9322  00112C  0100               	movlb	0	; () banked
  9323  00112E  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9324  001130  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9325  001132  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9326  001134  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9327  001136  0EFF               	movlw	255
  9328  001138  0100               	movlb	0	; () banked
  9329  00113A  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9330  00113C  0100               	movlb	0	; () banked
  9331  00113E  6F66               	movwf	___wmul@multiplier& (0+255),b
  9332  001140  0E00               	movlw	0
  9333  001142  0100               	movlb	0	; () banked
  9334  001144  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9335  001146  0100               	movlb	0	; () banked
  9336  001148  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9337  00114A  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  9338  00114E  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  9339  001152  ECB4  F01C         	call	___wmul	;wreg free
  9340  001156  0100               	movlb	0	; () banked
  9341  001158  C067  F066         	movff	?___wmul+1,?___wmul
  9342  00115C  0100               	movlb	0	; () banked
  9343  00115E  6B67               	clrf	(?___wmul+1)& (0+255),b
  9344  001160  0100               	movlb	0	; () banked
  9345  001162  1F66               	comf	?___wmul& (0+255),f,b
  9346  001164  0100               	movlb	0	; () banked
  9347  001166  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9348  001168  0100               	movlb	0	; () banked
  9349  00116A  4B66               	infsnz	?___wmul& (0+255),f,b
  9350  00116C  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9351  00116E  0EFF               	movlw	255
  9352  001170  0100               	movlb	0	; () banked
  9353  001172  2566               	addwf	?___wmul& (0+255),w,b
  9354  001174  0100               	movlb	0	; () banked
  9355  001176  6F9D               	movwf	_HSV_to_RGB$1969& (0+255),b
  9356  001178  0E00               	movlw	0
  9357  00117A  0100               	movlb	0	; () banked
  9358  00117C  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9359  00117E  0100               	movlb	0	; () banked
  9360  001180  6F9E               	movwf	(_HSV_to_RGB$1969+1)& (0+255),b
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9364  001182  C09D  F066         	movff	_HSV_to_RGB$1969,___wmul@multiplier
  9365  001186  C09E  F067         	movff	_HSV_to_RGB$1969+1,___wmul@multiplier+1
  9366  00118A  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9367  00118E  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9368  001192  ECB4  F01C         	call	___wmul	;wreg free
  9369  001196  0100               	movlb	0	; () banked
  9370  001198  5167               	movf	(?___wmul+1)& (0+255),w,b
  9371  00119A  0100               	movlb	0	; () banked
  9372  00119C  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  9373  00119E  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  9374                           
  9375                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  9376  0011A0  D046               	goto	l3147
  9377  0011A2                     l491:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  9381  0011A2  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9382  0011A6  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9383  0011AA  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  9384  0011AE  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  9385  0011B2  D008               	goto	L18
  9386  0011B4                     l493:
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  9390  0011B4  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  9391  0011B8  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  9392  0011BC  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9393  0011C0  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9394  0011C4                     L18:
  9395  0011C4  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  9396  0011C8  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  9397  0011CC  D04B               	goto	l3149
  9398  0011CE                     l494:
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  9402  0011CE  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9403  0011D2  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9404  0011D6  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9405  0011DA  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9406  0011DE  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  9407  0011E2  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  9408  0011E6  D03E               	goto	l3149
  9409  0011E8                     l495:
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  9413  0011E8  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9414  0011EC  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9415  0011F0  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  9416  0011F4  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  9417  0011F8  D008               	goto	L19
  9418  0011FA                     l496:
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  9422  0011FA  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  9423  0011FE  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  9424  001202  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9425  001206  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9426  00120A                     L19:
  9427  00120A  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9428  00120E  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9429  001212  D028               	goto	l3149
  9430  001214                     l497:
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  9434  001214  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9435  001218  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9436  00121C  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9437  001220  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9438  001224  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  9439  001228  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;Pattern_HSV_Convert.c: 88: }
  9443  00122C  D01B               	goto	l3149
  9444  00122E                     l3147:
  9445                           
  9446                           ; BSR set to: 0
  9447  00122E  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  9448  001232  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  9449                           
  9450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9451                           ; Switch size 1, requested type "space"
  9452                           ; Number of cases is 1, Range of values is 0 to 0
  9453                           ; switch strategies available:
  9454                           ; Name         Instructions Cycles
  9455                           ; simple_byte            4     3 (average)
  9456                           ;	Chosen strategy is simple_byte
  9457  001236  0100               	movlb	0	; () banked
  9458  001238  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9459  00123A  0A00               	xorlw	0	; case 0
  9460  00123C  A4D8               	btfss	status,2,c
  9461  00123E  D7EA               	goto	l497
  9462                           
  9463                           ; BSR set to: 0
  9464                           ; Switch size 1, requested type "space"
  9465                           ; Number of cases is 5, Range of values is 0 to 4
  9466                           ; switch strategies available:
  9467                           ; Name         Instructions Cycles
  9468                           ; simple_byte           16     9 (average)
  9469                           ;	Chosen strategy is simple_byte
  9470  001240  0100               	movlb	0	; () banked
  9471  001242  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9472  001244  0A00               	xorlw	0	; case 0
  9473  001246  B4D8               	btfsc	status,2,c
  9474  001248  D7AC               	goto	l491
  9475  00124A  0A01               	xorlw	1	; case 1
  9476  00124C  B4D8               	btfsc	status,2,c
  9477  00124E  D7B2               	goto	l493
  9478  001250  0A03               	xorlw	3	; case 2
  9479  001252  B4D8               	btfsc	status,2,c
  9480  001254  D7BC               	goto	l494
  9481  001256  0A01               	xorlw	1	; case 3
  9482  001258  B4D8               	btfsc	status,2,c
  9483  00125A  D7C6               	goto	l495
  9484  00125C  0A07               	xorlw	7	; case 4
  9485  00125E  B4D8               	btfsc	status,2,c
  9486  001260  D7CC               	goto	l496
  9487  001262  D7D8               	goto	l497
  9488  001264                     l3149:
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;Pattern_HSV_Convert.c: 89: }
  9492                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  9493  001264  0100               	movlb	0	; () banked
  9494  001266  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  9495  001268  0100               	movlb	0	; () banked
  9496  00126A  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  9497  00126C  0100               	movlb	0	; () banked
  9498  00126E  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  9499  001270  0100               	movlb	0	; () banked
  9500  001272  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  9501  001274  0100               	movlb	0	; () banked
  9502  001276  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  9503  001278  0100               	movlb	0	; () banked
  9504  00127A  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9505  00127C  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  9506  001280  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  9507  001284  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  9508  001288  0100               	movlb	0	; () banked
  9509  00128A  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  9510  00128C  0100               	movlb	0	; () banked
  9511  00128E  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  9512  001290  0100               	movlb	0	; () banked
  9513  001292  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  9514  001294  0100               	movlb	0	; () banked
  9515  001296  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  9516  001298  0100               	movlb	0	; () banked
  9517  00129A  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  9518  00129C  0100               	movlb	0	; () banked
  9519  00129E  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  9520  0012A0  0100               	movlb	0	; () banked
  9521  0012A2  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  9522  0012A4  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  9523  0012A8  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  9524  0012AC  0100               	movlb	0	; () banked
  9525  0012AE  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  9526  0012B0  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  9527  0012B2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9528  0012B6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9529  0012BA  0E00               	movlw	0
  9530  0012BC  14DE               	andwf	postinc2,w,c
  9531  0012BE  0100               	movlb	0	; () banked
  9532  0012C0  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  9533  0012C2  0E00               	movlw	0
  9534  0012C4  14DE               	andwf	postinc2,w,c
  9535  0012C6  0100               	movlb	0	; () banked
  9536  0012C8  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  9537  0012CA  0E00               	movlw	0
  9538  0012CC  14DE               	andwf	postinc2,w,c
  9539  0012CE  0100               	movlb	0	; () banked
  9540  0012D0  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  9541  0012D2  0EFF               	movlw	255
  9542  0012D4  14DE               	andwf	postinc2,w,c
  9543  0012D6  0100               	movlb	0	; () banked
  9544  0012D8  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  9545  0012DA  0100               	movlb	0	; () banked
  9546  0012DC  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  9547  0012DE  0100               	movlb	0	; () banked
  9548  0012E0  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  9549  0012E2  0100               	movlb	0	; () banked
  9550  0012E4  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  9551  0012E6  0100               	movlb	0	; () banked
  9552  0012E8  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  9553  0012EA  0100               	movlb	0	; () banked
  9554  0012EC  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  9555  0012EE  0100               	movlb	0	; () banked
  9556  0012F0  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  9557  0012F2  0100               	movlb	0	; () banked
  9558  0012F4  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  9559  0012F6  0100               	movlb	0	; () banked
  9560  0012F8  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  9561  0012FA  0100               	movlb	0	; () banked
  9562  0012FC  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  9563  0012FE  0100               	movlb	0	; () banked
  9564  001300  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  9565  001302  0100               	movlb	0	; () banked
  9566  001304  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  9567  001306  0100               	movlb	0	; () banked
  9568  001308  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  9569  00130A  0100               	movlb	0	; () banked
  9570  00130C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9571  00130E  0100               	movlb	0	; () banked
  9572  001310  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  9573  001312  0100               	movlb	0	; () banked
  9574  001314  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  9575  001316  0100               	movlb	0	; () banked
  9576  001318  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9577  00131A  0100               	movlb	0	; () banked
  9578  00131C  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  9579  00131E  0100               	movlb	0	; () banked
  9580  001320  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  9581  001322  0100               	movlb	0	; () banked
  9582  001324  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  9583  001326  0100               	movlb	0	; () banked
  9584  001328  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  9585  00132A  0100               	movlb	0	; () banked
  9586  00132C  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  9587  00132E  0100               	movlb	0	; () banked
  9588  001330  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  9589  001332  0100               	movlb	0	; () banked
  9590  001334  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  9591  001336  0100               	movlb	0	; () banked
  9592  001338  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  9593  00133A  0100               	movlb	0	; () banked
  9594  00133C  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  9595  00133E  0100               	movlb	0	; () banked
  9596  001340  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  9597  001342  0100               	movlb	0	; () banked
  9598  001344  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  9599  001346  0100               	movlb	0	; () banked
  9600  001348  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  9601  00134A  0100               	movlb	0	; () banked
  9602  00134C  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  9603  00134E  0100               	movlb	0	; () banked
  9604  001350  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  9605  001352  0E00               	movlw	0
  9606  001354  0100               	movlb	0	; () banked
  9607  001356  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  9608  001358  0100               	movlb	0	; () banked
  9609  00135A  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  9610  00135C  0E00               	movlw	0
  9611  00135E  0100               	movlb	0	; () banked
  9612  001360  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  9613  001362  0100               	movlb	0	; () banked
  9614  001364  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  9615  001366  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9616  00136A  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9617  00136E  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  9618  001372  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  9619  001376  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  9620  00137A  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  9621  00137E  0012               	return	
  9622  001380                     __end_of_HSV_to_RGB:
  9623                           	opt stack 0
  9624                           tosu	equ	0xFFF
  9625                           tosh	equ	0xFFE
  9626                           tosl	equ	0xFFD
  9627                           pclath	equ	0xFFA
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1h	equ	0xFE2
  9638                           fsr1l	equ	0xFE1
  9639                           indf2	equ	0xFDF
  9640                           postinc2	equ	0xFDE
  9641                           postdec2	equ	0xFDD
  9642                           plusw2	equ	0xFDB
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function ___lwdiv *****************
  9648 ;; Defined at:
  9649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  dividend        2   12[BANK0 ] unsigned int 
  9652 ;;  divisor         2   14[BANK0 ] unsigned int 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  quotient        2   16[BANK0 ] unsigned int 
  9655 ;;  counter         1   18[BANK0 ] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  2   12[BANK0 ] unsigned int 
  9658 ;; Registers used:
  9659 ;;		wreg, status,2, status,0
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9665 ;;      Params:         0       4       0       0
  9666 ;;      Locals:         0       3       0       0
  9667 ;;      Temps:          0       0       0       0
  9668 ;;      Totals:         0       7       0       0
  9669 ;;Total ram usage:        7 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    7
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_HSV_to_RGB
  9676 ;;		_HueTest
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text31
  9681  0034C8                     __ptext31:
  9682                           	opt stack 0
  9683  0034C8                     ___lwdiv:
  9684                           	opt stack 18
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;incstack = 0
  9688  0034C8  0E00               	movlw	0
  9689  0034CA  0100               	movlb	0	; () banked
  9690  0034CC  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9691  0034CE  0E00               	movlw	0
  9692  0034D0  6F70               	movwf	___lwdiv@quotient& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695  0034D2  0100               	movlb	0	; () banked
  9696  0034D4  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9697  0034D6  0100               	movlb	0	; () banked
  9698  0034D8  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9699  0034DA  B4D8               	btfsc	status,2,c
  9700  0034DC  D02C               	goto	l1261
  9701                           
  9702                           ; BSR set to: 0
  9703  0034DE  0E01               	movlw	1
  9704  0034E0  0100               	movlb	0	; () banked
  9705  0034E2  6F72               	movwf	___lwdiv@counter& (0+255),b
  9706  0034E4  D006               	goto	l3059
  9707  0034E6                     l3057:
  9708                           
  9709                           ; BSR set to: 0
  9710  0034E6  0100               	movlb	0	; () banked
  9711  0034E8  90D8               	bcf	status,0,c
  9712  0034EA  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  9713  0034EC  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9714  0034EE  0100               	movlb	0	; () banked
  9715  0034F0  2B72               	incf	___lwdiv@counter& (0+255),f,b
  9716  0034F2                     l3059:
  9717                           
  9718                           ; BSR set to: 0
  9719  0034F2  0100               	movlb	0	; () banked
  9720  0034F4  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9721  0034F6  D7F7               	goto	l3057
  9722  0034F8                     l3061:
  9723                           
  9724                           ; BSR set to: 0
  9725  0034F8  0100               	movlb	0	; () banked
  9726  0034FA  90D8               	bcf	status,0,c
  9727  0034FC  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  9728  0034FE  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9729                           
  9730                           ; BSR set to: 0
  9731  003500  0100               	movlb	0	; () banked
  9732  003502  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9733  003504  0100               	movlb	0	; () banked
  9734  003506  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  9735  003508  0100               	movlb	0	; () banked
  9736  00350A  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9737  00350C  0100               	movlb	0	; () banked
  9738  00350E  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9739  003510  A0D8               	btfss	status,0,c
  9740  003512  D00A               	goto	l3069
  9741                           
  9742                           ; BSR set to: 0
  9743  003514  0100               	movlb	0	; () banked
  9744  003516  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9745  003518  0100               	movlb	0	; () banked
  9746  00351A  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  9747  00351C  0100               	movlb	0	; () banked
  9748  00351E  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9749  003520  0100               	movlb	0	; () banked
  9750  003522  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9751                           
  9752                           ; BSR set to: 0
  9753  003524  0100               	movlb	0	; () banked
  9754  003526  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  9755  003528                     l3069:
  9756                           
  9757                           ; BSR set to: 0
  9758  003528  0100               	movlb	0	; () banked
  9759  00352A  90D8               	bcf	status,0,c
  9760  00352C  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9761  00352E  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  9762                           
  9763                           ; BSR set to: 0
  9764  003530  0100               	movlb	0	; () banked
  9765  003532  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  9766  003534  D7E1               	goto	l3061
  9767  003536                     l1261:
  9768                           
  9769                           ; BSR set to: 0
  9770  003536  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  9771  00353A  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9772                           
  9773                           ; BSR set to: 0
  9774  00353E  0012               	return		;funcret
  9775  003540                     __end_of___lwdiv:
  9776                           	opt stack 0
  9777                           tosu	equ	0xFFF
  9778                           tosh	equ	0xFFE
  9779                           tosl	equ	0xFFD
  9780                           pclath	equ	0xFFA
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           postinc0	equ	0xFEE
  9788                           wreg	equ	0xFE8
  9789                           postdec1	equ	0xFE5
  9790                           fsr1h	equ	0xFE2
  9791                           fsr1l	equ	0xFE1
  9792                           indf2	equ	0xFDF
  9793                           postinc2	equ	0xFDE
  9794                           postdec2	equ	0xFDD
  9795                           plusw2	equ	0xFDB
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           
  9800 ;; *************** function _PausePattern *****************
  9801 ;; Defined at:
  9802 ;;		line 281 in file "Pattern_ControlService.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;		None
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;		None
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  1    wreg      void 
  9809 ;; Registers used:
  9810 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9816 ;;      Params:         0       0       0       0
  9817 ;;      Locals:         0       0       0       0
  9818 ;;      Temps:          0       0       0       0
  9819 ;;      Totals:         0       0       0       0
  9820 ;;Total ram usage:        0 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    8
  9823 ;; This function calls:
  9824 ;;		_ES_Timer_StopTimer
  9825 ;; This function is called by:
  9826 ;;		_RunPatternControlService
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           	psect	text32
  9831  003C10                     __ptext32:
  9832                           	opt stack 0
  9833  003C10                     _PausePattern:
  9834                           	opt stack 20
  9835                           
  9836                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;incstack = 0
  9840  003C10  0E00               	movlw	0
  9841  003C12  ECCD  F01B         	call	_ES_Timer_StopTimer
  9842  003C16  0012               	return		;funcret
  9843  003C18                     __end_of_PausePattern:
  9844                           	opt stack 0
  9845                           tosu	equ	0xFFF
  9846                           tosh	equ	0xFFE
  9847                           tosl	equ	0xFFD
  9848                           pclath	equ	0xFFA
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           postinc0	equ	0xFEE
  9856                           wreg	equ	0xFE8
  9857                           postdec1	equ	0xFE5
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           plusw2	equ	0xFDB
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _ES_Timer_StopTimer *****************
  9869 ;; Defined at:
  9870 ;;		line 205 in file "ES_Timers.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  Num             1    wreg     unsigned char 
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;  Num             1    4[BANK0 ] unsigned char 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      enum E15472
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9884 ;;      Params:         0       0       0       0
  9885 ;;      Locals:         0       1       0       0
  9886 ;;      Temps:          0       4       0       0
  9887 ;;      Totals:         0       5       0       0
  9888 ;;Total ram usage:        5 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    7
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_StopPattern
  9895 ;;		_PausePattern
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text33
  9900  00379A                     __ptext33:
  9901                           	opt stack 0
  9902  00379A                     _ES_Timer_StopTimer:
  9903                           	opt stack 20
  9904                           
  9905                           ;incstack = 0
  9906                           ;ES_Timer_StopTimer@Num stored from wreg
  9907  00379A  0100               	movlb	0	; () banked
  9908  00379C  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  9909                           
  9910                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  9911  00379E  0E0F               	movlw	15
  9912  0037A0  0100               	movlb	0	; () banked
  9913  0037A2  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  9914  0037A4  D001               	goto	l3533
  9915  0037A6  0012               	return	
  9916  0037A8                     l3533:
  9917                           
  9918                           ; BSR set to: 0
  9919                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  9920  0037A8  0100               	movlb	0	; () banked
  9921  0037AA  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  9922  0037AC  0D02               	mullw	2
  9923  0037AE  0E01               	movlw	low _BitNum2SetMask
  9924  0037B0  24F3               	addwf	prodl,w,c
  9925  0037B2  6EF6               	movwf	tblptrl,c
  9926  0037B4  0E03               	movlw	high _BitNum2SetMask
  9927  0037B6  20F4               	addwfc	prodh,w,c
  9928  0037B8  6EF7               	movwf	tblptrh,c
  9929  0037BA                     	if	0	;There are less than 3 active tblptr bytes
  9930  0037BA                     	endif
  9931  0037BA  0009               	tblrd		*+
  9932  0037BC  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  9933  0037C0  0009               	tblrd		*+
  9934  0037C2  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  9935  0037C6  0100               	movlb	0	; () banked
  9936  0037C8  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  9937  0037CA  0100               	movlb	0	; () banked
  9938  0037CC  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  9939  0037CE  0100               	movlb	0	; () banked
  9940  0037D0  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  9941  0037D2  0100               	movlb	0	; () banked
  9942  0037D4  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  9943  0037D6  0100               	movlb	0	; () banked
  9944  0037D8  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  9945  0037DA  0100               	movlb	0	; () banked
  9946  0037DC  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
  9947  0037DE  0100               	movlb	0	; () banked
  9948  0037E0  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  9949  0037E2  0100               	movlb	0	; () banked
  9950  0037E4  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  9951  0037E6  0012               	return	
  9952  0037E8                     __end_of_ES_Timer_StopTimer:
  9953                           	opt stack 0
  9954                           tosu	equ	0xFFF
  9955                           tosh	equ	0xFFE
  9956                           tosl	equ	0xFFD
  9957                           pclath	equ	0xFFA
  9958                           tblptru	equ	0xFF8
  9959                           tblptrh	equ	0xFF7
  9960                           tblptrl	equ	0xFF6
  9961                           tablat	equ	0xFF5
  9962                           prodh	equ	0xFF4
  9963                           prodl	equ	0xFF3
  9964                           postinc0	equ	0xFEE
  9965                           wreg	equ	0xFE8
  9966                           postdec1	equ	0xFE5
  9967                           fsr1h	equ	0xFE2
  9968                           fsr1l	equ	0xFE1
  9969                           indf2	equ	0xFDF
  9970                           postinc2	equ	0xFDE
  9971                           postdec2	equ	0xFDD
  9972                           plusw2	equ	0xFDB
  9973                           fsr2h	equ	0xFDA
  9974                           fsr2l	equ	0xFD9
  9975                           status	equ	0xFD8
  9976                           
  9977 ;; *************** function _ES_DeQueue *****************
  9978 ;; Defined at:
  9979 ;;		line 164 in file "ES_Queue.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  9982 ;;		 -> Queue1(12), Queue0(12), 
  9983 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  9984 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  9987 ;;		 -> Queue1(12), Queue0(12), 
  9988 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  9989 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  1    wreg      unsigned char 
  9992 ;; Registers used:
  9993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9999 ;;      Params:         0       4       0       0
 10000 ;;      Locals:         0       4       0       0
 10001 ;;      Temps:          0       2       0       0
 10002 ;;      Totals:         0      10       0       0
 10003 ;;Total ram usage:       10 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    8
 10006 ;; This function calls:
 10007 ;;		___lbmod
 10008 ;;		___wmul
 10009 ;; This function is called by:
 10010 ;;		_ES_Run
 10011 ;;		_ES_RecallEvents
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text34
 10016  00263E                     __ptext34:
 10017                           	opt stack 0
 10018  00263E                     _ES_DeQueue:
 10019                           	opt stack 21
 10020                           
 10021                           ;ES_Queue.c: 166: unsigned char SaveCrit;
 10022                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
 10023                           ;ES_Queue.c: 168: uint8_t NumLeft;
 10024                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;incstack = 0
 10028  00263E  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
 10029  002642  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
 10030                           
 10031                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
 10032  002646  0100               	movlb	0	; () banked
 10033  002648  EE20 F002          	lfsr	2,2
 10034  00264C  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10035  00264E  26D9               	addwf	fsr2l,f,c
 10036  002650  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10037  002652  22DA               	addwfc	fsr2h,f,c
 10038  002654  50DF               	movf	indf2,w,c
 10039  002656  B4D8               	btfsc	status,2,c
 10040  002658  D06F               	goto	l3859
 10041                           
 10042                           ; BSR set to: 0
 10043                           
 10044                           ;ES_Queue.c: 172: {
 10045                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 10046  00265A  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
 10047  00265E  9EF2               	bcf	intcon,7,c	;volatile
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
 10051                           
 10052                           ; BSR set to: 0
 10053  002660  0100               	movlb	0	; () banked
 10054  002662  EE20 F001          	lfsr	2,1
 10055  002666  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10056  002668  26D9               	addwf	fsr2l,f,c
 10057  00266A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10058  00266C  22DA               	addwfc	fsr2h,f,c
 10059  00266E  50DF               	movf	indf2,w,c
 10060  002670  0100               	movlb	0	; () banked
 10061  002672  6F70               	movwf	??_ES_DeQueue& (0+255),b
 10062  002674  0E01               	movlw	1
 10063  002676  0100               	movlb	0	; () banked
 10064  002678  2570               	addwf	??_ES_DeQueue& (0+255),w,b
 10065  00267A  0100               	movlb	0	; () banked
 10066  00267C  6F66               	movwf	___wmul@multiplier& (0+255),b
 10067  00267E  0100               	movlb	0	; () banked
 10068  002680  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
 10069  002682  0E00               	movlw	0
 10070  002684  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 10071  002686  0E00               	movlw	0
 10072  002688  0100               	movlb	0	; () banked
 10073  00268A  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10074  00268C  0E03               	movlw	3
 10075  00268E  6F68               	movwf	___wmul@multiplicand& (0+255),b
 10076  002690  ECB4  F01C         	call	___wmul	;wreg free
 10077  002694  0100               	movlb	0	; () banked
 10078  002696  5166               	movf	?___wmul& (0+255),w,b
 10079  002698  0100               	movlb	0	; () banked
 10080  00269A  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
 10081  00269C  6ED9               	movwf	fsr2l,c
 10082  00269E  0100               	movlb	0	; () banked
 10083  0026A0  5167               	movf	(?___wmul+1)& (0+255),w,b
 10084  0026A2  0100               	movlb	0	; () banked
 10085  0026A4  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
 10086  0026A6  6EDA               	movwf	fsr2h,c
 10087  0026A8  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
 10088  0026AC  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
 10089  0026B0  CFDE FFE6          	movff	postinc2,postinc1
 10090  0026B4  CFDE FFE6          	movff	postinc2,postinc1
 10091  0026B8  CFDE FFE6          	movff	postinc2,postinc1
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
 10095  0026BC  0100               	movlb	0	; () banked
 10096  0026BE  EE20 F001          	lfsr	2,1
 10097  0026C2  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10098  0026C4  26D9               	addwf	fsr2l,f,c
 10099  0026C6  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10100  0026C8  22DA               	addwfc	fsr2h,f,c
 10101  0026CA  2ADF               	incf	indf2,f,c
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
 10105  0026CC  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
 10106  0026D0  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
 10107  0026D4  0100               	movlb	0	; () banked
 10108  0026D6  EE10 F001          	lfsr	1,1
 10109  0026DA  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10110  0026DC  26E1               	addwf	fsr1l,f,c
 10111  0026DE  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10112  0026E0  22E2               	addwfc	fsr1h,f,c
 10113  0026E2  50DE               	movf	postinc2,w,c
 10114  0026E4  5CE6               	subwf	postinc1,w,c
 10115  0026E6  A0D8               	btfss	status,0,c
 10116  0026E8  D019               	goto	l3855
 10117                           
 10118                           ; BSR set to: 0
 10119                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
 10120  0026EA  0100               	movlb	0	; () banked
 10121  0026EC  EE20 F001          	lfsr	2,1
 10122  0026F0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10123  0026F2  26D9               	addwf	fsr2l,f,c
 10124  0026F4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10125  0026F6  22DA               	addwfc	fsr2h,f,c
 10126  0026F8  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
 10127  0026FC  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
 10128  002700  50E7               	movf	indf1,w,c
 10129  002702  0100               	movlb	0	; () banked
 10130  002704  6F60               	movwf	___lbmod@divisor& (0+255),b
 10131  002706  0100               	movlb	0	; () banked
 10132  002708  EE10 F001          	lfsr	1,1
 10133  00270C  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10134  00270E  26E1               	addwf	fsr1l,f,c
 10135  002710  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10136  002712  22E2               	addwfc	fsr1h,f,c
 10137  002714  50E7               	movf	indf1,w,c
 10138  002716  EC1B  F01C         	call	___lbmod
 10139  00271A  6EDF               	movwf	indf2,c
 10140  00271C                     l3855:
 10141                           
 10142                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
 10143  00271C  0100               	movlb	0	; () banked
 10144  00271E  EE20 F002          	lfsr	2,2
 10145  002722  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10146  002724  26D9               	addwf	fsr2l,f,c
 10147  002726  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10148  002728  22DA               	addwfc	fsr2h,f,c
 10149  00272A  06DF               	decf	indf2,f,c
 10150  00272C  50DF               	movf	indf2,w,c
 10151  00272E  0100               	movlb	0	; () banked
 10152  002730  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
 10156  002732  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
 10157                           
 10158                           ;ES_Queue.c: 183: }else {
 10159  002736  D014               	goto	l3865
 10160  002738                     l3859:
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
 10164  002738  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
 10165  00273C  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
 10166  002740  0E00               	movlw	0
 10167  002742  6EDF               	movwf	indf2,c
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
 10171  002744  0100               	movlb	0	; () banked
 10172  002746  EE20 F001          	lfsr	2,1
 10173  00274A  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
 10174  00274C  26D9               	addwf	fsr2l,f,c
 10175  00274E  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
 10176  002750  22DA               	addwfc	fsr2h,f,c
 10177  002752  0E00               	movlw	0
 10178  002754  6EDE               	movwf	postinc2,c
 10179  002756  0E00               	movlw	0
 10180  002758  6EDD               	movwf	postdec2,c
 10181                           
 10182                           ; BSR set to: 0
 10183                           ;ES_Queue.c: 186: NumLeft = 0;
 10184  00275A  0E00               	movlw	0
 10185  00275C  0100               	movlb	0	; () banked
 10186  00275E  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10187  002760                     l3865:
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;ES_Queue.c: 187: }
 10191                           ;ES_Queue.c: 188: return NumLeft;
 10192  002760  0100               	movlb	0	; () banked
 10193  002762  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
 10194  002764  0012               	return	
 10195  002766                     __end_of_ES_DeQueue:
 10196                           	opt stack 0
 10197                           tosu	equ	0xFFF
 10198                           tosh	equ	0xFFE
 10199                           tosl	equ	0xFFD
 10200                           pclath	equ	0xFFA
 10201                           tblptru	equ	0xFF8
 10202                           tblptrh	equ	0xFF7
 10203                           tblptrl	equ	0xFF6
 10204                           tablat	equ	0xFF5
 10205                           prodh	equ	0xFF4
 10206                           prodl	equ	0xFF3
 10207                           intcon	equ	0xFF2
 10208                           postinc0	equ	0xFEE
 10209                           wreg	equ	0xFE8
 10210                           indf1	equ	0xFE7
 10211                           postinc1	equ	0xFE6
 10212                           postdec1	equ	0xFE5
 10213                           fsr1h	equ	0xFE2
 10214                           fsr1l	equ	0xFE1
 10215                           indf2	equ	0xFDF
 10216                           postinc2	equ	0xFDE
 10217                           postdec2	equ	0xFDD
 10218                           plusw2	equ	0xFDB
 10219                           fsr2h	equ	0xFDA
 10220                           fsr2l	equ	0xFD9
 10221                           status	equ	0xFD8
 10222                           
 10223 ;; *************** function ___lbmod *****************
 10224 ;; Defined at:
 10225 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  dividend        1    wreg     unsigned char 
 10228 ;;  divisor         1    0[BANK0 ] unsigned char 
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;  dividend        1    1[BANK0 ] unsigned char 
 10231 ;;  rem             1    3[BANK0 ] unsigned char 
 10232 ;;  counter         1    2[BANK0 ] unsigned char 
 10233 ;; Return value:  Size  Location     Type
 10234 ;;                  1    wreg      unsigned char 
 10235 ;; Registers used:
 10236 ;;		wreg, status,2, status,0
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10242 ;;      Params:         0       1       0       0
 10243 ;;      Locals:         0       3       0       0
 10244 ;;      Temps:          0       0       0       0
 10245 ;;      Totals:         0       4       0       0
 10246 ;;Total ram usage:        4 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    7
 10249 ;; This function calls:
 10250 ;;		Nothing
 10251 ;; This function is called by:
 10252 ;;		_ES_DeQueue
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256                           	psect	text35
 10257  003836                     __ptext35:
 10258                           	opt stack 0
 10259  003836                     ___lbmod:
 10260                           	opt stack 21
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;incstack = 0
 10264                           ;___lbmod@dividend stored from wreg
 10265  003836  0100               	movlb	0	; () banked
 10266  003838  6F61               	movwf	___lbmod@dividend& (0+255),b
 10267  00383A  0E08               	movlw	8
 10268  00383C  0100               	movlb	0	; () banked
 10269  00383E  6F62               	movwf	___lbmod@counter& (0+255),b
 10270  003840  0E00               	movlw	0
 10271  003842  0100               	movlb	0	; () banked
 10272  003844  6F63               	movwf	___lbmod@rem& (0+255),b
 10273  003846                     l3825:
 10274                           
 10275                           ; BSR set to: 0
 10276  003846  90D8               	bcf	status,0,c
 10277  003848  0100               	movlb	0	; () banked
 10278  00384A  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 10279  00384C  0100               	movlb	0	; () banked
 10280  00384E  3563               	rlcf	___lbmod@rem& (0+255),w,b
 10281  003850  0100               	movlb	0	; () banked
 10282  003852  6F63               	movwf	___lbmod@rem& (0+255),b
 10283                           
 10284                           ; BSR set to: 0
 10285  003854  0100               	movlb	0	; () banked
 10286  003856  90D8               	bcf	status,0,c
 10287  003858  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 10288                           
 10289                           ; BSR set to: 0
 10290  00385A  0100               	movlb	0	; () banked
 10291  00385C  5160               	movf	___lbmod@divisor& (0+255),w,b
 10292  00385E  0100               	movlb	0	; () banked
 10293  003860  5D63               	subwf	___lbmod@rem& (0+255),w,b
 10294  003862  A0D8               	btfss	status,0,c
 10295  003864  D004               	goto	l3833
 10296                           
 10297                           ; BSR set to: 0
 10298  003866  0100               	movlb	0	; () banked
 10299  003868  5160               	movf	___lbmod@divisor& (0+255),w,b
 10300  00386A  0100               	movlb	0	; () banked
 10301  00386C  5F63               	subwf	___lbmod@rem& (0+255),f,b
 10302  00386E                     l3833:
 10303                           
 10304                           ; BSR set to: 0
 10305  00386E  0100               	movlb	0	; () banked
 10306  003870  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 10307  003872  D7E9               	goto	l3825
 10308                           
 10309                           ; BSR set to: 0
 10310                           
 10311                           ; BSR set to: 0
 10312  003874  0100               	movlb	0	; () banked
 10313  003876  5163               	movf	___lbmod@rem& (0+255),w,b
 10314  003878  0012               	return	
 10315  00387A                     __end_of___lbmod:
 10316                           	opt stack 0
 10317                           tosu	equ	0xFFF
 10318                           tosh	equ	0xFFE
 10319                           tosl	equ	0xFFD
 10320                           pclath	equ	0xFFA
 10321                           tblptru	equ	0xFF8
 10322                           tblptrh	equ	0xFF7
 10323                           tblptrl	equ	0xFF6
 10324                           tablat	equ	0xFF5
 10325                           prodh	equ	0xFF4
 10326                           prodl	equ	0xFF3
 10327                           intcon	equ	0xFF2
 10328                           postinc0	equ	0xFEE
 10329                           wreg	equ	0xFE8
 10330                           indf1	equ	0xFE7
 10331                           postinc1	equ	0xFE6
 10332                           postdec1	equ	0xFE5
 10333                           fsr1h	equ	0xFE2
 10334                           fsr1l	equ	0xFE1
 10335                           indf2	equ	0xFDF
 10336                           postinc2	equ	0xFDE
 10337                           postdec2	equ	0xFDD
 10338                           plusw2	equ	0xFDB
 10339                           fsr2h	equ	0xFDA
 10340                           fsr2l	equ	0xFD9
 10341                           status	equ	0xFD8
 10342                           
 10343 ;; *************** function _ES_Initialize *****************
 10344 ;; Defined at:
 10345 ;;		line 242 in file "ES_Framework.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;  NewRate         2   33[BANK0 ] enum E15423
 10348 ;; Auto vars:     Size  Location     Type
 10349 ;;  i               1   35[BANK0 ] unsigned char 
 10350 ;; Return value:  Size  Location     Type
 10351 ;;                  1    wreg      enum E15494
 10352 ;; Registers used:
 10353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10354 ;; Tracked objects:
 10355 ;;		On entry : 0/0
 10356 ;;		On exit  : 0/0
 10357 ;;		Unchanged: 0/0
 10358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10359 ;;      Params:         0       2       0       0
 10360 ;;      Locals:         0       1       0       0
 10361 ;;      Temps:          0       0       0       0
 10362 ;;      Totals:         0       3       0       0
 10363 ;;Total ram usage:        3 bytes
 10364 ;; Hardware stack levels used:    1
 10365 ;; Hardware stack levels required when called:   11
 10366 ;; This function calls:
 10367 ;;		_ES_InitQueue
 10368 ;;		_ES_Timer_Init
 10369 ;;		_InitPatternControlService
 10370 ;;		_InitSPI32ControlService
 10371 ;; This function is called by:
 10372 ;;		_main
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           	psect	text36
 10377  002B70                     __ptext36:
 10378                           	opt stack 0
 10379  002B70                     _ES_Initialize:
 10380                           	opt stack 19
 10381                           
 10382                           ;ES_Framework.c: 243: uint8_t i;
 10383                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
 10384                           
 10385                           ; BSR set to: 0
 10386                           ;incstack = 0
 10387  002B70  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
 10388  002B74  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
 10389  002B78  ECF0  F01D         	call	_ES_Timer_Init	;wreg free
 10390                           
 10391                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
 10392  002B7C  0E00               	movlw	0
 10393  002B7E  0100               	movlb	0	; () banked
 10394  002B80  6F83               	movwf	ES_Initialize@i& (0+255),b
 10395  002B82                     l4071:
 10396                           
 10397                           ; BSR set to: 0
 10398  002B82  0E01               	movlw	1
 10399  002B84  0100               	movlb	0	; () banked
 10400  002B86  6583               	cpfsgt	ES_Initialize@i& (0+255),b
 10401  002B88  D001               	goto	l4075
 10402  002B8A  D066               	goto	l4095
 10403  002B8C                     l4075:
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
 10407                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
 10408  002B8C  0100               	movlb	0	; () banked
 10409  002B8E  5183               	movf	ES_Initialize@i& (0+255),w,b
 10410  002B90  0D04               	mullw	4
 10411  002B92  0E50               	movlw	low _ServDescList
 10412  002B94  24F3               	addwf	prodl,w,c
 10413  002B96  6EF6               	movwf	tblptrl,c
 10414  002B98  0E03               	movlw	high _ServDescList
 10415  002B9A  20F4               	addwfc	prodh,w,c
 10416  002B9C  6EF7               	movwf	tblptrh,c
 10417  002B9E                     	if	0	;There are less than 3 active tblptr bytes
 10418  002B9E                     	endif
 10419  002B9E  0009               	tblrd		*+
 10420  002BA0  50F5               	movf	tablat,w,c
 10421  002BA2  0009               	tblrd		*+
 10422  002BA4  10F5               	iorwf	tablat,w,c
 10423  002BA6  B4D8               	btfsc	status,2,c
 10424  002BA8  D013               	goto	l4079
 10425                           
 10426                           ; BSR set to: 0
 10427  002BAA  0100               	movlb	0	; () banked
 10428  002BAC  5183               	movf	ES_Initialize@i& (0+255),w,b
 10429  002BAE  0D04               	mullw	4
 10430  002BB0  0E02               	movlw	2
 10431  002BB2  26F3               	addwf	prodl,f,c
 10432  002BB4  0E00               	movlw	0
 10433  002BB6  22F4               	addwfc	prodh,f,c
 10434  002BB8  0E50               	movlw	low _ServDescList
 10435  002BBA  24F3               	addwf	prodl,w,c
 10436  002BBC  6EF6               	movwf	tblptrl,c
 10437  002BBE  0E03               	movlw	high _ServDescList
 10438  002BC0  20F4               	addwfc	prodh,w,c
 10439  002BC2  6EF7               	movwf	tblptrh,c
 10440  002BC4                     	if	0	;There are less than 3 active tblptr bytes
 10441  002BC4                     	endif
 10442  002BC4  0009               	tblrd		*+
 10443  002BC6  50F5               	movf	tablat,w,c
 10444  002BC8  0009               	tblrd		*+
 10445  002BCA  10F5               	iorwf	tablat,w,c
 10446  002BCC  A4D8               	btfss	status,2,c
 10447  002BCE  D002               	goto	l4083
 10448  002BD0                     l4079:
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;ES_Framework.c: 249: return FailedPointer;
 10452  002BD0  0E03               	movlw	3
 10453                           
 10454                           ; BSR set to: 0
 10455  002BD2  0012               	return	
 10456  002BD4                     l4083:
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
 10460  002BD4  0100               	movlb	0	; () banked
 10461  002BD6  5183               	movf	ES_Initialize@i& (0+255),w,b
 10462  002BD8  0D03               	mullw	3
 10463  002BDA  0E58               	movlw	low _EventQueues
 10464  002BDC  24F3               	addwf	prodl,w,c
 10465  002BDE  6EF6               	movwf	tblptrl,c
 10466  002BE0  0E03               	movlw	high _EventQueues
 10467  002BE2  20F4               	addwfc	prodh,w,c
 10468  002BE4  6EF7               	movwf	tblptrh,c
 10469  002BE6                     	if	0	;There are less than 3 active tblptr bytes
 10470  002BE6                     	endif
 10471  002BE6  0009               	tblrd		*+
 10472  002BE8  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
 10473  002BEC  000A               	tblrd		*-
 10474  002BEE  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
 10475  002BF2  0100               	movlb	0	; () banked
 10476  002BF4  5183               	movf	ES_Initialize@i& (0+255),w,b
 10477  002BF6  0D03               	mullw	3
 10478  002BF8  0E02               	movlw	2
 10479  002BFA  26F3               	addwf	prodl,f,c
 10480  002BFC  0E00               	movlw	0
 10481  002BFE  22F4               	addwfc	prodh,f,c
 10482  002C00  0E58               	movlw	low _EventQueues
 10483  002C02  24F3               	addwf	prodl,w,c
 10484  002C04  6EF6               	movwf	tblptrl,c
 10485  002C06  0E03               	movlw	high _EventQueues
 10486  002C08  20F4               	addwfc	prodh,w,c
 10487  002C0A  6EF7               	movwf	tblptrh,c
 10488  002C0C                     	if	0	;There are less than 3 active tblptr bytes
 10489  002C0C                     	endif
 10490  002C0C  0008               	tblrd		*
 10491  002C0E  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
 10492  002C12  EC5C  F01C         	call	_ES_InitQueue	;wreg free
 10493                           
 10494                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
 10495  002C16  0100               	movlb	0	; () banked
 10496  002C18  5183               	movf	ES_Initialize@i& (0+255),w,b
 10497  002C1A  0D04               	mullw	4
 10498  002C1C  0E50               	movlw	low _ServDescList
 10499  002C1E  24F3               	addwf	prodl,w,c
 10500  002C20  6EF6               	movwf	tblptrl,c
 10501  002C22  0E03               	movlw	high _ServDescList
 10502  002C24  20F4               	addwfc	prodh,w,c
 10503  002C26  6EF7               	movwf	tblptrh,c
 10504  002C28                     	if	0	;There are less than 3 active tblptr bytes
 10505  002C28                     	endif
 10506  002C28  D801               	call	u2958
 10507  002C2A  D00E               	goto	u2959
 10508  002C2C                     u2958:
 10509  002C2C  0005               	push	
 10510  002C2E  6EFA               	movwf	pclath,c
 10511  002C30  0009               	tblrd		*+
 10512  002C32  50F5               	movf	tablat,w,c
 10513  002C34  6EFD               	movwf	tosl,c
 10514  002C36  0009               	tblrd		*+
 10515  002C38  50F5               	movf	tablat,w,c
 10516  002C3A  6EFE               	movwf	tosh,c
 10517  002C3C  50F8               	movf	tblptru,w,c
 10518  002C3E  6EFF               	movwf	tosu,c
 10519  002C40  50FA               	movf	pclath,w,c
 10520  002C42  0100               	movlb	0	; () banked
 10521  002C44  5183               	movf	ES_Initialize@i& (0+255),w,b
 10522  002C46  0012               	return		;indir
 10523  002C48                     u2959:
 10524  002C48  06E8               	decf	wreg,f,c
 10525  002C4A  B4D8               	btfsc	status,2,c
 10526  002C4C  D002               	goto	l4091
 10527                           
 10528                           ;ES_Framework.c: 254: return FailedInit;
 10529  002C4E  0E05               	movlw	5
 10530  002C50  0012               	return	
 10531  002C52                     l4091:
 10532  002C52  0100               	movlb	0	; () banked
 10533  002C54  2B83               	incf	ES_Initialize@i& (0+255),f,b
 10534  002C56  D795               	goto	l4071
 10535  002C58                     l4095:
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;ES_Framework.c: 255: }
 10539                           ;ES_Framework.c: 256: return Success;
 10540  002C58  0E00               	movlw	0
 10541  002C5A  0012               	return	
 10542  002C5C                     __end_of_ES_Initialize:
 10543                           	opt stack 0
 10544                           tosu	equ	0xFFF
 10545                           tosh	equ	0xFFE
 10546                           tosl	equ	0xFFD
 10547                           pclath	equ	0xFFA
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           intcon	equ	0xFF2
 10555                           postinc0	equ	0xFEE
 10556                           wreg	equ	0xFE8
 10557                           indf1	equ	0xFE7
 10558                           postinc1	equ	0xFE6
 10559                           postdec1	equ	0xFE5
 10560                           fsr1h	equ	0xFE2
 10561                           fsr1l	equ	0xFE1
 10562                           indf2	equ	0xFDF
 10563                           postinc2	equ	0xFDE
 10564                           postdec2	equ	0xFDD
 10565                           plusw2	equ	0xFDB
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function _InitPatternControlService *****************
 10571 ;; Defined at:
 10572 ;;		line 97 in file "Pattern_ControlService.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  Priority        1    wreg     unsigned char 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  Priority        1   32[BANK0 ] unsigned char 
 10577 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10578 ;; Return value:  Size  Location     Type
 10579 ;;                  1    wreg      unsigned char 
 10580 ;; Registers used:
 10581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10587 ;;      Params:         0       0       0       0
 10588 ;;      Locals:         0       4       0       0
 10589 ;;      Temps:          0       0       0       0
 10590 ;;      Totals:         0       4       0       0
 10591 ;;Total ram usage:        4 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:   10
 10594 ;; This function calls:
 10595 ;;		_CAN_Init
 10596 ;;		_DotStar_Init
 10597 ;;		_ES_PostToService
 10598 ;;		_SetupPattern
 10599 ;; This function is called by:
 10600 ;;		_ES_Initialize
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           	psect	text37
 10605  003690                     __ptext37:
 10606                           	opt stack 0
 10607  003690                     _InitPatternControlService:
 10608                           	opt stack 19
 10609                           
 10610                           ;incstack = 0
 10611                           ;InitPatternControlService@Priority stored from wreg
 10612  003690  0100               	movlb	0	; () banked
 10613  003692  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
 10614                           
 10615                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
 10616                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
 10617  003694  C080  F0E6         	movff	InitPatternControlService@Priority,_MyPriority
 10618                           
 10619                           ;Pattern_ControlService.c: 103: DotStar_Init(&PatternConfigs[1]);
 10620  003698  0EF7               	movlw	low (_PatternConfigs+1)
 10621  00369A  0100               	movlb	0	; () banked
 10622  00369C  6F60               	movwf	DotStar_Init@brightnessPointer& (0+255),b
 10623  00369E  0E00               	movlw	high (_PatternConfigs+1)
 10624  0036A0  0100               	movlb	0	; () banked
 10625  0036A2  6F61               	movwf	(DotStar_Init@brightnessPointer+1)& (0+255),b
 10626  0036A4  ECA4  F01B         	call	_DotStar_Init
 10627                           
 10628                           ;Pattern_ControlService.c: 104: SetupPattern(&PatternConfigs[0], &PatternConfigs[2]);
 10629  0036A8  0EF6               	movlw	low _PatternConfigs
 10630  0036AA  0100               	movlb	0	; () banked
 10631  0036AC  6F60               	movwf	SetupPattern@patternIDPointer& (0+255),b
 10632  0036AE  0E00               	movlw	high _PatternConfigs
 10633  0036B0  0100               	movlb	0	; () banked
 10634  0036B2  6F61               	movwf	(SetupPattern@patternIDPointer+1)& (0+255),b
 10635  0036B4  0EF8               	movlw	low (_PatternConfigs+2)
 10636  0036B6  0100               	movlb	0	; () banked
 10637  0036B8  6F62               	movwf	SetupPattern@listeningFocusPointer& (0+255),b
 10638  0036BA  0E00               	movlw	high (_PatternConfigs+2)
 10639  0036BC  0100               	movlb	0	; () banked
 10640  0036BE  6F63               	movwf	(SetupPattern@listeningFocusPointer+1)& (0+255),b
 10641  0036C0  ECE7  F01D         	call	_SetupPattern	;wreg free
 10642                           
 10643                           ;Pattern_ControlService.c: 106: CAN_Init();
 10644  0036C4  EC03  F01E         	call	_CAN_Init	;wreg free
 10645                           
 10646                           ;Pattern_ControlService.c: 108: CurrentState = Pattern_Startup;
 10647  0036C8  0E00               	movlw	0
 10648  0036CA  0100               	movlb	0	; () banked
 10649  0036CC  6FE4               	movwf	_CurrentState& (0+255),b
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;Pattern_ControlService.c: 110: ThisEvent.EventType = ES_INIT;
 10653  0036CE  0E02               	movlw	2
 10654  0036D0  0100               	movlb	0	; () banked
 10655  0036D2  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;Pattern_ControlService.c: 111: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10659  0036D4  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
 10660  0036D8  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10661  0036DC  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10662  0036E0  0100               	movlb	0	; () banked
 10663  0036E2  51E6               	movf	_MyPriority& (0+255),w,b
 10664  0036E4  ECA0  F01A         	call	_ES_PostToService
 10665  0036E8  06E8               	decf	wreg,f,c
 10666  0036EA  A4D8               	btfss	status,2,c
 10667  0036EC  D002               	goto	l3913
 10668                           
 10669                           ;Pattern_ControlService.c: 112: {
 10670                           ;Pattern_ControlService.c: 113: return 1;
 10671  0036EE  0E01               	movlw	1
 10672                           
 10673                           ;Pattern_ControlService.c: 114: }else
 10674  0036F0  0012               	return	
 10675  0036F2                     l3913:
 10676                           
 10677                           ;Pattern_ControlService.c: 115: {
 10678                           ;Pattern_ControlService.c: 116: return 0;
 10679  0036F2  0E00               	movlw	0
 10680  0036F4  0012               	return	
 10681  0036F6                     __end_of_InitPatternControlService:
 10682                           	opt stack 0
 10683                           tosu	equ	0xFFF
 10684                           tosh	equ	0xFFE
 10685                           tosl	equ	0xFFD
 10686                           pclath	equ	0xFFA
 10687                           tblptru	equ	0xFF8
 10688                           tblptrh	equ	0xFF7
 10689                           tblptrl	equ	0xFF6
 10690                           tablat	equ	0xFF5
 10691                           prodh	equ	0xFF4
 10692                           prodl	equ	0xFF3
 10693                           intcon	equ	0xFF2
 10694                           postinc0	equ	0xFEE
 10695                           wreg	equ	0xFE8
 10696                           indf1	equ	0xFE7
 10697                           postinc1	equ	0xFE6
 10698                           postdec1	equ	0xFE5
 10699                           fsr1h	equ	0xFE2
 10700                           fsr1l	equ	0xFE1
 10701                           indf2	equ	0xFDF
 10702                           postinc2	equ	0xFDE
 10703                           postdec2	equ	0xFDD
 10704                           plusw2	equ	0xFDB
 10705                           fsr2h	equ	0xFDA
 10706                           fsr2l	equ	0xFD9
 10707                           status	equ	0xFD8
 10708                           
 10709 ;; *************** function _InitSPI32ControlService *****************
 10710 ;; Defined at:
 10711 ;;		line 80 in file "SPI32_ControlService.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;  Priority        1    wreg     unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  Priority        1   32[BANK0 ] unsigned char 
 10716 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  1    wreg      unsigned char 
 10719 ;; Registers used:
 10720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10726 ;;      Params:         0       0       0       0
 10727 ;;      Locals:         0       4       0       0
 10728 ;;      Temps:          0       0       0       0
 10729 ;;      Totals:         0       4       0       0
 10730 ;;Total ram usage:        4 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:   10
 10733 ;; This function calls:
 10734 ;;		_ES_PostToService
 10735 ;;		_SPI32_Init
 10736 ;; This function is called by:
 10737 ;;		_ES_Initialize
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text38
 10742  0038F4                     __ptext38:
 10743                           	opt stack 0
 10744  0038F4                     _InitSPI32ControlService:
 10745                           	opt stack 19
 10746                           
 10747                           ;incstack = 0
 10748                           ;InitSPI32ControlService@Priority stored from wreg
 10749  0038F4  0100               	movlb	0	; () banked
 10750  0038F6  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
 10751                           
 10752                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
 10753                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
 10754  0038F8  C080  F0E3         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
 10755                           
 10756                           ;SPI32_ControlService.c: 86: SPI32_Init();
 10757  0038FC  EC10  F01E         	call	_SPI32_Init	;wreg free
 10758                           
 10759                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
 10760  003900  0E00               	movlw	0
 10761  003902  0100               	movlb	0	; () banked
 10762  003904  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
 10766  003906  0E02               	movlw	2
 10767  003908  0100               	movlb	0	; () banked
 10768  00390A  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10772  00390C  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
 10773  003910  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10774  003914  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10775  003918  0100               	movlb	0	; () banked
 10776  00391A  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10777  00391C  ECA0  F01A         	call	_ES_PostToService
 10778  003920  06E8               	decf	wreg,f,c
 10779  003922  A4D8               	btfss	status,2,c
 10780  003924  D002               	goto	l3981
 10781                           
 10782                           ;SPI32_ControlService.c: 92: {
 10783                           ;SPI32_ControlService.c: 93: return 1;
 10784  003926  0E01               	movlw	1
 10785                           
 10786                           ;SPI32_ControlService.c: 94: }else
 10787  003928  0012               	return	
 10788  00392A                     l3981:
 10789                           
 10790                           ;SPI32_ControlService.c: 95: {
 10791                           ;SPI32_ControlService.c: 96: return 0;
 10792  00392A  0E00               	movlw	0
 10793  00392C  0012               	return	
 10794  00392E                     __end_of_InitSPI32ControlService:
 10795                           	opt stack 0
 10796                           tosu	equ	0xFFF
 10797                           tosh	equ	0xFFE
 10798                           tosl	equ	0xFFD
 10799                           pclath	equ	0xFFA
 10800                           tblptru	equ	0xFF8
 10801                           tblptrh	equ	0xFF7
 10802                           tblptrl	equ	0xFF6
 10803                           tablat	equ	0xFF5
 10804                           prodh	equ	0xFF4
 10805                           prodl	equ	0xFF3
 10806                           intcon	equ	0xFF2
 10807                           postinc0	equ	0xFEE
 10808                           wreg	equ	0xFE8
 10809                           indf1	equ	0xFE7
 10810                           postinc1	equ	0xFE6
 10811                           postdec1	equ	0xFE5
 10812                           fsr1h	equ	0xFE2
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           postdec2	equ	0xFDD
 10817                           plusw2	equ	0xFDB
 10818                           fsr2h	equ	0xFDA
 10819                           fsr2l	equ	0xFD9
 10820                           status	equ	0xFD8
 10821                           
 10822 ;; *************** function _SPI32_Init *****************
 10823 ;; Defined at:
 10824 ;;		line 65 in file "SPI32_HW.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;		None
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;		None
 10829 ;; Return value:  Size  Location     Type
 10830 ;;                  1    wreg      void 
 10831 ;; Registers used:
 10832 ;;		wreg, status,2, cstack
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10838 ;;      Params:         0       0       0       0
 10839 ;;      Locals:         0       0       0       0
 10840 ;;      Temps:          0       0       0       0
 10841 ;;      Totals:         0       0       0       0
 10842 ;;Total ram usage:        0 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    8
 10845 ;; This function calls:
 10846 ;;		_HW_Init
 10847 ;; This function is called by:
 10848 ;;		_InitSPI32ControlService
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text39
 10853  003C20                     __ptext39:
 10854                           	opt stack 0
 10855  003C20                     _SPI32_Init:
 10856                           	opt stack 20
 10857                           
 10858                           ;SPI32_HW.c: 67: HW_Init();
 10859                           
 10860                           ;incstack = 0
 10861  003C20  EC28  F01D         	call	_HW_Init	;wreg free
 10862  003C24  0012               	return		;funcret
 10863  003C26                     __end_of_SPI32_Init:
 10864                           	opt stack 0
 10865                           tosu	equ	0xFFF
 10866                           tosh	equ	0xFFE
 10867                           tosl	equ	0xFFD
 10868                           pclath	equ	0xFFA
 10869                           tblptru	equ	0xFF8
 10870                           tblptrh	equ	0xFF7
 10871                           tblptrl	equ	0xFF6
 10872                           tablat	equ	0xFF5
 10873                           prodh	equ	0xFF4
 10874                           prodl	equ	0xFF3
 10875                           intcon	equ	0xFF2
 10876                           postinc0	equ	0xFEE
 10877                           wreg	equ	0xFE8
 10878                           indf1	equ	0xFE7
 10879                           postinc1	equ	0xFE6
 10880                           postdec1	equ	0xFE5
 10881                           fsr1h	equ	0xFE2
 10882                           fsr1l	equ	0xFE1
 10883                           indf2	equ	0xFDF
 10884                           postinc2	equ	0xFDE
 10885                           postdec2	equ	0xFDD
 10886                           plusw2	equ	0xFDB
 10887                           fsr2h	equ	0xFDA
 10888                           fsr2l	equ	0xFD9
 10889                           status	equ	0xFD8
 10890                           
 10891 ;; *************** function _HW_Init *****************
 10892 ;; Defined at:
 10893 ;;		line 127 in file "SPI32_HW.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;		None
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1    wreg      void 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10907 ;;      Params:         0       0       0       0
 10908 ;;      Locals:         0       0       0       0
 10909 ;;      Temps:          0       0       0       0
 10910 ;;      Totals:         0       0       0       0
 10911 ;;Total ram usage:        0 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    7
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_SPI32_Init
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text40
 10922  003A50                     __ptext40:
 10923                           	opt stack 0
 10924  003A50                     _HW_Init:
 10925                           	opt stack 20
 10926                           
 10927                           ;SPI32_HW.c: 133: PORTC = 0x00;
 10928                           
 10929                           ;incstack = 0
 10930  003A50  0E00               	movlw	0
 10931  003A52  6E82               	movwf	3970,c	;volatile
 10932                           
 10933                           ;SPI32_HW.c: 134: LATC = 0x00;
 10934  003A54  0E00               	movlw	0
 10935  003A56  6E8B               	movwf	3979,c	;volatile
 10936                           
 10937                           ;SPI32_HW.c: 135: ADCON1 = 0x0F;
 10938  003A58  0E0F               	movlw	15
 10939  003A5A  6EC1               	movwf	4033,c	;volatile
 10940                           
 10941                           ;SPI32_HW.c: 136: TRISC = 0x00;
 10942  003A5C  0E00               	movlw	0
 10943  003A5E  6E94               	movwf	3988,c	;volatile
 10944                           
 10945                           ;SPI32_HW.c: 138: SSPIE = 1;
 10946  003A60  869D               	bsf	3997,3,c	;volatile
 10947                           
 10948                           ;SPI32_HW.c: 142: SSPCON1 = 0x00;
 10949  003A62  0E00               	movlw	0
 10950  003A64  6EC6               	movwf	4038,c	;volatile
 10951                           
 10952                           ;SPI32_HW.c: 143: SSPSTAT = 0b01000000;
 10953  003A66  0E40               	movlw	64
 10954  003A68  6EC7               	movwf	4039,c	;volatile
 10955                           
 10956                           ;SPI32_HW.c: 144: SSPADD = 0xFF;
 10957  003A6A  68C8               	setf	4040,c	;volatile
 10958                           
 10959                           ;SPI32_HW.c: 145: SSPCON1 = 0b00110000;
 10960  003A6C  0E30               	movlw	48
 10961  003A6E  6EC6               	movwf	4038,c	;volatile
 10962  003A70  0012               	return		;funcret
 10963  003A72                     __end_of_HW_Init:
 10964                           	opt stack 0
 10965                           tosu	equ	0xFFF
 10966                           tosh	equ	0xFFE
 10967                           tosl	equ	0xFFD
 10968                           pclath	equ	0xFFA
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           postinc0	equ	0xFEE
 10977                           wreg	equ	0xFE8
 10978                           indf1	equ	0xFE7
 10979                           postinc1	equ	0xFE6
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function _SetupPattern *****************
 10992 ;; Defined at:
 10993 ;;		line 71 in file "Pattern_PtrnGenerator.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  patternIDPoi    2    0[BANK0 ] PTR unsigned char 
 10996 ;;		 -> PatternConfigs(4), 
 10997 ;;  listeningFoc    2    2[BANK0 ] PTR unsigned char 
 10998 ;;		 -> PatternConfigs(4), 
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;		None
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  1    wreg      void 
 11003 ;; Registers used:
 11004 ;;		wreg, status,2, status,0
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11010 ;;      Params:         0       4       0       0
 11011 ;;      Locals:         0       0       0       0
 11012 ;;      Temps:          0       0       0       0
 11013 ;;      Totals:         0       4       0       0
 11014 ;;Total ram usage:        4 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    7
 11017 ;; This function calls:
 11018 ;;		Nothing
 11019 ;; This function is called by:
 11020 ;;		_InitPatternControlService
 11021 ;; This function uses a non-reentrant model
 11022 ;;
 11023                           
 11024                           	psect	text41
 11025  003BCE                     __ptext41:
 11026                           	opt stack 0
 11027  003BCE                     _SetupPattern:
 11028                           	opt stack 21
 11029                           
 11030                           ;Pattern_PtrnGenerator.c: 73: PatternID = patternIDPointer;
 11031                           
 11032                           ;incstack = 0
 11033  003BCE  C060  F0DB         	movff	SetupPattern@patternIDPointer,_PatternID
 11034  003BD2  C061  F0DC         	movff	SetupPattern@patternIDPointer+1,_PatternID+1
 11035                           
 11036                           ;Pattern_PtrnGenerator.c: 74: ListeningFocus = listeningFocusPointer;
 11037  003BD6  C062  F0D9         	movff	SetupPattern@listeningFocusPointer,_ListeningFocus
 11038  003BDA  C063  F0DA         	movff	SetupPattern@listeningFocusPointer+1,_ListeningFocus+1
 11039  003BDE  0012               	return		;funcret
 11040  003BE0                     __end_of_SetupPattern:
 11041                           	opt stack 0
 11042                           tosu	equ	0xFFF
 11043                           tosh	equ	0xFFE
 11044                           tosl	equ	0xFFD
 11045                           pclath	equ	0xFFA
 11046                           tblptru	equ	0xFF8
 11047                           tblptrh	equ	0xFF7
 11048                           tblptrl	equ	0xFF6
 11049                           tablat	equ	0xFF5
 11050                           prodh	equ	0xFF4
 11051                           prodl	equ	0xFF3
 11052                           intcon	equ	0xFF2
 11053                           postinc0	equ	0xFEE
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postinc1	equ	0xFE6
 11057                           postdec1	equ	0xFE5
 11058                           fsr1h	equ	0xFE2
 11059                           fsr1l	equ	0xFE1
 11060                           indf2	equ	0xFDF
 11061                           postinc2	equ	0xFDE
 11062                           postdec2	equ	0xFDD
 11063                           plusw2	equ	0xFDB
 11064                           fsr2h	equ	0xFDA
 11065                           fsr2l	equ	0xFD9
 11066                           status	equ	0xFD8
 11067                           
 11068 ;; *************** function _ES_PostToService *****************
 11069 ;; Defined at:
 11070 ;;		line 351 in file "ES_Framework.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;  WhichService    1    wreg     unsigned char 
 11073 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  WhichService    1   28[BANK0 ] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      unsigned char 
 11078 ;; Registers used:
 11079 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11085 ;;      Params:         0       3       0       0
 11086 ;;      Locals:         0       1       0       0
 11087 ;;      Temps:          0       2       0       0
 11088 ;;      Totals:         0       6       0       0
 11089 ;;Total ram usage:        6 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    9
 11092 ;; This function calls:
 11093 ;;		_ES_EnQueueFIFO
 11094 ;; This function is called by:
 11095 ;;		_InitPatternControlService
 11096 ;;		_PostPatternControlService
 11097 ;;		_InitSPI32ControlService
 11098 ;;		_PostSPI32ControlService
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text42
 11103  003540                     __ptext42:
 11104                           	opt stack 0
 11105  003540                     _ES_PostToService:
 11106                           	opt stack 17
 11107                           
 11108                           ;incstack = 0
 11109                           ;ES_PostToService@WhichService stored from wreg
 11110  003540  0100               	movlb	0	; () banked
 11111  003542  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
 11112                           
 11113                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 11114                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 11115                           ;ES_Framework.c: 354: 1 )){
 11116  003544  0E02               	movlw	2
 11117  003546  0100               	movlb	0	; () banked
 11118  003548  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
 11119  00354A  D033               	goto	l2999
 11120                           
 11121                           ; BSR set to: 0
 11122  00354C  0100               	movlb	0	; () banked
 11123  00354E  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11124  003550  0D03               	mullw	3
 11125  003552  0E58               	movlw	low _EventQueues
 11126  003554  24F3               	addwf	prodl,w,c
 11127  003556  6EF6               	movwf	tblptrl,c
 11128  003558  0E03               	movlw	high _EventQueues
 11129  00355A  20F4               	addwfc	prodh,w,c
 11130  00355C  6EF7               	movwf	tblptrh,c
 11131  00355E                     	if	0	;There are less than 3 active tblptr bytes
 11132  00355E                     	endif
 11133  00355E  0009               	tblrd		*+
 11134  003560  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
 11135  003564  000A               	tblrd		*-
 11136  003566  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
 11137  00356A  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
 11138  00356E  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
 11139  003572  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
 11140  003576  EC2E  F016         	call	_ES_EnQueueFIFO	;wreg free
 11141  00357A  06E8               	decf	wreg,f,c
 11142  00357C  A4D8               	btfss	status,2,c
 11143  00357E  D019               	goto	l2999
 11144                           
 11145                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 11146  003580  0100               	movlb	0	; () banked
 11147  003582  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11148  003584  0D02               	mullw	2
 11149  003586  0E01               	movlw	low _BitNum2SetMask
 11150  003588  24F3               	addwf	prodl,w,c
 11151  00358A  6EF6               	movwf	tblptrl,c
 11152  00358C  0E03               	movlw	high _BitNum2SetMask
 11153  00358E  20F4               	addwfc	prodh,w,c
 11154  003590  6EF7               	movwf	tblptrh,c
 11155  003592                     	if	0	;There are less than 3 active tblptr bytes
 11156  003592                     	endif
 11157  003592  0009               	tblrd		*+
 11158  003594  CFF5 F07A          	movff	tablat,??_ES_PostToService
 11159  003598  0009               	tblrd		*+
 11160  00359A  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
 11161  00359E  0100               	movlb	0	; () banked
 11162  0035A0  517A               	movf	??_ES_PostToService& (0+255),w,b
 11163  0035A2  0100               	movlb	0	; () banked
 11164  0035A4  13DD               	iorwf	_Ready& (0+255),f,b
 11165  0035A6  0100               	movlb	0	; () banked
 11166  0035A8  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
 11167  0035AA  0100               	movlb	0	; () banked
 11168  0035AC  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;ES_Framework.c: 356: return 1;
 11172  0035AE  0E01               	movlw	1
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;ES_Framework.c: 357: } else
 11176                           
 11177                           ; BSR set to: 0
 11178  0035B0  0012               	return	
 11179  0035B2                     l2999:
 11180                           
 11181                           ;ES_Framework.c: 358: return 0;
 11182  0035B2  0E00               	movlw	0
 11183  0035B4  0012               	return	
 11184  0035B6                     __end_of_ES_PostToService:
 11185                           	opt stack 0
 11186                           tosu	equ	0xFFF
 11187                           tosh	equ	0xFFE
 11188                           tosl	equ	0xFFD
 11189                           pclath	equ	0xFFA
 11190                           tblptru	equ	0xFF8
 11191                           tblptrh	equ	0xFF7
 11192                           tblptrl	equ	0xFF6
 11193                           tablat	equ	0xFF5
 11194                           prodh	equ	0xFF4
 11195                           prodl	equ	0xFF3
 11196                           intcon	equ	0xFF2
 11197                           postinc0	equ	0xFEE
 11198                           wreg	equ	0xFE8
 11199                           indf1	equ	0xFE7
 11200                           postinc1	equ	0xFE6
 11201                           postdec1	equ	0xFE5
 11202                           fsr1h	equ	0xFE2
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           plusw2	equ	0xFDB
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _ES_EnQueueFIFO *****************
 11213 ;; Defined at:
 11214 ;;		line 85 in file "ES_Queue.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
 11217 ;;		 -> Queue1(12), Queue0(12), 
 11218 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
 11219 ;; Auto vars:     Size  Location     Type
 11220 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
 11221 ;;		 -> Queue1(12), Queue0(12), 
 11222 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      unsigned char 
 11225 ;; Registers used:
 11226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11232 ;;      Params:         0       5       0       0
 11233 ;;      Locals:         0       3       0       0
 11234 ;;      Temps:          0       3       0       0
 11235 ;;      Totals:         0      11       0       0
 11236 ;;Total ram usage:       11 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    8
 11239 ;; This function calls:
 11240 ;;		___awmod
 11241 ;;		___wmul
 11242 ;; This function is called by:
 11243 ;;		_ES_PostToService
 11244 ;;		_ES_PostAll
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	text43
 11249  002C5C                     __ptext43:
 11250                           	opt stack 0
 11251  002C5C                     _ES_EnQueueFIFO:
 11252                           	opt stack 17
 11253                           
 11254                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11255                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11256                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11257                           
 11258                           ;incstack = 0
 11259  002C5C  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
 11260  002C60  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
 11261                           
 11262                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11263  002C64  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11264  002C68  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11265  002C6C  0100               	movlb	0	; () banked
 11266  002C6E  EE10 F002          	lfsr	1,2
 11267  002C72  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11268  002C74  26E1               	addwf	fsr1l,f,c
 11269  002C76  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11270  002C78  22E2               	addwfc	fsr1h,f,c
 11271  002C7A  50DE               	movf	postinc2,w,c
 11272  002C7C  5CE6               	subwf	postinc1,w,c
 11273  002C7E  B0D8               	btfsc	status,0,c
 11274  002C80  D05C               	goto	l2983
 11275                           
 11276                           ; BSR set to: 0
 11277                           
 11278                           ;ES_Queue.c: 92: {
 11279                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11280  002C82  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
 11281  002C86  9EF2               	bcf	intcon,7,c	;volatile
 11282                           
 11283                           ; BSR set to: 0
 11284                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11285                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11286                           
 11287                           ; BSR set to: 0
 11288  002C88  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11289  002C8C  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11290  002C90  50DF               	movf	indf2,w,c
 11291  002C92  0100               	movlb	0	; () banked
 11292  002C94  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
 11293  002C96  0100               	movlb	0	; () banked
 11294  002C98  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
 11295  002C9A  0100               	movlb	0	; () banked
 11296  002C9C  6F62               	movwf	___awmod@divisor& (0+255),b
 11297  002C9E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
 11298  002CA0  0100               	movlb	0	; () banked
 11299  002CA2  EE20 F002          	lfsr	2,2
 11300  002CA6  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11301  002CA8  26D9               	addwf	fsr2l,f,c
 11302  002CAA  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11303  002CAC  22DA               	addwfc	fsr2h,f,c
 11304  002CAE  50DF               	movf	indf2,w,c
 11305  002CB0  0100               	movlb	0	; () banked
 11306  002CB2  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
 11307  002CB4  0100               	movlb	0	; () banked
 11308  002CB6  EE20 F001          	lfsr	2,1
 11309  002CBA  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11310  002CBC  26D9               	addwf	fsr2l,f,c
 11311  002CBE  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11312  002CC0  22DA               	addwfc	fsr2h,f,c
 11313  002CC2  50DF               	movf	indf2,w,c
 11314  002CC4  0100               	movlb	0	; () banked
 11315  002CC6  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
 11316  002CC8  0100               	movlb	0	; () banked
 11317  002CCA  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
 11318  002CCC  0100               	movlb	0	; () banked
 11319  002CCE  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
 11320  002CD0  0100               	movlb	0	; () banked
 11321  002CD2  6F60               	movwf	___awmod@dividend& (0+255),b
 11322  002CD4  0100               	movlb	0	; () banked
 11323  002CD6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 11324  002CD8  0100               	movlb	0	; () banked
 11325  002CDA  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
 11326  002CDC  ECCE  F018         	call	___awmod	;wreg free
 11327  002CE0  0E01               	movlw	1
 11328  002CE2  0100               	movlb	0	; () banked
 11329  002CE4  2560               	addwf	?___awmod& (0+255),w,b
 11330  002CE6  0100               	movlb	0	; () banked
 11331  002CE8  6F66               	movwf	___wmul@multiplier& (0+255),b
 11332  002CEA  0E00               	movlw	0
 11333  002CEC  0100               	movlb	0	; () banked
 11334  002CEE  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 11335  002CF0  0100               	movlb	0	; () banked
 11336  002CF2  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
 11337  002CF4  0E00               	movlw	0
 11338  002CF6  0100               	movlb	0	; () banked
 11339  002CF8  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11340  002CFA  0E03               	movlw	3
 11341  002CFC  6F68               	movwf	___wmul@multiplicand& (0+255),b
 11342  002CFE  ECB4  F01C         	call	___wmul	;wreg free
 11343  002D02  0100               	movlb	0	; () banked
 11344  002D04  5166               	movf	?___wmul& (0+255),w,b
 11345  002D06  0100               	movlb	0	; () banked
 11346  002D08  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
 11347  002D0A  6ED9               	movwf	fsr2l,c
 11348  002D0C  0100               	movlb	0	; () banked
 11349  002D0E  5167               	movf	(?___wmul+1)& (0+255),w,b
 11350  002D10  0100               	movlb	0	; () banked
 11351  002D12  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
 11352  002D14  6EDA               	movwf	fsr2h,c
 11353  002D16  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
 11354  002D1A  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
 11355  002D1E  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11359  002D22  0100               	movlb	0	; () banked
 11360  002D24  EE20 F002          	lfsr	2,2
 11361  002D28  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11362  002D2A  26D9               	addwf	fsr2l,f,c
 11363  002D2C  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11364  002D2E  22DA               	addwfc	fsr2h,f,c
 11365  002D30  2ADF               	incf	indf2,f,c
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11369  002D32  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;ES_Queue.c: 101: return(1);
 11373  002D36  0E01               	movlw	1
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;ES_Queue.c: 102: }else
 11377                           
 11378                           ; BSR set to: 0
 11379  002D38  0012               	return	
 11380  002D3A                     l2983:
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;ES_Queue.c: 103: return(0);
 11384  002D3A  0E00               	movlw	0
 11385                           
 11386                           ; BSR set to: 0
 11387  002D3C  0012               	return	
 11388  002D3E                     __end_of_ES_EnQueueFIFO:
 11389                           	opt stack 0
 11390                           tosu	equ	0xFFF
 11391                           tosh	equ	0xFFE
 11392                           tosl	equ	0xFFD
 11393                           pclath	equ	0xFFA
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           postinc0	equ	0xFEE
 11402                           wreg	equ	0xFE8
 11403                           indf1	equ	0xFE7
 11404                           postinc1	equ	0xFE6
 11405                           postdec1	equ	0xFE5
 11406                           fsr1h	equ	0xFE2
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           plusw2	equ	0xFDB
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function ___wmul *****************
 11417 ;; Defined at:
 11418 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;  multiplier      2    6[BANK0 ] unsigned int 
 11421 ;;  multiplicand    2    8[BANK0 ] unsigned int 
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  product         2   10[BANK0 ] unsigned int 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  2    6[BANK0 ] unsigned int 
 11426 ;; Registers used:
 11427 ;;		wreg, status,2, status,0, prodl, prodh
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11433 ;;      Params:         0       4       0       0
 11434 ;;      Locals:         0       2       0       0
 11435 ;;      Temps:          0       0       0       0
 11436 ;;      Totals:         0       6       0       0
 11437 ;;Total ram usage:        6 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    7
 11440 ;; This function calls:
 11441 ;;		Nothing
 11442 ;; This function is called by:
 11443 ;;		_ES_EnQueueFIFO
 11444 ;;		_ES_DeQueue
 11445 ;;		_HSV_to_RGB
 11446 ;;		_HueTest
 11447 ;;		i2_ES_EnQueueFIFO
 11448 ;;		_ES_EnQueueLIFO
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           	psect	text44
 11453  003968                     __ptext44:
 11454                           	opt stack 0
 11455  003968                     ___wmul:
 11456                           	opt stack 17
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;incstack = 0
 11460  003968  0100               	movlb	0	; () banked
 11461  00396A  5166               	movf	___wmul@multiplier& (0+255),w,b
 11462  00396C  0100               	movlb	0	; () banked
 11463  00396E  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11464  003970  CFF3 F06A          	movff	prodl,___wmul@product
 11465  003974  CFF4 F06B          	movff	prodh,___wmul@product+1
 11466  003978  0100               	movlb	0	; () banked
 11467  00397A  5166               	movf	___wmul@multiplier& (0+255),w,b
 11468  00397C  0100               	movlb	0	; () banked
 11469  00397E  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11470  003980  50F3               	movf	prodl,w,c
 11471  003982  0100               	movlb	0	; () banked
 11472  003984  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11473  003986  0100               	movlb	0	; () banked
 11474  003988  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11475  00398A  0100               	movlb	0	; () banked
 11476  00398C  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11477  00398E  50F3               	movf	prodl,w,c
 11478  003990  0100               	movlb	0	; () banked
 11479  003992  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11480                           
 11481                           ; BSR set to: 0
 11482  003994  C06A  F066         	movff	___wmul@product,?___wmul
 11483  003998  C06B  F067         	movff	___wmul@product+1,?___wmul+1
 11484  00399C  0012               	return	
 11485  00399E                     __end_of___wmul:
 11486                           	opt stack 0
 11487                           tosu	equ	0xFFF
 11488                           tosh	equ	0xFFE
 11489                           tosl	equ	0xFFD
 11490                           pclath	equ	0xFFA
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           postinc0	equ	0xFEE
 11499                           wreg	equ	0xFE8
 11500                           indf1	equ	0xFE7
 11501                           postinc1	equ	0xFE6
 11502                           postdec1	equ	0xFE5
 11503                           fsr1h	equ	0xFE2
 11504                           fsr1l	equ	0xFE1
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           plusw2	equ	0xFDB
 11509                           fsr2h	equ	0xFDA
 11510                           fsr2l	equ	0xFD9
 11511                           status	equ	0xFD8
 11512                           
 11513 ;; *************** function ___awmod *****************
 11514 ;; Defined at:
 11515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;  dividend        2    0[BANK0 ] int 
 11518 ;;  divisor         2    2[BANK0 ] int 
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;  sign            1    5[BANK0 ] unsigned char 
 11521 ;;  counter         1    4[BANK0 ] unsigned char 
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  2    0[BANK0 ] int 
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11531 ;;      Params:         0       4       0       0
 11532 ;;      Locals:         0       2       0       0
 11533 ;;      Temps:          0       0       0       0
 11534 ;;      Totals:         0       6       0       0
 11535 ;;Total ram usage:        6 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    7
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_ES_EnQueueFIFO
 11542 ;;		_HueTest
 11543 ;;		_CenterBreathe
 11544 ;;		_SingleFadedLoop
 11545 ;;		_DoubleFadedLoop
 11546 ;;		_BrokenPinwheel
 11547 ;;		_MirroredQuadrants
 11548 ;;		_SingleFocusPulse
 11549 ;;		_DoubleBrokenLoop
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text45
 11554  00319C                     __ptext45:
 11555                           	opt stack 0
 11556  00319C                     ___awmod:
 11557                           	opt stack 17
 11558                           
 11559                           ; BSR set to: 0
 11560                           ;incstack = 0
 11561  00319C  0E00               	movlw	0
 11562  00319E  0100               	movlb	0	; () banked
 11563  0031A0  6F65               	movwf	___awmod@sign& (0+255),b
 11564                           
 11565                           ; BSR set to: 0
 11566  0031A2  0100               	movlb	0	; () banked
 11567  0031A4  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11568  0031A6  D008               	goto	l2939
 11569                           
 11570                           ; BSR set to: 0
 11571  0031A8  0100               	movlb	0	; () banked
 11572  0031AA  6D60               	negf	___awmod@dividend& (0+255),b
 11573  0031AC  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11574  0031AE  B0D8               	btfsc	status,0,c
 11575  0031B0  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11576                           
 11577                           ; BSR set to: 0
 11578  0031B2  0E01               	movlw	1
 11579  0031B4  0100               	movlb	0	; () banked
 11580  0031B6  6F65               	movwf	___awmod@sign& (0+255),b
 11581  0031B8                     l2939:
 11582                           
 11583                           ; BSR set to: 0
 11584  0031B8  0100               	movlb	0	; () banked
 11585  0031BA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11586  0031BC  D005               	goto	l2943
 11587                           
 11588                           ; BSR set to: 0
 11589  0031BE  0100               	movlb	0	; () banked
 11590  0031C0  6D62               	negf	___awmod@divisor& (0+255),b
 11591  0031C2  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 11592  0031C4  B0D8               	btfsc	status,0,c
 11593  0031C6  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 11594  0031C8                     l2943:
 11595                           
 11596                           ; BSR set to: 0
 11597  0031C8  0100               	movlb	0	; () banked
 11598  0031CA  5162               	movf	___awmod@divisor& (0+255),w,b
 11599  0031CC  0100               	movlb	0	; () banked
 11600  0031CE  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11601  0031D0  B4D8               	btfsc	status,2,c
 11602  0031D2  D026               	goto	l2959
 11603                           
 11604                           ; BSR set to: 0
 11605  0031D4  0E01               	movlw	1
 11606  0031D6  0100               	movlb	0	; () banked
 11607  0031D8  6F64               	movwf	___awmod@counter& (0+255),b
 11608  0031DA  D006               	goto	l2949
 11609  0031DC                     l2947:
 11610                           
 11611                           ; BSR set to: 0
 11612  0031DC  0100               	movlb	0	; () banked
 11613  0031DE  90D8               	bcf	status,0,c
 11614  0031E0  3762               	rlcf	___awmod@divisor& (0+255),f,b
 11615  0031E2  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11616  0031E4  0100               	movlb	0	; () banked
 11617  0031E6  2B64               	incf	___awmod@counter& (0+255),f,b
 11618  0031E8                     l2949:
 11619                           
 11620                           ; BSR set to: 0
 11621  0031E8  0100               	movlb	0	; () banked
 11622  0031EA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11623  0031EC  D7F7               	goto	l2947
 11624  0031EE                     l2951:
 11625                           
 11626                           ; BSR set to: 0
 11627  0031EE  0100               	movlb	0	; () banked
 11628  0031F0  5162               	movf	___awmod@divisor& (0+255),w,b
 11629  0031F2  0100               	movlb	0	; () banked
 11630  0031F4  5D60               	subwf	___awmod@dividend& (0+255),w,b
 11631  0031F6  0100               	movlb	0	; () banked
 11632  0031F8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11633  0031FA  0100               	movlb	0	; () banked
 11634  0031FC  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11635  0031FE  A0D8               	btfss	status,0,c
 11636  003200  D008               	goto	l2955
 11637                           
 11638                           ; BSR set to: 0
 11639  003202  0100               	movlb	0	; () banked
 11640  003204  5162               	movf	___awmod@divisor& (0+255),w,b
 11641  003206  0100               	movlb	0	; () banked
 11642  003208  5F60               	subwf	___awmod@dividend& (0+255),f,b
 11643  00320A  0100               	movlb	0	; () banked
 11644  00320C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11645  00320E  0100               	movlb	0	; () banked
 11646  003210  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11647  003212                     l2955:
 11648                           
 11649                           ; BSR set to: 0
 11650  003212  0100               	movlb	0	; () banked
 11651  003214  90D8               	bcf	status,0,c
 11652  003216  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11653  003218  3362               	rrcf	___awmod@divisor& (0+255),f,b
 11654                           
 11655                           ; BSR set to: 0
 11656  00321A  0100               	movlb	0	; () banked
 11657  00321C  2F64               	decfsz	___awmod@counter& (0+255),f,b
 11658  00321E  D7E7               	goto	l2951
 11659  003220                     l2959:
 11660                           
 11661                           ; BSR set to: 0
 11662  003220  0100               	movlb	0	; () banked
 11663  003222  5165               	movf	___awmod@sign& (0+255),w,b
 11664  003224  0100               	movlb	0	; () banked
 11665  003226  B4D8               	btfsc	status,2,c
 11666  003228  D005               	goto	l2963
 11667                           
 11668                           ; BSR set to: 0
 11669  00322A  0100               	movlb	0	; () banked
 11670  00322C  6D60               	negf	___awmod@dividend& (0+255),b
 11671  00322E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11672  003230  B0D8               	btfsc	status,0,c
 11673  003232  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11674  003234                     l2963:
 11675                           
 11676                           ; BSR set to: 0
 11677  003234  C060  F060         	movff	___awmod@dividend,?___awmod
 11678  003238  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 11679  00323C  0012               	return	
 11680  00323E                     __end_of___awmod:
 11681                           	opt stack 0
 11682                           tosu	equ	0xFFF
 11683                           tosh	equ	0xFFE
 11684                           tosl	equ	0xFFD
 11685                           pclath	equ	0xFFA
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           postinc0	equ	0xFEE
 11694                           wreg	equ	0xFE8
 11695                           indf1	equ	0xFE7
 11696                           postinc1	equ	0xFE6
 11697                           postdec1	equ	0xFE5
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           plusw2	equ	0xFDB
 11704                           fsr2h	equ	0xFDA
 11705                           fsr2l	equ	0xFD9
 11706                           status	equ	0xFD8
 11707                           
 11708 ;; *************** function _DotStar_Init *****************
 11709 ;; Defined at:
 11710 ;;		line 50 in file "Pattern_DotStarLED.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  brightnessPo    2    0[BANK0 ] PTR unsigned char 
 11713 ;;		 -> PatternConfigs(4), 
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;		None
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  1    wreg      void 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11725 ;;      Params:         0       2       0       0
 11726 ;;      Locals:         0       0       0       0
 11727 ;;      Temps:          0       0       0       0
 11728 ;;      Totals:         0       2       0       0
 11729 ;;Total ram usage:        2 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    7
 11732 ;; This function calls:
 11733 ;;		Nothing
 11734 ;; This function is called by:
 11735 ;;		_InitPatternControlService
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           	psect	text46
 11740  003748                     __ptext46:
 11741                           	opt stack 0
 11742  003748                     _DotStar_Init:
 11743                           	opt stack 21
 11744                           
 11745                           ;Pattern_DotStarLED.c: 52: Brightness = brightnessPointer;
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;incstack = 0
 11749  003748  C060  F0F0         	movff	DotStar_Init@brightnessPointer,_Brightness
 11750  00374C  C061  F0F1         	movff	DotStar_Init@brightnessPointer+1,_Brightness+1
 11751                           
 11752                           ;Pattern_DotStarLED.c: 54: PixelFrames[0] = 0x0;
 11753  003750  0E00               	movlw	0
 11754  003752  CFE8 F1C4          	movff	wreg,_PixelFrames
 11755  003756  0E00               	movlw	0
 11756  003758  CFE8 F1C5          	movff	wreg,_PixelFrames+1
 11757  00375C  0E00               	movlw	0
 11758  00375E  CFE8 F1C6          	movff	wreg,_PixelFrames+2
 11759  003762  0E00               	movlw	0
 11760  003764  CFE8 F1C7          	movff	wreg,_PixelFrames+3
 11761                           
 11762                           ;Pattern_DotStarLED.c: 55: PixelFrames[76+1] = 0xffffffff;
 11763  003768  0EFF               	movlw	255
 11764  00376A  CFE8 F2F8          	movff	wreg,_PixelFrames+308
 11765  00376E  0EFF               	movlw	255
 11766  003770  CFE8 F2F9          	movff	wreg,_PixelFrames+309
 11767  003774  0EFF               	movlw	255
 11768  003776  CFE8 F2FA          	movff	wreg,_PixelFrames+310
 11769  00377A  0EFF               	movlw	255
 11770  00377C  CFE8 F2FB          	movff	wreg,_PixelFrames+311
 11771                           
 11772                           ;Pattern_DotStarLED.c: 57: PixelFrames[76+1+1] = 0xffffffff;
 11773  003780  0EFF               	movlw	255
 11774  003782  CFE8 F2FC          	movff	wreg,_PixelFrames+312
 11775  003786  0EFF               	movlw	255
 11776  003788  CFE8 F2FD          	movff	wreg,_PixelFrames+313
 11777  00378C  0EFF               	movlw	255
 11778  00378E  CFE8 F2FE          	movff	wreg,_PixelFrames+314
 11779  003792  0EFF               	movlw	255
 11780  003794  CFE8 F2FF          	movff	wreg,_PixelFrames+315
 11781  003798  0012               	return		;funcret
 11782  00379A                     __end_of_DotStar_Init:
 11783                           	opt stack 0
 11784                           tosu	equ	0xFFF
 11785                           tosh	equ	0xFFE
 11786                           tosl	equ	0xFFD
 11787                           pclath	equ	0xFFA
 11788                           tblptru	equ	0xFF8
 11789                           tblptrh	equ	0xFF7
 11790                           tblptrl	equ	0xFF6
 11791                           tablat	equ	0xFF5
 11792                           prodh	equ	0xFF4
 11793                           prodl	equ	0xFF3
 11794                           intcon	equ	0xFF2
 11795                           postinc0	equ	0xFEE
 11796                           wreg	equ	0xFE8
 11797                           indf1	equ	0xFE7
 11798                           postinc1	equ	0xFE6
 11799                           postdec1	equ	0xFE5
 11800                           fsr1h	equ	0xFE2
 11801                           fsr1l	equ	0xFE1
 11802                           indf2	equ	0xFDF
 11803                           postinc2	equ	0xFDE
 11804                           postdec2	equ	0xFDD
 11805                           plusw2	equ	0xFDB
 11806                           fsr2h	equ	0xFDA
 11807                           fsr2l	equ	0xFD9
 11808                           status	equ	0xFD8
 11809                           
 11810 ;; *************** function _CAN_Init *****************
 11811 ;; Defined at:
 11812 ;;		line 59 in file "CAN_RX_HW.c"
 11813 ;; Parameters:    Size  Location     Type
 11814 ;;		None
 11815 ;; Auto vars:     Size  Location     Type
 11816 ;;		None
 11817 ;; Return value:  Size  Location     Type
 11818 ;;                  1    wreg      void 
 11819 ;; Registers used:
 11820 ;;		wreg, status,2, cstack
 11821 ;; Tracked objects:
 11822 ;;		On entry : 0/0
 11823 ;;		On exit  : 0/0
 11824 ;;		Unchanged: 0/0
 11825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11826 ;;      Params:         0       0       0       0
 11827 ;;      Locals:         0       0       0       0
 11828 ;;      Temps:          0       0       0       0
 11829 ;;      Totals:         0       0       0       0
 11830 ;;Total ram usage:        0 bytes
 11831 ;; Hardware stack levels used:    1
 11832 ;; Hardware stack levels required when called:    8
 11833 ;; This function calls:
 11834 ;;		_InitCanHardware
 11835 ;;		_InitPins
 11836 ;; This function is called by:
 11837 ;;		_InitPatternControlService
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           	psect	text47
 11842  003C06                     __ptext47:
 11843                           	opt stack 0
 11844  003C06                     _CAN_Init:
 11845                           	opt stack 20
 11846                           
 11847                           ;CAN_RX_HW.c: 60: InitPins();
 11848                           
 11849                           ;incstack = 0
 11850  003C06  ECAC  F01D         	call	_InitPins	;wreg free
 11851                           
 11852                           ;CAN_RX_HW.c: 61: InitCanHardware();
 11853  003C0A  EC26  F01A         	call	_InitCanHardware	;wreg free
 11854  003C0E  0012               	return		;funcret
 11855  003C10                     __end_of_CAN_Init:
 11856                           	opt stack 0
 11857                           tosu	equ	0xFFF
 11858                           tosh	equ	0xFFE
 11859                           tosl	equ	0xFFD
 11860                           pclath	equ	0xFFA
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           postinc0	equ	0xFEE
 11869                           wreg	equ	0xFE8
 11870                           indf1	equ	0xFE7
 11871                           postinc1	equ	0xFE6
 11872                           postdec1	equ	0xFE5
 11873                           fsr1h	equ	0xFE2
 11874                           fsr1l	equ	0xFE1
 11875                           indf2	equ	0xFDF
 11876                           postinc2	equ	0xFDE
 11877                           postdec2	equ	0xFDD
 11878                           plusw2	equ	0xFDB
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function _InitPins *****************
 11884 ;; Defined at:
 11885 ;;		line 162 in file "CAN_RX_HW.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11899 ;;      Params:         0       0       0       0
 11900 ;;      Locals:         0       0       0       0
 11901 ;;      Temps:          0       0       0       0
 11902 ;;      Totals:         0       0       0       0
 11903 ;;Total ram usage:        0 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    7
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_CAN_Init
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text48
 11914  003B58                     __ptext48:
 11915                           	opt stack 0
 11916  003B58                     _InitPins:
 11917                           	opt stack 20
 11918                           
 11919                           ;CAN_RX_HW.c: 165: PORTB = 0x00;
 11920                           
 11921                           ;incstack = 0
 11922  003B58  0E00               	movlw	0
 11923  003B5A  6E81               	movwf	3969,c	;volatile
 11924                           
 11925                           ;CAN_RX_HW.c: 166: LATB = 0x00;
 11926  003B5C  0E00               	movlw	0
 11927  003B5E  6E8A               	movwf	3978,c	;volatile
 11928                           
 11929                           ;CAN_RX_HW.c: 167: TRISBbits.TRISB2 = 0;
 11930  003B60  9493               	bcf	3987,2,c	;volatile
 11931                           
 11932                           ;CAN_RX_HW.c: 168: TRISBbits.TRISB3 = 1;
 11933  003B62  8693               	bsf	3987,3,c	;volatile
 11934                           
 11935                           ;CAN_RX_HW.c: 171: PORTA = 0x00;
 11936  003B64  0E00               	movlw	0
 11937  003B66  6E80               	movwf	3968,c	;volatile
 11938                           
 11939                           ;CAN_RX_HW.c: 172: LATA = 0x00;
 11940  003B68  0E00               	movlw	0
 11941  003B6A  6E89               	movwf	3977,c	;volatile
 11942                           
 11943                           ;CAN_RX_HW.c: 173: TRISA = 0x00;
 11944  003B6C  0E00               	movlw	0
 11945  003B6E  6E92               	movwf	3986,c	;volatile
 11946  003B70  0012               	return		;funcret
 11947  003B72                     __end_of_InitPins:
 11948                           	opt stack 0
 11949                           tosu	equ	0xFFF
 11950                           tosh	equ	0xFFE
 11951                           tosl	equ	0xFFD
 11952                           pclath	equ	0xFFA
 11953                           tblptru	equ	0xFF8
 11954                           tblptrh	equ	0xFF7
 11955                           tblptrl	equ	0xFF6
 11956                           tablat	equ	0xFF5
 11957                           prodh	equ	0xFF4
 11958                           prodl	equ	0xFF3
 11959                           intcon	equ	0xFF2
 11960                           postinc0	equ	0xFEE
 11961                           wreg	equ	0xFE8
 11962                           indf1	equ	0xFE7
 11963                           postinc1	equ	0xFE6
 11964                           postdec1	equ	0xFE5
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           plusw2	equ	0xFDB
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _InitCanHardware *****************
 11976 ;; Defined at:
 11977 ;;		line 102 in file "CAN_RX_HW.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;		None
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		wreg, status,2
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11991 ;;      Params:         0       0       0       0
 11992 ;;      Locals:         0       0       0       0
 11993 ;;      Temps:          0       0       0       0
 11994 ;;      Totals:         0       0       0       0
 11995 ;;Total ram usage:        0 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    7
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		_CAN_Init
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text49
 12006  00344C                     __ptext49:
 12007                           	opt stack 0
 12008  00344C                     _InitCanHardware:
 12009                           	opt stack 20
 12010                           
 12011                           ;CAN_RX_HW.c: 106: CANCON = 0x80;
 12012                           
 12013                           ;incstack = 0
 12014  00344C  0E80               	movlw	128
 12015  00344E  6E6F               	movwf	3951,c	;volatile
 12016  003450                     l613:
 12017  003450  AE6E               	btfss	3950,7,c	;volatile
 12018  003452  D7FE               	goto	l613
 12019                           
 12020                           ;CAN_RX_HW.c: 109: CIOCON = 0x20;
 12021  003454  0E20               	movlw	32
 12022  003456  6E73               	movwf	3955,c	;volatile
 12023                           
 12024                           ;CAN_RX_HW.c: 112: BRGCON2bits.SEG2PHTS = 1;
 12025  003458  8E71               	bsf	3953,7,c	;volatile
 12026                           
 12027                           ;CAN_RX_HW.c: 114: BRGCON1bits.BRP0 = 1;
 12028  00345A  8070               	bsf	3952,0,c	;volatile
 12029                           
 12030                           ;CAN_RX_HW.c: 115: BRGCON1bits.BRP1 = 0;
 12031  00345C  9270               	bcf	3952,1,c	;volatile
 12032                           
 12033                           ;CAN_RX_HW.c: 116: BRGCON2bits.PRSEG0 = 0;
 12034  00345E  9071               	bcf	3953,0,c	;volatile
 12035                           
 12036                           ;CAN_RX_HW.c: 117: BRGCON2bits.PRSEG1 = 1;
 12037  003460  8271               	bsf	3953,1,c	;volatile
 12038                           
 12039                           ;CAN_RX_HW.c: 118: BRGCON2bits.PRSEG2 = 1;
 12040  003462  8471               	bsf	3953,2,c	;volatile
 12041                           
 12042                           ;CAN_RX_HW.c: 119: BRGCON2bits.SEG1PH0 = 1;
 12043  003464  8671               	bsf	3953,3,c	;volatile
 12044                           
 12045                           ;CAN_RX_HW.c: 120: BRGCON2bits.SEG1PH1 = 0;
 12046  003466  9871               	bcf	3953,4,c	;volatile
 12047                           
 12048                           ;CAN_RX_HW.c: 121: BRGCON2bits.SEG1PH2 = 1;
 12049  003468  8A71               	bsf	3953,5,c	;volatile
 12050                           
 12051                           ;CAN_RX_HW.c: 122: BRGCON3bits.SEG2PH0 = 1;
 12052  00346A  8072               	bsf	3954,0,c	;volatile
 12053                           
 12054                           ;CAN_RX_HW.c: 123: BRGCON1bits.SJW0 = 1;
 12055  00346C  8C70               	bsf	3952,6,c	;volatile
 12056                           
 12057                           ;CAN_RX_HW.c: 127: RXB0CONbits.RXB0DBEN = 0;
 12058  00346E  9460               	bcf	3936,2,c	;volatile
 12059                           
 12060                           ;CAN_RX_HW.c: 128: RXB0CONbits.RXM0 = 0;
 12061  003470  9A60               	bcf	3936,5,c	;volatile
 12062                           
 12063                           ;CAN_RX_HW.c: 129: RXB0CONbits.RXM1 = 0;
 12064  003472  9C60               	bcf	3936,6,c	;volatile
 12065                           
 12066                           ;CAN_RX_HW.c: 130: RXF0SIDH = 0x00;
 12067  003474  0E00               	movlw	0
 12068  003476  010F               	movlb	15	; () banked
 12069  003478  6F00               	movwf	0,b	;volatile
 12070                           
 12071                           ;CAN_RX_HW.c: 131: RXF0SIDL = 0x08;
 12072  00347A  0E08               	movlw	8
 12073  00347C  010F               	movlb	15	; () banked
 12074  00347E  6F01               	movwf	1,b	;volatile
 12075                           
 12076                           ;CAN_RX_HW.c: 132: RXF0EIDH = 0x00;
 12077  003480  0E00               	movlw	0
 12078  003482  010F               	movlb	15	; () banked
 12079  003484  6F02               	movwf	2,b	;volatile
 12080                           
 12081                           ;CAN_RX_HW.c: 133: RXF0EIDL = 0x01;
 12082  003486  0E01               	movlw	1
 12083  003488  010F               	movlb	15	; () banked
 12084  00348A  6F03               	movwf	3,b	;volatile
 12085                           
 12086                           ;CAN_RX_HW.c: 135: RXM0SIDH = 0x00;
 12087  00348C  0E00               	movlw	0
 12088  00348E  010F               	movlb	15	; () banked
 12089  003490  6F18               	movwf	24,b	;volatile
 12090                           
 12091                           ;CAN_RX_HW.c: 136: RXM0SIDL = 0x00;
 12092  003492  0E00               	movlw	0
 12093  003494  010F               	movlb	15	; () banked
 12094  003496  6F19               	movwf	25,b	;volatile
 12095                           
 12096                           ;CAN_RX_HW.c: 137: RXM0EIDH = 0x00;
 12097  003498  0E00               	movlw	0
 12098  00349A  010F               	movlb	15	; () banked
 12099  00349C  6F1A               	movwf	26,b	;volatile
 12100                           
 12101                           ;CAN_RX_HW.c: 138: RXM0EIDL = 0x01;
 12102  00349E  0E01               	movlw	1
 12103  0034A0  010F               	movlb	15	; () banked
 12104  0034A2  6F1B               	movwf	27,b	;volatile
 12105                           
 12106                           ;CAN_RX_HW.c: 142: ECANCON = 0x00;
 12107  0034A4  0E00               	movlw	0
 12108  0034A6  6E77               	movwf	3959,c	;volatile
 12109                           
 12110                           ;CAN_RX_HW.c: 143: CANCON = 0b00010000;
 12111  0034A8  0E10               	movlw	16
 12112  0034AA  6E6F               	movwf	3951,c	;volatile
 12113  0034AC                     l616:
 12114  0034AC  BE6E               	btfsc	3950,7,c	;volatile
 12115  0034AE  D7FE               	goto	l616
 12116                           
 12117                           ;CAN_RX_HW.c: 147: RXB0IE = 1;
 12118  0034B0  80A3               	bsf	4003,0,c	;volatile
 12119                           
 12120                           ;CAN_RX_HW.c: 148: ERRIE = 1;
 12121  0034B2  8AA3               	bsf	4003,5,c	;volatile
 12122                           
 12123                           ;CAN_RX_HW.c: 149: IRXIE = 1;
 12124  0034B4  8EA3               	bsf	4003,7,c	;volatile
 12125                           
 12126                           ;CAN_RX_HW.c: 153: RXB0IF = 0;
 12127  0034B6  90A4               	bcf	4004,0,c	;volatile
 12128                           
 12129                           ;CAN_RX_HW.c: 154: ERRIF = 0;
 12130  0034B8  9AA4               	bcf	4004,5,c	;volatile
 12131                           
 12132                           ;CAN_RX_HW.c: 155: IRXIF = 0;
 12133  0034BA  9EA4               	bcf	4004,7,c	;volatile
 12134                           
 12135                           ;CAN_RX_HW.c: 156: TXB0IE = 1;
 12136  0034BC  84A3               	bsf	4003,2,c	;volatile
 12137                           
 12138                           ;CAN_RX_HW.c: 157: TXB0IF = 0;
 12139  0034BE  94A4               	bcf	4004,2,c	;volatile
 12140                           
 12141                           ;CAN_RX_HW.c: 158: TXB0CONbits.TXREQ = 0;
 12142  0034C0  010F               	movlb	15	; () banked
 12143  0034C2  9740               	bcf	64,3,b	;volatile
 12144                           
 12145                           ;CAN_RX_HW.c: 159: RXB0CONbits.RXFUL = 0;
 12146  0034C4  9E60               	bcf	3936,7,c	;volatile
 12147                           
 12148                           ; BSR set to: 15
 12149  0034C6  0012               	return		;funcret
 12150  0034C8                     __end_of_InitCanHardware:
 12151                           	opt stack 0
 12152                           tosu	equ	0xFFF
 12153                           tosh	equ	0xFFE
 12154                           tosl	equ	0xFFD
 12155                           pclath	equ	0xFFA
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           postinc0	equ	0xFEE
 12164                           wreg	equ	0xFE8
 12165                           indf1	equ	0xFE7
 12166                           postinc1	equ	0xFE6
 12167                           postdec1	equ	0xFE5
 12168                           fsr1h	equ	0xFE2
 12169                           fsr1l	equ	0xFE1
 12170                           indf2	equ	0xFDF
 12171                           postinc2	equ	0xFDE
 12172                           postdec2	equ	0xFDD
 12173                           plusw2	equ	0xFDB
 12174                           fsr2h	equ	0xFDA
 12175                           fsr2l	equ	0xFD9
 12176                           status	equ	0xFD8
 12177                           
 12178 ;; *************** function _ES_Timer_Init *****************
 12179 ;; Defined at:
 12180 ;;		line 130 in file "ES_Timers.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;  Rate            2    2[BANK0 ] enum E15423
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;		None
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      void 
 12187 ;; Registers used:
 12188 ;;		wreg, status,2, cstack
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12194 ;;      Params:         0       2       0       0
 12195 ;;      Locals:         0       0       0       0
 12196 ;;      Temps:          0       0       0       0
 12197 ;;      Totals:         0       2       0       0
 12198 ;;Total ram usage:        2 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    8
 12201 ;; This function calls:
 12202 ;;		__HW_Timer_Init
 12203 ;; This function is called by:
 12204 ;;		_ES_Initialize
 12205 ;; This function uses a non-reentrant model
 12206 ;;
 12207                           
 12208                           	psect	text50
 12209  003BE0                     __ptext50:
 12210                           	opt stack 0
 12211  003BE0                     _ES_Timer_Init:
 12212                           	opt stack 21
 12213                           
 12214                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
 12215                           
 12216                           ; BSR set to: 15
 12217                           ;incstack = 0
 12218  003BE0  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
 12219  003BE4  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
 12220  003BE8  EC59  F01D         	call	__HW_Timer_Init	;wreg free
 12221  003BEC  0012               	return		;funcret
 12222  003BEE                     __end_of_ES_Timer_Init:
 12223                           	opt stack 0
 12224                           tosu	equ	0xFFF
 12225                           tosh	equ	0xFFE
 12226                           tosl	equ	0xFFD
 12227                           pclath	equ	0xFFA
 12228                           tblptru	equ	0xFF8
 12229                           tblptrh	equ	0xFF7
 12230                           tblptrl	equ	0xFF6
 12231                           tablat	equ	0xFF5
 12232                           prodh	equ	0xFF4
 12233                           prodl	equ	0xFF3
 12234                           intcon	equ	0xFF2
 12235                           postinc0	equ	0xFEE
 12236                           wreg	equ	0xFE8
 12237                           indf1	equ	0xFE7
 12238                           postinc1	equ	0xFE6
 12239                           postdec1	equ	0xFE5
 12240                           fsr1h	equ	0xFE2
 12241                           fsr1l	equ	0xFE1
 12242                           indf2	equ	0xFDF
 12243                           postinc2	equ	0xFDE
 12244                           postdec2	equ	0xFDD
 12245                           plusw2	equ	0xFDB
 12246                           fsr2h	equ	0xFDA
 12247                           fsr2l	equ	0xFD9
 12248                           status	equ	0xFD8
 12249                           
 12250 ;; *************** function __HW_Timer_Init *****************
 12251 ;; Defined at:
 12252 ;;		line 72 in file "ES_Port.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;  Rate            2    0[BANK0 ] enum E15412
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;		None
 12257 ;; Return value:  Size  Location     Type
 12258 ;;                  1    wreg      void 
 12259 ;; Registers used:
 12260 ;;		wreg, status,2
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12266 ;;      Params:         0       2       0       0
 12267 ;;      Locals:         0       0       0       0
 12268 ;;      Temps:          0       0       0       0
 12269 ;;      Totals:         0       2       0       0
 12270 ;;Total ram usage:        2 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    7
 12273 ;; This function calls:
 12274 ;;		Nothing
 12275 ;; This function is called by:
 12276 ;;		_ES_Timer_Init
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           	psect	text51
 12281  003AB2                     __ptext51:
 12282                           	opt stack 0
 12283  003AB2                     __HW_Timer_Init:
 12284                           	opt stack 21
 12285                           
 12286                           ;ES_Port.c: 80: PIE1 = 0b00000100;
 12287                           
 12288                           ;incstack = 0
 12289  003AB2  0E04               	movlw	4
 12290  003AB4  6E9D               	movwf	3997,c	;volatile
 12291                           
 12292                           ;ES_Port.c: 85: INTCON = 0b01000000;
 12293  003AB6  0E40               	movlw	64
 12294  003AB8  6EF2               	movwf	intcon,c	;volatile
 12295                           
 12296                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
 12297  003ABA  0E0A               	movlw	10
 12298  003ABC  6EBD               	movwf	4029,c	;volatile
 12299                           
 12300                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
 12301  003ABE  0E01               	movlw	1
 12302  003AC0  6EBE               	movwf	4030,c	;volatile
 12303                           
 12304                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
 12305  003AC2  0E00               	movlw	0
 12306  003AC4  6EBF               	movwf	4031,c	;volatile
 12307                           
 12308                           ;ES_Port.c: 107: T1CON = 0b00100001;
 12309  003AC6  0E21               	movlw	33
 12310  003AC8  6ECD               	movwf	4045,c	;volatile
 12311                           
 12312                           ;ES_Port.c: 108: PEIE = 1;
 12313  003ACA  8CF2               	bsf	intcon,6,c	;volatile
 12314                           
 12315                           ;ES_Port.c: 109: {GIE = 1;};
 12316  003ACC  8EF2               	bsf	intcon,7,c	;volatile
 12317  003ACE  0012               	return		;funcret
 12318  003AD0                     __end_of__HW_Timer_Init:
 12319                           	opt stack 0
 12320                           tosu	equ	0xFFF
 12321                           tosh	equ	0xFFE
 12322                           tosl	equ	0xFFD
 12323                           pclath	equ	0xFFA
 12324                           tblptru	equ	0xFF8
 12325                           tblptrh	equ	0xFF7
 12326                           tblptrl	equ	0xFF6
 12327                           tablat	equ	0xFF5
 12328                           prodh	equ	0xFF4
 12329                           prodl	equ	0xFF3
 12330                           intcon	equ	0xFF2
 12331                           postinc0	equ	0xFEE
 12332                           wreg	equ	0xFE8
 12333                           indf1	equ	0xFE7
 12334                           postinc1	equ	0xFE6
 12335                           postdec1	equ	0xFE5
 12336                           fsr1h	equ	0xFE2
 12337                           fsr1l	equ	0xFE1
 12338                           indf2	equ	0xFDF
 12339                           postinc2	equ	0xFDE
 12340                           postdec2	equ	0xFDD
 12341                           plusw2	equ	0xFDB
 12342                           fsr2h	equ	0xFDA
 12343                           fsr2l	equ	0xFD9
 12344                           status	equ	0xFD8
 12345                           
 12346 ;; *************** function _ES_InitQueue *****************
 12347 ;; Defined at:
 12348 ;;		line 58 in file "ES_Queue.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
 12351 ;;		 -> Queue1(12), Queue0(12), 
 12352 ;;  BlockSize       1    2[BANK0 ] unsigned char 
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
 12355 ;;		 -> Queue1(12), Queue0(12), 
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  1    wreg      unsigned char 
 12358 ;; Registers used:
 12359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12365 ;;      Params:         0       3       0       0
 12366 ;;      Locals:         0       2       0       0
 12367 ;;      Temps:          0       0       0       0
 12368 ;;      Totals:         0       5       0       0
 12369 ;;Total ram usage:        5 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    7
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_ES_Initialize
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           	psect	text52
 12380  0038B8                     __ptext52:
 12381                           	opt stack 0
 12382  0038B8                     _ES_InitQueue:
 12383                           	opt stack 22
 12384                           
 12385                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
 12386                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
 12387                           
 12388                           ;incstack = 0
 12389  0038B8  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
 12390  0038BC  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
 12391                           
 12392                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
 12393  0038C0  0100               	movlb	0	; () banked
 12394  0038C2  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
 12395  0038C4  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
 12396  0038C8  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
 12397  0038CC  6EDF               	movwf	indf2,c
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
 12401  0038CE  0100               	movlb	0	; () banked
 12402  0038D0  EE20 F001          	lfsr	2,1
 12403  0038D4  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12404  0038D6  26D9               	addwf	fsr2l,f,c
 12405  0038D8  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12406  0038DA  22DA               	addwfc	fsr2h,f,c
 12407  0038DC  0E00               	movlw	0
 12408  0038DE  6EDF               	movwf	indf2,c
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
 12412  0038E0  0100               	movlb	0	; () banked
 12413  0038E2  EE20 F002          	lfsr	2,2
 12414  0038E6  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12415  0038E8  26D9               	addwf	fsr2l,f,c
 12416  0038EA  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12417  0038EC  22DA               	addwfc	fsr2h,f,c
 12418  0038EE  0E00               	movlw	0
 12419  0038F0  6EDF               	movwf	indf2,c
 12420  0038F2  0012               	return	
 12421  0038F4                     __end_of_ES_InitQueue:
 12422                           	opt stack 0
 12423                           tosu	equ	0xFFF
 12424                           tosh	equ	0xFFE
 12425                           tosl	equ	0xFFD
 12426                           pclath	equ	0xFFA
 12427                           tblptru	equ	0xFF8
 12428                           tblptrh	equ	0xFF7
 12429                           tblptrl	equ	0xFF6
 12430                           tablat	equ	0xFF5
 12431                           prodh	equ	0xFF4
 12432                           prodl	equ	0xFF3
 12433                           intcon	equ	0xFF2
 12434                           postinc0	equ	0xFEE
 12435                           wreg	equ	0xFE8
 12436                           indf1	equ	0xFE7
 12437                           postinc1	equ	0xFE6
 12438                           postdec1	equ	0xFE5
 12439                           fsr1h	equ	0xFE2
 12440                           fsr1l	equ	0xFE1
 12441                           indf2	equ	0xFDF
 12442                           postinc2	equ	0xFDE
 12443                           postdec2	equ	0xFDD
 12444                           plusw2	equ	0xFDB
 12445                           fsr2h	equ	0xFDA
 12446                           fsr2l	equ	0xFD9
 12447                           status	equ	0xFD8
 12448                           
 12449 ;; *************** function _ISR *****************
 12450 ;; Defined at:
 12451 ;;		line 112 in file "ES_Port.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;		None
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;		None
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  1    wreg      void 
 12458 ;; Registers used:
 12459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12465 ;;      Params:         0       0       0       0
 12466 ;;      Locals:         0       0       0       0
 12467 ;;      Temps:         16       0       0       0
 12468 ;;      Totals:        16       0       0       0
 12469 ;;Total ram usage:       16 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    6
 12472 ;; This function calls:
 12473 ;;		_CAN_BusErrorResponse
 12474 ;;		_CAN_ErrorResponse
 12475 ;;		_CAN_RCVResponse
 12476 ;;		_CAN_XmitResponse
 12477 ;;		_SPI32_EOTResponse
 12478 ;; This function is called by:
 12479 ;;		Interrupt level 2
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           	psect	intcode
 12484  000008                     __pintcode:
 12485                           	opt stack 0
 12486  000008                     _ISR:
 12487                           	opt stack 15
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;incstack = 0
 12491  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12492  00000A  CFFA F028          	movff	pclath,??_ISR+2
 12493  00000E  CFFB F029          	movff	pclatu,??_ISR+3
 12494  000012  ED9F  F016         	call	int_func,f	;refresh shadow registers
 12495                           tosu	equ	0xFFF
 12496                           tosh	equ	0xFFE
 12497                           tosl	equ	0xFFD
 12498                           pclatu	equ	0xFFB
 12499                           pclath	equ	0xFFA
 12500                           tblptru	equ	0xFF8
 12501                           tblptrh	equ	0xFF7
 12502                           tblptrl	equ	0xFF6
 12503                           tablat	equ	0xFF5
 12504                           prodh	equ	0xFF4
 12505                           prodl	equ	0xFF3
 12506                           intcon	equ	0xFF2
 12507                           postinc0	equ	0xFEE
 12508                           wreg	equ	0xFE8
 12509                           indf1	equ	0xFE7
 12510                           postinc1	equ	0xFE6
 12511                           postdec1	equ	0xFE5
 12512                           fsr1h	equ	0xFE2
 12513                           fsr1l	equ	0xFE1
 12514                           indf2	equ	0xFDF
 12515                           postinc2	equ	0xFDE
 12516                           postdec2	equ	0xFDD
 12517                           plusw2	equ	0xFDB
 12518                           fsr2h	equ	0xFDA
 12519                           fsr2l	equ	0xFD9
 12520                           status	equ	0xFD8
 12521                           
 12522                           	psect	intcode_body
 12523  002D3E                     __pintcode_body:
 12524                           	opt stack 15
 12525  002D3E                     int_func:
 12526                           	opt stack 15
 12527  002D3E  0006               	pop		; remove dummy address from shadow register refresh
 12528  002D40  CFE9 F02A          	movff	fsr0l,??_ISR+4
 12529  002D44  CFEA F02B          	movff	fsr0h,??_ISR+5
 12530  002D48  CFE1 F02C          	movff	fsr1l,??_ISR+6
 12531  002D4C  CFE2 F02D          	movff	fsr1h,??_ISR+7
 12532  002D50  CFD9 F02E          	movff	fsr2l,??_ISR+8
 12533  002D54  CFDA F02F          	movff	fsr2h,??_ISR+9
 12534  002D58  CFF3 F030          	movff	prodl,??_ISR+10
 12535  002D5C  CFF4 F031          	movff	prodh,??_ISR+11
 12536  002D60  CFF6 F032          	movff	tblptrl,??_ISR+12
 12537  002D64  CFF7 F033          	movff	tblptrh,??_ISR+13
 12538  002D68  CFF8 F034          	movff	tblptru,??_ISR+14
 12539  002D6C  CFF5 F035          	movff	tablat,??_ISR+15
 12540                           
 12541                           ;ES_Port.c: 115: static unsigned int LastTime;
 12542                           ;ES_Port.c: 116: static unsigned int NextTime;
 12543                           ;ES_Port.c: 118: if (CCP1IF == 1)
 12544  002D70  A49E               	btfss	3998,2,c	;volatile
 12545  002D72  D015               	goto	i2l4227
 12546                           
 12547                           ;ES_Port.c: 119: {
 12548                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 12549  002D74  50BF               	movf	4031,w,c	;volatile
 12550  002D76  6E26               	movwf	??_ISR& (0+255),c
 12551  002D78  50BE               	movf	4030,w,c	;volatile
 12552  002D7A  6E3A               	movwf	ISR@LastTime,c
 12553  002D7C  C026  F03B         	movff	??_ISR,ISR@LastTime+1
 12554                           
 12555                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 12556  002D80  0E20               	movlw	32
 12557  002D82  243A               	addwf	ISR@LastTime,w,c
 12558  002D84  6E3C               	movwf	ISR@NextTime,c
 12559  002D86  0E4E               	movlw	78
 12560  002D88  203B               	addwfc	ISR@LastTime+1,w,c
 12561  002D8A  6E3D               	movwf	ISR@NextTime+1,c
 12562                           
 12563                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 12564  002D8C  503D               	movf	ISR@NextTime+1,w,c
 12565  002D8E  6EBF               	movwf	4031,c	;volatile
 12566                           
 12567                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 12568  002D90  C03C  FFBE         	movff	ISR@NextTime,4030	;volatile
 12569                           
 12570                           ;ES_Port.c: 124: CCP1IF = 0;
 12571  002D94  949E               	bcf	3998,2,c	;volatile
 12572                           
 12573                           ;ES_Port.c: 125: TickCount++;
 12574  002D96  0100               	movlb	0	; () banked
 12575  002D98  2BE8               	incf	_TickCount& (0+255),f,b	;volatile
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;ES_Port.c: 126: SysTickCounter++;
 12579  002D9A  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
 12580  002D9C  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
 12581  002D9E                     i2l4227:
 12582                           
 12583                           ;ES_Port.c: 127: }
 12584                           ;ES_Port.c: 128: if (SSPIF == 1)
 12585  002D9E  A69E               	btfss	3998,3,c	;volatile
 12586  002DA0  D003               	goto	i2l4233
 12587                           
 12588                           ;ES_Port.c: 129: {
 12589                           ;ES_Port.c: 130: SSPIF = 0;
 12590  002DA2  969E               	bcf	3998,3,c	;volatile
 12591                           
 12592                           ;ES_Port.c: 131: SPI32_EOTResponse();
 12593  002DA4  EC97  F01C         	call	_SPI32_EOTResponse	;wreg free
 12594  002DA8                     i2l4233:
 12595                           
 12596                           ;ES_Port.c: 132: }
 12597                           ;ES_Port.c: 133: if (TXB0IF == 1)
 12598  002DA8  A4A4               	btfss	4004,2,c	;volatile
 12599  002DAA  D003               	goto	i2l4239
 12600                           
 12601                           ;ES_Port.c: 134: {
 12602                           ;ES_Port.c: 135: TXB0IF = 0;
 12603  002DAC  94A4               	bcf	4004,2,c	;volatile
 12604                           
 12605                           ;ES_Port.c: 136: CAN_XmitResponse();
 12606  002DAE  EC13  F01E         	call	_CAN_XmitResponse	;wreg free
 12607  002DB2                     i2l4239:
 12608                           
 12609                           ;ES_Port.c: 137: }
 12610                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 12611  002DB2  A0A4               	btfss	4004,0,c	;volatile
 12612  002DB4  D003               	goto	i2l4245
 12613                           
 12614                           ;ES_Port.c: 139: RXB0IF = 0;
 12615  002DB6  90A4               	bcf	4004,0,c	;volatile
 12616                           
 12617                           ;ES_Port.c: 140: CAN_RCVResponse();
 12618  002DB8  ECF7  F01D         	call	_CAN_RCVResponse	;wreg free
 12619  002DBC                     i2l4245:
 12620                           
 12621                           ;ES_Port.c: 141: }
 12622                           ;ES_Port.c: 142: if (ERRIF == 1) {
 12623  002DBC  AAA4               	btfss	4004,5,c	;volatile
 12624  002DBE  D003               	goto	i2l4251
 12625                           
 12626                           ;ES_Port.c: 143: ERRIF = 0;
 12627  002DC0  9AA4               	bcf	4004,5,c	;volatile
 12628                           
 12629                           ;ES_Port.c: 144: CAN_ErrorResponse();
 12630  002DC2  EC18  F01E         	call	_CAN_ErrorResponse	;wreg free
 12631  002DC6                     i2l4251:
 12632                           
 12633                           ;ES_Port.c: 145: }
 12634                           ;ES_Port.c: 146: if (IRXIF == 1) {
 12635  002DC6  AEA4               	btfss	4004,7,c	;volatile
 12636  002DC8  D003               	goto	i2l167
 12637                           
 12638                           ;ES_Port.c: 147: IRXIF = 0;
 12639  002DCA  9EA4               	bcf	4004,7,c	;volatile
 12640                           
 12641                           ;ES_Port.c: 148: CAN_BusErrorResponse();
 12642  002DCC  EC19  F01E         	call	_CAN_BusErrorResponse	;wreg free
 12643  002DD0                     i2l167:
 12644  002DD0  C035  FFF5         	movff	??_ISR+15,tablat
 12645  002DD4  C034  FFF8         	movff	??_ISR+14,tblptru
 12646  002DD8  C033  FFF7         	movff	??_ISR+13,tblptrh
 12647  002DDC  C032  FFF6         	movff	??_ISR+12,tblptrl
 12648  002DE0  C031  FFF4         	movff	??_ISR+11,prodh
 12649  002DE4  C030  FFF3         	movff	??_ISR+10,prodl
 12650  002DE8  C02F  FFDA         	movff	??_ISR+9,fsr2h
 12651  002DEC  C02E  FFD9         	movff	??_ISR+8,fsr2l
 12652  002DF0  C02D  FFE2         	movff	??_ISR+7,fsr1h
 12653  002DF4  C02C  FFE1         	movff	??_ISR+6,fsr1l
 12654  002DF8  C02B  FFEA         	movff	??_ISR+5,fsr0h
 12655  002DFC  C02A  FFE9         	movff	??_ISR+4,fsr0l
 12656  002E00  C029  FFFB         	movff	??_ISR+3,pclatu
 12657  002E04  C028  FFFA         	movff	??_ISR+2,pclath
 12658  002E08  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12659  002E0A  0011               	retfie		f
 12660  002E0C                     __end_of_ISR:
 12661                           	opt stack 0
 12662                           tosu	equ	0xFFF
 12663                           tosh	equ	0xFFE
 12664                           tosl	equ	0xFFD
 12665                           pclatu	equ	0xFFB
 12666                           pclath	equ	0xFFA
 12667                           tblptru	equ	0xFF8
 12668                           tblptrh	equ	0xFF7
 12669                           tblptrl	equ	0xFF6
 12670                           tablat	equ	0xFF5
 12671                           prodh	equ	0xFF4
 12672                           prodl	equ	0xFF3
 12673                           intcon	equ	0xFF2
 12674                           postinc0	equ	0xFEE
 12675                           fsr0h	equ	0xFEA
 12676                           fsr0l	equ	0xFE9
 12677                           wreg	equ	0xFE8
 12678                           indf1	equ	0xFE7
 12679                           postinc1	equ	0xFE6
 12680                           postdec1	equ	0xFE5
 12681                           fsr1h	equ	0xFE2
 12682                           fsr1l	equ	0xFE1
 12683                           indf2	equ	0xFDF
 12684                           postinc2	equ	0xFDE
 12685                           postdec2	equ	0xFDD
 12686                           plusw2	equ	0xFDB
 12687                           fsr2h	equ	0xFDA
 12688                           fsr2l	equ	0xFD9
 12689                           status	equ	0xFD8
 12690                           
 12691 ;; *************** function _SPI32_EOTResponse *****************
 12692 ;; Defined at:
 12693 ;;		line 166 in file "SPI32_HW.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;		None
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 12698 ;; Return value:  Size  Location     Type
 12699 ;;                  1    wreg      void 
 12700 ;; Registers used:
 12701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12707 ;;      Params:         0       0       0       0
 12708 ;;      Locals:         3       0       0       0
 12709 ;;      Temps:          0       0       0       0
 12710 ;;      Totals:         3       0       0       0
 12711 ;;Total ram usage:        3 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    4
 12714 ;; This function calls:
 12715 ;;		i2_PostSPI32ControlService
 12716 ;;		i2_SPI32_SendFrame
 12717 ;; This function is called by:
 12718 ;;		_ISR
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           	psect	text54
 12723  00392E                     __ptext54:
 12724                           	opt stack 0
 12725  00392E                     _SPI32_EOTResponse:
 12726                           	opt stack 16
 12727                           
 12728                           ;SPI32_HW.c: 168: if(FrameByte == 0){
 12729                           
 12730                           ;incstack = 0
 12731  00392E  0100               	movlb	0	; () banked
 12732  003930  51F5               	movf	_FrameByte& (0+255),w,b
 12733  003932  A4D8               	btfss	status,2,c
 12734  003934  D00E               	goto	i2l4125
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;SPI32_HW.c: 170: FrameByte = 4;
 12738  003936  0E04               	movlw	4
 12739  003938  0100               	movlb	0	; () banked
 12740  00393A  6FF5               	movwf	_FrameByte& (0+255),b
 12741                           
 12742                           ;SPI32_HW.c: 172: ES_Event EOTevent;
 12743                           ;SPI32_HW.c: 173: EOTevent.EventType = ES_TIMEOUT;
 12744  00393C  0E03               	movlw	3
 12745  00393E  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;SPI32_HW.c: 174: PostSPI32ControlService(EOTevent);
 12749  003940  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 12750  003944  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 12751  003948  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 12752  00394C  ECD1  F01D         	call	i2_PostSPI32ControlService	;wreg free
 12753                           
 12754                           ;SPI32_HW.c: 175: }
 12755  003950  0012               	return	
 12756  003952                     i2l4125:
 12757                           
 12758                           ;SPI32_HW.c: 176: else{
 12759                           ;SPI32_HW.c: 178: SPI32_SendFrame(TransmitFrame);
 12760  003952  C036  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 12761  003956  C037  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 12762  00395A  C038  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 12763  00395E  C039  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 12764  003962  ECF4  F01B         	call	i2_SPI32_SendFrame	;wreg free
 12765  003966  0012               	return	
 12766  003968                     __end_of_SPI32_EOTResponse:
 12767                           	opt stack 0
 12768                           tosu	equ	0xFFF
 12769                           tosh	equ	0xFFE
 12770                           tosl	equ	0xFFD
 12771                           pclatu	equ	0xFFB
 12772                           pclath	equ	0xFFA
 12773                           tblptru	equ	0xFF8
 12774                           tblptrh	equ	0xFF7
 12775                           tblptrl	equ	0xFF6
 12776                           tablat	equ	0xFF5
 12777                           prodh	equ	0xFF4
 12778                           prodl	equ	0xFF3
 12779                           intcon	equ	0xFF2
 12780                           postinc0	equ	0xFEE
 12781                           fsr0h	equ	0xFEA
 12782                           fsr0l	equ	0xFE9
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postinc1	equ	0xFE6
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function i2_SPI32_SendFrame *****************
 12798 ;; Defined at:
 12799 ;;		line 85 in file "SPI32_HW.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  newFrame        4    0[COMRAM] unsigned long 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, status,2, status,0, prodl, prodh
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12813 ;;      Params:         4       0       0       0
 12814 ;;      Locals:         0       0       0       0
 12815 ;;      Temps:          4       0       0       0
 12816 ;;      Totals:         8       0       0       0
 12817 ;;Total ram usage:        8 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_SPI32_EOTResponse
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text55
 12827  0037E8                     __ptext55:
 12828                           	opt stack 0
 12829  0037E8                     i2_SPI32_SendFrame:
 12830                           	opt stack 19
 12831                           
 12832                           ;SPI32_HW.c: 100: if(FrameByte == 4){
 12833                           
 12834                           ;incstack = 0
 12835  0037E8  0E04               	movlw	4
 12836  0037EA  0100               	movlb	0	; () banked
 12837  0037EC  19F5               	xorwf	_FrameByte& (0+255),w,b
 12838  0037EE  A4D8               	btfss	status,2,c
 12839  0037F0  D008               	goto	i2l4063
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
 12843  0037F2  C001  F036         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 12844  0037F6  C002  F037         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 12845  0037FA  C003  F038         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 12846  0037FE  C004  F039         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 12847  003802                     i2l4063:
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;SPI32_HW.c: 103: }
 12851                           ;SPI32_HW.c: 105: FrameByte--;
 12852  003802  0100               	movlb	0	; () banked
 12853  003804  07F5               	decf	_FrameByte& (0+255),f,b
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 12857  003806  0100               	movlb	0	; () banked
 12858  003808  51F5               	movf	_FrameByte& (0+255),w,b
 12859  00380A  0D08               	mullw	8
 12860  00380C  50F3               	movf	prodl,w,c
 12861  00380E  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 12862  003812  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 12863  003816  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 12864  00381A  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 12865  00381E  2AE8               	incf	wreg,f,c
 12866  003820  D005               	goto	i2u291_40
 12867  003822                     i2u291_45:
 12868  003822  90D8               	bcf	status,0,c
 12869  003824  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 12870  003826  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 12871  003828  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 12872  00382A  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 12873  00382C                     i2u291_40:
 12874  00382C  2EE8               	decfsz	wreg,f,c
 12875  00382E  D7F9               	goto	i2u291_45
 12876  003830  5005               	movf	??i2_SPI32_SendFrame,w,c
 12877  003832  6EC9               	movwf	4041,c	;volatile
 12878                           
 12879                           ; BSR set to: 0
 12880  003834  0012               	return		;funcret
 12881  003836                     __end_ofi2_SPI32_SendFrame:
 12882                           	opt stack 0
 12883                           tosu	equ	0xFFF
 12884                           tosh	equ	0xFFE
 12885                           tosl	equ	0xFFD
 12886                           pclatu	equ	0xFFB
 12887                           pclath	equ	0xFFA
 12888                           tblptru	equ	0xFF8
 12889                           tblptrh	equ	0xFF7
 12890                           tblptrl	equ	0xFF6
 12891                           tablat	equ	0xFF5
 12892                           prodh	equ	0xFF4
 12893                           prodl	equ	0xFF3
 12894                           intcon	equ	0xFF2
 12895                           postinc0	equ	0xFEE
 12896                           fsr0h	equ	0xFEA
 12897                           fsr0l	equ	0xFE9
 12898                           wreg	equ	0xFE8
 12899                           indf1	equ	0xFE7
 12900                           postinc1	equ	0xFE6
 12901                           postdec1	equ	0xFE5
 12902                           fsr1h	equ	0xFE2
 12903                           fsr1l	equ	0xFE1
 12904                           indf2	equ	0xFDF
 12905                           postinc2	equ	0xFDE
 12906                           postdec2	equ	0xFDD
 12907                           plusw2	equ	0xFDB
 12908                           fsr2h	equ	0xFDA
 12909                           fsr2l	equ	0xFD9
 12910                           status	equ	0xFD8
 12911                           
 12912 ;; *************** function i2_PostSPI32ControlService *****************
 12913 ;; Defined at:
 12914 ;;		line 117 in file "SPI32_ControlService.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      unsigned char 
 12921 ;; Registers used:
 12922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12928 ;;      Params:         3       0       0       0
 12929 ;;      Locals:         0       0       0       0
 12930 ;;      Temps:          0       0       0       0
 12931 ;;      Totals:         3       0       0       0
 12932 ;;Total ram usage:        3 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:    3
 12935 ;; This function calls:
 12936 ;;		i2_ES_PostToService
 12937 ;; This function is called by:
 12938 ;;		_SPI32_EOTResponse
 12939 ;; This function uses a non-reentrant model
 12940 ;;
 12941                           
 12942                           	psect	text56
 12943  003BA2                     __ptext56:
 12944                           	opt stack 0
 12945  003BA2                     i2_PostSPI32ControlService:
 12946                           	opt stack 16
 12947                           
 12948                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 12949                           ;	Return value of i2_PostSPI32ControlService is never used
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;incstack = 0
 12953  003BA2  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 12954  003BA6  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 12955  003BAA  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 12956  003BAE  0100               	movlb	0	; () banked
 12957  003BB0  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 12958  003BB2  EC13  F01B         	call	i2_ES_PostToService
 12959  003BB6  0012               	return	
 12960  003BB8                     __end_ofi2_PostSPI32ControlService:
 12961                           	opt stack 0
 12962                           tosu	equ	0xFFF
 12963                           tosh	equ	0xFFE
 12964                           tosl	equ	0xFFD
 12965                           pclatu	equ	0xFFB
 12966                           pclath	equ	0xFFA
 12967                           tblptru	equ	0xFF8
 12968                           tblptrh	equ	0xFF7
 12969                           tblptrl	equ	0xFF6
 12970                           tablat	equ	0xFF5
 12971                           prodh	equ	0xFF4
 12972                           prodl	equ	0xFF3
 12973                           intcon	equ	0xFF2
 12974                           postinc0	equ	0xFEE
 12975                           fsr0h	equ	0xFEA
 12976                           fsr0l	equ	0xFE9
 12977                           wreg	equ	0xFE8
 12978                           indf1	equ	0xFE7
 12979                           postinc1	equ	0xFE6
 12980                           postdec1	equ	0xFE5
 12981                           fsr1h	equ	0xFE2
 12982                           fsr1l	equ	0xFE1
 12983                           indf2	equ	0xFDF
 12984                           postinc2	equ	0xFDE
 12985                           postdec2	equ	0xFDD
 12986                           plusw2	equ	0xFDB
 12987                           fsr2h	equ	0xFDA
 12988                           fsr2l	equ	0xFD9
 12989                           status	equ	0xFD8
 12990                           
 12991 ;; *************** function _CAN_XmitResponse *****************
 12992 ;; Defined at:
 12993 ;;		line 64 in file "CAN_RX_HW.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;		None
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;		None
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      void 
 13000 ;; Registers used:
 13001 ;;		None
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13007 ;;      Params:         0       0       0       0
 13008 ;;      Locals:         0       0       0       0
 13009 ;;      Temps:          0       0       0       0
 13010 ;;      Totals:         0       0       0       0
 13011 ;;Total ram usage:        0 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; This function calls:
 13014 ;;		Nothing
 13015 ;; This function is called by:
 13016 ;;		_ISR
 13017 ;; This function uses a non-reentrant model
 13018 ;;
 13019                           
 13020                           	psect	text57
 13021  003C26                     __ptext57:
 13022                           	opt stack 0
 13023  003C26                     _CAN_XmitResponse:
 13024                           	opt stack 20
 13025                           
 13026                           ;CAN_RX_HW.c: 66: TXB0CONbits.TXREQ = 0;
 13027                           
 13028                           ;incstack = 0
 13029  003C26  010F               	movlb	15	; () banked
 13030  003C28  9740               	bcf	64,3,b	;volatile
 13031                           
 13032                           ; BSR set to: 15
 13033  003C2A  0012               	return		;funcret
 13034  003C2C                     __end_of_CAN_XmitResponse:
 13035                           	opt stack 0
 13036                           tosu	equ	0xFFF
 13037                           tosh	equ	0xFFE
 13038                           tosl	equ	0xFFD
 13039                           pclatu	equ	0xFFB
 13040                           pclath	equ	0xFFA
 13041                           tblptru	equ	0xFF8
 13042                           tblptrh	equ	0xFF7
 13043                           tblptrl	equ	0xFF6
 13044                           tablat	equ	0xFF5
 13045                           prodh	equ	0xFF4
 13046                           prodl	equ	0xFF3
 13047                           intcon	equ	0xFF2
 13048                           postinc0	equ	0xFEE
 13049                           fsr0h	equ	0xFEA
 13050                           fsr0l	equ	0xFE9
 13051                           wreg	equ	0xFE8
 13052                           indf1	equ	0xFE7
 13053                           postinc1	equ	0xFE6
 13054                           postdec1	equ	0xFE5
 13055                           fsr1h	equ	0xFE2
 13056                           fsr1l	equ	0xFE1
 13057                           indf2	equ	0xFDF
 13058                           postinc2	equ	0xFDE
 13059                           postdec2	equ	0xFDD
 13060                           plusw2	equ	0xFDB
 13061                           fsr2h	equ	0xFDA
 13062                           fsr2l	equ	0xFD9
 13063                           status	equ	0xFD8
 13064                           
 13065 ;; *************** function _CAN_RCVResponse *****************
 13066 ;; Defined at:
 13067 ;;		line 69 in file "CAN_RX_HW.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;		None
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;		None
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  2  137[None  ] int 
 13074 ;; Registers used:
 13075 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : 0/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13081 ;;      Params:         0       0       0       0
 13082 ;;      Locals:         0       0       0       0
 13083 ;;      Temps:          0       0       0       0
 13084 ;;      Totals:         0       0       0       0
 13085 ;;Total ram usage:        0 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    5
 13088 ;; This function calls:
 13089 ;;		_ProcessReceive
 13090 ;; This function is called by:
 13091 ;;		_ISR
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           	psect	text58
 13096  003BEE                     __ptext58:
 13097                           	opt stack 0
 13098  003BEE                     _CAN_RCVResponse:
 13099                           	opt stack 15
 13100                           
 13101                           ;CAN_RX_HW.c: 71: if (RXB0CONbits.RXFUL == 1) {
 13102                           
 13103                           ; BSR set to: 15
 13104                           ;incstack = 0
 13105  003BEE  AE60               	btfss	3936,7,c	;volatile
 13106  003BF0  0012               	return	
 13107                           
 13108                           ;CAN_RX_HW.c: 72: ProcessReceive();
 13109  003BF2  EC23  F018         	call	_ProcessReceive	;wreg free
 13110                           
 13111                           ;CAN_RX_HW.c: 73: RXB0CONbits.RXFUL = 0;
 13112  003BF6  9E60               	bcf	3936,7,c	;volatile
 13113  003BF8  0012               	return	
 13114  003BFA                     __end_of_CAN_RCVResponse:
 13115                           	opt stack 0
 13116                           tosu	equ	0xFFF
 13117                           tosh	equ	0xFFE
 13118                           tosl	equ	0xFFD
 13119                           pclatu	equ	0xFFB
 13120                           pclath	equ	0xFFA
 13121                           tblptru	equ	0xFF8
 13122                           tblptrh	equ	0xFF7
 13123                           tblptrl	equ	0xFF6
 13124                           tablat	equ	0xFF5
 13125                           prodh	equ	0xFF4
 13126                           prodl	equ	0xFF3
 13127                           intcon	equ	0xFF2
 13128                           postinc0	equ	0xFEE
 13129                           fsr0h	equ	0xFEA
 13130                           fsr0l	equ	0xFE9
 13131                           wreg	equ	0xFE8
 13132                           indf1	equ	0xFE7
 13133                           postinc1	equ	0xFE6
 13134                           postdec1	equ	0xFE5
 13135                           fsr1h	equ	0xFE2
 13136                           fsr1l	equ	0xFE1
 13137                           indf2	equ	0xFDF
 13138                           postinc2	equ	0xFDE
 13139                           postdec2	equ	0xFDD
 13140                           plusw2	equ	0xFDB
 13141                           fsr2h	equ	0xFDA
 13142                           fsr2l	equ	0xFD9
 13143                           status	equ	0xFD8
 13144                           
 13145 ;; *************** function _ProcessReceive *****************
 13146 ;; Defined at:
 13147 ;;		line 176 in file "CAN_RX_HW.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;		None
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
 13152 ;; Return value:  Size  Location     Type
 13153 ;;                  1    wreg      void 
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13161 ;;      Params:         0       0       0       0
 13162 ;;      Locals:         5       0       0       0
 13163 ;;      Temps:          0       0       0       0
 13164 ;;      Totals:         5       0       0       0
 13165 ;;Total ram usage:        5 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    4
 13168 ;; This function calls:
 13169 ;;		_SetBrightness
 13170 ;;		_SetListenFocus
 13171 ;;		_SetPattern
 13172 ;;		i2_PostPatternControlService
 13173 ;;		i2___awmod
 13174 ;; This function is called by:
 13175 ;;		_CAN_RCVResponse
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           	psect	text59
 13180  003046                     __ptext59:
 13181                           	opt stack 0
 13182  003046                     _ProcessReceive:
 13183                           	opt stack 15
 13184                           
 13185                           ;CAN_RX_HW.c: 178: static uint8_t CurrentPattern = 0;
 13186                           ;CAN_RX_HW.c: 179: static uint8_t LastButton = 0xFF;
 13187                           ;CAN_RX_HW.c: 181: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && RXB0E
      +                          IDL == 0x01) {
 13188                           
 13189                           ;incstack = 0
 13190  003046  5061               	movf	3937,w,c	;volatile
 13191  003048  A4D8               	btfss	status,2,c
 13192  00304A  0012               	return	
 13193  00304C  0E18               	movlw	24
 13194  00304E  1862               	xorwf	3938,w,c	;volatile
 13195  003050  A4D8               	btfss	status,2,c
 13196  003052  0012               	return	
 13197  003054  5063               	movf	3939,w,c	;volatile
 13198  003056  A4D8               	btfss	status,2,c
 13199  003058  0012               	return	
 13200  00305A  0464               	decf	3940,w,c	;volatile
 13201  00305C  A4D8               	btfss	status,2,c
 13202  00305E  0012               	return	
 13203                           
 13204                           ;CAN_RX_HW.c: 182: ES_Event Event2Post;
 13205                           ;CAN_RX_HW.c: 183: if(RXB0D0 != 0xFF){
 13206  003060  2866               	incf	3942,w,c	;volatile
 13207  003062  A4D8               	btfss	status,2,c
 13208  003064  D02B               	goto	i2l4049
 13209  003066  D039               	goto	i2l4051
 13210  003068                     i2l4027:
 13211                           
 13212                           ;CAN_RX_HW.c: 186: Event2Post.EventType = PATTERN_START;
 13213  003068  0E05               	movlw	5
 13214  00306A  6E23               	movwf	ProcessReceive@Event2Post,c
 13215                           
 13216                           ;CAN_RX_HW.c: 187: break;
 13217  00306C  D034               	goto	i2l633
 13218  00306E                     i2l4029:
 13219                           
 13220                           ;CAN_RX_HW.c: 189: Event2Post.EventType = (LastButton == 0x01 ? PATTERN_END : PATTERN_PA
      +                          USE);
 13221  00306E  0454               	decf	ProcessReceive@LastButton,w,c
 13222  003070  B4D8               	btfsc	status,2,c
 13223  003072  D004               	goto	i2l4033
 13224  003074  0E00               	movlw	0
 13225  003076  6E22               	movwf	_ProcessReceive$1196+1,c
 13226  003078  0E07               	movlw	7
 13227  00307A  D003               	goto	L20
 13228  00307C                     i2l4033:
 13229  00307C  0E00               	movlw	0
 13230  00307E  6E22               	movwf	_ProcessReceive$1196+1,c
 13231  003080  0E06               	movlw	6
 13232  003082                     L20:
 13233  003082  6E21               	movwf	_ProcessReceive$1196,c
 13234  003084  C021  F023         	movff	_ProcessReceive$1196,ProcessReceive@Event2Post
 13235                           
 13236                           ;CAN_RX_HW.c: 190: break;
 13237  003088  D026               	goto	i2l633
 13238  00308A                     i2l4037:
 13239                           
 13240                           ;CAN_RX_HW.c: 193: SetPattern(0xFF);
 13241  00308A  0EFF               	movlw	255
 13242  00308C  ECFD  F01D         	call	_SetPattern
 13243                           
 13244                           ;CAN_RX_HW.c: 194: Event2Post.EventType = PATTERN_START;
 13245  003090  0E05               	movlw	5
 13246  003092  6E23               	movwf	ProcessReceive@Event2Post,c
 13247                           
 13248                           ;CAN_RX_HW.c: 199: CurrentPattern = 0;
 13249  003094  0E00               	movlw	0
 13250  003096  D010               	goto	L21
 13251  003098                     i2l4043:
 13252                           
 13253                           ;CAN_RX_HW.c: 202: SetPattern(CurrentPattern);
 13254  003098  5045               	movf	ProcessReceive@CurrentPattern,w,c
 13255  00309A  ECFD  F01D         	call	_SetPattern
 13256                           
 13257                           ;CAN_RX_HW.c: 203: CurrentPattern = (CurrentPattern+1)%9;
 13258  00309E  0E01               	movlw	1
 13259  0030A0  2445               	addwf	ProcessReceive@CurrentPattern,w,c
 13260  0030A2  6E01               	movwf	i2___awmod@dividend,c
 13261  0030A4  6A02               	clrf	i2___awmod@dividend+1,c
 13262  0030A6  0E00               	movlw	0
 13263  0030A8  2202               	addwfc	i2___awmod@dividend+1,f,c
 13264  0030AA  0E00               	movlw	0
 13265  0030AC  6E04               	movwf	i2___awmod@divisor+1,c
 13266  0030AE  0E09               	movlw	9
 13267  0030B0  6E03               	movwf	i2___awmod@divisor,c
 13268  0030B2  ECDB  F01A         	call	i2___awmod	;wreg free
 13269  0030B6  5001               	movf	?i2___awmod,w,c
 13270  0030B8                     L21:
 13271  0030B8  6E45               	movwf	ProcessReceive@CurrentPattern,c
 13272                           
 13273                           ;CAN_RX_HW.c: 205: }
 13274                           
 13275                           ;CAN_RX_HW.c: 204: break;
 13276  0030BA  D00D               	goto	i2l633
 13277  0030BC                     i2l4049:
 13278  0030BC  5066               	movf	3942,w,c	;volatile
 13279                           
 13280                           ; Switch size 1, requested type "space"
 13281                           ; Number of cases is 4, Range of values is 0 to 3
 13282                           ; switch strategies available:
 13283                           ; Name         Instructions Cycles
 13284                           ; simple_byte           13     7 (average)
 13285                           ;	Chosen strategy is simple_byte
 13286  0030BE  0A00               	xorlw	0	; case 0
 13287  0030C0  B4D8               	btfsc	status,2,c
 13288  0030C2  D7D2               	goto	i2l4027
 13289  0030C4  0A01               	xorlw	1	; case 1
 13290  0030C6  B4D8               	btfsc	status,2,c
 13291  0030C8  D7D2               	goto	i2l4029
 13292  0030CA  0A03               	xorlw	3	; case 2
 13293  0030CC  B4D8               	btfsc	status,2,c
 13294  0030CE  D7DD               	goto	i2l4037
 13295  0030D0  0A01               	xorlw	1	; case 3
 13296  0030D2  B4D8               	btfsc	status,2,c
 13297  0030D4  D7E1               	goto	i2l4043
 13298  0030D6                     i2l633:
 13299                           
 13300                           ;CAN_RX_HW.c: 207: LastButton = RXB0D0;
 13301  0030D6  CF66 F054          	movff	3942,ProcessReceive@LastButton	;volatile
 13302  0030DA                     i2l4051:
 13303                           
 13304                           ;CAN_RX_HW.c: 208: }
 13305                           ;CAN_RX_HW.c: 210: SetBrightness(RXB0D1);
 13306  0030DA  5067               	movf	3943,w,c	;volatile
 13307  0030DC  EC15  F01D         	call	_SetBrightness
 13308                           
 13309                           ;CAN_RX_HW.c: 212: SetListenFocus(RXB0D2);
 13310  0030E0  5068               	movf	3944,w,c	;volatile
 13311  0030E2  EC49  F01D         	call	_SetListenFocus
 13312                           
 13313                           ;CAN_RX_HW.c: 214: PostPatternControlService(Event2Post);
 13314  0030E6  C023  F01E         	movff	ProcessReceive@Event2Post,i2PostPatternControlService@ThisEvent
 13315  0030EA  C024  F01F         	movff	ProcessReceive@Event2Post+1,i2PostPatternControlService@ThisEvent+1
 13316  0030EE  C025  F020         	movff	ProcessReceive@Event2Post+2,i2PostPatternControlService@ThisEvent+2
 13317  0030F2  ECDC  F01D         	call	i2_PostPatternControlService	;wreg free
 13318  0030F6  0012               	return	
 13319  0030F8                     __end_of_ProcessReceive:
 13320                           	opt stack 0
 13321                           tosu	equ	0xFFF
 13322                           tosh	equ	0xFFE
 13323                           tosl	equ	0xFFD
 13324                           pclatu	equ	0xFFB
 13325                           pclath	equ	0xFFA
 13326                           tblptru	equ	0xFF8
 13327                           tblptrh	equ	0xFF7
 13328                           tblptrl	equ	0xFF6
 13329                           tablat	equ	0xFF5
 13330                           prodh	equ	0xFF4
 13331                           prodl	equ	0xFF3
 13332                           intcon	equ	0xFF2
 13333                           postinc0	equ	0xFEE
 13334                           fsr0h	equ	0xFEA
 13335                           fsr0l	equ	0xFE9
 13336                           wreg	equ	0xFE8
 13337                           indf1	equ	0xFE7
 13338                           postinc1	equ	0xFE6
 13339                           postdec1	equ	0xFE5
 13340                           fsr1h	equ	0xFE2
 13341                           fsr1l	equ	0xFE1
 13342                           indf2	equ	0xFDF
 13343                           postinc2	equ	0xFDE
 13344                           postdec2	equ	0xFDD
 13345                           plusw2	equ	0xFDB
 13346                           fsr2h	equ	0xFDA
 13347                           fsr2l	equ	0xFD9
 13348                           status	equ	0xFD8
 13349                           
 13350 ;; *************** function i2_PostPatternControlService *****************
 13351 ;; Defined at:
 13352 ;;		line 137 in file "Pattern_ControlService.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 13355 ;; Auto vars:     Size  Location     Type
 13356 ;;		None
 13357 ;; Return value:  Size  Location     Type
 13358 ;;                  1    wreg      unsigned char 
 13359 ;; Registers used:
 13360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13366 ;;      Params:         3       0       0       0
 13367 ;;      Locals:         0       0       0       0
 13368 ;;      Temps:          0       0       0       0
 13369 ;;      Totals:         3       0       0       0
 13370 ;;Total ram usage:        3 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:    3
 13373 ;; This function calls:
 13374 ;;		i2_ES_PostToService
 13375 ;; This function is called by:
 13376 ;;		_ProcessReceive
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           	psect	text60
 13381  003BB8                     __ptext60:
 13382                           	opt stack 0
 13383  003BB8                     i2_PostPatternControlService:
 13384                           	opt stack 15
 13385                           
 13386                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
 13387                           ;	Return value of i2_PostPatternControlService is never used
 13388                           
 13389                           ;incstack = 0
 13390  003BB8  C01E  F018         	movff	i2PostPatternControlService@ThisEvent,i2ES_PostToService@TheEvent
 13391  003BBC  C01F  F019         	movff	i2PostPatternControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 13392  003BC0  C020  F01A         	movff	i2PostPatternControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 13393  003BC4  0100               	movlb	0	; () banked
 13394  003BC6  51E6               	movf	_MyPriority& (0+255),w,b
 13395  003BC8  EC13  F01B         	call	i2_ES_PostToService
 13396  003BCC  0012               	return	
 13397  003BCE                     __end_ofi2_PostPatternControlService:
 13398                           	opt stack 0
 13399                           tosu	equ	0xFFF
 13400                           tosh	equ	0xFFE
 13401                           tosl	equ	0xFFD
 13402                           pclatu	equ	0xFFB
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           postinc0	equ	0xFEE
 13412                           fsr0h	equ	0xFEA
 13413                           fsr0l	equ	0xFE9
 13414                           wreg	equ	0xFE8
 13415                           indf1	equ	0xFE7
 13416                           postinc1	equ	0xFE6
 13417                           postdec1	equ	0xFE5
 13418                           fsr1h	equ	0xFE2
 13419                           fsr1l	equ	0xFE1
 13420                           indf2	equ	0xFDF
 13421                           postinc2	equ	0xFDE
 13422                           postdec2	equ	0xFDD
 13423                           plusw2	equ	0xFDB
 13424                           fsr2h	equ	0xFDA
 13425                           fsr2l	equ	0xFD9
 13426                           status	equ	0xFD8
 13427                           
 13428 ;; *************** function i2_ES_PostToService *****************
 13429 ;; Defined at:
 13430 ;;		line 351 in file "ES_Framework.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;  WhichService    1    wreg     unsigned char 
 13433 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 13434 ;; Auto vars:     Size  Location     Type
 13435 ;;  WhichService    1   28[COMRAM] unsigned char 
 13436 ;; Return value:  Size  Location     Type
 13437 ;;                  1    wreg      unsigned char 
 13438 ;; Registers used:
 13439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13440 ;; Tracked objects:
 13441 ;;		On entry : 0/0
 13442 ;;		On exit  : 0/0
 13443 ;;		Unchanged: 0/0
 13444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13445 ;;      Params:         3       0       0       0
 13446 ;;      Locals:         1       0       0       0
 13447 ;;      Temps:          2       0       0       0
 13448 ;;      Totals:         6       0       0       0
 13449 ;;Total ram usage:        6 bytes
 13450 ;; Hardware stack levels used:    1
 13451 ;; Hardware stack levels required when called:    2
 13452 ;; This function calls:
 13453 ;;		i2_ES_EnQueueFIFO
 13454 ;; This function is called by:
 13455 ;;		i2_PostPatternControlService
 13456 ;;		i2_PostSPI32ControlService
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           	psect	text61
 13461  003626                     __ptext61:
 13462                           	opt stack 0
 13463  003626                     i2_ES_PostToService:
 13464                           	opt stack 16
 13465                           
 13466                           ;incstack = 0
 13467                           ;i2ES_PostToService@WhichService stored from wreg
 13468  003626  6E1D               	movwf	i2ES_PostToService@WhichService,c
 13469                           
 13470                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 13471                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 13472                           ;ES_Framework.c: 354: 1 )){
 13473  003628  0E02               	movlw	2
 13474  00362A  601D               	cpfslt	i2ES_PostToService@WhichService,c
 13475  00362C  D02F               	goto	i2l3699
 13476  00362E  501D               	movf	i2ES_PostToService@WhichService,w,c
 13477  003630  0D03               	mullw	3
 13478  003632  0E58               	movlw	low _EventQueues
 13479  003634  24F3               	addwf	prodl,w,c
 13480  003636  6EF6               	movwf	tblptrl,c
 13481  003638  0E03               	movlw	high _EventQueues
 13482  00363A  20F4               	addwfc	prodh,w,c
 13483  00363C  6EF7               	movwf	tblptrh,c
 13484  00363E                     	if	0	;There are less than 3 active tblptr bytes
 13485  00363E                     	endif
 13486  00363E  0009               	tblrd		*+
 13487  003640  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 13488  003644  000A               	tblrd		*-
 13489  003646  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 13490  00364A  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 13491  00364E  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 13492  003652  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 13493  003656  ECC9  F017         	call	i2_ES_EnQueueFIFO	;wreg free
 13494  00365A  06E8               	decf	wreg,f,c
 13495  00365C  A4D8               	btfss	status,2,c
 13496  00365E  D016               	goto	i2l3699
 13497                           
 13498                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 13499  003660  501D               	movf	i2ES_PostToService@WhichService,w,c
 13500  003662  0D02               	mullw	2
 13501  003664  0E01               	movlw	low _BitNum2SetMask
 13502  003666  24F3               	addwf	prodl,w,c
 13503  003668  6EF6               	movwf	tblptrl,c
 13504  00366A  0E03               	movlw	high _BitNum2SetMask
 13505  00366C  20F4               	addwfc	prodh,w,c
 13506  00366E  6EF7               	movwf	tblptrh,c
 13507  003670                     	if	0	;There are less than 3 active tblptr bytes
 13508  003670                     	endif
 13509  003670  0009               	tblrd		*+
 13510  003672  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 13511  003676  0009               	tblrd		*+
 13512  003678  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 13513  00367C  501B               	movf	??i2_ES_PostToService,w,c
 13514  00367E  0100               	movlb	0	; () banked
 13515  003680  13DD               	iorwf	_Ready& (0+255),f,b
 13516  003682  501C               	movf	??i2_ES_PostToService+1,w,c
 13517  003684  0100               	movlb	0	; () banked
 13518  003686  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 13519                           
 13520                           ; BSR set to: 0
 13521                           ;ES_Framework.c: 356: return 1;
 13522  003688  0E01               	movlw	1
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;ES_Framework.c: 357: } else
 13526                           
 13527                           ; BSR set to: 0
 13528  00368A  0012               	return	
 13529  00368C                     i2l3699:
 13530                           
 13531                           ;ES_Framework.c: 358: return 0;
 13532  00368C  0E00               	movlw	0
 13533  00368E  0012               	return	
 13534  003690                     __end_ofi2_ES_PostToService:
 13535                           	opt stack 0
 13536                           tosu	equ	0xFFF
 13537                           tosh	equ	0xFFE
 13538                           tosl	equ	0xFFD
 13539                           pclatu	equ	0xFFB
 13540                           pclath	equ	0xFFA
 13541                           tblptru	equ	0xFF8
 13542                           tblptrh	equ	0xFF7
 13543                           tblptrl	equ	0xFF6
 13544                           tablat	equ	0xFF5
 13545                           prodh	equ	0xFF4
 13546                           prodl	equ	0xFF3
 13547                           intcon	equ	0xFF2
 13548                           postinc0	equ	0xFEE
 13549                           fsr0h	equ	0xFEA
 13550                           fsr0l	equ	0xFE9
 13551                           wreg	equ	0xFE8
 13552                           indf1	equ	0xFE7
 13553                           postinc1	equ	0xFE6
 13554                           postdec1	equ	0xFE5
 13555                           fsr1h	equ	0xFE2
 13556                           fsr1l	equ	0xFE1
 13557                           indf2	equ	0xFDF
 13558                           postinc2	equ	0xFDE
 13559                           postdec2	equ	0xFDD
 13560                           plusw2	equ	0xFDB
 13561                           fsr2h	equ	0xFDA
 13562                           fsr2l	equ	0xFD9
 13563                           status	equ	0xFD8
 13564                           
 13565 ;; *************** function i2_ES_EnQueueFIFO *****************
 13566 ;; Defined at:
 13567 ;;		line 85 in file "ES_Queue.c"
 13568 ;; Parameters:    Size  Location     Type
 13569 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 13570 ;;		 -> Queue1(12), Queue0(12), 
 13571 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 13572 ;; Auto vars:     Size  Location     Type
 13573 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 13574 ;;		 -> Queue1(12), Queue0(12), 
 13575 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 13576 ;; Return value:  Size  Location     Type
 13577 ;;                  1    wreg      unsigned char 
 13578 ;; Registers used:
 13579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13580 ;; Tracked objects:
 13581 ;;		On entry : 0/0
 13582 ;;		On exit  : 0/0
 13583 ;;		Unchanged: 0/0
 13584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13585 ;;      Params:         5       0       0       0
 13586 ;;      Locals:         3       0       0       0
 13587 ;;      Temps:          3       0       0       0
 13588 ;;      Totals:        11       0       0       0
 13589 ;;Total ram usage:       11 bytes
 13590 ;; Hardware stack levels used:    1
 13591 ;; Hardware stack levels required when called:    1
 13592 ;; This function calls:
 13593 ;;		i2___awmod
 13594 ;;		i2___wmul
 13595 ;; This function is called by:
 13596 ;;		i2_ES_PostToService
 13597 ;; This function uses a non-reentrant model
 13598 ;;
 13599                           
 13600                           	psect	text62
 13601  002F92                     __ptext62:
 13602                           	opt stack 0
 13603  002F92                     i2_ES_EnQueueFIFO:
 13604                           	opt stack 16
 13605                           
 13606                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 13607                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 13608                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 13609                           
 13610                           ;incstack = 0
 13611  002F92  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 13612  002F96  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 13613                           
 13614                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 13615  002F9A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13616  002F9E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13617  002FA2  EE10 F002          	lfsr	1,2
 13618  002FA6  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13619  002FA8  26E1               	addwf	fsr1l,f,c
 13620  002FAA  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13621  002FAC  22E2               	addwfc	fsr1h,f,c
 13622  002FAE  50DE               	movf	postinc2,w,c
 13623  002FB0  5CE6               	subwf	postinc1,w,c
 13624  002FB2  B0D8               	btfsc	status,0,c
 13625  002FB4  D046               	goto	i2l3505
 13626                           
 13627                           ;ES_Queue.c: 92: {
 13628                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 13629  002FB6  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 13630  002FBA  9EF2               	bcf	intcon,7,c	;volatile
 13631                           
 13632                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 13633                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 13634  002FBC  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13635  002FC0  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13636  002FC4  50DF               	movf	indf2,w,c
 13637  002FC6  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 13638  002FC8  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 13639  002FCA  6E03               	movwf	i2___awmod@divisor,c
 13640  002FCC  6A04               	clrf	i2___awmod@divisor+1,c
 13641  002FCE  EE20 F002          	lfsr	2,2
 13642  002FD2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13643  002FD4  26D9               	addwf	fsr2l,f,c
 13644  002FD6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13645  002FD8  22DA               	addwfc	fsr2h,f,c
 13646  002FDA  50DF               	movf	indf2,w,c
 13647  002FDC  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 13648  002FDE  EE20 F001          	lfsr	2,1
 13649  002FE2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13650  002FE4  26D9               	addwf	fsr2l,f,c
 13651  002FE6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13652  002FE8  22DA               	addwfc	fsr2h,f,c
 13653  002FEA  50DF               	movf	indf2,w,c
 13654  002FEC  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 13655  002FEE  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 13656  002FF0  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 13657  002FF2  6E01               	movwf	i2___awmod@dividend,c
 13658  002FF4  6A02               	clrf	i2___awmod@dividend+1,c
 13659  002FF6  3602               	rlcf	i2___awmod@dividend+1,f,c
 13660  002FF8  ECDB  F01A         	call	i2___awmod	;wreg free
 13661  002FFC  0E01               	movlw	1
 13662  002FFE  2401               	addwf	?i2___awmod,w,c
 13663  003000  6E07               	movwf	i2___wmul@multiplier,c
 13664  003002  0E00               	movlw	0
 13665  003004  2002               	addwfc	?i2___awmod+1,w,c
 13666  003006  6E08               	movwf	i2___wmul@multiplier+1,c
 13667  003008  0E00               	movlw	0
 13668  00300A  6E0A               	movwf	i2___wmul@multiplicand+1,c
 13669  00300C  0E03               	movlw	3
 13670  00300E  6E09               	movwf	i2___wmul@multiplicand,c
 13671  003010  EC02  F01D         	call	i2___wmul	;wreg free
 13672  003014  5007               	movf	?i2___wmul,w,c
 13673  003016  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 13674  003018  6ED9               	movwf	fsr2l,c
 13675  00301A  5008               	movf	?i2___wmul+1,w,c
 13676  00301C  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 13677  00301E  6EDA               	movwf	fsr2h,c
 13678  003020  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 13679  003024  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 13680  003028  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 13681                           
 13682                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 13683  00302C  EE20 F002          	lfsr	2,2
 13684  003030  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13685  003032  26D9               	addwf	fsr2l,f,c
 13686  003034  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13687  003036  22DA               	addwfc	fsr2h,f,c
 13688  003038  2ADF               	incf	indf2,f,c
 13689                           
 13690                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 13691  00303A  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 13692                           
 13693                           ;ES_Queue.c: 101: return(1);
 13694  00303E  0E01               	movlw	1
 13695                           
 13696                           ;ES_Queue.c: 102: }else
 13697  003040  0012               	return	
 13698  003042                     i2l3505:
 13699                           
 13700                           ;ES_Queue.c: 103: return(0);
 13701  003042  0E00               	movlw	0
 13702  003044  0012               	return	
 13703  003046                     __end_ofi2_ES_EnQueueFIFO:
 13704                           	opt stack 0
 13705                           tosu	equ	0xFFF
 13706                           tosh	equ	0xFFE
 13707                           tosl	equ	0xFFD
 13708                           pclatu	equ	0xFFB
 13709                           pclath	equ	0xFFA
 13710                           tblptru	equ	0xFF8
 13711                           tblptrh	equ	0xFF7
 13712                           tblptrl	equ	0xFF6
 13713                           tablat	equ	0xFF5
 13714                           prodh	equ	0xFF4
 13715                           prodl	equ	0xFF3
 13716                           intcon	equ	0xFF2
 13717                           postinc0	equ	0xFEE
 13718                           fsr0h	equ	0xFEA
 13719                           fsr0l	equ	0xFE9
 13720                           wreg	equ	0xFE8
 13721                           indf1	equ	0xFE7
 13722                           postinc1	equ	0xFE6
 13723                           postdec1	equ	0xFE5
 13724                           fsr1h	equ	0xFE2
 13725                           fsr1l	equ	0xFE1
 13726                           indf2	equ	0xFDF
 13727                           postinc2	equ	0xFDE
 13728                           postdec2	equ	0xFDD
 13729                           plusw2	equ	0xFDB
 13730                           fsr2h	equ	0xFDA
 13731                           fsr2l	equ	0xFD9
 13732                           status	equ	0xFD8
 13733                           
 13734 ;; *************** function i2___wmul *****************
 13735 ;; Defined at:
 13736 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 13737 ;; Parameters:    Size  Location     Type
 13738 ;;  multiplier      2    6[COMRAM] unsigned int 
 13739 ;;  multiplicand    2    8[COMRAM] unsigned int 
 13740 ;; Auto vars:     Size  Location     Type
 13741 ;;  __wmul          2   10[COMRAM] unsigned int 
 13742 ;; Return value:  Size  Location     Type
 13743 ;;                  2    6[COMRAM] unsigned int 
 13744 ;; Registers used:
 13745 ;;		wreg, status,2, status,0, prodl, prodh
 13746 ;; Tracked objects:
 13747 ;;		On entry : 0/0
 13748 ;;		On exit  : 0/0
 13749 ;;		Unchanged: 0/0
 13750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13751 ;;      Params:         4       0       0       0
 13752 ;;      Locals:         2       0       0       0
 13753 ;;      Temps:          0       0       0       0
 13754 ;;      Totals:         6       0       0       0
 13755 ;;Total ram usage:        6 bytes
 13756 ;; Hardware stack levels used:    1
 13757 ;; This function calls:
 13758 ;;		Nothing
 13759 ;; This function is called by:
 13760 ;;		i2_ES_EnQueueFIFO
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text63
 13765  003A04                     __ptext63:
 13766                           	opt stack 0
 13767  003A04                     i2___wmul:
 13768                           	opt stack 16
 13769                           
 13770                           ;incstack = 0
 13771  003A04  5007               	movf	i2___wmul@multiplier,w,c
 13772  003A06  0209               	mulwf	i2___wmul@multiplicand,c
 13773  003A08  CFF3 F00B          	movff	prodl,i2___wmul@product
 13774  003A0C  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 13775  003A10  5007               	movf	i2___wmul@multiplier,w,c
 13776  003A12  020A               	mulwf	i2___wmul@multiplicand+1,c
 13777  003A14  50F3               	movf	prodl,w,c
 13778  003A16  260C               	addwf	i2___wmul@product+1,f,c
 13779  003A18  5008               	movf	i2___wmul@multiplier+1,w,c
 13780  003A1A  0209               	mulwf	i2___wmul@multiplicand,c
 13781  003A1C  50F3               	movf	prodl,w,c
 13782  003A1E  260C               	addwf	i2___wmul@product+1,f,c
 13783  003A20  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 13784  003A24  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 13785  003A28  0012               	return	
 13786  003A2A                     __end_ofi2___wmul:
 13787                           	opt stack 0
 13788                           tosu	equ	0xFFF
 13789                           tosh	equ	0xFFE
 13790                           tosl	equ	0xFFD
 13791                           pclatu	equ	0xFFB
 13792                           pclath	equ	0xFFA
 13793                           tblptru	equ	0xFF8
 13794                           tblptrh	equ	0xFF7
 13795                           tblptrl	equ	0xFF6
 13796                           tablat	equ	0xFF5
 13797                           prodh	equ	0xFF4
 13798                           prodl	equ	0xFF3
 13799                           intcon	equ	0xFF2
 13800                           postinc0	equ	0xFEE
 13801                           fsr0h	equ	0xFEA
 13802                           fsr0l	equ	0xFE9
 13803                           wreg	equ	0xFE8
 13804                           indf1	equ	0xFE7
 13805                           postinc1	equ	0xFE6
 13806                           postdec1	equ	0xFE5
 13807                           fsr1h	equ	0xFE2
 13808                           fsr1l	equ	0xFE1
 13809                           indf2	equ	0xFDF
 13810                           postinc2	equ	0xFDE
 13811                           postdec2	equ	0xFDD
 13812                           plusw2	equ	0xFDB
 13813                           fsr2h	equ	0xFDA
 13814                           fsr2l	equ	0xFD9
 13815                           status	equ	0xFD8
 13816                           
 13817 ;; *************** function i2___awmod *****************
 13818 ;; Defined at:
 13819 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 13820 ;; Parameters:    Size  Location     Type
 13821 ;;  dividend        2    0[COMRAM] int 
 13822 ;;  divisor         2    2[COMRAM] int 
 13823 ;; Auto vars:     Size  Location     Type
 13824 ;;  __awmod         1    5[COMRAM] unsigned char 
 13825 ;;  __awmod         1    4[COMRAM] unsigned char 
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  2    0[COMRAM] int 
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13835 ;;      Params:         4       0       0       0
 13836 ;;      Locals:         2       0       0       0
 13837 ;;      Temps:          0       0       0       0
 13838 ;;      Totals:         6       0       0       0
 13839 ;;Total ram usage:        6 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; This function calls:
 13842 ;;		Nothing
 13843 ;; This function is called by:
 13844 ;;		_ProcessReceive
 13845 ;;		i2_ES_EnQueueFIFO
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text64
 13850  0035B6                     __ptext64:
 13851                           	opt stack 0
 13852  0035B6                     i2___awmod:
 13853                           	opt stack 16
 13854                           
 13855                           ;incstack = 0
 13856  0035B6  0E00               	movlw	0
 13857  0035B8  6E06               	movwf	i2___awmod@sign,c
 13858  0035BA  AE02               	btfss	i2___awmod@dividend+1,7,c
 13859  0035BC  D006               	goto	i2l3081
 13860  0035BE  6C01               	negf	i2___awmod@dividend,c
 13861  0035C0  1E02               	comf	i2___awmod@dividend+1,f,c
 13862  0035C2  B0D8               	btfsc	status,0,c
 13863  0035C4  2A02               	incf	i2___awmod@dividend+1,f,c
 13864  0035C6  0E01               	movlw	1
 13865  0035C8  6E06               	movwf	i2___awmod@sign,c
 13866  0035CA                     i2l3081:
 13867  0035CA  AE04               	btfss	i2___awmod@divisor+1,7,c
 13868  0035CC  D004               	goto	i2l3085
 13869  0035CE  6C03               	negf	i2___awmod@divisor,c
 13870  0035D0  1E04               	comf	i2___awmod@divisor+1,f,c
 13871  0035D2  B0D8               	btfsc	status,0,c
 13872  0035D4  2A04               	incf	i2___awmod@divisor+1,f,c
 13873  0035D6                     i2l3085:
 13874  0035D6  5003               	movf	i2___awmod@divisor,w,c
 13875  0035D8  1004               	iorwf	i2___awmod@divisor+1,w,c
 13876  0035DA  B4D8               	btfsc	status,2,c
 13877  0035DC  D018               	goto	i2l3101
 13878  0035DE  0E01               	movlw	1
 13879  0035E0  6E05               	movwf	i2___awmod@counter,c
 13880  0035E2  D004               	goto	i2l3091
 13881  0035E4                     i2l3089:
 13882  0035E4  90D8               	bcf	status,0,c
 13883  0035E6  3603               	rlcf	i2___awmod@divisor,f,c
 13884  0035E8  3604               	rlcf	i2___awmod@divisor+1,f,c
 13885  0035EA  2A05               	incf	i2___awmod@counter,f,c
 13886  0035EC                     i2l3091:
 13887  0035EC  AE04               	btfss	i2___awmod@divisor+1,7,c
 13888  0035EE  D7FA               	goto	i2l3089
 13889  0035F0                     i2l3093:
 13890  0035F0  5003               	movf	i2___awmod@divisor,w,c
 13891  0035F2  5C01               	subwf	i2___awmod@dividend,w,c
 13892  0035F4  5004               	movf	i2___awmod@divisor+1,w,c
 13893  0035F6  5802               	subwfb	i2___awmod@dividend+1,w,c
 13894  0035F8  A0D8               	btfss	status,0,c
 13895  0035FA  D004               	goto	i2l3097
 13896  0035FC  5003               	movf	i2___awmod@divisor,w,c
 13897  0035FE  5E01               	subwf	i2___awmod@dividend,f,c
 13898  003600  5004               	movf	i2___awmod@divisor+1,w,c
 13899  003602  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13900  003604                     i2l3097:
 13901  003604  90D8               	bcf	status,0,c
 13902  003606  3204               	rrcf	i2___awmod@divisor+1,f,c
 13903  003608  3203               	rrcf	i2___awmod@divisor,f,c
 13904  00360A  2E05               	decfsz	i2___awmod@counter,f,c
 13905  00360C  D7F1               	goto	i2l3093
 13906  00360E                     i2l3101:
 13907  00360E  5006               	movf	i2___awmod@sign,w,c
 13908  003610  B4D8               	btfsc	status,2,c
 13909  003612  D004               	goto	i2l3105
 13910  003614  6C01               	negf	i2___awmod@dividend,c
 13911  003616  1E02               	comf	i2___awmod@dividend+1,f,c
 13912  003618  B0D8               	btfsc	status,0,c
 13913  00361A  2A02               	incf	i2___awmod@dividend+1,f,c
 13914  00361C                     i2l3105:
 13915  00361C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13916  003620  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13917  003624  0012               	return	
 13918  003626                     __end_ofi2___awmod:
 13919                           	opt stack 0
 13920                           tosu	equ	0xFFF
 13921                           tosh	equ	0xFFE
 13922                           tosl	equ	0xFFD
 13923                           pclatu	equ	0xFFB
 13924                           pclath	equ	0xFFA
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           intcon	equ	0xFF2
 13932                           postinc0	equ	0xFEE
 13933                           fsr0h	equ	0xFEA
 13934                           fsr0l	equ	0xFE9
 13935                           wreg	equ	0xFE8
 13936                           indf1	equ	0xFE7
 13937                           postinc1	equ	0xFE6
 13938                           postdec1	equ	0xFE5
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           plusw2	equ	0xFDB
 13945                           fsr2h	equ	0xFDA
 13946                           fsr2l	equ	0xFD9
 13947                           status	equ	0xFD8
 13948                           
 13949 ;; *************** function _SetPattern *****************
 13950 ;; Defined at:
 13951 ;;		line 236 in file "Pattern_ControlService.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  PatternID       1    wreg     unsigned char 
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;  PatternID       1    0[COMRAM] unsigned char 
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  1    wreg      void 
 13958 ;; Registers used:
 13959 ;;		wreg, status,2, cstack
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13965 ;;      Params:         0       0       0       0
 13966 ;;      Locals:         1       0       0       0
 13967 ;;      Temps:          0       0       0       0
 13968 ;;      Totals:         1       0       0       0
 13969 ;;Total ram usage:        1 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    1
 13972 ;; This function calls:
 13973 ;;		i2_ResetPattern
 13974 ;; This function is called by:
 13975 ;;		_ProcessReceive
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           	psect	text65
 13980  003BFA                     __ptext65:
 13981                           	opt stack 0
 13982  003BFA                     _SetPattern:
 13983                           	opt stack 17
 13984                           
 13985                           ;incstack = 0
 13986                           ;SetPattern@PatternID stored from wreg
 13987  003BFA  6E01               	movwf	SetPattern@PatternID,c
 13988                           
 13989                           ;Pattern_ControlService.c: 237: PatternConfigs[0] = PatternID;
 13990  003BFC  C001  F0F6         	movff	SetPattern@PatternID,_PatternConfigs
 13991                           
 13992                           ;Pattern_ControlService.c: 239: ResetPattern();
 13993  003C00  ECB9  F01D         	call	i2_ResetPattern	;wreg free
 13994  003C04  0012               	return		;funcret
 13995  003C06                     __end_of_SetPattern:
 13996                           	opt stack 0
 13997                           tosu	equ	0xFFF
 13998                           tosh	equ	0xFFE
 13999                           tosl	equ	0xFFD
 14000                           pclatu	equ	0xFFB
 14001                           pclath	equ	0xFFA
 14002                           tblptru	equ	0xFF8
 14003                           tblptrh	equ	0xFF7
 14004                           tblptrl	equ	0xFF6
 14005                           tablat	equ	0xFF5
 14006                           prodh	equ	0xFF4
 14007                           prodl	equ	0xFF3
 14008                           intcon	equ	0xFF2
 14009                           postinc0	equ	0xFEE
 14010                           fsr0h	equ	0xFEA
 14011                           fsr0l	equ	0xFE9
 14012                           wreg	equ	0xFE8
 14013                           indf1	equ	0xFE7
 14014                           postinc1	equ	0xFE6
 14015                           postdec1	equ	0xFE5
 14016                           fsr1h	equ	0xFE2
 14017                           fsr1l	equ	0xFE1
 14018                           indf2	equ	0xFDF
 14019                           postinc2	equ	0xFDE
 14020                           postdec2	equ	0xFDD
 14021                           plusw2	equ	0xFDB
 14022                           fsr2h	equ	0xFDA
 14023                           fsr2l	equ	0xFD9
 14024                           status	equ	0xFD8
 14025                           
 14026 ;; *************** function i2_ResetPattern *****************
 14027 ;; Defined at:
 14028 ;;		line 77 in file "Pattern_PtrnGenerator.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;		None
 14031 ;; Auto vars:     Size  Location     Type
 14032 ;;		None
 14033 ;; Return value:  Size  Location     Type
 14034 ;;                  1    wreg      void 
 14035 ;; Registers used:
 14036 ;;		wreg, status,2
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14042 ;;      Params:         0       0       0       0
 14043 ;;      Locals:         0       0       0       0
 14044 ;;      Temps:          0       0       0       0
 14045 ;;      Totals:         0       0       0       0
 14046 ;;Total ram usage:        0 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; This function calls:
 14049 ;;		Nothing
 14050 ;; This function is called by:
 14051 ;;		_SetPattern
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           	psect	text66
 14056  003B72                     __ptext66:
 14057                           	opt stack 0
 14058  003B72                     i2_ResetPattern:
 14059                           	opt stack 17
 14060                           
 14061                           ;Pattern_PtrnGenerator.c: 79: PatternStepCounter = 0;
 14062                           
 14063                           ;incstack = 0
 14064  003B72  0E00               	movlw	0
 14065  003B74  0100               	movlb	0	; () banked
 14066  003B76  6FF2               	movwf	_PatternStepCounter& (0+255),b
 14067                           
 14068                           ;Pattern_PtrnGenerator.c: 81: CycleCounter = 0;
 14069  003B78  0E00               	movlw	0
 14070  003B7A  0100               	movlb	0	; () banked
 14071  003B7C  6FE9               	movwf	_CycleCounter& (0+255),b
 14072  003B7E  0E00               	movlw	0
 14073  003B80  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
 14074  003B82  0E00               	movlw	0
 14075  003B84  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
 14076  003B86  0E00               	movlw	0
 14077  003B88  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
 14078                           
 14079                           ; BSR set to: 0
 14080  003B8A  0012               	return		;funcret
 14081  003B8C                     __end_ofi2_ResetPattern:
 14082                           	opt stack 0
 14083                           tosu	equ	0xFFF
 14084                           tosh	equ	0xFFE
 14085                           tosl	equ	0xFFD
 14086                           pclatu	equ	0xFFB
 14087                           pclath	equ	0xFFA
 14088                           tblptru	equ	0xFF8
 14089                           tblptrh	equ	0xFF7
 14090                           tblptrl	equ	0xFF6
 14091                           tablat	equ	0xFF5
 14092                           prodh	equ	0xFF4
 14093                           prodl	equ	0xFF3
 14094                           intcon	equ	0xFF2
 14095                           postinc0	equ	0xFEE
 14096                           fsr0h	equ	0xFEA
 14097                           fsr0l	equ	0xFE9
 14098                           wreg	equ	0xFE8
 14099                           indf1	equ	0xFE7
 14100                           postinc1	equ	0xFE6
 14101                           postdec1	equ	0xFE5
 14102                           fsr1h	equ	0xFE2
 14103                           fsr1l	equ	0xFE1
 14104                           indf2	equ	0xFDF
 14105                           postinc2	equ	0xFDE
 14106                           postdec2	equ	0xFDD
 14107                           plusw2	equ	0xFDB
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _SetListenFocus *****************
 14113 ;; Defined at:
 14114 ;;		line 249 in file "Pattern_ControlService.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;  listFocus       1    wreg     unsigned char 
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;  listFocus       1    8[COMRAM] unsigned char 
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  1    wreg      void 
 14121 ;; Registers used:
 14122 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14128 ;;      Params:         0       0       0       0
 14129 ;;      Locals:         1       0       0       0
 14130 ;;      Temps:          0       0       0       0
 14131 ;;      Totals:         1       0       0       0
 14132 ;;Total ram usage:        1 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    1
 14135 ;; This function calls:
 14136 ;;		i2___awdiv
 14137 ;; This function is called by:
 14138 ;;		_ProcessReceive
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text67
 14143  003A92                     __ptext67:
 14144                           	opt stack 0
 14145  003A92                     _SetListenFocus:
 14146                           	opt stack 17
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;incstack = 0
 14150                           ;SetListenFocus@listFocus stored from wreg
 14151  003A92  6E09               	movwf	SetListenFocus@listFocus,c
 14152                           
 14153                           ;Pattern_ControlService.c: 250: PatternConfigs[2] = listFocus*76/255;
 14154  003A94  5009               	movf	SetListenFocus@listFocus,w,c
 14155  003A96  0D4C               	mullw	76
 14156  003A98  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14157  003A9C  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14158  003AA0  0E00               	movlw	0
 14159  003AA2  6E04               	movwf	i2___awdiv@divisor+1,c
 14160  003AA4  6803               	setf	i2___awdiv@divisor,c
 14161  003AA6  EC65  F019         	call	i2___awdiv	;wreg free
 14162  003AAA  5001               	movf	?i2___awdiv,w,c
 14163  003AAC  0100               	movlb	0	; () banked
 14164  003AAE  6FF8               	movwf	(_PatternConfigs+2)& (0+255),b
 14165                           
 14166                           ; BSR set to: 0
 14167  003AB0  0012               	return		;funcret
 14168  003AB2                     __end_of_SetListenFocus:
 14169                           	opt stack 0
 14170                           tosu	equ	0xFFF
 14171                           tosh	equ	0xFFE
 14172                           tosl	equ	0xFFD
 14173                           pclatu	equ	0xFFB
 14174                           pclath	equ	0xFFA
 14175                           tblptru	equ	0xFF8
 14176                           tblptrh	equ	0xFF7
 14177                           tblptrl	equ	0xFF6
 14178                           tablat	equ	0xFF5
 14179                           prodh	equ	0xFF4
 14180                           prodl	equ	0xFF3
 14181                           intcon	equ	0xFF2
 14182                           postinc0	equ	0xFEE
 14183                           fsr0h	equ	0xFEA
 14184                           fsr0l	equ	0xFE9
 14185                           wreg	equ	0xFE8
 14186                           indf1	equ	0xFE7
 14187                           postinc1	equ	0xFE6
 14188                           postdec1	equ	0xFE5
 14189                           fsr1h	equ	0xFE2
 14190                           fsr1l	equ	0xFE1
 14191                           indf2	equ	0xFDF
 14192                           postinc2	equ	0xFDE
 14193                           postdec2	equ	0xFDD
 14194                           plusw2	equ	0xFDB
 14195                           fsr2h	equ	0xFDA
 14196                           fsr2l	equ	0xFD9
 14197                           status	equ	0xFD8
 14198                           
 14199 ;; *************** function _SetBrightness *****************
 14200 ;; Defined at:
 14201 ;;		line 243 in file "Pattern_ControlService.c"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;  brightness      1    wreg     unsigned char 
 14204 ;; Auto vars:     Size  Location     Type
 14205 ;;  brightness      1   10[COMRAM] unsigned char 
 14206 ;;  newBrightnes    2    8[COMRAM] unsigned int 
 14207 ;; Return value:  Size  Location     Type
 14208 ;;                  1    wreg      void 
 14209 ;; Registers used:
 14210 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14211 ;; Tracked objects:
 14212 ;;		On entry : 0/0
 14213 ;;		On exit  : 0/0
 14214 ;;		Unchanged: 0/0
 14215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14216 ;;      Params:         0       0       0       0
 14217 ;;      Locals:         3       0       0       0
 14218 ;;      Temps:          0       0       0       0
 14219 ;;      Totals:         3       0       0       0
 14220 ;;Total ram usage:        3 bytes
 14221 ;; Hardware stack levels used:    1
 14222 ;; Hardware stack levels required when called:    1
 14223 ;; This function calls:
 14224 ;;		i2___awdiv
 14225 ;; This function is called by:
 14226 ;;		_ProcessReceive
 14227 ;; This function uses a non-reentrant model
 14228 ;;
 14229                           
 14230                           	psect	text68
 14231  003A2A                     __ptext68:
 14232                           	opt stack 0
 14233  003A2A                     _SetBrightness:
 14234                           	opt stack 17
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;incstack = 0
 14238                           ;SetBrightness@brightness stored from wreg
 14239  003A2A  6E0B               	movwf	SetBrightness@brightness,c
 14240                           
 14241                           ;Pattern_ControlService.c: 244: uint16_t newBrightness = brightness*MaxBrightness/255;
 14242  003A2C  500B               	movf	SetBrightness@brightness,w,c
 14243  003A2E  0255               	mulwf	_MaxBrightness,c
 14244  003A30  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14245  003A34  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14246  003A38  0E00               	movlw	0
 14247  003A3A  6E04               	movwf	i2___awdiv@divisor+1,c
 14248  003A3C  6803               	setf	i2___awdiv@divisor,c
 14249  003A3E  EC65  F019         	call	i2___awdiv	;wreg free
 14250  003A42  C001  F009         	movff	?i2___awdiv,SetBrightness@newBrightness
 14251  003A46  C002  F00A         	movff	?i2___awdiv+1,SetBrightness@newBrightness+1
 14252                           
 14253                           ;Pattern_ControlService.c: 245: PatternConfigs[1] = newBrightness;
 14254  003A4A  C009  F0F7         	movff	SetBrightness@newBrightness,_PatternConfigs+1
 14255  003A4E  0012               	return		;funcret
 14256  003A50                     __end_of_SetBrightness:
 14257                           	opt stack 0
 14258                           tosu	equ	0xFFF
 14259                           tosh	equ	0xFFE
 14260                           tosl	equ	0xFFD
 14261                           pclatu	equ	0xFFB
 14262                           pclath	equ	0xFFA
 14263                           tblptru	equ	0xFF8
 14264                           tblptrh	equ	0xFF7
 14265                           tblptrl	equ	0xFF6
 14266                           tablat	equ	0xFF5
 14267                           prodh	equ	0xFF4
 14268                           prodl	equ	0xFF3
 14269                           intcon	equ	0xFF2
 14270                           postinc0	equ	0xFEE
 14271                           fsr0h	equ	0xFEA
 14272                           fsr0l	equ	0xFE9
 14273                           wreg	equ	0xFE8
 14274                           indf1	equ	0xFE7
 14275                           postinc1	equ	0xFE6
 14276                           postdec1	equ	0xFE5
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           plusw2	equ	0xFDB
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function i2___awdiv *****************
 14288 ;; Defined at:
 14289 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;  dividend        2    0[COMRAM] int 
 14292 ;;  divisor         2    2[COMRAM] int 
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;  __awdiv         2    6[COMRAM] int 
 14295 ;;  __awdiv         1    5[COMRAM] unsigned char 
 14296 ;;  __awdiv         1    4[COMRAM] unsigned char 
 14297 ;; Return value:  Size  Location     Type
 14298 ;;                  2    0[COMRAM] int 
 14299 ;; Registers used:
 14300 ;;		wreg, status,2, status,0
 14301 ;; Tracked objects:
 14302 ;;		On entry : 0/0
 14303 ;;		On exit  : 0/0
 14304 ;;		Unchanged: 0/0
 14305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14306 ;;      Params:         4       0       0       0
 14307 ;;      Locals:         4       0       0       0
 14308 ;;      Temps:          0       0       0       0
 14309 ;;      Totals:         8       0       0       0
 14310 ;;Total ram usage:        8 bytes
 14311 ;; Hardware stack levels used:    1
 14312 ;; This function calls:
 14313 ;;		Nothing
 14314 ;; This function is called by:
 14315 ;;		_SetBrightness
 14316 ;;		_SetListenFocus
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           	psect	text69
 14321  0032CA                     __ptext69:
 14322                           	opt stack 0
 14323  0032CA                     i2___awdiv:
 14324                           	opt stack 17
 14325                           
 14326                           ;incstack = 0
 14327  0032CA  0E00               	movlw	0
 14328  0032CC  6E06               	movwf	i2___awdiv@sign,c
 14329  0032CE  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14330  0032D0  D006               	goto	i2l3713
 14331  0032D2  6C03               	negf	i2___awdiv@divisor,c
 14332  0032D4  1E04               	comf	i2___awdiv@divisor+1,f,c
 14333  0032D6  B0D8               	btfsc	status,0,c
 14334  0032D8  2A04               	incf	i2___awdiv@divisor+1,f,c
 14335  0032DA  0E01               	movlw	1
 14336  0032DC  6E06               	movwf	i2___awdiv@sign,c
 14337  0032DE                     i2l3713:
 14338  0032DE  AE02               	btfss	i2___awdiv@dividend+1,7,c
 14339  0032E0  D006               	goto	i2l3719
 14340  0032E2  6C01               	negf	i2___awdiv@dividend,c
 14341  0032E4  1E02               	comf	i2___awdiv@dividend+1,f,c
 14342  0032E6  B0D8               	btfsc	status,0,c
 14343  0032E8  2A02               	incf	i2___awdiv@dividend+1,f,c
 14344  0032EA  0E01               	movlw	1
 14345  0032EC  1A06               	xorwf	i2___awdiv@sign,f,c
 14346  0032EE                     i2l3719:
 14347  0032EE  0E00               	movlw	0
 14348  0032F0  6E08               	movwf	i2___awdiv@quotient+1,c
 14349  0032F2  0E00               	movlw	0
 14350  0032F4  6E07               	movwf	i2___awdiv@quotient,c
 14351  0032F6  5003               	movf	i2___awdiv@divisor,w,c
 14352  0032F8  1004               	iorwf	i2___awdiv@divisor+1,w,c
 14353  0032FA  B4D8               	btfsc	status,2,c
 14354  0032FC  D01C               	goto	i2l3741
 14355  0032FE  0E01               	movlw	1
 14356  003300  6E05               	movwf	i2___awdiv@counter,c
 14357  003302  D004               	goto	i2l3727
 14358  003304                     i2l3725:
 14359  003304  90D8               	bcf	status,0,c
 14360  003306  3603               	rlcf	i2___awdiv@divisor,f,c
 14361  003308  3604               	rlcf	i2___awdiv@divisor+1,f,c
 14362  00330A  2A05               	incf	i2___awdiv@counter,f,c
 14363  00330C                     i2l3727:
 14364  00330C  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14365  00330E  D7FA               	goto	i2l3725
 14366  003310                     i2l3729:
 14367  003310  90D8               	bcf	status,0,c
 14368  003312  3607               	rlcf	i2___awdiv@quotient,f,c
 14369  003314  3608               	rlcf	i2___awdiv@quotient+1,f,c
 14370  003316  5003               	movf	i2___awdiv@divisor,w,c
 14371  003318  5C01               	subwf	i2___awdiv@dividend,w,c
 14372  00331A  5004               	movf	i2___awdiv@divisor+1,w,c
 14373  00331C  5802               	subwfb	i2___awdiv@dividend+1,w,c
 14374  00331E  A0D8               	btfss	status,0,c
 14375  003320  D005               	goto	i2l3737
 14376  003322  5003               	movf	i2___awdiv@divisor,w,c
 14377  003324  5E01               	subwf	i2___awdiv@dividend,f,c
 14378  003326  5004               	movf	i2___awdiv@divisor+1,w,c
 14379  003328  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 14380  00332A  8007               	bsf	i2___awdiv@quotient,0,c
 14381  00332C                     i2l3737:
 14382  00332C  90D8               	bcf	status,0,c
 14383  00332E  3204               	rrcf	i2___awdiv@divisor+1,f,c
 14384  003330  3203               	rrcf	i2___awdiv@divisor,f,c
 14385  003332  2E05               	decfsz	i2___awdiv@counter,f,c
 14386  003334  D7ED               	goto	i2l3729
 14387  003336                     i2l3741:
 14388  003336  5006               	movf	i2___awdiv@sign,w,c
 14389  003338  B4D8               	btfsc	status,2,c
 14390  00333A  D004               	goto	i2l3745
 14391  00333C  6C07               	negf	i2___awdiv@quotient,c
 14392  00333E  1E08               	comf	i2___awdiv@quotient+1,f,c
 14393  003340  B0D8               	btfsc	status,0,c
 14394  003342  2A08               	incf	i2___awdiv@quotient+1,f,c
 14395  003344                     i2l3745:
 14396  003344  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 14397  003348  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14398  00334C  0012               	return	
 14399  00334E                     __end_ofi2___awdiv:
 14400                           	opt stack 0
 14401                           tosu	equ	0xFFF
 14402                           tosh	equ	0xFFE
 14403                           tosl	equ	0xFFD
 14404                           pclatu	equ	0xFFB
 14405                           pclath	equ	0xFFA
 14406                           tblptru	equ	0xFF8
 14407                           tblptrh	equ	0xFF7
 14408                           tblptrl	equ	0xFF6
 14409                           tablat	equ	0xFF5
 14410                           prodh	equ	0xFF4
 14411                           prodl	equ	0xFF3
 14412                           intcon	equ	0xFF2
 14413                           postinc0	equ	0xFEE
 14414                           fsr0h	equ	0xFEA
 14415                           fsr0l	equ	0xFE9
 14416                           wreg	equ	0xFE8
 14417                           indf1	equ	0xFE7
 14418                           postinc1	equ	0xFE6
 14419                           postdec1	equ	0xFE5
 14420                           fsr1h	equ	0xFE2
 14421                           fsr1l	equ	0xFE1
 14422                           indf2	equ	0xFDF
 14423                           postinc2	equ	0xFDE
 14424                           postdec2	equ	0xFDD
 14425                           plusw2	equ	0xFDB
 14426                           fsr2h	equ	0xFDA
 14427                           fsr2l	equ	0xFD9
 14428                           status	equ	0xFD8
 14429                           
 14430 ;; *************** function _CAN_ErrorResponse *****************
 14431 ;; Defined at:
 14432 ;;		line 77 in file "CAN_RX_HW.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      void 
 14439 ;; Registers used:
 14440 ;;		None
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14446 ;;      Params:         0       0       0       0
 14447 ;;      Locals:         0       0       0       0
 14448 ;;      Temps:          0       0       0       0
 14449 ;;      Totals:         0       0       0       0
 14450 ;;Total ram usage:        0 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; This function calls:
 14453 ;;		Nothing
 14454 ;; This function is called by:
 14455 ;;		_ISR
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           	psect	text70
 14460  003C30                     __ptext70:
 14461                           	opt stack 0
 14462  003C30                     _CAN_ErrorResponse:
 14463                           	opt stack 20
 14464                           
 14465                           ;incstack = 0
 14466  003C30  0012               	return		;funcret
 14467  003C32                     __end_of_CAN_ErrorResponse:
 14468                           	opt stack 0
 14469                           tosu	equ	0xFFF
 14470                           tosh	equ	0xFFE
 14471                           tosl	equ	0xFFD
 14472                           pclatu	equ	0xFFB
 14473                           pclath	equ	0xFFA
 14474                           tblptru	equ	0xFF8
 14475                           tblptrh	equ	0xFF7
 14476                           tblptrl	equ	0xFF6
 14477                           tablat	equ	0xFF5
 14478                           prodh	equ	0xFF4
 14479                           prodl	equ	0xFF3
 14480                           intcon	equ	0xFF2
 14481                           postinc0	equ	0xFEE
 14482                           fsr0h	equ	0xFEA
 14483                           fsr0l	equ	0xFE9
 14484                           wreg	equ	0xFE8
 14485                           indf1	equ	0xFE7
 14486                           postinc1	equ	0xFE6
 14487                           postdec1	equ	0xFE5
 14488                           fsr1h	equ	0xFE2
 14489                           fsr1l	equ	0xFE1
 14490                           indf2	equ	0xFDF
 14491                           postinc2	equ	0xFDE
 14492                           postdec2	equ	0xFDD
 14493                           plusw2	equ	0xFDB
 14494                           fsr2h	equ	0xFDA
 14495                           fsr2l	equ	0xFD9
 14496                           status	equ	0xFD8
 14497                           
 14498 ;; *************** function _CAN_BusErrorResponse *****************
 14499 ;; Defined at:
 14500 ;;		line 82 in file "CAN_RX_HW.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;		None
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;		None
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		None
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14514 ;;      Params:         0       0       0       0
 14515 ;;      Locals:         0       0       0       0
 14516 ;;      Temps:          0       0       0       0
 14517 ;;      Totals:         0       0       0       0
 14518 ;;Total ram usage:        0 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; This function calls:
 14521 ;;		Nothing
 14522 ;; This function is called by:
 14523 ;;		_ISR
 14524 ;; This function uses a non-reentrant model
 14525 ;;
 14526                           
 14527                           	psect	text71
 14528  003C32                     __ptext71:
 14529                           	opt stack 0
 14530  003C32                     _CAN_BusErrorResponse:
 14531                           	opt stack 20
 14532                           
 14533                           ;incstack = 0
 14534  003C32  0012               	return		;funcret
 14535  003C34                     __end_of_CAN_BusErrorResponse:
 14536                           	opt stack 0
 14537                           tosu	equ	0xFFF
 14538                           tosh	equ	0xFFE
 14539                           tosl	equ	0xFFD
 14540                           pclatu	equ	0xFFB
 14541                           pclath	equ	0xFFA
 14542                           tblptru	equ	0xFF8
 14543                           tblptrh	equ	0xFF7
 14544                           tblptrl	equ	0xFF6
 14545                           tablat	equ	0xFF5
 14546                           prodh	equ	0xFF4
 14547                           prodl	equ	0xFF3
 14548                           intcon	equ	0xFF2
 14549                           postinc0	equ	0xFEE
 14550                           fsr0h	equ	0xFEA
 14551                           fsr0l	equ	0xFE9
 14552                           wreg	equ	0xFE8
 14553                           indf1	equ	0xFE7
 14554                           postinc1	equ	0xFE6
 14555                           postdec1	equ	0xFE5
 14556                           fsr1h	equ	0xFE2
 14557                           fsr1l	equ	0xFE1
 14558                           indf2	equ	0xFDF
 14559                           postinc2	equ	0xFDE
 14560                           postdec2	equ	0xFDD
 14561                           plusw2	equ	0xFDB
 14562                           fsr2h	equ	0xFDA
 14563                           fsr2l	equ	0xFD9
 14564                           status	equ	0xFD8
 14565                           tosu	equ	0xFFF
 14566                           tosh	equ	0xFFE
 14567                           tosl	equ	0xFFD
 14568                           pclatu	equ	0xFFB
 14569                           pclath	equ	0xFFA
 14570                           tblptru	equ	0xFF8
 14571                           tblptrh	equ	0xFF7
 14572                           tblptrl	equ	0xFF6
 14573                           tablat	equ	0xFF5
 14574                           prodh	equ	0xFF4
 14575                           prodl	equ	0xFF3
 14576                           intcon	equ	0xFF2
 14577                           postinc0	equ	0xFEE
 14578                           fsr0h	equ	0xFEA
 14579                           fsr0l	equ	0xFE9
 14580                           wreg	equ	0xFE8
 14581                           indf1	equ	0xFE7
 14582                           postinc1	equ	0xFE6
 14583                           postdec1	equ	0xFE5
 14584                           fsr1h	equ	0xFE2
 14585                           fsr1l	equ	0xFE1
 14586                           indf2	equ	0xFDF
 14587                           postinc2	equ	0xFDE
 14588                           postdec2	equ	0xFDD
 14589                           plusw2	equ	0xFDB
 14590                           fsr2h	equ	0xFDA
 14591                           fsr2l	equ	0xFD9
 14592                           status	equ	0xFD8
 14593                           
 14594                           	psect	text72
 14595  000000                     __ptext72:
 14596                           	opt stack 0
 14597                           tosu	equ	0xFFF
 14598                           tosh	equ	0xFFE
 14599                           tosl	equ	0xFFD
 14600                           pclatu	equ	0xFFB
 14601                           pclath	equ	0xFFA
 14602                           tblptru	equ	0xFF8
 14603                           tblptrh	equ	0xFF7
 14604                           tblptrl	equ	0xFF6
 14605                           tablat	equ	0xFF5
 14606                           prodh	equ	0xFF4
 14607                           prodl	equ	0xFF3
 14608                           intcon	equ	0xFF2
 14609                           postinc0	equ	0xFEE
 14610                           fsr0h	equ	0xFEA
 14611                           fsr0l	equ	0xFE9
 14612                           wreg	equ	0xFE8
 14613                           indf1	equ	0xFE7
 14614                           postinc1	equ	0xFE6
 14615                           postdec1	equ	0xFE5
 14616                           fsr1h	equ	0xFE2
 14617                           fsr1l	equ	0xFE1
 14618                           indf2	equ	0xFDF
 14619                           postinc2	equ	0xFDE
 14620                           postdec2	equ	0xFDD
 14621                           plusw2	equ	0xFDB
 14622                           fsr2h	equ	0xFDA
 14623                           fsr2l	equ	0xFD9
 14624                           status	equ	0xFD8
 14625                           
 14626                           	psect	rparam
 14627  0000                     tosu	equ	0xFFF
 14628                           tosh	equ	0xFFE
 14629                           tosl	equ	0xFFD
 14630                           pclatu	equ	0xFFB
 14631                           pclath	equ	0xFFA
 14632                           tblptru	equ	0xFF8
 14633                           tblptrh	equ	0xFF7
 14634                           tblptrl	equ	0xFF6
 14635                           tablat	equ	0xFF5
 14636                           prodh	equ	0xFF4
 14637                           prodl	equ	0xFF3
 14638                           intcon	equ	0xFF2
 14639                           postinc0	equ	0xFEE
 14640                           fsr0h	equ	0xFEA
 14641                           fsr0l	equ	0xFE9
 14642                           wreg	equ	0xFE8
 14643                           indf1	equ	0xFE7
 14644                           postinc1	equ	0xFE6
 14645                           postdec1	equ	0xFE5
 14646                           fsr1h	equ	0xFE2
 14647                           fsr1l	equ	0xFE1
 14648                           indf2	equ	0xFDF
 14649                           postinc2	equ	0xFDE
 14650                           postdec2	equ	0xFDD
 14651                           plusw2	equ	0xFDB
 14652                           fsr2h	equ	0xFDA
 14653                           fsr2l	equ	0xFD9
 14654                           status	equ	0xFD8
 14655                           
 14656                           	psect	temp
 14657  000056                     btemp:
 14658                           	opt stack 0
 14659  000056                     	ds	1
 14660  0000                     int$flags	set	btemp
 14661                           tosu	equ	0xFFF
 14662                           tosh	equ	0xFFE
 14663                           tosl	equ	0xFFD
 14664                           pclatu	equ	0xFFB
 14665                           pclath	equ	0xFFA
 14666                           tblptru	equ	0xFF8
 14667                           tblptrh	equ	0xFF7
 14668                           tblptrl	equ	0xFF6
 14669                           tablat	equ	0xFF5
 14670                           prodh	equ	0xFF4
 14671                           prodl	equ	0xFF3
 14672                           intcon	equ	0xFF2
 14673                           postinc0	equ	0xFEE
 14674                           fsr0h	equ	0xFEA
 14675                           fsr0l	equ	0xFE9
 14676                           wreg	equ	0xFE8
 14677                           indf1	equ	0xFE7
 14678                           postinc1	equ	0xFE6
 14679                           postdec1	equ	0xFE5
 14680                           fsr1h	equ	0xFE2
 14681                           fsr1l	equ	0xFE1
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           plusw2	equ	0xFDB
 14686                           fsr2h	equ	0xFDA
 14687                           fsr2l	equ	0xFD9
 14688                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    93
    Data        9
    BSS         579
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      85
    BANK0           160    110     154
    BANK1           256      0     196
    BANK2           256      0       0

Pointer List with Targets:

    HueTest@15703	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    HueTest@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    BrokenPinwheel@15769	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    BrokenPinwheel@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    DoubleFadedLoop@15744	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    DoubleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    MirroredQuadrants@15787	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    MirroredQuadrants@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFocusPulse@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFadedLoop@15734	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SingleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    CenterBreathe@15721	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    CenterBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@15711	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SetupPattern@listeningFocusPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    ListeningFocus	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SetupPattern@patternIDPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    PatternID	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SingleFocusPulse@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFocusPulse@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    SingleFocusPulse@focus	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    MirroredQuadrants@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    MirroredQuadrants@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    BrokenPinwheel@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    BrokenPinwheel@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    CenterBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    CenterBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    FullPulseHold@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    FullPulseHold@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    DotStar_Init@brightnessPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    Brightness	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S105$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S74$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S74$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CAN_RCVResponse->_ProcessReceive
    _ProcessReceive->i2_PostPatternControlService
    i2_PostPatternControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _SetListenFocus->i2___awdiv
    _SetBrightness->i2___awdiv

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_CenterBreathe
    _SingleFocusPulse->___awdiv
    _SingleFadedLoop->___awdiv
    _MirroredQuadrants->___awdiv
    _HueTest->___lwdiv
    _DoubleFadedLoop->___awdiv
    _CenterBreathe->___awdiv
    _BrokenPinwheel->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  165756
                                            109 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0  143591
                                            104 BANK0      5     5      0
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   21348
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   21348
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             91 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3  118202
                                             91 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   15540
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      68
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   91937
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        6     4      2   76301
                                             48 BANK0      6     4      2
                     _BrokenPinwheel
                      _CenterBreathe
                    _DoubleFadedLoop
                      _FullPulseHold
                            _HueTest
                  _MirroredQuadrants
                    _SingleFadedLoop
                   _SingleFocusPulse
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _SingleFocusPulse                                    30    20     10   10522
                                              8 BANK0     30    20     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SingleFadedLoop                                     28    18     10    9976
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _MirroredQuadrants                                   28    18     10   10306
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _HueTest                                             14     4     10   10837
                                             19 BANK0     14     4     10
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _FullPulseHold                                       22    12     10     879
                                              0 BANK0     22    12     10
 ---------------------------------------------------------------------------------
 (5) _DoubleFadedLoop                                     29    19     10   10534
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _CenterBreathe                                       40    30     10   10254
                                              8 BANK0     40    30     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _BrokenPinwheel                                      29    19     10   10791
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2020
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        22    20      2   15428
                                             69 BANK0     22    20      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3   10753
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3   10534
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4389
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     766
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3   10481
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3253
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   21769
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0   10378
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0   10672
                                             29 BANK0      4     4      0
                           _CAN_Init
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         4     0      4     196
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3   10333
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    9941
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2385
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    7030
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _CAN_Init                                             0     0      0       0
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (4) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    3469
                                             37 COMRAM    16    16      0
               _CAN_BusErrorResponse
                  _CAN_ErrorResponse
                    _CAN_RCVResponse
                   _CAN_XmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0    1108
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CAN_XmitResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_RCVResponse                                     0     0      0    2361
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      5     5      0    2361
                                             32 COMRAM     5     5      0
                      _SetBrightness
                     _SetListenFocus
                         _SetPattern
        i2_PostPatternControlService
                          i2___awmod
 ---------------------------------------------------------------------------------
 (13) i2_PostPatternControlService                         3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     967
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     827
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) _SetPattern                                          1     1      0      22
                                              0 COMRAM     1     1      0
                     i2_ResetPattern
 ---------------------------------------------------------------------------------
 (14) i2_ResetPattern                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _SetListenFocus                                      1     1      0     426
                                              8 COMRAM     1     1      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (13) _SetBrightness                                       3     3      0     449
                                              8 COMRAM     3     3      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (14) i2___awdiv                                           8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (11) _CAN_ErrorResponse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_BusErrorResponse                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _CAN_Init
         _InitCanHardware
         _InitPins
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusPulse
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_InitTimer
         _UpdatePattern
           _BrokenPinwheel
             ___awdiv
             ___awmod
           _CenterBreathe
             ___awdiv
             ___awmod
           _DoubleFadedLoop
             ___awdiv
             ___awmod
           _FullPulseHold
           _HueTest
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _MirroredQuadrants
             ___awdiv
             ___awmod
           _SingleFadedLoop
             ___awdiv
             ___awmod
           _SingleFocusPulse
             ___awdiv
             ___awmod
           ___awdiv
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusPulse
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CAN_BusErrorResponse
   _CAN_ErrorResponse
   _CAN_RCVResponse
     _ProcessReceive
       _SetBrightness
         i2___awdiv
       _SetListenFocus
         i2___awdiv
       _SetPattern
         i2_ResetPattern
       i2_PostPatternControlService
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
       i2___awmod
   _CAN_XmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6E      9A       4       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      55       1       90.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       9        0.0%
DATA                 0      0     2EF      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Jan 23 02:04:35 2017

                 HSV_to_RGB@HSV_Value 0073                      ??__HW_Timer_Init 0062  
              MirroredQuadrants@15787 0070                   UpdatePattern@i_1348 0095  
                 __HW_Timer_Init@Rate 0060                          ___awdiv@sign 0065  
                 ___wmul@multiplicand 0068                       ??_UpdatePattern 0092  
       DotStar_Init@brightnessPointer 0060                        FullPulseHold@i 0075  
                         __CFG_OSC$HS 000000                __size_of_FullPulseHold 018E  
 RunPatternControlService@ReturnEvent 00BE                                   l410 2974  
                                 l326 2EC6                                   l613 3450  
                                 l616 34AC                                   l491 11A2  
                                 l483 32C8                                   l493 11B4  
                                 l661 250E                                   l494 11CE  
                                 l495 11E8                                   l496 11FA  
                                 l497 1214                                   l697 1AA4  
               __end_of_ES_Initialize 2C5C                                   _GIE 007F97  
                                 _ISR 0008             __end_of_SPI32_EOTResponse 3968  
              __end_ofi2_ResetPattern 3B8C                          ___awmod@sign 0065  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                ES_EnQueueFIFO@SaveCrit 0074  
             ES_EnQueueFIFO@Event2Add 006E                     ?_ES_PostToService 0077  
        FullPulseHold@ptrnStepCounter 0062                                  ?_ISR 0001  
          i2ES_EnQueueFIFO@pThisQueue 0016             FullPulseHold@cycleCounter 0064  
                        __CFG_WDT$OFF 000000            ES_Timer_Tick_Resp@NewEvent 00D2  
                                l1261 3536                                  l3021 2F06  
                                l3031 2F36                                  l3015 2EF0  
                                l3027 2F24                                  l3043 2F74  
                                l3211 2494                                  l3203 2424  
                                l3061 34F8                                  l3029 2F30  
                                l3205 247E                                  l3301 229A  
                                l4013 295E                                  l3047 2F88  
                                l3039 2F66                                  l3223 17BE  
                                l3303 22D8                                  l3311 2344  
                                l4111 2B58                                  l3057 34E6  
                                l3129 1012                                  l3217 24E0  
                                l4009 2956                                  l4105 2B04  
                                l3059 34F2                                  l3147 122E  
                                l3243 18EA                                  l3331 0AC4  
                                l3323 0A84                                  l3315 09C4  
                                l3069 3528                                  l3149 1264  
                                l3261 1A10                                  l3229 17C8  
                                l3333 0B02                                  l3173 2988  
                                l3421 1386                                  l4071 2B82  
                                l3255 1972                                  l3343 0C54  
                                l3319 09CE                                  l3183 2A42  
                                l3511 3104                                  l3417 0980  
                                l3273 1A8E                                  l3257 19E6  
                                l3361 0D5A                                  l3353 0D1A  
                                l3345 0C5A                                  l3193 23AA  
                                l3177 2992                                  l3425 1390  
                                l3521 3190                                  l4137 39AC  
                                l4091 2C52                                  l4083 2BD4  
                                l4075 2B8C                                  l3259 19F0  
                                l3363 0D98                                  l4139 39B4  
                                l3533 37A8                                  l3613 2516  
                                l3381 03CE                                  l3269 1A7C  
                                l3373 0EEA                                  l3349 0C64  
                                l3189 23A0                                  l3437 1532  
                                l3429 14BC                                  l3453 176E  
                                l3293 2224                                  l3285 20EE  
                                l3605 1DEC                                  l3525 3196  
                                l4079 2BD0                                  l4095 2C58  
                                l3279 1ACE                                  l3199 2412  
                                l3439 1570                                  l3463 1E60  
                                l3607 1E34                                  l3625 2626  
                                l3617 2520                                  l3393 0574  
                                l3385 04FA                                  l3377 03C4  
                                l3289 20F8                                  l3633 388A  
                                l3395 05B0                                  l3459 1E56  
                                l3571 1B70                                  l3563 1B0E  
                                l4099 2A82                                  l4291 329E  
                                l3477 2002                                  l3469 1F8E  
                                l3581 1CB2                                  l3573 1BB2  
                                l3557 1AFE                                  l3629 3880  
                                l4285 3268                                  l2951 31EE  
                                l2943 31C8                                  l3479 203E  
                                l3487 20AA                                  l3591 1DBC  
                                l3575 1BF4                                  l3559 1B04  
                                l3639 38AA                                  l4287 327A  
                                l4295 32B0                                  l3913 36F2  
                                l3833 386E                                  l3825 3846  
                                l3593 1DC2                                  l3585 1D16  
                                l3577 1C32                                  l3569 1B2E  
                                l4289 328C                                  l2963 3234  
                                l2955 3212                                  l2947 31DC  
                                l2939 31B8                                  l3579 1C70  
                                l3819 3710                                  l3931 2E4E  
                                l3771 2830                                  l2949 31E8  
                                l3597 1DCC                                  l3589 1D7A  
                                l3933 2E52                                  l2959 3220  
                                l2983 2D3A                                  l3855 271C  
                                l3943 2E72                                  l3927 2E40  
                                l3919 2E14                                  l3759 277A  
                                l3865 2760                                  l3937 2E62  
                                l3769 27F2                                  l3859 2738  
                                l3955 2E94                                  l3963 2EAA  
                                l3883 3B8E                                  l3981 392A  
                                l3949 2E84                                  l2999 35B2  
                                l3991 2890                                  l3887 3B96  
                                l3987 2884                                  l3999 28C6  
                                STR_1 035E                                  STR_2 0379  
                                STR_3 0391                                  STR_4 03A8  
                                _LATA 000F89                                  _LATB 000F8A  
                                u2055 19D0                                  _LATC 000F8B  
                                u2364 312A                                  u2365 3122  
                                _PIE1 000F9D                                  u1905 0F84  
                                u2660 373C                                  u2638 27DA  
                                u2665 3732                                  _PEIE 007F96  
                                u2958 2C2C                                  u2959 2C48  
                                u2998 2B2E                                  u2999 2B46  
                  ??_ES_PostToService 007A                 __end_of_CenterBreathe 1AFC  
               SingleFocusPulse@focus 0070                      ??_BrokenPinwheel 0072  
                     __end_of_HW_Init 3A72                                  _main 323E  
                         ?_ES_DeQueue 006C                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0056  
                       main@ErrorType 00CD                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0016                      _SingleFocusPulse 1E42  
                    __end_of_CAN_Init 3C10     __end_of_InitPatternControlService 36F6  
                         ?_SPI32_Init 0001                         __CFG_MCLRE$ON 000000  
                        ___param_bank 000010                       __end_of_HueTest 2A80  
                __end_of_GetNextFrame 3B3E                      FullPulseHold@val 0074  
             __end_of_InitCanHardware 34C8                                 ??_ISR 0026  
           CenterBreathe@cycleCounter 006C                    ES_Run@HighestPrior 00CC  
                               ?_main 0001                 __end_of_ES_Timer_Init 3BEE  
                     __end_of___awdiv 2F92                       __end_of___awmod 323E  
                     __end_of___lbmod 387A                       ___awdiv@divisor 0062  
                               _T1CON 000FCD                       __end_of___lwdiv 3540  
                               _ERRIE 007D1D                                 _ERRIF 007D25  
                               i2l167 2DD0                                 i2l633 30D6  
                     ___awdiv@counter 0064                                 _IRXIE 007D1F  
                               _IRXIF 007D27           ??i2_PostSPI32ControlService 0021  
                   BrokenPinwheel@val 0083                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _TRISA 000F92                                 _TRISC 000F94  
                               _SSPIE 007CEB                                 _SSPIF 007CF3  
            __size_of_SingleFadedLoop 029A                            _Brightness 00F0  
                       __CFG_PWRT$OFF 000000                       ?i2_ResetPattern 0001  
                _SPI32_TransmitFrames 39D2                       HueTest@base_hue 0079  
                     HueTest@base_sat 007A                           ?_HSV_to_RGB 0073  
                               _Ready 00DD            __size_of_CAN_ErrorResponse 0002  
       BrokenPinwheel@ptrnStepCounter 006A       __end_of_InitSPI32ControlService 392E  
                          _FrameIndex 00E5                                 _putch 3C2E  
                        HueTest@15703 007B                        __CFG_BOREN$OFF 000000  
                               pclath 000FFA                                 tablat 000FF5  
                    SingleFadedLoop@i 0083                      SingleFadedLoop@x 0082  
                    __end_ofi2___wmul 3A2A                                 plusw2 000FDB  
                               status 000FD8                         _FullPulseHold 2382  
             SPI32_SendFrame@newFrame 0060          __end_of_CAN_BusErrorResponse 3C34  
                  __size_ofi2___awdiv 0084                      ?_SPI32_SendFrame 0060  
                  __size_ofi2___awmod 0070                       __initialization 33CE  
              ES_GetMSBitSet@LoopCntr 0069               SetListenFocus@listFocus 0009  
                        __end_of_main 32CA                     ES_Timer_Init@Rate 0062  
                    __end_of_InitPins 3B72              __size_of_DoubleFadedLoop 056A  
                 __end_of_EventQueues 035E                                ??_main 00CD  
                   ?i2_ES_EnQueueFIFO 000D                         __activetblptr 000002  
          __size_of_SPI32_EOTResponse 003A                   __size_of_ES_DeQueue 0128  
                     _Nybble2MSBitNum 0341                 ?_SPI32_TransmitFrames 0080  
    __end_of__HW_Process_Pending_Ints 3BA2              ProcessReceive@Event2Post 0023  
                  ??i2_ES_EnQueueFIFO 0012              ProcessReceive@LastButton 0054  
                __end_of_DotStar_Init 379A                  __end_of_DotStar_Show 263E  
                 __size_of_SPI32_Init 0006                                _ADCON1 000FC1  
                           ??_HW_Init 0060                                _CCP1IF 007CF2  
                              _CANCON 000F6F                            _PatternOff 387A  
                              _CCPR1H 000FBF                                _CCPR1L 000FBE  
                    ___awdiv@dividend 0060                                _CIOCON 000F73  
                          _MyPriority 00E6                                ?_putch 0001  
                    ??_ES_GetMSBitSet 0062                            _SetPattern 3BFA  
                              i2l3101 360E                                i2l3105 361C  
                  HueTest@ptrnPointer 0073                                i2l3081 35CA  
                              i2l4033 307C                                i2l3091 35EC  
                              i2l4043 3098                                i2l4027 3068  
                              i2l4051 30DA                                i2l3093 35F0  
                              i2l3085 35D6                                i2l4037 308A  
                              i2l4029 306E                                i2l4125 3952  
                              i2l4063 3802                                i2l3097 3604  
                              i2l3089 35E4                                i2l3505 3042  
                              i2l4049 30BC                                i2l4233 2DA8  
                              i2l4251 2DC6                                i2l4227 2D9E  
                              i2l4245 2DBC                                i2l4239 2DB2  
                              i2l3713 32DE                                i2l3725 3304  
                              i2l3741 3336                                i2l3727 330C  
                              i2l3719 32EE                                i2l3745 3344  
                              i2l3737 332C                                i2l3729 3310  
                              _INTCON 000FF2                                i2l3699 368C  
                  BrokenPinwheel@fade 0082                        ?_FullPulseHold 0060  
                              _RXB0D0 000F66                                _RXB0D1 000F67  
                              _RXB0D2 000F68                     _MirroredQuadrants 1380  
                              _RXB0IE 007D18                                _RXB0IF 007D20  
                              _ES_Run 2A80                                _TXB0IE 007D1A  
                              _TXB0IF 007D22                                _SSPADD 000FC8  
                              _SSPBUF 000FC9             i2_PostSPI32ControlService 3BA2  
                           ??_HueTest 007D                    ?_MirroredQuadrants 0068  
                    ??_ES_EnQueueFIFO 0071                        _Timer2PostFunc 0321  
       SPI32_TransmitFrames@numFrames 0082                         ?_PausePattern 0001  
                              _Queue0 0048                                _Queue1 01B8  
                      _SysTickCounter 003E            BrokenPinwheel@cycleCounter 006C  
                 __size_of_HSV_to_RGB 0458              ??_RunSPI32ControlService 00BE  
                              ___wmul 3968       InitSPI32ControlService@Priority 0080  
                           ??___awdiv 0064                             ??___awmod 0064  
                           ??___lbmod 0061                   ??_MirroredQuadrants 0072  
                    ?_InitCanHardware 0001                             ??___lwdiv 0070  
         __size_of_ES_Timer_InitTimer 0080                                clear_0 340E  
                              clear_1 3420                                clear_2 342C  
                              clear_3 3438                      ___awdiv@quotient 0066  
                     ___awmod@divisor 0062                         ??_ShowPattern 00BB  
           ES_Timer_InitTimer@NewTime 0060             __size_of_CAN_XmitResponse 0006  
                     ___awmod@counter 0064                                _printf 399E  
                         ISR@LastTime 003A                        i2___awdiv@sign 0006  
                        __pdataCOMRAM 0054                     __end_ofi2___awdiv 334E  
              ES_InitQueue@pThisQueue 0063                     __end_ofi2___awmod 3626  
            __size_of_CAN_RCVResponse 000C                          __mediumconst 0000  
                    CAN_RX_HW@ListLoc 0043                           ISR@NextTime 003C  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                      ??_SetListenFocus 0009  
 __end_ofi2_PostPatternControlService 3BCE           i2_PostPatternControlService 3BB8  
                           ?_CAN_Init 0001                                putch@c 0001  
        SetupPattern@patternIDPointer 0060                        i2___awmod@sign 0006  
         __size_of_ES_Timer_Tick_Resp 0116                  ES_DeQueue@pThisQueue 0074  
           __end_of_MirroredQuadrants 17AC               ES_GetMSBitSet@Val2Check 0060  
                   ??_SingleFadedLoop 0072                       ___lbmod@divisor 0060  
                          __accesstop 0060               __end_of__initialization 343E  
              __end_of_Timer2PostFunc 0341                       ___lbmod@counter 0062  
     RunSPI32ControlService@ThisEvent 00BB                       __CFG_PBADEN$OFF 000000  
   __size_of_RunPatternControlService 00C8                __size_of_SetBrightness 0026  
           ?_RunPatternControlService 00BB           DoubleFadedLoop@cycleCounter 006C  
                  FullPulseHold@15711 0068                 __size_of_GetNextFrame 001A  
                       ___rparam_used 000001                 FullPulseHold@base_hue 0066  
               FullPulseHold@base_sat 0067           ??_InitPatternControlService 007D  
                         PatternOff@i 0062                   SingleFocusPulse@val 0081  
                      ??_PausePattern 0065                           _EventQueues 0358  
         __size_ofi2_ES_PostToService 006A                        __pcstackCOMRAM 0001  
                        __pidataBANK0 3C18           __size_of_ES_Timer_StopTimer 004E  
                       ?_ES_InitQueue 0060      __size_of_InitSPI32ControlService 003A  
             __end_of_Nybble2MSBitNum 0350     _PostSPI32ControlService$intlevel0 3B0E  
                       __end_of_putch 3C30                       _TMR_ActiveFlags 00DF  
              ??_SPI32_TransmitFrames 0083                             ?i2___wmul 0007  
             ES_GetMSBitSet@ReturnVal 0067                         ?_ResetPattern 0001  
                _CAN_BusErrorResponse 3C32              __end_of_SingleFocusPulse 20E8  
             __size_of_ProcessReceive 00B2                     ??_DoubleFadedLoop 0072  
                 __end_of_ShowPattern 3A92                            ??_CAN_Init 0060  
                       ??_StopPattern 00BB                  DoubleFadedLoop@15744 0070  
                      _TMR_TimerArray 0100                          _GetNextFrame 3B24  
                         ?_PatternOff 0060              ES_EnQueueFIFO@pThisQueue 0075  
                     ??_FullPulseHold 006A                               ??_putch 0060  
            __HW_Process_Pending_Ints 3B8C                            __pbssBANK0 00CE  
                          __pbssBANK1 0100                           ?_SetPattern 0001  
                           ?_InitPins 0001                               ?_ES_Run 0001  
                        ??_ES_DeQueue 0070                          ??_SPI32_Init 0060  
                    DoubleFadedLoop@i 0083                    DoubleFadedLoop@val 0081  
                    DoubleFadedLoop@x 0082              ?_PostSPI32ControlService 007D  
           __size_of_ES_PostToService 0076                        ??_ES_InitQueue 0063  
                             ?___wmul 0066                   BrokenPinwheel@15769 0070  
     __size_of_RunSPI32ControlService 0106                               _CCP1CON 000FBD  
           BrokenPinwheel@ptrnPointer 0068                               _ECANCON 000F77  
                    ??i2_ResetPattern 0001           SingleFocusPulse@ptrnPointer 0068  
                             ?_printf 0060                         _SetBrightness 3A2A  
      DoubleFadedLoop@ptrnStepCounter 006A                 __size_of_DotStar_Init 0052  
                      ??_ResetPattern 0060                 __end_of_UpdatePattern 1E42  
               __size_of_DotStar_Show 012E                            ??i2___wmul 000B  
               ?_CAN_BusErrorResponse 0001             _InitPatternControlService 3690  
                _DoubleFadedLoop$1262 0079                  _DoubleFadedLoop$1263 007B  
                _DoubleFadedLoop$1265 007D                  _DoubleFadedLoop$1266 007F  
                  __end_of_ES_DeQueue 2766                i2ES_EnQueueFIFO@pBlock 000D  
               ES_Timer_StopTimer@Num 0064                          ??_HSV_to_RGB 0075  
                             _HW_Init 3A50                               _SSPCON1 000FC6  
                  __end_of_SPI32_Init 3C26              SingleFocusPulse@base_hue 006E  
            SingleFocusPulse@base_sat 006F            __size_of_MirroredQuadrants 042C  
                             _SSPSTAT 000FC7                    MirroredQuadrants@i 0083  
                  MirroredQuadrants@x 0081   _PostPatternControlService$intlevel0 3AF2  
                   ??_CAN_RCVResponse 0026      SPI32_ControlService@CurrentState 00E2  
                          ??_InitPins 0060                       __size_of_ES_Run 00F0  
          SetBrightness@newBrightness 0009                   __end_of_StopPattern 3AEC  
                         _PixelFrames 01C4                               _HueTest 2982  
                       ?_SetupPattern 0060                __size_of_ES_Initialize 00EC  
                             _ListLoc 0046                               __Hparam 0000  
                             __Lparam 0000    i2PostSPI32ControlService@ThisEvent 001E  
    PostSPI32ControlService@ThisEvent 007D      InitSPI32ControlService@ThisEvent 007D  
           i2ES_EnQueueFIFO@Event2Add 000F                          _DotStar_Init 3748  
                        _DotStar_Show 2510                    __end_of_HSV_to_RGB 1380  
                             ___awdiv 2ED4            ?_PostPatternControlService 007D  
                             ___awmod 319C                               ___lbmod 3836  
                     __size_of___wmul 0036                               ___lwdiv 34C8  
  __size_ofi2_PostSPI32ControlService 0016                          __psmallconst 0300  
                 __size_of_PatternOff 003E                 ES_Timer_InitTimer@Num 0064  
                  _UpdatePattern$1970 0092                    _UpdatePattern$1971 0093  
          i2ES_PostToService@TheEvent 0018                               __pcinit 33CE  
                    _CAN_XmitResponse 3C26                               __ramtop 0300  
                 __size_of_SetPattern 000C                        ?_SetBrightness 0001  
              __size_of_CenterBreathe 0350                           _ShowPattern 3A72  
                             __ptext0 323E                               __ptext1 399E  
                             __ptext2 3C2E                               __ptext3 2A80  
                             __ptext4 3B8C                               __ptext5 2766  
                             __ptext6 30F8                               __ptext7 2E0C  
                             __ptext8 287C                               __ptext9 36F6  
            i2ES_EnQueueFIFO@SaveCrit 0015                       __size_of_printf 0034  
                        __size_of_ISR 2E04                           HSV_to_RGB@b 0097  
                         HSV_to_RGB@g 0095                           HSV_to_RGB@h 008D  
                         HSV_to_RGB@p 00A1                           HSV_to_RGB@q 0099  
                         HSV_to_RGB@r 0093                           HSV_to_RGB@s 009F  
                         HSV_to_RGB@t 009B                           HSV_to_RGB@v 00A3  
                        _FramePointer 00D7               __size_of__HW_Timer_Init 001E  
                    ___awmod@dividend 0060                       ES_Run@ThisEvent 00ED  
                __end_of_PausePattern 3C18                      CenterBreathe@val 008C  
        ProcessReceive@CurrentPattern 0045                _RunSPI32ControlService 287C  
                      __pintcode_body 2D3E                  end_of_initialization 343E  
                        _CycleCounter 00E9             __size_ofi2_ES_EnQueueFIFO 00B4  
                       __Lmediumconst 0000                               int_func 2D3E  
                 i2___wmul@multiplier 0007       __end_of_PostSPI32ControlService 3B24  
        ES_PostToService@WhichService 007C                        ??_SetupPattern 0064  
              __size_of_ES_Timer_Init 000E                    SingleFadedLoop@val 0081  
            FullPulseHold@ptrnPointer 0060                               printf@c 0064  
                             printf@f 0060               _InitSPI32ControlService 38F4  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE               __size_of_BrokenPinwheel 0606  
   __end_of_PostPatternControlService 3B08              __size_of_SPI32_SendFrame 0052  
              ??_CAN_BusErrorResponse 0001             i2SPI32_SendFrame@newFrame 0001  
                     _SingleFadedLoop 20E8                         _ES_Initialize 2B70  
                      _ProcessReceive 3046      __end_of_RunPatternControlService 2ED4  
                    ___lbmod@dividend 0061                   CenterBreathe@rising 00F3  
i2PostPatternControlService@ThisEvent 001E     RunPatternControlService@ThisEvent 00BB  
  PostPatternControlService@ThisEvent 007D    InitPatternControlService@ThisEvent 007D  
                           _TRISBbits 000F93                  __end_of_ES_EventList 0301  
                         _StopPattern 3AD0                  __end_of_ES_InitQueue 38F4  
                           i2___awdiv 32CA                             i2___awmod 35B6  
                MirroredQuadrants@val 0082                        ES_Initialize@i 0083  
                   __size_of_CAN_Init 000A                           ___lbmod@rem 0063  
                       _CenterBreathe 17AC                   _BrokenPinwheel$1290 007D  
                 _BrokenPinwheel$1291 007F                  SingleFocusPulse@head 0084  
                      __end_of_ES_Run 2B70                    i2___awdiv@dividend 0001  
                __end_of_ResetPattern 3B58                    _CenterBreathe$1232 007B  
                  _CenterBreathe$1233 007D                    _CenterBreathe$1234 007F  
                  _CenterBreathe$1235 0081                    _CenterBreathe$1236 0083  
                  _CenterBreathe$1237 0085                    _CenterBreathe$1238 0087  
                  _CenterBreathe$1239 0089  __size_ofi2_PostPatternControlService 0016  
                    _ES_PostToService 3540            __end_of_ES_Timer_InitTimer 33CE  
                __end_of_ServDescList 0358                       ??_SetBrightness 0009  
                     _DoubleFadedLoop 09BE                        __end_of___wmul 399E  
                       __pidataCOMRAM 3C2C                     i2_SPI32_SendFrame 37E8  
                           _FrameByte 00F5                __end_of_ProcessReceive 30F8  
                      ?_ES_Initialize 0081            ??__HW_Process_Pending_Ints 0084  
                  ?i2_SPI32_SendFrame 0001                         _ES_Timer_Init 3BE0  
                    i2___wmul@product 000B                        __end_of_printf 39D2  
            __size_of_InitCanHardware 007C            __end_of_ES_Timer_Tick_Resp 287C  
                 start_initialization 33CE                    i2___awdiv@quotient 0007  
                   ?_SingleFocusPulse 0068                     SingleFocusPulse@i 0085  
                         __end_of_ISR 2E0C                     __size_ofi2___wmul 0026  
                   SingleFocusPulse@x 0082                     SingleFocusPulse@y 0083  
                        _CurrentFrame 00CE                          _CurrentState 00E4  
                        ??_PatternOff 0062                   ??i2_SPI32_SendFrame 0005  
                  ??_SingleFocusPulse 0072                            ?i2___awdiv 0001  
                          ?i2___awmod 0001                   FullPulseHold@rising 00F4  
          DoubleFadedLoop@ptrnPointer 0068                          ??_SetPattern 0001  
                         _CANSTATbits 000F6E    __size_of_InitPatternControlService 0066  
                      ?_CenterBreathe 0068                              ??_ES_Run 00C8  
                           _PatternID 00DB                             _TickCount 00E8  
                           _NumFrames 00E7            __end_ofi2_ES_PostToService 3690  
                   __size_of_InitPins 001A             ??_InitSPI32ControlService 007D  
            CenterBreathe@fade_thresh 008B            __end_of_ES_Timer_StopTimer 37E8  
                           _NumPixels 0047                   SetPattern@PatternID 0001  
             __size_of_ES_GetMSBitSet 00A4               __end_of_SingleFadedLoop 2382  
                            ??___wmul 006A             __end_ofi2_SPI32_SendFrame 3836  
                      CenterBreathe@i 008F                        CenterBreathe@x 008E  
                         __pdataBANK0 00F3                  _SingleFadedLoop$1250 007D  
                _SingleFadedLoop$1251 007F                    __end_of_PatternOff 38B8  
             __size_of_ES_EnQueueFIFO 00E2                              ??_printf 0062  
           SPI32_EOTResponse@EOTevent 0021                 __size_of_PausePattern 0008  
                      ?_ES_Timer_Init 0062                    __end_of_SetPattern 3C06  
                     ?_ProcessReceive 0001               DoubleFadedLoop@base_hue 006E  
             DoubleFadedLoop@base_sat 006F                       _CAN_RCVResponse 3BEE  
                      __HW_Timer_Init 3AB2                           __pbssBIGRAM 01C4  
                __end_of_SetupPattern 3BE0                           __pbssCOMRAM 0036  
    __size_of_PostSPI32ControlService 001C         __size_of_SPI32_TransmitFrames 0032  
                   ??_SPI32_SendFrame 0064                         __pcstackBANK0 0060  
                         _BRGCON1bits 000F70                           _BRGCON2bits 000F71  
                  ES_InitQueue@pBlock 0060                           _BRGCON3bits 000F72  
   RunPatternControlService@testEvent 00C1                              ?_HW_Init 0001  
            _RunPatternControlService 2E0C                 DoubleFadedLoop@i_1264 0084  
               __end_of_FullPulseHold 2510              __end_of_CAN_XmitResponse 3C2C  
    SPI32_TransmitFrames@framePointer 0080                      i2_ES_EnQueueFIFO 2F92  
                    HSV_to_RGB@region 008F                         __PRIMASK_temp 0040  
                            ?_HueTest 0073               __size_of_SetListenFocus 0020  
             __end_of_DoubleFadedLoop 0F28                      ___lwdiv@dividend 006C  
             SingleFadedLoop@base_hue 006E               SingleFadedLoop@base_sat 006F  
                        _PausePattern 3C10                             __pintcode 0008  
                      _BrokenPinwheel 03B8                              ?___awdiv 0060  
                            ?___awmod 0060                              ?___lbmod 0060  
          DotStar_Show@patternPointer 00A5           ??_PostPatternControlService 0080  
                            ?___lwdiv 006C     SetupPattern@listeningFocusPointer 0062  
                     ??_ES_Initialize 0083              ES_PostToService@TheEvent 0077  
              __end_of__HW_Timer_Init 3AD0                          ?_ShowPattern 0001  
                         __smallconst 0300                 __size_of_ES_InitQueue 003C  
             ?_RunSPI32ControlService 00BB                              _CAN_Init 3C06  
                    ___lwdiv@quotient 0070                           ??i2___awdiv 0005  
                     ??_CenterBreathe 0072                           ??i2___awmod 0005  
                      __size_of_putch 0002          CenterBreathe@ptrnStepCounter 006A  
               __size_of_ResetPattern 001A                  ES_Initialize@NewRate 0081  
                   ??_InitCanHardware 0060             ES_GetMSBitSet@Nybble2Test 0068  
                  _PatternStepCounter 00F2                    CenterBreathe@15721 0070  
                      ___wmul@product 006A                __size_of_UpdatePattern 0346  
              __end_of_BrokenPinwheel 09BE                              i2u291_40 382C  
                            i2u291_45 3822                              _RXB0EIDH 000F63  
                            _RXB0EIDL 000F64               SetBrightness@brightness 000B  
                            _RXB0SIDH 000F61                              _RXB0SIDL 000F62  
                            _RXF0EIDH 000F02                              _RXF0EIDL 000F03  
                            _RXF0SIDH 000F00                          _ES_EventList 0301  
                            _RXF0SIDL 000F01                      ?_SingleFadedLoop 0068  
          __size_ofi2_SPI32_SendFrame 004E                              _RXM0EIDH 000F1A  
                            _RXM0EIDL 000F1B      MirroredQuadrants@ptrnStepCounter 006A  
             __end_of_CAN_RCVResponse 3BFA                          _ES_InitQueue 38B8  
                            _RXM0SIDH 000F18                              _RXM0SIDL 000F19  
                     ??_ES_Timer_Init 0064                        _ListeningFocus 00D9  
      i2ES_PostToService@WhichService 001D                       ?__HW_Timer_Init 0060  
                   ___wmul@multiplier 0066        __end_of_RunSPI32ControlService 2982  
                            i2___wmul 3A04                              HueTest@i 0080  
                        _ResetPattern 3B3E                     i2___awdiv@divisor 0003  
                  ES_DeQueue@SaveCrit 0072                  ES_EnQueueFIFO@pBlock 006C  
                   i2___awdiv@counter 0005              __end_of_ES_PostToService 35B6  
      SingleFadedLoop@ptrnStepCounter 006A                          ?_StopPattern 0001  
             __size_ofi2_ResetPattern 001A                       BrokenPinwheel@i 0084  
        ?i2_PostPatternControlService 001E             _PostPatternControlService 3AEC  
                     BrokenPinwheel@x 0081                             copy_data0 33E2  
                    __size_of_HW_Init 0022                        _BitNum2SetMask 0301  
                      _PatternConfigs 00F6                          _ServDescList 0350  
                  i2___awmod@dividend 0001                              _InitPins 3B58  
                        _PixelPattern 0120                   CAN_RX_HW@Brightness 0042  
                    ?_DoubleFadedLoop 0068                      __size_of_HueTest 00FE  
                            __Hrparam 0000                        _ES_GetMSBitSet 30F8  
                     ?_BrokenPinwheel 0068                    _FullPulseHold$1218 0072  
                            __Lrparam 0000          SingleFocusPulse@cycleCounter 006C  
   RunSPI32ControlService@ReturnEvent 00C5                  SingleFadedLoop@15734 0070  
                    __size_of___awdiv 00BE                   _ProcessReceive$1196 0021  
                    __size_of___awmod 00A2                      __size_of___lbmod 0044  
               __size_of_SetupPattern 0012                 i2___wmul@multiplicand 0009  
                      _ES_EnQueueFIFO 2C5C                      __size_of___lwdiv 0078  
          ?i2_PostSPI32ControlService 001E               _PostSPI32ControlService 3B08  
                     HSV_to_RGB@fpart 0091                         _UpdatePattern 1AFC  
       __size_of_CAN_BusErrorResponse 0002                    _ES_Timer_InitTimer 334E  
                     ___lwdiv@divisor 006E                       ___lwdiv@counter 0072  
              __end_of_BitNum2SetMask 0321                              __ptext10 3B24  
                            __ptext11 3AD0                              __ptext20 2382  
                            __ptext12 3B3E                              __ptext21 09BE  
                            __ptext13 387A                              __ptext30 0F28  
                            __ptext22 17AC                              __ptext14 3A72  
                            __ptext31 34C8                              __ptext23 03B8  
                            __ptext15 1AFC                              __ptext40 3A50  
                            __ptext32 3C10                              __ptext24 2ED4  
                            __ptext16 1E42                              __ptext41 3BCE  
                            __ptext33 379A                              __ptext25 334E  
                            __ptext17 20E8                              __ptext50 3BE0  
                            __ptext42 3540                              __ptext34 263E  
                            __ptext26 2510                              __ptext18 1380  
                            __ptext51 3AB2                              __ptext43 2C5C  
                            __ptext35 3836                              __ptext27 39D2  
                            __ptext19 2982                              __ptext60 3BB8  
                            __ptext52 38B8                              __ptext44 3968  
                            __ptext36 2B70                              __ptext28 3AEC  
                            __ptext61 3626                              __ptext45 319C  
                            __ptext37 3690                              __ptext29 3B08  
                            __ptext70 3C30                              __ptext62 2F92  
                            __ptext54 392E                              __ptext46 3748  
                            __ptext38 38F4                              __ptext71 3C32  
                            __ptext63 3A04                              __ptext55 37E8  
                            __ptext47 3C06                              __ptext39 3C20  
                            __ptext72 0000                              __ptext64 35B6  
                            __ptext56 3BA2                              __ptext48 3B58  
                            __ptext65 3BFA                              __ptext57 3C26  
                            __ptext49 344C                              __ptext66 3B72  
                            __ptext58 3BEE                              __ptext67 3A92  
                            __ptext59 3046                              __ptext68 3A2A  
                            __ptext69 32CA                         ?_GetNextFrame 0060  
   ES_Timer_Tick_Resp@NeedsProcessing 00D5             MirroredQuadrants@base_hue 006E  
           MirroredQuadrants@base_sat 006F                        UpdatePattern@i 0094  
                 ?_ES_Timer_InitTimer 0060         ??i2_PostPatternControlService 0021  
                     _HSV_to_RGB$1969 009D                         __size_of_main 008C  
                  _ES_Timer_Tick_Resp 2766                _MirroredQuadrants$1302 007D  
              _MirroredQuadrants$1303 007F                        _SetListenFocus 3A92  
              __end_of_ES_GetMSBitSet 319C                          _SetupPattern 3BCE  
           __size_of_SingleFocusPulse 02A6                   ?_ES_Timer_Tick_Resp 0001  
                 CAN_RX_HW@MyPriority 0044                   HueTest@cycleCounter 0077  
              __end_of_ES_EnQueueFIFO 2D3E                      ??_ProcessReceive 0021  
                            int$flags 0056                       _SPI32_SendFrame 36F6  
                    ?_CAN_RCVResponse 0001                  ??_ES_Timer_InitTimer 0062  
      SPI32_ControlService@MyPriority 00E3                         _MaxBrightness 0055  
                   ES_DeQueue@NumLeft 0073                 __end_of_SetBrightness 3A50  
                  i2_ES_PostToService 3626              __end_ofi2_ES_EnQueueFIFO 3046  
                  _ES_Timer_StopTimer 379A                        ?_UpdatePattern 0090  
          ??_RunPatternControlService 00BE                         DotStar_Show@i 00BA  
                         _RXB0CONbits 000F60                     i2___awmod@divisor 0003  
                   i2___awmod@counter 0005       SingleFocusPulse@ptrnStepCounter 006A  
                __size_of_ShowPattern 0020     __end_ofi2_PostSPI32ControlService 3BB8  
        MirroredQuadrants@ptrnPointer 0068                   ?i2_ES_PostToService 0018  
                      ??_GetNextFrame 0064         MirroredQuadrants@cycleCounter 006C  
                ??_ES_Timer_Tick_Resp 0080                   ?_ES_Timer_StopTimer 0001  
                   _CAN_ErrorResponse 3C30                              intlevel2 0000  
              __end_of_SetListenFocus 3AB2                    ?_CAN_ErrorResponse 0001  
              BrokenPinwheel@base_hue 006E                BrokenPinwheel@base_sat 006F  
                   ?_CAN_XmitResponse 0001                            _ES_DeQueue 263E  
   __size_of__HW_Process_Pending_Ints 0016                         _TransmitFrame 0036  
              HueTest@ptrnStepCounter 0075             ?__HW_Process_Pending_Ints 0001  
                         _TXB0CONbits 000F40                       ?_ES_GetMSBitSet 0060  
        __end_of_SPI32_TransmitFrames 3A04                    ??_CAN_XmitResponse 0001  
          SingleFadedLoop@ptrnPointer 0068                   ??_CAN_ErrorResponse 0001  
                ??i2_ES_PostToService 001B                            _SPI32_Init 3C20  
               _SingleFocusPulse$1316 007D                 _SingleFocusPulse$1317 007F  
                       ?_DotStar_Init 0060                         ?_DotStar_Show 00A5  
                ??_ES_Timer_StopTimer 0060   ES_Timer_Tick_Resp@NextTimer2Process 00E1  
                            printf@ap 0062                       ?_ES_EnQueueFIFO 006C  
           ??_PostSPI32ControlService 0080                 CenterBreathe@base_hue 006E  
                    ES_DeQueue@pBlock 006C                 CenterBreathe@base_sat 006F  
                     _InitCanHardware 344C     SPI32_TransmitFrames@transmitEvent 0083  
   InitPatternControlService@Priority 0080           SingleFadedLoop@cycleCounter 006C  
                   _SPI32_EOTResponse 392E                            _HSV_to_RGB 0F28  
           __end_of_CAN_ErrorResponse 3C32                        i2_ResetPattern 3B72  
              ES_DeQueue@pReturnEvent 006E                 ES_InitQueue@BlockSize 0062  
                  ?_SPI32_EOTResponse 0001                  __size_of_StopPattern 001C  
            ?_InitSPI32ControlService 0001                       ?_SetListenFocus 0001  
            CenterBreathe@ptrnPointer 0068                   ??_SPI32_EOTResponse 0021  
             __end_of_SPI32_SendFrame 3748            ?_InitPatternControlService 0001  
             CenterBreathe@pulseWidth 008D    __size_of_PostPatternControlService 001C  
                      ??_DotStar_Init 0062                        ??_DotStar_Show 00A7  
