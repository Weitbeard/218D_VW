

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Dec 10 17:47:18 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           	psect	idataCOMRAM
    91  002962                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _MaxBrightness
    95  002962  1F                 	db	31
    96                           
    97                           	psect	idataBANK0
    98  002946                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _FrameByte
   102  002946  03                 	db	3
   103                           
   104                           ;initializer for _PatternConfigs
   105  002947  00                 	db	0
   106  002948  FF                 	db	255
   107  002949  1F                 	db	31
   108  00294A  00                 	db	0
   109  00294B  01                 	db	1
   110                           
   111                           	psect	smallconst
   112  000300                     __psmallconst:
   113                           	opt stack 0
   114  000300  00                 	db	0
   115  000301                     _BitNum2SetMask:
   116                           	opt stack 0
   117  000301  0001               	dw	1
   118  000303  0002               	dw	2
   119  000305  0004               	dw	4
   120  000307  0008               	dw	8
   121  000309  0010               	dw	16
   122  00030B  0020               	dw	32
   123  00030D  0040               	dw	64
   124  00030F  0080               	dw	128
   125  000311  0100               	dw	256
   126  000313  0200               	dw	512
   127  000315  0400               	dw	1024
   128  000317  0800               	dw	2048
   129  000319  1000               	dw	4096
   130  00031B  2000               	dw	8192
   131  00031D  4000               	dw	16384
   132  00031F  8000               	dw	32768
   133  000321                     __end_of_BitNum2SetMask:
   134                           	opt stack 0
   135  000321                     _Timer2PostFunc:
   136                           	opt stack 0
   137  000321  C2                 	db	low _PostPatternControlService
   138  000322  28                 	db	high _PostPatternControlService
   139  000323  40                 	db	low _PostSPI32ControlService
   140  000324  28                 	db	high _PostSPI32ControlService
   141  000325  00                 	db	0
   142  000326  00                 	db	0
   143  000327  00                 	db	0
   144  000328  00                 	db	0
   145  000329  00                 	db	0
   146  00032A  00                 	db	0
   147  00032B  00                 	db	0
   148  00032C  00                 	db	0
   149  00032D  00                 	db	0
   150  00032E  00                 	db	0
   151  00032F  00                 	db	0
   152  000330  00                 	db	0
   153  000331  00                 	db	0
   154  000332  00                 	db	0
   155  000333  00                 	db	0
   156  000334  00                 	db	0
   157  000335  00                 	db	0
   158  000336  00                 	db	0
   159  000337  00                 	db	0
   160  000338  00                 	db	0
   161  000339  00                 	db	0
   162  00033A  00                 	db	0
   163  00033B  00                 	db	0
   164  00033C  00                 	db	0
   165  00033D  00                 	db	0
   166  00033E  00                 	db	0
   167  00033F  00                 	db	0
   168  000340  00                 	db	0
   169  000341                     __end_of_Timer2PostFunc:
   170                           	opt stack 0
   171  000341                     _Nybble2MSBitNum:
   172                           	opt stack 0
   173  000341  00                 	db	0
   174  000342  01                 	db	1
   175  000343  01                 	db	1
   176  000344  02                 	db	2
   177  000345  02                 	db	2
   178  000346  02                 	db	2
   179  000347  02                 	db	2
   180  000348  03                 	db	3
   181  000349  03                 	db	3
   182  00034A  03                 	db	3
   183  00034B  03                 	db	3
   184  00034C  03                 	db	3
   185  00034D  03                 	db	3
   186  00034E  03                 	db	3
   187  00034F  03                 	db	3
   188  000350                     __end_of_Nybble2MSBitNum:
   189                           	opt stack 0
   190  000350                     _ServDescList:
   191                           	opt stack 0
   192  000350  1C                 	db	low _InitPatternControlService
   193  000351  24                 	db	high _InitPatternControlService
   194  000352  16                 	db	low _RunPatternControlService
   195  000353  1B                 	db	high _RunPatternControlService
   196  000354  6A                 	db	low _InitSPI32ControlService
   197  000355  26                 	db	high _InitSPI32ControlService
   198  000356  80                 	db	low _RunSPI32ControlService
   199  000357  16                 	db	high _RunSPI32ControlService
   200  000358  7A                 	db	low _InitCanRX_Service
   201  000359  27                 	db	high _InitCanRX_Service
   202  00035A  9C                 	db	low _RunCanRX_Service
   203  00035B  1C                 	db	high _RunCanRX_Service
   204  00035C                     __end_of_ServDescList:
   205                           	opt stack 0
   206  00035C                     _EventQueues:
   207                           	opt stack 0
   208  00035C  EA                 	db	low _Queue0
   209  00035D  00                 	db	high _Queue0
   210  00035E  04                 	db	4
   211  00035F  43                 	db	low _Queue1
   212  000360  00                 	db	high _Queue1
   213  000361  04                 	db	4
   214  000362  4F                 	db	low _Queue2
   215  000363  00                 	db	high _Queue2
   216  000364  04                 	db	4
   217  000365                     __end_of_EventQueues:
   218                           	opt stack 0
   219  000365                     _ES_EventList:
   220                           	opt stack 0
   221  000365  58                 	db	low _Check4Keystroke
   222  000366  29                 	db	high _Check4Keystroke
   223  000367                     __end_of_ES_EventList:
   224                           	opt stack 0
   225  000367                     _DistList00:
   226                           	opt stack 0
   227  000367  C2                 	db	low _PostPatternControlService
   228  000368  28                 	db	high _PostPatternControlService
   229  000369  40                 	db	low _PostSPI32ControlService
   230  00036A  28                 	db	high _PostSPI32ControlService
   231  00036B                     __end_of_DistList00:
   232                           	opt stack 0
   233  0000                     _RXF0EIDH	set	3842
   234  0000                     _RXF0EIDL	set	3843
   235  0000                     _RXF0SIDH	set	3840
   236  0000                     _RXF0SIDL	set	3841
   237  0000                     _RXM0EIDH	set	3866
   238  0000                     _RXM0EIDL	set	3867
   239  0000                     _RXM0SIDH	set	3864
   240  0000                     _RXM0SIDL	set	3865
   241  0000                     _TXB0CONbits	set	3904
   242  0000                     _ADCON1	set	4033
   243  0000                     _BRGCON1bits	set	3952
   244  0000                     _BRGCON2bits	set	3953
   245  0000                     _BRGCON3bits	set	3954
   246  0000                     _CANCON	set	3951
   247  0000                     _CANSTATbits	set	3950
   248  0000                     _CCP1CON	set	4029
   249  0000                     _CCPR1H	set	4031
   250  0000                     _CCPR1L	set	4030
   251  0000                     _CIOCON	set	3955
   252  0000                     _ECANCON	set	3959
   253  0000                     _INTCON	set	4082
   254  0000                     _LATA	set	3977
   255  0000                     _LATB	set	3978
   256  0000                     _LATC	set	3979
   257  0000                     _PIE1	set	3997
   258  0000                     _PORTA	set	3968
   259  0000                     _PORTB	set	3969
   260  0000                     _PORTC	set	3970
   261  0000                     _RXB0CONbits	set	3936
   262  0000                     _RXB0D0	set	3942
   263  0000                     _RXB0EIDH	set	3939
   264  0000                     _RXB0EIDL	set	3940
   265  0000                     _RXB0SIDH	set	3937
   266  0000                     _RXB0SIDL	set	3938
   267  0000                     _SSPADD	set	4040
   268  0000                     _SSPBUF	set	4041
   269  0000                     _SSPCON1	set	4038
   270  0000                     _SSPSTAT	set	4039
   271  0000                     _T1CON	set	4045
   272  0000                     _TRISA	set	3986
   273  0000                     _TRISBbits	set	3987
   274  0000                     _TRISC	set	3988
   275  0000                     _CCP1IF	set	31986
   276  0000                     _ERRIE	set	32029
   277  0000                     _ERRIF	set	32037
   278  0000                     _GIE	set	32663
   279  0000                     _IRXIE	set	32031
   280  0000                     _IRXIF	set	32039
   281  0000                     _RXB0IE	set	32024
   282  0000                     _RXB0IF	set	32032
   283  0000                     _SSPIE	set	31979
   284  0000                     _SSPIF	set	31987
   285  0000                     _TXB0IE	set	32026
   286  0000                     _TXB0IF	set	32034
   287  00036B                     STR_1:
   288  00036B  46                 	db	70	;'F'
   289  00036C  61                 	db	97	;'a'
   290  00036D  69                 	db	105	;'i'
   291  00036E  6C                 	db	108	;'l'
   292  00036F  65                 	db	101	;'e'
   293  000370  64                 	db	100	;'d'
   294  000371  20                 	db	32
   295  000372  6F                 	db	111	;'o'
   296  000373  6E                 	db	110	;'n'
   297  000374  20                 	db	32
   298  000375  61                 	db	97	;'a'
   299  000376  74                 	db	116	;'t'
   300  000377  74                 	db	116	;'t'
   301  000378  65                 	db	101	;'e'
   302  000379  6D                 	db	109	;'m'
   303  00037A  70                 	db	112	;'p'
   304  00037B  74                 	db	116	;'t'
   305  00037C  20                 	db	32
   306  00037D  74                 	db	116	;'t'
   307  00037E  6F                 	db	111	;'o'
   308  00037F  20                 	db	32
   309  000380  50                 	db	80	;'P'
   310  000381  6F                 	db	111	;'o'
   311  000382  73                 	db	115	;'s'
   312  000383  74                 	db	116	;'t'
   313  000384  0A                 	db	10
   314  000385  00                 	db	0
   315  000386                     STR_2:
   316  000386  46                 	db	70	;'F'
   317  000387  61                 	db	97	;'a'
   318  000388  69                 	db	105	;'i'
   319  000389  6C                 	db	108	;'l'
   320  00038A  65                 	db	101	;'e'
   321  00038B  64                 	db	100	;'d'
   322  00038C  20                 	db	32
   323  00038D  6F                 	db	111	;'o'
   324  00038E  6E                 	db	110	;'n'
   325  00038F  20                 	db	32
   326  000390  4E                 	db	78	;'N'
   327  000391  55                 	db	85	;'U'
   328  000392  4C                 	db	76	;'L'
   329  000393  4C                 	db	76	;'L'
   330  000394  20                 	db	32
   331  000395  70                 	db	112	;'p'
   332  000396  6F                 	db	111	;'o'
   333  000397  69                 	db	105	;'i'
   334  000398  6E                 	db	110	;'n'
   335  000399  74                 	db	116	;'t'
   336  00039A  65                 	db	101	;'e'
   337  00039B  72                 	db	114	;'r'
   338  00039C  0A                 	db	10
   339  00039D  00                 	db	0
   340  00039E                     STR_3:
   341  00039E  46                 	db	70	;'F'
   342  00039F  61                 	db	97	;'a'
   343  0003A0  69                 	db	105	;'i'
   344  0003A1  6C                 	db	108	;'l'
   345  0003A2  65                 	db	101	;'e'
   346  0003A3  64                 	db	100	;'d'
   347  0003A4  20                 	db	32
   348  0003A5  49                 	db	73	;'I'
   349  0003A6  6E                 	db	110	;'n'
   350  0003A7  69                 	db	105	;'i'
   351  0003A8  74                 	db	116	;'t'
   352  0003A9  69                 	db	105	;'i'
   353  0003AA  61                 	db	97	;'a'
   354  0003AB  6C                 	db	108	;'l'
   355  0003AC  69                 	db	105	;'i'
   356  0003AD  7A                 	db	122	;'z'
   357  0003AE  61                 	db	97	;'a'
   358  0003AF  74                 	db	116	;'t'
   359  0003B0  69                 	db	105	;'i'
   360  0003B1  6F                 	db	111	;'o'
   361  0003B2  6E                 	db	110	;'n'
   362  0003B3  0A                 	db	10
   363  0003B4  00                 	db	0
   364  0003B5                     STR_4:
   365  0003B5  4F                 	db	79	;'O'
   366  0003B6  74                 	db	116	;'t'
   367  0003B7  68                 	db	104	;'h'
   368  0003B8  65                 	db	101	;'e'
   369  0003B9  72                 	db	114	;'r'
   370  0003BA  20                 	db	32
   371  0003BB  46                 	db	70	;'F'
   372  0003BC  61                 	db	97	;'a'
   373  0003BD  69                 	db	105	;'i'
   374  0003BE  6C                 	db	108	;'l'
   375  0003BF  75                 	db	117	;'u'
   376  0003C0  72                 	db	114	;'r'
   377  0003C1  65                 	db	101	;'e'
   378  0003C2  0A                 	db	10
   379  0003C3  00                 	db	0
   380                           
   381                           ; #config settings
   382  0003C4  00                 	db	0	; dummy byte at the end
   383  0000                     
   384                           	psect	cinit
   385  002182                     __pcinit:
   386                           	opt stack 0
   387  002182                     start_initialization:
   388                           	opt stack 0
   389  002182                     __initialization:
   390                           	opt stack 0
   391                           
   392                           ; Initialize objects allocated to BANK0 (6 bytes)
   393                           ; load TBLPTR registers with __pidataBANK0
   394  002182  0E46               	movlw	low __pidataBANK0
   395  002184  6EF6               	movwf	tblptrl,c
   396  002186  0E29               	movlw	high __pidataBANK0
   397  002188  6EF7               	movwf	tblptrh,c
   398  00218A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   399  00218C  6EF8               	movwf	tblptru,c
   400  00218E  EE00  F0FA         	lfsr	0,__pdataBANK0
   401  002192  EE10 F006          	lfsr	1,6
   402  002196                     copy_data0:
   403  002196  0009               	tblrd		*+
   404  002198  CFF5 FFEE          	movff	tablat,postinc0
   405  00219C  50E5               	movf	postdec1,w,c
   406  00219E  50E1               	movf	fsr1l,w,c
   407  0021A0  E1FA               	bnz	copy_data0
   408                           
   409                           ; Initialize objects allocated to COMRAM (1 bytes)
   410                           ; load TBLPTR registers with __pidataCOMRAM
   411  0021A2  0E62               	movlw	low __pidataCOMRAM
   412  0021A4  6EF6               	movwf	tblptrl,c
   413  0021A6  0E29               	movlw	high __pidataCOMRAM
   414  0021A8  6EF7               	movwf	tblptrh,c
   415  0021AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   416  0021AC  6EF8               	movwf	tblptru,c
   417  0021AE  0009               	tblrd		*+	;fetch initializer
   418  0021B0  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   419                           
   420                           ; Clear objects allocated to BIGRAM (316 bytes)
   421  0021B4  EE01  F0B8         	lfsr	0,__pbssBIGRAM
   422  0021B8  EE11 F03C          	lfsr	1,316
   423  0021BC                     clear_0:
   424  0021BC  6AEE               	clrf	postinc0,c
   425  0021BE  50E5               	movf	postdec1,w,c
   426  0021C0  50E1               	movf	fsr1l,w,c
   427  0021C2  E1FC               	bnz	clear_0
   428  0021C4  50E2               	movf	fsr1h,w,c
   429  0021C6  E1FA               	bnz	clear_0
   430                           
   431                           ; Clear objects allocated to BANK1 (184 bytes)
   432  0021C8  EE01  F000         	lfsr	0,__pbssBANK1
   433  0021CC  0EB8               	movlw	184
   434  0021CE                     clear_1:
   435  0021CE  6AEE               	clrf	postinc0,c
   436  0021D0  06E8               	decf	wreg,f,c
   437  0021D2  E1FD               	bnz	clear_1
   438                           
   439                           ; Clear objects allocated to BANK0 (45 bytes)
   440  0021D4  EE00  F0CD         	lfsr	0,__pbssBANK0
   441  0021D8  0E2D               	movlw	45
   442  0021DA                     clear_2:
   443  0021DA  6AEE               	clrf	postinc0,c
   444  0021DC  06E8               	decf	wreg,f,c
   445  0021DE  E1FD               	bnz	clear_2
   446                           
   447                           ; Clear objects allocated to COMRAM (39 bytes)
   448  0021E0  EE00  F034         	lfsr	0,__pbssCOMRAM
   449  0021E4  0E27               	movlw	39
   450  0021E6                     clear_3:
   451  0021E6  6AEE               	clrf	postinc0,c
   452  0021E8  06E8               	decf	wreg,f,c
   453  0021EA  E1FD               	bnz	clear_3
   454  0021EC                     end_of_initialization:
   455                           	opt stack 0
   456  0021EC                     __end_of__initialization:
   457                           	opt stack 0
   458  0021EC  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   459  0021EE  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   460  0021F0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   461  0021F2  6EF8               	movwf	tblptru,c
   462  0021F4  0100               	movlb	0
   463  0021F6  EFFF  F00F         	goto	_main	;jump to C main() function
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           postdec1	equ	0xFE5
   471                           fsr1h	equ	0xFE2
   472                           fsr1l	equ	0xFE1
   473                           
   474                           	psect	bssCOMRAM
   475  000034                     __pbssCOMRAM:
   476                           	opt stack 0
   477  000034                     _TransmitFrame:
   478                           	opt stack 0
   479  000034                     	ds	4
   480  000038                     ISR@LastTime:
   481                           	opt stack 0
   482  000038                     	ds	2
   483  00003A                     ISR@NextTime:
   484                           	opt stack 0
   485  00003A                     	ds	2
   486  00003C                     _SysTickCounter:
   487                           	opt stack 0
   488  00003C                     	ds	2
   489  00003E                     	ds	2
   490  000040                     __PRIMASK_temp:
   491                           	opt stack 0
   492  000040                     	ds	2
   493  000042                     	ds	1
   494  000043                     _Queue1:
   495                           	opt stack 0
   496  000043                     	ds	12
   497  00004F                     _Queue2:
   498                           	opt stack 0
   499  00004F                     	ds	12
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1h	equ	0xFE2
   508                           fsr1l	equ	0xFE1
   509                           
   510                           	psect	dataCOMRAM
   511  00005B                     __pdataCOMRAM:
   512                           	opt stack 0
   513  00005B                     	ds	1
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           postdec1	equ	0xFE5
   521                           fsr1h	equ	0xFE2
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	bssBANK0
   525  0000CD                     __pbssBANK0:
   526                           	opt stack 0
   527  0000CD                     _CurrentFrame:
   528                           	opt stack 0
   529  0000CD                     	ds	4
   530  0000D1                     ES_Timer_Tick_Resp@NewEvent:
   531                           	opt stack 0
   532  0000D1                     	ds	3
   533  0000D4                     ES_Timer_Tick_Resp@NeedsProcessing:
   534                           	opt stack 0
   535  0000D4                     	ds	2
   536  0000D6                     Pattern_RGBPatterns@PatternConfigs:
   537                           	opt stack 0
   538  0000D6                     	ds	2
   539  0000D8                     _FramePointer:
   540                           	opt stack 0
   541  0000D8                     	ds	2
   542  0000DA                     _Ready:
   543                           	opt stack 0
   544  0000DA                     	ds	2
   545  0000DC                     _TMR_ActiveFlags:
   546                           	opt stack 0
   547  0000DC                     	ds	2
   548  0000DE                     CanRX_Service@MyPriority:
   549                           	opt stack 0
   550  0000DE                     	ds	1
   551  0000DF                     ES_Timer_Tick_Resp@NextTimer2Process:
   552                           	opt stack 0
   553  0000DF                     	ds	1
   554  0000E0                     Pattern_RGBPatterns@Length:
   555                           	opt stack 0
   556  0000E0                     	ds	1
   557  0000E1                     SPI32_ControlService@CurrentState:
   558                           	opt stack 0
   559  0000E1                     	ds	1
   560  0000E2                     SPI32_ControlService@MyPriority:
   561                           	opt stack 0
   562  0000E2                     	ds	1
   563  0000E3                     _CurrentState:
   564                           	opt stack 0
   565  0000E3                     	ds	1
   566  0000E4                     _FrameIndex:
   567                           	opt stack 0
   568  0000E4                     	ds	1
   569  0000E5                     _Length:
   570                           	opt stack 0
   571  0000E5                     	ds	1
   572  0000E6                     _MyPriority:
   573                           	opt stack 0
   574  0000E6                     	ds	1
   575  0000E7                     _NumFrames:
   576                           	opt stack 0
   577  0000E7                     	ds	1
   578  0000E8                     _PatternStepCounter:
   579                           	opt stack 0
   580  0000E8                     	ds	1
   581  0000E9                     _TickCount:
   582                           	opt stack 0
   583  0000E9                     	ds	1
   584  0000EA                     _Queue0:
   585                           	opt stack 0
   586  0000EA                     	ds	12
   587  0000F6                     ES_Run@ThisEvent:
   588                           	opt stack 0
   589  0000F6                     	ds	3
   590  0000F9                     _Brightness:
   591                           	opt stack 0
   592  0000F9                     	ds	1
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1h	equ	0xFE2
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	dataBANK0
   604  0000FA                     __pdataBANK0:
   605                           	opt stack 0
   606  0000FA                     _FrameByte:
   607                           	opt stack 0
   608  0000FA                     	ds	1
   609  0000FB                     _PatternConfigs:
   610                           	opt stack 0
   611  0000FB                     	ds	5
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1h	equ	0xFE2
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	bssBANK1
   623  000100                     __pbssBANK1:
   624                           	opt stack 0
   625  000100                     _TMR_TimerArray:
   626                           	opt stack 0
   627  000100                     	ds	32
   628  000120                     _PixelPattern:
   629                           	opt stack 0
   630  000120                     	ds	152
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1h	equ	0xFE2
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	bssBIGRAM
   642  0001B8                     __pbssBIGRAM:
   643                           	opt stack 0
   644  0001B8                     _PixelFrames:
   645                           	opt stack 0
   646  0001B8                     	ds	316
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1h	equ	0xFE2
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	cstackBANK0
   658  000060                     __pcstackBANK0:
   659                           	opt stack 0
   660  000060                     ??_ES_Timer_StopTimer:
   661  000060                     ?_PatternOff:
   662                           	opt stack 0
   663  000060                     ?_printf:
   664                           	opt stack 0
   665  000060                     ?___awdiv:
   666                           	opt stack 0
   667  000060                     ?___awmod:
   668                           	opt stack 0
   669  000060                     ?_GetNextFrame:
   670                           	opt stack 0
   671  000060                     ES_CheckUserEvents@i:
   672                           	opt stack 0
   673  000060                     SetPattern@PatternID:
   674                           	opt stack 0
   675  000060                     DotStar_Init@brightness:
   676                           	opt stack 0
   677  000060                     ___lbmod@divisor:
   678                           	opt stack 0
   679  000060                     ES_GetMSBitSet@Val2Check:
   680                           	opt stack 0
   681  000060                     __HW_Timer_Init@Rate:
   682                           	opt stack 0
   683  000060                     ES_InitQueue@pBlock:
   684                           	opt stack 0
   685  000060                     ES_Timer_InitTimer@NewTime:
   686                           	opt stack 0
   687  000060                     SetupPattern@configs:
   688                           	opt stack 0
   689  000060                     printf@f:
   690                           	opt stack 0
   691  000060                     ___awdiv@dividend:
   692                           	opt stack 0
   693  000060                     ___awmod@dividend:
   694                           	opt stack 0
   695  000060                     SPI32_SendFrame@newFrame:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x0
   699  000060                     	ds	1
   700  000061                     ??_DotStar_Init:
   701  000061                     ___lbmod@dividend:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x1
   705  000061                     	ds	1
   706  000062                     ??_ES_GetMSBitSet:
   707  000062                     ??_ES_Timer_InitTimer:
   708  000062                     ES_InitQueue@BlockSize:
   709                           	opt stack 0
   710  000062                     SetupPattern@numPixels:
   711                           	opt stack 0
   712  000062                     PatternOff@i:
   713                           	opt stack 0
   714  000062                     ___lbmod@counter:
   715                           	opt stack 0
   716  000062                     ES_Timer_Init@Rate:
   717                           	opt stack 0
   718  000062                     printf@ap:
   719                           	opt stack 0
   720  000062                     ___awdiv@divisor:
   721                           	opt stack 0
   722  000062                     ___awmod@divisor:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x2
   726  000062                     	ds	1
   727  000063                     DotStar_Init@numPixels:
   728                           	opt stack 0
   729  000063                     ___lbmod@rem:
   730                           	opt stack 0
   731  000063                     ES_InitQueue@pThisQueue:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x3
   735  000063                     	ds	1
   736  000064                     ??_SPI32_SendFrame:
   737  000064                     ES_Timer_StopTimer@Num:
   738                           	opt stack 0
   739  000064                     ES_Timer_InitTimer@Num:
   740                           	opt stack 0
   741  000064                     printf@c:
   742                           	opt stack 0
   743  000064                     ___awdiv@counter:
   744                           	opt stack 0
   745  000064                     ___awmod@counter:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x4
   749  000064                     	ds	1
   750  000065                     ___awdiv@sign:
   751                           	opt stack 0
   752  000065                     ___awmod@sign:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x5
   756  000065                     	ds	1
   757  000066                     ?___wmul:
   758                           	opt stack 0
   759  000066                     ___wmul@multiplier:
   760                           	opt stack 0
   761  000066                     ___awdiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x6
   765  000066                     	ds	1
   766  000067                     ES_GetMSBitSet@ReturnVal:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x7
   770  000067                     	ds	1
   771  000068                     ?_IdlePattern:
   772                           	opt stack 0
   773  000068                     ?_ThinkingPattern:
   774                           	opt stack 0
   775  000068                     ?_SpeakingPattern:
   776                           	opt stack 0
   777  000068                     ?_ListeningPattern:
   778                           	opt stack 0
   779  000068                     ES_GetMSBitSet@Nybble2Test:
   780                           	opt stack 0
   781  000068                     ThinkingPattern@pixel:
   782                           	opt stack 0
   783  000068                     ListeningPattern@pixel:
   784                           	opt stack 0
   785  000068                     SpeakingPattern@pixel:
   786                           	opt stack 0
   787  000068                     IdlePattern@pixel:
   788                           	opt stack 0
   789  000068                     ___wmul@multiplicand:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x8
   793  000068                     	ds	1
   794  000069                     ES_GetMSBitSet@LoopCntr:
   795                           	opt stack 0
   796  000069                     ThinkingPattern@stepCount:
   797                           	opt stack 0
   798  000069                     ListeningPattern@stepCount:
   799                           	opt stack 0
   800  000069                     SpeakingPattern@stepCount:
   801                           	opt stack 0
   802  000069                     IdlePattern@stepCount:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x9
   806  000069                     	ds	1
   807  00006A                     ??_IdlePattern:
   808  00006A                     ??_ThinkingPattern:
   809  00006A                     ??_SpeakingPattern:
   810  00006A                     ??_ListeningPattern:
   811  00006A                     ___wmul@product:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0xA
   815  00006A                     	ds	2
   816  00006C                     ?___lwdiv:
   817                           	opt stack 0
   818  00006C                     ES_EnQueueFIFO@pBlock:
   819                           	opt stack 0
   820  00006C                     ES_DeQueue@pBlock:
   821                           	opt stack 0
   822  00006C                     ___lwdiv@dividend:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xC
   826  00006C                     	ds	2
   827  00006E                     ES_DeQueue@pReturnEvent:
   828                           	opt stack 0
   829  00006E                     ___lwdiv@divisor:
   830                           	opt stack 0
   831  00006E                     ES_EnQueueFIFO@Event2Add:
   832                           	opt stack 0
   833                           
   834                           ; 3 bytes @ 0xE
   835  00006E                     	ds	2
   836  000070                     ??_ES_DeQueue:
   837  000070                     ___lwdiv@quotient:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x10
   841  000070                     	ds	1
   842  000071                     ??_ES_EnQueueFIFO:
   843                           
   844                           ; 1 bytes @ 0x11
   845  000071                     	ds	1
   846  000072                     ES_DeQueue@SaveCrit:
   847                           	opt stack 0
   848  000072                     ___lwdiv@counter:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x12
   852  000072                     	ds	1
   853  000073                     ES_DeQueue@NumLeft:
   854                           	opt stack 0
   855  000073                     HSV_to_RGB@HSV_Value:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x13
   859  000073                     	ds	1
   860  000074                     ES_EnQueueFIFO@SaveCrit:
   861                           	opt stack 0
   862  000074                     ES_DeQueue@pThisQueue:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x14
   866  000074                     	ds	1
   867  000075                     ??_HSV_to_RGB:
   868  000075                     IdlePattern@hue:
   869                           	opt stack 0
   870  000075                     ES_EnQueueFIFO@pThisQueue:
   871                           	opt stack 0
   872  000075                     ThinkingPattern@pixelHSV:
   873                           	opt stack 0
   874  000075                     ListeningPattern@pixelHSV:
   875                           	opt stack 0
   876  000075                     SpeakingPattern@pixelHSV:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x15
   880  000075                     	ds	1
   881  000076                     IdlePattern@pixelHSV:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x16
   885  000076                     	ds	1
   886  000077                     _ThinkingPattern$744:
   887                           	opt stack 0
   888  000077                     _ListeningPattern$756:
   889                           	opt stack 0
   890  000077                     _SpeakingPattern$768:
   891                           	opt stack 0
   892  000077                     ES_PostToService@TheEvent:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x17
   896  000077                     	ds	1
   897  000078                     _IdlePattern$780:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x18
   901  000078                     	ds	1
   902  000079                     _ThinkingPattern$745:
   903                           	opt stack 0
   904  000079                     _ListeningPattern$757:
   905                           	opt stack 0
   906  000079                     _SpeakingPattern$769:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x19
   910  000079                     	ds	1
   911  00007A                     ??_ES_PostToService:
   912  00007A                     _IdlePattern$781:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x1A
   916  00007A                     	ds	1
   917  00007B                     ThinkingPattern@sat:
   918                           	opt stack 0
   919  00007B                     ListeningPattern@sat:
   920                           	opt stack 0
   921  00007B                     SpeakingPattern@sat:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x1B
   925  00007B                     	ds	1
   926  00007C                     ES_PostToService@WhichService:
   927                           	opt stack 0
   928  00007C                     ThinkingPattern@val:
   929                           	opt stack 0
   930  00007C                     ListeningPattern@val:
   931                           	opt stack 0
   932  00007C                     SpeakingPattern@val:
   933                           	opt stack 0
   934  00007C                     IdlePattern@sat:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x1C
   938  00007C                     	ds	1
   939  00007D                     ThinkingPattern@hue:
   940                           	opt stack 0
   941  00007D                     ListeningPattern@hue:
   942                           	opt stack 0
   943  00007D                     SpeakingPattern@hue:
   944                           	opt stack 0
   945  00007D                     IdlePattern@val:
   946                           	opt stack 0
   947  00007D                     InitPatternControlService@ThisEvent:
   948                           	opt stack 0
   949  00007D                     PostPatternControlService@ThisEvent:
   950                           	opt stack 0
   951  00007D                     InitSPI32ControlService@ThisEvent:
   952                           	opt stack 0
   953  00007D                     PostSPI32ControlService@ThisEvent:
   954                           	opt stack 0
   955  00007D                     InitCanRX_Service@ThisEvent:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x1D
   959  00007D                     	ds	1
   960  00007E                     ThinkingPattern@x:
   961                           	opt stack 0
   962  00007E                     ListeningPattern@x:
   963                           	opt stack 0
   964  00007E                     SpeakingPattern@x:
   965                           	opt stack 0
   966  00007E                     IdlePattern@x:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x1E
   970  00007E                     	ds	1
   971  00007F                     ThinkingPattern@head:
   972                           	opt stack 0
   973  00007F                     ListeningPattern@head:
   974                           	opt stack 0
   975  00007F                     SpeakingPattern@head:
   976                           	opt stack 0
   977  00007F                     IdlePattern@head:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x1F
   981  00007F                     	ds	1
   982  000080                     ??_ES_Timer_Tick_Resp:
   983  000080                     ?_UpdatePattern:
   984                           	opt stack 0
   985  000080                     InitPatternControlService@Priority:
   986                           	opt stack 0
   987  000080                     InitSPI32ControlService@Priority:
   988                           	opt stack 0
   989  000080                     InitCanRX_Service@Priority:
   990                           	opt stack 0
   991  000080                     SPI32_TransmitFrames@framePointer:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x20
   995  000080                     	ds	1
   996  000081                     ES_Initialize@NewRate:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x21
  1000  000081                     	ds	1
  1001  000082                     UpdatePattern@patternID:
  1002                           	opt stack 0
  1003  000082                     SPI32_TransmitFrames@numFrames:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x22
  1007  000082                     	ds	1
  1008  000083                     ES_Initialize@i:
  1009                           	opt stack 0
  1010  000083                     UpdatePattern@i:
  1011                           	opt stack 0
  1012  000083                     SPI32_TransmitFrames@transmitEvent:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x23
  1016  000083                     	ds	1
  1017  000084                     UpdatePattern@i_729:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x24
  1021  000084                     	ds	1
  1022  000085                     UpdatePattern@i_730:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x25
  1026  000085                     	ds	1
  1027  000086                     UpdatePattern@i_731:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x26
  1031  000086                     	ds	1
  1032  000087                     UpdatePattern@i_732:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x27
  1036  000087                     	ds	6
  1037  00008D                     HSV_to_RGB@h:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x2D
  1041  00008D                     	ds	2
  1042  00008F                     HSV_to_RGB@region:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x2F
  1046  00008F                     	ds	2
  1047  000091                     HSV_to_RGB@fpart:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x31
  1051  000091                     	ds	2
  1052  000093                     HSV_to_RGB@r:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x33
  1056  000093                     	ds	2
  1057  000095                     HSV_to_RGB@g:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x35
  1061  000095                     	ds	2
  1062  000097                     HSV_to_RGB@b:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x37
  1066  000097                     	ds	2
  1067  000099                     HSV_to_RGB@q:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x39
  1071  000099                     	ds	2
  1072  00009B                     HSV_to_RGB@t:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x3B
  1076  00009B                     	ds	2
  1077  00009D                     _HSV_to_RGB$2054:
  1078                           	opt stack 0
  1079                           
  1080                           ; 2 bytes @ 0x3D
  1081  00009D                     	ds	2
  1082  00009F                     HSV_to_RGB@s:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x3F
  1086  00009F                     	ds	2
  1087  0000A1                     HSV_to_RGB@p:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x41
  1091  0000A1                     	ds	2
  1092  0000A3                     HSV_to_RGB@v:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x43
  1096  0000A3                     	ds	2
  1097  0000A5                     DotStar_Show@patternPointer:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x45
  1101  0000A5                     	ds	2
  1102  0000A7                     ??_DotStar_Show:
  1103                           
  1104                           ; 1 bytes @ 0x47
  1105  0000A7                     	ds	18
  1106  0000B9                     DotStar_Show@i:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x59
  1110  0000B9                     	ds	1
  1111  0000BA                     ?_RunPatternControlService:
  1112                           	opt stack 0
  1113  0000BA                     ?_RunSPI32ControlService:
  1114                           	opt stack 0
  1115  0000BA                     ?_RunCanRX_Service:
  1116                           	opt stack 0
  1117  0000BA                     RunPatternControlService@ThisEvent:
  1118                           	opt stack 0
  1119  0000BA                     RunSPI32ControlService@ThisEvent:
  1120                           	opt stack 0
  1121  0000BA                     RunCanRX_Service@ThisEvent:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x5A
  1125  0000BA                     	ds	3
  1126  0000BD                     ??_RunSPI32ControlService:
  1127  0000BD                     RunPatternControlService@ReturnEvent:
  1128                           	opt stack 0
  1129  0000BD                     RunCanRX_Service@ReturnEvent:
  1130                           	opt stack 0
  1131                           
  1132                           ; 3 bytes @ 0x5D
  1133  0000BD                     	ds	3
  1134  0000C0                     RunPatternControlService@testEvent:
  1135                           	opt stack 0
  1136  0000C0                     RunCanRX_Service@PatternEvent:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x60
  1140  0000C0                     	ds	4
  1141  0000C4                     RunSPI32ControlService@ReturnEvent:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x64
  1145  0000C4                     	ds	3
  1146  0000C7                     ??_ES_Run:
  1147                           
  1148                           ; 1 bytes @ 0x67
  1149  0000C7                     	ds	4
  1150  0000CB                     ES_Run@HighestPrior:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x6B
  1154  0000CB                     	ds	1
  1155  0000CC                     main@ErrorType:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x6C
  1159  0000CC                     	ds	1
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1h	equ	0xFE2
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170                           	psect	cstackCOMRAM
  1171  000001                     __pcstackCOMRAM:
  1172                           	opt stack 0
  1173  000001                     ?i2___awmod:
  1174                           	opt stack 0
  1175  000001                     i2___awmod@dividend:
  1176                           	opt stack 0
  1177  000001                     i2SPI32_SendFrame@newFrame:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x0
  1181  000001                     	ds	2
  1182  000003                     i2___awmod@divisor:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x2
  1186  000003                     	ds	2
  1187  000005                     ??i2_SPI32_SendFrame:
  1188  000005                     i2___awmod@counter:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x4
  1192  000005                     	ds	1
  1193  000006                     i2___awmod@sign:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x5
  1197  000006                     	ds	1
  1198  000007                     ?i2___wmul:
  1199                           	opt stack 0
  1200  000007                     i2___wmul@multiplier:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x6
  1204  000007                     	ds	2
  1205  000009                     i2___wmul@multiplicand:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x8
  1209  000009                     	ds	2
  1210  00000B                     i2___wmul@product:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0xA
  1214  00000B                     	ds	2
  1215  00000D                     i2ES_EnQueueFIFO@pBlock:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0xC
  1219  00000D                     	ds	2
  1220  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0xE
  1224  00000F                     	ds	3
  1225  000012                     ??i2_ES_EnQueueFIFO:
  1226                           
  1227                           ; 1 bytes @ 0x11
  1228  000012                     	ds	3
  1229  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x14
  1233  000015                     	ds	1
  1234  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x15
  1238  000016                     	ds	2
  1239  000018                     i2ES_PostToService@TheEvent:
  1240                           	opt stack 0
  1241                           
  1242                           ; 3 bytes @ 0x17
  1243  000018                     	ds	3
  1244  00001B                     ??i2_ES_PostToService:
  1245                           
  1246                           ; 1 bytes @ 0x1A
  1247  00001B                     	ds	2
  1248  00001D                     i2ES_PostToService@WhichService:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x1C
  1252  00001D                     	ds	1
  1253  00001E                     PostCanRX_Service@ThisEvent:
  1254                           	opt stack 0
  1255  00001E                     i2PostSPI32ControlService@ThisEvent:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x1D
  1259  00001E                     	ds	3
  1260  000021                     SPI32_EOTResponse@EOTevent:
  1261                           	opt stack 0
  1262  000021                     ProcessReceive@Event2Post:
  1263                           	opt stack 0
  1264                           
  1265                           ; 3 bytes @ 0x20
  1266  000021                     	ds	3
  1267  000024                     ??_ISR:
  1268                           
  1269                           ; 1 bytes @ 0x23
  1270  000024                     	ds	16
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1h	equ	0xFE2
  1279                           fsr1l	equ	0xFE1
  1280                           
  1281 ;;
  1282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1283 ;;
  1284 ;; *************** function _main *****************
  1285 ;; Defined at:
  1286 ;;		line 25 in file "main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  ErrorType       1  108[BANK0 ] enum E15651
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  2  627[None  ] int 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       0       0       0
  1301 ;;      Locals:         0       1       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         0       1       0       0
  1304 ;;Total ram usage:        1 bytes
  1305 ;; Hardware stack levels required when called:   16
  1306 ;; This function calls:
  1307 ;;		_ES_Initialize
  1308 ;;		_ES_Run
  1309 ;;		_printf
  1310 ;; This function is called by:
  1311 ;;		Startup code after reset
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text0
  1316  001FFE                     __ptext0:
  1317                           	opt stack 0
  1318  001FFE                     _main:
  1319                           	opt stack 15
  1320                           
  1321                           ;main.c: 34: ES_Return_t ErrorType;
  1322                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1323                           
  1324                           ;incstack = 0
  1325  001FFE  0E9C               	movlw	156
  1326  002000  0100               	movlb	0	; () banked
  1327  002002  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1328  002004  0E3F               	movlw	63
  1329  002006  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1330  002008  EC3D  F00C         	call	_ES_Initialize	;wreg free
  1331  00200C  0100               	movlb	0	; () banked
  1332  00200E  6FCC               	movwf	main@ErrorType& (0+255),b
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;main.c: 51: if ( ErrorType == Success ) {
  1336  002010  0100               	movlb	0	; () banked
  1337  002012  51CC               	movf	main@ErrorType& (0+255),w,b
  1338  002014  0100               	movlb	0	; () banked
  1339  002016  A4D8               	btfss	status,2,c
  1340  002018  D029               	goto	l3880
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 53: ErrorType = ES_Run();
  1344  00201A  ECC3  F00B         	call	_ES_Run	;wreg free
  1345  00201E  0100               	movlb	0	; () banked
  1346  002020  6FCC               	movwf	main@ErrorType& (0+255),b
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 55: }
  1350                           ;main.c: 57: switch (ErrorType){
  1351  002022  D024               	goto	l3880
  1352  002024                     l3870:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1356  002024  0E6B               	movlw	low STR_1
  1357  002026  0100               	movlb	0	; () banked
  1358  002028  6F60               	movwf	printf@f& (0+255),b
  1359  00202A  0E03               	movlw	high STR_1
  1360  00202C  0100               	movlb	0	; () banked
  1361  00202E  6F61               	movwf	(printf@f+1)& (0+255),b
  1362  002030  EC8A  F013         	call	_printf	;wreg free
  1363                           
  1364                           ;main.c: 60: break;
  1365  002034  D027               	goto	l635
  1366  002036                     l3872:
  1367                           
  1368                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1369  002036  0E86               	movlw	low STR_2
  1370  002038  0100               	movlb	0	; () banked
  1371  00203A  6F60               	movwf	printf@f& (0+255),b
  1372  00203C  0E03               	movlw	high STR_2
  1373  00203E  0100               	movlb	0	; () banked
  1374  002040  6F61               	movwf	(printf@f+1)& (0+255),b
  1375  002042  EC8A  F013         	call	_printf	;wreg free
  1376                           
  1377                           ;main.c: 63: break;
  1378  002046  D01E               	goto	l635
  1379  002048                     l3874:
  1380                           
  1381                           ;main.c: 65: printf("Failed Initialization\n");
  1382  002048  0E9E               	movlw	low STR_3
  1383  00204A  0100               	movlb	0	; () banked
  1384  00204C  6F60               	movwf	printf@f& (0+255),b
  1385  00204E  0E03               	movlw	high STR_3
  1386  002050  0100               	movlb	0	; () banked
  1387  002052  6F61               	movwf	(printf@f+1)& (0+255),b
  1388  002054  EC8A  F013         	call	_printf	;wreg free
  1389                           
  1390                           ;main.c: 66: break;
  1391  002058  D015               	goto	l635
  1392  00205A                     l3876:
  1393                           
  1394                           ;main.c: 68: printf("Other Failure\n");
  1395  00205A  0EB5               	movlw	low STR_4
  1396  00205C  0100               	movlb	0	; () banked
  1397  00205E  6F60               	movwf	printf@f& (0+255),b
  1398  002060  0E03               	movlw	high STR_4
  1399  002062  0100               	movlb	0	; () banked
  1400  002064  6F61               	movwf	(printf@f+1)& (0+255),b
  1401  002066  EC8A  F013         	call	_printf	;wreg free
  1402                           
  1403                           ;main.c: 70: }
  1404                           
  1405                           ;main.c: 69: break;
  1406  00206A  D00C               	goto	l635
  1407  00206C                     l3880:
  1408  00206C  0100               	movlb	0	; () banked
  1409  00206E  51CC               	movf	main@ErrorType& (0+255),w,b
  1410                           
  1411                           ; Switch size 1, requested type "space"
  1412                           ; Number of cases is 3, Range of values is 1 to 5
  1413                           ; switch strategies available:
  1414                           ; Name         Instructions Cycles
  1415                           ; simple_byte           10     6 (average)
  1416                           ;	Chosen strategy is simple_byte
  1417  002070  0A01               	xorlw	1	; case 1
  1418  002072  B4D8               	btfsc	status,2,c
  1419  002074  D7D7               	goto	l3870
  1420  002076  0A02               	xorlw	2	; case 3
  1421  002078  B4D8               	btfsc	status,2,c
  1422  00207A  D7DD               	goto	l3872
  1423  00207C  0A06               	xorlw	6	; case 5
  1424  00207E  B4D8               	btfsc	status,2,c
  1425  002080  D7E3               	goto	l3874
  1426  002082  D7EB               	goto	l3876
  1427  002084                     l635:
  1428                           
  1429                           ;main.c: 72: ;
  1430  002084  D7FF               	goto	l635
  1431  002086                     __end_of_main:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           postinc0	equ	0xFEE
  1438                           wreg	equ	0xFE8
  1439                           postdec1	equ	0xFE5
  1440                           fsr1h	equ	0xFE2
  1441                           fsr1l	equ	0xFE1
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _printf *****************
  1445 ;; Defined at:
  1446 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1449 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;  tmpval          4    0        struct .
  1452 ;;  cp              3    0        PTR const unsigned char 
  1453 ;;  ap              2    2[BANK0 ] PTR void [1]
  1454 ;;		 -> ?_printf(2), 
  1455 ;;  len             2    0        unsigned int 
  1456 ;;  val             2    0        unsigned int 
  1457 ;;  c               1    4[BANK0 ] char 
  1458 ;;  flag            1    0        unsigned char 
  1459 ;;  prec            1    0        char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  2    0[BANK0 ] int 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1469 ;;      Params:         0       2       0       0
  1470 ;;      Locals:         0       3       0       0
  1471 ;;      Temps:          0       0       0       0
  1472 ;;      Totals:         0       5       0       0
  1473 ;;Total ram usage:        5 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    8
  1476 ;; This function calls:
  1477 ;;		_putch
  1478 ;; This function is called by:
  1479 ;;		_main
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text1
  1484  002714                     __ptext1:
  1485                           	opt stack 0
  1486  002714                     _printf:
  1487                           	opt stack 22
  1488                           
  1489                           ;doprnt.c: 466: va_list ap;
  1490                           ;doprnt.c: 499: signed char c;
  1491                           ;doprnt.c: 506: signed char prec;
  1492                           ;doprnt.c: 508: unsigned char flag;
  1493                           ;doprnt.c: 523: union {
  1494                           ;doprnt.c: 524: unsigned long vd;
  1495                           ;doprnt.c: 525: double integ;
  1496                           ;doprnt.c: 526: } tmpval;
  1497                           ;doprnt.c: 528: unsigned int val;
  1498                           ;doprnt.c: 529: unsigned len;
  1499                           ;doprnt.c: 530: const char * cp;
  1500                           ;doprnt.c: 533: *ap = __va_start();
  1501                           
  1502                           ;incstack = 0
  1503  002714  0E62               	movlw	low (?_printf+2)
  1504  002716  0100               	movlb	0	; () banked
  1505  002718  6F62               	movwf	printf@ap& (0+255),b
  1506  00271A  0E00               	movlw	high (?_printf+2)
  1507  00271C  0100               	movlb	0	; () banked
  1508  00271E  6F63               	movwf	(printf@ap+1)& (0+255),b
  1509                           
  1510                           ;doprnt.c: 536: while(c = *f++) {
  1511  002720  D004               	goto	l3690
  1512  002722                     l3688:
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 540: {
  1516                           ;doprnt.c: 541: (putch(c) );
  1517  002722  0100               	movlb	0	; () banked
  1518  002724  5164               	movf	printf@c& (0+255),w,b
  1519  002726  ECAE  F014         	call	_putch
  1520  00272A                     l3690:
  1521  00272A  C060  FFF6         	movff	printf@f,tblptrl
  1522  00272E  C061  FFF7         	movff	printf@f+1,tblptrh
  1523  002732  0100               	movlb	0	; () banked
  1524  002734  4B60               	infsnz	printf@f& (0+255),f,b
  1525  002736  2B61               	incf	(printf@f+1)& (0+255),f,b
  1526  002738                     	if	0	;tblptru may be non-zero
  1527  002738                     	endif
  1528  002738                     	if	0	;tblptru may be non-zero
  1529  002738                     	endif
  1530  002738  0008               	tblrd		*
  1531  00273A  CFF5 F064          	movff	tablat,printf@c
  1532  00273E  0100               	movlb	0	; () banked
  1533  002740  5164               	movf	printf@c& (0+255),w,b
  1534  002742  B4D8               	btfsc	status,2,c
  1535  002744  0012               	return	
  1536  002746  D7ED               	goto	l3688
  1537  002748                     __end_of_printf:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1h	equ	0xFE2
  1547                           fsr1l	equ	0xFE1
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _putch *****************
  1551 ;; Defined at:
  1552 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  c               1    wreg     unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  c               1    0[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1566 ;;      Params:         0       0       0       0
  1567 ;;      Locals:         0       0       0       0
  1568 ;;      Temps:          0       0       0       0
  1569 ;;      Totals:         0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    7
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_printf
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text2
  1581  00295C                     __ptext2:
  1582                           	opt stack 0
  1583  00295C                     _putch:
  1584                           	opt stack 22
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;incstack = 0
  1588  00295C  0012               	return		;funcret
  1589  00295E                     __end_of_putch:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1h	equ	0xFE2
  1599                           fsr1l	equ	0xFE1
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _ES_Run *****************
  1603 ;; Defined at:
  1604 ;;		line 277 in file "ES_Framework.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  HighestPrior    1  107[BANK0 ] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      enum E15499
  1611 ;; Registers used:
  1612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1618 ;;      Params:         0       0       0       0
  1619 ;;      Locals:         0       1       0       0
  1620 ;;      Temps:          0       4       0       0
  1621 ;;      Totals:         0       5       0       0
  1622 ;;Total ram usage:        5 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:   15
  1625 ;; This function calls:
  1626 ;;		_ES_CheckUserEvents
  1627 ;;		_ES_DeQueue
  1628 ;;		_ES_GetMSBitSet
  1629 ;;		_RunCanRX_Service
  1630 ;;		_RunPatternControlService
  1631 ;;		_RunSPI32ControlService
  1632 ;;		__HW_Process_Pending_Ints
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text3
  1639  001786                     __ptext3:
  1640                           	opt stack 0
  1641  001786                     _ES_Run:
  1642                           	opt stack 15
  1643                           
  1644                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1645                           
  1646                           ;incstack = 0
  1647                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1648                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1649                           ;ES_Framework.c: 282: while(1){
  1650  001786  D06B               	goto	l3660
  1651  001788                     l3648:
  1652                           
  1653                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1654  001788  C0DA  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1655  00178C  C0DB  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1656  001790  EC5C  F00F         	call	_ES_GetMSBitSet	;wreg free
  1657  001794  0100               	movlb	0	; () banked
  1658  001796  6FCB               	movwf	ES_Run@HighestPrior& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1662  001798  0100               	movlb	0	; () banked
  1663  00179A  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1664  00179C  0D03               	mullw	3
  1665  00179E  0E5C               	movlw	low _EventQueues
  1666  0017A0  24F3               	addwf	prodl,w,c
  1667  0017A2  6EF6               	movwf	tblptrl,c
  1668  0017A4  0E03               	movlw	high _EventQueues
  1669  0017A6  20F4               	addwfc	prodh,w,c
  1670  0017A8  6EF7               	movwf	tblptrh,c
  1671  0017AA                     	if	0	;There are less than 3 active tblptr bytes
  1672  0017AA                     	endif
  1673  0017AA  0009               	tblrd		*+
  1674  0017AC  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1675  0017B0  000A               	tblrd		*-
  1676  0017B2  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1677  0017B6  0EF6               	movlw	low ES_Run@ThisEvent
  1678  0017B8  0100               	movlb	0	; () banked
  1679  0017BA  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1680  0017BC  0E00               	movlw	high ES_Run@ThisEvent
  1681  0017BE  0100               	movlb	0	; () banked
  1682  0017C0  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1683  0017C2  EC8E  F009         	call	_ES_DeQueue	;wreg free
  1684  0017C6  0900               	iorlw	0
  1685  0017C8  A4D8               	btfss	status,2,c
  1686  0017CA  D01F               	goto	l3654
  1687                           
  1688                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1689  0017CC  0100               	movlb	0	; () banked
  1690  0017CE  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1691  0017D0  0D02               	mullw	2
  1692  0017D2  0E01               	movlw	low _BitNum2SetMask
  1693  0017D4  24F3               	addwf	prodl,w,c
  1694  0017D6  6EF6               	movwf	tblptrl,c
  1695  0017D8  0E03               	movlw	high _BitNum2SetMask
  1696  0017DA  20F4               	addwfc	prodh,w,c
  1697  0017DC  6EF7               	movwf	tblptrh,c
  1698  0017DE                     	if	0	;There are less than 3 active tblptr bytes
  1699  0017DE                     	endif
  1700  0017DE  0009               	tblrd		*+
  1701  0017E0  CFF5 F0C7          	movff	tablat,??_ES_Run
  1702  0017E4  0009               	tblrd		*+
  1703  0017E6  CFF5 F0C8          	movff	tablat,??_ES_Run+1
  1704  0017EA  0100               	movlb	0	; () banked
  1705  0017EC  1DC7               	comf	??_ES_Run& (0+255),w,b
  1706  0017EE  0100               	movlb	0	; () banked
  1707  0017F0  6FC9               	movwf	(??_ES_Run+2)& (0+255),b
  1708  0017F2  0100               	movlb	0	; () banked
  1709  0017F4  1DC8               	comf	(??_ES_Run+1)& (0+255),w,b
  1710  0017F6  0100               	movlb	0	; () banked
  1711  0017F8  6FCA               	movwf	(??_ES_Run+3)& (0+255),b
  1712  0017FA  0100               	movlb	0	; () banked
  1713  0017FC  51C9               	movf	(??_ES_Run+2)& (0+255),w,b
  1714  0017FE  0100               	movlb	0	; () banked
  1715  001800  17DA               	andwf	_Ready& (0+255),f,b
  1716  001802  0100               	movlb	0	; () banked
  1717  001804  51CA               	movf	(??_ES_Run+3)& (0+255),w,b
  1718  001806  0100               	movlb	0	; () banked
  1719  001808  17DB               	andwf	(_Ready+1)& (0+255),f,b
  1720  00180A                     l3654:
  1721                           
  1722                           ;ES_Framework.c: 291: }
  1723                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1724  00180A  C0F6  F0BA         	movff	ES_Run@ThisEvent,RunCanRX_Service@ThisEvent
  1725  00180E  C0F7  F0BB         	movff	ES_Run@ThisEvent+1,RunCanRX_Service@ThisEvent+1
  1726  001812  C0F8  F0BC         	movff	ES_Run@ThisEvent+2,RunCanRX_Service@ThisEvent+2
  1727  001816  0100               	movlb	0	; () banked
  1728  001818  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1729  00181A  0D04               	mullw	4
  1730  00181C  0E02               	movlw	2
  1731  00181E  26F3               	addwf	prodl,f,c
  1732  001820  0E00               	movlw	0
  1733  001822  22F4               	addwfc	prodh,f,c
  1734  001824  0E50               	movlw	low _ServDescList
  1735  001826  24F3               	addwf	prodl,w,c
  1736  001828  6EF6               	movwf	tblptrl,c
  1737  00182A  0E03               	movlw	high _ServDescList
  1738  00182C  20F4               	addwfc	prodh,w,c
  1739  00182E  6EF7               	movwf	tblptrh,c
  1740  001830                     	if	0	;There are less than 3 active tblptr bytes
  1741  001830                     	endif
  1742  001830  D801               	call	u2268
  1743  001832  D00C               	goto	u2269
  1744  001834                     u2268:
  1745  001834  0005               	push	
  1746  001836  6EFA               	movwf	pclath,c
  1747  001838  0009               	tblrd		*+
  1748  00183A  50F5               	movf	tablat,w,c
  1749  00183C  6EFD               	movwf	tosl,c
  1750  00183E  0009               	tblrd		*+
  1751  001840  50F5               	movf	tablat,w,c
  1752  001842  6EFE               	movwf	tosh,c
  1753  001844  50F8               	movf	tblptru,w,c
  1754  001846  6EFF               	movwf	tosu,c
  1755  001848  50FA               	movf	pclath,w,c
  1756  00184A  0012               	return		;indir
  1757  00184C                     u2269:
  1758  00184C  0EBA               	movlw	low ?_RunCanRX_Service
  1759  00184E  6ED9               	movwf	fsr2l,c
  1760  001850  0E00               	movlw	high ?_RunCanRX_Service
  1761  001852  6EDA               	movwf	fsr2h,c
  1762  001854  50DF               	movf	indf2,w,c
  1763  001856  B4D8               	btfsc	status,2,c
  1764  001858  D002               	goto	l3660
  1765                           
  1766                           ;ES_Framework.c: 293: return FailedRun;
  1767  00185A  0E02               	movlw	2
  1768  00185C  0012               	return	
  1769  00185E                     l3660:
  1770  00185E  EC56  F014         	call	__HW_Process_Pending_Ints	;wreg free
  1771  001862  0900               	iorlw	0
  1772  001864  B4D8               	btfsc	status,2,c
  1773  001866  D006               	goto	l3664
  1774  001868  0100               	movlb	0	; () banked
  1775  00186A  51DA               	movf	_Ready& (0+255),w,b
  1776  00186C  0100               	movlb	0	; () banked
  1777  00186E  11DB               	iorwf	(_Ready+1)& (0+255),w,b
  1778  001870  A4D8               	btfss	status,2,c
  1779  001872  D78A               	goto	l3648
  1780  001874                     l3664:
  1781                           
  1782                           ;ES_Framework.c: 294: }
  1783                           ;ES_Framework.c: 295: }
  1784                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1785  001874  ECB0  F012         	call	_ES_CheckUserEvents	;wreg free
  1786  001878  D7F2               	goto	l3660
  1787  00187A                     __end_of_ES_Run:
  1788                           	opt stack 0
  1789                           tosu	equ	0xFFF
  1790                           tosh	equ	0xFFE
  1791                           tosl	equ	0xFFD
  1792                           pclath	equ	0xFFA
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postdec1	equ	0xFE5
  1802                           fsr1h	equ	0xFE2
  1803                           fsr1l	equ	0xFE1
  1804                           indf2	equ	0xFDF
  1805                           fsr2h	equ	0xFDA
  1806                           fsr2l	equ	0xFD9
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function __HW_Process_Pending_Ints *****************
  1810 ;; Defined at:
  1811 ;;		line 225 in file "ES_Port.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      unsigned char 
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1825 ;;      Params:         0       0       0       0
  1826 ;;      Locals:         0       0       0       0
  1827 ;;      Temps:          0       0       0       0
  1828 ;;      Totals:         0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:   12
  1832 ;; This function calls:
  1833 ;;		_ES_Timer_Tick_Resp
  1834 ;; This function is called by:
  1835 ;;		_ES_Run
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text4
  1840  0028AC                     __ptext4:
  1841                           	opt stack 0
  1842  0028AC                     __HW_Process_Pending_Ints:
  1843                           	opt stack 17
  1844                           
  1845                           ;ES_Port.c: 227: while (TickCount > 0)
  1846                           
  1847                           ;incstack = 0
  1848  0028AC  D004               	goto	l3400
  1849  0028AE                     l3396:
  1850                           
  1851                           ;ES_Port.c: 228: {
  1852                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1853  0028AE  ECB5  F00A         	call	_ES_Timer_Tick_Resp	;wreg free
  1854                           
  1855                           ;ES_Port.c: 231: TickCount--;
  1856  0028B2  0100               	movlb	0	; () banked
  1857  0028B4  07E9               	decf	_TickCount& (0+255),f,b	;volatile
  1858  0028B6                     l3400:
  1859  0028B6  0100               	movlb	0	; () banked
  1860  0028B8  51E9               	movf	_TickCount& (0+255),w,b	;volatile
  1861  0028BA  A4D8               	btfss	status,2,c
  1862  0028BC  D7F8               	goto	l3396
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ES_Port.c: 232: }
  1866                           ;ES_Port.c: 234: return 1;
  1867                           
  1868                           ; BSR set to: 0
  1869  0028BE  0E01               	movlw	1
  1870  0028C0  0012               	return	
  1871  0028C2                     __end_of__HW_Process_Pending_Ints:
  1872                           	opt stack 0
  1873                           tosu	equ	0xFFF
  1874                           tosh	equ	0xFFE
  1875                           tosl	equ	0xFFD
  1876                           pclath	equ	0xFFA
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           indf2	equ	0xFDF
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _ES_Timer_Tick_Resp *****************
  1894 ;; Defined at:
  1895 ;;		line 284 in file "ES_Timers.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1909 ;;      Params:         0       0       0       0
  1910 ;;      Locals:         0       0       0       0
  1911 ;;      Temps:          0       4       0       0
  1912 ;;      Totals:         0       4       0       0
  1913 ;;Total ram usage:        4 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:   11
  1916 ;; This function calls:
  1917 ;;		Absolute function
  1918 ;;		_ES_GetMSBitSet
  1919 ;;		_PostPatternControlService
  1920 ;;		_PostSPI32ControlService
  1921 ;; This function is called by:
  1922 ;;		__HW_Process_Pending_Ints
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text5
  1927  00156A                     __ptext5:
  1928                           	opt stack 0
  1929  00156A                     _ES_Timer_Tick_Resp:
  1930                           	opt stack 17
  1931                           
  1932                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1933                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1934                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1935                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;incstack = 0
  1939  00156A  0100               	movlb	0	; () banked
  1940  00156C  51DC               	movf	_TMR_ActiveFlags& (0+255),w,b
  1941  00156E  0100               	movlb	0	; () banked
  1942  001570  11DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1943  001572  B4D8               	btfsc	status,2,c
  1944  001574  0012               	return	
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ES_Timers.c: 291: {
  1948                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1949  001576  C0DC  F0D4         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1950  00157A  C0DD  F0D5         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1951  00157E                     l3212:
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1955  00157E  C0D4  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1956  001582  C0D5  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1957  001586  EC5C  F00F         	call	_ES_GetMSBitSet	;wreg free
  1958  00158A  0100               	movlb	0	; () banked
  1959  00158C  6FDF               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1963  00158E  0100               	movlb	0	; () banked
  1964  001590  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1965  001592  0D02               	mullw	2
  1966  001594  0E00               	movlw	low _TMR_TimerArray
  1967  001596  24F3               	addwf	prodl,w,c
  1968  001598  6ED9               	movwf	fsr2l,c
  1969  00159A  0E01               	movlw	high _TMR_TimerArray
  1970  00159C  20F4               	addwfc	prodh,w,c
  1971  00159E  6EDA               	movwf	fsr2h,c
  1972  0015A0  06DE               	decf	postinc2,f,c
  1973  0015A2  0E00               	movlw	0
  1974  0015A4  5ADD               	subwfb	postdec2,f,c
  1975  0015A6  50DE               	movf	postinc2,w,c
  1976  0015A8  10DE               	iorwf	postinc2,w,c
  1977  0015AA  A4D8               	btfss	status,2,c
  1978  0015AC  D043               	goto	l3224
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;ES_Timers.c: 299: {
  1982                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1983  0015AE  0E03               	movlw	3
  1984  0015B0  0100               	movlb	0	; () banked
  1985  0015B2  6FD1               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1989  0015B4  C0DF  F0D2         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1990  0015B8  0100               	movlb	0	; () banked
  1991  0015BA  6BD3               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1995  0015BC  C0D1  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1996  0015C0  C0D2  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1997  0015C4  C0D3  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1998  0015C8  0100               	movlb	0	; () banked
  1999  0015CA  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2000  0015CC  0D02               	mullw	2
  2001  0015CE  0E21               	movlw	low _Timer2PostFunc
  2002  0015D0  24F3               	addwf	prodl,w,c
  2003  0015D2  6EF6               	movwf	tblptrl,c
  2004  0015D4  0E03               	movlw	high _Timer2PostFunc
  2005  0015D6  20F4               	addwfc	prodh,w,c
  2006  0015D8  6EF7               	movwf	tblptrh,c
  2007  0015DA                     	if	0	;There are less than 3 active tblptr bytes
  2008  0015DA                     	endif
  2009  0015DA  D801               	call	u1858
  2010  0015DC  D00C               	goto	l3222
  2011  0015DE                     u1858:
  2012  0015DE  0005               	push	
  2013  0015E0  6EFA               	movwf	pclath,c
  2014  0015E2  0009               	tblrd		*+
  2015  0015E4  50F5               	movf	tablat,w,c
  2016  0015E6  6EFD               	movwf	tosl,c
  2017  0015E8  0009               	tblrd		*+
  2018  0015EA  50F5               	movf	tablat,w,c
  2019  0015EC  6EFE               	movwf	tosh,c
  2020  0015EE  50F8               	movf	tblptru,w,c
  2021  0015F0  6EFF               	movwf	tosu,c
  2022  0015F2  50FA               	movf	pclath,w,c
  2023  0015F4  0012               	return		;indir
  2024  0015F6                     l3222:
  2025                           
  2026                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2027  0015F6  0100               	movlb	0	; () banked
  2028  0015F8  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2029  0015FA  0D02               	mullw	2
  2030  0015FC  0E01               	movlw	low _BitNum2SetMask
  2031  0015FE  24F3               	addwf	prodl,w,c
  2032  001600  6EF6               	movwf	tblptrl,c
  2033  001602  0E03               	movlw	high _BitNum2SetMask
  2034  001604  20F4               	addwfc	prodh,w,c
  2035  001606  6EF7               	movwf	tblptrh,c
  2036  001608                     	if	0	;There are less than 3 active tblptr bytes
  2037  001608                     	endif
  2038  001608  0009               	tblrd		*+
  2039  00160A  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2040  00160E  0009               	tblrd		*+
  2041  001610  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2042  001614  0100               	movlb	0	; () banked
  2043  001616  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2044  001618  0100               	movlb	0	; () banked
  2045  00161A  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2046  00161C  0100               	movlb	0	; () banked
  2047  00161E  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2048  001620  0100               	movlb	0	; () banked
  2049  001622  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2050  001624  0100               	movlb	0	; () banked
  2051  001626  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2052  001628  0100               	movlb	0	; () banked
  2053  00162A  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2054  00162C  0100               	movlb	0	; () banked
  2055  00162E  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2056  001630  0100               	movlb	0	; () banked
  2057  001632  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2058  001634                     l3224:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;ES_Timers.c: 306: }
  2062                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2063  001634  0100               	movlb	0	; () banked
  2064  001636  51DF               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2065  001638  0D02               	mullw	2
  2066  00163A  0E01               	movlw	low _BitNum2SetMask
  2067  00163C  24F3               	addwf	prodl,w,c
  2068  00163E  6EF6               	movwf	tblptrl,c
  2069  001640  0E03               	movlw	high _BitNum2SetMask
  2070  001642  20F4               	addwfc	prodh,w,c
  2071  001644  6EF7               	movwf	tblptrh,c
  2072  001646                     	if	0	;There are less than 3 active tblptr bytes
  2073  001646                     	endif
  2074  001646  0009               	tblrd		*+
  2075  001648  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2076  00164C  0009               	tblrd		*+
  2077  00164E  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2078  001652  0100               	movlb	0	; () banked
  2079  001654  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2080  001656  0100               	movlb	0	; () banked
  2081  001658  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2082  00165A  0100               	movlb	0	; () banked
  2083  00165C  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2084  00165E  0100               	movlb	0	; () banked
  2085  001660  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2086  001662  0100               	movlb	0	; () banked
  2087  001664  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2088  001666  0100               	movlb	0	; () banked
  2089  001668  17D4               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2090  00166A  0100               	movlb	0	; () banked
  2091  00166C  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2092  00166E  0100               	movlb	0	; () banked
  2093  001670  17D5               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2097  001672  0100               	movlb	0	; () banked
  2098  001674  51D4               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2099  001676  0100               	movlb	0	; () banked
  2100  001678  11D5               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2101  00167A  B4D8               	btfsc	status,2,c
  2102  00167C  0012               	return	
  2103  00167E  D77F               	goto	l3212
  2104  001680                     __end_of_ES_Timer_Tick_Resp:
  2105                           	opt stack 0
  2106                           tosu	equ	0xFFF
  2107                           tosh	equ	0xFFE
  2108                           tosl	equ	0xFFD
  2109                           pclath	equ	0xFFA
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           prodh	equ	0xFF4
  2115                           prodl	equ	0xFF3
  2116                           postinc0	equ	0xFEE
  2117                           wreg	equ	0xFE8
  2118                           postdec1	equ	0xFE5
  2119                           fsr1h	equ	0xFE2
  2120                           fsr1l	equ	0xFE1
  2121                           indf2	equ	0xFDF
  2122                           postinc2	equ	0xFDE
  2123                           postdec2	equ	0xFDD
  2124                           fsr2h	equ	0xFDA
  2125                           fsr2l	equ	0xFD9
  2126                           status	equ	0xFD8
  2127                           
  2128 ;; *************** function _ES_GetMSBitSet *****************
  2129 ;; Defined at:
  2130 ;;		line 79 in file "ES_LookupTables.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  LoopCntr        1    9[BANK0 ] char 
  2135 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2136 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      unsigned char 
  2139 ;; Registers used:
  2140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2146 ;;      Params:         0       2       0       0
  2147 ;;      Locals:         0       3       0       0
  2148 ;;      Temps:          0       5       0       0
  2149 ;;      Totals:         0      10       0       0
  2150 ;;Total ram usage:       10 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    7
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_ES_Run
  2157 ;;		_ES_Timer_Tick_Resp
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text6
  2162  001EB8                     __ptext6:
  2163                           	opt stack 0
  2164  001EB8                     _ES_GetMSBitSet:
  2165                           	opt stack 20
  2166                           
  2167                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2168                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2169                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;incstack = 0
  2173  001EB8  0E80               	movlw	128
  2174  001EBA  0100               	movlb	0	; () banked
  2175  001EBC  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2176                           
  2177                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2178  001EBE  0E03               	movlw	3
  2179  001EC0  0100               	movlb	0	; () banked
  2180  001EC2  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2181  001EC4                     l3054:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2185  001EC4  0100               	movlb	0	; () banked
  2186  001EC6  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2187  001EC8  D046               	goto	l3068
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2191                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2192                           ;ES_LookupTables.c: 91: 0x0F);
  2193                           
  2194                           ; BSR set to: 0
  2195                           
  2196                           ; BSR set to: 0
  2197  001ECA  0100               	movlb	0	; () banked
  2198  001ECC  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2199  001ECE  0D04               	mullw	4
  2200  001ED0  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2201  001ED4  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2202  001ED8  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2203  001EDC  0100               	movlb	0	; () banked
  2204  001EDE  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2205  001EE0  D004               	goto	u1674
  2206  001EE2                     u1675:
  2207  001EE2  0100               	movlb	0	; () banked
  2208  001EE4  90D8               	bcf	status,0,c
  2209  001EE6  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2210  001EE8  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2211  001EEA                     u1674:
  2212  001EEA  0100               	movlb	0	; () banked
  2213  001EEC  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2214  001EEE  D7F9               	goto	u1675
  2215  001EF0  0100               	movlb	0	; () banked
  2216  001EF2  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2217  001EF4  0B0F               	andlw	15
  2218  001EF6  0100               	movlb	0	; () banked
  2219  001EF8  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2223  001EFA  0100               	movlb	0	; () banked
  2224  001EFC  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2225  001EFE  0100               	movlb	0	; () banked
  2226  001F00  B4D8               	btfsc	status,2,c
  2227  001F02  D026               	goto	l3064
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2231                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2232  001F04  0EFF               	movlw	255
  2233  001F06  0100               	movlb	0	; () banked
  2234  001F08  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2235  001F0A  0EFF               	movlw	255
  2236  001F0C  0100               	movlb	0	; () banked
  2237  001F0E  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2238  001F10  0100               	movlb	0	; () banked
  2239  001F12  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2240  001F14  0100               	movlb	0	; () banked
  2241  001F16  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2242  001F18  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2243  001F1A  0100               	movlb	0	; () banked
  2244  001F1C  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2245  001F1E  0100               	movlb	0	; () banked
  2246  001F20  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2247  001F22  0100               	movlb	0	; () banked
  2248  001F24  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2249  001F26  0100               	movlb	0	; () banked
  2250  001F28  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2251  001F2A  0E41               	movlw	low _Nybble2MSBitNum
  2252  001F2C  0100               	movlb	0	; () banked
  2253  001F2E  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2254  001F30  6EF6               	movwf	tblptrl,c
  2255  001F32  0E03               	movlw	high _Nybble2MSBitNum
  2256  001F34  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2257  001F36  6EF7               	movwf	tblptrh,c
  2258  001F38                     	if	0	;There are less than 3 active tblptr bytes
  2259  001F38                     	endif
  2260  001F38  0008               	tblrd		*
  2261  001F3A  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2262  001F3E  0100               	movlb	0	; () banked
  2263  001F40  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2264  001F42  0D04               	mullw	4
  2265  001F44  50F3               	movf	prodl,w,c
  2266  001F46  0100               	movlb	0	; () banked
  2267  001F48  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2268  001F4A  0100               	movlb	0	; () banked
  2269  001F4C  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2270                           
  2271                           ;ES_LookupTables.c: 96: break;
  2272  001F4E  D003               	goto	l3068
  2273  001F50                     l3064:
  2274                           
  2275                           ; BSR set to: 0
  2276  001F50  0100               	movlb	0	; () banked
  2277  001F52  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2278  001F54  D7B7               	goto	l3054
  2279  001F56                     l3068:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;ES_LookupTables.c: 97: }
  2283                           ;ES_LookupTables.c: 98: }
  2284                           ;ES_LookupTables.c: 99: return ReturnVal;
  2285  001F56  0100               	movlb	0	; () banked
  2286  001F58  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2287  001F5A  0012               	return	
  2288  001F5C                     __end_of_ES_GetMSBitSet:
  2289                           	opt stack 0
  2290                           tosu	equ	0xFFF
  2291                           tosh	equ	0xFFE
  2292                           tosl	equ	0xFFD
  2293                           pclath	equ	0xFFA
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1h	equ	0xFE2
  2304                           fsr1l	equ	0xFE1
  2305                           indf2	equ	0xFDF
  2306                           postinc2	equ	0xFDE
  2307                           postdec2	equ	0xFDD
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _RunCanRX_Service *****************
  2313 ;; Defined at:
  2314 ;;		line 138 in file "CanRX_Service.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  PatternEvent    3   96[BANK0 ] struct ES_Event_t
  2319 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  3   90[BANK0 ] struct ES_Event_t
  2322 ;; Registers used:
  2323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2329 ;;      Params:         0       3       0       0
  2330 ;;      Locals:         0       6       0       0
  2331 ;;      Temps:          0       0       0       0
  2332 ;;      Totals:         0       9       0       0
  2333 ;;Total ram usage:        9 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:   11
  2336 ;; This function calls:
  2337 ;;		_InitCanHardware
  2338 ;;		_InitPins
  2339 ;;		_PostPatternControlService
  2340 ;;		_SetPattern
  2341 ;; This function is called by:
  2342 ;;		_ES_Run
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text7
  2347  001C9C                     __ptext7:
  2348                           	opt stack 0
  2349  001C9C                     _RunCanRX_Service:
  2350                           	opt stack 18
  2351                           
  2352                           ;CanRX_Service.c: 140: ES_Event ReturnEvent;
  2353                           ;CanRX_Service.c: 142: switch(ThisEvent.EventType) {
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;incstack = 0
  2357  001C9C  D041               	goto	l3572
  2358  001C9E                     l3544:
  2359                           
  2360                           ;CanRX_Service.c: 144: InitPins();
  2361  001C9E  EC49  F014         	call	_InitPins	;wreg free
  2362                           
  2363                           ;CanRX_Service.c: 145: InitCanHardware();
  2364  001CA2  EC83  F010         	call	_InitCanHardware	;wreg free
  2365                           
  2366                           ;CanRX_Service.c: 146: break;
  2367  001CA6  D04D               	goto	l3574
  2368  001CA8                     l3546:
  2369                           
  2370                           ;CanRX_Service.c: 149: SetPattern(1);
  2371  001CA8  0E01               	movlw	1
  2372  001CAA  EC96  F014         	call	_SetPattern
  2373                           
  2374                           ;CanRX_Service.c: 150: ES_Event PatternEvent;
  2375                           ;CanRX_Service.c: 151: PatternEvent.EventType = PATTERN_START;
  2376  001CAE  0E05               	movlw	5
  2377  001CB0  0100               	movlb	0	; () banked
  2378  001CB2  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;CanRX_Service.c: 152: PostPatternControlService(PatternEvent);
  2382  001CB4  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2383  001CB8  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2384  001CBC  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2385  001CC0  EC61  F014         	call	_PostPatternControlService	;wreg free
  2386                           
  2387                           ;CanRX_Service.c: 153: break;
  2388  001CC4  D03E               	goto	l3574
  2389  001CC6                     l3552:
  2390                           
  2391                           ;CanRX_Service.c: 156: SetPattern(2);
  2392  001CC6  0E02               	movlw	2
  2393  001CC8  EC96  F014         	call	_SetPattern
  2394                           
  2395                           ;CanRX_Service.c: 157: ES_Event PatternEvent;
  2396                           ;CanRX_Service.c: 158: PatternEvent.EventType = PATTERN_START;
  2397  001CCC  0E05               	movlw	5
  2398  001CCE  0100               	movlb	0	; () banked
  2399  001CD0  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;CanRX_Service.c: 159: PostPatternControlService(PatternEvent);
  2403  001CD2  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2404  001CD6  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2405  001CDA  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2406  001CDE  EC61  F014         	call	_PostPatternControlService	;wreg free
  2407                           
  2408                           ;CanRX_Service.c: 160: break;
  2409  001CE2  D02F               	goto	l3574
  2410  001CE4                     l3558:
  2411                           
  2412                           ;CanRX_Service.c: 163: SetPattern(3);
  2413  001CE4  0E03               	movlw	3
  2414  001CE6  EC96  F014         	call	_SetPattern
  2415                           
  2416                           ;CanRX_Service.c: 164: ES_Event PatternEvent;
  2417                           ;CanRX_Service.c: 165: PatternEvent.EventType = PATTERN_START;
  2418  001CEA  0E05               	movlw	5
  2419  001CEC  0100               	movlb	0	; () banked
  2420  001CEE  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;CanRX_Service.c: 166: PostPatternControlService(PatternEvent);
  2424  001CF0  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2425  001CF4  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2426  001CF8  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2427  001CFC  EC61  F014         	call	_PostPatternControlService	;wreg free
  2428                           
  2429                           ;CanRX_Service.c: 167: break;
  2430  001D00  D020               	goto	l3574
  2431  001D02                     l3564:
  2432                           
  2433                           ;CanRX_Service.c: 170: SetPattern(4);
  2434  001D02  0E04               	movlw	4
  2435  001D04  EC96  F014         	call	_SetPattern
  2436                           
  2437                           ;CanRX_Service.c: 171: ES_Event PatternEvent;
  2438                           ;CanRX_Service.c: 172: PatternEvent.EventType = PATTERN_START;
  2439  001D08  0E05               	movlw	5
  2440  001D0A  0100               	movlb	0	; () banked
  2441  001D0C  6FC0               	movwf	RunCanRX_Service@PatternEvent& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;CanRX_Service.c: 173: PostPatternControlService(PatternEvent);
  2445  001D0E  C0C0  F07D         	movff	RunCanRX_Service@PatternEvent,PostPatternControlService@ThisEvent
  2446  001D12  C0C1  F07E         	movff	RunCanRX_Service@PatternEvent+1,PostPatternControlService@ThisEvent+1
  2447  001D16  C0C2  F07F         	movff	RunCanRX_Service@PatternEvent+2,PostPatternControlService@ThisEvent+2
  2448  001D1A  EC61  F014         	call	_PostPatternControlService	;wreg free
  2449                           
  2450                           ;CanRX_Service.c: 175: }
  2451                           
  2452                           ;CanRX_Service.c: 174: break;
  2453  001D1E  D011               	goto	l3574
  2454  001D20                     l3572:
  2455  001D20  0100               	movlb	0	; () banked
  2456  001D22  51BA               	movf	RunCanRX_Service@ThisEvent& (0+255),w,b
  2457                           
  2458                           ; Switch size 1, requested type "space"
  2459                           ; Number of cases is 5, Range of values is 2 to 13
  2460                           ; switch strategies available:
  2461                           ; Name         Instructions Cycles
  2462                           ; simple_byte           16     9 (average)
  2463                           ;	Chosen strategy is simple_byte
  2464  001D24  0A02               	xorlw	2	; case 2
  2465  001D26  B4D8               	btfsc	status,2,c
  2466  001D28  D7BA               	goto	l3544
  2467  001D2A  0A08               	xorlw	8	; case 10
  2468  001D2C  B4D8               	btfsc	status,2,c
  2469  001D2E  D7BC               	goto	l3546
  2470  001D30  0A01               	xorlw	1	; case 11
  2471  001D32  B4D8               	btfsc	status,2,c
  2472  001D34  D7D7               	goto	l3558
  2473  001D36  0A07               	xorlw	7	; case 12
  2474  001D38  B4D8               	btfsc	status,2,c
  2475  001D3A  D7C5               	goto	l3552
  2476  001D3C  0A01               	xorlw	1	; case 13
  2477  001D3E  B4D8               	btfsc	status,2,c
  2478  001D40  D7E0               	goto	l3564
  2479  001D42                     l3574:
  2480                           
  2481                           ;CanRX_Service.c: 176: ReturnEvent.EventType = ES_NO_EVENT;
  2482  001D42  0E00               	movlw	0
  2483  001D44  0100               	movlb	0	; () banked
  2484  001D46  6FBD               	movwf	RunCanRX_Service@ReturnEvent& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;CanRX_Service.c: 177: return ReturnEvent;
  2488  001D48  C0BD  F0BA         	movff	RunCanRX_Service@ReturnEvent,?_RunCanRX_Service
  2489  001D4C  C0BE  F0BB         	movff	RunCanRX_Service@ReturnEvent+1,?_RunCanRX_Service+1
  2490  001D50  C0BF  F0BC         	movff	RunCanRX_Service@ReturnEvent+2,?_RunCanRX_Service+2
  2491  001D54  0012               	return	
  2492  001D56                     __end_of_RunCanRX_Service:
  2493                           	opt stack 0
  2494                           tosu	equ	0xFFF
  2495                           tosh	equ	0xFFE
  2496                           tosl	equ	0xFFD
  2497                           pclath	equ	0xFFA
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           postdec1	equ	0xFE5
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _RunPatternControlService *****************
  2517 ;; Defined at:
  2518 ;;		line 157 in file "Pattern_ControlService.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  testEvent       3   96[BANK0 ] struct ES_Event_t
  2523 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  3   90[BANK0 ] struct ES_Event_t
  2526 ;; Registers used:
  2527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2533 ;;      Params:         0       3       0       0
  2534 ;;      Locals:         0       6       0       0
  2535 ;;      Temps:          0       0       0       0
  2536 ;;      Totals:         0       9       0       0
  2537 ;;Total ram usage:        9 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:   14
  2540 ;; This function calls:
  2541 ;;		_PausePattern
  2542 ;;		_PostPatternControlService
  2543 ;;		_ShowPattern
  2544 ;;		_StopPattern
  2545 ;; This function is called by:
  2546 ;;		_ES_Run
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text8
  2551  001B16                     __ptext8:
  2552                           	opt stack 0
  2553  001B16                     _RunPatternControlService:
  2554                           	opt stack 15
  2555                           
  2556                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2557                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;incstack = 0
  2561  001B16  0E00               	movlw	0
  2562  001B18  0100               	movlb	0	; () banked
  2563  001B1A  6FBD               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2564                           
  2565                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2566  001B1C  D04B               	goto	l3474
  2567  001B1E                     l3430:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2571  001B1E  0E02               	movlw	2
  2572  001B20  0100               	movlb	0	; () banked
  2573  001B22  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2574  001B24  A4D8               	btfss	status,2,c
  2575  001B26  D054               	goto	l352
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;Pattern_ControlService.c: 169: StopPattern();
  2579  001B28  ECD5  F013         	call	_StopPattern	;wreg free
  2580                           
  2581                           ;Pattern_ControlService.c: 171: CurrentState = Pattern_Off;
  2582  001B2C  0E01               	movlw	1
  2583  001B2E  0100               	movlb	0	; () banked
  2584  001B30  6FE3               	movwf	_CurrentState& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;Pattern_ControlService.c: 174: ES_Event testEvent;
  2588                           ;Pattern_ControlService.c: 175: testEvent.EventType = PATTERN_START;
  2589  001B32  0E05               	movlw	5
  2590  001B34  0100               	movlb	0	; () banked
  2591  001B36  6FC0               	movwf	RunPatternControlService@testEvent& (0+255),b
  2592                           
  2593                           ;Pattern_ControlService.c: 176: PostPatternControlService(testEvent);
  2594  001B38  C0C0  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2595  001B3C  C0C1  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2596  001B40  C0C2  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2597  001B44  EC61  F014         	call	_PostPatternControlService	;wreg free
  2598                           
  2599                           ;Pattern_ControlService.c: 178: }
  2600                           ;Pattern_ControlService.c: 179: break;
  2601  001B48  D043               	goto	l352
  2602  001B4A                     l3438:
  2603                           
  2604                           ;Pattern_ControlService.c: 183: if(ThisEvent.EventType == PATTERN_START){
  2605  001B4A  0E05               	movlw	5
  2606  001B4C  0100               	movlb	0	; () banked
  2607  001B4E  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2608  001B50  A4D8               	btfss	status,2,c
  2609  001B52  D03E               	goto	l352
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;Pattern_ControlService.c: 185: ShowPattern();
  2613  001B54  ECE9  F013         	call	_ShowPattern	;wreg free
  2614  001B58                     l3442:
  2615                           
  2616                           ;Pattern_ControlService.c: 187: CurrentState = Pattern_Running;
  2617  001B58  0E02               	movlw	2
  2618  001B5A  D029               	goto	L4
  2619  001B5C                     l3444:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;Pattern_ControlService.c: 193: if(ThisEvent.EventType == ES_TIMEOUT){
  2623  001B5C  0E03               	movlw	3
  2624  001B5E  0100               	movlb	0	; () banked
  2625  001B60  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2626  001B62  A4D8               	btfss	status,2,c
  2627  001B64  D003               	goto	l3448
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;Pattern_ControlService.c: 195: ShowPattern();
  2631  001B66  ECE9  F013         	call	_ShowPattern	;wreg free
  2632                           
  2633                           ;Pattern_ControlService.c: 196: }
  2634  001B6A  D032               	goto	l352
  2635  001B6C                     l3448:
  2636                           
  2637                           ;Pattern_ControlService.c: 198: else if(ThisEvent.EventType == PATTERN_END){
  2638  001B6C  0E06               	movlw	6
  2639  001B6E  0100               	movlb	0	; () banked
  2640  001B70  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2641  001B72  A4D8               	btfss	status,2,c
  2642  001B74  D003               	goto	l3454
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;Pattern_ControlService.c: 200: StopPattern();
  2646  001B76  ECD5  F013         	call	_StopPattern	;wreg free
  2647  001B7A  D018               	goto	L21
  2648  001B7C                     l3454:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;Pattern_ControlService.c: 205: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2652  001B7C  0E07               	movlw	7
  2653  001B7E  0100               	movlb	0	; () banked
  2654  001B80  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2655  001B82  A4D8               	btfss	status,2,c
  2656  001B84  D025               	goto	l352
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;Pattern_ControlService.c: 207: PausePattern();
  2660  001B86  EC9F  F014         	call	_PausePattern	;wreg free
  2661                           
  2662                           ;Pattern_ControlService.c: 209: CurrentState = Pattern_Paused;
  2663  001B8A  0E03               	movlw	3
  2664  001B8C  D010               	goto	L4
  2665  001B8E                     l3460:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;Pattern_ControlService.c: 215: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2669  001B8E  0E08               	movlw	8
  2670  001B90  0100               	movlb	0	; () banked
  2671  001B92  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2672  001B94  A4D8               	btfss	status,2,c
  2673  001B96  D003               	goto	l3466
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;Pattern_ControlService.c: 217: ShowPattern();
  2677  001B98  ECE9  F013         	call	_ShowPattern	;wreg free
  2678  001B9C  D7DD               	goto	l3442
  2679  001B9E                     l3466:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;Pattern_ControlService.c: 222: else if(ThisEvent.EventType == PATTERN_END){
  2683  001B9E  0E06               	movlw	6
  2684  001BA0  0100               	movlb	0	; () banked
  2685  001BA2  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2686  001BA4  A4D8               	btfss	status,2,c
  2687  001BA6  D014               	goto	l352
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;Pattern_ControlService.c: 224: StopPattern();
  2691  001BA8  ECD5  F013         	call	_StopPattern	;wreg free
  2692  001BAC                     L21:
  2693                           
  2694                           ;Pattern_ControlService.c: 226: CurrentState = Pattern_Off;
  2695  001BAC  0E01               	movlw	1
  2696  001BAE                     L4:
  2697  001BAE  0100               	movlb	0	; () banked
  2698  001BB0  6FE3               	movwf	_CurrentState& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;Pattern_ControlService.c: 229: }
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;Pattern_ControlService.c: 227: }
  2705                           ;Pattern_ControlService.c: 228: break;
  2706                           
  2707                           ; BSR set to: 0
  2708  001BB2  D00E               	goto	l352
  2709  001BB4                     l3474:
  2710                           
  2711                           ; BSR set to: 0
  2712  001BB4  0100               	movlb	0	; () banked
  2713  001BB6  51E3               	movf	_CurrentState& (0+255),w,b
  2714                           
  2715                           ; Switch size 1, requested type "space"
  2716                           ; Number of cases is 4, Range of values is 0 to 3
  2717                           ; switch strategies available:
  2718                           ; Name         Instructions Cycles
  2719                           ; simple_byte           13     7 (average)
  2720                           ;	Chosen strategy is simple_byte
  2721  001BB8  0A00               	xorlw	0	; case 0
  2722  001BBA  B4D8               	btfsc	status,2,c
  2723  001BBC  D7B0               	goto	l3430
  2724  001BBE  0A01               	xorlw	1	; case 1
  2725  001BC0  B4D8               	btfsc	status,2,c
  2726  001BC2  D7C3               	goto	l3438
  2727  001BC4  0A03               	xorlw	3	; case 2
  2728  001BC6  B4D8               	btfsc	status,2,c
  2729  001BC8  D7C9               	goto	l3444
  2730  001BCA  0A01               	xorlw	1	; case 3
  2731  001BCC  B4D8               	btfsc	status,2,c
  2732  001BCE  D7DF               	goto	l3460
  2733  001BD0                     l352:
  2734                           
  2735                           ;Pattern_ControlService.c: 230: return ReturnEvent;
  2736  001BD0  C0BD  F0BA         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2737  001BD4  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2738  001BD8  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2739  001BDC  0012               	return		;funcret
  2740  001BDE                     __end_of_RunPatternControlService:
  2741                           	opt stack 0
  2742                           tosu	equ	0xFFF
  2743                           tosh	equ	0xFFE
  2744                           tosl	equ	0xFFD
  2745                           pclath	equ	0xFFA
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postdec1	equ	0xFE5
  2755                           fsr1h	equ	0xFE2
  2756                           fsr1l	equ	0xFE1
  2757                           indf2	equ	0xFDF
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _RunSPI32ControlService *****************
  2765 ;; Defined at:
  2766 ;;		line 138 in file "SPI32_ControlService.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  ReturnEvent     3  100[BANK0 ] struct ES_Event_t
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  3   90[BANK0 ] struct ES_Event_t
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       3       0       0
  2781 ;;      Locals:         0       3       0       0
  2782 ;;      Temps:          0       7       0       0
  2783 ;;      Totals:         0      13       0       0
  2784 ;;Total ram usage:       13 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    8
  2787 ;; This function calls:
  2788 ;;		_GetNextFrame
  2789 ;;		_SPI32_SendFrame
  2790 ;; This function is called by:
  2791 ;;		_ES_Run
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text9
  2796  001680                     __ptext9:
  2797                           	opt stack 0
  2798  001680                     _RunSPI32ControlService:
  2799                           	opt stack 21
  2800                           
  2801                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2802                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2803                           
  2804                           ;incstack = 0
  2805  001680  0E00               	movlw	0
  2806  001682  0100               	movlb	0	; () banked
  2807  001684  6FC4               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2808                           
  2809                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2810  001686  D06D               	goto	l3524
  2811  001688                     l3498:
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2815  001688  0E02               	movlw	2
  2816  00168A  0100               	movlb	0	; () banked
  2817  00168C  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2818  00168E  A4D8               	btfss	status,2,c
  2819  001690  D073               	goto	l564
  2820  001692  D063               	goto	l3520
  2821  001694                     l3502:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2825  001694  0E09               	movlw	9
  2826  001696  0100               	movlb	0	; () banked
  2827  001698  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2828  00169A  A4D8               	btfss	status,2,c
  2829  00169C  D06D               	goto	l564
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2833  00169E  EC3C  F014         	call	_GetNextFrame	;wreg free
  2834  0016A2  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2835  0016A6  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2836  0016AA  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2837  0016AE  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2838                           
  2839                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2840  0016B2  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2841  0016B6  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2842  0016BA  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2843  0016BE  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2844  0016C2  EC39  F012         	call	_SPI32_SendFrame	;wreg free
  2845                           
  2846                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2847  0016C6  0E02               	movlw	2
  2848  0016C8  D049               	goto	L6
  2849  0016CA                     l3510:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2853  0016CA  0E03               	movlw	3
  2854  0016CC  0100               	movlb	0	; () banked
  2855  0016CE  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2856  0016D0  A4D8               	btfss	status,2,c
  2857  0016D2  D052               	goto	l564
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2861  0016D4  0EFF               	movlw	255
  2862  0016D6  0100               	movlb	0	; () banked
  2863  0016D8  6FBD               	movwf	??_RunSPI32ControlService& (0+255),b
  2864  0016DA  0EFF               	movlw	255
  2865  0016DC  0100               	movlb	0	; () banked
  2866  0016DE  6FBE               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2867  0016E0  0100               	movlb	0	; () banked
  2868  0016E2  51E7               	movf	_NumFrames& (0+255),w,b
  2869  0016E4  0100               	movlb	0	; () banked
  2870  0016E6  6FBF               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2871  0016E8  6BC0               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2872  0016EA  0100               	movlb	0	; () banked
  2873  0016EC  51BD               	movf	??_RunSPI32ControlService& (0+255),w,b
  2874  0016EE  0100               	movlb	0	; () banked
  2875  0016F0  27BF               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2876  0016F2  0100               	movlb	0	; () banked
  2877  0016F4  51BE               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2878  0016F6  0100               	movlb	0	; () banked
  2879  0016F8  23C0               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2880  0016FA  0100               	movlb	0	; () banked
  2881  0016FC  2BE4               	incf	_FrameIndex& (0+255),f,b
  2882  0016FE  05E4               	decf	_FrameIndex& (0+255),w,b
  2883  001700  0100               	movlb	0	; () banked
  2884  001702  6FC1               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2885  001704  6BC2               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2886  001706  0100               	movlb	0	; () banked
  2887  001708  51BF               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2888  00170A  0100               	movlb	0	; () banked
  2889  00170C  5DC1               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2890  00170E  0100               	movlb	0	; () banked
  2891  001710  51C2               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2892  001712  0A80               	xorlw	128
  2893  001714  0100               	movlb	0	; () banked
  2894  001716  6FC3               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2895  001718  0100               	movlb	0	; () banked
  2896  00171A  51C0               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2897  00171C  0A80               	xorlw	128
  2898  00171E  0100               	movlb	0	; () banked
  2899  001720  59C3               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2900  001722  B0D8               	btfsc	status,0,c
  2901  001724  D01A               	goto	l3520
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;SPI32_ControlService.c: 176: FramePointer++;
  2905  001726  0E04               	movlw	4
  2906  001728  0100               	movlb	0	; () banked
  2907  00172A  27D8               	addwf	_FramePointer& (0+255),f,b
  2908  00172C  0E00               	movlw	0
  2909  00172E  23D9               	addwfc	(_FramePointer+1)& (0+255),f,b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2913  001730  EC3C  F014         	call	_GetNextFrame	;wreg free
  2914  001734  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2915  001738  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2916  00173C  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2917  001740  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2918                           
  2919                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2920  001744  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2921  001748  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2922  00174C  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2923  001750  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2924  001754  EC39  F012         	call	_SPI32_SendFrame	;wreg free
  2925                           
  2926                           ;SPI32_ControlService.c: 180: }
  2927  001758  D00F               	goto	l564
  2928  00175A                     l3520:
  2929                           
  2930                           ;SPI32_ControlService.c: 182: else{
  2931                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2932  00175A  0E01               	movlw	1
  2933  00175C                     L6:
  2934  00175C  0100               	movlb	0	; () banked
  2935  00175E  6FE1               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;SPI32_ControlService.c: 235: }
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;SPI32_ControlService.c: 185: }
  2942                           ;SPI32_ControlService.c: 186: }
  2943                           ;SPI32_ControlService.c: 188: break;
  2944                           
  2945                           ; BSR set to: 0
  2946  001760  D00B               	goto	l564
  2947  001762                     l3524:
  2948                           
  2949                           ; BSR set to: 0
  2950  001762  0100               	movlb	0	; () banked
  2951  001764  51E1               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2952                           
  2953                           ; Switch size 1, requested type "space"
  2954                           ; Number of cases is 3, Range of values is 0 to 2
  2955                           ; switch strategies available:
  2956                           ; Name         Instructions Cycles
  2957                           ; simple_byte           10     6 (average)
  2958                           ;	Chosen strategy is simple_byte
  2959  001766  0A00               	xorlw	0	; case 0
  2960  001768  B4D8               	btfsc	status,2,c
  2961  00176A  D78E               	goto	l3498
  2962  00176C  0A01               	xorlw	1	; case 1
  2963  00176E  B4D8               	btfsc	status,2,c
  2964  001770  D791               	goto	l3502
  2965  001772  0A03               	xorlw	3	; case 2
  2966  001774  B4D8               	btfsc	status,2,c
  2967  001776  D7A9               	goto	l3510
  2968  001778                     l564:
  2969                           
  2970                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2971  001778  C0C4  F0BA         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2972  00177C  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2973  001780  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2974  001784  0012               	return		;funcret
  2975  001786                     __end_of_RunSPI32ControlService:
  2976                           	opt stack 0
  2977                           tosu	equ	0xFFF
  2978                           tosh	equ	0xFFE
  2979                           tosl	equ	0xFFD
  2980                           pclath	equ	0xFFA
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           postinc0	equ	0xFEE
  2988                           wreg	equ	0xFE8
  2989                           postdec1	equ	0xFE5
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8
  2998                           
  2999 ;; *************** function _SPI32_SendFrame *****************
  3000 ;; Defined at:
  3001 ;;		line 86 in file "SPI32_HW.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;  newFrame        4    0[BANK0 ] unsigned long 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;		None
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      void 
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, prodl, prodh
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3015 ;;      Params:         0       4       0       0
  3016 ;;      Locals:         0       0       0       0
  3017 ;;      Temps:          0       4       0       0
  3018 ;;      Totals:         0       8       0       0
  3019 ;;Total ram usage:        8 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    7
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		_RunSPI32ControlService
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	text10
  3030  002472                     __ptext10:
  3031                           	opt stack 0
  3032  002472                     _SPI32_SendFrame:
  3033                           	opt stack 21
  3034                           
  3035                           ;SPI32_HW.c: 101: if(FrameByte == 4){
  3036                           
  3037                           ;incstack = 0
  3038  002472  0E04               	movlw	4
  3039  002474  0100               	movlb	0	; () banked
  3040  002476  19FA               	xorwf	_FrameByte& (0+255),w,b
  3041  002478  A4D8               	btfss	status,2,c
  3042  00247A  D008               	goto	l3276
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
  3046  00247C  C060  F034         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  3047  002480  C061  F035         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  3048  002484  C062  F036         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  3049  002488  C063  F037         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  3050  00248C                     l3276:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;SPI32_HW.c: 104: }
  3054                           ;SPI32_HW.c: 106: FrameByte--;
  3055  00248C  0100               	movlb	0	; () banked
  3056  00248E  07FA               	decf	_FrameByte& (0+255),f,b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  3060  002490  0100               	movlb	0	; () banked
  3061  002492  51FA               	movf	_FrameByte& (0+255),w,b
  3062  002494  0D08               	mullw	8
  3063  002496  50F3               	movf	prodl,w,c
  3064  002498  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  3065  00249C  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  3066  0024A0  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  3067  0024A4  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  3068  0024A8  0100               	movlb	0	; () banked
  3069  0024AA  2AE8               	incf	wreg,f,c
  3070  0024AC  D005               	goto	u1880
  3071  0024AE                     u1885:
  3072  0024AE  90D8               	bcf	status,0,c
  3073  0024B0  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  3074  0024B2  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  3075  0024B4  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  3076  0024B6  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  3077  0024B8                     u1880:
  3078  0024B8  2EE8               	decfsz	wreg,f,c
  3079  0024BA  D7F9               	goto	u1885
  3080  0024BC  0100               	movlb	0	; () banked
  3081  0024BE  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  3082  0024C0  6EC9               	movwf	4041,c	;volatile
  3083                           
  3084                           ; BSR set to: 0
  3085  0024C2  0012               	return		;funcret
  3086  0024C4                     __end_of_SPI32_SendFrame:
  3087                           	opt stack 0
  3088                           tosu	equ	0xFFF
  3089                           tosh	equ	0xFFE
  3090                           tosl	equ	0xFFD
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           postinc0	equ	0xFEE
  3099                           wreg	equ	0xFE8
  3100                           postdec1	equ	0xFE5
  3101                           fsr1h	equ	0xFE2
  3102                           fsr1l	equ	0xFE1
  3103                           indf2	equ	0xFDF
  3104                           postinc2	equ	0xFDE
  3105                           postdec2	equ	0xFDD
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _GetNextFrame *****************
  3111 ;; Defined at:
  3112 ;;		line 258 in file "SPI32_ControlService.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  4    0[BANK0 ] unsigned long 
  3119 ;; Registers used:
  3120 ;;		fsr2l, fsr2h
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3126 ;;      Params:         0       4       0       0
  3127 ;;      Locals:         0       0       0       0
  3128 ;;      Temps:          0       0       0       0
  3129 ;;      Totals:         0       4       0       0
  3130 ;;Total ram usage:        4 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    7
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_RunSPI32ControlService
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text11
  3141  002878                     __ptext11:
  3142                           	opt stack 0
  3143  002878                     _GetNextFrame:
  3144                           	opt stack 21
  3145                           
  3146                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;incstack = 0
  3150  002878  C0D8  FFD9         	movff	_FramePointer,fsr2l
  3151  00287C  C0D9  FFDA         	movff	_FramePointer+1,fsr2h
  3152  002880  CFDE F060          	movff	postinc2,?_GetNextFrame
  3153  002884  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3154  002888  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3155  00288C  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3156  002890  0012               	return	
  3157  002892                     __end_of_GetNextFrame:
  3158                           	opt stack 0
  3159                           tosu	equ	0xFFF
  3160                           tosh	equ	0xFFE
  3161                           tosl	equ	0xFFD
  3162                           pclath	equ	0xFFA
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           prodh	equ	0xFF4
  3168                           prodl	equ	0xFF3
  3169                           postinc0	equ	0xFEE
  3170                           wreg	equ	0xFE8
  3171                           postdec1	equ	0xFE5
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _StopPattern *****************
  3182 ;; Defined at:
  3183 ;;		line 283 in file "Pattern_ControlService.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       0       0       0
  3198 ;;      Locals:         0       0       0       0
  3199 ;;      Temps:          0       0       0       0
  3200 ;;      Totals:         0       0       0       0
  3201 ;;Total ram usage:        0 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:   13
  3204 ;; This function calls:
  3205 ;;		_DotStar_Show
  3206 ;;		_ES_Timer_StopTimer
  3207 ;;		_PatternOff
  3208 ;;		_ResetPattern
  3209 ;; This function is called by:
  3210 ;;		_RunPatternControlService
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text12
  3215  0027AA                     __ptext12:
  3216                           	opt stack 0
  3217  0027AA                     _StopPattern:
  3218                           	opt stack 15
  3219                           
  3220                           ;Pattern_ControlService.c: 284: PatternConfigs[0] = 0;
  3221                           
  3222                           ;incstack = 0
  3223  0027AA  0E00               	movlw	0
  3224  0027AC  0100               	movlb	0	; () banked
  3225  0027AE  6FFB               	movwf	_PatternConfigs& (0+255),b
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;Pattern_ControlService.c: 286: ES_Timer_StopTimer(0);
  3229  0027B0  0E00               	movlw	0
  3230  0027B2  EC62  F012         	call	_ES_Timer_StopTimer
  3231                           
  3232                           ;Pattern_ControlService.c: 288: DotStar_Show(PatternOff());
  3233  0027B6  ECF7  F012         	call	_PatternOff	;wreg free
  3234  0027BA  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3235  0027BE  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3236  0027C2  EC22  F00A         	call	_DotStar_Show	;wreg free
  3237                           
  3238                           ;Pattern_ControlService.c: 290: ResetPattern();
  3239  0027C6  EC9B  F014         	call	_ResetPattern	;wreg free
  3240                           
  3241                           ;Pattern_ControlService.c: 292: PatternConfigs[0] = 0;
  3242  0027CA  0E00               	movlw	0
  3243  0027CC  0100               	movlb	0	; () banked
  3244  0027CE  6FFB               	movwf	_PatternConfigs& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247  0027D0  0012               	return		;funcret
  3248  0027D2                     __end_of_StopPattern:
  3249                           	opt stack 0
  3250                           tosu	equ	0xFFF
  3251                           tosh	equ	0xFFE
  3252                           tosl	equ	0xFFD
  3253                           pclath	equ	0xFFA
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postdec1	equ	0xFE5
  3263                           fsr1h	equ	0xFE2
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _ResetPattern *****************
  3273 ;; Defined at:
  3274 ;;		line 192 in file "Pattern_RGBPatterns.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3288 ;;      Params:         0       0       0       0
  3289 ;;      Locals:         0       0       0       0
  3290 ;;      Temps:          0       0       0       0
  3291 ;;      Totals:         0       0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    7
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_StopPattern
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text13
  3303  002936                     __ptext13:
  3304                           	opt stack 0
  3305  002936                     _ResetPattern:
  3306                           	opt stack 20
  3307                           
  3308                           ;Pattern_RGBPatterns.c: 194: PatternStepCounter=0;
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;incstack = 0
  3312  002936  0E00               	movlw	0
  3313  002938  0100               	movlb	0	; () banked
  3314  00293A  6FE8               	movwf	_PatternStepCounter& (0+255),b
  3315                           
  3316                           ; BSR set to: 0
  3317  00293C  0012               	return		;funcret
  3318  00293E                     __end_of_ResetPattern:
  3319                           	opt stack 0
  3320                           tosu	equ	0xFFF
  3321                           tosh	equ	0xFFE
  3322                           tosl	equ	0xFFD
  3323                           pclath	equ	0xFFA
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           prodh	equ	0xFF4
  3329                           prodl	equ	0xFF3
  3330                           postinc0	equ	0xFEE
  3331                           wreg	equ	0xFE8
  3332                           postdec1	equ	0xFE5
  3333                           fsr1h	equ	0xFE2
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _PatternOff *****************
  3343 ;; Defined at:
  3344 ;;		line 84 in file "Pattern_RGBPatterns.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;		None
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  i               1    2[BANK0 ] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  2    0[BANK0 ] PTR unsigned int 
  3351 ;; Registers used:
  3352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3358 ;;      Params:         0       2       0       0
  3359 ;;      Locals:         0       1       0       0
  3360 ;;      Temps:          0       0       0       0
  3361 ;;      Totals:         0       3       0       0
  3362 ;;Total ram usage:        3 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:    7
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_StopPattern
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text14
  3373  0025EE                     __ptext14:
  3374                           	opt stack 0
  3375  0025EE                     _PatternOff:
  3376                           	opt stack 20
  3377                           
  3378                           ;Pattern_RGBPatterns.c: 85: for(uint8_t i=0;i<Length;i++){
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;incstack = 0
  3382  0025EE  0E00               	movlw	0
  3383  0025F0  0100               	movlb	0	; () banked
  3384  0025F2  6F62               	movwf	PatternOff@i& (0+255),b
  3385  0025F4  D00F               	goto	l3174
  3386  0025F6                     l3170:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;Pattern_RGBPatterns.c: 86: PixelPattern[i] = 0x0;
  3390  0025F6  0100               	movlb	0	; () banked
  3391  0025F8  5162               	movf	PatternOff@i& (0+255),w,b
  3392  0025FA  0D02               	mullw	2
  3393  0025FC  0E20               	movlw	low _PixelPattern
  3394  0025FE  24F3               	addwf	prodl,w,c
  3395  002600  6ED9               	movwf	fsr2l,c
  3396  002602  0E01               	movlw	high _PixelPattern
  3397  002604  20F4               	addwfc	prodh,w,c
  3398  002606  6EDA               	movwf	fsr2h,c
  3399  002608  0E00               	movlw	0
  3400  00260A  6EDE               	movwf	postinc2,c
  3401  00260C  0E00               	movlw	0
  3402  00260E  6EDD               	movwf	postdec2,c
  3403                           
  3404                           ; BSR set to: 0
  3405  002610  0100               	movlb	0	; () banked
  3406  002612  2B62               	incf	PatternOff@i& (0+255),f,b
  3407  002614                     l3174:
  3408                           
  3409                           ; BSR set to: 0
  3410  002614  0100               	movlb	0	; () banked
  3411  002616  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3412  002618  0100               	movlb	0	; () banked
  3413  00261A  5D62               	subwf	PatternOff@i& (0+255),w,b
  3414  00261C  A0D8               	btfss	status,0,c
  3415  00261E  D7EB               	goto	l3170
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Pattern_RGBPatterns.c: 87: }
  3419                           ;Pattern_RGBPatterns.c: 88: return PixelPattern;
  3420                           
  3421                           ; BSR set to: 0
  3422  002620  0E20               	movlw	low _PixelPattern
  3423  002622  0100               	movlb	0	; () banked
  3424  002624  6F60               	movwf	?_PatternOff& (0+255),b
  3425  002626  0E01               	movlw	high _PixelPattern
  3426  002628  0100               	movlb	0	; () banked
  3427  00262A  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3428  00262C  0012               	return	
  3429  00262E                     __end_of_PatternOff:
  3430                           	opt stack 0
  3431                           tosu	equ	0xFFF
  3432                           tosh	equ	0xFFE
  3433                           tosl	equ	0xFFD
  3434                           pclath	equ	0xFFA
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _ShowPattern *****************
  3454 ;; Defined at:
  3455 ;;		line 273 in file "Pattern_ControlService.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3469 ;;      Params:         0       0       0       0
  3470 ;;      Locals:         0       0       0       0
  3471 ;;      Temps:          0       0       0       0
  3472 ;;      Totals:         0       0       0       0
  3473 ;;Total ram usage:        0 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:   13
  3476 ;; This function calls:
  3477 ;;		_DotStar_Show
  3478 ;;		_ES_Timer_InitTimer
  3479 ;;		_UpdatePattern
  3480 ;; This function is called by:
  3481 ;;		_RunPatternControlService
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text15
  3486  0027D2                     __ptext15:
  3487                           	opt stack 0
  3488  0027D2                     _ShowPattern:
  3489                           	opt stack 15
  3490                           
  3491                           ;Pattern_ControlService.c: 275: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;incstack = 0
  3495  0027D2  C0FF  F060         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3496  0027D6  0100               	movlb	0	; () banked
  3497  0027D8  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3498  0027DA  0E00               	movlw	0
  3499  0027DC  EC43  F010         	call	_ES_Timer_InitTimer
  3500                           
  3501                           ;Pattern_ControlService.c: 277: DotStar_Show(UpdatePattern());
  3502  0027E0  EC0F  F004         	call	_UpdatePattern	;wreg free
  3503  0027E4  C080  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3504  0027E8  C081  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3505  0027EC  EC22  F00A         	call	_DotStar_Show	;wreg free
  3506                           
  3507                           ;Pattern_ControlService.c: 279: PatternConfigs[0] = 1;
  3508  0027F0  0E01               	movlw	1
  3509  0027F2  0100               	movlb	0	; () banked
  3510  0027F4  6FFB               	movwf	_PatternConfigs& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513  0027F6  0012               	return		;funcret
  3514  0027F8                     __end_of_ShowPattern:
  3515                           	opt stack 0
  3516                           tosu	equ	0xFFF
  3517                           tosh	equ	0xFFE
  3518                           tosl	equ	0xFFD
  3519                           pclath	equ	0xFFA
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           postinc0	equ	0xFEE
  3527                           wreg	equ	0xFE8
  3528                           postdec1	equ	0xFE5
  3529                           fsr1h	equ	0xFE2
  3530                           fsr1l	equ	0xFE1
  3531                           indf2	equ	0xFDF
  3532                           postinc2	equ	0xFDE
  3533                           postdec2	equ	0xFDD
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _UpdatePattern *****************
  3539 ;; Defined at:
  3540 ;;		line 92 in file "Pattern_RGBPatterns.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  i               1   39[BANK0 ] unsigned char 
  3545 ;;  i               1   38[BANK0 ] unsigned char 
  3546 ;;  i               1   37[BANK0 ] unsigned char 
  3547 ;;  i               1   36[BANK0 ] unsigned char 
  3548 ;;  i               1   35[BANK0 ] unsigned char 
  3549 ;;  patternID       1   34[BANK0 ] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  2   32[BANK0 ] PTR unsigned int 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       2       0       0
  3560 ;;      Locals:         0       6       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         0       8       0       0
  3563 ;;Total ram usage:        8 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    9
  3566 ;; This function calls:
  3567 ;;		_IdlePattern
  3568 ;;		_ListeningPattern
  3569 ;;		_SpeakingPattern
  3570 ;;		_ThinkingPattern
  3571 ;;		___awmod
  3572 ;;		___lwdiv
  3573 ;;		___wmul
  3574 ;; This function is called by:
  3575 ;;		_ShowPattern
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text16
  3580  00081E                     __ptext16:
  3581                           	opt stack 0
  3582  00081E                     _UpdatePattern:
  3583                           	opt stack 18
  3584                           
  3585                           ;Pattern_RGBPatterns.c: 94: uint8_t patternID = PatternConfigs[1];
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;incstack = 0
  3589  00081E  0100               	movlb	0	; () banked
  3590  000820  EE20 F001          	lfsr	2,1
  3591  000824  51D6               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3592  000826  26D9               	addwf	fsr2l,f,c
  3593  000828  51D7               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3594  00082A  22DA               	addwfc	fsr2h,f,c
  3595  00082C  50DF               	movf	indf2,w,c
  3596  00082E  0100               	movlb	0	; () banked
  3597  000830  6F82               	movwf	UpdatePattern@patternID& (0+255),b
  3598                           
  3599                           ;Pattern_RGBPatterns.c: 97: switch(patternID){
  3600  000832  D11C               	goto	l3150
  3601  000834                     l3098:
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;Pattern_RGBPatterns.c: 104: for(uint8_t i=0;i<Length;i++){
  3605  000834  0E00               	movlw	0
  3606  000836  0100               	movlb	0	; () banked
  3607  000838  6F83               	movwf	UpdatePattern@i& (0+255),b
  3608  00083A  D018               	goto	l3104
  3609  00083C                     l3100:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Pattern_RGBPatterns.c: 105: PixelPattern[i] = IdlePattern(1,i,PatternStepCounter);
  3613  00083C  C083  F068         	movff	UpdatePattern@i,IdlePattern@pixel
  3614  000840  C0E8  F069         	movff	_PatternStepCounter,IdlePattern@stepCount
  3615  000844  0E01               	movlw	1
  3616  000846  EC84  F008         	call	_IdlePattern
  3617  00084A  0100               	movlb	0	; () banked
  3618  00084C  5183               	movf	UpdatePattern@i& (0+255),w,b
  3619  00084E  0D02               	mullw	2
  3620  000850  0E20               	movlw	low _PixelPattern
  3621  000852  24F3               	addwf	prodl,w,c
  3622  000854  6ED9               	movwf	fsr2l,c
  3623  000856  0E01               	movlw	high _PixelPattern
  3624  000858  20F4               	addwfc	prodh,w,c
  3625  00085A  6EDA               	movwf	fsr2h,c
  3626  00085C  0100               	movlb	0	; () banked
  3627  00085E  C068  FFDE         	movff	?_IdlePattern,postinc2
  3628  000862  0100               	movlb	0	; () banked
  3629  000864  C069  FFDD         	movff	?_IdlePattern+1,postdec2
  3630                           
  3631                           ; BSR set to: 0
  3632  000868  0100               	movlb	0	; () banked
  3633  00086A  2B83               	incf	UpdatePattern@i& (0+255),f,b
  3634  00086C                     l3104:
  3635                           
  3636                           ; BSR set to: 0
  3637  00086C  0100               	movlb	0	; () banked
  3638  00086E  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3639  000870  0100               	movlb	0	; () banked
  3640  000872  5D83               	subwf	UpdatePattern@i& (0+255),w,b
  3641  000874  A0D8               	btfss	status,0,c
  3642  000876  D7E2               	goto	l3100
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;Pattern_RGBPatterns.c: 106: }
  3646                           ;Pattern_RGBPatterns.c: 107: PatternStepCounter = (PatternStepCounter+1)%Length;
  3647                           
  3648                           ; BSR set to: 0
  3649  000878  0E01               	movlw	1
  3650  00087A  0100               	movlb	0	; () banked
  3651  00087C  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3652  00087E  0100               	movlb	0	; () banked
  3653  000880  6F60               	movwf	___awmod@dividend& (0+255),b
  3654  000882  0100               	movlb	0	; () banked
  3655  000884  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3656  000886  0E00               	movlw	0
  3657  000888  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3658  00088A  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3659  00088E  0100               	movlb	0	; () banked
  3660  000890  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3661  000892  ECAE  F00F         	call	___awmod	;wreg free
  3662  000896  D0E5               	goto	L10
  3663  000898                     l3108:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;Pattern_RGBPatterns.c: 114: for(uint8_t i=0;i<Length;i++){
  3667  000898  0E00               	movlw	0
  3668  00089A  0100               	movlb	0	; () banked
  3669  00089C  6F84               	movwf	UpdatePattern@i_729& (0+255),b
  3670  00089E  D018               	goto	l3114
  3671  0008A0                     l3110:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;Pattern_RGBPatterns.c: 115: PixelPattern[i] = ThinkingPattern(1,i,PatternStepCounter);
  3675  0008A0  C084  F068         	movff	UpdatePattern@i_729,ThinkingPattern@pixel
  3676  0008A4  C0E8  F069         	movff	_PatternStepCounter,ThinkingPattern@stepCount
  3677  0008A8  0E01               	movlw	1
  3678  0008AA  EC51  F005         	call	_ThinkingPattern
  3679  0008AE  0100               	movlb	0	; () banked
  3680  0008B0  5184               	movf	UpdatePattern@i_729& (0+255),w,b
  3681  0008B2  0D02               	mullw	2
  3682  0008B4  0E20               	movlw	low _PixelPattern
  3683  0008B6  24F3               	addwf	prodl,w,c
  3684  0008B8  6ED9               	movwf	fsr2l,c
  3685  0008BA  0E01               	movlw	high _PixelPattern
  3686  0008BC  20F4               	addwfc	prodh,w,c
  3687  0008BE  6EDA               	movwf	fsr2h,c
  3688  0008C0  0100               	movlb	0	; () banked
  3689  0008C2  C068  FFDE         	movff	?_ThinkingPattern,postinc2
  3690  0008C6  0100               	movlb	0	; () banked
  3691  0008C8  C069  FFDD         	movff	?_ThinkingPattern+1,postdec2
  3692                           
  3693                           ; BSR set to: 0
  3694  0008CC  0100               	movlb	0	; () banked
  3695  0008CE  2B84               	incf	UpdatePattern@i_729& (0+255),f,b
  3696  0008D0                     l3114:
  3697                           
  3698                           ; BSR set to: 0
  3699  0008D0  0100               	movlb	0	; () banked
  3700  0008D2  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3701  0008D4  0100               	movlb	0	; () banked
  3702  0008D6  5D84               	subwf	UpdatePattern@i_729& (0+255),w,b
  3703  0008D8  A0D8               	btfss	status,0,c
  3704  0008DA  D7E2               	goto	l3110
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Pattern_RGBPatterns.c: 116: }
  3708                           ;Pattern_RGBPatterns.c: 117: PatternStepCounter = (PatternStepCounter+1)%Length;
  3709                           
  3710                           ; BSR set to: 0
  3711  0008DC  0E01               	movlw	1
  3712  0008DE  0100               	movlb	0	; () banked
  3713  0008E0  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3714  0008E2  0100               	movlb	0	; () banked
  3715  0008E4  6F60               	movwf	___awmod@dividend& (0+255),b
  3716  0008E6  0100               	movlb	0	; () banked
  3717  0008E8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3718  0008EA  0E00               	movlw	0
  3719  0008EC  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3720  0008EE  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3721  0008F2  0100               	movlb	0	; () banked
  3722  0008F4  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3723  0008F6  ECAE  F00F         	call	___awmod	;wreg free
  3724  0008FA  D0B3               	goto	L10
  3725  0008FC                     l3118:
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Pattern_RGBPatterns.c: 121: for(uint8_t i=0;i<Length;i++){
  3729  0008FC  0E00               	movlw	0
  3730  0008FE  0100               	movlb	0	; () banked
  3731  000900  6F85               	movwf	UpdatePattern@i_730& (0+255),b
  3732  000902  D018               	goto	l3124
  3733  000904                     l3120:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;Pattern_RGBPatterns.c: 122: PixelPattern[i] = SpeakingPattern(1,i,PatternStepCounter);
  3737  000904  C085  F068         	movff	UpdatePattern@i_730,SpeakingPattern@pixel
  3738  000908  C0E8  F069         	movff	_PatternStepCounter,SpeakingPattern@stepCount
  3739  00090C  0E01               	movlw	1
  3740  00090E  EC62  F006         	call	_SpeakingPattern
  3741  000912  0100               	movlb	0	; () banked
  3742  000914  5185               	movf	UpdatePattern@i_730& (0+255),w,b
  3743  000916  0D02               	mullw	2
  3744  000918  0E20               	movlw	low _PixelPattern
  3745  00091A  24F3               	addwf	prodl,w,c
  3746  00091C  6ED9               	movwf	fsr2l,c
  3747  00091E  0E01               	movlw	high _PixelPattern
  3748  000920  20F4               	addwfc	prodh,w,c
  3749  000922  6EDA               	movwf	fsr2h,c
  3750  000924  0100               	movlb	0	; () banked
  3751  000926  C068  FFDE         	movff	?_SpeakingPattern,postinc2
  3752  00092A  0100               	movlb	0	; () banked
  3753  00092C  C069  FFDD         	movff	?_SpeakingPattern+1,postdec2
  3754                           
  3755                           ; BSR set to: 0
  3756  000930  0100               	movlb	0	; () banked
  3757  000932  2B85               	incf	UpdatePattern@i_730& (0+255),f,b
  3758  000934                     l3124:
  3759                           
  3760                           ; BSR set to: 0
  3761  000934  0100               	movlb	0	; () banked
  3762  000936  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3763  000938  0100               	movlb	0	; () banked
  3764  00093A  5D85               	subwf	UpdatePattern@i_730& (0+255),w,b
  3765  00093C  A0D8               	btfss	status,0,c
  3766  00093E  D7E2               	goto	l3120
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;Pattern_RGBPatterns.c: 123: }
  3770                           ;Pattern_RGBPatterns.c: 124: PatternStepCounter = (PatternStepCounter+1)%Length;
  3771                           
  3772                           ; BSR set to: 0
  3773  000940  0E01               	movlw	1
  3774  000942  0100               	movlb	0	; () banked
  3775  000944  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3776  000946  0100               	movlb	0	; () banked
  3777  000948  6F60               	movwf	___awmod@dividend& (0+255),b
  3778  00094A  0100               	movlb	0	; () banked
  3779  00094C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3780  00094E  0E00               	movlw	0
  3781  000950  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3782  000952  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3783  000956  0100               	movlb	0	; () banked
  3784  000958  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3785  00095A  ECAE  F00F         	call	___awmod	;wreg free
  3786  00095E  D081               	goto	L10
  3787  000960                     l3128:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Pattern_RGBPatterns.c: 129: for(uint8_t i=0;i<Length;i++){
  3791  000960  0E00               	movlw	0
  3792  000962  0100               	movlb	0	; () banked
  3793  000964  6F86               	movwf	UpdatePattern@i_731& (0+255),b
  3794  000966  D018               	goto	l3134
  3795  000968                     l3130:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Pattern_RGBPatterns.c: 130: PixelPattern[i] = ListeningPattern(1,i,PatternStepCounter);
  3799  000968  C086  F068         	movff	UpdatePattern@i_731,ListeningPattern@pixel
  3800  00096C  C0E8  F069         	movff	_PatternStepCounter,ListeningPattern@stepCount
  3801  000970  0E01               	movlw	1
  3802  000972  EC73  F007         	call	_ListeningPattern
  3803  000976  0100               	movlb	0	; () banked
  3804  000978  5186               	movf	UpdatePattern@i_731& (0+255),w,b
  3805  00097A  0D02               	mullw	2
  3806  00097C  0E20               	movlw	low _PixelPattern
  3807  00097E  24F3               	addwf	prodl,w,c
  3808  000980  6ED9               	movwf	fsr2l,c
  3809  000982  0E01               	movlw	high _PixelPattern
  3810  000984  20F4               	addwfc	prodh,w,c
  3811  000986  6EDA               	movwf	fsr2h,c
  3812  000988  0100               	movlb	0	; () banked
  3813  00098A  C068  FFDE         	movff	?_ListeningPattern,postinc2
  3814  00098E  0100               	movlb	0	; () banked
  3815  000990  C069  FFDD         	movff	?_ListeningPattern+1,postdec2
  3816                           
  3817                           ; BSR set to: 0
  3818  000994  0100               	movlb	0	; () banked
  3819  000996  2B86               	incf	UpdatePattern@i_731& (0+255),f,b
  3820  000998                     l3134:
  3821                           
  3822                           ; BSR set to: 0
  3823  000998  0100               	movlb	0	; () banked
  3824  00099A  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3825  00099C  0100               	movlb	0	; () banked
  3826  00099E  5D86               	subwf	UpdatePattern@i_731& (0+255),w,b
  3827  0009A0  A0D8               	btfss	status,0,c
  3828  0009A2  D7E2               	goto	l3130
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Pattern_RGBPatterns.c: 131: }
  3832                           ;Pattern_RGBPatterns.c: 132: PatternStepCounter = (PatternStepCounter+1)%Length;
  3833                           
  3834                           ; BSR set to: 0
  3835  0009A4  0E01               	movlw	1
  3836  0009A6  0100               	movlb	0	; () banked
  3837  0009A8  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3838  0009AA  0100               	movlb	0	; () banked
  3839  0009AC  6F60               	movwf	___awmod@dividend& (0+255),b
  3840  0009AE  0100               	movlb	0	; () banked
  3841  0009B0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3842  0009B2  0E00               	movlw	0
  3843  0009B4  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3844  0009B6  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3845  0009BA  0100               	movlb	0	; () banked
  3846  0009BC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3847  0009BE  ECAE  F00F         	call	___awmod	;wreg free
  3848  0009C2  D04F               	goto	L10
  3849  0009C4                     l3138:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Pattern_RGBPatterns.c: 137: {
  3853                           ;Pattern_RGBPatterns.c: 179: for(uint8_t i=0;i<Length;i++){
  3854  0009C4  0E00               	movlw	0
  3855  0009C6  0100               	movlb	0	; () banked
  3856  0009C8  6F87               	movwf	UpdatePattern@i_732& (0+255),b
  3857  0009CA  D036               	goto	l3144
  3858  0009CC                     l3140:
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;Pattern_RGBPatterns.c: 180: PixelPattern[i] = (((uint16_t)(i+PatternStepCounter)*255/Le
      +                          ngth)<<8) | (0x0F<<4) | 0x0F;
  3862  0009CC  0100               	movlb	0	; () banked
  3863  0009CE  5187               	movf	UpdatePattern@i_732& (0+255),w,b
  3864  0009D0  0100               	movlb	0	; () banked
  3865  0009D2  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3866  0009D4  0100               	movlb	0	; () banked
  3867  0009D6  6F66               	movwf	___wmul@multiplier& (0+255),b
  3868  0009D8  0100               	movlb	0	; () banked
  3869  0009DA  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  3870  0009DC  0100               	movlb	0	; () banked
  3871  0009DE  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  3872  0009E0  0E00               	movlw	0
  3873  0009E2  0100               	movlb	0	; () banked
  3874  0009E4  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3875  0009E6  6968               	setf	___wmul@multiplicand& (0+255),b
  3876  0009E8  EC6F  F013         	call	___wmul	;wreg free
  3877  0009EC  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  3878  0009F0  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  3879  0009F4  C0E0  F06E         	movff	Pattern_RGBPatterns@Length,___lwdiv@divisor
  3880  0009F8  0100               	movlb	0	; () banked
  3881  0009FA  6B6F               	clrf	(___lwdiv@divisor+1)& (0+255),b
  3882  0009FC  ECFD  F010         	call	___lwdiv	;wreg free
  3883  000A00  0100               	movlb	0	; () banked
  3884  000A02  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  3885  000A06  0100               	movlb	0	; () banked
  3886  000A08  6B6C               	clrf	?___lwdiv& (0+255),b
  3887  000A0A  0EFF               	movlw	255
  3888  000A0C  0100               	movlb	0	; () banked
  3889  000A0E  136C               	iorwf	?___lwdiv& (0+255),f,b
  3890  000A10  0E00               	movlw	0
  3891  000A12  0100               	movlb	0	; () banked
  3892  000A14  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  3893  000A16  0100               	movlb	0	; () banked
  3894  000A18  5187               	movf	UpdatePattern@i_732& (0+255),w,b
  3895  000A1A  0D02               	mullw	2
  3896  000A1C  0E20               	movlw	low _PixelPattern
  3897  000A1E  24F3               	addwf	prodl,w,c
  3898  000A20  6ED9               	movwf	fsr2l,c
  3899  000A22  0E01               	movlw	high _PixelPattern
  3900  000A24  20F4               	addwfc	prodh,w,c
  3901  000A26  6EDA               	movwf	fsr2h,c
  3902  000A28  0100               	movlb	0	; () banked
  3903  000A2A  C06C  FFDE         	movff	?___lwdiv,postinc2
  3904  000A2E  0100               	movlb	0	; () banked
  3905  000A30  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  3906                           
  3907                           ; BSR set to: 0
  3908  000A34  0100               	movlb	0	; () banked
  3909  000A36  2B87               	incf	UpdatePattern@i_732& (0+255),f,b
  3910  000A38                     l3144:
  3911                           
  3912                           ; BSR set to: 0
  3913  000A38  0100               	movlb	0	; () banked
  3914  000A3A  51E0               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3915  000A3C  0100               	movlb	0	; () banked
  3916  000A3E  5D87               	subwf	UpdatePattern@i_732& (0+255),w,b
  3917  000A40  A0D8               	btfss	status,0,c
  3918  000A42  D7C4               	goto	l3140
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;Pattern_RGBPatterns.c: 181: }
  3922                           ;Pattern_RGBPatterns.c: 182: PatternStepCounter = (PatternStepCounter+1)%Length;
  3923                           
  3924                           ; BSR set to: 0
  3925  000A44  0E01               	movlw	1
  3926  000A46  0100               	movlb	0	; () banked
  3927  000A48  25E8               	addwf	_PatternStepCounter& (0+255),w,b
  3928  000A4A  0100               	movlb	0	; () banked
  3929  000A4C  6F60               	movwf	___awmod@dividend& (0+255),b
  3930  000A4E  0100               	movlb	0	; () banked
  3931  000A50  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3932  000A52  0E00               	movlw	0
  3933  000A54  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3934  000A56  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3935  000A5A  0100               	movlb	0	; () banked
  3936  000A5C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3937  000A5E  ECAE  F00F         	call	___awmod	;wreg free
  3938  000A62                     L10:
  3939  000A62  0100               	movlb	0	; () banked
  3940  000A64  5160               	movf	?___awmod& (0+255),w,b
  3941  000A66  0100               	movlb	0	; () banked
  3942  000A68  6FE8               	movwf	_PatternStepCounter& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;Pattern_RGBPatterns.c: 187: }
  3946                           
  3947                           ;Pattern_RGBPatterns.c: 184: }
  3948                           ;Pattern_RGBPatterns.c: 185: break;
  3949  000A6A  D014               	goto	l3152
  3950  000A6C                     l3150:
  3951                           
  3952                           ; BSR set to: 0
  3953  000A6C  0100               	movlb	0	; () banked
  3954  000A6E  5182               	movf	UpdatePattern@patternID& (0+255),w,b
  3955                           
  3956                           ; Switch size 1, requested type "space"
  3957                           ; Number of cases is 6, Range of values is 0 to 255
  3958                           ; switch strategies available:
  3959                           ; Name         Instructions Cycles
  3960                           ; simple_byte           19    10 (average)
  3961                           ;	Chosen strategy is simple_byte
  3962  000A70  0A00               	xorlw	0	; case 0
  3963  000A72  B4D8               	btfsc	status,2,c
  3964  000A74  D00F               	goto	l3152
  3965  000A76  0A01               	xorlw	1	; case 1
  3966  000A78  B4D8               	btfsc	status,2,c
  3967  000A7A  D6DC               	goto	l3098
  3968  000A7C  0A03               	xorlw	3	; case 2
  3969  000A7E  B4D8               	btfsc	status,2,c
  3970  000A80  D70B               	goto	l3108
  3971  000A82  0A01               	xorlw	1	; case 3
  3972  000A84  B4D8               	btfsc	status,2,c
  3973  000A86  D73A               	goto	l3118
  3974  000A88  0A07               	xorlw	7	; case 4
  3975  000A8A  B4D8               	btfsc	status,2,c
  3976  000A8C  D769               	goto	l3128
  3977  000A8E  0AFB               	xorlw	251	; case 255
  3978  000A90  B4D8               	btfsc	status,2,c
  3979  000A92  D798               	goto	l3138
  3980  000A94                     l3152:
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;Pattern_RGBPatterns.c: 189: return PixelPattern;
  3984  000A94  0E20               	movlw	low _PixelPattern
  3985  000A96  0100               	movlb	0	; () banked
  3986  000A98  6F80               	movwf	?_UpdatePattern& (0+255),b
  3987  000A9A  0E01               	movlw	high _PixelPattern
  3988  000A9C  0100               	movlb	0	; () banked
  3989  000A9E  6F81               	movwf	(?_UpdatePattern+1)& (0+255),b
  3990  000AA0  0012               	return	
  3991  000AA2                     __end_of_UpdatePattern:
  3992                           	opt stack 0
  3993                           tosu	equ	0xFFF
  3994                           tosh	equ	0xFFE
  3995                           tosl	equ	0xFFD
  3996                           pclath	equ	0xFFA
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _ThinkingPattern *****************
  4016 ;; Defined at:
  4017 ;;		line 197 in file "Pattern_RGBPatterns.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  pattern         1    wreg     unsigned char 
  4020 ;;  pixel           1    8[BANK0 ] unsigned char 
  4021 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  pattern         1    0[COMRAM] unsigned char 
  4024 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4025 ;;  head            1   31[BANK0 ] unsigned char 
  4026 ;;  x               1   30[BANK0 ] unsigned char 
  4027 ;;  hue             1   29[BANK0 ] unsigned char 
  4028 ;;  val             1   28[BANK0 ] unsigned char 
  4029 ;;  sat             1   27[BANK0 ] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  2    8[BANK0 ] unsigned int 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4039 ;;      Params:         0       2       0       0
  4040 ;;      Locals:         0      11       0       0
  4041 ;;      Temps:          0      11       0       0
  4042 ;;      Totals:         0      24       0       0
  4043 ;;Total ram usage:       24 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    8
  4046 ;; This function calls:
  4047 ;;		___awdiv
  4048 ;;		___awmod
  4049 ;; This function is called by:
  4050 ;;		_UpdatePattern
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text17
  4055  000AA2                     __ptext17:
  4056                           	opt stack 0
  4057  000AA2                     _ThinkingPattern:
  4058                           	opt stack 18
  4059                           
  4060                           ;Pattern_RGBPatterns.c: 198: uint8_t head = stepCount;
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;incstack = 0
  4064  000AA2  C069  F07F         	movff	ThinkingPattern@stepCount,ThinkingPattern@head
  4065                           
  4066                           ;Pattern_RGBPatterns.c: 204: hue = 32;
  4067                           
  4068                           ;Pattern_RGBPatterns.c: 203: default:
  4069                           
  4070                           ;Pattern_RGBPatterns.c: 199: uint16_t pixelHSV;
  4071                           ;Pattern_RGBPatterns.c: 200: uint8_t sat, val, hue, x;
  4072                           ;Pattern_RGBPatterns.c: 202: switch(pattern){
  4073  000AA6  0E20               	movlw	32
  4074  000AA8  0100               	movlb	0	; () banked
  4075  000AAA  6F7D               	movwf	ThinkingPattern@hue& (0+255),b
  4076                           
  4077                           ;Pattern_RGBPatterns.c: 205: sat = 0x0F;
  4078  000AAC  0E0F               	movlw	15
  4079  000AAE  0100               	movlb	0	; () banked
  4080  000AB0  6F7B               	movwf	ThinkingPattern@sat& (0+255),b
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;Pattern_RGBPatterns.c: 207: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4084  000AB2  0100               	movlb	0	; () banked
  4085  000AB4  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4086  000AB6  0100               	movlb	0	; () banked
  4087  000AB8  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4088  000ABA  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4089  000ABC  0100               	movlb	0	; () banked
  4090  000ABE  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4091  000AC0  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4092  000AC2  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4093  000AC4  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4094  000AC6  0100               	movlb	0	; () banked
  4095  000AC8  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4096  000ACA  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4097  000ACE  0100               	movlb	0	; () banked
  4098  000AD0  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4099  000AD2  0100               	movlb	0	; () banked
  4100  000AD4  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4101  000AD6  0E00               	movlw	0
  4102  000AD8  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4103  000ADA  0100               	movlb	0	; () banked
  4104  000ADC  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4105  000ADE  0100               	movlb	0	; () banked
  4106  000AE0  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4107  000AE2  0100               	movlb	0	; () banked
  4108  000AE4  6F60               	movwf	___awmod@dividend& (0+255),b
  4109  000AE6  0100               	movlb	0	; () banked
  4110  000AE8  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4111  000AEA  0100               	movlb	0	; () banked
  4112  000AEC  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4113  000AEE  0100               	movlb	0	; () banked
  4114  000AF0  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4115  000AF2  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4116  000AF6  0100               	movlb	0	; () banked
  4117  000AF8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4118  000AFA  ECAE  F00F         	call	___awmod	;wreg free
  4119  000AFE  C060  F06E         	movff	?___awmod,??_ThinkingPattern+4
  4120  000B02  C061  F06F         	movff	?___awmod+1,??_ThinkingPattern+5
  4121  000B06  0100               	movlb	0	; () banked
  4122  000B08  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4123  000B0A  0100               	movlb	0	; () banked
  4124  000B0C  6F70               	movwf	(??_ThinkingPattern+6)& (0+255),b
  4125  000B0E  6B71               	clrf	(??_ThinkingPattern+7)& (0+255),b
  4126  000B10  0100               	movlb	0	; () banked
  4127  000B12  1F70               	comf	(??_ThinkingPattern+6)& (0+255),f,b
  4128  000B14  1F71               	comf	(??_ThinkingPattern+7)& (0+255),f,b
  4129  000B16  4B70               	infsnz	(??_ThinkingPattern+6)& (0+255),f,b
  4130  000B18  2B71               	incf	(??_ThinkingPattern+7)& (0+255),f,b
  4131  000B1A  0100               	movlb	0	; () banked
  4132  000B1C  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4133  000B1E  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+8
  4134  000B22  0100               	movlb	0	; () banked
  4135  000B24  6B73               	clrf	(??_ThinkingPattern+9)& (0+255),b
  4136  000B26  0100               	movlb	0	; () banked
  4137  000B28  2772               	addwf	(??_ThinkingPattern+8)& (0+255),f,b
  4138  000B2A  0E00               	movlw	0
  4139  000B2C  2373               	addwfc	(??_ThinkingPattern+9)& (0+255),f,b
  4140  000B2E  0100               	movlb	0	; () banked
  4141  000B30  5170               	movf	(??_ThinkingPattern+6)& (0+255),w,b
  4142  000B32  0100               	movlb	0	; () banked
  4143  000B34  2572               	addwf	(??_ThinkingPattern+8)& (0+255),w,b
  4144  000B36  0100               	movlb	0	; () banked
  4145  000B38  6F60               	movwf	___awmod@dividend& (0+255),b
  4146  000B3A  0100               	movlb	0	; () banked
  4147  000B3C  5171               	movf	(??_ThinkingPattern+7)& (0+255),w,b
  4148  000B3E  0100               	movlb	0	; () banked
  4149  000B40  2173               	addwfc	(??_ThinkingPattern+9)& (0+255),w,b
  4150  000B42  0100               	movlb	0	; () banked
  4151  000B44  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4152  000B46  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4153  000B4A  0100               	movlb	0	; () banked
  4154  000B4C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4155  000B4E  ECAE  F00F         	call	___awmod	;wreg free
  4156  000B52  0100               	movlb	0	; () banked
  4157  000B54  5160               	movf	?___awmod& (0+255),w,b
  4158  000B56  0100               	movlb	0	; () banked
  4159  000B58  5D6E               	subwf	(??_ThinkingPattern+4)& (0+255),w,b
  4160  000B5A  0100               	movlb	0	; () banked
  4161  000B5C  516F               	movf	(??_ThinkingPattern+5)& (0+255),w,b
  4162  000B5E  0A80               	xorlw	128
  4163  000B60  0100               	movlb	0	; () banked
  4164  000B62  6F74               	movwf	(??_ThinkingPattern+10)& (0+255),b
  4165  000B64  0100               	movlb	0	; () banked
  4166  000B66  5161               	movf	(?___awmod+1)& (0+255),w,b
  4167  000B68  0A80               	xorlw	128
  4168  000B6A  0100               	movlb	0	; () banked
  4169  000B6C  5974               	subwfb	(??_ThinkingPattern+10)& (0+255),w,b
  4170  000B6E  A0D8               	btfss	status,0,c
  4171  000B70  D027               	goto	l2956
  4172                           
  4173                           ; BSR set to: 0
  4174  000B72  0100               	movlb	0	; () banked
  4175  000B74  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4176  000B76  0100               	movlb	0	; () banked
  4177  000B78  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4178  000B7A  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4179  000B7C  0100               	movlb	0	; () banked
  4180  000B7E  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4181  000B80  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4182  000B82  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4183  000B84  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4184  000B86  0100               	movlb	0	; () banked
  4185  000B88  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4186  000B8A  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4187  000B8E  0100               	movlb	0	; () banked
  4188  000B90  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4189  000B92  0100               	movlb	0	; () banked
  4190  000B94  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4191  000B96  0E00               	movlw	0
  4192  000B98  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4193  000B9A  0100               	movlb	0	; () banked
  4194  000B9C  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4195  000B9E  0100               	movlb	0	; () banked
  4196  000BA0  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4197  000BA2  0100               	movlb	0	; () banked
  4198  000BA4  6F60               	movwf	___awmod@dividend& (0+255),b
  4199  000BA6  0100               	movlb	0	; () banked
  4200  000BA8  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4201  000BAA  0100               	movlb	0	; () banked
  4202  000BAC  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4203  000BAE  0100               	movlb	0	; () banked
  4204  000BB0  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4205  000BB2  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4206  000BB6  0100               	movlb	0	; () banked
  4207  000BB8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4208  000BBA  ECAE  F00F         	call	___awmod	;wreg free
  4209  000BBE  D026               	goto	L11
  4210  000BC0                     l2956:
  4211  000BC0  0100               	movlb	0	; () banked
  4212  000BC2  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4213  000BC4  0100               	movlb	0	; () banked
  4214  000BC6  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4215  000BC8  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4216  000BCA  0100               	movlb	0	; () banked
  4217  000BCC  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4218  000BCE  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4219  000BD0  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4220  000BD2  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4221  000BD4  0100               	movlb	0	; () banked
  4222  000BD6  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4223  000BD8  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4224  000BDC  0100               	movlb	0	; () banked
  4225  000BDE  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4226  000BE0  0100               	movlb	0	; () banked
  4227  000BE2  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4228  000BE4  0E00               	movlw	0
  4229  000BE6  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4230  000BE8  0100               	movlb	0	; () banked
  4231  000BEA  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4232  000BEC  0100               	movlb	0	; () banked
  4233  000BEE  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4234  000BF0  0100               	movlb	0	; () banked
  4235  000BF2  6F60               	movwf	___awmod@dividend& (0+255),b
  4236  000BF4  0100               	movlb	0	; () banked
  4237  000BF6  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4238  000BF8  0100               	movlb	0	; () banked
  4239  000BFA  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4240  000BFC  0100               	movlb	0	; () banked
  4241  000BFE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4242  000C00  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4243  000C04  0100               	movlb	0	; () banked
  4244  000C06  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4245  000C08  ECAE  F00F         	call	___awmod	;wreg free
  4246  000C0C                     L11:
  4247  000C0C  C060  F077         	movff	?___awmod,_ThinkingPattern$744
  4248  000C10  C061  F078         	movff	?___awmod+1,_ThinkingPattern$744+1
  4249  000C14  C077  F07E         	movff	_ThinkingPattern$744,ThinkingPattern@x
  4250                           
  4251                           ;Pattern_RGBPatterns.c: 208: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4252  000C18  0E04               	movlw	4
  4253  000C1A  0100               	movlb	0	; () banked
  4254  000C1C  657E               	cpfsgt	ThinkingPattern@x& (0+255),b
  4255  000C1E  D006               	goto	l2964
  4256                           
  4257                           ; BSR set to: 0
  4258  000C20  0E00               	movlw	0
  4259  000C22  0100               	movlb	0	; () banked
  4260  000C24  6F7A               	movwf	(_ThinkingPattern$745+1)& (0+255),b
  4261  000C26  0E00               	movlw	0
  4262  000C28  6F79               	movwf	_ThinkingPattern$745& (0+255),b
  4263  000C2A  D01F               	goto	l2966
  4264  000C2C                     l2964:
  4265                           
  4266                           ; BSR set to: 0
  4267  000C2C  0100               	movlb	0	; () banked
  4268  000C2E  517E               	movf	ThinkingPattern@x& (0+255),w,b
  4269  000C30  0D0F               	mullw	15
  4270  000C32  CFF3 F060          	movff	prodl,___awdiv@dividend
  4271  000C36  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4272  000C3A  0E00               	movlw	0
  4273  000C3C  0100               	movlb	0	; () banked
  4274  000C3E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4275  000C40  0E05               	movlw	5
  4276  000C42  6F62               	movwf	___awdiv@divisor& (0+255),b
  4277  000C44  ECEF  F00D         	call	___awdiv	;wreg free
  4278  000C48  0100               	movlb	0	; () banked
  4279  000C4A  1F60               	comf	?___awdiv& (0+255),f,b
  4280  000C4C  0100               	movlb	0	; () banked
  4281  000C4E  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4282  000C50  0100               	movlb	0	; () banked
  4283  000C52  4B60               	infsnz	?___awdiv& (0+255),f,b
  4284  000C54  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4285  000C56  0E0F               	movlw	15
  4286  000C58  0100               	movlb	0	; () banked
  4287  000C5A  2560               	addwf	?___awdiv& (0+255),w,b
  4288  000C5C  0100               	movlb	0	; () banked
  4289  000C5E  6F79               	movwf	_ThinkingPattern$745& (0+255),b
  4290  000C60  0E00               	movlw	0
  4291  000C62  0100               	movlb	0	; () banked
  4292  000C64  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4293  000C66  0100               	movlb	0	; () banked
  4294  000C68  6F7A               	movwf	(_ThinkingPattern$745+1)& (0+255),b
  4295  000C6A                     l2966:
  4296                           
  4297                           ; BSR set to: 0
  4298  000C6A  C079  F07C         	movff	_ThinkingPattern$745,ThinkingPattern@val
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;Pattern_RGBPatterns.c: 212: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4302                           
  4303                           ; BSR set to: 0
  4304                           
  4305                           ; BSR set to: 0
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;Pattern_RGBPatterns.c: 210: }
  4309                           
  4310                           ;Pattern_RGBPatterns.c: 209: break;
  4311  000C6E  0100               	movlb	0	; () banked
  4312  000C70  517B               	movf	ThinkingPattern@sat& (0+255),w,b
  4313  000C72  0100               	movlb	0	; () banked
  4314  000C74  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4315  000C76  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4316  000C78  0100               	movlb	0	; () banked
  4317  000C7A  3B6A               	swapf	??_ThinkingPattern& (0+255),f,b
  4318  000C7C  3B6B               	swapf	(??_ThinkingPattern+1)& (0+255),f,b
  4319  000C7E  0EF0               	movlw	240
  4320  000C80  176B               	andwf	(??_ThinkingPattern+1)& (0+255),f,b
  4321  000C82  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4322  000C84  0B0F               	andlw	15
  4323  000C86  136B               	iorwf	(??_ThinkingPattern+1)& (0+255),f,b
  4324  000C88  0EF0               	movlw	240
  4325  000C8A  176A               	andwf	??_ThinkingPattern& (0+255),f,b
  4326  000C8C  0100               	movlb	0	; () banked
  4327  000C8E  517D               	movf	ThinkingPattern@hue& (0+255),w,b
  4328  000C90  0100               	movlb	0	; () banked
  4329  000C92  6F6D               	movwf	(??_ThinkingPattern+3)& (0+255),b
  4330  000C94  6B6C               	clrf	(??_ThinkingPattern+2)& (0+255),b
  4331  000C96  0100               	movlb	0	; () banked
  4332  000C98  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4333  000C9A  0100               	movlb	0	; () banked
  4334  000C9C  136C               	iorwf	(??_ThinkingPattern+2)& (0+255),f,b
  4335  000C9E  0100               	movlb	0	; () banked
  4336  000CA0  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4337  000CA2  0100               	movlb	0	; () banked
  4338  000CA4  136D               	iorwf	(??_ThinkingPattern+3)& (0+255),f,b
  4339  000CA6  0100               	movlb	0	; () banked
  4340  000CA8  517C               	movf	ThinkingPattern@val& (0+255),w,b
  4341  000CAA  0100               	movlb	0	; () banked
  4342  000CAC  116C               	iorwf	(??_ThinkingPattern+2)& (0+255),w,b
  4343  000CAE  0100               	movlb	0	; () banked
  4344  000CB0  6F75               	movwf	ThinkingPattern@pixelHSV& (0+255),b
  4345  000CB2  0100               	movlb	0	; () banked
  4346  000CB4  516D               	movf	(??_ThinkingPattern+3)& (0+255),w,b
  4347  000CB6  0100               	movlb	0	; () banked
  4348  000CB8  6F76               	movwf	(ThinkingPattern@pixelHSV+1)& (0+255),b
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;Pattern_RGBPatterns.c: 214: return pixelHSV;
  4352  000CBA  C075  F068         	movff	ThinkingPattern@pixelHSV,?_ThinkingPattern
  4353  000CBE  C076  F069         	movff	ThinkingPattern@pixelHSV+1,?_ThinkingPattern+1
  4354  000CC2  0012               	return	
  4355  000CC4                     __end_of_ThinkingPattern:
  4356                           	opt stack 0
  4357                           tosu	equ	0xFFF
  4358                           tosh	equ	0xFFE
  4359                           tosl	equ	0xFFD
  4360                           pclath	equ	0xFFA
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           postinc0	equ	0xFEE
  4368                           wreg	equ	0xFE8
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _SpeakingPattern *****************
  4380 ;; Defined at:
  4381 ;;		line 237 in file "Pattern_RGBPatterns.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  pattern         1    wreg     unsigned char 
  4384 ;;  pixel           1    8[BANK0 ] unsigned char 
  4385 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  pattern         1    0[COMRAM] unsigned char 
  4388 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4389 ;;  head            1   31[BANK0 ] unsigned char 
  4390 ;;  x               1   30[BANK0 ] unsigned char 
  4391 ;;  hue             1   29[BANK0 ] unsigned char 
  4392 ;;  val             1   28[BANK0 ] unsigned char 
  4393 ;;  sat             1   27[BANK0 ] unsigned char 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  2    8[BANK0 ] unsigned int 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4403 ;;      Params:         0       2       0       0
  4404 ;;      Locals:         0      11       0       0
  4405 ;;      Temps:          0      11       0       0
  4406 ;;      Totals:         0      24       0       0
  4407 ;;Total ram usage:       24 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    8
  4410 ;; This function calls:
  4411 ;;		___awdiv
  4412 ;;		___awmod
  4413 ;; This function is called by:
  4414 ;;		_UpdatePattern
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text18
  4419  000CC4                     __ptext18:
  4420                           	opt stack 0
  4421  000CC4                     _SpeakingPattern:
  4422                           	opt stack 18
  4423                           
  4424                           ;Pattern_RGBPatterns.c: 238: uint8_t head = stepCount;
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;incstack = 0
  4428  000CC4  C069  F07F         	movff	SpeakingPattern@stepCount,SpeakingPattern@head
  4429                           
  4430                           ;Pattern_RGBPatterns.c: 244: hue = 170;
  4431                           
  4432                           ;Pattern_RGBPatterns.c: 243: default:
  4433                           
  4434                           ;Pattern_RGBPatterns.c: 239: uint16_t pixelHSV;
  4435                           ;Pattern_RGBPatterns.c: 240: uint8_t sat, val, hue, x;
  4436                           ;Pattern_RGBPatterns.c: 242: switch(pattern){
  4437  000CC8  0EAA               	movlw	170
  4438  000CCA  0100               	movlb	0	; () banked
  4439  000CCC  6F7D               	movwf	SpeakingPattern@hue& (0+255),b
  4440                           
  4441                           ;Pattern_RGBPatterns.c: 245: sat = 0x0F;
  4442  000CCE  0E0F               	movlw	15
  4443  000CD0  0100               	movlb	0	; () banked
  4444  000CD2  6F7B               	movwf	SpeakingPattern@sat& (0+255),b
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;Pattern_RGBPatterns.c: 247: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4448  000CD4  0100               	movlb	0	; () banked
  4449  000CD6  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4450  000CD8  0100               	movlb	0	; () banked
  4451  000CDA  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4452  000CDC  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4453  000CDE  0100               	movlb	0	; () banked
  4454  000CE0  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4455  000CE2  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4456  000CE4  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4457  000CE6  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4458  000CE8  0100               	movlb	0	; () banked
  4459  000CEA  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4460  000CEC  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4461  000CF0  0100               	movlb	0	; () banked
  4462  000CF2  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4463  000CF4  0100               	movlb	0	; () banked
  4464  000CF6  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4465  000CF8  0E00               	movlw	0
  4466  000CFA  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4467  000CFC  0100               	movlb	0	; () banked
  4468  000CFE  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4469  000D00  0100               	movlb	0	; () banked
  4470  000D02  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4471  000D04  0100               	movlb	0	; () banked
  4472  000D06  6F60               	movwf	___awmod@dividend& (0+255),b
  4473  000D08  0100               	movlb	0	; () banked
  4474  000D0A  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4475  000D0C  0100               	movlb	0	; () banked
  4476  000D0E  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4477  000D10  0100               	movlb	0	; () banked
  4478  000D12  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4479  000D14  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4480  000D18  0100               	movlb	0	; () banked
  4481  000D1A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4482  000D1C  ECAE  F00F         	call	___awmod	;wreg free
  4483  000D20  C060  F06E         	movff	?___awmod,??_SpeakingPattern+4
  4484  000D24  C061  F06F         	movff	?___awmod+1,??_SpeakingPattern+5
  4485  000D28  0100               	movlb	0	; () banked
  4486  000D2A  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4487  000D2C  0100               	movlb	0	; () banked
  4488  000D2E  6F70               	movwf	(??_SpeakingPattern+6)& (0+255),b
  4489  000D30  6B71               	clrf	(??_SpeakingPattern+7)& (0+255),b
  4490  000D32  0100               	movlb	0	; () banked
  4491  000D34  1F70               	comf	(??_SpeakingPattern+6)& (0+255),f,b
  4492  000D36  1F71               	comf	(??_SpeakingPattern+7)& (0+255),f,b
  4493  000D38  4B70               	infsnz	(??_SpeakingPattern+6)& (0+255),f,b
  4494  000D3A  2B71               	incf	(??_SpeakingPattern+7)& (0+255),f,b
  4495  000D3C  0100               	movlb	0	; () banked
  4496  000D3E  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4497  000D40  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+8
  4498  000D44  0100               	movlb	0	; () banked
  4499  000D46  6B73               	clrf	(??_SpeakingPattern+9)& (0+255),b
  4500  000D48  0100               	movlb	0	; () banked
  4501  000D4A  2772               	addwf	(??_SpeakingPattern+8)& (0+255),f,b
  4502  000D4C  0E00               	movlw	0
  4503  000D4E  2373               	addwfc	(??_SpeakingPattern+9)& (0+255),f,b
  4504  000D50  0100               	movlb	0	; () banked
  4505  000D52  5170               	movf	(??_SpeakingPattern+6)& (0+255),w,b
  4506  000D54  0100               	movlb	0	; () banked
  4507  000D56  2572               	addwf	(??_SpeakingPattern+8)& (0+255),w,b
  4508  000D58  0100               	movlb	0	; () banked
  4509  000D5A  6F60               	movwf	___awmod@dividend& (0+255),b
  4510  000D5C  0100               	movlb	0	; () banked
  4511  000D5E  5171               	movf	(??_SpeakingPattern+7)& (0+255),w,b
  4512  000D60  0100               	movlb	0	; () banked
  4513  000D62  2173               	addwfc	(??_SpeakingPattern+9)& (0+255),w,b
  4514  000D64  0100               	movlb	0	; () banked
  4515  000D66  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4516  000D68  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4517  000D6C  0100               	movlb	0	; () banked
  4518  000D6E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4519  000D70  ECAE  F00F         	call	___awmod	;wreg free
  4520  000D74  0100               	movlb	0	; () banked
  4521  000D76  5160               	movf	?___awmod& (0+255),w,b
  4522  000D78  0100               	movlb	0	; () banked
  4523  000D7A  5D6E               	subwf	(??_SpeakingPattern+4)& (0+255),w,b
  4524  000D7C  0100               	movlb	0	; () banked
  4525  000D7E  516F               	movf	(??_SpeakingPattern+5)& (0+255),w,b
  4526  000D80  0A80               	xorlw	128
  4527  000D82  0100               	movlb	0	; () banked
  4528  000D84  6F74               	movwf	(??_SpeakingPattern+10)& (0+255),b
  4529  000D86  0100               	movlb	0	; () banked
  4530  000D88  5161               	movf	(?___awmod+1)& (0+255),w,b
  4531  000D8A  0A80               	xorlw	128
  4532  000D8C  0100               	movlb	0	; () banked
  4533  000D8E  5974               	subwfb	(??_SpeakingPattern+10)& (0+255),w,b
  4534  000D90  A0D8               	btfss	status,0,c
  4535  000D92  D027               	goto	l2984
  4536                           
  4537                           ; BSR set to: 0
  4538  000D94  0100               	movlb	0	; () banked
  4539  000D96  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4540  000D98  0100               	movlb	0	; () banked
  4541  000D9A  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4542  000D9C  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4543  000D9E  0100               	movlb	0	; () banked
  4544  000DA0  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4545  000DA2  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4546  000DA4  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4547  000DA6  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4548  000DA8  0100               	movlb	0	; () banked
  4549  000DAA  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4550  000DAC  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4551  000DB0  0100               	movlb	0	; () banked
  4552  000DB2  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4553  000DB4  0100               	movlb	0	; () banked
  4554  000DB6  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4555  000DB8  0E00               	movlw	0
  4556  000DBA  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4557  000DBC  0100               	movlb	0	; () banked
  4558  000DBE  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4559  000DC0  0100               	movlb	0	; () banked
  4560  000DC2  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4561  000DC4  0100               	movlb	0	; () banked
  4562  000DC6  6F60               	movwf	___awmod@dividend& (0+255),b
  4563  000DC8  0100               	movlb	0	; () banked
  4564  000DCA  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4565  000DCC  0100               	movlb	0	; () banked
  4566  000DCE  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4567  000DD0  0100               	movlb	0	; () banked
  4568  000DD2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4569  000DD4  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4570  000DD8  0100               	movlb	0	; () banked
  4571  000DDA  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4572  000DDC  ECAE  F00F         	call	___awmod	;wreg free
  4573  000DE0  D026               	goto	L12
  4574  000DE2                     l2984:
  4575  000DE2  0100               	movlb	0	; () banked
  4576  000DE4  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4577  000DE6  0100               	movlb	0	; () banked
  4578  000DE8  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4579  000DEA  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4580  000DEC  0100               	movlb	0	; () banked
  4581  000DEE  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4582  000DF0  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4583  000DF2  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4584  000DF4  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4585  000DF6  0100               	movlb	0	; () banked
  4586  000DF8  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4587  000DFA  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4588  000DFE  0100               	movlb	0	; () banked
  4589  000E00  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4590  000E02  0100               	movlb	0	; () banked
  4591  000E04  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4592  000E06  0E00               	movlw	0
  4593  000E08  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4594  000E0A  0100               	movlb	0	; () banked
  4595  000E0C  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4596  000E0E  0100               	movlb	0	; () banked
  4597  000E10  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4598  000E12  0100               	movlb	0	; () banked
  4599  000E14  6F60               	movwf	___awmod@dividend& (0+255),b
  4600  000E16  0100               	movlb	0	; () banked
  4601  000E18  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4602  000E1A  0100               	movlb	0	; () banked
  4603  000E1C  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4604  000E1E  0100               	movlb	0	; () banked
  4605  000E20  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4606  000E22  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4607  000E26  0100               	movlb	0	; () banked
  4608  000E28  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4609  000E2A  ECAE  F00F         	call	___awmod	;wreg free
  4610  000E2E                     L12:
  4611  000E2E  C060  F077         	movff	?___awmod,_SpeakingPattern$768
  4612  000E32  C061  F078         	movff	?___awmod+1,_SpeakingPattern$768+1
  4613  000E36  C077  F07E         	movff	_SpeakingPattern$768,SpeakingPattern@x
  4614                           
  4615                           ;Pattern_RGBPatterns.c: 248: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4616  000E3A  0E04               	movlw	4
  4617  000E3C  0100               	movlb	0	; () banked
  4618  000E3E  657E               	cpfsgt	SpeakingPattern@x& (0+255),b
  4619  000E40  D006               	goto	l2992
  4620                           
  4621                           ; BSR set to: 0
  4622  000E42  0E00               	movlw	0
  4623  000E44  0100               	movlb	0	; () banked
  4624  000E46  6F7A               	movwf	(_SpeakingPattern$769+1)& (0+255),b
  4625  000E48  0E00               	movlw	0
  4626  000E4A  6F79               	movwf	_SpeakingPattern$769& (0+255),b
  4627  000E4C  D01F               	goto	l2994
  4628  000E4E                     l2992:
  4629                           
  4630                           ; BSR set to: 0
  4631  000E4E  0100               	movlb	0	; () banked
  4632  000E50  517E               	movf	SpeakingPattern@x& (0+255),w,b
  4633  000E52  0D0F               	mullw	15
  4634  000E54  CFF3 F060          	movff	prodl,___awdiv@dividend
  4635  000E58  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4636  000E5C  0E00               	movlw	0
  4637  000E5E  0100               	movlb	0	; () banked
  4638  000E60  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4639  000E62  0E05               	movlw	5
  4640  000E64  6F62               	movwf	___awdiv@divisor& (0+255),b
  4641  000E66  ECEF  F00D         	call	___awdiv	;wreg free
  4642  000E6A  0100               	movlb	0	; () banked
  4643  000E6C  1F60               	comf	?___awdiv& (0+255),f,b
  4644  000E6E  0100               	movlb	0	; () banked
  4645  000E70  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4646  000E72  0100               	movlb	0	; () banked
  4647  000E74  4B60               	infsnz	?___awdiv& (0+255),f,b
  4648  000E76  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4649  000E78  0E0F               	movlw	15
  4650  000E7A  0100               	movlb	0	; () banked
  4651  000E7C  2560               	addwf	?___awdiv& (0+255),w,b
  4652  000E7E  0100               	movlb	0	; () banked
  4653  000E80  6F79               	movwf	_SpeakingPattern$769& (0+255),b
  4654  000E82  0E00               	movlw	0
  4655  000E84  0100               	movlb	0	; () banked
  4656  000E86  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4657  000E88  0100               	movlb	0	; () banked
  4658  000E8A  6F7A               	movwf	(_SpeakingPattern$769+1)& (0+255),b
  4659  000E8C                     l2994:
  4660                           
  4661                           ; BSR set to: 0
  4662  000E8C  C079  F07C         	movff	_SpeakingPattern$769,SpeakingPattern@val
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;Pattern_RGBPatterns.c: 252: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4666                           
  4667                           ; BSR set to: 0
  4668                           
  4669                           ; BSR set to: 0
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;Pattern_RGBPatterns.c: 250: }
  4673                           
  4674                           ;Pattern_RGBPatterns.c: 249: break;
  4675  000E90  0100               	movlb	0	; () banked
  4676  000E92  517B               	movf	SpeakingPattern@sat& (0+255),w,b
  4677  000E94  0100               	movlb	0	; () banked
  4678  000E96  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4679  000E98  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4680  000E9A  0100               	movlb	0	; () banked
  4681  000E9C  3B6A               	swapf	??_SpeakingPattern& (0+255),f,b
  4682  000E9E  3B6B               	swapf	(??_SpeakingPattern+1)& (0+255),f,b
  4683  000EA0  0EF0               	movlw	240
  4684  000EA2  176B               	andwf	(??_SpeakingPattern+1)& (0+255),f,b
  4685  000EA4  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4686  000EA6  0B0F               	andlw	15
  4687  000EA8  136B               	iorwf	(??_SpeakingPattern+1)& (0+255),f,b
  4688  000EAA  0EF0               	movlw	240
  4689  000EAC  176A               	andwf	??_SpeakingPattern& (0+255),f,b
  4690  000EAE  0100               	movlb	0	; () banked
  4691  000EB0  517D               	movf	SpeakingPattern@hue& (0+255),w,b
  4692  000EB2  0100               	movlb	0	; () banked
  4693  000EB4  6F6D               	movwf	(??_SpeakingPattern+3)& (0+255),b
  4694  000EB6  6B6C               	clrf	(??_SpeakingPattern+2)& (0+255),b
  4695  000EB8  0100               	movlb	0	; () banked
  4696  000EBA  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4697  000EBC  0100               	movlb	0	; () banked
  4698  000EBE  136C               	iorwf	(??_SpeakingPattern+2)& (0+255),f,b
  4699  000EC0  0100               	movlb	0	; () banked
  4700  000EC2  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4701  000EC4  0100               	movlb	0	; () banked
  4702  000EC6  136D               	iorwf	(??_SpeakingPattern+3)& (0+255),f,b
  4703  000EC8  0100               	movlb	0	; () banked
  4704  000ECA  517C               	movf	SpeakingPattern@val& (0+255),w,b
  4705  000ECC  0100               	movlb	0	; () banked
  4706  000ECE  116C               	iorwf	(??_SpeakingPattern+2)& (0+255),w,b
  4707  000ED0  0100               	movlb	0	; () banked
  4708  000ED2  6F75               	movwf	SpeakingPattern@pixelHSV& (0+255),b
  4709  000ED4  0100               	movlb	0	; () banked
  4710  000ED6  516D               	movf	(??_SpeakingPattern+3)& (0+255),w,b
  4711  000ED8  0100               	movlb	0	; () banked
  4712  000EDA  6F76               	movwf	(SpeakingPattern@pixelHSV+1)& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;Pattern_RGBPatterns.c: 254: return pixelHSV;
  4716  000EDC  C075  F068         	movff	SpeakingPattern@pixelHSV,?_SpeakingPattern
  4717  000EE0  C076  F069         	movff	SpeakingPattern@pixelHSV+1,?_SpeakingPattern+1
  4718  000EE4  0012               	return	
  4719  000EE6                     __end_of_SpeakingPattern:
  4720                           	opt stack 0
  4721                           tosu	equ	0xFFF
  4722                           tosh	equ	0xFFE
  4723                           tosl	equ	0xFFD
  4724                           pclath	equ	0xFFA
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           postdec1	equ	0xFE5
  4734                           fsr1h	equ	0xFE2
  4735                           fsr1l	equ	0xFE1
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function _ListeningPattern *****************
  4744 ;; Defined at:
  4745 ;;		line 217 in file "Pattern_RGBPatterns.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  pattern         1    wreg     unsigned char 
  4748 ;;  pixel           1    8[BANK0 ] unsigned char 
  4749 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  pattern         1    0[COMRAM] unsigned char 
  4752 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4753 ;;  head            1   31[BANK0 ] unsigned char 
  4754 ;;  x               1   30[BANK0 ] unsigned char 
  4755 ;;  hue             1   29[BANK0 ] unsigned char 
  4756 ;;  val             1   28[BANK0 ] unsigned char 
  4757 ;;  sat             1   27[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;                  2    8[BANK0 ] unsigned int 
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4767 ;;      Params:         0       2       0       0
  4768 ;;      Locals:         0      11       0       0
  4769 ;;      Temps:          0      11       0       0
  4770 ;;      Totals:         0      24       0       0
  4771 ;;Total ram usage:       24 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    8
  4774 ;; This function calls:
  4775 ;;		___awdiv
  4776 ;;		___awmod
  4777 ;; This function is called by:
  4778 ;;		_UpdatePattern
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text19
  4783  000EE6                     __ptext19:
  4784                           	opt stack 0
  4785  000EE6                     _ListeningPattern:
  4786                           	opt stack 18
  4787                           
  4788                           ;Pattern_RGBPatterns.c: 218: uint8_t head = stepCount;
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;incstack = 0
  4792  000EE6  C069  F07F         	movff	ListeningPattern@stepCount,ListeningPattern@head
  4793                           
  4794                           ;Pattern_RGBPatterns.c: 224: hue = 85;
  4795                           
  4796                           ;Pattern_RGBPatterns.c: 223: default:
  4797                           
  4798                           ;Pattern_RGBPatterns.c: 219: uint16_t pixelHSV;
  4799                           ;Pattern_RGBPatterns.c: 220: uint8_t sat, val, hue, x;
  4800                           ;Pattern_RGBPatterns.c: 222: switch(pattern){
  4801  000EEA  0E55               	movlw	85
  4802  000EEC  0100               	movlb	0	; () banked
  4803  000EEE  6F7D               	movwf	ListeningPattern@hue& (0+255),b
  4804                           
  4805                           ;Pattern_RGBPatterns.c: 225: sat = 0x0F;
  4806  000EF0  0E0F               	movlw	15
  4807  000EF2  0100               	movlb	0	; () banked
  4808  000EF4  6F7B               	movwf	ListeningPattern@sat& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;Pattern_RGBPatterns.c: 227: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4812  000EF6  0100               	movlb	0	; () banked
  4813  000EF8  517F               	movf	ListeningPattern@head& (0+255),w,b
  4814  000EFA  0100               	movlb	0	; () banked
  4815  000EFC  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4816  000EFE  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4817  000F00  0100               	movlb	0	; () banked
  4818  000F02  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4819  000F04  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4820  000F06  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4821  000F08  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4822  000F0A  0100               	movlb	0	; () banked
  4823  000F0C  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4824  000F0E  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4825  000F12  0100               	movlb	0	; () banked
  4826  000F14  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4827  000F16  0100               	movlb	0	; () banked
  4828  000F18  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4829  000F1A  0E00               	movlw	0
  4830  000F1C  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4831  000F1E  0100               	movlb	0	; () banked
  4832  000F20  516A               	movf	??_ListeningPattern& (0+255),w,b
  4833  000F22  0100               	movlb	0	; () banked
  4834  000F24  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4835  000F26  0100               	movlb	0	; () banked
  4836  000F28  6F60               	movwf	___awmod@dividend& (0+255),b
  4837  000F2A  0100               	movlb	0	; () banked
  4838  000F2C  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4839  000F2E  0100               	movlb	0	; () banked
  4840  000F30  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4841  000F32  0100               	movlb	0	; () banked
  4842  000F34  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4843  000F36  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4844  000F3A  0100               	movlb	0	; () banked
  4845  000F3C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4846  000F3E  ECAE  F00F         	call	___awmod	;wreg free
  4847  000F42  C060  F06E         	movff	?___awmod,??_ListeningPattern+4
  4848  000F46  C061  F06F         	movff	?___awmod+1,??_ListeningPattern+5
  4849  000F4A  0100               	movlb	0	; () banked
  4850  000F4C  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4851  000F4E  0100               	movlb	0	; () banked
  4852  000F50  6F70               	movwf	(??_ListeningPattern+6)& (0+255),b
  4853  000F52  6B71               	clrf	(??_ListeningPattern+7)& (0+255),b
  4854  000F54  0100               	movlb	0	; () banked
  4855  000F56  1F70               	comf	(??_ListeningPattern+6)& (0+255),f,b
  4856  000F58  1F71               	comf	(??_ListeningPattern+7)& (0+255),f,b
  4857  000F5A  4B70               	infsnz	(??_ListeningPattern+6)& (0+255),f,b
  4858  000F5C  2B71               	incf	(??_ListeningPattern+7)& (0+255),f,b
  4859  000F5E  0100               	movlb	0	; () banked
  4860  000F60  517F               	movf	ListeningPattern@head& (0+255),w,b
  4861  000F62  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+8
  4862  000F66  0100               	movlb	0	; () banked
  4863  000F68  6B73               	clrf	(??_ListeningPattern+9)& (0+255),b
  4864  000F6A  0100               	movlb	0	; () banked
  4865  000F6C  2772               	addwf	(??_ListeningPattern+8)& (0+255),f,b
  4866  000F6E  0E00               	movlw	0
  4867  000F70  2373               	addwfc	(??_ListeningPattern+9)& (0+255),f,b
  4868  000F72  0100               	movlb	0	; () banked
  4869  000F74  5170               	movf	(??_ListeningPattern+6)& (0+255),w,b
  4870  000F76  0100               	movlb	0	; () banked
  4871  000F78  2572               	addwf	(??_ListeningPattern+8)& (0+255),w,b
  4872  000F7A  0100               	movlb	0	; () banked
  4873  000F7C  6F60               	movwf	___awmod@dividend& (0+255),b
  4874  000F7E  0100               	movlb	0	; () banked
  4875  000F80  5171               	movf	(??_ListeningPattern+7)& (0+255),w,b
  4876  000F82  0100               	movlb	0	; () banked
  4877  000F84  2173               	addwfc	(??_ListeningPattern+9)& (0+255),w,b
  4878  000F86  0100               	movlb	0	; () banked
  4879  000F88  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4880  000F8A  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4881  000F8E  0100               	movlb	0	; () banked
  4882  000F90  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4883  000F92  ECAE  F00F         	call	___awmod	;wreg free
  4884  000F96  0100               	movlb	0	; () banked
  4885  000F98  5160               	movf	?___awmod& (0+255),w,b
  4886  000F9A  0100               	movlb	0	; () banked
  4887  000F9C  5D6E               	subwf	(??_ListeningPattern+4)& (0+255),w,b
  4888  000F9E  0100               	movlb	0	; () banked
  4889  000FA0  516F               	movf	(??_ListeningPattern+5)& (0+255),w,b
  4890  000FA2  0A80               	xorlw	128
  4891  000FA4  0100               	movlb	0	; () banked
  4892  000FA6  6F74               	movwf	(??_ListeningPattern+10)& (0+255),b
  4893  000FA8  0100               	movlb	0	; () banked
  4894  000FAA  5161               	movf	(?___awmod+1)& (0+255),w,b
  4895  000FAC  0A80               	xorlw	128
  4896  000FAE  0100               	movlb	0	; () banked
  4897  000FB0  5974               	subwfb	(??_ListeningPattern+10)& (0+255),w,b
  4898  000FB2  A0D8               	btfss	status,0,c
  4899  000FB4  D027               	goto	l3012
  4900                           
  4901                           ; BSR set to: 0
  4902  000FB6  0100               	movlb	0	; () banked
  4903  000FB8  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4904  000FBA  0100               	movlb	0	; () banked
  4905  000FBC  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4906  000FBE  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4907  000FC0  0100               	movlb	0	; () banked
  4908  000FC2  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4909  000FC4  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4910  000FC6  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4911  000FC8  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4912  000FCA  0100               	movlb	0	; () banked
  4913  000FCC  517F               	movf	ListeningPattern@head& (0+255),w,b
  4914  000FCE  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4915  000FD2  0100               	movlb	0	; () banked
  4916  000FD4  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4917  000FD6  0100               	movlb	0	; () banked
  4918  000FD8  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4919  000FDA  0E00               	movlw	0
  4920  000FDC  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4921  000FDE  0100               	movlb	0	; () banked
  4922  000FE0  516A               	movf	??_ListeningPattern& (0+255),w,b
  4923  000FE2  0100               	movlb	0	; () banked
  4924  000FE4  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4925  000FE6  0100               	movlb	0	; () banked
  4926  000FE8  6F60               	movwf	___awmod@dividend& (0+255),b
  4927  000FEA  0100               	movlb	0	; () banked
  4928  000FEC  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4929  000FEE  0100               	movlb	0	; () banked
  4930  000FF0  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4931  000FF2  0100               	movlb	0	; () banked
  4932  000FF4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4933  000FF6  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4934  000FFA  0100               	movlb	0	; () banked
  4935  000FFC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4936  000FFE  ECAE  F00F         	call	___awmod	;wreg free
  4937  001002  D026               	goto	L13
  4938  001004                     l3012:
  4939  001004  0100               	movlb	0	; () banked
  4940  001006  517F               	movf	ListeningPattern@head& (0+255),w,b
  4941  001008  0100               	movlb	0	; () banked
  4942  00100A  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4943  00100C  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4944  00100E  0100               	movlb	0	; () banked
  4945  001010  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4946  001012  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4947  001014  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4948  001016  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4949  001018  0100               	movlb	0	; () banked
  4950  00101A  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4951  00101C  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4952  001020  0100               	movlb	0	; () banked
  4953  001022  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4954  001024  0100               	movlb	0	; () banked
  4955  001026  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4956  001028  0E00               	movlw	0
  4957  00102A  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4958  00102C  0100               	movlb	0	; () banked
  4959  00102E  516A               	movf	??_ListeningPattern& (0+255),w,b
  4960  001030  0100               	movlb	0	; () banked
  4961  001032  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4962  001034  0100               	movlb	0	; () banked
  4963  001036  6F60               	movwf	___awmod@dividend& (0+255),b
  4964  001038  0100               	movlb	0	; () banked
  4965  00103A  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4966  00103C  0100               	movlb	0	; () banked
  4967  00103E  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4968  001040  0100               	movlb	0	; () banked
  4969  001042  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4970  001044  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4971  001048  0100               	movlb	0	; () banked
  4972  00104A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4973  00104C  ECAE  F00F         	call	___awmod	;wreg free
  4974  001050                     L13:
  4975  001050  C060  F077         	movff	?___awmod,_ListeningPattern$756
  4976  001054  C061  F078         	movff	?___awmod+1,_ListeningPattern$756+1
  4977  001058  C077  F07E         	movff	_ListeningPattern$756,ListeningPattern@x
  4978                           
  4979                           ;Pattern_RGBPatterns.c: 228: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4980  00105C  0E04               	movlw	4
  4981  00105E  0100               	movlb	0	; () banked
  4982  001060  657E               	cpfsgt	ListeningPattern@x& (0+255),b
  4983  001062  D006               	goto	l3020
  4984                           
  4985                           ; BSR set to: 0
  4986  001064  0E00               	movlw	0
  4987  001066  0100               	movlb	0	; () banked
  4988  001068  6F7A               	movwf	(_ListeningPattern$757+1)& (0+255),b
  4989  00106A  0E00               	movlw	0
  4990  00106C  6F79               	movwf	_ListeningPattern$757& (0+255),b
  4991  00106E  D01F               	goto	l3022
  4992  001070                     l3020:
  4993                           
  4994                           ; BSR set to: 0
  4995  001070  0100               	movlb	0	; () banked
  4996  001072  517E               	movf	ListeningPattern@x& (0+255),w,b
  4997  001074  0D0F               	mullw	15
  4998  001076  CFF3 F060          	movff	prodl,___awdiv@dividend
  4999  00107A  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5000  00107E  0E00               	movlw	0
  5001  001080  0100               	movlb	0	; () banked
  5002  001082  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5003  001084  0E05               	movlw	5
  5004  001086  6F62               	movwf	___awdiv@divisor& (0+255),b
  5005  001088  ECEF  F00D         	call	___awdiv	;wreg free
  5006  00108C  0100               	movlb	0	; () banked
  5007  00108E  1F60               	comf	?___awdiv& (0+255),f,b
  5008  001090  0100               	movlb	0	; () banked
  5009  001092  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5010  001094  0100               	movlb	0	; () banked
  5011  001096  4B60               	infsnz	?___awdiv& (0+255),f,b
  5012  001098  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5013  00109A  0E0F               	movlw	15
  5014  00109C  0100               	movlb	0	; () banked
  5015  00109E  2560               	addwf	?___awdiv& (0+255),w,b
  5016  0010A0  0100               	movlb	0	; () banked
  5017  0010A2  6F79               	movwf	_ListeningPattern$757& (0+255),b
  5018  0010A4  0E00               	movlw	0
  5019  0010A6  0100               	movlb	0	; () banked
  5020  0010A8  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5021  0010AA  0100               	movlb	0	; () banked
  5022  0010AC  6F7A               	movwf	(_ListeningPattern$757+1)& (0+255),b
  5023  0010AE                     l3022:
  5024                           
  5025                           ; BSR set to: 0
  5026  0010AE  C079  F07C         	movff	_ListeningPattern$757,ListeningPattern@val
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;Pattern_RGBPatterns.c: 232: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  5030                           
  5031                           ; BSR set to: 0
  5032                           
  5033                           ; BSR set to: 0
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;Pattern_RGBPatterns.c: 230: }
  5037                           
  5038                           ;Pattern_RGBPatterns.c: 229: break;
  5039  0010B2  0100               	movlb	0	; () banked
  5040  0010B4  517B               	movf	ListeningPattern@sat& (0+255),w,b
  5041  0010B6  0100               	movlb	0	; () banked
  5042  0010B8  6F6A               	movwf	??_ListeningPattern& (0+255),b
  5043  0010BA  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  5044  0010BC  0100               	movlb	0	; () banked
  5045  0010BE  3B6A               	swapf	??_ListeningPattern& (0+255),f,b
  5046  0010C0  3B6B               	swapf	(??_ListeningPattern+1)& (0+255),f,b
  5047  0010C2  0EF0               	movlw	240
  5048  0010C4  176B               	andwf	(??_ListeningPattern+1)& (0+255),f,b
  5049  0010C6  516A               	movf	??_ListeningPattern& (0+255),w,b
  5050  0010C8  0B0F               	andlw	15
  5051  0010CA  136B               	iorwf	(??_ListeningPattern+1)& (0+255),f,b
  5052  0010CC  0EF0               	movlw	240
  5053  0010CE  176A               	andwf	??_ListeningPattern& (0+255),f,b
  5054  0010D0  0100               	movlb	0	; () banked
  5055  0010D2  517D               	movf	ListeningPattern@hue& (0+255),w,b
  5056  0010D4  0100               	movlb	0	; () banked
  5057  0010D6  6F6D               	movwf	(??_ListeningPattern+3)& (0+255),b
  5058  0010D8  6B6C               	clrf	(??_ListeningPattern+2)& (0+255),b
  5059  0010DA  0100               	movlb	0	; () banked
  5060  0010DC  516A               	movf	??_ListeningPattern& (0+255),w,b
  5061  0010DE  0100               	movlb	0	; () banked
  5062  0010E0  136C               	iorwf	(??_ListeningPattern+2)& (0+255),f,b
  5063  0010E2  0100               	movlb	0	; () banked
  5064  0010E4  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  5065  0010E6  0100               	movlb	0	; () banked
  5066  0010E8  136D               	iorwf	(??_ListeningPattern+3)& (0+255),f,b
  5067  0010EA  0100               	movlb	0	; () banked
  5068  0010EC  517C               	movf	ListeningPattern@val& (0+255),w,b
  5069  0010EE  0100               	movlb	0	; () banked
  5070  0010F0  116C               	iorwf	(??_ListeningPattern+2)& (0+255),w,b
  5071  0010F2  0100               	movlb	0	; () banked
  5072  0010F4  6F75               	movwf	ListeningPattern@pixelHSV& (0+255),b
  5073  0010F6  0100               	movlb	0	; () banked
  5074  0010F8  516D               	movf	(??_ListeningPattern+3)& (0+255),w,b
  5075  0010FA  0100               	movlb	0	; () banked
  5076  0010FC  6F76               	movwf	(ListeningPattern@pixelHSV+1)& (0+255),b
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;Pattern_RGBPatterns.c: 234: return pixelHSV;
  5080  0010FE  C075  F068         	movff	ListeningPattern@pixelHSV,?_ListeningPattern
  5081  001102  C076  F069         	movff	ListeningPattern@pixelHSV+1,?_ListeningPattern+1
  5082  001106  0012               	return	
  5083  001108                     __end_of_ListeningPattern:
  5084                           	opt stack 0
  5085                           tosu	equ	0xFFF
  5086                           tosh	equ	0xFFE
  5087                           tosl	equ	0xFFD
  5088                           pclath	equ	0xFFA
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _IdlePattern *****************
  5108 ;; Defined at:
  5109 ;;		line 257 in file "Pattern_RGBPatterns.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  pattern         1    wreg     unsigned char 
  5112 ;;  pixel           1    8[BANK0 ] unsigned char 
  5113 ;;  stepCount       1    9[BANK0 ] unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  pattern         1    0[COMRAM] unsigned char 
  5116 ;;  pixelHSV        2   22[BANK0 ] unsigned int 
  5117 ;;  head            1   31[BANK0 ] unsigned char 
  5118 ;;  x               1   30[BANK0 ] unsigned char 
  5119 ;;  val             1   29[BANK0 ] unsigned char 
  5120 ;;  sat             1   28[BANK0 ] unsigned char 
  5121 ;;  hue             1   21[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  2    8[BANK0 ] unsigned int 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5131 ;;      Params:         0       2       0       0
  5132 ;;      Locals:         0      11       0       0
  5133 ;;      Temps:          0      11       0       0
  5134 ;;      Totals:         0      24       0       0
  5135 ;;Total ram usage:       24 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    8
  5138 ;; This function calls:
  5139 ;;		___awdiv
  5140 ;;		___awmod
  5141 ;; This function is called by:
  5142 ;;		_UpdatePattern
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text20
  5147  001108                     __ptext20:
  5148                           	opt stack 0
  5149  001108                     _IdlePattern:
  5150                           	opt stack 18
  5151                           
  5152                           ;Pattern_RGBPatterns.c: 258: uint8_t head = stepCount;
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;incstack = 0
  5156  001108  C069  F07F         	movff	IdlePattern@stepCount,IdlePattern@head
  5157                           
  5158                           ;Pattern_RGBPatterns.c: 264: hue = 0;
  5159                           
  5160                           ;Pattern_RGBPatterns.c: 263: default:
  5161                           
  5162                           ;Pattern_RGBPatterns.c: 259: uint16_t pixelHSV;
  5163                           ;Pattern_RGBPatterns.c: 260: uint8_t sat, val, hue, x;
  5164                           ;Pattern_RGBPatterns.c: 262: switch(pattern){
  5165  00110C  0E00               	movlw	0
  5166  00110E  0100               	movlb	0	; () banked
  5167  001110  6F75               	movwf	IdlePattern@hue& (0+255),b
  5168                           
  5169                           ;Pattern_RGBPatterns.c: 265: sat = 0x0F;
  5170  001112  0E0F               	movlw	15
  5171  001114  0100               	movlb	0	; () banked
  5172  001116  6F7C               	movwf	IdlePattern@sat& (0+255),b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;Pattern_RGBPatterns.c: 267: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  5176  001118  0100               	movlb	0	; () banked
  5177  00111A  517F               	movf	IdlePattern@head& (0+255),w,b
  5178  00111C  0100               	movlb	0	; () banked
  5179  00111E  6F6A               	movwf	??_IdlePattern& (0+255),b
  5180  001120  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5181  001122  0100               	movlb	0	; () banked
  5182  001124  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5183  001126  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5184  001128  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5185  00112A  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5186  00112C  0100               	movlb	0	; () banked
  5187  00112E  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5188  001130  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5189  001134  0100               	movlb	0	; () banked
  5190  001136  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5191  001138  0100               	movlb	0	; () banked
  5192  00113A  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5193  00113C  0E00               	movlw	0
  5194  00113E  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5195  001140  0100               	movlb	0	; () banked
  5196  001142  516A               	movf	??_IdlePattern& (0+255),w,b
  5197  001144  0100               	movlb	0	; () banked
  5198  001146  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5199  001148  0100               	movlb	0	; () banked
  5200  00114A  6F60               	movwf	___awmod@dividend& (0+255),b
  5201  00114C  0100               	movlb	0	; () banked
  5202  00114E  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5203  001150  0100               	movlb	0	; () banked
  5204  001152  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5205  001154  0100               	movlb	0	; () banked
  5206  001156  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5207  001158  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5208  00115C  0100               	movlb	0	; () banked
  5209  00115E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5210  001160  ECAE  F00F         	call	___awmod	;wreg free
  5211  001164  C060  F06E         	movff	?___awmod,??_IdlePattern+4
  5212  001168  C061  F06F         	movff	?___awmod+1,??_IdlePattern+5
  5213  00116C  0100               	movlb	0	; () banked
  5214  00116E  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5215  001170  0100               	movlb	0	; () banked
  5216  001172  6F70               	movwf	(??_IdlePattern+6)& (0+255),b
  5217  001174  6B71               	clrf	(??_IdlePattern+7)& (0+255),b
  5218  001176  0100               	movlb	0	; () banked
  5219  001178  1F70               	comf	(??_IdlePattern+6)& (0+255),f,b
  5220  00117A  1F71               	comf	(??_IdlePattern+7)& (0+255),f,b
  5221  00117C  4B70               	infsnz	(??_IdlePattern+6)& (0+255),f,b
  5222  00117E  2B71               	incf	(??_IdlePattern+7)& (0+255),f,b
  5223  001180  0100               	movlb	0	; () banked
  5224  001182  517F               	movf	IdlePattern@head& (0+255),w,b
  5225  001184  C0E0  F072         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+8
  5226  001188  0100               	movlb	0	; () banked
  5227  00118A  6B73               	clrf	(??_IdlePattern+9)& (0+255),b
  5228  00118C  0100               	movlb	0	; () banked
  5229  00118E  2772               	addwf	(??_IdlePattern+8)& (0+255),f,b
  5230  001190  0E00               	movlw	0
  5231  001192  2373               	addwfc	(??_IdlePattern+9)& (0+255),f,b
  5232  001194  0100               	movlb	0	; () banked
  5233  001196  5170               	movf	(??_IdlePattern+6)& (0+255),w,b
  5234  001198  0100               	movlb	0	; () banked
  5235  00119A  2572               	addwf	(??_IdlePattern+8)& (0+255),w,b
  5236  00119C  0100               	movlb	0	; () banked
  5237  00119E  6F60               	movwf	___awmod@dividend& (0+255),b
  5238  0011A0  0100               	movlb	0	; () banked
  5239  0011A2  5171               	movf	(??_IdlePattern+7)& (0+255),w,b
  5240  0011A4  0100               	movlb	0	; () banked
  5241  0011A6  2173               	addwfc	(??_IdlePattern+9)& (0+255),w,b
  5242  0011A8  0100               	movlb	0	; () banked
  5243  0011AA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5244  0011AC  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5245  0011B0  0100               	movlb	0	; () banked
  5246  0011B2  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5247  0011B4  ECAE  F00F         	call	___awmod	;wreg free
  5248  0011B8  0100               	movlb	0	; () banked
  5249  0011BA  5160               	movf	?___awmod& (0+255),w,b
  5250  0011BC  0100               	movlb	0	; () banked
  5251  0011BE  5D6E               	subwf	(??_IdlePattern+4)& (0+255),w,b
  5252  0011C0  0100               	movlb	0	; () banked
  5253  0011C2  516F               	movf	(??_IdlePattern+5)& (0+255),w,b
  5254  0011C4  0A80               	xorlw	128
  5255  0011C6  0100               	movlb	0	; () banked
  5256  0011C8  6F74               	movwf	(??_IdlePattern+10)& (0+255),b
  5257  0011CA  0100               	movlb	0	; () banked
  5258  0011CC  5161               	movf	(?___awmod+1)& (0+255),w,b
  5259  0011CE  0A80               	xorlw	128
  5260  0011D0  0100               	movlb	0	; () banked
  5261  0011D2  5974               	subwfb	(??_IdlePattern+10)& (0+255),w,b
  5262  0011D4  A0D8               	btfss	status,0,c
  5263  0011D6  D027               	goto	l2928
  5264                           
  5265                           ; BSR set to: 0
  5266  0011D8  0100               	movlb	0	; () banked
  5267  0011DA  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5268  0011DC  0100               	movlb	0	; () banked
  5269  0011DE  6F6A               	movwf	??_IdlePattern& (0+255),b
  5270  0011E0  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5271  0011E2  0100               	movlb	0	; () banked
  5272  0011E4  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5273  0011E6  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5274  0011E8  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5275  0011EA  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5276  0011EC  0100               	movlb	0	; () banked
  5277  0011EE  517F               	movf	IdlePattern@head& (0+255),w,b
  5278  0011F0  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5279  0011F4  0100               	movlb	0	; () banked
  5280  0011F6  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5281  0011F8  0100               	movlb	0	; () banked
  5282  0011FA  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5283  0011FC  0E00               	movlw	0
  5284  0011FE  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5285  001200  0100               	movlb	0	; () banked
  5286  001202  516A               	movf	??_IdlePattern& (0+255),w,b
  5287  001204  0100               	movlb	0	; () banked
  5288  001206  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5289  001208  0100               	movlb	0	; () banked
  5290  00120A  6F60               	movwf	___awmod@dividend& (0+255),b
  5291  00120C  0100               	movlb	0	; () banked
  5292  00120E  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5293  001210  0100               	movlb	0	; () banked
  5294  001212  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5295  001214  0100               	movlb	0	; () banked
  5296  001216  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5297  001218  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5298  00121C  0100               	movlb	0	; () banked
  5299  00121E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5300  001220  ECAE  F00F         	call	___awmod	;wreg free
  5301  001224  D026               	goto	L14
  5302  001226                     l2928:
  5303  001226  0100               	movlb	0	; () banked
  5304  001228  517F               	movf	IdlePattern@head& (0+255),w,b
  5305  00122A  0100               	movlb	0	; () banked
  5306  00122C  6F6A               	movwf	??_IdlePattern& (0+255),b
  5307  00122E  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5308  001230  0100               	movlb	0	; () banked
  5309  001232  1F6A               	comf	??_IdlePattern& (0+255),f,b
  5310  001234  1F6B               	comf	(??_IdlePattern+1)& (0+255),f,b
  5311  001236  4B6A               	infsnz	??_IdlePattern& (0+255),f,b
  5312  001238  2B6B               	incf	(??_IdlePattern+1)& (0+255),f,b
  5313  00123A  0100               	movlb	0	; () banked
  5314  00123C  5168               	movf	IdlePattern@pixel& (0+255),w,b
  5315  00123E  C0E0  F06C         	movff	Pattern_RGBPatterns@Length,??_IdlePattern+2
  5316  001242  0100               	movlb	0	; () banked
  5317  001244  6B6D               	clrf	(??_IdlePattern+3)& (0+255),b
  5318  001246  0100               	movlb	0	; () banked
  5319  001248  276C               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5320  00124A  0E00               	movlw	0
  5321  00124C  236D               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5322  00124E  0100               	movlb	0	; () banked
  5323  001250  516A               	movf	??_IdlePattern& (0+255),w,b
  5324  001252  0100               	movlb	0	; () banked
  5325  001254  256C               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5326  001256  0100               	movlb	0	; () banked
  5327  001258  6F60               	movwf	___awmod@dividend& (0+255),b
  5328  00125A  0100               	movlb	0	; () banked
  5329  00125C  516B               	movf	(??_IdlePattern+1)& (0+255),w,b
  5330  00125E  0100               	movlb	0	; () banked
  5331  001260  216D               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5332  001262  0100               	movlb	0	; () banked
  5333  001264  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5334  001266  C0E0  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5335  00126A  0100               	movlb	0	; () banked
  5336  00126C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5337  00126E  ECAE  F00F         	call	___awmod	;wreg free
  5338  001272                     L14:
  5339  001272  C060  F078         	movff	?___awmod,_IdlePattern$780
  5340  001276  C061  F079         	movff	?___awmod+1,_IdlePattern$780+1
  5341  00127A  C078  F07E         	movff	_IdlePattern$780,IdlePattern@x
  5342                           
  5343                           ;Pattern_RGBPatterns.c: 268: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  5344  00127E  0E04               	movlw	4
  5345  001280  0100               	movlb	0	; () banked
  5346  001282  657E               	cpfsgt	IdlePattern@x& (0+255),b
  5347  001284  D006               	goto	l2936
  5348                           
  5349                           ; BSR set to: 0
  5350  001286  0E00               	movlw	0
  5351  001288  0100               	movlb	0	; () banked
  5352  00128A  6F7B               	movwf	(_IdlePattern$781+1)& (0+255),b
  5353  00128C  0E00               	movlw	0
  5354  00128E  6F7A               	movwf	_IdlePattern$781& (0+255),b
  5355  001290  D01F               	goto	l2938
  5356  001292                     l2936:
  5357                           
  5358                           ; BSR set to: 0
  5359  001292  0100               	movlb	0	; () banked
  5360  001294  517E               	movf	IdlePattern@x& (0+255),w,b
  5361  001296  0D0F               	mullw	15
  5362  001298  CFF3 F060          	movff	prodl,___awdiv@dividend
  5363  00129C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5364  0012A0  0E00               	movlw	0
  5365  0012A2  0100               	movlb	0	; () banked
  5366  0012A4  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5367  0012A6  0E05               	movlw	5
  5368  0012A8  6F62               	movwf	___awdiv@divisor& (0+255),b
  5369  0012AA  ECEF  F00D         	call	___awdiv	;wreg free
  5370  0012AE  0100               	movlb	0	; () banked
  5371  0012B0  1F60               	comf	?___awdiv& (0+255),f,b
  5372  0012B2  0100               	movlb	0	; () banked
  5373  0012B4  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5374  0012B6  0100               	movlb	0	; () banked
  5375  0012B8  4B60               	infsnz	?___awdiv& (0+255),f,b
  5376  0012BA  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5377  0012BC  0E0F               	movlw	15
  5378  0012BE  0100               	movlb	0	; () banked
  5379  0012C0  2560               	addwf	?___awdiv& (0+255),w,b
  5380  0012C2  0100               	movlb	0	; () banked
  5381  0012C4  6F7A               	movwf	_IdlePattern$781& (0+255),b
  5382  0012C6  0E00               	movlw	0
  5383  0012C8  0100               	movlb	0	; () banked
  5384  0012CA  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5385  0012CC  0100               	movlb	0	; () banked
  5386  0012CE  6F7B               	movwf	(_IdlePattern$781+1)& (0+255),b
  5387  0012D0                     l2938:
  5388                           
  5389                           ; BSR set to: 0
  5390  0012D0  C07A  F07D         	movff	_IdlePattern$781,IdlePattern@val
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;Pattern_RGBPatterns.c: 272: pixelHSV = ((uint16_t)32<<8) | (sat<<4) | val;
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ; BSR set to: 0
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;Pattern_RGBPatterns.c: 270: }
  5401                           
  5402                           ;Pattern_RGBPatterns.c: 269: break;
  5403  0012D4  0100               	movlb	0	; () banked
  5404  0012D6  517C               	movf	IdlePattern@sat& (0+255),w,b
  5405  0012D8  0100               	movlb	0	; () banked
  5406  0012DA  6F6A               	movwf	??_IdlePattern& (0+255),b
  5407  0012DC  6B6B               	clrf	(??_IdlePattern+1)& (0+255),b
  5408  0012DE  0100               	movlb	0	; () banked
  5409  0012E0  3B6A               	swapf	??_IdlePattern& (0+255),f,b
  5410  0012E2  3B6B               	swapf	(??_IdlePattern+1)& (0+255),f,b
  5411  0012E4  0EF0               	movlw	240
  5412  0012E6  176B               	andwf	(??_IdlePattern+1)& (0+255),f,b
  5413  0012E8  516A               	movf	??_IdlePattern& (0+255),w,b
  5414  0012EA  0B0F               	andlw	15
  5415  0012EC  136B               	iorwf	(??_IdlePattern+1)& (0+255),f,b
  5416  0012EE  0EF0               	movlw	240
  5417  0012F0  176A               	andwf	??_IdlePattern& (0+255),f,b
  5418  0012F2  0100               	movlb	0	; () banked
  5419  0012F4  517D               	movf	IdlePattern@val& (0+255),w,b
  5420  0012F6  0100               	movlb	0	; () banked
  5421  0012F8  136A               	iorwf	??_IdlePattern& (0+255),f,b
  5422  0012FA  0E00               	movlw	0
  5423  0012FC  136B               	iorwf	(??_IdlePattern+1)& (0+255),f,b
  5424  0012FE  0E00               	movlw	0
  5425  001300  0100               	movlb	0	; () banked
  5426  001302  116A               	iorwf	??_IdlePattern& (0+255),w,b
  5427  001304  0100               	movlb	0	; () banked
  5428  001306  6F76               	movwf	IdlePattern@pixelHSV& (0+255),b
  5429  001308  0E20               	movlw	32
  5430  00130A  0100               	movlb	0	; () banked
  5431  00130C  116B               	iorwf	(??_IdlePattern+1)& (0+255),w,b
  5432  00130E  0100               	movlb	0	; () banked
  5433  001310  6F77               	movwf	(IdlePattern@pixelHSV+1)& (0+255),b
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;Pattern_RGBPatterns.c: 274: return pixelHSV;
  5437  001312  C076  F068         	movff	IdlePattern@pixelHSV,?_IdlePattern
  5438  001316  C077  F069         	movff	IdlePattern@pixelHSV+1,?_IdlePattern+1
  5439  00131A  0012               	return	
  5440  00131C                     __end_of_IdlePattern:
  5441                           	opt stack 0
  5442                           tosu	equ	0xFFF
  5443                           tosh	equ	0xFFE
  5444                           tosl	equ	0xFFD
  5445                           pclath	equ	0xFFA
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           postdec1	equ	0xFE5
  5455                           fsr1h	equ	0xFE2
  5456                           fsr1l	equ	0xFE1
  5457                           indf2	equ	0xFDF
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function ___awdiv *****************
  5465 ;; Defined at:
  5466 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awdiv.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  dividend        2    0[BANK0 ] int 
  5469 ;;  divisor         2    2[BANK0 ] int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  quotient        2    6[BANK0 ] int 
  5472 ;;  sign            1    5[BANK0 ] unsigned char 
  5473 ;;  counter         1    4[BANK0 ] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  2    0[BANK0 ] int 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5483 ;;      Params:         0       4       0       0
  5484 ;;      Locals:         0       4       0       0
  5485 ;;      Temps:          0       0       0       0
  5486 ;;      Totals:         0       8       0       0
  5487 ;;Total ram usage:        8 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    7
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_ThinkingPattern
  5494 ;;		_ListeningPattern
  5495 ;;		_SpeakingPattern
  5496 ;;		_IdlePattern
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text21
  5501  001BDE                     __ptext21:
  5502                           	opt stack 0
  5503  001BDE                     ___awdiv:
  5504                           	opt stack 18
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;incstack = 0
  5508  001BDE  0E00               	movlw	0
  5509  001BE0  0100               	movlb	0	; () banked
  5510  001BE2  6F65               	movwf	___awdiv@sign& (0+255),b
  5511                           
  5512                           ; BSR set to: 0
  5513  001BE4  0100               	movlb	0	; () banked
  5514  001BE6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5515  001BE8  D008               	goto	l2764
  5516                           
  5517                           ; BSR set to: 0
  5518  001BEA  0100               	movlb	0	; () banked
  5519  001BEC  6D62               	negf	___awdiv@divisor& (0+255),b
  5520  001BEE  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5521  001BF0  B0D8               	btfsc	status,0,c
  5522  001BF2  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5523                           
  5524                           ; BSR set to: 0
  5525  001BF4  0E01               	movlw	1
  5526  001BF6  0100               	movlb	0	; () banked
  5527  001BF8  6F65               	movwf	___awdiv@sign& (0+255),b
  5528  001BFA                     l2764:
  5529                           
  5530                           ; BSR set to: 0
  5531  001BFA  0100               	movlb	0	; () banked
  5532  001BFC  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5533  001BFE  D008               	goto	l2770
  5534                           
  5535                           ; BSR set to: 0
  5536  001C00  0100               	movlb	0	; () banked
  5537  001C02  6D60               	negf	___awdiv@dividend& (0+255),b
  5538  001C04  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5539  001C06  B0D8               	btfsc	status,0,c
  5540  001C08  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5541                           
  5542                           ; BSR set to: 0
  5543  001C0A  0E01               	movlw	1
  5544  001C0C  0100               	movlb	0	; () banked
  5545  001C0E  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5546  001C10                     l2770:
  5547                           
  5548                           ; BSR set to: 0
  5549  001C10  0E00               	movlw	0
  5550  001C12  0100               	movlb	0	; () banked
  5551  001C14  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5552  001C16  0E00               	movlw	0
  5553  001C18  6F66               	movwf	___awdiv@quotient& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556  001C1A  0100               	movlb	0	; () banked
  5557  001C1C  5162               	movf	___awdiv@divisor& (0+255),w,b
  5558  001C1E  0100               	movlb	0	; () banked
  5559  001C20  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5560  001C22  B4D8               	btfsc	status,2,c
  5561  001C24  D02C               	goto	l2792
  5562                           
  5563                           ; BSR set to: 0
  5564  001C26  0E01               	movlw	1
  5565  001C28  0100               	movlb	0	; () banked
  5566  001C2A  6F64               	movwf	___awdiv@counter& (0+255),b
  5567  001C2C  D006               	goto	l2778
  5568  001C2E                     l2776:
  5569                           
  5570                           ; BSR set to: 0
  5571  001C2E  0100               	movlb	0	; () banked
  5572  001C30  90D8               	bcf	status,0,c
  5573  001C32  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5574  001C34  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5575  001C36  0100               	movlb	0	; () banked
  5576  001C38  2B64               	incf	___awdiv@counter& (0+255),f,b
  5577  001C3A                     l2778:
  5578                           
  5579                           ; BSR set to: 0
  5580  001C3A  0100               	movlb	0	; () banked
  5581  001C3C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5582  001C3E  D7F7               	goto	l2776
  5583  001C40                     l2780:
  5584                           
  5585                           ; BSR set to: 0
  5586  001C40  0100               	movlb	0	; () banked
  5587  001C42  90D8               	bcf	status,0,c
  5588  001C44  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5589  001C46  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 0
  5592  001C48  0100               	movlb	0	; () banked
  5593  001C4A  5162               	movf	___awdiv@divisor& (0+255),w,b
  5594  001C4C  0100               	movlb	0	; () banked
  5595  001C4E  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5596  001C50  0100               	movlb	0	; () banked
  5597  001C52  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5598  001C54  0100               	movlb	0	; () banked
  5599  001C56  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5600  001C58  A0D8               	btfss	status,0,c
  5601  001C5A  D00A               	goto	l2788
  5602                           
  5603                           ; BSR set to: 0
  5604  001C5C  0100               	movlb	0	; () banked
  5605  001C5E  5162               	movf	___awdiv@divisor& (0+255),w,b
  5606  001C60  0100               	movlb	0	; () banked
  5607  001C62  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5608  001C64  0100               	movlb	0	; () banked
  5609  001C66  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5610  001C68  0100               	movlb	0	; () banked
  5611  001C6A  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5612                           
  5613                           ; BSR set to: 0
  5614  001C6C  0100               	movlb	0	; () banked
  5615  001C6E  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5616  001C70                     l2788:
  5617                           
  5618                           ; BSR set to: 0
  5619  001C70  0100               	movlb	0	; () banked
  5620  001C72  90D8               	bcf	status,0,c
  5621  001C74  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5622  001C76  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5623                           
  5624                           ; BSR set to: 0
  5625  001C78  0100               	movlb	0	; () banked
  5626  001C7A  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5627  001C7C  D7E1               	goto	l2780
  5628  001C7E                     l2792:
  5629                           
  5630                           ; BSR set to: 0
  5631  001C7E  0100               	movlb	0	; () banked
  5632  001C80  5165               	movf	___awdiv@sign& (0+255),w,b
  5633  001C82  0100               	movlb	0	; () banked
  5634  001C84  B4D8               	btfsc	status,2,c
  5635  001C86  D005               	goto	l2796
  5636                           
  5637                           ; BSR set to: 0
  5638  001C88  0100               	movlb	0	; () banked
  5639  001C8A  6D66               	negf	___awdiv@quotient& (0+255),b
  5640  001C8C  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5641  001C8E  B0D8               	btfsc	status,0,c
  5642  001C90  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5643  001C92                     l2796:
  5644                           
  5645                           ; BSR set to: 0
  5646  001C92  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5647  001C96  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5648  001C9A  0012               	return	
  5649  001C9C                     __end_of___awdiv:
  5650                           	opt stack 0
  5651                           tosu	equ	0xFFF
  5652                           tosh	equ	0xFFE
  5653                           tosl	equ	0xFFD
  5654                           pclath	equ	0xFFA
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           prodh	equ	0xFF4
  5660                           prodl	equ	0xFF3
  5661                           postinc0	equ	0xFEE
  5662                           wreg	equ	0xFE8
  5663                           postdec1	equ	0xFE5
  5664                           fsr1h	equ	0xFE2
  5665                           fsr1l	equ	0xFE1
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _ES_Timer_InitTimer *****************
  5674 ;; Defined at:
  5675 ;;		line 229 in file "ES_Timers.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  Num             1    wreg     unsigned char 
  5678 ;;  NewTime         2    0[BANK0 ] unsigned int 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  Num             1    4[BANK0 ] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      enum E15477
  5683 ;; Registers used:
  5684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5690 ;;      Params:         0       2       0       0
  5691 ;;      Locals:         0       1       0       0
  5692 ;;      Temps:          0       2       0       0
  5693 ;;      Totals:         0       5       0       0
  5694 ;;Total ram usage:        5 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    7
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_ShowPattern
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text22
  5705  002086                     __ptext22:
  5706                           	opt stack 0
  5707  002086                     _ES_Timer_InitTimer:
  5708                           	opt stack 20
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;incstack = 0
  5712                           ;ES_Timer_InitTimer@Num stored from wreg
  5713  002086  0100               	movlb	0	; () banked
  5714  002088  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  5715                           
  5716                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  5717                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  5718                           ;ES_Timers.c: 236: (NewTime == 0) )
  5719  00208A  0E10               	movlw	16
  5720  00208C  0100               	movlb	0	; () banked
  5721  00208E  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  5722  002090  0012               	return	
  5723                           
  5724                           ; BSR set to: 0
  5725  002092  0100               	movlb	0	; () banked
  5726  002094  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5727  002096  0D02               	mullw	2
  5728  002098  0E21               	movlw	low _Timer2PostFunc
  5729  00209A  24F3               	addwf	prodl,w,c
  5730  00209C  6EF6               	movwf	tblptrl,c
  5731  00209E  0E03               	movlw	high _Timer2PostFunc
  5732  0020A0  20F4               	addwfc	prodh,w,c
  5733  0020A2  6EF7               	movwf	tblptrh,c
  5734  0020A4                     	if	0	;There are less than 3 active tblptr bytes
  5735  0020A4                     	endif
  5736  0020A4  0009               	tblrd		*+
  5737  0020A6  50F5               	movf	tablat,w,c
  5738  0020A8  0009               	tblrd		*+
  5739  0020AA  10F5               	iorwf	tablat,w,c
  5740  0020AC  B4D8               	btfsc	status,2,c
  5741  0020AE  0012               	return	
  5742                           
  5743                           ; BSR set to: 0
  5744  0020B0  0100               	movlb	0	; () banked
  5745  0020B2  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  5746  0020B4  0100               	movlb	0	; () banked
  5747  0020B6  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  5748  0020B8  B4D8               	btfsc	status,2,c
  5749  0020BA  0012               	return	
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  5753                           
  5754                           ; BSR set to: 0
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  5758                           ;	Return value of _ES_Timer_InitTimer is never used
  5759  0020BC  0100               	movlb	0	; () banked
  5760  0020BE  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5761  0020C0  0D02               	mullw	2
  5762  0020C2  0E00               	movlw	low _TMR_TimerArray
  5763  0020C4  24F3               	addwf	prodl,w,c
  5764  0020C6  6ED9               	movwf	fsr2l,c
  5765  0020C8  0E01               	movlw	high _TMR_TimerArray
  5766  0020CA  20F4               	addwfc	prodh,w,c
  5767  0020CC  6EDA               	movwf	fsr2h,c
  5768  0020CE  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  5769  0020D2  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  5773  0020D6  0100               	movlb	0	; () banked
  5774  0020D8  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  5775  0020DA  0D02               	mullw	2
  5776  0020DC  0E01               	movlw	low _BitNum2SetMask
  5777  0020DE  24F3               	addwf	prodl,w,c
  5778  0020E0  6EF6               	movwf	tblptrl,c
  5779  0020E2  0E03               	movlw	high _BitNum2SetMask
  5780  0020E4  20F4               	addwfc	prodh,w,c
  5781  0020E6  6EF7               	movwf	tblptrh,c
  5782  0020E8                     	if	0	;There are less than 3 active tblptr bytes
  5783  0020E8                     	endif
  5784  0020E8  0009               	tblrd		*+
  5785  0020EA  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  5786  0020EE  0009               	tblrd		*+
  5787  0020F0  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  5788  0020F4  0100               	movlb	0	; () banked
  5789  0020F6  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  5790  0020F8  0100               	movlb	0	; () banked
  5791  0020FA  13DC               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  5792  0020FC  0100               	movlb	0	; () banked
  5793  0020FE  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  5794  002100  0100               	movlb	0	; () banked
  5795  002102  13DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  5796  002104  0012               	return	
  5797  002106                     __end_of_ES_Timer_InitTimer:
  5798                           	opt stack 0
  5799                           tosu	equ	0xFFF
  5800                           tosh	equ	0xFFE
  5801                           tosl	equ	0xFFD
  5802                           pclath	equ	0xFFA
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _DotStar_Show *****************
  5822 ;; Defined at:
  5823 ;;		line 76 in file "Pattern_DotStarLED.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  5826 ;;		 -> PixelPattern(152), 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  i               1   89[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5838 ;;      Params:         0       2       0       0
  5839 ;;      Locals:         0       1       0       0
  5840 ;;      Temps:          0      18       0       0
  5841 ;;      Totals:         0      21       0       0
  5842 ;;Total ram usage:       21 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:   12
  5845 ;; This function calls:
  5846 ;;		_HSV_to_RGB
  5847 ;;		_SPI32_TransmitFrames
  5848 ;; This function is called by:
  5849 ;;		_ShowPattern
  5850 ;;		_StopPattern
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text23
  5855  001444                     __ptext23:
  5856                           	opt stack 0
  5857  001444                     _DotStar_Show:
  5858                           	opt stack 15
  5859                           
  5860                           ;Pattern_DotStarLED.c: 77: for(uint8_t i=1; i<=Length; i++){
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;incstack = 0
  5864  001444  0E01               	movlw	1
  5865  001446  0100               	movlb	0	; () banked
  5866  001448  6FB9               	movwf	DotStar_Show@i& (0+255),b
  5867  00144A  D07B               	goto	l3164
  5868  00144C                     l3158:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;Pattern_DotStarLED.c: 79: PixelFrames[i] = (0xe0000000 | ((uint32_t)Brightness<<24) | *
      +                          (patternPointer+(i-1)));
  5872  00144C  0EFE               	movlw	254
  5873  00144E  0100               	movlb	0	; () banked
  5874  001450  6FA7               	movwf	??_DotStar_Show& (0+255),b
  5875  001452  0EFF               	movlw	255
  5876  001454  0100               	movlb	0	; () banked
  5877  001456  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  5878  001458  0100               	movlb	0	; () banked
  5879  00145A  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5880  00145C  0100               	movlb	0	; () banked
  5881  00145E  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  5882  001460  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  5883  001462  90D8               	bcf	status,0,c
  5884  001464  0100               	movlb	0	; () banked
  5885  001466  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  5886  001468  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  5887  00146A  0100               	movlb	0	; () banked
  5888  00146C  51A7               	movf	??_DotStar_Show& (0+255),w,b
  5889  00146E  0100               	movlb	0	; () banked
  5890  001470  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  5891  001472  0100               	movlb	0	; () banked
  5892  001474  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  5893  001476  0100               	movlb	0	; () banked
  5894  001478  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  5895  00147A  0100               	movlb	0	; () banked
  5896  00147C  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  5897  00147E  0100               	movlb	0	; () banked
  5898  001480  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  5899  001482  6ED9               	movwf	fsr2l,c
  5900  001484  0100               	movlb	0	; () banked
  5901  001486  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  5902  001488  0100               	movlb	0	; () banked
  5903  00148A  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  5904  00148C  6EDA               	movwf	fsr2h,c
  5905  00148E  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  5906  001492  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  5907  001496  C0F9  F0AD         	movff	_Brightness,??_DotStar_Show+6
  5908  00149A  0100               	movlb	0	; () banked
  5909  00149C  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  5910  00149E  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  5911  0014A0  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  5912  0014A2  C0AD  F0B0         	movff	??_DotStar_Show+6,??_DotStar_Show+9
  5913  0014A6  0100               	movlb	0	; () banked
  5914  0014A8  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  5915  0014AA  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  5916  0014AC  6BAD               	clrf	(??_DotStar_Show+6)& (0+255),b
  5917  0014AE  0100               	movlb	0	; () banked
  5918  0014B0  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  5919  0014B2  0100               	movlb	0	; () banked
  5920  0014B4  11AD               	iorwf	(??_DotStar_Show+6)& (0+255),w,b
  5921  0014B6  0100               	movlb	0	; () banked
  5922  0014B8  6FB1               	movwf	(??_DotStar_Show+10)& (0+255),b
  5923  0014BA  0100               	movlb	0	; () banked
  5924  0014BC  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  5925  0014BE  0100               	movlb	0	; () banked
  5926  0014C0  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  5927  0014C2  0100               	movlb	0	; () banked
  5928  0014C4  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  5929  0014C6  0E00               	movlw	0
  5930  0014C8  0100               	movlb	0	; () banked
  5931  0014CA  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  5932  0014CC  0100               	movlb	0	; () banked
  5933  0014CE  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  5934  0014D0  0E00               	movlw	0
  5935  0014D2  0100               	movlb	0	; () banked
  5936  0014D4  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  5937  0014D6  0100               	movlb	0	; () banked
  5938  0014D8  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  5939  0014DA  0E00               	movlw	0
  5940  0014DC  0100               	movlb	0	; () banked
  5941  0014DE  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  5942  0014E0  0100               	movlb	0	; () banked
  5943  0014E2  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  5944  0014E4  0E00               	movlw	0
  5945  0014E6  0100               	movlb	0	; () banked
  5946  0014E8  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  5947  0014EA  0100               	movlb	0	; () banked
  5948  0014EC  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  5949  0014EE  0E00               	movlw	0
  5950  0014F0  0100               	movlb	0	; () banked
  5951  0014F2  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  5952  0014F4  0100               	movlb	0	; () banked
  5953  0014F6  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  5954  0014F8  0EE0               	movlw	224
  5955  0014FA  0100               	movlb	0	; () banked
  5956  0014FC  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  5957  0014FE  0100               	movlb	0	; () banked
  5958  001500  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  5959  001502  0100               	movlb	0	; () banked
  5960  001504  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5961  001506  0D04               	mullw	4
  5962  001508  0EB8               	movlw	low _PixelFrames
  5963  00150A  24F3               	addwf	prodl,w,c
  5964  00150C  6ED9               	movwf	fsr2l,c
  5965  00150E  0E01               	movlw	high _PixelFrames
  5966  001510  20F4               	addwfc	prodh,w,c
  5967  001512  6EDA               	movwf	fsr2h,c
  5968  001514  C0B5  FFDE         	movff	??_DotStar_Show+14,postinc2
  5969  001518  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  5970  00151C  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  5971  001520  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;Pattern_DotStarLED.c: 83: HSV_to_RGB(PixelFrames+i);
  5975  001524  0100               	movlb	0	; () banked
  5976  001526  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5977  001528  0D04               	mullw	4
  5978  00152A  0EB8               	movlw	low _PixelFrames
  5979  00152C  24F3               	addwf	prodl,w,c
  5980  00152E  0100               	movlb	0	; () banked
  5981  001530  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  5982  001532  0E01               	movlw	high _PixelFrames
  5983  001534  20F4               	addwfc	prodh,w,c
  5984  001536  0100               	movlb	0	; () banked
  5985  001538  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  5986  00153A  ECE3  F001         	call	_HSV_to_RGB	;wreg free
  5987  00153E  0100               	movlb	0	; () banked
  5988  001540  2BB9               	incf	DotStar_Show@i& (0+255),f,b
  5989  001542                     l3164:
  5990                           
  5991                           ; BSR set to: 0
  5992  001542  0100               	movlb	0	; () banked
  5993  001544  51B9               	movf	DotStar_Show@i& (0+255),w,b
  5994  001546  0100               	movlb	0	; () banked
  5995  001548  5DE5               	subwf	_Length& (0+255),w,b
  5996  00154A  B0D8               	btfsc	status,0,c
  5997  00154C  D77F               	goto	l3158
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;Pattern_DotStarLED.c: 90: }
  6001                           ;Pattern_DotStarLED.c: 93: SPI32_TransmitFrames(PixelFrames,Length+3);
  6002                           
  6003                           ; BSR set to: 0
  6004  00154E  0EB8               	movlw	low _PixelFrames
  6005  001550  0100               	movlb	0	; () banked
  6006  001552  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  6007  001554  0E01               	movlw	high _PixelFrames
  6008  001556  0100               	movlb	0	; () banked
  6009  001558  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  6010  00155A  0100               	movlb	0	; () banked
  6011  00155C  51E5               	movf	_Length& (0+255),w,b
  6012  00155E  0F03               	addlw	3
  6013  001560  0100               	movlb	0	; () banked
  6014  001562  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  6015  001564  ECA4  F013         	call	_SPI32_TransmitFrames	;wreg free
  6016  001568  0012               	return		;funcret
  6017  00156A                     __end_of_DotStar_Show:
  6018                           	opt stack 0
  6019                           tosu	equ	0xFFF
  6020                           tosh	equ	0xFFE
  6021                           tosl	equ	0xFFD
  6022                           pclath	equ	0xFFA
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           prodh	equ	0xFF4
  6028                           prodl	equ	0xFF3
  6029                           postinc0	equ	0xFEE
  6030                           wreg	equ	0xFE8
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _SPI32_TransmitFrames *****************
  6042 ;; Defined at:
  6043 ;;		line 239 in file "SPI32_ControlService.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  6046 ;;		 -> PixelFrames(316), 
  6047 ;;  numFrames       1   34[BANK0 ] unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6059 ;;      Params:         0       3       0       0
  6060 ;;      Locals:         0       3       0       0
  6061 ;;      Temps:          0       0       0       0
  6062 ;;      Totals:         0       6       0       0
  6063 ;;Total ram usage:        6 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:   11
  6066 ;; This function calls:
  6067 ;;		_PostSPI32ControlService
  6068 ;; This function is called by:
  6069 ;;		_DotStar_Show
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text24
  6074  002748                     __ptext24:
  6075                           	opt stack 0
  6076  002748                     _SPI32_TransmitFrames:
  6077                           	opt stack 15
  6078                           
  6079                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  6080                           
  6081                           ;incstack = 0
  6082  002748  0100               	movlb	0	; () banked
  6083  00274A  05E1               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  6084  00274C  A4D8               	btfss	status,2,c
  6085  00274E  0012               	return	
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  6089  002750  0E00               	movlw	0
  6090  002752  0100               	movlb	0	; () banked
  6091  002754  6FE4               	movwf	_FrameIndex& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  6095  002756  C080  F0D8         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  6096  00275A  C081  F0D9         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  6100  00275E  C082  F0E7         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  6104                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  6105  002762  0E09               	movlw	9
  6106  002764  0100               	movlb	0	; () banked
  6107  002766  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  6111  002768  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  6112  00276C  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  6113  002770  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  6114  002774  EC20  F014         	call	_PostSPI32ControlService	;wreg free
  6115  002778  0012               	return	
  6116  00277A                     __end_of_SPI32_TransmitFrames:
  6117                           	opt stack 0
  6118                           tosu	equ	0xFFF
  6119                           tosh	equ	0xFFE
  6120                           tosl	equ	0xFFD
  6121                           pclath	equ	0xFFA
  6122                           tblptru	equ	0xFF8
  6123                           tblptrh	equ	0xFF7
  6124                           tblptrl	equ	0xFF6
  6125                           tablat	equ	0xFF5
  6126                           prodh	equ	0xFF4
  6127                           prodl	equ	0xFF3
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1h	equ	0xFE2
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _PostPatternControlService *****************
  6141 ;; Defined at:
  6142 ;;		line 135 in file "Pattern_ControlService.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      unsigned char 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6156 ;;      Params:         0       3       0       0
  6157 ;;      Locals:         0       0       0       0
  6158 ;;      Temps:          0       0       0       0
  6159 ;;      Totals:         0       3       0       0
  6160 ;;Total ram usage:        3 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:   10
  6163 ;; This function calls:
  6164 ;;		_ES_PostToService
  6165 ;; This function is called by:
  6166 ;;		_RunPatternControlService
  6167 ;;		_RunCanRX_Service
  6168 ;;		_ES_Timer_Tick_Resp
  6169 ;;		_PostToList
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text25
  6174  0028C2                     __ptext25:
  6175                           	opt stack 0
  6176  0028C2                     _PostPatternControlService:
  6177                           	opt stack 17
  6178                           
  6179                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  6180                           
  6181                           ;incstack = 0
  6182  0028C2  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6183  0028C6  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6184  0028CA  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6185  0028CE  0100               	movlb	0	; () banked
  6186  0028D0  51E6               	movf	_MyPriority& (0+255),w,b
  6187  0028D2  EC39  F011         	call	_ES_PostToService
  6188  0028D6  0012               	return	
  6189  0028D8                     __end_of_PostPatternControlService:
  6190                           	opt stack 0
  6191                           tosu	equ	0xFFF
  6192                           tosh	equ	0xFFE
  6193                           tosl	equ	0xFFD
  6194                           pclath	equ	0xFFA
  6195                           tblptru	equ	0xFF8
  6196                           tblptrh	equ	0xFF7
  6197                           tblptrl	equ	0xFF6
  6198                           tablat	equ	0xFF5
  6199                           prodh	equ	0xFF4
  6200                           prodl	equ	0xFF3
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           postdec1	equ	0xFE5
  6204                           fsr1h	equ	0xFE2
  6205                           fsr1l	equ	0xFE1
  6206                           indf2	equ	0xFDF
  6207                           postinc2	equ	0xFDE
  6208                           postdec2	equ	0xFDD
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _PostSPI32ControlService *****************
  6214 ;; Defined at:
  6215 ;;		line 117 in file "SPI32_ControlService.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      unsigned char 
  6222 ;; Registers used:
  6223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6229 ;;      Params:         0       3       0       0
  6230 ;;      Locals:         0       0       0       0
  6231 ;;      Temps:          0       0       0       0
  6232 ;;      Totals:         0       3       0       0
  6233 ;;Total ram usage:        3 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:   10
  6236 ;; This function calls:
  6237 ;;		_ES_PostToService
  6238 ;; This function is called by:
  6239 ;;		_SPI32_TransmitFrames
  6240 ;;		_ES_Timer_Tick_Resp
  6241 ;;		_PostToList
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           	psect	text26
  6246  002840                     __ptext26:
  6247                           	opt stack 0
  6248  002840                     _PostSPI32ControlService:
  6249                           	opt stack 0
  6250                           
  6251                           ;Skip over the trampoline to the duplicate function for level 2
  6252  002840  B25C               	btfsc	btemp,1,c
  6253  002842  EF6C  F014         	goto	i2_PostSPI32ControlService
  6254  002846                     _PostSPI32ControlService$intlevel0:
  6255                           	opt stack 17
  6256                           
  6257                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6258                           
  6259                           ;incstack = 0
  6260  002846  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  6261  00284A  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6262  00284E  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6263  002852  0100               	movlb	0	; () banked
  6264  002854  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6265  002856  EC39  F011         	call	_ES_PostToService
  6266  00285A  0012               	return	
  6267  00285C                     __end_of_PostSPI32ControlService:
  6268                           	opt stack 0
  6269                           tosu	equ	0xFFF
  6270                           tosh	equ	0xFFE
  6271                           tosl	equ	0xFFD
  6272                           pclath	equ	0xFFA
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           postinc0	equ	0xFEE
  6280                           wreg	equ	0xFE8
  6281                           postdec1	equ	0xFE5
  6282                           fsr1h	equ	0xFE2
  6283                           fsr1l	equ	0xFE1
  6284                           indf2	equ	0xFDF
  6285                           postinc2	equ	0xFDE
  6286                           postdec2	equ	0xFDD
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function _HSV_to_RGB *****************
  6292 ;; Defined at:
  6293 ;;		line 49 in file "Pattern_HSV_Convert.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  6296 ;;		 -> PixelFrames(316), 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  v               2   67[BANK0 ] unsigned int 
  6299 ;;  p               2   65[BANK0 ] unsigned int 
  6300 ;;  s               2   63[BANK0 ] unsigned int 
  6301 ;;  t               2   59[BANK0 ] unsigned int 
  6302 ;;  q               2   57[BANK0 ] unsigned int 
  6303 ;;  b               2   55[BANK0 ] unsigned int 
  6304 ;;  g               2   53[BANK0 ] unsigned int 
  6305 ;;  r               2   51[BANK0 ] unsigned int 
  6306 ;;  fpart           2   49[BANK0 ] unsigned int 
  6307 ;;  region          2   47[BANK0 ] unsigned int 
  6308 ;;  h               2   45[BANK0 ] unsigned int 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      void 
  6311 ;; Registers used:
  6312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6318 ;;      Params:         0       2       0       0
  6319 ;;      Locals:         0      24       0       0
  6320 ;;      Temps:          0      24       0       0
  6321 ;;      Totals:         0      50       0       0
  6322 ;;Total ram usage:       50 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    8
  6325 ;; This function calls:
  6326 ;;		___lwdiv
  6327 ;;		___wmul
  6328 ;; This function is called by:
  6329 ;;		_DotStar_Show
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text27
  6334  0003C6                     __ptext27:
  6335                           	opt stack 0
  6336  0003C6                     _HSV_to_RGB:
  6337                           	opt stack 18
  6338                           
  6339                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  6340                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  6341                           
  6342                           ;incstack = 0
  6343  0003C6  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6344  0003CA  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6345  0003CE  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6346  0003D2  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  6347  0003D6  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  6348  0003DA  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  6349  0003DE  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  6350  0003E2  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  6351  0003E6  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  6352  0003EA  0100               	movlb	0	; () banked
  6353  0003EC  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6354  0003EE  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  6355  0003F2  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  6359  0003F6  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6360  0003FA  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6361  0003FE  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6362  000402  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6363  000406  0EF0               	movlw	240
  6364  000408  0100               	movlb	0	; () banked
  6365  00040A  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6366  00040C  0100               	movlb	0	; () banked
  6367  00040E  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  6368  000410  0100               	movlb	0	; () banked
  6369  000412  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  6373  000414  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6374  000418  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6375  00041C  0E04               	movlw	4
  6376  00041E  0100               	movlb	0	; () banked
  6377  000420  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  6378  000422                     u1545:
  6379  000422  0100               	movlb	0	; () banked
  6380  000424  90D8               	bcf	status,0,c
  6381  000426  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  6382  000428  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  6383  00042A  0100               	movlb	0	; () banked
  6384  00042C  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  6385  00042E  D7F9               	goto	u1545
  6386  000430  0100               	movlb	0	; () banked
  6387  000432  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6388  000434  0100               	movlb	0	; () banked
  6389  000436  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  6390  000438  0100               	movlb	0	; () banked
  6391  00043A  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6392  00043C  0100               	movlb	0	; () banked
  6393  00043E  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  6397  000440  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6398  000444  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6399  000448  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6400  00044C  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6401  000450  0E0F               	movlw	15
  6402  000452  0100               	movlb	0	; () banked
  6403  000454  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6404  000456  0100               	movlb	0	; () banked
  6405  000458  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  6406  00045A  0100               	movlb	0	; () banked
  6407  00045C  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  6411  00045E  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  6412  000462  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  6413  000466  0100               	movlb	0	; () banked
  6414  000468  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  6415  00046A  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  6416  00046C  0EF0               	movlw	240
  6417  00046E  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6418  000470  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6419  000472  0B0F               	andlw	15
  6420  000474  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6421  000476  0EF0               	movlw	240
  6422  000478  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  6423  00047A  0100               	movlb	0	; () banked
  6424  00047C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6425  00047E  0100               	movlb	0	; () banked
  6426  000480  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  6427  000482  0100               	movlb	0	; () banked
  6428  000484  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6429  000486  0100               	movlb	0	; () banked
  6430  000488  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  6434  00048A  0100               	movlb	0	; () banked
  6435  00048C  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  6436  00048E  0100               	movlb	0	; () banked
  6437  000490  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  6438  000492  A4D8               	btfss	status,2,c
  6439  000494  D00D               	goto	l2878
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  6443  000496  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6444  00049A  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6445  00049E  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  6446  0004A2  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  6447  0004A6  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  6448  0004AA  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  6449                           
  6450                           ;Pattern_HSV_Convert.c: 61: }
  6451  0004AE  D129               	goto	l2898
  6452  0004B0                     l2878:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;Pattern_HSV_Convert.c: 63: else{
  6456                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  6457  0004B0  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  6458  0004B4  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  6459  0004B8  0E00               	movlw	0
  6460  0004BA  0100               	movlb	0	; () banked
  6461  0004BC  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  6462  0004BE  0E2B               	movlw	43
  6463  0004C0  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  6464  0004C2  ECFD  F010         	call	___lwdiv	;wreg free
  6465  0004C6  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  6466  0004CA  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  6467                           
  6468                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6469  0004CE  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  6470  0004D2  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  6471  0004D6  0E00               	movlw	0
  6472  0004D8  0100               	movlb	0	; () banked
  6473  0004DA  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6474  0004DC  0E2B               	movlw	43
  6475  0004DE  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6476  0004E0  EC6F  F013         	call	___wmul	;wreg free
  6477  0004E4  0100               	movlb	0	; () banked
  6478  0004E6  1F66               	comf	?___wmul& (0+255),f,b
  6479  0004E8  0100               	movlb	0	; () banked
  6480  0004EA  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6481  0004EC  0100               	movlb	0	; () banked
  6482  0004EE  4B66               	infsnz	?___wmul& (0+255),f,b
  6483  0004F0  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6484  0004F2  0100               	movlb	0	; () banked
  6485  0004F4  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  6486  0004F6  0100               	movlb	0	; () banked
  6487  0004F8  2566               	addwf	?___wmul& (0+255),w,b
  6488  0004FA  0100               	movlb	0	; () banked
  6489  0004FC  6F9D               	movwf	_HSV_to_RGB$2054& (0+255),b
  6490  0004FE  0100               	movlb	0	; () banked
  6491  000500  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  6492  000502  0100               	movlb	0	; () banked
  6493  000504  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6494  000506  0100               	movlb	0	; () banked
  6495  000508  6F9E               	movwf	(_HSV_to_RGB$2054+1)& (0+255),b
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6499  00050A  C09D  F066         	movff	_HSV_to_RGB$2054,___wmul@multiplier
  6500  00050E  C09E  F067         	movff	_HSV_to_RGB$2054+1,___wmul@multiplier+1
  6501  000512  0E00               	movlw	0
  6502  000514  0100               	movlb	0	; () banked
  6503  000516  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6504  000518  0E06               	movlw	6
  6505  00051A  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6506  00051C  EC6F  F013         	call	___wmul	;wreg free
  6507  000520  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  6508  000524  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  6509                           
  6510                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  6511  000528  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6512  00052C  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6513  000530  0100               	movlb	0	; () banked
  6514  000532  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6515  000534  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6516  000536  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6517  000538  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6518  00053A  0EFF               	movlw	255
  6519  00053C  0100               	movlb	0	; () banked
  6520  00053E  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6521  000540  0100               	movlb	0	; () banked
  6522  000542  6F66               	movwf	___wmul@multiplier& (0+255),b
  6523  000544  0E00               	movlw	0
  6524  000546  0100               	movlb	0	; () banked
  6525  000548  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6526  00054A  0100               	movlb	0	; () banked
  6527  00054C  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6528  00054E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6529  000552  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6530  000556  EC6F  F013         	call	___wmul	;wreg free
  6531  00055A  0100               	movlb	0	; () banked
  6532  00055C  5167               	movf	(?___wmul+1)& (0+255),w,b
  6533  00055E  0100               	movlb	0	; () banked
  6534  000560  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  6535  000562  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6539  000564  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  6540  000568  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  6541  00056C  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  6542  000570  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  6543  000574  EC6F  F013         	call	___wmul	;wreg free
  6544  000578  0100               	movlb	0	; () banked
  6545  00057A  C067  F066         	movff	?___wmul+1,?___wmul
  6546  00057E  0100               	movlb	0	; () banked
  6547  000580  6B67               	clrf	(?___wmul+1)& (0+255),b
  6548  000582  0100               	movlb	0	; () banked
  6549  000584  1F66               	comf	?___wmul& (0+255),f,b
  6550  000586  0100               	movlb	0	; () banked
  6551  000588  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6552  00058A  0100               	movlb	0	; () banked
  6553  00058C  4B66               	infsnz	?___wmul& (0+255),f,b
  6554  00058E  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6555  000590  0EFF               	movlw	255
  6556  000592  0100               	movlb	0	; () banked
  6557  000594  2566               	addwf	?___wmul& (0+255),w,b
  6558  000596  0100               	movlb	0	; () banked
  6559  000598  6F9D               	movwf	_HSV_to_RGB$2054& (0+255),b
  6560  00059A  0E00               	movlw	0
  6561  00059C  0100               	movlb	0	; () banked
  6562  00059E  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6563  0005A0  0100               	movlb	0	; () banked
  6564  0005A2  6F9E               	movwf	(_HSV_to_RGB$2054+1)& (0+255),b
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6568  0005A4  C09D  F066         	movff	_HSV_to_RGB$2054,___wmul@multiplier
  6569  0005A8  C09E  F067         	movff	_HSV_to_RGB$2054+1,___wmul@multiplier+1
  6570  0005AC  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6571  0005B0  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6572  0005B4  EC6F  F013         	call	___wmul	;wreg free
  6573  0005B8  0100               	movlb	0	; () banked
  6574  0005BA  5167               	movf	(?___wmul+1)& (0+255),w,b
  6575  0005BC  0100               	movlb	0	; () banked
  6576  0005BE  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  6577  0005C0  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6581  0005C2  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  6582  0005C6  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  6583  0005CA  0100               	movlb	0	; () banked
  6584  0005CC  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6585  0005CE  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6586  0005D0  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6587  0005D2  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6588  0005D4  0EFF               	movlw	255
  6589  0005D6  0100               	movlb	0	; () banked
  6590  0005D8  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6591  0005DA  0100               	movlb	0	; () banked
  6592  0005DC  6F66               	movwf	___wmul@multiplier& (0+255),b
  6593  0005DE  0E00               	movlw	0
  6594  0005E0  0100               	movlb	0	; () banked
  6595  0005E2  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6596  0005E4  0100               	movlb	0	; () banked
  6597  0005E6  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6598  0005E8  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  6599  0005EC  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  6600  0005F0  EC6F  F013         	call	___wmul	;wreg free
  6601  0005F4  0100               	movlb	0	; () banked
  6602  0005F6  C067  F066         	movff	?___wmul+1,?___wmul
  6603  0005FA  0100               	movlb	0	; () banked
  6604  0005FC  6B67               	clrf	(?___wmul+1)& (0+255),b
  6605  0005FE  0100               	movlb	0	; () banked
  6606  000600  1F66               	comf	?___wmul& (0+255),f,b
  6607  000602  0100               	movlb	0	; () banked
  6608  000604  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6609  000606  0100               	movlb	0	; () banked
  6610  000608  4B66               	infsnz	?___wmul& (0+255),f,b
  6611  00060A  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6612  00060C  0EFF               	movlw	255
  6613  00060E  0100               	movlb	0	; () banked
  6614  000610  2566               	addwf	?___wmul& (0+255),w,b
  6615  000612  0100               	movlb	0	; () banked
  6616  000614  6F9D               	movwf	_HSV_to_RGB$2054& (0+255),b
  6617  000616  0E00               	movlw	0
  6618  000618  0100               	movlb	0	; () banked
  6619  00061A  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6620  00061C  0100               	movlb	0	; () banked
  6621  00061E  6F9E               	movwf	(_HSV_to_RGB$2054+1)& (0+255),b
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6625  000620  C09D  F066         	movff	_HSV_to_RGB$2054,___wmul@multiplier
  6626  000624  C09E  F067         	movff	_HSV_to_RGB$2054+1,___wmul@multiplier+1
  6627  000628  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6628  00062C  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6629  000630  EC6F  F013         	call	___wmul	;wreg free
  6630  000634  0100               	movlb	0	; () banked
  6631  000636  5167               	movf	(?___wmul+1)& (0+255),w,b
  6632  000638  0100               	movlb	0	; () banked
  6633  00063A  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  6634  00063C  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  6635                           
  6636                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  6637  00063E  D046               	goto	l2896
  6638  000640                     l643:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  6642  000640  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6643  000644  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6644  000648  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  6645  00064C  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  6646  000650  D008               	goto	L15
  6647  000652                     l645:
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  6651  000652  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  6652  000656  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  6653  00065A  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6654  00065E  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6655  000662                     L15:
  6656  000662  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  6657  000666  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  6658  00066A  D04B               	goto	l2898
  6659  00066C                     l646:
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  6663  00066C  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6664  000670  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6665  000674  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6666  000678  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6667  00067C  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  6668  000680  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  6669  000684  D03E               	goto	l2898
  6670  000686                     l647:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  6674  000686  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  6675  00068A  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  6676  00068E  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  6677  000692  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  6678  000696  D008               	goto	L16
  6679  000698                     l648:
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  6683  000698  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  6684  00069C  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  6685  0006A0  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6686  0006A4  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6687  0006A8                     L16:
  6688  0006A8  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6689  0006AC  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6690  0006B0  D028               	goto	l2898
  6691  0006B2                     l649:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  6695  0006B2  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6696  0006B6  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6697  0006BA  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  6698  0006BE  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  6699  0006C2  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  6700  0006C6  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;Pattern_HSV_Convert.c: 88: }
  6704  0006CA  D01B               	goto	l2898
  6705  0006CC                     l2896:
  6706                           
  6707                           ; BSR set to: 0
  6708  0006CC  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  6709  0006D0  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  6710                           
  6711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6712                           ; Switch size 1, requested type "space"
  6713                           ; Number of cases is 1, Range of values is 0 to 0
  6714                           ; switch strategies available:
  6715                           ; Name         Instructions Cycles
  6716                           ; simple_byte            4     3 (average)
  6717                           ;	Chosen strategy is simple_byte
  6718  0006D4  0100               	movlb	0	; () banked
  6719  0006D6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6720  0006D8  0A00               	xorlw	0	; case 0
  6721  0006DA  A4D8               	btfss	status,2,c
  6722  0006DC  D7EA               	goto	l649
  6723                           
  6724                           ; BSR set to: 0
  6725                           ; Switch size 1, requested type "space"
  6726                           ; Number of cases is 5, Range of values is 0 to 4
  6727                           ; switch strategies available:
  6728                           ; Name         Instructions Cycles
  6729                           ; simple_byte           16     9 (average)
  6730                           ;	Chosen strategy is simple_byte
  6731  0006DE  0100               	movlb	0	; () banked
  6732  0006E0  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6733  0006E2  0A00               	xorlw	0	; case 0
  6734  0006E4  B4D8               	btfsc	status,2,c
  6735  0006E6  D7AC               	goto	l643
  6736  0006E8  0A01               	xorlw	1	; case 1
  6737  0006EA  B4D8               	btfsc	status,2,c
  6738  0006EC  D7B2               	goto	l645
  6739  0006EE  0A03               	xorlw	3	; case 2
  6740  0006F0  B4D8               	btfsc	status,2,c
  6741  0006F2  D7BC               	goto	l646
  6742  0006F4  0A01               	xorlw	1	; case 3
  6743  0006F6  B4D8               	btfsc	status,2,c
  6744  0006F8  D7C6               	goto	l647
  6745  0006FA  0A07               	xorlw	7	; case 4
  6746  0006FC  B4D8               	btfsc	status,2,c
  6747  0006FE  D7CC               	goto	l648
  6748  000700  D7D8               	goto	l649
  6749  000702                     l2898:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;Pattern_HSV_Convert.c: 89: }
  6753                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  6754  000702  0100               	movlb	0	; () banked
  6755  000704  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  6756  000706  0100               	movlb	0	; () banked
  6757  000708  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  6758  00070A  0100               	movlb	0	; () banked
  6759  00070C  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  6760  00070E  0100               	movlb	0	; () banked
  6761  000710  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  6762  000712  0100               	movlb	0	; () banked
  6763  000714  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  6764  000716  0100               	movlb	0	; () banked
  6765  000718  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6766  00071A  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  6767  00071E  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  6768  000722  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  6769  000726  0100               	movlb	0	; () banked
  6770  000728  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  6771  00072A  0100               	movlb	0	; () banked
  6772  00072C  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  6773  00072E  0100               	movlb	0	; () banked
  6774  000730  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  6775  000732  0100               	movlb	0	; () banked
  6776  000734  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  6777  000736  0100               	movlb	0	; () banked
  6778  000738  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  6779  00073A  0100               	movlb	0	; () banked
  6780  00073C  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  6781  00073E  0100               	movlb	0	; () banked
  6782  000740  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  6783  000742  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  6784  000746  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  6785  00074A  0100               	movlb	0	; () banked
  6786  00074C  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  6787  00074E  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  6788  000750  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6789  000754  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6790  000758  0E00               	movlw	0
  6791  00075A  14DE               	andwf	postinc2,w,c
  6792  00075C  0100               	movlb	0	; () banked
  6793  00075E  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  6794  000760  0E00               	movlw	0
  6795  000762  14DE               	andwf	postinc2,w,c
  6796  000764  0100               	movlb	0	; () banked
  6797  000766  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  6798  000768  0E00               	movlw	0
  6799  00076A  14DE               	andwf	postinc2,w,c
  6800  00076C  0100               	movlb	0	; () banked
  6801  00076E  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  6802  000770  0EFF               	movlw	255
  6803  000772  14DE               	andwf	postinc2,w,c
  6804  000774  0100               	movlb	0	; () banked
  6805  000776  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  6806  000778  0100               	movlb	0	; () banked
  6807  00077A  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  6808  00077C  0100               	movlb	0	; () banked
  6809  00077E  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  6810  000780  0100               	movlb	0	; () banked
  6811  000782  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  6812  000784  0100               	movlb	0	; () banked
  6813  000786  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  6814  000788  0100               	movlb	0	; () banked
  6815  00078A  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  6816  00078C  0100               	movlb	0	; () banked
  6817  00078E  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  6818  000790  0100               	movlb	0	; () banked
  6819  000792  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  6820  000794  0100               	movlb	0	; () banked
  6821  000796  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  6822  000798  0100               	movlb	0	; () banked
  6823  00079A  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  6824  00079C  0100               	movlb	0	; () banked
  6825  00079E  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  6826  0007A0  0100               	movlb	0	; () banked
  6827  0007A2  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  6828  0007A4  0100               	movlb	0	; () banked
  6829  0007A6  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  6830  0007A8  0100               	movlb	0	; () banked
  6831  0007AA  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6832  0007AC  0100               	movlb	0	; () banked
  6833  0007AE  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  6834  0007B0  0100               	movlb	0	; () banked
  6835  0007B2  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  6836  0007B4  0100               	movlb	0	; () banked
  6837  0007B6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6838  0007B8  0100               	movlb	0	; () banked
  6839  0007BA  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  6840  0007BC  0100               	movlb	0	; () banked
  6841  0007BE  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  6842  0007C0  0100               	movlb	0	; () banked
  6843  0007C2  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  6844  0007C4  0100               	movlb	0	; () banked
  6845  0007C6  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  6846  0007C8  0100               	movlb	0	; () banked
  6847  0007CA  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  6848  0007CC  0100               	movlb	0	; () banked
  6849  0007CE  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  6850  0007D0  0100               	movlb	0	; () banked
  6851  0007D2  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  6852  0007D4  0100               	movlb	0	; () banked
  6853  0007D6  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  6854  0007D8  0100               	movlb	0	; () banked
  6855  0007DA  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  6856  0007DC  0100               	movlb	0	; () banked
  6857  0007DE  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  6858  0007E0  0100               	movlb	0	; () banked
  6859  0007E2  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  6860  0007E4  0100               	movlb	0	; () banked
  6861  0007E6  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  6862  0007E8  0100               	movlb	0	; () banked
  6863  0007EA  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  6864  0007EC  0100               	movlb	0	; () banked
  6865  0007EE  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  6866  0007F0  0E00               	movlw	0
  6867  0007F2  0100               	movlb	0	; () banked
  6868  0007F4  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  6869  0007F6  0100               	movlb	0	; () banked
  6870  0007F8  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  6871  0007FA  0E00               	movlw	0
  6872  0007FC  0100               	movlb	0	; () banked
  6873  0007FE  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  6874  000800  0100               	movlb	0	; () banked
  6875  000802  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  6876  000804  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6877  000808  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6878  00080C  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  6879  000810  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  6880  000814  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  6881  000818  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  6882  00081C  0012               	return	
  6883  00081E                     __end_of_HSV_to_RGB:
  6884                           	opt stack 0
  6885                           tosu	equ	0xFFF
  6886                           tosh	equ	0xFFE
  6887                           tosl	equ	0xFFD
  6888                           pclath	equ	0xFFA
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           postinc0	equ	0xFEE
  6896                           wreg	equ	0xFE8
  6897                           postdec1	equ	0xFE5
  6898                           fsr1h	equ	0xFE2
  6899                           fsr1l	equ	0xFE1
  6900                           indf2	equ	0xFDF
  6901                           postinc2	equ	0xFDE
  6902                           postdec2	equ	0xFDD
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function ___lwdiv *****************
  6908 ;; Defined at:
  6909 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/lwdiv.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  dividend        2   12[BANK0 ] unsigned int 
  6912 ;;  divisor         2   14[BANK0 ] unsigned int 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  quotient        2   16[BANK0 ] unsigned int 
  6915 ;;  counter         1   18[BANK0 ] unsigned char 
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  2   12[BANK0 ] unsigned int 
  6918 ;; Registers used:
  6919 ;;		wreg, status,2, status,0
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6925 ;;      Params:         0       4       0       0
  6926 ;;      Locals:         0       3       0       0
  6927 ;;      Temps:          0       0       0       0
  6928 ;;      Totals:         0       7       0       0
  6929 ;;Total ram usage:        7 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    7
  6932 ;; This function calls:
  6933 ;;		Nothing
  6934 ;; This function is called by:
  6935 ;;		_UpdatePattern
  6936 ;;		_HSV_to_RGB
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text28
  6941  0021FA                     __ptext28:
  6942                           	opt stack 0
  6943  0021FA                     ___lwdiv:
  6944                           	opt stack 18
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;incstack = 0
  6948  0021FA  0E00               	movlw	0
  6949  0021FC  0100               	movlb	0	; () banked
  6950  0021FE  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6951  002200  0E00               	movlw	0
  6952  002202  6F70               	movwf	___lwdiv@quotient& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955  002204  0100               	movlb	0	; () banked
  6956  002206  516E               	movf	___lwdiv@divisor& (0+255),w,b
  6957  002208  0100               	movlb	0	; () banked
  6958  00220A  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6959  00220C  B4D8               	btfsc	status,2,c
  6960  00220E  D02C               	goto	l1202
  6961                           
  6962                           ; BSR set to: 0
  6963  002210  0E01               	movlw	1
  6964  002212  0100               	movlb	0	; () banked
  6965  002214  6F72               	movwf	___lwdiv@counter& (0+255),b
  6966  002216  D006               	goto	l2808
  6967  002218                     l2806:
  6968                           
  6969                           ; BSR set to: 0
  6970  002218  0100               	movlb	0	; () banked
  6971  00221A  90D8               	bcf	status,0,c
  6972  00221C  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  6973  00221E  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6974  002220  0100               	movlb	0	; () banked
  6975  002222  2B72               	incf	___lwdiv@counter& (0+255),f,b
  6976  002224                     l2808:
  6977                           
  6978                           ; BSR set to: 0
  6979  002224  0100               	movlb	0	; () banked
  6980  002226  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6981  002228  D7F7               	goto	l2806
  6982  00222A                     l2810:
  6983                           
  6984                           ; BSR set to: 0
  6985  00222A  0100               	movlb	0	; () banked
  6986  00222C  90D8               	bcf	status,0,c
  6987  00222E  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  6988  002230  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6989                           
  6990                           ; BSR set to: 0
  6991  002232  0100               	movlb	0	; () banked
  6992  002234  516E               	movf	___lwdiv@divisor& (0+255),w,b
  6993  002236  0100               	movlb	0	; () banked
  6994  002238  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  6995  00223A  0100               	movlb	0	; () banked
  6996  00223C  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6997  00223E  0100               	movlb	0	; () banked
  6998  002240  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6999  002242  A0D8               	btfss	status,0,c
  7000  002244  D00A               	goto	l2818
  7001                           
  7002                           ; BSR set to: 0
  7003  002246  0100               	movlb	0	; () banked
  7004  002248  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7005  00224A  0100               	movlb	0	; () banked
  7006  00224C  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  7007  00224E  0100               	movlb	0	; () banked
  7008  002250  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7009  002252  0100               	movlb	0	; () banked
  7010  002254  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7011                           
  7012                           ; BSR set to: 0
  7013  002256  0100               	movlb	0	; () banked
  7014  002258  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  7015  00225A                     l2818:
  7016                           
  7017                           ; BSR set to: 0
  7018  00225A  0100               	movlb	0	; () banked
  7019  00225C  90D8               	bcf	status,0,c
  7020  00225E  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7021  002260  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 0
  7024  002262  0100               	movlb	0	; () banked
  7025  002264  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  7026  002266  D7E1               	goto	l2810
  7027  002268                     l1202:
  7028                           
  7029                           ; BSR set to: 0
  7030  002268  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  7031  00226C  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7032                           
  7033                           ; BSR set to: 0
  7034  002270  0012               	return		;funcret
  7035  002272                     __end_of___lwdiv:
  7036                           	opt stack 0
  7037                           tosu	equ	0xFFF
  7038                           tosh	equ	0xFFE
  7039                           tosl	equ	0xFFD
  7040                           pclath	equ	0xFFA
  7041                           tblptru	equ	0xFF8
  7042                           tblptrh	equ	0xFF7
  7043                           tblptrl	equ	0xFF6
  7044                           tablat	equ	0xFF5
  7045                           prodh	equ	0xFF4
  7046                           prodl	equ	0xFF3
  7047                           postinc0	equ	0xFEE
  7048                           wreg	equ	0xFE8
  7049                           postdec1	equ	0xFE5
  7050                           fsr1h	equ	0xFE2
  7051                           fsr1l	equ	0xFE1
  7052                           indf2	equ	0xFDF
  7053                           postinc2	equ	0xFDE
  7054                           postdec2	equ	0xFDD
  7055                           fsr2h	equ	0xFDA
  7056                           fsr2l	equ	0xFD9
  7057                           status	equ	0xFD8
  7058                           
  7059 ;; *************** function _PausePattern *****************
  7060 ;; Defined at:
  7061 ;;		line 296 in file "Pattern_ControlService.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;		None
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;		None
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  1    wreg      void 
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7075 ;;      Params:         0       0       0       0
  7076 ;;      Locals:         0       0       0       0
  7077 ;;      Temps:          0       0       0       0
  7078 ;;      Totals:         0       0       0       0
  7079 ;;Total ram usage:        0 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:    8
  7082 ;; This function calls:
  7083 ;;		_ES_Timer_StopTimer
  7084 ;; This function is called by:
  7085 ;;		_RunPatternControlService
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text29
  7090  00293E                     __ptext29:
  7091                           	opt stack 0
  7092  00293E                     _PausePattern:
  7093                           	opt stack 20
  7094                           
  7095                           ;Pattern_ControlService.c: 298: ES_Timer_StopTimer(0);
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;incstack = 0
  7099  00293E  0E00               	movlw	0
  7100  002940  EC62  F012         	call	_ES_Timer_StopTimer
  7101  002944  0012               	return		;funcret
  7102  002946                     __end_of_PausePattern:
  7103                           	opt stack 0
  7104                           tosu	equ	0xFFF
  7105                           tosh	equ	0xFFE
  7106                           tosl	equ	0xFFD
  7107                           pclath	equ	0xFFA
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           postinc0	equ	0xFEE
  7115                           wreg	equ	0xFE8
  7116                           postdec1	equ	0xFE5
  7117                           fsr1h	equ	0xFE2
  7118                           fsr1l	equ	0xFE1
  7119                           indf2	equ	0xFDF
  7120                           postinc2	equ	0xFDE
  7121                           postdec2	equ	0xFDD
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126 ;; *************** function _ES_Timer_StopTimer *****************
  7127 ;; Defined at:
  7128 ;;		line 205 in file "ES_Timers.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  Num             1    wreg     unsigned char 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;  Num             1    4[BANK0 ] unsigned char 
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      enum E15477
  7135 ;; Registers used:
  7136 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7142 ;;      Params:         0       0       0       0
  7143 ;;      Locals:         0       1       0       0
  7144 ;;      Temps:          0       4       0       0
  7145 ;;      Totals:         0       5       0       0
  7146 ;;Total ram usage:        5 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    7
  7149 ;; This function calls:
  7150 ;;		Nothing
  7151 ;; This function is called by:
  7152 ;;		_StopPattern
  7153 ;;		_PausePattern
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text30
  7158  0024C4                     __ptext30:
  7159                           	opt stack 0
  7160  0024C4                     _ES_Timer_StopTimer:
  7161                           	opt stack 20
  7162                           
  7163                           ;incstack = 0
  7164                           ;ES_Timer_StopTimer@Num stored from wreg
  7165  0024C4  0100               	movlb	0	; () banked
  7166  0024C6  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  7167                           
  7168                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  7169  0024C8  0E0F               	movlw	15
  7170  0024CA  0100               	movlb	0	; () banked
  7171  0024CC  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  7172  0024CE  D001               	goto	l3076
  7173  0024D0  0012               	return	
  7174  0024D2                     l3076:
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  7178  0024D2  0100               	movlb	0	; () banked
  7179  0024D4  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  7180  0024D6  0D02               	mullw	2
  7181  0024D8  0E01               	movlw	low _BitNum2SetMask
  7182  0024DA  24F3               	addwf	prodl,w,c
  7183  0024DC  6EF6               	movwf	tblptrl,c
  7184  0024DE  0E03               	movlw	high _BitNum2SetMask
  7185  0024E0  20F4               	addwfc	prodh,w,c
  7186  0024E2  6EF7               	movwf	tblptrh,c
  7187  0024E4                     	if	0	;There are less than 3 active tblptr bytes
  7188  0024E4                     	endif
  7189  0024E4  0009               	tblrd		*+
  7190  0024E6  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  7191  0024EA  0009               	tblrd		*+
  7192  0024EC  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  7193  0024F0  0100               	movlb	0	; () banked
  7194  0024F2  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  7195  0024F4  0100               	movlb	0	; () banked
  7196  0024F6  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  7197  0024F8  0100               	movlb	0	; () banked
  7198  0024FA  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  7199  0024FC  0100               	movlb	0	; () banked
  7200  0024FE  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  7201  002500  0100               	movlb	0	; () banked
  7202  002502  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  7203  002504  0100               	movlb	0	; () banked
  7204  002506  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  7205  002508  0100               	movlb	0	; () banked
  7206  00250A  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  7207  00250C  0100               	movlb	0	; () banked
  7208  00250E  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  7209  002510  0012               	return	
  7210  002512                     __end_of_ES_Timer_StopTimer:
  7211                           	opt stack 0
  7212                           tosu	equ	0xFFF
  7213                           tosh	equ	0xFFE
  7214                           tosl	equ	0xFFD
  7215                           pclath	equ	0xFFA
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           postinc0	equ	0xFEE
  7223                           wreg	equ	0xFE8
  7224                           postdec1	equ	0xFE5
  7225                           fsr1h	equ	0xFE2
  7226                           fsr1l	equ	0xFE1
  7227                           indf2	equ	0xFDF
  7228                           postinc2	equ	0xFDE
  7229                           postdec2	equ	0xFDD
  7230                           fsr2h	equ	0xFDA
  7231                           fsr2l	equ	0xFD9
  7232                           status	equ	0xFD8
  7233                           
  7234 ;; *************** function _SetPattern *****************
  7235 ;; Defined at:
  7236 ;;		line 248 in file "Pattern_ControlService.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;  PatternID       1    wreg     unsigned char 
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  PatternID       1    0[BANK0 ] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  1    wreg      void 
  7243 ;; Registers used:
  7244 ;;		wreg
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7250 ;;      Params:         0       0       0       0
  7251 ;;      Locals:         0       1       0       0
  7252 ;;      Temps:          0       0       0       0
  7253 ;;      Totals:         0       1       0       0
  7254 ;;Total ram usage:        1 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    7
  7257 ;; This function calls:
  7258 ;;		Nothing
  7259 ;; This function is called by:
  7260 ;;		_RunCanRX_Service
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text31
  7265  00292C                     __ptext31:
  7266                           	opt stack 0
  7267  00292C                     _SetPattern:
  7268                           	opt stack 21
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;incstack = 0
  7272                           ;SetPattern@PatternID stored from wreg
  7273  00292C  0100               	movlb	0	; () banked
  7274  00292E  6F60               	movwf	SetPattern@PatternID& (0+255),b
  7275                           
  7276                           ;Pattern_ControlService.c: 249: PatternConfigs[1] = PatternID;
  7277  002930  C060  F0FC         	movff	SetPattern@PatternID,_PatternConfigs+1
  7278  002934  0012               	return		;funcret
  7279  002936                     __end_of_SetPattern:
  7280                           	opt stack 0
  7281                           tosu	equ	0xFFF
  7282                           tosh	equ	0xFFE
  7283                           tosl	equ	0xFFD
  7284                           pclath	equ	0xFFA
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           postinc0	equ	0xFEE
  7292                           wreg	equ	0xFE8
  7293                           postdec1	equ	0xFE5
  7294                           fsr1h	equ	0xFE2
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _InitPins *****************
  7304 ;; Defined at:
  7305 ;;		line 267 in file "CanRX_Service.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;		None
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;		None
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7319 ;;      Params:         0       0       0       0
  7320 ;;      Locals:         0       0       0       0
  7321 ;;      Temps:          0       0       0       0
  7322 ;;      Totals:         0       0       0       0
  7323 ;;Total ram usage:        0 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    7
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_RunCanRX_Service
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text32
  7334  002892                     __ptext32:
  7335                           	opt stack 0
  7336  002892                     _InitPins:
  7337                           	opt stack 21
  7338                           
  7339                           ;CanRX_Service.c: 270: PORTB = 0x00;
  7340                           
  7341                           ;incstack = 0
  7342  002892  0E00               	movlw	0
  7343  002894  6E81               	movwf	3969,c	;volatile
  7344                           
  7345                           ;CanRX_Service.c: 271: LATB = 0x00;
  7346  002896  0E00               	movlw	0
  7347  002898  6E8A               	movwf	3978,c	;volatile
  7348                           
  7349                           ;CanRX_Service.c: 272: TRISBbits.TRISB2 = 0;
  7350  00289A  9493               	bcf	3987,2,c	;volatile
  7351                           
  7352                           ;CanRX_Service.c: 273: TRISBbits.TRISB3 = 1;
  7353  00289C  8693               	bsf	3987,3,c	;volatile
  7354                           
  7355                           ;CanRX_Service.c: 276: PORTA = 0x00;
  7356  00289E  0E00               	movlw	0
  7357  0028A0  6E80               	movwf	3968,c	;volatile
  7358                           
  7359                           ;CanRX_Service.c: 277: LATA = 0x00;
  7360  0028A2  0E00               	movlw	0
  7361  0028A4  6E89               	movwf	3977,c	;volatile
  7362                           
  7363                           ;CanRX_Service.c: 278: TRISA = 0x00;
  7364  0028A6  0E00               	movlw	0
  7365  0028A8  6E92               	movwf	3986,c	;volatile
  7366  0028AA  0012               	return		;funcret
  7367  0028AC                     __end_of_InitPins:
  7368                           	opt stack 0
  7369                           tosu	equ	0xFFF
  7370                           tosh	equ	0xFFE
  7371                           tosl	equ	0xFFD
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function _InitCanHardware *****************
  7392 ;; Defined at:
  7393 ;;		line 207 in file "CanRX_Service.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;		None
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;		None
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      void 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7407 ;;      Params:         0       0       0       0
  7408 ;;      Locals:         0       0       0       0
  7409 ;;      Temps:          0       0       0       0
  7410 ;;      Totals:         0       0       0       0
  7411 ;;Total ram usage:        0 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    7
  7414 ;; This function calls:
  7415 ;;		Nothing
  7416 ;; This function is called by:
  7417 ;;		_RunCanRX_Service
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text33
  7422  002106                     __ptext33:
  7423                           	opt stack 0
  7424  002106                     _InitCanHardware:
  7425                           	opt stack 21
  7426                           
  7427                           ;CanRX_Service.c: 211: CANCON = 0x80;
  7428                           
  7429                           ;incstack = 0
  7430  002106  0E80               	movlw	128
  7431  002108  6E6F               	movwf	3951,c	;volatile
  7432  00210A                     l770:
  7433  00210A  AE6E               	btfss	3950,7,c	;volatile
  7434  00210C  D7FE               	goto	l770
  7435                           
  7436                           ;CanRX_Service.c: 214: CIOCON = 0x20;
  7437  00210E  0E20               	movlw	32
  7438  002110  6E73               	movwf	3955,c	;volatile
  7439                           
  7440                           ;CanRX_Service.c: 217: BRGCON2bits.SEG2PHTS = 1;
  7441  002112  8E71               	bsf	3953,7,c	;volatile
  7442                           
  7443                           ;CanRX_Service.c: 219: BRGCON1bits.BRP0 = 1;
  7444  002114  8070               	bsf	3952,0,c	;volatile
  7445                           
  7446                           ;CanRX_Service.c: 220: BRGCON1bits.BRP1 = 0;
  7447  002116  9270               	bcf	3952,1,c	;volatile
  7448                           
  7449                           ;CanRX_Service.c: 221: BRGCON2bits.PRSEG0 = 0;
  7450  002118  9071               	bcf	3953,0,c	;volatile
  7451                           
  7452                           ;CanRX_Service.c: 222: BRGCON2bits.PRSEG1 = 1;
  7453  00211A  8271               	bsf	3953,1,c	;volatile
  7454                           
  7455                           ;CanRX_Service.c: 223: BRGCON2bits.PRSEG2 = 1;
  7456  00211C  8471               	bsf	3953,2,c	;volatile
  7457                           
  7458                           ;CanRX_Service.c: 224: BRGCON2bits.SEG1PH0 = 1;
  7459  00211E  8671               	bsf	3953,3,c	;volatile
  7460                           
  7461                           ;CanRX_Service.c: 225: BRGCON2bits.SEG1PH1 = 0;
  7462  002120  9871               	bcf	3953,4,c	;volatile
  7463                           
  7464                           ;CanRX_Service.c: 226: BRGCON2bits.SEG1PH2 = 1;
  7465  002122  8A71               	bsf	3953,5,c	;volatile
  7466                           
  7467                           ;CanRX_Service.c: 227: BRGCON3bits.SEG2PH0 = 1;
  7468  002124  8072               	bsf	3954,0,c	;volatile
  7469                           
  7470                           ;CanRX_Service.c: 228: BRGCON1bits.SJW0 = 1;
  7471  002126  8C70               	bsf	3952,6,c	;volatile
  7472                           
  7473                           ;CanRX_Service.c: 232: RXB0CONbits.RXB0DBEN = 0;
  7474  002128  9460               	bcf	3936,2,c	;volatile
  7475                           
  7476                           ;CanRX_Service.c: 233: RXB0CONbits.RXM0 = 0;
  7477  00212A  9A60               	bcf	3936,5,c	;volatile
  7478                           
  7479                           ;CanRX_Service.c: 234: RXB0CONbits.RXM1 = 0;
  7480  00212C  9C60               	bcf	3936,6,c	;volatile
  7481                           
  7482                           ;CanRX_Service.c: 235: RXF0SIDH = 0x00;
  7483  00212E  0E00               	movlw	0
  7484  002130  010F               	movlb	15	; () banked
  7485  002132  6F00               	movwf	0,b	;volatile
  7486                           
  7487                           ;CanRX_Service.c: 236: RXF0SIDL = 0x08;
  7488  002134  0E08               	movlw	8
  7489  002136  010F               	movlb	15	; () banked
  7490  002138  6F01               	movwf	1,b	;volatile
  7491                           
  7492                           ;CanRX_Service.c: 237: RXF0EIDH = 0x00;
  7493  00213A  0E00               	movlw	0
  7494  00213C  010F               	movlb	15	; () banked
  7495  00213E  6F02               	movwf	2,b	;volatile
  7496                           
  7497                           ;CanRX_Service.c: 238: RXF0EIDL = 0x01;
  7498  002140  0E01               	movlw	1
  7499  002142  010F               	movlb	15	; () banked
  7500  002144  6F03               	movwf	3,b	;volatile
  7501                           
  7502                           ;CanRX_Service.c: 240: RXM0SIDH = 0x00;
  7503  002146  0E00               	movlw	0
  7504  002148  010F               	movlb	15	; () banked
  7505  00214A  6F18               	movwf	24,b	;volatile
  7506                           
  7507                           ;CanRX_Service.c: 241: RXM0SIDL = 0x00;
  7508  00214C  0E00               	movlw	0
  7509  00214E  010F               	movlb	15	; () banked
  7510  002150  6F19               	movwf	25,b	;volatile
  7511                           
  7512                           ;CanRX_Service.c: 242: RXM0EIDH = 0x00;
  7513  002152  0E00               	movlw	0
  7514  002154  010F               	movlb	15	; () banked
  7515  002156  6F1A               	movwf	26,b	;volatile
  7516                           
  7517                           ;CanRX_Service.c: 243: RXM0EIDL = 0x01;
  7518  002158  0E01               	movlw	1
  7519  00215A  010F               	movlb	15	; () banked
  7520  00215C  6F1B               	movwf	27,b	;volatile
  7521                           
  7522                           ;CanRX_Service.c: 247: ECANCON = 0x00;
  7523  00215E  0E00               	movlw	0
  7524  002160  6E77               	movwf	3959,c	;volatile
  7525                           
  7526                           ;CanRX_Service.c: 248: CANCON = 0b00010000;
  7527  002162  0E10               	movlw	16
  7528  002164  6E6F               	movwf	3951,c	;volatile
  7529  002166                     l773:
  7530  002166  BE6E               	btfsc	3950,7,c	;volatile
  7531  002168  D7FE               	goto	l773
  7532                           
  7533                           ;CanRX_Service.c: 252: RXB0IE = 1;
  7534  00216A  80A3               	bsf	4003,0,c	;volatile
  7535                           
  7536                           ;CanRX_Service.c: 253: ERRIE = 1;
  7537  00216C  8AA3               	bsf	4003,5,c	;volatile
  7538                           
  7539                           ;CanRX_Service.c: 254: IRXIE = 1;
  7540  00216E  8EA3               	bsf	4003,7,c	;volatile
  7541                           
  7542                           ;CanRX_Service.c: 258: RXB0IF = 0;
  7543  002170  90A4               	bcf	4004,0,c	;volatile
  7544                           
  7545                           ;CanRX_Service.c: 259: ERRIF = 0;
  7546  002172  9AA4               	bcf	4004,5,c	;volatile
  7547                           
  7548                           ;CanRX_Service.c: 260: IRXIF = 0;
  7549  002174  9EA4               	bcf	4004,7,c	;volatile
  7550                           
  7551                           ;CanRX_Service.c: 261: TXB0IE = 1;
  7552  002176  84A3               	bsf	4003,2,c	;volatile
  7553                           
  7554                           ;CanRX_Service.c: 262: TXB0IF = 0;
  7555  002178  94A4               	bcf	4004,2,c	;volatile
  7556                           
  7557                           ;CanRX_Service.c: 263: TXB0CONbits.TXREQ = 0;
  7558  00217A  010F               	movlb	15	; () banked
  7559  00217C  9740               	bcf	64,3,b	;volatile
  7560                           
  7561                           ;CanRX_Service.c: 264: RXB0CONbits.RXFUL = 0;
  7562  00217E  9E60               	bcf	3936,7,c	;volatile
  7563                           
  7564                           ; BSR set to: 15
  7565  002180  0012               	return		;funcret
  7566  002182                     __end_of_InitCanHardware:
  7567                           	opt stack 0
  7568                           tosu	equ	0xFFF
  7569                           tosh	equ	0xFFE
  7570                           tosl	equ	0xFFD
  7571                           pclath	equ	0xFFA
  7572                           tblptru	equ	0xFF8
  7573                           tblptrh	equ	0xFF7
  7574                           tblptrl	equ	0xFF6
  7575                           tablat	equ	0xFF5
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           postinc0	equ	0xFEE
  7579                           wreg	equ	0xFE8
  7580                           postdec1	equ	0xFE5
  7581                           fsr1h	equ	0xFE2
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _ES_DeQueue *****************
  7591 ;; Defined at:
  7592 ;;		line 164 in file "ES_Queue.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  7595 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  7596 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  7597 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  7600 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  7601 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  7602 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      unsigned char 
  7605 ;; Registers used:
  7606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7612 ;;      Params:         0       4       0       0
  7613 ;;      Locals:         0       4       0       0
  7614 ;;      Temps:          0       2       0       0
  7615 ;;      Totals:         0      10       0       0
  7616 ;;Total ram usage:       10 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    8
  7619 ;; This function calls:
  7620 ;;		___lbmod
  7621 ;;		___wmul
  7622 ;; This function is called by:
  7623 ;;		_ES_Run
  7624 ;;		_ES_RecallEvents
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text34
  7629  00131C                     __ptext34:
  7630                           	opt stack 0
  7631  00131C                     _ES_DeQueue:
  7632                           	opt stack 21
  7633                           
  7634                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  7635                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  7636                           ;ES_Queue.c: 168: uint8_t NumLeft;
  7637                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  7638                           
  7639                           ; BSR set to: 15
  7640                           ;incstack = 0
  7641  00131C  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  7642  001320  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  7643                           
  7644                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  7645  001324  0100               	movlb	0	; () banked
  7646  001326  EE20 F002          	lfsr	2,2
  7647  00132A  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7648  00132C  26D9               	addwf	fsr2l,f,c
  7649  00132E  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7650  001330  22DA               	addwfc	fsr2h,f,c
  7651  001332  50DF               	movf	indf2,w,c
  7652  001334  B4D8               	btfsc	status,2,c
  7653  001336  D06F               	goto	l3372
  7654                           
  7655                           ; BSR set to: 0
  7656                           
  7657                           ;ES_Queue.c: 172: {
  7658                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7659  001338  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  7660  00133C  9EF2               	bcf	intcon,7,c	;volatile
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  7664                           
  7665                           ; BSR set to: 0
  7666  00133E  0100               	movlb	0	; () banked
  7667  001340  EE20 F001          	lfsr	2,1
  7668  001344  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7669  001346  26D9               	addwf	fsr2l,f,c
  7670  001348  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7671  00134A  22DA               	addwfc	fsr2h,f,c
  7672  00134C  50DF               	movf	indf2,w,c
  7673  00134E  0100               	movlb	0	; () banked
  7674  001350  6F70               	movwf	??_ES_DeQueue& (0+255),b
  7675  001352  0E01               	movlw	1
  7676  001354  0100               	movlb	0	; () banked
  7677  001356  2570               	addwf	??_ES_DeQueue& (0+255),w,b
  7678  001358  0100               	movlb	0	; () banked
  7679  00135A  6F66               	movwf	___wmul@multiplier& (0+255),b
  7680  00135C  0100               	movlb	0	; () banked
  7681  00135E  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  7682  001360  0E00               	movlw	0
  7683  001362  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  7684  001364  0E00               	movlw	0
  7685  001366  0100               	movlb	0	; () banked
  7686  001368  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7687  00136A  0E03               	movlw	3
  7688  00136C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  7689  00136E  EC6F  F013         	call	___wmul	;wreg free
  7690  001372  0100               	movlb	0	; () banked
  7691  001374  5166               	movf	?___wmul& (0+255),w,b
  7692  001376  0100               	movlb	0	; () banked
  7693  001378  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  7694  00137A  6ED9               	movwf	fsr2l,c
  7695  00137C  0100               	movlb	0	; () banked
  7696  00137E  5167               	movf	(?___wmul+1)& (0+255),w,b
  7697  001380  0100               	movlb	0	; () banked
  7698  001382  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  7699  001384  6EDA               	movwf	fsr2h,c
  7700  001386  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  7701  00138A  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  7702  00138E  CFDE FFE6          	movff	postinc2,postinc1
  7703  001392  CFDE FFE6          	movff	postinc2,postinc1
  7704  001396  CFDE FFE6          	movff	postinc2,postinc1
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  7708  00139A  0100               	movlb	0	; () banked
  7709  00139C  EE20 F001          	lfsr	2,1
  7710  0013A0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7711  0013A2  26D9               	addwf	fsr2l,f,c
  7712  0013A4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7713  0013A6  22DA               	addwfc	fsr2h,f,c
  7714  0013A8  2ADF               	incf	indf2,f,c
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  7718  0013AA  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  7719  0013AE  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  7720  0013B2  0100               	movlb	0	; () banked
  7721  0013B4  EE10 F001          	lfsr	1,1
  7722  0013B8  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7723  0013BA  26E1               	addwf	fsr1l,f,c
  7724  0013BC  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7725  0013BE  22E2               	addwfc	fsr1h,f,c
  7726  0013C0  50DE               	movf	postinc2,w,c
  7727  0013C2  5CE6               	subwf	postinc1,w,c
  7728  0013C4  A0D8               	btfss	status,0,c
  7729  0013C6  D019               	goto	l3368
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  7733  0013C8  0100               	movlb	0	; () banked
  7734  0013CA  EE20 F001          	lfsr	2,1
  7735  0013CE  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7736  0013D0  26D9               	addwf	fsr2l,f,c
  7737  0013D2  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7738  0013D4  22DA               	addwfc	fsr2h,f,c
  7739  0013D6  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  7740  0013DA  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  7741  0013DE  50E7               	movf	indf1,w,c
  7742  0013E0  0100               	movlb	0	; () banked
  7743  0013E2  6F60               	movwf	___lbmod@divisor& (0+255),b
  7744  0013E4  0100               	movlb	0	; () banked
  7745  0013E6  EE10 F001          	lfsr	1,1
  7746  0013EA  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7747  0013EC  26E1               	addwf	fsr1l,f,c
  7748  0013EE  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7749  0013F0  22E2               	addwfc	fsr1h,f,c
  7750  0013F2  50E7               	movf	indf1,w,c
  7751  0013F4  ECD5  F012         	call	___lbmod
  7752  0013F8  6EDF               	movwf	indf2,c
  7753  0013FA                     l3368:
  7754                           
  7755                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  7756  0013FA  0100               	movlb	0	; () banked
  7757  0013FC  EE20 F002          	lfsr	2,2
  7758  001400  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7759  001402  26D9               	addwf	fsr2l,f,c
  7760  001404  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7761  001406  22DA               	addwfc	fsr2h,f,c
  7762  001408  06DF               	decf	indf2,f,c
  7763  00140A  50DF               	movf	indf2,w,c
  7764  00140C  0100               	movlb	0	; () banked
  7765  00140E  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  7769  001410  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  7770                           
  7771                           ;ES_Queue.c: 183: }else {
  7772  001414  D014               	goto	l3378
  7773  001416                     l3372:
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  7777  001416  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  7778  00141A  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  7779  00141E  0E00               	movlw	0
  7780  001420  6EDF               	movwf	indf2,c
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  7784  001422  0100               	movlb	0	; () banked
  7785  001424  EE20 F001          	lfsr	2,1
  7786  001428  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  7787  00142A  26D9               	addwf	fsr2l,f,c
  7788  00142C  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  7789  00142E  22DA               	addwfc	fsr2h,f,c
  7790  001430  0E00               	movlw	0
  7791  001432  6EDE               	movwf	postinc2,c
  7792  001434  0E00               	movlw	0
  7793  001436  6EDD               	movwf	postdec2,c
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;ES_Queue.c: 186: NumLeft = 0;
  7797  001438  0E00               	movlw	0
  7798  00143A  0100               	movlb	0	; () banked
  7799  00143C  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7800  00143E                     l3378:
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;ES_Queue.c: 187: }
  7804                           ;ES_Queue.c: 188: return NumLeft;
  7805  00143E  0100               	movlb	0	; () banked
  7806  001440  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  7807  001442  0012               	return	
  7808  001444                     __end_of_ES_DeQueue:
  7809                           	opt stack 0
  7810                           tosu	equ	0xFFF
  7811                           tosh	equ	0xFFE
  7812                           tosl	equ	0xFFD
  7813                           pclath	equ	0xFFA
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           indf1	equ	0xFE7
  7824                           postinc1	equ	0xFE6
  7825                           postdec1	equ	0xFE5
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function ___lbmod *****************
  7836 ;; Defined at:
  7837 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  dividend        1    wreg     unsigned char 
  7840 ;;  divisor         1    0[BANK0 ] unsigned char 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  dividend        1    1[BANK0 ] unsigned char 
  7843 ;;  rem             1    3[BANK0 ] unsigned char 
  7844 ;;  counter         1    2[BANK0 ] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      unsigned char 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7854 ;;      Params:         0       1       0       0
  7855 ;;      Locals:         0       3       0       0
  7856 ;;      Temps:          0       0       0       0
  7857 ;;      Totals:         0       4       0       0
  7858 ;;Total ram usage:        4 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    7
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_ES_DeQueue
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text35
  7869  0025AA                     __ptext35:
  7870                           	opt stack 0
  7871  0025AA                     ___lbmod:
  7872                           	opt stack 21
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;incstack = 0
  7876                           ;___lbmod@dividend stored from wreg
  7877  0025AA  0100               	movlb	0	; () banked
  7878  0025AC  6F61               	movwf	___lbmod@dividend& (0+255),b
  7879  0025AE  0E08               	movlw	8
  7880  0025B0  0100               	movlb	0	; () banked
  7881  0025B2  6F62               	movwf	___lbmod@counter& (0+255),b
  7882  0025B4  0E00               	movlw	0
  7883  0025B6  0100               	movlb	0	; () banked
  7884  0025B8  6F63               	movwf	___lbmod@rem& (0+255),b
  7885  0025BA                     l3324:
  7886                           
  7887                           ; BSR set to: 0
  7888  0025BA  90D8               	bcf	status,0,c
  7889  0025BC  0100               	movlb	0	; () banked
  7890  0025BE  3561               	rlcf	___lbmod@dividend& (0+255),w,b
  7891  0025C0  0100               	movlb	0	; () banked
  7892  0025C2  3563               	rlcf	___lbmod@rem& (0+255),w,b
  7893  0025C4  0100               	movlb	0	; () banked
  7894  0025C6  6F63               	movwf	___lbmod@rem& (0+255),b
  7895                           
  7896                           ; BSR set to: 0
  7897  0025C8  0100               	movlb	0	; () banked
  7898  0025CA  90D8               	bcf	status,0,c
  7899  0025CC  3761               	rlcf	___lbmod@dividend& (0+255),f,b
  7900                           
  7901                           ; BSR set to: 0
  7902  0025CE  0100               	movlb	0	; () banked
  7903  0025D0  5160               	movf	___lbmod@divisor& (0+255),w,b
  7904  0025D2  0100               	movlb	0	; () banked
  7905  0025D4  5D63               	subwf	___lbmod@rem& (0+255),w,b
  7906  0025D6  A0D8               	btfss	status,0,c
  7907  0025D8  D004               	goto	l3332
  7908                           
  7909                           ; BSR set to: 0
  7910  0025DA  0100               	movlb	0	; () banked
  7911  0025DC  5160               	movf	___lbmod@divisor& (0+255),w,b
  7912  0025DE  0100               	movlb	0	; () banked
  7913  0025E0  5F63               	subwf	___lbmod@rem& (0+255),f,b
  7914  0025E2                     l3332:
  7915                           
  7916                           ; BSR set to: 0
  7917  0025E2  0100               	movlb	0	; () banked
  7918  0025E4  2F62               	decfsz	___lbmod@counter& (0+255),f,b
  7919  0025E6  D7E9               	goto	l3324
  7920                           
  7921                           ; BSR set to: 0
  7922                           
  7923                           ; BSR set to: 0
  7924  0025E8  0100               	movlb	0	; () banked
  7925  0025EA  5163               	movf	___lbmod@rem& (0+255),w,b
  7926  0025EC  0012               	return	
  7927  0025EE                     __end_of___lbmod:
  7928                           	opt stack 0
  7929                           tosu	equ	0xFFF
  7930                           tosh	equ	0xFFE
  7931                           tosl	equ	0xFFD
  7932                           pclath	equ	0xFFA
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           indf1	equ	0xFE7
  7943                           postinc1	equ	0xFE6
  7944                           postdec1	equ	0xFE5
  7945                           fsr1h	equ	0xFE2
  7946                           fsr1l	equ	0xFE1
  7947                           indf2	equ	0xFDF
  7948                           postinc2	equ	0xFDE
  7949                           postdec2	equ	0xFDD
  7950                           fsr2h	equ	0xFDA
  7951                           fsr2l	equ	0xFD9
  7952                           status	equ	0xFD8
  7953                           
  7954 ;; *************** function _ES_CheckUserEvents *****************
  7955 ;; Defined at:
  7956 ;;		line 46 in file "ES_CheckEvents.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;		None
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  i               1    0[BANK0 ] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      unsigned char 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7970 ;;      Params:         0       0       0       0
  7971 ;;      Locals:         0       1       0       0
  7972 ;;      Temps:          0       0       0       0
  7973 ;;      Totals:         0       1       0       0
  7974 ;;Total ram usage:        1 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    8
  7977 ;; This function calls:
  7978 ;;		_Check4Keystroke
  7979 ;; This function is called by:
  7980 ;;		_ES_Run
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           	psect	text36
  7985  002560                     __ptext36:
  7986                           	opt stack 0
  7987  002560                     _ES_CheckUserEvents:
  7988                           	opt stack 21
  7989                           
  7990                           ;ES_CheckEvents.c: 48: uint8_t i;
  7991                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;incstack = 0
  7995  002560  0E00               	movlw	0
  7996  002562  0100               	movlb	0	; () banked
  7997  002564  6F60               	movwf	ES_CheckUserEvents@i& (0+255),b
  7998  002566  0100               	movlb	0	; () banked
  7999  002568  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  8000  00256A  0100               	movlb	0	; () banked
  8001  00256C  A4D8               	btfss	status,2,c
  8002  00256E  0012               	return	
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  8006                           
  8007                           ; BSR set to: 0
  8008                           
  8009                           ; BSR set to: 0
  8010  002570  0100               	movlb	0	; () banked
  8011  002572  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  8012  002574  0D02               	mullw	2
  8013  002576  0E65               	movlw	low _ES_EventList
  8014  002578  24F3               	addwf	prodl,w,c
  8015  00257A  6EF6               	movwf	tblptrl,c
  8016  00257C  0E03               	movlw	high _ES_EventList
  8017  00257E  20F4               	addwfc	prodh,w,c
  8018  002580  6EF7               	movwf	tblptrh,c
  8019  002582                     	if	0	;There are less than 3 active tblptr bytes
  8020  002582                     	endif
  8021  002582  D801               	call	u1938
  8022  002584  D00C               	goto	u1939
  8023  002586                     u1938:
  8024  002586  0005               	push	
  8025  002588  6EFA               	movwf	pclath,c
  8026  00258A  0009               	tblrd		*+
  8027  00258C  50F5               	movf	tablat,w,c
  8028  00258E  6EFD               	movwf	tosl,c
  8029  002590  0009               	tblrd		*+
  8030  002592  50F5               	movf	tablat,w,c
  8031  002594  6EFE               	movwf	tosh,c
  8032  002596  50F8               	movf	tblptru,w,c
  8033  002598  6EFF               	movwf	tosu,c
  8034  00259A  50FA               	movf	pclath,w,c
  8035  00259C  0012               	return		;indir
  8036  00259E                     u1939:
  8037  00259E  06E8               	decf	wreg,f,c
  8038  0025A0  B4D8               	btfsc	status,2,c
  8039  0025A2  0012               	return	
  8040                           
  8041                           ;ES_CheckEvents.c: 52: break;
  8042  0025A4  0100               	movlb	0	; () banked
  8043  0025A6  2B60               	incf	ES_CheckUserEvents@i& (0+255),f,b
  8044  0025A8  D7DE               	goto	L17
  8045  0025AA                     __end_of_ES_CheckUserEvents:
  8046                           	opt stack 0
  8047                           tosu	equ	0xFFF
  8048                           tosh	equ	0xFFE
  8049                           tosl	equ	0xFFD
  8050                           pclath	equ	0xFFA
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           intcon	equ	0xFF2
  8058                           postinc0	equ	0xFEE
  8059                           wreg	equ	0xFE8
  8060                           indf1	equ	0xFE7
  8061                           postinc1	equ	0xFE6
  8062                           postdec1	equ	0xFE5
  8063                           fsr1h	equ	0xFE2
  8064                           fsr1l	equ	0xFE1
  8065                           indf2	equ	0xFDF
  8066                           postinc2	equ	0xFDE
  8067                           postdec2	equ	0xFDD
  8068                           fsr2h	equ	0xFDA
  8069                           fsr2l	equ	0xFD9
  8070                           status	equ	0xFD8
  8071                           
  8072 ;; *************** function _Check4Keystroke *****************
  8073 ;; Defined at:
  8074 ;;		line 62 in file "EventCheckers.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;		None
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;		None
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      unsigned char 
  8081 ;; Registers used:
  8082 ;;		wreg
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8088 ;;      Params:         0       0       0       0
  8089 ;;      Locals:         0       0       0       0
  8090 ;;      Temps:          0       0       0       0
  8091 ;;      Totals:         0       0       0       0
  8092 ;;Total ram usage:        0 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    7
  8095 ;; This function calls:
  8096 ;;		Nothing
  8097 ;; This function is called by:
  8098 ;;		_ES_CheckUserEvents
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text37
  8103  002958                     __ptext37:
  8104                           	opt stack 0
  8105  002958                     _Check4Keystroke:
  8106                           	opt stack 21
  8107                           
  8108                           ;EventCheckers.c: 78: return 0;
  8109                           
  8110                           ;incstack = 0
  8111  002958  0E00               	movlw	0
  8112  00295A  0012               	return	
  8113  00295C                     __end_of_Check4Keystroke:
  8114                           	opt stack 0
  8115                           tosu	equ	0xFFF
  8116                           tosh	equ	0xFFE
  8117                           tosl	equ	0xFFD
  8118                           pclath	equ	0xFFA
  8119                           tblptru	equ	0xFF8
  8120                           tblptrh	equ	0xFF7
  8121                           tblptrl	equ	0xFF6
  8122                           tablat	equ	0xFF5
  8123                           prodh	equ	0xFF4
  8124                           prodl	equ	0xFF3
  8125                           intcon	equ	0xFF2
  8126                           postinc0	equ	0xFEE
  8127                           wreg	equ	0xFE8
  8128                           indf1	equ	0xFE7
  8129                           postinc1	equ	0xFE6
  8130                           postdec1	equ	0xFE5
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _ES_Initialize *****************
  8141 ;; Defined at:
  8142 ;;		line 242 in file "ES_Framework.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  NewRate         2   33[BANK0 ] enum E15428
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  i               1   35[BANK0 ] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      enum E15499
  8149 ;; Registers used:
  8150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8156 ;;      Params:         0       2       0       0
  8157 ;;      Locals:         0       1       0       0
  8158 ;;      Temps:          0       0       0       0
  8159 ;;      Totals:         0       3       0       0
  8160 ;;Total ram usage:        3 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:   11
  8163 ;; This function calls:
  8164 ;;		_ES_InitQueue
  8165 ;;		_ES_Timer_Init
  8166 ;;		_InitCanRX_Service
  8167 ;;		_InitPatternControlService
  8168 ;;		_InitSPI32ControlService
  8169 ;; This function is called by:
  8170 ;;		_main
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           	psect	text38
  8175  00187A                     __ptext38:
  8176                           	opt stack 0
  8177  00187A                     _ES_Initialize:
  8178                           	opt stack 19
  8179                           
  8180                           ;ES_Framework.c: 243: uint8_t i;
  8181                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  8182                           
  8183                           ;incstack = 0
  8184  00187A  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  8185  00187E  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  8186  001882  EC89  F014         	call	_ES_Timer_Init	;wreg free
  8187                           
  8188                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  8189  001886  0E00               	movlw	0
  8190  001888  0100               	movlb	0	; () banked
  8191  00188A  6F83               	movwf	ES_Initialize@i& (0+255),b
  8192  00188C                     l3620:
  8193                           
  8194                           ; BSR set to: 0
  8195  00188C  0E02               	movlw	2
  8196  00188E  0100               	movlb	0	; () banked
  8197  001890  6583               	cpfsgt	ES_Initialize@i& (0+255),b
  8198  001892  D001               	goto	l3624
  8199  001894  D066               	goto	l3644
  8200  001896                     l3624:
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  8204                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  8205  001896  0100               	movlb	0	; () banked
  8206  001898  5183               	movf	ES_Initialize@i& (0+255),w,b
  8207  00189A  0D04               	mullw	4
  8208  00189C  0E50               	movlw	low _ServDescList
  8209  00189E  24F3               	addwf	prodl,w,c
  8210  0018A0  6EF6               	movwf	tblptrl,c
  8211  0018A2  0E03               	movlw	high _ServDescList
  8212  0018A4  20F4               	addwfc	prodh,w,c
  8213  0018A6  6EF7               	movwf	tblptrh,c
  8214  0018A8                     	if	0	;There are less than 3 active tblptr bytes
  8215  0018A8                     	endif
  8216  0018A8  0009               	tblrd		*+
  8217  0018AA  50F5               	movf	tablat,w,c
  8218  0018AC  0009               	tblrd		*+
  8219  0018AE  10F5               	iorwf	tablat,w,c
  8220  0018B0  B4D8               	btfsc	status,2,c
  8221  0018B2  D013               	goto	l3628
  8222                           
  8223                           ; BSR set to: 0
  8224  0018B4  0100               	movlb	0	; () banked
  8225  0018B6  5183               	movf	ES_Initialize@i& (0+255),w,b
  8226  0018B8  0D04               	mullw	4
  8227  0018BA  0E02               	movlw	2
  8228  0018BC  26F3               	addwf	prodl,f,c
  8229  0018BE  0E00               	movlw	0
  8230  0018C0  22F4               	addwfc	prodh,f,c
  8231  0018C2  0E50               	movlw	low _ServDescList
  8232  0018C4  24F3               	addwf	prodl,w,c
  8233  0018C6  6EF6               	movwf	tblptrl,c
  8234  0018C8  0E03               	movlw	high _ServDescList
  8235  0018CA  20F4               	addwfc	prodh,w,c
  8236  0018CC  6EF7               	movwf	tblptrh,c
  8237  0018CE                     	if	0	;There are less than 3 active tblptr bytes
  8238  0018CE                     	endif
  8239  0018CE  0009               	tblrd		*+
  8240  0018D0  50F5               	movf	tablat,w,c
  8241  0018D2  0009               	tblrd		*+
  8242  0018D4  10F5               	iorwf	tablat,w,c
  8243  0018D6  A4D8               	btfss	status,2,c
  8244  0018D8  D002               	goto	l3632
  8245  0018DA                     l3628:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;ES_Framework.c: 249: return FailedPointer;
  8249  0018DA  0E03               	movlw	3
  8250                           
  8251                           ; BSR set to: 0
  8252  0018DC  0012               	return	
  8253  0018DE                     l3632:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  8257  0018DE  0100               	movlb	0	; () banked
  8258  0018E0  5183               	movf	ES_Initialize@i& (0+255),w,b
  8259  0018E2  0D03               	mullw	3
  8260  0018E4  0E5C               	movlw	low _EventQueues
  8261  0018E6  24F3               	addwf	prodl,w,c
  8262  0018E8  6EF6               	movwf	tblptrl,c
  8263  0018EA  0E03               	movlw	high _EventQueues
  8264  0018EC  20F4               	addwfc	prodh,w,c
  8265  0018EE  6EF7               	movwf	tblptrh,c
  8266  0018F0                     	if	0	;There are less than 3 active tblptr bytes
  8267  0018F0                     	endif
  8268  0018F0  0009               	tblrd		*+
  8269  0018F2  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
  8270  0018F6  000A               	tblrd		*-
  8271  0018F8  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
  8272  0018FC  0100               	movlb	0	; () banked
  8273  0018FE  5183               	movf	ES_Initialize@i& (0+255),w,b
  8274  001900  0D03               	mullw	3
  8275  001902  0E02               	movlw	2
  8276  001904  26F3               	addwf	prodl,f,c
  8277  001906  0E00               	movlw	0
  8278  001908  22F4               	addwfc	prodh,f,c
  8279  00190A  0E5C               	movlw	low _EventQueues
  8280  00190C  24F3               	addwf	prodl,w,c
  8281  00190E  6EF6               	movwf	tblptrl,c
  8282  001910  0E03               	movlw	high _EventQueues
  8283  001912  20F4               	addwfc	prodh,w,c
  8284  001914  6EF7               	movwf	tblptrh,c
  8285  001916                     	if	0	;There are less than 3 active tblptr bytes
  8286  001916                     	endif
  8287  001916  0008               	tblrd		*
  8288  001918  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
  8289  00191C  EC17  F013         	call	_ES_InitQueue	;wreg free
  8290                           
  8291                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  8292  001920  0100               	movlb	0	; () banked
  8293  001922  5183               	movf	ES_Initialize@i& (0+255),w,b
  8294  001924  0D04               	mullw	4
  8295  001926  0E50               	movlw	low _ServDescList
  8296  001928  24F3               	addwf	prodl,w,c
  8297  00192A  6EF6               	movwf	tblptrl,c
  8298  00192C  0E03               	movlw	high _ServDescList
  8299  00192E  20F4               	addwfc	prodh,w,c
  8300  001930  6EF7               	movwf	tblptrh,c
  8301  001932                     	if	0	;There are less than 3 active tblptr bytes
  8302  001932                     	endif
  8303  001932  D801               	call	u2228
  8304  001934  D00E               	goto	u2229
  8305  001936                     u2228:
  8306  001936  0005               	push	
  8307  001938  6EFA               	movwf	pclath,c
  8308  00193A  0009               	tblrd		*+
  8309  00193C  50F5               	movf	tablat,w,c
  8310  00193E  6EFD               	movwf	tosl,c
  8311  001940  0009               	tblrd		*+
  8312  001942  50F5               	movf	tablat,w,c
  8313  001944  6EFE               	movwf	tosh,c
  8314  001946  50F8               	movf	tblptru,w,c
  8315  001948  6EFF               	movwf	tosu,c
  8316  00194A  50FA               	movf	pclath,w,c
  8317  00194C  0100               	movlb	0	; () banked
  8318  00194E  5183               	movf	ES_Initialize@i& (0+255),w,b
  8319  001950  0012               	return		;indir
  8320  001952                     u2229:
  8321  001952  06E8               	decf	wreg,f,c
  8322  001954  B4D8               	btfsc	status,2,c
  8323  001956  D002               	goto	l3640
  8324                           
  8325                           ;ES_Framework.c: 254: return FailedInit;
  8326  001958  0E05               	movlw	5
  8327  00195A  0012               	return	
  8328  00195C                     l3640:
  8329  00195C  0100               	movlb	0	; () banked
  8330  00195E  2B83               	incf	ES_Initialize@i& (0+255),f,b
  8331  001960  D795               	goto	l3620
  8332  001962                     l3644:
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;ES_Framework.c: 255: }
  8336                           ;ES_Framework.c: 256: return Success;
  8337  001962  0E00               	movlw	0
  8338  001964  0012               	return	
  8339  001966                     __end_of_ES_Initialize:
  8340                           	opt stack 0
  8341                           tosu	equ	0xFFF
  8342                           tosh	equ	0xFFE
  8343                           tosl	equ	0xFFD
  8344                           pclath	equ	0xFFA
  8345                           tblptru	equ	0xFF8
  8346                           tblptrh	equ	0xFF7
  8347                           tblptrl	equ	0xFF6
  8348                           tablat	equ	0xFF5
  8349                           prodh	equ	0xFF4
  8350                           prodl	equ	0xFF3
  8351                           intcon	equ	0xFF2
  8352                           postinc0	equ	0xFEE
  8353                           wreg	equ	0xFE8
  8354                           indf1	equ	0xFE7
  8355                           postinc1	equ	0xFE6
  8356                           postdec1	equ	0xFE5
  8357                           fsr1h	equ	0xFE2
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           fsr2h	equ	0xFDA
  8363                           fsr2l	equ	0xFD9
  8364                           status	equ	0xFD8
  8365                           
  8366 ;; *************** function _InitCanRX_Service *****************
  8367 ;; Defined at:
  8368 ;;		line 87 in file "CanRX_Service.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;  Priority        1    wreg     unsigned char 
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  Priority        1   32[BANK0 ] unsigned char 
  8373 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      unsigned char 
  8376 ;; Registers used:
  8377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8383 ;;      Params:         0       0       0       0
  8384 ;;      Locals:         0       4       0       0
  8385 ;;      Temps:          0       0       0       0
  8386 ;;      Totals:         0       4       0       0
  8387 ;;Total ram usage:        4 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:   10
  8390 ;; This function calls:
  8391 ;;		_ES_PostToService
  8392 ;; This function is called by:
  8393 ;;		_ES_Initialize
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           	psect	text39
  8398  00277A                     __ptext39:
  8399                           	opt stack 0
  8400  00277A                     _InitCanRX_Service:
  8401                           	opt stack 19
  8402                           
  8403                           ;incstack = 0
  8404                           ;InitCanRX_Service@Priority stored from wreg
  8405  00277A  0100               	movlb	0	; () banked
  8406  00277C  6F80               	movwf	InitCanRX_Service@Priority& (0+255),b
  8407                           
  8408                           ;CanRX_Service.c: 89: ES_Event ThisEvent;
  8409                           ;CanRX_Service.c: 91: MyPriority = Priority;
  8410  00277E  C080  F0DE         	movff	InitCanRX_Service@Priority,CanRX_Service@MyPriority
  8411                           
  8412                           ;CanRX_Service.c: 94: ThisEvent.EventType = ES_INIT;
  8413  002782  0E02               	movlw	2
  8414  002784  0100               	movlb	0	; () banked
  8415  002786  6F7D               	movwf	InitCanRX_Service@ThisEvent& (0+255),b
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;CanRX_Service.c: 95: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8419  002788  C07D  F077         	movff	InitCanRX_Service@ThisEvent,ES_PostToService@TheEvent
  8420  00278C  C07E  F078         	movff	InitCanRX_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  8421  002790  C07F  F079         	movff	InitCanRX_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  8422  002794  0100               	movlb	0	; () banked
  8423  002796  51DE               	movf	CanRX_Service@MyPriority& (0+255),w,b
  8424  002798  EC39  F011         	call	_ES_PostToService
  8425  00279C  06E8               	decf	wreg,f,c
  8426  00279E  A4D8               	btfss	status,2,c
  8427  0027A0  D002               	goto	l3538
  8428                           
  8429                           ;CanRX_Service.c: 96: {
  8430                           ;CanRX_Service.c: 97: return 1;
  8431  0027A2  0E01               	movlw	1
  8432                           
  8433                           ;CanRX_Service.c: 98: }else
  8434  0027A4  0012               	return	
  8435  0027A6                     l3538:
  8436                           
  8437                           ;CanRX_Service.c: 99: {
  8438                           ;CanRX_Service.c: 100: return 0;
  8439  0027A6  0E00               	movlw	0
  8440  0027A8  0012               	return	
  8441  0027AA                     __end_of_InitCanRX_Service:
  8442                           	opt stack 0
  8443                           tosu	equ	0xFFF
  8444                           tosh	equ	0xFFE
  8445                           tosl	equ	0xFFD
  8446                           pclath	equ	0xFFA
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           intcon	equ	0xFF2
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           indf1	equ	0xFE7
  8457                           postinc1	equ	0xFE6
  8458                           postdec1	equ	0xFE5
  8459                           fsr1h	equ	0xFE2
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function _InitPatternControlService *****************
  8469 ;; Defined at:
  8470 ;;		line 97 in file "Pattern_ControlService.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  Priority        1    wreg     unsigned char 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  Priority        1   32[BANK0 ] unsigned char 
  8475 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  1    wreg      unsigned char 
  8478 ;; Registers used:
  8479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8485 ;;      Params:         0       0       0       0
  8486 ;;      Locals:         0       4       0       0
  8487 ;;      Temps:          0       0       0       0
  8488 ;;      Totals:         0       4       0       0
  8489 ;;Total ram usage:        4 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:   10
  8492 ;; This function calls:
  8493 ;;		_DotStar_Init
  8494 ;;		_ES_PostToService
  8495 ;;		_SetupPattern
  8496 ;; This function is called by:
  8497 ;;		_ES_Initialize
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text40
  8502  00241C                     __ptext40:
  8503                           	opt stack 0
  8504  00241C                     _InitPatternControlService:
  8505                           	opt stack 19
  8506                           
  8507                           ;incstack = 0
  8508                           ;InitPatternControlService@Priority stored from wreg
  8509  00241C  0100               	movlb	0	; () banked
  8510  00241E  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
  8511                           
  8512                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  8513                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  8514  002420  C080  F0E6         	movff	InitPatternControlService@Priority,_MyPriority
  8515                           
  8516                           ;Pattern_ControlService.c: 103: DotStar_Init(76,PatternConfigs[2]);
  8517  002424  C0FD  F060         	movff	_PatternConfigs+2,DotStar_Init@brightness
  8518  002428  0E4C               	movlw	76
  8519  00242A  EC05  F00F         	call	_DotStar_Init
  8520                           
  8521                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 76);
  8522  00242E  0EFB               	movlw	low _PatternConfigs
  8523  002430  0100               	movlb	0	; () banked
  8524  002432  6F60               	movwf	SetupPattern@configs& (0+255),b
  8525  002434  0E00               	movlw	high _PatternConfigs
  8526  002436  0100               	movlb	0	; () banked
  8527  002438  6F61               	movwf	(SetupPattern@configs+1)& (0+255),b
  8528  00243A  0E4C               	movlw	76
  8529  00243C  0100               	movlb	0	; () banked
  8530  00243E  6F62               	movwf	SetupPattern@numPixels& (0+255),b
  8531  002440  EC82  F014         	call	_SetupPattern	;wreg free
  8532                           
  8533                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  8534  002444  0E00               	movlw	0
  8535  002446  0100               	movlb	0	; () banked
  8536  002448  6FE3               	movwf	_CurrentState& (0+255),b
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  8540  00244A  0E02               	movlw	2
  8541  00244C  0100               	movlb	0	; () banked
  8542  00244E  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8546  002450  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  8547  002454  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8548  002458  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8549  00245C  0100               	movlb	0	; () banked
  8550  00245E  51E6               	movf	_MyPriority& (0+255),w,b
  8551  002460  EC39  F011         	call	_ES_PostToService
  8552  002464  06E8               	decf	wreg,f,c
  8553  002466  A4D8               	btfss	status,2,c
  8554  002468  D002               	goto	l3424
  8555                           
  8556                           ;Pattern_ControlService.c: 110: {
  8557                           ;Pattern_ControlService.c: 111: return 1;
  8558  00246A  0E01               	movlw	1
  8559                           
  8560                           ;Pattern_ControlService.c: 112: }else
  8561  00246C  0012               	return	
  8562  00246E                     l3424:
  8563                           
  8564                           ;Pattern_ControlService.c: 113: {
  8565                           ;Pattern_ControlService.c: 114: return 0;
  8566  00246E  0E00               	movlw	0
  8567  002470  0012               	return	
  8568  002472                     __end_of_InitPatternControlService:
  8569                           	opt stack 0
  8570                           tosu	equ	0xFFF
  8571                           tosh	equ	0xFFE
  8572                           tosl	equ	0xFFD
  8573                           pclath	equ	0xFFA
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           postinc0	equ	0xFEE
  8582                           wreg	equ	0xFE8
  8583                           indf1	equ	0xFE7
  8584                           postinc1	equ	0xFE6
  8585                           postdec1	equ	0xFE5
  8586                           fsr1h	equ	0xFE2
  8587                           fsr1l	equ	0xFE1
  8588                           indf2	equ	0xFDF
  8589                           postinc2	equ	0xFDE
  8590                           postdec2	equ	0xFDD
  8591                           fsr2h	equ	0xFDA
  8592                           fsr2l	equ	0xFD9
  8593                           status	equ	0xFD8
  8594                           
  8595 ;; *************** function _InitSPI32ControlService *****************
  8596 ;; Defined at:
  8597 ;;		line 80 in file "SPI32_ControlService.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  Priority        1    wreg     unsigned char 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  Priority        1   32[BANK0 ] unsigned char 
  8602 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      unsigned char 
  8605 ;; Registers used:
  8606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8612 ;;      Params:         0       0       0       0
  8613 ;;      Locals:         0       4       0       0
  8614 ;;      Temps:          0       0       0       0
  8615 ;;      Totals:         0       4       0       0
  8616 ;;Total ram usage:        4 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:   10
  8619 ;; This function calls:
  8620 ;;		_ES_PostToService
  8621 ;;		_SPI32_Init
  8622 ;; This function is called by:
  8623 ;;		_ES_Initialize
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text41
  8628  00266A                     __ptext41:
  8629                           	opt stack 0
  8630  00266A                     _InitSPI32ControlService:
  8631                           	opt stack 19
  8632                           
  8633                           ;incstack = 0
  8634                           ;InitSPI32ControlService@Priority stored from wreg
  8635  00266A  0100               	movlb	0	; () banked
  8636  00266C  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
  8637                           
  8638                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  8639                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  8640  00266E  C080  F0E2         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  8641                           
  8642                           ;SPI32_ControlService.c: 86: SPI32_Init();
  8643  002672  ECA6  F014         	call	_SPI32_Init	;wreg free
  8644                           
  8645                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  8646  002676  0E00               	movlw	0
  8647  002678  0100               	movlb	0	; () banked
  8648  00267A  6FE1               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  8652  00267C  0E02               	movlw	2
  8653  00267E  0100               	movlb	0	; () banked
  8654  002680  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8658  002682  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  8659  002686  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8660  00268A  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8661  00268E  0100               	movlb	0	; () banked
  8662  002690  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  8663  002692  EC39  F011         	call	_ES_PostToService
  8664  002696  06E8               	decf	wreg,f,c
  8665  002698  A4D8               	btfss	status,2,c
  8666  00269A  D002               	goto	l3492
  8667                           
  8668                           ;SPI32_ControlService.c: 92: {
  8669                           ;SPI32_ControlService.c: 93: return 1;
  8670  00269C  0E01               	movlw	1
  8671                           
  8672                           ;SPI32_ControlService.c: 94: }else
  8673  00269E  0012               	return	
  8674  0026A0                     l3492:
  8675                           
  8676                           ;SPI32_ControlService.c: 95: {
  8677                           ;SPI32_ControlService.c: 96: return 0;
  8678  0026A0  0E00               	movlw	0
  8679  0026A2  0012               	return	
  8680  0026A4                     __end_of_InitSPI32ControlService:
  8681                           	opt stack 0
  8682                           tosu	equ	0xFFF
  8683                           tosh	equ	0xFFE
  8684                           tosl	equ	0xFFD
  8685                           pclath	equ	0xFFA
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           postinc0	equ	0xFEE
  8694                           wreg	equ	0xFE8
  8695                           indf1	equ	0xFE7
  8696                           postinc1	equ	0xFE6
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _SPI32_Init *****************
  8708 ;; Defined at:
  8709 ;;		line 66 in file "SPI32_HW.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8723 ;;      Params:         0       0       0       0
  8724 ;;      Locals:         0       0       0       0
  8725 ;;      Temps:          0       0       0       0
  8726 ;;      Totals:         0       0       0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    8
  8730 ;; This function calls:
  8731 ;;		_HW_Init
  8732 ;; This function is called by:
  8733 ;;		_InitSPI32ControlService
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text42
  8738  00294C                     __ptext42:
  8739                           	opt stack 0
  8740  00294C                     _SPI32_Init:
  8741                           	opt stack 20
  8742                           
  8743                           ;SPI32_HW.c: 68: HW_Init();
  8744                           
  8745                           ;incstack = 0
  8746  00294C  EC0F  F014         	call	_HW_Init	;wreg free
  8747  002950  0012               	return		;funcret
  8748  002952                     __end_of_SPI32_Init:
  8749                           	opt stack 0
  8750                           tosu	equ	0xFFF
  8751                           tosh	equ	0xFFE
  8752                           tosl	equ	0xFFD
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           postinc0	equ	0xFEE
  8762                           wreg	equ	0xFE8
  8763                           indf1	equ	0xFE7
  8764                           postinc1	equ	0xFE6
  8765                           postdec1	equ	0xFE5
  8766                           fsr1h	equ	0xFE2
  8767                           fsr1l	equ	0xFE1
  8768                           indf2	equ	0xFDF
  8769                           postinc2	equ	0xFDE
  8770                           postdec2	equ	0xFDD
  8771                           fsr2h	equ	0xFDA
  8772                           fsr2l	equ	0xFD9
  8773                           status	equ	0xFD8
  8774                           
  8775 ;; *************** function _HW_Init *****************
  8776 ;; Defined at:
  8777 ;;		line 128 in file "SPI32_HW.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;		None
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  1    wreg      void 
  8784 ;; Registers used:
  8785 ;;		wreg, status,2
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8791 ;;      Params:         0       0       0       0
  8792 ;;      Locals:         0       0       0       0
  8793 ;;      Temps:          0       0       0       0
  8794 ;;      Totals:         0       0       0       0
  8795 ;;Total ram usage:        0 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; Hardware stack levels required when called:    7
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_SPI32_Init
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text43
  8806  00281E                     __ptext43:
  8807                           	opt stack 0
  8808  00281E                     _HW_Init:
  8809                           	opt stack 20
  8810                           
  8811                           ;SPI32_HW.c: 134: PORTC = 0x00;
  8812                           
  8813                           ;incstack = 0
  8814  00281E  0E00               	movlw	0
  8815  002820  6E82               	movwf	3970,c	;volatile
  8816                           
  8817                           ;SPI32_HW.c: 135: LATC = 0x00;
  8818  002822  0E00               	movlw	0
  8819  002824  6E8B               	movwf	3979,c	;volatile
  8820                           
  8821                           ;SPI32_HW.c: 136: ADCON1 = 0x0F;
  8822  002826  0E0F               	movlw	15
  8823  002828  6EC1               	movwf	4033,c	;volatile
  8824                           
  8825                           ;SPI32_HW.c: 137: TRISC = 0x00;
  8826  00282A  0E00               	movlw	0
  8827  00282C  6E94               	movwf	3988,c	;volatile
  8828                           
  8829                           ;SPI32_HW.c: 139: SSPIE = 1;
  8830  00282E  869D               	bsf	3997,3,c	;volatile
  8831                           
  8832                           ;SPI32_HW.c: 143: SSPCON1 = 0x00;
  8833  002830  0E00               	movlw	0
  8834  002832  6EC6               	movwf	4038,c	;volatile
  8835                           
  8836                           ;SPI32_HW.c: 144: SSPSTAT = 0b01000000;
  8837  002834  0E40               	movlw	64
  8838  002836  6EC7               	movwf	4039,c	;volatile
  8839                           
  8840                           ;SPI32_HW.c: 145: SSPADD = 0xFF;
  8841  002838  68C8               	setf	4040,c	;volatile
  8842                           
  8843                           ;SPI32_HW.c: 146: SSPCON1 = 0b00110000;
  8844  00283A  0E30               	movlw	48
  8845  00283C  6EC6               	movwf	4038,c	;volatile
  8846  00283E  0012               	return		;funcret
  8847  002840                     __end_of_HW_Init:
  8848                           	opt stack 0
  8849                           tosu	equ	0xFFF
  8850                           tosh	equ	0xFFE
  8851                           tosl	equ	0xFFD
  8852                           pclath	equ	0xFFA
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           postinc0	equ	0xFEE
  8861                           wreg	equ	0xFE8
  8862                           indf1	equ	0xFE7
  8863                           postinc1	equ	0xFE6
  8864                           postdec1	equ	0xFE5
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _SetupPattern *****************
  8875 ;; Defined at:
  8876 ;;		line 77 in file "Pattern_RGBPatterns.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  8879 ;;		 -> PatternConfigs(5), 
  8880 ;;  numPixels       1    2[BANK0 ] unsigned char 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;		None
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8892 ;;      Params:         0       3       0       0
  8893 ;;      Locals:         0       0       0       0
  8894 ;;      Temps:          0       0       0       0
  8895 ;;      Totals:         0       3       0       0
  8896 ;;Total ram usage:        3 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    7
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_InitPatternControlService
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           	psect	text44
  8907  002904                     __ptext44:
  8908                           	opt stack 0
  8909  002904                     _SetupPattern:
  8910                           	opt stack 21
  8911                           
  8912                           ;Pattern_RGBPatterns.c: 79: PatternConfigs = configs;
  8913                           
  8914                           ;incstack = 0
  8915  002904  C060  F0D6         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  8916  002908  C061  F0D7         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  8917                           
  8918                           ;Pattern_RGBPatterns.c: 81: Length = numPixels;
  8919  00290C  C062  F0E0         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  8920  002910  0012               	return		;funcret
  8921  002912                     __end_of_SetupPattern:
  8922                           	opt stack 0
  8923                           tosu	equ	0xFFF
  8924                           tosh	equ	0xFFE
  8925                           tosl	equ	0xFFD
  8926                           pclath	equ	0xFFA
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           intcon	equ	0xFF2
  8934                           postinc0	equ	0xFEE
  8935                           wreg	equ	0xFE8
  8936                           indf1	equ	0xFE7
  8937                           postinc1	equ	0xFE6
  8938                           postdec1	equ	0xFE5
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           postdec2	equ	0xFDD
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _DotStar_Init *****************
  8949 ;; Defined at:
  8950 ;;		line 48 in file "Pattern_DotStarLED.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  numPixels       1    wreg     unsigned char 
  8953 ;;  brightness      1    0[BANK0 ] unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  numPixels       1    3[BANK0 ] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8965 ;;      Params:         0       1       0       0
  8966 ;;      Locals:         0       1       0       0
  8967 ;;      Temps:          0       2       0       0
  8968 ;;      Totals:         0       4       0       0
  8969 ;;Total ram usage:        4 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    7
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_InitPatternControlService
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           	psect	text45
  8980  001E0A                     __ptext45:
  8981                           	opt stack 0
  8982  001E0A                     _DotStar_Init:
  8983                           	opt stack 21
  8984                           
  8985                           ;incstack = 0
  8986                           ;DotStar_Init@numPixels stored from wreg
  8987  001E0A  0100               	movlb	0	; () banked
  8988  001E0C  6F63               	movwf	DotStar_Init@numPixels& (0+255),b
  8989                           
  8990                           ;Pattern_DotStarLED.c: 57: Length = numPixels;
  8991  001E0E  C063  F0E5         	movff	DotStar_Init@numPixels,_Length
  8992                           
  8993                           ;Pattern_DotStarLED.c: 59: Brightness = brightness;
  8994  001E12  C060  F0F9         	movff	DotStar_Init@brightness,_Brightness
  8995                           
  8996                           ;Pattern_DotStarLED.c: 61: PixelFrames[0] = 0x0;
  8997  001E16  0E00               	movlw	0
  8998  001E18  CFE8 F1B8          	movff	wreg,_PixelFrames
  8999  001E1C  0E00               	movlw	0
  9000  001E1E  CFE8 F1B9          	movff	wreg,_PixelFrames+1
  9001  001E22  0E00               	movlw	0
  9002  001E24  CFE8 F1BA          	movff	wreg,_PixelFrames+2
  9003  001E28  0E00               	movlw	0
  9004  001E2A  CFE8 F1BB          	movff	wreg,_PixelFrames+3
  9005                           
  9006                           ;Pattern_DotStarLED.c: 62: PixelFrames[Length+1] = 0xffffffff;
  9007  001E2E  0100               	movlb	0	; () banked
  9008  001E30  51E5               	movf	_Length& (0+255),w,b
  9009  001E32  0100               	movlb	0	; () banked
  9010  001E34  6F61               	movwf	??_DotStar_Init& (0+255),b
  9011  001E36  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9012  001E38  0100               	movlb	0	; () banked
  9013  001E3A  90D8               	bcf	status,0,c
  9014  001E3C  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9015  001E3E  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9016  001E40  0100               	movlb	0	; () banked
  9017  001E42  90D8               	bcf	status,0,c
  9018  001E44  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9019  001E46  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9020  001E48  0E04               	movlw	4
  9021  001E4A  0100               	movlb	0	; () banked
  9022  001E4C  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9023  001E4E  0E00               	movlw	0
  9024  001E50  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9025  001E52  0EB8               	movlw	low _PixelFrames
  9026  001E54  0100               	movlb	0	; () banked
  9027  001E56  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9028  001E58  6ED9               	movwf	fsr2l,c
  9029  001E5A  0E01               	movlw	high _PixelFrames
  9030  001E5C  0100               	movlb	0	; () banked
  9031  001E5E  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9032  001E60  6EDA               	movwf	fsr2h,c
  9033  001E62  0EFF               	movlw	255
  9034  001E64  6EDE               	movwf	postinc2,c
  9035  001E66  0EFF               	movlw	255
  9036  001E68  6EDE               	movwf	postinc2,c
  9037  001E6A  0EFF               	movlw	255
  9038  001E6C  6EDE               	movwf	postinc2,c
  9039  001E6E  0EFF               	movlw	255
  9040  001E70  6EDD               	movwf	postdec2,c
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;Pattern_DotStarLED.c: 63: PixelFrames[Length+1+1] = 0xffffffff;
  9044  001E72  0100               	movlb	0	; () banked
  9045  001E74  51E5               	movf	_Length& (0+255),w,b
  9046  001E76  0100               	movlb	0	; () banked
  9047  001E78  6F61               	movwf	??_DotStar_Init& (0+255),b
  9048  001E7A  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9049  001E7C  0100               	movlb	0	; () banked
  9050  001E7E  90D8               	bcf	status,0,c
  9051  001E80  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9052  001E82  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9053  001E84  0100               	movlb	0	; () banked
  9054  001E86  90D8               	bcf	status,0,c
  9055  001E88  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9056  001E8A  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9057  001E8C  0E08               	movlw	8
  9058  001E8E  0100               	movlb	0	; () banked
  9059  001E90  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9060  001E92  0E00               	movlw	0
  9061  001E94  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9062  001E96  0EB8               	movlw	low _PixelFrames
  9063  001E98  0100               	movlb	0	; () banked
  9064  001E9A  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9065  001E9C  6ED9               	movwf	fsr2l,c
  9066  001E9E  0E01               	movlw	high _PixelFrames
  9067  001EA0  0100               	movlb	0	; () banked
  9068  001EA2  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9069  001EA4  6EDA               	movwf	fsr2h,c
  9070  001EA6  0EFF               	movlw	255
  9071  001EA8  6EDE               	movwf	postinc2,c
  9072  001EAA  0EFF               	movlw	255
  9073  001EAC  6EDE               	movwf	postinc2,c
  9074  001EAE  0EFF               	movlw	255
  9075  001EB0  6EDE               	movwf	postinc2,c
  9076  001EB2  0EFF               	movlw	255
  9077  001EB4  6EDD               	movwf	postdec2,c
  9078                           
  9079                           ; BSR set to: 0
  9080  001EB6  0012               	return		;funcret
  9081  001EB8                     __end_of_DotStar_Init:
  9082                           	opt stack 0
  9083                           tosu	equ	0xFFF
  9084                           tosh	equ	0xFFE
  9085                           tosl	equ	0xFFD
  9086                           pclath	equ	0xFFA
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           postinc0	equ	0xFEE
  9095                           wreg	equ	0xFE8
  9096                           indf1	equ	0xFE7
  9097                           postinc1	equ	0xFE6
  9098                           postdec1	equ	0xFE5
  9099                           fsr1h	equ	0xFE2
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function _ES_PostToService *****************
  9109 ;; Defined at:
  9110 ;;		line 351 in file "ES_Framework.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  WhichService    1    wreg     unsigned char 
  9113 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  WhichService    1   28[BANK0 ] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      unsigned char 
  9118 ;; Registers used:
  9119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9125 ;;      Params:         0       3       0       0
  9126 ;;      Locals:         0       1       0       0
  9127 ;;      Temps:          0       2       0       0
  9128 ;;      Totals:         0       6       0       0
  9129 ;;Total ram usage:        6 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    9
  9132 ;; This function calls:
  9133 ;;		_ES_EnQueueFIFO
  9134 ;; This function is called by:
  9135 ;;		_InitPatternControlService
  9136 ;;		_PostPatternControlService
  9137 ;;		_InitSPI32ControlService
  9138 ;;		_PostSPI32ControlService
  9139 ;;		_InitCanRX_Service
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text46
  9144  002272                     __ptext46:
  9145                           	opt stack 0
  9146  002272                     _ES_PostToService:
  9147                           	opt stack 17
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;incstack = 0
  9151                           ;ES_PostToService@WhichService stored from wreg
  9152  002272  0100               	movlb	0	; () banked
  9153  002274  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
  9154                           
  9155                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  9156                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  9157                           ;ES_Framework.c: 354: 1 )){
  9158  002276  0E03               	movlw	3
  9159  002278  0100               	movlb	0	; () banked
  9160  00227A  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
  9161  00227C  D033               	goto	l2748
  9162                           
  9163                           ; BSR set to: 0
  9164  00227E  0100               	movlb	0	; () banked
  9165  002280  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  9166  002282  0D03               	mullw	3
  9167  002284  0E5C               	movlw	low _EventQueues
  9168  002286  24F3               	addwf	prodl,w,c
  9169  002288  6EF6               	movwf	tblptrl,c
  9170  00228A  0E03               	movlw	high _EventQueues
  9171  00228C  20F4               	addwfc	prodh,w,c
  9172  00228E  6EF7               	movwf	tblptrh,c
  9173  002290                     	if	0	;There are less than 3 active tblptr bytes
  9174  002290                     	endif
  9175  002290  0009               	tblrd		*+
  9176  002292  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
  9177  002296  000A               	tblrd		*-
  9178  002298  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  9179  00229C  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  9180  0022A0  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  9181  0022A4  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  9182  0022A8  ECB3  F00C         	call	_ES_EnQueueFIFO	;wreg free
  9183  0022AC  06E8               	decf	wreg,f,c
  9184  0022AE  A4D8               	btfss	status,2,c
  9185  0022B0  D019               	goto	l2748
  9186                           
  9187                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  9188  0022B2  0100               	movlb	0	; () banked
  9189  0022B4  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  9190  0022B6  0D02               	mullw	2
  9191  0022B8  0E01               	movlw	low _BitNum2SetMask
  9192  0022BA  24F3               	addwf	prodl,w,c
  9193  0022BC  6EF6               	movwf	tblptrl,c
  9194  0022BE  0E03               	movlw	high _BitNum2SetMask
  9195  0022C0  20F4               	addwfc	prodh,w,c
  9196  0022C2  6EF7               	movwf	tblptrh,c
  9197  0022C4                     	if	0	;There are less than 3 active tblptr bytes
  9198  0022C4                     	endif
  9199  0022C4  0009               	tblrd		*+
  9200  0022C6  CFF5 F07A          	movff	tablat,??_ES_PostToService
  9201  0022CA  0009               	tblrd		*+
  9202  0022CC  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
  9203  0022D0  0100               	movlb	0	; () banked
  9204  0022D2  517A               	movf	??_ES_PostToService& (0+255),w,b
  9205  0022D4  0100               	movlb	0	; () banked
  9206  0022D6  13DA               	iorwf	_Ready& (0+255),f,b
  9207  0022D8  0100               	movlb	0	; () banked
  9208  0022DA  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
  9209  0022DC  0100               	movlb	0	; () banked
  9210  0022DE  13DB               	iorwf	(_Ready+1)& (0+255),f,b
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;ES_Framework.c: 356: return 1;
  9214  0022E0  0E01               	movlw	1
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;ES_Framework.c: 357: } else
  9218                           
  9219                           ; BSR set to: 0
  9220  0022E2  0012               	return	
  9221  0022E4                     l2748:
  9222                           
  9223                           ;ES_Framework.c: 358: return 0;
  9224  0022E4  0E00               	movlw	0
  9225  0022E6  0012               	return	
  9226  0022E8                     __end_of_ES_PostToService:
  9227                           	opt stack 0
  9228                           tosu	equ	0xFFF
  9229                           tosh	equ	0xFFE
  9230                           tosl	equ	0xFFD
  9231                           pclath	equ	0xFFA
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           indf1	equ	0xFE7
  9242                           postinc1	equ	0xFE6
  9243                           postdec1	equ	0xFE5
  9244                           fsr1h	equ	0xFE2
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           fsr2h	equ	0xFDA
  9250                           fsr2l	equ	0xFD9
  9251                           status	equ	0xFD8
  9252                           
  9253 ;; *************** function _ES_EnQueueFIFO *****************
  9254 ;; Defined at:
  9255 ;;		line 85 in file "ES_Queue.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  9258 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9259 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  9262 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9263 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      unsigned char 
  9266 ;; Registers used:
  9267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9273 ;;      Params:         0       5       0       0
  9274 ;;      Locals:         0       3       0       0
  9275 ;;      Temps:          0       3       0       0
  9276 ;;      Totals:         0      11       0       0
  9277 ;;Total ram usage:       11 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    8
  9280 ;; This function calls:
  9281 ;;		___awmod
  9282 ;;		___wmul
  9283 ;; This function is called by:
  9284 ;;		_ES_PostToService
  9285 ;;		_ES_PostAll
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text47
  9290  001966                     __ptext47:
  9291                           	opt stack 0
  9292  001966                     _ES_EnQueueFIFO:
  9293                           	opt stack 17
  9294                           
  9295                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  9296                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  9297                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  9298                           
  9299                           ;incstack = 0
  9300  001966  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  9301  00196A  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  9302                           
  9303                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  9304  00196E  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9305  001972  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9306  001976  0100               	movlb	0	; () banked
  9307  001978  EE10 F002          	lfsr	1,2
  9308  00197C  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9309  00197E  26E1               	addwf	fsr1l,f,c
  9310  001980  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9311  001982  22E2               	addwfc	fsr1h,f,c
  9312  001984  50DE               	movf	postinc2,w,c
  9313  001986  5CE6               	subwf	postinc1,w,c
  9314  001988  B0D8               	btfsc	status,0,c
  9315  00198A  D05C               	goto	l2732
  9316                           
  9317                           ; BSR set to: 0
  9318                           
  9319                           ;ES_Queue.c: 92: {
  9320                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  9321  00198C  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  9322  001990  9EF2               	bcf	intcon,7,c	;volatile
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  9326                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  9327                           
  9328                           ; BSR set to: 0
  9329  001992  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9330  001996  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9331  00199A  50DF               	movf	indf2,w,c
  9332  00199C  0100               	movlb	0	; () banked
  9333  00199E  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
  9334  0019A0  0100               	movlb	0	; () banked
  9335  0019A2  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  9336  0019A4  0100               	movlb	0	; () banked
  9337  0019A6  6F62               	movwf	___awmod@divisor& (0+255),b
  9338  0019A8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  9339  0019AA  0100               	movlb	0	; () banked
  9340  0019AC  EE20 F002          	lfsr	2,2
  9341  0019B0  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9342  0019B2  26D9               	addwf	fsr2l,f,c
  9343  0019B4  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9344  0019B6  22DA               	addwfc	fsr2h,f,c
  9345  0019B8  50DF               	movf	indf2,w,c
  9346  0019BA  0100               	movlb	0	; () banked
  9347  0019BC  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  9348  0019BE  0100               	movlb	0	; () banked
  9349  0019C0  EE20 F001          	lfsr	2,1
  9350  0019C4  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9351  0019C6  26D9               	addwf	fsr2l,f,c
  9352  0019C8  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9353  0019CA  22DA               	addwfc	fsr2h,f,c
  9354  0019CC  50DF               	movf	indf2,w,c
  9355  0019CE  0100               	movlb	0	; () banked
  9356  0019D0  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  9357  0019D2  0100               	movlb	0	; () banked
  9358  0019D4  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  9359  0019D6  0100               	movlb	0	; () banked
  9360  0019D8  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  9361  0019DA  0100               	movlb	0	; () banked
  9362  0019DC  6F60               	movwf	___awmod@dividend& (0+255),b
  9363  0019DE  0100               	movlb	0	; () banked
  9364  0019E0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  9365  0019E2  0100               	movlb	0	; () banked
  9366  0019E4  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  9367  0019E6  ECAE  F00F         	call	___awmod	;wreg free
  9368  0019EA  0E01               	movlw	1
  9369  0019EC  0100               	movlb	0	; () banked
  9370  0019EE  2560               	addwf	?___awmod& (0+255),w,b
  9371  0019F0  0100               	movlb	0	; () banked
  9372  0019F2  6F66               	movwf	___wmul@multiplier& (0+255),b
  9373  0019F4  0E00               	movlw	0
  9374  0019F6  0100               	movlb	0	; () banked
  9375  0019F8  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  9376  0019FA  0100               	movlb	0	; () banked
  9377  0019FC  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9378  0019FE  0E00               	movlw	0
  9379  001A00  0100               	movlb	0	; () banked
  9380  001A02  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9381  001A04  0E03               	movlw	3
  9382  001A06  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9383  001A08  EC6F  F013         	call	___wmul	;wreg free
  9384  001A0C  0100               	movlb	0	; () banked
  9385  001A0E  5166               	movf	?___wmul& (0+255),w,b
  9386  001A10  0100               	movlb	0	; () banked
  9387  001A12  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  9388  001A14  6ED9               	movwf	fsr2l,c
  9389  001A16  0100               	movlb	0	; () banked
  9390  001A18  5167               	movf	(?___wmul+1)& (0+255),w,b
  9391  001A1A  0100               	movlb	0	; () banked
  9392  001A1C  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  9393  001A1E  6EDA               	movwf	fsr2h,c
  9394  001A20  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  9395  001A24  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  9396  001A28  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  9400  001A2C  0100               	movlb	0	; () banked
  9401  001A2E  EE20 F002          	lfsr	2,2
  9402  001A32  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9403  001A34  26D9               	addwf	fsr2l,f,c
  9404  001A36  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9405  001A38  22DA               	addwfc	fsr2h,f,c
  9406  001A3A  2ADF               	incf	indf2,f,c
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  9410  001A3C  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;ES_Queue.c: 101: return(1);
  9414  001A40  0E01               	movlw	1
  9415                           
  9416                           ; BSR set to: 0
  9417                           ;ES_Queue.c: 102: }else
  9418                           
  9419                           ; BSR set to: 0
  9420  001A42  0012               	return	
  9421  001A44                     l2732:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;ES_Queue.c: 103: return(0);
  9425  001A44  0E00               	movlw	0
  9426                           
  9427                           ; BSR set to: 0
  9428  001A46  0012               	return	
  9429  001A48                     __end_of_ES_EnQueueFIFO:
  9430                           	opt stack 0
  9431                           tosu	equ	0xFFF
  9432                           tosh	equ	0xFFE
  9433                           tosl	equ	0xFFD
  9434                           pclath	equ	0xFFA
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           postinc0	equ	0xFEE
  9443                           wreg	equ	0xFE8
  9444                           indf1	equ	0xFE7
  9445                           postinc1	equ	0xFE6
  9446                           postdec1	equ	0xFE5
  9447                           fsr1h	equ	0xFE2
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function ___wmul *****************
  9457 ;; Defined at:
  9458 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  multiplier      2    6[BANK0 ] unsigned int 
  9461 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  product         2   10[BANK0 ] unsigned int 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  2    6[BANK0 ] unsigned int 
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0, prodl, prodh
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9473 ;;      Params:         0       4       0       0
  9474 ;;      Locals:         0       2       0       0
  9475 ;;      Temps:          0       0       0       0
  9476 ;;      Totals:         0       6       0       0
  9477 ;;Total ram usage:        6 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    7
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_ES_EnQueueFIFO
  9484 ;;		_ES_DeQueue
  9485 ;;		_UpdatePattern
  9486 ;;		_HSV_to_RGB
  9487 ;;		i2_ES_EnQueueFIFO
  9488 ;;		_ES_EnQueueLIFO
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text48
  9493  0026DE                     __ptext48:
  9494                           	opt stack 0
  9495  0026DE                     ___wmul:
  9496                           	opt stack 17
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;incstack = 0
  9500  0026DE  0100               	movlb	0	; () banked
  9501  0026E0  5166               	movf	___wmul@multiplier& (0+255),w,b
  9502  0026E2  0100               	movlb	0	; () banked
  9503  0026E4  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9504  0026E6  CFF3 F06A          	movff	prodl,___wmul@product
  9505  0026EA  CFF4 F06B          	movff	prodh,___wmul@product+1
  9506  0026EE  0100               	movlb	0	; () banked
  9507  0026F0  5166               	movf	___wmul@multiplier& (0+255),w,b
  9508  0026F2  0100               	movlb	0	; () banked
  9509  0026F4  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9510  0026F6  50F3               	movf	prodl,w,c
  9511  0026F8  0100               	movlb	0	; () banked
  9512  0026FA  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9513  0026FC  0100               	movlb	0	; () banked
  9514  0026FE  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9515  002700  0100               	movlb	0	; () banked
  9516  002702  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9517  002704  50F3               	movf	prodl,w,c
  9518  002706  0100               	movlb	0	; () banked
  9519  002708  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9520                           
  9521                           ; BSR set to: 0
  9522  00270A  C06A  F066         	movff	___wmul@product,?___wmul
  9523  00270E  C06B  F067         	movff	___wmul@product+1,?___wmul+1
  9524  002712  0012               	return	
  9525  002714                     __end_of___wmul:
  9526                           	opt stack 0
  9527                           tosu	equ	0xFFF
  9528                           tosh	equ	0xFFE
  9529                           tosl	equ	0xFFD
  9530                           pclath	equ	0xFFA
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodh	equ	0xFF4
  9536                           prodl	equ	0xFF3
  9537                           intcon	equ	0xFF2
  9538                           postinc0	equ	0xFEE
  9539                           wreg	equ	0xFE8
  9540                           indf1	equ	0xFE7
  9541                           postinc1	equ	0xFE6
  9542                           postdec1	equ	0xFE5
  9543                           fsr1h	equ	0xFE2
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function ___awmod *****************
  9553 ;; Defined at:
  9554 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;  dividend        2    0[BANK0 ] int 
  9557 ;;  divisor         2    2[BANK0 ] int 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  sign            1    5[BANK0 ] unsigned char 
  9560 ;;  counter         1    4[BANK0 ] unsigned char 
  9561 ;; Return value:  Size  Location     Type
  9562 ;;                  2    0[BANK0 ] int 
  9563 ;; Registers used:
  9564 ;;		wreg, status,2, status,0
  9565 ;; Tracked objects:
  9566 ;;		On entry : 0/0
  9567 ;;		On exit  : 0/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9570 ;;      Params:         0       4       0       0
  9571 ;;      Locals:         0       2       0       0
  9572 ;;      Temps:          0       0       0       0
  9573 ;;      Totals:         0       6       0       0
  9574 ;;Total ram usage:        6 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:    7
  9577 ;; This function calls:
  9578 ;;		Nothing
  9579 ;; This function is called by:
  9580 ;;		_ES_EnQueueFIFO
  9581 ;;		_UpdatePattern
  9582 ;;		_ThinkingPattern
  9583 ;;		_ListeningPattern
  9584 ;;		_SpeakingPattern
  9585 ;;		_IdlePattern
  9586 ;;		i2_ES_EnQueueFIFO
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text49
  9591  001F5C                     __ptext49:
  9592                           	opt stack 0
  9593  001F5C                     ___awmod:
  9594                           	opt stack 17
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;incstack = 0
  9598  001F5C  0E00               	movlw	0
  9599  001F5E  0100               	movlb	0	; () banked
  9600  001F60  6F65               	movwf	___awmod@sign& (0+255),b
  9601                           
  9602                           ; BSR set to: 0
  9603  001F62  0100               	movlb	0	; () banked
  9604  001F64  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9605  001F66  D008               	goto	l2688
  9606                           
  9607                           ; BSR set to: 0
  9608  001F68  0100               	movlb	0	; () banked
  9609  001F6A  6D60               	negf	___awmod@dividend& (0+255),b
  9610  001F6C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9611  001F6E  B0D8               	btfsc	status,0,c
  9612  001F70  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9613                           
  9614                           ; BSR set to: 0
  9615  001F72  0E01               	movlw	1
  9616  001F74  0100               	movlb	0	; () banked
  9617  001F76  6F65               	movwf	___awmod@sign& (0+255),b
  9618  001F78                     l2688:
  9619                           
  9620                           ; BSR set to: 0
  9621  001F78  0100               	movlb	0	; () banked
  9622  001F7A  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9623  001F7C  D005               	goto	l2692
  9624                           
  9625                           ; BSR set to: 0
  9626  001F7E  0100               	movlb	0	; () banked
  9627  001F80  6D62               	negf	___awmod@divisor& (0+255),b
  9628  001F82  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  9629  001F84  B0D8               	btfsc	status,0,c
  9630  001F86  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  9631  001F88                     l2692:
  9632                           
  9633                           ; BSR set to: 0
  9634  001F88  0100               	movlb	0	; () banked
  9635  001F8A  5162               	movf	___awmod@divisor& (0+255),w,b
  9636  001F8C  0100               	movlb	0	; () banked
  9637  001F8E  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9638  001F90  B4D8               	btfsc	status,2,c
  9639  001F92  D026               	goto	l2708
  9640                           
  9641                           ; BSR set to: 0
  9642  001F94  0E01               	movlw	1
  9643  001F96  0100               	movlb	0	; () banked
  9644  001F98  6F64               	movwf	___awmod@counter& (0+255),b
  9645  001F9A  D006               	goto	l2698
  9646  001F9C                     l2696:
  9647                           
  9648                           ; BSR set to: 0
  9649  001F9C  0100               	movlb	0	; () banked
  9650  001F9E  90D8               	bcf	status,0,c
  9651  001FA0  3762               	rlcf	___awmod@divisor& (0+255),f,b
  9652  001FA2  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9653  001FA4  0100               	movlb	0	; () banked
  9654  001FA6  2B64               	incf	___awmod@counter& (0+255),f,b
  9655  001FA8                     l2698:
  9656                           
  9657                           ; BSR set to: 0
  9658  001FA8  0100               	movlb	0	; () banked
  9659  001FAA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9660  001FAC  D7F7               	goto	l2696
  9661  001FAE                     l2700:
  9662                           
  9663                           ; BSR set to: 0
  9664  001FAE  0100               	movlb	0	; () banked
  9665  001FB0  5162               	movf	___awmod@divisor& (0+255),w,b
  9666  001FB2  0100               	movlb	0	; () banked
  9667  001FB4  5D60               	subwf	___awmod@dividend& (0+255),w,b
  9668  001FB6  0100               	movlb	0	; () banked
  9669  001FB8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9670  001FBA  0100               	movlb	0	; () banked
  9671  001FBC  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9672  001FBE  A0D8               	btfss	status,0,c
  9673  001FC0  D008               	goto	l2704
  9674                           
  9675                           ; BSR set to: 0
  9676  001FC2  0100               	movlb	0	; () banked
  9677  001FC4  5162               	movf	___awmod@divisor& (0+255),w,b
  9678  001FC6  0100               	movlb	0	; () banked
  9679  001FC8  5F60               	subwf	___awmod@dividend& (0+255),f,b
  9680  001FCA  0100               	movlb	0	; () banked
  9681  001FCC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9682  001FCE  0100               	movlb	0	; () banked
  9683  001FD0  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9684  001FD2                     l2704:
  9685                           
  9686                           ; BSR set to: 0
  9687  001FD2  0100               	movlb	0	; () banked
  9688  001FD4  90D8               	bcf	status,0,c
  9689  001FD6  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9690  001FD8  3362               	rrcf	___awmod@divisor& (0+255),f,b
  9691                           
  9692                           ; BSR set to: 0
  9693  001FDA  0100               	movlb	0	; () banked
  9694  001FDC  2F64               	decfsz	___awmod@counter& (0+255),f,b
  9695  001FDE  D7E7               	goto	l2700
  9696  001FE0                     l2708:
  9697                           
  9698                           ; BSR set to: 0
  9699  001FE0  0100               	movlb	0	; () banked
  9700  001FE2  5165               	movf	___awmod@sign& (0+255),w,b
  9701  001FE4  0100               	movlb	0	; () banked
  9702  001FE6  B4D8               	btfsc	status,2,c
  9703  001FE8  D005               	goto	l2712
  9704                           
  9705                           ; BSR set to: 0
  9706  001FEA  0100               	movlb	0	; () banked
  9707  001FEC  6D60               	negf	___awmod@dividend& (0+255),b
  9708  001FEE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9709  001FF0  B0D8               	btfsc	status,0,c
  9710  001FF2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9711  001FF4                     l2712:
  9712                           
  9713                           ; BSR set to: 0
  9714  001FF4  C060  F060         	movff	___awmod@dividend,?___awmod
  9715  001FF8  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  9716  001FFC  0012               	return	
  9717  001FFE                     __end_of___awmod:
  9718                           	opt stack 0
  9719                           tosu	equ	0xFFF
  9720                           tosh	equ	0xFFE
  9721                           tosl	equ	0xFFD
  9722                           pclath	equ	0xFFA
  9723                           tblptru	equ	0xFF8
  9724                           tblptrh	equ	0xFF7
  9725                           tblptrl	equ	0xFF6
  9726                           tablat	equ	0xFF5
  9727                           prodh	equ	0xFF4
  9728                           prodl	equ	0xFF3
  9729                           intcon	equ	0xFF2
  9730                           postinc0	equ	0xFEE
  9731                           wreg	equ	0xFE8
  9732                           indf1	equ	0xFE7
  9733                           postinc1	equ	0xFE6
  9734                           postdec1	equ	0xFE5
  9735                           fsr1h	equ	0xFE2
  9736                           fsr1l	equ	0xFE1
  9737                           indf2	equ	0xFDF
  9738                           postinc2	equ	0xFDE
  9739                           postdec2	equ	0xFDD
  9740                           fsr2h	equ	0xFDA
  9741                           fsr2l	equ	0xFD9
  9742                           status	equ	0xFD8
  9743                           
  9744 ;; *************** function _ES_Timer_Init *****************
  9745 ;; Defined at:
  9746 ;;		line 130 in file "ES_Timers.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;  Rate            2    2[BANK0 ] enum E15428
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  1    wreg      void 
  9753 ;; Registers used:
  9754 ;;		wreg, status,2, cstack
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9760 ;;      Params:         0       2       0       0
  9761 ;;      Locals:         0       0       0       0
  9762 ;;      Temps:          0       0       0       0
  9763 ;;      Totals:         0       2       0       0
  9764 ;;Total ram usage:        2 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; Hardware stack levels required when called:    8
  9767 ;; This function calls:
  9768 ;;		__HW_Timer_Init
  9769 ;; This function is called by:
  9770 ;;		_ES_Initialize
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           	psect	text50
  9775  002912                     __ptext50:
  9776                           	opt stack 0
  9777  002912                     _ES_Timer_Init:
  9778                           	opt stack 21
  9779                           
  9780                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;incstack = 0
  9784  002912  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  9785  002916  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  9786  00291A  EC2E  F014         	call	__HW_Timer_Init	;wreg free
  9787  00291E  0012               	return		;funcret
  9788  002920                     __end_of_ES_Timer_Init:
  9789                           	opt stack 0
  9790                           tosu	equ	0xFFF
  9791                           tosh	equ	0xFFE
  9792                           tosl	equ	0xFFD
  9793                           pclath	equ	0xFFA
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           postinc0	equ	0xFEE
  9802                           wreg	equ	0xFE8
  9803                           indf1	equ	0xFE7
  9804                           postinc1	equ	0xFE6
  9805                           postdec1	equ	0xFE5
  9806                           fsr1h	equ	0xFE2
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function __HW_Timer_Init *****************
  9816 ;; Defined at:
  9817 ;;		line 72 in file "ES_Port.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;  Rate            2    0[BANK0 ] enum E15412
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      void 
  9824 ;; Registers used:
  9825 ;;		wreg, status,2
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9831 ;;      Params:         0       2       0       0
  9832 ;;      Locals:         0       0       0       0
  9833 ;;      Temps:          0       0       0       0
  9834 ;;      Totals:         0       2       0       0
  9835 ;;Total ram usage:        2 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    7
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		_ES_Timer_Init
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text51
  9846  00285C                     __ptext51:
  9847                           	opt stack 0
  9848  00285C                     __HW_Timer_Init:
  9849                           	opt stack 21
  9850                           
  9851                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  9852                           
  9853                           ;incstack = 0
  9854  00285C  0E04               	movlw	4
  9855  00285E  6E9D               	movwf	3997,c	;volatile
  9856                           
  9857                           ;ES_Port.c: 85: INTCON = 0b01000000;
  9858  002860  0E40               	movlw	64
  9859  002862  6EF2               	movwf	intcon,c	;volatile
  9860                           
  9861                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  9862  002864  0E0A               	movlw	10
  9863  002866  6EBD               	movwf	4029,c	;volatile
  9864                           
  9865                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  9866  002868  0E01               	movlw	1
  9867  00286A  6EBE               	movwf	4030,c	;volatile
  9868                           
  9869                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  9870  00286C  0E00               	movlw	0
  9871  00286E  6EBF               	movwf	4031,c	;volatile
  9872                           
  9873                           ;ES_Port.c: 107: T1CON = 0b00100001;
  9874  002870  0E21               	movlw	33
  9875  002872  6ECD               	movwf	4045,c	;volatile
  9876                           
  9877                           ;ES_Port.c: 109: {GIE = 1;};
  9878  002874  8EF2               	bsf	intcon,7,c	;volatile
  9879  002876  0012               	return		;funcret
  9880  002878                     __end_of__HW_Timer_Init:
  9881                           	opt stack 0
  9882                           tosu	equ	0xFFF
  9883                           tosh	equ	0xFFE
  9884                           tosl	equ	0xFFD
  9885                           pclath	equ	0xFFA
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon	equ	0xFF2
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postinc1	equ	0xFE6
  9897                           postdec1	equ	0xFE5
  9898                           fsr1h	equ	0xFE2
  9899                           fsr1l	equ	0xFE1
  9900                           indf2	equ	0xFDF
  9901                           postinc2	equ	0xFDE
  9902                           postdec2	equ	0xFDD
  9903                           fsr2h	equ	0xFDA
  9904                           fsr2l	equ	0xFD9
  9905                           status	equ	0xFD8
  9906                           
  9907 ;; *************** function _ES_InitQueue *****************
  9908 ;; Defined at:
  9909 ;;		line 58 in file "ES_Queue.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  9912 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9913 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  9916 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      unsigned char 
  9919 ;; Registers used:
  9920 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9926 ;;      Params:         0       3       0       0
  9927 ;;      Locals:         0       2       0       0
  9928 ;;      Temps:          0       0       0       0
  9929 ;;      Totals:         0       5       0       0
  9930 ;;Total ram usage:        5 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    7
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_ES_Initialize
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           	psect	text52
  9941  00262E                     __ptext52:
  9942                           	opt stack 0
  9943  00262E                     _ES_InitQueue:
  9944                           	opt stack 22
  9945                           
  9946                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  9947                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  9948                           
  9949                           ;incstack = 0
  9950  00262E  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  9951  002632  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  9952                           
  9953                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  9954  002636  0100               	movlb	0	; () banked
  9955  002638  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  9956  00263A  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  9957  00263E  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  9958  002642  6EDF               	movwf	indf2,c
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  9962  002644  0100               	movlb	0	; () banked
  9963  002646  EE20 F001          	lfsr	2,1
  9964  00264A  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  9965  00264C  26D9               	addwf	fsr2l,f,c
  9966  00264E  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  9967  002650  22DA               	addwfc	fsr2h,f,c
  9968  002652  0E00               	movlw	0
  9969  002654  6EDF               	movwf	indf2,c
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  9973  002656  0100               	movlb	0	; () banked
  9974  002658  EE20 F002          	lfsr	2,2
  9975  00265C  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  9976  00265E  26D9               	addwf	fsr2l,f,c
  9977  002660  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  9978  002662  22DA               	addwfc	fsr2h,f,c
  9979  002664  0E00               	movlw	0
  9980  002666  6EDF               	movwf	indf2,c
  9981  002668  0012               	return	
  9982  00266A                     __end_of_ES_InitQueue:
  9983                           	opt stack 0
  9984                           tosu	equ	0xFFF
  9985                           tosh	equ	0xFFE
  9986                           tosl	equ	0xFFD
  9987                           pclath	equ	0xFFA
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           prodh	equ	0xFF4
  9993                           prodl	equ	0xFF3
  9994                           intcon	equ	0xFF2
  9995                           postinc0	equ	0xFEE
  9996                           wreg	equ	0xFE8
  9997                           indf1	equ	0xFE7
  9998                           postinc1	equ	0xFE6
  9999                           postdec1	equ	0xFE5
 10000                           fsr1h	equ	0xFE2
 10001                           fsr1l	equ	0xFE1
 10002                           indf2	equ	0xFDF
 10003                           postinc2	equ	0xFDE
 10004                           postdec2	equ	0xFDD
 10005                           fsr2h	equ	0xFDA
 10006                           fsr2l	equ	0xFD9
 10007                           status	equ	0xFD8
 10008                           
 10009 ;; *************** function _ISR *****************
 10010 ;; Defined at:
 10011 ;;		line 112 in file "ES_Port.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;		None
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;		None
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  1    wreg      void 
 10018 ;; Registers used:
 10019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10025 ;;      Params:         0       0       0       0
 10026 ;;      Locals:         0       0       0       0
 10027 ;;      Temps:         16       0       0       0
 10028 ;;      Totals:        16       0       0       0
 10029 ;;Total ram usage:       16 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    6
 10032 ;; This function calls:
 10033 ;;		_BusErrorResponse
 10034 ;;		_CanErrorResponse
 10035 ;;		_CanRCVResponse
 10036 ;;		_CanXmitResponse
 10037 ;;		_SPI32_EOTResponse
 10038 ;; This function is called by:
 10039 ;;		Interrupt level 2
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	intcode
 10044  000008                     __pintcode:
 10045                           	opt stack 0
 10046  000008                     _ISR:
 10047                           	opt stack 15
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;incstack = 0
 10051  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10052  00000A  CFFA F026          	movff	pclath,??_ISR+2
 10053  00000E  CFFB F027          	movff	pclatu,??_ISR+3
 10054  000012  ED24  F00D         	call	int_func,f	;refresh shadow registers
 10055                           tosu	equ	0xFFF
 10056                           tosh	equ	0xFFE
 10057                           tosl	equ	0xFFD
 10058                           pclatu	equ	0xFFB
 10059                           pclath	equ	0xFFA
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           postinc0	equ	0xFEE
 10068                           wreg	equ	0xFE8
 10069                           indf1	equ	0xFE7
 10070                           postinc1	equ	0xFE6
 10071                           postdec1	equ	0xFE5
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081                           	psect	intcode_body
 10082  001A48                     __pintcode_body:
 10083                           	opt stack 15
 10084  001A48                     int_func:
 10085                           	opt stack 15
 10086  001A48  0006               	pop		; remove dummy address from shadow register refresh
 10087  001A4A  CFE9 F028          	movff	fsr0l,??_ISR+4
 10088  001A4E  CFEA F029          	movff	fsr0h,??_ISR+5
 10089  001A52  CFE1 F02A          	movff	fsr1l,??_ISR+6
 10090  001A56  CFE2 F02B          	movff	fsr1h,??_ISR+7
 10091  001A5A  CFD9 F02C          	movff	fsr2l,??_ISR+8
 10092  001A5E  CFDA F02D          	movff	fsr2h,??_ISR+9
 10093  001A62  CFF3 F02E          	movff	prodl,??_ISR+10
 10094  001A66  CFF4 F02F          	movff	prodh,??_ISR+11
 10095  001A6A  CFF6 F030          	movff	tblptrl,??_ISR+12
 10096  001A6E  CFF7 F031          	movff	tblptrh,??_ISR+13
 10097  001A72  CFF8 F032          	movff	tblptru,??_ISR+14
 10098  001A76  CFF5 F033          	movff	tablat,??_ISR+15
 10099                           
 10100                           ;ES_Port.c: 115: static unsigned int LastTime;
 10101                           ;ES_Port.c: 116: static unsigned int NextTime;
 10102                           ;ES_Port.c: 118: if (CCP1IF == 1)
 10103  001A7A  A49E               	btfss	3998,2,c	;volatile
 10104  001A7C  D015               	goto	i2l3778
 10105                           
 10106                           ;ES_Port.c: 119: {
 10107                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 10108  001A7E  50BF               	movf	4031,w,c	;volatile
 10109  001A80  6E24               	movwf	??_ISR& (0+255),c
 10110  001A82  50BE               	movf	4030,w,c	;volatile
 10111  001A84  6E38               	movwf	ISR@LastTime,c
 10112  001A86  C024  F039         	movff	??_ISR,ISR@LastTime+1
 10113                           
 10114                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 10115  001A8A  0E20               	movlw	32
 10116  001A8C  2438               	addwf	ISR@LastTime,w,c
 10117  001A8E  6E3A               	movwf	ISR@NextTime,c
 10118  001A90  0E4E               	movlw	78
 10119  001A92  2039               	addwfc	ISR@LastTime+1,w,c
 10120  001A94  6E3B               	movwf	ISR@NextTime+1,c
 10121                           
 10122                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 10123  001A96  503B               	movf	ISR@NextTime+1,w,c
 10124  001A98  6EBF               	movwf	4031,c	;volatile
 10125                           
 10126                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 10127  001A9A  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
 10128                           
 10129                           ;ES_Port.c: 124: CCP1IF = 0;
 10130  001A9E  949E               	bcf	3998,2,c	;volatile
 10131                           
 10132                           ;ES_Port.c: 125: TickCount++;
 10133  001AA0  0100               	movlb	0	; () banked
 10134  001AA2  2BE9               	incf	_TickCount& (0+255),f,b	;volatile
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;ES_Port.c: 126: SysTickCounter++;
 10138  001AA4  4A3C               	infsnz	_SysTickCounter,f,c	;volatile
 10139  001AA6  2A3D               	incf	_SysTickCounter+1,f,c	;volatile
 10140  001AA8                     i2l3778:
 10141                           
 10142                           ;ES_Port.c: 127: }
 10143                           ;ES_Port.c: 128: if (SSPIF == 1)
 10144  001AA8  A69E               	btfss	3998,3,c	;volatile
 10145  001AAA  D003               	goto	i2l3784
 10146                           
 10147                           ;ES_Port.c: 129: {
 10148                           ;ES_Port.c: 130: SSPIF = 0;
 10149  001AAC  969E               	bcf	3998,3,c	;volatile
 10150                           
 10151                           ;ES_Port.c: 131: SPI32_EOTResponse();
 10152  001AAE  EC52  F013         	call	_SPI32_EOTResponse	;wreg free
 10153  001AB2                     i2l3784:
 10154                           
 10155                           ;ES_Port.c: 132: }
 10156                           ;ES_Port.c: 133: if (TXB0IF == 1)
 10157  001AB2  A4A4               	btfss	4004,2,c	;volatile
 10158  001AB4  D003               	goto	i2l3790
 10159                           
 10160                           ;ES_Port.c: 134: {
 10161                           ;ES_Port.c: 135: TXB0IF = 0;
 10162  001AB6  94A4               	bcf	4004,2,c	;volatile
 10163                           
 10164                           ;ES_Port.c: 136: CanXmitResponse();
 10165  001AB8  ECA9  F014         	call	_CanXmitResponse	;wreg free
 10166  001ABC                     i2l3790:
 10167                           
 10168                           ;ES_Port.c: 137: }
 10169                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 10170  001ABC  A0A4               	btfss	4004,0,c	;volatile
 10171  001ABE  D003               	goto	i2l3796
 10172                           
 10173                           ;ES_Port.c: 139: RXB0IF = 0;
 10174  001AC0  90A4               	bcf	4004,0,c	;volatile
 10175                           
 10176                           ;ES_Port.c: 140: CanRCVResponse();
 10177  001AC2  EC90  F014         	call	_CanRCVResponse	;wreg free
 10178  001AC6                     i2l3796:
 10179                           
 10180                           ;ES_Port.c: 141: }
 10181                           ;ES_Port.c: 142: if (ERRIF == 1) {
 10182  001AC6  AAA4               	btfss	4004,5,c	;volatile
 10183  001AC8  D003               	goto	i2l3802
 10184                           
 10185                           ;ES_Port.c: 143: ERRIF = 0;
 10186  001ACA  9AA4               	bcf	4004,5,c	;volatile
 10187                           
 10188                           ;ES_Port.c: 144: CanErrorResponse();
 10189  001ACC  ECAF  F014         	call	_CanErrorResponse	;wreg free
 10190  001AD0                     i2l3802:
 10191                           
 10192                           ;ES_Port.c: 145: }
 10193                           ;ES_Port.c: 146: if (IRXIF == 1) {
 10194  001AD0  AEA4               	btfss	4004,7,c	;volatile
 10195  001AD2  D003               	goto	i2l175
 10196                           
 10197                           ;ES_Port.c: 147: IRXIF = 0;
 10198  001AD4  9EA4               	bcf	4004,7,c	;volatile
 10199                           
 10200                           ;ES_Port.c: 148: BusErrorResponse();
 10201  001AD6  ECB0  F014         	call	_BusErrorResponse	;wreg free
 10202  001ADA                     i2l175:
 10203  001ADA  C033  FFF5         	movff	??_ISR+15,tablat
 10204  001ADE  C032  FFF8         	movff	??_ISR+14,tblptru
 10205  001AE2  C031  FFF7         	movff	??_ISR+13,tblptrh
 10206  001AE6  C030  FFF6         	movff	??_ISR+12,tblptrl
 10207  001AEA  C02F  FFF4         	movff	??_ISR+11,prodh
 10208  001AEE  C02E  FFF3         	movff	??_ISR+10,prodl
 10209  001AF2  C02D  FFDA         	movff	??_ISR+9,fsr2h
 10210  001AF6  C02C  FFD9         	movff	??_ISR+8,fsr2l
 10211  001AFA  C02B  FFE2         	movff	??_ISR+7,fsr1h
 10212  001AFE  C02A  FFE1         	movff	??_ISR+6,fsr1l
 10213  001B02  C029  FFEA         	movff	??_ISR+5,fsr0h
 10214  001B06  C028  FFE9         	movff	??_ISR+4,fsr0l
 10215  001B0A  C027  FFFB         	movff	??_ISR+3,pclatu
 10216  001B0E  C026  FFFA         	movff	??_ISR+2,pclath
 10217  001B12  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10218  001B14  0011               	retfie		f
 10219  001B16                     __end_of_ISR:
 10220                           	opt stack 0
 10221                           tosu	equ	0xFFF
 10222                           tosh	equ	0xFFE
 10223                           tosl	equ	0xFFD
 10224                           pclatu	equ	0xFFB
 10225                           pclath	equ	0xFFA
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           postinc0	equ	0xFEE
 10234                           fsr0h	equ	0xFEA
 10235                           fsr0l	equ	0xFE9
 10236                           wreg	equ	0xFE8
 10237                           indf1	equ	0xFE7
 10238                           postinc1	equ	0xFE6
 10239                           postdec1	equ	0xFE5
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           fsr2h	equ	0xFDA
 10246                           fsr2l	equ	0xFD9
 10247                           status	equ	0xFD8
 10248                           
 10249 ;; *************** function _SPI32_EOTResponse *****************
 10250 ;; Defined at:
 10251 ;;		line 167 in file "SPI32_HW.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 10256 ;; Return value:  Size  Location     Type
 10257 ;;                  1    wreg      void 
 10258 ;; Registers used:
 10259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10265 ;;      Params:         0       0       0       0
 10266 ;;      Locals:         3       0       0       0
 10267 ;;      Temps:          0       0       0       0
 10268 ;;      Totals:         3       0       0       0
 10269 ;;Total ram usage:        3 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    4
 10272 ;; This function calls:
 10273 ;;		i2_PostSPI32ControlService
 10274 ;;		i2_SPI32_SendFrame
 10275 ;; This function is called by:
 10276 ;;		_ISR
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text54
 10281  0026A4                     __ptext54:
 10282                           	opt stack 0
 10283  0026A4                     _SPI32_EOTResponse:
 10284                           	opt stack 16
 10285                           
 10286                           ;SPI32_HW.c: 169: if(FrameByte == 0){
 10287                           
 10288                           ;incstack = 0
 10289  0026A4  0100               	movlb	0	; () banked
 10290  0026A6  51FA               	movf	_FrameByte& (0+255),w,b
 10291  0026A8  A4D8               	btfss	status,2,c
 10292  0026AA  D00E               	goto	i2l3676
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;SPI32_HW.c: 171: FrameByte = 4;
 10296  0026AC  0E04               	movlw	4
 10297  0026AE  0100               	movlb	0	; () banked
 10298  0026B0  6FFA               	movwf	_FrameByte& (0+255),b
 10299                           
 10300                           ;SPI32_HW.c: 173: ES_Event EOTevent;
 10301                           ;SPI32_HW.c: 174: EOTevent.EventType = ES_TIMEOUT;
 10302  0026B2  0E03               	movlw	3
 10303  0026B4  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;SPI32_HW.c: 175: PostSPI32ControlService(EOTevent);
 10307  0026B6  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 10308  0026BA  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 10309  0026BE  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 10310  0026C2  EC6C  F014         	call	i2_PostSPI32ControlService	;wreg free
 10311                           
 10312                           ;SPI32_HW.c: 176: }
 10313  0026C6  0012               	return	
 10314  0026C8                     i2l3676:
 10315                           
 10316                           ;SPI32_HW.c: 177: else{
 10317                           ;SPI32_HW.c: 179: SPI32_SendFrame(TransmitFrame);
 10318  0026C8  C034  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 10319  0026CC  C035  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 10320  0026D0  C036  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 10321  0026D4  C037  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 10322  0026D8  EC89  F012         	call	i2_SPI32_SendFrame	;wreg free
 10323  0026DC  0012               	return	
 10324  0026DE                     __end_of_SPI32_EOTResponse:
 10325                           	opt stack 0
 10326                           tosu	equ	0xFFF
 10327                           tosh	equ	0xFFE
 10328                           tosl	equ	0xFFD
 10329                           pclatu	equ	0xFFB
 10330                           pclath	equ	0xFFA
 10331                           tblptru	equ	0xFF8
 10332                           tblptrh	equ	0xFF7
 10333                           tblptrl	equ	0xFF6
 10334                           tablat	equ	0xFF5
 10335                           prodh	equ	0xFF4
 10336                           prodl	equ	0xFF3
 10337                           intcon	equ	0xFF2
 10338                           postinc0	equ	0xFEE
 10339                           fsr0h	equ	0xFEA
 10340                           fsr0l	equ	0xFE9
 10341                           wreg	equ	0xFE8
 10342                           indf1	equ	0xFE7
 10343                           postinc1	equ	0xFE6
 10344                           postdec1	equ	0xFE5
 10345                           fsr1h	equ	0xFE2
 10346                           fsr1l	equ	0xFE1
 10347                           indf2	equ	0xFDF
 10348                           postinc2	equ	0xFDE
 10349                           postdec2	equ	0xFDD
 10350                           fsr2h	equ	0xFDA
 10351                           fsr2l	equ	0xFD9
 10352                           status	equ	0xFD8
 10353                           
 10354 ;; *************** function i2_SPI32_SendFrame *****************
 10355 ;; Defined at:
 10356 ;;		line 86 in file "SPI32_HW.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;  newFrame        4    0[COMRAM] unsigned long 
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		wreg, status,2, status,0, prodl, prodh
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10370 ;;      Params:         4       0       0       0
 10371 ;;      Locals:         0       0       0       0
 10372 ;;      Temps:          4       0       0       0
 10373 ;;      Totals:         8       0       0       0
 10374 ;;Total ram usage:        8 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; This function calls:
 10377 ;;		Nothing
 10378 ;; This function is called by:
 10379 ;;		_SPI32_EOTResponse
 10380 ;; This function uses a non-reentrant model
 10381 ;;
 10382                           
 10383                           	psect	text55
 10384  002512                     __ptext55:
 10385                           	opt stack 0
 10386  002512                     i2_SPI32_SendFrame:
 10387                           	opt stack 19
 10388                           
 10389                           ;SPI32_HW.c: 101: if(FrameByte == 4){
 10390                           
 10391                           ;incstack = 0
 10392  002512  0E04               	movlw	4
 10393  002514  0100               	movlb	0	; () banked
 10394  002516  19FA               	xorwf	_FrameByte& (0+255),w,b
 10395  002518  A4D8               	btfss	status,2,c
 10396  00251A  D008               	goto	i2l3612
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
 10400  00251C  C001  F034         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 10401  002520  C002  F035         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 10402  002524  C003  F036         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 10403  002528  C004  F037         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 10404  00252C                     i2l3612:
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;SPI32_HW.c: 104: }
 10408                           ;SPI32_HW.c: 106: FrameByte--;
 10409  00252C  0100               	movlb	0	; () banked
 10410  00252E  07FA               	decf	_FrameByte& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 10414  002530  0100               	movlb	0	; () banked
 10415  002532  51FA               	movf	_FrameByte& (0+255),w,b
 10416  002534  0D08               	mullw	8
 10417  002536  50F3               	movf	prodl,w,c
 10418  002538  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 10419  00253C  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 10420  002540  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 10421  002544  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 10422  002548  2AE8               	incf	wreg,f,c
 10423  00254A  D005               	goto	i2u218_40
 10424  00254C                     i2u218_45:
 10425  00254C  90D8               	bcf	status,0,c
 10426  00254E  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 10427  002550  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 10428  002552  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 10429  002554  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 10430  002556                     i2u218_40:
 10431  002556  2EE8               	decfsz	wreg,f,c
 10432  002558  D7F9               	goto	i2u218_45
 10433  00255A  5005               	movf	??i2_SPI32_SendFrame,w,c
 10434  00255C  6EC9               	movwf	4041,c	;volatile
 10435                           
 10436                           ; BSR set to: 0
 10437  00255E  0012               	return		;funcret
 10438  002560                     __end_ofi2_SPI32_SendFrame:
 10439                           	opt stack 0
 10440                           tosu	equ	0xFFF
 10441                           tosh	equ	0xFFE
 10442                           tosl	equ	0xFFD
 10443                           pclatu	equ	0xFFB
 10444                           pclath	equ	0xFFA
 10445                           tblptru	equ	0xFF8
 10446                           tblptrh	equ	0xFF7
 10447                           tblptrl	equ	0xFF6
 10448                           tablat	equ	0xFF5
 10449                           prodh	equ	0xFF4
 10450                           prodl	equ	0xFF3
 10451                           intcon	equ	0xFF2
 10452                           postinc0	equ	0xFEE
 10453                           fsr0h	equ	0xFEA
 10454                           fsr0l	equ	0xFE9
 10455                           wreg	equ	0xFE8
 10456                           indf1	equ	0xFE7
 10457                           postinc1	equ	0xFE6
 10458                           postdec1	equ	0xFE5
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function i2_PostSPI32ControlService *****************
 10469 ;; Defined at:
 10470 ;;		line 117 in file "SPI32_ControlService.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      unsigned char 
 10477 ;; Registers used:
 10478 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10484 ;;      Params:         3       0       0       0
 10485 ;;      Locals:         0       0       0       0
 10486 ;;      Temps:          0       0       0       0
 10487 ;;      Totals:         3       0       0       0
 10488 ;;Total ram usage:        3 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    3
 10491 ;; This function calls:
 10492 ;;		i2_ES_PostToService
 10493 ;; This function is called by:
 10494 ;;		_SPI32_EOTResponse
 10495 ;; This function uses a non-reentrant model
 10496 ;;
 10497                           
 10498                           	psect	text56
 10499  0028D8                     __ptext56:
 10500                           	opt stack 0
 10501  0028D8                     i2_PostSPI32ControlService:
 10502                           	opt stack 16
 10503                           
 10504                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 10505                           ;	Return value of i2_PostSPI32ControlService is never used
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;incstack = 0
 10509  0028D8  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 10510  0028DC  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10511  0028E0  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10512  0028E4  0100               	movlb	0	; () banked
 10513  0028E6  51E2               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10514  0028E8  ECAC  F011         	call	i2_ES_PostToService
 10515  0028EC  0012               	return	
 10516  0028EE                     __end_ofi2_PostSPI32ControlService:
 10517                           	opt stack 0
 10518                           tosu	equ	0xFFF
 10519                           tosh	equ	0xFFE
 10520                           tosl	equ	0xFFD
 10521                           pclatu	equ	0xFFB
 10522                           pclath	equ	0xFFA
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           postinc0	equ	0xFEE
 10531                           fsr0h	equ	0xFEA
 10532                           fsr0l	equ	0xFE9
 10533                           wreg	equ	0xFE8
 10534                           indf1	equ	0xFE7
 10535                           postinc1	equ	0xFE6
 10536                           postdec1	equ	0xFE5
 10537                           fsr1h	equ	0xFE2
 10538                           fsr1l	equ	0xFE1
 10539                           indf2	equ	0xFDF
 10540                           postinc2	equ	0xFDE
 10541                           postdec2	equ	0xFDD
 10542                           fsr2h	equ	0xFDA
 10543                           fsr2l	equ	0xFD9
 10544                           status	equ	0xFD8
 10545                           
 10546 ;; *************** function _CanXmitResponse *****************
 10547 ;; Defined at:
 10548 ;;		line 180 in file "CanRX_Service.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;		None
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  1    wreg      void 
 10555 ;; Registers used:
 10556 ;;		None
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10562 ;;      Params:         0       0       0       0
 10563 ;;      Locals:         0       0       0       0
 10564 ;;      Temps:          0       0       0       0
 10565 ;;      Totals:         0       0       0       0
 10566 ;;Total ram usage:        0 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_ISR
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text57
 10576  002952                     __ptext57:
 10577                           	opt stack 0
 10578  002952                     _CanXmitResponse:
 10579                           	opt stack 20
 10580                           
 10581                           ;CanRX_Service.c: 182: TXB0CONbits.TXREQ = 0;
 10582                           
 10583                           ;incstack = 0
 10584  002952  010F               	movlb	15	; () banked
 10585  002954  9740               	bcf	64,3,b	;volatile
 10586                           
 10587                           ; BSR set to: 15
 10588  002956  0012               	return		;funcret
 10589  002958                     __end_of_CanXmitResponse:
 10590                           	opt stack 0
 10591                           tosu	equ	0xFFF
 10592                           tosh	equ	0xFFE
 10593                           tosl	equ	0xFFD
 10594                           pclatu	equ	0xFFB
 10595                           pclath	equ	0xFFA
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           postinc0	equ	0xFEE
 10604                           fsr0h	equ	0xFEA
 10605                           fsr0l	equ	0xFE9
 10606                           wreg	equ	0xFE8
 10607                           indf1	equ	0xFE7
 10608                           postinc1	equ	0xFE6
 10609                           postdec1	equ	0xFE5
 10610                           fsr1h	equ	0xFE2
 10611                           fsr1l	equ	0xFE1
 10612                           indf2	equ	0xFDF
 10613                           postinc2	equ	0xFDE
 10614                           postdec2	equ	0xFDD
 10615                           fsr2h	equ	0xFDA
 10616                           fsr2l	equ	0xFD9
 10617                           status	equ	0xFD8
 10618                           
 10619 ;; *************** function _CanRCVResponse *****************
 10620 ;; Defined at:
 10621 ;;		line 185 in file "CanRX_Service.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;		None
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;		None
 10626 ;; Return value:  Size  Location     Type
 10627 ;;                  2  145[None  ] int 
 10628 ;; Registers used:
 10629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10635 ;;      Params:         0       0       0       0
 10636 ;;      Locals:         0       0       0       0
 10637 ;;      Temps:          0       0       0       0
 10638 ;;      Totals:         0       0       0       0
 10639 ;;Total ram usage:        0 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    5
 10642 ;; This function calls:
 10643 ;;		_ProcessReceive
 10644 ;; This function is called by:
 10645 ;;		_ISR
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           	psect	text58
 10650  002920                     __ptext58:
 10651                           	opt stack 0
 10652  002920                     _CanRCVResponse:
 10653                           	opt stack 15
 10654                           
 10655                           ;CanRX_Service.c: 187: if (RXB0CONbits.RXFUL == 1) {
 10656                           
 10657                           ; BSR set to: 15
 10658                           ;incstack = 0
 10659  002920  AE60               	btfss	3936,7,c	;volatile
 10660  002922  0012               	return	
 10661                           
 10662                           ;CanRX_Service.c: 188: ProcessReceive();
 10663  002924  ECE1  F011         	call	_ProcessReceive	;wreg free
 10664                           
 10665                           ;CanRX_Service.c: 189: RXB0CONbits.RXFUL = 0;
 10666  002928  9E60               	bcf	3936,7,c	;volatile
 10667  00292A  0012               	return	
 10668  00292C                     __end_of_CanRCVResponse:
 10669                           	opt stack 0
 10670                           tosu	equ	0xFFF
 10671                           tosh	equ	0xFFE
 10672                           tosl	equ	0xFFD
 10673                           pclatu	equ	0xFFB
 10674                           pclath	equ	0xFFA
 10675                           tblptru	equ	0xFF8
 10676                           tblptrh	equ	0xFF7
 10677                           tblptrl	equ	0xFF6
 10678                           tablat	equ	0xFF5
 10679                           prodh	equ	0xFF4
 10680                           prodl	equ	0xFF3
 10681                           intcon	equ	0xFF2
 10682                           postinc0	equ	0xFEE
 10683                           fsr0h	equ	0xFEA
 10684                           fsr0l	equ	0xFE9
 10685                           wreg	equ	0xFE8
 10686                           indf1	equ	0xFE7
 10687                           postinc1	equ	0xFE6
 10688                           postdec1	equ	0xFE5
 10689                           fsr1h	equ	0xFE2
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           fsr2h	equ	0xFDA
 10695                           fsr2l	equ	0xFD9
 10696                           status	equ	0xFD8
 10697                           
 10698 ;; *************** function _ProcessReceive *****************
 10699 ;; Defined at:
 10700 ;;		line 281 in file "CanRX_Service.c"
 10701 ;; Parameters:    Size  Location     Type
 10702 ;;		None
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;  Event2Post      3   32[COMRAM] struct ES_Event_t
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  1    wreg      void 
 10707 ;; Registers used:
 10708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10714 ;;      Params:         0       0       0       0
 10715 ;;      Locals:         3       0       0       0
 10716 ;;      Temps:          0       0       0       0
 10717 ;;      Totals:         3       0       0       0
 10718 ;;Total ram usage:        3 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    4
 10721 ;; This function calls:
 10722 ;;		_PostCanRX_Service
 10723 ;; This function is called by:
 10724 ;;		_CanRCVResponse
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text59
 10729  0023C2                     __ptext59:
 10730                           	opt stack 0
 10731  0023C2                     _ProcessReceive:
 10732                           	opt stack 15
 10733                           
 10734                           ;CanRX_Service.c: 284: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && R
      +                          XB0EIDL == 0x01) {
 10735                           
 10736                           ;incstack = 0
 10737  0023C2  5061               	movf	3937,w,c	;volatile
 10738  0023C4  A4D8               	btfss	status,2,c
 10739  0023C6  0012               	return	
 10740  0023C8  0E18               	movlw	24
 10741  0023CA  1862               	xorwf	3938,w,c	;volatile
 10742  0023CC  A4D8               	btfss	status,2,c
 10743  0023CE  0012               	return	
 10744  0023D0  5063               	movf	3939,w,c	;volatile
 10745  0023D2  A4D8               	btfss	status,2,c
 10746  0023D4  0012               	return	
 10747  0023D6  0464               	decf	3940,w,c	;volatile
 10748  0023D8  A4D8               	btfss	status,2,c
 10749  0023DA  0012               	return	
 10750  0023DC  D009               	goto	i2l3600
 10751  0023DE                     i2l3590:
 10752                           
 10753                           ;CanRX_Service.c: 288: Event2Post.EventType = IDLE_MESSAGE;
 10754  0023DE  0E0A               	movlw	10
 10755  0023E0  D005               	goto	L20
 10756  0023E2                     i2l3592:
 10757                           
 10758                           ;CanRX_Service.c: 291: Event2Post.EventType = SPEAKING_MESSAGE;
 10759  0023E2  0E0B               	movlw	11
 10760  0023E4  D003               	goto	L20
 10761  0023E6                     i2l3594:
 10762                           
 10763                           ;CanRX_Service.c: 294: Event2Post.EventType = THINKING_MESSAGE;
 10764  0023E6  0E0C               	movlw	12
 10765  0023E8  D001               	goto	L20
 10766  0023EA                     i2l3596:
 10767                           
 10768                           ;CanRX_Service.c: 297: Event2Post.EventType = LISTENING_MESSAGE;
 10769  0023EA  0E0D               	movlw	13
 10770  0023EC                     L20:
 10771  0023EC  6E21               	movwf	ProcessReceive@Event2Post,c
 10772                           
 10773                           ;CanRX_Service.c: 299: }
 10774                           
 10775                           ;CanRX_Service.c: 298: break;
 10776  0023EE  D00D               	goto	i2l3602
 10777  0023F0                     i2l3600:
 10778  0023F0  5066               	movf	3942,w,c	;volatile
 10779                           
 10780                           ; Switch size 1, requested type "space"
 10781                           ; Number of cases is 4, Range of values is 0 to 3
 10782                           ; switch strategies available:
 10783                           ; Name         Instructions Cycles
 10784                           ; simple_byte           13     7 (average)
 10785                           ;	Chosen strategy is simple_byte
 10786  0023F2  0A00               	xorlw	0	; case 0
 10787  0023F4  B4D8               	btfsc	status,2,c
 10788  0023F6  D7F3               	goto	i2l3590
 10789  0023F8  0A01               	xorlw	1	; case 1
 10790  0023FA  B4D8               	btfsc	status,2,c
 10791  0023FC  D7F4               	goto	i2l3594
 10792  0023FE  0A03               	xorlw	3	; case 2
 10793  002400  B4D8               	btfsc	status,2,c
 10794  002402  D7EF               	goto	i2l3592
 10795  002404  0A01               	xorlw	1	; case 3
 10796  002406  B4D8               	btfsc	status,2,c
 10797  002408  D7F0               	goto	i2l3596
 10798  00240A                     i2l3602:
 10799                           
 10800                           ;CanRX_Service.c: 300: PostCanRX_Service(Event2Post);
 10801  00240A  C021  F01E         	movff	ProcessReceive@Event2Post,PostCanRX_Service@ThisEvent
 10802  00240E  C022  F01F         	movff	ProcessReceive@Event2Post+1,PostCanRX_Service@ThisEvent+1
 10803  002412  C023  F020         	movff	ProcessReceive@Event2Post+2,PostCanRX_Service@ThisEvent+2
 10804  002416  EC77  F014         	call	_PostCanRX_Service	;wreg free
 10805  00241A  0012               	return	
 10806  00241C                     __end_of_ProcessReceive:
 10807                           	opt stack 0
 10808                           tosu	equ	0xFFF
 10809                           tosh	equ	0xFFE
 10810                           tosl	equ	0xFFD
 10811                           pclatu	equ	0xFFB
 10812                           pclath	equ	0xFFA
 10813                           tblptru	equ	0xFF8
 10814                           tblptrh	equ	0xFF7
 10815                           tblptrl	equ	0xFF6
 10816                           tablat	equ	0xFF5
 10817                           prodh	equ	0xFF4
 10818                           prodl	equ	0xFF3
 10819                           intcon	equ	0xFF2
 10820                           postinc0	equ	0xFEE
 10821                           fsr0h	equ	0xFEA
 10822                           fsr0l	equ	0xFE9
 10823                           wreg	equ	0xFE8
 10824                           indf1	equ	0xFE7
 10825                           postinc1	equ	0xFE6
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function _PostCanRX_Service *****************
 10837 ;; Defined at:
 10838 ;;		line 118 in file "CanRX_Service.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;		None
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      unsigned char 
 10845 ;; Registers used:
 10846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10852 ;;      Params:         3       0       0       0
 10853 ;;      Locals:         0       0       0       0
 10854 ;;      Temps:          0       0       0       0
 10855 ;;      Totals:         3       0       0       0
 10856 ;;Total ram usage:        3 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    3
 10859 ;; This function calls:
 10860 ;;		i2_ES_PostToService
 10861 ;; This function is called by:
 10862 ;;		_ProcessReceive
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           	psect	text60
 10867  0028EE                     __ptext60:
 10868                           	opt stack 0
 10869  0028EE                     _PostCanRX_Service:
 10870                           	opt stack 15
 10871                           
 10872                           ;CanRX_Service.c: 120: return ES_PostToService( MyPriority, ThisEvent);
 10873                           ;	Return value of _PostCanRX_Service is never used
 10874                           
 10875                           ;incstack = 0
 10876  0028EE  C01E  F018         	movff	PostCanRX_Service@ThisEvent,i2ES_PostToService@TheEvent
 10877  0028F2  C01F  F019         	movff	PostCanRX_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10878  0028F6  C020  F01A         	movff	PostCanRX_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10879  0028FA  0100               	movlb	0	; () banked
 10880  0028FC  51DE               	movf	CanRX_Service@MyPriority& (0+255),w,b
 10881  0028FE  ECAC  F011         	call	i2_ES_PostToService
 10882  002902  0012               	return	
 10883  002904                     __end_of_PostCanRX_Service:
 10884                           	opt stack 0
 10885                           tosu	equ	0xFFF
 10886                           tosh	equ	0xFFE
 10887                           tosl	equ	0xFFD
 10888                           pclatu	equ	0xFFB
 10889                           pclath	equ	0xFFA
 10890                           tblptru	equ	0xFF8
 10891                           tblptrh	equ	0xFF7
 10892                           tblptrl	equ	0xFF6
 10893                           tablat	equ	0xFF5
 10894                           prodh	equ	0xFF4
 10895                           prodl	equ	0xFF3
 10896                           intcon	equ	0xFF2
 10897                           postinc0	equ	0xFEE
 10898                           fsr0h	equ	0xFEA
 10899                           fsr0l	equ	0xFE9
 10900                           wreg	equ	0xFE8
 10901                           indf1	equ	0xFE7
 10902                           postinc1	equ	0xFE6
 10903                           postdec1	equ	0xFE5
 10904                           fsr1h	equ	0xFE2
 10905                           fsr1l	equ	0xFE1
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           fsr2h	equ	0xFDA
 10910                           fsr2l	equ	0xFD9
 10911                           status	equ	0xFD8
 10912                           
 10913 ;; *************** function i2_ES_PostToService *****************
 10914 ;; Defined at:
 10915 ;;		line 351 in file "ES_Framework.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;  WhichService    1    wreg     unsigned char 
 10918 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;  WhichService    1   28[COMRAM] unsigned char 
 10921 ;; Return value:  Size  Location     Type
 10922 ;;                  1    wreg      unsigned char 
 10923 ;; Registers used:
 10924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10925 ;; Tracked objects:
 10926 ;;		On entry : 0/0
 10927 ;;		On exit  : 0/0
 10928 ;;		Unchanged: 0/0
 10929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10930 ;;      Params:         3       0       0       0
 10931 ;;      Locals:         1       0       0       0
 10932 ;;      Temps:          2       0       0       0
 10933 ;;      Totals:         6       0       0       0
 10934 ;;Total ram usage:        6 bytes
 10935 ;; Hardware stack levels used:    1
 10936 ;; Hardware stack levels required when called:    2
 10937 ;; This function calls:
 10938 ;;		i2_ES_EnQueueFIFO
 10939 ;; This function is called by:
 10940 ;;		_PostCanRX_Service
 10941 ;;		i2_PostSPI32ControlService
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           	psect	text61
 10946  002358                     __ptext61:
 10947                           	opt stack 0
 10948  002358                     i2_ES_PostToService:
 10949                           	opt stack 16
 10950                           
 10951                           ;incstack = 0
 10952                           ;i2ES_PostToService@WhichService stored from wreg
 10953  002358  6E1D               	movwf	i2ES_PostToService@WhichService,c
 10954                           
 10955                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 10956                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 10957                           ;ES_Framework.c: 354: 1 )){
 10958  00235A  0E03               	movlw	3
 10959  00235C  601D               	cpfslt	i2ES_PostToService@WhichService,c
 10960  00235E  D02F               	goto	i2l3200
 10961  002360  501D               	movf	i2ES_PostToService@WhichService,w,c
 10962  002362  0D03               	mullw	3
 10963  002364  0E5C               	movlw	low _EventQueues
 10964  002366  24F3               	addwf	prodl,w,c
 10965  002368  6EF6               	movwf	tblptrl,c
 10966  00236A  0E03               	movlw	high _EventQueues
 10967  00236C  20F4               	addwfc	prodh,w,c
 10968  00236E  6EF7               	movwf	tblptrh,c
 10969  002370                     	if	0	;There are less than 3 active tblptr bytes
 10970  002370                     	endif
 10971  002370  0009               	tblrd		*+
 10972  002372  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 10973  002376  000A               	tblrd		*-
 10974  002378  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 10975  00237C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 10976  002380  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 10977  002384  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 10978  002388  ECAB  F00E         	call	i2_ES_EnQueueFIFO	;wreg free
 10979  00238C  06E8               	decf	wreg,f,c
 10980  00238E  A4D8               	btfss	status,2,c
 10981  002390  D016               	goto	i2l3200
 10982                           
 10983                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 10984  002392  501D               	movf	i2ES_PostToService@WhichService,w,c
 10985  002394  0D02               	mullw	2
 10986  002396  0E01               	movlw	low _BitNum2SetMask
 10987  002398  24F3               	addwf	prodl,w,c
 10988  00239A  6EF6               	movwf	tblptrl,c
 10989  00239C  0E03               	movlw	high _BitNum2SetMask
 10990  00239E  20F4               	addwfc	prodh,w,c
 10991  0023A0  6EF7               	movwf	tblptrh,c
 10992  0023A2                     	if	0	;There are less than 3 active tblptr bytes
 10993  0023A2                     	endif
 10994  0023A2  0009               	tblrd		*+
 10995  0023A4  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 10996  0023A8  0009               	tblrd		*+
 10997  0023AA  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 10998  0023AE  501B               	movf	??i2_ES_PostToService,w,c
 10999  0023B0  0100               	movlb	0	; () banked
 11000  0023B2  13DA               	iorwf	_Ready& (0+255),f,b
 11001  0023B4  501C               	movf	??i2_ES_PostToService+1,w,c
 11002  0023B6  0100               	movlb	0	; () banked
 11003  0023B8  13DB               	iorwf	(_Ready+1)& (0+255),f,b
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;ES_Framework.c: 356: return 1;
 11007  0023BA  0E01               	movlw	1
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;ES_Framework.c: 357: } else
 11011                           
 11012                           ; BSR set to: 0
 11013  0023BC  0012               	return	
 11014  0023BE                     i2l3200:
 11015                           
 11016                           ;ES_Framework.c: 358: return 0;
 11017  0023BE  0E00               	movlw	0
 11018  0023C0  0012               	return	
 11019  0023C2                     __end_ofi2_ES_PostToService:
 11020                           	opt stack 0
 11021                           tosu	equ	0xFFF
 11022                           tosh	equ	0xFFE
 11023                           tosl	equ	0xFFD
 11024                           pclatu	equ	0xFFB
 11025                           pclath	equ	0xFFA
 11026                           tblptru	equ	0xFF8
 11027                           tblptrh	equ	0xFF7
 11028                           tblptrl	equ	0xFF6
 11029                           tablat	equ	0xFF5
 11030                           prodh	equ	0xFF4
 11031                           prodl	equ	0xFF3
 11032                           intcon	equ	0xFF2
 11033                           postinc0	equ	0xFEE
 11034                           fsr0h	equ	0xFEA
 11035                           fsr0l	equ	0xFE9
 11036                           wreg	equ	0xFE8
 11037                           indf1	equ	0xFE7
 11038                           postinc1	equ	0xFE6
 11039                           postdec1	equ	0xFE5
 11040                           fsr1h	equ	0xFE2
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function i2_ES_EnQueueFIFO *****************
 11050 ;; Defined at:
 11051 ;;		line 85 in file "ES_Queue.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 11054 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
 11055 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 11058 ;;		 -> Queue2(12), Queue1(12), Queue0(12), 
 11059 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 11060 ;; Return value:  Size  Location     Type
 11061 ;;                  1    wreg      unsigned char 
 11062 ;; Registers used:
 11063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11064 ;; Tracked objects:
 11065 ;;		On entry : 0/0
 11066 ;;		On exit  : 0/0
 11067 ;;		Unchanged: 0/0
 11068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11069 ;;      Params:         5       0       0       0
 11070 ;;      Locals:         3       0       0       0
 11071 ;;      Temps:          3       0       0       0
 11072 ;;      Totals:        11       0       0       0
 11073 ;;Total ram usage:       11 bytes
 11074 ;; Hardware stack levels used:    1
 11075 ;; Hardware stack levels required when called:    1
 11076 ;; This function calls:
 11077 ;;		i2___awmod
 11078 ;;		i2___wmul
 11079 ;; This function is called by:
 11080 ;;		i2_ES_PostToService
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           	psect	text62
 11085  001D56                     __ptext62:
 11086                           	opt stack 0
 11087  001D56                     i2_ES_EnQueueFIFO:
 11088                           	opt stack 16
 11089                           
 11090                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11091                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11092                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11093                           
 11094                           ;incstack = 0
 11095  001D56  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 11096  001D5A  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 11097                           
 11098                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11099  001D5E  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11100  001D62  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11101  001D66  EE10 F002          	lfsr	1,2
 11102  001D6A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11103  001D6C  26E1               	addwf	fsr1l,f,c
 11104  001D6E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11105  001D70  22E2               	addwfc	fsr1h,f,c
 11106  001D72  50DE               	movf	postinc2,w,c
 11107  001D74  5CE6               	subwf	postinc1,w,c
 11108  001D76  B0D8               	btfsc	status,0,c
 11109  001D78  D046               	goto	i2l3048
 11110                           
 11111                           ;ES_Queue.c: 92: {
 11112                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11113  001D7A  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 11114  001D7E  9EF2               	bcf	intcon,7,c	;volatile
 11115                           
 11116                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11117                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11118  001D80  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11119  001D84  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11120  001D88  50DF               	movf	indf2,w,c
 11121  001D8A  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 11122  001D8C  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 11123  001D8E  6E03               	movwf	i2___awmod@divisor,c
 11124  001D90  6A04               	clrf	i2___awmod@divisor+1,c
 11125  001D92  EE20 F002          	lfsr	2,2
 11126  001D96  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11127  001D98  26D9               	addwf	fsr2l,f,c
 11128  001D9A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11129  001D9C  22DA               	addwfc	fsr2h,f,c
 11130  001D9E  50DF               	movf	indf2,w,c
 11131  001DA0  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 11132  001DA2  EE20 F001          	lfsr	2,1
 11133  001DA6  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11134  001DA8  26D9               	addwf	fsr2l,f,c
 11135  001DAA  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11136  001DAC  22DA               	addwfc	fsr2h,f,c
 11137  001DAE  50DF               	movf	indf2,w,c
 11138  001DB0  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 11139  001DB2  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 11140  001DB4  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 11141  001DB6  6E01               	movwf	i2___awmod@dividend,c
 11142  001DB8  6A02               	clrf	i2___awmod@dividend+1,c
 11143  001DBA  3602               	rlcf	i2___awmod@dividend+1,f,c
 11144  001DBC  EC74  F011         	call	i2___awmod	;wreg free
 11145  001DC0  0E01               	movlw	1
 11146  001DC2  2401               	addwf	?i2___awmod,w,c
 11147  001DC4  6E07               	movwf	i2___wmul@multiplier,c
 11148  001DC6  0E00               	movlw	0
 11149  001DC8  2002               	addwfc	?i2___awmod+1,w,c
 11150  001DCA  6E08               	movwf	i2___wmul@multiplier+1,c
 11151  001DCC  0E00               	movlw	0
 11152  001DCE  6E0A               	movwf	i2___wmul@multiplicand+1,c
 11153  001DD0  0E03               	movlw	3
 11154  001DD2  6E09               	movwf	i2___wmul@multiplicand,c
 11155  001DD4  ECFC  F013         	call	i2___wmul	;wreg free
 11156  001DD8  5007               	movf	?i2___wmul,w,c
 11157  001DDA  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 11158  001DDC  6ED9               	movwf	fsr2l,c
 11159  001DDE  5008               	movf	?i2___wmul+1,w,c
 11160  001DE0  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 11161  001DE2  6EDA               	movwf	fsr2h,c
 11162  001DE4  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 11163  001DE8  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 11164  001DEC  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 11165                           
 11166                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11167  001DF0  EE20 F002          	lfsr	2,2
 11168  001DF4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11169  001DF6  26D9               	addwf	fsr2l,f,c
 11170  001DF8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11171  001DFA  22DA               	addwfc	fsr2h,f,c
 11172  001DFC  2ADF               	incf	indf2,f,c
 11173                           
 11174                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11175  001DFE  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11176                           
 11177                           ;ES_Queue.c: 101: return(1);
 11178  001E02  0E01               	movlw	1
 11179                           
 11180                           ;ES_Queue.c: 102: }else
 11181  001E04  0012               	return	
 11182  001E06                     i2l3048:
 11183                           
 11184                           ;ES_Queue.c: 103: return(0);
 11185  001E06  0E00               	movlw	0
 11186  001E08  0012               	return	
 11187  001E0A                     __end_ofi2_ES_EnQueueFIFO:
 11188                           	opt stack 0
 11189                           tosu	equ	0xFFF
 11190                           tosh	equ	0xFFE
 11191                           tosl	equ	0xFFD
 11192                           pclatu	equ	0xFFB
 11193                           pclath	equ	0xFFA
 11194                           tblptru	equ	0xFF8
 11195                           tblptrh	equ	0xFF7
 11196                           tblptrl	equ	0xFF6
 11197                           tablat	equ	0xFF5
 11198                           prodh	equ	0xFF4
 11199                           prodl	equ	0xFF3
 11200                           intcon	equ	0xFF2
 11201                           postinc0	equ	0xFEE
 11202                           fsr0h	equ	0xFEA
 11203                           fsr0l	equ	0xFE9
 11204                           wreg	equ	0xFE8
 11205                           indf1	equ	0xFE7
 11206                           postinc1	equ	0xFE6
 11207                           postdec1	equ	0xFE5
 11208                           fsr1h	equ	0xFE2
 11209                           fsr1l	equ	0xFE1
 11210                           indf2	equ	0xFDF
 11211                           postinc2	equ	0xFDE
 11212                           postdec2	equ	0xFDD
 11213                           fsr2h	equ	0xFDA
 11214                           fsr2l	equ	0xFD9
 11215                           status	equ	0xFD8
 11216                           
 11217 ;; *************** function i2___wmul *****************
 11218 ;; Defined at:
 11219 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  multiplier      2    6[COMRAM] unsigned int 
 11222 ;;  multiplicand    2    8[COMRAM] unsigned int 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  __wmul          2   10[COMRAM] unsigned int 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  2    6[COMRAM] unsigned int 
 11227 ;; Registers used:
 11228 ;;		wreg, status,2, status,0, prodl, prodh
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11234 ;;      Params:         4       0       0       0
 11235 ;;      Locals:         2       0       0       0
 11236 ;;      Temps:          0       0       0       0
 11237 ;;      Totals:         6       0       0       0
 11238 ;;Total ram usage:        6 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		i2_ES_EnQueueFIFO
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247                           	psect	text63
 11248  0027F8                     __ptext63:
 11249                           	opt stack 0
 11250  0027F8                     i2___wmul:
 11251                           	opt stack 16
 11252                           
 11253                           ;incstack = 0
 11254  0027F8  5007               	movf	i2___wmul@multiplier,w,c
 11255  0027FA  0209               	mulwf	i2___wmul@multiplicand,c
 11256  0027FC  CFF3 F00B          	movff	prodl,i2___wmul@product
 11257  002800  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 11258  002804  5007               	movf	i2___wmul@multiplier,w,c
 11259  002806  020A               	mulwf	i2___wmul@multiplicand+1,c
 11260  002808  50F3               	movf	prodl,w,c
 11261  00280A  260C               	addwf	i2___wmul@product+1,f,c
 11262  00280C  5008               	movf	i2___wmul@multiplier+1,w,c
 11263  00280E  0209               	mulwf	i2___wmul@multiplicand,c
 11264  002810  50F3               	movf	prodl,w,c
 11265  002812  260C               	addwf	i2___wmul@product+1,f,c
 11266  002814  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 11267  002818  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 11268  00281C  0012               	return	
 11269  00281E                     __end_ofi2___wmul:
 11270                           	opt stack 0
 11271                           tosu	equ	0xFFF
 11272                           tosh	equ	0xFFE
 11273                           tosl	equ	0xFFD
 11274                           pclatu	equ	0xFFB
 11275                           pclath	equ	0xFFA
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           postinc0	equ	0xFEE
 11284                           fsr0h	equ	0xFEA
 11285                           fsr0l	equ	0xFE9
 11286                           wreg	equ	0xFE8
 11287                           indf1	equ	0xFE7
 11288                           postinc1	equ	0xFE6
 11289                           postdec1	equ	0xFE5
 11290                           fsr1h	equ	0xFE2
 11291                           fsr1l	equ	0xFE1
 11292                           indf2	equ	0xFDF
 11293                           postinc2	equ	0xFDE
 11294                           postdec2	equ	0xFDD
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function i2___awmod *****************
 11300 ;; Defined at:
 11301 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  dividend        2    0[COMRAM] int 
 11304 ;;  divisor         2    2[COMRAM] int 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;  __awmod         1    5[COMRAM] unsigned char 
 11307 ;;  __awmod         1    4[COMRAM] unsigned char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  2    0[COMRAM] int 
 11310 ;; Registers used:
 11311 ;;		wreg, status,2, status,0
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11317 ;;      Params:         4       0       0       0
 11318 ;;      Locals:         2       0       0       0
 11319 ;;      Temps:          0       0       0       0
 11320 ;;      Totals:         6       0       0       0
 11321 ;;Total ram usage:        6 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		i2_ES_EnQueueFIFO
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text64
 11331  0022E8                     __ptext64:
 11332                           	opt stack 0
 11333  0022E8                     i2___awmod:
 11334                           	opt stack 16
 11335                           
 11336                           ;incstack = 0
 11337  0022E8  0E00               	movlw	0
 11338  0022EA  6E06               	movwf	i2___awmod@sign,c
 11339  0022EC  AE02               	btfss	i2___awmod@dividend+1,7,c
 11340  0022EE  D006               	goto	i2l2836
 11341  0022F0  6C01               	negf	i2___awmod@dividend,c
 11342  0022F2  1E02               	comf	i2___awmod@dividend+1,f,c
 11343  0022F4  B0D8               	btfsc	status,0,c
 11344  0022F6  2A02               	incf	i2___awmod@dividend+1,f,c
 11345  0022F8  0E01               	movlw	1
 11346  0022FA  6E06               	movwf	i2___awmod@sign,c
 11347  0022FC                     i2l2836:
 11348  0022FC  AE04               	btfss	i2___awmod@divisor+1,7,c
 11349  0022FE  D004               	goto	i2l2840
 11350  002300  6C03               	negf	i2___awmod@divisor,c
 11351  002302  1E04               	comf	i2___awmod@divisor+1,f,c
 11352  002304  B0D8               	btfsc	status,0,c
 11353  002306  2A04               	incf	i2___awmod@divisor+1,f,c
 11354  002308                     i2l2840:
 11355  002308  5003               	movf	i2___awmod@divisor,w,c
 11356  00230A  1004               	iorwf	i2___awmod@divisor+1,w,c
 11357  00230C  B4D8               	btfsc	status,2,c
 11358  00230E  D018               	goto	i2l2856
 11359  002310  0E01               	movlw	1
 11360  002312  6E05               	movwf	i2___awmod@counter,c
 11361  002314  D004               	goto	i2l2846
 11362  002316                     i2l2844:
 11363  002316  90D8               	bcf	status,0,c
 11364  002318  3603               	rlcf	i2___awmod@divisor,f,c
 11365  00231A  3604               	rlcf	i2___awmod@divisor+1,f,c
 11366  00231C  2A05               	incf	i2___awmod@counter,f,c
 11367  00231E                     i2l2846:
 11368  00231E  AE04               	btfss	i2___awmod@divisor+1,7,c
 11369  002320  D7FA               	goto	i2l2844
 11370  002322                     i2l2848:
 11371  002322  5003               	movf	i2___awmod@divisor,w,c
 11372  002324  5C01               	subwf	i2___awmod@dividend,w,c
 11373  002326  5004               	movf	i2___awmod@divisor+1,w,c
 11374  002328  5802               	subwfb	i2___awmod@dividend+1,w,c
 11375  00232A  A0D8               	btfss	status,0,c
 11376  00232C  D004               	goto	i2l2852
 11377  00232E  5003               	movf	i2___awmod@divisor,w,c
 11378  002330  5E01               	subwf	i2___awmod@dividend,f,c
 11379  002332  5004               	movf	i2___awmod@divisor+1,w,c
 11380  002334  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11381  002336                     i2l2852:
 11382  002336  90D8               	bcf	status,0,c
 11383  002338  3204               	rrcf	i2___awmod@divisor+1,f,c
 11384  00233A  3203               	rrcf	i2___awmod@divisor,f,c
 11385  00233C  2E05               	decfsz	i2___awmod@counter,f,c
 11386  00233E  D7F1               	goto	i2l2848
 11387  002340                     i2l2856:
 11388  002340  5006               	movf	i2___awmod@sign,w,c
 11389  002342  B4D8               	btfsc	status,2,c
 11390  002344  D004               	goto	i2l2860
 11391  002346  6C01               	negf	i2___awmod@dividend,c
 11392  002348  1E02               	comf	i2___awmod@dividend+1,f,c
 11393  00234A  B0D8               	btfsc	status,0,c
 11394  00234C  2A02               	incf	i2___awmod@dividend+1,f,c
 11395  00234E                     i2l2860:
 11396  00234E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11397  002352  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11398  002356  0012               	return	
 11399  002358                     __end_ofi2___awmod:
 11400                           	opt stack 0
 11401                           tosu	equ	0xFFF
 11402                           tosh	equ	0xFFE
 11403                           tosl	equ	0xFFD
 11404                           pclatu	equ	0xFFB
 11405                           pclath	equ	0xFFA
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           intcon	equ	0xFF2
 11413                           postinc0	equ	0xFEE
 11414                           fsr0h	equ	0xFEA
 11415                           fsr0l	equ	0xFE9
 11416                           wreg	equ	0xFE8
 11417                           indf1	equ	0xFE7
 11418                           postinc1	equ	0xFE6
 11419                           postdec1	equ	0xFE5
 11420                           fsr1h	equ	0xFE2
 11421                           fsr1l	equ	0xFE1
 11422                           indf2	equ	0xFDF
 11423                           postinc2	equ	0xFDE
 11424                           postdec2	equ	0xFDD
 11425                           fsr2h	equ	0xFDA
 11426                           fsr2l	equ	0xFD9
 11427                           status	equ	0xFD8
 11428                           
 11429 ;; *************** function _CanErrorResponse *****************
 11430 ;; Defined at:
 11431 ;;		line 194 in file "CanRX_Service.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;		None
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  1    wreg      void 
 11438 ;; Registers used:
 11439 ;;		None
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11445 ;;      Params:         0       0       0       0
 11446 ;;      Locals:         0       0       0       0
 11447 ;;      Temps:          0       0       0       0
 11448 ;;      Totals:         0       0       0       0
 11449 ;;Total ram usage:        0 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; This function calls:
 11452 ;;		Nothing
 11453 ;; This function is called by:
 11454 ;;		_ISR
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           	psect	text65
 11459  00295E                     __ptext65:
 11460                           	opt stack 0
 11461  00295E                     _CanErrorResponse:
 11462                           	opt stack 20
 11463                           
 11464                           ;incstack = 0
 11465  00295E  0012               	return		;funcret
 11466  002960                     __end_of_CanErrorResponse:
 11467                           	opt stack 0
 11468                           tosu	equ	0xFFF
 11469                           tosh	equ	0xFFE
 11470                           tosl	equ	0xFFD
 11471                           pclatu	equ	0xFFB
 11472                           pclath	equ	0xFFA
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           postinc0	equ	0xFEE
 11481                           fsr0h	equ	0xFEA
 11482                           fsr0l	equ	0xFE9
 11483                           wreg	equ	0xFE8
 11484                           indf1	equ	0xFE7
 11485                           postinc1	equ	0xFE6
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _BusErrorResponse *****************
 11497 ;; Defined at:
 11498 ;;		line 199 in file "CanRX_Service.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;		None
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;		None
 11503 ;; Return value:  Size  Location     Type
 11504 ;;                  1    wreg      void 
 11505 ;; Registers used:
 11506 ;;		None
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11512 ;;      Params:         0       0       0       0
 11513 ;;      Locals:         0       0       0       0
 11514 ;;      Temps:          0       0       0       0
 11515 ;;      Totals:         0       0       0       0
 11516 ;;Total ram usage:        0 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_ISR
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           	psect	text66
 11526  002960                     __ptext66:
 11527                           	opt stack 0
 11528  002960                     _BusErrorResponse:
 11529                           	opt stack 20
 11530                           
 11531                           ;incstack = 0
 11532  002960  0012               	return		;funcret
 11533  002962                     __end_of_BusErrorResponse:
 11534                           	opt stack 0
 11535                           tosu	equ	0xFFF
 11536                           tosh	equ	0xFFE
 11537                           tosl	equ	0xFFD
 11538                           pclatu	equ	0xFFB
 11539                           pclath	equ	0xFFA
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           postinc0	equ	0xFEE
 11548                           fsr0h	equ	0xFEA
 11549                           fsr0l	equ	0xFE9
 11550                           wreg	equ	0xFE8
 11551                           indf1	equ	0xFE7
 11552                           postinc1	equ	0xFE6
 11553                           postdec1	equ	0xFE5
 11554                           fsr1h	equ	0xFE2
 11555                           fsr1l	equ	0xFE1
 11556                           indf2	equ	0xFDF
 11557                           postinc2	equ	0xFDE
 11558                           postdec2	equ	0xFDD
 11559                           fsr2h	equ	0xFDA
 11560                           fsr2l	equ	0xFD9
 11561                           status	equ	0xFD8
 11562                           tosu	equ	0xFFF
 11563                           tosh	equ	0xFFE
 11564                           tosl	equ	0xFFD
 11565                           pclatu	equ	0xFFB
 11566                           pclath	equ	0xFFA
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           postinc0	equ	0xFEE
 11575                           fsr0h	equ	0xFEA
 11576                           fsr0l	equ	0xFE9
 11577                           wreg	equ	0xFE8
 11578                           indf1	equ	0xFE7
 11579                           postinc1	equ	0xFE6
 11580                           postdec1	equ	0xFE5
 11581                           fsr1h	equ	0xFE2
 11582                           fsr1l	equ	0xFE1
 11583                           indf2	equ	0xFDF
 11584                           postinc2	equ	0xFDE
 11585                           postdec2	equ	0xFDD
 11586                           fsr2h	equ	0xFDA
 11587                           fsr2l	equ	0xFD9
 11588                           status	equ	0xFD8
 11589                           
 11590                           	psect	text67
 11591  000000                     __ptext67:
 11592                           	opt stack 0
 11593                           tosu	equ	0xFFF
 11594                           tosh	equ	0xFFE
 11595                           tosl	equ	0xFFD
 11596                           pclatu	equ	0xFFB
 11597                           pclath	equ	0xFFA
 11598                           tblptru	equ	0xFF8
 11599                           tblptrh	equ	0xFF7
 11600                           tblptrl	equ	0xFF6
 11601                           tablat	equ	0xFF5
 11602                           prodh	equ	0xFF4
 11603                           prodl	equ	0xFF3
 11604                           intcon	equ	0xFF2
 11605                           postinc0	equ	0xFEE
 11606                           fsr0h	equ	0xFEA
 11607                           fsr0l	equ	0xFE9
 11608                           wreg	equ	0xFE8
 11609                           indf1	equ	0xFE7
 11610                           postinc1	equ	0xFE6
 11611                           postdec1	equ	0xFE5
 11612                           fsr1h	equ	0xFE2
 11613                           fsr1l	equ	0xFE1
 11614                           indf2	equ	0xFDF
 11615                           postinc2	equ	0xFDE
 11616                           postdec2	equ	0xFDD
 11617                           fsr2h	equ	0xFDA
 11618                           fsr2l	equ	0xFD9
 11619                           status	equ	0xFD8
 11620                           
 11621                           	psect	rparam
 11622  0000                     tosu	equ	0xFFF
 11623                           tosh	equ	0xFFE
 11624                           tosl	equ	0xFFD
 11625                           pclatu	equ	0xFFB
 11626                           pclath	equ	0xFFA
 11627                           tblptru	equ	0xFF8
 11628                           tblptrh	equ	0xFF7
 11629                           tblptrl	equ	0xFF6
 11630                           tablat	equ	0xFF5
 11631                           prodh	equ	0xFF4
 11632                           prodl	equ	0xFF3
 11633                           intcon	equ	0xFF2
 11634                           postinc0	equ	0xFEE
 11635                           fsr0h	equ	0xFEA
 11636                           fsr0l	equ	0xFE9
 11637                           wreg	equ	0xFE8
 11638                           indf1	equ	0xFE7
 11639                           postinc1	equ	0xFE6
 11640                           postdec1	equ	0xFE5
 11641                           fsr1h	equ	0xFE2
 11642                           fsr1l	equ	0xFE1
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           postdec2	equ	0xFDD
 11646                           fsr2h	equ	0xFDA
 11647                           fsr2l	equ	0xFD9
 11648                           status	equ	0xFD8
 11649                           
 11650                           	psect	temp
 11651  00005C                     btemp:
 11652                           	opt stack 0
 11653  00005C                     	ds	1
 11654  0000                     int$flags	set	btemp
 11655                           tosu	equ	0xFFF
 11656                           tosh	equ	0xFFE
 11657                           tosl	equ	0xFFD
 11658                           pclatu	equ	0xFFB
 11659                           pclath	equ	0xFFA
 11660                           tblptru	equ	0xFF8
 11661                           tblptrh	equ	0xFF7
 11662                           tblptrl	equ	0xFF6
 11663                           tablat	equ	0xFF5
 11664                           prodh	equ	0xFF4
 11665                           prodl	equ	0xFF3
 11666                           intcon	equ	0xFF2
 11667                           postinc0	equ	0xFEE
 11668                           fsr0h	equ	0xFEA
 11669                           fsr0l	equ	0xFE9
 11670                           wreg	equ	0xFE8
 11671                           indf1	equ	0xFE7
 11672                           postinc1	equ	0xFE6
 11673                           postdec1	equ	0xFE5
 11674                           fsr1h	equ	0xFE2
 11675                           fsr1l	equ	0xFE1
 11676                           indf2	equ	0xFDF
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           fsr2h	equ	0xFDA
 11680                           fsr2l	equ	0xFD9
 11681                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    106
    Data        7
    BSS         584
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      91
    BANK0           160    109     160
    BANK1           256      0     184
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S129$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue2(COMRAM[12]), Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    S88$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), RunSPI32ControlService(), RunPatternControlService(), 

    S88$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CanRCVResponse->_ProcessReceive
    _ProcessReceive->_PostCanRX_Service
    _PostCanRX_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_IdlePattern
    _UpdatePattern->_ListeningPattern
    _UpdatePattern->_SpeakingPattern
    _UpdatePattern->_ThinkingPattern
    _ThinkingPattern->___awdiv
    _SpeakingPattern->___awdiv
    _ListeningPattern->___awdiv
    _IdlePattern->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PausePattern->_ES_Timer_StopTimer
    _PostPatternControlService->_ES_PostToService
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCanRX_Service
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _InitCanRX_Service->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  111791
                                            108 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   88538
                                            103 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunCanRX_Service *
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   15420
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   15420
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     335
                                             90 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   60997
                                             90 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   12718
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      46
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   40404
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        8     6      2   27568
                                             32 BANK0      8     6      2
                        _IdlePattern
                   _ListeningPattern
                    _SpeakingPattern
                    _ThinkingPattern
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _ThinkingPattern                                     25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SpeakingPattern                                     25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _ListeningPattern                                    25    23      2    5044
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _IdlePattern                                         25    23      2    5022
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     908
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        21    19      2   12628
                                             69 BANK0     21    19      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    7675
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    7456
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4689
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     866
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _RunCanRX_Service                                     9     6      3    7843
                                             90 BANK0      9     6      3
                    _InitCanHardware
                           _InitPins
          _PostPatternControlService
                         _SetPattern
 ---------------------------------------------------------------------------------
 (3) _SetPattern                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    7631
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3453
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   22857
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitCanRX_Service *
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    7274
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    7590
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     3      1     120
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _InitCanRX_Service                                    4     4      0    7274
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    7229
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    6711
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2585
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    3600
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    1911
                                             35 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     964
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     871
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CanXmitResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CanRCVResponse                                      0     0      0     947
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      3     3      0     947
                                             32 COMRAM     3     3      0
                  _PostCanRX_Service
 ---------------------------------------------------------------------------------
 (13) _PostCanRX_Service                                   3     0      3     921
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     823
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) _CanErrorResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _BusErrorResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCanRX_Service *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCanRX_Service *
       _InitCanHardware
       _InitPins
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _SetPattern
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               ___awdiv
               ___awmod
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           _IdlePattern
             ___awdiv
             ___awmod
           _ListeningPattern
             ___awdiv
             ___awmod
           _SpeakingPattern
             ___awdiv
             ___awmod
           _ThinkingPattern
             ___awdiv
             ___awmod
           ___awmod
           ___lwdiv
             ___wmul (ARG)
               ___awmod (ARG)
           ___wmul
             ___awmod (ARG)
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               ___awdiv
               ___awmod
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ProcessReceive
       _PostCanRX_Service
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
   _CanXmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B8       6       71.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      5B       1       96.8%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       9        0.0%
DATA                 0      0     2EF      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Dec 10 17:47:18 2016

                   _ListeningPattern 0EE6                  HSV_to_RGB@HSV_Value 0073  
                   ??__HW_Timer_Init 0062                  ES_CheckUserEvents@i 0060  
                __HW_Timer_Init@Rate 0060                         ___awdiv@sign 0065  
                ___wmul@multiplicand 0068                      ??_UpdatePattern 0082  
          __size_of_BusErrorResponse 0002                          __CFG_OSC$HS 000000  
RunPatternControlService@ReturnEvent 00BD                                  l352 1BD0  
                                l643 0640                                  l635 2084  
                                l564 1778                                  l645 0652  
                                l646 066C                                  l647 0686  
                                l648 0698                                  l649 06B2  
                                l770 210A                                  l773 2166  
              __end_of_ES_Initialize 1966                                  _GIE 007F97  
                                _ISR 0008            __end_of_SPI32_EOTResponse 26DE  
                       ___awmod@sign 0065              __end_of_Check4Keystroke 295C  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 0074  
               _ListeningPattern$756 0077                 _ListeningPattern$757 0079  
            ES_EnQueueFIFO@Event2Add 006E                    ?_ES_PostToService 0077  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 00D6                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 00D1                                 l1202 2268  
                               l3020 1070                                 l3012 1004  
                               l3100 083C                                 l3022 10AE  
                               l3110 08A0                                 l3120 0904  
                               l3104 086C                                 l3130 0968  
                               l3114 08D0                                 l3140 09CC  
                               l3124 0934                                 l3108 0898  
                               l3212 157E                                 l3134 0998  
                               l3118 08FC                                 l3150 0A6C  
                               l3054 1EC4                                 l3222 15F6  
                               l3144 0A38                                 l3128 0960  
                               l3152 0A94                                 l3064 1F50  
                               l3224 1634                                 l3400 28B6  
                               l3138 09C4                                 l3170 25F6  
                               l2700 1FAE                                 l3332 25E2  
                               l3324 25BA                                 l3076 24D2  
                               l3164 1542                                 l3068 1F56  
                               l3158 144C                                 l3174 2614  
                               l3510 16CA                                 l3502 1694  
                               l3430 1B1E                                 l2712 1FF4  
                               l2704 1FD2                                 l3424 246E  
                               l3520 175A                                 l2810 222A  
                               l3098 0834                                 l3442 1B58  
                               l2708 1FE0                                 l2732 1A44  
                               l3620 188C                                 l3372 1416  
                               l3276 248C                                 l3524 1762  
                               l3460 1B8E                                 l3444 1B5C  
                               l2806 2218                                 l3454 1B7C  
                               l3438 1B4A                                 l3640 195C  
                               l3632 18DE                                 l3624 1896  
                               l3368 13FA                                 l2808 2224  
                               l3448 1B6C                                 l3552 1CC6  
                               l3544 1C9E                                 l3538 27A6  
                               l3378 143E                                 l2818 225A  
                               l2770 1C10                                 l3466 1B9E  
                               l3474 1BB4                                 l3546 1CA8  
                               l2692 1F88                                 l2748 22E4  
                               l3492 26A0                                 l3628 18DA  
                               l3644 1962                                 l2780 1C40  
                               l2764 1BFA                                 l3564 1D02  
                               l3572 1D20                                 l3396 28AE  
                               l3660 185E                                 l3558 1CE4  
                               l3574 1D42                                 l3654 180A  
                               l2696 1F9C                                 l2688 1F78  
                               l2776 1C2E                                 l2792 1C7E  
                               l2936 1292                                 l2928 1226  
                               l3664 1874                                 l3648 1788  
                               l2698 1FA8                                 l2778 1C3A  
                               l2938 12D0                                 l3498 1688  
                               l3690 272A                                 l2796 1C92  
                               l2788 1C70                                 l2964 0C2C  
                               l2956 0BC0                                 l2878 04B0  
                               l2966 0C6A                                 l3870 2024  
                               l2896 06CC                                 l2992 0E4E  
                               l2984 0DE2                                 l3688 2722  
                               l3872 2036                                 l3880 206C  
                               l2898 0702                                 l2994 0E8C  
                               l3874 2048                                 l3876 205A  
                               STR_1 036B                                 STR_2 0386  
                               STR_3 039E                                 STR_4 03B5  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u2228 1936  
                               u2229 1952                                 u1545 0422  
                               u2268 1834                                 u2269 184C  
                               _PIE1 000F9D                                 u1674 1EEA  
                               u1675 1EE2                                 u1880 24B8  
                               u1938 2586                                 u1858 15DE  
                               u1939 259E                                 u1885 24AE  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 007A  
                __end_of_IdlePattern 131C                      __end_of_HW_Init 2840  
                               _main 1FFE                          ?_ES_DeQueue 006C  
          Pattern_RGBPatterns@Length 00E0                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 005C  
                      main@ErrorType 00CC                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                     ?_SpeakingPattern 0068  
  __end_of_InitPatternControlService 2472                          ?_SPI32_Init 0001  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
               __end_of_GetNextFrame 2892                     _RunCanRX_Service 1C9C  
            __end_of_InitCanHardware 2182                                ??_ISR 0024  
                 ES_Run@HighestPrior 00CB             ThinkingPattern@stepCount 0069  
           SpeakingPattern@stepCount 0069                                ?_main 0001  
              __end_of_ES_Timer_Init 2920                      __end_of___awdiv 1C9C  
                    __end_of___awmod 1FFE                      __end_of___lbmod 25EE  
                    ___awdiv@divisor 0062                                _T1CON 000FCD  
                         _DistList00 0367                      __end_of___lwdiv 2272  
                              _ERRIE 007D1D                                _ERRIF 007D25  
                              i2l175 1ADA                      ___awdiv@counter 0064  
                              _IRXIE 007D1F                                _IRXIF 007D27  
        ??i2_PostSPI32ControlService 0021                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                                _TRISC 000F94  
                              _SSPIE 007CEB                                _SSPIF 007CF3  
                         _Brightness 00F9                        __CFG_PWRT$OFF 000000  
               _SPI32_TransmitFrames 2748                          ?_HSV_to_RGB 0073  
                              _Ready 00DA      __end_of_InitSPI32ControlService 26A4  
                         _FrameIndex 00E4                                _putch 295C  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 281E  
                              status 000FD8              SPI32_SendFrame@newFrame 0060  
                   ?_SPI32_SendFrame 0060                   __size_ofi2___awmod 0070  
         PostCanRX_Service@ThisEvent 001E                      __initialization 2182  
             ES_GetMSBitSet@LoopCntr 0069            RunCanRX_Service@ThisEvent 00BA  
         __end_of_ES_CheckUserEvents 25AA                         __end_of_main 2086  
                  ES_Timer_Init@Rate 0062                     __end_of_InitPins 28AC  
                __end_of_EventQueues 0365                               ??_main 00CC  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                SpeakingPattern@head 007F           __size_of_SPI32_EOTResponse 003A  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 0080          RunCanRX_Service@ReturnEvent 00BD  
   __end_of__HW_Process_Pending_Ints 28C2             ProcessReceive@Event2Post 0021  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
                        _IdlePattern 1108                    ?_CanErrorResponse 0001  
               __end_of_DotStar_Init 1EB8                 __end_of_DotStar_Show 156A  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 0060                               _CCP1IF 007CF2  
                             _CANCON 000F6F                           _PatternOff 25EE  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                   ___awdiv@dividend 0060                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                       IdlePattern@hue 0075  
                         _MyPriority 00E6                       IdlePattern@sat 007C  
                     IdlePattern@val 007D                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0062                           _SetPattern 292C  
                             i2l3200 23BE                               i2l3048 1E06  
                             i2l3600 23F0                               i2l3602 240A  
                             i2l3612 252C                               i2l2840 2308  
                             i2l3802 1AD0                               i2l2860 234E  
                             i2l2852 2336                               i2l2844 2316  
                             i2l2836 22FC                               i2l2846 231E  
                             i2l3590 23DE                               i2l2848 2322  
                             i2l2856 2340                               i2l3592 23E2  
                             i2l3594 23E6                               i2l3596 23EA  
                             i2l3676 26C8                               i2l3790 1ABC  
                             i2l3784 1AB2                               _INTCON 000FF2  
                             i2l3778 1AA8                               i2l3796 1AC6  
                             _RXB0D0 000F66                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 1786  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
          i2_PostSPI32ControlService 28D8                     ??_CanRCVResponse 0024  
                   ??_ES_EnQueueFIFO 0071                       _Timer2PostFunc 0321  
                             _Length 00E5        SPI32_TransmitFrames@numFrames 0082  
                      ?_PausePattern 0001                               _Queue0 00EA  
                             _Queue1 0043                               _Queue2 004F  
                     _SysTickCounter 003C                  __size_of_HSV_to_RGB 0458  
           ??_RunSPI32ControlService 00BD                               ___wmul 26DE  
    InitSPI32ControlService@Priority 0080                            ??___awdiv 0064  
                          ??___awmod 0064                            ??___lbmod 0061  
                   ?_InitCanHardware 0001                            ??___lwdiv 0070  
        __size_of_ES_Timer_InitTimer 0080                               clear_0 21BC  
                             clear_1 21CE                               clear_2 21DA  
                             clear_3 21E6                     ___awdiv@quotient 0066  
                   _BusErrorResponse 2960                      ___awmod@divisor 0062  
                      ??_ShowPattern 00BA            ES_Timer_InitTimer@NewTime 0060  
                    ___awmod@counter 0064                               _printf 2714  
                        ISR@LastTime 0038                         __pdataCOMRAM 005B  
             ES_InitQueue@pThisQueue 0063                    __end_ofi2___awmod 2358  
                       __mediumconst 0000                          ISR@NextTime 003A  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
           __end_of_ListeningPattern 1108                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 0074  
             UpdatePattern@patternID 0082              ES_GetMSBitSet@Val2Check 0060  
          InitCanRX_Service@Priority 0080                      ___lbmod@divisor 0060  
                         __accesstop 0060              __end_of__initialization 21EC  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0062  
    RunSPI32ControlService@ThisEvent 00BA                      __CFG_PBADEN$OFF 000000  
  __size_of_RunPatternControlService 00C8            ?_RunPatternControlService 00BA  
              __size_of_GetNextFrame 001A                        ___rparam_used 000001  
        ??_InitPatternControlService 007D                          PatternOff@i 0062  
             ThinkingPattern@pattern 0001                       ??_PausePattern 0065  
             SpeakingPattern@pattern 0001                          _EventQueues 035C  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                       __pidataBANK0 2946          __size_of_ES_Timer_StopTimer 004E  
                      ?_ES_InitQueue 0060     __size_of_InitSPI32ControlService 003A  
            __end_of_Nybble2MSBitNum 0350    _PostSPI32ControlService$intlevel0 2846  
                      __end_of_putch 295E                      _TMR_ActiveFlags 00DC  
             ??_SPI32_TransmitFrames 0083                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 0067                        ?_ResetPattern 0001  
            ListeningPattern@pattern 0001              __size_of_ProcessReceive 005A  
                __end_of_ShowPattern 27F8                  _ThinkingPattern$744 0077  
                _ThinkingPattern$745 0079                 IdlePattern@stepCount 0069  
                      ??_StopPattern 00BA                       _TMR_TimerArray 0100  
                       _GetNextFrame 2878                          ?_PatternOff 0060  
           __end_of_RunCanRX_Service 1D56             ES_EnQueueFIFO@pThisQueue 0075  
                            ??_putch 0060             __HW_Process_Pending_Ints 28AC  
                         __pbssBANK0 00CD                           __pbssBANK1 0100  
                        ?_SetPattern 0001             __size_of_ThinkingPattern 0222  
               SpeakingPattern@pixel 0068                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0070  
              ListeningPattern@pixel 0068                  ListeningPattern@hue 007D  
                ListeningPattern@sat 007B                  ListeningPattern@val 007C  
                       ??_SPI32_Init 0060                    ListeningPattern@x 007E  
           ?_PostSPI32ControlService 007D            __size_of_ES_PostToService 0076  
                     ??_ES_InitQueue 0063                              ?___wmul 0066  
    __size_of_RunSPI32ControlService 0106                              _CCP1CON 000FBD  
                            _ECANCON 000F77                      IdlePattern@head 007F  
                            ?_printf 0060                __size_of_DotStar_Init 00AE  
                     ??_ResetPattern 0060                __end_of_UpdatePattern 0AA2  
              __size_of_DotStar_Show 0126                           ??i2___wmul 000B  
          _InitPatternControlService 241C               DotStar_Init@brightness 0060  
                 __end_of_ES_DeQueue 1444               i2ES_EnQueueFIFO@pBlock 000D  
              ES_Timer_StopTimer@Num 0064                         ??_HSV_to_RGB 0075  
                            _HW_Init 281E                              _SSPCON1 000FC6  
                 __end_of_SPI32_Init 2952                              _SSPSTAT 000FC7  
   SPI32_ControlService@CurrentState 00E1                           ??_InitPins 0060  
                    __size_of_ES_Run 00F4                  __end_of_StopPattern 27D2  
                        _PixelFrames 01B8                        ?_SetupPattern 0060  
             __size_of_ES_Initialize 00EC                     SpeakingPattern@x 007E  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006   i2PostSPI32ControlService@ThisEvent 001E  
   PostSPI32ControlService@ThisEvent 007D     InitSPI32ControlService@ThisEvent 007D  
                            _TestHue 003E            i2ES_EnQueueFIFO@Event2Add 000F  
                       _DotStar_Init 1E0A                         _DotStar_Show 1444  
                 __end_of_HSV_to_RGB 081E                              ___awdiv 1BDE  
         ?_PostPatternControlService 007D                              ___awmod 1F5C  
                            ___lbmod 25AA                      __size_of___wmul 0036  
                            ___lwdiv 21FA   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                  __size_of_PatternOff 0040  
           __size_of_SpeakingPattern 0222                ES_Timer_InitTimer@Num 0064  
         i2ES_PostToService@TheEvent 0018                              __pcinit 2182  
                            __ramtop 0300                  __size_of_SetPattern 000A  
                        _ShowPattern 27D2                              __ptext0 1FFE  
                            __ptext1 2714                              __ptext2 295C  
                            __ptext3 1786                              __ptext4 28AC  
                            __ptext5 156A                              __ptext6 1EB8  
                            __ptext7 1C9C                              __ptext8 1B16  
                            __ptext9 1680             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 1B0E  
                        HSV_to_RGB@b 0097                          HSV_to_RGB@g 0095  
                        HSV_to_RGB@h 008D                          HSV_to_RGB@p 00A1  
                        HSV_to_RGB@q 0099                          HSV_to_RGB@r 0093  
                        HSV_to_RGB@s 009F                          HSV_to_RGB@t 009B  
                        HSV_to_RGB@v 00A3                         _FramePointer 00D8  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 0060  
                 _ES_CheckUserEvents 2560                         ?_IdlePattern 0068  
                    ES_Run@ThisEvent 00F6                 __end_of_PausePattern 2946  
             _RunSPI32ControlService 1680                       __pintcode_body 1A48  
               end_of_initialization 21EC                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 2962            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 1A48  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 285C  
       ES_PostToService@WhichService 007C                       ??_SetupPattern 0063  
             __size_of_ES_Timer_Init 000E                    ??_ThinkingPattern 006A  
          __size_of_CanErrorResponse 0002                              printf@c 0064  
                            printf@f 0060              _InitSPI32ControlService 266A  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE           InitCanRX_Service@ThisEvent 007D  
  __end_of_PostPatternControlService 28D8                 ??_ES_CheckUserEvents 0060  
           __size_of_SPI32_SendFrame 0052            i2SPI32_SendFrame@newFrame 0001  
                      _ES_Initialize 187A                       _ProcessReceive 23C2  
   __end_of_RunPatternControlService 1BDE                     ___lbmod@dividend 0061  
  RunPatternControlService@ThisEvent 00BA   PostPatternControlService@ThisEvent 007D  
 InitPatternControlService@ThisEvent 007D                            _TRISBbits 000F93  
               __end_of_ES_EventList 0367                          _StopPattern 27AA  
                 UpdatePattern@i_730 0085                   UpdatePattern@i_731 0086  
                 UpdatePattern@i_732 0087                   UpdatePattern@i_729 0084  
               __end_of_ES_InitQueue 266A                    ?_ListeningPattern 0068  
                          i2___awmod 22E8                       ES_Initialize@i 0083  
                 ??_ListeningPattern 006A                          ___lbmod@rem 0063  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 187A  
               __end_of_ResetPattern 293E                   __end_of_DistList00 036B  
            ThinkingPattern@pixelHSV 0075              SpeakingPattern@pixelHSV 0075  
                   _ES_PostToService 2272           __end_of_ES_Timer_InitTimer 2106  
               __end_of_ServDescList 035C                       __end_of___wmul 2714  
                      __pidataCOMRAM 2962                    i2_SPI32_SendFrame 2512  
                  ??_CanXmitResponse 0001                            _FrameByte 00FA  
             __end_of_ProcessReceive 241C                SetupPattern@numPixels 0062  
                     ?_ES_Initialize 0081           ??__HW_Process_Pending_Ints 0084  
                 ?i2_SPI32_SendFrame 0001                        _ES_Timer_Init 2912  
                   i2___wmul@product 000B                       __end_of_printf 2748  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 1680  
                start_initialization 2182                    ??_SpeakingPattern 006A  
                        __end_of_ISR 1B16                    __size_ofi2___wmul 0026  
                       _CurrentFrame 00CD                         _CurrentState 00E3  
                       ??_PatternOff 0062                  ??i2_SPI32_SendFrame 0005  
                         ?i2___awmod 0001                    ?_RunCanRX_Service 00BA  
                       ??_SetPattern 0060                   SpeakingPattern@hue 007D  
                        _CANSTATbits 000F6E                   SpeakingPattern@sat 007B  
                 SpeakingPattern@val 007C   __size_of_InitPatternControlService 0056  
                           ??_ES_Run 00C7                   ??_RunCanRX_Service 00BD  
                          _TickCount 00E9                            _NumFrames 00E7  
         __end_ofi2_ES_PostToService 23C2                    __size_of_InitPins 001A  
          ??_InitSPI32ControlService 007D             ListeningPattern@pixelHSV 0075  
         __end_of_ES_Timer_StopTimer 2512                            _NumPixels 0042  
                SetPattern@PatternID 0060              __size_of_ES_GetMSBitSet 00A4  
                           ??___wmul 006A            __end_ofi2_SPI32_SendFrame 2560  
                        __pdataBANK0 00FA                   __end_of_PatternOff 262E  
            __size_of_CanRCVResponse 000C              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 0062              CanRX_Service@MyPriority 00DE  
          SPI32_EOTResponse@EOTevent 0021                __size_of_PausePattern 0008  
                     ?_ES_Timer_Init 0062                   __end_of_SetPattern 2936  
                    ?_ProcessReceive 0001                       __HW_Timer_Init 285C  
                    _IdlePattern$780 0078                      _IdlePattern$781 007A  
                        __pbssBIGRAM 01B8                 __end_of_SetupPattern 2912  
                        __pbssCOMRAM 0034     __size_of_PostSPI32ControlService 001C  
      __size_of_SPI32_TransmitFrames 0032                    ??_SPI32_SendFrame 0064  
                      __pcstackBANK0 0060                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0060  
                        _BRGCON3bits 000F72    RunPatternControlService@testEvent 00C0  
                           ?_HW_Init 0001                 __size_of_IdlePattern 0214  
                IdlePattern@pixelHSV 0076                    _PostCanRX_Service 28EE  
           _RunPatternControlService 1B16                   ?_PostCanRX_Service 001E  
   SPI32_TransmitFrames@framePointer 0080                     i2_ES_EnQueueFIFO 1D56  
                   HSV_to_RGB@region 008F                        __PRIMASK_temp 0040  
               ListeningPattern@head 007F                     _CanErrorResponse 295E  
                   ___lwdiv@dividend 006C                  ??_PostCanRX_Service 0021  
                  ??_Check4Keystroke 0060                         _PausePattern 293E  
                          __pintcode 0008                             ?___awdiv 0060  
                           ?___awmod 0060                             ?___lbmod 0060  
         DotStar_Show@patternPointer 00A5          ??_PostPatternControlService 0080  
                           ?___lwdiv 006C                      ??_ES_Initialize 0083  
           ES_PostToService@TheEvent 0077               __end_of__HW_Timer_Init 2878  
                       ?_ShowPattern 0001                          __smallconst 0300  
              __size_of_ES_InitQueue 003C              ?_RunSPI32ControlService 00BA  
          __end_of_PostCanRX_Service 2904                     ___lwdiv@quotient 0070  
                   IdlePattern@pixel 0068                          ??i2___awmod 0005  
                    _ThinkingPattern 0AA2                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 0081  
                  ??_InitCanHardware 0060            ES_GetMSBitSet@Nybble2Test 0068  
                 _PatternStepCounter 00E8                    ?_BusErrorResponse 0001  
                     ___wmul@product 006A                   ??_BusErrorResponse 0001  
             __size_of_UpdatePattern 0284                DotStar_Init@numPixels 0063  
                           i2u218_40 2556                             i2u218_45 254C  
                           _RXB0EIDH 000F63                             _RXB0EIDL 000F64  
                           _RXB0SIDH 000F61                             _RXB0SIDL 000F62  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0365  
                           _RXF0SIDL 000F01           __size_ofi2_SPI32_SendFrame 004E  
                           _RXM0EIDH 000F1A                             _RXM0EIDL 000F1B  
                       _ES_InitQueue 262E                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 0064  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 0060  
                  ___wmul@multiplier 0066       __end_of_RunSPI32ControlService 1786  
                           i2___wmul 27F8                         _ResetPattern 2936  
       RunCanRX_Service@PatternEvent 00C0                   ES_DeQueue@SaveCrit 0072  
               ES_EnQueueFIFO@pBlock 006C             __end_of_ES_PostToService 22E8  
                       ?_StopPattern 0001            _PostPatternControlService 28C2  
                          copy_data0 2196                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00FB  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 2892                         _PixelPattern 0120  
                    _CanXmitResponse 2952                         IdlePattern@x 007E  
                           __Hrparam 0000                       _ES_GetMSBitSet 1EB8  
                           __Lrparam 0000            ListeningPattern@stepCount 0069  
          __size_of_ListeningPattern 0222    RunSPI32ControlService@ReturnEvent 00C4  
                  _InitCanRX_Service 277A                      _SpeakingPattern 0CC4  
                   __size_of___awdiv 00BE                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 2920                       _ES_EnQueueFIFO 1966  
                   __size_of___lwdiv 0078                   ?_InitCanRX_Service 0001  
               ThinkingPattern@pixel 0068                   IdlePattern@pattern 0001  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 2840  
            __end_of_ThinkingPattern 0CC4                      HSV_to_RGB@fpart 0091  
                      _UpdatePattern 081E                   _ES_Timer_InitTimer 2086  
                ??_InitCanRX_Service 007D           __size_of_PostCanRX_Service 0016  
                    ___lwdiv@divisor 006E                      ___lwdiv@counter 0072  
             __end_of_BitNum2SetMask 0321                             __ptext10 2472  
                           __ptext11 2878                             __ptext20 1108  
                           __ptext12 27AA                             __ptext21 1BDE  
                           __ptext13 2936                             __ptext30 24C4  
                           __ptext22 2086                             __ptext14 25EE  
                           __ptext31 292C                             __ptext23 1444  
                           __ptext15 27D2                             __ptext40 241C  
                           __ptext32 2892                             __ptext24 2748  
                           __ptext16 081E                             __ptext41 266A  
                           __ptext33 2106                             __ptext25 28C2  
                           __ptext17 0AA2                             __ptext50 2912  
                           __ptext42 294C                             __ptext34 131C  
                           __ptext26 2840                             __ptext18 0CC4  
                           __ptext51 285C                             __ptext43 281E  
                           __ptext35 25AA                             __ptext27 03C6  
                           __ptext19 0EE6                             __ptext60 28EE  
                           __ptext52 262E                             __ptext44 2904  
                           __ptext36 2560                             __ptext28 21FA  
                           __ptext61 2358                             __ptext45 1E0A  
                           __ptext37 2958                             __ptext29 293E  
                           __ptext62 1D56                             __ptext54 26A4  
                           __ptext46 2272                             __ptext38 187A  
                           __ptext63 27F8                             __ptext55 2512  
                           __ptext47 1966                             __ptext39 277A  
                           __ptext64 22E8                             __ptext56 28D8  
                           __ptext48 26DE                             __ptext65 295E  
                           __ptext57 2952                             __ptext49 1F5C  
                           __ptext66 2960                             __ptext58 2920  
                           __ptext67 0000                             __ptext59 23C2  
                      ?_GetNextFrame 0060    ES_Timer_Tick_Resp@NeedsProcessing 00D4  
                     UpdatePattern@i 0083                  ?_ES_Timer_InitTimer 0060  
                    _HSV_to_RGB$2054 009D                        __size_of_main 0088  
                 _ES_Timer_Tick_Resp 156A               __end_of_ES_GetMSBitSet 1F5C  
                       _SetupPattern 2904            __end_of_InitCanRX_Service 27AA  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 292C  
             __end_of_ES_EnQueueFIFO 1A48                     ??_ProcessReceive 0021  
                           int$flags 005C            __size_of_RunCanRX_Service 00BA  
                    _SPI32_SendFrame 2472                  SetupPattern@configs 0060  
               ??_ES_Timer_InitTimer 0062       SPI32_ControlService@MyPriority 00E2  
                      _MaxBrightness 005B                    ES_DeQueue@NumLeft 0073  
                 i2_ES_PostToService 2358             __end_ofi2_ES_EnQueueFIFO 1E0A  
                 _ES_Timer_StopTimer 24C4                       ?_UpdatePattern 0080  
         ??_RunPatternControlService 00BD                        DotStar_Show@i 00B9  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005                 __size_of_ShowPattern 0026  
  __end_ofi2_PostSPI32ControlService 28EE             __end_of_CanErrorResponse 2960  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 0064  
               ??_ES_Timer_Tick_Resp 0080                  ?_ES_Timer_StopTimer 0001  
                ThinkingPattern@head 007F              __end_of_CanXmitResponse 2958  
                    _Check4Keystroke 2958                             intlevel2 0000  
                         _ES_DeQueue 131C    __size_of__HW_Process_Pending_Ints 0016  
                      _TransmitFrame 0034            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 0060  
       __end_of_SPI32_TransmitFrames 277A              __end_of_SpeakingPattern 0EE6  
                _SpeakingPattern$768 0077                  _SpeakingPattern$769 0079  
               ??i2_ES_PostToService 001B                           _SPI32_Init 294C  
                      ?_DotStar_Init 0060                        ?_DotStar_Show 00A5  
               ??_ES_Timer_StopTimer 0060  ES_Timer_Tick_Resp@NextTimer2Process 00DF  
                           printf@ap 0062                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 006C            ??_PostSPI32ControlService 0080  
                   ES_DeQueue@pBlock 006C                   ThinkingPattern@hue 007D  
                 ThinkingPattern@sat 007B                   ThinkingPattern@val 007C  
                    _InitCanHardware 2106    SPI32_TransmitFrames@transmitEvent 0083  
                   ?_ThinkingPattern 0068    InitPatternControlService@Priority 0080  
                      ??_IdlePattern 006A                    _SPI32_EOTResponse 26A4  
                         _HSV_to_RGB 03C6               ES_DeQueue@pReturnEvent 006E  
              ES_InitQueue@BlockSize 0062                   ?_SPI32_EOTResponse 0001  
               __size_of_StopPattern 0028             ?_InitSPI32ControlService 0001  
                   ThinkingPattern@x 007E                  ??_SPI32_EOTResponse 0021  
            __end_of_SPI32_SendFrame 24C4           ?_InitPatternControlService 0001  
 __size_of_PostPatternControlService 0016                       ??_DotStar_Init 0061  
         __size_of_InitCanRX_Service 0030                       ??_DotStar_Show 00A7  
