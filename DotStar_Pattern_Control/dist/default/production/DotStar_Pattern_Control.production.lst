

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Nov 29 17:12:49 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001F98                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _MaxBrightness
    81  001F98  1F                 	db	31
    82                           
    83                           	psect	idataBANK0
    84  001F86                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _FrameByte
    88  001F86  03                 	db	3
    89                           
    90                           ;initializer for _PatternConfigs
    91  001F87  00                 	db	0
    92  001F88  FF                 	db	255
    93  001F89  1F                 	db	31
    94  001F8A  00                 	db	0
    95  001F8B  01                 	db	1
    96                           
    97                           	psect	smallconst
    98  000300                     __psmallconst:
    99                           	opt stack 0
   100  000300  00                 	db	0
   101  000301                     _BitNum2SetMask:
   102                           	opt stack 0
   103  000301  0001               	dw	1
   104  000303  0002               	dw	2
   105  000305  0004               	dw	4
   106  000307  0008               	dw	8
   107  000309  0010               	dw	16
   108  00030B  0020               	dw	32
   109  00030D  0040               	dw	64
   110  00030F  0080               	dw	128
   111  000311  0100               	dw	256
   112  000313  0200               	dw	512
   113  000315  0400               	dw	1024
   114  000317  0800               	dw	2048
   115  000319  1000               	dw	4096
   116  00031B  2000               	dw	8192
   117  00031D  4000               	dw	16384
   118  00031F  8000               	dw	32768
   119  000321                     __end_of_BitNum2SetMask:
   120                           	opt stack 0
   121  000321                     _Timer2PostFunc:
   122                           	opt stack 0
   123  000321  2E                 	db	low _PostPatternControlService
   124  000322  1F                 	db	high _PostPatternControlService
   125  000323  C6                 	db	low _PostSPI32ControlService
   126  000324  1E                 	db	high _PostSPI32ControlService
   127  000325  00                 	db	0
   128  000326  00                 	db	0
   129  000327  00                 	db	0
   130  000328  00                 	db	0
   131  000329  00                 	db	0
   132  00032A  00                 	db	0
   133  00032B  00                 	db	0
   134  00032C  00                 	db	0
   135  00032D  00                 	db	0
   136  00032E  00                 	db	0
   137  00032F  00                 	db	0
   138  000330  00                 	db	0
   139  000331  00                 	db	0
   140  000332  00                 	db	0
   141  000333  00                 	db	0
   142  000334  00                 	db	0
   143  000335  00                 	db	0
   144  000336  00                 	db	0
   145  000337  00                 	db	0
   146  000338  00                 	db	0
   147  000339  00                 	db	0
   148  00033A  00                 	db	0
   149  00033B  00                 	db	0
   150  00033C  00                 	db	0
   151  00033D  00                 	db	0
   152  00033E  00                 	db	0
   153  00033F  00                 	db	0
   154  000340  00                 	db	0
   155  000341                     __end_of_Timer2PostFunc:
   156                           	opt stack 0
   157  000341                     _Nybble2MSBitNum:
   158                           	opt stack 0
   159  000341  00                 	db	0
   160  000342  01                 	db	1
   161  000343  01                 	db	1
   162  000344  02                 	db	2
   163  000345  02                 	db	2
   164  000346  02                 	db	2
   165  000347  02                 	db	2
   166  000348  03                 	db	3
   167  000349  03                 	db	3
   168  00034A  03                 	db	3
   169  00034B  03                 	db	3
   170  00034C  03                 	db	3
   171  00034D  03                 	db	3
   172  00034E  03                 	db	3
   173  00034F  03                 	db	3
   174  000350                     __end_of_Nybble2MSBitNum:
   175                           	opt stack 0
   176  000350                     _ServDescList:
   177                           	opt stack 0
   178  000350  D2                 	db	low _InitPatternControlService
   179  000351  1A                 	db	high _InitPatternControlService
   180  000352  AE                 	db	low _RunPatternControlService
   181  000353  12                 	db	high _RunPatternControlService
   182  000354  20                 	db	low _InitSPI32ControlService
   183  000355  1D                 	db	high _InitSPI32ControlService
   184  000356  E6                 	db	low _RunSPI32ControlService
   185  000357  0E                 	db	high _RunSPI32ControlService
   186  000358                     __end_of_ServDescList:
   187                           	opt stack 0
   188  000358                     _EventQueues:
   189                           	opt stack 0
   190  000358  E9                 	db	low _Queue0
   191  000359  00                 	db	high _Queue0
   192  00035A  04                 	db	4
   193  00035B  43                 	db	low _Queue1
   194  00035C  00                 	db	high _Queue1
   195  00035D  04                 	db	4
   196  00035E                     __end_of_EventQueues:
   197                           	opt stack 0
   198  00035E                     _ES_EventList:
   199                           	opt stack 0
   200  00035E  92                 	db	low _Check4Keystroke
   201  00035F  1F                 	db	high _Check4Keystroke
   202  000360                     __end_of_ES_EventList:
   203                           	opt stack 0
   204  000360                     _DistList00:
   205                           	opt stack 0
   206  000360  2E                 	db	low _PostPatternControlService
   207  000361  1F                 	db	high _PostPatternControlService
   208  000362  C6                 	db	low _PostSPI32ControlService
   209  000363  1E                 	db	high _PostSPI32ControlService
   210  000364                     __end_of_DistList00:
   211                           	opt stack 0
   212  0000                     _ADCON1	set	4033
   213  0000                     _CCP1CON	set	4029
   214  0000                     _CCPR1H	set	4031
   215  0000                     _CCPR1L	set	4030
   216  0000                     _INTCON	set	4082
   217  0000                     _LATC	set	3979
   218  0000                     _PIE1	set	3997
   219  0000                     _PORTC	set	3970
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPSTAT	set	4039
   224  0000                     _T1CON	set	4045
   225  0000                     _TRISC	set	3988
   226  0000                     _CCP1IF	set	31986
   227  0000                     _GIE	set	32663
   228  0000                     _IRCF0	set	32412
   229  0000                     _IRCF1	set	32413
   230  0000                     _IRCF2	set	32414
   231  0000                     _SCS1	set	32409
   232  0000                     _SSPIE	set	31979
   233  0000                     _SSPIF	set	31987
   234  000364                     STR_1:
   235  000364  46                 	db	70	;'F'
   236  000365  61                 	db	97	;'a'
   237  000366  69                 	db	105	;'i'
   238  000367  6C                 	db	108	;'l'
   239  000368  65                 	db	101	;'e'
   240  000369  64                 	db	100	;'d'
   241  00036A  20                 	db	32
   242  00036B  6F                 	db	111	;'o'
   243  00036C  6E                 	db	110	;'n'
   244  00036D  20                 	db	32
   245  00036E  61                 	db	97	;'a'
   246  00036F  74                 	db	116	;'t'
   247  000370  74                 	db	116	;'t'
   248  000371  65                 	db	101	;'e'
   249  000372  6D                 	db	109	;'m'
   250  000373  70                 	db	112	;'p'
   251  000374  74                 	db	116	;'t'
   252  000375  20                 	db	32
   253  000376  74                 	db	116	;'t'
   254  000377  6F                 	db	111	;'o'
   255  000378  20                 	db	32
   256  000379  50                 	db	80	;'P'
   257  00037A  6F                 	db	111	;'o'
   258  00037B  73                 	db	115	;'s'
   259  00037C  74                 	db	116	;'t'
   260  00037D  0A                 	db	10
   261  00037E  00                 	db	0
   262  00037F                     STR_2:
   263  00037F  46                 	db	70	;'F'
   264  000380  61                 	db	97	;'a'
   265  000381  69                 	db	105	;'i'
   266  000382  6C                 	db	108	;'l'
   267  000383  65                 	db	101	;'e'
   268  000384  64                 	db	100	;'d'
   269  000385  20                 	db	32
   270  000386  6F                 	db	111	;'o'
   271  000387  6E                 	db	110	;'n'
   272  000388  20                 	db	32
   273  000389  4E                 	db	78	;'N'
   274  00038A  55                 	db	85	;'U'
   275  00038B  4C                 	db	76	;'L'
   276  00038C  4C                 	db	76	;'L'
   277  00038D  20                 	db	32
   278  00038E  70                 	db	112	;'p'
   279  00038F  6F                 	db	111	;'o'
   280  000390  69                 	db	105	;'i'
   281  000391  6E                 	db	110	;'n'
   282  000392  74                 	db	116	;'t'
   283  000393  65                 	db	101	;'e'
   284  000394  72                 	db	114	;'r'
   285  000395  0A                 	db	10
   286  000396  00                 	db	0
   287  000397                     STR_3:
   288  000397  46                 	db	70	;'F'
   289  000398  61                 	db	97	;'a'
   290  000399  69                 	db	105	;'i'
   291  00039A  6C                 	db	108	;'l'
   292  00039B  65                 	db	101	;'e'
   293  00039C  64                 	db	100	;'d'
   294  00039D  20                 	db	32
   295  00039E  49                 	db	73	;'I'
   296  00039F  6E                 	db	110	;'n'
   297  0003A0  69                 	db	105	;'i'
   298  0003A1  74                 	db	116	;'t'
   299  0003A2  69                 	db	105	;'i'
   300  0003A3  61                 	db	97	;'a'
   301  0003A4  6C                 	db	108	;'l'
   302  0003A5  69                 	db	105	;'i'
   303  0003A6  7A                 	db	122	;'z'
   304  0003A7  61                 	db	97	;'a'
   305  0003A8  74                 	db	116	;'t'
   306  0003A9  69                 	db	105	;'i'
   307  0003AA  6F                 	db	111	;'o'
   308  0003AB  6E                 	db	110	;'n'
   309  0003AC  0A                 	db	10
   310  0003AD  00                 	db	0
   311  0003AE                     STR_4:
   312  0003AE  4F                 	db	79	;'O'
   313  0003AF  74                 	db	116	;'t'
   314  0003B0  68                 	db	104	;'h'
   315  0003B1  65                 	db	101	;'e'
   316  0003B2  72                 	db	114	;'r'
   317  0003B3  20                 	db	32
   318  0003B4  46                 	db	70	;'F'
   319  0003B5  61                 	db	97	;'a'
   320  0003B6  69                 	db	105	;'i'
   321  0003B7  6C                 	db	108	;'l'
   322  0003B8  75                 	db	117	;'u'
   323  0003B9  72                 	db	114	;'r'
   324  0003BA  65                 	db	101	;'e'
   325  0003BB  0A                 	db	10
   326  0003BC  00                 	db	0
   327                           
   328                           ; #config settings
   329  0003BD  00                 	db	0	; dummy byte at the end
   330  0000                     
   331                           	psect	cinit
   332  001892                     __pcinit:
   333                           	opt stack 0
   334  001892                     start_initialization:
   335                           	opt stack 0
   336  001892                     __initialization:
   337                           	opt stack 0
   338                           
   339                           ; Initialize objects allocated to BANK0 (6 bytes)
   340                           ; load TBLPTR registers with __pidataBANK0
   341  001892  0E86               	movlw	low __pidataBANK0
   342  001894  6EF6               	movwf	tblptrl,c
   343  001896  0E1F               	movlw	high __pidataBANK0
   344  001898  6EF7               	movwf	tblptrh,c
   345  00189A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   346  00189C  6EF8               	movwf	tblptru,c
   347  00189E  EE00  F0F9         	lfsr	0,__pdataBANK0
   348  0018A2  EE10 F006          	lfsr	1,6
   349  0018A6                     copy_data0:
   350  0018A6  0009               	tblrd		*+
   351  0018A8  CFF5 FFEE          	movff	tablat,postinc0
   352  0018AC  50E5               	movf	postdec1,w,c
   353  0018AE  50E1               	movf	fsr1l,w,c
   354  0018B0  E1FA               	bnz	copy_data0
   355                           
   356                           ; Initialize objects allocated to COMRAM (1 bytes)
   357                           ; load TBLPTR registers with __pidataCOMRAM
   358  0018B2  0E98               	movlw	low __pidataCOMRAM
   359  0018B4  6EF6               	movwf	tblptrl,c
   360  0018B6  0E1F               	movlw	high __pidataCOMRAM
   361  0018B8  6EF7               	movwf	tblptrh,c
   362  0018BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   363  0018BC  6EF8               	movwf	tblptru,c
   364  0018BE  0009               	tblrd		*+	;fetch initializer
   365  0018C0  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   366                           
   367                           ; Clear objects allocated to BIGRAM (316 bytes)
   368  0018C4  EE01  F0B8         	lfsr	0,__pbssBIGRAM
   369  0018C8  EE11 F03C          	lfsr	1,316
   370  0018CC                     clear_0:
   371  0018CC  6AEE               	clrf	postinc0,c
   372  0018CE  50E5               	movf	postdec1,w,c
   373  0018D0  50E1               	movf	fsr1l,w,c
   374  0018D2  E1FC               	bnz	clear_0
   375  0018D4  50E2               	movf	fsr1h,w,c
   376  0018D6  E1FA               	bnz	clear_0
   377                           
   378                           ; Clear objects allocated to BANK1 (184 bytes)
   379  0018D8  EE01  F000         	lfsr	0,__pbssBANK1
   380  0018DC  0EB8               	movlw	184
   381  0018DE                     clear_1:
   382  0018DE  6AEE               	clrf	postinc0,c
   383  0018E0  06E8               	decf	wreg,f,c
   384  0018E2  E1FD               	bnz	clear_1
   385                           
   386                           ; Clear objects allocated to BANK0 (44 bytes)
   387  0018E4  EE00  F0CD         	lfsr	0,__pbssBANK0
   388  0018E8  0E2C               	movlw	44
   389  0018EA                     clear_2:
   390  0018EA  6AEE               	clrf	postinc0,c
   391  0018EC  06E8               	decf	wreg,f,c
   392  0018EE  E1FD               	bnz	clear_2
   393                           
   394                           ; Clear objects allocated to COMRAM (27 bytes)
   395  0018F0  EE00  F034         	lfsr	0,__pbssCOMRAM
   396  0018F4  0E1B               	movlw	27
   397  0018F6                     clear_3:
   398  0018F6  6AEE               	clrf	postinc0,c
   399  0018F8  06E8               	decf	wreg,f,c
   400  0018FA  E1FD               	bnz	clear_3
   401  0018FC                     end_of_initialization:
   402                           	opt stack 0
   403  0018FC                     __end_of__initialization:
   404                           	opt stack 0
   405  0018FC  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   406  0018FE  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   407  001900  0E00               	movlw	low (__Lmediumconst shr (0+16))
   408  001902  6EF8               	movwf	tblptru,c
   409  001904  0100               	movlb	0
   410  001906  EFC1  F00B         	goto	_main	;jump to C main() function
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1h	equ	0xFE2
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	bssCOMRAM
   422  000034                     __pbssCOMRAM:
   423                           	opt stack 0
   424  000034                     _TransmitFrame:
   425                           	opt stack 0
   426  000034                     	ds	4
   427  000038                     ISR@LastTime:
   428                           	opt stack 0
   429  000038                     	ds	2
   430  00003A                     ISR@NextTime:
   431                           	opt stack 0
   432  00003A                     	ds	2
   433  00003C                     _SysTickCounter:
   434                           	opt stack 0
   435  00003C                     	ds	2
   436  00003E                     	ds	2
   437  000040                     __PRIMASK_temp:
   438                           	opt stack 0
   439  000040                     	ds	2
   440  000042                     	ds	1
   441  000043                     _Queue1:
   442                           	opt stack 0
   443  000043                     	ds	12
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1h	equ	0xFE2
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataCOMRAM
   455  00004F                     __pdataCOMRAM:
   456                           	opt stack 0
   457  00004F                     	ds	1
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1h	equ	0xFE2
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bssBANK0
   469  0000CD                     __pbssBANK0:
   470                           	opt stack 0
   471  0000CD                     _CurrentFrame:
   472                           	opt stack 0
   473  0000CD                     	ds	4
   474  0000D1                     ES_Timer_Tick_Resp@NewEvent:
   475                           	opt stack 0
   476  0000D1                     	ds	3
   477  0000D4                     ES_Timer_Tick_Resp@NeedsProcessing:
   478                           	opt stack 0
   479  0000D4                     	ds	2
   480  0000D6                     Pattern_RGBPatterns@PatternConfigs:
   481                           	opt stack 0
   482  0000D6                     	ds	2
   483  0000D8                     _FramePointer:
   484                           	opt stack 0
   485  0000D8                     	ds	2
   486  0000DA                     _Ready:
   487                           	opt stack 0
   488  0000DA                     	ds	2
   489  0000DC                     _TMR_ActiveFlags:
   490                           	opt stack 0
   491  0000DC                     	ds	2
   492  0000DE                     ES_Timer_Tick_Resp@NextTimer2Process:
   493                           	opt stack 0
   494  0000DE                     	ds	1
   495  0000DF                     Pattern_RGBPatterns@Length:
   496                           	opt stack 0
   497  0000DF                     	ds	1
   498  0000E0                     SPI32_ControlService@CurrentState:
   499                           	opt stack 0
   500  0000E0                     	ds	1
   501  0000E1                     SPI32_ControlService@MyPriority:
   502                           	opt stack 0
   503  0000E1                     	ds	1
   504  0000E2                     _CurrentState:
   505                           	opt stack 0
   506  0000E2                     	ds	1
   507  0000E3                     _FrameIndex:
   508                           	opt stack 0
   509  0000E3                     	ds	1
   510  0000E4                     _Length:
   511                           	opt stack 0
   512  0000E4                     	ds	1
   513  0000E5                     _MyPriority:
   514                           	opt stack 0
   515  0000E5                     	ds	1
   516  0000E6                     _NumFrames:
   517                           	opt stack 0
   518  0000E6                     	ds	1
   519  0000E7                     _PatternStepCounter:
   520                           	opt stack 0
   521  0000E7                     	ds	1
   522  0000E8                     _TickCount:
   523                           	opt stack 0
   524  0000E8                     	ds	1
   525  0000E9                     _Queue0:
   526                           	opt stack 0
   527  0000E9                     	ds	12
   528  0000F5                     ES_Run@ThisEvent:
   529                           	opt stack 0
   530  0000F5                     	ds	3
   531  0000F8                     _Brightness:
   532                           	opt stack 0
   533  0000F8                     	ds	1
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	dataBANK0
   545  0000F9                     __pdataBANK0:
   546                           	opt stack 0
   547  0000F9                     _FrameByte:
   548                           	opt stack 0
   549  0000F9                     	ds	1
   550  0000FA                     _PatternConfigs:
   551                           	opt stack 0
   552  0000FA                     	ds	5
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	bssBANK1
   564  000100                     __pbssBANK1:
   565                           	opt stack 0
   566  000100                     _TMR_TimerArray:
   567                           	opt stack 0
   568  000100                     	ds	32
   569  000120                     _PixelPattern:
   570                           	opt stack 0
   571  000120                     	ds	152
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1h	equ	0xFE2
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	bssBIGRAM
   583  0001B8                     __pbssBIGRAM:
   584                           	opt stack 0
   585  0001B8                     _PixelFrames:
   586                           	opt stack 0
   587  0001B8                     	ds	316
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1h	equ	0xFE2
   596                           fsr1l	equ	0xFE1
   597                           
   598                           	psect	cstackBANK0
   599  000060                     __pcstackBANK0:
   600                           	opt stack 0
   601  000060                     ??_ES_Timer_StopTimer:
   602  000060                     ?_PatternOff:
   603                           	opt stack 0
   604  000060                     ?_printf:
   605                           	opt stack 0
   606  000060                     ?___awdiv:
   607                           	opt stack 0
   608  000060                     ?___awmod:
   609                           	opt stack 0
   610  000060                     ?_GetNextFrame:
   611                           	opt stack 0
   612  000060                     ES_CheckUserEvents@i:
   613                           	opt stack 0
   614  000060                     DotStar_Init@brightness:
   615                           	opt stack 0
   616  000060                     ___lbmod@divisor:
   617                           	opt stack 0
   618  000060                     ES_GetMSBitSet@Val2Check:
   619                           	opt stack 0
   620  000060                     __HW_Timer_Init@Rate:
   621                           	opt stack 0
   622  000060                     ES_InitQueue@pBlock:
   623                           	opt stack 0
   624  000060                     ES_Timer_InitTimer@NewTime:
   625                           	opt stack 0
   626  000060                     SetupPattern@configs:
   627                           	opt stack 0
   628  000060                     printf@f:
   629                           	opt stack 0
   630  000060                     ___awdiv@dividend:
   631                           	opt stack 0
   632  000060                     ___awmod@dividend:
   633                           	opt stack 0
   634  000060                     SPI32_SendFrame@newFrame:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x0
   638  000060                     	ds	1
   639  000061                     ??_DotStar_Init:
   640  000061                     ___lbmod@dividend:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1
   644  000061                     	ds	1
   645  000062                     ??_ES_GetMSBitSet:
   646  000062                     ??_ES_Timer_InitTimer:
   647  000062                     ES_InitQueue@BlockSize:
   648                           	opt stack 0
   649  000062                     SetupPattern@numPixels:
   650                           	opt stack 0
   651  000062                     PatternOff@i:
   652                           	opt stack 0
   653  000062                     ___lbmod@counter:
   654                           	opt stack 0
   655  000062                     ES_Timer_Init@Rate:
   656                           	opt stack 0
   657  000062                     printf@ap:
   658                           	opt stack 0
   659  000062                     ___awdiv@divisor:
   660                           	opt stack 0
   661  000062                     ___awmod@divisor:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2
   665  000062                     	ds	1
   666  000063                     DotStar_Init@numPixels:
   667                           	opt stack 0
   668  000063                     ___lbmod@rem:
   669                           	opt stack 0
   670  000063                     ES_InitQueue@pThisQueue:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x3
   674  000063                     	ds	1
   675  000064                     ??_SPI32_SendFrame:
   676  000064                     ES_Timer_StopTimer@Num:
   677                           	opt stack 0
   678  000064                     ES_Timer_InitTimer@Num:
   679                           	opt stack 0
   680  000064                     printf@c:
   681                           	opt stack 0
   682  000064                     ___awdiv@counter:
   683                           	opt stack 0
   684  000064                     ___awmod@counter:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x4
   688  000064                     	ds	1
   689  000065                     ___awdiv@sign:
   690                           	opt stack 0
   691  000065                     ___awmod@sign:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x5
   695  000065                     	ds	1
   696  000066                     ?___wmul:
   697                           	opt stack 0
   698  000066                     ___wmul@multiplier:
   699                           	opt stack 0
   700  000066                     ___awdiv@quotient:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x6
   704  000066                     	ds	1
   705  000067                     ES_GetMSBitSet@ReturnVal:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x7
   709  000067                     	ds	1
   710  000068                     ?_ThinkingPattern:
   711                           	opt stack 0
   712  000068                     ES_GetMSBitSet@Nybble2Test:
   713                           	opt stack 0
   714  000068                     ThinkingPattern@pixel:
   715                           	opt stack 0
   716  000068                     ___wmul@multiplicand:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x8
   720  000068                     	ds	1
   721  000069                     ES_GetMSBitSet@LoopCntr:
   722                           	opt stack 0
   723  000069                     ThinkingPattern@stepCount:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x9
   727  000069                     	ds	1
   728  00006A                     ??_ThinkingPattern:
   729  00006A                     ___wmul@product:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0xA
   733  00006A                     	ds	2
   734  00006C                     ?___lwdiv:
   735                           	opt stack 0
   736  00006C                     ES_EnQueueFIFO@pBlock:
   737                           	opt stack 0
   738  00006C                     ES_DeQueue@pBlock:
   739                           	opt stack 0
   740  00006C                     ___lwdiv@dividend:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0xC
   744  00006C                     	ds	2
   745  00006E                     ES_DeQueue@pReturnEvent:
   746                           	opt stack 0
   747  00006E                     ___lwdiv@divisor:
   748                           	opt stack 0
   749  00006E                     ES_EnQueueFIFO@Event2Add:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0xE
   753  00006E                     	ds	2
   754  000070                     ??_ES_DeQueue:
   755  000070                     ___lwdiv@quotient:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x10
   759  000070                     	ds	1
   760  000071                     ??_ES_EnQueueFIFO:
   761                           
   762                           ; 1 bytes @ 0x11
   763  000071                     	ds	1
   764  000072                     ES_DeQueue@SaveCrit:
   765                           	opt stack 0
   766  000072                     ___lwdiv@counter:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x12
   770  000072                     	ds	1
   771  000073                     ES_DeQueue@NumLeft:
   772                           	opt stack 0
   773  000073                     HSV_to_RGB@HSV_Value:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x13
   777  000073                     	ds	1
   778  000074                     ES_EnQueueFIFO@SaveCrit:
   779                           	opt stack 0
   780  000074                     ES_DeQueue@pThisQueue:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x14
   784  000074                     	ds	1
   785  000075                     ??_HSV_to_RGB:
   786  000075                     ThinkingPattern@hue:
   787                           	opt stack 0
   788  000075                     ES_EnQueueFIFO@pThisQueue:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x15
   792  000075                     	ds	1
   793  000076                     ThinkingPattern@pixelHSV:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x16
   797  000076                     	ds	1
   798  000077                     ES_PostToService@TheEvent:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x17
   802  000077                     	ds	1
   803  000078                     _ThinkingPattern$665:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x18
   807  000078                     	ds	2
   808  00007A                     ??_ES_PostToService:
   809  00007A                     _ThinkingPattern$666:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x1A
   813  00007A                     	ds	2
   814  00007C                     ES_PostToService@WhichService:
   815                           	opt stack 0
   816  00007C                     ThinkingPattern@sat:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x1C
   820  00007C                     	ds	1
   821  00007D                     ThinkingPattern@val:
   822                           	opt stack 0
   823  00007D                     InitPatternControlService@ThisEvent:
   824                           	opt stack 0
   825  00007D                     PostPatternControlService@ThisEvent:
   826                           	opt stack 0
   827  00007D                     InitSPI32ControlService@ThisEvent:
   828                           	opt stack 0
   829  00007D                     PostSPI32ControlService@ThisEvent:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x1D
   833  00007D                     	ds	1
   834  00007E                     ThinkingPattern@x:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1E
   838  00007E                     	ds	1
   839  00007F                     ThinkingPattern@head:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x1F
   843  00007F                     	ds	1
   844  000080                     ??_ES_Timer_Tick_Resp:
   845  000080                     ?_UpdatePattern:
   846                           	opt stack 0
   847  000080                     InitPatternControlService@Priority:
   848                           	opt stack 0
   849  000080                     InitSPI32ControlService@Priority:
   850                           	opt stack 0
   851  000080                     SPI32_TransmitFrames@framePointer:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x20
   855  000080                     	ds	1
   856  000081                     ES_Initialize@NewRate:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x21
   860  000081                     	ds	1
   861  000082                     UpdatePattern@patternID:
   862                           	opt stack 0
   863  000082                     SPI32_TransmitFrames@numFrames:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x22
   867  000082                     	ds	1
   868  000083                     ES_Initialize@i:
   869                           	opt stack 0
   870  000083                     UpdatePattern@i:
   871                           	opt stack 0
   872  000083                     SPI32_TransmitFrames@transmitEvent:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x23
   876  000083                     	ds	1
   877  000084                     UpdatePattern@i_653:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x24
   881  000084                     	ds	9
   882  00008D                     HSV_to_RGB@h:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x2D
   886  00008D                     	ds	2
   887  00008F                     HSV_to_RGB@region:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x2F
   891  00008F                     	ds	2
   892  000091                     HSV_to_RGB@fpart:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x31
   896  000091                     	ds	2
   897  000093                     HSV_to_RGB@r:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x33
   901  000093                     	ds	2
   902  000095                     HSV_to_RGB@g:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x35
   906  000095                     	ds	2
   907  000097                     HSV_to_RGB@b:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x37
   911  000097                     	ds	2
   912  000099                     HSV_to_RGB@q:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x39
   916  000099                     	ds	2
   917  00009B                     HSV_to_RGB@t:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x3B
   921  00009B                     	ds	2
   922  00009D                     _HSV_to_RGB$1433:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x3D
   926  00009D                     	ds	2
   927  00009F                     HSV_to_RGB@s:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x3F
   931  00009F                     	ds	2
   932  0000A1                     HSV_to_RGB@p:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x41
   936  0000A1                     	ds	2
   937  0000A3                     HSV_to_RGB@v:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x43
   941  0000A3                     	ds	2
   942  0000A5                     DotStar_Show@patternPointer:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x45
   946  0000A5                     	ds	2
   947  0000A7                     ??_DotStar_Show:
   948                           
   949                           ; 1 bytes @ 0x47
   950  0000A7                     	ds	18
   951  0000B9                     DotStar_Show@i:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x59
   955  0000B9                     	ds	1
   956  0000BA                     ?_RunPatternControlService:
   957                           	opt stack 0
   958  0000BA                     ?_RunSPI32ControlService:
   959                           	opt stack 0
   960  0000BA                     RunPatternControlService@ThisEvent:
   961                           	opt stack 0
   962  0000BA                     RunSPI32ControlService@ThisEvent:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x5A
   966  0000BA                     	ds	3
   967  0000BD                     ??_RunSPI32ControlService:
   968  0000BD                     RunPatternControlService@ReturnEvent:
   969                           	opt stack 0
   970                           
   971                           ; 3 bytes @ 0x5D
   972  0000BD                     	ds	3
   973  0000C0                     RunPatternControlService@testEvent:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x60
   977  0000C0                     	ds	4
   978  0000C4                     RunSPI32ControlService@ReturnEvent:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x64
   982  0000C4                     	ds	3
   983  0000C7                     ??_ES_Run:
   984                           
   985                           ; 1 bytes @ 0x67
   986  0000C7                     	ds	4
   987  0000CB                     ES_Run@HighestPrior:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x6B
   991  0000CB                     	ds	1
   992  0000CC                     main@ErrorType:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x6C
   996  0000CC                     	ds	1
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1h	equ	0xFE2
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	cstackCOMRAM
  1008  000001                     __pcstackCOMRAM:
  1009                           	opt stack 0
  1010  000001                     ?i2___awmod:
  1011                           	opt stack 0
  1012  000001                     i2___awmod@dividend:
  1013                           	opt stack 0
  1014  000001                     i2SPI32_SendFrame@newFrame:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x0
  1018  000001                     	ds	2
  1019  000003                     i2___awmod@divisor:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x2
  1023  000003                     	ds	2
  1024  000005                     ??i2_SPI32_SendFrame:
  1025  000005                     i2___awmod@counter:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x4
  1029  000005                     	ds	1
  1030  000006                     i2___awmod@sign:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x5
  1034  000006                     	ds	1
  1035  000007                     ?i2___wmul:
  1036                           	opt stack 0
  1037  000007                     i2___wmul@multiplier:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x6
  1041  000007                     	ds	2
  1042  000009                     i2___wmul@multiplicand:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x8
  1046  000009                     	ds	2
  1047  00000B                     i2___wmul@product:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0xA
  1051  00000B                     	ds	2
  1052  00000D                     i2ES_EnQueueFIFO@pBlock:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0xC
  1056  00000D                     	ds	2
  1057  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0xE
  1061  00000F                     	ds	3
  1062  000012                     ??i2_ES_EnQueueFIFO:
  1063                           
  1064                           ; 1 bytes @ 0x11
  1065  000012                     	ds	3
  1066  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x14
  1070  000015                     	ds	1
  1071  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x15
  1075  000016                     	ds	2
  1076  000018                     i2ES_PostToService@TheEvent:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x17
  1080  000018                     	ds	3
  1081  00001B                     ??i2_ES_PostToService:
  1082                           
  1083                           ; 1 bytes @ 0x1A
  1084  00001B                     	ds	2
  1085  00001D                     i2ES_PostToService@WhichService:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x1C
  1089  00001D                     	ds	1
  1090  00001E                     i2PostSPI32ControlService@ThisEvent:
  1091                           	opt stack 0
  1092                           
  1093                           ; 3 bytes @ 0x1D
  1094  00001E                     	ds	3
  1095  000021                     SPI32_EOTResponse@EOTevent:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x20
  1099  000021                     	ds	3
  1100  000024                     ??_ISR:
  1101                           
  1102                           ; 1 bytes @ 0x23
  1103  000024                     	ds	16
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1h	equ	0xFE2
  1112                           fsr1l	equ	0xFE1
  1113                           
  1114 ;;
  1115 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1116 ;;
  1117 ;; *************** function _main *****************
  1118 ;; Defined at:
  1119 ;;		line 25 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  ErrorType       1  108[BANK0 ] enum E15647
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2  552[None  ] int 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1133 ;;      Params:         0       0       0       0
  1134 ;;      Locals:         0       1       0       0
  1135 ;;      Temps:          0       0       0       0
  1136 ;;      Totals:         0       1       0       0
  1137 ;;Total ram usage:        1 bytes
  1138 ;; Hardware stack levels required when called:   15
  1139 ;; This function calls:
  1140 ;;		_ES_Initialize
  1141 ;;		_ES_Run
  1142 ;;		_printf
  1143 ;; This function is called by:
  1144 ;;		Startup code after reset
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text0
  1149  001782                     __ptext0:
  1150                           	opt stack 0
  1151  001782                     _main:
  1152                           	opt stack 16
  1153                           
  1154                           ;main.c: 28: IRCF0 = 1;
  1155                           
  1156                           ;incstack = 0
  1157  001782  88D3               	bsf	4051,4,c	;volatile
  1158                           
  1159                           ;main.c: 29: IRCF1 = 1;
  1160  001784  8AD3               	bsf	4051,5,c	;volatile
  1161                           
  1162                           ;main.c: 30: IRCF2 = 1;
  1163  001786  8CD3               	bsf	4051,6,c	;volatile
  1164                           
  1165                           ;main.c: 31: SCS1 = 1;
  1166  001788  82D3               	bsf	4051,1,c	;volatile
  1167                           
  1168                           ;main.c: 39: ES_Return_t ErrorType;
  1169                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1170  00178A  0E9C               	movlw	156
  1171  00178C  0100               	movlb	0	; () banked
  1172  00178E  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1173  001790  0E3F               	movlw	63
  1174  001792  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1175  001794  EC70  F008         	call	_ES_Initialize	;wreg free
  1176  001798  0100               	movlb	0	; () banked
  1177  00179A  6FCC               	movwf	main@ErrorType& (0+255),b
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 56: if ( ErrorType == Success ) {
  1181  00179C  0100               	movlb	0	; () banked
  1182  00179E  51CC               	movf	main@ErrorType& (0+255),w,b
  1183  0017A0  0100               	movlb	0	; () banked
  1184  0017A2  A4D8               	btfss	status,2,c
  1185  0017A4  D029               	goto	l3138
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 58: ErrorType = ES_Run();
  1189  0017A6  ECF6  F007         	call	_ES_Run	;wreg free
  1190  0017AA  0100               	movlb	0	; () banked
  1191  0017AC  6FCC               	movwf	main@ErrorType& (0+255),b
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;main.c: 60: }
  1195                           ;main.c: 62: switch (ErrorType){
  1196  0017AE  D024               	goto	l3138
  1197  0017B0                     l3128:
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;main.c: 64: printf("Failed on attempt to Post\n");
  1201  0017B0  0E64               	movlw	low STR_1
  1202  0017B2  0100               	movlb	0	; () banked
  1203  0017B4  6F60               	movwf	printf@f& (0+255),b
  1204  0017B6  0E03               	movlw	high STR_1
  1205  0017B8  0100               	movlb	0	; () banked
  1206  0017BA  6F61               	movwf	(printf@f+1)& (0+255),b
  1207  0017BC  ECE5  F00E         	call	_printf	;wreg free
  1208                           
  1209                           ;main.c: 65: break;
  1210  0017C0  D027               	goto	l560
  1211  0017C2                     l3130:
  1212                           
  1213                           ;main.c: 67: printf("Failed on NULL pointer\n");
  1214  0017C2  0E7F               	movlw	low STR_2
  1215  0017C4  0100               	movlb	0	; () banked
  1216  0017C6  6F60               	movwf	printf@f& (0+255),b
  1217  0017C8  0E03               	movlw	high STR_2
  1218  0017CA  0100               	movlb	0	; () banked
  1219  0017CC  6F61               	movwf	(printf@f+1)& (0+255),b
  1220  0017CE  ECE5  F00E         	call	_printf	;wreg free
  1221                           
  1222                           ;main.c: 68: break;
  1223  0017D2  D01E               	goto	l560
  1224  0017D4                     l3132:
  1225                           
  1226                           ;main.c: 70: printf("Failed Initialization\n");
  1227  0017D4  0E97               	movlw	low STR_3
  1228  0017D6  0100               	movlb	0	; () banked
  1229  0017D8  6F60               	movwf	printf@f& (0+255),b
  1230  0017DA  0E03               	movlw	high STR_3
  1231  0017DC  0100               	movlb	0	; () banked
  1232  0017DE  6F61               	movwf	(printf@f+1)& (0+255),b
  1233  0017E0  ECE5  F00E         	call	_printf	;wreg free
  1234                           
  1235                           ;main.c: 71: break;
  1236  0017E4  D015               	goto	l560
  1237  0017E6                     l3134:
  1238                           
  1239                           ;main.c: 73: printf("Other Failure\n");
  1240  0017E6  0EAE               	movlw	low STR_4
  1241  0017E8  0100               	movlb	0	; () banked
  1242  0017EA  6F60               	movwf	printf@f& (0+255),b
  1243  0017EC  0E03               	movlw	high STR_4
  1244  0017EE  0100               	movlb	0	; () banked
  1245  0017F0  6F61               	movwf	(printf@f+1)& (0+255),b
  1246  0017F2  ECE5  F00E         	call	_printf	;wreg free
  1247                           
  1248                           ;main.c: 75: }
  1249                           
  1250                           ;main.c: 74: break;
  1251  0017F6  D00C               	goto	l560
  1252  0017F8                     l3138:
  1253  0017F8  0100               	movlb	0	; () banked
  1254  0017FA  51CC               	movf	main@ErrorType& (0+255),w,b
  1255                           
  1256                           ; Switch size 1, requested type "space"
  1257                           ; Number of cases is 3, Range of values is 1 to 5
  1258                           ; switch strategies available:
  1259                           ; Name         Instructions Cycles
  1260                           ; simple_byte           10     6 (average)
  1261                           ;	Chosen strategy is simple_byte
  1262  0017FC  0A01               	xorlw	1	; case 1
  1263  0017FE  B4D8               	btfsc	status,2,c
  1264  001800  D7D7               	goto	l3128
  1265  001802  0A02               	xorlw	2	; case 3
  1266  001804  B4D8               	btfsc	status,2,c
  1267  001806  D7DD               	goto	l3130
  1268  001808  0A06               	xorlw	6	; case 5
  1269  00180A  B4D8               	btfsc	status,2,c
  1270  00180C  D7E3               	goto	l3132
  1271  00180E  D7EB               	goto	l3134
  1272  001810                     l560:
  1273                           
  1274                           ;main.c: 77: ;
  1275  001810  D7FF               	goto	l560
  1276  001812                     __end_of_main:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1h	equ	0xFE2
  1286                           fsr1l	equ	0xFE1
  1287                           status	equ	0xFD8
  1288                           
  1289 ;; *************** function _printf *****************
  1290 ;; Defined at:
  1291 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1294 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  tmpval          4    0        struct .
  1297 ;;  cp              3    0        PTR const unsigned char 
  1298 ;;  ap              2    2[BANK0 ] PTR void [1]
  1299 ;;		 -> ?_printf(2), 
  1300 ;;  len             2    0        unsigned int 
  1301 ;;  val             2    0        unsigned int 
  1302 ;;  c               1    4[BANK0 ] char 
  1303 ;;  flag            1    0        unsigned char 
  1304 ;;  prec            1    0        char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  2    0[BANK0 ] int 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1314 ;;      Params:         0       2       0       0
  1315 ;;      Locals:         0       3       0       0
  1316 ;;      Temps:          0       0       0       0
  1317 ;;      Totals:         0       5       0       0
  1318 ;;Total ram usage:        5 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    7
  1321 ;; This function calls:
  1322 ;;		_putch
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text1
  1329  001DCA                     __ptext1:
  1330                           	opt stack 0
  1331  001DCA                     _printf:
  1332                           	opt stack 23
  1333                           
  1334                           ;doprnt.c: 466: va_list ap;
  1335                           ;doprnt.c: 499: signed char c;
  1336                           ;doprnt.c: 506: signed char prec;
  1337                           ;doprnt.c: 508: unsigned char flag;
  1338                           ;doprnt.c: 523: union {
  1339                           ;doprnt.c: 524: unsigned long vd;
  1340                           ;doprnt.c: 525: double integ;
  1341                           ;doprnt.c: 526: } tmpval;
  1342                           ;doprnt.c: 528: unsigned int val;
  1343                           ;doprnt.c: 529: unsigned len;
  1344                           ;doprnt.c: 530: const char * cp;
  1345                           ;doprnt.c: 533: *ap = __va_start();
  1346                           
  1347                           ;incstack = 0
  1348  001DCA  0E62               	movlw	low (?_printf+2)
  1349  001DCC  0100               	movlb	0	; () banked
  1350  001DCE  6F62               	movwf	printf@ap& (0+255),b
  1351  001DD0  0E00               	movlw	high (?_printf+2)
  1352  001DD2  0100               	movlb	0	; () banked
  1353  001DD4  6F63               	movwf	(printf@ap+1)& (0+255),b
  1354                           
  1355                           ;doprnt.c: 536: while(c = *f++) {
  1356  001DD6  D004               	goto	l2968
  1357  001DD8                     l2966:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;doprnt.c: 540: {
  1361                           ;doprnt.c: 541: (putch(c) );
  1362  001DD8  0100               	movlb	0	; () banked
  1363  001DDA  5164               	movf	printf@c& (0+255),w,b
  1364  001DDC  ECCB  F00F         	call	_putch
  1365  001DE0                     l2968:
  1366  001DE0  C060  FFF6         	movff	printf@f,tblptrl
  1367  001DE4  C061  FFF7         	movff	printf@f+1,tblptrh
  1368  001DE8  0100               	movlb	0	; () banked
  1369  001DEA  4B60               	infsnz	printf@f& (0+255),f,b
  1370  001DEC  2B61               	incf	(printf@f+1)& (0+255),f,b
  1371  001DEE                     	if	0	;tblptru may be non-zero
  1372  001DEE                     	endif
  1373  001DEE                     	if	0	;tblptru may be non-zero
  1374  001DEE                     	endif
  1375  001DEE  0008               	tblrd		*
  1376  001DF0  CFF5 F064          	movff	tablat,printf@c
  1377  001DF4  0100               	movlb	0	; () banked
  1378  001DF6  5164               	movf	printf@c& (0+255),w,b
  1379  001DF8  B4D8               	btfsc	status,2,c
  1380  001DFA  0012               	return	
  1381  001DFC  D7ED               	goto	l2966
  1382  001DFE                     __end_of_printf:
  1383                           	opt stack 0
  1384                           tblptru	equ	0xFF8
  1385                           tblptrh	equ	0xFF7
  1386                           tblptrl	equ	0xFF6
  1387                           tablat	equ	0xFF5
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1h	equ	0xFE2
  1392                           fsr1l	equ	0xFE1
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _putch *****************
  1396 ;; Defined at:
  1397 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  c               1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  c               1    0[COMRAM] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1411 ;;      Params:         0       0       0       0
  1412 ;;      Locals:         0       0       0       0
  1413 ;;      Temps:          0       0       0       0
  1414 ;;      Totals:         0       0       0       0
  1415 ;;Total ram usage:        0 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    6
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_printf
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text2
  1426  001F96                     __ptext2:
  1427                           	opt stack 0
  1428  001F96                     _putch:
  1429                           	opt stack 23
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;incstack = 0
  1433  001F96  0012               	return		;funcret
  1434  001F98                     __end_of_putch:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postdec1	equ	0xFE5
  1443                           fsr1h	equ	0xFE2
  1444                           fsr1l	equ	0xFE1
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _ES_Run *****************
  1448 ;; Defined at:
  1449 ;;		line 277 in file "ES_Framework.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  HighestPrior    1  107[BANK0 ] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      enum E15495
  1456 ;; Registers used:
  1457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1463 ;;      Params:         0       0       0       0
  1464 ;;      Locals:         0       1       0       0
  1465 ;;      Temps:          0       4       0       0
  1466 ;;      Totals:         0       5       0       0
  1467 ;;Total ram usage:        5 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:   14
  1470 ;; This function calls:
  1471 ;;		_ES_CheckUserEvents
  1472 ;;		_ES_DeQueue
  1473 ;;		_ES_GetMSBitSet
  1474 ;;		_RunPatternControlService
  1475 ;;		_RunSPI32ControlService
  1476 ;;		__HW_Process_Pending_Ints
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text3
  1483  000FEC                     __ptext3:
  1484                           	opt stack 0
  1485  000FEC                     _ES_Run:
  1486                           	opt stack 16
  1487                           
  1488                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1489                           
  1490                           ;incstack = 0
  1491                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1492                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1493                           ;ES_Framework.c: 282: while(1){
  1494  000FEC  D06B               	goto	l2946
  1495  000FEE                     l2934:
  1496                           
  1497                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1498  000FEE  C0DA  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1499  000FF2  C0DB  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1500  000FF6  EC1E  F00B         	call	_ES_GetMSBitSet	;wreg free
  1501  000FFA  0100               	movlb	0	; () banked
  1502  000FFC  6FCB               	movwf	ES_Run@HighestPrior& (0+255),b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1506  000FFE  0100               	movlb	0	; () banked
  1507  001000  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1508  001002  0D03               	mullw	3
  1509  001004  0E58               	movlw	low _EventQueues
  1510  001006  24F3               	addwf	prodl,w,c
  1511  001008  6EF6               	movwf	tblptrl,c
  1512  00100A  0E03               	movlw	high _EventQueues
  1513  00100C  20F4               	addwfc	prodh,w,c
  1514  00100E  6EF7               	movwf	tblptrh,c
  1515  001010                     	if	0	;There are less than 3 active tblptr bytes
  1516  001010                     	endif
  1517  001010  0009               	tblrd		*+
  1518  001012  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1519  001016  000A               	tblrd		*-
  1520  001018  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1521  00101C  0EF5               	movlw	low ES_Run@ThisEvent
  1522  00101E  0100               	movlb	0	; () banked
  1523  001020  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1524  001022  0E00               	movlw	high ES_Run@ThisEvent
  1525  001024  0100               	movlb	0	; () banked
  1526  001026  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1527  001028  ECC1  F005         	call	_ES_DeQueue	;wreg free
  1528  00102C  0900               	iorlw	0
  1529  00102E  A4D8               	btfss	status,2,c
  1530  001030  D01F               	goto	l2940
  1531                           
  1532                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1533  001032  0100               	movlb	0	; () banked
  1534  001034  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1535  001036  0D02               	mullw	2
  1536  001038  0E01               	movlw	low _BitNum2SetMask
  1537  00103A  24F3               	addwf	prodl,w,c
  1538  00103C  6EF6               	movwf	tblptrl,c
  1539  00103E  0E03               	movlw	high _BitNum2SetMask
  1540  001040  20F4               	addwfc	prodh,w,c
  1541  001042  6EF7               	movwf	tblptrh,c
  1542  001044                     	if	0	;There are less than 3 active tblptr bytes
  1543  001044                     	endif
  1544  001044  0009               	tblrd		*+
  1545  001046  CFF5 F0C7          	movff	tablat,??_ES_Run
  1546  00104A  0009               	tblrd		*+
  1547  00104C  CFF5 F0C8          	movff	tablat,??_ES_Run+1
  1548  001050  0100               	movlb	0	; () banked
  1549  001052  1DC7               	comf	??_ES_Run& (0+255),w,b
  1550  001054  0100               	movlb	0	; () banked
  1551  001056  6FC9               	movwf	(??_ES_Run+2)& (0+255),b
  1552  001058  0100               	movlb	0	; () banked
  1553  00105A  1DC8               	comf	(??_ES_Run+1)& (0+255),w,b
  1554  00105C  0100               	movlb	0	; () banked
  1555  00105E  6FCA               	movwf	(??_ES_Run+3)& (0+255),b
  1556  001060  0100               	movlb	0	; () banked
  1557  001062  51C9               	movf	(??_ES_Run+2)& (0+255),w,b
  1558  001064  0100               	movlb	0	; () banked
  1559  001066  17DA               	andwf	_Ready& (0+255),f,b
  1560  001068  0100               	movlb	0	; () banked
  1561  00106A  51CA               	movf	(??_ES_Run+3)& (0+255),w,b
  1562  00106C  0100               	movlb	0	; () banked
  1563  00106E  17DB               	andwf	(_Ready+1)& (0+255),f,b
  1564  001070                     l2940:
  1565                           
  1566                           ;ES_Framework.c: 291: }
  1567                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1568  001070  C0F5  F0BA         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1569  001074  C0F6  F0BB         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1570  001078  C0F7  F0BC         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1571  00107C  0100               	movlb	0	; () banked
  1572  00107E  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1573  001080  0D04               	mullw	4
  1574  001082  0E02               	movlw	2
  1575  001084  26F3               	addwf	prodl,f,c
  1576  001086  0E00               	movlw	0
  1577  001088  22F4               	addwfc	prodh,f,c
  1578  00108A  0E50               	movlw	low _ServDescList
  1579  00108C  24F3               	addwf	prodl,w,c
  1580  00108E  6EF6               	movwf	tblptrl,c
  1581  001090  0E03               	movlw	high _ServDescList
  1582  001092  20F4               	addwfc	prodh,w,c
  1583  001094  6EF7               	movwf	tblptrh,c
  1584  001096                     	if	0	;There are less than 3 active tblptr bytes
  1585  001096                     	endif
  1586  001096  D801               	call	u1898
  1587  001098  D00C               	goto	u1899
  1588  00109A                     u1898:
  1589  00109A  0005               	push	
  1590  00109C  6EFA               	movwf	pclath,c
  1591  00109E  0009               	tblrd		*+
  1592  0010A0  50F5               	movf	tablat,w,c
  1593  0010A2  6EFD               	movwf	tosl,c
  1594  0010A4  0009               	tblrd		*+
  1595  0010A6  50F5               	movf	tablat,w,c
  1596  0010A8  6EFE               	movwf	tosh,c
  1597  0010AA  50F8               	movf	tblptru,w,c
  1598  0010AC  6EFF               	movwf	tosu,c
  1599  0010AE  50FA               	movf	pclath,w,c
  1600  0010B0  0012               	return		;indir
  1601  0010B2                     u1899:
  1602  0010B2  0EBA               	movlw	low ?_RunSPI32ControlService
  1603  0010B4  6ED9               	movwf	fsr2l,c
  1604  0010B6  0E00               	movlw	high ?_RunSPI32ControlService
  1605  0010B8  6EDA               	movwf	fsr2h,c
  1606  0010BA  50DF               	movf	indf2,w,c
  1607  0010BC  B4D8               	btfsc	status,2,c
  1608  0010BE  D002               	goto	l2946
  1609                           
  1610                           ;ES_Framework.c: 293: return FailedRun;
  1611  0010C0  0E02               	movlw	2
  1612  0010C2  0012               	return	
  1613  0010C4                     l2946:
  1614  0010C4  EC8C  F00F         	call	__HW_Process_Pending_Ints	;wreg free
  1615  0010C8  0900               	iorlw	0
  1616  0010CA  B4D8               	btfsc	status,2,c
  1617  0010CC  D006               	goto	l2950
  1618  0010CE  0100               	movlb	0	; () banked
  1619  0010D0  51DA               	movf	_Ready& (0+255),w,b
  1620  0010D2  0100               	movlb	0	; () banked
  1621  0010D4  11DB               	iorwf	(_Ready+1)& (0+255),w,b
  1622  0010D6  A4D8               	btfss	status,2,c
  1623  0010D8  D78A               	goto	l2934
  1624  0010DA                     l2950:
  1625                           
  1626                           ;ES_Framework.c: 294: }
  1627                           ;ES_Framework.c: 295: }
  1628                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1629  0010DA  EC0B  F00E         	call	_ES_CheckUserEvents	;wreg free
  1630  0010DE  D7F2               	goto	l2946
  1631  0010E0                     __end_of_ES_Run:
  1632                           	opt stack 0
  1633                           tosu	equ	0xFFF
  1634                           tosh	equ	0xFFE
  1635                           tosl	equ	0xFFD
  1636                           pclath	equ	0xFFA
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           prodh	equ	0xFF4
  1642                           prodl	equ	0xFF3
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1h	equ	0xFE2
  1647                           fsr1l	equ	0xFE1
  1648                           indf2	equ	0xFDF
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function __HW_Process_Pending_Ints *****************
  1654 ;; Defined at:
  1655 ;;		line 207 in file "ES_Port.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      unsigned char 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1669 ;;      Params:         0       0       0       0
  1670 ;;      Locals:         0       0       0       0
  1671 ;;      Temps:          0       0       0       0
  1672 ;;      Totals:         0       0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:   11
  1676 ;; This function calls:
  1677 ;;		_ES_Timer_Tick_Resp
  1678 ;; This function is called by:
  1679 ;;		_ES_Run
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text4
  1684  001F18                     __ptext4:
  1685                           	opt stack 0
  1686  001F18                     __HW_Process_Pending_Ints:
  1687                           	opt stack 18
  1688                           
  1689                           ;ES_Port.c: 209: while (TickCount > 0)
  1690                           
  1691                           ;incstack = 0
  1692  001F18  D004               	goto	l2764
  1693  001F1A                     l2760:
  1694                           
  1695                           ;ES_Port.c: 210: {
  1696                           ;ES_Port.c: 212: ES_Timer_Tick_Resp();
  1697  001F1A  ECE8  F006         	call	_ES_Timer_Tick_Resp	;wreg free
  1698                           
  1699                           ;ES_Port.c: 213: TickCount--;
  1700  001F1E  0100               	movlb	0	; () banked
  1701  001F20  07E8               	decf	_TickCount& (0+255),f,b	;volatile
  1702  001F22                     l2764:
  1703  001F22  0100               	movlb	0	; () banked
  1704  001F24  51E8               	movf	_TickCount& (0+255),w,b	;volatile
  1705  001F26  A4D8               	btfss	status,2,c
  1706  001F28  D7F8               	goto	l2760
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;ES_Port.c: 214: }
  1710                           ;ES_Port.c: 216: return 1;
  1711                           
  1712                           ; BSR set to: 0
  1713  001F2A  0E01               	movlw	1
  1714  001F2C  0012               	return	
  1715  001F2E                     __end_of__HW_Process_Pending_Ints:
  1716                           	opt stack 0
  1717                           tosu	equ	0xFFF
  1718                           tosh	equ	0xFFE
  1719                           tosl	equ	0xFFD
  1720                           pclath	equ	0xFFA
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           fsr1h	equ	0xFE2
  1731                           fsr1l	equ	0xFE1
  1732                           indf2	equ	0xFDF
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _ES_Timer_Tick_Resp *****************
  1738 ;; Defined at:
  1739 ;;		line 284 in file "ES_Timers.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1753 ;;      Params:         0       0       0       0
  1754 ;;      Locals:         0       0       0       0
  1755 ;;      Temps:          0       4       0       0
  1756 ;;      Totals:         0       4       0       0
  1757 ;;Total ram usage:        4 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:   10
  1760 ;; This function calls:
  1761 ;;		Absolute function
  1762 ;;		_ES_GetMSBitSet
  1763 ;;		_PostPatternControlService
  1764 ;;		_PostSPI32ControlService
  1765 ;; This function is called by:
  1766 ;;		__HW_Process_Pending_Ints
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text5
  1771  000DD0                     __ptext5:
  1772                           	opt stack 0
  1773  000DD0                     _ES_Timer_Tick_Resp:
  1774                           	opt stack 18
  1775                           
  1776                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1777                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1778                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1779                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;incstack = 0
  1783  000DD0  0100               	movlb	0	; () banked
  1784  000DD2  51DC               	movf	_TMR_ActiveFlags& (0+255),w,b
  1785  000DD4  0100               	movlb	0	; () banked
  1786  000DD6  11DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1787  000DD8  B4D8               	btfsc	status,2,c
  1788  000DDA  0012               	return	
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;ES_Timers.c: 291: {
  1792                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1793  000DDC  C0DC  F0D4         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1794  000DE0  C0DD  F0D5         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1795  000DE4                     l2604:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1799  000DE4  C0D4  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1800  000DE8  C0D5  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1801  000DEC  EC1E  F00B         	call	_ES_GetMSBitSet	;wreg free
  1802  000DF0  0100               	movlb	0	; () banked
  1803  000DF2  6FDE               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1807  000DF4  0100               	movlb	0	; () banked
  1808  000DF6  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1809  000DF8  0D02               	mullw	2
  1810  000DFA  0E00               	movlw	low _TMR_TimerArray
  1811  000DFC  24F3               	addwf	prodl,w,c
  1812  000DFE  6ED9               	movwf	fsr2l,c
  1813  000E00  0E01               	movlw	high _TMR_TimerArray
  1814  000E02  20F4               	addwfc	prodh,w,c
  1815  000E04  6EDA               	movwf	fsr2h,c
  1816  000E06  06DE               	decf	postinc2,f,c
  1817  000E08  0E00               	movlw	0
  1818  000E0A  5ADD               	subwfb	postdec2,f,c
  1819  000E0C  50DE               	movf	postinc2,w,c
  1820  000E0E  10DE               	iorwf	postinc2,w,c
  1821  000E10  A4D8               	btfss	status,2,c
  1822  000E12  D043               	goto	l2616
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;ES_Timers.c: 299: {
  1826                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1827  000E14  0E03               	movlw	3
  1828  000E16  0100               	movlb	0	; () banked
  1829  000E18  6FD1               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1833  000E1A  C0DE  F0D2         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1834  000E1E  0100               	movlb	0	; () banked
  1835  000E20  6BD3               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1839  000E22  C0D1  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1840  000E26  C0D2  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1841  000E2A  C0D3  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1842  000E2E  0100               	movlb	0	; () banked
  1843  000E30  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1844  000E32  0D02               	mullw	2
  1845  000E34  0E21               	movlw	low _Timer2PostFunc
  1846  000E36  24F3               	addwf	prodl,w,c
  1847  000E38  6EF6               	movwf	tblptrl,c
  1848  000E3A  0E03               	movlw	high _Timer2PostFunc
  1849  000E3C  20F4               	addwfc	prodh,w,c
  1850  000E3E  6EF7               	movwf	tblptrh,c
  1851  000E40                     	if	0	;There are less than 3 active tblptr bytes
  1852  000E40                     	endif
  1853  000E40  D801               	call	u1538
  1854  000E42  D00C               	goto	l2614
  1855  000E44                     u1538:
  1856  000E44  0005               	push	
  1857  000E46  6EFA               	movwf	pclath,c
  1858  000E48  0009               	tblrd		*+
  1859  000E4A  50F5               	movf	tablat,w,c
  1860  000E4C  6EFD               	movwf	tosl,c
  1861  000E4E  0009               	tblrd		*+
  1862  000E50  50F5               	movf	tablat,w,c
  1863  000E52  6EFE               	movwf	tosh,c
  1864  000E54  50F8               	movf	tblptru,w,c
  1865  000E56  6EFF               	movwf	tosu,c
  1866  000E58  50FA               	movf	pclath,w,c
  1867  000E5A  0012               	return		;indir
  1868  000E5C                     l2614:
  1869                           
  1870                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1871  000E5C  0100               	movlb	0	; () banked
  1872  000E5E  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1873  000E60  0D02               	mullw	2
  1874  000E62  0E01               	movlw	low _BitNum2SetMask
  1875  000E64  24F3               	addwf	prodl,w,c
  1876  000E66  6EF6               	movwf	tblptrl,c
  1877  000E68  0E03               	movlw	high _BitNum2SetMask
  1878  000E6A  20F4               	addwfc	prodh,w,c
  1879  000E6C  6EF7               	movwf	tblptrh,c
  1880  000E6E                     	if	0	;There are less than 3 active tblptr bytes
  1881  000E6E                     	endif
  1882  000E6E  0009               	tblrd		*+
  1883  000E70  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  1884  000E74  0009               	tblrd		*+
  1885  000E76  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1886  000E7A  0100               	movlb	0	; () banked
  1887  000E7C  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1888  000E7E  0100               	movlb	0	; () banked
  1889  000E80  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1890  000E82  0100               	movlb	0	; () banked
  1891  000E84  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1892  000E86  0100               	movlb	0	; () banked
  1893  000E88  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1894  000E8A  0100               	movlb	0	; () banked
  1895  000E8C  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1896  000E8E  0100               	movlb	0	; () banked
  1897  000E90  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1898  000E92  0100               	movlb	0	; () banked
  1899  000E94  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1900  000E96  0100               	movlb	0	; () banked
  1901  000E98  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1902  000E9A                     l2616:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;ES_Timers.c: 306: }
  1906                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1907  000E9A  0100               	movlb	0	; () banked
  1908  000E9C  51DE               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1909  000E9E  0D02               	mullw	2
  1910  000EA0  0E01               	movlw	low _BitNum2SetMask
  1911  000EA2  24F3               	addwf	prodl,w,c
  1912  000EA4  6EF6               	movwf	tblptrl,c
  1913  000EA6  0E03               	movlw	high _BitNum2SetMask
  1914  000EA8  20F4               	addwfc	prodh,w,c
  1915  000EAA  6EF7               	movwf	tblptrh,c
  1916  000EAC                     	if	0	;There are less than 3 active tblptr bytes
  1917  000EAC                     	endif
  1918  000EAC  0009               	tblrd		*+
  1919  000EAE  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  1920  000EB2  0009               	tblrd		*+
  1921  000EB4  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1922  000EB8  0100               	movlb	0	; () banked
  1923  000EBA  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1924  000EBC  0100               	movlb	0	; () banked
  1925  000EBE  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1926  000EC0  0100               	movlb	0	; () banked
  1927  000EC2  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1928  000EC4  0100               	movlb	0	; () banked
  1929  000EC6  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1930  000EC8  0100               	movlb	0	; () banked
  1931  000ECA  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1932  000ECC  0100               	movlb	0	; () banked
  1933  000ECE  17D4               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1934  000ED0  0100               	movlb	0	; () banked
  1935  000ED2  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1936  000ED4  0100               	movlb	0	; () banked
  1937  000ED6  17D5               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1941  000ED8  0100               	movlb	0	; () banked
  1942  000EDA  51D4               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1943  000EDC  0100               	movlb	0	; () banked
  1944  000EDE  11D5               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1945  000EE0  B4D8               	btfsc	status,2,c
  1946  000EE2  0012               	return	
  1947  000EE4  D77F               	goto	l2604
  1948  000EE6                     __end_of_ES_Timer_Tick_Resp:
  1949                           	opt stack 0
  1950                           tosu	equ	0xFFF
  1951                           tosh	equ	0xFFE
  1952                           tosl	equ	0xFFD
  1953                           pclath	equ	0xFFA
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           prodh	equ	0xFF4
  1959                           prodl	equ	0xFF3
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           postdec1	equ	0xFE5
  1963                           fsr1h	equ	0xFE2
  1964                           fsr1l	equ	0xFE1
  1965                           indf2	equ	0xFDF
  1966                           postinc2	equ	0xFDE
  1967                           postdec2	equ	0xFDD
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _ES_GetMSBitSet *****************
  1973 ;; Defined at:
  1974 ;;		line 79 in file "ES_LookupTables.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  LoopCntr        1    9[BANK0 ] char 
  1979 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1980 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      unsigned char 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1990 ;;      Params:         0       2       0       0
  1991 ;;      Locals:         0       3       0       0
  1992 ;;      Temps:          0       5       0       0
  1993 ;;      Totals:         0      10       0       0
  1994 ;;Total ram usage:       10 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    6
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_ES_Run
  2001 ;;		_ES_Timer_Tick_Resp
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text6
  2006  00163C                     __ptext6:
  2007                           	opt stack 0
  2008  00163C                     _ES_GetMSBitSet:
  2009                           	opt stack 21
  2010                           
  2011                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2012                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2013                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;incstack = 0
  2017  00163C  0E80               	movlw	128
  2018  00163E  0100               	movlb	0	; () banked
  2019  001640  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2020                           
  2021                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2022  001642  0E03               	movlw	3
  2023  001644  0100               	movlb	0	; () banked
  2024  001646  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2025  001648                     l2472:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2029  001648  0100               	movlb	0	; () banked
  2030  00164A  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2031  00164C  D046               	goto	l2486
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2035                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2036                           ;ES_LookupTables.c: 91: 0x0F);
  2037                           
  2038                           ; BSR set to: 0
  2039                           
  2040                           ; BSR set to: 0
  2041  00164E  0100               	movlb	0	; () banked
  2042  001650  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2043  001652  0D04               	mullw	4
  2044  001654  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2045  001658  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2046  00165C  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2047  001660  0100               	movlb	0	; () banked
  2048  001662  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2049  001664  D004               	goto	u1394
  2050  001666                     u1395:
  2051  001666  0100               	movlb	0	; () banked
  2052  001668  90D8               	bcf	status,0,c
  2053  00166A  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2054  00166C  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2055  00166E                     u1394:
  2056  00166E  0100               	movlb	0	; () banked
  2057  001670  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2058  001672  D7F9               	goto	u1395
  2059  001674  0100               	movlb	0	; () banked
  2060  001676  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2061  001678  0B0F               	andlw	15
  2062  00167A  0100               	movlb	0	; () banked
  2063  00167C  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2067  00167E  0100               	movlb	0	; () banked
  2068  001680  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2069  001682  0100               	movlb	0	; () banked
  2070  001684  B4D8               	btfsc	status,2,c
  2071  001686  D026               	goto	l2482
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2075                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2076  001688  0EFF               	movlw	255
  2077  00168A  0100               	movlb	0	; () banked
  2078  00168C  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2079  00168E  0EFF               	movlw	255
  2080  001690  0100               	movlb	0	; () banked
  2081  001692  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2082  001694  0100               	movlb	0	; () banked
  2083  001696  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2084  001698  0100               	movlb	0	; () banked
  2085  00169A  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2086  00169C  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2087  00169E  0100               	movlb	0	; () banked
  2088  0016A0  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2089  0016A2  0100               	movlb	0	; () banked
  2090  0016A4  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2091  0016A6  0100               	movlb	0	; () banked
  2092  0016A8  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2093  0016AA  0100               	movlb	0	; () banked
  2094  0016AC  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2095  0016AE  0E41               	movlw	low _Nybble2MSBitNum
  2096  0016B0  0100               	movlb	0	; () banked
  2097  0016B2  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2098  0016B4  6EF6               	movwf	tblptrl,c
  2099  0016B6  0E03               	movlw	high _Nybble2MSBitNum
  2100  0016B8  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2101  0016BA  6EF7               	movwf	tblptrh,c
  2102  0016BC                     	if	0	;There are less than 3 active tblptr bytes
  2103  0016BC                     	endif
  2104  0016BC  0008               	tblrd		*
  2105  0016BE  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2106  0016C2  0100               	movlb	0	; () banked
  2107  0016C4  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2108  0016C6  0D04               	mullw	4
  2109  0016C8  50F3               	movf	prodl,w,c
  2110  0016CA  0100               	movlb	0	; () banked
  2111  0016CC  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2112  0016CE  0100               	movlb	0	; () banked
  2113  0016D0  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2114                           
  2115                           ;ES_LookupTables.c: 96: break;
  2116  0016D2  D003               	goto	l2486
  2117  0016D4                     l2482:
  2118                           
  2119                           ; BSR set to: 0
  2120  0016D4  0100               	movlb	0	; () banked
  2121  0016D6  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2122  0016D8  D7B7               	goto	l2472
  2123  0016DA                     l2486:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;ES_LookupTables.c: 97: }
  2127                           ;ES_LookupTables.c: 98: }
  2128                           ;ES_LookupTables.c: 99: return ReturnVal;
  2129  0016DA  0100               	movlb	0	; () banked
  2130  0016DC  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2131  0016DE  0012               	return	
  2132  0016E0                     __end_of_ES_GetMSBitSet:
  2133                           	opt stack 0
  2134                           tosu	equ	0xFFF
  2135                           tosh	equ	0xFFE
  2136                           tosl	equ	0xFFD
  2137                           pclath	equ	0xFFA
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           prodh	equ	0xFF4
  2143                           prodl	equ	0xFF3
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postdec1	equ	0xFE5
  2147                           fsr1h	equ	0xFE2
  2148                           fsr1l	equ	0xFE1
  2149                           indf2	equ	0xFDF
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _RunPatternControlService *****************
  2157 ;; Defined at:
  2158 ;;		line 157 in file "Pattern_ControlService.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  testEvent       3   96[BANK0 ] struct ES_Event_t
  2163 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  3   90[BANK0 ] struct ES_Event_t
  2166 ;; Registers used:
  2167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2173 ;;      Params:         0       3       0       0
  2174 ;;      Locals:         0       6       0       0
  2175 ;;      Temps:          0       0       0       0
  2176 ;;      Totals:         0       9       0       0
  2177 ;;Total ram usage:        9 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:   13
  2180 ;; This function calls:
  2181 ;;		_PausePattern
  2182 ;;		_PostPatternControlService
  2183 ;;		_ShowPattern
  2184 ;;		_StopPattern
  2185 ;; This function is called by:
  2186 ;;		_ES_Run
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text7
  2191  0012AE                     __ptext7:
  2192                           	opt stack 0
  2193  0012AE                     _RunPatternControlService:
  2194                           	opt stack 16
  2195                           
  2196                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2197                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;incstack = 0
  2201  0012AE  0E00               	movlw	0
  2202  0012B0  0100               	movlb	0	; () banked
  2203  0012B2  6FBD               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2204                           
  2205                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2206  0012B4  D04B               	goto	l2838
  2207  0012B6                     l2794:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2211  0012B6  0E02               	movlw	2
  2212  0012B8  0100               	movlb	0	; () banked
  2213  0012BA  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2214  0012BC  A4D8               	btfss	status,2,c
  2215  0012BE  D054               	goto	l326
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;Pattern_ControlService.c: 169: StopPattern();
  2219  0012C0  EC18  F00F         	call	_StopPattern	;wreg free
  2220                           
  2221                           ;Pattern_ControlService.c: 171: CurrentState = Pattern_Off;
  2222  0012C4  0E01               	movlw	1
  2223  0012C6  0100               	movlb	0	; () banked
  2224  0012C8  6FE2               	movwf	_CurrentState& (0+255),b
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;Pattern_ControlService.c: 174: ES_Event testEvent;
  2228                           ;Pattern_ControlService.c: 175: testEvent.EventType = PATTERN_START;
  2229  0012CA  0E05               	movlw	5
  2230  0012CC  0100               	movlb	0	; () banked
  2231  0012CE  6FC0               	movwf	RunPatternControlService@testEvent& (0+255),b
  2232                           
  2233                           ;Pattern_ControlService.c: 176: PostPatternControlService(testEvent);
  2234  0012D0  C0C0  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2235  0012D4  C0C1  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2236  0012D8  C0C2  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2237  0012DC  EC97  F00F         	call	_PostPatternControlService	;wreg free
  2238                           
  2239                           ;Pattern_ControlService.c: 178: }
  2240                           ;Pattern_ControlService.c: 179: break;
  2241  0012E0  D043               	goto	l326
  2242  0012E2                     l2802:
  2243                           
  2244                           ;Pattern_ControlService.c: 183: if(ThisEvent.EventType == PATTERN_START){
  2245  0012E2  0E05               	movlw	5
  2246  0012E4  0100               	movlb	0	; () banked
  2247  0012E6  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2248  0012E8  A4D8               	btfss	status,2,c
  2249  0012EA  D03E               	goto	l326
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;Pattern_ControlService.c: 185: ShowPattern();
  2253  0012EC  EC2C  F00F         	call	_ShowPattern	;wreg free
  2254  0012F0                     l2806:
  2255                           
  2256                           ;Pattern_ControlService.c: 187: CurrentState = Pattern_Running;
  2257  0012F0  0E02               	movlw	2
  2258  0012F2  D029               	goto	L4
  2259  0012F4                     l2808:
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;Pattern_ControlService.c: 193: if(ThisEvent.EventType == ES_TIMEOUT){
  2263  0012F4  0E03               	movlw	3
  2264  0012F6  0100               	movlb	0	; () banked
  2265  0012F8  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2266  0012FA  A4D8               	btfss	status,2,c
  2267  0012FC  D003               	goto	l2812
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;Pattern_ControlService.c: 195: ShowPattern();
  2271  0012FE  EC2C  F00F         	call	_ShowPattern	;wreg free
  2272                           
  2273                           ;Pattern_ControlService.c: 196: }
  2274  001302  D032               	goto	l326
  2275  001304                     l2812:
  2276                           
  2277                           ;Pattern_ControlService.c: 198: else if(ThisEvent.EventType == PATTERN_END){
  2278  001304  0E06               	movlw	6
  2279  001306  0100               	movlb	0	; () banked
  2280  001308  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2281  00130A  A4D8               	btfss	status,2,c
  2282  00130C  D003               	goto	l2818
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;Pattern_ControlService.c: 200: StopPattern();
  2286  00130E  EC18  F00F         	call	_StopPattern	;wreg free
  2287  001312  D018               	goto	L12
  2288  001314                     l2818:
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;Pattern_ControlService.c: 205: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2292  001314  0E07               	movlw	7
  2293  001316  0100               	movlb	0	; () banked
  2294  001318  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2295  00131A  A4D8               	btfss	status,2,c
  2296  00131C  D025               	goto	l326
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;Pattern_ControlService.c: 207: PausePattern();
  2300  00131E  ECBF  F00F         	call	_PausePattern	;wreg free
  2301                           
  2302                           ;Pattern_ControlService.c: 209: CurrentState = Pattern_Paused;
  2303  001322  0E03               	movlw	3
  2304  001324  D010               	goto	L4
  2305  001326                     l2824:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;Pattern_ControlService.c: 215: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2309  001326  0E08               	movlw	8
  2310  001328  0100               	movlb	0	; () banked
  2311  00132A  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2312  00132C  A4D8               	btfss	status,2,c
  2313  00132E  D003               	goto	l2830
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;Pattern_ControlService.c: 217: ShowPattern();
  2317  001330  EC2C  F00F         	call	_ShowPattern	;wreg free
  2318  001334  D7DD               	goto	l2806
  2319  001336                     l2830:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;Pattern_ControlService.c: 222: else if(ThisEvent.EventType == PATTERN_END){
  2323  001336  0E06               	movlw	6
  2324  001338  0100               	movlb	0	; () banked
  2325  00133A  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2326  00133C  A4D8               	btfss	status,2,c
  2327  00133E  D014               	goto	l326
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;Pattern_ControlService.c: 224: StopPattern();
  2331  001340  EC18  F00F         	call	_StopPattern	;wreg free
  2332  001344                     L12:
  2333                           
  2334                           ;Pattern_ControlService.c: 226: CurrentState = Pattern_Off;
  2335  001344  0E01               	movlw	1
  2336  001346                     L4:
  2337  001346  0100               	movlb	0	; () banked
  2338  001348  6FE2               	movwf	_CurrentState& (0+255),b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;Pattern_ControlService.c: 229: }
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;Pattern_ControlService.c: 227: }
  2345                           ;Pattern_ControlService.c: 228: break;
  2346                           
  2347                           ; BSR set to: 0
  2348  00134A  D00E               	goto	l326
  2349  00134C                     l2838:
  2350                           
  2351                           ; BSR set to: 0
  2352  00134C  0100               	movlb	0	; () banked
  2353  00134E  51E2               	movf	_CurrentState& (0+255),w,b
  2354                           
  2355                           ; Switch size 1, requested type "space"
  2356                           ; Number of cases is 4, Range of values is 0 to 3
  2357                           ; switch strategies available:
  2358                           ; Name         Instructions Cycles
  2359                           ; simple_byte           13     7 (average)
  2360                           ;	Chosen strategy is simple_byte
  2361  001350  0A00               	xorlw	0	; case 0
  2362  001352  B4D8               	btfsc	status,2,c
  2363  001354  D7B0               	goto	l2794
  2364  001356  0A01               	xorlw	1	; case 1
  2365  001358  B4D8               	btfsc	status,2,c
  2366  00135A  D7C3               	goto	l2802
  2367  00135C  0A03               	xorlw	3	; case 2
  2368  00135E  B4D8               	btfsc	status,2,c
  2369  001360  D7C9               	goto	l2808
  2370  001362  0A01               	xorlw	1	; case 3
  2371  001364  B4D8               	btfsc	status,2,c
  2372  001366  D7DF               	goto	l2824
  2373  001368                     l326:
  2374                           
  2375                           ;Pattern_ControlService.c: 230: return ReturnEvent;
  2376  001368  C0BD  F0BA         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2377  00136C  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2378  001370  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2379  001374  0012               	return		;funcret
  2380  001376                     __end_of_RunPatternControlService:
  2381                           	opt stack 0
  2382                           tosu	equ	0xFFF
  2383                           tosh	equ	0xFFE
  2384                           tosl	equ	0xFFD
  2385                           pclath	equ	0xFFA
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _RunSPI32ControlService *****************
  2405 ;; Defined at:
  2406 ;;		line 138 in file "SPI32_ControlService.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  ReturnEvent     3  100[BANK0 ] struct ES_Event_t
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  3   90[BANK0 ] struct ES_Event_t
  2413 ;; Registers used:
  2414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2420 ;;      Params:         0       3       0       0
  2421 ;;      Locals:         0       3       0       0
  2422 ;;      Temps:          0       7       0       0
  2423 ;;      Totals:         0      13       0       0
  2424 ;;Total ram usage:       13 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    7
  2427 ;; This function calls:
  2428 ;;		_GetNextFrame
  2429 ;;		_SPI32_SendFrame
  2430 ;; This function is called by:
  2431 ;;		_ES_Run
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text8
  2436  000EE6                     __ptext8:
  2437                           	opt stack 0
  2438  000EE6                     _RunSPI32ControlService:
  2439                           	opt stack 22
  2440                           
  2441                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2442                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2443                           
  2444                           ;incstack = 0
  2445  000EE6  0E00               	movlw	0
  2446  000EE8  0100               	movlb	0	; () banked
  2447  000EEA  6FC4               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2448                           
  2449                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2450  000EEC  D06D               	goto	l2888
  2451  000EEE                     l2862:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2455  000EEE  0E02               	movlw	2
  2456  000EF0  0100               	movlb	0	; () banked
  2457  000EF2  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2458  000EF4  A4D8               	btfss	status,2,c
  2459  000EF6  D073               	goto	l481
  2460  000EF8  D063               	goto	l2884
  2461  000EFA                     l2866:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2465  000EFA  0E09               	movlw	9
  2466  000EFC  0100               	movlb	0	; () banked
  2467  000EFE  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2468  000F00  A4D8               	btfss	status,2,c
  2469  000F02  D06D               	goto	l481
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2473  000F04  EC7F  F00F         	call	_GetNextFrame	;wreg free
  2474  000F08  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2475  000F0C  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2476  000F10  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2477  000F14  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2478                           
  2479                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2480  000F18  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2481  000F1C  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2482  000F20  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2483  000F24  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2484  000F28  EC94  F00D         	call	_SPI32_SendFrame	;wreg free
  2485                           
  2486                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2487  000F2C  0E02               	movlw	2
  2488  000F2E  D049               	goto	L6
  2489  000F30                     l2874:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2493  000F30  0E03               	movlw	3
  2494  000F32  0100               	movlb	0	; () banked
  2495  000F34  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2496  000F36  A4D8               	btfss	status,2,c
  2497  000F38  D052               	goto	l481
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2501  000F3A  0EFF               	movlw	255
  2502  000F3C  0100               	movlb	0	; () banked
  2503  000F3E  6FBD               	movwf	??_RunSPI32ControlService& (0+255),b
  2504  000F40  0EFF               	movlw	255
  2505  000F42  0100               	movlb	0	; () banked
  2506  000F44  6FBE               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2507  000F46  0100               	movlb	0	; () banked
  2508  000F48  51E6               	movf	_NumFrames& (0+255),w,b
  2509  000F4A  0100               	movlb	0	; () banked
  2510  000F4C  6FBF               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2511  000F4E  6BC0               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2512  000F50  0100               	movlb	0	; () banked
  2513  000F52  51BD               	movf	??_RunSPI32ControlService& (0+255),w,b
  2514  000F54  0100               	movlb	0	; () banked
  2515  000F56  27BF               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2516  000F58  0100               	movlb	0	; () banked
  2517  000F5A  51BE               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2518  000F5C  0100               	movlb	0	; () banked
  2519  000F5E  23C0               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2520  000F60  0100               	movlb	0	; () banked
  2521  000F62  2BE3               	incf	_FrameIndex& (0+255),f,b
  2522  000F64  05E3               	decf	_FrameIndex& (0+255),w,b
  2523  000F66  0100               	movlb	0	; () banked
  2524  000F68  6FC1               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2525  000F6A  6BC2               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2526  000F6C  0100               	movlb	0	; () banked
  2527  000F6E  51BF               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2528  000F70  0100               	movlb	0	; () banked
  2529  000F72  5DC1               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2530  000F74  0100               	movlb	0	; () banked
  2531  000F76  51C2               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2532  000F78  0A80               	xorlw	128
  2533  000F7A  0100               	movlb	0	; () banked
  2534  000F7C  6FC3               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2535  000F7E  0100               	movlb	0	; () banked
  2536  000F80  51C0               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2537  000F82  0A80               	xorlw	128
  2538  000F84  0100               	movlb	0	; () banked
  2539  000F86  59C3               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2540  000F88  B0D8               	btfsc	status,0,c
  2541  000F8A  D01A               	goto	l2884
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;SPI32_ControlService.c: 176: FramePointer++;
  2545  000F8C  0E04               	movlw	4
  2546  000F8E  0100               	movlb	0	; () banked
  2547  000F90  27D8               	addwf	_FramePointer& (0+255),f,b
  2548  000F92  0E00               	movlw	0
  2549  000F94  23D9               	addwfc	(_FramePointer+1)& (0+255),f,b
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2553  000F96  EC7F  F00F         	call	_GetNextFrame	;wreg free
  2554  000F9A  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2555  000F9E  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2556  000FA2  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2557  000FA6  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2558                           
  2559                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2560  000FAA  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2561  000FAE  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2562  000FB2  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2563  000FB6  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2564  000FBA  EC94  F00D         	call	_SPI32_SendFrame	;wreg free
  2565                           
  2566                           ;SPI32_ControlService.c: 180: }
  2567  000FBE  D00F               	goto	l481
  2568  000FC0                     l2884:
  2569                           
  2570                           ;SPI32_ControlService.c: 182: else{
  2571                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2572  000FC0  0E01               	movlw	1
  2573  000FC2                     L6:
  2574  000FC2  0100               	movlb	0	; () banked
  2575  000FC4  6FE0               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;SPI32_ControlService.c: 235: }
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;SPI32_ControlService.c: 185: }
  2582                           ;SPI32_ControlService.c: 186: }
  2583                           ;SPI32_ControlService.c: 188: break;
  2584                           
  2585                           ; BSR set to: 0
  2586  000FC6  D00B               	goto	l481
  2587  000FC8                     l2888:
  2588                           
  2589                           ; BSR set to: 0
  2590  000FC8  0100               	movlb	0	; () banked
  2591  000FCA  51E0               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2592                           
  2593                           ; Switch size 1, requested type "space"
  2594                           ; Number of cases is 3, Range of values is 0 to 2
  2595                           ; switch strategies available:
  2596                           ; Name         Instructions Cycles
  2597                           ; simple_byte           10     6 (average)
  2598                           ;	Chosen strategy is simple_byte
  2599  000FCC  0A00               	xorlw	0	; case 0
  2600  000FCE  B4D8               	btfsc	status,2,c
  2601  000FD0  D78E               	goto	l2862
  2602  000FD2  0A01               	xorlw	1	; case 1
  2603  000FD4  B4D8               	btfsc	status,2,c
  2604  000FD6  D791               	goto	l2866
  2605  000FD8  0A03               	xorlw	3	; case 2
  2606  000FDA  B4D8               	btfsc	status,2,c
  2607  000FDC  D7A9               	goto	l2874
  2608  000FDE                     l481:
  2609                           
  2610                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2611  000FDE  C0C4  F0BA         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2612  000FE2  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2613  000FE6  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2614  000FEA  0012               	return		;funcret
  2615  000FEC                     __end_of_RunSPI32ControlService:
  2616                           	opt stack 0
  2617                           tosu	equ	0xFFF
  2618                           tosh	equ	0xFFE
  2619                           tosl	equ	0xFFD
  2620                           pclath	equ	0xFFA
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           fsr1h	equ	0xFE2
  2631                           fsr1l	equ	0xFE1
  2632                           indf2	equ	0xFDF
  2633                           postinc2	equ	0xFDE
  2634                           postdec2	equ	0xFDD
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function _SPI32_SendFrame *****************
  2640 ;; Defined at:
  2641 ;;		line 86 in file "SPI32_HW.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      void 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, prodl, prodh
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2655 ;;      Params:         0       4       0       0
  2656 ;;      Locals:         0       0       0       0
  2657 ;;      Temps:          0       4       0       0
  2658 ;;      Totals:         0       8       0       0
  2659 ;;Total ram usage:        8 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    6
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_RunSPI32ControlService
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text9
  2670  001B28                     __ptext9:
  2671                           	opt stack 0
  2672  001B28                     _SPI32_SendFrame:
  2673                           	opt stack 22
  2674                           
  2675                           ;SPI32_HW.c: 101: if(FrameByte == 4){
  2676                           
  2677                           ;incstack = 0
  2678  001B28  0E04               	movlw	4
  2679  001B2A  0100               	movlb	0	; () banked
  2680  001B2C  19F9               	xorwf	_FrameByte& (0+255),w,b
  2681  001B2E  A4D8               	btfss	status,2,c
  2682  001B30  D008               	goto	l2666
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
  2686  001B32  C060  F034         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2687  001B36  C061  F035         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2688  001B3A  C062  F036         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2689  001B3E  C063  F037         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2690  001B42                     l2666:
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;SPI32_HW.c: 104: }
  2694                           ;SPI32_HW.c: 106: FrameByte--;
  2695  001B42  0100               	movlb	0	; () banked
  2696  001B44  07F9               	decf	_FrameByte& (0+255),f,b
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  2700  001B46  0100               	movlb	0	; () banked
  2701  001B48  51F9               	movf	_FrameByte& (0+255),w,b
  2702  001B4A  0D08               	mullw	8
  2703  001B4C  50F3               	movf	prodl,w,c
  2704  001B4E  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  2705  001B52  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  2706  001B56  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  2707  001B5A  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  2708  001B5E  0100               	movlb	0	; () banked
  2709  001B60  2AE8               	incf	wreg,f,c
  2710  001B62  D005               	goto	u1560
  2711  001B64                     u1565:
  2712  001B64  90D8               	bcf	status,0,c
  2713  001B66  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  2714  001B68  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  2715  001B6A  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  2716  001B6C  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  2717  001B6E                     u1560:
  2718  001B6E  2EE8               	decfsz	wreg,f,c
  2719  001B70  D7F9               	goto	u1565
  2720  001B72  0100               	movlb	0	; () banked
  2721  001B74  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  2722  001B76  6EC9               	movwf	4041,c	;volatile
  2723                           
  2724                           ; BSR set to: 0
  2725  001B78  0012               	return		;funcret
  2726  001B7A                     __end_of_SPI32_SendFrame:
  2727                           	opt stack 0
  2728                           tosu	equ	0xFFF
  2729                           tosh	equ	0xFFE
  2730                           tosl	equ	0xFFD
  2731                           pclath	equ	0xFFA
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodh	equ	0xFF4
  2737                           prodl	equ	0xFF3
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _GetNextFrame *****************
  2751 ;; Defined at:
  2752 ;;		line 258 in file "SPI32_ControlService.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  4    0[BANK0 ] unsigned long 
  2759 ;; Registers used:
  2760 ;;		fsr2l, fsr2h
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2766 ;;      Params:         0       4       0       0
  2767 ;;      Locals:         0       0       0       0
  2768 ;;      Temps:          0       0       0       0
  2769 ;;      Totals:         0       4       0       0
  2770 ;;Total ram usage:        4 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    6
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_RunSPI32ControlService
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text10
  2781  001EFE                     __ptext10:
  2782                           	opt stack 0
  2783  001EFE                     _GetNextFrame:
  2784                           	opt stack 22
  2785                           
  2786                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;incstack = 0
  2790  001EFE  C0D8  FFD9         	movff	_FramePointer,fsr2l
  2791  001F02  C0D9  FFDA         	movff	_FramePointer+1,fsr2h
  2792  001F06  CFDE F060          	movff	postinc2,?_GetNextFrame
  2793  001F0A  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  2794  001F0E  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  2795  001F12  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  2796  001F16  0012               	return	
  2797  001F18                     __end_of_GetNextFrame:
  2798                           	opt stack 0
  2799                           tosu	equ	0xFFF
  2800                           tosh	equ	0xFFE
  2801                           tosl	equ	0xFFD
  2802                           pclath	equ	0xFFA
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           postinc0	equ	0xFEE
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1h	equ	0xFE2
  2813                           fsr1l	equ	0xFE1
  2814                           indf2	equ	0xFDF
  2815                           postinc2	equ	0xFDE
  2816                           postdec2	equ	0xFDD
  2817                           fsr2h	equ	0xFDA
  2818                           fsr2l	equ	0xFD9
  2819                           status	equ	0xFD8
  2820                           
  2821 ;; *************** function _StopPattern *****************
  2822 ;; Defined at:
  2823 ;;		line 283 in file "Pattern_ControlService.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      void 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2837 ;;      Params:         0       0       0       0
  2838 ;;      Locals:         0       0       0       0
  2839 ;;      Temps:          0       0       0       0
  2840 ;;      Totals:         0       0       0       0
  2841 ;;Total ram usage:        0 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:   12
  2844 ;; This function calls:
  2845 ;;		_DotStar_Show
  2846 ;;		_ES_Timer_StopTimer
  2847 ;;		_PatternOff
  2848 ;;		_ResetPattern
  2849 ;; This function is called by:
  2850 ;;		_RunPatternControlService
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text11
  2855  001E30                     __ptext11:
  2856                           	opt stack 0
  2857  001E30                     _StopPattern:
  2858                           	opt stack 16
  2859                           
  2860                           ;Pattern_ControlService.c: 284: PatternConfigs[0] = 0;
  2861                           
  2862                           ;incstack = 0
  2863  001E30  0E00               	movlw	0
  2864  001E32  0100               	movlb	0	; () banked
  2865  001E34  6FFA               	movwf	_PatternConfigs& (0+255),b
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;Pattern_ControlService.c: 286: ES_Timer_StopTimer(0);
  2869  001E36  0E00               	movlw	0
  2870  001E38  ECBD  F00D         	call	_ES_Timer_StopTimer
  2871                           
  2872                           ;Pattern_ControlService.c: 288: DotStar_Show(PatternOff());
  2873  001E3C  EC52  F00E         	call	_PatternOff	;wreg free
  2874  001E40  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  2875  001E44  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  2876  001E48  EC55  F006         	call	_DotStar_Show	;wreg free
  2877                           
  2878                           ;Pattern_ControlService.c: 290: ResetPattern();
  2879  001E4C  ECBB  F00F         	call	_ResetPattern	;wreg free
  2880                           
  2881                           ;Pattern_ControlService.c: 292: PatternConfigs[0] = 0;
  2882  001E50  0E00               	movlw	0
  2883  001E52  0100               	movlb	0	; () banked
  2884  001E54  6FFA               	movwf	_PatternConfigs& (0+255),b
  2885                           
  2886                           ; BSR set to: 0
  2887  001E56  0012               	return		;funcret
  2888  001E58                     __end_of_StopPattern:
  2889                           	opt stack 0
  2890                           tosu	equ	0xFFF
  2891                           tosh	equ	0xFFE
  2892                           tosl	equ	0xFFD
  2893                           pclath	equ	0xFFA
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1h	equ	0xFE2
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           postdec2	equ	0xFDD
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function _ResetPattern *****************
  2913 ;; Defined at:
  2914 ;;		line 178 in file "Pattern_RGBPatterns.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;		None
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;		None
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2928 ;;      Params:         0       0       0       0
  2929 ;;      Locals:         0       0       0       0
  2930 ;;      Temps:          0       0       0       0
  2931 ;;      Totals:         0       0       0       0
  2932 ;;Total ram usage:        0 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    6
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_StopPattern
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text12
  2943  001F76                     __ptext12:
  2944                           	opt stack 0
  2945  001F76                     _ResetPattern:
  2946                           	opt stack 21
  2947                           
  2948                           ;Pattern_RGBPatterns.c: 180: PatternStepCounter=0;
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;incstack = 0
  2952  001F76  0E00               	movlw	0
  2953  001F78  0100               	movlb	0	; () banked
  2954  001F7A  6FE7               	movwf	_PatternStepCounter& (0+255),b
  2955                           
  2956                           ; BSR set to: 0
  2957  001F7C  0012               	return		;funcret
  2958  001F7E                     __end_of_ResetPattern:
  2959                           	opt stack 0
  2960                           tosu	equ	0xFFF
  2961                           tosh	equ	0xFFE
  2962                           tosl	equ	0xFFD
  2963                           pclath	equ	0xFFA
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           postinc0	equ	0xFEE
  2971                           wreg	equ	0xFE8
  2972                           postdec1	equ	0xFE5
  2973                           fsr1h	equ	0xFE2
  2974                           fsr1l	equ	0xFE1
  2975                           indf2	equ	0xFDF
  2976                           postinc2	equ	0xFDE
  2977                           postdec2	equ	0xFDD
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _PatternOff *****************
  2983 ;; Defined at:
  2984 ;;		line 81 in file "Pattern_RGBPatterns.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  i               1    2[BANK0 ] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  2    0[BANK0 ] PTR unsigned int 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2998 ;;      Params:         0       2       0       0
  2999 ;;      Locals:         0       1       0       0
  3000 ;;      Temps:          0       0       0       0
  3001 ;;      Totals:         0       3       0       0
  3002 ;;Total ram usage:        3 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    6
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_StopPattern
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text13
  3013  001CA4                     __ptext13:
  3014                           	opt stack 0
  3015  001CA4                     _PatternOff:
  3016                           	opt stack 21
  3017                           
  3018                           ;Pattern_RGBPatterns.c: 82: for(uint8_t i=0;i<Length;i++){
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;incstack = 0
  3022  001CA4  0E00               	movlw	0
  3023  001CA6  0100               	movlb	0	; () banked
  3024  001CA8  6F62               	movwf	PatternOff@i& (0+255),b
  3025  001CAA  D00F               	goto	l2562
  3026  001CAC                     l2558:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;Pattern_RGBPatterns.c: 83: PixelPattern[i] = 0x0;
  3030  001CAC  0100               	movlb	0	; () banked
  3031  001CAE  5162               	movf	PatternOff@i& (0+255),w,b
  3032  001CB0  0D02               	mullw	2
  3033  001CB2  0E20               	movlw	low _PixelPattern
  3034  001CB4  24F3               	addwf	prodl,w,c
  3035  001CB6  6ED9               	movwf	fsr2l,c
  3036  001CB8  0E01               	movlw	high _PixelPattern
  3037  001CBA  20F4               	addwfc	prodh,w,c
  3038  001CBC  6EDA               	movwf	fsr2h,c
  3039  001CBE  0E00               	movlw	0
  3040  001CC0  6EDE               	movwf	postinc2,c
  3041  001CC2  0E00               	movlw	0
  3042  001CC4  6EDD               	movwf	postdec2,c
  3043                           
  3044                           ; BSR set to: 0
  3045  001CC6  0100               	movlb	0	; () banked
  3046  001CC8  2B62               	incf	PatternOff@i& (0+255),f,b
  3047  001CCA                     l2562:
  3048                           
  3049                           ; BSR set to: 0
  3050  001CCA  0100               	movlb	0	; () banked
  3051  001CCC  51DF               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3052  001CCE  0100               	movlb	0	; () banked
  3053  001CD0  5D62               	subwf	PatternOff@i& (0+255),w,b
  3054  001CD2  A0D8               	btfss	status,0,c
  3055  001CD4  D7EB               	goto	l2558
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;Pattern_RGBPatterns.c: 84: }
  3059                           ;Pattern_RGBPatterns.c: 85: return PixelPattern;
  3060                           
  3061                           ; BSR set to: 0
  3062  001CD6  0E20               	movlw	low _PixelPattern
  3063  001CD8  0100               	movlb	0	; () banked
  3064  001CDA  6F60               	movwf	?_PatternOff& (0+255),b
  3065  001CDC  0E01               	movlw	high _PixelPattern
  3066  001CDE  0100               	movlb	0	; () banked
  3067  001CE0  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3068  001CE2  0012               	return	
  3069  001CE4                     __end_of_PatternOff:
  3070                           	opt stack 0
  3071                           tosu	equ	0xFFF
  3072                           tosh	equ	0xFFE
  3073                           tosl	equ	0xFFD
  3074                           pclath	equ	0xFFA
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           postdec1	equ	0xFE5
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _ShowPattern *****************
  3094 ;; Defined at:
  3095 ;;		line 273 in file "Pattern_ControlService.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;		None
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3109 ;;      Params:         0       0       0       0
  3110 ;;      Locals:         0       0       0       0
  3111 ;;      Temps:          0       0       0       0
  3112 ;;      Totals:         0       0       0       0
  3113 ;;Total ram usage:        0 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:   12
  3116 ;; This function calls:
  3117 ;;		_DotStar_Show
  3118 ;;		_ES_Timer_InitTimer
  3119 ;;		_UpdatePattern
  3120 ;; This function is called by:
  3121 ;;		_RunPatternControlService
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text14
  3126  001E58                     __ptext14:
  3127                           	opt stack 0
  3128  001E58                     _ShowPattern:
  3129                           	opt stack 16
  3130                           
  3131                           ;Pattern_ControlService.c: 275: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;incstack = 0
  3135  001E58  C0FE  F060         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3136  001E5C  0100               	movlb	0	; () banked
  3137  001E5E  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3138  001E60  0E00               	movlw	0
  3139  001E62  EC09  F00C         	call	_ES_Timer_InitTimer
  3140                           
  3141                           ;Pattern_ControlService.c: 277: DotStar_Show(UpdatePattern());
  3142  001E66  EC15  F005         	call	_UpdatePattern	;wreg free
  3143  001E6A  C080  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3144  001E6E  C081  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3145  001E72  EC55  F006         	call	_DotStar_Show	;wreg free
  3146                           
  3147                           ;Pattern_ControlService.c: 279: PatternConfigs[0] = 1;
  3148  001E76  0E01               	movlw	1
  3149  001E78  0100               	movlb	0	; () banked
  3150  001E7A  6FFA               	movwf	_PatternConfigs& (0+255),b
  3151                           
  3152                           ; BSR set to: 0
  3153  001E7C  0012               	return		;funcret
  3154  001E7E                     __end_of_ShowPattern:
  3155                           	opt stack 0
  3156                           tosu	equ	0xFFF
  3157                           tosh	equ	0xFFE
  3158                           tosl	equ	0xFFD
  3159                           pclath	equ	0xFFA
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           indf2	equ	0xFDF
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _UpdatePattern *****************
  3179 ;; Defined at:
  3180 ;;		line 89 in file "Pattern_RGBPatterns.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;		None
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  i               1   36[BANK0 ] unsigned char 
  3185 ;;  i               1   35[BANK0 ] unsigned char 
  3186 ;;  patternID       1   34[BANK0 ] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  2   32[BANK0 ] PTR unsigned int 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3196 ;;      Params:         0       2       0       0
  3197 ;;      Locals:         0       3       0       0
  3198 ;;      Temps:          0       0       0       0
  3199 ;;      Totals:         0       5       0       0
  3200 ;;Total ram usage:        5 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    8
  3203 ;; This function calls:
  3204 ;;		_ThinkingPattern
  3205 ;;		___awmod
  3206 ;;		___lwdiv
  3207 ;;		___wmul
  3208 ;; This function is called by:
  3209 ;;		_ShowPattern
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text15
  3214  000A2A                     __ptext15:
  3215                           	opt stack 0
  3216  000A2A                     _UpdatePattern:
  3217                           	opt stack 19
  3218                           
  3219                           ;Pattern_RGBPatterns.c: 91: uint8_t patternID = PatternConfigs[1];
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;incstack = 0
  3223  000A2A  0100               	movlb	0	; () banked
  3224  000A2C  EE20 F001          	lfsr	2,1
  3225  000A30  51D6               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3226  000A32  26D9               	addwf	fsr2l,f,c
  3227  000A34  51D7               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3228  000A36  22DA               	addwfc	fsr2h,f,c
  3229  000A38  50DF               	movf	indf2,w,c
  3230  000A3A  0100               	movlb	0	; () banked
  3231  000A3C  6F82               	movwf	UpdatePattern@patternID& (0+255),b
  3232                           
  3233                           ;Pattern_RGBPatterns.c: 94: switch(patternID){
  3234  000A3E  D086               	goto	l2538
  3235  000A40                     l2516:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3239  000A40  0E00               	movlw	0
  3240  000A42  0100               	movlb	0	; () banked
  3241  000A44  6F83               	movwf	UpdatePattern@i& (0+255),b
  3242  000A46  D018               	goto	l2522
  3243  000A48                     l2518:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = ThinkingPattern(1,i,PatternStepCounter);
  3247  000A48  C083  F068         	movff	UpdatePattern@i,ThinkingPattern@pixel
  3248  000A4C  C0E7  F069         	movff	_PatternStepCounter,ThinkingPattern@stepCount
  3249  000A50  0E01               	movlw	1
  3250  000A52  EC0B  F004         	call	_ThinkingPattern
  3251  000A56  0100               	movlb	0	; () banked
  3252  000A58  5183               	movf	UpdatePattern@i& (0+255),w,b
  3253  000A5A  0D02               	mullw	2
  3254  000A5C  0E20               	movlw	low _PixelPattern
  3255  000A5E  24F3               	addwf	prodl,w,c
  3256  000A60  6ED9               	movwf	fsr2l,c
  3257  000A62  0E01               	movlw	high _PixelPattern
  3258  000A64  20F4               	addwfc	prodh,w,c
  3259  000A66  6EDA               	movwf	fsr2h,c
  3260  000A68  0100               	movlb	0	; () banked
  3261  000A6A  C068  FFDE         	movff	?_ThinkingPattern,postinc2
  3262  000A6E  0100               	movlb	0	; () banked
  3263  000A70  C069  FFDD         	movff	?_ThinkingPattern+1,postdec2
  3264                           
  3265                           ; BSR set to: 0
  3266  000A74  0100               	movlb	0	; () banked
  3267  000A76  2B83               	incf	UpdatePattern@i& (0+255),f,b
  3268  000A78                     l2522:
  3269                           
  3270                           ; BSR set to: 0
  3271  000A78  0100               	movlb	0	; () banked
  3272  000A7A  51DF               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3273  000A7C  0100               	movlb	0	; () banked
  3274  000A7E  5D83               	subwf	UpdatePattern@i& (0+255),w,b
  3275  000A80  A0D8               	btfss	status,0,c
  3276  000A82  D7E2               	goto	l2518
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;Pattern_RGBPatterns.c: 109: }
  3280                           ;Pattern_RGBPatterns.c: 110: PatternStepCounter = (PatternStepCounter+1)%Length;
  3281                           
  3282                           ; BSR set to: 0
  3283  000A84  0E01               	movlw	1
  3284  000A86  0100               	movlb	0	; () banked
  3285  000A88  25E7               	addwf	_PatternStepCounter& (0+255),w,b
  3286  000A8A  0100               	movlb	0	; () banked
  3287  000A8C  6F60               	movwf	___awmod@dividend& (0+255),b
  3288  000A8E  0100               	movlb	0	; () banked
  3289  000A90  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3290  000A92  0E00               	movlw	0
  3291  000A94  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3292  000A96  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3293  000A9A  0100               	movlb	0	; () banked
  3294  000A9C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3295  000A9E  EC70  F00B         	call	___awmod	;wreg free
  3296  000AA2  D04F               	goto	L7
  3297  000AA4                     l2526:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;Pattern_RGBPatterns.c: 123: {
  3301                           ;Pattern_RGBPatterns.c: 165: for(uint8_t i=0;i<Length;i++){
  3302  000AA4  0E00               	movlw	0
  3303  000AA6  0100               	movlb	0	; () banked
  3304  000AA8  6F84               	movwf	UpdatePattern@i_653& (0+255),b
  3305  000AAA  D036               	goto	l2532
  3306  000AAC                     l2528:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;Pattern_RGBPatterns.c: 166: PixelPattern[i] = (((uint16_t)(i+PatternStepCounter)*255/Le
      +                          ngth)<<8) | (0x0F<<4) | 0x0F;
  3310  000AAC  0100               	movlb	0	; () banked
  3311  000AAE  5184               	movf	UpdatePattern@i_653& (0+255),w,b
  3312  000AB0  0100               	movlb	0	; () banked
  3313  000AB2  25E7               	addwf	_PatternStepCounter& (0+255),w,b
  3314  000AB4  0100               	movlb	0	; () banked
  3315  000AB6  6F66               	movwf	___wmul@multiplier& (0+255),b
  3316  000AB8  0100               	movlb	0	; () banked
  3317  000ABA  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  3318  000ABC  0100               	movlb	0	; () banked
  3319  000ABE  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  3320  000AC0  0E00               	movlw	0
  3321  000AC2  0100               	movlb	0	; () banked
  3322  000AC4  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3323  000AC6  6968               	setf	___wmul@multiplicand& (0+255),b
  3324  000AC8  ECCA  F00E         	call	___wmul	;wreg free
  3325  000ACC  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  3326  000AD0  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  3327  000AD4  C0DF  F06E         	movff	Pattern_RGBPatterns@Length,___lwdiv@divisor
  3328  000AD8  0100               	movlb	0	; () banked
  3329  000ADA  6B6F               	clrf	(___lwdiv@divisor+1)& (0+255),b
  3330  000ADC  EC85  F00C         	call	___lwdiv	;wreg free
  3331  000AE0  0100               	movlb	0	; () banked
  3332  000AE2  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  3333  000AE6  0100               	movlb	0	; () banked
  3334  000AE8  6B6C               	clrf	?___lwdiv& (0+255),b
  3335  000AEA  0EFF               	movlw	255
  3336  000AEC  0100               	movlb	0	; () banked
  3337  000AEE  136C               	iorwf	?___lwdiv& (0+255),f,b
  3338  000AF0  0E00               	movlw	0
  3339  000AF2  0100               	movlb	0	; () banked
  3340  000AF4  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  3341  000AF6  0100               	movlb	0	; () banked
  3342  000AF8  5184               	movf	UpdatePattern@i_653& (0+255),w,b
  3343  000AFA  0D02               	mullw	2
  3344  000AFC  0E20               	movlw	low _PixelPattern
  3345  000AFE  24F3               	addwf	prodl,w,c
  3346  000B00  6ED9               	movwf	fsr2l,c
  3347  000B02  0E01               	movlw	high _PixelPattern
  3348  000B04  20F4               	addwfc	prodh,w,c
  3349  000B06  6EDA               	movwf	fsr2h,c
  3350  000B08  0100               	movlb	0	; () banked
  3351  000B0A  C06C  FFDE         	movff	?___lwdiv,postinc2
  3352  000B0E  0100               	movlb	0	; () banked
  3353  000B10  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  3354                           
  3355                           ; BSR set to: 0
  3356  000B14  0100               	movlb	0	; () banked
  3357  000B16  2B84               	incf	UpdatePattern@i_653& (0+255),f,b
  3358  000B18                     l2532:
  3359                           
  3360                           ; BSR set to: 0
  3361  000B18  0100               	movlb	0	; () banked
  3362  000B1A  51DF               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3363  000B1C  0100               	movlb	0	; () banked
  3364  000B1E  5D84               	subwf	UpdatePattern@i_653& (0+255),w,b
  3365  000B20  A0D8               	btfss	status,0,c
  3366  000B22  D7C4               	goto	l2528
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;Pattern_RGBPatterns.c: 167: }
  3370                           ;Pattern_RGBPatterns.c: 168: PatternStepCounter = (PatternStepCounter+1)%Length;
  3371                           
  3372                           ; BSR set to: 0
  3373  000B24  0E01               	movlw	1
  3374  000B26  0100               	movlb	0	; () banked
  3375  000B28  25E7               	addwf	_PatternStepCounter& (0+255),w,b
  3376  000B2A  0100               	movlb	0	; () banked
  3377  000B2C  6F60               	movwf	___awmod@dividend& (0+255),b
  3378  000B2E  0100               	movlb	0	; () banked
  3379  000B30  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3380  000B32  0E00               	movlw	0
  3381  000B34  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3382  000B36  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3383  000B3A  0100               	movlb	0	; () banked
  3384  000B3C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3385  000B3E  EC70  F00B         	call	___awmod	;wreg free
  3386  000B42                     L7:
  3387  000B42  0100               	movlb	0	; () banked
  3388  000B44  5160               	movf	?___awmod& (0+255),w,b
  3389  000B46  0100               	movlb	0	; () banked
  3390  000B48  6FE7               	movwf	_PatternStepCounter& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;Pattern_RGBPatterns.c: 173: }
  3394                           
  3395                           ;Pattern_RGBPatterns.c: 170: }
  3396                           ;Pattern_RGBPatterns.c: 171: break;
  3397  000B4A  D014               	goto	l2540
  3398  000B4C                     l2538:
  3399                           
  3400                           ; BSR set to: 0
  3401  000B4C  0100               	movlb	0	; () banked
  3402  000B4E  5182               	movf	UpdatePattern@patternID& (0+255),w,b
  3403                           
  3404                           ; Switch size 1, requested type "space"
  3405                           ; Number of cases is 6, Range of values is 0 to 255
  3406                           ; switch strategies available:
  3407                           ; Name         Instructions Cycles
  3408                           ; simple_byte           19    10 (average)
  3409                           ;	Chosen strategy is simple_byte
  3410  000B50  0A00               	xorlw	0	; case 0
  3411  000B52  B4D8               	btfsc	status,2,c
  3412  000B54  D00F               	goto	l2540
  3413  000B56  0A01               	xorlw	1	; case 1
  3414  000B58  B4D8               	btfsc	status,2,c
  3415  000B5A  D00C               	goto	l2540
  3416  000B5C  0A03               	xorlw	3	; case 2
  3417  000B5E  B4D8               	btfsc	status,2,c
  3418  000B60  D76F               	goto	l2516
  3419  000B62  0A01               	xorlw	1	; case 3
  3420  000B64  B4D8               	btfsc	status,2,c
  3421  000B66  D006               	goto	l2540
  3422  000B68  0A07               	xorlw	7	; case 4
  3423  000B6A  B4D8               	btfsc	status,2,c
  3424  000B6C  D003               	goto	l2540
  3425  000B6E  0AFB               	xorlw	251	; case 255
  3426  000B70  B4D8               	btfsc	status,2,c
  3427  000B72  D798               	goto	l2526
  3428  000B74                     l2540:
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;Pattern_RGBPatterns.c: 175: return PixelPattern;
  3432  000B74  0E20               	movlw	low _PixelPattern
  3433  000B76  0100               	movlb	0	; () banked
  3434  000B78  6F80               	movwf	?_UpdatePattern& (0+255),b
  3435  000B7A  0E01               	movlw	high _PixelPattern
  3436  000B7C  0100               	movlb	0	; () banked
  3437  000B7E  6F81               	movwf	(?_UpdatePattern+1)& (0+255),b
  3438  000B80  0012               	return	
  3439  000B82                     __end_of_UpdatePattern:
  3440                           	opt stack 0
  3441                           tosu	equ	0xFFF
  3442                           tosh	equ	0xFFE
  3443                           tosl	equ	0xFFD
  3444                           pclath	equ	0xFFA
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           postdec1	equ	0xFE5
  3454                           fsr1h	equ	0xFE2
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _ThinkingPattern *****************
  3464 ;; Defined at:
  3465 ;;		line 183 in file "Pattern_RGBPatterns.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  pattern         1    wreg     unsigned char 
  3468 ;;  pixel           1    8[BANK0 ] unsigned char 
  3469 ;;  stepCount       1    9[BANK0 ] unsigned char 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;  pattern         1    0[COMRAM] unsigned char 
  3472 ;;  pixelHSV        2   22[BANK0 ] unsigned int 
  3473 ;;  head            1   31[BANK0 ] unsigned char 
  3474 ;;  x               1   30[BANK0 ] unsigned char 
  3475 ;;  val             1   29[BANK0 ] unsigned char 
  3476 ;;  sat             1   28[BANK0 ] unsigned char 
  3477 ;;  hue             1   21[BANK0 ] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  2    8[BANK0 ] unsigned int 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3487 ;;      Params:         0       2       0       0
  3488 ;;      Locals:         0      11       0       0
  3489 ;;      Temps:          0      11       0       0
  3490 ;;      Totals:         0      24       0       0
  3491 ;;Total ram usage:       24 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    7
  3494 ;; This function calls:
  3495 ;;		___awdiv
  3496 ;;		___awmod
  3497 ;; This function is called by:
  3498 ;;		_UpdatePattern
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text16
  3503  000816                     __ptext16:
  3504                           	opt stack 0
  3505  000816                     _ThinkingPattern:
  3506                           	opt stack 19
  3507                           
  3508                           ;Pattern_RGBPatterns.c: 184: uint8_t head = stepCount;
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;incstack = 0
  3512  000816  C069  F07F         	movff	ThinkingPattern@stepCount,ThinkingPattern@head
  3513                           
  3514                           ;Pattern_RGBPatterns.c: 190: hue = 32;
  3515                           
  3516                           ;Pattern_RGBPatterns.c: 189: default:
  3517                           
  3518                           ;Pattern_RGBPatterns.c: 185: uint16_t pixelHSV;
  3519                           ;Pattern_RGBPatterns.c: 186: uint8_t sat, val, hue, x;
  3520                           ;Pattern_RGBPatterns.c: 188: switch(pattern){
  3521  00081A  0E20               	movlw	32
  3522  00081C  0100               	movlb	0	; () banked
  3523  00081E  6F75               	movwf	ThinkingPattern@hue& (0+255),b
  3524                           
  3525                           ;Pattern_RGBPatterns.c: 191: sat = 0x0F;
  3526  000820  0E0F               	movlw	15
  3527  000822  0100               	movlb	0	; () banked
  3528  000824  6F7C               	movwf	ThinkingPattern@sat& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Pattern_RGBPatterns.c: 193: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  3532  000826  0100               	movlb	0	; () banked
  3533  000828  517F               	movf	ThinkingPattern@head& (0+255),w,b
  3534  00082A  0100               	movlb	0	; () banked
  3535  00082C  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  3536  00082E  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  3537  000830  0100               	movlb	0	; () banked
  3538  000832  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  3539  000834  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  3540  000836  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  3541  000838  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  3542  00083A  0100               	movlb	0	; () banked
  3543  00083C  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  3544  00083E  C0DF  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  3545  000842  0100               	movlb	0	; () banked
  3546  000844  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  3547  000846  0100               	movlb	0	; () banked
  3548  000848  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  3549  00084A  0E00               	movlw	0
  3550  00084C  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  3551  00084E  0100               	movlb	0	; () banked
  3552  000850  516A               	movf	??_ThinkingPattern& (0+255),w,b
  3553  000852  0100               	movlb	0	; () banked
  3554  000854  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  3555  000856  0100               	movlb	0	; () banked
  3556  000858  6F60               	movwf	___awmod@dividend& (0+255),b
  3557  00085A  0100               	movlb	0	; () banked
  3558  00085C  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  3559  00085E  0100               	movlb	0	; () banked
  3560  000860  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  3561  000862  0100               	movlb	0	; () banked
  3562  000864  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  3563  000866  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3564  00086A  0100               	movlb	0	; () banked
  3565  00086C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3566  00086E  EC70  F00B         	call	___awmod	;wreg free
  3567  000872  C060  F06E         	movff	?___awmod,??_ThinkingPattern+4
  3568  000876  C061  F06F         	movff	?___awmod+1,??_ThinkingPattern+5
  3569  00087A  0100               	movlb	0	; () banked
  3570  00087C  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  3571  00087E  0100               	movlb	0	; () banked
  3572  000880  6F70               	movwf	(??_ThinkingPattern+6)& (0+255),b
  3573  000882  6B71               	clrf	(??_ThinkingPattern+7)& (0+255),b
  3574  000884  0100               	movlb	0	; () banked
  3575  000886  1F70               	comf	(??_ThinkingPattern+6)& (0+255),f,b
  3576  000888  1F71               	comf	(??_ThinkingPattern+7)& (0+255),f,b
  3577  00088A  4B70               	infsnz	(??_ThinkingPattern+6)& (0+255),f,b
  3578  00088C  2B71               	incf	(??_ThinkingPattern+7)& (0+255),f,b
  3579  00088E  0100               	movlb	0	; () banked
  3580  000890  517F               	movf	ThinkingPattern@head& (0+255),w,b
  3581  000892  C0DF  F072         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+8
  3582  000896  0100               	movlb	0	; () banked
  3583  000898  6B73               	clrf	(??_ThinkingPattern+9)& (0+255),b
  3584  00089A  0100               	movlb	0	; () banked
  3585  00089C  2772               	addwf	(??_ThinkingPattern+8)& (0+255),f,b
  3586  00089E  0E00               	movlw	0
  3587  0008A0  2373               	addwfc	(??_ThinkingPattern+9)& (0+255),f,b
  3588  0008A2  0100               	movlb	0	; () banked
  3589  0008A4  5170               	movf	(??_ThinkingPattern+6)& (0+255),w,b
  3590  0008A6  0100               	movlb	0	; () banked
  3591  0008A8  2572               	addwf	(??_ThinkingPattern+8)& (0+255),w,b
  3592  0008AA  0100               	movlb	0	; () banked
  3593  0008AC  6F60               	movwf	___awmod@dividend& (0+255),b
  3594  0008AE  0100               	movlb	0	; () banked
  3595  0008B0  5171               	movf	(??_ThinkingPattern+7)& (0+255),w,b
  3596  0008B2  0100               	movlb	0	; () banked
  3597  0008B4  2173               	addwfc	(??_ThinkingPattern+9)& (0+255),w,b
  3598  0008B6  0100               	movlb	0	; () banked
  3599  0008B8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  3600  0008BA  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3601  0008BE  0100               	movlb	0	; () banked
  3602  0008C0  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3603  0008C2  EC70  F00B         	call	___awmod	;wreg free
  3604  0008C6  0100               	movlb	0	; () banked
  3605  0008C8  5160               	movf	?___awmod& (0+255),w,b
  3606  0008CA  0100               	movlb	0	; () banked
  3607  0008CC  5D6E               	subwf	(??_ThinkingPattern+4)& (0+255),w,b
  3608  0008CE  0100               	movlb	0	; () banked
  3609  0008D0  516F               	movf	(??_ThinkingPattern+5)& (0+255),w,b
  3610  0008D2  0A80               	xorlw	128
  3611  0008D4  0100               	movlb	0	; () banked
  3612  0008D6  6F74               	movwf	(??_ThinkingPattern+10)& (0+255),b
  3613  0008D8  0100               	movlb	0	; () banked
  3614  0008DA  5161               	movf	(?___awmod+1)& (0+255),w,b
  3615  0008DC  0A80               	xorlw	128
  3616  0008DE  0100               	movlb	0	; () banked
  3617  0008E0  5974               	subwfb	(??_ThinkingPattern+10)& (0+255),w,b
  3618  0008E2  A0D8               	btfss	status,0,c
  3619  0008E4  D027               	goto	l2408
  3620                           
  3621                           ; BSR set to: 0
  3622  0008E6  0100               	movlb	0	; () banked
  3623  0008E8  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  3624  0008EA  0100               	movlb	0	; () banked
  3625  0008EC  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  3626  0008EE  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  3627  0008F0  0100               	movlb	0	; () banked
  3628  0008F2  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  3629  0008F4  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  3630  0008F6  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  3631  0008F8  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  3632  0008FA  0100               	movlb	0	; () banked
  3633  0008FC  517F               	movf	ThinkingPattern@head& (0+255),w,b
  3634  0008FE  C0DF  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  3635  000902  0100               	movlb	0	; () banked
  3636  000904  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  3637  000906  0100               	movlb	0	; () banked
  3638  000908  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  3639  00090A  0E00               	movlw	0
  3640  00090C  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  3641  00090E  0100               	movlb	0	; () banked
  3642  000910  516A               	movf	??_ThinkingPattern& (0+255),w,b
  3643  000912  0100               	movlb	0	; () banked
  3644  000914  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  3645  000916  0100               	movlb	0	; () banked
  3646  000918  6F60               	movwf	___awmod@dividend& (0+255),b
  3647  00091A  0100               	movlb	0	; () banked
  3648  00091C  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  3649  00091E  0100               	movlb	0	; () banked
  3650  000920  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  3651  000922  0100               	movlb	0	; () banked
  3652  000924  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  3653  000926  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3654  00092A  0100               	movlb	0	; () banked
  3655  00092C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3656  00092E  EC70  F00B         	call	___awmod	;wreg free
  3657  000932  D026               	goto	L8
  3658  000934                     l2408:
  3659  000934  0100               	movlb	0	; () banked
  3660  000936  517F               	movf	ThinkingPattern@head& (0+255),w,b
  3661  000938  0100               	movlb	0	; () banked
  3662  00093A  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  3663  00093C  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  3664  00093E  0100               	movlb	0	; () banked
  3665  000940  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  3666  000942  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  3667  000944  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  3668  000946  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  3669  000948  0100               	movlb	0	; () banked
  3670  00094A  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  3671  00094C  C0DF  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  3672  000950  0100               	movlb	0	; () banked
  3673  000952  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  3674  000954  0100               	movlb	0	; () banked
  3675  000956  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  3676  000958  0E00               	movlw	0
  3677  00095A  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  3678  00095C  0100               	movlb	0	; () banked
  3679  00095E  516A               	movf	??_ThinkingPattern& (0+255),w,b
  3680  000960  0100               	movlb	0	; () banked
  3681  000962  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  3682  000964  0100               	movlb	0	; () banked
  3683  000966  6F60               	movwf	___awmod@dividend& (0+255),b
  3684  000968  0100               	movlb	0	; () banked
  3685  00096A  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  3686  00096C  0100               	movlb	0	; () banked
  3687  00096E  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  3688  000970  0100               	movlb	0	; () banked
  3689  000972  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  3690  000974  C0DF  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3691  000978  0100               	movlb	0	; () banked
  3692  00097A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3693  00097C  EC70  F00B         	call	___awmod	;wreg free
  3694  000980                     L8:
  3695  000980  C060  F078         	movff	?___awmod,_ThinkingPattern$665
  3696  000984  C061  F079         	movff	?___awmod+1,_ThinkingPattern$665+1
  3697  000988  C078  F07E         	movff	_ThinkingPattern$665,ThinkingPattern@x
  3698                           
  3699                           ;Pattern_RGBPatterns.c: 194: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  3700  00098C  0E04               	movlw	4
  3701  00098E  0100               	movlb	0	; () banked
  3702  000990  657E               	cpfsgt	ThinkingPattern@x& (0+255),b
  3703  000992  D006               	goto	l2416
  3704                           
  3705                           ; BSR set to: 0
  3706  000994  0E00               	movlw	0
  3707  000996  0100               	movlb	0	; () banked
  3708  000998  6F7B               	movwf	(_ThinkingPattern$666+1)& (0+255),b
  3709  00099A  0E00               	movlw	0
  3710  00099C  6F7A               	movwf	_ThinkingPattern$666& (0+255),b
  3711  00099E  D01F               	goto	l2418
  3712  0009A0                     l2416:
  3713                           
  3714                           ; BSR set to: 0
  3715  0009A0  0100               	movlb	0	; () banked
  3716  0009A2  517E               	movf	ThinkingPattern@x& (0+255),w,b
  3717  0009A4  0D0F               	mullw	15
  3718  0009A6  CFF3 F060          	movff	prodl,___awdiv@dividend
  3719  0009AA  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3720  0009AE  0E00               	movlw	0
  3721  0009B0  0100               	movlb	0	; () banked
  3722  0009B2  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3723  0009B4  0E05               	movlw	5
  3724  0009B6  6F62               	movwf	___awdiv@divisor& (0+255),b
  3725  0009B8  ECBB  F009         	call	___awdiv	;wreg free
  3726  0009BC  0100               	movlb	0	; () banked
  3727  0009BE  1F60               	comf	?___awdiv& (0+255),f,b
  3728  0009C0  0100               	movlb	0	; () banked
  3729  0009C2  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  3730  0009C4  0100               	movlb	0	; () banked
  3731  0009C6  4B60               	infsnz	?___awdiv& (0+255),f,b
  3732  0009C8  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  3733  0009CA  0E0F               	movlw	15
  3734  0009CC  0100               	movlb	0	; () banked
  3735  0009CE  2560               	addwf	?___awdiv& (0+255),w,b
  3736  0009D0  0100               	movlb	0	; () banked
  3737  0009D2  6F7A               	movwf	_ThinkingPattern$666& (0+255),b
  3738  0009D4  0E00               	movlw	0
  3739  0009D6  0100               	movlb	0	; () banked
  3740  0009D8  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  3741  0009DA  0100               	movlb	0	; () banked
  3742  0009DC  6F7B               	movwf	(_ThinkingPattern$666+1)& (0+255),b
  3743  0009DE                     l2418:
  3744                           
  3745                           ; BSR set to: 0
  3746  0009DE  C07A  F07D         	movff	_ThinkingPattern$666,ThinkingPattern@val
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Pattern_RGBPatterns.c: 198: pixelHSV = ((uint16_t)32<<8) | (sat<<4) | val;
  3750                           
  3751                           ; BSR set to: 0
  3752                           
  3753                           ; BSR set to: 0
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;Pattern_RGBPatterns.c: 196: }
  3757                           
  3758                           ;Pattern_RGBPatterns.c: 195: break;
  3759  0009E2  0100               	movlb	0	; () banked
  3760  0009E4  517C               	movf	ThinkingPattern@sat& (0+255),w,b
  3761  0009E6  0100               	movlb	0	; () banked
  3762  0009E8  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  3763  0009EA  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  3764  0009EC  0100               	movlb	0	; () banked
  3765  0009EE  3B6A               	swapf	??_ThinkingPattern& (0+255),f,b
  3766  0009F0  3B6B               	swapf	(??_ThinkingPattern+1)& (0+255),f,b
  3767  0009F2  0EF0               	movlw	240
  3768  0009F4  176B               	andwf	(??_ThinkingPattern+1)& (0+255),f,b
  3769  0009F6  516A               	movf	??_ThinkingPattern& (0+255),w,b
  3770  0009F8  0B0F               	andlw	15
  3771  0009FA  136B               	iorwf	(??_ThinkingPattern+1)& (0+255),f,b
  3772  0009FC  0EF0               	movlw	240
  3773  0009FE  176A               	andwf	??_ThinkingPattern& (0+255),f,b
  3774  000A00  0100               	movlb	0	; () banked
  3775  000A02  517D               	movf	ThinkingPattern@val& (0+255),w,b
  3776  000A04  0100               	movlb	0	; () banked
  3777  000A06  136A               	iorwf	??_ThinkingPattern& (0+255),f,b
  3778  000A08  0E00               	movlw	0
  3779  000A0A  136B               	iorwf	(??_ThinkingPattern+1)& (0+255),f,b
  3780  000A0C  0E00               	movlw	0
  3781  000A0E  0100               	movlb	0	; () banked
  3782  000A10  116A               	iorwf	??_ThinkingPattern& (0+255),w,b
  3783  000A12  0100               	movlb	0	; () banked
  3784  000A14  6F76               	movwf	ThinkingPattern@pixelHSV& (0+255),b
  3785  000A16  0E20               	movlw	32
  3786  000A18  0100               	movlb	0	; () banked
  3787  000A1A  116B               	iorwf	(??_ThinkingPattern+1)& (0+255),w,b
  3788  000A1C  0100               	movlb	0	; () banked
  3789  000A1E  6F77               	movwf	(ThinkingPattern@pixelHSV+1)& (0+255),b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;Pattern_RGBPatterns.c: 200: return pixelHSV;
  3793  000A20  C076  F068         	movff	ThinkingPattern@pixelHSV,?_ThinkingPattern
  3794  000A24  C077  F069         	movff	ThinkingPattern@pixelHSV+1,?_ThinkingPattern+1
  3795  000A28  0012               	return	
  3796  000A2A                     __end_of_ThinkingPattern:
  3797                           	opt stack 0
  3798                           tosu	equ	0xFFF
  3799                           tosh	equ	0xFFE
  3800                           tosl	equ	0xFFD
  3801                           pclath	equ	0xFFA
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1h	equ	0xFE2
  3812                           fsr1l	equ	0xFE1
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           postdec2	equ	0xFDD
  3816                           fsr2h	equ	0xFDA
  3817                           fsr2l	equ	0xFD9
  3818                           status	equ	0xFD8
  3819                           
  3820 ;; *************** function ___awdiv *****************
  3821 ;; Defined at:
  3822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  dividend        2    0[BANK0 ] int 
  3825 ;;  divisor         2    2[BANK0 ] int 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  quotient        2    6[BANK0 ] int 
  3828 ;;  sign            1    5[BANK0 ] unsigned char 
  3829 ;;  counter         1    4[BANK0 ] unsigned char 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2    0[BANK0 ] int 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3839 ;;      Params:         0       4       0       0
  3840 ;;      Locals:         0       4       0       0
  3841 ;;      Temps:          0       0       0       0
  3842 ;;      Totals:         0       8       0       0
  3843 ;;Total ram usage:        8 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    6
  3846 ;; This function calls:
  3847 ;;		Nothing
  3848 ;; This function is called by:
  3849 ;;		_ThinkingPattern
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text17
  3854  001376                     __ptext17:
  3855                           	opt stack 0
  3856  001376                     ___awdiv:
  3857                           	opt stack 19
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;incstack = 0
  3861  001376  0E00               	movlw	0
  3862  001378  0100               	movlb	0	; () banked
  3863  00137A  6F65               	movwf	___awdiv@sign& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866  00137C  0100               	movlb	0	; () banked
  3867  00137E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3868  001380  D008               	goto	l2286
  3869                           
  3870                           ; BSR set to: 0
  3871  001382  0100               	movlb	0	; () banked
  3872  001384  6D62               	negf	___awdiv@divisor& (0+255),b
  3873  001386  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3874  001388  B0D8               	btfsc	status,0,c
  3875  00138A  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3876                           
  3877                           ; BSR set to: 0
  3878  00138C  0E01               	movlw	1
  3879  00138E  0100               	movlb	0	; () banked
  3880  001390  6F65               	movwf	___awdiv@sign& (0+255),b
  3881  001392                     l2286:
  3882                           
  3883                           ; BSR set to: 0
  3884  001392  0100               	movlb	0	; () banked
  3885  001394  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3886  001396  D008               	goto	l2292
  3887                           
  3888                           ; BSR set to: 0
  3889  001398  0100               	movlb	0	; () banked
  3890  00139A  6D60               	negf	___awdiv@dividend& (0+255),b
  3891  00139C  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3892  00139E  B0D8               	btfsc	status,0,c
  3893  0013A0  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3894                           
  3895                           ; BSR set to: 0
  3896  0013A2  0E01               	movlw	1
  3897  0013A4  0100               	movlb	0	; () banked
  3898  0013A6  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  3899  0013A8                     l2292:
  3900                           
  3901                           ; BSR set to: 0
  3902  0013A8  0E00               	movlw	0
  3903  0013AA  0100               	movlb	0	; () banked
  3904  0013AC  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  3905  0013AE  0E00               	movlw	0
  3906  0013B0  6F66               	movwf	___awdiv@quotient& (0+255),b
  3907                           
  3908                           ; BSR set to: 0
  3909  0013B2  0100               	movlb	0	; () banked
  3910  0013B4  5162               	movf	___awdiv@divisor& (0+255),w,b
  3911  0013B6  0100               	movlb	0	; () banked
  3912  0013B8  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3913  0013BA  B4D8               	btfsc	status,2,c
  3914  0013BC  D02C               	goto	l2314
  3915                           
  3916                           ; BSR set to: 0
  3917  0013BE  0E01               	movlw	1
  3918  0013C0  0100               	movlb	0	; () banked
  3919  0013C2  6F64               	movwf	___awdiv@counter& (0+255),b
  3920  0013C4  D006               	goto	l2300
  3921  0013C6                     l2298:
  3922                           
  3923                           ; BSR set to: 0
  3924  0013C6  0100               	movlb	0	; () banked
  3925  0013C8  90D8               	bcf	status,0,c
  3926  0013CA  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  3927  0013CC  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3928  0013CE  0100               	movlb	0	; () banked
  3929  0013D0  2B64               	incf	___awdiv@counter& (0+255),f,b
  3930  0013D2                     l2300:
  3931                           
  3932                           ; BSR set to: 0
  3933  0013D2  0100               	movlb	0	; () banked
  3934  0013D4  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3935  0013D6  D7F7               	goto	l2298
  3936  0013D8                     l2302:
  3937                           
  3938                           ; BSR set to: 0
  3939  0013D8  0100               	movlb	0	; () banked
  3940  0013DA  90D8               	bcf	status,0,c
  3941  0013DC  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  3942  0013DE  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3943                           
  3944                           ; BSR set to: 0
  3945  0013E0  0100               	movlb	0	; () banked
  3946  0013E2  5162               	movf	___awdiv@divisor& (0+255),w,b
  3947  0013E4  0100               	movlb	0	; () banked
  3948  0013E6  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  3949  0013E8  0100               	movlb	0	; () banked
  3950  0013EA  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3951  0013EC  0100               	movlb	0	; () banked
  3952  0013EE  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3953  0013F0  A0D8               	btfss	status,0,c
  3954  0013F2  D00A               	goto	l2310
  3955                           
  3956                           ; BSR set to: 0
  3957  0013F4  0100               	movlb	0	; () banked
  3958  0013F6  5162               	movf	___awdiv@divisor& (0+255),w,b
  3959  0013F8  0100               	movlb	0	; () banked
  3960  0013FA  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  3961  0013FC  0100               	movlb	0	; () banked
  3962  0013FE  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3963  001400  0100               	movlb	0	; () banked
  3964  001402  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3965                           
  3966                           ; BSR set to: 0
  3967  001404  0100               	movlb	0	; () banked
  3968  001406  8166               	bsf	___awdiv@quotient& (0+255),0,b
  3969  001408                     l2310:
  3970                           
  3971                           ; BSR set to: 0
  3972  001408  0100               	movlb	0	; () banked
  3973  00140A  90D8               	bcf	status,0,c
  3974  00140C  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3975  00140E  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  3976                           
  3977                           ; BSR set to: 0
  3978  001410  0100               	movlb	0	; () banked
  3979  001412  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  3980  001414  D7E1               	goto	l2302
  3981  001416                     l2314:
  3982                           
  3983                           ; BSR set to: 0
  3984  001416  0100               	movlb	0	; () banked
  3985  001418  5165               	movf	___awdiv@sign& (0+255),w,b
  3986  00141A  0100               	movlb	0	; () banked
  3987  00141C  B4D8               	btfsc	status,2,c
  3988  00141E  D005               	goto	l2318
  3989                           
  3990                           ; BSR set to: 0
  3991  001420  0100               	movlb	0	; () banked
  3992  001422  6D66               	negf	___awdiv@quotient& (0+255),b
  3993  001424  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3994  001426  B0D8               	btfsc	status,0,c
  3995  001428  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3996  00142A                     l2318:
  3997                           
  3998                           ; BSR set to: 0
  3999  00142A  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4000  00142E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4001  001432  0012               	return	
  4002  001434                     __end_of___awdiv:
  4003                           	opt stack 0
  4004                           tosu	equ	0xFFF
  4005                           tosh	equ	0xFFE
  4006                           tosl	equ	0xFFD
  4007                           pclath	equ	0xFFA
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           postdec1	equ	0xFE5
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _ES_Timer_InitTimer *****************
  4027 ;; Defined at:
  4028 ;;		line 229 in file "ES_Timers.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  Num             1    wreg     unsigned char 
  4031 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  Num             1    4[BANK0 ] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      enum E15473
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4043 ;;      Params:         0       2       0       0
  4044 ;;      Locals:         0       1       0       0
  4045 ;;      Temps:          0       2       0       0
  4046 ;;      Totals:         0       5       0       0
  4047 ;;Total ram usage:        5 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    6
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_ShowPattern
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text18
  4058  001812                     __ptext18:
  4059                           	opt stack 0
  4060  001812                     _ES_Timer_InitTimer:
  4061                           	opt stack 21
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;incstack = 0
  4065                           ;ES_Timer_InitTimer@Num stored from wreg
  4066  001812  0100               	movlb	0	; () banked
  4067  001814  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4068                           
  4069                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4070                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4071                           ;ES_Timers.c: 236: (NewTime == 0) )
  4072  001816  0E10               	movlw	16
  4073  001818  0100               	movlb	0	; () banked
  4074  00181A  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4075  00181C  0012               	return	
  4076                           
  4077                           ; BSR set to: 0
  4078  00181E  0100               	movlb	0	; () banked
  4079  001820  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4080  001822  0D02               	mullw	2
  4081  001824  0E21               	movlw	low _Timer2PostFunc
  4082  001826  24F3               	addwf	prodl,w,c
  4083  001828  6EF6               	movwf	tblptrl,c
  4084  00182A  0E03               	movlw	high _Timer2PostFunc
  4085  00182C  20F4               	addwfc	prodh,w,c
  4086  00182E  6EF7               	movwf	tblptrh,c
  4087  001830                     	if	0	;There are less than 3 active tblptr bytes
  4088  001830                     	endif
  4089  001830  0009               	tblrd		*+
  4090  001832  50F5               	movf	tablat,w,c
  4091  001834  0009               	tblrd		*+
  4092  001836  10F5               	iorwf	tablat,w,c
  4093  001838  B4D8               	btfsc	status,2,c
  4094  00183A  0012               	return	
  4095                           
  4096                           ; BSR set to: 0
  4097  00183C  0100               	movlb	0	; () banked
  4098  00183E  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4099  001840  0100               	movlb	0	; () banked
  4100  001842  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4101  001844  B4D8               	btfsc	status,2,c
  4102  001846  0012               	return	
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4106                           
  4107                           ; BSR set to: 0
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4111                           ;	Return value of _ES_Timer_InitTimer is never used
  4112  001848  0100               	movlb	0	; () banked
  4113  00184A  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4114  00184C  0D02               	mullw	2
  4115  00184E  0E00               	movlw	low _TMR_TimerArray
  4116  001850  24F3               	addwf	prodl,w,c
  4117  001852  6ED9               	movwf	fsr2l,c
  4118  001854  0E01               	movlw	high _TMR_TimerArray
  4119  001856  20F4               	addwfc	prodh,w,c
  4120  001858  6EDA               	movwf	fsr2h,c
  4121  00185A  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4122  00185E  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4126  001862  0100               	movlb	0	; () banked
  4127  001864  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4128  001866  0D02               	mullw	2
  4129  001868  0E01               	movlw	low _BitNum2SetMask
  4130  00186A  24F3               	addwf	prodl,w,c
  4131  00186C  6EF6               	movwf	tblptrl,c
  4132  00186E  0E03               	movlw	high _BitNum2SetMask
  4133  001870  20F4               	addwfc	prodh,w,c
  4134  001872  6EF7               	movwf	tblptrh,c
  4135  001874                     	if	0	;There are less than 3 active tblptr bytes
  4136  001874                     	endif
  4137  001874  0009               	tblrd		*+
  4138  001876  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  4139  00187A  0009               	tblrd		*+
  4140  00187C  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  4141  001880  0100               	movlb	0	; () banked
  4142  001882  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4143  001884  0100               	movlb	0	; () banked
  4144  001886  13DC               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4145  001888  0100               	movlb	0	; () banked
  4146  00188A  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4147  00188C  0100               	movlb	0	; () banked
  4148  00188E  13DD               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4149  001890  0012               	return	
  4150  001892                     __end_of_ES_Timer_InitTimer:
  4151                           	opt stack 0
  4152                           tosu	equ	0xFFF
  4153                           tosh	equ	0xFFE
  4154                           tosl	equ	0xFFD
  4155                           pclath	equ	0xFFA
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1h	equ	0xFE2
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _DotStar_Show *****************
  4175 ;; Defined at:
  4176 ;;		line 76 in file "Pattern_DotStarLED.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  4179 ;;		 -> PixelPattern(152), 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  i               1   89[BANK0 ] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4191 ;;      Params:         0       2       0       0
  4192 ;;      Locals:         0       1       0       0
  4193 ;;      Temps:          0      18       0       0
  4194 ;;      Totals:         0      21       0       0
  4195 ;;Total ram usage:       21 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:   11
  4198 ;; This function calls:
  4199 ;;		_HSV_to_RGB
  4200 ;;		_SPI32_TransmitFrames
  4201 ;; This function is called by:
  4202 ;;		_ShowPattern
  4203 ;;		_StopPattern
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text19
  4208  000CAA                     __ptext19:
  4209                           	opt stack 0
  4210  000CAA                     _DotStar_Show:
  4211                           	opt stack 16
  4212                           
  4213                           ;Pattern_DotStarLED.c: 77: for(uint8_t i=1; i<=Length; i++){
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;incstack = 0
  4217  000CAA  0E01               	movlw	1
  4218  000CAC  0100               	movlb	0	; () banked
  4219  000CAE  6FB9               	movwf	DotStar_Show@i& (0+255),b
  4220  000CB0  D07B               	goto	l2552
  4221  000CB2                     l2546:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;Pattern_DotStarLED.c: 79: PixelFrames[i] = (0xe0000000 | ((uint32_t)Brightness<<24) | *
      +                          (patternPointer+(i-1)));
  4225  000CB2  0EFE               	movlw	254
  4226  000CB4  0100               	movlb	0	; () banked
  4227  000CB6  6FA7               	movwf	??_DotStar_Show& (0+255),b
  4228  000CB8  0EFF               	movlw	255
  4229  000CBA  0100               	movlb	0	; () banked
  4230  000CBC  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  4231  000CBE  0100               	movlb	0	; () banked
  4232  000CC0  51B9               	movf	DotStar_Show@i& (0+255),w,b
  4233  000CC2  0100               	movlb	0	; () banked
  4234  000CC4  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  4235  000CC6  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  4236  000CC8  90D8               	bcf	status,0,c
  4237  000CCA  0100               	movlb	0	; () banked
  4238  000CCC  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  4239  000CCE  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  4240  000CD0  0100               	movlb	0	; () banked
  4241  000CD2  51A7               	movf	??_DotStar_Show& (0+255),w,b
  4242  000CD4  0100               	movlb	0	; () banked
  4243  000CD6  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  4244  000CD8  0100               	movlb	0	; () banked
  4245  000CDA  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  4246  000CDC  0100               	movlb	0	; () banked
  4247  000CDE  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  4248  000CE0  0100               	movlb	0	; () banked
  4249  000CE2  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  4250  000CE4  0100               	movlb	0	; () banked
  4251  000CE6  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  4252  000CE8  6ED9               	movwf	fsr2l,c
  4253  000CEA  0100               	movlb	0	; () banked
  4254  000CEC  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  4255  000CEE  0100               	movlb	0	; () banked
  4256  000CF0  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  4257  000CF2  6EDA               	movwf	fsr2h,c
  4258  000CF4  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  4259  000CF8  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  4260  000CFC  C0F8  F0AD         	movff	_Brightness,??_DotStar_Show+6
  4261  000D00  0100               	movlb	0	; () banked
  4262  000D02  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  4263  000D04  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  4264  000D06  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  4265  000D08  C0AD  F0B0         	movff	??_DotStar_Show+6,??_DotStar_Show+9
  4266  000D0C  0100               	movlb	0	; () banked
  4267  000D0E  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  4268  000D10  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  4269  000D12  6BAD               	clrf	(??_DotStar_Show+6)& (0+255),b
  4270  000D14  0100               	movlb	0	; () banked
  4271  000D16  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  4272  000D18  0100               	movlb	0	; () banked
  4273  000D1A  11AD               	iorwf	(??_DotStar_Show+6)& (0+255),w,b
  4274  000D1C  0100               	movlb	0	; () banked
  4275  000D1E  6FB1               	movwf	(??_DotStar_Show+10)& (0+255),b
  4276  000D20  0100               	movlb	0	; () banked
  4277  000D22  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  4278  000D24  0100               	movlb	0	; () banked
  4279  000D26  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  4280  000D28  0100               	movlb	0	; () banked
  4281  000D2A  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  4282  000D2C  0E00               	movlw	0
  4283  000D2E  0100               	movlb	0	; () banked
  4284  000D30  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  4285  000D32  0100               	movlb	0	; () banked
  4286  000D34  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  4287  000D36  0E00               	movlw	0
  4288  000D38  0100               	movlb	0	; () banked
  4289  000D3A  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  4290  000D3C  0100               	movlb	0	; () banked
  4291  000D3E  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  4292  000D40  0E00               	movlw	0
  4293  000D42  0100               	movlb	0	; () banked
  4294  000D44  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  4295  000D46  0100               	movlb	0	; () banked
  4296  000D48  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  4297  000D4A  0E00               	movlw	0
  4298  000D4C  0100               	movlb	0	; () banked
  4299  000D4E  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  4300  000D50  0100               	movlb	0	; () banked
  4301  000D52  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  4302  000D54  0E00               	movlw	0
  4303  000D56  0100               	movlb	0	; () banked
  4304  000D58  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  4305  000D5A  0100               	movlb	0	; () banked
  4306  000D5C  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  4307  000D5E  0EE0               	movlw	224
  4308  000D60  0100               	movlb	0	; () banked
  4309  000D62  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  4310  000D64  0100               	movlb	0	; () banked
  4311  000D66  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  4312  000D68  0100               	movlb	0	; () banked
  4313  000D6A  51B9               	movf	DotStar_Show@i& (0+255),w,b
  4314  000D6C  0D04               	mullw	4
  4315  000D6E  0EB8               	movlw	low _PixelFrames
  4316  000D70  24F3               	addwf	prodl,w,c
  4317  000D72  6ED9               	movwf	fsr2l,c
  4318  000D74  0E01               	movlw	high _PixelFrames
  4319  000D76  20F4               	addwfc	prodh,w,c
  4320  000D78  6EDA               	movwf	fsr2h,c
  4321  000D7A  C0B5  FFDE         	movff	??_DotStar_Show+14,postinc2
  4322  000D7E  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  4323  000D82  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  4324  000D86  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;Pattern_DotStarLED.c: 83: HSV_to_RGB(PixelFrames+i);
  4328  000D8A  0100               	movlb	0	; () banked
  4329  000D8C  51B9               	movf	DotStar_Show@i& (0+255),w,b
  4330  000D8E  0D04               	mullw	4
  4331  000D90  0EB8               	movlw	low _PixelFrames
  4332  000D92  24F3               	addwf	prodl,w,c
  4333  000D94  0100               	movlb	0	; () banked
  4334  000D96  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  4335  000D98  0E01               	movlw	high _PixelFrames
  4336  000D9A  20F4               	addwfc	prodh,w,c
  4337  000D9C  0100               	movlb	0	; () banked
  4338  000D9E  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  4339  000DA0  ECDF  F001         	call	_HSV_to_RGB	;wreg free
  4340  000DA4  0100               	movlb	0	; () banked
  4341  000DA6  2BB9               	incf	DotStar_Show@i& (0+255),f,b
  4342  000DA8                     l2552:
  4343                           
  4344                           ; BSR set to: 0
  4345  000DA8  0100               	movlb	0	; () banked
  4346  000DAA  51B9               	movf	DotStar_Show@i& (0+255),w,b
  4347  000DAC  0100               	movlb	0	; () banked
  4348  000DAE  5DE4               	subwf	_Length& (0+255),w,b
  4349  000DB0  B0D8               	btfsc	status,0,c
  4350  000DB2  D77F               	goto	l2546
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;Pattern_DotStarLED.c: 90: }
  4354                           ;Pattern_DotStarLED.c: 93: SPI32_TransmitFrames(PixelFrames,Length+3);
  4355                           
  4356                           ; BSR set to: 0
  4357  000DB4  0EB8               	movlw	low _PixelFrames
  4358  000DB6  0100               	movlb	0	; () banked
  4359  000DB8  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  4360  000DBA  0E01               	movlw	high _PixelFrames
  4361  000DBC  0100               	movlb	0	; () banked
  4362  000DBE  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  4363  000DC0  0100               	movlb	0	; () banked
  4364  000DC2  51E4               	movf	_Length& (0+255),w,b
  4365  000DC4  0F03               	addlw	3
  4366  000DC6  0100               	movlb	0	; () banked
  4367  000DC8  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  4368  000DCA  ECFF  F00E         	call	_SPI32_TransmitFrames	;wreg free
  4369  000DCE  0012               	return		;funcret
  4370  000DD0                     __end_of_DotStar_Show:
  4371                           	opt stack 0
  4372                           tosu	equ	0xFFF
  4373                           tosh	equ	0xFFE
  4374                           tosl	equ	0xFFD
  4375                           pclath	equ	0xFFA
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postdec1	equ	0xFE5
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _SPI32_TransmitFrames *****************
  4395 ;; Defined at:
  4396 ;;		line 239 in file "SPI32_ControlService.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  4399 ;;		 -> PixelFrames(316), 
  4400 ;;  numFrames       1   34[BANK0 ] unsigned char 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       3       0       0
  4413 ;;      Locals:         0       3       0       0
  4414 ;;      Temps:          0       0       0       0
  4415 ;;      Totals:         0       6       0       0
  4416 ;;Total ram usage:        6 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:   10
  4419 ;; This function calls:
  4420 ;;		_PostSPI32ControlService
  4421 ;; This function is called by:
  4422 ;;		_DotStar_Show
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text20
  4427  001DFE                     __ptext20:
  4428                           	opt stack 0
  4429  001DFE                     _SPI32_TransmitFrames:
  4430                           	opt stack 16
  4431                           
  4432                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  4433                           
  4434                           ;incstack = 0
  4435  001DFE  0100               	movlb	0	; () banked
  4436  001E00  05E0               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  4437  001E02  A4D8               	btfss	status,2,c
  4438  001E04  0012               	return	
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  4442  001E06  0E00               	movlw	0
  4443  001E08  0100               	movlb	0	; () banked
  4444  001E0A  6FE3               	movwf	_FrameIndex& (0+255),b
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  4448  001E0C  C080  F0D8         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  4449  001E10  C081  F0D9         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  4453  001E14  C082  F0E6         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  4457                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  4458  001E18  0E09               	movlw	9
  4459  001E1A  0100               	movlb	0	; () banked
  4460  001E1C  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  4464  001E1E  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  4465  001E22  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  4466  001E26  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  4467  001E2A  EC63  F00F         	call	_PostSPI32ControlService	;wreg free
  4468  001E2E  0012               	return	
  4469  001E30                     __end_of_SPI32_TransmitFrames:
  4470                           	opt stack 0
  4471                           tosu	equ	0xFFF
  4472                           tosh	equ	0xFFE
  4473                           tosl	equ	0xFFD
  4474                           pclath	equ	0xFFA
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1h	equ	0xFE2
  4485                           fsr1l	equ	0xFE1
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function _PostPatternControlService *****************
  4494 ;; Defined at:
  4495 ;;		line 135 in file "Pattern_ControlService.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  1    wreg      unsigned char 
  4502 ;; Registers used:
  4503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4509 ;;      Params:         0       3       0       0
  4510 ;;      Locals:         0       0       0       0
  4511 ;;      Temps:          0       0       0       0
  4512 ;;      Totals:         0       3       0       0
  4513 ;;Total ram usage:        3 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    9
  4516 ;; This function calls:
  4517 ;;		_ES_PostToService
  4518 ;; This function is called by:
  4519 ;;		_RunPatternControlService
  4520 ;;		_ES_Timer_Tick_Resp
  4521 ;;		_PostToList
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text21
  4526  001F2E                     __ptext21:
  4527                           	opt stack 0
  4528  001F2E                     _PostPatternControlService:
  4529                           	opt stack 18
  4530                           
  4531                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  4532                           
  4533                           ;incstack = 0
  4534  001F2E  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  4535  001F32  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4536  001F36  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4537  001F3A  0100               	movlb	0	; () banked
  4538  001F3C  51E5               	movf	_MyPriority& (0+255),w,b
  4539  001F3E  ECC1  F00C         	call	_ES_PostToService
  4540  001F42  0012               	return	
  4541  001F44                     __end_of_PostPatternControlService:
  4542                           	opt stack 0
  4543                           tosu	equ	0xFFF
  4544                           tosh	equ	0xFFE
  4545                           tosl	equ	0xFFD
  4546                           pclath	equ	0xFFA
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           postinc0	equ	0xFEE
  4554                           wreg	equ	0xFE8
  4555                           postdec1	equ	0xFE5
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _PostSPI32ControlService *****************
  4566 ;; Defined at:
  4567 ;;		line 117 in file "SPI32_ControlService.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;		None
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      unsigned char 
  4574 ;; Registers used:
  4575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4581 ;;      Params:         0       3       0       0
  4582 ;;      Locals:         0       0       0       0
  4583 ;;      Temps:          0       0       0       0
  4584 ;;      Totals:         0       3       0       0
  4585 ;;Total ram usage:        3 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    9
  4588 ;; This function calls:
  4589 ;;		_ES_PostToService
  4590 ;; This function is called by:
  4591 ;;		_SPI32_TransmitFrames
  4592 ;;		_ES_Timer_Tick_Resp
  4593 ;;		_PostToList
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text22
  4598  001EC6                     __ptext22:
  4599                           	opt stack 0
  4600  001EC6                     _PostSPI32ControlService:
  4601                           	opt stack 0
  4602                           
  4603                           ;Skip over the trampoline to the duplicate function for level 2
  4604  001EC6  B250               	btfsc	btemp,1,c
  4605  001EC8  EFA2  F00F         	goto	i2_PostSPI32ControlService
  4606  001ECC                     _PostSPI32ControlService$intlevel0:
  4607                           	opt stack 18
  4608                           
  4609                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  4610                           
  4611                           ;incstack = 0
  4612  001ECC  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  4613  001ED0  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4614  001ED4  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4615  001ED8  0100               	movlb	0	; () banked
  4616  001EDA  51E1               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  4617  001EDC  ECC1  F00C         	call	_ES_PostToService
  4618  001EE0  0012               	return	
  4619  001EE2                     __end_of_PostSPI32ControlService:
  4620                           	opt stack 0
  4621                           tosu	equ	0xFFF
  4622                           tosh	equ	0xFFE
  4623                           tosl	equ	0xFFD
  4624                           pclath	equ	0xFFA
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _HSV_to_RGB *****************
  4644 ;; Defined at:
  4645 ;;		line 49 in file "Pattern_HSV_Convert.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  4648 ;;		 -> PixelFrames(316), 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  v               2   67[BANK0 ] unsigned int 
  4651 ;;  p               2   65[BANK0 ] unsigned int 
  4652 ;;  s               2   63[BANK0 ] unsigned int 
  4653 ;;  t               2   59[BANK0 ] unsigned int 
  4654 ;;  q               2   57[BANK0 ] unsigned int 
  4655 ;;  b               2   55[BANK0 ] unsigned int 
  4656 ;;  g               2   53[BANK0 ] unsigned int 
  4657 ;;  r               2   51[BANK0 ] unsigned int 
  4658 ;;  fpart           2   49[BANK0 ] unsigned int 
  4659 ;;  region          2   47[BANK0 ] unsigned int 
  4660 ;;  h               2   45[BANK0 ] unsigned int 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4670 ;;      Params:         0       2       0       0
  4671 ;;      Locals:         0      24       0       0
  4672 ;;      Temps:          0      24       0       0
  4673 ;;      Totals:         0      50       0       0
  4674 ;;Total ram usage:       50 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    7
  4677 ;; This function calls:
  4678 ;;		___lwdiv
  4679 ;;		___wmul
  4680 ;; This function is called by:
  4681 ;;		_DotStar_Show
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text23
  4686  0003BE                     __ptext23:
  4687                           	opt stack 0
  4688  0003BE                     _HSV_to_RGB:
  4689                           	opt stack 19
  4690                           
  4691                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  4692                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  4693                           
  4694                           ;incstack = 0
  4695  0003BE  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  4696  0003C2  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  4697  0003C6  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  4698  0003CA  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  4699  0003CE  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  4700  0003D2  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  4701  0003D6  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  4702  0003DA  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  4703  0003DE  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  4704  0003E2  0100               	movlb	0	; () banked
  4705  0003E4  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  4706  0003E6  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  4707  0003EA  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  4711  0003EE  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  4712  0003F2  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  4713  0003F6  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  4714  0003FA  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  4715  0003FE  0EF0               	movlw	240
  4716  000400  0100               	movlb	0	; () banked
  4717  000402  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  4718  000404  0100               	movlb	0	; () banked
  4719  000406  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  4720  000408  0100               	movlb	0	; () banked
  4721  00040A  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  4725  00040C  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  4726  000410  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  4727  000414  0E04               	movlw	4
  4728  000416  0100               	movlb	0	; () banked
  4729  000418  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  4730  00041A                     u1275:
  4731  00041A  0100               	movlb	0	; () banked
  4732  00041C  90D8               	bcf	status,0,c
  4733  00041E  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  4734  000420  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  4735  000422  0100               	movlb	0	; () banked
  4736  000424  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  4737  000426  D7F9               	goto	u1275
  4738  000428  0100               	movlb	0	; () banked
  4739  00042A  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  4740  00042C  0100               	movlb	0	; () banked
  4741  00042E  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  4742  000430  0100               	movlb	0	; () banked
  4743  000432  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  4744  000434  0100               	movlb	0	; () banked
  4745  000436  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  4749  000438  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  4750  00043C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  4751  000440  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  4752  000444  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  4753  000448  0E0F               	movlw	15
  4754  00044A  0100               	movlb	0	; () banked
  4755  00044C  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  4756  00044E  0100               	movlb	0	; () banked
  4757  000450  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  4758  000452  0100               	movlb	0	; () banked
  4759  000454  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  4763  000456  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  4764  00045A  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  4765  00045E  0100               	movlb	0	; () banked
  4766  000460  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  4767  000462  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  4768  000464  0EF0               	movlw	240
  4769  000466  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  4770  000468  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  4771  00046A  0B0F               	andlw	15
  4772  00046C  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  4773  00046E  0EF0               	movlw	240
  4774  000470  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  4775  000472  0100               	movlb	0	; () banked
  4776  000474  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  4777  000476  0100               	movlb	0	; () banked
  4778  000478  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  4779  00047A  0100               	movlb	0	; () banked
  4780  00047C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  4781  00047E  0100               	movlb	0	; () banked
  4782  000480  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  4786  000482  0100               	movlb	0	; () banked
  4787  000484  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  4788  000486  0100               	movlb	0	; () banked
  4789  000488  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  4790  00048A  A4D8               	btfss	status,2,c
  4791  00048C  D00D               	goto	l2358
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  4795  00048E  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  4796  000492  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  4797  000496  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  4798  00049A  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  4799  00049E  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  4800  0004A2  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  4801                           
  4802                           ;Pattern_HSV_Convert.c: 61: }
  4803  0004A6  D129               	goto	l2378
  4804  0004A8                     l2358:
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;Pattern_HSV_Convert.c: 63: else{
  4808                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  4809  0004A8  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  4810  0004AC  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  4811  0004B0  0E00               	movlw	0
  4812  0004B2  0100               	movlb	0	; () banked
  4813  0004B4  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4814  0004B6  0E2B               	movlw	43
  4815  0004B8  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  4816  0004BA  EC85  F00C         	call	___lwdiv	;wreg free
  4817  0004BE  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  4818  0004C2  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  4819                           
  4820                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  4821  0004C6  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  4822  0004CA  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  4823  0004CE  0E00               	movlw	0
  4824  0004D0  0100               	movlb	0	; () banked
  4825  0004D2  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4826  0004D4  0E2B               	movlw	43
  4827  0004D6  6F68               	movwf	___wmul@multiplicand& (0+255),b
  4828  0004D8  ECCA  F00E         	call	___wmul	;wreg free
  4829  0004DC  0100               	movlb	0	; () banked
  4830  0004DE  1F66               	comf	?___wmul& (0+255),f,b
  4831  0004E0  0100               	movlb	0	; () banked
  4832  0004E2  1F67               	comf	(?___wmul+1)& (0+255),f,b
  4833  0004E4  0100               	movlb	0	; () banked
  4834  0004E6  4B66               	infsnz	?___wmul& (0+255),f,b
  4835  0004E8  2B67               	incf	(?___wmul+1)& (0+255),f,b
  4836  0004EA  0100               	movlb	0	; () banked
  4837  0004EC  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  4838  0004EE  0100               	movlb	0	; () banked
  4839  0004F0  2566               	addwf	?___wmul& (0+255),w,b
  4840  0004F2  0100               	movlb	0	; () banked
  4841  0004F4  6F9D               	movwf	_HSV_to_RGB$1433& (0+255),b
  4842  0004F6  0100               	movlb	0	; () banked
  4843  0004F8  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  4844  0004FA  0100               	movlb	0	; () banked
  4845  0004FC  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  4846  0004FE  0100               	movlb	0	; () banked
  4847  000500  6F9E               	movwf	(_HSV_to_RGB$1433+1)& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  4851  000502  C09D  F066         	movff	_HSV_to_RGB$1433,___wmul@multiplier
  4852  000506  C09E  F067         	movff	_HSV_to_RGB$1433+1,___wmul@multiplier+1
  4853  00050A  0E00               	movlw	0
  4854  00050C  0100               	movlb	0	; () banked
  4855  00050E  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4856  000510  0E06               	movlw	6
  4857  000512  6F68               	movwf	___wmul@multiplicand& (0+255),b
  4858  000514  ECCA  F00E         	call	___wmul	;wreg free
  4859  000518  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  4860  00051C  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  4861                           
  4862                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  4863  000520  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  4864  000524  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  4865  000528  0100               	movlb	0	; () banked
  4866  00052A  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  4867  00052C  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  4868  00052E  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  4869  000530  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  4870  000532  0EFF               	movlw	255
  4871  000534  0100               	movlb	0	; () banked
  4872  000536  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  4873  000538  0100               	movlb	0	; () banked
  4874  00053A  6F66               	movwf	___wmul@multiplier& (0+255),b
  4875  00053C  0E00               	movlw	0
  4876  00053E  0100               	movlb	0	; () banked
  4877  000540  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  4878  000542  0100               	movlb	0	; () banked
  4879  000544  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  4880  000546  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  4881  00054A  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  4882  00054E  ECCA  F00E         	call	___wmul	;wreg free
  4883  000552  0100               	movlb	0	; () banked
  4884  000554  5167               	movf	(?___wmul+1)& (0+255),w,b
  4885  000556  0100               	movlb	0	; () banked
  4886  000558  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  4887  00055A  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  4891  00055C  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  4892  000560  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  4893  000564  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  4894  000568  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  4895  00056C  ECCA  F00E         	call	___wmul	;wreg free
  4896  000570  0100               	movlb	0	; () banked
  4897  000572  C067  F066         	movff	?___wmul+1,?___wmul
  4898  000576  0100               	movlb	0	; () banked
  4899  000578  6B67               	clrf	(?___wmul+1)& (0+255),b
  4900  00057A  0100               	movlb	0	; () banked
  4901  00057C  1F66               	comf	?___wmul& (0+255),f,b
  4902  00057E  0100               	movlb	0	; () banked
  4903  000580  1F67               	comf	(?___wmul+1)& (0+255),f,b
  4904  000582  0100               	movlb	0	; () banked
  4905  000584  4B66               	infsnz	?___wmul& (0+255),f,b
  4906  000586  2B67               	incf	(?___wmul+1)& (0+255),f,b
  4907  000588  0EFF               	movlw	255
  4908  00058A  0100               	movlb	0	; () banked
  4909  00058C  2566               	addwf	?___wmul& (0+255),w,b
  4910  00058E  0100               	movlb	0	; () banked
  4911  000590  6F9D               	movwf	_HSV_to_RGB$1433& (0+255),b
  4912  000592  0E00               	movlw	0
  4913  000594  0100               	movlb	0	; () banked
  4914  000596  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  4915  000598  0100               	movlb	0	; () banked
  4916  00059A  6F9E               	movwf	(_HSV_to_RGB$1433+1)& (0+255),b
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  4920  00059C  C09D  F066         	movff	_HSV_to_RGB$1433,___wmul@multiplier
  4921  0005A0  C09E  F067         	movff	_HSV_to_RGB$1433+1,___wmul@multiplier+1
  4922  0005A4  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  4923  0005A8  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  4924  0005AC  ECCA  F00E         	call	___wmul	;wreg free
  4925  0005B0  0100               	movlb	0	; () banked
  4926  0005B2  5167               	movf	(?___wmul+1)& (0+255),w,b
  4927  0005B4  0100               	movlb	0	; () banked
  4928  0005B6  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  4929  0005B8  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  4933  0005BA  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  4934  0005BE  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  4935  0005C2  0100               	movlb	0	; () banked
  4936  0005C4  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  4937  0005C6  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  4938  0005C8  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  4939  0005CA  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  4940  0005CC  0EFF               	movlw	255
  4941  0005CE  0100               	movlb	0	; () banked
  4942  0005D0  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  4943  0005D2  0100               	movlb	0	; () banked
  4944  0005D4  6F66               	movwf	___wmul@multiplier& (0+255),b
  4945  0005D6  0E00               	movlw	0
  4946  0005D8  0100               	movlb	0	; () banked
  4947  0005DA  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  4948  0005DC  0100               	movlb	0	; () banked
  4949  0005DE  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  4950  0005E0  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  4951  0005E4  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  4952  0005E8  ECCA  F00E         	call	___wmul	;wreg free
  4953  0005EC  0100               	movlb	0	; () banked
  4954  0005EE  C067  F066         	movff	?___wmul+1,?___wmul
  4955  0005F2  0100               	movlb	0	; () banked
  4956  0005F4  6B67               	clrf	(?___wmul+1)& (0+255),b
  4957  0005F6  0100               	movlb	0	; () banked
  4958  0005F8  1F66               	comf	?___wmul& (0+255),f,b
  4959  0005FA  0100               	movlb	0	; () banked
  4960  0005FC  1F67               	comf	(?___wmul+1)& (0+255),f,b
  4961  0005FE  0100               	movlb	0	; () banked
  4962  000600  4B66               	infsnz	?___wmul& (0+255),f,b
  4963  000602  2B67               	incf	(?___wmul+1)& (0+255),f,b
  4964  000604  0EFF               	movlw	255
  4965  000606  0100               	movlb	0	; () banked
  4966  000608  2566               	addwf	?___wmul& (0+255),w,b
  4967  00060A  0100               	movlb	0	; () banked
  4968  00060C  6F9D               	movwf	_HSV_to_RGB$1433& (0+255),b
  4969  00060E  0E00               	movlw	0
  4970  000610  0100               	movlb	0	; () banked
  4971  000612  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  4972  000614  0100               	movlb	0	; () banked
  4973  000616  6F9E               	movwf	(_HSV_to_RGB$1433+1)& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  4977  000618  C09D  F066         	movff	_HSV_to_RGB$1433,___wmul@multiplier
  4978  00061C  C09E  F067         	movff	_HSV_to_RGB$1433+1,___wmul@multiplier+1
  4979  000620  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  4980  000624  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  4981  000628  ECCA  F00E         	call	___wmul	;wreg free
  4982  00062C  0100               	movlb	0	; () banked
  4983  00062E  5167               	movf	(?___wmul+1)& (0+255),w,b
  4984  000630  0100               	movlb	0	; () banked
  4985  000632  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  4986  000634  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  4987                           
  4988                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  4989  000636  D046               	goto	l2376
  4990  000638                     l568:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  4994  000638  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  4995  00063C  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  4996  000640  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  4997  000644  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  4998  000648  D008               	goto	L9
  4999  00064A                     l570:
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  5003  00064A  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  5004  00064E  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  5005  000652  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  5006  000656  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  5007  00065A                     L9:
  5008  00065A  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  5009  00065E  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  5010  000662  D04B               	goto	l2378
  5011  000664                     l571:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  5015  000664  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  5016  000668  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  5017  00066C  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  5018  000670  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  5019  000674  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  5020  000678  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  5021  00067C  D03E               	goto	l2378
  5022  00067E                     l572:
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  5026  00067E  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  5027  000682  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  5028  000686  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  5029  00068A  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  5030  00068E  D008               	goto	L10
  5031  000690                     l573:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  5035  000690  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  5036  000694  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  5037  000698  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  5038  00069C  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  5039  0006A0                     L10:
  5040  0006A0  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  5041  0006A4  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  5042  0006A8  D028               	goto	l2378
  5043  0006AA                     l574:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  5047  0006AA  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  5048  0006AE  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  5049  0006B2  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  5050  0006B6  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  5051  0006BA  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  5052  0006BE  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;Pattern_HSV_Convert.c: 88: }
  5056  0006C2  D01B               	goto	l2378
  5057  0006C4                     l2376:
  5058                           
  5059                           ; BSR set to: 0
  5060  0006C4  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  5061  0006C8  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  5062                           
  5063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5064                           ; Switch size 1, requested type "space"
  5065                           ; Number of cases is 1, Range of values is 0 to 0
  5066                           ; switch strategies available:
  5067                           ; Name         Instructions Cycles
  5068                           ; simple_byte            4     3 (average)
  5069                           ;	Chosen strategy is simple_byte
  5070  0006CC  0100               	movlb	0	; () banked
  5071  0006CE  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  5072  0006D0  0A00               	xorlw	0	; case 0
  5073  0006D2  A4D8               	btfss	status,2,c
  5074  0006D4  D7EA               	goto	l574
  5075                           
  5076                           ; BSR set to: 0
  5077                           ; Switch size 1, requested type "space"
  5078                           ; Number of cases is 5, Range of values is 0 to 4
  5079                           ; switch strategies available:
  5080                           ; Name         Instructions Cycles
  5081                           ; simple_byte           16     9 (average)
  5082                           ;	Chosen strategy is simple_byte
  5083  0006D6  0100               	movlb	0	; () banked
  5084  0006D8  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  5085  0006DA  0A00               	xorlw	0	; case 0
  5086  0006DC  B4D8               	btfsc	status,2,c
  5087  0006DE  D7AC               	goto	l568
  5088  0006E0  0A01               	xorlw	1	; case 1
  5089  0006E2  B4D8               	btfsc	status,2,c
  5090  0006E4  D7B2               	goto	l570
  5091  0006E6  0A03               	xorlw	3	; case 2
  5092  0006E8  B4D8               	btfsc	status,2,c
  5093  0006EA  D7BC               	goto	l571
  5094  0006EC  0A01               	xorlw	1	; case 3
  5095  0006EE  B4D8               	btfsc	status,2,c
  5096  0006F0  D7C6               	goto	l572
  5097  0006F2  0A07               	xorlw	7	; case 4
  5098  0006F4  B4D8               	btfsc	status,2,c
  5099  0006F6  D7CC               	goto	l573
  5100  0006F8  D7D8               	goto	l574
  5101  0006FA                     l2378:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;Pattern_HSV_Convert.c: 89: }
  5105                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  5106  0006FA  0100               	movlb	0	; () banked
  5107  0006FC  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  5108  0006FE  0100               	movlb	0	; () banked
  5109  000700  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  5110  000702  0100               	movlb	0	; () banked
  5111  000704  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  5112  000706  0100               	movlb	0	; () banked
  5113  000708  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  5114  00070A  0100               	movlb	0	; () banked
  5115  00070C  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  5116  00070E  0100               	movlb	0	; () banked
  5117  000710  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  5118  000712  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  5119  000716  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  5120  00071A  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  5121  00071E  0100               	movlb	0	; () banked
  5122  000720  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  5123  000722  0100               	movlb	0	; () banked
  5124  000724  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  5125  000726  0100               	movlb	0	; () banked
  5126  000728  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  5127  00072A  0100               	movlb	0	; () banked
  5128  00072C  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  5129  00072E  0100               	movlb	0	; () banked
  5130  000730  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  5131  000732  0100               	movlb	0	; () banked
  5132  000734  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  5133  000736  0100               	movlb	0	; () banked
  5134  000738  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  5135  00073A  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  5136  00073E  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  5137  000742  0100               	movlb	0	; () banked
  5138  000744  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  5139  000746  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  5140  000748  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  5141  00074C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  5142  000750  0E00               	movlw	0
  5143  000752  14DE               	andwf	postinc2,w,c
  5144  000754  0100               	movlb	0	; () banked
  5145  000756  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  5146  000758  0E00               	movlw	0
  5147  00075A  14DE               	andwf	postinc2,w,c
  5148  00075C  0100               	movlb	0	; () banked
  5149  00075E  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  5150  000760  0E00               	movlw	0
  5151  000762  14DE               	andwf	postinc2,w,c
  5152  000764  0100               	movlb	0	; () banked
  5153  000766  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  5154  000768  0EFF               	movlw	255
  5155  00076A  14DE               	andwf	postinc2,w,c
  5156  00076C  0100               	movlb	0	; () banked
  5157  00076E  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  5158  000770  0100               	movlb	0	; () banked
  5159  000772  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  5160  000774  0100               	movlb	0	; () banked
  5161  000776  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  5162  000778  0100               	movlb	0	; () banked
  5163  00077A  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  5164  00077C  0100               	movlb	0	; () banked
  5165  00077E  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  5166  000780  0100               	movlb	0	; () banked
  5167  000782  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  5168  000784  0100               	movlb	0	; () banked
  5169  000786  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  5170  000788  0100               	movlb	0	; () banked
  5171  00078A  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  5172  00078C  0100               	movlb	0	; () banked
  5173  00078E  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  5174  000790  0100               	movlb	0	; () banked
  5175  000792  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  5176  000794  0100               	movlb	0	; () banked
  5177  000796  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  5178  000798  0100               	movlb	0	; () banked
  5179  00079A  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  5180  00079C  0100               	movlb	0	; () banked
  5181  00079E  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  5182  0007A0  0100               	movlb	0	; () banked
  5183  0007A2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  5184  0007A4  0100               	movlb	0	; () banked
  5185  0007A6  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  5186  0007A8  0100               	movlb	0	; () banked
  5187  0007AA  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  5188  0007AC  0100               	movlb	0	; () banked
  5189  0007AE  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  5190  0007B0  0100               	movlb	0	; () banked
  5191  0007B2  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  5192  0007B4  0100               	movlb	0	; () banked
  5193  0007B6  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  5194  0007B8  0100               	movlb	0	; () banked
  5195  0007BA  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  5196  0007BC  0100               	movlb	0	; () banked
  5197  0007BE  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  5198  0007C0  0100               	movlb	0	; () banked
  5199  0007C2  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  5200  0007C4  0100               	movlb	0	; () banked
  5201  0007C6  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  5202  0007C8  0100               	movlb	0	; () banked
  5203  0007CA  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  5204  0007CC  0100               	movlb	0	; () banked
  5205  0007CE  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  5206  0007D0  0100               	movlb	0	; () banked
  5207  0007D2  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  5208  0007D4  0100               	movlb	0	; () banked
  5209  0007D6  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  5210  0007D8  0100               	movlb	0	; () banked
  5211  0007DA  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  5212  0007DC  0100               	movlb	0	; () banked
  5213  0007DE  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  5214  0007E0  0100               	movlb	0	; () banked
  5215  0007E2  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  5216  0007E4  0100               	movlb	0	; () banked
  5217  0007E6  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  5218  0007E8  0E00               	movlw	0
  5219  0007EA  0100               	movlb	0	; () banked
  5220  0007EC  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  5221  0007EE  0100               	movlb	0	; () banked
  5222  0007F0  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  5223  0007F2  0E00               	movlw	0
  5224  0007F4  0100               	movlb	0	; () banked
  5225  0007F6  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  5226  0007F8  0100               	movlb	0	; () banked
  5227  0007FA  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  5228  0007FC  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  5229  000800  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  5230  000804  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  5231  000808  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  5232  00080C  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  5233  000810  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  5234  000814  0012               	return	
  5235  000816                     __end_of_HSV_to_RGB:
  5236                           	opt stack 0
  5237                           tosu	equ	0xFFF
  5238                           tosh	equ	0xFFE
  5239                           tosl	equ	0xFFD
  5240                           pclath	equ	0xFFA
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1h	equ	0xFE2
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function ___lwdiv *****************
  5260 ;; Defined at:
  5261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  dividend        2   12[BANK0 ] unsigned int 
  5264 ;;  divisor         2   14[BANK0 ] unsigned int 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  quotient        2   16[BANK0 ] unsigned int 
  5267 ;;  counter         1   18[BANK0 ] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  2   12[BANK0 ] unsigned int 
  5270 ;; Registers used:
  5271 ;;		wreg, status,2, status,0
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5277 ;;      Params:         0       4       0       0
  5278 ;;      Locals:         0       3       0       0
  5279 ;;      Temps:          0       0       0       0
  5280 ;;      Totals:         0       7       0       0
  5281 ;;Total ram usage:        7 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    6
  5284 ;; This function calls:
  5285 ;;		Nothing
  5286 ;; This function is called by:
  5287 ;;		_UpdatePattern
  5288 ;;		_HSV_to_RGB
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text24
  5293  00190A                     __ptext24:
  5294                           	opt stack 0
  5295  00190A                     ___lwdiv:
  5296                           	opt stack 19
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;incstack = 0
  5300  00190A  0E00               	movlw	0
  5301  00190C  0100               	movlb	0	; () banked
  5302  00190E  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5303  001910  0E00               	movlw	0
  5304  001912  6F70               	movwf	___lwdiv@quotient& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307  001914  0100               	movlb	0	; () banked
  5308  001916  516E               	movf	___lwdiv@divisor& (0+255),w,b
  5309  001918  0100               	movlb	0	; () banked
  5310  00191A  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5311  00191C  B4D8               	btfsc	status,2,c
  5312  00191E  D02C               	goto	l988
  5313                           
  5314                           ; BSR set to: 0
  5315  001920  0E01               	movlw	1
  5316  001922  0100               	movlb	0	; () banked
  5317  001924  6F72               	movwf	___lwdiv@counter& (0+255),b
  5318  001926  D006               	goto	l2330
  5319  001928                     l2328:
  5320                           
  5321                           ; BSR set to: 0
  5322  001928  0100               	movlb	0	; () banked
  5323  00192A  90D8               	bcf	status,0,c
  5324  00192C  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  5325  00192E  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5326  001930  0100               	movlb	0	; () banked
  5327  001932  2B72               	incf	___lwdiv@counter& (0+255),f,b
  5328  001934                     l2330:
  5329                           
  5330                           ; BSR set to: 0
  5331  001934  0100               	movlb	0	; () banked
  5332  001936  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5333  001938  D7F7               	goto	l2328
  5334  00193A                     l2332:
  5335                           
  5336                           ; BSR set to: 0
  5337  00193A  0100               	movlb	0	; () banked
  5338  00193C  90D8               	bcf	status,0,c
  5339  00193E  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  5340  001940  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343  001942  0100               	movlb	0	; () banked
  5344  001944  516E               	movf	___lwdiv@divisor& (0+255),w,b
  5345  001946  0100               	movlb	0	; () banked
  5346  001948  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  5347  00194A  0100               	movlb	0	; () banked
  5348  00194C  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5349  00194E  0100               	movlb	0	; () banked
  5350  001950  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5351  001952  A0D8               	btfss	status,0,c
  5352  001954  D00A               	goto	l2340
  5353                           
  5354                           ; BSR set to: 0
  5355  001956  0100               	movlb	0	; () banked
  5356  001958  516E               	movf	___lwdiv@divisor& (0+255),w,b
  5357  00195A  0100               	movlb	0	; () banked
  5358  00195C  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  5359  00195E  0100               	movlb	0	; () banked
  5360  001960  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5361  001962  0100               	movlb	0	; () banked
  5362  001964  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5363                           
  5364                           ; BSR set to: 0
  5365  001966  0100               	movlb	0	; () banked
  5366  001968  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  5367  00196A                     l2340:
  5368                           
  5369                           ; BSR set to: 0
  5370  00196A  0100               	movlb	0	; () banked
  5371  00196C  90D8               	bcf	status,0,c
  5372  00196E  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5373  001970  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  5374                           
  5375                           ; BSR set to: 0
  5376  001972  0100               	movlb	0	; () banked
  5377  001974  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  5378  001976  D7E1               	goto	l2332
  5379  001978                     l988:
  5380                           
  5381                           ; BSR set to: 0
  5382  001978  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  5383  00197C  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5384                           
  5385                           ; BSR set to: 0
  5386  001980  0012               	return		;funcret
  5387  001982                     __end_of___lwdiv:
  5388                           	opt stack 0
  5389                           tosu	equ	0xFFF
  5390                           tosh	equ	0xFFE
  5391                           tosl	equ	0xFFD
  5392                           pclath	equ	0xFFA
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           postdec1	equ	0xFE5
  5402                           fsr1h	equ	0xFE2
  5403                           fsr1l	equ	0xFE1
  5404                           indf2	equ	0xFDF
  5405                           postinc2	equ	0xFDE
  5406                           postdec2	equ	0xFDD
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _PausePattern *****************
  5412 ;; Defined at:
  5413 ;;		line 296 in file "Pattern_ControlService.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      void 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5427 ;;      Params:         0       0       0       0
  5428 ;;      Locals:         0       0       0       0
  5429 ;;      Temps:          0       0       0       0
  5430 ;;      Totals:         0       0       0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    7
  5434 ;; This function calls:
  5435 ;;		_ES_Timer_StopTimer
  5436 ;; This function is called by:
  5437 ;;		_RunPatternControlService
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text25
  5442  001F7E                     __ptext25:
  5443                           	opt stack 0
  5444  001F7E                     _PausePattern:
  5445                           	opt stack 21
  5446                           
  5447                           ;Pattern_ControlService.c: 298: ES_Timer_StopTimer(0);
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;incstack = 0
  5451  001F7E  0E00               	movlw	0
  5452  001F80  ECBD  F00D         	call	_ES_Timer_StopTimer
  5453  001F84  0012               	return		;funcret
  5454  001F86                     __end_of_PausePattern:
  5455                           	opt stack 0
  5456                           tosu	equ	0xFFF
  5457                           tosh	equ	0xFFE
  5458                           tosl	equ	0xFFD
  5459                           pclath	equ	0xFFA
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           postdec1	equ	0xFE5
  5469                           fsr1h	equ	0xFE2
  5470                           fsr1l	equ	0xFE1
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           postdec2	equ	0xFDD
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _ES_Timer_StopTimer *****************
  5479 ;; Defined at:
  5480 ;;		line 205 in file "ES_Timers.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  Num             1    wreg     unsigned char 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  Num             1    4[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      enum E15473
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5494 ;;      Params:         0       0       0       0
  5495 ;;      Locals:         0       1       0       0
  5496 ;;      Temps:          0       4       0       0
  5497 ;;      Totals:         0       5       0       0
  5498 ;;Total ram usage:        5 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    6
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_StopPattern
  5505 ;;		_PausePattern
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text26
  5510  001B7A                     __ptext26:
  5511                           	opt stack 0
  5512  001B7A                     _ES_Timer_StopTimer:
  5513                           	opt stack 21
  5514                           
  5515                           ;incstack = 0
  5516                           ;ES_Timer_StopTimer@Num stored from wreg
  5517  001B7A  0100               	movlb	0	; () banked
  5518  001B7C  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  5519                           
  5520                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  5521  001B7E  0E0F               	movlw	15
  5522  001B80  0100               	movlb	0	; () banked
  5523  001B82  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  5524  001B84  D001               	goto	l2494
  5525  001B86  0012               	return	
  5526  001B88                     l2494:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  5530  001B88  0100               	movlb	0	; () banked
  5531  001B8A  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  5532  001B8C  0D02               	mullw	2
  5533  001B8E  0E01               	movlw	low _BitNum2SetMask
  5534  001B90  24F3               	addwf	prodl,w,c
  5535  001B92  6EF6               	movwf	tblptrl,c
  5536  001B94  0E03               	movlw	high _BitNum2SetMask
  5537  001B96  20F4               	addwfc	prodh,w,c
  5538  001B98  6EF7               	movwf	tblptrh,c
  5539  001B9A                     	if	0	;There are less than 3 active tblptr bytes
  5540  001B9A                     	endif
  5541  001B9A  0009               	tblrd		*+
  5542  001B9C  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  5543  001BA0  0009               	tblrd		*+
  5544  001BA2  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  5545  001BA6  0100               	movlb	0	; () banked
  5546  001BA8  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  5547  001BAA  0100               	movlb	0	; () banked
  5548  001BAC  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  5549  001BAE  0100               	movlb	0	; () banked
  5550  001BB0  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  5551  001BB2  0100               	movlb	0	; () banked
  5552  001BB4  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  5553  001BB6  0100               	movlb	0	; () banked
  5554  001BB8  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  5555  001BBA  0100               	movlb	0	; () banked
  5556  001BBC  17DC               	andwf	_TMR_ActiveFlags& (0+255),f,b
  5557  001BBE  0100               	movlb	0	; () banked
  5558  001BC0  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  5559  001BC2  0100               	movlb	0	; () banked
  5560  001BC4  17DD               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  5561  001BC6  0012               	return	
  5562  001BC8                     __end_of_ES_Timer_StopTimer:
  5563                           	opt stack 0
  5564                           tosu	equ	0xFFF
  5565                           tosh	equ	0xFFE
  5566                           tosl	equ	0xFFD
  5567                           pclath	equ	0xFFA
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           postinc0	equ	0xFEE
  5575                           wreg	equ	0xFE8
  5576                           postdec1	equ	0xFE5
  5577                           fsr1h	equ	0xFE2
  5578                           fsr1l	equ	0xFE1
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           postdec2	equ	0xFDD
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _ES_DeQueue *****************
  5587 ;; Defined at:
  5588 ;;		line 164 in file "ES_Queue.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5591 ;;		 -> Queue1(12), Queue0(12), 
  5592 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  5593 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  5596 ;;		 -> Queue1(12), Queue0(12), 
  5597 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  5598 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      unsigned char 
  5601 ;; Registers used:
  5602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5608 ;;      Params:         0       4       0       0
  5609 ;;      Locals:         0       4       0       0
  5610 ;;      Temps:          0       2       0       0
  5611 ;;      Totals:         0      10       0       0
  5612 ;;Total ram usage:       10 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    7
  5615 ;; This function calls:
  5616 ;;		___lbmod
  5617 ;;		___wmul
  5618 ;; This function is called by:
  5619 ;;		_ES_Run
  5620 ;;		_ES_RecallEvents
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text27
  5625  000B82                     __ptext27:
  5626                           	opt stack 0
  5627  000B82                     _ES_DeQueue:
  5628                           	opt stack 22
  5629                           
  5630                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  5631                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  5632                           ;ES_Queue.c: 168: uint8_t NumLeft;
  5633                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;incstack = 0
  5637  000B82  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  5638  000B86  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  5639                           
  5640                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  5641  000B8A  0100               	movlb	0	; () banked
  5642  000B8C  EE20 F002          	lfsr	2,2
  5643  000B90  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5644  000B92  26D9               	addwf	fsr2l,f,c
  5645  000B94  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5646  000B96  22DA               	addwfc	fsr2h,f,c
  5647  000B98  50DF               	movf	indf2,w,c
  5648  000B9A  B4D8               	btfsc	status,2,c
  5649  000B9C  D06F               	goto	l2736
  5650                           
  5651                           ; BSR set to: 0
  5652                           
  5653                           ;ES_Queue.c: 172: {
  5654                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5655  000B9E  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  5656  000BA2  9EF2               	bcf	intcon,7,c	;volatile
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  5660                           
  5661                           ; BSR set to: 0
  5662  000BA4  0100               	movlb	0	; () banked
  5663  000BA6  EE20 F001          	lfsr	2,1
  5664  000BAA  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5665  000BAC  26D9               	addwf	fsr2l,f,c
  5666  000BAE  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5667  000BB0  22DA               	addwfc	fsr2h,f,c
  5668  000BB2  50DF               	movf	indf2,w,c
  5669  000BB4  0100               	movlb	0	; () banked
  5670  000BB6  6F70               	movwf	??_ES_DeQueue& (0+255),b
  5671  000BB8  0E01               	movlw	1
  5672  000BBA  0100               	movlb	0	; () banked
  5673  000BBC  2570               	addwf	??_ES_DeQueue& (0+255),w,b
  5674  000BBE  0100               	movlb	0	; () banked
  5675  000BC0  6F66               	movwf	___wmul@multiplier& (0+255),b
  5676  000BC2  0100               	movlb	0	; () banked
  5677  000BC4  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  5678  000BC6  0E00               	movlw	0
  5679  000BC8  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  5680  000BCA  0E00               	movlw	0
  5681  000BCC  0100               	movlb	0	; () banked
  5682  000BCE  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5683  000BD0  0E03               	movlw	3
  5684  000BD2  6F68               	movwf	___wmul@multiplicand& (0+255),b
  5685  000BD4  ECCA  F00E         	call	___wmul	;wreg free
  5686  000BD8  0100               	movlb	0	; () banked
  5687  000BDA  5166               	movf	?___wmul& (0+255),w,b
  5688  000BDC  0100               	movlb	0	; () banked
  5689  000BDE  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  5690  000BE0  6ED9               	movwf	fsr2l,c
  5691  000BE2  0100               	movlb	0	; () banked
  5692  000BE4  5167               	movf	(?___wmul+1)& (0+255),w,b
  5693  000BE6  0100               	movlb	0	; () banked
  5694  000BE8  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  5695  000BEA  6EDA               	movwf	fsr2h,c
  5696  000BEC  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  5697  000BF0  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  5698  000BF4  CFDE FFE6          	movff	postinc2,postinc1
  5699  000BF8  CFDE FFE6          	movff	postinc2,postinc1
  5700  000BFC  CFDE FFE6          	movff	postinc2,postinc1
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  5704  000C00  0100               	movlb	0	; () banked
  5705  000C02  EE20 F001          	lfsr	2,1
  5706  000C06  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5707  000C08  26D9               	addwf	fsr2l,f,c
  5708  000C0A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5709  000C0C  22DA               	addwfc	fsr2h,f,c
  5710  000C0E  2ADF               	incf	indf2,f,c
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  5714  000C10  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  5715  000C14  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  5716  000C18  0100               	movlb	0	; () banked
  5717  000C1A  EE10 F001          	lfsr	1,1
  5718  000C1E  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5719  000C20  26E1               	addwf	fsr1l,f,c
  5720  000C22  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5721  000C24  22E2               	addwfc	fsr1h,f,c
  5722  000C26  50DE               	movf	postinc2,w,c
  5723  000C28  5CE6               	subwf	postinc1,w,c
  5724  000C2A  A0D8               	btfss	status,0,c
  5725  000C2C  D019               	goto	l2732
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  5729  000C2E  0100               	movlb	0	; () banked
  5730  000C30  EE20 F001          	lfsr	2,1
  5731  000C34  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5732  000C36  26D9               	addwf	fsr2l,f,c
  5733  000C38  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5734  000C3A  22DA               	addwfc	fsr2h,f,c
  5735  000C3C  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  5736  000C40  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  5737  000C44  50E7               	movf	indf1,w,c
  5738  000C46  0100               	movlb	0	; () banked
  5739  000C48  6F60               	movwf	___lbmod@divisor& (0+255),b
  5740  000C4A  0100               	movlb	0	; () banked
  5741  000C4C  EE10 F001          	lfsr	1,1
  5742  000C50  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5743  000C52  26E1               	addwf	fsr1l,f,c
  5744  000C54  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5745  000C56  22E2               	addwfc	fsr1h,f,c
  5746  000C58  50E7               	movf	indf1,w,c
  5747  000C5A  EC30  F00E         	call	___lbmod
  5748  000C5E  6EDF               	movwf	indf2,c
  5749  000C60                     l2732:
  5750                           
  5751                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  5752  000C60  0100               	movlb	0	; () banked
  5753  000C62  EE20 F002          	lfsr	2,2
  5754  000C66  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5755  000C68  26D9               	addwf	fsr2l,f,c
  5756  000C6A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5757  000C6C  22DA               	addwfc	fsr2h,f,c
  5758  000C6E  06DF               	decf	indf2,f,c
  5759  000C70  50DF               	movf	indf2,w,c
  5760  000C72  0100               	movlb	0	; () banked
  5761  000C74  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  5765  000C76  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  5766                           
  5767                           ;ES_Queue.c: 183: }else {
  5768  000C7A  D014               	goto	l2742
  5769  000C7C                     l2736:
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  5773  000C7C  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  5774  000C80  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  5775  000C84  0E00               	movlw	0
  5776  000C86  6EDF               	movwf	indf2,c
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  5780  000C88  0100               	movlb	0	; () banked
  5781  000C8A  EE20 F001          	lfsr	2,1
  5782  000C8E  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  5783  000C90  26D9               	addwf	fsr2l,f,c
  5784  000C92  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  5785  000C94  22DA               	addwfc	fsr2h,f,c
  5786  000C96  0E00               	movlw	0
  5787  000C98  6EDE               	movwf	postinc2,c
  5788  000C9A  0E00               	movlw	0
  5789  000C9C  6EDD               	movwf	postdec2,c
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;ES_Queue.c: 186: NumLeft = 0;
  5793  000C9E  0E00               	movlw	0
  5794  000CA0  0100               	movlb	0	; () banked
  5795  000CA2  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  5796  000CA4                     l2742:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;ES_Queue.c: 187: }
  5800                           ;ES_Queue.c: 188: return NumLeft;
  5801  000CA4  0100               	movlb	0	; () banked
  5802  000CA6  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  5803  000CA8  0012               	return	
  5804  000CAA                     __end_of_ES_DeQueue:
  5805                           	opt stack 0
  5806                           tosu	equ	0xFFF
  5807                           tosh	equ	0xFFE
  5808                           tosl	equ	0xFFD
  5809                           pclath	equ	0xFFA
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon	equ	0xFF2
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           indf1	equ	0xFE7
  5820                           postinc1	equ	0xFE6
  5821                           postdec1	equ	0xFE5
  5822                           fsr1h	equ	0xFE2
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function ___lbmod *****************
  5832 ;; Defined at:
  5833 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  dividend        1    wreg     unsigned char 
  5836 ;;  divisor         1    0[BANK0 ] unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  dividend        1    1[BANK0 ] unsigned char 
  5839 ;;  rem             1    3[BANK0 ] unsigned char 
  5840 ;;  counter         1    2[BANK0 ] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      unsigned char 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5850 ;;      Params:         0       1       0       0
  5851 ;;      Locals:         0       3       0       0
  5852 ;;      Temps:          0       0       0       0
  5853 ;;      Totals:         0       4       0       0
  5854 ;;Total ram usage:        4 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    6
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_ES_DeQueue
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text28
  5865  001C60                     __ptext28:
  5866                           	opt stack 0
  5867  001C60                     ___lbmod:
  5868                           	opt stack 22
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;incstack = 0
  5872                           ;___lbmod@dividend stored from wreg
  5873  001C60  0100               	movlb	0	; () banked
  5874  001C62  6F61               	movwf	___lbmod@dividend& (0+255),b
  5875  001C64  0E08               	movlw	8
  5876  001C66  0100               	movlb	0	; () banked
  5877  001C68  6F62               	movwf	___lbmod@counter& (0+255),b
  5878  001C6A  0E00               	movlw	0
  5879  001C6C  0100               	movlb	0	; () banked
  5880  001C6E  6F63               	movwf	___lbmod@rem& (0+255),b
  5881  001C70                     l2672:
  5882                           
  5883                           ; BSR set to: 0
  5884  001C70  90D8               	bcf	status,0,c
  5885  001C72  0100               	movlb	0	; () banked
  5886  001C74  3561               	rlcf	___lbmod@dividend& (0+255),w,b
  5887  001C76  0100               	movlb	0	; () banked
  5888  001C78  3563               	rlcf	___lbmod@rem& (0+255),w,b
  5889  001C7A  0100               	movlb	0	; () banked
  5890  001C7C  6F63               	movwf	___lbmod@rem& (0+255),b
  5891                           
  5892                           ; BSR set to: 0
  5893  001C7E  0100               	movlb	0	; () banked
  5894  001C80  90D8               	bcf	status,0,c
  5895  001C82  3761               	rlcf	___lbmod@dividend& (0+255),f,b
  5896                           
  5897                           ; BSR set to: 0
  5898  001C84  0100               	movlb	0	; () banked
  5899  001C86  5160               	movf	___lbmod@divisor& (0+255),w,b
  5900  001C88  0100               	movlb	0	; () banked
  5901  001C8A  5D63               	subwf	___lbmod@rem& (0+255),w,b
  5902  001C8C  A0D8               	btfss	status,0,c
  5903  001C8E  D004               	goto	l2680
  5904                           
  5905                           ; BSR set to: 0
  5906  001C90  0100               	movlb	0	; () banked
  5907  001C92  5160               	movf	___lbmod@divisor& (0+255),w,b
  5908  001C94  0100               	movlb	0	; () banked
  5909  001C96  5F63               	subwf	___lbmod@rem& (0+255),f,b
  5910  001C98                     l2680:
  5911                           
  5912                           ; BSR set to: 0
  5913  001C98  0100               	movlb	0	; () banked
  5914  001C9A  2F62               	decfsz	___lbmod@counter& (0+255),f,b
  5915  001C9C  D7E9               	goto	l2672
  5916                           
  5917                           ; BSR set to: 0
  5918                           
  5919                           ; BSR set to: 0
  5920  001C9E  0100               	movlb	0	; () banked
  5921  001CA0  5163               	movf	___lbmod@rem& (0+255),w,b
  5922  001CA2  0012               	return	
  5923  001CA4                     __end_of___lbmod:
  5924                           	opt stack 0
  5925                           tosu	equ	0xFFF
  5926                           tosh	equ	0xFFE
  5927                           tosl	equ	0xFFD
  5928                           pclath	equ	0xFFA
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           intcon	equ	0xFF2
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           indf1	equ	0xFE7
  5939                           postinc1	equ	0xFE6
  5940                           postdec1	equ	0xFE5
  5941                           fsr1h	equ	0xFE2
  5942                           fsr1l	equ	0xFE1
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           postdec2	equ	0xFDD
  5946                           fsr2h	equ	0xFDA
  5947                           fsr2l	equ	0xFD9
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function _ES_CheckUserEvents *****************
  5951 ;; Defined at:
  5952 ;;		line 46 in file "ES_CheckEvents.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;		None
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  i               1    0[BANK0 ] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;                  1    wreg      unsigned char 
  5959 ;; Registers used:
  5960 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5966 ;;      Params:         0       0       0       0
  5967 ;;      Locals:         0       1       0       0
  5968 ;;      Temps:          0       0       0       0
  5969 ;;      Totals:         0       1       0       0
  5970 ;;Total ram usage:        1 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    7
  5973 ;; This function calls:
  5974 ;;		_Check4Keystroke
  5975 ;; This function is called by:
  5976 ;;		_ES_Run
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           	psect	text29
  5981  001C16                     __ptext29:
  5982                           	opt stack 0
  5983  001C16                     _ES_CheckUserEvents:
  5984                           	opt stack 22
  5985                           
  5986                           ;ES_CheckEvents.c: 48: uint8_t i;
  5987                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;incstack = 0
  5991  001C16  0E00               	movlw	0
  5992  001C18  0100               	movlb	0	; () banked
  5993  001C1A  6F60               	movwf	ES_CheckUserEvents@i& (0+255),b
  5994  001C1C  0100               	movlb	0	; () banked
  5995  001C1E  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  5996  001C20  0100               	movlb	0	; () banked
  5997  001C22  A4D8               	btfss	status,2,c
  5998  001C24  0012               	return	
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  6002                           
  6003                           ; BSR set to: 0
  6004                           
  6005                           ; BSR set to: 0
  6006  001C26  0100               	movlb	0	; () banked
  6007  001C28  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  6008  001C2A  0D02               	mullw	2
  6009  001C2C  0E5E               	movlw	low _ES_EventList
  6010  001C2E  24F3               	addwf	prodl,w,c
  6011  001C30  6EF6               	movwf	tblptrl,c
  6012  001C32  0E03               	movlw	high _ES_EventList
  6013  001C34  20F4               	addwfc	prodh,w,c
  6014  001C36  6EF7               	movwf	tblptrh,c
  6015  001C38                     	if	0	;There are less than 3 active tblptr bytes
  6016  001C38                     	endif
  6017  001C38  D801               	call	u1618
  6018  001C3A  D00C               	goto	u1619
  6019  001C3C                     u1618:
  6020  001C3C  0005               	push	
  6021  001C3E  6EFA               	movwf	pclath,c
  6022  001C40  0009               	tblrd		*+
  6023  001C42  50F5               	movf	tablat,w,c
  6024  001C44  6EFD               	movwf	tosl,c
  6025  001C46  0009               	tblrd		*+
  6026  001C48  50F5               	movf	tablat,w,c
  6027  001C4A  6EFE               	movwf	tosh,c
  6028  001C4C  50F8               	movf	tblptru,w,c
  6029  001C4E  6EFF               	movwf	tosu,c
  6030  001C50  50FA               	movf	pclath,w,c
  6031  001C52  0012               	return		;indir
  6032  001C54                     u1619:
  6033  001C54  06E8               	decf	wreg,f,c
  6034  001C56  B4D8               	btfsc	status,2,c
  6035  001C58  0012               	return	
  6036                           
  6037                           ;ES_CheckEvents.c: 52: break;
  6038  001C5A  0100               	movlb	0	; () banked
  6039  001C5C  2B60               	incf	ES_CheckUserEvents@i& (0+255),f,b
  6040  001C5E  D7DE               	goto	L11
  6041  001C60                     __end_of_ES_CheckUserEvents:
  6042                           	opt stack 0
  6043                           tosu	equ	0xFFF
  6044                           tosh	equ	0xFFE
  6045                           tosl	equ	0xFFD
  6046                           pclath	equ	0xFFA
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           intcon	equ	0xFF2
  6054                           postinc0	equ	0xFEE
  6055                           wreg	equ	0xFE8
  6056                           indf1	equ	0xFE7
  6057                           postinc1	equ	0xFE6
  6058                           postdec1	equ	0xFE5
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           fsr2h	equ	0xFDA
  6065                           fsr2l	equ	0xFD9
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function _Check4Keystroke *****************
  6069 ;; Defined at:
  6070 ;;		line 62 in file "EventCheckers.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;		None
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6084 ;;      Params:         0       0       0       0
  6085 ;;      Locals:         0       0       0       0
  6086 ;;      Temps:          0       0       0       0
  6087 ;;      Totals:         0       0       0       0
  6088 ;;Total ram usage:        0 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    6
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_ES_CheckUserEvents
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text30
  6099  001F92                     __ptext30:
  6100                           	opt stack 0
  6101  001F92                     _Check4Keystroke:
  6102                           	opt stack 22
  6103                           
  6104                           ;EventCheckers.c: 78: return 0;
  6105                           
  6106                           ;incstack = 0
  6107  001F92  0E00               	movlw	0
  6108  001F94  0012               	return	
  6109  001F96                     __end_of_Check4Keystroke:
  6110                           	opt stack 0
  6111                           tosu	equ	0xFFF
  6112                           tosh	equ	0xFFE
  6113                           tosl	equ	0xFFD
  6114                           pclath	equ	0xFFA
  6115                           tblptru	equ	0xFF8
  6116                           tblptrh	equ	0xFF7
  6117                           tblptrl	equ	0xFF6
  6118                           tablat	equ	0xFF5
  6119                           prodh	equ	0xFF4
  6120                           prodl	equ	0xFF3
  6121                           intcon	equ	0xFF2
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           indf1	equ	0xFE7
  6125                           postinc1	equ	0xFE6
  6126                           postdec1	equ	0xFE5
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           postdec2	equ	0xFDD
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function _ES_Initialize *****************
  6137 ;; Defined at:
  6138 ;;		line 242 in file "ES_Framework.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  NewRate         2   33[BANK0 ] enum E15424
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  i               1   35[BANK0 ] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      enum E15495
  6145 ;; Registers used:
  6146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6152 ;;      Params:         0       2       0       0
  6153 ;;      Locals:         0       1       0       0
  6154 ;;      Temps:          0       0       0       0
  6155 ;;      Totals:         0       3       0       0
  6156 ;;Total ram usage:        3 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:   10
  6159 ;; This function calls:
  6160 ;;		_ES_InitQueue
  6161 ;;		_ES_Timer_Init
  6162 ;;		_InitPatternControlService
  6163 ;;		_InitSPI32ControlService
  6164 ;; This function is called by:
  6165 ;;		_main
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text31
  6170  0010E0                     __ptext31:
  6171                           	opt stack 0
  6172  0010E0                     _ES_Initialize:
  6173                           	opt stack 20
  6174                           
  6175                           ;ES_Framework.c: 243: uint8_t i;
  6176                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  6177                           
  6178                           ;incstack = 0
  6179  0010E0  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  6180  0010E4  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  6181  0010E8  ECB4  F00F         	call	_ES_Timer_Init	;wreg free
  6182                           
  6183                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  6184  0010EC  0E00               	movlw	0
  6185  0010EE  0100               	movlb	0	; () banked
  6186  0010F0  6F83               	movwf	ES_Initialize@i& (0+255),b
  6187  0010F2                     l2906:
  6188                           
  6189                           ; BSR set to: 0
  6190  0010F2  0E01               	movlw	1
  6191  0010F4  0100               	movlb	0	; () banked
  6192  0010F6  6583               	cpfsgt	ES_Initialize@i& (0+255),b
  6193  0010F8  D001               	goto	l2910
  6194  0010FA  D066               	goto	l2930
  6195  0010FC                     l2910:
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  6199                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  6200  0010FC  0100               	movlb	0	; () banked
  6201  0010FE  5183               	movf	ES_Initialize@i& (0+255),w,b
  6202  001100  0D04               	mullw	4
  6203  001102  0E50               	movlw	low _ServDescList
  6204  001104  24F3               	addwf	prodl,w,c
  6205  001106  6EF6               	movwf	tblptrl,c
  6206  001108  0E03               	movlw	high _ServDescList
  6207  00110A  20F4               	addwfc	prodh,w,c
  6208  00110C  6EF7               	movwf	tblptrh,c
  6209  00110E                     	if	0	;There are less than 3 active tblptr bytes
  6210  00110E                     	endif
  6211  00110E  0009               	tblrd		*+
  6212  001110  50F5               	movf	tablat,w,c
  6213  001112  0009               	tblrd		*+
  6214  001114  10F5               	iorwf	tablat,w,c
  6215  001116  B4D8               	btfsc	status,2,c
  6216  001118  D013               	goto	l2914
  6217                           
  6218                           ; BSR set to: 0
  6219  00111A  0100               	movlb	0	; () banked
  6220  00111C  5183               	movf	ES_Initialize@i& (0+255),w,b
  6221  00111E  0D04               	mullw	4
  6222  001120  0E02               	movlw	2
  6223  001122  26F3               	addwf	prodl,f,c
  6224  001124  0E00               	movlw	0
  6225  001126  22F4               	addwfc	prodh,f,c
  6226  001128  0E50               	movlw	low _ServDescList
  6227  00112A  24F3               	addwf	prodl,w,c
  6228  00112C  6EF6               	movwf	tblptrl,c
  6229  00112E  0E03               	movlw	high _ServDescList
  6230  001130  20F4               	addwfc	prodh,w,c
  6231  001132  6EF7               	movwf	tblptrh,c
  6232  001134                     	if	0	;There are less than 3 active tblptr bytes
  6233  001134                     	endif
  6234  001134  0009               	tblrd		*+
  6235  001136  50F5               	movf	tablat,w,c
  6236  001138  0009               	tblrd		*+
  6237  00113A  10F5               	iorwf	tablat,w,c
  6238  00113C  A4D8               	btfss	status,2,c
  6239  00113E  D002               	goto	l2918
  6240  001140                     l2914:
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;ES_Framework.c: 249: return FailedPointer;
  6244  001140  0E03               	movlw	3
  6245                           
  6246                           ; BSR set to: 0
  6247  001142  0012               	return	
  6248  001144                     l2918:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  6252  001144  0100               	movlb	0	; () banked
  6253  001146  5183               	movf	ES_Initialize@i& (0+255),w,b
  6254  001148  0D03               	mullw	3
  6255  00114A  0E58               	movlw	low _EventQueues
  6256  00114C  24F3               	addwf	prodl,w,c
  6257  00114E  6EF6               	movwf	tblptrl,c
  6258  001150  0E03               	movlw	high _EventQueues
  6259  001152  20F4               	addwfc	prodh,w,c
  6260  001154  6EF7               	movwf	tblptrh,c
  6261  001156                     	if	0	;There are less than 3 active tblptr bytes
  6262  001156                     	endif
  6263  001156  0009               	tblrd		*+
  6264  001158  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
  6265  00115C  000A               	tblrd		*-
  6266  00115E  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
  6267  001162  0100               	movlb	0	; () banked
  6268  001164  5183               	movf	ES_Initialize@i& (0+255),w,b
  6269  001166  0D03               	mullw	3
  6270  001168  0E02               	movlw	2
  6271  00116A  26F3               	addwf	prodl,f,c
  6272  00116C  0E00               	movlw	0
  6273  00116E  22F4               	addwfc	prodh,f,c
  6274  001170  0E58               	movlw	low _EventQueues
  6275  001172  24F3               	addwf	prodl,w,c
  6276  001174  6EF6               	movwf	tblptrl,c
  6277  001176  0E03               	movlw	high _EventQueues
  6278  001178  20F4               	addwfc	prodh,w,c
  6279  00117A  6EF7               	movwf	tblptrh,c
  6280  00117C                     	if	0	;There are less than 3 active tblptr bytes
  6281  00117C                     	endif
  6282  00117C  0008               	tblrd		*
  6283  00117E  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
  6284  001182  EC72  F00E         	call	_ES_InitQueue	;wreg free
  6285                           
  6286                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  6287  001186  0100               	movlb	0	; () banked
  6288  001188  5183               	movf	ES_Initialize@i& (0+255),w,b
  6289  00118A  0D04               	mullw	4
  6290  00118C  0E50               	movlw	low _ServDescList
  6291  00118E  24F3               	addwf	prodl,w,c
  6292  001190  6EF6               	movwf	tblptrl,c
  6293  001192  0E03               	movlw	high _ServDescList
  6294  001194  20F4               	addwfc	prodh,w,c
  6295  001196  6EF7               	movwf	tblptrh,c
  6296  001198                     	if	0	;There are less than 3 active tblptr bytes
  6297  001198                     	endif
  6298  001198  D801               	call	u1858
  6299  00119A  D00E               	goto	u1859
  6300  00119C                     u1858:
  6301  00119C  0005               	push	
  6302  00119E  6EFA               	movwf	pclath,c
  6303  0011A0  0009               	tblrd		*+
  6304  0011A2  50F5               	movf	tablat,w,c
  6305  0011A4  6EFD               	movwf	tosl,c
  6306  0011A6  0009               	tblrd		*+
  6307  0011A8  50F5               	movf	tablat,w,c
  6308  0011AA  6EFE               	movwf	tosh,c
  6309  0011AC  50F8               	movf	tblptru,w,c
  6310  0011AE  6EFF               	movwf	tosu,c
  6311  0011B0  50FA               	movf	pclath,w,c
  6312  0011B2  0100               	movlb	0	; () banked
  6313  0011B4  5183               	movf	ES_Initialize@i& (0+255),w,b
  6314  0011B6  0012               	return		;indir
  6315  0011B8                     u1859:
  6316  0011B8  06E8               	decf	wreg,f,c
  6317  0011BA  B4D8               	btfsc	status,2,c
  6318  0011BC  D002               	goto	l2926
  6319                           
  6320                           ;ES_Framework.c: 254: return FailedInit;
  6321  0011BE  0E05               	movlw	5
  6322  0011C0  0012               	return	
  6323  0011C2                     l2926:
  6324  0011C2  0100               	movlb	0	; () banked
  6325  0011C4  2B83               	incf	ES_Initialize@i& (0+255),f,b
  6326  0011C6  D795               	goto	l2906
  6327  0011C8                     l2930:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;ES_Framework.c: 255: }
  6331                           ;ES_Framework.c: 256: return Success;
  6332  0011C8  0E00               	movlw	0
  6333  0011CA  0012               	return	
  6334  0011CC                     __end_of_ES_Initialize:
  6335                           	opt stack 0
  6336                           tosu	equ	0xFFF
  6337                           tosh	equ	0xFFE
  6338                           tosl	equ	0xFFD
  6339                           pclath	equ	0xFFA
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           postinc0	equ	0xFEE
  6348                           wreg	equ	0xFE8
  6349                           indf1	equ	0xFE7
  6350                           postinc1	equ	0xFE6
  6351                           postdec1	equ	0xFE5
  6352                           fsr1h	equ	0xFE2
  6353                           fsr1l	equ	0xFE1
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _InitPatternControlService *****************
  6362 ;; Defined at:
  6363 ;;		line 97 in file "Pattern_ControlService.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  Priority        1    wreg     unsigned char 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  Priority        1   32[BANK0 ] unsigned char 
  6368 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      unsigned char 
  6371 ;; Registers used:
  6372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6378 ;;      Params:         0       0       0       0
  6379 ;;      Locals:         0       4       0       0
  6380 ;;      Temps:          0       0       0       0
  6381 ;;      Totals:         0       4       0       0
  6382 ;;Total ram usage:        4 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    9
  6385 ;; This function calls:
  6386 ;;		_DotStar_Init
  6387 ;;		_ES_PostToService
  6388 ;;		_SetupPattern
  6389 ;; This function is called by:
  6390 ;;		_ES_Initialize
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text32
  6395  001AD2                     __ptext32:
  6396                           	opt stack 0
  6397  001AD2                     _InitPatternControlService:
  6398                           	opt stack 20
  6399                           
  6400                           ;incstack = 0
  6401                           ;InitPatternControlService@Priority stored from wreg
  6402  001AD2  0100               	movlb	0	; () banked
  6403  001AD4  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
  6404                           
  6405                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  6406                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  6407  001AD6  C080  F0E5         	movff	InitPatternControlService@Priority,_MyPriority
  6408                           
  6409                           ;Pattern_ControlService.c: 103: DotStar_Init(76,PatternConfigs[2]);
  6410  001ADA  C0FC  F060         	movff	_PatternConfigs+2,DotStar_Init@brightness
  6411  001ADE  0E4C               	movlw	76
  6412  001AE0  EC74  F00A         	call	_DotStar_Init
  6413                           
  6414                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 76);
  6415  001AE4  0EFA               	movlw	low _PatternConfigs
  6416  001AE6  0100               	movlb	0	; () banked
  6417  001AE8  6F60               	movwf	SetupPattern@configs& (0+255),b
  6418  001AEA  0E00               	movlw	high _PatternConfigs
  6419  001AEC  0100               	movlb	0	; () banked
  6420  001AEE  6F61               	movwf	(SetupPattern@configs+1)& (0+255),b
  6421  001AF0  0E4C               	movlw	76
  6422  001AF2  0100               	movlb	0	; () banked
  6423  001AF4  6F62               	movwf	SetupPattern@numPixels& (0+255),b
  6424  001AF6  ECAD  F00F         	call	_SetupPattern	;wreg free
  6425                           
  6426                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  6427  001AFA  0E00               	movlw	0
  6428  001AFC  0100               	movlb	0	; () banked
  6429  001AFE  6FE2               	movwf	_CurrentState& (0+255),b
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  6433  001B00  0E02               	movlw	2
  6434  001B02  0100               	movlb	0	; () banked
  6435  001B04  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  6439  001B06  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6440  001B0A  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6441  001B0E  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6442  001B12  0100               	movlb	0	; () banked
  6443  001B14  51E5               	movf	_MyPriority& (0+255),w,b
  6444  001B16  ECC1  F00C         	call	_ES_PostToService
  6445  001B1A  06E8               	decf	wreg,f,c
  6446  001B1C  A4D8               	btfss	status,2,c
  6447  001B1E  D002               	goto	l2788
  6448                           
  6449                           ;Pattern_ControlService.c: 110: {
  6450                           ;Pattern_ControlService.c: 111: return 1;
  6451  001B20  0E01               	movlw	1
  6452                           
  6453                           ;Pattern_ControlService.c: 112: }else
  6454  001B22  0012               	return	
  6455  001B24                     l2788:
  6456                           
  6457                           ;Pattern_ControlService.c: 113: {
  6458                           ;Pattern_ControlService.c: 114: return 0;
  6459  001B24  0E00               	movlw	0
  6460  001B26  0012               	return	
  6461  001B28                     __end_of_InitPatternControlService:
  6462                           	opt stack 0
  6463                           tosu	equ	0xFFF
  6464                           tosh	equ	0xFFE
  6465                           tosl	equ	0xFFD
  6466                           pclath	equ	0xFFA
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           postinc0	equ	0xFEE
  6475                           wreg	equ	0xFE8
  6476                           indf1	equ	0xFE7
  6477                           postinc1	equ	0xFE6
  6478                           postdec1	equ	0xFE5
  6479                           fsr1h	equ	0xFE2
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _InitSPI32ControlService *****************
  6489 ;; Defined at:
  6490 ;;		line 80 in file "SPI32_ControlService.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  Priority        1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  Priority        1   32[BANK0 ] unsigned char 
  6495 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      unsigned char 
  6498 ;; Registers used:
  6499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6505 ;;      Params:         0       0       0       0
  6506 ;;      Locals:         0       4       0       0
  6507 ;;      Temps:          0       0       0       0
  6508 ;;      Totals:         0       4       0       0
  6509 ;;Total ram usage:        4 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    9
  6512 ;; This function calls:
  6513 ;;		_ES_PostToService
  6514 ;;		_SPI32_Init
  6515 ;; This function is called by:
  6516 ;;		_ES_Initialize
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text33
  6521  001D20                     __ptext33:
  6522                           	opt stack 0
  6523  001D20                     _InitSPI32ControlService:
  6524                           	opt stack 20
  6525                           
  6526                           ;incstack = 0
  6527                           ;InitSPI32ControlService@Priority stored from wreg
  6528  001D20  0100               	movlb	0	; () banked
  6529  001D22  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
  6530                           
  6531                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  6532                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  6533  001D24  C080  F0E1         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  6534                           
  6535                           ;SPI32_ControlService.c: 86: SPI32_Init();
  6536  001D28  ECC6  F00F         	call	_SPI32_Init	;wreg free
  6537                           
  6538                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  6539  001D2C  0E00               	movlw	0
  6540  001D2E  0100               	movlb	0	; () banked
  6541  001D30  6FE0               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  6545  001D32  0E02               	movlw	2
  6546  001D34  0100               	movlb	0	; () banked
  6547  001D36  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  6551  001D38  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  6552  001D3C  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6553  001D40  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6554  001D44  0100               	movlb	0	; () banked
  6555  001D46  51E1               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6556  001D48  ECC1  F00C         	call	_ES_PostToService
  6557  001D4C  06E8               	decf	wreg,f,c
  6558  001D4E  A4D8               	btfss	status,2,c
  6559  001D50  D002               	goto	l2856
  6560                           
  6561                           ;SPI32_ControlService.c: 92: {
  6562                           ;SPI32_ControlService.c: 93: return 1;
  6563  001D52  0E01               	movlw	1
  6564                           
  6565                           ;SPI32_ControlService.c: 94: }else
  6566  001D54  0012               	return	
  6567  001D56                     l2856:
  6568                           
  6569                           ;SPI32_ControlService.c: 95: {
  6570                           ;SPI32_ControlService.c: 96: return 0;
  6571  001D56  0E00               	movlw	0
  6572  001D58  0012               	return	
  6573  001D5A                     __end_of_InitSPI32ControlService:
  6574                           	opt stack 0
  6575                           tosu	equ	0xFFF
  6576                           tosh	equ	0xFFE
  6577                           tosl	equ	0xFFD
  6578                           pclath	equ	0xFFA
  6579                           tblptru	equ	0xFF8
  6580                           tblptrh	equ	0xFF7
  6581                           tblptrl	equ	0xFF6
  6582                           tablat	equ	0xFF5
  6583                           prodh	equ	0xFF4
  6584                           prodl	equ	0xFF3
  6585                           intcon	equ	0xFF2
  6586                           postinc0	equ	0xFEE
  6587                           wreg	equ	0xFE8
  6588                           indf1	equ	0xFE7
  6589                           postinc1	equ	0xFE6
  6590                           postdec1	equ	0xFE5
  6591                           fsr1h	equ	0xFE2
  6592                           fsr1l	equ	0xFE1
  6593                           indf2	equ	0xFDF
  6594                           postinc2	equ	0xFDE
  6595                           postdec2	equ	0xFDD
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function _SPI32_Init *****************
  6601 ;; Defined at:
  6602 ;;		line 66 in file "SPI32_HW.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;		None
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;		None
  6607 ;; Return value:  Size  Location     Type
  6608 ;;                  1    wreg      void 
  6609 ;; Registers used:
  6610 ;;		wreg, status,2, cstack
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6616 ;;      Params:         0       0       0       0
  6617 ;;      Locals:         0       0       0       0
  6618 ;;      Temps:          0       0       0       0
  6619 ;;      Totals:         0       0       0       0
  6620 ;;Total ram usage:        0 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; Hardware stack levels required when called:    7
  6623 ;; This function calls:
  6624 ;;		_HW_Init
  6625 ;; This function is called by:
  6626 ;;		_InitSPI32ControlService
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text34
  6631  001F8C                     __ptext34:
  6632                           	opt stack 0
  6633  001F8C                     _SPI32_Init:
  6634                           	opt stack 21
  6635                           
  6636                           ;SPI32_HW.c: 68: HW_Init();
  6637                           
  6638                           ;incstack = 0
  6639  001F8C  EC52  F00F         	call	_HW_Init	;wreg free
  6640  001F90  0012               	return		;funcret
  6641  001F92                     __end_of_SPI32_Init:
  6642                           	opt stack 0
  6643                           tosu	equ	0xFFF
  6644                           tosh	equ	0xFFE
  6645                           tosl	equ	0xFFD
  6646                           pclath	equ	0xFFA
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           postinc0	equ	0xFEE
  6655                           wreg	equ	0xFE8
  6656                           indf1	equ	0xFE7
  6657                           postinc1	equ	0xFE6
  6658                           postdec1	equ	0xFE5
  6659                           fsr1h	equ	0xFE2
  6660                           fsr1l	equ	0xFE1
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           
  6668 ;; *************** function _HW_Init *****************
  6669 ;; Defined at:
  6670 ;;		line 128 in file "SPI32_HW.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6684 ;;      Params:         0       0       0       0
  6685 ;;      Locals:         0       0       0       0
  6686 ;;      Temps:          0       0       0       0
  6687 ;;      Totals:         0       0       0       0
  6688 ;;Total ram usage:        0 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    6
  6691 ;; This function calls:
  6692 ;;		Nothing
  6693 ;; This function is called by:
  6694 ;;		_SPI32_Init
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text35
  6699  001EA4                     __ptext35:
  6700                           	opt stack 0
  6701  001EA4                     _HW_Init:
  6702                           	opt stack 21
  6703                           
  6704                           ;SPI32_HW.c: 134: PORTC = 0x00;
  6705                           
  6706                           ;incstack = 0
  6707  001EA4  0E00               	movlw	0
  6708  001EA6  6E82               	movwf	3970,c	;volatile
  6709                           
  6710                           ;SPI32_HW.c: 135: LATC = 0x00;
  6711  001EA8  0E00               	movlw	0
  6712  001EAA  6E8B               	movwf	3979,c	;volatile
  6713                           
  6714                           ;SPI32_HW.c: 136: ADCON1 = 0x0F;
  6715  001EAC  0E0F               	movlw	15
  6716  001EAE  6EC1               	movwf	4033,c	;volatile
  6717                           
  6718                           ;SPI32_HW.c: 137: TRISC = 0x00;
  6719  001EB0  0E00               	movlw	0
  6720  001EB2  6E94               	movwf	3988,c	;volatile
  6721                           
  6722                           ;SPI32_HW.c: 139: SSPIE = 1;
  6723  001EB4  869D               	bsf	3997,3,c	;volatile
  6724                           
  6725                           ;SPI32_HW.c: 143: SSPCON1 = 0x00;
  6726  001EB6  0E00               	movlw	0
  6727  001EB8  6EC6               	movwf	4038,c	;volatile
  6728                           
  6729                           ;SPI32_HW.c: 144: SSPSTAT = 0b01000000;
  6730  001EBA  0E40               	movlw	64
  6731  001EBC  6EC7               	movwf	4039,c	;volatile
  6732                           
  6733                           ;SPI32_HW.c: 145: SSPADD = 0xFF;
  6734  001EBE  68C8               	setf	4040,c	;volatile
  6735                           
  6736                           ;SPI32_HW.c: 146: SSPCON1 = 0b00110000;
  6737  001EC0  0E30               	movlw	48
  6738  001EC2  6EC6               	movwf	4038,c	;volatile
  6739  001EC4  0012               	return		;funcret
  6740  001EC6                     __end_of_HW_Init:
  6741                           	opt stack 0
  6742                           tosu	equ	0xFFF
  6743                           tosh	equ	0xFFE
  6744                           tosl	equ	0xFFD
  6745                           pclath	equ	0xFFA
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           intcon	equ	0xFF2
  6753                           postinc0	equ	0xFEE
  6754                           wreg	equ	0xFE8
  6755                           indf1	equ	0xFE7
  6756                           postinc1	equ	0xFE6
  6757                           postdec1	equ	0xFE5
  6758                           fsr1h	equ	0xFE2
  6759                           fsr1l	equ	0xFE1
  6760                           indf2	equ	0xFDF
  6761                           postinc2	equ	0xFDE
  6762                           postdec2	equ	0xFDD
  6763                           fsr2h	equ	0xFDA
  6764                           fsr2l	equ	0xFD9
  6765                           status	equ	0xFD8
  6766                           
  6767 ;; *************** function _SetupPattern *****************
  6768 ;; Defined at:
  6769 ;;		line 74 in file "Pattern_RGBPatterns.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  6772 ;;		 -> PatternConfigs(5), 
  6773 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6785 ;;      Params:         0       3       0       0
  6786 ;;      Locals:         0       0       0       0
  6787 ;;      Temps:          0       0       0       0
  6788 ;;      Totals:         0       3       0       0
  6789 ;;Total ram usage:        3 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_InitPatternControlService
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text36
  6800  001F5A                     __ptext36:
  6801                           	opt stack 0
  6802  001F5A                     _SetupPattern:
  6803                           	opt stack 22
  6804                           
  6805                           ;Pattern_RGBPatterns.c: 76: PatternConfigs = configs;
  6806                           
  6807                           ;incstack = 0
  6808  001F5A  C060  F0D6         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  6809  001F5E  C061  F0D7         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  6810                           
  6811                           ;Pattern_RGBPatterns.c: 78: Length = numPixels;
  6812  001F62  C062  F0DF         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  6813  001F66  0012               	return		;funcret
  6814  001F68                     __end_of_SetupPattern:
  6815                           	opt stack 0
  6816                           tosu	equ	0xFFF
  6817                           tosh	equ	0xFFE
  6818                           tosl	equ	0xFFD
  6819                           pclath	equ	0xFFA
  6820                           tblptru	equ	0xFF8
  6821                           tblptrh	equ	0xFF7
  6822                           tblptrl	equ	0xFF6
  6823                           tablat	equ	0xFF5
  6824                           prodh	equ	0xFF4
  6825                           prodl	equ	0xFF3
  6826                           intcon	equ	0xFF2
  6827                           postinc0	equ	0xFEE
  6828                           wreg	equ	0xFE8
  6829                           indf1	equ	0xFE7
  6830                           postinc1	equ	0xFE6
  6831                           postdec1	equ	0xFE5
  6832                           fsr1h	equ	0xFE2
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _ES_PostToService *****************
  6842 ;; Defined at:
  6843 ;;		line 351 in file "ES_Framework.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  WhichService    1    wreg     unsigned char 
  6846 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  WhichService    1   28[BANK0 ] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      unsigned char 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6858 ;;      Params:         0       3       0       0
  6859 ;;      Locals:         0       1       0       0
  6860 ;;      Temps:          0       2       0       0
  6861 ;;      Totals:         0       6       0       0
  6862 ;;Total ram usage:        6 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    8
  6865 ;; This function calls:
  6866 ;;		_ES_EnQueueFIFO
  6867 ;; This function is called by:
  6868 ;;		_InitPatternControlService
  6869 ;;		_PostPatternControlService
  6870 ;;		_InitSPI32ControlService
  6871 ;;		_PostSPI32ControlService
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text37
  6876  001982                     __ptext37:
  6877                           	opt stack 0
  6878  001982                     _ES_PostToService:
  6879                           	opt stack 18
  6880                           
  6881                           ;incstack = 0
  6882                           ;ES_PostToService@WhichService stored from wreg
  6883  001982  0100               	movlb	0	; () banked
  6884  001984  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
  6885                           
  6886                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6887                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6888                           ;ES_Framework.c: 354: 1 )){
  6889  001986  0E02               	movlw	2
  6890  001988  0100               	movlb	0	; () banked
  6891  00198A  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
  6892  00198C  D033               	goto	l2270
  6893                           
  6894                           ; BSR set to: 0
  6895  00198E  0100               	movlb	0	; () banked
  6896  001990  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  6897  001992  0D03               	mullw	3
  6898  001994  0E58               	movlw	low _EventQueues
  6899  001996  24F3               	addwf	prodl,w,c
  6900  001998  6EF6               	movwf	tblptrl,c
  6901  00199A  0E03               	movlw	high _EventQueues
  6902  00199C  20F4               	addwfc	prodh,w,c
  6903  00199E  6EF7               	movwf	tblptrh,c
  6904  0019A0                     	if	0	;There are less than 3 active tblptr bytes
  6905  0019A0                     	endif
  6906  0019A0  0009               	tblrd		*+
  6907  0019A2  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
  6908  0019A6  000A               	tblrd		*-
  6909  0019A8  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  6910  0019AC  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  6911  0019B0  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  6912  0019B4  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  6913  0019B8  ECE6  F008         	call	_ES_EnQueueFIFO	;wreg free
  6914  0019BC  06E8               	decf	wreg,f,c
  6915  0019BE  A4D8               	btfss	status,2,c
  6916  0019C0  D019               	goto	l2270
  6917                           
  6918                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6919  0019C2  0100               	movlb	0	; () banked
  6920  0019C4  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  6921  0019C6  0D02               	mullw	2
  6922  0019C8  0E01               	movlw	low _BitNum2SetMask
  6923  0019CA  24F3               	addwf	prodl,w,c
  6924  0019CC  6EF6               	movwf	tblptrl,c
  6925  0019CE  0E03               	movlw	high _BitNum2SetMask
  6926  0019D0  20F4               	addwfc	prodh,w,c
  6927  0019D2  6EF7               	movwf	tblptrh,c
  6928  0019D4                     	if	0	;There are less than 3 active tblptr bytes
  6929  0019D4                     	endif
  6930  0019D4  0009               	tblrd		*+
  6931  0019D6  CFF5 F07A          	movff	tablat,??_ES_PostToService
  6932  0019DA  0009               	tblrd		*+
  6933  0019DC  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
  6934  0019E0  0100               	movlb	0	; () banked
  6935  0019E2  517A               	movf	??_ES_PostToService& (0+255),w,b
  6936  0019E4  0100               	movlb	0	; () banked
  6937  0019E6  13DA               	iorwf	_Ready& (0+255),f,b
  6938  0019E8  0100               	movlb	0	; () banked
  6939  0019EA  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
  6940  0019EC  0100               	movlb	0	; () banked
  6941  0019EE  13DB               	iorwf	(_Ready+1)& (0+255),f,b
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;ES_Framework.c: 356: return 1;
  6945  0019F0  0E01               	movlw	1
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;ES_Framework.c: 357: } else
  6949                           
  6950                           ; BSR set to: 0
  6951  0019F2  0012               	return	
  6952  0019F4                     l2270:
  6953                           
  6954                           ;ES_Framework.c: 358: return 0;
  6955  0019F4  0E00               	movlw	0
  6956  0019F6  0012               	return	
  6957  0019F8                     __end_of_ES_PostToService:
  6958                           	opt stack 0
  6959                           tosu	equ	0xFFF
  6960                           tosh	equ	0xFFE
  6961                           tosl	equ	0xFFD
  6962                           pclath	equ	0xFFA
  6963                           tblptru	equ	0xFF8
  6964                           tblptrh	equ	0xFF7
  6965                           tblptrl	equ	0xFF6
  6966                           tablat	equ	0xFF5
  6967                           prodh	equ	0xFF4
  6968                           prodl	equ	0xFF3
  6969                           intcon	equ	0xFF2
  6970                           postinc0	equ	0xFEE
  6971                           wreg	equ	0xFE8
  6972                           indf1	equ	0xFE7
  6973                           postinc1	equ	0xFE6
  6974                           postdec1	equ	0xFE5
  6975                           fsr1h	equ	0xFE2
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function _ES_EnQueueFIFO *****************
  6985 ;; Defined at:
  6986 ;;		line 85 in file "ES_Queue.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  6989 ;;		 -> Queue1(12), Queue0(12), 
  6990 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  6993 ;;		 -> Queue1(12), Queue0(12), 
  6994 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      unsigned char 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7004 ;;      Params:         0       5       0       0
  7005 ;;      Locals:         0       3       0       0
  7006 ;;      Temps:          0       3       0       0
  7007 ;;      Totals:         0      11       0       0
  7008 ;;Total ram usage:       11 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    7
  7011 ;; This function calls:
  7012 ;;		___awmod
  7013 ;;		___wmul
  7014 ;; This function is called by:
  7015 ;;		_ES_PostToService
  7016 ;;		_ES_PostAll
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	text38
  7021  0011CC                     __ptext38:
  7022                           	opt stack 0
  7023  0011CC                     _ES_EnQueueFIFO:
  7024                           	opt stack 18
  7025                           
  7026                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  7027                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  7028                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  7029                           
  7030                           ;incstack = 0
  7031  0011CC  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  7032  0011D0  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  7033                           
  7034                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  7035  0011D4  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  7036  0011D8  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7037  0011DC  0100               	movlb	0	; () banked
  7038  0011DE  EE10 F002          	lfsr	1,2
  7039  0011E2  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  7040  0011E4  26E1               	addwf	fsr1l,f,c
  7041  0011E6  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  7042  0011E8  22E2               	addwfc	fsr1h,f,c
  7043  0011EA  50DE               	movf	postinc2,w,c
  7044  0011EC  5CE6               	subwf	postinc1,w,c
  7045  0011EE  B0D8               	btfsc	status,0,c
  7046  0011F0  D05C               	goto	l2254
  7047                           
  7048                           ; BSR set to: 0
  7049                           
  7050                           ;ES_Queue.c: 92: {
  7051                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7052  0011F2  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  7053  0011F6  9EF2               	bcf	intcon,7,c	;volatile
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  7057                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  7058                           
  7059                           ; BSR set to: 0
  7060  0011F8  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  7061  0011FC  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7062  001200  50DF               	movf	indf2,w,c
  7063  001202  0100               	movlb	0	; () banked
  7064  001204  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
  7065  001206  0100               	movlb	0	; () banked
  7066  001208  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  7067  00120A  0100               	movlb	0	; () banked
  7068  00120C  6F62               	movwf	___awmod@divisor& (0+255),b
  7069  00120E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  7070  001210  0100               	movlb	0	; () banked
  7071  001212  EE20 F002          	lfsr	2,2
  7072  001216  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  7073  001218  26D9               	addwf	fsr2l,f,c
  7074  00121A  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  7075  00121C  22DA               	addwfc	fsr2h,f,c
  7076  00121E  50DF               	movf	indf2,w,c
  7077  001220  0100               	movlb	0	; () banked
  7078  001222  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  7079  001224  0100               	movlb	0	; () banked
  7080  001226  EE20 F001          	lfsr	2,1
  7081  00122A  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  7082  00122C  26D9               	addwf	fsr2l,f,c
  7083  00122E  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  7084  001230  22DA               	addwfc	fsr2h,f,c
  7085  001232  50DF               	movf	indf2,w,c
  7086  001234  0100               	movlb	0	; () banked
  7087  001236  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  7088  001238  0100               	movlb	0	; () banked
  7089  00123A  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  7090  00123C  0100               	movlb	0	; () banked
  7091  00123E  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  7092  001240  0100               	movlb	0	; () banked
  7093  001242  6F60               	movwf	___awmod@dividend& (0+255),b
  7094  001244  0100               	movlb	0	; () banked
  7095  001246  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7096  001248  0100               	movlb	0	; () banked
  7097  00124A  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  7098  00124C  EC70  F00B         	call	___awmod	;wreg free
  7099  001250  0E01               	movlw	1
  7100  001252  0100               	movlb	0	; () banked
  7101  001254  2560               	addwf	?___awmod& (0+255),w,b
  7102  001256  0100               	movlb	0	; () banked
  7103  001258  6F66               	movwf	___wmul@multiplier& (0+255),b
  7104  00125A  0E00               	movlw	0
  7105  00125C  0100               	movlb	0	; () banked
  7106  00125E  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  7107  001260  0100               	movlb	0	; () banked
  7108  001262  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  7109  001264  0E00               	movlw	0
  7110  001266  0100               	movlb	0	; () banked
  7111  001268  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7112  00126A  0E03               	movlw	3
  7113  00126C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  7114  00126E  ECCA  F00E         	call	___wmul	;wreg free
  7115  001272  0100               	movlb	0	; () banked
  7116  001274  5166               	movf	?___wmul& (0+255),w,b
  7117  001276  0100               	movlb	0	; () banked
  7118  001278  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  7119  00127A  6ED9               	movwf	fsr2l,c
  7120  00127C  0100               	movlb	0	; () banked
  7121  00127E  5167               	movf	(?___wmul+1)& (0+255),w,b
  7122  001280  0100               	movlb	0	; () banked
  7123  001282  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  7124  001284  6EDA               	movwf	fsr2h,c
  7125  001286  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  7126  00128A  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  7127  00128E  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7131  001292  0100               	movlb	0	; () banked
  7132  001294  EE20 F002          	lfsr	2,2
  7133  001298  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  7134  00129A  26D9               	addwf	fsr2l,f,c
  7135  00129C  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  7136  00129E  22DA               	addwfc	fsr2h,f,c
  7137  0012A0  2ADF               	incf	indf2,f,c
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7141  0012A2  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;ES_Queue.c: 101: return(1);
  7145  0012A6  0E01               	movlw	1
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;ES_Queue.c: 102: }else
  7149                           
  7150                           ; BSR set to: 0
  7151  0012A8  0012               	return	
  7152  0012AA                     l2254:
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;ES_Queue.c: 103: return(0);
  7156  0012AA  0E00               	movlw	0
  7157                           
  7158                           ; BSR set to: 0
  7159  0012AC  0012               	return	
  7160  0012AE                     __end_of_ES_EnQueueFIFO:
  7161                           	opt stack 0
  7162                           tosu	equ	0xFFF
  7163                           tosh	equ	0xFFE
  7164                           tosl	equ	0xFFD
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           postinc0	equ	0xFEE
  7174                           wreg	equ	0xFE8
  7175                           indf1	equ	0xFE7
  7176                           postinc1	equ	0xFE6
  7177                           postdec1	equ	0xFE5
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function ___wmul *****************
  7188 ;; Defined at:
  7189 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  multiplier      2    6[BANK0 ] unsigned int 
  7192 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  product         2   10[BANK0 ] unsigned int 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  2    6[BANK0 ] unsigned int 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0, prodl, prodh
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7204 ;;      Params:         0       4       0       0
  7205 ;;      Locals:         0       2       0       0
  7206 ;;      Temps:          0       0       0       0
  7207 ;;      Totals:         0       6       0       0
  7208 ;;Total ram usage:        6 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    6
  7211 ;; This function calls:
  7212 ;;		Nothing
  7213 ;; This function is called by:
  7214 ;;		_ES_EnQueueFIFO
  7215 ;;		_ES_DeQueue
  7216 ;;		_UpdatePattern
  7217 ;;		_HSV_to_RGB
  7218 ;;		i2_ES_EnQueueFIFO
  7219 ;;		_ES_EnQueueLIFO
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text39
  7224  001D94                     __ptext39:
  7225                           	opt stack 0
  7226  001D94                     ___wmul:
  7227                           	opt stack 18
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;incstack = 0
  7231  001D94  0100               	movlb	0	; () banked
  7232  001D96  5166               	movf	___wmul@multiplier& (0+255),w,b
  7233  001D98  0100               	movlb	0	; () banked
  7234  001D9A  0368               	mulwf	___wmul@multiplicand& (0+255),b
  7235  001D9C  CFF3 F06A          	movff	prodl,___wmul@product
  7236  001DA0  CFF4 F06B          	movff	prodh,___wmul@product+1
  7237  001DA4  0100               	movlb	0	; () banked
  7238  001DA6  5166               	movf	___wmul@multiplier& (0+255),w,b
  7239  001DA8  0100               	movlb	0	; () banked
  7240  001DAA  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7241  001DAC  50F3               	movf	prodl,w,c
  7242  001DAE  0100               	movlb	0	; () banked
  7243  001DB0  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  7244  001DB2  0100               	movlb	0	; () banked
  7245  001DB4  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7246  001DB6  0100               	movlb	0	; () banked
  7247  001DB8  0368               	mulwf	___wmul@multiplicand& (0+255),b
  7248  001DBA  50F3               	movf	prodl,w,c
  7249  001DBC  0100               	movlb	0	; () banked
  7250  001DBE  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  7251                           
  7252                           ; BSR set to: 0
  7253  001DC0  C06A  F066         	movff	___wmul@product,?___wmul
  7254  001DC4  C06B  F067         	movff	___wmul@product+1,?___wmul+1
  7255  001DC8  0012               	return	
  7256  001DCA                     __end_of___wmul:
  7257                           	opt stack 0
  7258                           tosu	equ	0xFFF
  7259                           tosh	equ	0xFFE
  7260                           tosl	equ	0xFFD
  7261                           pclath	equ	0xFFA
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           postinc0	equ	0xFEE
  7270                           wreg	equ	0xFE8
  7271                           indf1	equ	0xFE7
  7272                           postinc1	equ	0xFE6
  7273                           postdec1	equ	0xFE5
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           postinc2	equ	0xFDE
  7278                           postdec2	equ	0xFDD
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function ___awmod *****************
  7284 ;; Defined at:
  7285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  dividend        2    0[BANK0 ] int 
  7288 ;;  divisor         2    2[BANK0 ] int 
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  sign            1    5[BANK0 ] unsigned char 
  7291 ;;  counter         1    4[BANK0 ] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  2    0[BANK0 ] int 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7301 ;;      Params:         0       4       0       0
  7302 ;;      Locals:         0       2       0       0
  7303 ;;      Temps:          0       0       0       0
  7304 ;;      Totals:         0       6       0       0
  7305 ;;Total ram usage:        6 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    6
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_ES_EnQueueFIFO
  7312 ;;		_UpdatePattern
  7313 ;;		_ThinkingPattern
  7314 ;;		i2_ES_EnQueueFIFO
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text40
  7319  0016E0                     __ptext40:
  7320                           	opt stack 0
  7321  0016E0                     ___awmod:
  7322                           	opt stack 18
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;incstack = 0
  7326  0016E0  0E00               	movlw	0
  7327  0016E2  0100               	movlb	0	; () banked
  7328  0016E4  6F65               	movwf	___awmod@sign& (0+255),b
  7329                           
  7330                           ; BSR set to: 0
  7331  0016E6  0100               	movlb	0	; () banked
  7332  0016E8  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7333  0016EA  D008               	goto	l2210
  7334                           
  7335                           ; BSR set to: 0
  7336  0016EC  0100               	movlb	0	; () banked
  7337  0016EE  6D60               	negf	___awmod@dividend& (0+255),b
  7338  0016F0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7339  0016F2  B0D8               	btfsc	status,0,c
  7340  0016F4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7341                           
  7342                           ; BSR set to: 0
  7343  0016F6  0E01               	movlw	1
  7344  0016F8  0100               	movlb	0	; () banked
  7345  0016FA  6F65               	movwf	___awmod@sign& (0+255),b
  7346  0016FC                     l2210:
  7347                           
  7348                           ; BSR set to: 0
  7349  0016FC  0100               	movlb	0	; () banked
  7350  0016FE  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7351  001700  D005               	goto	l2214
  7352                           
  7353                           ; BSR set to: 0
  7354  001702  0100               	movlb	0	; () banked
  7355  001704  6D62               	negf	___awmod@divisor& (0+255),b
  7356  001706  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  7357  001708  B0D8               	btfsc	status,0,c
  7358  00170A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  7359  00170C                     l2214:
  7360                           
  7361                           ; BSR set to: 0
  7362  00170C  0100               	movlb	0	; () banked
  7363  00170E  5162               	movf	___awmod@divisor& (0+255),w,b
  7364  001710  0100               	movlb	0	; () banked
  7365  001712  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7366  001714  B4D8               	btfsc	status,2,c
  7367  001716  D026               	goto	l2230
  7368                           
  7369                           ; BSR set to: 0
  7370  001718  0E01               	movlw	1
  7371  00171A  0100               	movlb	0	; () banked
  7372  00171C  6F64               	movwf	___awmod@counter& (0+255),b
  7373  00171E  D006               	goto	l2220
  7374  001720                     l2218:
  7375                           
  7376                           ; BSR set to: 0
  7377  001720  0100               	movlb	0	; () banked
  7378  001722  90D8               	bcf	status,0,c
  7379  001724  3762               	rlcf	___awmod@divisor& (0+255),f,b
  7380  001726  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7381  001728  0100               	movlb	0	; () banked
  7382  00172A  2B64               	incf	___awmod@counter& (0+255),f,b
  7383  00172C                     l2220:
  7384                           
  7385                           ; BSR set to: 0
  7386  00172C  0100               	movlb	0	; () banked
  7387  00172E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7388  001730  D7F7               	goto	l2218
  7389  001732                     l2222:
  7390                           
  7391                           ; BSR set to: 0
  7392  001732  0100               	movlb	0	; () banked
  7393  001734  5162               	movf	___awmod@divisor& (0+255),w,b
  7394  001736  0100               	movlb	0	; () banked
  7395  001738  5D60               	subwf	___awmod@dividend& (0+255),w,b
  7396  00173A  0100               	movlb	0	; () banked
  7397  00173C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7398  00173E  0100               	movlb	0	; () banked
  7399  001740  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7400  001742  A0D8               	btfss	status,0,c
  7401  001744  D008               	goto	l2226
  7402                           
  7403                           ; BSR set to: 0
  7404  001746  0100               	movlb	0	; () banked
  7405  001748  5162               	movf	___awmod@divisor& (0+255),w,b
  7406  00174A  0100               	movlb	0	; () banked
  7407  00174C  5F60               	subwf	___awmod@dividend& (0+255),f,b
  7408  00174E  0100               	movlb	0	; () banked
  7409  001750  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  7410  001752  0100               	movlb	0	; () banked
  7411  001754  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7412  001756                     l2226:
  7413                           
  7414                           ; BSR set to: 0
  7415  001756  0100               	movlb	0	; () banked
  7416  001758  90D8               	bcf	status,0,c
  7417  00175A  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7418  00175C  3362               	rrcf	___awmod@divisor& (0+255),f,b
  7419                           
  7420                           ; BSR set to: 0
  7421  00175E  0100               	movlb	0	; () banked
  7422  001760  2F64               	decfsz	___awmod@counter& (0+255),f,b
  7423  001762  D7E7               	goto	l2222
  7424  001764                     l2230:
  7425                           
  7426                           ; BSR set to: 0
  7427  001764  0100               	movlb	0	; () banked
  7428  001766  5165               	movf	___awmod@sign& (0+255),w,b
  7429  001768  0100               	movlb	0	; () banked
  7430  00176A  B4D8               	btfsc	status,2,c
  7431  00176C  D005               	goto	l2234
  7432                           
  7433                           ; BSR set to: 0
  7434  00176E  0100               	movlb	0	; () banked
  7435  001770  6D60               	negf	___awmod@dividend& (0+255),b
  7436  001772  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  7437  001774  B0D8               	btfsc	status,0,c
  7438  001776  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  7439  001778                     l2234:
  7440                           
  7441                           ; BSR set to: 0
  7442  001778  C060  F060         	movff	___awmod@dividend,?___awmod
  7443  00177C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  7444  001780  0012               	return	
  7445  001782                     __end_of___awmod:
  7446                           	opt stack 0
  7447                           tosu	equ	0xFFF
  7448                           tosh	equ	0xFFE
  7449                           tosl	equ	0xFFD
  7450                           pclath	equ	0xFFA
  7451                           tblptru	equ	0xFF8
  7452                           tblptrh	equ	0xFF7
  7453                           tblptrl	equ	0xFF6
  7454                           tablat	equ	0xFF5
  7455                           prodh	equ	0xFF4
  7456                           prodl	equ	0xFF3
  7457                           intcon	equ	0xFF2
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           indf1	equ	0xFE7
  7461                           postinc1	equ	0xFE6
  7462                           postdec1	equ	0xFE5
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8
  7471                           
  7472 ;; *************** function _DotStar_Init *****************
  7473 ;; Defined at:
  7474 ;;		line 48 in file "Pattern_DotStarLED.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  numPixels       1    wreg     unsigned char 
  7477 ;;  brightness      1    0[BANK0 ] unsigned char 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  numPixels       1    3[BANK0 ] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7489 ;;      Params:         0       1       0       0
  7490 ;;      Locals:         0       1       0       0
  7491 ;;      Temps:          0       2       0       0
  7492 ;;      Totals:         0       4       0       0
  7493 ;;Total ram usage:        4 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    6
  7496 ;; This function calls:
  7497 ;;		Nothing
  7498 ;; This function is called by:
  7499 ;;		_InitPatternControlService
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text41
  7504  0014E8                     __ptext41:
  7505                           	opt stack 0
  7506  0014E8                     _DotStar_Init:
  7507                           	opt stack 22
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;incstack = 0
  7511                           ;DotStar_Init@numPixels stored from wreg
  7512  0014E8  0100               	movlb	0	; () banked
  7513  0014EA  6F63               	movwf	DotStar_Init@numPixels& (0+255),b
  7514                           
  7515                           ;Pattern_DotStarLED.c: 57: Length = numPixels;
  7516  0014EC  C063  F0E4         	movff	DotStar_Init@numPixels,_Length
  7517                           
  7518                           ;Pattern_DotStarLED.c: 59: Brightness = brightness;
  7519  0014F0  C060  F0F8         	movff	DotStar_Init@brightness,_Brightness
  7520                           
  7521                           ;Pattern_DotStarLED.c: 61: PixelFrames[0] = 0x0;
  7522  0014F4  0E00               	movlw	0
  7523  0014F6  CFE8 F1B8          	movff	wreg,_PixelFrames
  7524  0014FA  0E00               	movlw	0
  7525  0014FC  CFE8 F1B9          	movff	wreg,_PixelFrames+1
  7526  001500  0E00               	movlw	0
  7527  001502  CFE8 F1BA          	movff	wreg,_PixelFrames+2
  7528  001506  0E00               	movlw	0
  7529  001508  CFE8 F1BB          	movff	wreg,_PixelFrames+3
  7530                           
  7531                           ;Pattern_DotStarLED.c: 62: PixelFrames[Length+1] = 0xffffffff;
  7532  00150C  0100               	movlb	0	; () banked
  7533  00150E  51E4               	movf	_Length& (0+255),w,b
  7534  001510  0100               	movlb	0	; () banked
  7535  001512  6F61               	movwf	??_DotStar_Init& (0+255),b
  7536  001514  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  7537  001516  0100               	movlb	0	; () banked
  7538  001518  90D8               	bcf	status,0,c
  7539  00151A  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  7540  00151C  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  7541  00151E  0100               	movlb	0	; () banked
  7542  001520  90D8               	bcf	status,0,c
  7543  001522  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  7544  001524  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  7545  001526  0E04               	movlw	4
  7546  001528  0100               	movlb	0	; () banked
  7547  00152A  2761               	addwf	??_DotStar_Init& (0+255),f,b
  7548  00152C  0E00               	movlw	0
  7549  00152E  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  7550  001530  0EB8               	movlw	low _PixelFrames
  7551  001532  0100               	movlb	0	; () banked
  7552  001534  2561               	addwf	??_DotStar_Init& (0+255),w,b
  7553  001536  6ED9               	movwf	fsr2l,c
  7554  001538  0E01               	movlw	high _PixelFrames
  7555  00153A  0100               	movlb	0	; () banked
  7556  00153C  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  7557  00153E  6EDA               	movwf	fsr2h,c
  7558  001540  0EFF               	movlw	255
  7559  001542  6EDE               	movwf	postinc2,c
  7560  001544  0EFF               	movlw	255
  7561  001546  6EDE               	movwf	postinc2,c
  7562  001548  0EFF               	movlw	255
  7563  00154A  6EDE               	movwf	postinc2,c
  7564  00154C  0EFF               	movlw	255
  7565  00154E  6EDD               	movwf	postdec2,c
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;Pattern_DotStarLED.c: 63: PixelFrames[Length+1+1] = 0xffffffff;
  7569  001550  0100               	movlb	0	; () banked
  7570  001552  51E4               	movf	_Length& (0+255),w,b
  7571  001554  0100               	movlb	0	; () banked
  7572  001556  6F61               	movwf	??_DotStar_Init& (0+255),b
  7573  001558  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  7574  00155A  0100               	movlb	0	; () banked
  7575  00155C  90D8               	bcf	status,0,c
  7576  00155E  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  7577  001560  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  7578  001562  0100               	movlb	0	; () banked
  7579  001564  90D8               	bcf	status,0,c
  7580  001566  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  7581  001568  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  7582  00156A  0E08               	movlw	8
  7583  00156C  0100               	movlb	0	; () banked
  7584  00156E  2761               	addwf	??_DotStar_Init& (0+255),f,b
  7585  001570  0E00               	movlw	0
  7586  001572  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  7587  001574  0EB8               	movlw	low _PixelFrames
  7588  001576  0100               	movlb	0	; () banked
  7589  001578  2561               	addwf	??_DotStar_Init& (0+255),w,b
  7590  00157A  6ED9               	movwf	fsr2l,c
  7591  00157C  0E01               	movlw	high _PixelFrames
  7592  00157E  0100               	movlb	0	; () banked
  7593  001580  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  7594  001582  6EDA               	movwf	fsr2h,c
  7595  001584  0EFF               	movlw	255
  7596  001586  6EDE               	movwf	postinc2,c
  7597  001588  0EFF               	movlw	255
  7598  00158A  6EDE               	movwf	postinc2,c
  7599  00158C  0EFF               	movlw	255
  7600  00158E  6EDE               	movwf	postinc2,c
  7601  001590  0EFF               	movlw	255
  7602  001592  6EDD               	movwf	postdec2,c
  7603                           
  7604                           ; BSR set to: 0
  7605  001594  0012               	return		;funcret
  7606  001596                     __end_of_DotStar_Init:
  7607                           	opt stack 0
  7608                           tosu	equ	0xFFF
  7609                           tosh	equ	0xFFE
  7610                           tosl	equ	0xFFD
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           indf1	equ	0xFE7
  7622                           postinc1	equ	0xFE6
  7623                           postdec1	equ	0xFE5
  7624                           fsr1h	equ	0xFE2
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _ES_Timer_Init *****************
  7634 ;; Defined at:
  7635 ;;		line 130 in file "ES_Timers.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  Rate            2    2[BANK0 ] enum E15424
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;		None
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7649 ;;      Params:         0       2       0       0
  7650 ;;      Locals:         0       0       0       0
  7651 ;;      Temps:          0       0       0       0
  7652 ;;      Totals:         0       2       0       0
  7653 ;;Total ram usage:        2 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    7
  7656 ;; This function calls:
  7657 ;;		__HW_Timer_Init
  7658 ;; This function is called by:
  7659 ;;		_ES_Initialize
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text42
  7664  001F68                     __ptext42:
  7665                           	opt stack 0
  7666  001F68                     _ES_Timer_Init:
  7667                           	opt stack 22
  7668                           
  7669                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;incstack = 0
  7673  001F68  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  7674  001F6C  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  7675  001F70  EC71  F00F         	call	__HW_Timer_Init	;wreg free
  7676  001F74  0012               	return		;funcret
  7677  001F76                     __end_of_ES_Timer_Init:
  7678                           	opt stack 0
  7679                           tosu	equ	0xFFF
  7680                           tosh	equ	0xFFE
  7681                           tosl	equ	0xFFD
  7682                           pclath	equ	0xFFA
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           intcon	equ	0xFF2
  7690                           postinc0	equ	0xFEE
  7691                           wreg	equ	0xFE8
  7692                           indf1	equ	0xFE7
  7693                           postinc1	equ	0xFE6
  7694                           postdec1	equ	0xFE5
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function __HW_Timer_Init *****************
  7705 ;; Defined at:
  7706 ;;		line 71 in file "ES_Port.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  Rate            2    0[BANK0 ] enum E15412
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7720 ;;      Params:         0       2       0       0
  7721 ;;      Locals:         0       0       0       0
  7722 ;;      Temps:          0       0       0       0
  7723 ;;      Totals:         0       2       0       0
  7724 ;;Total ram usage:        2 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    6
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_ES_Timer_Init
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text43
  7735  001EE2                     __ptext43:
  7736                           	opt stack 0
  7737  001EE2                     __HW_Timer_Init:
  7738                           	opt stack 22
  7739                           
  7740                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  7741                           
  7742                           ;incstack = 0
  7743  001EE2  0E04               	movlw	4
  7744  001EE4  6E9D               	movwf	3997,c	;volatile
  7745                           
  7746                           ;ES_Port.c: 84: INTCON = 0b01000000;
  7747  001EE6  0E40               	movlw	64
  7748  001EE8  6EF2               	movwf	intcon,c	;volatile
  7749                           
  7750                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  7751  001EEA  0E0A               	movlw	10
  7752  001EEC  6EBD               	movwf	4029,c	;volatile
  7753                           
  7754                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  7755  001EEE  0E01               	movlw	1
  7756  001EF0  6EBE               	movwf	4030,c	;volatile
  7757                           
  7758                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  7759  001EF2  0E00               	movlw	0
  7760  001EF4  6EBF               	movwf	4031,c	;volatile
  7761                           
  7762                           ;ES_Port.c: 106: T1CON = 0b00100001;
  7763  001EF6  0E21               	movlw	33
  7764  001EF8  6ECD               	movwf	4045,c	;volatile
  7765                           
  7766                           ;ES_Port.c: 108: {GIE = 1;};
  7767  001EFA  8EF2               	bsf	intcon,7,c	;volatile
  7768  001EFC  0012               	return		;funcret
  7769  001EFE                     __end_of__HW_Timer_Init:
  7770                           	opt stack 0
  7771                           tosu	equ	0xFFF
  7772                           tosh	equ	0xFFE
  7773                           tosl	equ	0xFFD
  7774                           pclath	equ	0xFFA
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           indf1	equ	0xFE7
  7785                           postinc1	equ	0xFE6
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _ES_InitQueue *****************
  7797 ;; Defined at:
  7798 ;;		line 58 in file "ES_Queue.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  7801 ;;		 -> Queue1(12), Queue0(12), 
  7802 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  7805 ;;		 -> Queue1(12), Queue0(12), 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      unsigned char 
  7808 ;; Registers used:
  7809 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7815 ;;      Params:         0       3       0       0
  7816 ;;      Locals:         0       2       0       0
  7817 ;;      Temps:          0       0       0       0
  7818 ;;      Totals:         0       5       0       0
  7819 ;;Total ram usage:        5 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    6
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_ES_Initialize
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text44
  7830  001CE4                     __ptext44:
  7831                           	opt stack 0
  7832  001CE4                     _ES_InitQueue:
  7833                           	opt stack 23
  7834                           
  7835                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  7836                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  7837                           
  7838                           ;incstack = 0
  7839  001CE4  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  7840  001CE8  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  7841                           
  7842                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  7843  001CEC  0100               	movlb	0	; () banked
  7844  001CEE  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  7845  001CF0  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  7846  001CF4  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  7847  001CF8  6EDF               	movwf	indf2,c
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  7851  001CFA  0100               	movlb	0	; () banked
  7852  001CFC  EE20 F001          	lfsr	2,1
  7853  001D00  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  7854  001D02  26D9               	addwf	fsr2l,f,c
  7855  001D04  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  7856  001D06  22DA               	addwfc	fsr2h,f,c
  7857  001D08  0E00               	movlw	0
  7858  001D0A  6EDF               	movwf	indf2,c
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  7862  001D0C  0100               	movlb	0	; () banked
  7863  001D0E  EE20 F002          	lfsr	2,2
  7864  001D12  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  7865  001D14  26D9               	addwf	fsr2l,f,c
  7866  001D16  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  7867  001D18  22DA               	addwfc	fsr2h,f,c
  7868  001D1A  0E00               	movlw	0
  7869  001D1C  6EDF               	movwf	indf2,c
  7870  001D1E  0012               	return	
  7871  001D20                     __end_of_ES_InitQueue:
  7872                           	opt stack 0
  7873                           tosu	equ	0xFFF
  7874                           tosh	equ	0xFFE
  7875                           tosl	equ	0xFFD
  7876                           pclath	equ	0xFFA
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           postinc0	equ	0xFEE
  7885                           wreg	equ	0xFE8
  7886                           indf1	equ	0xFE7
  7887                           postinc1	equ	0xFE6
  7888                           postdec1	equ	0xFE5
  7889                           fsr1h	equ	0xFE2
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function _ISR *****************
  7899 ;; Defined at:
  7900 ;;		line 111 in file "ES_Port.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7914 ;;      Params:         0       0       0       0
  7915 ;;      Locals:         0       0       0       0
  7916 ;;      Temps:         16       0       0       0
  7917 ;;      Totals:        16       0       0       0
  7918 ;;Total ram usage:       16 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    5
  7921 ;; This function calls:
  7922 ;;		_SPI32_EOTResponse
  7923 ;; This function is called by:
  7924 ;;		Interrupt level 2
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	intcode
  7929  000008                     __pintcode:
  7930                           	opt stack 0
  7931  000008                     _ISR:
  7932                           	opt stack 16
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;incstack = 0
  7936  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7937  00000A  CFFA F026          	movff	pclath,??_ISR+2
  7938  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  7939  000012  EDCB  F00A         	call	int_func,f	;refresh shadow registers
  7940                           tosu	equ	0xFFF
  7941                           tosh	equ	0xFFE
  7942                           tosl	equ	0xFFD
  7943                           pclatu	equ	0xFFB
  7944                           pclath	equ	0xFFA
  7945                           tblptru	equ	0xFF8
  7946                           tblptrh	equ	0xFF7
  7947                           tblptrl	equ	0xFF6
  7948                           tablat	equ	0xFF5
  7949                           prodh	equ	0xFF4
  7950                           prodl	equ	0xFF3
  7951                           intcon	equ	0xFF2
  7952                           postinc0	equ	0xFEE
  7953                           wreg	equ	0xFE8
  7954                           indf1	equ	0xFE7
  7955                           postinc1	equ	0xFE6
  7956                           postdec1	equ	0xFE5
  7957                           fsr1h	equ	0xFE2
  7958                           fsr1l	equ	0xFE1
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           postdec2	equ	0xFDD
  7962                           fsr2h	equ	0xFDA
  7963                           fsr2l	equ	0xFD9
  7964                           status	equ	0xFD8
  7965                           
  7966                           	psect	intcode_body
  7967  001596                     __pintcode_body:
  7968                           	opt stack 16
  7969  001596                     int_func:
  7970                           	opt stack 16
  7971  001596  0006               	pop		; remove dummy address from shadow register refresh
  7972  001598  CFE9 F028          	movff	fsr0l,??_ISR+4
  7973  00159C  CFEA F029          	movff	fsr0h,??_ISR+5
  7974  0015A0  CFE1 F02A          	movff	fsr1l,??_ISR+6
  7975  0015A4  CFE2 F02B          	movff	fsr1h,??_ISR+7
  7976  0015A8  CFD9 F02C          	movff	fsr2l,??_ISR+8
  7977  0015AC  CFDA F02D          	movff	fsr2h,??_ISR+9
  7978  0015B0  CFF3 F02E          	movff	prodl,??_ISR+10
  7979  0015B4  CFF4 F02F          	movff	prodh,??_ISR+11
  7980  0015B8  CFF6 F030          	movff	tblptrl,??_ISR+12
  7981  0015BC  CFF7 F031          	movff	tblptrh,??_ISR+13
  7982  0015C0  CFF8 F032          	movff	tblptru,??_ISR+14
  7983  0015C4  CFF5 F033          	movff	tablat,??_ISR+15
  7984                           
  7985                           ;ES_Port.c: 114: static unsigned int LastTime;
  7986                           ;ES_Port.c: 115: static unsigned int NextTime;
  7987                           ;ES_Port.c: 117: if (CCP1IF == 1)
  7988  0015C8  A49E               	btfss	3998,2,c	;volatile
  7989  0015CA  D015               	goto	i2l3056
  7990                           
  7991                           ;ES_Port.c: 118: {
  7992                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  7993  0015CC  50BF               	movf	4031,w,c	;volatile
  7994  0015CE  6E24               	movwf	??_ISR& (0+255),c
  7995  0015D0  50BE               	movf	4030,w,c	;volatile
  7996  0015D2  6E38               	movwf	ISR@LastTime,c
  7997  0015D4  C024  F039         	movff	??_ISR,ISR@LastTime+1
  7998                           
  7999                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  8000  0015D8  0E20               	movlw	32
  8001  0015DA  2438               	addwf	ISR@LastTime,w,c
  8002  0015DC  6E3A               	movwf	ISR@NextTime,c
  8003  0015DE  0E4E               	movlw	78
  8004  0015E0  2039               	addwfc	ISR@LastTime+1,w,c
  8005  0015E2  6E3B               	movwf	ISR@NextTime+1,c
  8006                           
  8007                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  8008  0015E4  503B               	movf	ISR@NextTime+1,w,c
  8009  0015E6  6EBF               	movwf	4031,c	;volatile
  8010                           
  8011                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  8012  0015E8  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  8013                           
  8014                           ;ES_Port.c: 123: CCP1IF = 0;
  8015  0015EC  949E               	bcf	3998,2,c	;volatile
  8016                           
  8017                           ;ES_Port.c: 124: TickCount++;
  8018  0015EE  0100               	movlb	0	; () banked
  8019  0015F0  2BE8               	incf	_TickCount& (0+255),f,b	;volatile
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;ES_Port.c: 125: SysTickCounter++;
  8023  0015F2  4A3C               	infsnz	_SysTickCounter,f,c	;volatile
  8024  0015F4  2A3D               	incf	_SysTickCounter+1,f,c	;volatile
  8025  0015F6                     i2l3056:
  8026                           
  8027                           ;ES_Port.c: 126: }
  8028                           ;ES_Port.c: 127: if (SSPIF == 1)
  8029  0015F6  A69E               	btfss	3998,3,c	;volatile
  8030  0015F8  D003               	goto	i2l149
  8031                           
  8032                           ;ES_Port.c: 128: {
  8033                           ;ES_Port.c: 129: SSPIF = 0;
  8034  0015FA  969E               	bcf	3998,3,c	;volatile
  8035                           
  8036                           ;ES_Port.c: 130: SPI32_EOTResponse();
  8037  0015FC  ECAD  F00E         	call	_SPI32_EOTResponse	;wreg free
  8038  001600                     i2l149:
  8039  001600  C033  FFF5         	movff	??_ISR+15,tablat
  8040  001604  C032  FFF8         	movff	??_ISR+14,tblptru
  8041  001608  C031  FFF7         	movff	??_ISR+13,tblptrh
  8042  00160C  C030  FFF6         	movff	??_ISR+12,tblptrl
  8043  001610  C02F  FFF4         	movff	??_ISR+11,prodh
  8044  001614  C02E  FFF3         	movff	??_ISR+10,prodl
  8045  001618  C02D  FFDA         	movff	??_ISR+9,fsr2h
  8046  00161C  C02C  FFD9         	movff	??_ISR+8,fsr2l
  8047  001620  C02B  FFE2         	movff	??_ISR+7,fsr1h
  8048  001624  C02A  FFE1         	movff	??_ISR+6,fsr1l
  8049  001628  C029  FFEA         	movff	??_ISR+5,fsr0h
  8050  00162C  C028  FFE9         	movff	??_ISR+4,fsr0l
  8051  001630  C027  FFFB         	movff	??_ISR+3,pclatu
  8052  001634  C026  FFFA         	movff	??_ISR+2,pclath
  8053  001638  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8054  00163A  0011               	retfie		f
  8055  00163C                     __end_of_ISR:
  8056                           	opt stack 0
  8057                           tosu	equ	0xFFF
  8058                           tosh	equ	0xFFE
  8059                           tosl	equ	0xFFD
  8060                           pclatu	equ	0xFFB
  8061                           pclath	equ	0xFFA
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon	equ	0xFF2
  8069                           postinc0	equ	0xFEE
  8070                           fsr0h	equ	0xFEA
  8071                           fsr0l	equ	0xFE9
  8072                           wreg	equ	0xFE8
  8073                           indf1	equ	0xFE7
  8074                           postinc1	equ	0xFE6
  8075                           postdec1	equ	0xFE5
  8076                           fsr1h	equ	0xFE2
  8077                           fsr1l	equ	0xFE1
  8078                           indf2	equ	0xFDF
  8079                           postinc2	equ	0xFDE
  8080                           postdec2	equ	0xFDD
  8081                           fsr2h	equ	0xFDA
  8082                           fsr2l	equ	0xFD9
  8083                           status	equ	0xFD8
  8084                           
  8085 ;; *************** function _SPI32_EOTResponse *****************
  8086 ;; Defined at:
  8087 ;;		line 167 in file "SPI32_HW.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      void 
  8094 ;; Registers used:
  8095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8101 ;;      Params:         0       0       0       0
  8102 ;;      Locals:         3       0       0       0
  8103 ;;      Temps:          0       0       0       0
  8104 ;;      Totals:         3       0       0       0
  8105 ;;Total ram usage:        3 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    4
  8108 ;; This function calls:
  8109 ;;		i2_PostSPI32ControlService
  8110 ;;		i2_SPI32_SendFrame
  8111 ;; This function is called by:
  8112 ;;		_ISR
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text46
  8117  001D5A                     __ptext46:
  8118                           	opt stack 0
  8119  001D5A                     _SPI32_EOTResponse:
  8120                           	opt stack 16
  8121                           
  8122                           ;SPI32_HW.c: 169: if(FrameByte == 0){
  8123                           
  8124                           ;incstack = 0
  8125  001D5A  0100               	movlb	0	; () banked
  8126  001D5C  51F9               	movf	_FrameByte& (0+255),w,b
  8127  001D5E  A4D8               	btfss	status,2,c
  8128  001D60  D00E               	goto	i2l2962
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;SPI32_HW.c: 171: FrameByte = 4;
  8132  001D62  0E04               	movlw	4
  8133  001D64  0100               	movlb	0	; () banked
  8134  001D66  6FF9               	movwf	_FrameByte& (0+255),b
  8135                           
  8136                           ;SPI32_HW.c: 173: ES_Event EOTevent;
  8137                           ;SPI32_HW.c: 174: EOTevent.EventType = ES_TIMEOUT;
  8138  001D68  0E03               	movlw	3
  8139  001D6A  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;SPI32_HW.c: 175: PostSPI32ControlService(EOTevent);
  8143  001D6C  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  8144  001D70  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  8145  001D74  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  8146  001D78  ECA2  F00F         	call	i2_PostSPI32ControlService	;wreg free
  8147                           
  8148                           ;SPI32_HW.c: 176: }
  8149  001D7C  0012               	return	
  8150  001D7E                     i2l2962:
  8151                           
  8152                           ;SPI32_HW.c: 177: else{
  8153                           ;SPI32_HW.c: 179: SPI32_SendFrame(TransmitFrame);
  8154  001D7E  C034  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
  8155  001D82  C035  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
  8156  001D86  C036  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
  8157  001D8A  C037  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
  8158  001D8E  ECE4  F00D         	call	i2_SPI32_SendFrame	;wreg free
  8159  001D92  0012               	return	
  8160  001D94                     __end_of_SPI32_EOTResponse:
  8161                           	opt stack 0
  8162                           tosu	equ	0xFFF
  8163                           tosh	equ	0xFFE
  8164                           tosl	equ	0xFFD
  8165                           pclatu	equ	0xFFB
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           indf1	equ	0xFE7
  8179                           postinc1	equ	0xFE6
  8180                           postdec1	equ	0xFE5
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function i2_SPI32_SendFrame *****************
  8191 ;; Defined at:
  8192 ;;		line 86 in file "SPI32_HW.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  newFrame        4    0[COMRAM] unsigned long 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0, prodl, prodh
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8206 ;;      Params:         4       0       0       0
  8207 ;;      Locals:         0       0       0       0
  8208 ;;      Temps:          4       0       0       0
  8209 ;;      Totals:         8       0       0       0
  8210 ;;Total ram usage:        8 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_SPI32_EOTResponse
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text47
  8220  001BC8                     __ptext47:
  8221                           	opt stack 0
  8222  001BC8                     i2_SPI32_SendFrame:
  8223                           	opt stack 19
  8224                           
  8225                           ;SPI32_HW.c: 101: if(FrameByte == 4){
  8226                           
  8227                           ;incstack = 0
  8228  001BC8  0E04               	movlw	4
  8229  001BCA  0100               	movlb	0	; () banked
  8230  001BCC  19F9               	xorwf	_FrameByte& (0+255),w,b
  8231  001BCE  A4D8               	btfss	status,2,c
  8232  001BD0  D008               	goto	i2l2898
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
  8236  001BD2  C001  F034         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
  8237  001BD6  C002  F035         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  8238  001BDA  C003  F036         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  8239  001BDE  C004  F037         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  8240  001BE2                     i2l2898:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;SPI32_HW.c: 104: }
  8244                           ;SPI32_HW.c: 106: FrameByte--;
  8245  001BE2  0100               	movlb	0	; () banked
  8246  001BE4  07F9               	decf	_FrameByte& (0+255),f,b
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  8250  001BE6  0100               	movlb	0	; () banked
  8251  001BE8  51F9               	movf	_FrameByte& (0+255),w,b
  8252  001BEA  0D08               	mullw	8
  8253  001BEC  50F3               	movf	prodl,w,c
  8254  001BEE  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
  8255  001BF2  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
  8256  001BF6  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
  8257  001BFA  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
  8258  001BFE  2AE8               	incf	wreg,f,c
  8259  001C00  D005               	goto	i2u181_40
  8260  001C02                     i2u181_45:
  8261  001C02  90D8               	bcf	status,0,c
  8262  001C04  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
  8263  001C06  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
  8264  001C08  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
  8265  001C0A  3205               	rrcf	??i2_SPI32_SendFrame,f,c
  8266  001C0C                     i2u181_40:
  8267  001C0C  2EE8               	decfsz	wreg,f,c
  8268  001C0E  D7F9               	goto	i2u181_45
  8269  001C10  5005               	movf	??i2_SPI32_SendFrame,w,c
  8270  001C12  6EC9               	movwf	4041,c	;volatile
  8271                           
  8272                           ; BSR set to: 0
  8273  001C14  0012               	return		;funcret
  8274  001C16                     __end_ofi2_SPI32_SendFrame:
  8275                           	opt stack 0
  8276                           tosu	equ	0xFFF
  8277                           tosh	equ	0xFFE
  8278                           tosl	equ	0xFFD
  8279                           pclatu	equ	0xFFB
  8280                           pclath	equ	0xFFA
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           postinc0	equ	0xFEE
  8289                           fsr0h	equ	0xFEA
  8290                           fsr0l	equ	0xFE9
  8291                           wreg	equ	0xFE8
  8292                           indf1	equ	0xFE7
  8293                           postinc1	equ	0xFE6
  8294                           postdec1	equ	0xFE5
  8295                           fsr1h	equ	0xFE2
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function i2_PostSPI32ControlService *****************
  8305 ;; Defined at:
  8306 ;;		line 117 in file "SPI32_ControlService.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      unsigned char 
  8313 ;; Registers used:
  8314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8320 ;;      Params:         3       0       0       0
  8321 ;;      Locals:         0       0       0       0
  8322 ;;      Temps:          0       0       0       0
  8323 ;;      Totals:         3       0       0       0
  8324 ;;Total ram usage:        3 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    3
  8327 ;; This function calls:
  8328 ;;		i2_ES_PostToService
  8329 ;; This function is called by:
  8330 ;;		_SPI32_EOTResponse
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text48
  8335  001F44                     __ptext48:
  8336                           	opt stack 0
  8337  001F44                     i2_PostSPI32ControlService:
  8338                           	opt stack 16
  8339                           
  8340                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  8341                           ;	Return value of i2_PostSPI32ControlService is never used
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;incstack = 0
  8345  001F44  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  8346  001F48  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  8347  001F4C  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  8348  001F50  0100               	movlb	0	; () banked
  8349  001F52  51E1               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  8350  001F54  EC34  F00D         	call	i2_ES_PostToService
  8351  001F58  0012               	return	
  8352  001F5A                     __end_ofi2_PostSPI32ControlService:
  8353                           	opt stack 0
  8354                           tosu	equ	0xFFF
  8355                           tosh	equ	0xFFE
  8356                           tosl	equ	0xFFD
  8357                           pclatu	equ	0xFFB
  8358                           pclath	equ	0xFFA
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           postinc0	equ	0xFEE
  8367                           fsr0h	equ	0xFEA
  8368                           fsr0l	equ	0xFE9
  8369                           wreg	equ	0xFE8
  8370                           indf1	equ	0xFE7
  8371                           postinc1	equ	0xFE6
  8372                           postdec1	equ	0xFE5
  8373                           fsr1h	equ	0xFE2
  8374                           fsr1l	equ	0xFE1
  8375                           indf2	equ	0xFDF
  8376                           postinc2	equ	0xFDE
  8377                           postdec2	equ	0xFDD
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function i2_ES_PostToService *****************
  8383 ;; Defined at:
  8384 ;;		line 351 in file "ES_Framework.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;  WhichService    1    wreg     unsigned char 
  8387 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;  WhichService    1   28[COMRAM] unsigned char 
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      unsigned char 
  8392 ;; Registers used:
  8393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8399 ;;      Params:         3       0       0       0
  8400 ;;      Locals:         1       0       0       0
  8401 ;;      Temps:          2       0       0       0
  8402 ;;      Totals:         6       0       0       0
  8403 ;;Total ram usage:        6 bytes
  8404 ;; Hardware stack levels used:    1
  8405 ;; Hardware stack levels required when called:    2
  8406 ;; This function calls:
  8407 ;;		i2_ES_EnQueueFIFO
  8408 ;; This function is called by:
  8409 ;;		i2_PostSPI32ControlService
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text49
  8414  001A68                     __ptext49:
  8415                           	opt stack 0
  8416  001A68                     i2_ES_PostToService:
  8417                           	opt stack 16
  8418                           
  8419                           ;incstack = 0
  8420                           ;i2ES_PostToService@WhichService stored from wreg
  8421  001A68  6E1D               	movwf	i2ES_PostToService@WhichService,c
  8422                           
  8423                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  8424                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  8425                           ;ES_Framework.c: 354: 1 )){
  8426  001A6A  0E02               	movlw	2
  8427  001A6C  601D               	cpfslt	i2ES_PostToService@WhichService,c
  8428  001A6E  D02F               	goto	i2l2698
  8429  001A70  501D               	movf	i2ES_PostToService@WhichService,w,c
  8430  001A72  0D03               	mullw	3
  8431  001A74  0E58               	movlw	low _EventQueues
  8432  001A76  24F3               	addwf	prodl,w,c
  8433  001A78  6EF6               	movwf	tblptrl,c
  8434  001A7A  0E03               	movlw	high _EventQueues
  8435  001A7C  20F4               	addwfc	prodh,w,c
  8436  001A7E  6EF7               	movwf	tblptrh,c
  8437  001A80                     	if	0	;There are less than 3 active tblptr bytes
  8438  001A80                     	endif
  8439  001A80  0009               	tblrd		*+
  8440  001A82  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  8441  001A86  000A               	tblrd		*-
  8442  001A88  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  8443  001A8C  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  8444  001A90  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  8445  001A94  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  8446  001A98  EC1A  F00A         	call	i2_ES_EnQueueFIFO	;wreg free
  8447  001A9C  06E8               	decf	wreg,f,c
  8448  001A9E  A4D8               	btfss	status,2,c
  8449  001AA0  D016               	goto	i2l2698
  8450                           
  8451                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  8452  001AA2  501D               	movf	i2ES_PostToService@WhichService,w,c
  8453  001AA4  0D02               	mullw	2
  8454  001AA6  0E01               	movlw	low _BitNum2SetMask
  8455  001AA8  24F3               	addwf	prodl,w,c
  8456  001AAA  6EF6               	movwf	tblptrl,c
  8457  001AAC  0E03               	movlw	high _BitNum2SetMask
  8458  001AAE  20F4               	addwfc	prodh,w,c
  8459  001AB0  6EF7               	movwf	tblptrh,c
  8460  001AB2                     	if	0	;There are less than 3 active tblptr bytes
  8461  001AB2                     	endif
  8462  001AB2  0009               	tblrd		*+
  8463  001AB4  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  8464  001AB8  0009               	tblrd		*+
  8465  001ABA  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  8466  001ABE  501B               	movf	??i2_ES_PostToService,w,c
  8467  001AC0  0100               	movlb	0	; () banked
  8468  001AC2  13DA               	iorwf	_Ready& (0+255),f,b
  8469  001AC4  501C               	movf	??i2_ES_PostToService+1,w,c
  8470  001AC6  0100               	movlb	0	; () banked
  8471  001AC8  13DB               	iorwf	(_Ready+1)& (0+255),f,b
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;ES_Framework.c: 356: return 1;
  8475  001ACA  0E01               	movlw	1
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;ES_Framework.c: 357: } else
  8479                           
  8480                           ; BSR set to: 0
  8481  001ACC  0012               	return	
  8482  001ACE                     i2l2698:
  8483                           
  8484                           ;ES_Framework.c: 358: return 0;
  8485  001ACE  0E00               	movlw	0
  8486  001AD0  0012               	return	
  8487  001AD2                     __end_ofi2_ES_PostToService:
  8488                           	opt stack 0
  8489                           tosu	equ	0xFFF
  8490                           tosh	equ	0xFFE
  8491                           tosl	equ	0xFFD
  8492                           pclatu	equ	0xFFB
  8493                           pclath	equ	0xFFA
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           postinc0	equ	0xFEE
  8502                           fsr0h	equ	0xFEA
  8503                           fsr0l	equ	0xFE9
  8504                           wreg	equ	0xFE8
  8505                           indf1	equ	0xFE7
  8506                           postinc1	equ	0xFE6
  8507                           postdec1	equ	0xFE5
  8508                           fsr1h	equ	0xFE2
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           fsr2h	equ	0xFDA
  8514                           fsr2l	equ	0xFD9
  8515                           status	equ	0xFD8
  8516                           
  8517 ;; *************** function i2_ES_EnQueueFIFO *****************
  8518 ;; Defined at:
  8519 ;;		line 85 in file "ES_Queue.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  8522 ;;		 -> Queue1(12), Queue0(12), 
  8523 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  8526 ;;		 -> Queue1(12), Queue0(12), 
  8527 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      unsigned char 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8537 ;;      Params:         5       0       0       0
  8538 ;;      Locals:         3       0       0       0
  8539 ;;      Temps:          3       0       0       0
  8540 ;;      Totals:        11       0       0       0
  8541 ;;Total ram usage:       11 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    1
  8544 ;; This function calls:
  8545 ;;		i2___awmod
  8546 ;;		i2___wmul
  8547 ;; This function is called by:
  8548 ;;		i2_ES_PostToService
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text50
  8553  001434                     __ptext50:
  8554                           	opt stack 0
  8555  001434                     i2_ES_EnQueueFIFO:
  8556                           	opt stack 16
  8557                           
  8558                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  8559                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  8560                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  8561                           
  8562                           ;incstack = 0
  8563  001434  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  8564  001438  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  8565                           
  8566                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  8567  00143C  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  8568  001440  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8569  001444  EE10 F002          	lfsr	1,2
  8570  001448  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8571  00144A  26E1               	addwf	fsr1l,f,c
  8572  00144C  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8573  00144E  22E2               	addwfc	fsr1h,f,c
  8574  001450  50DE               	movf	postinc2,w,c
  8575  001452  5CE6               	subwf	postinc1,w,c
  8576  001454  B0D8               	btfsc	status,0,c
  8577  001456  D046               	goto	i2l2592
  8578                           
  8579                           ;ES_Queue.c: 92: {
  8580                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  8581  001458  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  8582  00145C  9EF2               	bcf	intcon,7,c	;volatile
  8583                           
  8584                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  8585                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  8586  00145E  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  8587  001462  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8588  001466  50DF               	movf	indf2,w,c
  8589  001468  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  8590  00146A  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  8591  00146C  6E03               	movwf	i2___awmod@divisor,c
  8592  00146E  6A04               	clrf	i2___awmod@divisor+1,c
  8593  001470  EE20 F002          	lfsr	2,2
  8594  001474  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8595  001476  26D9               	addwf	fsr2l,f,c
  8596  001478  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8597  00147A  22DA               	addwfc	fsr2h,f,c
  8598  00147C  50DF               	movf	indf2,w,c
  8599  00147E  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  8600  001480  EE20 F001          	lfsr	2,1
  8601  001484  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8602  001486  26D9               	addwf	fsr2l,f,c
  8603  001488  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8604  00148A  22DA               	addwfc	fsr2h,f,c
  8605  00148C  50DF               	movf	indf2,w,c
  8606  00148E  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  8607  001490  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  8608  001492  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  8609  001494  6E01               	movwf	i2___awmod@dividend,c
  8610  001496  6A02               	clrf	i2___awmod@dividend+1,c
  8611  001498  3602               	rlcf	i2___awmod@dividend+1,f,c
  8612  00149A  ECFC  F00C         	call	i2___awmod	;wreg free
  8613  00149E  0E01               	movlw	1
  8614  0014A0  2401               	addwf	?i2___awmod,w,c
  8615  0014A2  6E07               	movwf	i2___wmul@multiplier,c
  8616  0014A4  0E00               	movlw	0
  8617  0014A6  2002               	addwfc	?i2___awmod+1,w,c
  8618  0014A8  6E08               	movwf	i2___wmul@multiplier+1,c
  8619  0014AA  0E00               	movlw	0
  8620  0014AC  6E0A               	movwf	i2___wmul@multiplicand+1,c
  8621  0014AE  0E03               	movlw	3
  8622  0014B0  6E09               	movwf	i2___wmul@multiplicand,c
  8623  0014B2  EC3F  F00F         	call	i2___wmul	;wreg free
  8624  0014B6  5007               	movf	?i2___wmul,w,c
  8625  0014B8  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  8626  0014BA  6ED9               	movwf	fsr2l,c
  8627  0014BC  5008               	movf	?i2___wmul+1,w,c
  8628  0014BE  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  8629  0014C0  6EDA               	movwf	fsr2h,c
  8630  0014C2  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  8631  0014C6  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  8632  0014CA  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  8633                           
  8634                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  8635  0014CE  EE20 F002          	lfsr	2,2
  8636  0014D2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8637  0014D4  26D9               	addwf	fsr2l,f,c
  8638  0014D6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8639  0014D8  22DA               	addwfc	fsr2h,f,c
  8640  0014DA  2ADF               	incf	indf2,f,c
  8641                           
  8642                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  8643  0014DC  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  8644                           
  8645                           ;ES_Queue.c: 101: return(1);
  8646  0014E0  0E01               	movlw	1
  8647                           
  8648                           ;ES_Queue.c: 102: }else
  8649  0014E2  0012               	return	
  8650  0014E4                     i2l2592:
  8651                           
  8652                           ;ES_Queue.c: 103: return(0);
  8653  0014E4  0E00               	movlw	0
  8654  0014E6  0012               	return	
  8655  0014E8                     __end_ofi2_ES_EnQueueFIFO:
  8656                           	opt stack 0
  8657                           tosu	equ	0xFFF
  8658                           tosh	equ	0xFFE
  8659                           tosl	equ	0xFFD
  8660                           pclatu	equ	0xFFB
  8661                           pclath	equ	0xFFA
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           intcon	equ	0xFF2
  8669                           postinc0	equ	0xFEE
  8670                           fsr0h	equ	0xFEA
  8671                           fsr0l	equ	0xFE9
  8672                           wreg	equ	0xFE8
  8673                           indf1	equ	0xFE7
  8674                           postinc1	equ	0xFE6
  8675                           postdec1	equ	0xFE5
  8676                           fsr1h	equ	0xFE2
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           postdec2	equ	0xFDD
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function i2___wmul *****************
  8686 ;; Defined at:
  8687 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;  multiplier      2    6[COMRAM] unsigned int 
  8690 ;;  multiplicand    2    8[COMRAM] unsigned int 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  __wmul          2   10[COMRAM] unsigned int 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  2    6[COMRAM] unsigned int 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2, status,0, prodl, prodh
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8702 ;;      Params:         4       0       0       0
  8703 ;;      Locals:         2       0       0       0
  8704 ;;      Temps:          0       0       0       0
  8705 ;;      Totals:         6       0       0       0
  8706 ;;Total ram usage:        6 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		i2_ES_EnQueueFIFO
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text51
  8716  001E7E                     __ptext51:
  8717                           	opt stack 0
  8718  001E7E                     i2___wmul:
  8719                           	opt stack 16
  8720                           
  8721                           ;incstack = 0
  8722  001E7E  5007               	movf	i2___wmul@multiplier,w,c
  8723  001E80  0209               	mulwf	i2___wmul@multiplicand,c
  8724  001E82  CFF3 F00B          	movff	prodl,i2___wmul@product
  8725  001E86  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  8726  001E8A  5007               	movf	i2___wmul@multiplier,w,c
  8727  001E8C  020A               	mulwf	i2___wmul@multiplicand+1,c
  8728  001E8E  50F3               	movf	prodl,w,c
  8729  001E90  260C               	addwf	i2___wmul@product+1,f,c
  8730  001E92  5008               	movf	i2___wmul@multiplier+1,w,c
  8731  001E94  0209               	mulwf	i2___wmul@multiplicand,c
  8732  001E96  50F3               	movf	prodl,w,c
  8733  001E98  260C               	addwf	i2___wmul@product+1,f,c
  8734  001E9A  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  8735  001E9E  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  8736  001EA2  0012               	return	
  8737  001EA4                     __end_ofi2___wmul:
  8738                           	opt stack 0
  8739                           tosu	equ	0xFFF
  8740                           tosh	equ	0xFFE
  8741                           tosl	equ	0xFFD
  8742                           pclatu	equ	0xFFB
  8743                           pclath	equ	0xFFA
  8744                           tblptru	equ	0xFF8
  8745                           tblptrh	equ	0xFF7
  8746                           tblptrl	equ	0xFF6
  8747                           tablat	equ	0xFF5
  8748                           prodh	equ	0xFF4
  8749                           prodl	equ	0xFF3
  8750                           intcon	equ	0xFF2
  8751                           postinc0	equ	0xFEE
  8752                           fsr0h	equ	0xFEA
  8753                           fsr0l	equ	0xFE9
  8754                           wreg	equ	0xFE8
  8755                           indf1	equ	0xFE7
  8756                           postinc1	equ	0xFE6
  8757                           postdec1	equ	0xFE5
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function i2___awmod *****************
  8768 ;; Defined at:
  8769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  dividend        2    0[COMRAM] int 
  8772 ;;  divisor         2    2[COMRAM] int 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  __awmod         1    5[COMRAM] unsigned char 
  8775 ;;  __awmod         1    4[COMRAM] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  2    0[COMRAM] int 
  8778 ;; Registers used:
  8779 ;;		wreg, status,2, status,0
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8785 ;;      Params:         4       0       0       0
  8786 ;;      Locals:         2       0       0       0
  8787 ;;      Temps:          0       0       0       0
  8788 ;;      Totals:         6       0       0       0
  8789 ;;Total ram usage:        6 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; This function calls:
  8792 ;;		Nothing
  8793 ;; This function is called by:
  8794 ;;		i2_ES_EnQueueFIFO
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text52
  8799  0019F8                     __ptext52:
  8800                           	opt stack 0
  8801  0019F8                     i2___awmod:
  8802                           	opt stack 16
  8803                           
  8804                           ;incstack = 0
  8805  0019F8  0E00               	movlw	0
  8806  0019FA  6E06               	movwf	i2___awmod@sign,c
  8807  0019FC  AE02               	btfss	i2___awmod@dividend+1,7,c
  8808  0019FE  D006               	goto	i2l2442
  8809  001A00  6C01               	negf	i2___awmod@dividend,c
  8810  001A02  1E02               	comf	i2___awmod@dividend+1,f,c
  8811  001A04  B0D8               	btfsc	status,0,c
  8812  001A06  2A02               	incf	i2___awmod@dividend+1,f,c
  8813  001A08  0E01               	movlw	1
  8814  001A0A  6E06               	movwf	i2___awmod@sign,c
  8815  001A0C                     i2l2442:
  8816  001A0C  AE04               	btfss	i2___awmod@divisor+1,7,c
  8817  001A0E  D004               	goto	i2l2446
  8818  001A10  6C03               	negf	i2___awmod@divisor,c
  8819  001A12  1E04               	comf	i2___awmod@divisor+1,f,c
  8820  001A14  B0D8               	btfsc	status,0,c
  8821  001A16  2A04               	incf	i2___awmod@divisor+1,f,c
  8822  001A18                     i2l2446:
  8823  001A18  5003               	movf	i2___awmod@divisor,w,c
  8824  001A1A  1004               	iorwf	i2___awmod@divisor+1,w,c
  8825  001A1C  B4D8               	btfsc	status,2,c
  8826  001A1E  D018               	goto	i2l2462
  8827  001A20  0E01               	movlw	1
  8828  001A22  6E05               	movwf	i2___awmod@counter,c
  8829  001A24  D004               	goto	i2l2452
  8830  001A26                     i2l2450:
  8831  001A26  90D8               	bcf	status,0,c
  8832  001A28  3603               	rlcf	i2___awmod@divisor,f,c
  8833  001A2A  3604               	rlcf	i2___awmod@divisor+1,f,c
  8834  001A2C  2A05               	incf	i2___awmod@counter,f,c
  8835  001A2E                     i2l2452:
  8836  001A2E  AE04               	btfss	i2___awmod@divisor+1,7,c
  8837  001A30  D7FA               	goto	i2l2450
  8838  001A32                     i2l2454:
  8839  001A32  5003               	movf	i2___awmod@divisor,w,c
  8840  001A34  5C01               	subwf	i2___awmod@dividend,w,c
  8841  001A36  5004               	movf	i2___awmod@divisor+1,w,c
  8842  001A38  5802               	subwfb	i2___awmod@dividend+1,w,c
  8843  001A3A  A0D8               	btfss	status,0,c
  8844  001A3C  D004               	goto	i2l2458
  8845  001A3E  5003               	movf	i2___awmod@divisor,w,c
  8846  001A40  5E01               	subwf	i2___awmod@dividend,f,c
  8847  001A42  5004               	movf	i2___awmod@divisor+1,w,c
  8848  001A44  5A02               	subwfb	i2___awmod@dividend+1,f,c
  8849  001A46                     i2l2458:
  8850  001A46  90D8               	bcf	status,0,c
  8851  001A48  3204               	rrcf	i2___awmod@divisor+1,f,c
  8852  001A4A  3203               	rrcf	i2___awmod@divisor,f,c
  8853  001A4C  2E05               	decfsz	i2___awmod@counter,f,c
  8854  001A4E  D7F1               	goto	i2l2454
  8855  001A50                     i2l2462:
  8856  001A50  5006               	movf	i2___awmod@sign,w,c
  8857  001A52  B4D8               	btfsc	status,2,c
  8858  001A54  D004               	goto	i2l2466
  8859  001A56  6C01               	negf	i2___awmod@dividend,c
  8860  001A58  1E02               	comf	i2___awmod@dividend+1,f,c
  8861  001A5A  B0D8               	btfsc	status,0,c
  8862  001A5C  2A02               	incf	i2___awmod@dividend+1,f,c
  8863  001A5E                     i2l2466:
  8864  001A5E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  8865  001A62  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  8866  001A66  0012               	return	
  8867  001A68                     __end_ofi2___awmod:
  8868                           	opt stack 0
  8869                           tosu	equ	0xFFF
  8870                           tosh	equ	0xFFE
  8871                           tosl	equ	0xFFD
  8872                           pclatu	equ	0xFFB
  8873                           pclath	equ	0xFFA
  8874                           tblptru	equ	0xFF8
  8875                           tblptrh	equ	0xFF7
  8876                           tblptrl	equ	0xFF6
  8877                           tablat	equ	0xFF5
  8878                           prodh	equ	0xFF4
  8879                           prodl	equ	0xFF3
  8880                           intcon	equ	0xFF2
  8881                           postinc0	equ	0xFEE
  8882                           fsr0h	equ	0xFEA
  8883                           fsr0l	equ	0xFE9
  8884                           wreg	equ	0xFE8
  8885                           indf1	equ	0xFE7
  8886                           postinc1	equ	0xFE6
  8887                           postdec1	equ	0xFE5
  8888                           fsr1h	equ	0xFE2
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           tosu	equ	0xFFF
  8897                           tosh	equ	0xFFE
  8898                           tosl	equ	0xFFD
  8899                           pclatu	equ	0xFFB
  8900                           pclath	equ	0xFFA
  8901                           tblptru	equ	0xFF8
  8902                           tblptrh	equ	0xFF7
  8903                           tblptrl	equ	0xFF6
  8904                           tablat	equ	0xFF5
  8905                           prodh	equ	0xFF4
  8906                           prodl	equ	0xFF3
  8907                           intcon	equ	0xFF2
  8908                           postinc0	equ	0xFEE
  8909                           fsr0h	equ	0xFEA
  8910                           fsr0l	equ	0xFE9
  8911                           wreg	equ	0xFE8
  8912                           indf1	equ	0xFE7
  8913                           postinc1	equ	0xFE6
  8914                           postdec1	equ	0xFE5
  8915                           fsr1h	equ	0xFE2
  8916                           fsr1l	equ	0xFE1
  8917                           indf2	equ	0xFDF
  8918                           postinc2	equ	0xFDE
  8919                           postdec2	equ	0xFDD
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924                           	psect	text53
  8925  000000                     __ptext53:
  8926                           	opt stack 0
  8927                           tosu	equ	0xFFF
  8928                           tosh	equ	0xFFE
  8929                           tosl	equ	0xFFD
  8930                           pclatu	equ	0xFFB
  8931                           pclath	equ	0xFFA
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           intcon	equ	0xFF2
  8939                           postinc0	equ	0xFEE
  8940                           fsr0h	equ	0xFEA
  8941                           fsr0l	equ	0xFE9
  8942                           wreg	equ	0xFE8
  8943                           indf1	equ	0xFE7
  8944                           postinc1	equ	0xFE6
  8945                           postdec1	equ	0xFE5
  8946                           fsr1h	equ	0xFE2
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955                           	psect	rparam
  8956  0000                     tosu	equ	0xFFF
  8957                           tosh	equ	0xFFE
  8958                           tosl	equ	0xFFD
  8959                           pclatu	equ	0xFFB
  8960                           pclath	equ	0xFFA
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           indf1	equ	0xFE7
  8973                           postinc1	equ	0xFE6
  8974                           postdec1	equ	0xFE5
  8975                           fsr1h	equ	0xFE2
  8976                           fsr1l	equ	0xFE1
  8977                           indf2	equ	0xFDF
  8978                           postinc2	equ	0xFDE
  8979                           postdec2	equ	0xFDD
  8980                           fsr2h	equ	0xFDA
  8981                           fsr2l	equ	0xFD9
  8982                           status	equ	0xFD8
  8983                           
  8984                           	psect	temp
  8985  000050                     btemp:
  8986                           	opt stack 0
  8987  000050                     	ds	1
  8988  0000                     int$flags	set	btemp
  8989                           tosu	equ	0xFFF
  8990                           tosh	equ	0xFFE
  8991                           tosl	equ	0xFFD
  8992                           pclatu	equ	0xFFB
  8993                           pclath	equ	0xFFA
  8994                           tblptru	equ	0xFF8
  8995                           tblptrh	equ	0xFF7
  8996                           tblptrl	equ	0xFF6
  8997                           tablat	equ	0xFF5
  8998                           prodh	equ	0xFF4
  8999                           prodl	equ	0xFF3
  9000                           intcon	equ	0xFF2
  9001                           postinc0	equ	0xFEE
  9002                           fsr0h	equ	0xFEA
  9003                           fsr0l	equ	0xFE9
  9004                           wreg	equ	0xFE8
  9005                           indf1	equ	0xFE7
  9006                           postinc1	equ	0xFE6
  9007                           postdec1	equ	0xFE5
  9008                           fsr1h	equ	0xFE2
  9009                           fsr1l	equ	0xFE1
  9010                           indf2	equ	0xFDF
  9011                           postinc2	equ	0xFDE
  9012                           postdec2	equ	0xFDD
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        7
    BSS         571
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      79
    BANK0           160    109     159
    BANK1           256      0     184
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S111$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(COMRAM[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_ThinkingPattern
    _ThinkingPattern->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   58925
                                            108 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   47758
                                            103 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   10304
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   10304
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             90 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   33123
                                             90 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   10312
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      46
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   17646
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        5     3      2    7216
                                             32 BANK0      5     3      2
                    _ThinkingPattern
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _ThinkingPattern                                     25    23      2    2286
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        21    19      2   10222
                                             69 BANK0     21    19      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    5269
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    5050
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4689
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     866
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    4921
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3453
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   10771
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    4868
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    5184
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    4823
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    4431
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2585
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    1320
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     3      1     120
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0     938
                                             35 COMRAM    16    16      0
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     938
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           _ThinkingPattern
             ___awdiv
             ___awmod
           ___awmod
           ___lwdiv
             ___wmul (ARG)
               ___awmod (ARG)
           ___wmul
             ___awmod (ARG)
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _ThinkingPattern
               ___awdiv
               ___awmod
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B8       6       71.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      4F       1       84.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A6       9        0.0%
DATA                 0      0     2E2      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Nov 29 17:12:49 2016

                HSV_to_RGB@HSV_Value 0073                     ??__HW_Timer_Init 0062  
                ES_CheckUserEvents@i 0060                  __HW_Timer_Init@Rate 0060  
                       ___awdiv@sign 0065                  ___wmul@multiplicand 0068  
                    ??_UpdatePattern 0082  RunPatternControlService@ReturnEvent 00BD  
                                l326 1368                                  l560 1810  
                                l481 0FDE                                  l570 064A  
                                l571 0664                                  l572 067E  
                                l573 0690                                  l574 06AA  
                                l568 0638                __end_of_ES_Initialize 11CC  
                                _GIE 007F97                                  l988 1978  
                                _ISR 0008            __end_of_SPI32_EOTResponse 1D94  
                       ___awmod@sign 0065              __end_of_Check4Keystroke 1F96  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 0074  
            ES_EnQueueFIFO@Event2Add 006E                    ?_ES_PostToService 0077  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 00D6                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 00D1                                 l2210 16FC  
                               l2220 172C                                 l2300 13D2  
                               l2222 1732                                 l2230 1764  
                               l2214 170C                                 l2310 1408  
                               l2302 13D8                                 l2234 1778  
                               l2226 1756                                 l2218 1720  
                               l2330 1934                                 l2314 1416  
                               l3130 17C2                                 l2340 196A  
                               l2332 193A                                 l3132 17D4  
                               l2254 12AA                                 l2270 19F4  
                               l2318 142A                                 l3134 17E6  
                               l2328 1928                                 l2416 09A0  
                               l2408 0934                                 l3128 17B0  
                               l2418 09DE                                 l2522 0A78  
                               l3138 17F8                                 l2292 13A8  
                               l2532 0B18                                 l2516 0A40  
                               l2540 0B74                                 l2604 0DE4  
                               l2358 04A8                                 l2286 1392  
                               l2526 0AA4                                 l2518 0A48  
                               l2614 0E5C                                 l2376 06C4  
                               l2552 0DA8                                 l2528 0AAC  
                               l2472 1648                                 l2616 0E9A  
                               l2378 06FA                                 l2546 0CB2  
                               l2298 13C6                                 l2538 0B4C  
                               l2562 1CCA                                 l2802 12E2  
                               l2482 16D4                                 l2732 0C60  
                               l2812 1304                                 l2910 10FC  
                               l2742 0CA4                                 l2494 1B88  
                               l2558 1CAC                                 l2830 1336  
                               l2806 12F0                                 l2486 16DA  
                               l2680 1C98                                 l2672 1C70  
                               l2736 0C7C                                 l2824 1326  
                               l2808 12F4                                 l2760 1F1A  
                               l2914 1140                                 l2930 11C8  
                               l2906 10F2                                 l2666 1B42  
                               l2818 1314                                 l2764 1F22  
                               l2940 1070                                 l2926 11C2  
                               l2918 1144                                 l2862 0EEE  
                               l2838 134C                                 l2950 10DA  
                               l2934 0FEE                                 l2856 1D56  
                               l2874 0F30                                 l2866 0EFA  
                               l2794 12B6                                 l2946 10C4  
                               l2788 1B24                                 l2884 0FC0  
                               l2966 1DD8                                 l2888 0FC8  
                               l2968 1DE0                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 _LATC 000F8B  
                               u1275 041A                                 u1560 1B6E  
                               u1618 1C3C                                 u1394 166E  
                               u1538 0E44                                 u1619 1C54  
                               u1395 1666                                 u1565 1B64  
                               _PIE1 000F9D                                 u1858 119C  
                               u1859 11B8                                 u1898 109A  
                               u1899 10B2                                 _SCS1 007E99  
                 ??_ES_PostToService 007A                      __end_of_HW_Init 1EC6  
                               _main 1782                          ?_ES_DeQueue 006C  
          Pattern_RGBPatterns@Length 00DF                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 0050  
                      main@ErrorType 00CC                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016    __end_of_InitPatternControlService 1B28  
                        ?_SPI32_Init 0001                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                 __end_of_GetNextFrame 1F18  
                              ??_ISR 0024                   ES_Run@HighestPrior 00CB  
           ThinkingPattern@stepCount 0069                                ?_main 0001  
              __end_of_ES_Timer_Init 1F76                      __end_of___awdiv 1434  
                    __end_of___awmod 1782                      __end_of___lbmod 1CA4  
                    ___awdiv@divisor 0062                                _T1CON 000FCD  
                         _DistList00 0360                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                    __end_of___lwdiv 1982                                i2l149 1600  
                    ___awdiv@counter 0064          ??i2_PostSPI32ControlService 0021  
                              _PORTC 000F82                                _TRISC 000F94  
                              _SSPIE 007CEB                                _SSPIF 007CF3  
                         _Brightness 00F8                        __CFG_PWRT$OFF 000000  
               _SPI32_TransmitFrames 1DFE                          ?_HSV_to_RGB 0073  
                              _Ready 00DA      __end_of_InitSPI32ControlService 1D5A  
                         _FrameIndex 00E3                                _putch 1F96  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 1EA4  
                              status 000FD8              SPI32_SendFrame@newFrame 0060  
                   ?_SPI32_SendFrame 0060                   __size_ofi2___awmod 0070  
                    __initialization 1892               ES_GetMSBitSet@LoopCntr 0069  
         __end_of_ES_CheckUserEvents 1C60                         __end_of_main 1812  
                  ES_Timer_Init@Rate 0062                  __end_of_EventQueues 035E  
                             ??_main 00CC                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 003A  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 0080     __end_of__HW_Process_Pending_Ints 1F2E  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 1596                 __end_of_DotStar_Show 0DD0  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 0060                               _CCP1IF 007CF2  
                         _PatternOff 1CA4                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                     ___awdiv@dividend 0060  
                         _MyPriority 00E5                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0062                               i2l3056 15F6  
                             i2l2450 1A26                               i2l2442 1A0C  
                             i2l2452 1A2E                               i2l2454 1A32  
                             i2l2462 1A50                               i2l2446 1A18  
                             i2l2466 1A5E                               i2l2458 1A46  
                             i2l2592 14E4                               i2l2698 1ACE  
                             i2l2962 1D7E                               _INTCON 000FF2  
                             i2l2898 1BE2                               _ES_Run 0FEC  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
          i2_PostSPI32ControlService 1F44                     ??_ES_EnQueueFIFO 0071  
                     _Timer2PostFunc 0321                               _Length 00E4  
      SPI32_TransmitFrames@numFrames 0082                        ?_PausePattern 0001  
                             _Queue0 00E9                               _Queue1 0043  
                     _SysTickCounter 003C                  __size_of_HSV_to_RGB 0458  
           ??_RunSPI32ControlService 00BD                               ___wmul 1D94  
    InitSPI32ControlService@Priority 0080                            ??___awdiv 0064  
                          ??___awmod 0064                            ??___lbmod 0061  
                          ??___lwdiv 0070          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 18CC                               clear_1 18DE  
                             clear_2 18EA                               clear_3 18F6  
                   ___awdiv@quotient 0066                      ___awmod@divisor 0062  
                      ??_ShowPattern 00BA            ES_Timer_InitTimer@NewTime 0060  
                    ___awmod@counter 0064                               _printf 1DCA  
                        ISR@LastTime 0038                         __pdataCOMRAM 004F  
             ES_InitQueue@pThisQueue 0063                    __end_ofi2___awmod 1A68  
                       __mediumconst 0000                          ISR@NextTime 003A  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
                     i2___awmod@sign 0006          __size_of_ES_Timer_Tick_Resp 0116  
               ES_DeQueue@pThisQueue 0074               UpdatePattern@patternID 0082  
            ES_GetMSBitSet@Val2Check 0060                      ___lbmod@divisor 0060  
                         __accesstop 0060              __end_of__initialization 18FC  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0062  
    RunSPI32ControlService@ThisEvent 00BA                      __CFG_PBADEN$OFF 000000  
  __size_of_RunPatternControlService 00C8            ?_RunPatternControlService 00BA  
              __size_of_GetNextFrame 001A                        ___rparam_used 000001  
        ??_InitPatternControlService 007D                          PatternOff@i 0062  
             ThinkingPattern@pattern 0001                       ??_PausePattern 0065  
                        _EventQueues 0358          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                         __pidataBANK0 1F86  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 0060  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 1ECC                        __end_of_putch 1F98  
                    _TMR_ActiveFlags 00DC               ??_SPI32_TransmitFrames 0083  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 0067  
                      ?_ResetPattern 0001                  __end_of_ShowPattern 1E7E  
                _ThinkingPattern$665 0078                  _ThinkingPattern$666 007A  
                      ??_StopPattern 00BA                       _TMR_TimerArray 0100  
                       _GetNextFrame 1EFE                          ?_PatternOff 0060  
           ES_EnQueueFIFO@pThisQueue 0075                              ??_putch 0060  
           __HW_Process_Pending_Ints 1F18                           __pbssBANK0 00CD  
                         __pbssBANK1 0100             __size_of_ThinkingPattern 0214  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0070  
                       ??_SPI32_Init 0060             ?_PostSPI32ControlService 007D  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 0063  
                            ?___wmul 0066      __size_of_RunSPI32ControlService 0106  
                            _CCP1CON 000FBD                              ?_printf 0060  
              __size_of_DotStar_Init 00AE                       ??_ResetPattern 0060  
              __end_of_UpdatePattern 0B82                __size_of_DotStar_Show 0126  
                         ??i2___wmul 000B            _InitPatternControlService 1AD2  
             DotStar_Init@brightness 0060                   __end_of_ES_DeQueue 0CAA  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 0064  
                       ??_HSV_to_RGB 0075                              _HW_Init 1EA4  
                            _SSPCON1 000FC6                   __end_of_SPI32_Init 1F92  
                            _SSPSTAT 000FC7     SPI32_ControlService@CurrentState 00E0  
                    __size_of_ES_Run 00F4                  __end_of_StopPattern 1E58  
                        _PixelFrames 01B8                        ?_SetupPattern 0060  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000   i2PostSPI32ControlService@ThisEvent 001E  
   PostSPI32ControlService@ThisEvent 007D     InitSPI32ControlService@ThisEvent 007D  
                            _TestHue 003E            i2ES_EnQueueFIFO@Event2Add 000F  
                       _DotStar_Init 14E8                         _DotStar_Show 0CAA  
                 __end_of_HSV_to_RGB 0816                              ___awdiv 1376  
         ?_PostPatternControlService 007D                              ___awmod 16E0  
                            ___lbmod 1C60                      __size_of___wmul 0036  
                            ___lwdiv 190A   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                  __size_of_PatternOff 0040  
              ES_Timer_InitTimer@Num 0064           i2ES_PostToService@TheEvent 0018  
                            __pcinit 1892                              __ramtop 0300  
                        _ShowPattern 1E58                              __ptext0 1782  
                            __ptext1 1DCA                              __ptext2 1F96  
                            __ptext3 0FEC                              __ptext4 1F18  
                            __ptext5 0DD0                              __ptext6 163C  
                            __ptext7 12AE                              __ptext8 0EE6  
                            __ptext9 1B28             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 1634  
                        HSV_to_RGB@b 0097                          HSV_to_RGB@g 0095  
                        HSV_to_RGB@h 008D                          HSV_to_RGB@p 00A1  
                        HSV_to_RGB@q 0099                          HSV_to_RGB@r 0093  
                        HSV_to_RGB@s 009F                          HSV_to_RGB@t 009B  
                        HSV_to_RGB@v 00A3                         _FramePointer 00D8  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 0060  
                 _ES_CheckUserEvents 1C16                      ES_Run@ThisEvent 00F5  
               __end_of_PausePattern 1F86               _RunSPI32ControlService 0EE6  
                     __pintcode_body 1596                 end_of_initialization 18FC  
                ?_ES_CheckUserEvents 0001            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 1596  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 1EE2  
       ES_PostToService@WhichService 007C                       ??_SetupPattern 0063  
             __size_of_ES_Timer_Init 000E                    ??_ThinkingPattern 006A  
                            printf@c 0064                              printf@f 0060  
            _InitSPI32ControlService 1D20                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
  __end_of_PostPatternControlService 1F44                 ??_ES_CheckUserEvents 0060  
           __size_of_SPI32_SendFrame 0052            i2SPI32_SendFrame@newFrame 0001  
                      _ES_Initialize 10E0     __end_of_RunPatternControlService 1376  
                   ___lbmod@dividend 0061    RunPatternControlService@ThisEvent 00BA  
 PostPatternControlService@ThisEvent 007D   InitPatternControlService@ThisEvent 007D  
               __end_of_ES_EventList 0360                          _StopPattern 1E30  
                 UpdatePattern@i_653 0084                 __end_of_ES_InitQueue 1D20  
                          i2___awmod 19F8                       ES_Initialize@i 0083  
                        ___lbmod@rem 0063             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 10E0                 __end_of_ResetPattern 1F7E  
                 __end_of_DistList00 0364              ThinkingPattern@pixelHSV 0076  
                   _ES_PostToService 1982           __end_of_ES_Timer_InitTimer 1892  
               __end_of_ServDescList 0358                       __end_of___wmul 1DCA  
                      __pidataCOMRAM 1F98                    i2_SPI32_SendFrame 1BC8  
                          _FrameByte 00F9                SetupPattern@numPixels 0062  
                     ?_ES_Initialize 0081           ??__HW_Process_Pending_Ints 0084  
                 ?i2_SPI32_SendFrame 0001                        _ES_Timer_Init 1F68  
                   i2___wmul@product 000B                       __end_of_printf 1DFE  
         __end_of_ES_Timer_Tick_Resp 0EE6                  start_initialization 1892  
                        __end_of_ISR 163C                    __size_ofi2___wmul 0026  
                       _CurrentFrame 00CD                         _CurrentState 00E2  
                       ??_PatternOff 0062                  ??i2_SPI32_SendFrame 0005  
                         ?i2___awmod 0001   __size_of_InitPatternControlService 0056  
                           ??_ES_Run 00C7                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 00E8                            _NumFrames 00E6  
         __end_ofi2_ES_PostToService 1AD2            ??_InitSPI32ControlService 007D  
         __end_of_ES_Timer_StopTimer 1BC8                            _NumPixels 0042  
            __size_of_ES_GetMSBitSet 00A4                             ??___wmul 006A  
          __end_ofi2_SPI32_SendFrame 1C16                          __pdataBANK0 00F9  
                 __end_of_PatternOff 1CE4              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 0062            SPI32_EOTResponse@EOTevent 0021  
              __size_of_PausePattern 0008                       ?_ES_Timer_Init 0062  
                     __HW_Timer_Init 1EE2                          __pbssBIGRAM 01B8  
               __end_of_SetupPattern 1F68                          __pbssCOMRAM 0034  
   __size_of_PostSPI32ControlService 001C        __size_of_SPI32_TransmitFrames 0032  
                  ??_SPI32_SendFrame 0064                        __pcstackBANK0 0060  
                 ES_InitQueue@pBlock 0060    RunPatternControlService@testEvent 00C0  
                           ?_HW_Init 0001             _RunPatternControlService 12AE  
   SPI32_TransmitFrames@framePointer 0080                     i2_ES_EnQueueFIFO 1434  
                   HSV_to_RGB@region 008F                        __PRIMASK_temp 0040  
                   ___lwdiv@dividend 006C                    ??_Check4Keystroke 0060  
                       _PausePattern 1F7E                            __pintcode 0008  
                           ?___awdiv 0060                             ?___awmod 0060  
                           ?___lbmod 0060           DotStar_Show@patternPointer 00A5  
        ??_PostPatternControlService 0080                             ?___lwdiv 006C  
                    ??_ES_Initialize 0083             ES_PostToService@TheEvent 0077  
             __end_of__HW_Timer_Init 1EFE                         ?_ShowPattern 0001  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
            ?_RunSPI32ControlService 00BA                     ___lwdiv@quotient 0070  
                        ??i2___awmod 0005                      _ThinkingPattern 0816  
                     __size_of_putch 0002                __size_of_ResetPattern 0008  
               ES_Initialize@NewRate 0081            ES_GetMSBitSet@Nybble2Test 0068  
                 _PatternStepCounter 00E7                       ___wmul@product 006A  
             __size_of_UpdatePattern 0158                DotStar_Init@numPixels 0063  
                           i2u181_40 1C0C                             i2u181_45 1C02  
                       _ES_EventList 035E           __size_ofi2_SPI32_SendFrame 004E  
                       _ES_InitQueue 1CE4                      ??_ES_Timer_Init 0064  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 0060  
                  ___wmul@multiplier 0066       __end_of_RunSPI32ControlService 0FEC  
                           i2___wmul 1E7E                         _ResetPattern 1F76  
                 ES_DeQueue@SaveCrit 0072                 ES_EnQueueFIFO@pBlock 006C  
           __end_of_ES_PostToService 19F8                         ?_StopPattern 0001  
          _PostPatternControlService 1F2E                            copy_data0 18A6  
                   __size_of_HW_Init 0022                       _BitNum2SetMask 0301  
                     _PatternConfigs 00FA                         _ServDescList 0350  
                 i2___awmod@dividend 0001                         _PixelPattern 0120  
                           __Hrparam 0000                       _ES_GetMSBitSet 163C  
                           __Lrparam 0000    RunSPI32ControlService@ReturnEvent 00C4  
                   __size_of___awdiv 00BE                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _ES_EnQueueFIFO 11CC                     __size_of___lwdiv 0078  
               ThinkingPattern@pixel 0068           ?i2_PostSPI32ControlService 001E  
            _PostSPI32ControlService 1EC6              __end_of_ThinkingPattern 0A2A  
                    HSV_to_RGB@fpart 0091                        _UpdatePattern 0A2A  
                 _ES_Timer_InitTimer 1812                      ___lwdiv@divisor 006E  
                    ___lwdiv@counter 0072               __end_of_BitNum2SetMask 0321  
                           __ptext10 1EFE                             __ptext11 1E30  
                           __ptext20 1DFE                             __ptext12 1F76  
                           __ptext21 1F2E                             __ptext13 1CA4  
                           __ptext30 1F92                             __ptext22 1EC6  
                           __ptext14 1E58                             __ptext31 10E0  
                           __ptext23 03BE                             __ptext15 0A2A  
                           __ptext40 16E0                             __ptext32 1AD2  
                           __ptext24 190A                             __ptext16 0816  
                           __ptext41 14E8                             __ptext33 1D20  
                           __ptext25 1F7E                             __ptext17 1376  
                           __ptext50 1434                             __ptext42 1F68  
                           __ptext34 1F8C                             __ptext26 1B7A  
                           __ptext18 1812                             __ptext51 1E7E  
                           __ptext43 1EE2                             __ptext35 1EA4  
                           __ptext27 0B82                             __ptext19 0CAA  
                           __ptext52 19F8                             __ptext44 1CE4  
                           __ptext36 1F5A                             __ptext28 1C60  
                           __ptext53 0000                             __ptext37 1982  
                           __ptext29 1C16                             __ptext46 1D5A  
                           __ptext38 11CC                             __ptext47 1BC8  
                           __ptext39 1D94                             __ptext48 1F44  
                           __ptext49 1A68                        ?_GetNextFrame 0060  
  ES_Timer_Tick_Resp@NeedsProcessing 00D4                       UpdatePattern@i 0083  
                ?_ES_Timer_InitTimer 0060                      _HSV_to_RGB$1433 009D  
                      __size_of_main 0090                   _ES_Timer_Tick_Resp 0DD0  
             __end_of_ES_GetMSBitSet 16E0                         _SetupPattern 1F5A  
                ?_ES_Timer_Tick_Resp 0001               __end_of_ES_EnQueueFIFO 12AE  
                           int$flags 0050                      _SPI32_SendFrame 1B28  
                SetupPattern@configs 0060                 ??_ES_Timer_InitTimer 0062  
     SPI32_ControlService@MyPriority 00E1                        _MaxBrightness 004F  
                  ES_DeQueue@NumLeft 0073                   i2_ES_PostToService 1A68  
           __end_ofi2_ES_EnQueueFIFO 14E8                   _ES_Timer_StopTimer 1B7A  
                     ?_UpdatePattern 0080           ??_RunPatternControlService 00BD  
                      DotStar_Show@i 00B9                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005                 __size_of_ShowPattern 0026  
  __end_ofi2_PostSPI32ControlService 1F5A                  ?i2_ES_PostToService 0018  
                     ??_GetNextFrame 0064                 ??_ES_Timer_Tick_Resp 0080  
                ?_ES_Timer_StopTimer 0001                  ThinkingPattern@head 007F  
                    _Check4Keystroke 1F92                             intlevel2 0000  
                         _ES_DeQueue 0B82    __size_of__HW_Process_Pending_Ints 0016  
                      _TransmitFrame 0034            ?__HW_Process_Pending_Ints 0001  
                    ?_ES_GetMSBitSet 0060         __end_of_SPI32_TransmitFrames 1E30  
               ??i2_ES_PostToService 001B                           _SPI32_Init 1F8C  
                      ?_DotStar_Init 0060                        ?_DotStar_Show 00A5  
               ??_ES_Timer_StopTimer 0060  ES_Timer_Tick_Resp@NextTimer2Process 00DE  
                           printf@ap 0062                      ?_ES_EnQueueFIFO 006C  
          ??_PostSPI32ControlService 0080                     ES_DeQueue@pBlock 006C  
                 ThinkingPattern@hue 0075                   ThinkingPattern@sat 007C  
                 ThinkingPattern@val 007D    SPI32_TransmitFrames@transmitEvent 0083  
                   ?_ThinkingPattern 0068    InitPatternControlService@Priority 0080  
                  _SPI32_EOTResponse 1D5A                           _HSV_to_RGB 03BE  
             ES_DeQueue@pReturnEvent 006E                ES_InitQueue@BlockSize 0062  
                 ?_SPI32_EOTResponse 0001                 __size_of_StopPattern 0028  
           ?_InitSPI32ControlService 0001                     ThinkingPattern@x 007E  
                ??_SPI32_EOTResponse 0021              __end_of_SPI32_SendFrame 1B7A  
         ?_InitPatternControlService 0001   __size_of_PostPatternControlService 0016  
                     ??_DotStar_Init 0061                       ??_DotStar_Show 00A7  
