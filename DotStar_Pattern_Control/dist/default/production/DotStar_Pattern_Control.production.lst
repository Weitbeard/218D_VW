

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Dec 12 14:48:36 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  002B9E                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for ProcessReceive@LastButton
   101  002B9E  FF                 	db	255
   102                           
   103                           ;initializer for _MaxBrightness
   104  002B9F  1F                 	db	31
   105                           
   106                           	psect	idataBANK0
   107  002B7A                     __pidataBANK0:
   108                           	opt stack 0
   109                           
   110                           ;initializer for IdlePattern@rising
   111  002B7A  01                 	db	1
   112                           
   113                           ;initializer for WelcomePattern@rising
   114  002B7B  01                 	db	1
   115                           
   116                           ;initializer for _FrameByte
   117  002B7C  03                 	db	3
   118                           
   119                           ;initializer for _PatternConfigs
   120  002B7D  00                 	db	0
   121  002B7E  FF                 	db	255
   122  002B7F  1F                 	db	31
   123  002B80  00                 	db	0
   124  002B81  01                 	db	1
   125                           
   126                           	psect	smallconst
   127  000300                     __psmallconst:
   128                           	opt stack 0
   129  000300  00                 	db	0
   130  000301                     _BitNum2SetMask:
   131                           	opt stack 0
   132  000301  0001               	dw	1
   133  000303  0002               	dw	2
   134  000305  0004               	dw	4
   135  000307  0008               	dw	8
   136  000309  0010               	dw	16
   137  00030B  0020               	dw	32
   138  00030D  0040               	dw	64
   139  00030F  0080               	dw	128
   140  000311  0100               	dw	256
   141  000313  0200               	dw	512
   142  000315  0400               	dw	1024
   143  000317  0800               	dw	2048
   144  000319  1000               	dw	4096
   145  00031B  2000               	dw	8192
   146  00031D  4000               	dw	16384
   147  00031F  8000               	dw	32768
   148  000321                     __end_of_BitNum2SetMask:
   149                           	opt stack 0
   150  000321                     _Timer2PostFunc:
   151                           	opt stack 0
   152  000321  4C                 	db	low _PostPatternControlService
   153  000322  2A                 	db	high _PostPatternControlService
   154  000323  68                 	db	low _PostSPI32ControlService
   155  000324  2A                 	db	high _PostSPI32ControlService
   156  000325  00                 	db	0
   157  000326  00                 	db	0
   158  000327  00                 	db	0
   159  000328  00                 	db	0
   160  000329  00                 	db	0
   161  00032A  00                 	db	0
   162  00032B  00                 	db	0
   163  00032C  00                 	db	0
   164  00032D  00                 	db	0
   165  00032E  00                 	db	0
   166  00032F  00                 	db	0
   167  000330  00                 	db	0
   168  000331  00                 	db	0
   169  000332  00                 	db	0
   170  000333  00                 	db	0
   171  000334  00                 	db	0
   172  000335  00                 	db	0
   173  000336  00                 	db	0
   174  000337  00                 	db	0
   175  000338  00                 	db	0
   176  000339  00                 	db	0
   177  00033A  00                 	db	0
   178  00033B  00                 	db	0
   179  00033C  00                 	db	0
   180  00033D  00                 	db	0
   181  00033E  00                 	db	0
   182  00033F  00                 	db	0
   183  000340  00                 	db	0
   184  000341                     __end_of_Timer2PostFunc:
   185                           	opt stack 0
   186  000341                     _Nybble2MSBitNum:
   187                           	opt stack 0
   188  000341  00                 	db	0
   189  000342  01                 	db	1
   190  000343  01                 	db	1
   191  000344  02                 	db	2
   192  000345  02                 	db	2
   193  000346  02                 	db	2
   194  000347  02                 	db	2
   195  000348  03                 	db	3
   196  000349  03                 	db	3
   197  00034A  03                 	db	3
   198  00034B  03                 	db	3
   199  00034C  03                 	db	3
   200  00034D  03                 	db	3
   201  00034E  03                 	db	3
   202  00034F  03                 	db	3
   203  000350                     __end_of_Nybble2MSBitNum:
   204                           	opt stack 0
   205  000350                     _ServDescList:
   206                           	opt stack 0
   207  000350  E4                 	db	low _InitPatternControlService
   208  000351  25                 	db	high _InitPatternControlService
   209  000352  BA                 	db	low _RunPatternControlService
   210  000353  1C                 	db	high _RunPatternControlService
   211  000354  36                 	db	low _InitSPI32ControlService
   212  000355  28                 	db	high _InitSPI32ControlService
   213  000356  1E                 	db	low _RunSPI32ControlService
   214  000357  17                 	db	high _RunSPI32ControlService
   215  000358                     __end_of_ServDescList:
   216                           	opt stack 0
   217  000358                     _EventQueues:
   218                           	opt stack 0
   219  000358  4A                 	db	low _Queue0
   220  000359  00                 	db	high _Queue0
   221  00035A  04                 	db	4
   222  00035B  B8                 	db	low _Queue1
   223  00035C  01                 	db	high _Queue1
   224  00035D  04                 	db	4
   225  00035E                     __end_of_EventQueues:
   226                           	opt stack 0
   227  00035E                     _ES_EventList:
   228                           	opt stack 0
   229  00035E  9A                 	db	low _Check4Keystroke
   230  00035F  2B                 	db	high _Check4Keystroke
   231  000360                     __end_of_ES_EventList:
   232                           	opt stack 0
   233  000360                     _DistList00:
   234                           	opt stack 0
   235  000360  4C                 	db	low _PostPatternControlService
   236  000361  2A                 	db	high _PostPatternControlService
   237  000362  68                 	db	low _PostSPI32ControlService
   238  000363  2A                 	db	high _PostSPI32ControlService
   239  000364                     __end_of_DistList00:
   240                           	opt stack 0
   241  0000                     _RXF0EIDH	set	3842
   242  0000                     _RXF0EIDL	set	3843
   243  0000                     _RXF0SIDH	set	3840
   244  0000                     _RXF0SIDL	set	3841
   245  0000                     _RXM0EIDH	set	3866
   246  0000                     _RXM0EIDL	set	3867
   247  0000                     _RXM0SIDH	set	3864
   248  0000                     _RXM0SIDL	set	3865
   249  0000                     _TXB0CONbits	set	3904
   250  0000                     _ADCON1	set	4033
   251  0000                     _BRGCON1bits	set	3952
   252  0000                     _BRGCON2bits	set	3953
   253  0000                     _BRGCON3bits	set	3954
   254  0000                     _CANCON	set	3951
   255  0000                     _CANSTATbits	set	3950
   256  0000                     _CCP1CON	set	4029
   257  0000                     _CCPR1H	set	4031
   258  0000                     _CCPR1L	set	4030
   259  0000                     _CIOCON	set	3955
   260  0000                     _ECANCON	set	3959
   261  0000                     _INTCON	set	4082
   262  0000                     _LATA	set	3977
   263  0000                     _LATB	set	3978
   264  0000                     _LATC	set	3979
   265  0000                     _PIE1	set	3997
   266  0000                     _PORTA	set	3968
   267  0000                     _PORTB	set	3969
   268  0000                     _PORTC	set	3970
   269  0000                     _RXB0CONbits	set	3936
   270  0000                     _RXB0D0	set	3942
   271  0000                     _RXB0D1	set	3943
   272  0000                     _RXB0D2	set	3944
   273  0000                     _RXB0EIDH	set	3939
   274  0000                     _RXB0EIDL	set	3940
   275  0000                     _RXB0SIDH	set	3937
   276  0000                     _RXB0SIDL	set	3938
   277  0000                     _SSPADD	set	4040
   278  0000                     _SSPBUF	set	4041
   279  0000                     _SSPCON1	set	4038
   280  0000                     _SSPSTAT	set	4039
   281  0000                     _T1CON	set	4045
   282  0000                     _TRISA	set	3986
   283  0000                     _TRISBbits	set	3987
   284  0000                     _TRISC	set	3988
   285  0000                     _CCP1IF	set	31986
   286  0000                     _ERRIE	set	32029
   287  0000                     _ERRIF	set	32037
   288  0000                     _GIE	set	32663
   289  0000                     _IRXIE	set	32031
   290  0000                     _IRXIF	set	32039
   291  0000                     _PEIE	set	32662
   292  0000                     _RXB0IE	set	32024
   293  0000                     _RXB0IF	set	32032
   294  0000                     _SSPIE	set	31979
   295  0000                     _SSPIF	set	31987
   296  0000                     _TXB0IE	set	32026
   297  0000                     _TXB0IF	set	32034
   298  000364                     STR_1:
   299  000364  46                 	db	70	;'F'
   300  000365  61                 	db	97	;'a'
   301  000366  69                 	db	105	;'i'
   302  000367  6C                 	db	108	;'l'
   303  000368  65                 	db	101	;'e'
   304  000369  64                 	db	100	;'d'
   305  00036A  20                 	db	32
   306  00036B  6F                 	db	111	;'o'
   307  00036C  6E                 	db	110	;'n'
   308  00036D  20                 	db	32
   309  00036E  61                 	db	97	;'a'
   310  00036F  74                 	db	116	;'t'
   311  000370  74                 	db	116	;'t'
   312  000371  65                 	db	101	;'e'
   313  000372  6D                 	db	109	;'m'
   314  000373  70                 	db	112	;'p'
   315  000374  74                 	db	116	;'t'
   316  000375  20                 	db	32
   317  000376  74                 	db	116	;'t'
   318  000377  6F                 	db	111	;'o'
   319  000378  20                 	db	32
   320  000379  50                 	db	80	;'P'
   321  00037A  6F                 	db	111	;'o'
   322  00037B  73                 	db	115	;'s'
   323  00037C  74                 	db	116	;'t'
   324  00037D  0A                 	db	10
   325  00037E  00                 	db	0
   326  00037F                     STR_2:
   327  00037F  46                 	db	70	;'F'
   328  000380  61                 	db	97	;'a'
   329  000381  69                 	db	105	;'i'
   330  000382  6C                 	db	108	;'l'
   331  000383  65                 	db	101	;'e'
   332  000384  64                 	db	100	;'d'
   333  000385  20                 	db	32
   334  000386  6F                 	db	111	;'o'
   335  000387  6E                 	db	110	;'n'
   336  000388  20                 	db	32
   337  000389  4E                 	db	78	;'N'
   338  00038A  55                 	db	85	;'U'
   339  00038B  4C                 	db	76	;'L'
   340  00038C  4C                 	db	76	;'L'
   341  00038D  20                 	db	32
   342  00038E  70                 	db	112	;'p'
   343  00038F  6F                 	db	111	;'o'
   344  000390  69                 	db	105	;'i'
   345  000391  6E                 	db	110	;'n'
   346  000392  74                 	db	116	;'t'
   347  000393  65                 	db	101	;'e'
   348  000394  72                 	db	114	;'r'
   349  000395  0A                 	db	10
   350  000396  00                 	db	0
   351  000397                     STR_3:
   352  000397  46                 	db	70	;'F'
   353  000398  61                 	db	97	;'a'
   354  000399  69                 	db	105	;'i'
   355  00039A  6C                 	db	108	;'l'
   356  00039B  65                 	db	101	;'e'
   357  00039C  64                 	db	100	;'d'
   358  00039D  20                 	db	32
   359  00039E  49                 	db	73	;'I'
   360  00039F  6E                 	db	110	;'n'
   361  0003A0  69                 	db	105	;'i'
   362  0003A1  74                 	db	116	;'t'
   363  0003A2  69                 	db	105	;'i'
   364  0003A3  61                 	db	97	;'a'
   365  0003A4  6C                 	db	108	;'l'
   366  0003A5  69                 	db	105	;'i'
   367  0003A6  7A                 	db	122	;'z'
   368  0003A7  61                 	db	97	;'a'
   369  0003A8  74                 	db	116	;'t'
   370  0003A9  69                 	db	105	;'i'
   371  0003AA  6F                 	db	111	;'o'
   372  0003AB  6E                 	db	110	;'n'
   373  0003AC  0A                 	db	10
   374  0003AD  00                 	db	0
   375  0003AE                     STR_4:
   376  0003AE  4F                 	db	79	;'O'
   377  0003AF  74                 	db	116	;'t'
   378  0003B0  68                 	db	104	;'h'
   379  0003B1  65                 	db	101	;'e'
   380  0003B2  72                 	db	114	;'r'
   381  0003B3  20                 	db	32
   382  0003B4  46                 	db	70	;'F'
   383  0003B5  61                 	db	97	;'a'
   384  0003B6  69                 	db	105	;'i'
   385  0003B7  6C                 	db	108	;'l'
   386  0003B8  75                 	db	117	;'u'
   387  0003B9  72                 	db	114	;'r'
   388  0003BA  65                 	db	101	;'e'
   389  0003BB  0A                 	db	10
   390  0003BC  00                 	db	0
   391                           
   392                           ; #config settings
   393  0003BD  00                 	db	0	; dummy byte at the end
   394  0000                     
   395                           	psect	cinit
   396  002322                     __pcinit:
   397                           	opt stack 0
   398  002322                     start_initialization:
   399                           	opt stack 0
   400  002322                     __initialization:
   401                           	opt stack 0
   402                           
   403                           ; Initialize objects allocated to BANK0 (8 bytes)
   404                           ; load TBLPTR registers with __pidataBANK0
   405  002322  0E7A               	movlw	low __pidataBANK0
   406  002324  6EF6               	movwf	tblptrl,c
   407  002326  0E2B               	movlw	high __pidataBANK0
   408  002328  6EF7               	movwf	tblptrh,c
   409  00232A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   410  00232C  6EF8               	movwf	tblptru,c
   411  00232E  EE00  F0F1         	lfsr	0,__pdataBANK0
   412  002332  EE10 F008          	lfsr	1,8
   413  002336                     copy_data0:
   414  002336  0009               	tblrd		*+
   415  002338  CFF5 FFEE          	movff	tablat,postinc0
   416  00233C  50E5               	movf	postdec1,w,c
   417  00233E  50E1               	movf	fsr1l,w,c
   418  002340  E1FA               	bnz	copy_data0
   419                           
   420                           ; Initialize objects allocated to COMRAM (2 bytes)
   421                           ; load TBLPTR registers with __pidataCOMRAM
   422  002342  0E9E               	movlw	low __pidataCOMRAM
   423  002344  6EF6               	movwf	tblptrl,c
   424  002346  0E2B               	movlw	high __pidataCOMRAM
   425  002348  6EF7               	movwf	tblptrh,c
   426  00234A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   427  00234C  6EF8               	movwf	tblptru,c
   428  00234E  0009               	tblrd		*+	;fetch initializer
   429  002350  CFF5 F056          	movff	tablat,__pdataCOMRAM
   430  002354  0009               	tblrd		*+	;fetch initializer
   431  002356  CFF5 F057          	movff	tablat,__pdataCOMRAM+1
   432                           
   433                           ; Clear objects allocated to BIGRAM (316 bytes)
   434  00235A  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   435  00235E  EE11 F03C          	lfsr	1,316
   436  002362                     clear_0:
   437  002362  6AEE               	clrf	postinc0,c
   438  002364  50E5               	movf	postdec1,w,c
   439  002366  50E1               	movf	fsr1l,w,c
   440  002368  E1FC               	bnz	clear_0
   441  00236A  50E2               	movf	fsr1h,w,c
   442  00236C  E1FA               	bnz	clear_0
   443                           
   444                           ; Clear objects allocated to BANK1 (196 bytes)
   445  00236E  EE01  F000         	lfsr	0,__pbssBANK1
   446  002372  0EC4               	movlw	196
   447  002374                     clear_1:
   448  002374  6AEE               	clrf	postinc0,c
   449  002376  06E8               	decf	wreg,f,c
   450  002378  E1FD               	bnz	clear_1
   451                           
   452                           ; Clear objects allocated to BANK0 (36 bytes)
   453  00237A  EE00  F0CD         	lfsr	0,__pbssBANK0
   454  00237E  0E24               	movlw	36
   455  002380                     clear_2:
   456  002380  6AEE               	clrf	postinc0,c
   457  002382  06E8               	decf	wreg,f,c
   458  002384  E1FD               	bnz	clear_2
   459                           
   460                           ; Clear objects allocated to COMRAM (32 bytes)
   461  002386  EE00  F036         	lfsr	0,__pbssCOMRAM
   462  00238A  0E20               	movlw	32
   463  00238C                     clear_3:
   464  00238C  6AEE               	clrf	postinc0,c
   465  00238E  06E8               	decf	wreg,f,c
   466  002390  E1FD               	bnz	clear_3
   467  002392                     end_of_initialization:
   468                           	opt stack 0
   469  002392                     __end_of__initialization:
   470                           	opt stack 0
   471  002392  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   472  002394  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   473  002396  0E00               	movlw	low (__Lmediumconst shr (0+16))
   474  002398  6EF8               	movwf	tblptru,c
   475  00239A  0100               	movlb	0
   476  00239C  EFC9  F010         	goto	_main	;jump to C main() function
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1h	equ	0xFE2
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	bssCOMRAM
   488  000036                     __pbssCOMRAM:
   489                           	opt stack 0
   490  000036                     _TransmitFrame:
   491                           	opt stack 0
   492  000036                     	ds	4
   493  00003A                     ISR@LastTime:
   494                           	opt stack 0
   495  00003A                     	ds	2
   496  00003C                     ISR@NextTime:
   497                           	opt stack 0
   498  00003C                     	ds	2
   499  00003E                     _SysTickCounter:
   500                           	opt stack 0
   501  00003E                     	ds	2
   502  000040                     	ds	2
   503  000042                     __PRIMASK_temp:
   504                           	opt stack 0
   505  000042                     	ds	2
   506  000044                     	ds	1
   507  000045                     	ds	1
   508  000046                     	ds	1
   509  000047                     _CurrentPattern:
   510                           	opt stack 0
   511  000047                     	ds	1
   512  000048                     _ListLoc:
   513                           	opt stack 0
   514  000048                     	ds	1
   515  000049                     	ds	1
   516  00004A                     _Queue0:
   517                           	opt stack 0
   518  00004A                     	ds	12
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1h	equ	0xFE2
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	dataCOMRAM
   530  000056                     __pdataCOMRAM:
   531                           	opt stack 0
   532  000056                     ProcessReceive@LastButton:
   533                           	opt stack 0
   534  000056                     	ds	1
   535  000057                     _MaxBrightness:
   536                           	opt stack 0
   537  000057                     	ds	1
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1h	equ	0xFE2
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	bssBANK0
   549  0000CD                     __pbssBANK0:
   550                           	opt stack 0
   551  0000CD                     _CurrentFrame:
   552                           	opt stack 0
   553  0000CD                     	ds	4
   554  0000D1                     _CycleCounter:
   555                           	opt stack 0
   556  0000D1                     	ds	4
   557  0000D5                     ES_Timer_Tick_Resp@NewEvent:
   558                           	opt stack 0
   559  0000D5                     	ds	3
   560  0000D8                     ES_Timer_Tick_Resp@NeedsProcessing:
   561                           	opt stack 0
   562  0000D8                     	ds	2
   563  0000DA                     Pattern_RGBPatterns@PatternConfigs:
   564                           	opt stack 0
   565  0000DA                     	ds	2
   566  0000DC                     _FramePointer:
   567                           	opt stack 0
   568  0000DC                     	ds	2
   569  0000DE                     _Ready:
   570                           	opt stack 0
   571  0000DE                     	ds	2
   572  0000E0                     _TMR_ActiveFlags:
   573                           	opt stack 0
   574  0000E0                     	ds	2
   575  0000E2                     ES_Timer_Tick_Resp@NextTimer2Process:
   576                           	opt stack 0
   577  0000E2                     	ds	1
   578  0000E3                     Pattern_RGBPatterns@Length:
   579                           	opt stack 0
   580  0000E3                     	ds	1
   581  0000E4                     SPI32_ControlService@CurrentState:
   582                           	opt stack 0
   583  0000E4                     	ds	1
   584  0000E5                     SPI32_ControlService@MyPriority:
   585                           	opt stack 0
   586  0000E5                     	ds	1
   587  0000E6                     _CurrentState:
   588                           	opt stack 0
   589  0000E6                     	ds	1
   590  0000E7                     _FrameIndex:
   591                           	opt stack 0
   592  0000E7                     	ds	1
   593  0000E8                     _Length:
   594                           	opt stack 0
   595  0000E8                     	ds	1
   596  0000E9                     _MyPriority:
   597                           	opt stack 0
   598  0000E9                     	ds	1
   599  0000EA                     _NumFrames:
   600                           	opt stack 0
   601  0000EA                     	ds	1
   602  0000EB                     _PatternStepCounter:
   603                           	opt stack 0
   604  0000EB                     	ds	1
   605  0000EC                     _TickCount:
   606                           	opt stack 0
   607  0000EC                     	ds	1
   608  0000ED                     ES_Run@ThisEvent:
   609                           	opt stack 0
   610  0000ED                     	ds	3
   611  0000F0                     _Brightness:
   612                           	opt stack 0
   613  0000F0                     	ds	1
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1h	equ	0xFE2
   622                           fsr1l	equ	0xFE1
   623                           
   624                           	psect	dataBANK0
   625  0000F1                     __pdataBANK0:
   626                           	opt stack 0
   627  0000F1                     IdlePattern@rising:
   628                           	opt stack 0
   629  0000F1                     	ds	1
   630  0000F2                     WelcomePattern@rising:
   631                           	opt stack 0
   632  0000F2                     	ds	1
   633  0000F3                     _FrameByte:
   634                           	opt stack 0
   635  0000F3                     	ds	1
   636  0000F4                     _PatternConfigs:
   637                           	opt stack 0
   638  0000F4                     	ds	5
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1h	equ	0xFE2
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	bssBANK1
   650  000100                     __pbssBANK1:
   651                           	opt stack 0
   652  000100                     _TMR_TimerArray:
   653                           	opt stack 0
   654  000100                     	ds	32
   655  000120                     _PixelPattern:
   656                           	opt stack 0
   657  000120                     	ds	152
   658  0001B8                     _Queue1:
   659                           	opt stack 0
   660  0001B8                     	ds	12
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1h	equ	0xFE2
   669                           fsr1l	equ	0xFE1
   670                           
   671                           	psect	bssBIGRAM
   672  0001C4                     __pbssBIGRAM:
   673                           	opt stack 0
   674  0001C4                     _PixelFrames:
   675                           	opt stack 0
   676  0001C4                     	ds	316
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1h	equ	0xFE2
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	cstackBANK0
   688  000060                     __pcstackBANK0:
   689                           	opt stack 0
   690  000060                     ??_WelcomePattern:
   691  000060                     ??_ES_Timer_StopTimer:
   692  000060                     ?_PatternOff:
   693                           	opt stack 0
   694  000060                     ?_printf:
   695                           	opt stack 0
   696  000060                     ?___awdiv:
   697                           	opt stack 0
   698  000060                     ?___awmod:
   699                           	opt stack 0
   700  000060                     ?_GetNextFrame:
   701                           	opt stack 0
   702  000060                     ES_CheckUserEvents@i:
   703                           	opt stack 0
   704  000060                     DotStar_Init@brightness:
   705                           	opt stack 0
   706  000060                     ___lbmod@divisor:
   707                           	opt stack 0
   708  000060                     ES_GetMSBitSet@Val2Check:
   709                           	opt stack 0
   710  000060                     __HW_Timer_Init@Rate:
   711                           	opt stack 0
   712  000060                     ES_InitQueue@pBlock:
   713                           	opt stack 0
   714  000060                     ES_Timer_InitTimer@NewTime:
   715                           	opt stack 0
   716  000060                     SetupPattern@configs:
   717                           	opt stack 0
   718  000060                     printf@f:
   719                           	opt stack 0
   720  000060                     ___awdiv@dividend:
   721                           	opt stack 0
   722  000060                     ___awmod@dividend:
   723                           	opt stack 0
   724  000060                     SPI32_SendFrame@newFrame:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x0
   728  000060                     	ds	1
   729  000061                     ??_DotStar_Init:
   730  000061                     ___lbmod@dividend:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x1
   734  000061                     	ds	1
   735  000062                     ??_ES_GetMSBitSet:
   736  000062                     ??_ES_Timer_InitTimer:
   737  000062                     ES_InitQueue@BlockSize:
   738                           	opt stack 0
   739  000062                     SetupPattern@numPixels:
   740                           	opt stack 0
   741  000062                     PatternOff@i:
   742                           	opt stack 0
   743  000062                     ___lbmod@counter:
   744                           	opt stack 0
   745  000062                     ES_Timer_Init@Rate:
   746                           	opt stack 0
   747  000062                     printf@ap:
   748                           	opt stack 0
   749  000062                     ___awdiv@divisor:
   750                           	opt stack 0
   751  000062                     ___awmod@divisor:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x2
   755  000062                     	ds	1
   756  000063                     DotStar_Init@numPixels:
   757                           	opt stack 0
   758  000063                     ___lbmod@rem:
   759                           	opt stack 0
   760  000063                     ES_InitQueue@pThisQueue:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x3
   764  000063                     	ds	1
   765  000064                     ??_SPI32_SendFrame:
   766  000064                     ES_Timer_StopTimer@Num:
   767                           	opt stack 0
   768  000064                     ES_Timer_InitTimer@Num:
   769                           	opt stack 0
   770  000064                     printf@c:
   771                           	opt stack 0
   772  000064                     ___awdiv@counter:
   773                           	opt stack 0
   774  000064                     ___awmod@counter:
   775                           	opt stack 0
   776  000064                     _WelcomePattern$717:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x4
   780  000064                     	ds	1
   781  000065                     ___awdiv@sign:
   782                           	opt stack 0
   783  000065                     ___awmod@sign:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x5
   787  000065                     	ds	1
   788  000066                     ?___wmul:
   789                           	opt stack 0
   790  000066                     WelcomePattern@sat:
   791                           	opt stack 0
   792  000066                     ___wmul@multiplier:
   793                           	opt stack 0
   794  000066                     ___awdiv@quotient:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x6
   798  000066                     	ds	1
   799  000067                     ES_GetMSBitSet@ReturnVal:
   800                           	opt stack 0
   801  000067                     WelcomePattern@val:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x7
   805  000067                     	ds	1
   806  000068                     ??_IdlePattern:
   807  000068                     ?_ThinkingPattern:
   808                           	opt stack 0
   809  000068                     ?_SpeakingPattern:
   810                           	opt stack 0
   811  000068                     ?_ListeningPattern:
   812                           	opt stack 0
   813  000068                     ES_GetMSBitSet@Nybble2Test:
   814                           	opt stack 0
   815  000068                     WelcomePattern@hue:
   816                           	opt stack 0
   817  000068                     ThinkingPattern@pixel:
   818                           	opt stack 0
   819  000068                     ListeningPattern@pixel:
   820                           	opt stack 0
   821  000068                     SpeakingPattern@pixel:
   822                           	opt stack 0
   823  000068                     ___wmul@multiplicand:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x8
   827  000068                     	ds	1
   828  000069                     ES_GetMSBitSet@LoopCntr:
   829                           	opt stack 0
   830  000069                     WelcomePattern@i:
   831                           	opt stack 0
   832  000069                     ThinkingPattern@stepCount:
   833                           	opt stack 0
   834  000069                     ListeningPattern@stepCount:
   835                           	opt stack 0
   836  000069                     SpeakingPattern@stepCount:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x9
   840  000069                     	ds	1
   841  00006A                     ??_ThinkingPattern:
   842  00006A                     ??_SpeakingPattern:
   843  00006A                     ??_ListeningPattern:
   844  00006A                     ___wmul@product:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0xA
   848  00006A                     	ds	2
   849  00006C                     ?___lwdiv:
   850                           	opt stack 0
   851  00006C                     ES_EnQueueFIFO@pBlock:
   852                           	opt stack 0
   853  00006C                     ES_DeQueue@pBlock:
   854                           	opt stack 0
   855  00006C                     ___lwdiv@dividend:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0xC
   859  00006C                     	ds	2
   860  00006E                     ES_DeQueue@pReturnEvent:
   861                           	opt stack 0
   862  00006E                     ___lwdiv@divisor:
   863                           	opt stack 0
   864  00006E                     ES_EnQueueFIFO@Event2Add:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0xE
   868  00006E                     	ds	2
   869  000070                     ??_ES_DeQueue:
   870  000070                     ___lwdiv@quotient:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x10
   874  000070                     	ds	1
   875  000071                     ??_ES_EnQueueFIFO:
   876  000071                     _IdlePattern$728:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x11
   880  000071                     	ds	1
   881  000072                     ES_DeQueue@SaveCrit:
   882                           	opt stack 0
   883  000072                     ___lwdiv@counter:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x12
   887  000072                     	ds	1
   888  000073                     ES_DeQueue@NumLeft:
   889                           	opt stack 0
   890  000073                     _IdlePattern$729:
   891                           	opt stack 0
   892  000073                     HSV_to_RGB@HSV_Value:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x13
   896  000073                     	ds	1
   897  000074                     ES_EnQueueFIFO@SaveCrit:
   898                           	opt stack 0
   899  000074                     ES_DeQueue@pThisQueue:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x14
   903  000074                     	ds	1
   904  000075                     ??_HSV_to_RGB:
   905  000075                     ES_EnQueueFIFO@pThisQueue:
   906                           	opt stack 0
   907  000075                     _IdlePattern$730:
   908                           	opt stack 0
   909  000075                     ThinkingPattern@pixelHSV:
   910                           	opt stack 0
   911  000075                     ListeningPattern@pixelHSV:
   912                           	opt stack 0
   913  000075                     SpeakingPattern@pixelHSV:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x15
   917  000075                     	ds	2
   918  000077                     ListeningPattern@listeningLoc:
   919                           	opt stack 0
   920  000077                     _IdlePattern$731:
   921                           	opt stack 0
   922  000077                     _ThinkingPattern$742:
   923                           	opt stack 0
   924  000077                     _SpeakingPattern$767:
   925                           	opt stack 0
   926  000077                     ES_PostToService@TheEvent:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x17
   930  000077                     	ds	1
   931  000078                     _ListeningPattern$755:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x18
   935  000078                     	ds	1
   936  000079                     IdlePattern@fade_thresh:
   937                           	opt stack 0
   938  000079                     _ThinkingPattern$743:
   939                           	opt stack 0
   940  000079                     _SpeakingPattern$768:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x19
   944  000079                     	ds	1
   945  00007A                     ??_ES_PostToService:
   946  00007A                     IdlePattern@sat:
   947                           	opt stack 0
   948  00007A                     _ListeningPattern$756:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x1A
   952  00007A                     	ds	1
   953  00007B                     IdlePattern@val:
   954                           	opt stack 0
   955  00007B                     ThinkingPattern@sat:
   956                           	opt stack 0
   957  00007B                     SpeakingPattern@sat:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x1B
   961  00007B                     	ds	1
   962  00007C                     ES_PostToService@WhichService:
   963                           	opt stack 0
   964  00007C                     IdlePattern@hue:
   965                           	opt stack 0
   966  00007C                     ThinkingPattern@val:
   967                           	opt stack 0
   968  00007C                     ListeningPattern@sat:
   969                           	opt stack 0
   970  00007C                     SpeakingPattern@val:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x1C
   974  00007C                     	ds	1
   975  00007D                     IdlePattern@pulseWidth:
   976                           	opt stack 0
   977  00007D                     ThinkingPattern@hue:
   978                           	opt stack 0
   979  00007D                     ListeningPattern@val:
   980                           	opt stack 0
   981  00007D                     SpeakingPattern@hue:
   982                           	opt stack 0
   983  00007D                     InitPatternControlService@ThisEvent:
   984                           	opt stack 0
   985  00007D                     PostPatternControlService@ThisEvent:
   986                           	opt stack 0
   987  00007D                     InitSPI32ControlService@ThisEvent:
   988                           	opt stack 0
   989  00007D                     PostSPI32ControlService@ThisEvent:
   990                           	opt stack 0
   991                           
   992                           ; 3 bytes @ 0x1D
   993  00007D                     	ds	1
   994  00007E                     IdlePattern@x:
   995                           	opt stack 0
   996  00007E                     ThinkingPattern@x:
   997                           	opt stack 0
   998  00007E                     ListeningPattern@hue:
   999                           	opt stack 0
  1000  00007E                     SpeakingPattern@x:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x1E
  1004  00007E                     	ds	1
  1005  00007F                     IdlePattern@i:
  1006                           	opt stack 0
  1007  00007F                     ThinkingPattern@head:
  1008                           	opt stack 0
  1009  00007F                     ListeningPattern@x:
  1010                           	opt stack 0
  1011  00007F                     SpeakingPattern@head:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x1F
  1015  00007F                     	ds	1
  1016  000080                     ??_ES_Timer_Tick_Resp:
  1017  000080                     InitPatternControlService@Priority:
  1018                           	opt stack 0
  1019  000080                     ListeningPattern@y:
  1020                           	opt stack 0
  1021  000080                     InitSPI32ControlService@Priority:
  1022                           	opt stack 0
  1023  000080                     SPI32_TransmitFrames@framePointer:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x20
  1027  000080                     	ds	1
  1028  000081                     ListeningPattern@head:
  1029                           	opt stack 0
  1030  000081                     ES_Initialize@NewRate:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x21
  1034  000081                     	ds	1
  1035  000082                     ?_UpdatePattern:
  1036                           	opt stack 0
  1037  000082                     SPI32_TransmitFrames@numFrames:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x22
  1041  000082                     	ds	1
  1042  000083                     ES_Initialize@i:
  1043                           	opt stack 0
  1044  000083                     SPI32_TransmitFrames@transmitEvent:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x23
  1048  000083                     	ds	1
  1049  000084                     UpdatePattern@patternID:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x24
  1053  000084                     	ds	1
  1054  000085                     UpdatePattern@i:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x25
  1058  000085                     	ds	1
  1059  000086                     UpdatePattern@i_704:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x26
  1063  000086                     	ds	1
  1064  000087                     UpdatePattern@i_705:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x27
  1068  000087                     	ds	1
  1069  000088                     UpdatePattern@i_706:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x28
  1073  000088                     	ds	1
  1074  000089                     UpdatePattern@i_708:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x29
  1078  000089                     	ds	4
  1079  00008D                     HSV_to_RGB@h:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x2D
  1083  00008D                     	ds	2
  1084  00008F                     HSV_to_RGB@region:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x2F
  1088  00008F                     	ds	2
  1089  000091                     HSV_to_RGB@fpart:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x31
  1093  000091                     	ds	2
  1094  000093                     HSV_to_RGB@r:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x33
  1098  000093                     	ds	2
  1099  000095                     HSV_to_RGB@g:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x35
  1103  000095                     	ds	2
  1104  000097                     HSV_to_RGB@b:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x37
  1108  000097                     	ds	2
  1109  000099                     HSV_to_RGB@q:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x39
  1113  000099                     	ds	2
  1114  00009B                     HSV_to_RGB@t:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x3B
  1118  00009B                     	ds	2
  1119  00009D                     _HSV_to_RGB$2017:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x3D
  1123  00009D                     	ds	2
  1124  00009F                     HSV_to_RGB@s:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x3F
  1128  00009F                     	ds	2
  1129  0000A1                     HSV_to_RGB@p:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x41
  1133  0000A1                     	ds	2
  1134  0000A3                     HSV_to_RGB@v:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x43
  1138  0000A3                     	ds	2
  1139  0000A5                     DotStar_Show@patternPointer:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x45
  1143  0000A5                     	ds	2
  1144  0000A7                     ??_DotStar_Show:
  1145                           
  1146                           ; 1 bytes @ 0x47
  1147  0000A7                     	ds	18
  1148  0000B9                     DotStar_Show@i:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x59
  1152  0000B9                     	ds	1
  1153  0000BA                     ?_RunPatternControlService:
  1154                           	opt stack 0
  1155  0000BA                     ?_RunSPI32ControlService:
  1156                           	opt stack 0
  1157  0000BA                     RunPatternControlService@ThisEvent:
  1158                           	opt stack 0
  1159  0000BA                     RunSPI32ControlService@ThisEvent:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x5A
  1163  0000BA                     	ds	3
  1164  0000BD                     ??_RunSPI32ControlService:
  1165  0000BD                     RunPatternControlService@ReturnEvent:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x5D
  1169  0000BD                     	ds	3
  1170  0000C0                     RunPatternControlService@testEvent:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0x60
  1174  0000C0                     	ds	4
  1175  0000C4                     RunSPI32ControlService@ReturnEvent:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x64
  1179  0000C4                     	ds	3
  1180  0000C7                     ??_ES_Run:
  1181                           
  1182                           ; 1 bytes @ 0x67
  1183  0000C7                     	ds	4
  1184  0000CB                     ES_Run@HighestPrior:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x6B
  1188  0000CB                     	ds	1
  1189  0000CC                     main@ErrorType:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x6C
  1193  0000CC                     	ds	1
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           postdec1	equ	0xFE5
  1201                           fsr1h	equ	0xFE2
  1202                           fsr1l	equ	0xFE1
  1203                           
  1204                           	psect	cstackCOMRAM
  1205  000001                     __pcstackCOMRAM:
  1206                           	opt stack 0
  1207  000001                     ?i2___awdiv:
  1208                           	opt stack 0
  1209  000001                     ?i2___awmod:
  1210                           	opt stack 0
  1211  000001                     SetPattern@PatternID:
  1212                           	opt stack 0
  1213  000001                     DotStar_SetBrightness@brightness:
  1214                           	opt stack 0
  1215  000001                     i2___awdiv@dividend:
  1216                           	opt stack 0
  1217  000001                     i2___awmod@dividend:
  1218                           	opt stack 0
  1219  000001                     i2SPI32_SendFrame@newFrame:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x0
  1223  000001                     	ds	2
  1224  000003                     i2___awdiv@divisor:
  1225                           	opt stack 0
  1226  000003                     i2___awmod@divisor:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x2
  1230  000003                     	ds	2
  1231  000005                     ??i2_SPI32_SendFrame:
  1232  000005                     i2___awdiv@counter:
  1233                           	opt stack 0
  1234  000005                     i2___awmod@counter:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x4
  1238  000005                     	ds	1
  1239  000006                     i2___awdiv@sign:
  1240                           	opt stack 0
  1241  000006                     i2___awmod@sign:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x5
  1245  000006                     	ds	1
  1246  000007                     ?i2___wmul:
  1247                           	opt stack 0
  1248  000007                     i2___awdiv@quotient:
  1249                           	opt stack 0
  1250  000007                     i2___wmul@multiplier:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x6
  1254  000007                     	ds	2
  1255  000009                     SetBrightness@brightness:
  1256                           	opt stack 0
  1257  000009                     SetListLoc@LL:
  1258                           	opt stack 0
  1259  000009                     i2___wmul@multiplicand:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x8
  1263  000009                     	ds	1
  1264  00000A                     SetBrightness@newBrightness:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x9
  1268  00000A                     	ds	1
  1269  00000B                     SetListLoc@newLocation:
  1270                           	opt stack 0
  1271  00000B                     i2___wmul@product:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0xA
  1275  00000B                     	ds	2
  1276  00000D                     i2ES_EnQueueFIFO@pBlock:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0xC
  1280  00000D                     	ds	2
  1281  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1282                           	opt stack 0
  1283                           
  1284                           ; 3 bytes @ 0xE
  1285  00000F                     	ds	3
  1286  000012                     ??i2_ES_EnQueueFIFO:
  1287                           
  1288                           ; 1 bytes @ 0x11
  1289  000012                     	ds	3
  1290  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x14
  1294  000015                     	ds	1
  1295  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x15
  1299  000016                     	ds	2
  1300  000018                     i2ES_PostToService@TheEvent:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x17
  1304  000018                     	ds	3
  1305  00001B                     ??i2_ES_PostToService:
  1306                           
  1307                           ; 1 bytes @ 0x1A
  1308  00001B                     	ds	2
  1309  00001D                     i2ES_PostToService@WhichService:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x1C
  1313  00001D                     	ds	1
  1314  00001E                     i2PostPatternControlService@ThisEvent:
  1315                           	opt stack 0
  1316  00001E                     i2PostSPI32ControlService@ThisEvent:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0x1D
  1320  00001E                     	ds	3
  1321  000021                     _ProcessReceive$1398:
  1322                           	opt stack 0
  1323  000021                     SPI32_EOTResponse@EOTevent:
  1324                           	opt stack 0
  1325                           
  1326                           ; 3 bytes @ 0x20
  1327  000021                     	ds	2
  1328  000023                     ProcessReceive@Event2Post:
  1329                           	opt stack 0
  1330                           
  1331                           ; 3 bytes @ 0x22
  1332  000023                     	ds	3
  1333  000026                     ??_ISR:
  1334                           
  1335                           ; 1 bytes @ 0x25
  1336  000026                     	ds	16
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1h	equ	0xFE2
  1345                           fsr1l	equ	0xFE1
  1346                           
  1347 ;;
  1348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1349 ;;
  1350 ;; *************** function _main *****************
  1351 ;; Defined at:
  1352 ;;		line 25 in file "main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  ErrorType       1  108[BANK0 ] enum E15646
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2  674[None  ] int 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1366 ;;      Params:         0       0       0       0
  1367 ;;      Locals:         0       1       0       0
  1368 ;;      Temps:          0       0       0       0
  1369 ;;      Totals:         0       1       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels required when called:   16
  1372 ;; This function calls:
  1373 ;;		_ES_Initialize
  1374 ;;		_ES_Run
  1375 ;;		_printf
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382  002192                     __ptext0:
  1383                           	opt stack 0
  1384  002192                     _main:
  1385                           	opt stack 15
  1386                           
  1387                           ;main.c: 27: ADCON1 = 0x0F;
  1388                           
  1389                           ;incstack = 0
  1390  002192  0E0F               	movlw	15
  1391  002194  6EC1               	movwf	4033,c	;volatile
  1392                           
  1393                           ;main.c: 34: ES_Return_t ErrorType;
  1394                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1395  002196  0E9C               	movlw	156
  1396  002198  0100               	movlb	0	; () banked
  1397  00219A  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1398  00219C  0E3F               	movlw	63
  1399  00219E  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1400  0021A0  EC0F  F00D         	call	_ES_Initialize	;wreg free
  1401  0021A4  0100               	movlb	0	; () banked
  1402  0021A6  6FCC               	movwf	main@ErrorType& (0+255),b
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 51: if ( ErrorType == Success ) {
  1406  0021A8  0100               	movlb	0	; () banked
  1407  0021AA  51CC               	movf	main@ErrorType& (0+255),w,b
  1408  0021AC  0100               	movlb	0	; () banked
  1409  0021AE  A4D8               	btfss	status,2,c
  1410  0021B0  D029               	goto	l4103
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 53: ErrorType = ES_Run();
  1414  0021B2  EC95  F00C         	call	_ES_Run	;wreg free
  1415  0021B6  0100               	movlb	0	; () banked
  1416  0021B8  6FCC               	movwf	main@ErrorType& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 55: }
  1420                           ;main.c: 57: switch (ErrorType){
  1421  0021BA  D024               	goto	l4103
  1422  0021BC                     l4093:
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1426  0021BC  0E64               	movlw	low STR_1
  1427  0021BE  0100               	movlb	0	; () banked
  1428  0021C0  6F60               	movwf	printf@f& (0+255),b
  1429  0021C2  0E03               	movlw	high STR_1
  1430  0021C4  0100               	movlb	0	; () banked
  1431  0021C6  6F61               	movwf	(printf@f+1)& (0+255),b
  1432  0021C8  EC70  F014         	call	_printf	;wreg free
  1433                           
  1434                           ;main.c: 60: break;
  1435  0021CC  D027               	goto	l682
  1436  0021CE                     l4095:
  1437                           
  1438                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1439  0021CE  0E7F               	movlw	low STR_2
  1440  0021D0  0100               	movlb	0	; () banked
  1441  0021D2  6F60               	movwf	printf@f& (0+255),b
  1442  0021D4  0E03               	movlw	high STR_2
  1443  0021D6  0100               	movlb	0	; () banked
  1444  0021D8  6F61               	movwf	(printf@f+1)& (0+255),b
  1445  0021DA  EC70  F014         	call	_printf	;wreg free
  1446                           
  1447                           ;main.c: 63: break;
  1448  0021DE  D01E               	goto	l682
  1449  0021E0                     l4097:
  1450                           
  1451                           ;main.c: 65: printf("Failed Initialization\n");
  1452  0021E0  0E97               	movlw	low STR_3
  1453  0021E2  0100               	movlb	0	; () banked
  1454  0021E4  6F60               	movwf	printf@f& (0+255),b
  1455  0021E6  0E03               	movlw	high STR_3
  1456  0021E8  0100               	movlb	0	; () banked
  1457  0021EA  6F61               	movwf	(printf@f+1)& (0+255),b
  1458  0021EC  EC70  F014         	call	_printf	;wreg free
  1459                           
  1460                           ;main.c: 66: break;
  1461  0021F0  D015               	goto	l682
  1462  0021F2                     l4099:
  1463                           
  1464                           ;main.c: 68: printf("Other Failure\n");
  1465  0021F2  0EAE               	movlw	low STR_4
  1466  0021F4  0100               	movlb	0	; () banked
  1467  0021F6  6F60               	movwf	printf@f& (0+255),b
  1468  0021F8  0E03               	movlw	high STR_4
  1469  0021FA  0100               	movlb	0	; () banked
  1470  0021FC  6F61               	movwf	(printf@f+1)& (0+255),b
  1471  0021FE  EC70  F014         	call	_printf	;wreg free
  1472                           
  1473                           ;main.c: 70: }
  1474                           
  1475                           ;main.c: 69: break;
  1476  002202  D00C               	goto	l682
  1477  002204                     l4103:
  1478  002204  0100               	movlb	0	; () banked
  1479  002206  51CC               	movf	main@ErrorType& (0+255),w,b
  1480                           
  1481                           ; Switch size 1, requested type "space"
  1482                           ; Number of cases is 3, Range of values is 1 to 5
  1483                           ; switch strategies available:
  1484                           ; Name         Instructions Cycles
  1485                           ; simple_byte           10     6 (average)
  1486                           ;	Chosen strategy is simple_byte
  1487  002208  0A01               	xorlw	1	; case 1
  1488  00220A  B4D8               	btfsc	status,2,c
  1489  00220C  D7D7               	goto	l4093
  1490  00220E  0A02               	xorlw	2	; case 3
  1491  002210  B4D8               	btfsc	status,2,c
  1492  002212  D7DD               	goto	l4095
  1493  002214  0A06               	xorlw	6	; case 5
  1494  002216  B4D8               	btfsc	status,2,c
  1495  002218  D7E3               	goto	l4097
  1496  00221A  D7EB               	goto	l4099
  1497  00221C                     l682:
  1498                           
  1499                           ;main.c: 72: ;
  1500  00221C  D7FF               	goto	l682
  1501  00221E                     __end_of_main:
  1502                           	opt stack 0
  1503                           tblptru	equ	0xFF8
  1504                           tblptrh	equ	0xFF7
  1505                           tblptrl	equ	0xFF6
  1506                           tablat	equ	0xFF5
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postdec1	equ	0xFE5
  1510                           fsr1h	equ	0xFE2
  1511                           fsr1l	equ	0xFE1
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function _printf *****************
  1515 ;; Defined at:
  1516 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1519 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  tmpval          4    0        struct .
  1522 ;;  cp              3    0        PTR const unsigned char 
  1523 ;;  ap              2    2[BANK0 ] PTR void [1]
  1524 ;;		 -> ?_printf(2), 
  1525 ;;  len             2    0        unsigned int 
  1526 ;;  val             2    0        unsigned int 
  1527 ;;  c               1    4[BANK0 ] char 
  1528 ;;  flag            1    0        unsigned char 
  1529 ;;  prec            1    0        char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  2    0[BANK0 ] int 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1539 ;;      Params:         0       2       0       0
  1540 ;;      Locals:         0       3       0       0
  1541 ;;      Temps:          0       0       0       0
  1542 ;;      Totals:         0       5       0       0
  1543 ;;Total ram usage:        5 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    8
  1546 ;; This function calls:
  1547 ;;		_putch
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text1
  1554  0028E0                     __ptext1:
  1555                           	opt stack 0
  1556  0028E0                     _printf:
  1557                           	opt stack 22
  1558                           
  1559                           ;doprnt.c: 466: va_list ap;
  1560                           ;doprnt.c: 499: signed char c;
  1561                           ;doprnt.c: 506: signed char prec;
  1562                           ;doprnt.c: 508: unsigned char flag;
  1563                           ;doprnt.c: 523: union {
  1564                           ;doprnt.c: 524: unsigned long vd;
  1565                           ;doprnt.c: 525: double integ;
  1566                           ;doprnt.c: 526: } tmpval;
  1567                           ;doprnt.c: 528: unsigned int val;
  1568                           ;doprnt.c: 529: unsigned len;
  1569                           ;doprnt.c: 530: const char * cp;
  1570                           ;doprnt.c: 533: *ap = __va_start();
  1571                           
  1572                           ;incstack = 0
  1573  0028E0  0E62               	movlw	low (?_printf+2)
  1574  0028E2  0100               	movlb	0	; () banked
  1575  0028E4  6F62               	movwf	printf@ap& (0+255),b
  1576  0028E6  0E00               	movlw	high (?_printf+2)
  1577  0028E8  0100               	movlb	0	; () banked
  1578  0028EA  6F63               	movwf	(printf@ap+1)& (0+255),b
  1579                           
  1580                           ;doprnt.c: 536: while(c = *f++) {
  1581  0028EC  D004               	goto	l3919
  1582  0028EE                     l3917:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;doprnt.c: 540: {
  1586                           ;doprnt.c: 541: (putch(c) );
  1587  0028EE  0100               	movlb	0	; () banked
  1588  0028F0  5164               	movf	printf@c& (0+255),w,b
  1589  0028F2  ECD0  F015         	call	_putch
  1590  0028F6                     l3919:
  1591  0028F6  C060  FFF6         	movff	printf@f,tblptrl
  1592  0028FA  C061  FFF7         	movff	printf@f+1,tblptrh
  1593  0028FE  0100               	movlb	0	; () banked
  1594  002900  4B60               	infsnz	printf@f& (0+255),f,b
  1595  002902  2B61               	incf	(printf@f+1)& (0+255),f,b
  1596  002904                     	if	0	;tblptru may be non-zero
  1597  002904                     	endif
  1598  002904                     	if	0	;tblptru may be non-zero
  1599  002904                     	endif
  1600  002904  0008               	tblrd		*
  1601  002906  CFF5 F064          	movff	tablat,printf@c
  1602  00290A  0100               	movlb	0	; () banked
  1603  00290C  5164               	movf	printf@c& (0+255),w,b
  1604  00290E  B4D8               	btfsc	status,2,c
  1605  002910  0012               	return	
  1606  002912  D7ED               	goto	l3917
  1607  002914                     __end_of_printf:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postdec1	equ	0xFE5
  1616                           fsr1h	equ	0xFE2
  1617                           fsr1l	equ	0xFE1
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _putch *****************
  1621 ;; Defined at:
  1622 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  c               1    wreg     unsigned char 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  c               1    0[COMRAM] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1636 ;;      Params:         0       0       0       0
  1637 ;;      Locals:         0       0       0       0
  1638 ;;      Temps:          0       0       0       0
  1639 ;;      Totals:         0       0       0       0
  1640 ;;Total ram usage:        0 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    7
  1643 ;; This function calls:
  1644 ;;		Nothing
  1645 ;; This function is called by:
  1646 ;;		_printf
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text2
  1651  002BA0                     __ptext2:
  1652                           	opt stack 0
  1653  002BA0                     _putch:
  1654                           	opt stack 22
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;incstack = 0
  1658  002BA0  0012               	return		;funcret
  1659  002BA2                     __end_of_putch:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _ES_Run *****************
  1673 ;; Defined at:
  1674 ;;		line 277 in file "ES_Framework.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  HighestPrior    1  107[BANK0 ] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      enum E15494
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         0       1       0       0
  1690 ;;      Temps:          0       4       0       0
  1691 ;;      Totals:         0       5       0       0
  1692 ;;Total ram usage:        5 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:   15
  1695 ;; This function calls:
  1696 ;;		_ES_CheckUserEvents
  1697 ;;		_ES_DeQueue
  1698 ;;		_ES_GetMSBitSet
  1699 ;;		_RunPatternControlService
  1700 ;;		_RunSPI32ControlService
  1701 ;;		__HW_Process_Pending_Ints
  1702 ;; This function is called by:
  1703 ;;		_main
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text3
  1708  00192A                     __ptext3:
  1709                           	opt stack 0
  1710  00192A                     _ES_Run:
  1711                           	opt stack 15
  1712                           
  1713                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1714                           
  1715                           ;incstack = 0
  1716                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1717                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1718                           ;ES_Framework.c: 282: while(1){
  1719  00192A  D06B               	goto	l3889
  1720  00192C                     l3877:
  1721                           
  1722                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1723  00192C  C0DE  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1724  001930  C0DF  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1725  001934  EC26  F010         	call	_ES_GetMSBitSet	;wreg free
  1726  001938  0100               	movlb	0	; () banked
  1727  00193A  6FCB               	movwf	ES_Run@HighestPrior& (0+255),b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1731  00193C  0100               	movlb	0	; () banked
  1732  00193E  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1733  001940  0D03               	mullw	3
  1734  001942  0E58               	movlw	low _EventQueues
  1735  001944  24F3               	addwf	prodl,w,c
  1736  001946  6EF6               	movwf	tblptrl,c
  1737  001948  0E03               	movlw	high _EventQueues
  1738  00194A  20F4               	addwfc	prodh,w,c
  1739  00194C  6EF7               	movwf	tblptrh,c
  1740  00194E                     	if	0	;There are less than 3 active tblptr bytes
  1741  00194E                     	endif
  1742  00194E  0009               	tblrd		*+
  1743  001950  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1744  001954  000A               	tblrd		*-
  1745  001956  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1746  00195A  0EED               	movlw	low ES_Run@ThisEvent
  1747  00195C  0100               	movlb	0	; () banked
  1748  00195E  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1749  001960  0E00               	movlw	high ES_Run@ThisEvent
  1750  001962  0100               	movlb	0	; () banked
  1751  001964  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1752  001966  ECDD  F009         	call	_ES_DeQueue	;wreg free
  1753  00196A  0900               	iorlw	0
  1754  00196C  A4D8               	btfss	status,2,c
  1755  00196E  D01F               	goto	l3883
  1756                           
  1757                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1758  001970  0100               	movlb	0	; () banked
  1759  001972  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1760  001974  0D02               	mullw	2
  1761  001976  0E01               	movlw	low _BitNum2SetMask
  1762  001978  24F3               	addwf	prodl,w,c
  1763  00197A  6EF6               	movwf	tblptrl,c
  1764  00197C  0E03               	movlw	high _BitNum2SetMask
  1765  00197E  20F4               	addwfc	prodh,w,c
  1766  001980  6EF7               	movwf	tblptrh,c
  1767  001982                     	if	0	;There are less than 3 active tblptr bytes
  1768  001982                     	endif
  1769  001982  0009               	tblrd		*+
  1770  001984  CFF5 F0C7          	movff	tablat,??_ES_Run
  1771  001988  0009               	tblrd		*+
  1772  00198A  CFF5 F0C8          	movff	tablat,??_ES_Run+1
  1773  00198E  0100               	movlb	0	; () banked
  1774  001990  1DC7               	comf	??_ES_Run& (0+255),w,b
  1775  001992  0100               	movlb	0	; () banked
  1776  001994  6FC9               	movwf	(??_ES_Run+2)& (0+255),b
  1777  001996  0100               	movlb	0	; () banked
  1778  001998  1DC8               	comf	(??_ES_Run+1)& (0+255),w,b
  1779  00199A  0100               	movlb	0	; () banked
  1780  00199C  6FCA               	movwf	(??_ES_Run+3)& (0+255),b
  1781  00199E  0100               	movlb	0	; () banked
  1782  0019A0  51C9               	movf	(??_ES_Run+2)& (0+255),w,b
  1783  0019A2  0100               	movlb	0	; () banked
  1784  0019A4  17DE               	andwf	_Ready& (0+255),f,b
  1785  0019A6  0100               	movlb	0	; () banked
  1786  0019A8  51CA               	movf	(??_ES_Run+3)& (0+255),w,b
  1787  0019AA  0100               	movlb	0	; () banked
  1788  0019AC  17DF               	andwf	(_Ready+1)& (0+255),f,b
  1789  0019AE                     l3883:
  1790                           
  1791                           ;ES_Framework.c: 291: }
  1792                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1793  0019AE  C0ED  F0BA         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1794  0019B2  C0EE  F0BB         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1795  0019B6  C0EF  F0BC         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1796  0019BA  0100               	movlb	0	; () banked
  1797  0019BC  51CB               	movf	ES_Run@HighestPrior& (0+255),w,b
  1798  0019BE  0D04               	mullw	4
  1799  0019C0  0E02               	movlw	2
  1800  0019C2  26F3               	addwf	prodl,f,c
  1801  0019C4  0E00               	movlw	0
  1802  0019C6  22F4               	addwfc	prodh,f,c
  1803  0019C8  0E50               	movlw	low _ServDescList
  1804  0019CA  24F3               	addwf	prodl,w,c
  1805  0019CC  6EF6               	movwf	tblptrl,c
  1806  0019CE  0E03               	movlw	high _ServDescList
  1807  0019D0  20F4               	addwfc	prodh,w,c
  1808  0019D2  6EF7               	movwf	tblptrh,c
  1809  0019D4                     	if	0	;There are less than 3 active tblptr bytes
  1810  0019D4                     	endif
  1811  0019D4  D801               	call	u2638
  1812  0019D6  D00C               	goto	u2639
  1813  0019D8                     u2638:
  1814  0019D8  0005               	push	
  1815  0019DA  6EFA               	movwf	pclath,c
  1816  0019DC  0009               	tblrd		*+
  1817  0019DE  50F5               	movf	tablat,w,c
  1818  0019E0  6EFD               	movwf	tosl,c
  1819  0019E2  0009               	tblrd		*+
  1820  0019E4  50F5               	movf	tablat,w,c
  1821  0019E6  6EFE               	movwf	tosh,c
  1822  0019E8  50F8               	movf	tblptru,w,c
  1823  0019EA  6EFF               	movwf	tosu,c
  1824  0019EC  50FA               	movf	pclath,w,c
  1825  0019EE  0012               	return		;indir
  1826  0019F0                     u2639:
  1827  0019F0  0EBA               	movlw	low ?_RunSPI32ControlService
  1828  0019F2  6ED9               	movwf	fsr2l,c
  1829  0019F4  0E00               	movlw	high ?_RunSPI32ControlService
  1830  0019F6  6EDA               	movwf	fsr2h,c
  1831  0019F8  50DF               	movf	indf2,w,c
  1832  0019FA  B4D8               	btfsc	status,2,c
  1833  0019FC  D002               	goto	l3889
  1834                           
  1835                           ;ES_Framework.c: 293: return FailedRun;
  1836  0019FE  0E02               	movlw	2
  1837  001A00  0012               	return	
  1838  001A02                     l3889:
  1839  001A02  EC76  F015         	call	__HW_Process_Pending_Ints	;wreg free
  1840  001A06  0900               	iorlw	0
  1841  001A08  B4D8               	btfsc	status,2,c
  1842  001A0A  D006               	goto	l3893
  1843  001A0C  0100               	movlb	0	; () banked
  1844  001A0E  51DE               	movf	_Ready& (0+255),w,b
  1845  001A10  0100               	movlb	0	; () banked
  1846  001A12  11DF               	iorwf	(_Ready+1)& (0+255),w,b
  1847  001A14  A4D8               	btfss	status,2,c
  1848  001A16  D78A               	goto	l3877
  1849  001A18                     l3893:
  1850                           
  1851                           ;ES_Framework.c: 294: }
  1852                           ;ES_Framework.c: 295: }
  1853                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1854  001A18  EC96  F013         	call	_ES_CheckUserEvents	;wreg free
  1855  001A1C  D7F2               	goto	l3889
  1856  001A1E                     __end_of_ES_Run:
  1857                           	opt stack 0
  1858                           tosu	equ	0xFFF
  1859                           tosh	equ	0xFFE
  1860                           tosl	equ	0xFFD
  1861                           pclath	equ	0xFFA
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1h	equ	0xFE2
  1872                           fsr1l	equ	0xFE1
  1873                           indf2	equ	0xFDF
  1874                           fsr2h	equ	0xFDA
  1875                           fsr2l	equ	0xFD9
  1876                           status	equ	0xFD8
  1877                           
  1878 ;; *************** function __HW_Process_Pending_Ints *****************
  1879 ;; Defined at:
  1880 ;;		line 225 in file "ES_Port.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      unsigned char 
  1887 ;; Registers used:
  1888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1894 ;;      Params:         0       0       0       0
  1895 ;;      Locals:         0       0       0       0
  1896 ;;      Temps:          0       0       0       0
  1897 ;;      Totals:         0       0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:   12
  1901 ;; This function calls:
  1902 ;;		_ES_Timer_Tick_Resp
  1903 ;; This function is called by:
  1904 ;;		_ES_Run
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text4
  1909  002AEC                     __ptext4:
  1910                           	opt stack 0
  1911  002AEC                     __HW_Process_Pending_Ints:
  1912                           	opt stack 17
  1913                           
  1914                           ;ES_Port.c: 227: while (TickCount > 0)
  1915                           
  1916                           ;incstack = 0
  1917  002AEC  D004               	goto	l3667
  1918  002AEE                     l3663:
  1919                           
  1920                           ;ES_Port.c: 228: {
  1921                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1922  002AEE  EC04  F00B         	call	_ES_Timer_Tick_Resp	;wreg free
  1923                           
  1924                           ;ES_Port.c: 231: TickCount--;
  1925  002AF2  0100               	movlb	0	; () banked
  1926  002AF4  07EC               	decf	_TickCount& (0+255),f,b	;volatile
  1927  002AF6                     l3667:
  1928  002AF6  0100               	movlb	0	; () banked
  1929  002AF8  51EC               	movf	_TickCount& (0+255),w,b	;volatile
  1930  002AFA  A4D8               	btfss	status,2,c
  1931  002AFC  D7F8               	goto	l3663
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;ES_Port.c: 232: }
  1935                           ;ES_Port.c: 234: return 1;
  1936                           
  1937                           ; BSR set to: 0
  1938  002AFE  0E01               	movlw	1
  1939  002B00  0012               	return	
  1940  002B02                     __end_of__HW_Process_Pending_Ints:
  1941                           	opt stack 0
  1942                           tosu	equ	0xFFF
  1943                           tosh	equ	0xFFE
  1944                           tosl	equ	0xFFD
  1945                           pclath	equ	0xFFA
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postdec1	equ	0xFE5
  1955                           fsr1h	equ	0xFE2
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _ES_Timer_Tick_Resp *****************
  1963 ;; Defined at:
  1964 ;;		line 284 in file "ES_Timers.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1978 ;;      Params:         0       0       0       0
  1979 ;;      Locals:         0       0       0       0
  1980 ;;      Temps:          0       4       0       0
  1981 ;;      Totals:         0       4       0       0
  1982 ;;Total ram usage:        4 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:   11
  1985 ;; This function calls:
  1986 ;;		Absolute function
  1987 ;;		_ES_GetMSBitSet
  1988 ;;		_PostPatternControlService
  1989 ;;		_PostSPI32ControlService
  1990 ;; This function is called by:
  1991 ;;		__HW_Process_Pending_Ints
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text5
  1996  001608                     __ptext5:
  1997                           	opt stack 0
  1998  001608                     _ES_Timer_Tick_Resp:
  1999                           	opt stack 17
  2000                           
  2001                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  2002                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  2003                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  2004                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;incstack = 0
  2008  001608  0100               	movlb	0	; () banked
  2009  00160A  51E0               	movf	_TMR_ActiveFlags& (0+255),w,b
  2010  00160C  0100               	movlb	0	; () banked
  2011  00160E  11E1               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  2012  001610  B4D8               	btfsc	status,2,c
  2013  001612  0012               	return	
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;ES_Timers.c: 291: {
  2017                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  2018  001614  C0E0  F0D8         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  2019  001618  C0E1  F0D9         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  2020  00161C                     l3503:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2024  00161C  C0D8  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  2025  001620  C0D9  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  2026  001624  EC26  F010         	call	_ES_GetMSBitSet	;wreg free
  2027  001628  0100               	movlb	0	; () banked
  2028  00162A  6FE2               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  2032  00162C  0100               	movlb	0	; () banked
  2033  00162E  51E2               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2034  001630  0D02               	mullw	2
  2035  001632  0E00               	movlw	low _TMR_TimerArray
  2036  001634  24F3               	addwf	prodl,w,c
  2037  001636  6ED9               	movwf	fsr2l,c
  2038  001638  0E01               	movlw	high _TMR_TimerArray
  2039  00163A  20F4               	addwfc	prodh,w,c
  2040  00163C  6EDA               	movwf	fsr2h,c
  2041  00163E  06DE               	decf	postinc2,f,c
  2042  001640  0E00               	movlw	0
  2043  001642  5ADD               	subwfb	postdec2,f,c
  2044  001644  50DE               	movf	postinc2,w,c
  2045  001646  10DE               	iorwf	postinc2,w,c
  2046  001648  A4D8               	btfss	status,2,c
  2047  00164A  D043               	goto	l3515
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;ES_Timers.c: 299: {
  2051                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  2052  00164C  0E03               	movlw	3
  2053  00164E  0100               	movlb	0	; () banked
  2054  001650  6FD5               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2058  001652  C0E2  F0D6         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2059  001656  0100               	movlb	0	; () banked
  2060  001658  6BD7               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2064  00165A  C0D5  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2065  00165E  C0D6  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2066  001662  C0D7  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2067  001666  0100               	movlb	0	; () banked
  2068  001668  51E2               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2069  00166A  0D02               	mullw	2
  2070  00166C  0E21               	movlw	low _Timer2PostFunc
  2071  00166E  24F3               	addwf	prodl,w,c
  2072  001670  6EF6               	movwf	tblptrl,c
  2073  001672  0E03               	movlw	high _Timer2PostFunc
  2074  001674  20F4               	addwfc	prodh,w,c
  2075  001676  6EF7               	movwf	tblptrh,c
  2076  001678                     	if	0	;There are less than 3 active tblptr bytes
  2077  001678                     	endif
  2078  001678  D801               	call	u2238
  2079  00167A  D00C               	goto	l3513
  2080  00167C                     u2238:
  2081  00167C  0005               	push	
  2082  00167E  6EFA               	movwf	pclath,c
  2083  001680  0009               	tblrd		*+
  2084  001682  50F5               	movf	tablat,w,c
  2085  001684  6EFD               	movwf	tosl,c
  2086  001686  0009               	tblrd		*+
  2087  001688  50F5               	movf	tablat,w,c
  2088  00168A  6EFE               	movwf	tosh,c
  2089  00168C  50F8               	movf	tblptru,w,c
  2090  00168E  6EFF               	movwf	tosu,c
  2091  001690  50FA               	movf	pclath,w,c
  2092  001692  0012               	return		;indir
  2093  001694                     l3513:
  2094                           
  2095                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2096  001694  0100               	movlb	0	; () banked
  2097  001696  51E2               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2098  001698  0D02               	mullw	2
  2099  00169A  0E01               	movlw	low _BitNum2SetMask
  2100  00169C  24F3               	addwf	prodl,w,c
  2101  00169E  6EF6               	movwf	tblptrl,c
  2102  0016A0  0E03               	movlw	high _BitNum2SetMask
  2103  0016A2  20F4               	addwfc	prodh,w,c
  2104  0016A4  6EF7               	movwf	tblptrh,c
  2105  0016A6                     	if	0	;There are less than 3 active tblptr bytes
  2106  0016A6                     	endif
  2107  0016A6  0009               	tblrd		*+
  2108  0016A8  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2109  0016AC  0009               	tblrd		*+
  2110  0016AE  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2111  0016B2  0100               	movlb	0	; () banked
  2112  0016B4  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2113  0016B6  0100               	movlb	0	; () banked
  2114  0016B8  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2115  0016BA  0100               	movlb	0	; () banked
  2116  0016BC  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2117  0016BE  0100               	movlb	0	; () banked
  2118  0016C0  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2119  0016C2  0100               	movlb	0	; () banked
  2120  0016C4  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2121  0016C6  0100               	movlb	0	; () banked
  2122  0016C8  17E0               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2123  0016CA  0100               	movlb	0	; () banked
  2124  0016CC  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2125  0016CE  0100               	movlb	0	; () banked
  2126  0016D0  17E1               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2127  0016D2                     l3515:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;ES_Timers.c: 306: }
  2131                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2132  0016D2  0100               	movlb	0	; () banked
  2133  0016D4  51E2               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2134  0016D6  0D02               	mullw	2
  2135  0016D8  0E01               	movlw	low _BitNum2SetMask
  2136  0016DA  24F3               	addwf	prodl,w,c
  2137  0016DC  6EF6               	movwf	tblptrl,c
  2138  0016DE  0E03               	movlw	high _BitNum2SetMask
  2139  0016E0  20F4               	addwfc	prodh,w,c
  2140  0016E2  6EF7               	movwf	tblptrh,c
  2141  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  2142  0016E4                     	endif
  2143  0016E4  0009               	tblrd		*+
  2144  0016E6  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2145  0016EA  0009               	tblrd		*+
  2146  0016EC  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2147  0016F0  0100               	movlb	0	; () banked
  2148  0016F2  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2149  0016F4  0100               	movlb	0	; () banked
  2150  0016F6  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2151  0016F8  0100               	movlb	0	; () banked
  2152  0016FA  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2153  0016FC  0100               	movlb	0	; () banked
  2154  0016FE  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2155  001700  0100               	movlb	0	; () banked
  2156  001702  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2157  001704  0100               	movlb	0	; () banked
  2158  001706  17D8               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2159  001708  0100               	movlb	0	; () banked
  2160  00170A  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2161  00170C  0100               	movlb	0	; () banked
  2162  00170E  17D9               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2166  001710  0100               	movlb	0	; () banked
  2167  001712  51D8               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2168  001714  0100               	movlb	0	; () banked
  2169  001716  11D9               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2170  001718  B4D8               	btfsc	status,2,c
  2171  00171A  0012               	return	
  2172  00171C  D77F               	goto	l3503
  2173  00171E                     __end_of_ES_Timer_Tick_Resp:
  2174                           	opt stack 0
  2175                           tosu	equ	0xFFF
  2176                           tosh	equ	0xFFE
  2177                           tosl	equ	0xFFD
  2178                           pclath	equ	0xFFA
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           prodh	equ	0xFF4
  2184                           prodl	equ	0xFF3
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1h	equ	0xFE2
  2189                           fsr1l	equ	0xFE1
  2190                           indf2	equ	0xFDF
  2191                           postinc2	equ	0xFDE
  2192                           postdec2	equ	0xFDD
  2193                           fsr2h	equ	0xFDA
  2194                           fsr2l	equ	0xFD9
  2195                           status	equ	0xFD8
  2196                           
  2197 ;; *************** function _ES_GetMSBitSet *****************
  2198 ;; Defined at:
  2199 ;;		line 79 in file "ES_LookupTables.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  LoopCntr        1    9[BANK0 ] char 
  2204 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2205 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      unsigned char 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2215 ;;      Params:         0       2       0       0
  2216 ;;      Locals:         0       3       0       0
  2217 ;;      Temps:          0       5       0       0
  2218 ;;      Totals:         0      10       0       0
  2219 ;;Total ram usage:       10 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    7
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		_ES_Run
  2226 ;;		_ES_Timer_Tick_Resp
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text6
  2231  00204C                     __ptext6:
  2232                           	opt stack 0
  2233  00204C                     _ES_GetMSBitSet:
  2234                           	opt stack 20
  2235                           
  2236                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2237                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2238                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;incstack = 0
  2242  00204C  0E80               	movlw	128
  2243  00204E  0100               	movlb	0	; () banked
  2244  002050  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2245                           
  2246                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2247  002052  0E03               	movlw	3
  2248  002054  0100               	movlb	0	; () banked
  2249  002056  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2250  002058                     l3253:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2254  002058  0100               	movlb	0	; () banked
  2255  00205A  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2256  00205C  D046               	goto	l3267
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2260                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2261                           ;ES_LookupTables.c: 91: 0x0F);
  2262                           
  2263                           ; BSR set to: 0
  2264                           
  2265                           ; BSR set to: 0
  2266  00205E  0100               	movlb	0	; () banked
  2267  002060  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2268  002062  0D04               	mullw	4
  2269  002064  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2270  002068  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2271  00206C  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2272  002070  0100               	movlb	0	; () banked
  2273  002072  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2274  002074  D004               	goto	u1964
  2275  002076                     u1965:
  2276  002076  0100               	movlb	0	; () banked
  2277  002078  90D8               	bcf	status,0,c
  2278  00207A  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2279  00207C  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2280  00207E                     u1964:
  2281  00207E  0100               	movlb	0	; () banked
  2282  002080  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2283  002082  D7F9               	goto	u1965
  2284  002084  0100               	movlb	0	; () banked
  2285  002086  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2286  002088  0B0F               	andlw	15
  2287  00208A  0100               	movlb	0	; () banked
  2288  00208C  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2292  00208E  0100               	movlb	0	; () banked
  2293  002090  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2294  002092  0100               	movlb	0	; () banked
  2295  002094  B4D8               	btfsc	status,2,c
  2296  002096  D026               	goto	l3263
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2300                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2301  002098  0EFF               	movlw	255
  2302  00209A  0100               	movlb	0	; () banked
  2303  00209C  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2304  00209E  0EFF               	movlw	255
  2305  0020A0  0100               	movlb	0	; () banked
  2306  0020A2  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2307  0020A4  0100               	movlb	0	; () banked
  2308  0020A6  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2309  0020A8  0100               	movlb	0	; () banked
  2310  0020AA  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2311  0020AC  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2312  0020AE  0100               	movlb	0	; () banked
  2313  0020B0  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2314  0020B2  0100               	movlb	0	; () banked
  2315  0020B4  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2316  0020B6  0100               	movlb	0	; () banked
  2317  0020B8  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2318  0020BA  0100               	movlb	0	; () banked
  2319  0020BC  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2320  0020BE  0E41               	movlw	low _Nybble2MSBitNum
  2321  0020C0  0100               	movlb	0	; () banked
  2322  0020C2  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2323  0020C4  6EF6               	movwf	tblptrl,c
  2324  0020C6  0E03               	movlw	high _Nybble2MSBitNum
  2325  0020C8  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2326  0020CA  6EF7               	movwf	tblptrh,c
  2327  0020CC                     	if	0	;There are less than 3 active tblptr bytes
  2328  0020CC                     	endif
  2329  0020CC  0008               	tblrd		*
  2330  0020CE  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2331  0020D2  0100               	movlb	0	; () banked
  2332  0020D4  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2333  0020D6  0D04               	mullw	4
  2334  0020D8  50F3               	movf	prodl,w,c
  2335  0020DA  0100               	movlb	0	; () banked
  2336  0020DC  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2337  0020DE  0100               	movlb	0	; () banked
  2338  0020E0  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2339                           
  2340                           ;ES_LookupTables.c: 96: break;
  2341  0020E2  D003               	goto	l3267
  2342  0020E4                     l3263:
  2343                           
  2344                           ; BSR set to: 0
  2345  0020E4  0100               	movlb	0	; () banked
  2346  0020E6  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2347  0020E8  D7B7               	goto	l3253
  2348  0020EA                     l3267:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;ES_LookupTables.c: 97: }
  2352                           ;ES_LookupTables.c: 98: }
  2353                           ;ES_LookupTables.c: 99: return ReturnVal;
  2354  0020EA  0100               	movlb	0	; () banked
  2355  0020EC  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2356  0020EE  0012               	return	
  2357  0020F0                     __end_of_ES_GetMSBitSet:
  2358                           	opt stack 0
  2359                           tosu	equ	0xFFF
  2360                           tosh	equ	0xFFE
  2361                           tosl	equ	0xFFD
  2362                           pclath	equ	0xFFA
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1h	equ	0xFE2
  2373                           fsr1l	equ	0xFE1
  2374                           indf2	equ	0xFDF
  2375                           postinc2	equ	0xFDE
  2376                           postdec2	equ	0xFDD
  2377                           fsr2h	equ	0xFDA
  2378                           fsr2l	equ	0xFD9
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _RunPatternControlService *****************
  2382 ;; Defined at:
  2383 ;;		line 161 in file "Pattern_ControlService.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  testEvent       3   96[BANK0 ] struct ES_Event_t
  2388 ;;  ReturnEvent     3   93[BANK0 ] struct ES_Event_t
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  3   90[BANK0 ] struct ES_Event_t
  2391 ;; Registers used:
  2392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2398 ;;      Params:         0       3       0       0
  2399 ;;      Locals:         0       6       0       0
  2400 ;;      Temps:          0       0       0       0
  2401 ;;      Totals:         0       9       0       0
  2402 ;;Total ram usage:        9 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:   14
  2405 ;; This function calls:
  2406 ;;		_PausePattern
  2407 ;;		_PostPatternControlService
  2408 ;;		_ShowPattern
  2409 ;;		_StopPattern
  2410 ;; This function is called by:
  2411 ;;		_ES_Run
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text7
  2416  001CBA                     __ptext7:
  2417                           	opt stack 0
  2418  001CBA                     _RunPatternControlService:
  2419                           	opt stack 15
  2420                           
  2421                           ;Pattern_ControlService.c: 163: ES_Event ReturnEvent;
  2422                           ;Pattern_ControlService.c: 164: ReturnEvent.EventType = ES_NO_EVENT;
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;incstack = 0
  2426  001CBA  0E00               	movlw	0
  2427  001CBC  0100               	movlb	0	; () banked
  2428  001CBE  6FBD               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2429                           
  2430                           ;Pattern_ControlService.c: 166: switch(CurrentState){
  2431  001CC0  D04B               	goto	l3743
  2432  001CC2                     l3699:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;Pattern_ControlService.c: 169: if(ThisEvent.EventType == ES_INIT){
  2436  001CC2  0E02               	movlw	2
  2437  001CC4  0100               	movlb	0	; () banked
  2438  001CC6  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2439  001CC8  A4D8               	btfss	status,2,c
  2440  001CCA  D054               	goto	l352
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;Pattern_ControlService.c: 173: StopPattern();
  2444  001CCC  ECB9  F014         	call	_StopPattern	;wreg free
  2445                           
  2446                           ;Pattern_ControlService.c: 175: CurrentState = Pattern_Off;
  2447  001CD0  0E01               	movlw	1
  2448  001CD2  0100               	movlb	0	; () banked
  2449  001CD4  6FE6               	movwf	_CurrentState& (0+255),b
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;Pattern_ControlService.c: 178: ES_Event testEvent;
  2453                           ;Pattern_ControlService.c: 179: testEvent.EventType = PATTERN_START;
  2454  001CD6  0E05               	movlw	5
  2455  001CD8  0100               	movlb	0	; () banked
  2456  001CDA  6FC0               	movwf	RunPatternControlService@testEvent& (0+255),b
  2457                           
  2458                           ;Pattern_ControlService.c: 180: PostPatternControlService(testEvent);
  2459  001CDC  C0C0  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2460  001CE0  C0C1  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2461  001CE4  C0C2  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2462  001CE8  EC26  F015         	call	_PostPatternControlService	;wreg free
  2463                           
  2464                           ;Pattern_ControlService.c: 182: }
  2465                           ;Pattern_ControlService.c: 183: break;
  2466  001CEC  D043               	goto	l352
  2467  001CEE                     l3707:
  2468                           
  2469                           ;Pattern_ControlService.c: 187: if(ThisEvent.EventType == PATTERN_START){
  2470  001CEE  0E05               	movlw	5
  2471  001CF0  0100               	movlb	0	; () banked
  2472  001CF2  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2473  001CF4  A4D8               	btfss	status,2,c
  2474  001CF6  D03E               	goto	l352
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;Pattern_ControlService.c: 189: ShowPattern();
  2478  001CF8  ECCD  F014         	call	_ShowPattern	;wreg free
  2479  001CFC                     l3711:
  2480                           
  2481                           ;Pattern_ControlService.c: 191: CurrentState = Pattern_Running;
  2482  001CFC  0E02               	movlw	2
  2483  001CFE  D029               	goto	L4
  2484  001D00                     l3713:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;Pattern_ControlService.c: 197: if(ThisEvent.EventType == ES_TIMEOUT){
  2488  001D00  0E03               	movlw	3
  2489  001D02  0100               	movlb	0	; () banked
  2490  001D04  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2491  001D06  A4D8               	btfss	status,2,c
  2492  001D08  D003               	goto	l3717
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;Pattern_ControlService.c: 199: ShowPattern();
  2496  001D0A  ECCD  F014         	call	_ShowPattern	;wreg free
  2497                           
  2498                           ;Pattern_ControlService.c: 200: }
  2499  001D0E  D032               	goto	l352
  2500  001D10                     l3717:
  2501                           
  2502                           ;Pattern_ControlService.c: 202: else if(ThisEvent.EventType == PATTERN_END){
  2503  001D10  0E06               	movlw	6
  2504  001D12  0100               	movlb	0	; () banked
  2505  001D14  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2506  001D16  A4D8               	btfss	status,2,c
  2507  001D18  D003               	goto	l3723
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;Pattern_ControlService.c: 204: StopPattern();
  2511  001D1A  ECB9  F014         	call	_StopPattern	;wreg free
  2512  001D1E  D018               	goto	L22
  2513  001D20                     l3723:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;Pattern_ControlService.c: 209: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2517  001D20  0E07               	movlw	7
  2518  001D22  0100               	movlb	0	; () banked
  2519  001D24  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2520  001D26  A4D8               	btfss	status,2,c
  2521  001D28  D025               	goto	l352
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;Pattern_ControlService.c: 211: PausePattern();
  2525  001D2A  ECC1  F015         	call	_PausePattern	;wreg free
  2526                           
  2527                           ;Pattern_ControlService.c: 213: CurrentState = Pattern_Paused;
  2528  001D2E  0E03               	movlw	3
  2529  001D30  D010               	goto	L4
  2530  001D32                     l3729:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;Pattern_ControlService.c: 219: if(ThisEvent.EventType == PATTERN_START){
  2534  001D32  0E05               	movlw	5
  2535  001D34  0100               	movlb	0	; () banked
  2536  001D36  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2537  001D38  A4D8               	btfss	status,2,c
  2538  001D3A  D003               	goto	l3735
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;Pattern_ControlService.c: 221: ShowPattern();
  2542  001D3C  ECCD  F014         	call	_ShowPattern	;wreg free
  2543  001D40  D7DD               	goto	l3711
  2544  001D42                     l3735:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;Pattern_ControlService.c: 226: else if(ThisEvent.EventType == PATTERN_END){
  2548  001D42  0E06               	movlw	6
  2549  001D44  0100               	movlb	0	; () banked
  2550  001D46  19BA               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2551  001D48  A4D8               	btfss	status,2,c
  2552  001D4A  D014               	goto	l352
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;Pattern_ControlService.c: 228: StopPattern();
  2556  001D4C  ECB9  F014         	call	_StopPattern	;wreg free
  2557  001D50                     L22:
  2558                           
  2559                           ;Pattern_ControlService.c: 230: CurrentState = Pattern_Off;
  2560  001D50  0E01               	movlw	1
  2561  001D52                     L4:
  2562  001D52  0100               	movlb	0	; () banked
  2563  001D54  6FE6               	movwf	_CurrentState& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;Pattern_ControlService.c: 233: }
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;Pattern_ControlService.c: 231: }
  2570                           ;Pattern_ControlService.c: 232: break;
  2571                           
  2572                           ; BSR set to: 0
  2573  001D56  D00E               	goto	l352
  2574  001D58                     l3743:
  2575                           
  2576                           ; BSR set to: 0
  2577  001D58  0100               	movlb	0	; () banked
  2578  001D5A  51E6               	movf	_CurrentState& (0+255),w,b
  2579                           
  2580                           ; Switch size 1, requested type "space"
  2581                           ; Number of cases is 4, Range of values is 0 to 3
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte           13     7 (average)
  2585                           ;	Chosen strategy is simple_byte
  2586  001D5C  0A00               	xorlw	0	; case 0
  2587  001D5E  B4D8               	btfsc	status,2,c
  2588  001D60  D7B0               	goto	l3699
  2589  001D62  0A01               	xorlw	1	; case 1
  2590  001D64  B4D8               	btfsc	status,2,c
  2591  001D66  D7C3               	goto	l3707
  2592  001D68  0A03               	xorlw	3	; case 2
  2593  001D6A  B4D8               	btfsc	status,2,c
  2594  001D6C  D7C9               	goto	l3713
  2595  001D6E  0A01               	xorlw	1	; case 3
  2596  001D70  B4D8               	btfsc	status,2,c
  2597  001D72  D7DF               	goto	l3729
  2598  001D74                     l352:
  2599                           
  2600                           ;Pattern_ControlService.c: 234: return ReturnEvent;
  2601  001D74  C0BD  F0BA         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2602  001D78  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2603  001D7C  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2604  001D80  0012               	return		;funcret
  2605  001D82                     __end_of_RunPatternControlService:
  2606                           	opt stack 0
  2607                           tosu	equ	0xFFF
  2608                           tosh	equ	0xFFE
  2609                           tosl	equ	0xFFD
  2610                           pclath	equ	0xFFA
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           prodh	equ	0xFF4
  2616                           prodl	equ	0xFF3
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _RunSPI32ControlService *****************
  2630 ;; Defined at:
  2631 ;;		line 138 in file "SPI32_ControlService.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  ThisEvent       3   90[BANK0 ] struct ES_Event_t
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  ReturnEvent     3  100[BANK0 ] struct ES_Event_t
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  3   90[BANK0 ] struct ES_Event_t
  2638 ;; Registers used:
  2639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2645 ;;      Params:         0       3       0       0
  2646 ;;      Locals:         0       3       0       0
  2647 ;;      Temps:          0       7       0       0
  2648 ;;      Totals:         0      13       0       0
  2649 ;;Total ram usage:       13 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    8
  2652 ;; This function calls:
  2653 ;;		_GetNextFrame
  2654 ;;		_SPI32_SendFrame
  2655 ;; This function is called by:
  2656 ;;		_ES_Run
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text8
  2661  00171E                     __ptext8:
  2662                           	opt stack 0
  2663  00171E                     _RunSPI32ControlService:
  2664                           	opt stack 21
  2665                           
  2666                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2667                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2668                           
  2669                           ;incstack = 0
  2670  00171E  0E00               	movlw	0
  2671  001720  0100               	movlb	0	; () banked
  2672  001722  6FC4               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2673                           
  2674                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2675  001724  D06D               	goto	l3793
  2676  001726                     l3767:
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2680  001726  0E02               	movlw	2
  2681  001728  0100               	movlb	0	; () banked
  2682  00172A  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2683  00172C  A4D8               	btfss	status,2,c
  2684  00172E  D073               	goto	l609
  2685  001730  D063               	goto	l3789
  2686  001732                     l3771:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2690  001732  0E08               	movlw	8
  2691  001734  0100               	movlb	0	; () banked
  2692  001736  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2693  001738  A4D8               	btfss	status,2,c
  2694  00173A  D06D               	goto	l609
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2698  00173C  EC42  F015         	call	_GetNextFrame	;wreg free
  2699  001740  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2700  001744  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2701  001748  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2702  00174C  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2703                           
  2704                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2705  001750  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2706  001754  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2707  001758  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2708  00175C  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2709  001760  EC1F  F013         	call	_SPI32_SendFrame	;wreg free
  2710                           
  2711                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2712  001764  0E02               	movlw	2
  2713  001766  D049               	goto	L6
  2714  001768                     l3779:
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2718  001768  0E03               	movlw	3
  2719  00176A  0100               	movlb	0	; () banked
  2720  00176C  19BA               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2721  00176E  A4D8               	btfss	status,2,c
  2722  001770  D052               	goto	l609
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2726  001772  0EFF               	movlw	255
  2727  001774  0100               	movlb	0	; () banked
  2728  001776  6FBD               	movwf	??_RunSPI32ControlService& (0+255),b
  2729  001778  0EFF               	movlw	255
  2730  00177A  0100               	movlb	0	; () banked
  2731  00177C  6FBE               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2732  00177E  0100               	movlb	0	; () banked
  2733  001780  51EA               	movf	_NumFrames& (0+255),w,b
  2734  001782  0100               	movlb	0	; () banked
  2735  001784  6FBF               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2736  001786  6BC0               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2737  001788  0100               	movlb	0	; () banked
  2738  00178A  51BD               	movf	??_RunSPI32ControlService& (0+255),w,b
  2739  00178C  0100               	movlb	0	; () banked
  2740  00178E  27BF               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2741  001790  0100               	movlb	0	; () banked
  2742  001792  51BE               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2743  001794  0100               	movlb	0	; () banked
  2744  001796  23C0               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2745  001798  0100               	movlb	0	; () banked
  2746  00179A  2BE7               	incf	_FrameIndex& (0+255),f,b
  2747  00179C  05E7               	decf	_FrameIndex& (0+255),w,b
  2748  00179E  0100               	movlb	0	; () banked
  2749  0017A0  6FC1               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2750  0017A2  6BC2               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2751  0017A4  0100               	movlb	0	; () banked
  2752  0017A6  51BF               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2753  0017A8  0100               	movlb	0	; () banked
  2754  0017AA  5DC1               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2755  0017AC  0100               	movlb	0	; () banked
  2756  0017AE  51C2               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2757  0017B0  0A80               	xorlw	128
  2758  0017B2  0100               	movlb	0	; () banked
  2759  0017B4  6FC3               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2760  0017B6  0100               	movlb	0	; () banked
  2761  0017B8  51C0               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2762  0017BA  0A80               	xorlw	128
  2763  0017BC  0100               	movlb	0	; () banked
  2764  0017BE  59C3               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2765  0017C0  B0D8               	btfsc	status,0,c
  2766  0017C2  D01A               	goto	l3789
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;SPI32_ControlService.c: 176: FramePointer++;
  2770  0017C4  0E04               	movlw	4
  2771  0017C6  0100               	movlb	0	; () banked
  2772  0017C8  27DC               	addwf	_FramePointer& (0+255),f,b
  2773  0017CA  0E00               	movlw	0
  2774  0017CC  23DD               	addwfc	(_FramePointer+1)& (0+255),f,b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2778  0017CE  EC42  F015         	call	_GetNextFrame	;wreg free
  2779  0017D2  C060  F0CD         	movff	?_GetNextFrame,_CurrentFrame
  2780  0017D6  C061  F0CE         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2781  0017DA  C062  F0CF         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2782  0017DE  C063  F0D0         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2783                           
  2784                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2785  0017E2  C0CD  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2786  0017E6  C0CE  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2787  0017EA  C0CF  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2788  0017EE  C0D0  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2789  0017F2  EC1F  F013         	call	_SPI32_SendFrame	;wreg free
  2790                           
  2791                           ;SPI32_ControlService.c: 180: }
  2792  0017F6  D00F               	goto	l609
  2793  0017F8                     l3789:
  2794                           
  2795                           ;SPI32_ControlService.c: 182: else{
  2796                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2797  0017F8  0E01               	movlw	1
  2798  0017FA                     L6:
  2799  0017FA  0100               	movlb	0	; () banked
  2800  0017FC  6FE4               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;SPI32_ControlService.c: 235: }
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;SPI32_ControlService.c: 185: }
  2807                           ;SPI32_ControlService.c: 186: }
  2808                           ;SPI32_ControlService.c: 188: break;
  2809                           
  2810                           ; BSR set to: 0
  2811  0017FE  D00B               	goto	l609
  2812  001800                     l3793:
  2813                           
  2814                           ; BSR set to: 0
  2815  001800  0100               	movlb	0	; () banked
  2816  001802  51E4               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 3, Range of values is 0 to 2
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte           10     6 (average)
  2823                           ;	Chosen strategy is simple_byte
  2824  001804  0A00               	xorlw	0	; case 0
  2825  001806  B4D8               	btfsc	status,2,c
  2826  001808  D78E               	goto	l3767
  2827  00180A  0A01               	xorlw	1	; case 1
  2828  00180C  B4D8               	btfsc	status,2,c
  2829  00180E  D791               	goto	l3771
  2830  001810  0A03               	xorlw	3	; case 2
  2831  001812  B4D8               	btfsc	status,2,c
  2832  001814  D7A9               	goto	l3779
  2833  001816                     l609:
  2834                           
  2835                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2836  001816  C0C4  F0BA         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2837  00181A  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2838  00181E  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2839  001822  0012               	return		;funcret
  2840  001824                     __end_of_RunSPI32ControlService:
  2841                           	opt stack 0
  2842                           tosu	equ	0xFFF
  2843                           tosh	equ	0xFFE
  2844                           tosl	equ	0xFFD
  2845                           pclath	equ	0xFFA
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _SPI32_SendFrame *****************
  2865 ;; Defined at:
  2866 ;;		line 86 in file "SPI32_HW.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, prodl, prodh
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2880 ;;      Params:         0       4       0       0
  2881 ;;      Locals:         0       0       0       0
  2882 ;;      Temps:          0       4       0       0
  2883 ;;      Totals:         0       8       0       0
  2884 ;;Total ram usage:        8 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    7
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_RunSPI32ControlService
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text9
  2895  00263E                     __ptext9:
  2896                           	opt stack 0
  2897  00263E                     _SPI32_SendFrame:
  2898                           	opt stack 21
  2899                           
  2900                           ;SPI32_HW.c: 101: if(FrameByte == 4){
  2901                           
  2902                           ;incstack = 0
  2903  00263E  0E04               	movlw	4
  2904  002640  0100               	movlb	0	; () banked
  2905  002642  19F3               	xorwf	_FrameByte& (0+255),w,b
  2906  002644  A4D8               	btfss	status,2,c
  2907  002646  D008               	goto	l3581
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
  2911  002648  C060  F036         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2912  00264C  C061  F037         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2913  002650  C062  F038         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2914  002654  C063  F039         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2915  002658                     l3581:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;SPI32_HW.c: 104: }
  2919                           ;SPI32_HW.c: 106: FrameByte--;
  2920  002658  0100               	movlb	0	; () banked
  2921  00265A  07F3               	decf	_FrameByte& (0+255),f,b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  2925  00265C  0100               	movlb	0	; () banked
  2926  00265E  51F3               	movf	_FrameByte& (0+255),w,b
  2927  002660  0D08               	mullw	8
  2928  002662  50F3               	movf	prodl,w,c
  2929  002664  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  2930  002668  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  2931  00266C  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  2932  002670  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  2933  002674  0100               	movlb	0	; () banked
  2934  002676  2AE8               	incf	wreg,f,c
  2935  002678  D005               	goto	u2260
  2936  00267A                     u2265:
  2937  00267A  90D8               	bcf	status,0,c
  2938  00267C  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  2939  00267E  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  2940  002680  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  2941  002682  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  2942  002684                     u2260:
  2943  002684  2EE8               	decfsz	wreg,f,c
  2944  002686  D7F9               	goto	u2265
  2945  002688  0100               	movlb	0	; () banked
  2946  00268A  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  2947  00268C  6EC9               	movwf	4041,c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950  00268E  0012               	return		;funcret
  2951  002690                     __end_of_SPI32_SendFrame:
  2952                           	opt stack 0
  2953                           tosu	equ	0xFFF
  2954                           tosh	equ	0xFFE
  2955                           tosl	equ	0xFFD
  2956                           pclath	equ	0xFFA
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _GetNextFrame *****************
  2976 ;; Defined at:
  2977 ;;		line 258 in file "SPI32_ControlService.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  4    0[BANK0 ] unsigned long 
  2984 ;; Registers used:
  2985 ;;		fsr2l, fsr2h
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2991 ;;      Params:         0       4       0       0
  2992 ;;      Locals:         0       0       0       0
  2993 ;;      Temps:          0       0       0       0
  2994 ;;      Totals:         0       4       0       0
  2995 ;;Total ram usage:        4 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    7
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_RunSPI32ControlService
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text10
  3006  002A84                     __ptext10:
  3007                           	opt stack 0
  3008  002A84                     _GetNextFrame:
  3009                           	opt stack 21
  3010                           
  3011                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;incstack = 0
  3015  002A84  C0DC  FFD9         	movff	_FramePointer,fsr2l
  3016  002A88  C0DD  FFDA         	movff	_FramePointer+1,fsr2h
  3017  002A8C  CFDE F060          	movff	postinc2,?_GetNextFrame
  3018  002A90  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3019  002A94  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3020  002A98  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3021  002A9C  0012               	return	
  3022  002A9E                     __end_of_GetNextFrame:
  3023                           	opt stack 0
  3024                           tosu	equ	0xFFF
  3025                           tosh	equ	0xFFE
  3026                           tosl	equ	0xFFD
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1h	equ	0xFE2
  3038                           fsr1l	equ	0xFE1
  3039                           indf2	equ	0xFDF
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _StopPattern *****************
  3047 ;; Defined at:
  3048 ;;		line 300 in file "Pattern_ControlService.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3062 ;;      Params:         0       0       0       0
  3063 ;;      Locals:         0       0       0       0
  3064 ;;      Temps:          0       0       0       0
  3065 ;;      Totals:         0       0       0       0
  3066 ;;Total ram usage:        0 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:   13
  3069 ;; This function calls:
  3070 ;;		_DotStar_Show
  3071 ;;		_ES_Timer_StopTimer
  3072 ;;		_PatternOff
  3073 ;;		_ResetPattern
  3074 ;; This function is called by:
  3075 ;;		_RunPatternControlService
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text11
  3080  002972                     __ptext11:
  3081                           	opt stack 0
  3082  002972                     _StopPattern:
  3083                           	opt stack 15
  3084                           
  3085                           ;Pattern_ControlService.c: 301: PatternConfigs[0] = 0;
  3086                           
  3087                           ;incstack = 0
  3088  002972  0E00               	movlw	0
  3089  002974  0100               	movlb	0	; () banked
  3090  002976  6FF4               	movwf	_PatternConfigs& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;Pattern_ControlService.c: 303: ES_Timer_StopTimer(0);
  3094  002978  0E00               	movlw	0
  3095  00297A  EC48  F013         	call	_ES_Timer_StopTimer
  3096                           
  3097                           ;Pattern_ControlService.c: 305: DotStar_Show(PatternOff());
  3098  00297E  ECDD  F013         	call	_PatternOff	;wreg free
  3099  002982  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3100  002986  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3101  00298A  EC71  F00A         	call	_DotStar_Show	;wreg free
  3102                           
  3103                           ;Pattern_ControlService.c: 307: ResetPattern();
  3104  00298E  EC4F  F015         	call	_ResetPattern	;wreg free
  3105                           
  3106                           ;Pattern_ControlService.c: 309: PatternConfigs[0] = 0;
  3107  002992  0E00               	movlw	0
  3108  002994  0100               	movlb	0	; () banked
  3109  002996  6FF4               	movwf	_PatternConfigs& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112  002998  0012               	return		;funcret
  3113  00299A                     __end_of_StopPattern:
  3114                           	opt stack 0
  3115                           tosu	equ	0xFFF
  3116                           tosh	equ	0xFFE
  3117                           tosl	equ	0xFFD
  3118                           pclath	equ	0xFFA
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1h	equ	0xFE2
  3129                           fsr1l	equ	0xFE1
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           
  3137 ;; *************** function _ResetPattern *****************
  3138 ;; Defined at:
  3139 ;;		line 194 in file "Pattern_RGBPatterns.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3153 ;;      Params:         0       0       0       0
  3154 ;;      Locals:         0       0       0       0
  3155 ;;      Temps:          0       0       0       0
  3156 ;;      Totals:         0       0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    7
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_StopPattern
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text12
  3168  002A9E                     __ptext12:
  3169                           	opt stack 0
  3170  002A9E                     _ResetPattern:
  3171                           	opt stack 20
  3172                           
  3173                           ;Pattern_RGBPatterns.c: 196: PatternStepCounter=0;
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;incstack = 0
  3177  002A9E  0E00               	movlw	0
  3178  002AA0  0100               	movlb	0	; () banked
  3179  002AA2  6FEB               	movwf	_PatternStepCounter& (0+255),b
  3180                           
  3181                           ;Pattern_RGBPatterns.c: 198: CycleCounter = 0;
  3182  002AA4  0E00               	movlw	0
  3183  002AA6  0100               	movlb	0	; () banked
  3184  002AA8  6FD1               	movwf	_CycleCounter& (0+255),b
  3185  002AAA  0E00               	movlw	0
  3186  002AAC  6FD2               	movwf	(_CycleCounter+1)& (0+255),b
  3187  002AAE  0E00               	movlw	0
  3188  002AB0  6FD3               	movwf	(_CycleCounter+2)& (0+255),b
  3189  002AB2  0E00               	movlw	0
  3190  002AB4  6FD4               	movwf	(_CycleCounter+3)& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193  002AB6  0012               	return		;funcret
  3194  002AB8                     __end_of_ResetPattern:
  3195                           	opt stack 0
  3196                           tosu	equ	0xFFF
  3197                           tosh	equ	0xFFE
  3198                           tosl	equ	0xFFD
  3199                           pclath	equ	0xFFA
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           postdec1	equ	0xFE5
  3209                           fsr1h	equ	0xFE2
  3210                           fsr1l	equ	0xFE1
  3211                           indf2	equ	0xFDF
  3212                           postinc2	equ	0xFDE
  3213                           postdec2	equ	0xFDD
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _PatternOff *****************
  3219 ;; Defined at:
  3220 ;;		line 86 in file "Pattern_RGBPatterns.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  i               1    2[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  2    0[BANK0 ] PTR unsigned int 
  3227 ;; Registers used:
  3228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3234 ;;      Params:         0       2       0       0
  3235 ;;      Locals:         0       1       0       0
  3236 ;;      Temps:          0       0       0       0
  3237 ;;      Totals:         0       3       0       0
  3238 ;;Total ram usage:        3 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    7
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_StopPattern
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text13
  3249  0027BA                     __ptext13:
  3250                           	opt stack 0
  3251  0027BA                     _PatternOff:
  3252                           	opt stack 20
  3253                           
  3254                           ;Pattern_RGBPatterns.c: 87: for(uint8_t i=0;i<Length;i++){
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;incstack = 0
  3258  0027BA  0E00               	movlw	0
  3259  0027BC  0100               	movlb	0	; () banked
  3260  0027BE  6F62               	movwf	PatternOff@i& (0+255),b
  3261  0027C0  D00F               	goto	l3381
  3262  0027C2                     l3377:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;Pattern_RGBPatterns.c: 88: PixelPattern[i] = 0x0;
  3266  0027C2  0100               	movlb	0	; () banked
  3267  0027C4  5162               	movf	PatternOff@i& (0+255),w,b
  3268  0027C6  0D02               	mullw	2
  3269  0027C8  0E20               	movlw	low _PixelPattern
  3270  0027CA  24F3               	addwf	prodl,w,c
  3271  0027CC  6ED9               	movwf	fsr2l,c
  3272  0027CE  0E01               	movlw	high _PixelPattern
  3273  0027D0  20F4               	addwfc	prodh,w,c
  3274  0027D2  6EDA               	movwf	fsr2h,c
  3275  0027D4  0E00               	movlw	0
  3276  0027D6  6EDE               	movwf	postinc2,c
  3277  0027D8  0E00               	movlw	0
  3278  0027DA  6EDD               	movwf	postdec2,c
  3279                           
  3280                           ; BSR set to: 0
  3281  0027DC  0100               	movlb	0	; () banked
  3282  0027DE  2B62               	incf	PatternOff@i& (0+255),f,b
  3283  0027E0                     l3381:
  3284                           
  3285                           ; BSR set to: 0
  3286  0027E0  0100               	movlb	0	; () banked
  3287  0027E2  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3288  0027E4  0100               	movlb	0	; () banked
  3289  0027E6  5D62               	subwf	PatternOff@i& (0+255),w,b
  3290  0027E8  A0D8               	btfss	status,0,c
  3291  0027EA  D7EB               	goto	l3377
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;Pattern_RGBPatterns.c: 89: }
  3295                           ;Pattern_RGBPatterns.c: 90: return PixelPattern;
  3296                           
  3297                           ; BSR set to: 0
  3298  0027EC  0E20               	movlw	low _PixelPattern
  3299  0027EE  0100               	movlb	0	; () banked
  3300  0027F0  6F60               	movwf	?_PatternOff& (0+255),b
  3301  0027F2  0E01               	movlw	high _PixelPattern
  3302  0027F4  0100               	movlb	0	; () banked
  3303  0027F6  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3304  0027F8  0012               	return	
  3305  0027FA                     __end_of_PatternOff:
  3306                           	opt stack 0
  3307                           tosu	equ	0xFFF
  3308                           tosh	equ	0xFFE
  3309                           tosl	equ	0xFFD
  3310                           pclath	equ	0xFFA
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1h	equ	0xFE2
  3321                           fsr1l	equ	0xFE1
  3322                           indf2	equ	0xFDF
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _ShowPattern *****************
  3330 ;; Defined at:
  3331 ;;		line 290 in file "Pattern_ControlService.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3345 ;;      Params:         0       0       0       0
  3346 ;;      Locals:         0       0       0       0
  3347 ;;      Temps:          0       0       0       0
  3348 ;;      Totals:         0       0       0       0
  3349 ;;Total ram usage:        0 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:   13
  3352 ;; This function calls:
  3353 ;;		_DotStar_Show
  3354 ;;		_ES_Timer_InitTimer
  3355 ;;		_UpdatePattern
  3356 ;; This function is called by:
  3357 ;;		_RunPatternControlService
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text14
  3362  00299A                     __ptext14:
  3363                           	opt stack 0
  3364  00299A                     _ShowPattern:
  3365                           	opt stack 15
  3366                           
  3367                           ;Pattern_ControlService.c: 292: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;incstack = 0
  3371  00299A  C0F8  F060         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3372  00299E  0100               	movlb	0	; () banked
  3373  0029A0  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3374  0029A2  0E00               	movlw	0
  3375  0029A4  EC51  F011         	call	_ES_Timer_InitTimer
  3376                           
  3377                           ;Pattern_ControlService.c: 294: DotStar_Show(UpdatePattern());
  3378  0029A8  EC6A  F005         	call	_UpdatePattern	;wreg free
  3379  0029AC  C082  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3380  0029B0  C083  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3381  0029B4  EC71  F00A         	call	_DotStar_Show	;wreg free
  3382                           
  3383                           ;Pattern_ControlService.c: 296: PatternConfigs[0] = 1;
  3384  0029B8  0E01               	movlw	1
  3385  0029BA  0100               	movlb	0	; () banked
  3386  0029BC  6FF4               	movwf	_PatternConfigs& (0+255),b
  3387                           
  3388                           ; BSR set to: 0
  3389  0029BE  0012               	return		;funcret
  3390  0029C0                     __end_of_ShowPattern:
  3391                           	opt stack 0
  3392                           tosu	equ	0xFFF
  3393                           tosh	equ	0xFFE
  3394                           tosl	equ	0xFFD
  3395                           pclath	equ	0xFFA
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           postdec1	equ	0xFE5
  3405                           fsr1h	equ	0xFE2
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _UpdatePattern *****************
  3415 ;; Defined at:
  3416 ;;		line 94 in file "Pattern_RGBPatterns.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  i               1   41[BANK0 ] unsigned char 
  3421 ;;  i               1   40[BANK0 ] unsigned char 
  3422 ;;  i               1   39[BANK0 ] unsigned char 
  3423 ;;  i               1   38[BANK0 ] unsigned char 
  3424 ;;  i               1   37[BANK0 ] unsigned char 
  3425 ;;  patternID       1   36[BANK0 ] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  2   34[BANK0 ] PTR unsigned int 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3435 ;;      Params:         0       2       0       0
  3436 ;;      Locals:         0       6       0       0
  3437 ;;      Temps:          0       0       0       0
  3438 ;;      Totals:         0       8       0       0
  3439 ;;Total ram usage:        8 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    9
  3442 ;; This function calls:
  3443 ;;		_GetListLoc
  3444 ;;		_IdlePattern
  3445 ;;		_ListeningPattern
  3446 ;;		_SpeakingPattern
  3447 ;;		_ThinkingPattern
  3448 ;;		_WelcomePattern
  3449 ;;		___awmod
  3450 ;;		___lwdiv
  3451 ;;		___wmul
  3452 ;; This function is called by:
  3453 ;;		_ShowPattern
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text15
  3458  000AD4                     __ptext15:
  3459                           	opt stack 0
  3460  000AD4                     _UpdatePattern:
  3461                           	opt stack 18
  3462                           
  3463                           ;Pattern_RGBPatterns.c: 96: uint8_t patternID = PatternConfigs[1];
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;incstack = 0
  3467  000AD4  0100               	movlb	0	; () banked
  3468  000AD6  EE20 F001          	lfsr	2,1
  3469  000ADA  51DA               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3470  000ADC  26D9               	addwf	fsr2l,f,c
  3471  000ADE  51DB               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3472  000AE0  22DA               	addwfc	fsr2h,f,c
  3473  000AE2  50DF               	movf	indf2,w,c
  3474  000AE4  0100               	movlb	0	; () banked
  3475  000AE6  6F84               	movwf	UpdatePattern@patternID& (0+255),b
  3476                           
  3477                           ;Pattern_RGBPatterns.c: 99: switch(patternID){
  3478  000AE8  D10D               	goto	l3357
  3479  000AEA                     l3303:
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;Pattern_RGBPatterns.c: 102: for(uint8_t i=0;i<Length;i++){
  3483  000AEA  0E00               	movlw	0
  3484  000AEC  0100               	movlb	0	; () banked
  3485  000AEE  6F85               	movwf	UpdatePattern@i& (0+255),b
  3486  000AF0  D00F               	goto	l3309
  3487  000AF2                     l3305:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;Pattern_RGBPatterns.c: 103: PixelPattern[i] = 0x0;
  3491  000AF2  0100               	movlb	0	; () banked
  3492  000AF4  5185               	movf	UpdatePattern@i& (0+255),w,b
  3493  000AF6  0D02               	mullw	2
  3494  000AF8  0E20               	movlw	low _PixelPattern
  3495  000AFA  24F3               	addwf	prodl,w,c
  3496  000AFC  6ED9               	movwf	fsr2l,c
  3497  000AFE  0E01               	movlw	high _PixelPattern
  3498  000B00  20F4               	addwfc	prodh,w,c
  3499  000B02  6EDA               	movwf	fsr2h,c
  3500  000B04  0E00               	movlw	0
  3501  000B06  6EDE               	movwf	postinc2,c
  3502  000B08  0E00               	movlw	0
  3503  000B0A  6EDD               	movwf	postdec2,c
  3504                           
  3505                           ; BSR set to: 0
  3506  000B0C  0100               	movlb	0	; () banked
  3507  000B0E  2B85               	incf	UpdatePattern@i& (0+255),f,b
  3508  000B10                     l3309:
  3509                           
  3510                           ; BSR set to: 0
  3511  000B10  0100               	movlb	0	; () banked
  3512  000B12  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3513  000B14  0100               	movlb	0	; () banked
  3514  000B16  5D85               	subwf	UpdatePattern@i& (0+255),w,b
  3515  000B18  B0D8               	btfsc	status,0,c
  3516  000B1A  D10B               	goto	l3359
  3517  000B1C  D7EA               	goto	l3305
  3518  000B1E                     l3311:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;Pattern_RGBPatterns.c: 108: WelcomePattern(5);
  3522  000B1E  0E05               	movlw	5
  3523  000B20  EC12  F00C         	call	_WelcomePattern
  3524                           
  3525                           ;Pattern_RGBPatterns.c: 109: break;
  3526  000B24  D106               	goto	l3359
  3527  000B26                     l3313:
  3528                           
  3529                           ;Pattern_RGBPatterns.c: 112: IdlePattern(6);
  3530  000B26  0E06               	movlw	6
  3531  000B28  EC0B  F004         	call	_IdlePattern
  3532                           
  3533                           ;Pattern_RGBPatterns.c: 113: break;
  3534  000B2C  D102               	goto	l3359
  3535  000B2E                     l3315:
  3536                           
  3537                           ;Pattern_RGBPatterns.c: 116: for(uint8_t i=0;i<Length;i++){
  3538  000B2E  0E00               	movlw	0
  3539  000B30  0100               	movlb	0	; () banked
  3540  000B32  6F86               	movwf	UpdatePattern@i_704& (0+255),b
  3541  000B34  D018               	goto	l3321
  3542  000B36                     l3317:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;Pattern_RGBPatterns.c: 117: PixelPattern[i] = ThinkingPattern(1,i,PatternStepCounter);
  3546  000B36  C086  F068         	movff	UpdatePattern@i_704,ThinkingPattern@pixel
  3547  000B3A  C0EB  F069         	movff	_PatternStepCounter,ThinkingPattern@stepCount
  3548  000B3E  0E01               	movlw	1
  3549  000B40  ECBB  F007         	call	_ThinkingPattern
  3550  000B44  0100               	movlb	0	; () banked
  3551  000B46  5186               	movf	UpdatePattern@i_704& (0+255),w,b
  3552  000B48  0D02               	mullw	2
  3553  000B4A  0E20               	movlw	low _PixelPattern
  3554  000B4C  24F3               	addwf	prodl,w,c
  3555  000B4E  6ED9               	movwf	fsr2l,c
  3556  000B50  0E01               	movlw	high _PixelPattern
  3557  000B52  20F4               	addwfc	prodh,w,c
  3558  000B54  6EDA               	movwf	fsr2h,c
  3559  000B56  0100               	movlb	0	; () banked
  3560  000B58  C068  FFDE         	movff	?_ThinkingPattern,postinc2
  3561  000B5C  0100               	movlb	0	; () banked
  3562  000B5E  C069  FFDD         	movff	?_ThinkingPattern+1,postdec2
  3563                           
  3564                           ; BSR set to: 0
  3565  000B62  0100               	movlb	0	; () banked
  3566  000B64  2B86               	incf	UpdatePattern@i_704& (0+255),f,b
  3567  000B66                     l3321:
  3568                           
  3569                           ; BSR set to: 0
  3570  000B66  0100               	movlb	0	; () banked
  3571  000B68  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3572  000B6A  0100               	movlb	0	; () banked
  3573  000B6C  5D86               	subwf	UpdatePattern@i_704& (0+255),w,b
  3574  000B6E  A0D8               	btfss	status,0,c
  3575  000B70  D7E2               	goto	l3317
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;Pattern_RGBPatterns.c: 118: }
  3579                           ;Pattern_RGBPatterns.c: 119: PatternStepCounter = (PatternStepCounter+1)%Length;
  3580                           
  3581                           ; BSR set to: 0
  3582  000B72  0E01               	movlw	1
  3583  000B74  0100               	movlb	0	; () banked
  3584  000B76  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  3585  000B78  0100               	movlb	0	; () banked
  3586  000B7A  6F60               	movwf	___awmod@dividend& (0+255),b
  3587  000B7C  0100               	movlb	0	; () banked
  3588  000B7E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3589  000B80  0E00               	movlw	0
  3590  000B82  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3591  000B84  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3592  000B88  0100               	movlb	0	; () banked
  3593  000B8A  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3594  000B8C  EC78  F010         	call	___awmod	;wreg free
  3595  000B90  D0B4               	goto	L9
  3596  000B92                     l3325:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;Pattern_RGBPatterns.c: 123: for(uint8_t i=0;i<Length;i++){
  3600  000B92  0E00               	movlw	0
  3601  000B94  0100               	movlb	0	; () banked
  3602  000B96  6F87               	movwf	UpdatePattern@i_705& (0+255),b
  3603  000B98  D018               	goto	l3331
  3604  000B9A                     l3327:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Pattern_RGBPatterns.c: 124: PixelPattern[i] = SpeakingPattern(1,i,PatternStepCounter);
  3608  000B9A  C087  F068         	movff	UpdatePattern@i_705,SpeakingPattern@pixel
  3609  000B9E  C0EB  F069         	movff	_PatternStepCounter,SpeakingPattern@stepCount
  3610  000BA2  0E01               	movlw	1
  3611  000BA4  ECCC  F008         	call	_SpeakingPattern
  3612  000BA8  0100               	movlb	0	; () banked
  3613  000BAA  5187               	movf	UpdatePattern@i_705& (0+255),w,b
  3614  000BAC  0D02               	mullw	2
  3615  000BAE  0E20               	movlw	low _PixelPattern
  3616  000BB0  24F3               	addwf	prodl,w,c
  3617  000BB2  6ED9               	movwf	fsr2l,c
  3618  000BB4  0E01               	movlw	high _PixelPattern
  3619  000BB6  20F4               	addwfc	prodh,w,c
  3620  000BB8  6EDA               	movwf	fsr2h,c
  3621  000BBA  0100               	movlb	0	; () banked
  3622  000BBC  C068  FFDE         	movff	?_SpeakingPattern,postinc2
  3623  000BC0  0100               	movlb	0	; () banked
  3624  000BC2  C069  FFDD         	movff	?_SpeakingPattern+1,postdec2
  3625                           
  3626                           ; BSR set to: 0
  3627  000BC6  0100               	movlb	0	; () banked
  3628  000BC8  2B87               	incf	UpdatePattern@i_705& (0+255),f,b
  3629  000BCA                     l3331:
  3630                           
  3631                           ; BSR set to: 0
  3632  000BCA  0100               	movlb	0	; () banked
  3633  000BCC  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3634  000BCE  0100               	movlb	0	; () banked
  3635  000BD0  5D87               	subwf	UpdatePattern@i_705& (0+255),w,b
  3636  000BD2  A0D8               	btfss	status,0,c
  3637  000BD4  D7E2               	goto	l3327
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;Pattern_RGBPatterns.c: 125: }
  3641                           ;Pattern_RGBPatterns.c: 126: PatternStepCounter = (PatternStepCounter+1)%Length;
  3642                           
  3643                           ; BSR set to: 0
  3644  000BD6  0E01               	movlw	1
  3645  000BD8  0100               	movlb	0	; () banked
  3646  000BDA  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  3647  000BDC  0100               	movlb	0	; () banked
  3648  000BDE  6F60               	movwf	___awmod@dividend& (0+255),b
  3649  000BE0  0100               	movlb	0	; () banked
  3650  000BE2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3651  000BE4  0E00               	movlw	0
  3652  000BE6  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3653  000BE8  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3654  000BEC  0100               	movlb	0	; () banked
  3655  000BEE  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3656  000BF0  EC78  F010         	call	___awmod	;wreg free
  3657  000BF4  D082               	goto	L9
  3658  000BF6                     l3335:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;Pattern_RGBPatterns.c: 131: for(uint8_t i=0;i<Length;i++){
  3662  000BF6  0E00               	movlw	0
  3663  000BF8  0100               	movlb	0	; () banked
  3664  000BFA  6F88               	movwf	UpdatePattern@i_706& (0+255),b
  3665  000BFC  D019               	goto	l3341
  3666  000BFE                     l3337:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;Pattern_RGBPatterns.c: 132: PixelPattern[i] = ListeningPattern(GetListLoc(),i,PatternSt
      +                          epCounter);
  3670  000BFE  C088  F068         	movff	UpdatePattern@i_706,ListeningPattern@pixel
  3671  000C02  C0EB  F069         	movff	_PatternStepCounter,ListeningPattern@stepCount
  3672  000C06  ECCB  F015         	call	_GetListLoc	;wreg free
  3673  000C0A  ECA0  F006         	call	_ListeningPattern
  3674  000C0E  0100               	movlb	0	; () banked
  3675  000C10  5188               	movf	UpdatePattern@i_706& (0+255),w,b
  3676  000C12  0D02               	mullw	2
  3677  000C14  0E20               	movlw	low _PixelPattern
  3678  000C16  24F3               	addwf	prodl,w,c
  3679  000C18  6ED9               	movwf	fsr2l,c
  3680  000C1A  0E01               	movlw	high _PixelPattern
  3681  000C1C  20F4               	addwfc	prodh,w,c
  3682  000C1E  6EDA               	movwf	fsr2h,c
  3683  000C20  0100               	movlb	0	; () banked
  3684  000C22  C068  FFDE         	movff	?_ListeningPattern,postinc2
  3685  000C26  0100               	movlb	0	; () banked
  3686  000C28  C069  FFDD         	movff	?_ListeningPattern+1,postdec2
  3687                           
  3688                           ; BSR set to: 0
  3689  000C2C  0100               	movlb	0	; () banked
  3690  000C2E  2B88               	incf	UpdatePattern@i_706& (0+255),f,b
  3691  000C30                     l3341:
  3692                           
  3693                           ; BSR set to: 0
  3694  000C30  0100               	movlb	0	; () banked
  3695  000C32  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3696  000C34  0100               	movlb	0	; () banked
  3697  000C36  5D88               	subwf	UpdatePattern@i_706& (0+255),w,b
  3698  000C38  A0D8               	btfss	status,0,c
  3699  000C3A  D7E1               	goto	l3337
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;Pattern_RGBPatterns.c: 133: }
  3703                           ;Pattern_RGBPatterns.c: 134: PatternStepCounter = (PatternStepCounter+1)%Length;
  3704                           
  3705                           ; BSR set to: 0
  3706  000C3C  0E01               	movlw	1
  3707  000C3E  0100               	movlb	0	; () banked
  3708  000C40  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  3709  000C42  0100               	movlb	0	; () banked
  3710  000C44  6F60               	movwf	___awmod@dividend& (0+255),b
  3711  000C46  0100               	movlb	0	; () banked
  3712  000C48  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3713  000C4A  0E00               	movlw	0
  3714  000C4C  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3715  000C4E  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3716  000C52  0100               	movlb	0	; () banked
  3717  000C54  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3718  000C56  EC78  F010         	call	___awmod	;wreg free
  3719  000C5A  D04F               	goto	L9
  3720  000C5C                     l3345:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Pattern_RGBPatterns.c: 139: {
  3724                           ;Pattern_RGBPatterns.c: 181: for(uint8_t i=0;i<Length;i++){
  3725  000C5C  0E00               	movlw	0
  3726  000C5E  0100               	movlb	0	; () banked
  3727  000C60  6F89               	movwf	UpdatePattern@i_708& (0+255),b
  3728  000C62  D036               	goto	l3351
  3729  000C64                     l3347:
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;Pattern_RGBPatterns.c: 182: PixelPattern[i] = (((uint16_t)(i+PatternStepCounter)*255/Le
      +                          ngth)<<8) | (0x0F<<4) | 0x0F;
  3733  000C64  0100               	movlb	0	; () banked
  3734  000C66  5189               	movf	UpdatePattern@i_708& (0+255),w,b
  3735  000C68  0100               	movlb	0	; () banked
  3736  000C6A  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  3737  000C6C  0100               	movlb	0	; () banked
  3738  000C6E  6F66               	movwf	___wmul@multiplier& (0+255),b
  3739  000C70  0100               	movlb	0	; () banked
  3740  000C72  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  3741  000C74  0100               	movlb	0	; () banked
  3742  000C76  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  3743  000C78  0E00               	movlw	0
  3744  000C7A  0100               	movlb	0	; () banked
  3745  000C7C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3746  000C7E  6968               	setf	___wmul@multiplicand& (0+255),b
  3747  000C80  EC55  F014         	call	___wmul	;wreg free
  3748  000C84  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  3749  000C88  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  3750  000C8C  C0E3  F06E         	movff	Pattern_RGBPatterns@Length,___lwdiv@divisor
  3751  000C90  0100               	movlb	0	; () banked
  3752  000C92  6B6F               	clrf	(___lwdiv@divisor+1)& (0+255),b
  3753  000C94  EC0E  F012         	call	___lwdiv	;wreg free
  3754  000C98  0100               	movlb	0	; () banked
  3755  000C9A  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  3756  000C9E  0100               	movlb	0	; () banked
  3757  000CA0  6B6C               	clrf	?___lwdiv& (0+255),b
  3758  000CA2  0EFF               	movlw	255
  3759  000CA4  0100               	movlb	0	; () banked
  3760  000CA6  136C               	iorwf	?___lwdiv& (0+255),f,b
  3761  000CA8  0E00               	movlw	0
  3762  000CAA  0100               	movlb	0	; () banked
  3763  000CAC  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  3764  000CAE  0100               	movlb	0	; () banked
  3765  000CB0  5189               	movf	UpdatePattern@i_708& (0+255),w,b
  3766  000CB2  0D02               	mullw	2
  3767  000CB4  0E20               	movlw	low _PixelPattern
  3768  000CB6  24F3               	addwf	prodl,w,c
  3769  000CB8  6ED9               	movwf	fsr2l,c
  3770  000CBA  0E01               	movlw	high _PixelPattern
  3771  000CBC  20F4               	addwfc	prodh,w,c
  3772  000CBE  6EDA               	movwf	fsr2h,c
  3773  000CC0  0100               	movlb	0	; () banked
  3774  000CC2  C06C  FFDE         	movff	?___lwdiv,postinc2
  3775  000CC6  0100               	movlb	0	; () banked
  3776  000CC8  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  3777                           
  3778                           ; BSR set to: 0
  3779  000CCC  0100               	movlb	0	; () banked
  3780  000CCE  2B89               	incf	UpdatePattern@i_708& (0+255),f,b
  3781  000CD0                     l3351:
  3782                           
  3783                           ; BSR set to: 0
  3784  000CD0  0100               	movlb	0	; () banked
  3785  000CD2  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3786  000CD4  0100               	movlb	0	; () banked
  3787  000CD6  5D89               	subwf	UpdatePattern@i_708& (0+255),w,b
  3788  000CD8  A0D8               	btfss	status,0,c
  3789  000CDA  D7C4               	goto	l3347
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;Pattern_RGBPatterns.c: 183: }
  3793                           ;Pattern_RGBPatterns.c: 184: PatternStepCounter = (PatternStepCounter+1)%Length;
  3794                           
  3795                           ; BSR set to: 0
  3796  000CDC  0E01               	movlw	1
  3797  000CDE  0100               	movlb	0	; () banked
  3798  000CE0  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  3799  000CE2  0100               	movlb	0	; () banked
  3800  000CE4  6F60               	movwf	___awmod@dividend& (0+255),b
  3801  000CE6  0100               	movlb	0	; () banked
  3802  000CE8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3803  000CEA  0E00               	movlw	0
  3804  000CEC  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3805  000CEE  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3806  000CF2  0100               	movlb	0	; () banked
  3807  000CF4  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  3808  000CF6  EC78  F010         	call	___awmod	;wreg free
  3809  000CFA                     L9:
  3810  000CFA  0100               	movlb	0	; () banked
  3811  000CFC  5160               	movf	?___awmod& (0+255),w,b
  3812  000CFE  0100               	movlb	0	; () banked
  3813  000D00  6FEB               	movwf	_PatternStepCounter& (0+255),b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;Pattern_RGBPatterns.c: 189: }
  3817                           
  3818                           ;Pattern_RGBPatterns.c: 186: }
  3819                           ;Pattern_RGBPatterns.c: 187: break;
  3820  000D02  D017               	goto	l3359
  3821  000D04                     l3357:
  3822                           
  3823                           ; BSR set to: 0
  3824  000D04  0100               	movlb	0	; () banked
  3825  000D06  5184               	movf	UpdatePattern@patternID& (0+255),w,b
  3826                           
  3827                           ; Switch size 1, requested type "space"
  3828                           ; Number of cases is 7, Range of values is 0 to 255
  3829                           ; switch strategies available:
  3830                           ; Name         Instructions Cycles
  3831                           ; simple_byte           22    12 (average)
  3832                           ;	Chosen strategy is simple_byte
  3833  000D08  0A00               	xorlw	0	; case 0
  3834  000D0A  B4D8               	btfsc	status,2,c
  3835  000D0C  D6EE               	goto	l3303
  3836  000D0E  0A01               	xorlw	1	; case 1
  3837  000D10  B4D8               	btfsc	status,2,c
  3838  000D12  D705               	goto	l3311
  3839  000D14  0A03               	xorlw	3	; case 2
  3840  000D16  B4D8               	btfsc	status,2,c
  3841  000D18  D706               	goto	l3313
  3842  000D1A  0A01               	xorlw	1	; case 3
  3843  000D1C  B4D8               	btfsc	status,2,c
  3844  000D1E  D76B               	goto	l3335
  3845  000D20  0A07               	xorlw	7	; case 4
  3846  000D22  B4D8               	btfsc	status,2,c
  3847  000D24  D704               	goto	l3315
  3848  000D26  0A01               	xorlw	1	; case 5
  3849  000D28  B4D8               	btfsc	status,2,c
  3850  000D2A  D733               	goto	l3325
  3851  000D2C  0AFA               	xorlw	250	; case 255
  3852  000D2E  B4D8               	btfsc	status,2,c
  3853  000D30  D795               	goto	l3345
  3854  000D32                     l3359:
  3855                           
  3856                           ;Pattern_RGBPatterns.c: 191: return PixelPattern;
  3857  000D32  0E20               	movlw	low _PixelPattern
  3858  000D34  0100               	movlb	0	; () banked
  3859  000D36  6F82               	movwf	?_UpdatePattern& (0+255),b
  3860  000D38  0E01               	movlw	high _PixelPattern
  3861  000D3A  0100               	movlb	0	; () banked
  3862  000D3C  6F83               	movwf	(?_UpdatePattern+1)& (0+255),b
  3863  000D3E  0012               	return	
  3864  000D40                     __end_of_UpdatePattern:
  3865                           	opt stack 0
  3866                           tosu	equ	0xFFF
  3867                           tosh	equ	0xFFE
  3868                           tosl	equ	0xFFD
  3869                           pclath	equ	0xFFA
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           postinc0	equ	0xFEE
  3877                           wreg	equ	0xFE8
  3878                           postdec1	equ	0xFE5
  3879                           fsr1h	equ	0xFE2
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _WelcomePattern *****************
  3889 ;; Defined at:
  3890 ;;		line 201 in file "Pattern_RGBPatterns.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  pattern         1    wreg     unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  pattern         1    0[COMRAM] unsigned char 
  3895 ;;  i               1    9[BANK0 ] unsigned char 
  3896 ;;  hue             1    8[BANK0 ] unsigned char 
  3897 ;;  val             1    7[BANK0 ] unsigned char 
  3898 ;;  sat             1    6[BANK0 ] unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3908 ;;      Params:         0       0       0       0
  3909 ;;      Locals:         0       6       0       0
  3910 ;;      Temps:          0       4       0       0
  3911 ;;      Totals:         0      10       0       0
  3912 ;;Total ram usage:       10 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    7
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_UpdatePattern
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           	psect	text16
  3923  001824                     __ptext16:
  3924                           	opt stack 0
  3925  001824                     _WelcomePattern:
  3926                           	opt stack 19
  3927                           
  3928                           ;Pattern_RGBPatterns.c: 202: static bool rising = 1;
  3929                           ;Pattern_RGBPatterns.c: 203: uint8_t sat, val, hue;
  3930                           ;Pattern_RGBPatterns.c: 205: hue = 135;
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;incstack = 0
  3934  001824  0E87               	movlw	135
  3935  001826  0100               	movlb	0	; () banked
  3936  001828  6F68               	movwf	WelcomePattern@hue& (0+255),b
  3937                           
  3938                           ;Pattern_RGBPatterns.c: 206: sat = 4;
  3939  00182A  0E04               	movlw	4
  3940  00182C  0100               	movlb	0	; () banked
  3941  00182E  6F66               	movwf	WelcomePattern@sat& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;Pattern_RGBPatterns.c: 211: val = (PatternStepCounter>>4);
  3945                           
  3946                           ; BSR set to: 0
  3947                           
  3948                           ;Pattern_RGBPatterns.c: 209: default:
  3949                           
  3950                           ;Pattern_RGBPatterns.c: 208: switch(pattern){
  3951  001830  0100               	movlb	0	; () banked
  3952  001832  39EB               	swapf	_PatternStepCounter& (0+255),w,b
  3953  001834  0B0F               	andlw	15
  3954  001836  0100               	movlb	0	; () banked
  3955  001838  6F67               	movwf	WelcomePattern@val& (0+255),b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;Pattern_RGBPatterns.c: 212: for(uint8_t i=0;i<Length;i++){
  3959  00183A  0E00               	movlw	0
  3960  00183C  0100               	movlb	0	; () banked
  3961  00183E  6F69               	movwf	WelcomePattern@i& (0+255),b
  3962  001840  D031               	goto	l3071
  3963  001842                     l3067:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;Pattern_RGBPatterns.c: 213: PixelPattern[i] = ((uint16_t)hue<<8) | (sat<<4) | val;
  3967  001842  0100               	movlb	0	; () banked
  3968  001844  5166               	movf	WelcomePattern@sat& (0+255),w,b
  3969  001846  0100               	movlb	0	; () banked
  3970  001848  6F60               	movwf	??_WelcomePattern& (0+255),b
  3971  00184A  6B61               	clrf	(??_WelcomePattern+1)& (0+255),b
  3972  00184C  0100               	movlb	0	; () banked
  3973  00184E  3B60               	swapf	??_WelcomePattern& (0+255),f,b
  3974  001850  3B61               	swapf	(??_WelcomePattern+1)& (0+255),f,b
  3975  001852  0EF0               	movlw	240
  3976  001854  1761               	andwf	(??_WelcomePattern+1)& (0+255),f,b
  3977  001856  5160               	movf	??_WelcomePattern& (0+255),w,b
  3978  001858  0B0F               	andlw	15
  3979  00185A  1361               	iorwf	(??_WelcomePattern+1)& (0+255),f,b
  3980  00185C  0EF0               	movlw	240
  3981  00185E  1760               	andwf	??_WelcomePattern& (0+255),f,b
  3982  001860  0100               	movlb	0	; () banked
  3983  001862  5168               	movf	WelcomePattern@hue& (0+255),w,b
  3984  001864  0100               	movlb	0	; () banked
  3985  001866  6F63               	movwf	(??_WelcomePattern+3)& (0+255),b
  3986  001868  6B62               	clrf	(??_WelcomePattern+2)& (0+255),b
  3987  00186A  0100               	movlb	0	; () banked
  3988  00186C  5160               	movf	??_WelcomePattern& (0+255),w,b
  3989  00186E  0100               	movlb	0	; () banked
  3990  001870  1362               	iorwf	(??_WelcomePattern+2)& (0+255),f,b
  3991  001872  0100               	movlb	0	; () banked
  3992  001874  5161               	movf	(??_WelcomePattern+1)& (0+255),w,b
  3993  001876  0100               	movlb	0	; () banked
  3994  001878  1363               	iorwf	(??_WelcomePattern+3)& (0+255),f,b
  3995  00187A  0100               	movlb	0	; () banked
  3996  00187C  5167               	movf	WelcomePattern@val& (0+255),w,b
  3997  00187E  0100               	movlb	0	; () banked
  3998  001880  1362               	iorwf	(??_WelcomePattern+2)& (0+255),f,b
  3999  001882  0E00               	movlw	0
  4000  001884  1363               	iorwf	(??_WelcomePattern+3)& (0+255),f,b
  4001  001886  0100               	movlb	0	; () banked
  4002  001888  5169               	movf	WelcomePattern@i& (0+255),w,b
  4003  00188A  0D02               	mullw	2
  4004  00188C  0E20               	movlw	low _PixelPattern
  4005  00188E  24F3               	addwf	prodl,w,c
  4006  001890  6ED9               	movwf	fsr2l,c
  4007  001892  0E01               	movlw	high _PixelPattern
  4008  001894  20F4               	addwfc	prodh,w,c
  4009  001896  6EDA               	movwf	fsr2h,c
  4010  001898  C062  FFDE         	movff	??_WelcomePattern+2,postinc2
  4011  00189C  C063  FFDD         	movff	??_WelcomePattern+3,postdec2
  4012                           
  4013                           ; BSR set to: 0
  4014  0018A0  0100               	movlb	0	; () banked
  4015  0018A2  2B69               	incf	WelcomePattern@i& (0+255),f,b
  4016  0018A4                     l3071:
  4017                           
  4018                           ; BSR set to: 0
  4019  0018A4  0100               	movlb	0	; () banked
  4020  0018A6  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  4021  0018A8  0100               	movlb	0	; () banked
  4022  0018AA  5D69               	subwf	WelcomePattern@i& (0+255),w,b
  4023  0018AC  A0D8               	btfss	status,0,c
  4024  0018AE  D7C9               	goto	l3067
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;Pattern_RGBPatterns.c: 214: }
  4028                           ;Pattern_RGBPatterns.c: 215: if(PatternStepCounter == 255){
  4029                           
  4030                           ; BSR set to: 0
  4031  0018B0  0100               	movlb	0	; () banked
  4032  0018B2  29EB               	incf	_PatternStepCounter& (0+255),w,b
  4033  0018B4  A4D8               	btfss	status,2,c
  4034  0018B6  D00A               	goto	l3079
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;Pattern_RGBPatterns.c: 216: rising = 0;
  4038  0018B8  0E00               	movlw	0
  4039  0018BA  D00D               	goto	L10
  4040  0018BC                     l3077:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;Pattern_RGBPatterns.c: 217: CycleCounter++;
  4044  0018BC  0E01               	movlw	1
  4045  0018BE  0100               	movlb	0	; () banked
  4046  0018C0  27D1               	addwf	_CycleCounter& (0+255),f,b
  4047  0018C2  0E00               	movlw	0
  4048  0018C4  23D2               	addwfc	(_CycleCounter+1)& (0+255),f,b
  4049  0018C6  23D3               	addwfc	(_CycleCounter+2)& (0+255),f,b
  4050  0018C8  23D4               	addwfc	(_CycleCounter+3)& (0+255),f,b
  4051                           
  4052                           ;Pattern_RGBPatterns.c: 218: }
  4053  0018CA  D008               	goto	l3085
  4054  0018CC                     l3079:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;Pattern_RGBPatterns.c: 219: else if(PatternStepCounter == 0){
  4058  0018CC  0100               	movlb	0	; () banked
  4059  0018CE  51EB               	movf	_PatternStepCounter& (0+255),w,b
  4060  0018D0  A4D8               	btfss	status,2,c
  4061  0018D2  D004               	goto	l3085
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;Pattern_RGBPatterns.c: 220: rising = 1;
  4065  0018D4  0E01               	movlw	1
  4066  0018D6                     L10:
  4067  0018D6  0100               	movlb	0	; () banked
  4068  0018D8  6FF2               	movwf	WelcomePattern@rising& (0+255),b
  4069  0018DA  D7F0               	goto	l3077
  4070  0018DC                     l3085:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;Pattern_RGBPatterns.c: 222: }
  4074                           ;Pattern_RGBPatterns.c: 223: if(CycleCounter < 4){
  4075  0018DC  0100               	movlb	0	; () banked
  4076  0018DE  51D4               	movf	(_CycleCounter+3)& (0+255),w,b
  4077  0018E0  0100               	movlb	0	; () banked
  4078  0018E2  11D3               	iorwf	(_CycleCounter+2)& (0+255),w,b
  4079  0018E4  0100               	movlb	0	; () banked
  4080  0018E6  11D2               	iorwf	(_CycleCounter+1)& (0+255),w,b
  4081  0018E8  E11F               	bnz	l506
  4082  0018EA  0E04               	movlw	4
  4083  0018EC  0100               	movlb	0	; () banked
  4084  0018EE  5DD1               	subwf	_CycleCounter& (0+255),w,b
  4085  0018F0  B0D8               	btfsc	status,0,c
  4086  0018F2  0012               	return	
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;Pattern_RGBPatterns.c: 224: PatternStepCounter = (rising ? PatternStepCounter+15 : Patt
      +                          ernStepCounter-15);
  4090  0018F4  0100               	movlb	0	; () banked
  4091  0018F6  51F2               	movf	WelcomePattern@rising& (0+255),w,b
  4092  0018F8  0100               	movlb	0	; () banked
  4093  0018FA  A4D8               	btfss	status,2,c
  4094  0018FC  D009               	goto	l3091
  4095                           
  4096                           ; BSR set to: 0
  4097  0018FE  0EF1               	movlw	241
  4098  001900  0100               	movlb	0	; () banked
  4099  001902  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  4100  001904  0100               	movlb	0	; () banked
  4101  001906  6F64               	movwf	_WelcomePattern$717& (0+255),b
  4102  001908  0100               	movlb	0	; () banked
  4103  00190A  6B65               	clrf	(_WelcomePattern$717+1)& (0+255),b
  4104  00190C  0EFF               	movlw	255
  4105  00190E  D008               	goto	L11
  4106  001910                     l3091:
  4107                           
  4108                           ; BSR set to: 0
  4109  001910  0E0F               	movlw	15
  4110  001912  0100               	movlb	0	; () banked
  4111  001914  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  4112  001916  0100               	movlb	0	; () banked
  4113  001918  6F64               	movwf	_WelcomePattern$717& (0+255),b
  4114  00191A  0100               	movlb	0	; () banked
  4115  00191C  6B65               	clrf	(_WelcomePattern$717+1)& (0+255),b
  4116  00191E  0E00               	movlw	0
  4117  001920                     L11:
  4118  001920  2365               	addwfc	(_WelcomePattern$717+1)& (0+255),f,b
  4119                           
  4120                           ; BSR set to: 0
  4121                           
  4122                           ; BSR set to: 0
  4123  001922  C064  F0EB         	movff	_WelcomePattern$717,_PatternStepCounter
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;Pattern_RGBPatterns.c: 227: }
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;Pattern_RGBPatterns.c: 225: }
  4130                           ;Pattern_RGBPatterns.c: 226: break;
  4131  001926  0012               	return	
  4132  001928                     l506:
  4133                           
  4134                           ; BSR set to: 0
  4135  001928  0012               	return		;funcret
  4136  00192A                     __end_of_WelcomePattern:
  4137                           	opt stack 0
  4138                           tosu	equ	0xFFF
  4139                           tosh	equ	0xFFE
  4140                           tosl	equ	0xFFD
  4141                           pclath	equ	0xFFA
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           postdec1	equ	0xFE5
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           indf2	equ	0xFDF
  4154                           postinc2	equ	0xFDE
  4155                           postdec2	equ	0xFDD
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160 ;; *************** function _ThinkingPattern *****************
  4161 ;; Defined at:
  4162 ;;		line 258 in file "Pattern_RGBPatterns.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  pattern         1    wreg     unsigned char 
  4165 ;;  pixel           1    8[BANK0 ] unsigned char 
  4166 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  pattern         1    0[COMRAM] unsigned char 
  4169 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4170 ;;  head            1   31[BANK0 ] unsigned char 
  4171 ;;  x               1   30[BANK0 ] unsigned char 
  4172 ;;  hue             1   29[BANK0 ] unsigned char 
  4173 ;;  val             1   28[BANK0 ] unsigned char 
  4174 ;;  sat             1   27[BANK0 ] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    8[BANK0 ] unsigned int 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       2       0       0
  4185 ;;      Locals:         0      11       0       0
  4186 ;;      Temps:          0      11       0       0
  4187 ;;      Totals:         0      24       0       0
  4188 ;;Total ram usage:       24 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    8
  4191 ;; This function calls:
  4192 ;;		___awdiv
  4193 ;;		___awmod
  4194 ;; This function is called by:
  4195 ;;		_UpdatePattern
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text17
  4200  000F76                     __ptext17:
  4201                           	opt stack 0
  4202  000F76                     _ThinkingPattern:
  4203                           	opt stack 18
  4204                           
  4205                           ;Pattern_RGBPatterns.c: 259: uint8_t head = stepCount;
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209  000F76  C069  F07F         	movff	ThinkingPattern@stepCount,ThinkingPattern@head
  4210                           
  4211                           ;Pattern_RGBPatterns.c: 265: hue = 32;
  4212                           
  4213                           ;Pattern_RGBPatterns.c: 264: default:
  4214                           
  4215                           ;Pattern_RGBPatterns.c: 260: uint16_t pixelHSV;
  4216                           ;Pattern_RGBPatterns.c: 261: uint8_t sat, val, hue, x;
  4217                           ;Pattern_RGBPatterns.c: 263: switch(pattern){
  4218  000F7A  0E20               	movlw	32
  4219  000F7C  0100               	movlb	0	; () banked
  4220  000F7E  6F7D               	movwf	ThinkingPattern@hue& (0+255),b
  4221                           
  4222                           ;Pattern_RGBPatterns.c: 266: sat = 0x0F;
  4223  000F80  0E0F               	movlw	15
  4224  000F82  0100               	movlb	0	; () banked
  4225  000F84  6F7B               	movwf	ThinkingPattern@sat& (0+255),b
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;Pattern_RGBPatterns.c: 268: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4229  000F86  0100               	movlb	0	; () banked
  4230  000F88  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4231  000F8A  0100               	movlb	0	; () banked
  4232  000F8C  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4233  000F8E  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4234  000F90  0100               	movlb	0	; () banked
  4235  000F92  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4236  000F94  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4237  000F96  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4238  000F98  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4239  000F9A  0100               	movlb	0	; () banked
  4240  000F9C  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4241  000F9E  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4242  000FA2  0100               	movlb	0	; () banked
  4243  000FA4  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4244  000FA6  0100               	movlb	0	; () banked
  4245  000FA8  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4246  000FAA  0E00               	movlw	0
  4247  000FAC  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4248  000FAE  0100               	movlb	0	; () banked
  4249  000FB0  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4250  000FB2  0100               	movlb	0	; () banked
  4251  000FB4  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4252  000FB6  0100               	movlb	0	; () banked
  4253  000FB8  6F60               	movwf	___awmod@dividend& (0+255),b
  4254  000FBA  0100               	movlb	0	; () banked
  4255  000FBC  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4256  000FBE  0100               	movlb	0	; () banked
  4257  000FC0  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4258  000FC2  0100               	movlb	0	; () banked
  4259  000FC4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4260  000FC6  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4261  000FCA  0100               	movlb	0	; () banked
  4262  000FCC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4263  000FCE  EC78  F010         	call	___awmod	;wreg free
  4264  000FD2  C060  F06E         	movff	?___awmod,??_ThinkingPattern+4
  4265  000FD6  C061  F06F         	movff	?___awmod+1,??_ThinkingPattern+5
  4266  000FDA  0100               	movlb	0	; () banked
  4267  000FDC  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4268  000FDE  0100               	movlb	0	; () banked
  4269  000FE0  6F70               	movwf	(??_ThinkingPattern+6)& (0+255),b
  4270  000FE2  6B71               	clrf	(??_ThinkingPattern+7)& (0+255),b
  4271  000FE4  0100               	movlb	0	; () banked
  4272  000FE6  1F70               	comf	(??_ThinkingPattern+6)& (0+255),f,b
  4273  000FE8  1F71               	comf	(??_ThinkingPattern+7)& (0+255),f,b
  4274  000FEA  4B70               	infsnz	(??_ThinkingPattern+6)& (0+255),f,b
  4275  000FEC  2B71               	incf	(??_ThinkingPattern+7)& (0+255),f,b
  4276  000FEE  0100               	movlb	0	; () banked
  4277  000FF0  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4278  000FF2  C0E3  F072         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+8
  4279  000FF6  0100               	movlb	0	; () banked
  4280  000FF8  6B73               	clrf	(??_ThinkingPattern+9)& (0+255),b
  4281  000FFA  0100               	movlb	0	; () banked
  4282  000FFC  2772               	addwf	(??_ThinkingPattern+8)& (0+255),f,b
  4283  000FFE  0E00               	movlw	0
  4284  001000  2373               	addwfc	(??_ThinkingPattern+9)& (0+255),f,b
  4285  001002  0100               	movlb	0	; () banked
  4286  001004  5170               	movf	(??_ThinkingPattern+6)& (0+255),w,b
  4287  001006  0100               	movlb	0	; () banked
  4288  001008  2572               	addwf	(??_ThinkingPattern+8)& (0+255),w,b
  4289  00100A  0100               	movlb	0	; () banked
  4290  00100C  6F60               	movwf	___awmod@dividend& (0+255),b
  4291  00100E  0100               	movlb	0	; () banked
  4292  001010  5171               	movf	(??_ThinkingPattern+7)& (0+255),w,b
  4293  001012  0100               	movlb	0	; () banked
  4294  001014  2173               	addwfc	(??_ThinkingPattern+9)& (0+255),w,b
  4295  001016  0100               	movlb	0	; () banked
  4296  001018  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4297  00101A  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4298  00101E  0100               	movlb	0	; () banked
  4299  001020  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4300  001022  EC78  F010         	call	___awmod	;wreg free
  4301  001026  0100               	movlb	0	; () banked
  4302  001028  5160               	movf	?___awmod& (0+255),w,b
  4303  00102A  0100               	movlb	0	; () banked
  4304  00102C  5D6E               	subwf	(??_ThinkingPattern+4)& (0+255),w,b
  4305  00102E  0100               	movlb	0	; () banked
  4306  001030  516F               	movf	(??_ThinkingPattern+5)& (0+255),w,b
  4307  001032  0A80               	xorlw	128
  4308  001034  0100               	movlb	0	; () banked
  4309  001036  6F74               	movwf	(??_ThinkingPattern+10)& (0+255),b
  4310  001038  0100               	movlb	0	; () banked
  4311  00103A  5161               	movf	(?___awmod+1)& (0+255),w,b
  4312  00103C  0A80               	xorlw	128
  4313  00103E  0100               	movlb	0	; () banked
  4314  001040  5974               	subwfb	(??_ThinkingPattern+10)& (0+255),w,b
  4315  001042  A0D8               	btfss	status,0,c
  4316  001044  D027               	goto	l3153
  4317                           
  4318                           ; BSR set to: 0
  4319  001046  0100               	movlb	0	; () banked
  4320  001048  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4321  00104A  0100               	movlb	0	; () banked
  4322  00104C  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4323  00104E  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4324  001050  0100               	movlb	0	; () banked
  4325  001052  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4326  001054  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4327  001056  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4328  001058  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4329  00105A  0100               	movlb	0	; () banked
  4330  00105C  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4331  00105E  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4332  001062  0100               	movlb	0	; () banked
  4333  001064  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4334  001066  0100               	movlb	0	; () banked
  4335  001068  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4336  00106A  0E00               	movlw	0
  4337  00106C  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4338  00106E  0100               	movlb	0	; () banked
  4339  001070  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4340  001072  0100               	movlb	0	; () banked
  4341  001074  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4342  001076  0100               	movlb	0	; () banked
  4343  001078  6F60               	movwf	___awmod@dividend& (0+255),b
  4344  00107A  0100               	movlb	0	; () banked
  4345  00107C  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4346  00107E  0100               	movlb	0	; () banked
  4347  001080  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4348  001082  0100               	movlb	0	; () banked
  4349  001084  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4350  001086  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4351  00108A  0100               	movlb	0	; () banked
  4352  00108C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4353  00108E  EC78  F010         	call	___awmod	;wreg free
  4354  001092  D026               	goto	L12
  4355  001094                     l3153:
  4356  001094  0100               	movlb	0	; () banked
  4357  001096  517F               	movf	ThinkingPattern@head& (0+255),w,b
  4358  001098  0100               	movlb	0	; () banked
  4359  00109A  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4360  00109C  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4361  00109E  0100               	movlb	0	; () banked
  4362  0010A0  1F6A               	comf	??_ThinkingPattern& (0+255),f,b
  4363  0010A2  1F6B               	comf	(??_ThinkingPattern+1)& (0+255),f,b
  4364  0010A4  4B6A               	infsnz	??_ThinkingPattern& (0+255),f,b
  4365  0010A6  2B6B               	incf	(??_ThinkingPattern+1)& (0+255),f,b
  4366  0010A8  0100               	movlb	0	; () banked
  4367  0010AA  5168               	movf	ThinkingPattern@pixel& (0+255),w,b
  4368  0010AC  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ThinkingPattern+2
  4369  0010B0  0100               	movlb	0	; () banked
  4370  0010B2  6B6D               	clrf	(??_ThinkingPattern+3)& (0+255),b
  4371  0010B4  0100               	movlb	0	; () banked
  4372  0010B6  276C               	addwf	(??_ThinkingPattern+2)& (0+255),f,b
  4373  0010B8  0E00               	movlw	0
  4374  0010BA  236D               	addwfc	(??_ThinkingPattern+3)& (0+255),f,b
  4375  0010BC  0100               	movlb	0	; () banked
  4376  0010BE  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4377  0010C0  0100               	movlb	0	; () banked
  4378  0010C2  256C               	addwf	(??_ThinkingPattern+2)& (0+255),w,b
  4379  0010C4  0100               	movlb	0	; () banked
  4380  0010C6  6F60               	movwf	___awmod@dividend& (0+255),b
  4381  0010C8  0100               	movlb	0	; () banked
  4382  0010CA  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4383  0010CC  0100               	movlb	0	; () banked
  4384  0010CE  216D               	addwfc	(??_ThinkingPattern+3)& (0+255),w,b
  4385  0010D0  0100               	movlb	0	; () banked
  4386  0010D2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4387  0010D4  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4388  0010D8  0100               	movlb	0	; () banked
  4389  0010DA  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4390  0010DC  EC78  F010         	call	___awmod	;wreg free
  4391  0010E0                     L12:
  4392  0010E0  C060  F077         	movff	?___awmod,_ThinkingPattern$742
  4393  0010E4  C061  F078         	movff	?___awmod+1,_ThinkingPattern$742+1
  4394  0010E8  C077  F07E         	movff	_ThinkingPattern$742,ThinkingPattern@x
  4395                           
  4396                           ;Pattern_RGBPatterns.c: 269: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4397  0010EC  0E04               	movlw	4
  4398  0010EE  0100               	movlb	0	; () banked
  4399  0010F0  657E               	cpfsgt	ThinkingPattern@x& (0+255),b
  4400  0010F2  D006               	goto	l3161
  4401                           
  4402                           ; BSR set to: 0
  4403  0010F4  0E00               	movlw	0
  4404  0010F6  0100               	movlb	0	; () banked
  4405  0010F8  6F7A               	movwf	(_ThinkingPattern$743+1)& (0+255),b
  4406  0010FA  0E00               	movlw	0
  4407  0010FC  6F79               	movwf	_ThinkingPattern$743& (0+255),b
  4408  0010FE  D01F               	goto	l3163
  4409  001100                     l3161:
  4410                           
  4411                           ; BSR set to: 0
  4412  001100  0100               	movlb	0	; () banked
  4413  001102  517E               	movf	ThinkingPattern@x& (0+255),w,b
  4414  001104  0D0F               	mullw	15
  4415  001106  CFF3 F060          	movff	prodl,___awdiv@dividend
  4416  00110A  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4417  00110E  0E00               	movlw	0
  4418  001110  0100               	movlb	0	; () banked
  4419  001112  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4420  001114  0E05               	movlw	5
  4421  001116  6F62               	movwf	___awdiv@divisor& (0+255),b
  4422  001118  ECC1  F00E         	call	___awdiv	;wreg free
  4423  00111C  0100               	movlb	0	; () banked
  4424  00111E  1F60               	comf	?___awdiv& (0+255),f,b
  4425  001120  0100               	movlb	0	; () banked
  4426  001122  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4427  001124  0100               	movlb	0	; () banked
  4428  001126  4B60               	infsnz	?___awdiv& (0+255),f,b
  4429  001128  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4430  00112A  0E0F               	movlw	15
  4431  00112C  0100               	movlb	0	; () banked
  4432  00112E  2560               	addwf	?___awdiv& (0+255),w,b
  4433  001130  0100               	movlb	0	; () banked
  4434  001132  6F79               	movwf	_ThinkingPattern$743& (0+255),b
  4435  001134  0E00               	movlw	0
  4436  001136  0100               	movlb	0	; () banked
  4437  001138  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4438  00113A  0100               	movlb	0	; () banked
  4439  00113C  6F7A               	movwf	(_ThinkingPattern$743+1)& (0+255),b
  4440  00113E                     l3163:
  4441                           
  4442                           ; BSR set to: 0
  4443  00113E  C079  F07C         	movff	_ThinkingPattern$743,ThinkingPattern@val
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;Pattern_RGBPatterns.c: 273: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4447                           
  4448                           ; BSR set to: 0
  4449                           
  4450                           ; BSR set to: 0
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;Pattern_RGBPatterns.c: 271: }
  4454                           
  4455                           ;Pattern_RGBPatterns.c: 270: break;
  4456  001142  0100               	movlb	0	; () banked
  4457  001144  517B               	movf	ThinkingPattern@sat& (0+255),w,b
  4458  001146  0100               	movlb	0	; () banked
  4459  001148  6F6A               	movwf	??_ThinkingPattern& (0+255),b
  4460  00114A  6B6B               	clrf	(??_ThinkingPattern+1)& (0+255),b
  4461  00114C  0100               	movlb	0	; () banked
  4462  00114E  3B6A               	swapf	??_ThinkingPattern& (0+255),f,b
  4463  001150  3B6B               	swapf	(??_ThinkingPattern+1)& (0+255),f,b
  4464  001152  0EF0               	movlw	240
  4465  001154  176B               	andwf	(??_ThinkingPattern+1)& (0+255),f,b
  4466  001156  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4467  001158  0B0F               	andlw	15
  4468  00115A  136B               	iorwf	(??_ThinkingPattern+1)& (0+255),f,b
  4469  00115C  0EF0               	movlw	240
  4470  00115E  176A               	andwf	??_ThinkingPattern& (0+255),f,b
  4471  001160  0100               	movlb	0	; () banked
  4472  001162  517D               	movf	ThinkingPattern@hue& (0+255),w,b
  4473  001164  0100               	movlb	0	; () banked
  4474  001166  6F6D               	movwf	(??_ThinkingPattern+3)& (0+255),b
  4475  001168  6B6C               	clrf	(??_ThinkingPattern+2)& (0+255),b
  4476  00116A  0100               	movlb	0	; () banked
  4477  00116C  516A               	movf	??_ThinkingPattern& (0+255),w,b
  4478  00116E  0100               	movlb	0	; () banked
  4479  001170  136C               	iorwf	(??_ThinkingPattern+2)& (0+255),f,b
  4480  001172  0100               	movlb	0	; () banked
  4481  001174  516B               	movf	(??_ThinkingPattern+1)& (0+255),w,b
  4482  001176  0100               	movlb	0	; () banked
  4483  001178  136D               	iorwf	(??_ThinkingPattern+3)& (0+255),f,b
  4484  00117A  0100               	movlb	0	; () banked
  4485  00117C  517C               	movf	ThinkingPattern@val& (0+255),w,b
  4486  00117E  0100               	movlb	0	; () banked
  4487  001180  116C               	iorwf	(??_ThinkingPattern+2)& (0+255),w,b
  4488  001182  0100               	movlb	0	; () banked
  4489  001184  6F75               	movwf	ThinkingPattern@pixelHSV& (0+255),b
  4490  001186  0100               	movlb	0	; () banked
  4491  001188  516D               	movf	(??_ThinkingPattern+3)& (0+255),w,b
  4492  00118A  0100               	movlb	0	; () banked
  4493  00118C  6F76               	movwf	(ThinkingPattern@pixelHSV+1)& (0+255),b
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;Pattern_RGBPatterns.c: 275: return pixelHSV;
  4497  00118E  C075  F068         	movff	ThinkingPattern@pixelHSV,?_ThinkingPattern
  4498  001192  C076  F069         	movff	ThinkingPattern@pixelHSV+1,?_ThinkingPattern+1
  4499  001196  0012               	return	
  4500  001198                     __end_of_ThinkingPattern:
  4501                           	opt stack 0
  4502                           tosu	equ	0xFFF
  4503                           tosh	equ	0xFFE
  4504                           tosl	equ	0xFFD
  4505                           pclath	equ	0xFFA
  4506                           tblptru	equ	0xFF8
  4507                           tblptrh	equ	0xFF7
  4508                           tblptrl	equ	0xFF6
  4509                           tablat	equ	0xFF5
  4510                           prodh	equ	0xFF4
  4511                           prodl	equ	0xFF3
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           postdec1	equ	0xFE5
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _SpeakingPattern *****************
  4525 ;; Defined at:
  4526 ;;		line 295 in file "Pattern_RGBPatterns.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  pattern         1    wreg     unsigned char 
  4529 ;;  pixel           1    8[BANK0 ] unsigned char 
  4530 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  pattern         1    0[COMRAM] unsigned char 
  4533 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4534 ;;  head            1   31[BANK0 ] unsigned char 
  4535 ;;  x               1   30[BANK0 ] unsigned char 
  4536 ;;  hue             1   29[BANK0 ] unsigned char 
  4537 ;;  val             1   28[BANK0 ] unsigned char 
  4538 ;;  sat             1   27[BANK0 ] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  2    8[BANK0 ] unsigned int 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4548 ;;      Params:         0       2       0       0
  4549 ;;      Locals:         0      11       0       0
  4550 ;;      Temps:          0      11       0       0
  4551 ;;      Totals:         0      24       0       0
  4552 ;;Total ram usage:       24 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    8
  4555 ;; This function calls:
  4556 ;;		___awdiv
  4557 ;;		___awmod
  4558 ;; This function is called by:
  4559 ;;		_UpdatePattern
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text18
  4564  001198                     __ptext18:
  4565                           	opt stack 0
  4566  001198                     _SpeakingPattern:
  4567                           	opt stack 18
  4568                           
  4569                           ;Pattern_RGBPatterns.c: 296: uint8_t head = stepCount;
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;incstack = 0
  4573  001198  C069  F07F         	movff	SpeakingPattern@stepCount,SpeakingPattern@head
  4574                           
  4575                           ;Pattern_RGBPatterns.c: 302: hue = 170;
  4576                           
  4577                           ;Pattern_RGBPatterns.c: 301: default:
  4578                           
  4579                           ;Pattern_RGBPatterns.c: 297: uint16_t pixelHSV;
  4580                           ;Pattern_RGBPatterns.c: 298: uint8_t sat, val, hue, x;
  4581                           ;Pattern_RGBPatterns.c: 300: switch(pattern){
  4582  00119C  0EAA               	movlw	170
  4583  00119E  0100               	movlb	0	; () banked
  4584  0011A0  6F7D               	movwf	SpeakingPattern@hue& (0+255),b
  4585                           
  4586                           ;Pattern_RGBPatterns.c: 303: sat = 0x0F;
  4587  0011A2  0E0F               	movlw	15
  4588  0011A4  0100               	movlb	0	; () banked
  4589  0011A6  6F7B               	movwf	SpeakingPattern@sat& (0+255),b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;Pattern_RGBPatterns.c: 305: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4593  0011A8  0100               	movlb	0	; () banked
  4594  0011AA  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4595  0011AC  0100               	movlb	0	; () banked
  4596  0011AE  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4597  0011B0  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4598  0011B2  0100               	movlb	0	; () banked
  4599  0011B4  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4600  0011B6  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4601  0011B8  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4602  0011BA  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4603  0011BC  0100               	movlb	0	; () banked
  4604  0011BE  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4605  0011C0  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4606  0011C4  0100               	movlb	0	; () banked
  4607  0011C6  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4608  0011C8  0100               	movlb	0	; () banked
  4609  0011CA  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4610  0011CC  0E00               	movlw	0
  4611  0011CE  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4612  0011D0  0100               	movlb	0	; () banked
  4613  0011D2  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4614  0011D4  0100               	movlb	0	; () banked
  4615  0011D6  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4616  0011D8  0100               	movlb	0	; () banked
  4617  0011DA  6F60               	movwf	___awmod@dividend& (0+255),b
  4618  0011DC  0100               	movlb	0	; () banked
  4619  0011DE  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4620  0011E0  0100               	movlb	0	; () banked
  4621  0011E2  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4622  0011E4  0100               	movlb	0	; () banked
  4623  0011E6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4624  0011E8  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4625  0011EC  0100               	movlb	0	; () banked
  4626  0011EE  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4627  0011F0  EC78  F010         	call	___awmod	;wreg free
  4628  0011F4  C060  F06E         	movff	?___awmod,??_SpeakingPattern+4
  4629  0011F8  C061  F06F         	movff	?___awmod+1,??_SpeakingPattern+5
  4630  0011FC  0100               	movlb	0	; () banked
  4631  0011FE  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4632  001200  0100               	movlb	0	; () banked
  4633  001202  6F70               	movwf	(??_SpeakingPattern+6)& (0+255),b
  4634  001204  6B71               	clrf	(??_SpeakingPattern+7)& (0+255),b
  4635  001206  0100               	movlb	0	; () banked
  4636  001208  1F70               	comf	(??_SpeakingPattern+6)& (0+255),f,b
  4637  00120A  1F71               	comf	(??_SpeakingPattern+7)& (0+255),f,b
  4638  00120C  4B70               	infsnz	(??_SpeakingPattern+6)& (0+255),f,b
  4639  00120E  2B71               	incf	(??_SpeakingPattern+7)& (0+255),f,b
  4640  001210  0100               	movlb	0	; () banked
  4641  001212  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4642  001214  C0E3  F072         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+8
  4643  001218  0100               	movlb	0	; () banked
  4644  00121A  6B73               	clrf	(??_SpeakingPattern+9)& (0+255),b
  4645  00121C  0100               	movlb	0	; () banked
  4646  00121E  2772               	addwf	(??_SpeakingPattern+8)& (0+255),f,b
  4647  001220  0E00               	movlw	0
  4648  001222  2373               	addwfc	(??_SpeakingPattern+9)& (0+255),f,b
  4649  001224  0100               	movlb	0	; () banked
  4650  001226  5170               	movf	(??_SpeakingPattern+6)& (0+255),w,b
  4651  001228  0100               	movlb	0	; () banked
  4652  00122A  2572               	addwf	(??_SpeakingPattern+8)& (0+255),w,b
  4653  00122C  0100               	movlb	0	; () banked
  4654  00122E  6F60               	movwf	___awmod@dividend& (0+255),b
  4655  001230  0100               	movlb	0	; () banked
  4656  001232  5171               	movf	(??_SpeakingPattern+7)& (0+255),w,b
  4657  001234  0100               	movlb	0	; () banked
  4658  001236  2173               	addwfc	(??_SpeakingPattern+9)& (0+255),w,b
  4659  001238  0100               	movlb	0	; () banked
  4660  00123A  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4661  00123C  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4662  001240  0100               	movlb	0	; () banked
  4663  001242  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4664  001244  EC78  F010         	call	___awmod	;wreg free
  4665  001248  0100               	movlb	0	; () banked
  4666  00124A  5160               	movf	?___awmod& (0+255),w,b
  4667  00124C  0100               	movlb	0	; () banked
  4668  00124E  5D6E               	subwf	(??_SpeakingPattern+4)& (0+255),w,b
  4669  001250  0100               	movlb	0	; () banked
  4670  001252  516F               	movf	(??_SpeakingPattern+5)& (0+255),w,b
  4671  001254  0A80               	xorlw	128
  4672  001256  0100               	movlb	0	; () banked
  4673  001258  6F74               	movwf	(??_SpeakingPattern+10)& (0+255),b
  4674  00125A  0100               	movlb	0	; () banked
  4675  00125C  5161               	movf	(?___awmod+1)& (0+255),w,b
  4676  00125E  0A80               	xorlw	128
  4677  001260  0100               	movlb	0	; () banked
  4678  001262  5974               	subwfb	(??_SpeakingPattern+10)& (0+255),w,b
  4679  001264  A0D8               	btfss	status,0,c
  4680  001266  D027               	goto	l3181
  4681                           
  4682                           ; BSR set to: 0
  4683  001268  0100               	movlb	0	; () banked
  4684  00126A  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4685  00126C  0100               	movlb	0	; () banked
  4686  00126E  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4687  001270  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4688  001272  0100               	movlb	0	; () banked
  4689  001274  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4690  001276  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4691  001278  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4692  00127A  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4693  00127C  0100               	movlb	0	; () banked
  4694  00127E  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4695  001280  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4696  001284  0100               	movlb	0	; () banked
  4697  001286  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4698  001288  0100               	movlb	0	; () banked
  4699  00128A  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4700  00128C  0E00               	movlw	0
  4701  00128E  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4702  001290  0100               	movlb	0	; () banked
  4703  001292  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4704  001294  0100               	movlb	0	; () banked
  4705  001296  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4706  001298  0100               	movlb	0	; () banked
  4707  00129A  6F60               	movwf	___awmod@dividend& (0+255),b
  4708  00129C  0100               	movlb	0	; () banked
  4709  00129E  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4710  0012A0  0100               	movlb	0	; () banked
  4711  0012A2  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4712  0012A4  0100               	movlb	0	; () banked
  4713  0012A6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4714  0012A8  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4715  0012AC  0100               	movlb	0	; () banked
  4716  0012AE  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4717  0012B0  EC78  F010         	call	___awmod	;wreg free
  4718  0012B4  D026               	goto	L13
  4719  0012B6                     l3181:
  4720  0012B6  0100               	movlb	0	; () banked
  4721  0012B8  517F               	movf	SpeakingPattern@head& (0+255),w,b
  4722  0012BA  0100               	movlb	0	; () banked
  4723  0012BC  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4724  0012BE  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4725  0012C0  0100               	movlb	0	; () banked
  4726  0012C2  1F6A               	comf	??_SpeakingPattern& (0+255),f,b
  4727  0012C4  1F6B               	comf	(??_SpeakingPattern+1)& (0+255),f,b
  4728  0012C6  4B6A               	infsnz	??_SpeakingPattern& (0+255),f,b
  4729  0012C8  2B6B               	incf	(??_SpeakingPattern+1)& (0+255),f,b
  4730  0012CA  0100               	movlb	0	; () banked
  4731  0012CC  5168               	movf	SpeakingPattern@pixel& (0+255),w,b
  4732  0012CE  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_SpeakingPattern+2
  4733  0012D2  0100               	movlb	0	; () banked
  4734  0012D4  6B6D               	clrf	(??_SpeakingPattern+3)& (0+255),b
  4735  0012D6  0100               	movlb	0	; () banked
  4736  0012D8  276C               	addwf	(??_SpeakingPattern+2)& (0+255),f,b
  4737  0012DA  0E00               	movlw	0
  4738  0012DC  236D               	addwfc	(??_SpeakingPattern+3)& (0+255),f,b
  4739  0012DE  0100               	movlb	0	; () banked
  4740  0012E0  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4741  0012E2  0100               	movlb	0	; () banked
  4742  0012E4  256C               	addwf	(??_SpeakingPattern+2)& (0+255),w,b
  4743  0012E6  0100               	movlb	0	; () banked
  4744  0012E8  6F60               	movwf	___awmod@dividend& (0+255),b
  4745  0012EA  0100               	movlb	0	; () banked
  4746  0012EC  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4747  0012EE  0100               	movlb	0	; () banked
  4748  0012F0  216D               	addwfc	(??_SpeakingPattern+3)& (0+255),w,b
  4749  0012F2  0100               	movlb	0	; () banked
  4750  0012F4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4751  0012F6  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  4752  0012FA  0100               	movlb	0	; () banked
  4753  0012FC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  4754  0012FE  EC78  F010         	call	___awmod	;wreg free
  4755  001302                     L13:
  4756  001302  C060  F077         	movff	?___awmod,_SpeakingPattern$767
  4757  001306  C061  F078         	movff	?___awmod+1,_SpeakingPattern$767+1
  4758  00130A  C077  F07E         	movff	_SpeakingPattern$767,SpeakingPattern@x
  4759                           
  4760                           ;Pattern_RGBPatterns.c: 306: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4761  00130E  0E04               	movlw	4
  4762  001310  0100               	movlb	0	; () banked
  4763  001312  657E               	cpfsgt	SpeakingPattern@x& (0+255),b
  4764  001314  D006               	goto	l3189
  4765                           
  4766                           ; BSR set to: 0
  4767  001316  0E00               	movlw	0
  4768  001318  0100               	movlb	0	; () banked
  4769  00131A  6F7A               	movwf	(_SpeakingPattern$768+1)& (0+255),b
  4770  00131C  0E00               	movlw	0
  4771  00131E  6F79               	movwf	_SpeakingPattern$768& (0+255),b
  4772  001320  D01F               	goto	l3191
  4773  001322                     l3189:
  4774                           
  4775                           ; BSR set to: 0
  4776  001322  0100               	movlb	0	; () banked
  4777  001324  517E               	movf	SpeakingPattern@x& (0+255),w,b
  4778  001326  0D0F               	mullw	15
  4779  001328  CFF3 F060          	movff	prodl,___awdiv@dividend
  4780  00132C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4781  001330  0E00               	movlw	0
  4782  001332  0100               	movlb	0	; () banked
  4783  001334  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4784  001336  0E05               	movlw	5
  4785  001338  6F62               	movwf	___awdiv@divisor& (0+255),b
  4786  00133A  ECC1  F00E         	call	___awdiv	;wreg free
  4787  00133E  0100               	movlb	0	; () banked
  4788  001340  1F60               	comf	?___awdiv& (0+255),f,b
  4789  001342  0100               	movlb	0	; () banked
  4790  001344  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4791  001346  0100               	movlb	0	; () banked
  4792  001348  4B60               	infsnz	?___awdiv& (0+255),f,b
  4793  00134A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4794  00134C  0E0F               	movlw	15
  4795  00134E  0100               	movlb	0	; () banked
  4796  001350  2560               	addwf	?___awdiv& (0+255),w,b
  4797  001352  0100               	movlb	0	; () banked
  4798  001354  6F79               	movwf	_SpeakingPattern$768& (0+255),b
  4799  001356  0E00               	movlw	0
  4800  001358  0100               	movlb	0	; () banked
  4801  00135A  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4802  00135C  0100               	movlb	0	; () banked
  4803  00135E  6F7A               	movwf	(_SpeakingPattern$768+1)& (0+255),b
  4804  001360                     l3191:
  4805                           
  4806                           ; BSR set to: 0
  4807  001360  C079  F07C         	movff	_SpeakingPattern$768,SpeakingPattern@val
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;Pattern_RGBPatterns.c: 310: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  4811                           
  4812                           ; BSR set to: 0
  4813                           
  4814                           ; BSR set to: 0
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;Pattern_RGBPatterns.c: 308: }
  4818                           
  4819                           ;Pattern_RGBPatterns.c: 307: break;
  4820  001364  0100               	movlb	0	; () banked
  4821  001366  517B               	movf	SpeakingPattern@sat& (0+255),w,b
  4822  001368  0100               	movlb	0	; () banked
  4823  00136A  6F6A               	movwf	??_SpeakingPattern& (0+255),b
  4824  00136C  6B6B               	clrf	(??_SpeakingPattern+1)& (0+255),b
  4825  00136E  0100               	movlb	0	; () banked
  4826  001370  3B6A               	swapf	??_SpeakingPattern& (0+255),f,b
  4827  001372  3B6B               	swapf	(??_SpeakingPattern+1)& (0+255),f,b
  4828  001374  0EF0               	movlw	240
  4829  001376  176B               	andwf	(??_SpeakingPattern+1)& (0+255),f,b
  4830  001378  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4831  00137A  0B0F               	andlw	15
  4832  00137C  136B               	iorwf	(??_SpeakingPattern+1)& (0+255),f,b
  4833  00137E  0EF0               	movlw	240
  4834  001380  176A               	andwf	??_SpeakingPattern& (0+255),f,b
  4835  001382  0100               	movlb	0	; () banked
  4836  001384  517D               	movf	SpeakingPattern@hue& (0+255),w,b
  4837  001386  0100               	movlb	0	; () banked
  4838  001388  6F6D               	movwf	(??_SpeakingPattern+3)& (0+255),b
  4839  00138A  6B6C               	clrf	(??_SpeakingPattern+2)& (0+255),b
  4840  00138C  0100               	movlb	0	; () banked
  4841  00138E  516A               	movf	??_SpeakingPattern& (0+255),w,b
  4842  001390  0100               	movlb	0	; () banked
  4843  001392  136C               	iorwf	(??_SpeakingPattern+2)& (0+255),f,b
  4844  001394  0100               	movlb	0	; () banked
  4845  001396  516B               	movf	(??_SpeakingPattern+1)& (0+255),w,b
  4846  001398  0100               	movlb	0	; () banked
  4847  00139A  136D               	iorwf	(??_SpeakingPattern+3)& (0+255),f,b
  4848  00139C  0100               	movlb	0	; () banked
  4849  00139E  517C               	movf	SpeakingPattern@val& (0+255),w,b
  4850  0013A0  0100               	movlb	0	; () banked
  4851  0013A2  116C               	iorwf	(??_SpeakingPattern+2)& (0+255),w,b
  4852  0013A4  0100               	movlb	0	; () banked
  4853  0013A6  6F75               	movwf	SpeakingPattern@pixelHSV& (0+255),b
  4854  0013A8  0100               	movlb	0	; () banked
  4855  0013AA  516D               	movf	(??_SpeakingPattern+3)& (0+255),w,b
  4856  0013AC  0100               	movlb	0	; () banked
  4857  0013AE  6F76               	movwf	(SpeakingPattern@pixelHSV+1)& (0+255),b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;Pattern_RGBPatterns.c: 312: return pixelHSV;
  4861  0013B0  C075  F068         	movff	SpeakingPattern@pixelHSV,?_SpeakingPattern
  4862  0013B4  C076  F069         	movff	SpeakingPattern@pixelHSV+1,?_SpeakingPattern+1
  4863  0013B8  0012               	return	
  4864  0013BA                     __end_of_SpeakingPattern:
  4865                           	opt stack 0
  4866                           tosu	equ	0xFFF
  4867                           tosh	equ	0xFFE
  4868                           tosl	equ	0xFFD
  4869                           pclath	equ	0xFFA
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           postdec1	equ	0xFE5
  4879                           fsr1h	equ	0xFE2
  4880                           fsr1l	equ	0xFE1
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           postdec2	equ	0xFDD
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _ListeningPattern *****************
  4889 ;; Defined at:
  4890 ;;		line 278 in file "Pattern_RGBPatterns.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  listeningLoc    1    wreg     unsigned char 
  4893 ;;  pixel           1    8[BANK0 ] unsigned char 
  4894 ;;  stepCount       1    9[BANK0 ] unsigned char 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  listeningLoc    1   23[BANK0 ] unsigned char 
  4897 ;;  pixelHSV        2   21[BANK0 ] unsigned int 
  4898 ;;  head            1   33[BANK0 ] unsigned char 
  4899 ;;  y               1   32[BANK0 ] unsigned char 
  4900 ;;  x               1   31[BANK0 ] unsigned char 
  4901 ;;  hue             1   30[BANK0 ] unsigned char 
  4902 ;;  val             1   29[BANK0 ] unsigned char 
  4903 ;;  sat             1   28[BANK0 ] unsigned char 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  2    8[BANK0 ] unsigned int 
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4913 ;;      Params:         0       2       0       0
  4914 ;;      Locals:         0      13       0       0
  4915 ;;      Temps:          0      11       0       0
  4916 ;;      Totals:         0      26       0       0
  4917 ;;Total ram usage:       26 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    8
  4920 ;; This function calls:
  4921 ;;		___awdiv
  4922 ;;		___awmod
  4923 ;; This function is called by:
  4924 ;;		_UpdatePattern
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text19
  4929  000D40                     __ptext19:
  4930                           	opt stack 0
  4931  000D40                     _ListeningPattern:
  4932                           	opt stack 18
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;incstack = 0
  4936                           ;ListeningPattern@listeningLoc stored from wreg
  4937  000D40  0100               	movlb	0	; () banked
  4938  000D42  6F77               	movwf	ListeningPattern@listeningLoc& (0+255),b
  4939                           
  4940                           ;Pattern_RGBPatterns.c: 279: uint8_t head = listeningLoc;
  4941  000D44  C077  F081         	movff	ListeningPattern@listeningLoc,ListeningPattern@head
  4942                           
  4943                           ;Pattern_RGBPatterns.c: 280: uint16_t pixelHSV;
  4944                           ;Pattern_RGBPatterns.c: 281: uint8_t sat, val, hue, x, y;
  4945                           ;Pattern_RGBPatterns.c: 283: hue = 85;
  4946  000D48  0E55               	movlw	85
  4947  000D4A  0100               	movlb	0	; () banked
  4948  000D4C  6F7E               	movwf	ListeningPattern@hue& (0+255),b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;Pattern_RGBPatterns.c: 284: sat = 0x0F;
  4952  000D4E  0E0F               	movlw	15
  4953  000D50  0100               	movlb	0	; () banked
  4954  000D52  6F7C               	movwf	ListeningPattern@sat& (0+255),b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;Pattern_RGBPatterns.c: 286: y = (5-stepCount%4);
  4958  000D54  0100               	movlb	0	; () banked
  4959  000D56  5169               	movf	ListeningPattern@stepCount& (0+255),w,b
  4960  000D58  0B03               	andlw	3
  4961  000D5A  0800               	sublw	0
  4962  000D5C  0F05               	addlw	5
  4963  000D5E  0100               	movlb	0	; () banked
  4964  000D60  6F80               	movwf	ListeningPattern@y& (0+255),b
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;Pattern_RGBPatterns.c: 287: x = ((((Length+pixel-head)%Length) < ((Length+head-pixel)%L
      +                          ength)) ? ((Length+pixel-head)%Length) : ((Length+head-pixel)%Length));
  4968  000D62  0100               	movlb	0	; () banked
  4969  000D64  5181               	movf	ListeningPattern@head& (0+255),w,b
  4970  000D66  0100               	movlb	0	; () banked
  4971  000D68  6F6A               	movwf	??_ListeningPattern& (0+255),b
  4972  000D6A  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  4973  000D6C  0100               	movlb	0	; () banked
  4974  000D6E  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  4975  000D70  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  4976  000D72  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  4977  000D74  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  4978  000D76  0100               	movlb	0	; () banked
  4979  000D78  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  4980  000D7A  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  4981  000D7E  0100               	movlb	0	; () banked
  4982  000D80  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  4983  000D82  0100               	movlb	0	; () banked
  4984  000D84  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  4985  000D86  0E00               	movlw	0
  4986  000D88  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  4987  000D8A  0100               	movlb	0	; () banked
  4988  000D8C  516A               	movf	??_ListeningPattern& (0+255),w,b
  4989  000D8E  0100               	movlb	0	; () banked
  4990  000D90  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  4991  000D92  0100               	movlb	0	; () banked
  4992  000D94  6F60               	movwf	___awmod@dividend& (0+255),b
  4993  000D96  0100               	movlb	0	; () banked
  4994  000D98  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  4995  000D9A  0100               	movlb	0	; () banked
  4996  000D9C  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  4997  000D9E  0100               	movlb	0	; () banked
  4998  000DA0  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4999  000DA2  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5000  000DA6  0100               	movlb	0	; () banked
  5001  000DA8  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5002  000DAA  EC78  F010         	call	___awmod	;wreg free
  5003  000DAE  C060  F06E         	movff	?___awmod,??_ListeningPattern+4
  5004  000DB2  C061  F06F         	movff	?___awmod+1,??_ListeningPattern+5
  5005  000DB6  0100               	movlb	0	; () banked
  5006  000DB8  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  5007  000DBA  0100               	movlb	0	; () banked
  5008  000DBC  6F70               	movwf	(??_ListeningPattern+6)& (0+255),b
  5009  000DBE  6B71               	clrf	(??_ListeningPattern+7)& (0+255),b
  5010  000DC0  0100               	movlb	0	; () banked
  5011  000DC2  1F70               	comf	(??_ListeningPattern+6)& (0+255),f,b
  5012  000DC4  1F71               	comf	(??_ListeningPattern+7)& (0+255),f,b
  5013  000DC6  4B70               	infsnz	(??_ListeningPattern+6)& (0+255),f,b
  5014  000DC8  2B71               	incf	(??_ListeningPattern+7)& (0+255),f,b
  5015  000DCA  0100               	movlb	0	; () banked
  5016  000DCC  5181               	movf	ListeningPattern@head& (0+255),w,b
  5017  000DCE  C0E3  F072         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+8
  5018  000DD2  0100               	movlb	0	; () banked
  5019  000DD4  6B73               	clrf	(??_ListeningPattern+9)& (0+255),b
  5020  000DD6  0100               	movlb	0	; () banked
  5021  000DD8  2772               	addwf	(??_ListeningPattern+8)& (0+255),f,b
  5022  000DDA  0E00               	movlw	0
  5023  000DDC  2373               	addwfc	(??_ListeningPattern+9)& (0+255),f,b
  5024  000DDE  0100               	movlb	0	; () banked
  5025  000DE0  5170               	movf	(??_ListeningPattern+6)& (0+255),w,b
  5026  000DE2  0100               	movlb	0	; () banked
  5027  000DE4  2572               	addwf	(??_ListeningPattern+8)& (0+255),w,b
  5028  000DE6  0100               	movlb	0	; () banked
  5029  000DE8  6F60               	movwf	___awmod@dividend& (0+255),b
  5030  000DEA  0100               	movlb	0	; () banked
  5031  000DEC  5171               	movf	(??_ListeningPattern+7)& (0+255),w,b
  5032  000DEE  0100               	movlb	0	; () banked
  5033  000DF0  2173               	addwfc	(??_ListeningPattern+9)& (0+255),w,b
  5034  000DF2  0100               	movlb	0	; () banked
  5035  000DF4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5036  000DF6  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5037  000DFA  0100               	movlb	0	; () banked
  5038  000DFC  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5039  000DFE  EC78  F010         	call	___awmod	;wreg free
  5040  000E02  0100               	movlb	0	; () banked
  5041  000E04  5160               	movf	?___awmod& (0+255),w,b
  5042  000E06  0100               	movlb	0	; () banked
  5043  000E08  5D6E               	subwf	(??_ListeningPattern+4)& (0+255),w,b
  5044  000E0A  0100               	movlb	0	; () banked
  5045  000E0C  516F               	movf	(??_ListeningPattern+5)& (0+255),w,b
  5046  000E0E  0A80               	xorlw	128
  5047  000E10  0100               	movlb	0	; () banked
  5048  000E12  6F74               	movwf	(??_ListeningPattern+10)& (0+255),b
  5049  000E14  0100               	movlb	0	; () banked
  5050  000E16  5161               	movf	(?___awmod+1)& (0+255),w,b
  5051  000E18  0A80               	xorlw	128
  5052  000E1A  0100               	movlb	0	; () banked
  5053  000E1C  5974               	subwfb	(??_ListeningPattern+10)& (0+255),w,b
  5054  000E1E  A0D8               	btfss	status,0,c
  5055  000E20  D027               	goto	l3213
  5056                           
  5057                           ; BSR set to: 0
  5058  000E22  0100               	movlb	0	; () banked
  5059  000E24  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  5060  000E26  0100               	movlb	0	; () banked
  5061  000E28  6F6A               	movwf	??_ListeningPattern& (0+255),b
  5062  000E2A  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  5063  000E2C  0100               	movlb	0	; () banked
  5064  000E2E  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  5065  000E30  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  5066  000E32  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  5067  000E34  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  5068  000E36  0100               	movlb	0	; () banked
  5069  000E38  5181               	movf	ListeningPattern@head& (0+255),w,b
  5070  000E3A  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  5071  000E3E  0100               	movlb	0	; () banked
  5072  000E40  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  5073  000E42  0100               	movlb	0	; () banked
  5074  000E44  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  5075  000E46  0E00               	movlw	0
  5076  000E48  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  5077  000E4A  0100               	movlb	0	; () banked
  5078  000E4C  516A               	movf	??_ListeningPattern& (0+255),w,b
  5079  000E4E  0100               	movlb	0	; () banked
  5080  000E50  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  5081  000E52  0100               	movlb	0	; () banked
  5082  000E54  6F60               	movwf	___awmod@dividend& (0+255),b
  5083  000E56  0100               	movlb	0	; () banked
  5084  000E58  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  5085  000E5A  0100               	movlb	0	; () banked
  5086  000E5C  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  5087  000E5E  0100               	movlb	0	; () banked
  5088  000E60  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5089  000E62  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5090  000E66  0100               	movlb	0	; () banked
  5091  000E68  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5092  000E6A  EC78  F010         	call	___awmod	;wreg free
  5093  000E6E  D026               	goto	L14
  5094  000E70                     l3213:
  5095  000E70  0100               	movlb	0	; () banked
  5096  000E72  5181               	movf	ListeningPattern@head& (0+255),w,b
  5097  000E74  0100               	movlb	0	; () banked
  5098  000E76  6F6A               	movwf	??_ListeningPattern& (0+255),b
  5099  000E78  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  5100  000E7A  0100               	movlb	0	; () banked
  5101  000E7C  1F6A               	comf	??_ListeningPattern& (0+255),f,b
  5102  000E7E  1F6B               	comf	(??_ListeningPattern+1)& (0+255),f,b
  5103  000E80  4B6A               	infsnz	??_ListeningPattern& (0+255),f,b
  5104  000E82  2B6B               	incf	(??_ListeningPattern+1)& (0+255),f,b
  5105  000E84  0100               	movlb	0	; () banked
  5106  000E86  5168               	movf	ListeningPattern@pixel& (0+255),w,b
  5107  000E88  C0E3  F06C         	movff	Pattern_RGBPatterns@Length,??_ListeningPattern+2
  5108  000E8C  0100               	movlb	0	; () banked
  5109  000E8E  6B6D               	clrf	(??_ListeningPattern+3)& (0+255),b
  5110  000E90  0100               	movlb	0	; () banked
  5111  000E92  276C               	addwf	(??_ListeningPattern+2)& (0+255),f,b
  5112  000E94  0E00               	movlw	0
  5113  000E96  236D               	addwfc	(??_ListeningPattern+3)& (0+255),f,b
  5114  000E98  0100               	movlb	0	; () banked
  5115  000E9A  516A               	movf	??_ListeningPattern& (0+255),w,b
  5116  000E9C  0100               	movlb	0	; () banked
  5117  000E9E  256C               	addwf	(??_ListeningPattern+2)& (0+255),w,b
  5118  000EA0  0100               	movlb	0	; () banked
  5119  000EA2  6F60               	movwf	___awmod@dividend& (0+255),b
  5120  000EA4  0100               	movlb	0	; () banked
  5121  000EA6  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  5122  000EA8  0100               	movlb	0	; () banked
  5123  000EAA  216D               	addwfc	(??_ListeningPattern+3)& (0+255),w,b
  5124  000EAC  0100               	movlb	0	; () banked
  5125  000EAE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5126  000EB0  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5127  000EB4  0100               	movlb	0	; () banked
  5128  000EB6  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5129  000EB8  EC78  F010         	call	___awmod	;wreg free
  5130  000EBC                     L14:
  5131  000EBC  C060  F078         	movff	?___awmod,_ListeningPattern$755
  5132  000EC0  C061  F079         	movff	?___awmod+1,_ListeningPattern$755+1
  5133  000EC4  C078  F07F         	movff	_ListeningPattern$755,ListeningPattern@x
  5134                           
  5135                           ;Pattern_RGBPatterns.c: 288: val = (x < y ? 0x0F-x*0x0F/y : 0x00);
  5136  000EC8  0100               	movlb	0	; () banked
  5137  000ECA  5180               	movf	ListeningPattern@y& (0+255),w,b
  5138  000ECC  0100               	movlb	0	; () banked
  5139  000ECE  5D7F               	subwf	ListeningPattern@x& (0+255),w,b
  5140  000ED0  A0D8               	btfss	status,0,c
  5141  000ED2  D006               	goto	l3221
  5142                           
  5143                           ; BSR set to: 0
  5144  000ED4  0E00               	movlw	0
  5145  000ED6  0100               	movlb	0	; () banked
  5146  000ED8  6F7B               	movwf	(_ListeningPattern$756+1)& (0+255),b
  5147  000EDA  0E00               	movlw	0
  5148  000EDC  6F7A               	movwf	_ListeningPattern$756& (0+255),b
  5149  000EDE  D01E               	goto	l3223
  5150  000EE0                     l3221:
  5151                           
  5152                           ; BSR set to: 0
  5153  000EE0  0100               	movlb	0	; () banked
  5154  000EE2  517F               	movf	ListeningPattern@x& (0+255),w,b
  5155  000EE4  0D0F               	mullw	15
  5156  000EE6  CFF3 F060          	movff	prodl,___awdiv@dividend
  5157  000EEA  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5158  000EEE  C080  F062         	movff	ListeningPattern@y,___awdiv@divisor
  5159  000EF2  0100               	movlb	0	; () banked
  5160  000EF4  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5161  000EF6  ECC1  F00E         	call	___awdiv	;wreg free
  5162  000EFA  0100               	movlb	0	; () banked
  5163  000EFC  1F60               	comf	?___awdiv& (0+255),f,b
  5164  000EFE  0100               	movlb	0	; () banked
  5165  000F00  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5166  000F02  0100               	movlb	0	; () banked
  5167  000F04  4B60               	infsnz	?___awdiv& (0+255),f,b
  5168  000F06  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5169  000F08  0E0F               	movlw	15
  5170  000F0A  0100               	movlb	0	; () banked
  5171  000F0C  2560               	addwf	?___awdiv& (0+255),w,b
  5172  000F0E  0100               	movlb	0	; () banked
  5173  000F10  6F7A               	movwf	_ListeningPattern$756& (0+255),b
  5174  000F12  0E00               	movlw	0
  5175  000F14  0100               	movlb	0	; () banked
  5176  000F16  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5177  000F18  0100               	movlb	0	; () banked
  5178  000F1A  6F7B               	movwf	(_ListeningPattern$756+1)& (0+255),b
  5179  000F1C                     l3223:
  5180                           
  5181                           ; BSR set to: 0
  5182  000F1C  C07A  F07D         	movff	_ListeningPattern$756,ListeningPattern@val
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;Pattern_RGBPatterns.c: 290: pixelHSV = ((uint16_t)hue<<8) | (sat<<4) | val;
  5186  000F20  0100               	movlb	0	; () banked
  5187  000F22  517C               	movf	ListeningPattern@sat& (0+255),w,b
  5188  000F24  0100               	movlb	0	; () banked
  5189  000F26  6F6A               	movwf	??_ListeningPattern& (0+255),b
  5190  000F28  6B6B               	clrf	(??_ListeningPattern+1)& (0+255),b
  5191  000F2A  0100               	movlb	0	; () banked
  5192  000F2C  3B6A               	swapf	??_ListeningPattern& (0+255),f,b
  5193  000F2E  3B6B               	swapf	(??_ListeningPattern+1)& (0+255),f,b
  5194  000F30  0EF0               	movlw	240
  5195  000F32  176B               	andwf	(??_ListeningPattern+1)& (0+255),f,b
  5196  000F34  516A               	movf	??_ListeningPattern& (0+255),w,b
  5197  000F36  0B0F               	andlw	15
  5198  000F38  136B               	iorwf	(??_ListeningPattern+1)& (0+255),f,b
  5199  000F3A  0EF0               	movlw	240
  5200  000F3C  176A               	andwf	??_ListeningPattern& (0+255),f,b
  5201  000F3E  0100               	movlb	0	; () banked
  5202  000F40  517E               	movf	ListeningPattern@hue& (0+255),w,b
  5203  000F42  0100               	movlb	0	; () banked
  5204  000F44  6F6D               	movwf	(??_ListeningPattern+3)& (0+255),b
  5205  000F46  6B6C               	clrf	(??_ListeningPattern+2)& (0+255),b
  5206  000F48  0100               	movlb	0	; () banked
  5207  000F4A  516A               	movf	??_ListeningPattern& (0+255),w,b
  5208  000F4C  0100               	movlb	0	; () banked
  5209  000F4E  136C               	iorwf	(??_ListeningPattern+2)& (0+255),f,b
  5210  000F50  0100               	movlb	0	; () banked
  5211  000F52  516B               	movf	(??_ListeningPattern+1)& (0+255),w,b
  5212  000F54  0100               	movlb	0	; () banked
  5213  000F56  136D               	iorwf	(??_ListeningPattern+3)& (0+255),f,b
  5214  000F58  0100               	movlb	0	; () banked
  5215  000F5A  517D               	movf	ListeningPattern@val& (0+255),w,b
  5216  000F5C  0100               	movlb	0	; () banked
  5217  000F5E  116C               	iorwf	(??_ListeningPattern+2)& (0+255),w,b
  5218  000F60  0100               	movlb	0	; () banked
  5219  000F62  6F75               	movwf	ListeningPattern@pixelHSV& (0+255),b
  5220  000F64  0100               	movlb	0	; () banked
  5221  000F66  516D               	movf	(??_ListeningPattern+3)& (0+255),w,b
  5222  000F68  0100               	movlb	0	; () banked
  5223  000F6A  6F76               	movwf	(ListeningPattern@pixelHSV+1)& (0+255),b
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;Pattern_RGBPatterns.c: 292: return pixelHSV;
  5227  000F6C  C075  F068         	movff	ListeningPattern@pixelHSV,?_ListeningPattern
  5228  000F70  C076  F069         	movff	ListeningPattern@pixelHSV+1,?_ListeningPattern+1
  5229  000F74  0012               	return	
  5230  000F76                     __end_of_ListeningPattern:
  5231                           	opt stack 0
  5232                           tosu	equ	0xFFF
  5233                           tosh	equ	0xFFE
  5234                           tosl	equ	0xFFD
  5235                           pclath	equ	0xFFA
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _IdlePattern *****************
  5255 ;; Defined at:
  5256 ;;		line 230 in file "Pattern_RGBPatterns.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  pattern         1    wreg     unsigned char 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  pattern         1    0[COMRAM] unsigned char 
  5261 ;;  i               1   31[BANK0 ] unsigned char 
  5262 ;;  x               1   30[BANK0 ] unsigned char 
  5263 ;;  pulseWidth      1   29[BANK0 ] unsigned char 
  5264 ;;  hue             1   28[BANK0 ] unsigned char 
  5265 ;;  val             1   27[BANK0 ] unsigned char 
  5266 ;;  sat             1   26[BANK0 ] unsigned char 
  5267 ;;  fade_thresh     1   25[BANK0 ] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5277 ;;      Params:         0       0       0       0
  5278 ;;      Locals:         0      15       0       0
  5279 ;;      Temps:          0       9       0       0
  5280 ;;      Totals:         0      24       0       0
  5281 ;;Total ram usage:       24 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    8
  5284 ;; This function calls:
  5285 ;;		___awdiv
  5286 ;;		___awmod
  5287 ;; This function is called by:
  5288 ;;		_UpdatePattern
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text20
  5293  000816                     __ptext20:
  5294                           	opt stack 0
  5295  000816                     _IdlePattern:
  5296                           	opt stack 18
  5297                           
  5298                           ;Pattern_RGBPatterns.c: 231: static bool rising = 1;
  5299                           ;Pattern_RGBPatterns.c: 232: uint8_t fade_thresh = 10;
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;incstack = 0
  5303  000816  0E0A               	movlw	10
  5304  000818  0100               	movlb	0	; () banked
  5305  00081A  6F79               	movwf	IdlePattern@fade_thresh& (0+255),b
  5306                           
  5307                           ;Pattern_RGBPatterns.c: 233: uint8_t sat, val, hue, x, pulseWidth;
  5308                           ;Pattern_RGBPatterns.c: 235: hue = 135;
  5309  00081C  0E87               	movlw	135
  5310  00081E  0100               	movlb	0	; () banked
  5311  000820  6F7C               	movwf	IdlePattern@hue& (0+255),b
  5312                           
  5313                           ;Pattern_RGBPatterns.c: 236: sat = 4;
  5314  000822  0E04               	movlw	4
  5315  000824  0100               	movlb	0	; () banked
  5316  000826  6F7A               	movwf	IdlePattern@sat& (0+255),b
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;Pattern_RGBPatterns.c: 240: pulseWidth = 15;
  5320                           
  5321                           ; BSR set to: 0
  5322                           
  5323                           ;Pattern_RGBPatterns.c: 239: default:
  5324                           
  5325                           ;Pattern_RGBPatterns.c: 238: switch(pattern){
  5326  000828  0E0F               	movlw	15
  5327  00082A  0100               	movlb	0	; () banked
  5328  00082C  6F7D               	movwf	IdlePattern@pulseWidth& (0+255),b
  5329                           
  5330                           ;Pattern_RGBPatterns.c: 241: for(uint8_t i=0;i<Length;i++){
  5331  00082E  0E00               	movlw	0
  5332  000830  0100               	movlb	0	; () banked
  5333  000832  6F7F               	movwf	IdlePattern@i& (0+255),b
  5334  000834  D122               	goto	l3127
  5335  000836                     l3101:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;Pattern_RGBPatterns.c: 243: x = ((((Length+i-37)%Length) < ((Length+37-i)%Length)) ? ((
      +                          Length+i-37)%Length) : ((Length+37-i)%Length));
  5339  000836  0100               	movlb	0	; () banked
  5340  000838  517F               	movf	IdlePattern@i& (0+255),w,b
  5341  00083A  C0E3  F068         	movff	Pattern_RGBPatterns@Length,??_IdlePattern
  5342  00083E  0100               	movlb	0	; () banked
  5343  000840  6B69               	clrf	(??_IdlePattern+1)& (0+255),b
  5344  000842  0100               	movlb	0	; () banked
  5345  000844  2768               	addwf	??_IdlePattern& (0+255),f,b
  5346  000846  0E00               	movlw	0
  5347  000848  2369               	addwfc	(??_IdlePattern+1)& (0+255),f,b
  5348  00084A  0EDB               	movlw	219
  5349  00084C  0100               	movlb	0	; () banked
  5350  00084E  2568               	addwf	??_IdlePattern& (0+255),w,b
  5351  000850  0100               	movlb	0	; () banked
  5352  000852  6F60               	movwf	___awmod@dividend& (0+255),b
  5353  000854  0EFF               	movlw	255
  5354  000856  0100               	movlb	0	; () banked
  5355  000858  2169               	addwfc	(??_IdlePattern+1)& (0+255),w,b
  5356  00085A  0100               	movlb	0	; () banked
  5357  00085C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5358  00085E  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5359  000862  0100               	movlb	0	; () banked
  5360  000864  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5361  000866  EC78  F010         	call	___awmod	;wreg free
  5362  00086A  C060  F06A         	movff	?___awmod,??_IdlePattern+2
  5363  00086E  C061  F06B         	movff	?___awmod+1,??_IdlePattern+3
  5364  000872  0100               	movlb	0	; () banked
  5365  000874  517F               	movf	IdlePattern@i& (0+255),w,b
  5366  000876  0100               	movlb	0	; () banked
  5367  000878  6F6C               	movwf	(??_IdlePattern+4)& (0+255),b
  5368  00087A  6B6D               	clrf	(??_IdlePattern+5)& (0+255),b
  5369  00087C  0100               	movlb	0	; () banked
  5370  00087E  1F6C               	comf	(??_IdlePattern+4)& (0+255),f,b
  5371  000880  1F6D               	comf	(??_IdlePattern+5)& (0+255),f,b
  5372  000882  4B6C               	infsnz	(??_IdlePattern+4)& (0+255),f,b
  5373  000884  2B6D               	incf	(??_IdlePattern+5)& (0+255),f,b
  5374  000886  0100               	movlb	0	; () banked
  5375  000888  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  5376  00088A  0100               	movlb	0	; () banked
  5377  00088C  6F6E               	movwf	(??_IdlePattern+6)& (0+255),b
  5378  00088E  6B6F               	clrf	(??_IdlePattern+7)& (0+255),b
  5379  000890  0100               	movlb	0	; () banked
  5380  000892  516C               	movf	(??_IdlePattern+4)& (0+255),w,b
  5381  000894  0100               	movlb	0	; () banked
  5382  000896  276E               	addwf	(??_IdlePattern+6)& (0+255),f,b
  5383  000898  0100               	movlb	0	; () banked
  5384  00089A  516D               	movf	(??_IdlePattern+5)& (0+255),w,b
  5385  00089C  0100               	movlb	0	; () banked
  5386  00089E  236F               	addwfc	(??_IdlePattern+7)& (0+255),f,b
  5387  0008A0  0E25               	movlw	37
  5388  0008A2  0100               	movlb	0	; () banked
  5389  0008A4  256E               	addwf	(??_IdlePattern+6)& (0+255),w,b
  5390  0008A6  0100               	movlb	0	; () banked
  5391  0008A8  6F60               	movwf	___awmod@dividend& (0+255),b
  5392  0008AA  0E00               	movlw	0
  5393  0008AC  0100               	movlb	0	; () banked
  5394  0008AE  216F               	addwfc	(??_IdlePattern+7)& (0+255),w,b
  5395  0008B0  0100               	movlb	0	; () banked
  5396  0008B2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5397  0008B4  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5398  0008B8  0100               	movlb	0	; () banked
  5399  0008BA  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5400  0008BC  EC78  F010         	call	___awmod	;wreg free
  5401  0008C0  0100               	movlb	0	; () banked
  5402  0008C2  5160               	movf	?___awmod& (0+255),w,b
  5403  0008C4  0100               	movlb	0	; () banked
  5404  0008C6  5D6A               	subwf	(??_IdlePattern+2)& (0+255),w,b
  5405  0008C8  0100               	movlb	0	; () banked
  5406  0008CA  516B               	movf	(??_IdlePattern+3)& (0+255),w,b
  5407  0008CC  0A80               	xorlw	128
  5408  0008CE  0100               	movlb	0	; () banked
  5409  0008D0  6F70               	movwf	(??_IdlePattern+8)& (0+255),b
  5410  0008D2  0100               	movlb	0	; () banked
  5411  0008D4  5161               	movf	(?___awmod+1)& (0+255),w,b
  5412  0008D6  0A80               	xorlw	128
  5413  0008D8  0100               	movlb	0	; () banked
  5414  0008DA  5970               	subwfb	(??_IdlePattern+8)& (0+255),w,b
  5415  0008DC  A0D8               	btfss	status,0,c
  5416  0008DE  D028               	goto	l3105
  5417                           
  5418                           ; BSR set to: 0
  5419  0008E0  0100               	movlb	0	; () banked
  5420  0008E2  517F               	movf	IdlePattern@i& (0+255),w,b
  5421  0008E4  0100               	movlb	0	; () banked
  5422  0008E6  6F68               	movwf	??_IdlePattern& (0+255),b
  5423  0008E8  6B69               	clrf	(??_IdlePattern+1)& (0+255),b
  5424  0008EA  0100               	movlb	0	; () banked
  5425  0008EC  1F68               	comf	??_IdlePattern& (0+255),f,b
  5426  0008EE  1F69               	comf	(??_IdlePattern+1)& (0+255),f,b
  5427  0008F0  4B68               	infsnz	??_IdlePattern& (0+255),f,b
  5428  0008F2  2B69               	incf	(??_IdlePattern+1)& (0+255),f,b
  5429  0008F4  0100               	movlb	0	; () banked
  5430  0008F6  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  5431  0008F8  0100               	movlb	0	; () banked
  5432  0008FA  6F6A               	movwf	(??_IdlePattern+2)& (0+255),b
  5433  0008FC  6B6B               	clrf	(??_IdlePattern+3)& (0+255),b
  5434  0008FE  0100               	movlb	0	; () banked
  5435  000900  5168               	movf	??_IdlePattern& (0+255),w,b
  5436  000902  0100               	movlb	0	; () banked
  5437  000904  276A               	addwf	(??_IdlePattern+2)& (0+255),f,b
  5438  000906  0100               	movlb	0	; () banked
  5439  000908  5169               	movf	(??_IdlePattern+1)& (0+255),w,b
  5440  00090A  0100               	movlb	0	; () banked
  5441  00090C  236B               	addwfc	(??_IdlePattern+3)& (0+255),f,b
  5442  00090E  0E25               	movlw	37
  5443  000910  0100               	movlb	0	; () banked
  5444  000912  256A               	addwf	(??_IdlePattern+2)& (0+255),w,b
  5445  000914  0100               	movlb	0	; () banked
  5446  000916  6F60               	movwf	___awmod@dividend& (0+255),b
  5447  000918  0E00               	movlw	0
  5448  00091A  0100               	movlb	0	; () banked
  5449  00091C  216B               	addwfc	(??_IdlePattern+3)& (0+255),w,b
  5450  00091E  0100               	movlb	0	; () banked
  5451  000920  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5452  000922  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5453  000926  0100               	movlb	0	; () banked
  5454  000928  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5455  00092A  EC78  F010         	call	___awmod	;wreg free
  5456  00092E  D01A               	goto	L15
  5457  000930                     l3105:
  5458  000930  0100               	movlb	0	; () banked
  5459  000932  517F               	movf	IdlePattern@i& (0+255),w,b
  5460  000934  C0E3  F068         	movff	Pattern_RGBPatterns@Length,??_IdlePattern
  5461  000938  0100               	movlb	0	; () banked
  5462  00093A  6B69               	clrf	(??_IdlePattern+1)& (0+255),b
  5463  00093C  0100               	movlb	0	; () banked
  5464  00093E  2768               	addwf	??_IdlePattern& (0+255),f,b
  5465  000940  0E00               	movlw	0
  5466  000942  2369               	addwfc	(??_IdlePattern+1)& (0+255),f,b
  5467  000944  0EDB               	movlw	219
  5468  000946  0100               	movlb	0	; () banked
  5469  000948  2568               	addwf	??_IdlePattern& (0+255),w,b
  5470  00094A  0100               	movlb	0	; () banked
  5471  00094C  6F60               	movwf	___awmod@dividend& (0+255),b
  5472  00094E  0EFF               	movlw	255
  5473  000950  0100               	movlb	0	; () banked
  5474  000952  2169               	addwfc	(??_IdlePattern+1)& (0+255),w,b
  5475  000954  0100               	movlb	0	; () banked
  5476  000956  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5477  000958  C0E3  F062         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  5478  00095C  0100               	movlb	0	; () banked
  5479  00095E  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  5480  000960  EC78  F010         	call	___awmod	;wreg free
  5481  000964                     L15:
  5482  000964  C060  F071         	movff	?___awmod,_IdlePattern$728
  5483  000968  C061  F072         	movff	?___awmod+1,_IdlePattern$728+1
  5484  00096C  C071  F07E         	movff	_IdlePattern$728,IdlePattern@x
  5485                           
  5486                           ;Pattern_RGBPatterns.c: 244: val = (x < fade_thresh ? (PatternStepCounter>>4) : (x < pul
      +                          seWidth ? (PatternStepCounter-PatternStepCounter*x/pulseWidth)>>4 : 0x00));
  5487  000970  0100               	movlb	0	; () banked
  5488  000972  5179               	movf	IdlePattern@fade_thresh& (0+255),w,b
  5489  000974  0100               	movlb	0	; () banked
  5490  000976  5D7E               	subwf	IdlePattern@x& (0+255),w,b
  5491  000978  A0D8               	btfss	status,0,c
  5492  00097A  D041               	goto	l3119
  5493                           
  5494                           ; BSR set to: 0
  5495  00097C  0100               	movlb	0	; () banked
  5496  00097E  517D               	movf	IdlePattern@pulseWidth& (0+255),w,b
  5497  000980  0100               	movlb	0	; () banked
  5498  000982  5D7E               	subwf	IdlePattern@x& (0+255),w,b
  5499  000984  A0D8               	btfss	status,0,c
  5500  000986  D006               	goto	l3115
  5501                           
  5502                           ; BSR set to: 0
  5503  000988  0E00               	movlw	0
  5504  00098A  0100               	movlb	0	; () banked
  5505  00098C  6F76               	movwf	(_IdlePattern$730+1)& (0+255),b
  5506  00098E  0E00               	movlw	0
  5507  000990  6F75               	movwf	_IdlePattern$730& (0+255),b
  5508  000992  D030               	goto	l3117
  5509  000994                     l3115:
  5510                           
  5511                           ; BSR set to: 0
  5512  000994  0100               	movlb	0	; () banked
  5513  000996  51EB               	movf	_PatternStepCounter& (0+255),w,b
  5514  000998  0100               	movlb	0	; () banked
  5515  00099A  037E               	mulwf	IdlePattern@x& (0+255),b
  5516  00099C  CFF3 F060          	movff	prodl,___awdiv@dividend
  5517  0009A0  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5518  0009A4  C07D  F062         	movff	IdlePattern@pulseWidth,___awdiv@divisor
  5519  0009A8  0100               	movlb	0	; () banked
  5520  0009AA  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5521  0009AC  ECC1  F00E         	call	___awdiv	;wreg free
  5522  0009B0  0100               	movlb	0	; () banked
  5523  0009B2  1F60               	comf	?___awdiv& (0+255),f,b
  5524  0009B4  0100               	movlb	0	; () banked
  5525  0009B6  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5526  0009B8  0100               	movlb	0	; () banked
  5527  0009BA  4B60               	infsnz	?___awdiv& (0+255),f,b
  5528  0009BC  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5529  0009BE  0100               	movlb	0	; () banked
  5530  0009C0  51EB               	movf	_PatternStepCounter& (0+255),w,b
  5531  0009C2  0100               	movlb	0	; () banked
  5532  0009C4  6F68               	movwf	??_IdlePattern& (0+255),b
  5533  0009C6  6B69               	clrf	(??_IdlePattern+1)& (0+255),b
  5534  0009C8  0100               	movlb	0	; () banked
  5535  0009CA  5160               	movf	?___awdiv& (0+255),w,b
  5536  0009CC  0100               	movlb	0	; () banked
  5537  0009CE  2768               	addwf	??_IdlePattern& (0+255),f,b
  5538  0009D0  0100               	movlb	0	; () banked
  5539  0009D2  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5540  0009D4  0100               	movlb	0	; () banked
  5541  0009D6  2369               	addwfc	(??_IdlePattern+1)& (0+255),f,b
  5542  0009D8  0E04               	movlw	4
  5543  0009DA  0100               	movlb	0	; () banked
  5544  0009DC  6F6A               	movwf	(??_IdlePattern+2)& (0+255),b
  5545  0009DE                     u1835:
  5546  0009DE  0100               	movlb	0	; () banked
  5547  0009E0  3569               	rlcf	(??_IdlePattern+1)& (0+255),w,b
  5548  0009E2  3369               	rrcf	(??_IdlePattern+1)& (0+255),f,b
  5549  0009E4  3368               	rrcf	??_IdlePattern& (0+255),f,b
  5550  0009E6  0100               	movlb	0	; () banked
  5551  0009E8  2F6A               	decfsz	(??_IdlePattern+2)& (0+255),f,b
  5552  0009EA  D7F9               	goto	u1835
  5553  0009EC  C068  F075         	movff	??_IdlePattern,_IdlePattern$730
  5554  0009F0  C069  F076         	movff	??_IdlePattern+1,_IdlePattern$730+1
  5555  0009F4                     l3117:
  5556                           
  5557                           ; BSR set to: 0
  5558  0009F4  C075  F073         	movff	_IdlePattern$730,_IdlePattern$729
  5559  0009F8  C076  F074         	movff	_IdlePattern$730+1,_IdlePattern$729+1
  5560  0009FC  D00B               	goto	l3121
  5561  0009FE                     l3119:
  5562                           
  5563                           ; BSR set to: 0
  5564  0009FE  C0EB  F068         	movff	_PatternStepCounter,??_IdlePattern
  5565  000A02  0100               	movlb	0	; () banked
  5566  000A04  3B68               	swapf	??_IdlePattern& (0+255),f,b
  5567  000A06  0E0F               	movlw	15
  5568  000A08  1768               	andwf	??_IdlePattern& (0+255),f,b
  5569  000A0A  0100               	movlb	0	; () banked
  5570  000A0C  5168               	movf	??_IdlePattern& (0+255),w,b
  5571  000A0E  0100               	movlb	0	; () banked
  5572  000A10  6F73               	movwf	_IdlePattern$729& (0+255),b
  5573  000A12  6B74               	clrf	(_IdlePattern$729+1)& (0+255),b
  5574  000A14                     l3121:
  5575                           
  5576                           ; BSR set to: 0
  5577  000A14  C073  F07B         	movff	_IdlePattern$729,IdlePattern@val
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;Pattern_RGBPatterns.c: 245: PixelPattern[i] = ((uint16_t)hue<<8) | (sat<<4) | val;
  5581  000A18  0100               	movlb	0	; () banked
  5582  000A1A  517A               	movf	IdlePattern@sat& (0+255),w,b
  5583  000A1C  0100               	movlb	0	; () banked
  5584  000A1E  6F68               	movwf	??_IdlePattern& (0+255),b
  5585  000A20  6B69               	clrf	(??_IdlePattern+1)& (0+255),b
  5586  000A22  0100               	movlb	0	; () banked
  5587  000A24  3B68               	swapf	??_IdlePattern& (0+255),f,b
  5588  000A26  3B69               	swapf	(??_IdlePattern+1)& (0+255),f,b
  5589  000A28  0EF0               	movlw	240
  5590  000A2A  1769               	andwf	(??_IdlePattern+1)& (0+255),f,b
  5591  000A2C  5168               	movf	??_IdlePattern& (0+255),w,b
  5592  000A2E  0B0F               	andlw	15
  5593  000A30  1369               	iorwf	(??_IdlePattern+1)& (0+255),f,b
  5594  000A32  0EF0               	movlw	240
  5595  000A34  1768               	andwf	??_IdlePattern& (0+255),f,b
  5596  000A36  0100               	movlb	0	; () banked
  5597  000A38  517C               	movf	IdlePattern@hue& (0+255),w,b
  5598  000A3A  0100               	movlb	0	; () banked
  5599  000A3C  6F6B               	movwf	(??_IdlePattern+3)& (0+255),b
  5600  000A3E  6B6A               	clrf	(??_IdlePattern+2)& (0+255),b
  5601  000A40  0100               	movlb	0	; () banked
  5602  000A42  5168               	movf	??_IdlePattern& (0+255),w,b
  5603  000A44  0100               	movlb	0	; () banked
  5604  000A46  136A               	iorwf	(??_IdlePattern+2)& (0+255),f,b
  5605  000A48  0100               	movlb	0	; () banked
  5606  000A4A  5169               	movf	(??_IdlePattern+1)& (0+255),w,b
  5607  000A4C  0100               	movlb	0	; () banked
  5608  000A4E  136B               	iorwf	(??_IdlePattern+3)& (0+255),f,b
  5609  000A50  0100               	movlb	0	; () banked
  5610  000A52  517B               	movf	IdlePattern@val& (0+255),w,b
  5611  000A54  0100               	movlb	0	; () banked
  5612  000A56  136A               	iorwf	(??_IdlePattern+2)& (0+255),f,b
  5613  000A58  0E00               	movlw	0
  5614  000A5A  136B               	iorwf	(??_IdlePattern+3)& (0+255),f,b
  5615  000A5C  0100               	movlb	0	; () banked
  5616  000A5E  517F               	movf	IdlePattern@i& (0+255),w,b
  5617  000A60  0D02               	mullw	2
  5618  000A62  0E20               	movlw	low _PixelPattern
  5619  000A64  24F3               	addwf	prodl,w,c
  5620  000A66  6ED9               	movwf	fsr2l,c
  5621  000A68  0E01               	movlw	high _PixelPattern
  5622  000A6A  20F4               	addwfc	prodh,w,c
  5623  000A6C  6EDA               	movwf	fsr2h,c
  5624  000A6E  C06A  FFDE         	movff	??_IdlePattern+2,postinc2
  5625  000A72  C06B  FFDD         	movff	??_IdlePattern+3,postdec2
  5626                           
  5627                           ; BSR set to: 0
  5628  000A76  0100               	movlb	0	; () banked
  5629  000A78  2B7F               	incf	IdlePattern@i& (0+255),f,b
  5630  000A7A                     l3127:
  5631                           
  5632                           ; BSR set to: 0
  5633  000A7A  0100               	movlb	0	; () banked
  5634  000A7C  51E3               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  5635  000A7E  0100               	movlb	0	; () banked
  5636  000A80  5D7F               	subwf	IdlePattern@i& (0+255),w,b
  5637  000A82  A0D8               	btfss	status,0,c
  5638  000A84  D6D8               	goto	l3101
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;Pattern_RGBPatterns.c: 246: }
  5642                           ;Pattern_RGBPatterns.c: 247: if(PatternStepCounter == 255){
  5643                           
  5644                           ; BSR set to: 0
  5645  000A86  0100               	movlb	0	; () banked
  5646  000A88  29EB               	incf	_PatternStepCounter& (0+255),w,b
  5647  000A8A  A4D8               	btfss	status,2,c
  5648  000A8C  D002               	goto	l3133
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;Pattern_RGBPatterns.c: 248: rising = 0;
  5652  000A8E  0E00               	movlw	0
  5653  000A90  D005               	goto	L16
  5654  000A92                     l3133:
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;Pattern_RGBPatterns.c: 250: else if(PatternStepCounter == 0){
  5658  000A92  0100               	movlb	0	; () banked
  5659  000A94  51EB               	movf	_PatternStepCounter& (0+255),w,b
  5660  000A96  A4D8               	btfss	status,2,c
  5661  000A98  D003               	goto	l529
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;Pattern_RGBPatterns.c: 251: rising = 1;
  5665  000A9A  0E01               	movlw	1
  5666  000A9C                     L16:
  5667  000A9C  0100               	movlb	0	; () banked
  5668  000A9E  6FF1               	movwf	IdlePattern@rising& (0+255),b
  5669  000AA0                     l529:
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;Pattern_RGBPatterns.c: 252: }
  5673                           ;Pattern_RGBPatterns.c: 253: PatternStepCounter = (rising ? PatternStepCounter+15 : Patt
      +                          ernStepCounter-15);
  5674  000AA0  0100               	movlb	0	; () banked
  5675  000AA2  51F1               	movf	IdlePattern@rising& (0+255),w,b
  5676  000AA4  0100               	movlb	0	; () banked
  5677  000AA6  A4D8               	btfss	status,2,c
  5678  000AA8  D009               	goto	l3139
  5679                           
  5680                           ; BSR set to: 0
  5681  000AAA  0EF1               	movlw	241
  5682  000AAC  0100               	movlb	0	; () banked
  5683  000AAE  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  5684  000AB0  0100               	movlb	0	; () banked
  5685  000AB2  6F77               	movwf	_IdlePattern$731& (0+255),b
  5686  000AB4  0100               	movlb	0	; () banked
  5687  000AB6  6B78               	clrf	(_IdlePattern$731+1)& (0+255),b
  5688  000AB8  0EFF               	movlw	255
  5689  000ABA  D008               	goto	L17
  5690  000ABC                     l3139:
  5691                           
  5692                           ; BSR set to: 0
  5693  000ABC  0E0F               	movlw	15
  5694  000ABE  0100               	movlb	0	; () banked
  5695  000AC0  25EB               	addwf	_PatternStepCounter& (0+255),w,b
  5696  000AC2  0100               	movlb	0	; () banked
  5697  000AC4  6F77               	movwf	_IdlePattern$731& (0+255),b
  5698  000AC6  0100               	movlb	0	; () banked
  5699  000AC8  6B78               	clrf	(_IdlePattern$731+1)& (0+255),b
  5700  000ACA  0E00               	movlw	0
  5701  000ACC                     L17:
  5702  000ACC  2378               	addwfc	(_IdlePattern$731+1)& (0+255),f,b
  5703                           
  5704                           ; BSR set to: 0
  5705                           
  5706                           ; BSR set to: 0
  5707  000ACE  C077  F0EB         	movff	_IdlePattern$731,_PatternStepCounter
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;Pattern_RGBPatterns.c: 255: }
  5711                           
  5712                           ;Pattern_RGBPatterns.c: 254: break;
  5713  000AD2  0012               	return	
  5714  000AD4                     __end_of_IdlePattern:
  5715                           	opt stack 0
  5716                           tosu	equ	0xFFF
  5717                           tosh	equ	0xFFE
  5718                           tosl	equ	0xFFD
  5719                           pclath	equ	0xFFA
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           postinc0	equ	0xFEE
  5727                           wreg	equ	0xFE8
  5728                           postdec1	equ	0xFE5
  5729                           fsr1h	equ	0xFE2
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function ___awdiv *****************
  5739 ;; Defined at:
  5740 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  dividend        2    0[BANK0 ] int 
  5743 ;;  divisor         2    2[BANK0 ] int 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  quotient        2    6[BANK0 ] int 
  5746 ;;  sign            1    5[BANK0 ] unsigned char 
  5747 ;;  counter         1    4[BANK0 ] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  2    0[BANK0 ] int 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5757 ;;      Params:         0       4       0       0
  5758 ;;      Locals:         0       4       0       0
  5759 ;;      Temps:          0       0       0       0
  5760 ;;      Totals:         0       8       0       0
  5761 ;;Total ram usage:        8 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    7
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_IdlePattern
  5768 ;;		_ThinkingPattern
  5769 ;;		_ListeningPattern
  5770 ;;		_SpeakingPattern
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text21
  5775  001D82                     __ptext21:
  5776                           	opt stack 0
  5777  001D82                     ___awdiv:
  5778                           	opt stack 18
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;incstack = 0
  5782  001D82  0E00               	movlw	0
  5783  001D84  0100               	movlb	0	; () banked
  5784  001D86  6F65               	movwf	___awdiv@sign& (0+255),b
  5785                           
  5786                           ; BSR set to: 0
  5787  001D88  0100               	movlb	0	; () banked
  5788  001D8A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5789  001D8C  D008               	goto	l2901
  5790                           
  5791                           ; BSR set to: 0
  5792  001D8E  0100               	movlb	0	; () banked
  5793  001D90  6D62               	negf	___awdiv@divisor& (0+255),b
  5794  001D92  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5795  001D94  B0D8               	btfsc	status,0,c
  5796  001D96  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5797                           
  5798                           ; BSR set to: 0
  5799  001D98  0E01               	movlw	1
  5800  001D9A  0100               	movlb	0	; () banked
  5801  001D9C  6F65               	movwf	___awdiv@sign& (0+255),b
  5802  001D9E                     l2901:
  5803                           
  5804                           ; BSR set to: 0
  5805  001D9E  0100               	movlb	0	; () banked
  5806  001DA0  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5807  001DA2  D008               	goto	l2907
  5808                           
  5809                           ; BSR set to: 0
  5810  001DA4  0100               	movlb	0	; () banked
  5811  001DA6  6D60               	negf	___awdiv@dividend& (0+255),b
  5812  001DA8  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5813  001DAA  B0D8               	btfsc	status,0,c
  5814  001DAC  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5815                           
  5816                           ; BSR set to: 0
  5817  001DAE  0E01               	movlw	1
  5818  001DB0  0100               	movlb	0	; () banked
  5819  001DB2  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5820  001DB4                     l2907:
  5821                           
  5822                           ; BSR set to: 0
  5823  001DB4  0E00               	movlw	0
  5824  001DB6  0100               	movlb	0	; () banked
  5825  001DB8  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5826  001DBA  0E00               	movlw	0
  5827  001DBC  6F66               	movwf	___awdiv@quotient& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830  001DBE  0100               	movlb	0	; () banked
  5831  001DC0  5162               	movf	___awdiv@divisor& (0+255),w,b
  5832  001DC2  0100               	movlb	0	; () banked
  5833  001DC4  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5834  001DC6  B4D8               	btfsc	status,2,c
  5835  001DC8  D02C               	goto	l2929
  5836                           
  5837                           ; BSR set to: 0
  5838  001DCA  0E01               	movlw	1
  5839  001DCC  0100               	movlb	0	; () banked
  5840  001DCE  6F64               	movwf	___awdiv@counter& (0+255),b
  5841  001DD0  D006               	goto	l2915
  5842  001DD2                     l2913:
  5843                           
  5844                           ; BSR set to: 0
  5845  001DD2  0100               	movlb	0	; () banked
  5846  001DD4  90D8               	bcf	status,0,c
  5847  001DD6  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5848  001DD8  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5849  001DDA  0100               	movlb	0	; () banked
  5850  001DDC  2B64               	incf	___awdiv@counter& (0+255),f,b
  5851  001DDE                     l2915:
  5852                           
  5853                           ; BSR set to: 0
  5854  001DDE  0100               	movlb	0	; () banked
  5855  001DE0  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5856  001DE2  D7F7               	goto	l2913
  5857  001DE4                     l2917:
  5858                           
  5859                           ; BSR set to: 0
  5860  001DE4  0100               	movlb	0	; () banked
  5861  001DE6  90D8               	bcf	status,0,c
  5862  001DE8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5863  001DEA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5864                           
  5865                           ; BSR set to: 0
  5866  001DEC  0100               	movlb	0	; () banked
  5867  001DEE  5162               	movf	___awdiv@divisor& (0+255),w,b
  5868  001DF0  0100               	movlb	0	; () banked
  5869  001DF2  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5870  001DF4  0100               	movlb	0	; () banked
  5871  001DF6  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5872  001DF8  0100               	movlb	0	; () banked
  5873  001DFA  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5874  001DFC  A0D8               	btfss	status,0,c
  5875  001DFE  D00A               	goto	l2925
  5876                           
  5877                           ; BSR set to: 0
  5878  001E00  0100               	movlb	0	; () banked
  5879  001E02  5162               	movf	___awdiv@divisor& (0+255),w,b
  5880  001E04  0100               	movlb	0	; () banked
  5881  001E06  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5882  001E08  0100               	movlb	0	; () banked
  5883  001E0A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5884  001E0C  0100               	movlb	0	; () banked
  5885  001E0E  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5886                           
  5887                           ; BSR set to: 0
  5888  001E10  0100               	movlb	0	; () banked
  5889  001E12  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5890  001E14                     l2925:
  5891                           
  5892                           ; BSR set to: 0
  5893  001E14  0100               	movlb	0	; () banked
  5894  001E16  90D8               	bcf	status,0,c
  5895  001E18  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5896  001E1A  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5897                           
  5898                           ; BSR set to: 0
  5899  001E1C  0100               	movlb	0	; () banked
  5900  001E1E  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5901  001E20  D7E1               	goto	l2917
  5902  001E22                     l2929:
  5903                           
  5904                           ; BSR set to: 0
  5905  001E22  0100               	movlb	0	; () banked
  5906  001E24  5165               	movf	___awdiv@sign& (0+255),w,b
  5907  001E26  0100               	movlb	0	; () banked
  5908  001E28  B4D8               	btfsc	status,2,c
  5909  001E2A  D005               	goto	l2933
  5910                           
  5911                           ; BSR set to: 0
  5912  001E2C  0100               	movlb	0	; () banked
  5913  001E2E  6D66               	negf	___awdiv@quotient& (0+255),b
  5914  001E30  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5915  001E32  B0D8               	btfsc	status,0,c
  5916  001E34  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5917  001E36                     l2933:
  5918                           
  5919                           ; BSR set to: 0
  5920  001E36  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5921  001E3A  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5922  001E3E  0012               	return	
  5923  001E40                     __end_of___awdiv:
  5924                           	opt stack 0
  5925                           tosu	equ	0xFFF
  5926                           tosh	equ	0xFFE
  5927                           tosl	equ	0xFFD
  5928                           pclath	equ	0xFFA
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1h	equ	0xFE2
  5939                           fsr1l	equ	0xFE1
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           fsr2h	equ	0xFDA
  5944                           fsr2l	equ	0xFD9
  5945                           status	equ	0xFD8
  5946                           
  5947 ;; *************** function _GetListLoc *****************
  5948 ;; Defined at:
  5949 ;;		line 281 in file "Pattern_ControlService.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;		None
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;		None
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      unsigned char 
  5956 ;; Registers used:
  5957 ;;		wreg, status,2
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5963 ;;      Params:         0       0       0       0
  5964 ;;      Locals:         0       0       0       0
  5965 ;;      Temps:          0       0       0       0
  5966 ;;      Totals:         0       0       0       0
  5967 ;;Total ram usage:        0 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    7
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_UpdatePattern
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text22
  5978  002B96                     __ptext22:
  5979                           	opt stack 0
  5980  002B96                     _GetListLoc:
  5981                           	opt stack 19
  5982                           
  5983                           ;Pattern_ControlService.c: 282: return ListLoc;
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;incstack = 0
  5987  002B96  5048               	movf	_ListLoc,w,c
  5988  002B98  0012               	return	
  5989  002B9A                     __end_of_GetListLoc:
  5990                           	opt stack 0
  5991                           tosu	equ	0xFFF
  5992                           tosh	equ	0xFFE
  5993                           tosl	equ	0xFFD
  5994                           pclath	equ	0xFFA
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           postdec1	equ	0xFE5
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _ES_Timer_InitTimer *****************
  6014 ;; Defined at:
  6015 ;;		line 229 in file "ES_Timers.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  Num             1    wreg     unsigned char 
  6018 ;;  NewTime         2    0[BANK0 ] unsigned int 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  Num             1    4[BANK0 ] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      enum E15472
  6023 ;; Registers used:
  6024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6030 ;;      Params:         0       2       0       0
  6031 ;;      Locals:         0       1       0       0
  6032 ;;      Temps:          0       2       0       0
  6033 ;;      Totals:         0       5       0       0
  6034 ;;Total ram usage:        5 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    7
  6037 ;; This function calls:
  6038 ;;		Nothing
  6039 ;; This function is called by:
  6040 ;;		_ShowPattern
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text23
  6045  0022A2                     __ptext23:
  6046                           	opt stack 0
  6047  0022A2                     _ES_Timer_InitTimer:
  6048                           	opt stack 20
  6049                           
  6050                           ;incstack = 0
  6051                           ;ES_Timer_InitTimer@Num stored from wreg
  6052  0022A2  0100               	movlb	0	; () banked
  6053  0022A4  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  6054                           
  6055                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  6056                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  6057                           ;ES_Timers.c: 236: (NewTime == 0) )
  6058  0022A6  0E10               	movlw	16
  6059  0022A8  0100               	movlb	0	; () banked
  6060  0022AA  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  6061  0022AC  0012               	return	
  6062                           
  6063                           ; BSR set to: 0
  6064  0022AE  0100               	movlb	0	; () banked
  6065  0022B0  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  6066  0022B2  0D02               	mullw	2
  6067  0022B4  0E21               	movlw	low _Timer2PostFunc
  6068  0022B6  24F3               	addwf	prodl,w,c
  6069  0022B8  6EF6               	movwf	tblptrl,c
  6070  0022BA  0E03               	movlw	high _Timer2PostFunc
  6071  0022BC  20F4               	addwfc	prodh,w,c
  6072  0022BE  6EF7               	movwf	tblptrh,c
  6073  0022C0                     	if	0	;There are less than 3 active tblptr bytes
  6074  0022C0                     	endif
  6075  0022C0  0009               	tblrd		*+
  6076  0022C2  50F5               	movf	tablat,w,c
  6077  0022C4  0009               	tblrd		*+
  6078  0022C6  10F5               	iorwf	tablat,w,c
  6079  0022C8  B4D8               	btfsc	status,2,c
  6080  0022CA  0012               	return	
  6081                           
  6082                           ; BSR set to: 0
  6083  0022CC  0100               	movlb	0	; () banked
  6084  0022CE  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  6085  0022D0  0100               	movlb	0	; () banked
  6086  0022D2  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  6087  0022D4  B4D8               	btfsc	status,2,c
  6088  0022D6  0012               	return	
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  6097                           ;	Return value of _ES_Timer_InitTimer is never used
  6098  0022D8  0100               	movlb	0	; () banked
  6099  0022DA  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  6100  0022DC  0D02               	mullw	2
  6101  0022DE  0E00               	movlw	low _TMR_TimerArray
  6102  0022E0  24F3               	addwf	prodl,w,c
  6103  0022E2  6ED9               	movwf	fsr2l,c
  6104  0022E4  0E01               	movlw	high _TMR_TimerArray
  6105  0022E6  20F4               	addwfc	prodh,w,c
  6106  0022E8  6EDA               	movwf	fsr2h,c
  6107  0022EA  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  6108  0022EE  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  6112  0022F2  0100               	movlb	0	; () banked
  6113  0022F4  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  6114  0022F6  0D02               	mullw	2
  6115  0022F8  0E01               	movlw	low _BitNum2SetMask
  6116  0022FA  24F3               	addwf	prodl,w,c
  6117  0022FC  6EF6               	movwf	tblptrl,c
  6118  0022FE  0E03               	movlw	high _BitNum2SetMask
  6119  002300  20F4               	addwfc	prodh,w,c
  6120  002302  6EF7               	movwf	tblptrh,c
  6121  002304                     	if	0	;There are less than 3 active tblptr bytes
  6122  002304                     	endif
  6123  002304  0009               	tblrd		*+
  6124  002306  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  6125  00230A  0009               	tblrd		*+
  6126  00230C  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  6127  002310  0100               	movlb	0	; () banked
  6128  002312  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  6129  002314  0100               	movlb	0	; () banked
  6130  002316  13E0               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  6131  002318  0100               	movlb	0	; () banked
  6132  00231A  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  6133  00231C  0100               	movlb	0	; () banked
  6134  00231E  13E1               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  6135  002320  0012               	return	
  6136  002322                     __end_of_ES_Timer_InitTimer:
  6137                           	opt stack 0
  6138                           tosu	equ	0xFFF
  6139                           tosh	equ	0xFFE
  6140                           tosl	equ	0xFFD
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _DotStar_Show *****************
  6161 ;; Defined at:
  6162 ;;		line 76 in file "Pattern_DotStarLED.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  6165 ;;		 -> PixelPattern(152), 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  i               1   89[BANK0 ] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      void 
  6170 ;; Registers used:
  6171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6177 ;;      Params:         0       2       0       0
  6178 ;;      Locals:         0       1       0       0
  6179 ;;      Temps:          0      18       0       0
  6180 ;;      Totals:         0      21       0       0
  6181 ;;Total ram usage:       21 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:   12
  6184 ;; This function calls:
  6185 ;;		_HSV_to_RGB
  6186 ;;		_SPI32_TransmitFrames
  6187 ;; This function is called by:
  6188 ;;		_ShowPattern
  6189 ;;		_StopPattern
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text24
  6194  0014E2                     __ptext24:
  6195                           	opt stack 0
  6196  0014E2                     _DotStar_Show:
  6197                           	opt stack 15
  6198                           
  6199                           ;Pattern_DotStarLED.c: 77: for(uint8_t i=1; i<=Length; i++){
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;incstack = 0
  6203  0014E2  0E01               	movlw	1
  6204  0014E4  0100               	movlb	0	; () banked
  6205  0014E6  6FB9               	movwf	DotStar_Show@i& (0+255),b
  6206  0014E8  D07B               	goto	l3371
  6207  0014EA                     l3365:
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;Pattern_DotStarLED.c: 79: PixelFrames[i] = (0xe0000000 | ((uint32_t)Brightness<<24) | *
      +                          (patternPointer+(i-1)));
  6211  0014EA  0EFE               	movlw	254
  6212  0014EC  0100               	movlb	0	; () banked
  6213  0014EE  6FA7               	movwf	??_DotStar_Show& (0+255),b
  6214  0014F0  0EFF               	movlw	255
  6215  0014F2  0100               	movlb	0	; () banked
  6216  0014F4  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  6217  0014F6  0100               	movlb	0	; () banked
  6218  0014F8  51B9               	movf	DotStar_Show@i& (0+255),w,b
  6219  0014FA  0100               	movlb	0	; () banked
  6220  0014FC  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  6221  0014FE  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  6222  001500  90D8               	bcf	status,0,c
  6223  001502  0100               	movlb	0	; () banked
  6224  001504  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  6225  001506  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  6226  001508  0100               	movlb	0	; () banked
  6227  00150A  51A7               	movf	??_DotStar_Show& (0+255),w,b
  6228  00150C  0100               	movlb	0	; () banked
  6229  00150E  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  6230  001510  0100               	movlb	0	; () banked
  6231  001512  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  6232  001514  0100               	movlb	0	; () banked
  6233  001516  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  6234  001518  0100               	movlb	0	; () banked
  6235  00151A  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  6236  00151C  0100               	movlb	0	; () banked
  6237  00151E  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  6238  001520  6ED9               	movwf	fsr2l,c
  6239  001522  0100               	movlb	0	; () banked
  6240  001524  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  6241  001526  0100               	movlb	0	; () banked
  6242  001528  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  6243  00152A  6EDA               	movwf	fsr2h,c
  6244  00152C  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  6245  001530  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  6246  001534  C0F0  F0AD         	movff	_Brightness,??_DotStar_Show+6
  6247  001538  0100               	movlb	0	; () banked
  6248  00153A  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  6249  00153C  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  6250  00153E  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  6251  001540  C0AD  F0B0         	movff	??_DotStar_Show+6,??_DotStar_Show+9
  6252  001544  0100               	movlb	0	; () banked
  6253  001546  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  6254  001548  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  6255  00154A  6BAD               	clrf	(??_DotStar_Show+6)& (0+255),b
  6256  00154C  0100               	movlb	0	; () banked
  6257  00154E  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  6258  001550  0100               	movlb	0	; () banked
  6259  001552  11AD               	iorwf	(??_DotStar_Show+6)& (0+255),w,b
  6260  001554  0100               	movlb	0	; () banked
  6261  001556  6FB1               	movwf	(??_DotStar_Show+10)& (0+255),b
  6262  001558  0100               	movlb	0	; () banked
  6263  00155A  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  6264  00155C  0100               	movlb	0	; () banked
  6265  00155E  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  6266  001560  0100               	movlb	0	; () banked
  6267  001562  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  6268  001564  0E00               	movlw	0
  6269  001566  0100               	movlb	0	; () banked
  6270  001568  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  6271  00156A  0100               	movlb	0	; () banked
  6272  00156C  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  6273  00156E  0E00               	movlw	0
  6274  001570  0100               	movlb	0	; () banked
  6275  001572  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  6276  001574  0100               	movlb	0	; () banked
  6277  001576  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  6278  001578  0E00               	movlw	0
  6279  00157A  0100               	movlb	0	; () banked
  6280  00157C  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  6281  00157E  0100               	movlb	0	; () banked
  6282  001580  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  6283  001582  0E00               	movlw	0
  6284  001584  0100               	movlb	0	; () banked
  6285  001586  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  6286  001588  0100               	movlb	0	; () banked
  6287  00158A  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  6288  00158C  0E00               	movlw	0
  6289  00158E  0100               	movlb	0	; () banked
  6290  001590  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  6291  001592  0100               	movlb	0	; () banked
  6292  001594  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  6293  001596  0EE0               	movlw	224
  6294  001598  0100               	movlb	0	; () banked
  6295  00159A  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  6296  00159C  0100               	movlb	0	; () banked
  6297  00159E  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  6298  0015A0  0100               	movlb	0	; () banked
  6299  0015A2  51B9               	movf	DotStar_Show@i& (0+255),w,b
  6300  0015A4  0D04               	mullw	4
  6301  0015A6  0EC4               	movlw	low _PixelFrames
  6302  0015A8  24F3               	addwf	prodl,w,c
  6303  0015AA  6ED9               	movwf	fsr2l,c
  6304  0015AC  0E01               	movlw	high _PixelFrames
  6305  0015AE  20F4               	addwfc	prodh,w,c
  6306  0015B0  6EDA               	movwf	fsr2h,c
  6307  0015B2  C0B5  FFDE         	movff	??_DotStar_Show+14,postinc2
  6308  0015B6  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  6309  0015BA  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  6310  0015BE  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;Pattern_DotStarLED.c: 83: HSV_to_RGB(PixelFrames+i);
  6314  0015C2  0100               	movlb	0	; () banked
  6315  0015C4  51B9               	movf	DotStar_Show@i& (0+255),w,b
  6316  0015C6  0D04               	mullw	4
  6317  0015C8  0EC4               	movlw	low _PixelFrames
  6318  0015CA  24F3               	addwf	prodl,w,c
  6319  0015CC  0100               	movlb	0	; () banked
  6320  0015CE  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  6321  0015D0  0E01               	movlw	high _PixelFrames
  6322  0015D2  20F4               	addwfc	prodh,w,c
  6323  0015D4  0100               	movlb	0	; () banked
  6324  0015D6  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  6325  0015D8  ECDF  F001         	call	_HSV_to_RGB	;wreg free
  6326  0015DC  0100               	movlb	0	; () banked
  6327  0015DE  2BB9               	incf	DotStar_Show@i& (0+255),f,b
  6328  0015E0                     l3371:
  6329                           
  6330                           ; BSR set to: 0
  6331  0015E0  0100               	movlb	0	; () banked
  6332  0015E2  51B9               	movf	DotStar_Show@i& (0+255),w,b
  6333  0015E4  0100               	movlb	0	; () banked
  6334  0015E6  5DE8               	subwf	_Length& (0+255),w,b
  6335  0015E8  B0D8               	btfsc	status,0,c
  6336  0015EA  D77F               	goto	l3365
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;Pattern_DotStarLED.c: 90: }
  6340                           ;Pattern_DotStarLED.c: 93: SPI32_TransmitFrames(PixelFrames,Length+3);
  6341                           
  6342                           ; BSR set to: 0
  6343  0015EC  0EC4               	movlw	low _PixelFrames
  6344  0015EE  0100               	movlb	0	; () banked
  6345  0015F0  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  6346  0015F2  0E01               	movlw	high _PixelFrames
  6347  0015F4  0100               	movlb	0	; () banked
  6348  0015F6  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  6349  0015F8  0100               	movlb	0	; () banked
  6350  0015FA  51E8               	movf	_Length& (0+255),w,b
  6351  0015FC  0F03               	addlw	3
  6352  0015FE  0100               	movlb	0	; () banked
  6353  001600  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  6354  001602  EC8A  F014         	call	_SPI32_TransmitFrames	;wreg free
  6355  001606  0012               	return		;funcret
  6356  001608                     __end_of_DotStar_Show:
  6357                           	opt stack 0
  6358                           tosu	equ	0xFFF
  6359                           tosh	equ	0xFFE
  6360                           tosl	equ	0xFFD
  6361                           pclath	equ	0xFFA
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           postinc0	equ	0xFEE
  6369                           wreg	equ	0xFE8
  6370                           postdec1	equ	0xFE5
  6371                           fsr1h	equ	0xFE2
  6372                           fsr1l	equ	0xFE1
  6373                           indf2	equ	0xFDF
  6374                           postinc2	equ	0xFDE
  6375                           postdec2	equ	0xFDD
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _SPI32_TransmitFrames *****************
  6381 ;; Defined at:
  6382 ;;		line 239 in file "SPI32_ControlService.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  6385 ;;		 -> PixelFrames(316), 
  6386 ;;  numFrames       1   34[BANK0 ] unsigned char 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      void 
  6391 ;; Registers used:
  6392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6398 ;;      Params:         0       3       0       0
  6399 ;;      Locals:         0       3       0       0
  6400 ;;      Temps:          0       0       0       0
  6401 ;;      Totals:         0       6       0       0
  6402 ;;Total ram usage:        6 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:   11
  6405 ;; This function calls:
  6406 ;;		_PostSPI32ControlService
  6407 ;; This function is called by:
  6408 ;;		_DotStar_Show
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text25
  6413  002914                     __ptext25:
  6414                           	opt stack 0
  6415  002914                     _SPI32_TransmitFrames:
  6416                           	opt stack 15
  6417                           
  6418                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  6419                           
  6420                           ;incstack = 0
  6421  002914  0100               	movlb	0	; () banked
  6422  002916  05E4               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  6423  002918  A4D8               	btfss	status,2,c
  6424  00291A  0012               	return	
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  6428  00291C  0E00               	movlw	0
  6429  00291E  0100               	movlb	0	; () banked
  6430  002920  6FE7               	movwf	_FrameIndex& (0+255),b
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  6434  002922  C080  F0DC         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  6435  002926  C081  F0DD         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  6439  00292A  C082  F0EA         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  6443                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  6444  00292E  0E08               	movlw	8
  6445  002930  0100               	movlb	0	; () banked
  6446  002932  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  6450  002934  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  6451  002938  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  6452  00293C  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  6453  002940  EC34  F015         	call	_PostSPI32ControlService	;wreg free
  6454  002944  0012               	return	
  6455  002946                     __end_of_SPI32_TransmitFrames:
  6456                           	opt stack 0
  6457                           tosu	equ	0xFFF
  6458                           tosh	equ	0xFFE
  6459                           tosl	equ	0xFFD
  6460                           pclath	equ	0xFFA
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           postdec1	equ	0xFE5
  6470                           fsr1h	equ	0xFE2
  6471                           fsr1l	equ	0xFE1
  6472                           indf2	equ	0xFDF
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function _PostPatternControlService *****************
  6480 ;; Defined at:
  6481 ;;		line 139 in file "Pattern_ControlService.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      unsigned char 
  6488 ;; Registers used:
  6489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6495 ;;      Params:         0       3       0       0
  6496 ;;      Locals:         0       0       0       0
  6497 ;;      Temps:          0       0       0       0
  6498 ;;      Totals:         0       3       0       0
  6499 ;;Total ram usage:        3 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:   10
  6502 ;; This function calls:
  6503 ;;		_ES_PostToService
  6504 ;; This function is called by:
  6505 ;;		_RunPatternControlService
  6506 ;;		_ES_Timer_Tick_Resp
  6507 ;;		_PostToList
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text26
  6512  002A4C                     __ptext26:
  6513                           	opt stack 0
  6514  002A4C                     _PostPatternControlService:
  6515                           	opt stack 0
  6516                           
  6517                           ;Skip over the trampoline to the duplicate function for level 2
  6518  002A4C  B258               	btfsc	btemp,1,c
  6519  002A4E  EF8C  F015         	goto	i2_PostPatternControlService
  6520  002A52                     _PostPatternControlService$intlevel0:
  6521                           	opt stack 17
  6522                           
  6523                           ;Pattern_ControlService.c: 141: return ES_PostToService( MyPriority, ThisEvent);
  6524                           
  6525                           ;incstack = 0
  6526  002A52  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6527  002A56  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6528  002A5A  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6529  002A5E  0100               	movlb	0	; () banked
  6530  002A60  51E9               	movf	_MyPriority& (0+255),w,b
  6531  002A62  EC4A  F012         	call	_ES_PostToService
  6532  002A66  0012               	return	
  6533  002A68                     __end_of_PostPatternControlService:
  6534                           	opt stack 0
  6535                           tosu	equ	0xFFF
  6536                           tosh	equ	0xFFE
  6537                           tosl	equ	0xFFD
  6538                           pclath	equ	0xFFA
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           postinc0	equ	0xFEE
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1h	equ	0xFE2
  6549                           fsr1l	equ	0xFE1
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _PostSPI32ControlService *****************
  6558 ;; Defined at:
  6559 ;;		line 117 in file "SPI32_ControlService.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      unsigned char 
  6566 ;; Registers used:
  6567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6573 ;;      Params:         0       3       0       0
  6574 ;;      Locals:         0       0       0       0
  6575 ;;      Temps:          0       0       0       0
  6576 ;;      Totals:         0       3       0       0
  6577 ;;Total ram usage:        3 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:   10
  6580 ;; This function calls:
  6581 ;;		_ES_PostToService
  6582 ;; This function is called by:
  6583 ;;		_SPI32_TransmitFrames
  6584 ;;		_ES_Timer_Tick_Resp
  6585 ;;		_PostToList
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text27
  6590  002A68                     __ptext27:
  6591                           	opt stack 0
  6592  002A68                     _PostSPI32ControlService:
  6593                           	opt stack 0
  6594                           
  6595                           ;Skip over the trampoline to the duplicate function for level 2
  6596  002A68  B258               	btfsc	btemp,1,c
  6597  002A6A  EF81  F015         	goto	i2_PostSPI32ControlService
  6598  002A6E                     _PostSPI32ControlService$intlevel0:
  6599                           	opt stack 17
  6600                           
  6601                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6602                           
  6603                           ;incstack = 0
  6604  002A6E  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  6605  002A72  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6606  002A76  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6607  002A7A  0100               	movlb	0	; () banked
  6608  002A7C  51E5               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6609  002A7E  EC4A  F012         	call	_ES_PostToService
  6610  002A82  0012               	return	
  6611  002A84                     __end_of_PostSPI32ControlService:
  6612                           	opt stack 0
  6613                           tosu	equ	0xFFF
  6614                           tosh	equ	0xFFE
  6615                           tosl	equ	0xFFD
  6616                           pclath	equ	0xFFA
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           postinc0	equ	0xFEE
  6624                           wreg	equ	0xFE8
  6625                           postdec1	equ	0xFE5
  6626                           fsr1h	equ	0xFE2
  6627                           fsr1l	equ	0xFE1
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _HSV_to_RGB *****************
  6636 ;; Defined at:
  6637 ;;		line 49 in file "Pattern_HSV_Convert.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  6640 ;;		 -> PixelFrames(316), 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  v               2   67[BANK0 ] unsigned int 
  6643 ;;  p               2   65[BANK0 ] unsigned int 
  6644 ;;  s               2   63[BANK0 ] unsigned int 
  6645 ;;  t               2   59[BANK0 ] unsigned int 
  6646 ;;  q               2   57[BANK0 ] unsigned int 
  6647 ;;  b               2   55[BANK0 ] unsigned int 
  6648 ;;  g               2   53[BANK0 ] unsigned int 
  6649 ;;  r               2   51[BANK0 ] unsigned int 
  6650 ;;  fpart           2   49[BANK0 ] unsigned int 
  6651 ;;  region          2   47[BANK0 ] unsigned int 
  6652 ;;  h               2   45[BANK0 ] unsigned int 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6662 ;;      Params:         0       2       0       0
  6663 ;;      Locals:         0      24       0       0
  6664 ;;      Temps:          0      24       0       0
  6665 ;;      Totals:         0      50       0       0
  6666 ;;Total ram usage:       50 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    8
  6669 ;; This function calls:
  6670 ;;		___lwdiv
  6671 ;;		___wmul
  6672 ;; This function is called by:
  6673 ;;		_DotStar_Show
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text28
  6678  0003BE                     __ptext28:
  6679                           	opt stack 0
  6680  0003BE                     _HSV_to_RGB:
  6681                           	opt stack 18
  6682                           
  6683                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  6684                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  6685                           
  6686                           ;incstack = 0
  6687  0003BE  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6688  0003C2  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6689  0003C6  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6690  0003CA  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  6691  0003CE  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  6692  0003D2  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  6693  0003D6  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  6694  0003DA  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  6695  0003DE  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  6696  0003E2  0100               	movlb	0	; () banked
  6697  0003E4  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  6698  0003E6  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  6699  0003EA  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  6703  0003EE  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6704  0003F2  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6705  0003F6  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6706  0003FA  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6707  0003FE  0EF0               	movlw	240
  6708  000400  0100               	movlb	0	; () banked
  6709  000402  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6710  000404  0100               	movlb	0	; () banked
  6711  000406  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  6712  000408  0100               	movlb	0	; () banked
  6713  00040A  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  6717  00040C  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6718  000410  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6719  000414  0E04               	movlw	4
  6720  000416  0100               	movlb	0	; () banked
  6721  000418  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  6722  00041A                     u1725:
  6723  00041A  0100               	movlb	0	; () banked
  6724  00041C  90D8               	bcf	status,0,c
  6725  00041E  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  6726  000420  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  6727  000422  0100               	movlb	0	; () banked
  6728  000424  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  6729  000426  D7F9               	goto	u1725
  6730  000428  0100               	movlb	0	; () banked
  6731  00042A  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6732  00042C  0100               	movlb	0	; () banked
  6733  00042E  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  6734  000430  0100               	movlb	0	; () banked
  6735  000432  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6736  000434  0100               	movlb	0	; () banked
  6737  000436  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  6741  000438  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  6742  00043C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  6743  000440  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  6744  000444  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  6745  000448  0E0F               	movlw	15
  6746  00044A  0100               	movlb	0	; () banked
  6747  00044C  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  6748  00044E  0100               	movlb	0	; () banked
  6749  000450  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  6750  000452  0100               	movlb	0	; () banked
  6751  000454  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  6755  000456  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  6756  00045A  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  6757  00045E  0100               	movlb	0	; () banked
  6758  000460  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  6759  000462  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  6760  000464  0EF0               	movlw	240
  6761  000466  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6762  000468  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6763  00046A  0B0F               	andlw	15
  6764  00046C  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  6765  00046E  0EF0               	movlw	240
  6766  000470  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  6767  000472  0100               	movlb	0	; () banked
  6768  000474  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  6769  000476  0100               	movlb	0	; () banked
  6770  000478  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  6771  00047A  0100               	movlb	0	; () banked
  6772  00047C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  6773  00047E  0100               	movlb	0	; () banked
  6774  000480  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  6778  000482  0100               	movlb	0	; () banked
  6779  000484  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  6780  000486  0100               	movlb	0	; () banked
  6781  000488  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  6782  00048A  A4D8               	btfss	status,2,c
  6783  00048C  D00D               	goto	l3019
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  6787  00048E  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  6788  000492  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  6789  000496  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  6790  00049A  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  6791  00049E  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  6792  0004A2  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  6793                           
  6794                           ;Pattern_HSV_Convert.c: 61: }
  6795  0004A6  D129               	goto	l3039
  6796  0004A8                     l3019:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;Pattern_HSV_Convert.c: 63: else{
  6800                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  6801  0004A8  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  6802  0004AC  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  6803  0004B0  0E00               	movlw	0
  6804  0004B2  0100               	movlb	0	; () banked
  6805  0004B4  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  6806  0004B6  0E2B               	movlw	43
  6807  0004B8  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  6808  0004BA  EC0E  F012         	call	___lwdiv	;wreg free
  6809  0004BE  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  6810  0004C2  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  6811                           
  6812                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6813  0004C6  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  6814  0004CA  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  6815  0004CE  0E00               	movlw	0
  6816  0004D0  0100               	movlb	0	; () banked
  6817  0004D2  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6818  0004D4  0E2B               	movlw	43
  6819  0004D6  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6820  0004D8  EC55  F014         	call	___wmul	;wreg free
  6821  0004DC  0100               	movlb	0	; () banked
  6822  0004DE  1F66               	comf	?___wmul& (0+255),f,b
  6823  0004E0  0100               	movlb	0	; () banked
  6824  0004E2  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6825  0004E4  0100               	movlb	0	; () banked
  6826  0004E6  4B66               	infsnz	?___wmul& (0+255),f,b
  6827  0004E8  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6828  0004EA  0100               	movlb	0	; () banked
  6829  0004EC  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  6830  0004EE  0100               	movlb	0	; () banked
  6831  0004F0  2566               	addwf	?___wmul& (0+255),w,b
  6832  0004F2  0100               	movlb	0	; () banked
  6833  0004F4  6F9D               	movwf	_HSV_to_RGB$2017& (0+255),b
  6834  0004F6  0100               	movlb	0	; () banked
  6835  0004F8  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  6836  0004FA  0100               	movlb	0	; () banked
  6837  0004FC  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6838  0004FE  0100               	movlb	0	; () banked
  6839  000500  6F9E               	movwf	(_HSV_to_RGB$2017+1)& (0+255),b
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  6843  000502  C09D  F066         	movff	_HSV_to_RGB$2017,___wmul@multiplier
  6844  000506  C09E  F067         	movff	_HSV_to_RGB$2017+1,___wmul@multiplier+1
  6845  00050A  0E00               	movlw	0
  6846  00050C  0100               	movlb	0	; () banked
  6847  00050E  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6848  000510  0E06               	movlw	6
  6849  000512  6F68               	movwf	___wmul@multiplicand& (0+255),b
  6850  000514  EC55  F014         	call	___wmul	;wreg free
  6851  000518  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  6852  00051C  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  6853                           
  6854                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  6855  000520  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  6856  000524  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  6857  000528  0100               	movlb	0	; () banked
  6858  00052A  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6859  00052C  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6860  00052E  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6861  000530  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6862  000532  0EFF               	movlw	255
  6863  000534  0100               	movlb	0	; () banked
  6864  000536  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6865  000538  0100               	movlb	0	; () banked
  6866  00053A  6F66               	movwf	___wmul@multiplier& (0+255),b
  6867  00053C  0E00               	movlw	0
  6868  00053E  0100               	movlb	0	; () banked
  6869  000540  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6870  000542  0100               	movlb	0	; () banked
  6871  000544  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6872  000546  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6873  00054A  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6874  00054E  EC55  F014         	call	___wmul	;wreg free
  6875  000552  0100               	movlb	0	; () banked
  6876  000554  5167               	movf	(?___wmul+1)& (0+255),w,b
  6877  000556  0100               	movlb	0	; () banked
  6878  000558  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  6879  00055A  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6883  00055C  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  6884  000560  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  6885  000564  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  6886  000568  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  6887  00056C  EC55  F014         	call	___wmul	;wreg free
  6888  000570  0100               	movlb	0	; () banked
  6889  000572  C067  F066         	movff	?___wmul+1,?___wmul
  6890  000576  0100               	movlb	0	; () banked
  6891  000578  6B67               	clrf	(?___wmul+1)& (0+255),b
  6892  00057A  0100               	movlb	0	; () banked
  6893  00057C  1F66               	comf	?___wmul& (0+255),f,b
  6894  00057E  0100               	movlb	0	; () banked
  6895  000580  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6896  000582  0100               	movlb	0	; () banked
  6897  000584  4B66               	infsnz	?___wmul& (0+255),f,b
  6898  000586  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6899  000588  0EFF               	movlw	255
  6900  00058A  0100               	movlb	0	; () banked
  6901  00058C  2566               	addwf	?___wmul& (0+255),w,b
  6902  00058E  0100               	movlb	0	; () banked
  6903  000590  6F9D               	movwf	_HSV_to_RGB$2017& (0+255),b
  6904  000592  0E00               	movlw	0
  6905  000594  0100               	movlb	0	; () banked
  6906  000596  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6907  000598  0100               	movlb	0	; () banked
  6908  00059A  6F9E               	movwf	(_HSV_to_RGB$2017+1)& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  6912  00059C  C09D  F066         	movff	_HSV_to_RGB$2017,___wmul@multiplier
  6913  0005A0  C09E  F067         	movff	_HSV_to_RGB$2017+1,___wmul@multiplier+1
  6914  0005A4  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6915  0005A8  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6916  0005AC  EC55  F014         	call	___wmul	;wreg free
  6917  0005B0  0100               	movlb	0	; () banked
  6918  0005B2  5167               	movf	(?___wmul+1)& (0+255),w,b
  6919  0005B4  0100               	movlb	0	; () banked
  6920  0005B6  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  6921  0005B8  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6925  0005BA  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  6926  0005BE  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  6927  0005C2  0100               	movlb	0	; () banked
  6928  0005C4  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  6929  0005C6  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  6930  0005C8  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  6931  0005CA  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  6932  0005CC  0EFF               	movlw	255
  6933  0005CE  0100               	movlb	0	; () banked
  6934  0005D0  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  6935  0005D2  0100               	movlb	0	; () banked
  6936  0005D4  6F66               	movwf	___wmul@multiplier& (0+255),b
  6937  0005D6  0E00               	movlw	0
  6938  0005D8  0100               	movlb	0	; () banked
  6939  0005DA  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  6940  0005DC  0100               	movlb	0	; () banked
  6941  0005DE  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  6942  0005E0  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  6943  0005E4  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  6944  0005E8  EC55  F014         	call	___wmul	;wreg free
  6945  0005EC  0100               	movlb	0	; () banked
  6946  0005EE  C067  F066         	movff	?___wmul+1,?___wmul
  6947  0005F2  0100               	movlb	0	; () banked
  6948  0005F4  6B67               	clrf	(?___wmul+1)& (0+255),b
  6949  0005F6  0100               	movlb	0	; () banked
  6950  0005F8  1F66               	comf	?___wmul& (0+255),f,b
  6951  0005FA  0100               	movlb	0	; () banked
  6952  0005FC  1F67               	comf	(?___wmul+1)& (0+255),f,b
  6953  0005FE  0100               	movlb	0	; () banked
  6954  000600  4B66               	infsnz	?___wmul& (0+255),f,b
  6955  000602  2B67               	incf	(?___wmul+1)& (0+255),f,b
  6956  000604  0EFF               	movlw	255
  6957  000606  0100               	movlb	0	; () banked
  6958  000608  2566               	addwf	?___wmul& (0+255),w,b
  6959  00060A  0100               	movlb	0	; () banked
  6960  00060C  6F9D               	movwf	_HSV_to_RGB$2017& (0+255),b
  6961  00060E  0E00               	movlw	0
  6962  000610  0100               	movlb	0	; () banked
  6963  000612  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  6964  000614  0100               	movlb	0	; () banked
  6965  000616  6F9E               	movwf	(_HSV_to_RGB$2017+1)& (0+255),b
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  6969  000618  C09D  F066         	movff	_HSV_to_RGB$2017,___wmul@multiplier
  6970  00061C  C09E  F067         	movff	_HSV_to_RGB$2017+1,___wmul@multiplier+1
  6971  000620  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  6972  000624  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  6973  000628  EC55  F014         	call	___wmul	;wreg free
  6974  00062C  0100               	movlb	0	; () banked
  6975  00062E  5167               	movf	(?___wmul+1)& (0+255),w,b
  6976  000630  0100               	movlb	0	; () banked
  6977  000632  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  6978  000634  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  6979                           
  6980                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  6981  000636  D046               	goto	l3037
  6982  000638                     l690:
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  6986  000638  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  6987  00063C  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  6988  000640  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  6989  000644  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  6990  000648  D008               	goto	L18
  6991  00064A                     l692:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  6995  00064A  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  6996  00064E  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  6997  000652  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  6998  000656  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  6999  00065A                     L18:
  7000  00065A  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  7001  00065E  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  7002  000662  D04B               	goto	l3039
  7003  000664                     l693:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  7007  000664  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  7008  000668  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  7009  00066C  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  7010  000670  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  7011  000674  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  7012  000678  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  7013  00067C  D03E               	goto	l3039
  7014  00067E                     l694:
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  7018  00067E  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  7019  000682  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  7020  000686  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  7021  00068A  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  7022  00068E  D008               	goto	L19
  7023  000690                     l695:
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  7027  000690  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  7028  000694  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  7029  000698  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  7030  00069C  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  7031  0006A0                     L19:
  7032  0006A0  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  7033  0006A4  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  7034  0006A8  D028               	goto	l3039
  7035  0006AA                     l696:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  7039  0006AA  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  7040  0006AE  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  7041  0006B2  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  7042  0006B6  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  7043  0006BA  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  7044  0006BE  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;Pattern_HSV_Convert.c: 88: }
  7048  0006C2  D01B               	goto	l3039
  7049  0006C4                     l3037:
  7050                           
  7051                           ; BSR set to: 0
  7052  0006C4  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  7053  0006C8  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  7054                           
  7055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7056                           ; Switch size 1, requested type "space"
  7057                           ; Number of cases is 1, Range of values is 0 to 0
  7058                           ; switch strategies available:
  7059                           ; Name         Instructions Cycles
  7060                           ; simple_byte            4     3 (average)
  7061                           ;	Chosen strategy is simple_byte
  7062  0006CC  0100               	movlb	0	; () banked
  7063  0006CE  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  7064  0006D0  0A00               	xorlw	0	; case 0
  7065  0006D2  A4D8               	btfss	status,2,c
  7066  0006D4  D7EA               	goto	l696
  7067                           
  7068                           ; BSR set to: 0
  7069                           ; Switch size 1, requested type "space"
  7070                           ; Number of cases is 5, Range of values is 0 to 4
  7071                           ; switch strategies available:
  7072                           ; Name         Instructions Cycles
  7073                           ; simple_byte           16     9 (average)
  7074                           ;	Chosen strategy is simple_byte
  7075  0006D6  0100               	movlb	0	; () banked
  7076  0006D8  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  7077  0006DA  0A00               	xorlw	0	; case 0
  7078  0006DC  B4D8               	btfsc	status,2,c
  7079  0006DE  D7AC               	goto	l690
  7080  0006E0  0A01               	xorlw	1	; case 1
  7081  0006E2  B4D8               	btfsc	status,2,c
  7082  0006E4  D7B2               	goto	l692
  7083  0006E6  0A03               	xorlw	3	; case 2
  7084  0006E8  B4D8               	btfsc	status,2,c
  7085  0006EA  D7BC               	goto	l693
  7086  0006EC  0A01               	xorlw	1	; case 3
  7087  0006EE  B4D8               	btfsc	status,2,c
  7088  0006F0  D7C6               	goto	l694
  7089  0006F2  0A07               	xorlw	7	; case 4
  7090  0006F4  B4D8               	btfsc	status,2,c
  7091  0006F6  D7CC               	goto	l695
  7092  0006F8  D7D8               	goto	l696
  7093  0006FA                     l3039:
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;Pattern_HSV_Convert.c: 89: }
  7097                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  7098  0006FA  0100               	movlb	0	; () banked
  7099  0006FC  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  7100  0006FE  0100               	movlb	0	; () banked
  7101  000700  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  7102  000702  0100               	movlb	0	; () banked
  7103  000704  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  7104  000706  0100               	movlb	0	; () banked
  7105  000708  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  7106  00070A  0100               	movlb	0	; () banked
  7107  00070C  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  7108  00070E  0100               	movlb	0	; () banked
  7109  000710  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  7110  000712  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  7111  000716  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  7112  00071A  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  7113  00071E  0100               	movlb	0	; () banked
  7114  000720  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  7115  000722  0100               	movlb	0	; () banked
  7116  000724  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  7117  000726  0100               	movlb	0	; () banked
  7118  000728  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  7119  00072A  0100               	movlb	0	; () banked
  7120  00072C  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  7121  00072E  0100               	movlb	0	; () banked
  7122  000730  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  7123  000732  0100               	movlb	0	; () banked
  7124  000734  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  7125  000736  0100               	movlb	0	; () banked
  7126  000738  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  7127  00073A  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  7128  00073E  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  7129  000742  0100               	movlb	0	; () banked
  7130  000744  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  7131  000746  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  7132  000748  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  7133  00074C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  7134  000750  0E00               	movlw	0
  7135  000752  14DE               	andwf	postinc2,w,c
  7136  000754  0100               	movlb	0	; () banked
  7137  000756  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  7138  000758  0E00               	movlw	0
  7139  00075A  14DE               	andwf	postinc2,w,c
  7140  00075C  0100               	movlb	0	; () banked
  7141  00075E  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  7142  000760  0E00               	movlw	0
  7143  000762  14DE               	andwf	postinc2,w,c
  7144  000764  0100               	movlb	0	; () banked
  7145  000766  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  7146  000768  0EFF               	movlw	255
  7147  00076A  14DE               	andwf	postinc2,w,c
  7148  00076C  0100               	movlb	0	; () banked
  7149  00076E  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  7150  000770  0100               	movlb	0	; () banked
  7151  000772  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  7152  000774  0100               	movlb	0	; () banked
  7153  000776  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  7154  000778  0100               	movlb	0	; () banked
  7155  00077A  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  7156  00077C  0100               	movlb	0	; () banked
  7157  00077E  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  7158  000780  0100               	movlb	0	; () banked
  7159  000782  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  7160  000784  0100               	movlb	0	; () banked
  7161  000786  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  7162  000788  0100               	movlb	0	; () banked
  7163  00078A  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  7164  00078C  0100               	movlb	0	; () banked
  7165  00078E  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  7166  000790  0100               	movlb	0	; () banked
  7167  000792  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  7168  000794  0100               	movlb	0	; () banked
  7169  000796  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  7170  000798  0100               	movlb	0	; () banked
  7171  00079A  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  7172  00079C  0100               	movlb	0	; () banked
  7173  00079E  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  7174  0007A0  0100               	movlb	0	; () banked
  7175  0007A2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  7176  0007A4  0100               	movlb	0	; () banked
  7177  0007A6  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  7178  0007A8  0100               	movlb	0	; () banked
  7179  0007AA  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  7180  0007AC  0100               	movlb	0	; () banked
  7181  0007AE  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  7182  0007B0  0100               	movlb	0	; () banked
  7183  0007B2  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  7184  0007B4  0100               	movlb	0	; () banked
  7185  0007B6  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  7186  0007B8  0100               	movlb	0	; () banked
  7187  0007BA  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  7188  0007BC  0100               	movlb	0	; () banked
  7189  0007BE  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  7190  0007C0  0100               	movlb	0	; () banked
  7191  0007C2  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  7192  0007C4  0100               	movlb	0	; () banked
  7193  0007C6  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  7194  0007C8  0100               	movlb	0	; () banked
  7195  0007CA  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  7196  0007CC  0100               	movlb	0	; () banked
  7197  0007CE  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  7198  0007D0  0100               	movlb	0	; () banked
  7199  0007D2  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  7200  0007D4  0100               	movlb	0	; () banked
  7201  0007D6  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  7202  0007D8  0100               	movlb	0	; () banked
  7203  0007DA  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  7204  0007DC  0100               	movlb	0	; () banked
  7205  0007DE  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  7206  0007E0  0100               	movlb	0	; () banked
  7207  0007E2  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  7208  0007E4  0100               	movlb	0	; () banked
  7209  0007E6  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  7210  0007E8  0E00               	movlw	0
  7211  0007EA  0100               	movlb	0	; () banked
  7212  0007EC  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  7213  0007EE  0100               	movlb	0	; () banked
  7214  0007F0  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  7215  0007F2  0E00               	movlw	0
  7216  0007F4  0100               	movlb	0	; () banked
  7217  0007F6  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  7218  0007F8  0100               	movlb	0	; () banked
  7219  0007FA  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  7220  0007FC  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  7221  000800  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  7222  000804  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  7223  000808  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  7224  00080C  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  7225  000810  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  7226  000814  0012               	return	
  7227  000816                     __end_of_HSV_to_RGB:
  7228                           	opt stack 0
  7229                           tosu	equ	0xFFF
  7230                           tosh	equ	0xFFE
  7231                           tosl	equ	0xFFD
  7232                           pclath	equ	0xFFA
  7233                           tblptru	equ	0xFF8
  7234                           tblptrh	equ	0xFF7
  7235                           tblptrl	equ	0xFF6
  7236                           tablat	equ	0xFF5
  7237                           prodh	equ	0xFF4
  7238                           prodl	equ	0xFF3
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function ___lwdiv *****************
  7252 ;; Defined at:
  7253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  dividend        2   12[BANK0 ] unsigned int 
  7256 ;;  divisor         2   14[BANK0 ] unsigned int 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  quotient        2   16[BANK0 ] unsigned int 
  7259 ;;  counter         1   18[BANK0 ] unsigned char 
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  2   12[BANK0 ] unsigned int 
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7269 ;;      Params:         0       4       0       0
  7270 ;;      Locals:         0       3       0       0
  7271 ;;      Temps:          0       0       0       0
  7272 ;;      Totals:         0       7       0       0
  7273 ;;Total ram usage:        7 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    7
  7276 ;; This function calls:
  7277 ;;		Nothing
  7278 ;; This function is called by:
  7279 ;;		_UpdatePattern
  7280 ;;		_HSV_to_RGB
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text29
  7285  00241C                     __ptext29:
  7286                           	opt stack 0
  7287  00241C                     ___lwdiv:
  7288                           	opt stack 18
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;incstack = 0
  7292  00241C  0E00               	movlw	0
  7293  00241E  0100               	movlb	0	; () banked
  7294  002420  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7295  002422  0E00               	movlw	0
  7296  002424  6F70               	movwf	___lwdiv@quotient& (0+255),b
  7297                           
  7298                           ; BSR set to: 0
  7299  002426  0100               	movlb	0	; () banked
  7300  002428  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7301  00242A  0100               	movlb	0	; () banked
  7302  00242C  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7303  00242E  B4D8               	btfsc	status,2,c
  7304  002430  D02C               	goto	l1253
  7305                           
  7306                           ; BSR set to: 0
  7307  002432  0E01               	movlw	1
  7308  002434  0100               	movlb	0	; () banked
  7309  002436  6F72               	movwf	___lwdiv@counter& (0+255),b
  7310  002438  D006               	goto	l2945
  7311  00243A                     l2943:
  7312                           
  7313                           ; BSR set to: 0
  7314  00243A  0100               	movlb	0	; () banked
  7315  00243C  90D8               	bcf	status,0,c
  7316  00243E  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  7317  002440  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7318  002442  0100               	movlb	0	; () banked
  7319  002444  2B72               	incf	___lwdiv@counter& (0+255),f,b
  7320  002446                     l2945:
  7321                           
  7322                           ; BSR set to: 0
  7323  002446  0100               	movlb	0	; () banked
  7324  002448  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7325  00244A  D7F7               	goto	l2943
  7326  00244C                     l2947:
  7327                           
  7328                           ; BSR set to: 0
  7329  00244C  0100               	movlb	0	; () banked
  7330  00244E  90D8               	bcf	status,0,c
  7331  002450  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  7332  002452  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7333                           
  7334                           ; BSR set to: 0
  7335  002454  0100               	movlb	0	; () banked
  7336  002456  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7337  002458  0100               	movlb	0	; () banked
  7338  00245A  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  7339  00245C  0100               	movlb	0	; () banked
  7340  00245E  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7341  002460  0100               	movlb	0	; () banked
  7342  002462  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7343  002464  A0D8               	btfss	status,0,c
  7344  002466  D00A               	goto	l2955
  7345                           
  7346                           ; BSR set to: 0
  7347  002468  0100               	movlb	0	; () banked
  7348  00246A  516E               	movf	___lwdiv@divisor& (0+255),w,b
  7349  00246C  0100               	movlb	0	; () banked
  7350  00246E  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  7351  002470  0100               	movlb	0	; () banked
  7352  002472  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7353  002474  0100               	movlb	0	; () banked
  7354  002476  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7355                           
  7356                           ; BSR set to: 0
  7357  002478  0100               	movlb	0	; () banked
  7358  00247A  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  7359  00247C                     l2955:
  7360                           
  7361                           ; BSR set to: 0
  7362  00247C  0100               	movlb	0	; () banked
  7363  00247E  90D8               	bcf	status,0,c
  7364  002480  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7365  002482  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  7366                           
  7367                           ; BSR set to: 0
  7368  002484  0100               	movlb	0	; () banked
  7369  002486  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  7370  002488  D7E1               	goto	l2947
  7371  00248A                     l1253:
  7372                           
  7373                           ; BSR set to: 0
  7374  00248A  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  7375  00248E  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7376                           
  7377                           ; BSR set to: 0
  7378  002492  0012               	return		;funcret
  7379  002494                     __end_of___lwdiv:
  7380                           	opt stack 0
  7381                           tosu	equ	0xFFF
  7382                           tosh	equ	0xFFE
  7383                           tosl	equ	0xFFD
  7384                           pclath	equ	0xFFA
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1h	equ	0xFE2
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _PausePattern *****************
  7404 ;; Defined at:
  7405 ;;		line 313 in file "Pattern_ControlService.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7419 ;;      Params:         0       0       0       0
  7420 ;;      Locals:         0       0       0       0
  7421 ;;      Temps:          0       0       0       0
  7422 ;;      Totals:         0       0       0       0
  7423 ;;Total ram usage:        0 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    8
  7426 ;; This function calls:
  7427 ;;		_ES_Timer_StopTimer
  7428 ;; This function is called by:
  7429 ;;		_RunPatternControlService
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text30
  7434  002B82                     __ptext30:
  7435                           	opt stack 0
  7436  002B82                     _PausePattern:
  7437                           	opt stack 20
  7438                           
  7439                           ;Pattern_ControlService.c: 315: ES_Timer_StopTimer(0);
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;incstack = 0
  7443  002B82  0E00               	movlw	0
  7444  002B84  EC48  F013         	call	_ES_Timer_StopTimer
  7445  002B88  0012               	return		;funcret
  7446  002B8A                     __end_of_PausePattern:
  7447                           	opt stack 0
  7448                           tosu	equ	0xFFF
  7449                           tosh	equ	0xFFE
  7450                           tosl	equ	0xFFD
  7451                           pclath	equ	0xFFA
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           postdec1	equ	0xFE5
  7461                           fsr1h	equ	0xFE2
  7462                           fsr1l	equ	0xFE1
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           fsr2h	equ	0xFDA
  7467                           fsr2l	equ	0xFD9
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function _ES_Timer_StopTimer *****************
  7471 ;; Defined at:
  7472 ;;		line 205 in file "ES_Timers.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  Num             1    wreg     unsigned char 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  Num             1    4[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      enum E15472
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7486 ;;      Params:         0       0       0       0
  7487 ;;      Locals:         0       1       0       0
  7488 ;;      Temps:          0       4       0       0
  7489 ;;      Totals:         0       5       0       0
  7490 ;;Total ram usage:        5 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    7
  7493 ;; This function calls:
  7494 ;;		Nothing
  7495 ;; This function is called by:
  7496 ;;		_StopPattern
  7497 ;;		_PausePattern
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text31
  7502  002690                     __ptext31:
  7503                           	opt stack 0
  7504  002690                     _ES_Timer_StopTimer:
  7505                           	opt stack 20
  7506                           
  7507                           ;incstack = 0
  7508                           ;ES_Timer_StopTimer@Num stored from wreg
  7509  002690  0100               	movlb	0	; () banked
  7510  002692  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  7511                           
  7512                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  7513  002694  0E0F               	movlw	15
  7514  002696  0100               	movlb	0	; () banked
  7515  002698  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  7516  00269A  D001               	goto	l3275
  7517  00269C  0012               	return	
  7518  00269E                     l3275:
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  7522  00269E  0100               	movlb	0	; () banked
  7523  0026A0  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  7524  0026A2  0D02               	mullw	2
  7525  0026A4  0E01               	movlw	low _BitNum2SetMask
  7526  0026A6  24F3               	addwf	prodl,w,c
  7527  0026A8  6EF6               	movwf	tblptrl,c
  7528  0026AA  0E03               	movlw	high _BitNum2SetMask
  7529  0026AC  20F4               	addwfc	prodh,w,c
  7530  0026AE  6EF7               	movwf	tblptrh,c
  7531  0026B0                     	if	0	;There are less than 3 active tblptr bytes
  7532  0026B0                     	endif
  7533  0026B0  0009               	tblrd		*+
  7534  0026B2  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
  7535  0026B6  0009               	tblrd		*+
  7536  0026B8  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
  7537  0026BC  0100               	movlb	0	; () banked
  7538  0026BE  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  7539  0026C0  0100               	movlb	0	; () banked
  7540  0026C2  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  7541  0026C4  0100               	movlb	0	; () banked
  7542  0026C6  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  7543  0026C8  0100               	movlb	0	; () banked
  7544  0026CA  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  7545  0026CC  0100               	movlb	0	; () banked
  7546  0026CE  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  7547  0026D0  0100               	movlb	0	; () banked
  7548  0026D2  17E0               	andwf	_TMR_ActiveFlags& (0+255),f,b
  7549  0026D4  0100               	movlb	0	; () banked
  7550  0026D6  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  7551  0026D8  0100               	movlb	0	; () banked
  7552  0026DA  17E1               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  7553  0026DC  0012               	return	
  7554  0026DE                     __end_of_ES_Timer_StopTimer:
  7555                           	opt stack 0
  7556                           tosu	equ	0xFFF
  7557                           tosh	equ	0xFFE
  7558                           tosl	equ	0xFFD
  7559                           pclath	equ	0xFFA
  7560                           tblptru	equ	0xFF8
  7561                           tblptrh	equ	0xFF7
  7562                           tblptrl	equ	0xFF6
  7563                           tablat	equ	0xFF5
  7564                           prodh	equ	0xFF4
  7565                           prodl	equ	0xFF3
  7566                           postinc0	equ	0xFEE
  7567                           wreg	equ	0xFE8
  7568                           postdec1	equ	0xFE5
  7569                           fsr1h	equ	0xFE2
  7570                           fsr1l	equ	0xFE1
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           fsr2h	equ	0xFDA
  7575                           fsr2l	equ	0xFD9
  7576                           status	equ	0xFD8
  7577                           
  7578 ;; *************** function _ES_DeQueue *****************
  7579 ;; Defined at:
  7580 ;;		line 164 in file "ES_Queue.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  7583 ;;		 -> Queue1(12), Queue0(12), 
  7584 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  7585 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  7588 ;;		 -> Queue1(12), Queue0(12), 
  7589 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  7590 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      unsigned char 
  7593 ;; Registers used:
  7594 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7600 ;;      Params:         0       4       0       0
  7601 ;;      Locals:         0       4       0       0
  7602 ;;      Temps:          0       2       0       0
  7603 ;;      Totals:         0      10       0       0
  7604 ;;Total ram usage:       10 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    8
  7607 ;; This function calls:
  7608 ;;		___lbmod
  7609 ;;		___wmul
  7610 ;; This function is called by:
  7611 ;;		_ES_Run
  7612 ;;		_ES_RecallEvents
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text32
  7617  0013BA                     __ptext32:
  7618                           	opt stack 0
  7619  0013BA                     _ES_DeQueue:
  7620                           	opt stack 21
  7621                           
  7622                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  7623                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  7624                           ;ES_Queue.c: 168: uint8_t NumLeft;
  7625                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;incstack = 0
  7629  0013BA  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  7630  0013BE  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  7631                           
  7632                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  7633  0013C2  0100               	movlb	0	; () banked
  7634  0013C4  EE20 F002          	lfsr	2,2
  7635  0013C8  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7636  0013CA  26D9               	addwf	fsr2l,f,c
  7637  0013CC  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7638  0013CE  22DA               	addwfc	fsr2h,f,c
  7639  0013D0  50DF               	movf	indf2,w,c
  7640  0013D2  B4D8               	btfsc	status,2,c
  7641  0013D4  D06F               	goto	l3639
  7642                           
  7643                           ; BSR set to: 0
  7644                           
  7645                           ;ES_Queue.c: 172: {
  7646                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7647  0013D6  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  7648  0013DA  9EF2               	bcf	intcon,7,c	;volatile
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  7652                           
  7653                           ; BSR set to: 0
  7654  0013DC  0100               	movlb	0	; () banked
  7655  0013DE  EE20 F001          	lfsr	2,1
  7656  0013E2  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7657  0013E4  26D9               	addwf	fsr2l,f,c
  7658  0013E6  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7659  0013E8  22DA               	addwfc	fsr2h,f,c
  7660  0013EA  50DF               	movf	indf2,w,c
  7661  0013EC  0100               	movlb	0	; () banked
  7662  0013EE  6F70               	movwf	??_ES_DeQueue& (0+255),b
  7663  0013F0  0E01               	movlw	1
  7664  0013F2  0100               	movlb	0	; () banked
  7665  0013F4  2570               	addwf	??_ES_DeQueue& (0+255),w,b
  7666  0013F6  0100               	movlb	0	; () banked
  7667  0013F8  6F66               	movwf	___wmul@multiplier& (0+255),b
  7668  0013FA  0100               	movlb	0	; () banked
  7669  0013FC  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  7670  0013FE  0E00               	movlw	0
  7671  001400  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  7672  001402  0E00               	movlw	0
  7673  001404  0100               	movlb	0	; () banked
  7674  001406  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7675  001408  0E03               	movlw	3
  7676  00140A  6F68               	movwf	___wmul@multiplicand& (0+255),b
  7677  00140C  EC55  F014         	call	___wmul	;wreg free
  7678  001410  0100               	movlb	0	; () banked
  7679  001412  5166               	movf	?___wmul& (0+255),w,b
  7680  001414  0100               	movlb	0	; () banked
  7681  001416  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  7682  001418  6ED9               	movwf	fsr2l,c
  7683  00141A  0100               	movlb	0	; () banked
  7684  00141C  5167               	movf	(?___wmul+1)& (0+255),w,b
  7685  00141E  0100               	movlb	0	; () banked
  7686  001420  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  7687  001422  6EDA               	movwf	fsr2h,c
  7688  001424  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  7689  001428  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  7690  00142C  CFDE FFE6          	movff	postinc2,postinc1
  7691  001430  CFDE FFE6          	movff	postinc2,postinc1
  7692  001434  CFDE FFE6          	movff	postinc2,postinc1
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  7696  001438  0100               	movlb	0	; () banked
  7697  00143A  EE20 F001          	lfsr	2,1
  7698  00143E  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7699  001440  26D9               	addwf	fsr2l,f,c
  7700  001442  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7701  001444  22DA               	addwfc	fsr2h,f,c
  7702  001446  2ADF               	incf	indf2,f,c
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  7706  001448  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  7707  00144C  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  7708  001450  0100               	movlb	0	; () banked
  7709  001452  EE10 F001          	lfsr	1,1
  7710  001456  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7711  001458  26E1               	addwf	fsr1l,f,c
  7712  00145A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7713  00145C  22E2               	addwfc	fsr1h,f,c
  7714  00145E  50DE               	movf	postinc2,w,c
  7715  001460  5CE6               	subwf	postinc1,w,c
  7716  001462  A0D8               	btfss	status,0,c
  7717  001464  D019               	goto	l3635
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  7721  001466  0100               	movlb	0	; () banked
  7722  001468  EE20 F001          	lfsr	2,1
  7723  00146C  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7724  00146E  26D9               	addwf	fsr2l,f,c
  7725  001470  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7726  001472  22DA               	addwfc	fsr2h,f,c
  7727  001474  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  7728  001478  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  7729  00147C  50E7               	movf	indf1,w,c
  7730  00147E  0100               	movlb	0	; () banked
  7731  001480  6F60               	movwf	___lbmod@divisor& (0+255),b
  7732  001482  0100               	movlb	0	; () banked
  7733  001484  EE10 F001          	lfsr	1,1
  7734  001488  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7735  00148A  26E1               	addwf	fsr1l,f,c
  7736  00148C  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7737  00148E  22E2               	addwfc	fsr1h,f,c
  7738  001490  50E7               	movf	indf1,w,c
  7739  001492  ECBB  F013         	call	___lbmod
  7740  001496  6EDF               	movwf	indf2,c
  7741  001498                     l3635:
  7742                           
  7743                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  7744  001498  0100               	movlb	0	; () banked
  7745  00149A  EE20 F002          	lfsr	2,2
  7746  00149E  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  7747  0014A0  26D9               	addwf	fsr2l,f,c
  7748  0014A2  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  7749  0014A4  22DA               	addwfc	fsr2h,f,c
  7750  0014A6  06DF               	decf	indf2,f,c
  7751  0014A8  50DF               	movf	indf2,w,c
  7752  0014AA  0100               	movlb	0	; () banked
  7753  0014AC  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  7757  0014AE  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  7758                           
  7759                           ;ES_Queue.c: 183: }else {
  7760  0014B2  D014               	goto	l3645
  7761  0014B4                     l3639:
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  7765  0014B4  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  7766  0014B8  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  7767  0014BC  0E00               	movlw	0
  7768  0014BE  6EDF               	movwf	indf2,c
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  7772  0014C0  0100               	movlb	0	; () banked
  7773  0014C2  EE20 F001          	lfsr	2,1
  7774  0014C6  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  7775  0014C8  26D9               	addwf	fsr2l,f,c
  7776  0014CA  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  7777  0014CC  22DA               	addwfc	fsr2h,f,c
  7778  0014CE  0E00               	movlw	0
  7779  0014D0  6EDE               	movwf	postinc2,c
  7780  0014D2  0E00               	movlw	0
  7781  0014D4  6EDD               	movwf	postdec2,c
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;ES_Queue.c: 186: NumLeft = 0;
  7785  0014D6  0E00               	movlw	0
  7786  0014D8  0100               	movlb	0	; () banked
  7787  0014DA  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
  7788  0014DC                     l3645:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;ES_Queue.c: 187: }
  7792                           ;ES_Queue.c: 188: return NumLeft;
  7793  0014DC  0100               	movlb	0	; () banked
  7794  0014DE  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  7795  0014E0  0012               	return	
  7796  0014E2                     __end_of_ES_DeQueue:
  7797                           	opt stack 0
  7798                           tosu	equ	0xFFF
  7799                           tosh	equ	0xFFE
  7800                           tosl	equ	0xFFD
  7801                           pclath	equ	0xFFA
  7802                           tblptru	equ	0xFF8
  7803                           tblptrh	equ	0xFF7
  7804                           tblptrl	equ	0xFF6
  7805                           tablat	equ	0xFF5
  7806                           prodh	equ	0xFF4
  7807                           prodl	equ	0xFF3
  7808                           intcon	equ	0xFF2
  7809                           postinc0	equ	0xFEE
  7810                           wreg	equ	0xFE8
  7811                           indf1	equ	0xFE7
  7812                           postinc1	equ	0xFE6
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___lbmod *****************
  7824 ;; Defined at:
  7825 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  dividend        1    wreg     unsigned char 
  7828 ;;  divisor         1    0[BANK0 ] unsigned char 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  dividend        1    1[BANK0 ] unsigned char 
  7831 ;;  rem             1    3[BANK0 ] unsigned char 
  7832 ;;  counter         1    2[BANK0 ] unsigned char 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      unsigned char 
  7835 ;; Registers used:
  7836 ;;		wreg, status,2, status,0
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7842 ;;      Params:         0       1       0       0
  7843 ;;      Locals:         0       3       0       0
  7844 ;;      Temps:          0       0       0       0
  7845 ;;      Totals:         0       4       0       0
  7846 ;;Total ram usage:        4 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    7
  7849 ;; This function calls:
  7850 ;;		Nothing
  7851 ;; This function is called by:
  7852 ;;		_ES_DeQueue
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text33
  7857  002776                     __ptext33:
  7858                           	opt stack 0
  7859  002776                     ___lbmod:
  7860                           	opt stack 21
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;incstack = 0
  7864                           ;___lbmod@dividend stored from wreg
  7865  002776  0100               	movlb	0	; () banked
  7866  002778  6F61               	movwf	___lbmod@dividend& (0+255),b
  7867  00277A  0E08               	movlw	8
  7868  00277C  0100               	movlb	0	; () banked
  7869  00277E  6F62               	movwf	___lbmod@counter& (0+255),b
  7870  002780  0E00               	movlw	0
  7871  002782  0100               	movlb	0	; () banked
  7872  002784  6F63               	movwf	___lbmod@rem& (0+255),b
  7873  002786                     l3587:
  7874                           
  7875                           ; BSR set to: 0
  7876  002786  90D8               	bcf	status,0,c
  7877  002788  0100               	movlb	0	; () banked
  7878  00278A  3561               	rlcf	___lbmod@dividend& (0+255),w,b
  7879  00278C  0100               	movlb	0	; () banked
  7880  00278E  3563               	rlcf	___lbmod@rem& (0+255),w,b
  7881  002790  0100               	movlb	0	; () banked
  7882  002792  6F63               	movwf	___lbmod@rem& (0+255),b
  7883                           
  7884                           ; BSR set to: 0
  7885  002794  0100               	movlb	0	; () banked
  7886  002796  90D8               	bcf	status,0,c
  7887  002798  3761               	rlcf	___lbmod@dividend& (0+255),f,b
  7888                           
  7889                           ; BSR set to: 0
  7890  00279A  0100               	movlb	0	; () banked
  7891  00279C  5160               	movf	___lbmod@divisor& (0+255),w,b
  7892  00279E  0100               	movlb	0	; () banked
  7893  0027A0  5D63               	subwf	___lbmod@rem& (0+255),w,b
  7894  0027A2  A0D8               	btfss	status,0,c
  7895  0027A4  D004               	goto	l3595
  7896                           
  7897                           ; BSR set to: 0
  7898  0027A6  0100               	movlb	0	; () banked
  7899  0027A8  5160               	movf	___lbmod@divisor& (0+255),w,b
  7900  0027AA  0100               	movlb	0	; () banked
  7901  0027AC  5F63               	subwf	___lbmod@rem& (0+255),f,b
  7902  0027AE                     l3595:
  7903                           
  7904                           ; BSR set to: 0
  7905  0027AE  0100               	movlb	0	; () banked
  7906  0027B0  2F62               	decfsz	___lbmod@counter& (0+255),f,b
  7907  0027B2  D7E9               	goto	l3587
  7908                           
  7909                           ; BSR set to: 0
  7910                           
  7911                           ; BSR set to: 0
  7912  0027B4  0100               	movlb	0	; () banked
  7913  0027B6  5163               	movf	___lbmod@rem& (0+255),w,b
  7914  0027B8  0012               	return	
  7915  0027BA                     __end_of___lbmod:
  7916                           	opt stack 0
  7917                           tosu	equ	0xFFF
  7918                           tosh	equ	0xFFE
  7919                           tosl	equ	0xFFD
  7920                           pclath	equ	0xFFA
  7921                           tblptru	equ	0xFF8
  7922                           tblptrh	equ	0xFF7
  7923                           tblptrl	equ	0xFF6
  7924                           tablat	equ	0xFF5
  7925                           prodh	equ	0xFF4
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           postinc0	equ	0xFEE
  7929                           wreg	equ	0xFE8
  7930                           indf1	equ	0xFE7
  7931                           postinc1	equ	0xFE6
  7932                           postdec1	equ	0xFE5
  7933                           fsr1h	equ	0xFE2
  7934                           fsr1l	equ	0xFE1
  7935                           indf2	equ	0xFDF
  7936                           postinc2	equ	0xFDE
  7937                           postdec2	equ	0xFDD
  7938                           fsr2h	equ	0xFDA
  7939                           fsr2l	equ	0xFD9
  7940                           status	equ	0xFD8
  7941                           
  7942 ;; *************** function _ES_CheckUserEvents *****************
  7943 ;; Defined at:
  7944 ;;		line 46 in file "ES_CheckEvents.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  i               1    0[BANK0 ] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      unsigned char 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7958 ;;      Params:         0       0       0       0
  7959 ;;      Locals:         0       1       0       0
  7960 ;;      Temps:          0       0       0       0
  7961 ;;      Totals:         0       1       0       0
  7962 ;;Total ram usage:        1 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    8
  7965 ;; This function calls:
  7966 ;;		_Check4Keystroke
  7967 ;; This function is called by:
  7968 ;;		_ES_Run
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text34
  7973  00272C                     __ptext34:
  7974                           	opt stack 0
  7975  00272C                     _ES_CheckUserEvents:
  7976                           	opt stack 21
  7977                           
  7978                           ;ES_CheckEvents.c: 48: uint8_t i;
  7979                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;incstack = 0
  7983  00272C  0E00               	movlw	0
  7984  00272E  0100               	movlb	0	; () banked
  7985  002730  6F60               	movwf	ES_CheckUserEvents@i& (0+255),b
  7986  002732  0100               	movlb	0	; () banked
  7987  002734  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  7988  002736  0100               	movlb	0	; () banked
  7989  002738  A4D8               	btfss	status,2,c
  7990  00273A  0012               	return	
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  7994                           
  7995                           ; BSR set to: 0
  7996                           
  7997                           ; BSR set to: 0
  7998  00273C  0100               	movlb	0	; () banked
  7999  00273E  5160               	movf	ES_CheckUserEvents@i& (0+255),w,b
  8000  002740  0D02               	mullw	2
  8001  002742  0E5E               	movlw	low _ES_EventList
  8002  002744  24F3               	addwf	prodl,w,c
  8003  002746  6EF6               	movwf	tblptrl,c
  8004  002748  0E03               	movlw	high _ES_EventList
  8005  00274A  20F4               	addwfc	prodh,w,c
  8006  00274C  6EF7               	movwf	tblptrh,c
  8007  00274E                     	if	0	;There are less than 3 active tblptr bytes
  8008  00274E                     	endif
  8009  00274E  D801               	call	u2298
  8010  002750  D00C               	goto	u2299
  8011  002752                     u2298:
  8012  002752  0005               	push	
  8013  002754  6EFA               	movwf	pclath,c
  8014  002756  0009               	tblrd		*+
  8015  002758  50F5               	movf	tablat,w,c
  8016  00275A  6EFD               	movwf	tosl,c
  8017  00275C  0009               	tblrd		*+
  8018  00275E  50F5               	movf	tablat,w,c
  8019  002760  6EFE               	movwf	tosh,c
  8020  002762  50F8               	movf	tblptru,w,c
  8021  002764  6EFF               	movwf	tosu,c
  8022  002766  50FA               	movf	pclath,w,c
  8023  002768  0012               	return		;indir
  8024  00276A                     u2299:
  8025  00276A  06E8               	decf	wreg,f,c
  8026  00276C  B4D8               	btfsc	status,2,c
  8027  00276E  0012               	return	
  8028                           
  8029                           ;ES_CheckEvents.c: 52: break;
  8030  002770  0100               	movlb	0	; () banked
  8031  002772  2B60               	incf	ES_CheckUserEvents@i& (0+255),f,b
  8032  002774  D7DE               	goto	L20
  8033  002776                     __end_of_ES_CheckUserEvents:
  8034                           	opt stack 0
  8035                           tosu	equ	0xFFF
  8036                           tosh	equ	0xFFE
  8037                           tosl	equ	0xFFD
  8038                           pclath	equ	0xFFA
  8039                           tblptru	equ	0xFF8
  8040                           tblptrh	equ	0xFF7
  8041                           tblptrl	equ	0xFF6
  8042                           tablat	equ	0xFF5
  8043                           prodh	equ	0xFF4
  8044                           prodl	equ	0xFF3
  8045                           intcon	equ	0xFF2
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           indf1	equ	0xFE7
  8049                           postinc1	equ	0xFE6
  8050                           postdec1	equ	0xFE5
  8051                           fsr1h	equ	0xFE2
  8052                           fsr1l	equ	0xFE1
  8053                           indf2	equ	0xFDF
  8054                           postinc2	equ	0xFDE
  8055                           postdec2	equ	0xFDD
  8056                           fsr2h	equ	0xFDA
  8057                           fsr2l	equ	0xFD9
  8058                           status	equ	0xFD8
  8059                           
  8060 ;; *************** function _Check4Keystroke *****************
  8061 ;; Defined at:
  8062 ;;		line 62 in file "EventCheckers.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;		None
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;		None
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  1    wreg      unsigned char 
  8069 ;; Registers used:
  8070 ;;		wreg
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8076 ;;      Params:         0       0       0       0
  8077 ;;      Locals:         0       0       0       0
  8078 ;;      Temps:          0       0       0       0
  8079 ;;      Totals:         0       0       0       0
  8080 ;;Total ram usage:        0 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    7
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_ES_CheckUserEvents
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text35
  8091  002B9A                     __ptext35:
  8092                           	opt stack 0
  8093  002B9A                     _Check4Keystroke:
  8094                           	opt stack 21
  8095                           
  8096                           ;EventCheckers.c: 78: return 0;
  8097                           
  8098                           ;incstack = 0
  8099  002B9A  0E00               	movlw	0
  8100  002B9C  0012               	return	
  8101  002B9E                     __end_of_Check4Keystroke:
  8102                           	opt stack 0
  8103                           tosu	equ	0xFFF
  8104                           tosh	equ	0xFFE
  8105                           tosl	equ	0xFFD
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           postinc0	equ	0xFEE
  8115                           wreg	equ	0xFE8
  8116                           indf1	equ	0xFE7
  8117                           postinc1	equ	0xFE6
  8118                           postdec1	equ	0xFE5
  8119                           fsr1h	equ	0xFE2
  8120                           fsr1l	equ	0xFE1
  8121                           indf2	equ	0xFDF
  8122                           postinc2	equ	0xFDE
  8123                           postdec2	equ	0xFDD
  8124                           fsr2h	equ	0xFDA
  8125                           fsr2l	equ	0xFD9
  8126                           status	equ	0xFD8
  8127                           
  8128 ;; *************** function _ES_Initialize *****************
  8129 ;; Defined at:
  8130 ;;		line 242 in file "ES_Framework.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  NewRate         2   33[BANK0 ] enum E15423
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  i               1   35[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      enum E15494
  8137 ;; Registers used:
  8138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8144 ;;      Params:         0       2       0       0
  8145 ;;      Locals:         0       1       0       0
  8146 ;;      Temps:          0       0       0       0
  8147 ;;      Totals:         0       3       0       0
  8148 ;;Total ram usage:        3 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:   11
  8151 ;; This function calls:
  8152 ;;		_ES_InitQueue
  8153 ;;		_ES_Timer_Init
  8154 ;;		_InitPatternControlService
  8155 ;;		_InitSPI32ControlService
  8156 ;; This function is called by:
  8157 ;;		_main
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           	psect	text36
  8162  001A1E                     __ptext36:
  8163                           	opt stack 0
  8164  001A1E                     _ES_Initialize:
  8165                           	opt stack 19
  8166                           
  8167                           ;ES_Framework.c: 243: uint8_t i;
  8168                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  8169                           
  8170                           ;incstack = 0
  8171  001A1E  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  8172  001A22  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  8173  001A26  EC9E  F015         	call	_ES_Timer_Init	;wreg free
  8174                           
  8175                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  8176  001A2A  0E00               	movlw	0
  8177  001A2C  0100               	movlb	0	; () banked
  8178  001A2E  6F83               	movwf	ES_Initialize@i& (0+255),b
  8179  001A30                     l3849:
  8180                           
  8181                           ; BSR set to: 0
  8182  001A30  0E01               	movlw	1
  8183  001A32  0100               	movlb	0	; () banked
  8184  001A34  6583               	cpfsgt	ES_Initialize@i& (0+255),b
  8185  001A36  D001               	goto	l3853
  8186  001A38  D066               	goto	l3873
  8187  001A3A                     l3853:
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  8191                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  8192  001A3A  0100               	movlb	0	; () banked
  8193  001A3C  5183               	movf	ES_Initialize@i& (0+255),w,b
  8194  001A3E  0D04               	mullw	4
  8195  001A40  0E50               	movlw	low _ServDescList
  8196  001A42  24F3               	addwf	prodl,w,c
  8197  001A44  6EF6               	movwf	tblptrl,c
  8198  001A46  0E03               	movlw	high _ServDescList
  8199  001A48  20F4               	addwfc	prodh,w,c
  8200  001A4A  6EF7               	movwf	tblptrh,c
  8201  001A4C                     	if	0	;There are less than 3 active tblptr bytes
  8202  001A4C                     	endif
  8203  001A4C  0009               	tblrd		*+
  8204  001A4E  50F5               	movf	tablat,w,c
  8205  001A50  0009               	tblrd		*+
  8206  001A52  10F5               	iorwf	tablat,w,c
  8207  001A54  B4D8               	btfsc	status,2,c
  8208  001A56  D013               	goto	l3857
  8209                           
  8210                           ; BSR set to: 0
  8211  001A58  0100               	movlb	0	; () banked
  8212  001A5A  5183               	movf	ES_Initialize@i& (0+255),w,b
  8213  001A5C  0D04               	mullw	4
  8214  001A5E  0E02               	movlw	2
  8215  001A60  26F3               	addwf	prodl,f,c
  8216  001A62  0E00               	movlw	0
  8217  001A64  22F4               	addwfc	prodh,f,c
  8218  001A66  0E50               	movlw	low _ServDescList
  8219  001A68  24F3               	addwf	prodl,w,c
  8220  001A6A  6EF6               	movwf	tblptrl,c
  8221  001A6C  0E03               	movlw	high _ServDescList
  8222  001A6E  20F4               	addwfc	prodh,w,c
  8223  001A70  6EF7               	movwf	tblptrh,c
  8224  001A72                     	if	0	;There are less than 3 active tblptr bytes
  8225  001A72                     	endif
  8226  001A72  0009               	tblrd		*+
  8227  001A74  50F5               	movf	tablat,w,c
  8228  001A76  0009               	tblrd		*+
  8229  001A78  10F5               	iorwf	tablat,w,c
  8230  001A7A  A4D8               	btfss	status,2,c
  8231  001A7C  D002               	goto	l3861
  8232  001A7E                     l3857:
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;ES_Framework.c: 249: return FailedPointer;
  8236  001A7E  0E03               	movlw	3
  8237                           
  8238                           ; BSR set to: 0
  8239  001A80  0012               	return	
  8240  001A82                     l3861:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  8244  001A82  0100               	movlb	0	; () banked
  8245  001A84  5183               	movf	ES_Initialize@i& (0+255),w,b
  8246  001A86  0D03               	mullw	3
  8247  001A88  0E58               	movlw	low _EventQueues
  8248  001A8A  24F3               	addwf	prodl,w,c
  8249  001A8C  6EF6               	movwf	tblptrl,c
  8250  001A8E  0E03               	movlw	high _EventQueues
  8251  001A90  20F4               	addwfc	prodh,w,c
  8252  001A92  6EF7               	movwf	tblptrh,c
  8253  001A94                     	if	0	;There are less than 3 active tblptr bytes
  8254  001A94                     	endif
  8255  001A94  0009               	tblrd		*+
  8256  001A96  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
  8257  001A9A  000A               	tblrd		*-
  8258  001A9C  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
  8259  001AA0  0100               	movlb	0	; () banked
  8260  001AA2  5183               	movf	ES_Initialize@i& (0+255),w,b
  8261  001AA4  0D03               	mullw	3
  8262  001AA6  0E02               	movlw	2
  8263  001AA8  26F3               	addwf	prodl,f,c
  8264  001AAA  0E00               	movlw	0
  8265  001AAC  22F4               	addwfc	prodh,f,c
  8266  001AAE  0E58               	movlw	low _EventQueues
  8267  001AB0  24F3               	addwf	prodl,w,c
  8268  001AB2  6EF6               	movwf	tblptrl,c
  8269  001AB4  0E03               	movlw	high _EventQueues
  8270  001AB6  20F4               	addwfc	prodh,w,c
  8271  001AB8  6EF7               	movwf	tblptrh,c
  8272  001ABA                     	if	0	;There are less than 3 active tblptr bytes
  8273  001ABA                     	endif
  8274  001ABA  0008               	tblrd		*
  8275  001ABC  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
  8276  001AC0  ECFD  F013         	call	_ES_InitQueue	;wreg free
  8277                           
  8278                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  8279  001AC4  0100               	movlb	0	; () banked
  8280  001AC6  5183               	movf	ES_Initialize@i& (0+255),w,b
  8281  001AC8  0D04               	mullw	4
  8282  001ACA  0E50               	movlw	low _ServDescList
  8283  001ACC  24F3               	addwf	prodl,w,c
  8284  001ACE  6EF6               	movwf	tblptrl,c
  8285  001AD0  0E03               	movlw	high _ServDescList
  8286  001AD2  20F4               	addwfc	prodh,w,c
  8287  001AD4  6EF7               	movwf	tblptrh,c
  8288  001AD6                     	if	0	;There are less than 3 active tblptr bytes
  8289  001AD6                     	endif
  8290  001AD6  D801               	call	u2598
  8291  001AD8  D00E               	goto	u2599
  8292  001ADA                     u2598:
  8293  001ADA  0005               	push	
  8294  001ADC  6EFA               	movwf	pclath,c
  8295  001ADE  0009               	tblrd		*+
  8296  001AE0  50F5               	movf	tablat,w,c
  8297  001AE2  6EFD               	movwf	tosl,c
  8298  001AE4  0009               	tblrd		*+
  8299  001AE6  50F5               	movf	tablat,w,c
  8300  001AE8  6EFE               	movwf	tosh,c
  8301  001AEA  50F8               	movf	tblptru,w,c
  8302  001AEC  6EFF               	movwf	tosu,c
  8303  001AEE  50FA               	movf	pclath,w,c
  8304  001AF0  0100               	movlb	0	; () banked
  8305  001AF2  5183               	movf	ES_Initialize@i& (0+255),w,b
  8306  001AF4  0012               	return		;indir
  8307  001AF6                     u2599:
  8308  001AF6  06E8               	decf	wreg,f,c
  8309  001AF8  B4D8               	btfsc	status,2,c
  8310  001AFA  D002               	goto	l3869
  8311                           
  8312                           ;ES_Framework.c: 254: return FailedInit;
  8313  001AFC  0E05               	movlw	5
  8314  001AFE  0012               	return	
  8315  001B00                     l3869:
  8316  001B00  0100               	movlb	0	; () banked
  8317  001B02  2B83               	incf	ES_Initialize@i& (0+255),f,b
  8318  001B04  D795               	goto	l3849
  8319  001B06                     l3873:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;ES_Framework.c: 255: }
  8323                           ;ES_Framework.c: 256: return Success;
  8324  001B06  0E00               	movlw	0
  8325  001B08  0012               	return	
  8326  001B0A                     __end_of_ES_Initialize:
  8327                           	opt stack 0
  8328                           tosu	equ	0xFFF
  8329                           tosh	equ	0xFFE
  8330                           tosl	equ	0xFFD
  8331                           pclath	equ	0xFFA
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           intcon	equ	0xFF2
  8339                           postinc0	equ	0xFEE
  8340                           wreg	equ	0xFE8
  8341                           indf1	equ	0xFE7
  8342                           postinc1	equ	0xFE6
  8343                           postdec1	equ	0xFE5
  8344                           fsr1h	equ	0xFE2
  8345                           fsr1l	equ	0xFE1
  8346                           indf2	equ	0xFDF
  8347                           postinc2	equ	0xFDE
  8348                           postdec2	equ	0xFDD
  8349                           fsr2h	equ	0xFDA
  8350                           fsr2l	equ	0xFD9
  8351                           status	equ	0xFD8
  8352                           
  8353 ;; *************** function _InitPatternControlService *****************
  8354 ;; Defined at:
  8355 ;;		line 99 in file "Pattern_ControlService.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;  Priority        1    wreg     unsigned char 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  Priority        1   32[BANK0 ] unsigned char 
  8360 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8361 ;; Return value:  Size  Location     Type
  8362 ;;                  1    wreg      unsigned char 
  8363 ;; Registers used:
  8364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8365 ;; Tracked objects:
  8366 ;;		On entry : 0/0
  8367 ;;		On exit  : 0/0
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8370 ;;      Params:         0       0       0       0
  8371 ;;      Locals:         0       4       0       0
  8372 ;;      Temps:          0       0       0       0
  8373 ;;      Totals:         0       4       0       0
  8374 ;;Total ram usage:        4 bytes
  8375 ;; Hardware stack levels used:    1
  8376 ;; Hardware stack levels required when called:   10
  8377 ;; This function calls:
  8378 ;;		_CAN_Init
  8379 ;;		_DotStar_Init
  8380 ;;		_ES_PostToService
  8381 ;;		_SetupPattern
  8382 ;; This function is called by:
  8383 ;;		_ES_Initialize
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text37
  8388  0025E4                     __ptext37:
  8389                           	opt stack 0
  8390  0025E4                     _InitPatternControlService:
  8391                           	opt stack 19
  8392                           
  8393                           ;incstack = 0
  8394                           ;InitPatternControlService@Priority stored from wreg
  8395  0025E4  0100               	movlb	0	; () banked
  8396  0025E6  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
  8397                           
  8398                           ;Pattern_ControlService.c: 101: ES_Event ThisEvent;
  8399                           ;Pattern_ControlService.c: 103: MyPriority = Priority;
  8400  0025E8  C080  F0E9         	movff	InitPatternControlService@Priority,_MyPriority
  8401                           
  8402                           ;Pattern_ControlService.c: 105: DotStar_Init(76,PatternConfigs[2]);
  8403  0025EC  C0F6  F060         	movff	_PatternConfigs+2,DotStar_Init@brightness
  8404  0025F0  0E4C               	movlw	76
  8405  0025F2  EC7A  F00F         	call	_DotStar_Init
  8406                           
  8407                           ;Pattern_ControlService.c: 106: SetupPattern(PatternConfigs, 76);
  8408  0025F6  0EF4               	movlw	low _PatternConfigs
  8409  0025F8  0100               	movlb	0	; () banked
  8410  0025FA  6F60               	movwf	SetupPattern@configs& (0+255),b
  8411  0025FC  0E00               	movlw	high _PatternConfigs
  8412  0025FE  0100               	movlb	0	; () banked
  8413  002600  6F61               	movwf	(SetupPattern@configs+1)& (0+255),b
  8414  002602  0E4C               	movlw	76
  8415  002604  0100               	movlb	0	; () banked
  8416  002606  6F62               	movwf	SetupPattern@numPixels& (0+255),b
  8417  002608  EC97  F015         	call	_SetupPattern	;wreg free
  8418                           
  8419                           ;Pattern_ControlService.c: 108: CAN_Init();
  8420  00260C  ECB8  F015         	call	_CAN_Init	;wreg free
  8421                           
  8422                           ;Pattern_ControlService.c: 110: CurrentState = Pattern_Startup;
  8423  002610  0E00               	movlw	0
  8424  002612  0100               	movlb	0	; () banked
  8425  002614  6FE6               	movwf	_CurrentState& (0+255),b
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;Pattern_ControlService.c: 112: ThisEvent.EventType = ES_INIT;
  8429  002616  0E02               	movlw	2
  8430  002618  0100               	movlb	0	; () banked
  8431  00261A  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;Pattern_ControlService.c: 113: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8435  00261C  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  8436  002620  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8437  002624  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8438  002628  0100               	movlb	0	; () banked
  8439  00262A  51E9               	movf	_MyPriority& (0+255),w,b
  8440  00262C  EC4A  F012         	call	_ES_PostToService
  8441  002630  06E8               	decf	wreg,f,c
  8442  002632  A4D8               	btfss	status,2,c
  8443  002634  D002               	goto	l3693
  8444                           
  8445                           ;Pattern_ControlService.c: 114: {
  8446                           ;Pattern_ControlService.c: 115: return 1;
  8447  002636  0E01               	movlw	1
  8448                           
  8449                           ;Pattern_ControlService.c: 116: }else
  8450  002638  0012               	return	
  8451  00263A                     l3693:
  8452                           
  8453                           ;Pattern_ControlService.c: 117: {
  8454                           ;Pattern_ControlService.c: 118: return 0;
  8455  00263A  0E00               	movlw	0
  8456  00263C  0012               	return	
  8457  00263E                     __end_of_InitPatternControlService:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclath	equ	0xFFA
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           postinc0	equ	0xFEE
  8471                           wreg	equ	0xFE8
  8472                           indf1	equ	0xFE7
  8473                           postinc1	equ	0xFE6
  8474                           postdec1	equ	0xFE5
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _InitSPI32ControlService *****************
  8485 ;; Defined at:
  8486 ;;		line 80 in file "SPI32_ControlService.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  Priority        1    wreg     unsigned char 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;  Priority        1   32[BANK0 ] unsigned char 
  8491 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      unsigned char 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8501 ;;      Params:         0       0       0       0
  8502 ;;      Locals:         0       4       0       0
  8503 ;;      Temps:          0       0       0       0
  8504 ;;      Totals:         0       4       0       0
  8505 ;;Total ram usage:        4 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:   10
  8508 ;; This function calls:
  8509 ;;		_ES_PostToService
  8510 ;;		_SPI32_Init
  8511 ;; This function is called by:
  8512 ;;		_ES_Initialize
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text38
  8517  002836                     __ptext38:
  8518                           	opt stack 0
  8519  002836                     _InitSPI32ControlService:
  8520                           	opt stack 19
  8521                           
  8522                           ;incstack = 0
  8523                           ;InitSPI32ControlService@Priority stored from wreg
  8524  002836  0100               	movlb	0	; () banked
  8525  002838  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
  8526                           
  8527                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  8528                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  8529  00283A  C080  F0E5         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  8530                           
  8531                           ;SPI32_ControlService.c: 86: SPI32_Init();
  8532  00283E  ECC5  F015         	call	_SPI32_Init	;wreg free
  8533                           
  8534                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  8535  002842  0E00               	movlw	0
  8536  002844  0100               	movlb	0	; () banked
  8537  002846  6FE4               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  8541  002848  0E02               	movlw	2
  8542  00284A  0100               	movlb	0	; () banked
  8543  00284C  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  8547  00284E  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  8548  002852  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  8549  002856  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  8550  00285A  0100               	movlb	0	; () banked
  8551  00285C  51E5               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  8552  00285E  EC4A  F012         	call	_ES_PostToService
  8553  002862  06E8               	decf	wreg,f,c
  8554  002864  A4D8               	btfss	status,2,c
  8555  002866  D002               	goto	l3761
  8556                           
  8557                           ;SPI32_ControlService.c: 92: {
  8558                           ;SPI32_ControlService.c: 93: return 1;
  8559  002868  0E01               	movlw	1
  8560                           
  8561                           ;SPI32_ControlService.c: 94: }else
  8562  00286A  0012               	return	
  8563  00286C                     l3761:
  8564                           
  8565                           ;SPI32_ControlService.c: 95: {
  8566                           ;SPI32_ControlService.c: 96: return 0;
  8567  00286C  0E00               	movlw	0
  8568  00286E  0012               	return	
  8569  002870                     __end_of_InitSPI32ControlService:
  8570                           	opt stack 0
  8571                           tosu	equ	0xFFF
  8572                           tosh	equ	0xFFE
  8573                           tosl	equ	0xFFD
  8574                           pclath	equ	0xFFA
  8575                           tblptru	equ	0xFF8
  8576                           tblptrh	equ	0xFF7
  8577                           tblptrl	equ	0xFF6
  8578                           tablat	equ	0xFF5
  8579                           prodh	equ	0xFF4
  8580                           prodl	equ	0xFF3
  8581                           intcon	equ	0xFF2
  8582                           postinc0	equ	0xFEE
  8583                           wreg	equ	0xFE8
  8584                           indf1	equ	0xFE7
  8585                           postinc1	equ	0xFE6
  8586                           postdec1	equ	0xFE5
  8587                           fsr1h	equ	0xFE2
  8588                           fsr1l	equ	0xFE1
  8589                           indf2	equ	0xFDF
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           
  8596 ;; *************** function _SPI32_Init *****************
  8597 ;; Defined at:
  8598 ;;		line 66 in file "SPI32_HW.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;		None
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;		None
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      void 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8612 ;;      Params:         0       0       0       0
  8613 ;;      Locals:         0       0       0       0
  8614 ;;      Temps:          0       0       0       0
  8615 ;;      Totals:         0       0       0       0
  8616 ;;Total ram usage:        0 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    8
  8619 ;; This function calls:
  8620 ;;		_HW_Init
  8621 ;; This function is called by:
  8622 ;;		_InitSPI32ControlService
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           	psect	text39
  8627  002B8A                     __ptext39:
  8628                           	opt stack 0
  8629  002B8A                     _SPI32_Init:
  8630                           	opt stack 20
  8631                           
  8632                           ;SPI32_HW.c: 68: HW_Init();
  8633                           
  8634                           ;incstack = 0
  8635  002B8A  EC06  F015         	call	_HW_Init	;wreg free
  8636  002B8E  0012               	return		;funcret
  8637  002B90                     __end_of_SPI32_Init:
  8638                           	opt stack 0
  8639                           tosu	equ	0xFFF
  8640                           tosh	equ	0xFFE
  8641                           tosl	equ	0xFFD
  8642                           pclath	equ	0xFFA
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           postinc0	equ	0xFEE
  8651                           wreg	equ	0xFE8
  8652                           indf1	equ	0xFE7
  8653                           postinc1	equ	0xFE6
  8654                           postdec1	equ	0xFE5
  8655                           fsr1h	equ	0xFE2
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function _HW_Init *****************
  8665 ;; Defined at:
  8666 ;;		line 128 in file "SPI32_HW.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, status,2
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8680 ;;      Params:         0       0       0       0
  8681 ;;      Locals:         0       0       0       0
  8682 ;;      Temps:          0       0       0       0
  8683 ;;      Totals:         0       0       0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    7
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_SPI32_Init
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           	psect	text40
  8695  002A0C                     __ptext40:
  8696                           	opt stack 0
  8697  002A0C                     _HW_Init:
  8698                           	opt stack 20
  8699                           
  8700                           ;SPI32_HW.c: 134: PORTC = 0x00;
  8701                           
  8702                           ;incstack = 0
  8703  002A0C  0E00               	movlw	0
  8704  002A0E  6E82               	movwf	3970,c	;volatile
  8705                           
  8706                           ;SPI32_HW.c: 135: LATC = 0x00;
  8707  002A10  0E00               	movlw	0
  8708  002A12  6E8B               	movwf	3979,c	;volatile
  8709                           
  8710                           ;SPI32_HW.c: 136: ADCON1 = 0x0F;
  8711  002A14  0E0F               	movlw	15
  8712  002A16  6EC1               	movwf	4033,c	;volatile
  8713                           
  8714                           ;SPI32_HW.c: 137: TRISC = 0x00;
  8715  002A18  0E00               	movlw	0
  8716  002A1A  6E94               	movwf	3988,c	;volatile
  8717                           
  8718                           ;SPI32_HW.c: 139: SSPIE = 1;
  8719  002A1C  869D               	bsf	3997,3,c	;volatile
  8720                           
  8721                           ;SPI32_HW.c: 143: SSPCON1 = 0x00;
  8722  002A1E  0E00               	movlw	0
  8723  002A20  6EC6               	movwf	4038,c	;volatile
  8724                           
  8725                           ;SPI32_HW.c: 144: SSPSTAT = 0b01000000;
  8726  002A22  0E40               	movlw	64
  8727  002A24  6EC7               	movwf	4039,c	;volatile
  8728                           
  8729                           ;SPI32_HW.c: 145: SSPADD = 0xFF;
  8730  002A26  68C8               	setf	4040,c	;volatile
  8731                           
  8732                           ;SPI32_HW.c: 146: SSPCON1 = 0b00110000;
  8733  002A28  0E30               	movlw	48
  8734  002A2A  6EC6               	movwf	4038,c	;volatile
  8735  002A2C  0012               	return		;funcret
  8736  002A2E                     __end_of_HW_Init:
  8737                           	opt stack 0
  8738                           tosu	equ	0xFFF
  8739                           tosh	equ	0xFFE
  8740                           tosl	equ	0xFFD
  8741                           pclath	equ	0xFFA
  8742                           tblptru	equ	0xFF8
  8743                           tblptrh	equ	0xFF7
  8744                           tblptrl	equ	0xFF6
  8745                           tablat	equ	0xFF5
  8746                           prodh	equ	0xFF4
  8747                           prodl	equ	0xFF3
  8748                           intcon	equ	0xFF2
  8749                           postinc0	equ	0xFEE
  8750                           wreg	equ	0xFE8
  8751                           indf1	equ	0xFE7
  8752                           postinc1	equ	0xFE6
  8753                           postdec1	equ	0xFE5
  8754                           fsr1h	equ	0xFE2
  8755                           fsr1l	equ	0xFE1
  8756                           indf2	equ	0xFDF
  8757                           postinc2	equ	0xFDE
  8758                           postdec2	equ	0xFDD
  8759                           fsr2h	equ	0xFDA
  8760                           fsr2l	equ	0xFD9
  8761                           status	equ	0xFD8
  8762                           
  8763 ;; *************** function _SetupPattern *****************
  8764 ;; Defined at:
  8765 ;;		line 79 in file "Pattern_RGBPatterns.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  8768 ;;		 -> PatternConfigs(5), 
  8769 ;;  numPixels       1    2[BANK0 ] unsigned char 
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;		None
  8772 ;; Return value:  Size  Location     Type
  8773 ;;                  1    wreg      void 
  8774 ;; Registers used:
  8775 ;;		wreg, status,2, status,0
  8776 ;; Tracked objects:
  8777 ;;		On entry : 0/0
  8778 ;;		On exit  : 0/0
  8779 ;;		Unchanged: 0/0
  8780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8781 ;;      Params:         0       3       0       0
  8782 ;;      Locals:         0       0       0       0
  8783 ;;      Temps:          0       0       0       0
  8784 ;;      Totals:         0       3       0       0
  8785 ;;Total ram usage:        3 bytes
  8786 ;; Hardware stack levels used:    1
  8787 ;; Hardware stack levels required when called:    7
  8788 ;; This function calls:
  8789 ;;		Nothing
  8790 ;; This function is called by:
  8791 ;;		_InitPatternControlService
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           	psect	text41
  8796  002B2E                     __ptext41:
  8797                           	opt stack 0
  8798  002B2E                     _SetupPattern:
  8799                           	opt stack 21
  8800                           
  8801                           ;Pattern_RGBPatterns.c: 81: PatternConfigs = configs;
  8802                           
  8803                           ;incstack = 0
  8804  002B2E  C060  F0DA         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  8805  002B32  C061  F0DB         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  8806                           
  8807                           ;Pattern_RGBPatterns.c: 83: Length = numPixels;
  8808  002B36  C062  F0E3         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  8809  002B3A  0012               	return		;funcret
  8810  002B3C                     __end_of_SetupPattern:
  8811                           	opt stack 0
  8812                           tosu	equ	0xFFF
  8813                           tosh	equ	0xFFE
  8814                           tosl	equ	0xFFD
  8815                           pclath	equ	0xFFA
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           postinc0	equ	0xFEE
  8824                           wreg	equ	0xFE8
  8825                           indf1	equ	0xFE7
  8826                           postinc1	equ	0xFE6
  8827                           postdec1	equ	0xFE5
  8828                           fsr1h	equ	0xFE2
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function _ES_PostToService *****************
  8838 ;; Defined at:
  8839 ;;		line 351 in file "ES_Framework.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  WhichService    1    wreg     unsigned char 
  8842 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  WhichService    1   28[BANK0 ] unsigned char 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      unsigned char 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8854 ;;      Params:         0       3       0       0
  8855 ;;      Locals:         0       1       0       0
  8856 ;;      Temps:          0       2       0       0
  8857 ;;      Totals:         0       6       0       0
  8858 ;;Total ram usage:        6 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    9
  8861 ;; This function calls:
  8862 ;;		_ES_EnQueueFIFO
  8863 ;; This function is called by:
  8864 ;;		_InitPatternControlService
  8865 ;;		_PostPatternControlService
  8866 ;;		_InitSPI32ControlService
  8867 ;;		_PostSPI32ControlService
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text42
  8872  002494                     __ptext42:
  8873                           	opt stack 0
  8874  002494                     _ES_PostToService:
  8875                           	opt stack 17
  8876                           
  8877                           ;incstack = 0
  8878                           ;ES_PostToService@WhichService stored from wreg
  8879  002494  0100               	movlb	0	; () banked
  8880  002496  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
  8881                           
  8882                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  8883                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  8884                           ;ES_Framework.c: 354: 1 )){
  8885  002498  0E02               	movlw	2
  8886  00249A  0100               	movlb	0	; () banked
  8887  00249C  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
  8888  00249E  D033               	goto	l2885
  8889                           
  8890                           ; BSR set to: 0
  8891  0024A0  0100               	movlb	0	; () banked
  8892  0024A2  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  8893  0024A4  0D03               	mullw	3
  8894  0024A6  0E58               	movlw	low _EventQueues
  8895  0024A8  24F3               	addwf	prodl,w,c
  8896  0024AA  6EF6               	movwf	tblptrl,c
  8897  0024AC  0E03               	movlw	high _EventQueues
  8898  0024AE  20F4               	addwfc	prodh,w,c
  8899  0024B0  6EF7               	movwf	tblptrh,c
  8900  0024B2                     	if	0	;There are less than 3 active tblptr bytes
  8901  0024B2                     	endif
  8902  0024B2  0009               	tblrd		*+
  8903  0024B4  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
  8904  0024B8  000A               	tblrd		*-
  8905  0024BA  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  8906  0024BE  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  8907  0024C2  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  8908  0024C6  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  8909  0024CA  EC85  F00D         	call	_ES_EnQueueFIFO	;wreg free
  8910  0024CE  06E8               	decf	wreg,f,c
  8911  0024D0  A4D8               	btfss	status,2,c
  8912  0024D2  D019               	goto	l2885
  8913                           
  8914                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  8915  0024D4  0100               	movlb	0	; () banked
  8916  0024D6  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
  8917  0024D8  0D02               	mullw	2
  8918  0024DA  0E01               	movlw	low _BitNum2SetMask
  8919  0024DC  24F3               	addwf	prodl,w,c
  8920  0024DE  6EF6               	movwf	tblptrl,c
  8921  0024E0  0E03               	movlw	high _BitNum2SetMask
  8922  0024E2  20F4               	addwfc	prodh,w,c
  8923  0024E4  6EF7               	movwf	tblptrh,c
  8924  0024E6                     	if	0	;There are less than 3 active tblptr bytes
  8925  0024E6                     	endif
  8926  0024E6  0009               	tblrd		*+
  8927  0024E8  CFF5 F07A          	movff	tablat,??_ES_PostToService
  8928  0024EC  0009               	tblrd		*+
  8929  0024EE  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
  8930  0024F2  0100               	movlb	0	; () banked
  8931  0024F4  517A               	movf	??_ES_PostToService& (0+255),w,b
  8932  0024F6  0100               	movlb	0	; () banked
  8933  0024F8  13DE               	iorwf	_Ready& (0+255),f,b
  8934  0024FA  0100               	movlb	0	; () banked
  8935  0024FC  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
  8936  0024FE  0100               	movlb	0	; () banked
  8937  002500  13DF               	iorwf	(_Ready+1)& (0+255),f,b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;ES_Framework.c: 356: return 1;
  8941  002502  0E01               	movlw	1
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;ES_Framework.c: 357: } else
  8945                           
  8946                           ; BSR set to: 0
  8947  002504  0012               	return	
  8948  002506                     l2885:
  8949                           
  8950                           ;ES_Framework.c: 358: return 0;
  8951  002506  0E00               	movlw	0
  8952  002508  0012               	return	
  8953  00250A                     __end_of_ES_PostToService:
  8954                           	opt stack 0
  8955                           tosu	equ	0xFFF
  8956                           tosh	equ	0xFFE
  8957                           tosl	equ	0xFFD
  8958                           pclath	equ	0xFFA
  8959                           tblptru	equ	0xFF8
  8960                           tblptrh	equ	0xFF7
  8961                           tblptrl	equ	0xFF6
  8962                           tablat	equ	0xFF5
  8963                           prodh	equ	0xFF4
  8964                           prodl	equ	0xFF3
  8965                           intcon	equ	0xFF2
  8966                           postinc0	equ	0xFEE
  8967                           wreg	equ	0xFE8
  8968                           indf1	equ	0xFE7
  8969                           postinc1	equ	0xFE6
  8970                           postdec1	equ	0xFE5
  8971                           fsr1h	equ	0xFE2
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           postdec2	equ	0xFDD
  8976                           fsr2h	equ	0xFDA
  8977                           fsr2l	equ	0xFD9
  8978                           status	equ	0xFD8
  8979                           
  8980 ;; *************** function _ES_EnQueueFIFO *****************
  8981 ;; Defined at:
  8982 ;;		line 85 in file "ES_Queue.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  8985 ;;		 -> Queue1(12), Queue0(12), 
  8986 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  8989 ;;		 -> Queue1(12), Queue0(12), 
  8990 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      unsigned char 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9000 ;;      Params:         0       5       0       0
  9001 ;;      Locals:         0       3       0       0
  9002 ;;      Temps:          0       3       0       0
  9003 ;;      Totals:         0      11       0       0
  9004 ;;Total ram usage:       11 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    8
  9007 ;; This function calls:
  9008 ;;		___awmod
  9009 ;;		___wmul
  9010 ;; This function is called by:
  9011 ;;		_ES_PostToService
  9012 ;;		_ES_PostAll
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           	psect	text43
  9017  001B0A                     __ptext43:
  9018                           	opt stack 0
  9019  001B0A                     _ES_EnQueueFIFO:
  9020                           	opt stack 17
  9021                           
  9022                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  9023                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  9024                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  9025                           
  9026                           ;incstack = 0
  9027  001B0A  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  9028  001B0E  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  9029                           
  9030                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  9031  001B12  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9032  001B16  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9033  001B1A  0100               	movlb	0	; () banked
  9034  001B1C  EE10 F002          	lfsr	1,2
  9035  001B20  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9036  001B22  26E1               	addwf	fsr1l,f,c
  9037  001B24  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9038  001B26  22E2               	addwfc	fsr1h,f,c
  9039  001B28  50DE               	movf	postinc2,w,c
  9040  001B2A  5CE6               	subwf	postinc1,w,c
  9041  001B2C  B0D8               	btfsc	status,0,c
  9042  001B2E  D05C               	goto	l2869
  9043                           
  9044                           ; BSR set to: 0
  9045                           
  9046                           ;ES_Queue.c: 92: {
  9047                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  9048  001B30  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  9049  001B34  9EF2               	bcf	intcon,7,c	;volatile
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  9053                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  9054                           
  9055                           ; BSR set to: 0
  9056  001B36  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  9057  001B3A  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  9058  001B3E  50DF               	movf	indf2,w,c
  9059  001B40  0100               	movlb	0	; () banked
  9060  001B42  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
  9061  001B44  0100               	movlb	0	; () banked
  9062  001B46  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  9063  001B48  0100               	movlb	0	; () banked
  9064  001B4A  6F62               	movwf	___awmod@divisor& (0+255),b
  9065  001B4C  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
  9066  001B4E  0100               	movlb	0	; () banked
  9067  001B50  EE20 F002          	lfsr	2,2
  9068  001B54  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9069  001B56  26D9               	addwf	fsr2l,f,c
  9070  001B58  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9071  001B5A  22DA               	addwfc	fsr2h,f,c
  9072  001B5C  50DF               	movf	indf2,w,c
  9073  001B5E  0100               	movlb	0	; () banked
  9074  001B60  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  9075  001B62  0100               	movlb	0	; () banked
  9076  001B64  EE20 F001          	lfsr	2,1
  9077  001B68  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9078  001B6A  26D9               	addwf	fsr2l,f,c
  9079  001B6C  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9080  001B6E  22DA               	addwfc	fsr2h,f,c
  9081  001B70  50DF               	movf	indf2,w,c
  9082  001B72  0100               	movlb	0	; () banked
  9083  001B74  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  9084  001B76  0100               	movlb	0	; () banked
  9085  001B78  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  9086  001B7A  0100               	movlb	0	; () banked
  9087  001B7C  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  9088  001B7E  0100               	movlb	0	; () banked
  9089  001B80  6F60               	movwf	___awmod@dividend& (0+255),b
  9090  001B82  0100               	movlb	0	; () banked
  9091  001B84  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  9092  001B86  0100               	movlb	0	; () banked
  9093  001B88  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  9094  001B8A  EC78  F010         	call	___awmod	;wreg free
  9095  001B8E  0E01               	movlw	1
  9096  001B90  0100               	movlb	0	; () banked
  9097  001B92  2560               	addwf	?___awmod& (0+255),w,b
  9098  001B94  0100               	movlb	0	; () banked
  9099  001B96  6F66               	movwf	___wmul@multiplier& (0+255),b
  9100  001B98  0E00               	movlw	0
  9101  001B9A  0100               	movlb	0	; () banked
  9102  001B9C  2161               	addwfc	(?___awmod+1)& (0+255),w,b
  9103  001B9E  0100               	movlb	0	; () banked
  9104  001BA0  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9105  001BA2  0E00               	movlw	0
  9106  001BA4  0100               	movlb	0	; () banked
  9107  001BA6  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9108  001BA8  0E03               	movlw	3
  9109  001BAA  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9110  001BAC  EC55  F014         	call	___wmul	;wreg free
  9111  001BB0  0100               	movlb	0	; () banked
  9112  001BB2  5166               	movf	?___wmul& (0+255),w,b
  9113  001BB4  0100               	movlb	0	; () banked
  9114  001BB6  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  9115  001BB8  6ED9               	movwf	fsr2l,c
  9116  001BBA  0100               	movlb	0	; () banked
  9117  001BBC  5167               	movf	(?___wmul+1)& (0+255),w,b
  9118  001BBE  0100               	movlb	0	; () banked
  9119  001BC0  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  9120  001BC2  6EDA               	movwf	fsr2h,c
  9121  001BC4  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  9122  001BC8  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  9123  001BCC  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  9127  001BD0  0100               	movlb	0	; () banked
  9128  001BD2  EE20 F002          	lfsr	2,2
  9129  001BD6  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  9130  001BD8  26D9               	addwf	fsr2l,f,c
  9131  001BDA  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  9132  001BDC  22DA               	addwfc	fsr2h,f,c
  9133  001BDE  2ADF               	incf	indf2,f,c
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  9137  001BE0  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;ES_Queue.c: 101: return(1);
  9141  001BE4  0E01               	movlw	1
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;ES_Queue.c: 102: }else
  9145                           
  9146                           ; BSR set to: 0
  9147  001BE6  0012               	return	
  9148  001BE8                     l2869:
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;ES_Queue.c: 103: return(0);
  9152  001BE8  0E00               	movlw	0
  9153                           
  9154                           ; BSR set to: 0
  9155  001BEA  0012               	return	
  9156  001BEC                     __end_of_ES_EnQueueFIFO:
  9157                           	opt stack 0
  9158                           tosu	equ	0xFFF
  9159                           tosh	equ	0xFFE
  9160                           tosl	equ	0xFFD
  9161                           pclath	equ	0xFFA
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           postinc0	equ	0xFEE
  9170                           wreg	equ	0xFE8
  9171                           indf1	equ	0xFE7
  9172                           postinc1	equ	0xFE6
  9173                           postdec1	equ	0xFE5
  9174                           fsr1h	equ	0xFE2
  9175                           fsr1l	equ	0xFE1
  9176                           indf2	equ	0xFDF
  9177                           postinc2	equ	0xFDE
  9178                           postdec2	equ	0xFDD
  9179                           fsr2h	equ	0xFDA
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function ___wmul *****************
  9184 ;; Defined at:
  9185 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  multiplier      2    6[BANK0 ] unsigned int 
  9188 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  product         2   10[BANK0 ] unsigned int 
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  2    6[BANK0 ] unsigned int 
  9193 ;; Registers used:
  9194 ;;		wreg, status,2, status,0, prodl, prodh
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9200 ;;      Params:         0       4       0       0
  9201 ;;      Locals:         0       2       0       0
  9202 ;;      Temps:          0       0       0       0
  9203 ;;      Totals:         0       6       0       0
  9204 ;;Total ram usage:        6 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    7
  9207 ;; This function calls:
  9208 ;;		Nothing
  9209 ;; This function is called by:
  9210 ;;		_ES_EnQueueFIFO
  9211 ;;		_ES_DeQueue
  9212 ;;		_UpdatePattern
  9213 ;;		_HSV_to_RGB
  9214 ;;		i2_ES_EnQueueFIFO
  9215 ;;		_ES_EnQueueLIFO
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text44
  9220  0028AA                     __ptext44:
  9221                           	opt stack 0
  9222  0028AA                     ___wmul:
  9223                           	opt stack 17
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;incstack = 0
  9227  0028AA  0100               	movlb	0	; () banked
  9228  0028AC  5166               	movf	___wmul@multiplier& (0+255),w,b
  9229  0028AE  0100               	movlb	0	; () banked
  9230  0028B0  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9231  0028B2  CFF3 F06A          	movff	prodl,___wmul@product
  9232  0028B6  CFF4 F06B          	movff	prodh,___wmul@product+1
  9233  0028BA  0100               	movlb	0	; () banked
  9234  0028BC  5166               	movf	___wmul@multiplier& (0+255),w,b
  9235  0028BE  0100               	movlb	0	; () banked
  9236  0028C0  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9237  0028C2  50F3               	movf	prodl,w,c
  9238  0028C4  0100               	movlb	0	; () banked
  9239  0028C6  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9240  0028C8  0100               	movlb	0	; () banked
  9241  0028CA  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9242  0028CC  0100               	movlb	0	; () banked
  9243  0028CE  0368               	mulwf	___wmul@multiplicand& (0+255),b
  9244  0028D0  50F3               	movf	prodl,w,c
  9245  0028D2  0100               	movlb	0	; () banked
  9246  0028D4  276B               	addwf	(___wmul@product+1)& (0+255),f,b
  9247                           
  9248                           ; BSR set to: 0
  9249  0028D6  C06A  F066         	movff	___wmul@product,?___wmul
  9250  0028DA  C06B  F067         	movff	___wmul@product+1,?___wmul+1
  9251  0028DE  0012               	return	
  9252  0028E0                     __end_of___wmul:
  9253                           	opt stack 0
  9254                           tosu	equ	0xFFF
  9255                           tosh	equ	0xFFE
  9256                           tosl	equ	0xFFD
  9257                           pclath	equ	0xFFA
  9258                           tblptru	equ	0xFF8
  9259                           tblptrh	equ	0xFF7
  9260                           tblptrl	equ	0xFF6
  9261                           tablat	equ	0xFF5
  9262                           prodh	equ	0xFF4
  9263                           prodl	equ	0xFF3
  9264                           intcon	equ	0xFF2
  9265                           postinc0	equ	0xFEE
  9266                           wreg	equ	0xFE8
  9267                           indf1	equ	0xFE7
  9268                           postinc1	equ	0xFE6
  9269                           postdec1	equ	0xFE5
  9270                           fsr1h	equ	0xFE2
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279 ;; *************** function ___awmod *****************
  9280 ;; Defined at:
  9281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;  dividend        2    0[BANK0 ] int 
  9284 ;;  divisor         2    2[BANK0 ] int 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  sign            1    5[BANK0 ] unsigned char 
  9287 ;;  counter         1    4[BANK0 ] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  2    0[BANK0 ] int 
  9290 ;; Registers used:
  9291 ;;		wreg, status,2, status,0
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9297 ;;      Params:         0       4       0       0
  9298 ;;      Locals:         0       2       0       0
  9299 ;;      Temps:          0       0       0       0
  9300 ;;      Totals:         0       6       0       0
  9301 ;;Total ram usage:        6 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    7
  9304 ;; This function calls:
  9305 ;;		Nothing
  9306 ;; This function is called by:
  9307 ;;		_ES_EnQueueFIFO
  9308 ;;		_UpdatePattern
  9309 ;;		_IdlePattern
  9310 ;;		_ThinkingPattern
  9311 ;;		_ListeningPattern
  9312 ;;		_SpeakingPattern
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text45
  9317  0020F0                     __ptext45:
  9318                           	opt stack 0
  9319  0020F0                     ___awmod:
  9320                           	opt stack 17
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;incstack = 0
  9324  0020F0  0E00               	movlw	0
  9325  0020F2  0100               	movlb	0	; () banked
  9326  0020F4  6F65               	movwf	___awmod@sign& (0+255),b
  9327                           
  9328                           ; BSR set to: 0
  9329  0020F6  0100               	movlb	0	; () banked
  9330  0020F8  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9331  0020FA  D008               	goto	l2825
  9332                           
  9333                           ; BSR set to: 0
  9334  0020FC  0100               	movlb	0	; () banked
  9335  0020FE  6D60               	negf	___awmod@dividend& (0+255),b
  9336  002100  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9337  002102  B0D8               	btfsc	status,0,c
  9338  002104  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9339                           
  9340                           ; BSR set to: 0
  9341  002106  0E01               	movlw	1
  9342  002108  0100               	movlb	0	; () banked
  9343  00210A  6F65               	movwf	___awmod@sign& (0+255),b
  9344  00210C                     l2825:
  9345                           
  9346                           ; BSR set to: 0
  9347  00210C  0100               	movlb	0	; () banked
  9348  00210E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9349  002110  D005               	goto	l2829
  9350                           
  9351                           ; BSR set to: 0
  9352  002112  0100               	movlb	0	; () banked
  9353  002114  6D62               	negf	___awmod@divisor& (0+255),b
  9354  002116  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  9355  002118  B0D8               	btfsc	status,0,c
  9356  00211A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  9357  00211C                     l2829:
  9358                           
  9359                           ; BSR set to: 0
  9360  00211C  0100               	movlb	0	; () banked
  9361  00211E  5162               	movf	___awmod@divisor& (0+255),w,b
  9362  002120  0100               	movlb	0	; () banked
  9363  002122  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9364  002124  B4D8               	btfsc	status,2,c
  9365  002126  D026               	goto	l2845
  9366                           
  9367                           ; BSR set to: 0
  9368  002128  0E01               	movlw	1
  9369  00212A  0100               	movlb	0	; () banked
  9370  00212C  6F64               	movwf	___awmod@counter& (0+255),b
  9371  00212E  D006               	goto	l2835
  9372  002130                     l2833:
  9373                           
  9374                           ; BSR set to: 0
  9375  002130  0100               	movlb	0	; () banked
  9376  002132  90D8               	bcf	status,0,c
  9377  002134  3762               	rlcf	___awmod@divisor& (0+255),f,b
  9378  002136  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9379  002138  0100               	movlb	0	; () banked
  9380  00213A  2B64               	incf	___awmod@counter& (0+255),f,b
  9381  00213C                     l2835:
  9382                           
  9383                           ; BSR set to: 0
  9384  00213C  0100               	movlb	0	; () banked
  9385  00213E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9386  002140  D7F7               	goto	l2833
  9387  002142                     l2837:
  9388                           
  9389                           ; BSR set to: 0
  9390  002142  0100               	movlb	0	; () banked
  9391  002144  5162               	movf	___awmod@divisor& (0+255),w,b
  9392  002146  0100               	movlb	0	; () banked
  9393  002148  5D60               	subwf	___awmod@dividend& (0+255),w,b
  9394  00214A  0100               	movlb	0	; () banked
  9395  00214C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9396  00214E  0100               	movlb	0	; () banked
  9397  002150  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9398  002152  A0D8               	btfss	status,0,c
  9399  002154  D008               	goto	l2841
  9400                           
  9401                           ; BSR set to: 0
  9402  002156  0100               	movlb	0	; () banked
  9403  002158  5162               	movf	___awmod@divisor& (0+255),w,b
  9404  00215A  0100               	movlb	0	; () banked
  9405  00215C  5F60               	subwf	___awmod@dividend& (0+255),f,b
  9406  00215E  0100               	movlb	0	; () banked
  9407  002160  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  9408  002162  0100               	movlb	0	; () banked
  9409  002164  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9410  002166                     l2841:
  9411                           
  9412                           ; BSR set to: 0
  9413  002166  0100               	movlb	0	; () banked
  9414  002168  90D8               	bcf	status,0,c
  9415  00216A  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9416  00216C  3362               	rrcf	___awmod@divisor& (0+255),f,b
  9417                           
  9418                           ; BSR set to: 0
  9419  00216E  0100               	movlb	0	; () banked
  9420  002170  2F64               	decfsz	___awmod@counter& (0+255),f,b
  9421  002172  D7E7               	goto	l2837
  9422  002174                     l2845:
  9423                           
  9424                           ; BSR set to: 0
  9425  002174  0100               	movlb	0	; () banked
  9426  002176  5165               	movf	___awmod@sign& (0+255),w,b
  9427  002178  0100               	movlb	0	; () banked
  9428  00217A  B4D8               	btfsc	status,2,c
  9429  00217C  D005               	goto	l2849
  9430                           
  9431                           ; BSR set to: 0
  9432  00217E  0100               	movlb	0	; () banked
  9433  002180  6D60               	negf	___awmod@dividend& (0+255),b
  9434  002182  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  9435  002184  B0D8               	btfsc	status,0,c
  9436  002186  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  9437  002188                     l2849:
  9438                           
  9439                           ; BSR set to: 0
  9440  002188  C060  F060         	movff	___awmod@dividend,?___awmod
  9441  00218C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  9442  002190  0012               	return	
  9443  002192                     __end_of___awmod:
  9444                           	opt stack 0
  9445                           tosu	equ	0xFFF
  9446                           tosh	equ	0xFFE
  9447                           tosl	equ	0xFFD
  9448                           pclath	equ	0xFFA
  9449                           tblptru	equ	0xFF8
  9450                           tblptrh	equ	0xFF7
  9451                           tblptrl	equ	0xFF6
  9452                           tablat	equ	0xFF5
  9453                           prodh	equ	0xFF4
  9454                           prodl	equ	0xFF3
  9455                           intcon	equ	0xFF2
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           indf1	equ	0xFE7
  9459                           postinc1	equ	0xFE6
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _DotStar_Init *****************
  9471 ;; Defined at:
  9472 ;;		line 48 in file "Pattern_DotStarLED.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  numPixels       1    wreg     unsigned char 
  9475 ;;  brightness      1    0[BANK0 ] unsigned char 
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  numPixels       1    3[BANK0 ] unsigned char 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;                  1    wreg      void 
  9480 ;; Registers used:
  9481 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9487 ;;      Params:         0       1       0       0
  9488 ;;      Locals:         0       1       0       0
  9489 ;;      Temps:          0       2       0       0
  9490 ;;      Totals:         0       4       0       0
  9491 ;;Total ram usage:        4 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    7
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_InitPatternControlService
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text46
  9502  001EF4                     __ptext46:
  9503                           	opt stack 0
  9504  001EF4                     _DotStar_Init:
  9505                           	opt stack 21
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;incstack = 0
  9509                           ;DotStar_Init@numPixels stored from wreg
  9510  001EF4  0100               	movlb	0	; () banked
  9511  001EF6  6F63               	movwf	DotStar_Init@numPixels& (0+255),b
  9512                           
  9513                           ;Pattern_DotStarLED.c: 57: Length = numPixels;
  9514  001EF8  C063  F0E8         	movff	DotStar_Init@numPixels,_Length
  9515                           
  9516                           ;Pattern_DotStarLED.c: 59: Brightness = brightness;
  9517  001EFC  C060  F0F0         	movff	DotStar_Init@brightness,_Brightness
  9518                           
  9519                           ;Pattern_DotStarLED.c: 61: PixelFrames[0] = 0x0;
  9520  001F00  0E00               	movlw	0
  9521  001F02  CFE8 F1C4          	movff	wreg,_PixelFrames
  9522  001F06  0E00               	movlw	0
  9523  001F08  CFE8 F1C5          	movff	wreg,_PixelFrames+1
  9524  001F0C  0E00               	movlw	0
  9525  001F0E  CFE8 F1C6          	movff	wreg,_PixelFrames+2
  9526  001F12  0E00               	movlw	0
  9527  001F14  CFE8 F1C7          	movff	wreg,_PixelFrames+3
  9528                           
  9529                           ;Pattern_DotStarLED.c: 62: PixelFrames[Length+1] = 0xffffffff;
  9530  001F18  0100               	movlb	0	; () banked
  9531  001F1A  51E8               	movf	_Length& (0+255),w,b
  9532  001F1C  0100               	movlb	0	; () banked
  9533  001F1E  6F61               	movwf	??_DotStar_Init& (0+255),b
  9534  001F20  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9535  001F22  0100               	movlb	0	; () banked
  9536  001F24  90D8               	bcf	status,0,c
  9537  001F26  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9538  001F28  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9539  001F2A  0100               	movlb	0	; () banked
  9540  001F2C  90D8               	bcf	status,0,c
  9541  001F2E  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9542  001F30  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9543  001F32  0E04               	movlw	4
  9544  001F34  0100               	movlb	0	; () banked
  9545  001F36  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9546  001F38  0E00               	movlw	0
  9547  001F3A  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9548  001F3C  0EC4               	movlw	low _PixelFrames
  9549  001F3E  0100               	movlb	0	; () banked
  9550  001F40  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9551  001F42  6ED9               	movwf	fsr2l,c
  9552  001F44  0E01               	movlw	high _PixelFrames
  9553  001F46  0100               	movlb	0	; () banked
  9554  001F48  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9555  001F4A  6EDA               	movwf	fsr2h,c
  9556  001F4C  0EFF               	movlw	255
  9557  001F4E  6EDE               	movwf	postinc2,c
  9558  001F50  0EFF               	movlw	255
  9559  001F52  6EDE               	movwf	postinc2,c
  9560  001F54  0EFF               	movlw	255
  9561  001F56  6EDE               	movwf	postinc2,c
  9562  001F58  0EFF               	movlw	255
  9563  001F5A  6EDD               	movwf	postdec2,c
  9564                           
  9565                           ; BSR set to: 0
  9566                           ;Pattern_DotStarLED.c: 63: PixelFrames[Length+1+1] = 0xffffffff;
  9567  001F5C  0100               	movlb	0	; () banked
  9568  001F5E  51E8               	movf	_Length& (0+255),w,b
  9569  001F60  0100               	movlb	0	; () banked
  9570  001F62  6F61               	movwf	??_DotStar_Init& (0+255),b
  9571  001F64  6B62               	clrf	(??_DotStar_Init+1)& (0+255),b
  9572  001F66  0100               	movlb	0	; () banked
  9573  001F68  90D8               	bcf	status,0,c
  9574  001F6A  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9575  001F6C  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9576  001F6E  0100               	movlb	0	; () banked
  9577  001F70  90D8               	bcf	status,0,c
  9578  001F72  3761               	rlcf	??_DotStar_Init& (0+255),f,b
  9579  001F74  3762               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  9580  001F76  0E08               	movlw	8
  9581  001F78  0100               	movlb	0	; () banked
  9582  001F7A  2761               	addwf	??_DotStar_Init& (0+255),f,b
  9583  001F7C  0E00               	movlw	0
  9584  001F7E  2362               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  9585  001F80  0EC4               	movlw	low _PixelFrames
  9586  001F82  0100               	movlb	0	; () banked
  9587  001F84  2561               	addwf	??_DotStar_Init& (0+255),w,b
  9588  001F86  6ED9               	movwf	fsr2l,c
  9589  001F88  0E01               	movlw	high _PixelFrames
  9590  001F8A  0100               	movlb	0	; () banked
  9591  001F8C  2162               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  9592  001F8E  6EDA               	movwf	fsr2h,c
  9593  001F90  0EFF               	movlw	255
  9594  001F92  6EDE               	movwf	postinc2,c
  9595  001F94  0EFF               	movlw	255
  9596  001F96  6EDE               	movwf	postinc2,c
  9597  001F98  0EFF               	movlw	255
  9598  001F9A  6EDE               	movwf	postinc2,c
  9599  001F9C  0EFF               	movlw	255
  9600  001F9E  6EDD               	movwf	postdec2,c
  9601                           
  9602                           ; BSR set to: 0
  9603  001FA0  0012               	return		;funcret
  9604  001FA2                     __end_of_DotStar_Init:
  9605                           	opt stack 0
  9606                           tosu	equ	0xFFF
  9607                           tosh	equ	0xFFE
  9608                           tosl	equ	0xFFD
  9609                           pclath	equ	0xFFA
  9610                           tblptru	equ	0xFF8
  9611                           tblptrh	equ	0xFF7
  9612                           tblptrl	equ	0xFF6
  9613                           tablat	equ	0xFF5
  9614                           prodh	equ	0xFF4
  9615                           prodl	equ	0xFF3
  9616                           intcon	equ	0xFF2
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           indf1	equ	0xFE7
  9620                           postinc1	equ	0xFE6
  9621                           postdec1	equ	0xFE5
  9622                           fsr1h	equ	0xFE2
  9623                           fsr1l	equ	0xFE1
  9624                           indf2	equ	0xFDF
  9625                           postinc2	equ	0xFDE
  9626                           postdec2	equ	0xFDD
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function _CAN_Init *****************
  9632 ;; Defined at:
  9633 ;;		line 61 in file "CAN_RX_HW.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      void 
  9640 ;; Registers used:
  9641 ;;		wreg, status,2, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9647 ;;      Params:         0       0       0       0
  9648 ;;      Locals:         0       0       0       0
  9649 ;;      Temps:          0       0       0       0
  9650 ;;      Totals:         0       0       0       0
  9651 ;;Total ram usage:        0 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    8
  9654 ;; This function calls:
  9655 ;;		_InitCanHardware
  9656 ;;		_InitPins
  9657 ;; This function is called by:
  9658 ;;		_InitPatternControlService
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text47
  9663  002B70                     __ptext47:
  9664                           	opt stack 0
  9665  002B70                     _CAN_Init:
  9666                           	opt stack 20
  9667                           
  9668                           ;CAN_RX_HW.c: 62: InitPins();
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;incstack = 0
  9672  002B70  EC5C  F015         	call	_InitPins	;wreg free
  9673                           
  9674                           ;CAN_RX_HW.c: 63: InitCanHardware();
  9675  002B74  ECD0  F011         	call	_InitCanHardware	;wreg free
  9676  002B78  0012               	return		;funcret
  9677  002B7A                     __end_of_CAN_Init:
  9678                           	opt stack 0
  9679                           tosu	equ	0xFFF
  9680                           tosh	equ	0xFFE
  9681                           tosl	equ	0xFFD
  9682                           pclath	equ	0xFFA
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           intcon	equ	0xFF2
  9690                           postinc0	equ	0xFEE
  9691                           wreg	equ	0xFE8
  9692                           indf1	equ	0xFE7
  9693                           postinc1	equ	0xFE6
  9694                           postdec1	equ	0xFE5
  9695                           fsr1h	equ	0xFE2
  9696                           fsr1l	equ	0xFE1
  9697                           indf2	equ	0xFDF
  9698                           postinc2	equ	0xFDE
  9699                           postdec2	equ	0xFDD
  9700                           fsr2h	equ	0xFDA
  9701                           fsr2l	equ	0xFD9
  9702                           status	equ	0xFD8
  9703                           
  9704 ;; *************** function _InitPins *****************
  9705 ;; Defined at:
  9706 ;;		line 165 in file "CAN_RX_HW.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;		None
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;		None
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      void 
  9713 ;; Registers used:
  9714 ;;		wreg, status,2
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9720 ;;      Params:         0       0       0       0
  9721 ;;      Locals:         0       0       0       0
  9722 ;;      Temps:          0       0       0       0
  9723 ;;      Totals:         0       0       0       0
  9724 ;;Total ram usage:        0 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    7
  9727 ;; This function calls:
  9728 ;;		Nothing
  9729 ;; This function is called by:
  9730 ;;		_CAN_Init
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           	psect	text48
  9735  002AB8                     __ptext48:
  9736                           	opt stack 0
  9737  002AB8                     _InitPins:
  9738                           	opt stack 20
  9739                           
  9740                           ;CAN_RX_HW.c: 168: PORTB = 0x00;
  9741                           
  9742                           ;incstack = 0
  9743  002AB8  0E00               	movlw	0
  9744  002ABA  6E81               	movwf	3969,c	;volatile
  9745                           
  9746                           ;CAN_RX_HW.c: 169: LATB = 0x00;
  9747  002ABC  0E00               	movlw	0
  9748  002ABE  6E8A               	movwf	3978,c	;volatile
  9749                           
  9750                           ;CAN_RX_HW.c: 170: TRISBbits.TRISB2 = 0;
  9751  002AC0  9493               	bcf	3987,2,c	;volatile
  9752                           
  9753                           ;CAN_RX_HW.c: 171: TRISBbits.TRISB3 = 1;
  9754  002AC2  8693               	bsf	3987,3,c	;volatile
  9755                           
  9756                           ;CAN_RX_HW.c: 174: PORTA = 0x00;
  9757  002AC4  0E00               	movlw	0
  9758  002AC6  6E80               	movwf	3968,c	;volatile
  9759                           
  9760                           ;CAN_RX_HW.c: 175: LATA = 0x00;
  9761  002AC8  0E00               	movlw	0
  9762  002ACA  6E89               	movwf	3977,c	;volatile
  9763                           
  9764                           ;CAN_RX_HW.c: 176: TRISA = 0x00;
  9765  002ACC  0E00               	movlw	0
  9766  002ACE  6E92               	movwf	3986,c	;volatile
  9767  002AD0  0012               	return		;funcret
  9768  002AD2                     __end_of_InitPins:
  9769                           	opt stack 0
  9770                           tosu	equ	0xFFF
  9771                           tosh	equ	0xFFE
  9772                           tosl	equ	0xFFD
  9773                           pclath	equ	0xFFA
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           postinc0	equ	0xFEE
  9782                           wreg	equ	0xFE8
  9783                           indf1	equ	0xFE7
  9784                           postinc1	equ	0xFE6
  9785                           postdec1	equ	0xFE5
  9786                           fsr1h	equ	0xFE2
  9787                           fsr1l	equ	0xFE1
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           postdec2	equ	0xFDD
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function _InitCanHardware *****************
  9796 ;; Defined at:
  9797 ;;		line 105 in file "CAN_RX_HW.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;                  1    wreg      void 
  9804 ;; Registers used:
  9805 ;;		wreg, status,2
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9811 ;;      Params:         0       0       0       0
  9812 ;;      Locals:         0       0       0       0
  9813 ;;      Temps:          0       0       0       0
  9814 ;;      Totals:         0       0       0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    7
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_CAN_Init
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           	psect	text49
  9826  0023A0                     __ptext49:
  9827                           	opt stack 0
  9828  0023A0                     _InitCanHardware:
  9829                           	opt stack 20
  9830                           
  9831                           ;CAN_RX_HW.c: 109: CANCON = 0x80;
  9832                           
  9833                           ;incstack = 0
  9834  0023A0  0E80               	movlw	128
  9835  0023A2  6E6F               	movwf	3951,c	;volatile
  9836  0023A4                     l814:
  9837  0023A4  AE6E               	btfss	3950,7,c	;volatile
  9838  0023A6  D7FE               	goto	l814
  9839                           
  9840                           ;CAN_RX_HW.c: 112: CIOCON = 0x20;
  9841  0023A8  0E20               	movlw	32
  9842  0023AA  6E73               	movwf	3955,c	;volatile
  9843                           
  9844                           ;CAN_RX_HW.c: 115: BRGCON2bits.SEG2PHTS = 1;
  9845  0023AC  8E71               	bsf	3953,7,c	;volatile
  9846                           
  9847                           ;CAN_RX_HW.c: 117: BRGCON1bits.BRP0 = 1;
  9848  0023AE  8070               	bsf	3952,0,c	;volatile
  9849                           
  9850                           ;CAN_RX_HW.c: 118: BRGCON1bits.BRP1 = 0;
  9851  0023B0  9270               	bcf	3952,1,c	;volatile
  9852                           
  9853                           ;CAN_RX_HW.c: 119: BRGCON2bits.PRSEG0 = 0;
  9854  0023B2  9071               	bcf	3953,0,c	;volatile
  9855                           
  9856                           ;CAN_RX_HW.c: 120: BRGCON2bits.PRSEG1 = 1;
  9857  0023B4  8271               	bsf	3953,1,c	;volatile
  9858                           
  9859                           ;CAN_RX_HW.c: 121: BRGCON2bits.PRSEG2 = 1;
  9860  0023B6  8471               	bsf	3953,2,c	;volatile
  9861                           
  9862                           ;CAN_RX_HW.c: 122: BRGCON2bits.SEG1PH0 = 1;
  9863  0023B8  8671               	bsf	3953,3,c	;volatile
  9864                           
  9865                           ;CAN_RX_HW.c: 123: BRGCON2bits.SEG1PH1 = 0;
  9866  0023BA  9871               	bcf	3953,4,c	;volatile
  9867                           
  9868                           ;CAN_RX_HW.c: 124: BRGCON2bits.SEG1PH2 = 1;
  9869  0023BC  8A71               	bsf	3953,5,c	;volatile
  9870                           
  9871                           ;CAN_RX_HW.c: 125: BRGCON3bits.SEG2PH0 = 1;
  9872  0023BE  8072               	bsf	3954,0,c	;volatile
  9873                           
  9874                           ;CAN_RX_HW.c: 126: BRGCON1bits.SJW0 = 1;
  9875  0023C0  8C70               	bsf	3952,6,c	;volatile
  9876                           
  9877                           ;CAN_RX_HW.c: 130: RXB0CONbits.RXB0DBEN = 0;
  9878  0023C2  9460               	bcf	3936,2,c	;volatile
  9879                           
  9880                           ;CAN_RX_HW.c: 131: RXB0CONbits.RXM0 = 0;
  9881  0023C4  9A60               	bcf	3936,5,c	;volatile
  9882                           
  9883                           ;CAN_RX_HW.c: 132: RXB0CONbits.RXM1 = 0;
  9884  0023C6  9C60               	bcf	3936,6,c	;volatile
  9885                           
  9886                           ;CAN_RX_HW.c: 133: RXF0SIDH = 0x00;
  9887  0023C8  0E00               	movlw	0
  9888  0023CA  010F               	movlb	15	; () banked
  9889  0023CC  6F00               	movwf	0,b	;volatile
  9890                           
  9891                           ;CAN_RX_HW.c: 134: RXF0SIDL = 0x08;
  9892  0023CE  0E08               	movlw	8
  9893  0023D0  010F               	movlb	15	; () banked
  9894  0023D2  6F01               	movwf	1,b	;volatile
  9895                           
  9896                           ;CAN_RX_HW.c: 135: RXF0EIDH = 0x00;
  9897  0023D4  0E00               	movlw	0
  9898  0023D6  010F               	movlb	15	; () banked
  9899  0023D8  6F02               	movwf	2,b	;volatile
  9900                           
  9901                           ;CAN_RX_HW.c: 136: RXF0EIDL = 0x01;
  9902  0023DA  0E01               	movlw	1
  9903  0023DC  010F               	movlb	15	; () banked
  9904  0023DE  6F03               	movwf	3,b	;volatile
  9905                           
  9906                           ;CAN_RX_HW.c: 138: RXM0SIDH = 0x00;
  9907  0023E0  0E00               	movlw	0
  9908  0023E2  010F               	movlb	15	; () banked
  9909  0023E4  6F18               	movwf	24,b	;volatile
  9910                           
  9911                           ;CAN_RX_HW.c: 139: RXM0SIDL = 0x00;
  9912  0023E6  0E00               	movlw	0
  9913  0023E8  010F               	movlb	15	; () banked
  9914  0023EA  6F19               	movwf	25,b	;volatile
  9915                           
  9916                           ;CAN_RX_HW.c: 140: RXM0EIDH = 0x00;
  9917  0023EC  0E00               	movlw	0
  9918  0023EE  010F               	movlb	15	; () banked
  9919  0023F0  6F1A               	movwf	26,b	;volatile
  9920                           
  9921                           ;CAN_RX_HW.c: 141: RXM0EIDL = 0x01;
  9922  0023F2  0E01               	movlw	1
  9923  0023F4  010F               	movlb	15	; () banked
  9924  0023F6  6F1B               	movwf	27,b	;volatile
  9925                           
  9926                           ;CAN_RX_HW.c: 145: ECANCON = 0x00;
  9927  0023F8  0E00               	movlw	0
  9928  0023FA  6E77               	movwf	3959,c	;volatile
  9929                           
  9930                           ;CAN_RX_HW.c: 146: CANCON = 0b00010000;
  9931  0023FC  0E10               	movlw	16
  9932  0023FE  6E6F               	movwf	3951,c	;volatile
  9933  002400                     l817:
  9934  002400  BE6E               	btfsc	3950,7,c	;volatile
  9935  002402  D7FE               	goto	l817
  9936                           
  9937                           ;CAN_RX_HW.c: 150: RXB0IE = 1;
  9938  002404  80A3               	bsf	4003,0,c	;volatile
  9939                           
  9940                           ;CAN_RX_HW.c: 151: ERRIE = 1;
  9941  002406  8AA3               	bsf	4003,5,c	;volatile
  9942                           
  9943                           ;CAN_RX_HW.c: 152: IRXIE = 1;
  9944  002408  8EA3               	bsf	4003,7,c	;volatile
  9945                           
  9946                           ;CAN_RX_HW.c: 156: RXB0IF = 0;
  9947  00240A  90A4               	bcf	4004,0,c	;volatile
  9948                           
  9949                           ;CAN_RX_HW.c: 157: ERRIF = 0;
  9950  00240C  9AA4               	bcf	4004,5,c	;volatile
  9951                           
  9952                           ;CAN_RX_HW.c: 158: IRXIF = 0;
  9953  00240E  9EA4               	bcf	4004,7,c	;volatile
  9954                           
  9955                           ;CAN_RX_HW.c: 159: TXB0IE = 1;
  9956  002410  84A3               	bsf	4003,2,c	;volatile
  9957                           
  9958                           ;CAN_RX_HW.c: 160: TXB0IF = 0;
  9959  002412  94A4               	bcf	4004,2,c	;volatile
  9960                           
  9961                           ;CAN_RX_HW.c: 161: TXB0CONbits.TXREQ = 0;
  9962  002414  010F               	movlb	15	; () banked
  9963  002416  9740               	bcf	64,3,b	;volatile
  9964                           
  9965                           ;CAN_RX_HW.c: 162: RXB0CONbits.RXFUL = 0;
  9966  002418  9E60               	bcf	3936,7,c	;volatile
  9967                           
  9968                           ; BSR set to: 15
  9969  00241A  0012               	return		;funcret
  9970  00241C                     __end_of_InitCanHardware:
  9971                           	opt stack 0
  9972                           tosu	equ	0xFFF
  9973                           tosh	equ	0xFFE
  9974                           tosl	equ	0xFFD
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           indf1	equ	0xFE7
  9986                           postinc1	equ	0xFE6
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function _ES_Timer_Init *****************
  9998 ;; Defined at:
  9999 ;;		line 130 in file "ES_Timers.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;  Rate            2    2[BANK0 ] enum E15423
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      void 
 10006 ;; Registers used:
 10007 ;;		wreg, status,2, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10013 ;;      Params:         0       2       0       0
 10014 ;;      Locals:         0       0       0       0
 10015 ;;      Temps:          0       0       0       0
 10016 ;;      Totals:         0       2       0       0
 10017 ;;Total ram usage:        2 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    8
 10020 ;; This function calls:
 10021 ;;		__HW_Timer_Init
 10022 ;; This function is called by:
 10023 ;;		_ES_Initialize
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text50
 10028  002B3C                     __ptext50:
 10029                           	opt stack 0
 10030  002B3C                     _ES_Timer_Init:
 10031                           	opt stack 21
 10032                           
 10033                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
 10034                           
 10035                           ; BSR set to: 15
 10036                           ;incstack = 0
 10037  002B3C  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
 10038  002B40  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
 10039  002B44  EC17  F015         	call	__HW_Timer_Init	;wreg free
 10040  002B48  0012               	return		;funcret
 10041  002B4A                     __end_of_ES_Timer_Init:
 10042                           	opt stack 0
 10043                           tosu	equ	0xFFF
 10044                           tosh	equ	0xFFE
 10045                           tosl	equ	0xFFD
 10046                           pclath	equ	0xFFA
 10047                           tblptru	equ	0xFF8
 10048                           tblptrh	equ	0xFF7
 10049                           tblptrl	equ	0xFF6
 10050                           tablat	equ	0xFF5
 10051                           prodh	equ	0xFF4
 10052                           prodl	equ	0xFF3
 10053                           intcon	equ	0xFF2
 10054                           postinc0	equ	0xFEE
 10055                           wreg	equ	0xFE8
 10056                           indf1	equ	0xFE7
 10057                           postinc1	equ	0xFE6
 10058                           postdec1	equ	0xFE5
 10059                           fsr1h	equ	0xFE2
 10060                           fsr1l	equ	0xFE1
 10061                           indf2	equ	0xFDF
 10062                           postinc2	equ	0xFDE
 10063                           postdec2	equ	0xFDD
 10064                           fsr2h	equ	0xFDA
 10065                           fsr2l	equ	0xFD9
 10066                           status	equ	0xFD8
 10067                           
 10068 ;; *************** function __HW_Timer_Init *****************
 10069 ;; Defined at:
 10070 ;;		line 72 in file "ES_Port.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;  Rate            2    0[BANK0 ] enum E15412
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;		None
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      void 
 10077 ;; Registers used:
 10078 ;;		wreg, status,2
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 0/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10084 ;;      Params:         0       2       0       0
 10085 ;;      Locals:         0       0       0       0
 10086 ;;      Temps:          0       0       0       0
 10087 ;;      Totals:         0       2       0       0
 10088 ;;Total ram usage:        2 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    7
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_ES_Timer_Init
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text51
 10099  002A2E                     __ptext51:
 10100                           	opt stack 0
 10101  002A2E                     __HW_Timer_Init:
 10102                           	opt stack 21
 10103                           
 10104                           ;ES_Port.c: 80: PIE1 = 0b00000100;
 10105                           
 10106                           ;incstack = 0
 10107  002A2E  0E04               	movlw	4
 10108  002A30  6E9D               	movwf	3997,c	;volatile
 10109                           
 10110                           ;ES_Port.c: 85: INTCON = 0b01000000;
 10111  002A32  0E40               	movlw	64
 10112  002A34  6EF2               	movwf	intcon,c	;volatile
 10113                           
 10114                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
 10115  002A36  0E0A               	movlw	10
 10116  002A38  6EBD               	movwf	4029,c	;volatile
 10117                           
 10118                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
 10119  002A3A  0E01               	movlw	1
 10120  002A3C  6EBE               	movwf	4030,c	;volatile
 10121                           
 10122                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
 10123  002A3E  0E00               	movlw	0
 10124  002A40  6EBF               	movwf	4031,c	;volatile
 10125                           
 10126                           ;ES_Port.c: 107: T1CON = 0b00100001;
 10127  002A42  0E21               	movlw	33
 10128  002A44  6ECD               	movwf	4045,c	;volatile
 10129                           
 10130                           ;ES_Port.c: 108: PEIE = 1;
 10131  002A46  8CF2               	bsf	intcon,6,c	;volatile
 10132                           
 10133                           ;ES_Port.c: 109: {GIE = 1;};
 10134  002A48  8EF2               	bsf	intcon,7,c	;volatile
 10135  002A4A  0012               	return		;funcret
 10136  002A4C                     __end_of__HW_Timer_Init:
 10137                           	opt stack 0
 10138                           tosu	equ	0xFFF
 10139                           tosh	equ	0xFFE
 10140                           tosl	equ	0xFFD
 10141                           pclath	equ	0xFFA
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           intcon	equ	0xFF2
 10149                           postinc0	equ	0xFEE
 10150                           wreg	equ	0xFE8
 10151                           indf1	equ	0xFE7
 10152                           postinc1	equ	0xFE6
 10153                           postdec1	equ	0xFE5
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           fsr2h	equ	0xFDA
 10160                           fsr2l	equ	0xFD9
 10161                           status	equ	0xFD8
 10162                           
 10163 ;; *************** function _ES_InitQueue *****************
 10164 ;; Defined at:
 10165 ;;		line 58 in file "ES_Queue.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
 10168 ;;		 -> Queue1(12), Queue0(12), 
 10169 ;;  BlockSize       1    2[BANK0 ] unsigned char 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
 10172 ;;		 -> Queue1(12), Queue0(12), 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  1    wreg      unsigned char 
 10175 ;; Registers used:
 10176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10182 ;;      Params:         0       3       0       0
 10183 ;;      Locals:         0       2       0       0
 10184 ;;      Temps:          0       0       0       0
 10185 ;;      Totals:         0       5       0       0
 10186 ;;Total ram usage:        5 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    7
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_ES_Initialize
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text52
 10197  0027FA                     __ptext52:
 10198                           	opt stack 0
 10199  0027FA                     _ES_InitQueue:
 10200                           	opt stack 22
 10201                           
 10202                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
 10203                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
 10204                           
 10205                           ;incstack = 0
 10206  0027FA  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
 10207  0027FE  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
 10208                           
 10209                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
 10210  002802  0100               	movlb	0	; () banked
 10211  002804  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
 10212  002806  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
 10213  00280A  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
 10214  00280E  6EDF               	movwf	indf2,c
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
 10218  002810  0100               	movlb	0	; () banked
 10219  002812  EE20 F001          	lfsr	2,1
 10220  002816  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 10221  002818  26D9               	addwf	fsr2l,f,c
 10222  00281A  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 10223  00281C  22DA               	addwfc	fsr2h,f,c
 10224  00281E  0E00               	movlw	0
 10225  002820  6EDF               	movwf	indf2,c
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
 10229  002822  0100               	movlb	0	; () banked
 10230  002824  EE20 F002          	lfsr	2,2
 10231  002828  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 10232  00282A  26D9               	addwf	fsr2l,f,c
 10233  00282C  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 10234  00282E  22DA               	addwfc	fsr2h,f,c
 10235  002830  0E00               	movlw	0
 10236  002832  6EDF               	movwf	indf2,c
 10237  002834  0012               	return	
 10238  002836                     __end_of_ES_InitQueue:
 10239                           	opt stack 0
 10240                           tosu	equ	0xFFF
 10241                           tosh	equ	0xFFE
 10242                           tosl	equ	0xFFD
 10243                           pclath	equ	0xFFA
 10244                           tblptru	equ	0xFF8
 10245                           tblptrh	equ	0xFF7
 10246                           tblptrl	equ	0xFF6
 10247                           tablat	equ	0xFF5
 10248                           prodh	equ	0xFF4
 10249                           prodl	equ	0xFF3
 10250                           intcon	equ	0xFF2
 10251                           postinc0	equ	0xFEE
 10252                           wreg	equ	0xFE8
 10253                           indf1	equ	0xFE7
 10254                           postinc1	equ	0xFE6
 10255                           postdec1	equ	0xFE5
 10256                           fsr1h	equ	0xFE2
 10257                           fsr1l	equ	0xFE1
 10258                           indf2	equ	0xFDF
 10259                           postinc2	equ	0xFDE
 10260                           postdec2	equ	0xFDD
 10261                           fsr2h	equ	0xFDA
 10262                           fsr2l	equ	0xFD9
 10263                           status	equ	0xFD8
 10264                           
 10265 ;; *************** function _ISR *****************
 10266 ;; Defined at:
 10267 ;;		line 112 in file "ES_Port.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;		None
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;		None
 10272 ;; Return value:  Size  Location     Type
 10273 ;;                  1    wreg      void 
 10274 ;; Registers used:
 10275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10276 ;; Tracked objects:
 10277 ;;		On entry : 0/0
 10278 ;;		On exit  : 0/0
 10279 ;;		Unchanged: 0/0
 10280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10281 ;;      Params:         0       0       0       0
 10282 ;;      Locals:         0       0       0       0
 10283 ;;      Temps:         16       0       0       0
 10284 ;;      Totals:        16       0       0       0
 10285 ;;Total ram usage:       16 bytes
 10286 ;; Hardware stack levels used:    1
 10287 ;; Hardware stack levels required when called:    6
 10288 ;; This function calls:
 10289 ;;		_CAN_BusErrorResponse
 10290 ;;		_CAN_ErrorResponse
 10291 ;;		_CAN_RCVResponse
 10292 ;;		_CAN_XmitResponse
 10293 ;;		_SPI32_EOTResponse
 10294 ;; This function is called by:
 10295 ;;		Interrupt level 2
 10296 ;; This function uses a non-reentrant model
 10297 ;;
 10298                           
 10299                           	psect	intcode
 10300  000008                     __pintcode:
 10301                           	opt stack 0
 10302  000008                     _ISR:
 10303                           	opt stack 15
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;incstack = 0
 10307  000008  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10308  00000A  CFFA F028          	movff	pclath,??_ISR+2
 10309  00000E  CFFB F029          	movff	pclatu,??_ISR+3
 10310  000012  EDF6  F00D         	call	int_func,f	;refresh shadow registers
 10311                           tosu	equ	0xFFF
 10312                           tosh	equ	0xFFE
 10313                           tosl	equ	0xFFD
 10314                           pclatu	equ	0xFFB
 10315                           pclath	equ	0xFFA
 10316                           tblptru	equ	0xFF8
 10317                           tblptrh	equ	0xFF7
 10318                           tblptrl	equ	0xFF6
 10319                           tablat	equ	0xFF5
 10320                           prodh	equ	0xFF4
 10321                           prodl	equ	0xFF3
 10322                           intcon	equ	0xFF2
 10323                           postinc0	equ	0xFEE
 10324                           wreg	equ	0xFE8
 10325                           indf1	equ	0xFE7
 10326                           postinc1	equ	0xFE6
 10327                           postdec1	equ	0xFE5
 10328                           fsr1h	equ	0xFE2
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337                           	psect	intcode_body
 10338  001BEC                     __pintcode_body:
 10339                           	opt stack 15
 10340  001BEC                     int_func:
 10341                           	opt stack 15
 10342  001BEC  0006               	pop		; remove dummy address from shadow register refresh
 10343  001BEE  CFE9 F02A          	movff	fsr0l,??_ISR+4
 10344  001BF2  CFEA F02B          	movff	fsr0h,??_ISR+5
 10345  001BF6  CFE1 F02C          	movff	fsr1l,??_ISR+6
 10346  001BFA  CFE2 F02D          	movff	fsr1h,??_ISR+7
 10347  001BFE  CFD9 F02E          	movff	fsr2l,??_ISR+8
 10348  001C02  CFDA F02F          	movff	fsr2h,??_ISR+9
 10349  001C06  CFF3 F030          	movff	prodl,??_ISR+10
 10350  001C0A  CFF4 F031          	movff	prodh,??_ISR+11
 10351  001C0E  CFF6 F032          	movff	tblptrl,??_ISR+12
 10352  001C12  CFF7 F033          	movff	tblptrh,??_ISR+13
 10353  001C16  CFF8 F034          	movff	tblptru,??_ISR+14
 10354  001C1A  CFF5 F035          	movff	tablat,??_ISR+15
 10355                           
 10356                           ;ES_Port.c: 115: static unsigned int LastTime;
 10357                           ;ES_Port.c: 116: static unsigned int NextTime;
 10358                           ;ES_Port.c: 118: if (CCP1IF == 1)
 10359  001C1E  A49E               	btfss	3998,2,c	;volatile
 10360  001C20  D015               	goto	i2l4007
 10361                           
 10362                           ;ES_Port.c: 119: {
 10363                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 10364  001C22  50BF               	movf	4031,w,c	;volatile
 10365  001C24  6E26               	movwf	??_ISR& (0+255),c
 10366  001C26  50BE               	movf	4030,w,c	;volatile
 10367  001C28  6E3A               	movwf	ISR@LastTime,c
 10368  001C2A  C026  F03B         	movff	??_ISR,ISR@LastTime+1
 10369                           
 10370                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 10371  001C2E  0E20               	movlw	32
 10372  001C30  243A               	addwf	ISR@LastTime,w,c
 10373  001C32  6E3C               	movwf	ISR@NextTime,c
 10374  001C34  0E4E               	movlw	78
 10375  001C36  203B               	addwfc	ISR@LastTime+1,w,c
 10376  001C38  6E3D               	movwf	ISR@NextTime+1,c
 10377                           
 10378                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 10379  001C3A  503D               	movf	ISR@NextTime+1,w,c
 10380  001C3C  6EBF               	movwf	4031,c	;volatile
 10381                           
 10382                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 10383  001C3E  C03C  FFBE         	movff	ISR@NextTime,4030	;volatile
 10384                           
 10385                           ;ES_Port.c: 124: CCP1IF = 0;
 10386  001C42  949E               	bcf	3998,2,c	;volatile
 10387                           
 10388                           ;ES_Port.c: 125: TickCount++;
 10389  001C44  0100               	movlb	0	; () banked
 10390  001C46  2BEC               	incf	_TickCount& (0+255),f,b	;volatile
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;ES_Port.c: 126: SysTickCounter++;
 10394  001C48  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
 10395  001C4A  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
 10396  001C4C                     i2l4007:
 10397                           
 10398                           ;ES_Port.c: 127: }
 10399                           ;ES_Port.c: 128: if (SSPIF == 1)
 10400  001C4C  A69E               	btfss	3998,3,c	;volatile
 10401  001C4E  D003               	goto	i2l4013
 10402                           
 10403                           ;ES_Port.c: 129: {
 10404                           ;ES_Port.c: 130: SSPIF = 0;
 10405  001C50  969E               	bcf	3998,3,c	;volatile
 10406                           
 10407                           ;ES_Port.c: 131: SPI32_EOTResponse();
 10408  001C52  EC38  F014         	call	_SPI32_EOTResponse	;wreg free
 10409  001C56                     i2l4013:
 10410                           
 10411                           ;ES_Port.c: 132: }
 10412                           ;ES_Port.c: 133: if (TXB0IF == 1)
 10413  001C56  A4A4               	btfss	4004,2,c	;volatile
 10414  001C58  D003               	goto	i2l4019
 10415                           
 10416                           ;ES_Port.c: 134: {
 10417                           ;ES_Port.c: 135: TXB0IF = 0;
 10418  001C5A  94A4               	bcf	4004,2,c	;volatile
 10419                           
 10420                           ;ES_Port.c: 136: CAN_XmitResponse();
 10421  001C5C  ECC8  F015         	call	_CAN_XmitResponse	;wreg free
 10422  001C60                     i2l4019:
 10423                           
 10424                           ;ES_Port.c: 137: }
 10425                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 10426  001C60  A0A4               	btfss	4004,0,c	;volatile
 10427  001C62  D003               	goto	i2l4025
 10428                           
 10429                           ;ES_Port.c: 139: RXB0IF = 0;
 10430  001C64  90A4               	bcf	4004,0,c	;volatile
 10431                           
 10432                           ;ES_Port.c: 140: CAN_RCVResponse();
 10433  001C66  ECAC  F015         	call	_CAN_RCVResponse	;wreg free
 10434  001C6A                     i2l4025:
 10435                           
 10436                           ;ES_Port.c: 141: }
 10437                           ;ES_Port.c: 142: if (ERRIF == 1) {
 10438  001C6A  AAA4               	btfss	4004,5,c	;volatile
 10439  001C6C  D003               	goto	i2l4031
 10440                           
 10441                           ;ES_Port.c: 143: ERRIF = 0;
 10442  001C6E  9AA4               	bcf	4004,5,c	;volatile
 10443                           
 10444                           ;ES_Port.c: 144: CAN_ErrorResponse();
 10445  001C70  ECD1  F015         	call	_CAN_ErrorResponse	;wreg free
 10446  001C74                     i2l4031:
 10447                           
 10448                           ;ES_Port.c: 145: }
 10449                           ;ES_Port.c: 146: if (IRXIF == 1) {
 10450  001C74  AEA4               	btfss	4004,7,c	;volatile
 10451  001C76  D003               	goto	i2l171
 10452                           
 10453                           ;ES_Port.c: 147: IRXIF = 0;
 10454  001C78  9EA4               	bcf	4004,7,c	;volatile
 10455                           
 10456                           ;ES_Port.c: 148: CAN_BusErrorResponse();
 10457  001C7A  ECD2  F015         	call	_CAN_BusErrorResponse	;wreg free
 10458  001C7E                     i2l171:
 10459  001C7E  C035  FFF5         	movff	??_ISR+15,tablat
 10460  001C82  C034  FFF8         	movff	??_ISR+14,tblptru
 10461  001C86  C033  FFF7         	movff	??_ISR+13,tblptrh
 10462  001C8A  C032  FFF6         	movff	??_ISR+12,tblptrl
 10463  001C8E  C031  FFF4         	movff	??_ISR+11,prodh
 10464  001C92  C030  FFF3         	movff	??_ISR+10,prodl
 10465  001C96  C02F  FFDA         	movff	??_ISR+9,fsr2h
 10466  001C9A  C02E  FFD9         	movff	??_ISR+8,fsr2l
 10467  001C9E  C02D  FFE2         	movff	??_ISR+7,fsr1h
 10468  001CA2  C02C  FFE1         	movff	??_ISR+6,fsr1l
 10469  001CA6  C02B  FFEA         	movff	??_ISR+5,fsr0h
 10470  001CAA  C02A  FFE9         	movff	??_ISR+4,fsr0l
 10471  001CAE  C029  FFFB         	movff	??_ISR+3,pclatu
 10472  001CB2  C028  FFFA         	movff	??_ISR+2,pclath
 10473  001CB6  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10474  001CB8  0011               	retfie		f
 10475  001CBA                     __end_of_ISR:
 10476                           	opt stack 0
 10477                           tosu	equ	0xFFF
 10478                           tosh	equ	0xFFE
 10479                           tosl	equ	0xFFD
 10480                           pclatu	equ	0xFFB
 10481                           pclath	equ	0xFFA
 10482                           tblptru	equ	0xFF8
 10483                           tblptrh	equ	0xFF7
 10484                           tblptrl	equ	0xFF6
 10485                           tablat	equ	0xFF5
 10486                           prodh	equ	0xFF4
 10487                           prodl	equ	0xFF3
 10488                           intcon	equ	0xFF2
 10489                           postinc0	equ	0xFEE
 10490                           fsr0h	equ	0xFEA
 10491                           fsr0l	equ	0xFE9
 10492                           wreg	equ	0xFE8
 10493                           indf1	equ	0xFE7
 10494                           postinc1	equ	0xFE6
 10495                           postdec1	equ	0xFE5
 10496                           fsr1h	equ	0xFE2
 10497                           fsr1l	equ	0xFE1
 10498                           indf2	equ	0xFDF
 10499                           postinc2	equ	0xFDE
 10500                           postdec2	equ	0xFDD
 10501                           fsr2h	equ	0xFDA
 10502                           fsr2l	equ	0xFD9
 10503                           status	equ	0xFD8
 10504                           
 10505 ;; *************** function _SPI32_EOTResponse *****************
 10506 ;; Defined at:
 10507 ;;		line 167 in file "SPI32_HW.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;		None
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      void 
 10514 ;; Registers used:
 10515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10521 ;;      Params:         0       0       0       0
 10522 ;;      Locals:         3       0       0       0
 10523 ;;      Temps:          0       0       0       0
 10524 ;;      Totals:         3       0       0       0
 10525 ;;Total ram usage:        3 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    4
 10528 ;; This function calls:
 10529 ;;		i2_PostSPI32ControlService
 10530 ;;		i2_SPI32_SendFrame
 10531 ;; This function is called by:
 10532 ;;		_ISR
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text54
 10537  002870                     __ptext54:
 10538                           	opt stack 0
 10539  002870                     _SPI32_EOTResponse:
 10540                           	opt stack 16
 10541                           
 10542                           ;SPI32_HW.c: 169: if(FrameByte == 0){
 10543                           
 10544                           ;incstack = 0
 10545  002870  0100               	movlb	0	; () banked
 10546  002872  51F3               	movf	_FrameByte& (0+255),w,b
 10547  002874  A4D8               	btfss	status,2,c
 10548  002876  D00E               	goto	i2l3905
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;SPI32_HW.c: 171: FrameByte = 4;
 10552  002878  0E04               	movlw	4
 10553  00287A  0100               	movlb	0	; () banked
 10554  00287C  6FF3               	movwf	_FrameByte& (0+255),b
 10555                           
 10556                           ;SPI32_HW.c: 173: ES_Event EOTevent;
 10557                           ;SPI32_HW.c: 174: EOTevent.EventType = ES_TIMEOUT;
 10558  00287E  0E03               	movlw	3
 10559  002880  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;SPI32_HW.c: 175: PostSPI32ControlService(EOTevent);
 10563  002882  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 10564  002886  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 10565  00288A  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 10566  00288E  EC81  F015         	call	i2_PostSPI32ControlService	;wreg free
 10567                           
 10568                           ;SPI32_HW.c: 176: }
 10569  002892  0012               	return	
 10570  002894                     i2l3905:
 10571                           
 10572                           ;SPI32_HW.c: 177: else{
 10573                           ;SPI32_HW.c: 179: SPI32_SendFrame(TransmitFrame);
 10574  002894  C036  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 10575  002898  C037  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 10576  00289C  C038  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 10577  0028A0  C039  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 10578  0028A4  EC6F  F013         	call	i2_SPI32_SendFrame	;wreg free
 10579  0028A8  0012               	return	
 10580  0028AA                     __end_of_SPI32_EOTResponse:
 10581                           	opt stack 0
 10582                           tosu	equ	0xFFF
 10583                           tosh	equ	0xFFE
 10584                           tosl	equ	0xFFD
 10585                           pclatu	equ	0xFFB
 10586                           pclath	equ	0xFFA
 10587                           tblptru	equ	0xFF8
 10588                           tblptrh	equ	0xFF7
 10589                           tblptrl	equ	0xFF6
 10590                           tablat	equ	0xFF5
 10591                           prodh	equ	0xFF4
 10592                           prodl	equ	0xFF3
 10593                           intcon	equ	0xFF2
 10594                           postinc0	equ	0xFEE
 10595                           fsr0h	equ	0xFEA
 10596                           fsr0l	equ	0xFE9
 10597                           wreg	equ	0xFE8
 10598                           indf1	equ	0xFE7
 10599                           postinc1	equ	0xFE6
 10600                           postdec1	equ	0xFE5
 10601                           fsr1h	equ	0xFE2
 10602                           fsr1l	equ	0xFE1
 10603                           indf2	equ	0xFDF
 10604                           postinc2	equ	0xFDE
 10605                           postdec2	equ	0xFDD
 10606                           fsr2h	equ	0xFDA
 10607                           fsr2l	equ	0xFD9
 10608                           status	equ	0xFD8
 10609                           
 10610 ;; *************** function i2_SPI32_SendFrame *****************
 10611 ;; Defined at:
 10612 ;;		line 86 in file "SPI32_HW.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;  newFrame        4    0[COMRAM] unsigned long 
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2, status,0, prodl, prodh
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10626 ;;      Params:         4       0       0       0
 10627 ;;      Locals:         0       0       0       0
 10628 ;;      Temps:          4       0       0       0
 10629 ;;      Totals:         8       0       0       0
 10630 ;;Total ram usage:        8 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; This function calls:
 10633 ;;		Nothing
 10634 ;; This function is called by:
 10635 ;;		_SPI32_EOTResponse
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           	psect	text55
 10640  0026DE                     __ptext55:
 10641                           	opt stack 0
 10642  0026DE                     i2_SPI32_SendFrame:
 10643                           	opt stack 19
 10644                           
 10645                           ;SPI32_HW.c: 101: if(FrameByte == 4){
 10646                           
 10647                           ;incstack = 0
 10648  0026DE  0E04               	movlw	4
 10649  0026E0  0100               	movlb	0	; () banked
 10650  0026E2  19F3               	xorwf	_FrameByte& (0+255),w,b
 10651  0026E4  A4D8               	btfss	status,2,c
 10652  0026E6  D008               	goto	i2l3841
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;SPI32_HW.c: 103: TransmitFrame = newFrame;
 10656  0026E8  C001  F036         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 10657  0026EC  C002  F037         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 10658  0026F0  C003  F038         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 10659  0026F4  C004  F039         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 10660  0026F8                     i2l3841:
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;SPI32_HW.c: 104: }
 10664                           ;SPI32_HW.c: 106: FrameByte--;
 10665  0026F8  0100               	movlb	0	; () banked
 10666  0026FA  07F3               	decf	_FrameByte& (0+255),f,b
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;SPI32_HW.c: 108: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 10670  0026FC  0100               	movlb	0	; () banked
 10671  0026FE  51F3               	movf	_FrameByte& (0+255),w,b
 10672  002700  0D08               	mullw	8
 10673  002702  50F3               	movf	prodl,w,c
 10674  002704  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 10675  002708  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 10676  00270C  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 10677  002710  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 10678  002714  2AE8               	incf	wreg,f,c
 10679  002716  D005               	goto	i2u255_40
 10680  002718                     i2u255_45:
 10681  002718  90D8               	bcf	status,0,c
 10682  00271A  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 10683  00271C  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 10684  00271E  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 10685  002720  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 10686  002722                     i2u255_40:
 10687  002722  2EE8               	decfsz	wreg,f,c
 10688  002724  D7F9               	goto	i2u255_45
 10689  002726  5005               	movf	??i2_SPI32_SendFrame,w,c
 10690  002728  6EC9               	movwf	4041,c	;volatile
 10691                           
 10692                           ; BSR set to: 0
 10693  00272A  0012               	return		;funcret
 10694  00272C                     __end_ofi2_SPI32_SendFrame:
 10695                           	opt stack 0
 10696                           tosu	equ	0xFFF
 10697                           tosh	equ	0xFFE
 10698                           tosl	equ	0xFFD
 10699                           pclatu	equ	0xFFB
 10700                           pclath	equ	0xFFA
 10701                           tblptru	equ	0xFF8
 10702                           tblptrh	equ	0xFF7
 10703                           tblptrl	equ	0xFF6
 10704                           tablat	equ	0xFF5
 10705                           prodh	equ	0xFF4
 10706                           prodl	equ	0xFF3
 10707                           intcon	equ	0xFF2
 10708                           postinc0	equ	0xFEE
 10709                           fsr0h	equ	0xFEA
 10710                           fsr0l	equ	0xFE9
 10711                           wreg	equ	0xFE8
 10712                           indf1	equ	0xFE7
 10713                           postinc1	equ	0xFE6
 10714                           postdec1	equ	0xFE5
 10715                           fsr1h	equ	0xFE2
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           fsr2h	equ	0xFDA
 10721                           fsr2l	equ	0xFD9
 10722                           status	equ	0xFD8
 10723                           
 10724 ;; *************** function i2_PostSPI32ControlService *****************
 10725 ;; Defined at:
 10726 ;;		line 117 in file "SPI32_ControlService.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 10729 ;; Auto vars:     Size  Location     Type
 10730 ;;		None
 10731 ;; Return value:  Size  Location     Type
 10732 ;;                  1    wreg      unsigned char 
 10733 ;; Registers used:
 10734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10735 ;; Tracked objects:
 10736 ;;		On entry : 0/0
 10737 ;;		On exit  : 0/0
 10738 ;;		Unchanged: 0/0
 10739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10740 ;;      Params:         3       0       0       0
 10741 ;;      Locals:         0       0       0       0
 10742 ;;      Temps:          0       0       0       0
 10743 ;;      Totals:         3       0       0       0
 10744 ;;Total ram usage:        3 bytes
 10745 ;; Hardware stack levels used:    1
 10746 ;; Hardware stack levels required when called:    3
 10747 ;; This function calls:
 10748 ;;		i2_ES_PostToService
 10749 ;; This function is called by:
 10750 ;;		_SPI32_EOTResponse
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           	psect	text56
 10755  002B02                     __ptext56:
 10756                           	opt stack 0
 10757  002B02                     i2_PostSPI32ControlService:
 10758                           	opt stack 16
 10759                           
 10760                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 10761                           ;	Return value of i2_PostSPI32ControlService is never used
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;incstack = 0
 10765  002B02  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 10766  002B06  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 10767  002B0A  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 10768  002B0E  0100               	movlb	0	; () banked
 10769  002B10  51E5               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10770  002B12  ECBD  F012         	call	i2_ES_PostToService
 10771  002B16  0012               	return	
 10772  002B18                     __end_ofi2_PostSPI32ControlService:
 10773                           	opt stack 0
 10774                           tosu	equ	0xFFF
 10775                           tosh	equ	0xFFE
 10776                           tosl	equ	0xFFD
 10777                           pclatu	equ	0xFFB
 10778                           pclath	equ	0xFFA
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           postinc0	equ	0xFEE
 10787                           fsr0h	equ	0xFEA
 10788                           fsr0l	equ	0xFE9
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           postinc1	equ	0xFE6
 10792                           postdec1	equ	0xFE5
 10793                           fsr1h	equ	0xFE2
 10794                           fsr1l	equ	0xFE1
 10795                           indf2	equ	0xFDF
 10796                           postinc2	equ	0xFDE
 10797                           postdec2	equ	0xFDD
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _CAN_XmitResponse *****************
 10803 ;; Defined at:
 10804 ;;		line 66 in file "CAN_RX_HW.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;		None
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      void 
 10811 ;; Registers used:
 10812 ;;		None
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10818 ;;      Params:         0       0       0       0
 10819 ;;      Locals:         0       0       0       0
 10820 ;;      Temps:          0       0       0       0
 10821 ;;      Totals:         0       0       0       0
 10822 ;;Total ram usage:        0 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_ISR
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text57
 10832  002B90                     __ptext57:
 10833                           	opt stack 0
 10834  002B90                     _CAN_XmitResponse:
 10835                           	opt stack 20
 10836                           
 10837                           ;CAN_RX_HW.c: 68: TXB0CONbits.TXREQ = 0;
 10838                           
 10839                           ;incstack = 0
 10840  002B90  010F               	movlb	15	; () banked
 10841  002B92  9740               	bcf	64,3,b	;volatile
 10842                           
 10843                           ; BSR set to: 15
 10844  002B94  0012               	return		;funcret
 10845  002B96                     __end_of_CAN_XmitResponse:
 10846                           	opt stack 0
 10847                           tosu	equ	0xFFF
 10848                           tosh	equ	0xFFE
 10849                           tosl	equ	0xFFD
 10850                           pclatu	equ	0xFFB
 10851                           pclath	equ	0xFFA
 10852                           tblptru	equ	0xFF8
 10853                           tblptrh	equ	0xFF7
 10854                           tblptrl	equ	0xFF6
 10855                           tablat	equ	0xFF5
 10856                           prodh	equ	0xFF4
 10857                           prodl	equ	0xFF3
 10858                           intcon	equ	0xFF2
 10859                           postinc0	equ	0xFEE
 10860                           fsr0h	equ	0xFEA
 10861                           fsr0l	equ	0xFE9
 10862                           wreg	equ	0xFE8
 10863                           indf1	equ	0xFE7
 10864                           postinc1	equ	0xFE6
 10865                           postdec1	equ	0xFE5
 10866                           fsr1h	equ	0xFE2
 10867                           fsr1l	equ	0xFE1
 10868                           indf2	equ	0xFDF
 10869                           postinc2	equ	0xFDE
 10870                           postdec2	equ	0xFDD
 10871                           fsr2h	equ	0xFDA
 10872                           fsr2l	equ	0xFD9
 10873                           status	equ	0xFD8
 10874                           
 10875 ;; *************** function _CAN_RCVResponse *****************
 10876 ;; Defined at:
 10877 ;;		line 71 in file "CAN_RX_HW.c"
 10878 ;; Parameters:    Size  Location     Type
 10879 ;;		None
 10880 ;; Auto vars:     Size  Location     Type
 10881 ;;		None
 10882 ;; Return value:  Size  Location     Type
 10883 ;;                  2  141[None  ] int 
 10884 ;; Registers used:
 10885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10886 ;; Tracked objects:
 10887 ;;		On entry : 0/0
 10888 ;;		On exit  : 0/0
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10891 ;;      Params:         0       0       0       0
 10892 ;;      Locals:         0       0       0       0
 10893 ;;      Temps:          0       0       0       0
 10894 ;;      Totals:         0       0       0       0
 10895 ;;Total ram usage:        0 bytes
 10896 ;; Hardware stack levels used:    1
 10897 ;; Hardware stack levels required when called:    5
 10898 ;; This function calls:
 10899 ;;		_ProcessReceive
 10900 ;; This function is called by:
 10901 ;;		_ISR
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           	psect	text58
 10906  002B58                     __ptext58:
 10907                           	opt stack 0
 10908  002B58                     _CAN_RCVResponse:
 10909                           	opt stack 15
 10910                           
 10911                           ;CAN_RX_HW.c: 73: if (RXB0CONbits.RXFUL == 1) {
 10912                           
 10913                           ; BSR set to: 15
 10914                           ;incstack = 0
 10915  002B58  AE60               	btfss	3936,7,c	;volatile
 10916  002B5A  0012               	return	
 10917                           
 10918                           ;CAN_RX_HW.c: 74: ProcessReceive();
 10919  002B5C  ECD1  F00F         	call	_ProcessReceive	;wreg free
 10920                           
 10921                           ;CAN_RX_HW.c: 75: RXB0CONbits.RXFUL = 0;
 10922  002B60  9E60               	bcf	3936,7,c	;volatile
 10923  002B62  0012               	return	
 10924  002B64                     __end_of_CAN_RCVResponse:
 10925                           	opt stack 0
 10926                           tosu	equ	0xFFF
 10927                           tosh	equ	0xFFE
 10928                           tosl	equ	0xFFD
 10929                           pclatu	equ	0xFFB
 10930                           pclath	equ	0xFFA
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           prodh	equ	0xFF4
 10936                           prodl	equ	0xFF3
 10937                           intcon	equ	0xFF2
 10938                           postinc0	equ	0xFEE
 10939                           fsr0h	equ	0xFEA
 10940                           fsr0l	equ	0xFE9
 10941                           wreg	equ	0xFE8
 10942                           indf1	equ	0xFE7
 10943                           postinc1	equ	0xFE6
 10944                           postdec1	equ	0xFE5
 10945                           fsr1h	equ	0xFE2
 10946                           fsr1l	equ	0xFE1
 10947                           indf2	equ	0xFDF
 10948                           postinc2	equ	0xFDE
 10949                           postdec2	equ	0xFDD
 10950                           fsr2h	equ	0xFDA
 10951                           fsr2l	equ	0xFD9
 10952                           status	equ	0xFD8
 10953                           
 10954 ;; *************** function _ProcessReceive *****************
 10955 ;; Defined at:
 10956 ;;		line 179 in file "CAN_RX_HW.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;		None
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  1    wreg      void 
 10963 ;; Registers used:
 10964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10970 ;;      Params:         0       0       0       0
 10971 ;;      Locals:         5       0       0       0
 10972 ;;      Temps:          0       0       0       0
 10973 ;;      Totals:         5       0       0       0
 10974 ;;Total ram usage:        5 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    4
 10977 ;; This function calls:
 10978 ;;		_SetBrightness
 10979 ;;		_SetListLoc
 10980 ;;		_SetPattern
 10981 ;;		i2_PostPatternControlService
 10982 ;;		i2___awmod
 10983 ;; This function is called by:
 10984 ;;		_CAN_RCVResponse
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           	psect	text59
 10989  001FA2                     __ptext59:
 10990                           	opt stack 0
 10991  001FA2                     _ProcessReceive:
 10992                           	opt stack 15
 10993                           
 10994                           ;CAN_RX_HW.c: 181: static uint8_t LastButton = 0xFF;
 10995                           ;CAN_RX_HW.c: 183: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && RXB0E
      +                          IDL == 0x01) {
 10996                           
 10997                           ;incstack = 0
 10998  001FA2  5061               	movf	3937,w,c	;volatile
 10999  001FA4  A4D8               	btfss	status,2,c
 11000  001FA6  0012               	return	
 11001  001FA8  0E18               	movlw	24
 11002  001FAA  1862               	xorwf	3938,w,c	;volatile
 11003  001FAC  A4D8               	btfss	status,2,c
 11004  001FAE  0012               	return	
 11005  001FB0  5063               	movf	3939,w,c	;volatile
 11006  001FB2  A4D8               	btfss	status,2,c
 11007  001FB4  0012               	return	
 11008  001FB6  0464               	decf	3940,w,c	;volatile
 11009  001FB8  A4D8               	btfss	status,2,c
 11010  001FBA  0012               	return	
 11011                           
 11012                           ;CAN_RX_HW.c: 184: ES_Event Event2Post;
 11013                           ;CAN_RX_HW.c: 185: if(RXB0D0 != 0xFF){
 11014  001FBC  2866               	incf	3942,w,c	;volatile
 11015  001FBE  A4D8               	btfss	status,2,c
 11016  001FC0  D027               	goto	i2l3827
 11017  001FC2  D035               	goto	i2l3829
 11018  001FC4                     i2l3809:
 11019                           
 11020                           ;CAN_RX_HW.c: 191: Event2Post.EventType = (LastButton == 0x01 ? PATTERN_END : PATTERN_PA
      +                          USE);
 11021  001FC4  0456               	decf	ProcessReceive@LastButton,w,c
 11022  001FC6  B4D8               	btfsc	status,2,c
 11023  001FC8  D004               	goto	i2l3813
 11024  001FCA  0E00               	movlw	0
 11025  001FCC  6E22               	movwf	_ProcessReceive$1398+1,c
 11026  001FCE  0E07               	movlw	7
 11027  001FD0  D003               	goto	L21
 11028  001FD2                     i2l3813:
 11029  001FD2  0E00               	movlw	0
 11030  001FD4  6E22               	movwf	_ProcessReceive$1398+1,c
 11031  001FD6  0E06               	movlw	6
 11032  001FD8                     L21:
 11033  001FD8  6E21               	movwf	_ProcessReceive$1398,c
 11034  001FDA  C021  F023         	movff	_ProcessReceive$1398,ProcessReceive@Event2Post
 11035                           
 11036                           ;CAN_RX_HW.c: 192: break;
 11037  001FDE  D025               	goto	i2l832
 11038  001FE0                     i2l3817:
 11039                           
 11040                           ;CAN_RX_HW.c: 195: SetPattern(0xFF);
 11041  001FE0  0EFF               	movlw	255
 11042  001FE2  ECB2  F015         	call	_SetPattern
 11043  001FE6                     i2l3819:
 11044                           
 11045                           ;CAN_RX_HW.c: 196: Event2Post.EventType = PATTERN_START;
 11046  001FE6  0E05               	movlw	5
 11047  001FE8  6E23               	movwf	ProcessReceive@Event2Post,c
 11048                           
 11049                           ;CAN_RX_HW.c: 201: break;
 11050  001FEA  D01F               	goto	i2l832
 11051  001FEC                     i2l3821:
 11052                           
 11053                           ;CAN_RX_HW.c: 203: SetPattern(CurrentPattern);
 11054  001FEC  5047               	movf	_CurrentPattern,w,c
 11055  001FEE  ECB2  F015         	call	_SetPattern
 11056                           
 11057                           ;CAN_RX_HW.c: 204: CurrentPattern = (CurrentPattern+1)%6;
 11058  001FF2  0E01               	movlw	1
 11059  001FF4  2447               	addwf	_CurrentPattern,w,c
 11060  001FF6  6E01               	movwf	i2___awmod@dividend,c
 11061  001FF8  6A02               	clrf	i2___awmod@dividend+1,c
 11062  001FFA  0E00               	movlw	0
 11063  001FFC  2202               	addwfc	i2___awmod@dividend+1,f,c
 11064  001FFE  0E00               	movlw	0
 11065  002000  6E04               	movwf	i2___awmod@divisor+1,c
 11066  002002  0E06               	movlw	6
 11067  002004  6E03               	movwf	i2___awmod@divisor,c
 11068  002006  EC85  F012         	call	i2___awmod	;wreg free
 11069  00200A  5001               	movf	?i2___awmod,w,c
 11070  00200C  6E47               	movwf	_CurrentPattern,c
 11071                           
 11072                           ;CAN_RX_HW.c: 206: }
 11073                           
 11074                           ;CAN_RX_HW.c: 205: break;
 11075  00200E  D00D               	goto	i2l832
 11076  002010                     i2l3827:
 11077  002010  5066               	movf	3942,w,c	;volatile
 11078                           
 11079                           ; Switch size 1, requested type "space"
 11080                           ; Number of cases is 4, Range of values is 0 to 3
 11081                           ; switch strategies available:
 11082                           ; Name         Instructions Cycles
 11083                           ; simple_byte           13     7 (average)
 11084                           ;	Chosen strategy is simple_byte
 11085  002012  0A00               	xorlw	0	; case 0
 11086  002014  B4D8               	btfsc	status,2,c
 11087  002016  D7E7               	goto	i2l3819
 11088  002018  0A01               	xorlw	1	; case 1
 11089  00201A  B4D8               	btfsc	status,2,c
 11090  00201C  D7D3               	goto	i2l3809
 11091  00201E  0A03               	xorlw	3	; case 2
 11092  002020  B4D8               	btfsc	status,2,c
 11093  002022  D7DE               	goto	i2l3817
 11094  002024  0A01               	xorlw	1	; case 3
 11095  002026  B4D8               	btfsc	status,2,c
 11096  002028  D7E1               	goto	i2l3821
 11097  00202A                     i2l832:
 11098                           
 11099                           ;CAN_RX_HW.c: 208: LastButton = RXB0D0;
 11100  00202A  CF66 F056          	movff	3942,ProcessReceive@LastButton	;volatile
 11101  00202E                     i2l3829:
 11102                           
 11103                           ;CAN_RX_HW.c: 209: }
 11104                           ;CAN_RX_HW.c: 211: SetBrightness(RXB0D1);
 11105  00202E  5067               	movf	3943,w,c	;volatile
 11106  002030  ECA3  F014         	call	_SetBrightness
 11107                           
 11108                           ;CAN_RX_HW.c: 213: SetListLoc(RXB0D2);
 11109  002034  5068               	movf	3944,w,c	;volatile
 11110  002036  ECF3  F014         	call	_SetListLoc
 11111                           
 11112                           ;CAN_RX_HW.c: 215: PostPatternControlService(Event2Post);
 11113  00203A  C023  F01E         	movff	ProcessReceive@Event2Post,i2PostPatternControlService@ThisEvent
 11114  00203E  C024  F01F         	movff	ProcessReceive@Event2Post+1,i2PostPatternControlService@ThisEvent+1
 11115  002042  C025  F020         	movff	ProcessReceive@Event2Post+2,i2PostPatternControlService@ThisEvent+2
 11116  002046  EC8C  F015         	call	i2_PostPatternControlService	;wreg free
 11117  00204A  0012               	return	
 11118  00204C                     __end_of_ProcessReceive:
 11119                           	opt stack 0
 11120                           tosu	equ	0xFFF
 11121                           tosh	equ	0xFFE
 11122                           tosl	equ	0xFFD
 11123                           pclatu	equ	0xFFB
 11124                           pclath	equ	0xFFA
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           postinc0	equ	0xFEE
 11133                           fsr0h	equ	0xFEA
 11134                           fsr0l	equ	0xFE9
 11135                           wreg	equ	0xFE8
 11136                           indf1	equ	0xFE7
 11137                           postinc1	equ	0xFE6
 11138                           postdec1	equ	0xFE5
 11139                           fsr1h	equ	0xFE2
 11140                           fsr1l	equ	0xFE1
 11141                           indf2	equ	0xFDF
 11142                           postinc2	equ	0xFDE
 11143                           postdec2	equ	0xFDD
 11144                           fsr2h	equ	0xFDA
 11145                           fsr2l	equ	0xFD9
 11146                           status	equ	0xFD8
 11147                           
 11148 ;; *************** function i2_PostPatternControlService *****************
 11149 ;; Defined at:
 11150 ;;		line 139 in file "Pattern_ControlService.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;		None
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      unsigned char 
 11157 ;; Registers used:
 11158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11164 ;;      Params:         3       0       0       0
 11165 ;;      Locals:         0       0       0       0
 11166 ;;      Temps:          0       0       0       0
 11167 ;;      Totals:         3       0       0       0
 11168 ;;Total ram usage:        3 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		i2_ES_PostToService
 11173 ;; This function is called by:
 11174 ;;		_ProcessReceive
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text60
 11179  002B18                     __ptext60:
 11180                           	opt stack 0
 11181  002B18                     i2_PostPatternControlService:
 11182                           	opt stack 15
 11183                           
 11184                           ;Pattern_ControlService.c: 141: return ES_PostToService( MyPriority, ThisEvent);
 11185                           ;	Return value of i2_PostPatternControlService is never used
 11186                           
 11187                           ;incstack = 0
 11188  002B18  C01E  F018         	movff	i2PostPatternControlService@ThisEvent,i2ES_PostToService@TheEvent
 11189  002B1C  C01F  F019         	movff	i2PostPatternControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 11190  002B20  C020  F01A         	movff	i2PostPatternControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 11191  002B24  0100               	movlb	0	; () banked
 11192  002B26  51E9               	movf	_MyPriority& (0+255),w,b
 11193  002B28  ECBD  F012         	call	i2_ES_PostToService
 11194  002B2C  0012               	return	
 11195  002B2E                     __end_ofi2_PostPatternControlService:
 11196                           	opt stack 0
 11197                           tosu	equ	0xFFF
 11198                           tosh	equ	0xFFE
 11199                           tosl	equ	0xFFD
 11200                           pclatu	equ	0xFFB
 11201                           pclath	equ	0xFFA
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           postinc0	equ	0xFEE
 11210                           fsr0h	equ	0xFEA
 11211                           fsr0l	equ	0xFE9
 11212                           wreg	equ	0xFE8
 11213                           indf1	equ	0xFE7
 11214                           postinc1	equ	0xFE6
 11215                           postdec1	equ	0xFE5
 11216                           fsr1h	equ	0xFE2
 11217                           fsr1l	equ	0xFE1
 11218                           indf2	equ	0xFDF
 11219                           postinc2	equ	0xFDE
 11220                           postdec2	equ	0xFDD
 11221                           fsr2h	equ	0xFDA
 11222                           fsr2l	equ	0xFD9
 11223                           status	equ	0xFD8
 11224                           
 11225 ;; *************** function i2_ES_PostToService *****************
 11226 ;; Defined at:
 11227 ;;		line 351 in file "ES_Framework.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;  WhichService    1    wreg     unsigned char 
 11230 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  WhichService    1   28[COMRAM] unsigned char 
 11233 ;; Return value:  Size  Location     Type
 11234 ;;                  1    wreg      unsigned char 
 11235 ;; Registers used:
 11236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11237 ;; Tracked objects:
 11238 ;;		On entry : 0/0
 11239 ;;		On exit  : 0/0
 11240 ;;		Unchanged: 0/0
 11241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11242 ;;      Params:         3       0       0       0
 11243 ;;      Locals:         1       0       0       0
 11244 ;;      Temps:          2       0       0       0
 11245 ;;      Totals:         6       0       0       0
 11246 ;;Total ram usage:        6 bytes
 11247 ;; Hardware stack levels used:    1
 11248 ;; Hardware stack levels required when called:    2
 11249 ;; This function calls:
 11250 ;;		i2_ES_EnQueueFIFO
 11251 ;; This function is called by:
 11252 ;;		i2_PostPatternControlService
 11253 ;;		i2_PostSPI32ControlService
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           	psect	text61
 11258  00257A                     __ptext61:
 11259                           	opt stack 0
 11260  00257A                     i2_ES_PostToService:
 11261                           	opt stack 16
 11262                           
 11263                           ;incstack = 0
 11264                           ;i2ES_PostToService@WhichService stored from wreg
 11265  00257A  6E1D               	movwf	i2ES_PostToService@WhichService,c
 11266                           
 11267                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 11268                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 11269                           ;ES_Framework.c: 354: 1 )){
 11270  00257C  0E02               	movlw	2
 11271  00257E  601D               	cpfslt	i2ES_PostToService@WhichService,c
 11272  002580  D02F               	goto	i2l3443
 11273  002582  501D               	movf	i2ES_PostToService@WhichService,w,c
 11274  002584  0D03               	mullw	3
 11275  002586  0E58               	movlw	low _EventQueues
 11276  002588  24F3               	addwf	prodl,w,c
 11277  00258A  6EF6               	movwf	tblptrl,c
 11278  00258C  0E03               	movlw	high _EventQueues
 11279  00258E  20F4               	addwfc	prodh,w,c
 11280  002590  6EF7               	movwf	tblptrh,c
 11281  002592                     	if	0	;There are less than 3 active tblptr bytes
 11282  002592                     	endif
 11283  002592  0009               	tblrd		*+
 11284  002594  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 11285  002598  000A               	tblrd		*-
 11286  00259A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 11287  00259E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 11288  0025A2  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 11289  0025A6  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 11290  0025AA  EC20  F00F         	call	i2_ES_EnQueueFIFO	;wreg free
 11291  0025AE  06E8               	decf	wreg,f,c
 11292  0025B0  A4D8               	btfss	status,2,c
 11293  0025B2  D016               	goto	i2l3443
 11294                           
 11295                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 11296  0025B4  501D               	movf	i2ES_PostToService@WhichService,w,c
 11297  0025B6  0D02               	mullw	2
 11298  0025B8  0E01               	movlw	low _BitNum2SetMask
 11299  0025BA  24F3               	addwf	prodl,w,c
 11300  0025BC  6EF6               	movwf	tblptrl,c
 11301  0025BE  0E03               	movlw	high _BitNum2SetMask
 11302  0025C0  20F4               	addwfc	prodh,w,c
 11303  0025C2  6EF7               	movwf	tblptrh,c
 11304  0025C4                     	if	0	;There are less than 3 active tblptr bytes
 11305  0025C4                     	endif
 11306  0025C4  0009               	tblrd		*+
 11307  0025C6  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 11308  0025CA  0009               	tblrd		*+
 11309  0025CC  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 11310  0025D0  501B               	movf	??i2_ES_PostToService,w,c
 11311  0025D2  0100               	movlb	0	; () banked
 11312  0025D4  13DE               	iorwf	_Ready& (0+255),f,b
 11313  0025D6  501C               	movf	??i2_ES_PostToService+1,w,c
 11314  0025D8  0100               	movlb	0	; () banked
 11315  0025DA  13DF               	iorwf	(_Ready+1)& (0+255),f,b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;ES_Framework.c: 356: return 1;
 11319  0025DC  0E01               	movlw	1
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;ES_Framework.c: 357: } else
 11323                           
 11324                           ; BSR set to: 0
 11325  0025DE  0012               	return	
 11326  0025E0                     i2l3443:
 11327                           
 11328                           ;ES_Framework.c: 358: return 0;
 11329  0025E0  0E00               	movlw	0
 11330  0025E2  0012               	return	
 11331  0025E4                     __end_ofi2_ES_PostToService:
 11332                           	opt stack 0
 11333                           tosu	equ	0xFFF
 11334                           tosh	equ	0xFFE
 11335                           tosl	equ	0xFFD
 11336                           pclatu	equ	0xFFB
 11337                           pclath	equ	0xFFA
 11338                           tblptru	equ	0xFF8
 11339                           tblptrh	equ	0xFF7
 11340                           tblptrl	equ	0xFF6
 11341                           tablat	equ	0xFF5
 11342                           prodh	equ	0xFF4
 11343                           prodl	equ	0xFF3
 11344                           intcon	equ	0xFF2
 11345                           postinc0	equ	0xFEE
 11346                           fsr0h	equ	0xFEA
 11347                           fsr0l	equ	0xFE9
 11348                           wreg	equ	0xFE8
 11349                           indf1	equ	0xFE7
 11350                           postinc1	equ	0xFE6
 11351                           postdec1	equ	0xFE5
 11352                           fsr1h	equ	0xFE2
 11353                           fsr1l	equ	0xFE1
 11354                           indf2	equ	0xFDF
 11355                           postinc2	equ	0xFDE
 11356                           postdec2	equ	0xFDD
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function i2_ES_EnQueueFIFO *****************
 11362 ;; Defined at:
 11363 ;;		line 85 in file "ES_Queue.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 11366 ;;		 -> Queue1(12), Queue0(12), 
 11367 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 11370 ;;		 -> Queue1(12), Queue0(12), 
 11371 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 11372 ;; Return value:  Size  Location     Type
 11373 ;;                  1    wreg      unsigned char 
 11374 ;; Registers used:
 11375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11376 ;; Tracked objects:
 11377 ;;		On entry : 0/0
 11378 ;;		On exit  : 0/0
 11379 ;;		Unchanged: 0/0
 11380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11381 ;;      Params:         5       0       0       0
 11382 ;;      Locals:         3       0       0       0
 11383 ;;      Temps:          3       0       0       0
 11384 ;;      Totals:        11       0       0       0
 11385 ;;Total ram usage:       11 bytes
 11386 ;; Hardware stack levels used:    1
 11387 ;; Hardware stack levels required when called:    1
 11388 ;; This function calls:
 11389 ;;		i2___awmod
 11390 ;;		i2___wmul
 11391 ;; This function is called by:
 11392 ;;		i2_ES_PostToService
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text62
 11397  001E40                     __ptext62:
 11398                           	opt stack 0
 11399  001E40                     i2_ES_EnQueueFIFO:
 11400                           	opt stack 16
 11401                           
 11402                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11403                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11404                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11405                           
 11406                           ;incstack = 0
 11407  001E40  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 11408  001E44  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 11409                           
 11410                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11411  001E48  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11412  001E4C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11413  001E50  EE10 F002          	lfsr	1,2
 11414  001E54  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11415  001E56  26E1               	addwf	fsr1l,f,c
 11416  001E58  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11417  001E5A  22E2               	addwfc	fsr1h,f,c
 11418  001E5C  50DE               	movf	postinc2,w,c
 11419  001E5E  5CE6               	subwf	postinc1,w,c
 11420  001E60  B0D8               	btfsc	status,0,c
 11421  001E62  D046               	goto	i2l3247
 11422                           
 11423                           ;ES_Queue.c: 92: {
 11424                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11425  001E64  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 11426  001E68  9EF2               	bcf	intcon,7,c	;volatile
 11427                           
 11428                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11429                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11430  001E6A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 11431  001E6E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11432  001E72  50DF               	movf	indf2,w,c
 11433  001E74  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 11434  001E76  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 11435  001E78  6E03               	movwf	i2___awmod@divisor,c
 11436  001E7A  6A04               	clrf	i2___awmod@divisor+1,c
 11437  001E7C  EE20 F002          	lfsr	2,2
 11438  001E80  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11439  001E82  26D9               	addwf	fsr2l,f,c
 11440  001E84  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11441  001E86  22DA               	addwfc	fsr2h,f,c
 11442  001E88  50DF               	movf	indf2,w,c
 11443  001E8A  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 11444  001E8C  EE20 F001          	lfsr	2,1
 11445  001E90  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11446  001E92  26D9               	addwf	fsr2l,f,c
 11447  001E94  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11448  001E96  22DA               	addwfc	fsr2h,f,c
 11449  001E98  50DF               	movf	indf2,w,c
 11450  001E9A  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 11451  001E9C  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 11452  001E9E  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 11453  001EA0  6E01               	movwf	i2___awmod@dividend,c
 11454  001EA2  6A02               	clrf	i2___awmod@dividend+1,c
 11455  001EA4  3602               	rlcf	i2___awmod@dividend+1,f,c
 11456  001EA6  EC85  F012         	call	i2___awmod	;wreg free
 11457  001EAA  0E01               	movlw	1
 11458  001EAC  2401               	addwf	?i2___awmod,w,c
 11459  001EAE  6E07               	movwf	i2___wmul@multiplier,c
 11460  001EB0  0E00               	movlw	0
 11461  001EB2  2002               	addwfc	?i2___awmod+1,w,c
 11462  001EB4  6E08               	movwf	i2___wmul@multiplier+1,c
 11463  001EB6  0E00               	movlw	0
 11464  001EB8  6E0A               	movwf	i2___wmul@multiplicand+1,c
 11465  001EBA  0E03               	movlw	3
 11466  001EBC  6E09               	movwf	i2___wmul@multiplicand,c
 11467  001EBE  ECE0  F014         	call	i2___wmul	;wreg free
 11468  001EC2  5007               	movf	?i2___wmul,w,c
 11469  001EC4  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 11470  001EC6  6ED9               	movwf	fsr2l,c
 11471  001EC8  5008               	movf	?i2___wmul+1,w,c
 11472  001ECA  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 11473  001ECC  6EDA               	movwf	fsr2h,c
 11474  001ECE  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 11475  001ED2  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 11476  001ED6  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 11477                           
 11478                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11479  001EDA  EE20 F002          	lfsr	2,2
 11480  001EDE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 11481  001EE0  26D9               	addwf	fsr2l,f,c
 11482  001EE2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 11483  001EE4  22DA               	addwfc	fsr2h,f,c
 11484  001EE6  2ADF               	incf	indf2,f,c
 11485                           
 11486                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11487  001EE8  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11488                           
 11489                           ;ES_Queue.c: 101: return(1);
 11490  001EEC  0E01               	movlw	1
 11491                           
 11492                           ;ES_Queue.c: 102: }else
 11493  001EEE  0012               	return	
 11494  001EF0                     i2l3247:
 11495                           
 11496                           ;ES_Queue.c: 103: return(0);
 11497  001EF0  0E00               	movlw	0
 11498  001EF2  0012               	return	
 11499  001EF4                     __end_ofi2_ES_EnQueueFIFO:
 11500                           	opt stack 0
 11501                           tosu	equ	0xFFF
 11502                           tosh	equ	0xFFE
 11503                           tosl	equ	0xFFD
 11504                           pclatu	equ	0xFFB
 11505                           pclath	equ	0xFFA
 11506                           tblptru	equ	0xFF8
 11507                           tblptrh	equ	0xFF7
 11508                           tblptrl	equ	0xFF6
 11509                           tablat	equ	0xFF5
 11510                           prodh	equ	0xFF4
 11511                           prodl	equ	0xFF3
 11512                           intcon	equ	0xFF2
 11513                           postinc0	equ	0xFEE
 11514                           fsr0h	equ	0xFEA
 11515                           fsr0l	equ	0xFE9
 11516                           wreg	equ	0xFE8
 11517                           indf1	equ	0xFE7
 11518                           postinc1	equ	0xFE6
 11519                           postdec1	equ	0xFE5
 11520                           fsr1h	equ	0xFE2
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           postdec2	equ	0xFDD
 11525                           fsr2h	equ	0xFDA
 11526                           fsr2l	equ	0xFD9
 11527                           status	equ	0xFD8
 11528                           
 11529 ;; *************** function i2___wmul *****************
 11530 ;; Defined at:
 11531 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;  multiplier      2    6[COMRAM] unsigned int 
 11534 ;;  multiplicand    2    8[COMRAM] unsigned int 
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  __wmul          2   10[COMRAM] unsigned int 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  2    6[COMRAM] unsigned int 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0, prodl, prodh
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11546 ;;      Params:         4       0       0       0
 11547 ;;      Locals:         2       0       0       0
 11548 ;;      Temps:          0       0       0       0
 11549 ;;      Totals:         6       0       0       0
 11550 ;;Total ram usage:        6 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; This function calls:
 11553 ;;		Nothing
 11554 ;; This function is called by:
 11555 ;;		i2_ES_EnQueueFIFO
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           	psect	text63
 11560  0029C0                     __ptext63:
 11561                           	opt stack 0
 11562  0029C0                     i2___wmul:
 11563                           	opt stack 16
 11564                           
 11565                           ;incstack = 0
 11566  0029C0  5007               	movf	i2___wmul@multiplier,w,c
 11567  0029C2  0209               	mulwf	i2___wmul@multiplicand,c
 11568  0029C4  CFF3 F00B          	movff	prodl,i2___wmul@product
 11569  0029C8  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 11570  0029CC  5007               	movf	i2___wmul@multiplier,w,c
 11571  0029CE  020A               	mulwf	i2___wmul@multiplicand+1,c
 11572  0029D0  50F3               	movf	prodl,w,c
 11573  0029D2  260C               	addwf	i2___wmul@product+1,f,c
 11574  0029D4  5008               	movf	i2___wmul@multiplier+1,w,c
 11575  0029D6  0209               	mulwf	i2___wmul@multiplicand,c
 11576  0029D8  50F3               	movf	prodl,w,c
 11577  0029DA  260C               	addwf	i2___wmul@product+1,f,c
 11578  0029DC  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 11579  0029E0  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 11580  0029E4  0012               	return	
 11581  0029E6                     __end_ofi2___wmul:
 11582                           	opt stack 0
 11583                           tosu	equ	0xFFF
 11584                           tosh	equ	0xFFE
 11585                           tosl	equ	0xFFD
 11586                           pclatu	equ	0xFFB
 11587                           pclath	equ	0xFFA
 11588                           tblptru	equ	0xFF8
 11589                           tblptrh	equ	0xFF7
 11590                           tblptrl	equ	0xFF6
 11591                           tablat	equ	0xFF5
 11592                           prodh	equ	0xFF4
 11593                           prodl	equ	0xFF3
 11594                           intcon	equ	0xFF2
 11595                           postinc0	equ	0xFEE
 11596                           fsr0h	equ	0xFEA
 11597                           fsr0l	equ	0xFE9
 11598                           wreg	equ	0xFE8
 11599                           indf1	equ	0xFE7
 11600                           postinc1	equ	0xFE6
 11601                           postdec1	equ	0xFE5
 11602                           fsr1h	equ	0xFE2
 11603                           fsr1l	equ	0xFE1
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           fsr2h	equ	0xFDA
 11608                           fsr2l	equ	0xFD9
 11609                           status	equ	0xFD8
 11610                           
 11611 ;; *************** function i2___awmod *****************
 11612 ;; Defined at:
 11613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11614 ;; Parameters:    Size  Location     Type
 11615 ;;  dividend        2    0[COMRAM] int 
 11616 ;;  divisor         2    2[COMRAM] int 
 11617 ;; Auto vars:     Size  Location     Type
 11618 ;;  __awmod         1    5[COMRAM] unsigned char 
 11619 ;;  __awmod         1    4[COMRAM] unsigned char 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  2    0[COMRAM] int 
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11629 ;;      Params:         4       0       0       0
 11630 ;;      Locals:         2       0       0       0
 11631 ;;      Temps:          0       0       0       0
 11632 ;;      Totals:         6       0       0       0
 11633 ;;Total ram usage:        6 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; This function calls:
 11636 ;;		Nothing
 11637 ;; This function is called by:
 11638 ;;		_ProcessReceive
 11639 ;;		i2_ES_EnQueueFIFO
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           	psect	text64
 11644  00250A                     __ptext64:
 11645                           	opt stack 0
 11646  00250A                     i2___awmod:
 11647                           	opt stack 16
 11648                           
 11649                           ;incstack = 0
 11650  00250A  0E00               	movlw	0
 11651  00250C  6E06               	movwf	i2___awmod@sign,c
 11652  00250E  AE02               	btfss	i2___awmod@dividend+1,7,c
 11653  002510  D006               	goto	i2l2967
 11654  002512  6C01               	negf	i2___awmod@dividend,c
 11655  002514  1E02               	comf	i2___awmod@dividend+1,f,c
 11656  002516  B0D8               	btfsc	status,0,c
 11657  002518  2A02               	incf	i2___awmod@dividend+1,f,c
 11658  00251A  0E01               	movlw	1
 11659  00251C  6E06               	movwf	i2___awmod@sign,c
 11660  00251E                     i2l2967:
 11661  00251E  AE04               	btfss	i2___awmod@divisor+1,7,c
 11662  002520  D004               	goto	i2l2971
 11663  002522  6C03               	negf	i2___awmod@divisor,c
 11664  002524  1E04               	comf	i2___awmod@divisor+1,f,c
 11665  002526  B0D8               	btfsc	status,0,c
 11666  002528  2A04               	incf	i2___awmod@divisor+1,f,c
 11667  00252A                     i2l2971:
 11668  00252A  5003               	movf	i2___awmod@divisor,w,c
 11669  00252C  1004               	iorwf	i2___awmod@divisor+1,w,c
 11670  00252E  B4D8               	btfsc	status,2,c
 11671  002530  D018               	goto	i2l2987
 11672  002532  0E01               	movlw	1
 11673  002534  6E05               	movwf	i2___awmod@counter,c
 11674  002536  D004               	goto	i2l2977
 11675  002538                     i2l2975:
 11676  002538  90D8               	bcf	status,0,c
 11677  00253A  3603               	rlcf	i2___awmod@divisor,f,c
 11678  00253C  3604               	rlcf	i2___awmod@divisor+1,f,c
 11679  00253E  2A05               	incf	i2___awmod@counter,f,c
 11680  002540                     i2l2977:
 11681  002540  AE04               	btfss	i2___awmod@divisor+1,7,c
 11682  002542  D7FA               	goto	i2l2975
 11683  002544                     i2l2979:
 11684  002544  5003               	movf	i2___awmod@divisor,w,c
 11685  002546  5C01               	subwf	i2___awmod@dividend,w,c
 11686  002548  5004               	movf	i2___awmod@divisor+1,w,c
 11687  00254A  5802               	subwfb	i2___awmod@dividend+1,w,c
 11688  00254C  A0D8               	btfss	status,0,c
 11689  00254E  D004               	goto	i2l2983
 11690  002550  5003               	movf	i2___awmod@divisor,w,c
 11691  002552  5E01               	subwf	i2___awmod@dividend,f,c
 11692  002554  5004               	movf	i2___awmod@divisor+1,w,c
 11693  002556  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11694  002558                     i2l2983:
 11695  002558  90D8               	bcf	status,0,c
 11696  00255A  3204               	rrcf	i2___awmod@divisor+1,f,c
 11697  00255C  3203               	rrcf	i2___awmod@divisor,f,c
 11698  00255E  2E05               	decfsz	i2___awmod@counter,f,c
 11699  002560  D7F1               	goto	i2l2979
 11700  002562                     i2l2987:
 11701  002562  5006               	movf	i2___awmod@sign,w,c
 11702  002564  B4D8               	btfsc	status,2,c
 11703  002566  D004               	goto	i2l2991
 11704  002568  6C01               	negf	i2___awmod@dividend,c
 11705  00256A  1E02               	comf	i2___awmod@dividend+1,f,c
 11706  00256C  B0D8               	btfsc	status,0,c
 11707  00256E  2A02               	incf	i2___awmod@dividend+1,f,c
 11708  002570                     i2l2991:
 11709  002570  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11710  002574  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11711  002578  0012               	return	
 11712  00257A                     __end_ofi2___awmod:
 11713                           	opt stack 0
 11714                           tosu	equ	0xFFF
 11715                           tosh	equ	0xFFE
 11716                           tosl	equ	0xFFD
 11717                           pclatu	equ	0xFFB
 11718                           pclath	equ	0xFFA
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           postinc0	equ	0xFEE
 11727                           fsr0h	equ	0xFEA
 11728                           fsr0l	equ	0xFE9
 11729                           wreg	equ	0xFE8
 11730                           indf1	equ	0xFE7
 11731                           postinc1	equ	0xFE6
 11732                           postdec1	equ	0xFE5
 11733                           fsr1h	equ	0xFE2
 11734                           fsr1l	equ	0xFE1
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           postdec2	equ	0xFDD
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _SetPattern *****************
 11743 ;; Defined at:
 11744 ;;		line 252 in file "Pattern_ControlService.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  PatternID       1    wreg     unsigned char 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  PatternID       1    0[COMRAM] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  1    wreg      void 
 11751 ;; Registers used:
 11752 ;;		wreg, status,2, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11758 ;;      Params:         0       0       0       0
 11759 ;;      Locals:         1       0       0       0
 11760 ;;      Temps:          0       0       0       0
 11761 ;;      Totals:         1       0       0       0
 11762 ;;Total ram usage:        1 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    1
 11765 ;; This function calls:
 11766 ;;		i2_ResetPattern
 11767 ;; This function is called by:
 11768 ;;		_ProcessReceive
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text65
 11773  002B64                     __ptext65:
 11774                           	opt stack 0
 11775  002B64                     _SetPattern:
 11776                           	opt stack 17
 11777                           
 11778                           ;incstack = 0
 11779                           ;SetPattern@PatternID stored from wreg
 11780  002B64  6E01               	movwf	SetPattern@PatternID,c
 11781                           
 11782                           ;Pattern_ControlService.c: 253: PatternConfigs[1] = PatternID;
 11783  002B66  C001  F0F5         	movff	SetPattern@PatternID,_PatternConfigs+1
 11784                           
 11785                           ;Pattern_ControlService.c: 255: ResetPattern();
 11786  002B6A  EC69  F015         	call	i2_ResetPattern	;wreg free
 11787  002B6E  0012               	return		;funcret
 11788  002B70                     __end_of_SetPattern:
 11789                           	opt stack 0
 11790                           tosu	equ	0xFFF
 11791                           tosh	equ	0xFFE
 11792                           tosl	equ	0xFFD
 11793                           pclatu	equ	0xFFB
 11794                           pclath	equ	0xFFA
 11795                           tblptru	equ	0xFF8
 11796                           tblptrh	equ	0xFF7
 11797                           tblptrl	equ	0xFF6
 11798                           tablat	equ	0xFF5
 11799                           prodh	equ	0xFF4
 11800                           prodl	equ	0xFF3
 11801                           intcon	equ	0xFF2
 11802                           postinc0	equ	0xFEE
 11803                           fsr0h	equ	0xFEA
 11804                           fsr0l	equ	0xFE9
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postinc1	equ	0xFE6
 11808                           postdec1	equ	0xFE5
 11809                           fsr1h	equ	0xFE2
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           postdec2	equ	0xFDD
 11814                           fsr2h	equ	0xFDA
 11815                           fsr2l	equ	0xFD9
 11816                           status	equ	0xFD8
 11817                           
 11818 ;; *************** function i2_ResetPattern *****************
 11819 ;; Defined at:
 11820 ;;		line 194 in file "Pattern_RGBPatterns.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;		None
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;		None
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  1    wreg      void 
 11827 ;; Registers used:
 11828 ;;		wreg, status,2
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11834 ;;      Params:         0       0       0       0
 11835 ;;      Locals:         0       0       0       0
 11836 ;;      Temps:          0       0       0       0
 11837 ;;      Totals:         0       0       0       0
 11838 ;;Total ram usage:        0 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; This function calls:
 11841 ;;		Nothing
 11842 ;; This function is called by:
 11843 ;;		_SetPattern
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           	psect	text66
 11848  002AD2                     __ptext66:
 11849                           	opt stack 0
 11850  002AD2                     i2_ResetPattern:
 11851                           	opt stack 17
 11852                           
 11853                           ;Pattern_RGBPatterns.c: 196: PatternStepCounter=0;
 11854                           
 11855                           ;incstack = 0
 11856  002AD2  0E00               	movlw	0
 11857  002AD4  0100               	movlb	0	; () banked
 11858  002AD6  6FEB               	movwf	_PatternStepCounter& (0+255),b
 11859                           
 11860                           ;Pattern_RGBPatterns.c: 198: CycleCounter = 0;
 11861  002AD8  0E00               	movlw	0
 11862  002ADA  0100               	movlb	0	; () banked
 11863  002ADC  6FD1               	movwf	_CycleCounter& (0+255),b
 11864  002ADE  0E00               	movlw	0
 11865  002AE0  6FD2               	movwf	(_CycleCounter+1)& (0+255),b
 11866  002AE2  0E00               	movlw	0
 11867  002AE4  6FD3               	movwf	(_CycleCounter+2)& (0+255),b
 11868  002AE6  0E00               	movlw	0
 11869  002AE8  6FD4               	movwf	(_CycleCounter+3)& (0+255),b
 11870                           
 11871                           ; BSR set to: 0
 11872  002AEA  0012               	return		;funcret
 11873  002AEC                     __end_ofi2_ResetPattern:
 11874                           	opt stack 0
 11875                           tosu	equ	0xFFF
 11876                           tosh	equ	0xFFE
 11877                           tosl	equ	0xFFD
 11878                           pclatu	equ	0xFFB
 11879                           pclath	equ	0xFFA
 11880                           tblptru	equ	0xFF8
 11881                           tblptrh	equ	0xFF7
 11882                           tblptrl	equ	0xFF6
 11883                           tablat	equ	0xFF5
 11884                           prodh	equ	0xFF4
 11885                           prodl	equ	0xFF3
 11886                           intcon	equ	0xFF2
 11887                           postinc0	equ	0xFEE
 11888                           fsr0h	equ	0xFEA
 11889                           fsr0l	equ	0xFE9
 11890                           wreg	equ	0xFE8
 11891                           indf1	equ	0xFE7
 11892                           postinc1	equ	0xFE6
 11893                           postdec1	equ	0xFE5
 11894                           fsr1h	equ	0xFE2
 11895                           fsr1l	equ	0xFE1
 11896                           indf2	equ	0xFDF
 11897                           postinc2	equ	0xFDE
 11898                           postdec2	equ	0xFDD
 11899                           fsr2h	equ	0xFDA
 11900                           fsr2l	equ	0xFD9
 11901                           status	equ	0xFD8
 11902                           
 11903 ;; *************** function _SetListLoc *****************
 11904 ;; Defined at:
 11905 ;;		line 276 in file "Pattern_ControlService.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  newLocation     1    wreg     unsigned char 
 11908 ;; Auto vars:     Size  Location     Type
 11909 ;;  newLocation     1   10[COMRAM] unsigned char 
 11910 ;;  LL              2    8[COMRAM] unsigned int 
 11911 ;; Return value:  Size  Location     Type
 11912 ;;                  1    wreg      void 
 11913 ;; Registers used:
 11914 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11915 ;; Tracked objects:
 11916 ;;		On entry : 0/0
 11917 ;;		On exit  : 0/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11920 ;;      Params:         0       0       0       0
 11921 ;;      Locals:         3       0       0       0
 11922 ;;      Temps:          0       0       0       0
 11923 ;;      Totals:         3       0       0       0
 11924 ;;Total ram usage:        3 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    1
 11927 ;; This function calls:
 11928 ;;		i2___awdiv
 11929 ;; This function is called by:
 11930 ;;		_ProcessReceive
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           	psect	text67
 11935  0029E6                     __ptext67:
 11936                           	opt stack 0
 11937  0029E6                     _SetListLoc:
 11938                           	opt stack 17
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;incstack = 0
 11942                           ;SetListLoc@newLocation stored from wreg
 11943  0029E6  6E0B               	movwf	SetListLoc@newLocation,c
 11944                           
 11945                           ;Pattern_ControlService.c: 277: uint16_t LL = newLocation*76/255;
 11946  0029E8  500B               	movf	SetListLoc@newLocation,w,c
 11947  0029EA  0D4C               	mullw	76
 11948  0029EC  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 11949  0029F0  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 11950  0029F4  0E00               	movlw	0
 11951  0029F6  6E04               	movwf	i2___awdiv@divisor+1,c
 11952  0029F8  6803               	setf	i2___awdiv@divisor,c
 11953  0029FA  EC0F  F011         	call	i2___awdiv	;wreg free
 11954  0029FE  C001  F009         	movff	?i2___awdiv,SetListLoc@LL
 11955  002A02  C002  F00A         	movff	?i2___awdiv+1,SetListLoc@LL+1
 11956                           
 11957                           ;Pattern_ControlService.c: 278: ListLoc = LL;
 11958  002A06  C009  F048         	movff	SetListLoc@LL,_ListLoc
 11959  002A0A  0012               	return		;funcret
 11960  002A0C                     __end_of_SetListLoc:
 11961                           	opt stack 0
 11962                           tosu	equ	0xFFF
 11963                           tosh	equ	0xFFE
 11964                           tosl	equ	0xFFD
 11965                           pclatu	equ	0xFFB
 11966                           pclath	equ	0xFFA
 11967                           tblptru	equ	0xFF8
 11968                           tblptrh	equ	0xFF7
 11969                           tblptrl	equ	0xFF6
 11970                           tablat	equ	0xFF5
 11971                           prodh	equ	0xFF4
 11972                           prodl	equ	0xFF3
 11973                           intcon	equ	0xFF2
 11974                           postinc0	equ	0xFEE
 11975                           fsr0h	equ	0xFEA
 11976                           fsr0l	equ	0xFE9
 11977                           wreg	equ	0xFE8
 11978                           indf1	equ	0xFE7
 11979                           postinc1	equ	0xFE6
 11980                           postdec1	equ	0xFE5
 11981                           fsr1h	equ	0xFE2
 11982                           fsr1l	equ	0xFE1
 11983                           indf2	equ	0xFDF
 11984                           postinc2	equ	0xFDE
 11985                           postdec2	equ	0xFDD
 11986                           fsr2h	equ	0xFDA
 11987                           fsr2l	equ	0xFD9
 11988                           status	equ	0xFD8
 11989                           
 11990 ;; *************** function _SetBrightness *****************
 11991 ;; Defined at:
 11992 ;;		line 259 in file "Pattern_ControlService.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;  brightness      1    wreg     unsigned char 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  brightness      1    8[COMRAM] unsigned char 
 11997 ;;  newBrightnes    2    9[COMRAM] unsigned int 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12007 ;;      Params:         0       0       0       0
 12008 ;;      Locals:         3       0       0       0
 12009 ;;      Temps:          0       0       0       0
 12010 ;;      Totals:         3       0       0       0
 12011 ;;Total ram usage:        3 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    1
 12014 ;; This function calls:
 12015 ;;		_DotStar_SetBrightness
 12016 ;;		i2___awdiv
 12017 ;; This function is called by:
 12018 ;;		_ProcessReceive
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           	psect	text68
 12023  002946                     __ptext68:
 12024                           	opt stack 0
 12025  002946                     _SetBrightness:
 12026                           	opt stack 17
 12027                           
 12028                           ;incstack = 0
 12029                           ;SetBrightness@brightness stored from wreg
 12030  002946  6E09               	movwf	SetBrightness@brightness,c
 12031                           
 12032                           ;Pattern_ControlService.c: 260: uint16_t newBrightness = brightness*MaxBrightness/255;
 12033  002948  5009               	movf	SetBrightness@brightness,w,c
 12034  00294A  0257               	mulwf	_MaxBrightness,c
 12035  00294C  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 12036  002950  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 12037  002954  0E00               	movlw	0
 12038  002956  6E04               	movwf	i2___awdiv@divisor+1,c
 12039  002958  6803               	setf	i2___awdiv@divisor,c
 12040  00295A  EC0F  F011         	call	i2___awdiv	;wreg free
 12041  00295E  C001  F00A         	movff	?i2___awdiv,SetBrightness@newBrightness
 12042  002962  C002  F00B         	movff	?i2___awdiv+1,SetBrightness@newBrightness+1
 12043                           
 12044                           ;Pattern_ControlService.c: 261: PatternConfigs[2] = newBrightness;
 12045  002966  C00A  F0F6         	movff	SetBrightness@newBrightness,_PatternConfigs+2
 12046                           
 12047                           ;Pattern_ControlService.c: 262: DotStar_SetBrightness(newBrightness);
 12048  00296A  500A               	movf	SetBrightness@newBrightness,w,c
 12049  00296C  ECA5  F015         	call	_DotStar_SetBrightness
 12050  002970  0012               	return		;funcret
 12051  002972                     __end_of_SetBrightness:
 12052                           	opt stack 0
 12053                           tosu	equ	0xFFF
 12054                           tosh	equ	0xFFE
 12055                           tosl	equ	0xFFD
 12056                           pclatu	equ	0xFFB
 12057                           pclath	equ	0xFFA
 12058                           tblptru	equ	0xFF8
 12059                           tblptrh	equ	0xFF7
 12060                           tblptrl	equ	0xFF6
 12061                           tablat	equ	0xFF5
 12062                           prodh	equ	0xFF4
 12063                           prodl	equ	0xFF3
 12064                           intcon	equ	0xFF2
 12065                           postinc0	equ	0xFEE
 12066                           fsr0h	equ	0xFEA
 12067                           fsr0l	equ	0xFE9
 12068                           wreg	equ	0xFE8
 12069                           indf1	equ	0xFE7
 12070                           postinc1	equ	0xFE6
 12071                           postdec1	equ	0xFE5
 12072                           fsr1h	equ	0xFE2
 12073                           fsr1l	equ	0xFE1
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           postdec2	equ	0xFDD
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8
 12080                           
 12081 ;; *************** function i2___awdiv *****************
 12082 ;; Defined at:
 12083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;  dividend        2    0[COMRAM] int 
 12086 ;;  divisor         2    2[COMRAM] int 
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;  __awdiv         2    6[COMRAM] int 
 12089 ;;  __awdiv         1    5[COMRAM] unsigned char 
 12090 ;;  __awdiv         1    4[COMRAM] unsigned char 
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  2    0[COMRAM] int 
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12100 ;;      Params:         4       0       0       0
 12101 ;;      Locals:         4       0       0       0
 12102 ;;      Temps:          0       0       0       0
 12103 ;;      Totals:         8       0       0       0
 12104 ;;Total ram usage:        8 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; This function calls:
 12107 ;;		Nothing
 12108 ;; This function is called by:
 12109 ;;		_SetBrightness
 12110 ;;		_SetListLoc
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           	psect	text69
 12115  00221E                     __ptext69:
 12116                           	opt stack 0
 12117  00221E                     i2___awdiv:
 12118                           	opt stack 17
 12119                           
 12120                           ;incstack = 0
 12121  00221E  0E00               	movlw	0
 12122  002220  6E06               	movwf	i2___awdiv@sign,c
 12123  002222  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12124  002224  D006               	goto	i2l3457
 12125  002226  6C03               	negf	i2___awdiv@divisor,c
 12126  002228  1E04               	comf	i2___awdiv@divisor+1,f,c
 12127  00222A  B0D8               	btfsc	status,0,c
 12128  00222C  2A04               	incf	i2___awdiv@divisor+1,f,c
 12129  00222E  0E01               	movlw	1
 12130  002230  6E06               	movwf	i2___awdiv@sign,c
 12131  002232                     i2l3457:
 12132  002232  AE02               	btfss	i2___awdiv@dividend+1,7,c
 12133  002234  D006               	goto	i2l3463
 12134  002236  6C01               	negf	i2___awdiv@dividend,c
 12135  002238  1E02               	comf	i2___awdiv@dividend+1,f,c
 12136  00223A  B0D8               	btfsc	status,0,c
 12137  00223C  2A02               	incf	i2___awdiv@dividend+1,f,c
 12138  00223E  0E01               	movlw	1
 12139  002240  1A06               	xorwf	i2___awdiv@sign,f,c
 12140  002242                     i2l3463:
 12141  002242  0E00               	movlw	0
 12142  002244  6E08               	movwf	i2___awdiv@quotient+1,c
 12143  002246  0E00               	movlw	0
 12144  002248  6E07               	movwf	i2___awdiv@quotient,c
 12145  00224A  5003               	movf	i2___awdiv@divisor,w,c
 12146  00224C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 12147  00224E  B4D8               	btfsc	status,2,c
 12148  002250  D01C               	goto	i2l3485
 12149  002252  0E01               	movlw	1
 12150  002254  6E05               	movwf	i2___awdiv@counter,c
 12151  002256  D004               	goto	i2l3471
 12152  002258                     i2l3469:
 12153  002258  90D8               	bcf	status,0,c
 12154  00225A  3603               	rlcf	i2___awdiv@divisor,f,c
 12155  00225C  3604               	rlcf	i2___awdiv@divisor+1,f,c
 12156  00225E  2A05               	incf	i2___awdiv@counter,f,c
 12157  002260                     i2l3471:
 12158  002260  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12159  002262  D7FA               	goto	i2l3469
 12160  002264                     i2l3473:
 12161  002264  90D8               	bcf	status,0,c
 12162  002266  3607               	rlcf	i2___awdiv@quotient,f,c
 12163  002268  3608               	rlcf	i2___awdiv@quotient+1,f,c
 12164  00226A  5003               	movf	i2___awdiv@divisor,w,c
 12165  00226C  5C01               	subwf	i2___awdiv@dividend,w,c
 12166  00226E  5004               	movf	i2___awdiv@divisor+1,w,c
 12167  002270  5802               	subwfb	i2___awdiv@dividend+1,w,c
 12168  002272  A0D8               	btfss	status,0,c
 12169  002274  D005               	goto	i2l3481
 12170  002276  5003               	movf	i2___awdiv@divisor,w,c
 12171  002278  5E01               	subwf	i2___awdiv@dividend,f,c
 12172  00227A  5004               	movf	i2___awdiv@divisor+1,w,c
 12173  00227C  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 12174  00227E  8007               	bsf	i2___awdiv@quotient,0,c
 12175  002280                     i2l3481:
 12176  002280  90D8               	bcf	status,0,c
 12177  002282  3204               	rrcf	i2___awdiv@divisor+1,f,c
 12178  002284  3203               	rrcf	i2___awdiv@divisor,f,c
 12179  002286  2E05               	decfsz	i2___awdiv@counter,f,c
 12180  002288  D7ED               	goto	i2l3473
 12181  00228A                     i2l3485:
 12182  00228A  5006               	movf	i2___awdiv@sign,w,c
 12183  00228C  B4D8               	btfsc	status,2,c
 12184  00228E  D004               	goto	i2l3489
 12185  002290  6C07               	negf	i2___awdiv@quotient,c
 12186  002292  1E08               	comf	i2___awdiv@quotient+1,f,c
 12187  002294  B0D8               	btfsc	status,0,c
 12188  002296  2A08               	incf	i2___awdiv@quotient+1,f,c
 12189  002298                     i2l3489:
 12190  002298  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 12191  00229C  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 12192  0022A0  0012               	return	
 12193  0022A2                     __end_ofi2___awdiv:
 12194                           	opt stack 0
 12195                           tosu	equ	0xFFF
 12196                           tosh	equ	0xFFE
 12197                           tosl	equ	0xFFD
 12198                           pclatu	equ	0xFFB
 12199                           pclath	equ	0xFFA
 12200                           tblptru	equ	0xFF8
 12201                           tblptrh	equ	0xFF7
 12202                           tblptrl	equ	0xFF6
 12203                           tablat	equ	0xFF5
 12204                           prodh	equ	0xFF4
 12205                           prodl	equ	0xFF3
 12206                           intcon	equ	0xFF2
 12207                           postinc0	equ	0xFEE
 12208                           fsr0h	equ	0xFEA
 12209                           fsr0l	equ	0xFE9
 12210                           wreg	equ	0xFE8
 12211                           indf1	equ	0xFE7
 12212                           postinc1	equ	0xFE6
 12213                           postdec1	equ	0xFE5
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           fsr2h	equ	0xFDA
 12220                           fsr2l	equ	0xFD9
 12221                           status	equ	0xFD8
 12222                           
 12223 ;; *************** function _DotStar_SetBrightness *****************
 12224 ;; Defined at:
 12225 ;;		line 70 in file "Pattern_DotStarLED.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  brightness      1    wreg     unsigned char 
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  brightness      1    0[COMRAM] unsigned char 
 12230 ;; Return value:  Size  Location     Type
 12231 ;;                  1    wreg      void 
 12232 ;; Registers used:
 12233 ;;		wreg, status,2, status,0
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12239 ;;      Params:         0       0       0       0
 12240 ;;      Locals:         1       0       0       0
 12241 ;;      Temps:          0       0       0       0
 12242 ;;      Totals:         1       0       0       0
 12243 ;;Total ram usage:        1 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_SetBrightness
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           	psect	text70
 12253  002B4A                     __ptext70:
 12254                           	opt stack 0
 12255  002B4A                     _DotStar_SetBrightness:
 12256                           	opt stack 17
 12257                           
 12258                           ;incstack = 0
 12259                           ;DotStar_SetBrightness@brightness stored from wreg
 12260  002B4A  6E01               	movwf	DotStar_SetBrightness@brightness,c
 12261                           
 12262                           ;Pattern_DotStarLED.c: 71: if(brightness <= 0x1F){
 12263  002B4C  0E20               	movlw	32
 12264  002B4E  6001               	cpfslt	DotStar_SetBrightness@brightness,c
 12265  002B50  0012               	return	
 12266                           
 12267                           ;Pattern_DotStarLED.c: 72: Brightness = brightness;
 12268  002B52  C001  F0F0         	movff	DotStar_SetBrightness@brightness,_Brightness
 12269  002B56  0012               	return	
 12270  002B58                     __end_of_DotStar_SetBrightness:
 12271                           	opt stack 0
 12272                           tosu	equ	0xFFF
 12273                           tosh	equ	0xFFE
 12274                           tosl	equ	0xFFD
 12275                           pclatu	equ	0xFFB
 12276                           pclath	equ	0xFFA
 12277                           tblptru	equ	0xFF8
 12278                           tblptrh	equ	0xFF7
 12279                           tblptrl	equ	0xFF6
 12280                           tablat	equ	0xFF5
 12281                           prodh	equ	0xFF4
 12282                           prodl	equ	0xFF3
 12283                           intcon	equ	0xFF2
 12284                           postinc0	equ	0xFEE
 12285                           fsr0h	equ	0xFEA
 12286                           fsr0l	equ	0xFE9
 12287                           wreg	equ	0xFE8
 12288                           indf1	equ	0xFE7
 12289                           postinc1	equ	0xFE6
 12290                           postdec1	equ	0xFE5
 12291                           fsr1h	equ	0xFE2
 12292                           fsr1l	equ	0xFE1
 12293                           indf2	equ	0xFDF
 12294                           postinc2	equ	0xFDE
 12295                           postdec2	equ	0xFDD
 12296                           fsr2h	equ	0xFDA
 12297                           fsr2l	equ	0xFD9
 12298                           status	equ	0xFD8
 12299                           
 12300 ;; *************** function _CAN_ErrorResponse *****************
 12301 ;; Defined at:
 12302 ;;		line 80 in file "CAN_RX_HW.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;		None
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;		None
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      void 
 12309 ;; Registers used:
 12310 ;;		None
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12316 ;;      Params:         0       0       0       0
 12317 ;;      Locals:         0       0       0       0
 12318 ;;      Temps:          0       0       0       0
 12319 ;;      Totals:         0       0       0       0
 12320 ;;Total ram usage:        0 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; This function calls:
 12323 ;;		Nothing
 12324 ;; This function is called by:
 12325 ;;		_ISR
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           	psect	text71
 12330  002BA2                     __ptext71:
 12331                           	opt stack 0
 12332  002BA2                     _CAN_ErrorResponse:
 12333                           	opt stack 20
 12334                           
 12335                           ;incstack = 0
 12336  002BA2  0012               	return		;funcret
 12337  002BA4                     __end_of_CAN_ErrorResponse:
 12338                           	opt stack 0
 12339                           tosu	equ	0xFFF
 12340                           tosh	equ	0xFFE
 12341                           tosl	equ	0xFFD
 12342                           pclatu	equ	0xFFB
 12343                           pclath	equ	0xFFA
 12344                           tblptru	equ	0xFF8
 12345                           tblptrh	equ	0xFF7
 12346                           tblptrl	equ	0xFF6
 12347                           tablat	equ	0xFF5
 12348                           prodh	equ	0xFF4
 12349                           prodl	equ	0xFF3
 12350                           intcon	equ	0xFF2
 12351                           postinc0	equ	0xFEE
 12352                           fsr0h	equ	0xFEA
 12353                           fsr0l	equ	0xFE9
 12354                           wreg	equ	0xFE8
 12355                           indf1	equ	0xFE7
 12356                           postinc1	equ	0xFE6
 12357                           postdec1	equ	0xFE5
 12358                           fsr1h	equ	0xFE2
 12359                           fsr1l	equ	0xFE1
 12360                           indf2	equ	0xFDF
 12361                           postinc2	equ	0xFDE
 12362                           postdec2	equ	0xFDD
 12363                           fsr2h	equ	0xFDA
 12364                           fsr2l	equ	0xFD9
 12365                           status	equ	0xFD8
 12366                           
 12367 ;; *************** function _CAN_BusErrorResponse *****************
 12368 ;; Defined at:
 12369 ;;		line 85 in file "CAN_RX_HW.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;		None
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;		None
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      void 
 12376 ;; Registers used:
 12377 ;;		None
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12383 ;;      Params:         0       0       0       0
 12384 ;;      Locals:         0       0       0       0
 12385 ;;      Temps:          0       0       0       0
 12386 ;;      Totals:         0       0       0       0
 12387 ;;Total ram usage:        0 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; This function calls:
 12390 ;;		Nothing
 12391 ;; This function is called by:
 12392 ;;		_ISR
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text72
 12397  002BA4                     __ptext72:
 12398                           	opt stack 0
 12399  002BA4                     _CAN_BusErrorResponse:
 12400                           	opt stack 20
 12401                           
 12402                           ;incstack = 0
 12403  002BA4  0012               	return		;funcret
 12404  002BA6                     __end_of_CAN_BusErrorResponse:
 12405                           	opt stack 0
 12406                           tosu	equ	0xFFF
 12407                           tosh	equ	0xFFE
 12408                           tosl	equ	0xFFD
 12409                           pclatu	equ	0xFFB
 12410                           pclath	equ	0xFFA
 12411                           tblptru	equ	0xFF8
 12412                           tblptrh	equ	0xFF7
 12413                           tblptrl	equ	0xFF6
 12414                           tablat	equ	0xFF5
 12415                           prodh	equ	0xFF4
 12416                           prodl	equ	0xFF3
 12417                           intcon	equ	0xFF2
 12418                           postinc0	equ	0xFEE
 12419                           fsr0h	equ	0xFEA
 12420                           fsr0l	equ	0xFE9
 12421                           wreg	equ	0xFE8
 12422                           indf1	equ	0xFE7
 12423                           postinc1	equ	0xFE6
 12424                           postdec1	equ	0xFE5
 12425                           fsr1h	equ	0xFE2
 12426                           fsr1l	equ	0xFE1
 12427                           indf2	equ	0xFDF
 12428                           postinc2	equ	0xFDE
 12429                           postdec2	equ	0xFDD
 12430                           fsr2h	equ	0xFDA
 12431                           fsr2l	equ	0xFD9
 12432                           status	equ	0xFD8
 12433                           tosu	equ	0xFFF
 12434                           tosh	equ	0xFFE
 12435                           tosl	equ	0xFFD
 12436                           pclatu	equ	0xFFB
 12437                           pclath	equ	0xFFA
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           postinc0	equ	0xFEE
 12446                           fsr0h	equ	0xFEA
 12447                           fsr0l	equ	0xFE9
 12448                           wreg	equ	0xFE8
 12449                           indf1	equ	0xFE7
 12450                           postinc1	equ	0xFE6
 12451                           postdec1	equ	0xFE5
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           fsr2h	equ	0xFDA
 12458                           fsr2l	equ	0xFD9
 12459                           status	equ	0xFD8
 12460                           
 12461                           	psect	text73
 12462  000000                     __ptext73:
 12463                           	opt stack 0
 12464                           tosu	equ	0xFFF
 12465                           tosh	equ	0xFFE
 12466                           tosl	equ	0xFFD
 12467                           pclatu	equ	0xFFB
 12468                           pclath	equ	0xFFA
 12469                           tblptru	equ	0xFF8
 12470                           tblptrh	equ	0xFF7
 12471                           tblptrl	equ	0xFF6
 12472                           tablat	equ	0xFF5
 12473                           prodh	equ	0xFF4
 12474                           prodl	equ	0xFF3
 12475                           intcon	equ	0xFF2
 12476                           postinc0	equ	0xFEE
 12477                           fsr0h	equ	0xFEA
 12478                           fsr0l	equ	0xFE9
 12479                           wreg	equ	0xFE8
 12480                           indf1	equ	0xFE7
 12481                           postinc1	equ	0xFE6
 12482                           postdec1	equ	0xFE5
 12483                           fsr1h	equ	0xFE2
 12484                           fsr1l	equ	0xFE1
 12485                           indf2	equ	0xFDF
 12486                           postinc2	equ	0xFDE
 12487                           postdec2	equ	0xFDD
 12488                           fsr2h	equ	0xFDA
 12489                           fsr2l	equ	0xFD9
 12490                           status	equ	0xFD8
 12491                           
 12492                           	psect	rparam
 12493  0000                     tosu	equ	0xFFF
 12494                           tosh	equ	0xFFE
 12495                           tosl	equ	0xFFD
 12496                           pclatu	equ	0xFFB
 12497                           pclath	equ	0xFFA
 12498                           tblptru	equ	0xFF8
 12499                           tblptrh	equ	0xFF7
 12500                           tblptrl	equ	0xFF6
 12501                           tablat	equ	0xFF5
 12502                           prodh	equ	0xFF4
 12503                           prodl	equ	0xFF3
 12504                           intcon	equ	0xFF2
 12505                           postinc0	equ	0xFEE
 12506                           fsr0h	equ	0xFEA
 12507                           fsr0l	equ	0xFE9
 12508                           wreg	equ	0xFE8
 12509                           indf1	equ	0xFE7
 12510                           postinc1	equ	0xFE6
 12511                           postdec1	equ	0xFE5
 12512                           fsr1h	equ	0xFE2
 12513                           fsr1l	equ	0xFE1
 12514                           indf2	equ	0xFDF
 12515                           postinc2	equ	0xFDE
 12516                           postdec2	equ	0xFDD
 12517                           fsr2h	equ	0xFDA
 12518                           fsr2l	equ	0xFD9
 12519                           status	equ	0xFD8
 12520                           
 12521                           	psect	temp
 12522  000058                     btemp:
 12523                           	opt stack 0
 12524  000058                     	ds	1
 12525  0000                     int$flags	set	btemp
 12526                           tosu	equ	0xFFF
 12527                           tosh	equ	0xFFE
 12528                           tosl	equ	0xFFD
 12529                           pclatu	equ	0xFFB
 12530                           pclath	equ	0xFFA
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           postinc0	equ	0xFEE
 12539                           fsr0h	equ	0xFEA
 12540                           fsr0l	equ	0xFE9
 12541                           wreg	equ	0xFE8
 12542                           indf1	equ	0xFE7
 12543                           postinc1	equ	0xFE6
 12544                           postdec1	equ	0xFE5
 12545                           fsr1h	equ	0xFE2
 12546                           fsr1l	equ	0xFE1
 12547                           indf2	equ	0xFDF
 12548                           postinc2	equ	0xFDE
 12549                           postdec2	equ	0xFDD
 12550                           fsr2h	equ	0xFDA
 12551                           fsr2l	equ	0xFD9
 12552                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        10
    BSS         580
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      87
    BANK0           160    109     153
    BANK1           256      0     196
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S109$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S78$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S78$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CAN_RCVResponse->_ProcessReceive
    _ProcessReceive->i2_PostPatternControlService
    i2_PostPatternControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _SetListLoc->i2___awdiv
    _SetBrightness->i2___awdiv

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_ListeningPattern
    _ThinkingPattern->___awdiv
    _SpeakingPattern->___awdiv
    _ListeningPattern->___awdiv
    _IdlePattern->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   95449
                                            108 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   79854
                                            103 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   14782
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   14782
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             90 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   60741
                                             90 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   12526
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      46
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   40786
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        8     6      2   28142
                                             34 BANK0      8     6      2
                         _GetListLoc
                        _IdlePattern
                   _ListeningPattern
                    _SpeakingPattern
                    _ThinkingPattern
                     _WelcomePattern
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _WelcomePattern                                      11    11      0     139
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (5) _ThinkingPattern                                     25    23      2    5178
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SpeakingPattern                                     25    23      2    5178
                                              8 BANK0     24    22      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _ListeningPattern                                    26    24      2    5245
                                              8 BANK0     26    24      2
                         _GetListLoc (ARG)
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _IdlePattern                                         25    25      0    5076
                                              8 BANK0     24    24      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1108
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _GetListLoc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        21    19      2   12436
                                             69 BANK0     21    19      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    7483
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    7264
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4689
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     866
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    7185
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3453
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   15199
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    7082
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    7398
                                             29 BANK0      4     4      0
                           _CAN_Init
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    7037
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    6645
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2585
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    3534
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     3      1     120
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _CAN_Init                                             0     0      0       0
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (4) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    3558
                                             37 COMRAM    16    16      0
               _CAN_BusErrorResponse
                  _CAN_ErrorResponse
                    _CAN_RCVResponse
                   _CAN_XmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0    1108
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CAN_XmitResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_RCVResponse                                     0     0      0    2450
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      5     5      0    2450
                                             32 COMRAM     5     5      0
                      _SetBrightness
                         _SetListLoc
                         _SetPattern
        i2_PostPatternControlService
                          i2___awmod
 ---------------------------------------------------------------------------------
 (13) i2_PostPatternControlService                         3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     967
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     827
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) _SetPattern                                          1     1      0      22
                                              0 COMRAM     1     1      0
                     i2_ResetPattern
 ---------------------------------------------------------------------------------
 (14) i2_ResetPattern                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _SetListLoc                                          3     3      0     449
                                              8 COMRAM     3     3      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (13) _SetBrightness                                       3     3      0     515
                                              8 COMRAM     3     3      0
              _DotStar_SetBrightness
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (14) i2___awdiv                                           8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (14) _DotStar_SetBrightness                               1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _CAN_ErrorResponse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_BusErrorResponse                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _CAN_Init
         _InitCanHardware
         _InitPins
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _GetListLoc
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               _GetListLoc (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             _WelcomePattern
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           _GetListLoc
           _IdlePattern
             ___awdiv
             ___awmod
           _ListeningPattern
             _GetListLoc (ARG)
             ___awdiv (ARG)
             ___awmod (ARG)
           _SpeakingPattern
             ___awdiv
             ___awmod
           _ThinkingPattern
             ___awdiv
             ___awmod
           _WelcomePattern
           ___awmod
           ___lwdiv
             ___wmul (ARG)
               ___awmod (ARG)
           ___wmul
             ___awmod (ARG)
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _GetListLoc
             _IdlePattern
               ___awdiv
               ___awmod
             _ListeningPattern
               _GetListLoc (ARG)
               ___awdiv (ARG)
               ___awmod (ARG)
             _SpeakingPattern
               ___awdiv
               ___awmod
             _ThinkingPattern
               ___awdiv
               ___awmod
             _WelcomePattern
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CAN_BusErrorResponse
   _CAN_ErrorResponse
   _CAN_RCVResponse
     _ProcessReceive
       _SetBrightness
         _DotStar_SetBrightness
         i2___awdiv
       _SetListLoc
         i2___awdiv
       _SetPattern
         i2_ResetPattern
       i2_PostPatternControlService
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
       i2___awmod
   _CAN_XmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      99       4       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      57       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B4       9        0.0%
DATA                 0      0     2F0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Dec 12 14:48:36 2016

                    _ListeningPattern 0D40                   HSV_to_RGB@HSV_Value 0073  
                    ??__HW_Timer_Init 0062                   ES_CheckUserEvents@i 0060  
                 __HW_Timer_Init@Rate 0060                          ___awdiv@sign 0065  
                 ___wmul@multiplicand 0068                       ??_UpdatePattern 0084  
                         __CFG_OSC$HS 000000   RunPatternControlService@ReturnEvent 00BD  
                                 l352 1D74                                   l506 1928  
                                 l529 0AA0                                   l609 1816  
                                 l814 23A4                                   l817 2400  
                                 l690 0638                                   l682 221C  
                                 l692 064A                                   l693 0664  
                                 l694 067E                                   l695 0690  
                                 l696 06AA                 __end_of_ES_Initialize 1B0A  
                                 _GIE 007F97                                   _ISR 0008  
           __end_of_SPI32_EOTResponse 28AA                __end_ofi2_ResetPattern 2AEC  
                        ___awmod@sign 0065               __end_of_Check4Keystroke 2B9E  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                ES_EnQueueFIFO@SaveCrit 0074  
                _ListeningPattern$755 0078                  _ListeningPattern$756 007A  
             ES_EnQueueFIFO@Event2Add 006E                     ?_ES_PostToService 0077  
                                ?_ISR 0001            i2ES_EnQueueFIFO@pThisQueue 0016  
   Pattern_RGBPatterns@PatternConfigs 00DA                          __CFG_WDT$OFF 000000  
          ES_Timer_Tick_Resp@NewEvent 00D5                                  l1253 248A  
                                l3101 0836                                  l3121 0A14  
                                l3105 0930                                  l3019 04A8  
                                l3115 0994                                  l3037 06C4  
                                l3133 0A92                                  l3117 09F4  
                                l3221 0EE0                                  l3213 0E70  
                                l3039 06FA                                  l3119 09FE  
                                l3127 0A7A                                  l3223 0F1C  
                                l3071 18A4                                  l3311 0B1E  
                                l3303 0AEA                                  l4103 2204  
                                l3161 1100                                  l3153 1094  
                                l3321 0B66                                  l3313 0B26  
                                l3305 0AF2                                  l3139 0ABC  
                                l3163 113E                                  l3091 1910  
                                l3067 1842                                  l3331 0BCA  
                                l3315 0B2E                                  l3181 12B6  
                                l3085 18DC                                  l3077 18BC  
                                l3341 0C30                                  l3325 0B92  
                                l3317 0B36                                  l3309 0B10  
                                l3253 2058                                  l3191 1360  
                                l3079 18CC                                  l3351 0CD0  
                                l3335 0BF6                                  l3327 0B9A  
                                l3263 20E4                                  l3503 161C  
                                l3345 0C5C                                  l3337 0BFE  
                                l3513 1694                                  l3275 269E  
                                l3371 15E0                                  l3347 0C64  
                                l3267 20EA                                  l3515 16D2  
                                l3365 14EA                                  l2901 1D9E  
                                l3189 1322                                  l3357 0D04  
                                l3381 27E0                                  l4093 21BC  
                                l3359 0D32                                  l3711 1CFC  
                                l4095 21CE                                  l2841 2166  
                                l2833 2130                                  l2825 210C  
                                l2913 1DD2                                  l3377 27C2  
                                l3713 1D00                                  l4097 21E0  
                                l2835 213C                                  l3635 1498  
                                l2915 1DDE                                  l2907 1DB4  
                                l3723 1D20                                  l3707 1CEE  
                                l4099 21F2                                  l2837 2142  
                                l2845 2174                                  l2829 211C  
                                l3645 14DC                                  l2933 1E36  
                                l2925 1E14                                  l2917 1DE4  
                                l3581 2658                                  l3717 1D10  
                                l3639 14B4                                  l2943 243A  
                                l3735 1D42                                  l3743 1D58  
                                l3663 2AEE                                  l2849 2188  
                                l3761 286C                                  l2945 2446  
                                l2929 1E22                                  l3729 1D32  
                                l3595 27AE                                  l3587 2786  
                                l2955 247C                                  l2947 244C  
                                l3771 1732                                  l3667 2AF6  
                                l2869 1BE8                                  l2885 2506  
                                l3693 263A                                  l3861 1A82  
                                l3853 1A3A                                  l3917 28EE  
                                l3767 1726                                  l3919 28F6  
                                l3857 1A7E                                  l3873 1B06  
                                l3849 1A30                                  l3793 1800  
                                l3779 1768                                  l3699 1CC2  
                                l3883 19AE                                  l3869 1B00  
                                l3789 17F8                                  l3893 1A18  
                                l3877 192C                                  l3889 1A02  
                                STR_1 0364                                  STR_2 037F  
                                STR_3 0397                                  STR_4 03AE  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  u2260 2684  
                                u2238 167C                                  u2265 267A  
                                u1725 041A                                  _PIE1 000F9D  
                                u2298 2752                                  u2299 276A  
                                u1835 09DE                                  u2638 19D8  
                                u2639 19F0                                  _PEIE 007F96  
                                u1964 207E                                  u1965 2076  
                                u2598 1ADA                                  u2599 1AF6  
                  ??_ES_PostToService 007A                   __end_of_IdlePattern 0AD4  
                     WelcomePattern@i 0069                       __end_of_HW_Init 2A2E  
                                _main 2192                           ?_ES_DeQueue 006C  
           Pattern_RGBPatterns@Length 00E3                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0058  
                       main@ErrorType 00CC                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0016                      ?_SpeakingPattern 0068  
                    __end_of_CAN_Init 2B7A     __end_of_InitPatternControlService 263E  
                         ?_SPI32_Init 0001                         __CFG_MCLRE$ON 000000  
                        ___param_bank 000010                  __end_of_GetNextFrame 2A9E  
             __end_of_InitCanHardware 241C                                 ??_ISR 0026  
                          _GetListLoc 2B96                    ES_Run@HighestPrior 00CB  
            ThinkingPattern@stepCount 0069              SpeakingPattern@stepCount 0069  
                               ?_main 0001                 __end_of_ES_Timer_Init 2B4A  
                     __end_of___awdiv 1E40                       __end_of___awmod 2192  
                     __end_of___lbmod 27BA                       ___awdiv@divisor 0062  
                               _T1CON 000FCD                            _DistList00 0360  
                     __end_of___lwdiv 2494                                 _ERRIE 007D1D  
                               _ERRIF 007D25                                 i2l171 1C7E  
                               i2l832 202A                       ___awdiv@counter 0064  
                               _IRXIE 007D1F                                 _IRXIF 007D27  
         ??i2_PostSPI32ControlService 0021                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _TRISA 000F92                                 _TRISC 000F94  
                               _SSPIE 007CEB                                 _SSPIF 007CF3  
                          _Brightness 00F0                         __CFG_PWRT$OFF 000000  
                     ?i2_ResetPattern 0001                  _SPI32_TransmitFrames 2914  
                         ?_HSV_to_RGB 0073                                 _Ready 00DE  
          __size_of_CAN_ErrorResponse 0002       __end_of_InitSPI32ControlService 2870  
                          _FrameIndex 00E7                                 _putch 2BA0  
                      __CFG_BOREN$OFF 000000                                 pclath 000FFA  
                               tablat 000FF5                      __end_ofi2___wmul 29E6  
                               status 000FD8               SPI32_SendFrame@newFrame 0060  
               _DotStar_SetBrightness 2B4A          __end_of_CAN_BusErrorResponse 2BA6  
                  __size_ofi2___awdiv 0084                      ?_SPI32_SendFrame 0060  
                  __size_ofi2___awmod 0070                       __initialization 2322  
              ES_GetMSBitSet@LoopCntr 0069            __end_of_ES_CheckUserEvents 2776  
                        __end_of_main 221E                     ES_Timer_Init@Rate 0062  
                    __end_of_InitPins 2AD2                   __end_of_EventQueues 035E  
                              ??_main 00CC                     ?i2_ES_EnQueueFIFO 000D  
                       __activetblptr 000002                   SpeakingPattern@head 007F  
          __size_of_SPI32_EOTResponse 003A                   __size_of_ES_DeQueue 0128  
                     _Nybble2MSBitNum 0341                 ?_SPI32_TransmitFrames 0080  
    __end_of__HW_Process_Pending_Ints 2B02              ProcessReceive@Event2Post 0023  
                    ?_Check4Keystroke 0001                    ??i2_ES_EnQueueFIFO 0012  
                         _IdlePattern 0816              ProcessReceive@LastButton 0056  
                __end_of_DotStar_Init 1FA2                  __end_of_DotStar_Show 1608  
                 __size_of_SPI32_Init 0006                                _ADCON1 000FC1  
                           ??_HW_Init 0060                                _CCP1IF 007CF2  
                              _CANCON 000F6F                            _PatternOff 27BA  
                              _CCPR1H 000FBF                                _CCPR1L 000FBE  
                    ___awdiv@dividend 0060                                _CIOCON 000F73  
                      IdlePattern@hue 007C                            _MyPriority 00E9  
                      IdlePattern@sat 007A                        IdlePattern@val 007B  
                              ?_putch 0001                      ??_ES_GetMSBitSet 0062  
                          _SetListLoc 29E6                            _SetPattern 2B64  
                              i2l4013 1C56                                i2l4031 1C74  
                              i2l4007 1C4C                                i2l4025 1C6A  
                              i2l4019 1C60                                i2l3247 1EF0  
                              i2l3443 25E0                                i2l3471 2260  
                              i2l3463 2242                                i2l3481 2280  
                              i2l3473 2264                                i2l3457 2232  
                              i2l3469 2258                                i2l3485 228A  
                              i2l3821 1FEC                                i2l3813 1FD2  
                              i2l3489 2298                                i2l3817 1FE0  
                              i2l3809 1FC4                                i2l3841 26F8  
                              i2l3905 2894                                i2l2971 252A  
                              i2l3819 1FE6                                i2l3827 2010  
                              i2l3829 202E                                i2l2991 2570  
                              i2l2983 2558                                i2l2975 2538  
                              i2l2967 251E                                _INTCON 000FF2  
                              i2l2977 2540                                i2l2979 2544  
                              i2l2987 2562                                _RXB0D0 000F66  
                              _RXB0D1 000F67                                _RXB0D2 000F68  
                              _RXB0IE 007D18                                _RXB0IF 007D20  
                              _ES_Run 192A                                _TXB0IE 007D1A  
                              _TXB0IF 007D22                                _SSPADD 000FC8  
                              _SSPBUF 000FC9             i2_PostSPI32ControlService 2B02  
                    ??_ES_EnQueueFIFO 0071                        _Timer2PostFunc 0321  
                              _Length 00E8         SPI32_TransmitFrames@numFrames 0082  
                       ?_PausePattern 0001                                _Queue0 004A  
                              _Queue1 01B8                        _SysTickCounter 003E  
                   WelcomePattern@hue 0068                     WelcomePattern@sat 0066  
                   WelcomePattern@val 0067                   __size_of_HSV_to_RGB 0458  
            ??_RunSPI32ControlService 00BD                                ___wmul 28AA  
     InitSPI32ControlService@Priority 0080                             ??___awdiv 0064  
                           ??___awmod 0064                             ??___lbmod 0061  
                    ?_InitCanHardware 0001                           ?_GetListLoc 0001  
                           ??___lwdiv 0070           __size_of_ES_Timer_InitTimer 0080  
                              clear_0 2362                                clear_1 2374  
                              clear_2 2380                                clear_3 238C  
                    ___awdiv@quotient 0066                       ___awmod@divisor 0062  
                       ??_ShowPattern 00BA             ES_Timer_InitTimer@NewTime 0060  
           __size_of_CAN_XmitResponse 0006                       ___awmod@counter 0064  
                              _printf 28E0                           ISR@LastTime 003A  
                      i2___awdiv@sign 0006                          __pdataCOMRAM 0056  
                   __end_ofi2___awdiv 22A2                ES_InitQueue@pThisQueue 0063  
                   __end_ofi2___awmod 257A              __size_of_CAN_RCVResponse 000C  
                        __mediumconst 0000                      CAN_RX_HW@ListLoc 0045  
                         ISR@NextTime 003C                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
 __end_ofi2_PostPatternControlService 2B2E           i2_PostPatternControlService 2B18  
                           ?_CAN_Init 0001                                putch@c 0001  
            __end_of_ListeningPattern 0F76                        i2___awmod@sign 0006  
         __size_of_ES_Timer_Tick_Resp 0116                  ES_DeQueue@pThisQueue 0074  
               WelcomePattern@pattern 0001                UpdatePattern@patternID 0084  
             ES_GetMSBitSet@Val2Check 0060                       ___lbmod@divisor 0060  
              ?_DotStar_SetBrightness 0001                            __accesstop 0060  
             __end_of__initialization 2392                __end_of_Timer2PostFunc 0341  
                     ___lbmod@counter 0062       RunSPI32ControlService@ThisEvent 00BA  
                     __CFG_PBADEN$OFF 000000     __size_of_RunPatternControlService 00C8  
              __size_of_SetBrightness 002C             ?_RunPatternControlService 00BA  
               __size_of_GetNextFrame 001A                         ___rparam_used 000001  
         ??_InitPatternControlService 007D                           PatternOff@i 0062  
              ThinkingPattern@pattern 0001                        ??_PausePattern 0065  
              SpeakingPattern@pattern 0001                           _EventQueues 0358  
         __size_ofi2_ES_PostToService 006A                        __pcstackCOMRAM 0001  
                        __pidataBANK0 2B7A           __size_of_ES_Timer_StopTimer 004E  
                       ?_ES_InitQueue 0060      __size_of_InitSPI32ControlService 003A  
                      _CurrentPattern 0047               __end_of_Nybble2MSBitNum 0350  
   _PostSPI32ControlService$intlevel0 2A6E                         __end_of_putch 2BA2  
                     _TMR_ActiveFlags 00E0                ??_SPI32_TransmitFrames 0083  
                           ?i2___wmul 0007               ES_GetMSBitSet@ReturnVal 0067  
                       ?_ResetPattern 0001                  _CAN_BusErrorResponse 2BA4  
             __size_of_WelcomePattern 0106               __size_of_ProcessReceive 00AA  
                 _ThinkingPattern$742 0077                   _ThinkingPattern$743 0079  
                 __end_of_ShowPattern 29C0                            ??_CAN_Init 0060  
                       ??_StopPattern 00BA                        _TMR_TimerArray 0100  
                        _GetNextFrame 2A84                           ?_PatternOff 0060  
            ES_EnQueueFIFO@pThisQueue 0075                               ??_putch 0060  
                         ?_SetListLoc 0001              __HW_Process_Pending_Ints 2AEC  
                          __pbssBANK0 00CD                            __pbssBANK1 0100  
                         ?_SetPattern 0001              __size_of_ThinkingPattern 0222  
                 __size_of_GetListLoc 0004                  SpeakingPattern@pixel 0068  
                           ?_InitPins 0001                               ?_ES_Run 0001  
                        ??_ES_DeQueue 0070                 ListeningPattern@pixel 0068  
                 ListeningPattern@hue 007E                   ListeningPattern@sat 007C  
                 ListeningPattern@val 007D                          ??_SPI32_Init 0060  
                   ListeningPattern@x 007F                     ListeningPattern@y 0080  
            ?_PostSPI32ControlService 007D             __size_of_ES_PostToService 0076  
                      ??_ES_InitQueue 0063                               ?___wmul 0066  
     __size_of_RunSPI32ControlService 0106                               _CCP1CON 000FBD  
                             _ECANCON 000F77                      ??i2_ResetPattern 0001  
                             ?_printf 0060                         _SetBrightness 2946  
               __size_of_DotStar_Init 00AE                        ??_ResetPattern 0060  
               __end_of_UpdatePattern 0D40                 __size_of_DotStar_Show 0126  
                          ??i2___wmul 000B                 ?_CAN_BusErrorResponse 0001  
           _InitPatternControlService 25E4                DotStar_Init@brightness 0060  
                  __end_of_ES_DeQueue 14E2                i2ES_EnQueueFIFO@pBlock 000D  
               ES_Timer_StopTimer@Num 0064                          ??_HSV_to_RGB 0075  
                             _HW_Init 2A0C                               _SSPCON1 000FC6  
                  __end_of_SPI32_Init 2B90                               _SSPSTAT 000FC7  
 _PostPatternControlService$intlevel0 2A52                     ??_CAN_RCVResponse 0026  
    SPI32_ControlService@CurrentState 00E4                            ??_InitPins 0060  
                     __size_of_ES_Run 00F4            SetBrightness@newBrightness 000A  
                 __end_of_StopPattern 299A                           _PixelFrames 01C4  
                       ?_SetupPattern 0060                __size_of_ES_Initialize 00EC  
                             _ListLoc 0048                      SpeakingPattern@x 007E  
                             __Hparam 0000                               __Lparam 0000  
  i2PostSPI32ControlService@ThisEvent 001E      PostSPI32ControlService@ThisEvent 007D  
    InitSPI32ControlService@ThisEvent 007D                               _TestHue 0040  
           i2ES_EnQueueFIFO@Event2Add 000F                          _DotStar_Init 1EF4  
                        _DotStar_Show 14E2                    __end_of_HSV_to_RGB 0816  
                             ___awdiv 1D82            ?_PostPatternControlService 007D  
                             ___awmod 20F0                               ___lbmod 2776  
                     __size_of___wmul 0036                               ___lwdiv 241C  
  __size_ofi2_PostSPI32ControlService 0016                          __psmallconst 0300  
                 __size_of_PatternOff 0040                     IdlePattern@rising 00F1  
            __size_of_SpeakingPattern 0222                 ES_Timer_InitTimer@Num 0064  
                 __size_of_SetListLoc 0026            i2ES_PostToService@TheEvent 0018  
                             __pcinit 2322                      _CAN_XmitResponse 2B90  
                             __ramtop 0300                   __size_of_SetPattern 000C  
                      ?_SetBrightness 0001                           _ShowPattern 299A  
                             __ptext0 2192                               __ptext1 28E0  
                             __ptext2 2BA0                               __ptext3 192A  
                             __ptext4 2AEC                               __ptext5 1608  
                             __ptext6 204C                               __ptext7 1CBA  
                             __ptext8 171E                               __ptext9 263E  
            i2ES_EnQueueFIFO@SaveCrit 0015                       __size_of_printf 0034  
                        __size_of_ISR 1CB2                           HSV_to_RGB@b 0097  
                         HSV_to_RGB@g 0095                           HSV_to_RGB@h 008D  
                         HSV_to_RGB@p 00A1                           HSV_to_RGB@q 0099  
                         HSV_to_RGB@r 0093                           HSV_to_RGB@s 009F  
                         HSV_to_RGB@t 009B                           HSV_to_RGB@v 00A3  
                        _FramePointer 00DC               __size_of__HW_Timer_Init 001E  
                    ___awmod@dividend 0060                    _ES_CheckUserEvents 272C  
                        ?_IdlePattern 0001                       ES_Run@ThisEvent 00ED  
                __end_of_PausePattern 2B8A                _RunSPI32ControlService 171E  
                      __pintcode_body 1BEC                  end_of_initialization 2392  
                 ?_ES_CheckUserEvents 0001                          _CycleCounter 00D1  
           __size_ofi2_ES_EnQueueFIFO 00B4                         __Lmediumconst 0000  
                             int_func 1BEC                   i2___wmul@multiplier 0007  
     __end_of_PostSPI32ControlService 2A84          ES_PostToService@WhichService 007C  
                      ??_SetupPattern 0063                __size_of_ES_Timer_Init 000E  
                   ??_ThinkingPattern 006A                               printf@c 0064  
                             printf@f 0060               _InitSPI32ControlService 2836  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                          ??_GetListLoc 0060  
   __end_of_PostPatternControlService 2A68                  ??_ES_CheckUserEvents 0060  
            __size_of_SPI32_SendFrame 0052                ??_CAN_BusErrorResponse 0001  
           i2SPI32_SendFrame@newFrame 0001                        _WelcomePattern 1824  
                       _ES_Initialize 1A1E                        _ProcessReceive 1FA2  
    __end_of_RunPatternControlService 1D82                      ___lbmod@dividend 0061  
i2PostPatternControlService@ThisEvent 001E     RunPatternControlService@ThisEvent 00BA  
  PostPatternControlService@ThisEvent 007D    InitPatternControlService@ThisEvent 007D  
                           _TRISBbits 000F93                  __end_of_ES_EventList 0360  
                         _StopPattern 2972                    UpdatePattern@i_704 0086  
                  UpdatePattern@i_705 0087                    UpdatePattern@i_706 0088  
                  UpdatePattern@i_708 0089               ??_DotStar_SetBrightness 0001  
                __end_of_ES_InitQueue 2836                     ?_ListeningPattern 0068  
                           i2___awdiv 221E                             i2___awmod 250A  
                      ES_Initialize@i 0083                     __size_of_CAN_Init 000A  
                  ??_ListeningPattern 006A                           ___lbmod@rem 0063  
                  __end_of_GetListLoc 2B9A              __size_of_Check4Keystroke 0004  
                      __end_of_ES_Run 1A1E                    i2___awdiv@dividend 0001  
                __end_of_ResetPattern 2AB8                    __end_of_DistList00 0364  
__size_ofi2_PostPatternControlService 0016               ThinkingPattern@pixelHSV 0075  
             SpeakingPattern@pixelHSV 0075                      _ES_PostToService 2494  
          __end_of_ES_Timer_InitTimer 2322                  __end_of_ServDescList 0358  
                     ??_SetBrightness 0009                        __end_of___wmul 28E0  
                       __pidataCOMRAM 2B9E                          SetListLoc@LL 0009  
                   i2_SPI32_SendFrame 26DE                __end_of_WelcomePattern 192A  
                           _FrameByte 00F3                __end_of_ProcessReceive 204C  
               SetupPattern@numPixels 0062                        ?_ES_Initialize 0081  
          ??__HW_Process_Pending_Ints 0084                    ?i2_SPI32_SendFrame 0001  
                       _ES_Timer_Init 2B3C                      i2___wmul@product 000B  
                      __end_of_printf 2914              __size_of_InitCanHardware 007C  
          __end_of_ES_Timer_Tick_Resp 171E                   start_initialization 2322  
                   ??_SpeakingPattern 006A                    i2___awdiv@quotient 0007  
                         __end_of_ISR 1CBA                     __size_ofi2___wmul 0026  
                        _CurrentFrame 00CD                          _CurrentState 00E6  
                        ??_PatternOff 0062                   ??i2_SPI32_SendFrame 0005  
                          ?i2___awdiv 0001                            ?i2___awmod 0001  
                        ??_SetListLoc 0009                          ??_SetPattern 0001  
                  SpeakingPattern@hue 007D                           _CANSTATbits 000F6E  
                  SpeakingPattern@sat 007B                    SpeakingPattern@val 007C  
  __size_of_InitPatternControlService 005A                              ??_ES_Run 00C7  
                           _TickCount 00EC                             _NumFrames 00EA  
          __end_ofi2_ES_PostToService 25E4                     __size_of_InitPins 001A  
           ??_InitSPI32ControlService 007D              ListeningPattern@pixelHSV 0075  
          __end_of_ES_Timer_StopTimer 26DE                             _NumPixels 0049  
                 SetPattern@PatternID 0001               __size_of_ES_GetMSBitSet 00A4  
                            ??___wmul 006A             __end_ofi2_SPI32_SendFrame 272C  
               IdlePattern@pulseWidth 007D                           __pdataBANK0 00F1  
                  __end_of_PatternOff 27FA               __size_of_ES_EnQueueFIFO 00E2  
                            ??_printf 0062                    __end_of_SetListLoc 2A0C  
                     ?_WelcomePattern 0001             SPI32_EOTResponse@EOTevent 0021  
               __size_of_PausePattern 0008                        ?_ES_Timer_Init 0062  
                  __end_of_SetPattern 2B70                       ?_ProcessReceive 0001  
                WelcomePattern@rising 00F2                       _CAN_RCVResponse 2B58  
                     _IdlePattern$730 0075                       _IdlePattern$731 0077  
                      __HW_Timer_Init 2A2E                       _IdlePattern$728 0071  
                     _IdlePattern$729 0073                           __pbssBIGRAM 01C4  
                __end_of_SetupPattern 2B3C                           __pbssCOMRAM 0036  
    __size_of_PostSPI32ControlService 001C         __size_of_SPI32_TransmitFrames 0032  
                   ??_SPI32_SendFrame 0064                         __pcstackBANK0 0060  
                         _BRGCON1bits 000F70                           _BRGCON2bits 000F71  
                  ES_InitQueue@pBlock 0060                           _BRGCON3bits 000F72  
   RunPatternControlService@testEvent 00C0                              ?_HW_Init 0001  
                __size_of_IdlePattern 02BE              _RunPatternControlService 1CBA  
            __end_of_CAN_XmitResponse 2B96      SPI32_TransmitFrames@framePointer 0080  
                    i2_ES_EnQueueFIFO 1E40                      HSV_to_RGB@region 008F  
                       __PRIMASK_temp 0042                  ListeningPattern@head 0081  
                    ___lwdiv@dividend 006C                     ??_Check4Keystroke 0060  
                        _PausePattern 2B82                             __pintcode 0008  
                            ?___awdiv 0060                              ?___awmod 0060  
                            ?___lbmod 0060            DotStar_Show@patternPointer 00A5  
         ??_PostPatternControlService 0080                              ?___lwdiv 006C  
                     ??_ES_Initialize 0083              ES_PostToService@TheEvent 0077  
              __end_of__HW_Timer_Init 2A4C                          ?_ShowPattern 0001  
                         __smallconst 0300                 __size_of_ES_InitQueue 003C  
             ?_RunSPI32ControlService 00BA                              _CAN_Init 2B70  
                    ___lwdiv@quotient 0070                           ??i2___awdiv 0005  
                         ??i2___awmod 0005                       _ThinkingPattern 0F76  
                      __size_of_putch 0002                 __size_of_ResetPattern 001A  
                ES_Initialize@NewRate 0081                     ??_InitCanHardware 0060  
           ES_GetMSBitSet@Nybble2Test 0068                    _PatternStepCounter 00EB  
                      ___wmul@product 006A                __size_of_UpdatePattern 026C  
               DotStar_Init@numPixels 0063                              i2u255_40 2722  
                            i2u255_45 2718                              _RXB0EIDH 000F63  
                            _RXB0EIDL 000F64               SetBrightness@brightness 0009  
                            _RXB0SIDH 000F61                              _RXB0SIDL 000F62  
                            _RXF0EIDH 000F02                              _RXF0EIDL 000F03  
     DotStar_SetBrightness@brightness 0001                              _RXF0SIDH 000F00  
                        _ES_EventList 035E                              _RXF0SIDL 000F01  
          __size_ofi2_SPI32_SendFrame 004E                              _RXM0EIDH 000F1A  
                            _RXM0EIDL 000F1B               __end_of_CAN_RCVResponse 2B64  
                        _ES_InitQueue 27FA                              _RXM0SIDH 000F18  
                            _RXM0SIDL 000F19                       ??_ES_Timer_Init 0064  
      i2ES_PostToService@WhichService 001D                       ?__HW_Timer_Init 0060  
                   ___wmul@multiplier 0066        __end_of_RunSPI32ControlService 1824  
                            i2___wmul 29C0                          _ResetPattern 2A9E  
                   i2___awdiv@divisor 0003                    ES_DeQueue@SaveCrit 0072  
                ES_EnQueueFIFO@pBlock 006C                     i2___awdiv@counter 0005  
            __end_of_ES_PostToService 250A                          ?_StopPattern 0001  
             __size_ofi2_ResetPattern 001A          ?i2_PostPatternControlService 001E  
           _PostPatternControlService 2A4C                             copy_data0 2336  
                    __size_of_HW_Init 0022                        _BitNum2SetMask 0301  
                      _PatternConfigs 00F4                          _ServDescList 0350  
                  i2___awmod@dividend 0001        __size_of_DotStar_SetBrightness 000E  
       __end_of_DotStar_SetBrightness 2B58                              _InitPins 2AB8  
                        _PixelPattern 0120                   CAN_RX_HW@Brightness 0044  
                        IdlePattern@i 007F                          IdlePattern@x 007E  
                            __Hrparam 0000                        _ES_GetMSBitSet 204C  
                            __Lrparam 0000             ListeningPattern@stepCount 0069  
           __size_of_ListeningPattern 0236     RunSPI32ControlService@ReturnEvent 00C4  
                     _SpeakingPattern 1198                      __size_of___awdiv 00BE  
                 _ProcessReceive$1398 0021                      __size_of___awmod 00A2  
                    __size_of___lbmod 0044                 __size_of_SetupPattern 000E  
               i2___wmul@multiplicand 0009           __size_of_ES_CheckUserEvents 004A  
                      _ES_EnQueueFIFO 1B0A                      __size_of___lwdiv 0078  
                ThinkingPattern@pixel 0068                    IdlePattern@pattern 0001  
          ?i2_PostSPI32ControlService 001E               _PostSPI32ControlService 2A68  
             __end_of_ThinkingPattern 1198                       HSV_to_RGB@fpart 0091  
                       _UpdatePattern 0AD4         __size_of_CAN_BusErrorResponse 0002  
              IdlePattern@fade_thresh 0079                    _ES_Timer_InitTimer 22A2  
                     ___lwdiv@divisor 006E                       ___lwdiv@counter 0072  
              __end_of_BitNum2SetMask 0321                              __ptext10 2A84  
                            __ptext11 2972                              __ptext20 0816  
                            __ptext12 2A9E                              __ptext21 1D82  
                            __ptext13 27BA                              __ptext30 2B82  
                            __ptext22 2B96                              __ptext14 299A  
                            __ptext31 2690                              __ptext23 22A2  
                            __ptext15 0AD4                              __ptext40 2A0C  
                            __ptext32 13BA                              __ptext24 14E2  
                            __ptext16 1824                              __ptext41 2B2E  
                            __ptext33 2776                              __ptext25 2914  
                            __ptext17 0F76                              __ptext50 2B3C  
                            __ptext42 2494                              __ptext34 272C  
                            __ptext26 2A4C                              __ptext18 1198  
                            __ptext51 2A2E                              __ptext43 1B0A  
                            __ptext35 2B9A                              __ptext27 2A68  
                            __ptext19 0D40                              __ptext60 2B18  
                            __ptext52 27FA                              __ptext44 28AA  
                            __ptext36 1A1E                              __ptext28 03BE  
                            __ptext61 257A                              __ptext45 20F0  
                            __ptext37 25E4                              __ptext29 241C  
                            __ptext70 2B4A                              __ptext62 1E40  
                            __ptext54 2870                              __ptext46 1EF4  
                            __ptext38 2836                              __ptext71 2BA2  
                            __ptext63 29C0                              __ptext55 26DE  
                            __ptext47 2B70                              __ptext39 2B8A  
                            __ptext72 2BA4                              __ptext64 250A  
                            __ptext56 2B02                              __ptext48 2AB8  
                            __ptext73 0000                              __ptext65 2B64  
                            __ptext57 2B90                              __ptext49 23A0  
                            __ptext66 2AD2                              __ptext58 2B58  
                            __ptext67 29E6                              __ptext59 1FA2  
                            __ptext68 2946                              __ptext69 221E  
                       ?_GetNextFrame 0060     ES_Timer_Tick_Resp@NeedsProcessing 00D8  
                      UpdatePattern@i 0085                   ?_ES_Timer_InitTimer 0060  
       ??i2_PostPatternControlService 0021                       _HSV_to_RGB$2017 009D  
                       __size_of_main 008C                    _ES_Timer_Tick_Resp 1608  
              __end_of_ES_GetMSBitSet 20F0                 SetListLoc@newLocation 000B  
                        _SetupPattern 2B2E                   ?_ES_Timer_Tick_Resp 0001  
                    ??_WelcomePattern 0060                    _WelcomePattern$717 0064  
                 CAN_RX_HW@MyPriority 0046                __end_of_ES_EnQueueFIFO 1BEC  
                    ??_ProcessReceive 0021                              int$flags 0058  
                     _SPI32_SendFrame 263E                   SetupPattern@configs 0060  
                    ?_CAN_RCVResponse 0001                  ??_ES_Timer_InitTimer 0062  
      SPI32_ControlService@MyPriority 00E5                         _MaxBrightness 0057  
                   ES_DeQueue@NumLeft 0073                 __end_of_SetBrightness 2972  
                  i2_ES_PostToService 257A              __end_ofi2_ES_EnQueueFIFO 1EF4  
                  _ES_Timer_StopTimer 2690                        ?_UpdatePattern 0082  
          ??_RunPatternControlService 00BD                         DotStar_Show@i 00B9  
                         _RXB0CONbits 000F60                     i2___awmod@divisor 0003  
                   i2___awmod@counter 0005                  __size_of_ShowPattern 0026  
   __end_ofi2_PostSPI32ControlService 2B18                   ?i2_ES_PostToService 0018  
                      ??_GetNextFrame 0064                  ??_ES_Timer_Tick_Resp 0080  
                 ?_ES_Timer_StopTimer 0001                   ThinkingPattern@head 007F  
                   _CAN_ErrorResponse 2BA2                       _Check4Keystroke 2B9A  
                            intlevel2 0000                    ?_CAN_ErrorResponse 0001  
                   ?_CAN_XmitResponse 0001                            _ES_DeQueue 13BA  
   __size_of__HW_Process_Pending_Ints 0016                         _TransmitFrame 0036  
           ?__HW_Process_Pending_Ints 0001                           _TXB0CONbits 000F40  
                     ?_ES_GetMSBitSet 0060          __end_of_SPI32_TransmitFrames 2946  
             __end_of_SpeakingPattern 13BA                   _SpeakingPattern$767 0077  
                 _SpeakingPattern$768 0079                    ??_CAN_XmitResponse 0001  
                 ??_CAN_ErrorResponse 0001                  ??i2_ES_PostToService 001B  
                          _SPI32_Init 2B8A                         ?_DotStar_Init 0060  
                       ?_DotStar_Show 00A5                  ??_ES_Timer_StopTimer 0060  
 ES_Timer_Tick_Resp@NextTimer2Process 00E2                              printf@ap 0062  
                     ?_ES_EnQueueFIFO 006C             ??_PostSPI32ControlService 0080  
                    ES_DeQueue@pBlock 006C                    ThinkingPattern@hue 007D  
                  ThinkingPattern@sat 007B                    ThinkingPattern@val 007C  
        ListeningPattern@listeningLoc 0077                       _InitCanHardware 23A0  
   SPI32_TransmitFrames@transmitEvent 0083                      ?_ThinkingPattern 0068  
   InitPatternControlService@Priority 0080                         ??_IdlePattern 0068  
                   _SPI32_EOTResponse 2870                            _HSV_to_RGB 03BE  
           __end_of_CAN_ErrorResponse 2BA4                        i2_ResetPattern 2AD2  
              ES_DeQueue@pReturnEvent 006E                 ES_InitQueue@BlockSize 0062  
                  ?_SPI32_EOTResponse 0001                  __size_of_StopPattern 0028  
            ?_InitSPI32ControlService 0001                      ThinkingPattern@x 007E  
                 ??_SPI32_EOTResponse 0021               __end_of_SPI32_SendFrame 2690  
          ?_InitPatternControlService 0001    __size_of_PostPatternControlService 001C  
                      ??_DotStar_Init 0061                        ??_DotStar_Show 00A7  
