

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Jan 23 03:36:13 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94  0000                     
    95                           	psect	idataCOMRAM
    96  003CD0                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for ProcessReceive@LastButton
   100  003CD0  FF                 	db	255
   101                           
   102                           ;initializer for _MaxBrightness
   103  003CD1  1F                 	db	31
   104                           
   105                           	psect	idataBANK0
   106  003CB4                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for CenterBreathe@rising
   110  003CB4  01                 	db	1
   111                           
   112                           ;initializer for FullPulseHold@rising
   113  003CB5  01                 	db	1
   114                           
   115                           ;initializer for SingleFocusBreathe@rising
   116  003CB6  01                 	db	1
   117                           
   118                           ;initializer for _FrameByte
   119  003CB7  03                 	db	3
   120                           
   121                           ;initializer for _PatternConfigs
   122  003CB8  FF                 	db	255
   123  003CB9  1F                 	db	31
   124  003CBA  25                 	db	37
   125  003CBB  01                 	db	1
   126                           
   127                           	psect	smallconst
   128  000300                     __psmallconst:
   129                           	opt stack 0
   130  000300  00                 	db	0
   131  000301                     __end_of_ES_EventList:
   132                           	opt stack 0
   133  000301                     _BitNum2SetMask:
   134                           	opt stack 0
   135  000301  0001               	dw	1
   136  000303  0002               	dw	2
   137  000305  0004               	dw	4
   138  000307  0008               	dw	8
   139  000309  0010               	dw	16
   140  00030B  0020               	dw	32
   141  00030D  0040               	dw	64
   142  00030F  0080               	dw	128
   143  000311  0100               	dw	256
   144  000313  0200               	dw	512
   145  000315  0400               	dw	1024
   146  000317  0800               	dw	2048
   147  000319  1000               	dw	4096
   148  00031B  2000               	dw	8192
   149  00031D  4000               	dw	16384
   150  00031F  8000               	dw	32768
   151  000321                     __end_of_BitNum2SetMask:
   152                           	opt stack 0
   153  000321                     _Timer2PostFunc:
   154                           	opt stack 0
   155  000321  90                 	db	low _PostPatternControlService
   156  000322  3B                 	db	high _PostPatternControlService
   157  000323  AC                 	db	low _PostSPI32ControlService
   158  000324  3B                 	db	high _PostSPI32ControlService
   159  000325  00                 	db	0
   160  000326  00                 	db	0
   161  000327  00                 	db	0
   162  000328  00                 	db	0
   163  000329  00                 	db	0
   164  00032A  00                 	db	0
   165  00032B  00                 	db	0
   166  00032C  00                 	db	0
   167  00032D  00                 	db	0
   168  00032E  00                 	db	0
   169  00032F  00                 	db	0
   170  000330  00                 	db	0
   171  000331  00                 	db	0
   172  000332  00                 	db	0
   173  000333  00                 	db	0
   174  000334  00                 	db	0
   175  000335  00                 	db	0
   176  000336  00                 	db	0
   177  000337  00                 	db	0
   178  000338  00                 	db	0
   179  000339  00                 	db	0
   180  00033A  00                 	db	0
   181  00033B  00                 	db	0
   182  00033C  00                 	db	0
   183  00033D  00                 	db	0
   184  00033E  00                 	db	0
   185  00033F  00                 	db	0
   186  000340  00                 	db	0
   187  000341                     __end_of_Timer2PostFunc:
   188                           	opt stack 0
   189  000341                     _Nybble2MSBitNum:
   190                           	opt stack 0
   191  000341  00                 	db	0
   192  000342  01                 	db	1
   193  000343  01                 	db	1
   194  000344  02                 	db	2
   195  000345  02                 	db	2
   196  000346  02                 	db	2
   197  000347  02                 	db	2
   198  000348  03                 	db	3
   199  000349  03                 	db	3
   200  00034A  03                 	db	3
   201  00034B  03                 	db	3
   202  00034C  03                 	db	3
   203  00034D  03                 	db	3
   204  00034E  03                 	db	3
   205  00034F  03                 	db	3
   206  000350                     __end_of_Nybble2MSBitNum:
   207                           	opt stack 0
   208  000350                     _ServDescList:
   209                           	opt stack 0
   210  000350  34                 	db	low _InitPatternControlService
   211  000351  37                 	db	high _InitPatternControlService
   212  000352  B0                 	db	low _RunPatternControlService
   213  000353  2E                 	db	high _RunPatternControlService
   214  000354  98                 	db	low _InitSPI32ControlService
   215  000355  39                 	db	high _InitSPI32ControlService
   216  000356  20                 	db	low _RunSPI32ControlService
   217  000357  29                 	db	high _RunSPI32ControlService
   218  000358                     __end_of_ServDescList:
   219                           	opt stack 0
   220  000358                     _EventQueues:
   221                           	opt stack 0
   222  000358  48                 	db	low _Queue0
   223  000359  00                 	db	high _Queue0
   224  00035A  04                 	db	4
   225  00035B  B8                 	db	low _Queue1
   226  00035C  01                 	db	high _Queue1
   227  00035D  04                 	db	4
   228  00035E                     __end_of_EventQueues:
   229                           	opt stack 0
   230  0000                     _RXF0EIDH	set	3842
   231  0000                     _RXF0EIDL	set	3843
   232  0000                     _RXF0SIDH	set	3840
   233  0000                     _RXF0SIDL	set	3841
   234  0000                     _RXM0EIDH	set	3866
   235  0000                     _RXM0EIDL	set	3867
   236  0000                     _RXM0SIDH	set	3864
   237  0000                     _RXM0SIDL	set	3865
   238  0000                     _TXB0CONbits	set	3904
   239  0000                     _ADCON1	set	4033
   240  0000                     _BRGCON1bits	set	3952
   241  0000                     _BRGCON2bits	set	3953
   242  0000                     _BRGCON3bits	set	3954
   243  0000                     _CANCON	set	3951
   244  0000                     _CANSTATbits	set	3950
   245  0000                     _CCP1CON	set	4029
   246  0000                     _CCPR1H	set	4031
   247  0000                     _CCPR1L	set	4030
   248  0000                     _CIOCON	set	3955
   249  0000                     _ECANCON	set	3959
   250  0000                     _INTCON	set	4082
   251  0000                     _LATA	set	3977
   252  0000                     _LATB	set	3978
   253  0000                     _LATC	set	3979
   254  0000                     _PIE1	set	3997
   255  0000                     _PORTA	set	3968
   256  0000                     _PORTB	set	3969
   257  0000                     _PORTC	set	3970
   258  0000                     _RXB0CONbits	set	3936
   259  0000                     _RXB0D0	set	3942
   260  0000                     _RXB0D1	set	3943
   261  0000                     _RXB0D2	set	3944
   262  0000                     _RXB0EIDH	set	3939
   263  0000                     _RXB0EIDL	set	3940
   264  0000                     _RXB0SIDH	set	3937
   265  0000                     _RXB0SIDL	set	3938
   266  0000                     _SSPADD	set	4040
   267  0000                     _SSPBUF	set	4041
   268  0000                     _SSPCON1	set	4038
   269  0000                     _SSPSTAT	set	4039
   270  0000                     _T1CON	set	4045
   271  0000                     _TRISA	set	3986
   272  0000                     _TRISBbits	set	3987
   273  0000                     _TRISC	set	3988
   274  0000                     _CCP1IF	set	31986
   275  0000                     _ERRIE	set	32029
   276  0000                     _ERRIF	set	32037
   277  0000                     _GIE	set	32663
   278  0000                     _IRXIE	set	32031
   279  0000                     _IRXIF	set	32039
   280  0000                     _PEIE	set	32662
   281  0000                     _RXB0IE	set	32024
   282  0000                     _RXB0IF	set	32032
   283  0000                     _SSPIE	set	31979
   284  0000                     _SSPIF	set	31987
   285  0000                     _TXB0IE	set	32026
   286  0000                     _TXB0IF	set	32034
   287  00035E                     STR_1:
   288  00035E  46                 	db	70	;'F'
   289  00035F  61                 	db	97	;'a'
   290  000360  69                 	db	105	;'i'
   291  000361  6C                 	db	108	;'l'
   292  000362  65                 	db	101	;'e'
   293  000363  64                 	db	100	;'d'
   294  000364  20                 	db	32
   295  000365  6F                 	db	111	;'o'
   296  000366  6E                 	db	110	;'n'
   297  000367  20                 	db	32
   298  000368  61                 	db	97	;'a'
   299  000369  74                 	db	116	;'t'
   300  00036A  74                 	db	116	;'t'
   301  00036B  65                 	db	101	;'e'
   302  00036C  6D                 	db	109	;'m'
   303  00036D  70                 	db	112	;'p'
   304  00036E  74                 	db	116	;'t'
   305  00036F  20                 	db	32
   306  000370  74                 	db	116	;'t'
   307  000371  6F                 	db	111	;'o'
   308  000372  20                 	db	32
   309  000373  50                 	db	80	;'P'
   310  000374  6F                 	db	111	;'o'
   311  000375  73                 	db	115	;'s'
   312  000376  74                 	db	116	;'t'
   313  000377  0A                 	db	10
   314  000378  00                 	db	0
   315  000379                     STR_2:
   316  000379  46                 	db	70	;'F'
   317  00037A  61                 	db	97	;'a'
   318  00037B  69                 	db	105	;'i'
   319  00037C  6C                 	db	108	;'l'
   320  00037D  65                 	db	101	;'e'
   321  00037E  64                 	db	100	;'d'
   322  00037F  20                 	db	32
   323  000380  6F                 	db	111	;'o'
   324  000381  6E                 	db	110	;'n'
   325  000382  20                 	db	32
   326  000383  4E                 	db	78	;'N'
   327  000384  55                 	db	85	;'U'
   328  000385  4C                 	db	76	;'L'
   329  000386  4C                 	db	76	;'L'
   330  000387  20                 	db	32
   331  000388  70                 	db	112	;'p'
   332  000389  6F                 	db	111	;'o'
   333  00038A  69                 	db	105	;'i'
   334  00038B  6E                 	db	110	;'n'
   335  00038C  74                 	db	116	;'t'
   336  00038D  65                 	db	101	;'e'
   337  00038E  72                 	db	114	;'r'
   338  00038F  0A                 	db	10
   339  000390  00                 	db	0
   340  000391                     STR_3:
   341  000391  46                 	db	70	;'F'
   342  000392  61                 	db	97	;'a'
   343  000393  69                 	db	105	;'i'
   344  000394  6C                 	db	108	;'l'
   345  000395  65                 	db	101	;'e'
   346  000396  64                 	db	100	;'d'
   347  000397  20                 	db	32
   348  000398  49                 	db	73	;'I'
   349  000399  6E                 	db	110	;'n'
   350  00039A  69                 	db	105	;'i'
   351  00039B  74                 	db	116	;'t'
   352  00039C  69                 	db	105	;'i'
   353  00039D  61                 	db	97	;'a'
   354  00039E  6C                 	db	108	;'l'
   355  00039F  69                 	db	105	;'i'
   356  0003A0  7A                 	db	122	;'z'
   357  0003A1  61                 	db	97	;'a'
   358  0003A2  74                 	db	116	;'t'
   359  0003A3  69                 	db	105	;'i'
   360  0003A4  6F                 	db	111	;'o'
   361  0003A5  6E                 	db	110	;'n'
   362  0003A6  0A                 	db	10
   363  0003A7  00                 	db	0
   364  0003A8                     STR_4:
   365  0003A8  4F                 	db	79	;'O'
   366  0003A9  74                 	db	116	;'t'
   367  0003AA  68                 	db	104	;'h'
   368  0003AB  65                 	db	101	;'e'
   369  0003AC  72                 	db	114	;'r'
   370  0003AD  20                 	db	32
   371  0003AE  46                 	db	70	;'F'
   372  0003AF  61                 	db	97	;'a'
   373  0003B0  69                 	db	105	;'i'
   374  0003B1  6C                 	db	108	;'l'
   375  0003B2  75                 	db	117	;'u'
   376  0003B3  72                 	db	114	;'r'
   377  0003B4  65                 	db	101	;'e'
   378  0003B5  0A                 	db	10
   379  0003B6  00                 	db	0
   380                           
   381                           ; #config settings
   382  0003B7  00                 	db	0	; dummy byte at the end
   383  0000                     
   384                           	psect	cinit
   385  003472                     __pcinit:
   386                           	opt stack 0
   387  003472                     start_initialization:
   388                           	opt stack 0
   389  003472                     __initialization:
   390                           	opt stack 0
   391                           
   392                           ; Initialize objects allocated to BANK0 (8 bytes)
   393                           ; load TBLPTR registers with __pidataBANK0
   394  003472  0EB4               	movlw	low __pidataBANK0
   395  003474  6EF6               	movwf	tblptrl,c
   396  003476  0E3C               	movlw	high __pidataBANK0
   397  003478  6EF7               	movwf	tblptrh,c
   398  00347A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   399  00347C  6EF8               	movwf	tblptru,c
   400  00347E  EE00  F0F3         	lfsr	0,__pdataBANK0
   401  003482  EE10 F008          	lfsr	1,8
   402  003486                     copy_data0:
   403  003486  0009               	tblrd		*+
   404  003488  CFF5 FFEE          	movff	tablat,postinc0
   405  00348C  50E5               	movf	postdec1,w,c
   406  00348E  50E1               	movf	fsr1l,w,c
   407  003490  E1FA               	bnz	copy_data0
   408                           
   409                           ; Initialize objects allocated to COMRAM (2 bytes)
   410                           ; load TBLPTR registers with __pidataCOMRAM
   411  003492  0ED0               	movlw	low __pidataCOMRAM
   412  003494  6EF6               	movwf	tblptrl,c
   413  003496  0E3C               	movlw	high __pidataCOMRAM
   414  003498  6EF7               	movwf	tblptrh,c
   415  00349A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   416  00349C  6EF8               	movwf	tblptru,c
   417  00349E  0009               	tblrd		*+	;fetch initializer
   418  0034A0  CFF5 F054          	movff	tablat,__pdataCOMRAM
   419  0034A4  0009               	tblrd		*+	;fetch initializer
   420  0034A6  CFF5 F055          	movff	tablat,__pdataCOMRAM+1
   421                           
   422                           ; Clear objects allocated to BIGRAM (316 bytes)
   423  0034AA  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   424  0034AE  EE11 F03C          	lfsr	1,316
   425  0034B2                     clear_0:
   426  0034B2  6AEE               	clrf	postinc0,c
   427  0034B4  50E5               	movf	postdec1,w,c
   428  0034B6  50E1               	movf	fsr1l,w,c
   429  0034B8  E1FC               	bnz	clear_0
   430  0034BA  50E2               	movf	fsr1h,w,c
   431  0034BC  E1FA               	bnz	clear_0
   432                           
   433                           ; Clear objects allocated to BANK1 (196 bytes)
   434  0034BE  EE01  F000         	lfsr	0,__pbssBANK1
   435  0034C2  0EC4               	movlw	196
   436  0034C4                     clear_1:
   437  0034C4  6AEE               	clrf	postinc0,c
   438  0034C6  06E8               	decf	wreg,f,c
   439  0034C8  E1FD               	bnz	clear_1
   440                           
   441                           ; Clear objects allocated to BANK0 (37 bytes)
   442  0034CA  EE00  F0CE         	lfsr	0,__pbssBANK0
   443  0034CE  0E25               	movlw	37
   444  0034D0                     clear_2:
   445  0034D0  6AEE               	clrf	postinc0,c
   446  0034D2  06E8               	decf	wreg,f,c
   447  0034D4  E1FD               	bnz	clear_2
   448                           
   449                           ; Clear objects allocated to COMRAM (30 bytes)
   450  0034D6  EE00  F036         	lfsr	0,__pbssCOMRAM
   451  0034DA  0E1E               	movlw	30
   452  0034DC                     clear_3:
   453  0034DC  6AEE               	clrf	postinc0,c
   454  0034DE  06E8               	decf	wreg,f,c
   455  0034E0  E1FD               	bnz	clear_3
   456  0034E2                     end_of_initialization:
   457                           	opt stack 0
   458  0034E2                     __end_of__initialization:
   459                           	opt stack 0
   460  0034E2  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   461  0034E4  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   462  0034E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   463  0034E8  6EF8               	movwf	tblptru,c
   464  0034EA  0100               	movlb	0
   465  0034EC  EF71  F019         	goto	_main	;jump to C main() function
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postdec1	equ	0xFE5
   473                           fsr1h	equ	0xFE2
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	bssCOMRAM
   477  000036                     __pbssCOMRAM:
   478                           	opt stack 0
   479  000036                     _TransmitFrame:
   480                           	opt stack 0
   481  000036                     	ds	4
   482  00003A                     ISR@LastTime:
   483                           	opt stack 0
   484  00003A                     	ds	2
   485  00003C                     ISR@NextTime:
   486                           	opt stack 0
   487  00003C                     	ds	2
   488  00003E                     _SysTickCounter:
   489                           	opt stack 0
   490  00003E                     	ds	2
   491  000040                     __PRIMASK_temp:
   492                           	opt stack 0
   493  000040                     	ds	2
   494  000042                     	ds	1
   495  000043                     	ds	1
   496  000044                     	ds	1
   497  000045                     ProcessReceive@CurrentPattern:
   498                           	opt stack 0
   499  000045                     	ds	1
   500  000046                     	ds	1
   501  000047                     	ds	1
   502  000048                     _Queue0:
   503                           	opt stack 0
   504  000048                     	ds	12
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1h	equ	0xFE2
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	dataCOMRAM
   516  000054                     __pdataCOMRAM:
   517                           	opt stack 0
   518  000054                     ProcessReceive@LastButton:
   519                           	opt stack 0
   520  000054                     	ds	1
   521  000055                     _MaxBrightness:
   522                           	opt stack 0
   523  000055                     	ds	1
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postdec1	equ	0xFE5
   531                           fsr1h	equ	0xFE2
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	bssBANK0
   535  0000CE                     __pbssBANK0:
   536                           	opt stack 0
   537  0000CE                     _CurrentFrame:
   538                           	opt stack 0
   539  0000CE                     	ds	4
   540  0000D2                     ES_Timer_Tick_Resp@NewEvent:
   541                           	opt stack 0
   542  0000D2                     	ds	3
   543  0000D5                     ES_Timer_Tick_Resp@NeedsProcessing:
   544                           	opt stack 0
   545  0000D5                     	ds	2
   546  0000D7                     _FramePointer:
   547                           	opt stack 0
   548  0000D7                     	ds	2
   549  0000D9                     _ListeningFocus:
   550                           	opt stack 0
   551  0000D9                     	ds	2
   552  0000DB                     _PatternID:
   553                           	opt stack 0
   554  0000DB                     	ds	2
   555  0000DD                     _Ready:
   556                           	opt stack 0
   557  0000DD                     	ds	2
   558  0000DF                     _TMR_ActiveFlags:
   559                           	opt stack 0
   560  0000DF                     	ds	2
   561  0000E1                     ES_Timer_Tick_Resp@NextTimer2Process:
   562                           	opt stack 0
   563  0000E1                     	ds	1
   564  0000E2                     SPI32_ControlService@CurrentState:
   565                           	opt stack 0
   566  0000E2                     	ds	1
   567  0000E3                     SPI32_ControlService@MyPriority:
   568                           	opt stack 0
   569  0000E3                     	ds	1
   570  0000E4                     _CurrentState:
   571                           	opt stack 0
   572  0000E4                     	ds	1
   573  0000E5                     _FrameIndex:
   574                           	opt stack 0
   575  0000E5                     	ds	1
   576  0000E6                     _MyPriority:
   577                           	opt stack 0
   578  0000E6                     	ds	1
   579  0000E7                     _NumFrames:
   580                           	opt stack 0
   581  0000E7                     	ds	1
   582  0000E8                     _TickCount:
   583                           	opt stack 0
   584  0000E8                     	ds	1
   585  0000E9                     _CycleCounter:
   586                           	opt stack 0
   587  0000E9                     	ds	4
   588  0000ED                     ES_Run@ThisEvent:
   589                           	opt stack 0
   590  0000ED                     	ds	3
   591  0000F0                     _Brightness:
   592                           	opt stack 0
   593  0000F0                     	ds	2
   594  0000F2                     _PatternStepCounter:
   595                           	opt stack 0
   596  0000F2                     	ds	1
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           postdec1	equ	0xFE5
   604                           fsr1h	equ	0xFE2
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	dataBANK0
   608  0000F3                     __pdataBANK0:
   609                           	opt stack 0
   610  0000F3                     CenterBreathe@rising:
   611                           	opt stack 0
   612  0000F3                     	ds	1
   613  0000F4                     FullPulseHold@rising:
   614                           	opt stack 0
   615  0000F4                     	ds	1
   616  0000F5                     SingleFocusBreathe@rising:
   617                           	opt stack 0
   618  0000F5                     	ds	1
   619  0000F6                     _FrameByte:
   620                           	opt stack 0
   621  0000F6                     	ds	1
   622  0000F7                     _PatternConfigs:
   623                           	opt stack 0
   624  0000F7                     	ds	4
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1h	equ	0xFE2
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	bssBANK1
   636  000100                     __pbssBANK1:
   637                           	opt stack 0
   638  000100                     _TMR_TimerArray:
   639                           	opt stack 0
   640  000100                     	ds	32
   641  000120                     _PixelPattern:
   642                           	opt stack 0
   643  000120                     	ds	152
   644  0001B8                     _Queue1:
   645                           	opt stack 0
   646  0001B8                     	ds	12
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1h	equ	0xFE2
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBIGRAM
   658  0001C4                     __pbssBIGRAM:
   659                           	opt stack 0
   660  0001C4                     _PixelFrames:
   661                           	opt stack 0
   662  0001C4                     	ds	316
   663                           tblptru	equ	0xFF8
   664                           tblptrh	equ	0xFF7
   665                           tblptrl	equ	0xFF6
   666                           tablat	equ	0xFF5
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           postdec1	equ	0xFE5
   670                           fsr1h	equ	0xFE2
   671                           fsr1l	equ	0xFE1
   672                           
   673                           	psect	cstackBANK0
   674  000060                     __pcstackBANK0:
   675                           	opt stack 0
   676  000060                     ??_ES_Timer_StopTimer:
   677  000060                     ?_PatternOff:
   678                           	opt stack 0
   679  000060                     ?_printf:
   680                           	opt stack 0
   681  000060                     ?___awdiv:
   682                           	opt stack 0
   683  000060                     ?___awmod:
   684                           	opt stack 0
   685  000060                     ?_GetNextFrame:
   686                           	opt stack 0
   687  000060                     ___lbmod@divisor:
   688                           	opt stack 0
   689  000060                     ES_GetMSBitSet@Val2Check:
   690                           	opt stack 0
   691  000060                     __HW_Timer_Init@Rate:
   692                           	opt stack 0
   693  000060                     ES_InitQueue@pBlock:
   694                           	opt stack 0
   695  000060                     ES_Timer_InitTimer@NewTime:
   696                           	opt stack 0
   697  000060                     DotStar_Init@brightnessPointer:
   698                           	opt stack 0
   699  000060                     FullPulseHold@ptrnPointer:
   700                           	opt stack 0
   701  000060                     SetupPattern@patternIDPointer:
   702                           	opt stack 0
   703  000060                     printf@f:
   704                           	opt stack 0
   705  000060                     ___awdiv@dividend:
   706                           	opt stack 0
   707  000060                     ___awmod@dividend:
   708                           	opt stack 0
   709  000060                     SPI32_SendFrame@newFrame:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x0
   713  000060                     	ds	1
   714  000061                     ___lbmod@dividend:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x1
   718  000061                     	ds	1
   719  000062                     ??_ES_GetMSBitSet:
   720  000062                     ??_ES_Timer_InitTimer:
   721  000062                     ES_InitQueue@BlockSize:
   722                           	opt stack 0
   723  000062                     PatternOff@i:
   724                           	opt stack 0
   725  000062                     ___lbmod@counter:
   726                           	opt stack 0
   727  000062                     ES_Timer_Init@Rate:
   728                           	opt stack 0
   729  000062                     FullPulseHold@ptrnStepCounter:
   730                           	opt stack 0
   731  000062                     SetupPattern@listeningFocusPointer:
   732                           	opt stack 0
   733  000062                     printf@ap:
   734                           	opt stack 0
   735  000062                     ___awdiv@divisor:
   736                           	opt stack 0
   737  000062                     ___awmod@divisor:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x2
   741  000062                     	ds	1
   742  000063                     ___lbmod@rem:
   743                           	opt stack 0
   744  000063                     ES_InitQueue@pThisQueue:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x3
   748  000063                     	ds	1
   749  000064                     ??_SPI32_SendFrame:
   750  000064                     ES_Timer_StopTimer@Num:
   751                           	opt stack 0
   752  000064                     ES_Timer_InitTimer@Num:
   753                           	opt stack 0
   754  000064                     printf@c:
   755                           	opt stack 0
   756  000064                     ___awdiv@counter:
   757                           	opt stack 0
   758  000064                     ___awmod@counter:
   759                           	opt stack 0
   760  000064                     FullPulseHold@cycleCounter:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x4
   764  000064                     	ds	1
   765  000065                     ___awdiv@sign:
   766                           	opt stack 0
   767  000065                     ___awmod@sign:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x5
   771  000065                     	ds	1
   772  000066                     ?___wmul:
   773                           	opt stack 0
   774  000066                     FullPulseHold@base_hue:
   775                           	opt stack 0
   776  000066                     ___wmul@multiplier:
   777                           	opt stack 0
   778  000066                     ___awdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x6
   782  000066                     	ds	1
   783  000067                     ES_GetMSBitSet@ReturnVal:
   784                           	opt stack 0
   785  000067                     FullPulseHold@base_sat:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x7
   789  000067                     	ds	1
   790  000068                     ES_GetMSBitSet@Nybble2Test:
   791                           	opt stack 0
   792  000068                     FullPulseHold@15718:
   793                           	opt stack 0
   794  000068                     CenterBreathe@ptrnPointer:
   795                           	opt stack 0
   796  000068                     SingleFadedLoop@ptrnPointer:
   797                           	opt stack 0
   798  000068                     DoubleFadedLoop@ptrnPointer:
   799                           	opt stack 0
   800  000068                     BrokenPinwheel@ptrnPointer:
   801                           	opt stack 0
   802  000068                     MirroredQuadrants@ptrnPointer:
   803                           	opt stack 0
   804  000068                     SingleFocusBreathe@ptrnPointer:
   805                           	opt stack 0
   806  000068                     ___wmul@multiplicand:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x8
   810  000068                     	ds	1
   811  000069                     ES_GetMSBitSet@LoopCntr:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x9
   815  000069                     	ds	1
   816  00006A                     ??_FullPulseHold:
   817  00006A                     CenterBreathe@ptrnStepCounter:
   818                           	opt stack 0
   819  00006A                     SingleFadedLoop@ptrnStepCounter:
   820                           	opt stack 0
   821  00006A                     DoubleFadedLoop@ptrnStepCounter:
   822                           	opt stack 0
   823  00006A                     BrokenPinwheel@ptrnStepCounter:
   824                           	opt stack 0
   825  00006A                     MirroredQuadrants@ptrnStepCounter:
   826                           	opt stack 0
   827  00006A                     SingleFocusBreathe@ptrnStepCounter:
   828                           	opt stack 0
   829  00006A                     ___wmul@product:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0xA
   833  00006A                     	ds	2
   834  00006C                     ?___lwdiv:
   835                           	opt stack 0
   836  00006C                     ES_EnQueueFIFO@pBlock:
   837                           	opt stack 0
   838  00006C                     ES_DeQueue@pBlock:
   839                           	opt stack 0
   840  00006C                     CenterBreathe@cycleCounter:
   841                           	opt stack 0
   842  00006C                     SingleFadedLoop@cycleCounter:
   843                           	opt stack 0
   844  00006C                     DoubleFadedLoop@cycleCounter:
   845                           	opt stack 0
   846  00006C                     BrokenPinwheel@cycleCounter:
   847                           	opt stack 0
   848  00006C                     MirroredQuadrants@cycleCounter:
   849                           	opt stack 0
   850  00006C                     SingleFocusBreathe@cycleCounter:
   851                           	opt stack 0
   852  00006C                     ___lwdiv@dividend:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0xC
   856  00006C                     	ds	2
   857  00006E                     CenterBreathe@base_hue:
   858                           	opt stack 0
   859  00006E                     SingleFadedLoop@base_hue:
   860                           	opt stack 0
   861  00006E                     DoubleFadedLoop@base_hue:
   862                           	opt stack 0
   863  00006E                     BrokenPinwheel@base_hue:
   864                           	opt stack 0
   865  00006E                     MirroredQuadrants@base_hue:
   866                           	opt stack 0
   867  00006E                     SingleFocusBreathe@base_hue:
   868                           	opt stack 0
   869  00006E                     ES_DeQueue@pReturnEvent:
   870                           	opt stack 0
   871  00006E                     ___lwdiv@divisor:
   872                           	opt stack 0
   873  00006E                     ES_EnQueueFIFO@Event2Add:
   874                           	opt stack 0
   875                           
   876                           ; 3 bytes @ 0xE
   877  00006E                     	ds	1
   878  00006F                     CenterBreathe@base_sat:
   879                           	opt stack 0
   880  00006F                     SingleFadedLoop@base_sat:
   881                           	opt stack 0
   882  00006F                     DoubleFadedLoop@base_sat:
   883                           	opt stack 0
   884  00006F                     BrokenPinwheel@base_sat:
   885                           	opt stack 0
   886  00006F                     MirroredQuadrants@base_sat:
   887                           	opt stack 0
   888  00006F                     SingleFocusBreathe@base_sat:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0xF
   892  00006F                     	ds	1
   893  000070                     ??_ES_DeQueue:
   894  000070                     CenterBreathe@15728:
   895                           	opt stack 0
   896  000070                     SingleFadedLoop@15741:
   897                           	opt stack 0
   898  000070                     DoubleFadedLoop@15751:
   899                           	opt stack 0
   900  000070                     BrokenPinwheel@15776:
   901                           	opt stack 0
   902  000070                     MirroredQuadrants@15794:
   903                           	opt stack 0
   904  000070                     SingleFocusBreathe@focus:
   905                           	opt stack 0
   906  000070                     ___lwdiv@quotient:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x10
   910  000070                     	ds	1
   911  000071                     ??_ES_EnQueueFIFO:
   912                           
   913                           ; 1 bytes @ 0x11
   914  000071                     	ds	1
   915  000072                     ??_CenterBreathe:
   916  000072                     ??_SingleFadedLoop:
   917  000072                     ??_DoubleFadedLoop:
   918  000072                     ??_BrokenPinwheel:
   919  000072                     ??_MirroredQuadrants:
   920  000072                     ??_SingleFocusBreathe:
   921  000072                     ES_DeQueue@SaveCrit:
   922                           	opt stack 0
   923  000072                     ___lwdiv@counter:
   924                           	opt stack 0
   925  000072                     _FullPulseHold$1218:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x12
   929  000072                     	ds	1
   930  000073                     ES_DeQueue@NumLeft:
   931                           	opt stack 0
   932  000073                     HSV_to_RGB@HSV_Value:
   933                           	opt stack 0
   934  000073                     HueTest@ptrnPointer:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x13
   938  000073                     	ds	1
   939  000074                     ES_EnQueueFIFO@SaveCrit:
   940                           	opt stack 0
   941  000074                     FullPulseHold@val:
   942                           	opt stack 0
   943  000074                     ES_DeQueue@pThisQueue:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x14
   947  000074                     	ds	1
   948  000075                     ??_HSV_to_RGB:
   949  000075                     FullPulseHold@i:
   950                           	opt stack 0
   951  000075                     ES_EnQueueFIFO@pThisQueue:
   952                           	opt stack 0
   953  000075                     HueTest@ptrnStepCounter:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x15
   957  000075                     	ds	2
   958  000077                     HueTest@cycleCounter:
   959                           	opt stack 0
   960  000077                     ES_PostToService@TheEvent:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x17
   964  000077                     	ds	2
   965  000079                     HueTest@base_hue:
   966                           	opt stack 0
   967  000079                     _DoubleFadedLoop$1262:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x19
   971  000079                     	ds	1
   972  00007A                     ??_ES_PostToService:
   973  00007A                     HueTest@base_sat:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x1A
   977  00007A                     	ds	1
   978  00007B                     HueTest@15710:
   979                           	opt stack 0
   980  00007B                     _CenterBreathe$1232:
   981                           	opt stack 0
   982  00007B                     _DoubleFadedLoop$1263:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x1B
   986  00007B                     	ds	1
   987  00007C                     ES_PostToService@WhichService:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x1C
   991  00007C                     	ds	1
   992  00007D                     ??_HueTest:
   993  00007D                     _CenterBreathe$1233:
   994                           	opt stack 0
   995  00007D                     _SingleFadedLoop$1250:
   996                           	opt stack 0
   997  00007D                     _DoubleFadedLoop$1265:
   998                           	opt stack 0
   999  00007D                     _BrokenPinwheel$1290:
  1000                           	opt stack 0
  1001  00007D                     _MirroredQuadrants$1302:
  1002                           	opt stack 0
  1003  00007D                     _SingleFocusBreathe$1332:
  1004                           	opt stack 0
  1005  00007D                     InitPatternControlService@ThisEvent:
  1006                           	opt stack 0
  1007  00007D                     PostPatternControlService@ThisEvent:
  1008                           	opt stack 0
  1009  00007D                     InitSPI32ControlService@ThisEvent:
  1010                           	opt stack 0
  1011  00007D                     PostSPI32ControlService@ThisEvent:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x1D
  1015  00007D                     	ds	2
  1016  00007F                     _CenterBreathe$1234:
  1017                           	opt stack 0
  1018  00007F                     _SingleFadedLoop$1251:
  1019                           	opt stack 0
  1020  00007F                     _DoubleFadedLoop$1266:
  1021                           	opt stack 0
  1022  00007F                     _BrokenPinwheel$1291:
  1023                           	opt stack 0
  1024  00007F                     _MirroredQuadrants$1303:
  1025                           	opt stack 0
  1026  00007F                     _SingleFocusBreathe$1333:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x1F
  1030  00007F                     	ds	1
  1031  000080                     ??_ES_Timer_Tick_Resp:
  1032  000080                     InitPatternControlService@Priority:
  1033                           	opt stack 0
  1034  000080                     InitSPI32ControlService@Priority:
  1035                           	opt stack 0
  1036  000080                     HueTest@i:
  1037                           	opt stack 0
  1038  000080                     SPI32_TransmitFrames@framePointer:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x20
  1042  000080                     	ds	1
  1043  000081                     SingleFadedLoop@val:
  1044                           	opt stack 0
  1045  000081                     DoubleFadedLoop@val:
  1046                           	opt stack 0
  1047  000081                     BrokenPinwheel@x:
  1048                           	opt stack 0
  1049  000081                     MirroredQuadrants@x:
  1050                           	opt stack 0
  1051  000081                     ES_Initialize@NewRate:
  1052                           	opt stack 0
  1053  000081                     _CenterBreathe$1235:
  1054                           	opt stack 0
  1055  000081                     _SingleFocusBreathe$1334:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x21
  1059  000081                     	ds	1
  1060  000082                     SPI32_TransmitFrames@numFrames:
  1061                           	opt stack 0
  1062  000082                     SingleFadedLoop@x:
  1063                           	opt stack 0
  1064  000082                     DoubleFadedLoop@x:
  1065                           	opt stack 0
  1066  000082                     BrokenPinwheel@fade:
  1067                           	opt stack 0
  1068  000082                     MirroredQuadrants@val:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x22
  1072  000082                     	ds	1
  1073  000083                     ES_Initialize@i:
  1074                           	opt stack 0
  1075  000083                     SingleFadedLoop@i:
  1076                           	opt stack 0
  1077  000083                     DoubleFadedLoop@i:
  1078                           	opt stack 0
  1079  000083                     BrokenPinwheel@val:
  1080                           	opt stack 0
  1081  000083                     MirroredQuadrants@i:
  1082                           	opt stack 0
  1083  000083                     _CenterBreathe$1236:
  1084                           	opt stack 0
  1085  000083                     _SingleFocusBreathe$1335:
  1086                           	opt stack 0
  1087  000083                     SPI32_TransmitFrames@transmitEvent:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x23
  1091  000083                     	ds	1
  1092  000084                     DoubleFadedLoop@i_1264:
  1093                           	opt stack 0
  1094  000084                     BrokenPinwheel@i:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x24
  1098  000084                     	ds	1
  1099  000085                     SingleFocusBreathe@fade_thresh:
  1100                           	opt stack 0
  1101  000085                     _CenterBreathe$1237:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x25
  1105  000085                     	ds	1
  1106  000086                     SingleFocusBreathe@val:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x26
  1110  000086                     	ds	1
  1111  000087                     SingleFocusBreathe@pulseWidth:
  1112                           	opt stack 0
  1113  000087                     _CenterBreathe$1238:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x27
  1117  000087                     	ds	1
  1118  000088                     SingleFocusBreathe@x:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x28
  1122  000088                     	ds	1
  1123  000089                     SingleFocusBreathe@head:
  1124                           	opt stack 0
  1125  000089                     _CenterBreathe$1239:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x29
  1129  000089                     	ds	1
  1130  00008A                     SingleFocusBreathe@i:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x2A
  1134  00008A                     	ds	1
  1135  00008B                     CenterBreathe@fade_thresh:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x2B
  1139  00008B                     	ds	1
  1140  00008C                     CenterBreathe@val:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x2C
  1144  00008C                     	ds	1
  1145  00008D                     CenterBreathe@pulseWidth:
  1146                           	opt stack 0
  1147  00008D                     HSV_to_RGB@h:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x2D
  1151  00008D                     	ds	1
  1152  00008E                     CenterBreathe@x:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x2E
  1156  00008E                     	ds	1
  1157  00008F                     CenterBreathe@i:
  1158                           	opt stack 0
  1159  00008F                     HSV_to_RGB@region:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x2F
  1163  00008F                     	ds	1
  1164  000090                     ?_UpdatePattern:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x30
  1168  000090                     	ds	1
  1169  000091                     HSV_to_RGB@fpart:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x31
  1173  000091                     	ds	1
  1174  000092                     _UpdatePattern$1991:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x32
  1178  000092                     	ds	1
  1179  000093                     _UpdatePattern$1992:
  1180                           	opt stack 0
  1181  000093                     HSV_to_RGB@r:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x33
  1185  000093                     	ds	1
  1186  000094                     UpdatePattern@i:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x34
  1190  000094                     	ds	1
  1191  000095                     UpdatePattern@i_1366:
  1192                           	opt stack 0
  1193  000095                     HSV_to_RGB@g:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x35
  1197  000095                     	ds	2
  1198  000097                     HSV_to_RGB@b:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x37
  1202  000097                     	ds	2
  1203  000099                     HSV_to_RGB@q:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x39
  1207  000099                     	ds	2
  1208  00009B                     HSV_to_RGB@t:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x3B
  1212  00009B                     	ds	2
  1213  00009D                     _HSV_to_RGB$1990:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x3D
  1217  00009D                     	ds	2
  1218  00009F                     HSV_to_RGB@s:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x3F
  1222  00009F                     	ds	2
  1223  0000A1                     HSV_to_RGB@p:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x41
  1227  0000A1                     	ds	2
  1228  0000A3                     HSV_to_RGB@v:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x43
  1232  0000A3                     	ds	2
  1233  0000A5                     DotStar_Show@patternPointer:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x45
  1237  0000A5                     	ds	2
  1238  0000A7                     ??_DotStar_Show:
  1239                           
  1240                           ; 1 bytes @ 0x47
  1241  0000A7                     	ds	19
  1242  0000BA                     DotStar_Show@i:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x5A
  1246  0000BA                     	ds	1
  1247  0000BB                     ?_RunPatternControlService:
  1248                           	opt stack 0
  1249  0000BB                     ?_RunSPI32ControlService:
  1250                           	opt stack 0
  1251  0000BB                     RunPatternControlService@ThisEvent:
  1252                           	opt stack 0
  1253  0000BB                     RunSPI32ControlService@ThisEvent:
  1254                           	opt stack 0
  1255                           
  1256                           ; 3 bytes @ 0x5B
  1257  0000BB                     	ds	3
  1258  0000BE                     ??_RunSPI32ControlService:
  1259  0000BE                     RunPatternControlService@ReturnEvent:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x5E
  1263  0000BE                     	ds	3
  1264  0000C1                     RunPatternControlService@testEvent:
  1265                           	opt stack 0
  1266                           
  1267                           ; 3 bytes @ 0x61
  1268  0000C1                     	ds	4
  1269  0000C5                     RunSPI32ControlService@ReturnEvent:
  1270                           	opt stack 0
  1271                           
  1272                           ; 3 bytes @ 0x65
  1273  0000C5                     	ds	3
  1274  0000C8                     ??_ES_Run:
  1275                           
  1276                           ; 1 bytes @ 0x68
  1277  0000C8                     	ds	4
  1278  0000CC                     ES_Run@HighestPrior:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x6C
  1282  0000CC                     	ds	1
  1283  0000CD                     main@ErrorType:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x6D
  1287  0000CD                     	ds	1
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postdec1	equ	0xFE5
  1295                           fsr1h	equ	0xFE2
  1296                           fsr1l	equ	0xFE1
  1297                           
  1298                           	psect	cstackCOMRAM
  1299  000001                     __pcstackCOMRAM:
  1300                           	opt stack 0
  1301  000001                     ?i2___awdiv:
  1302                           	opt stack 0
  1303  000001                     ?i2___awmod:
  1304                           	opt stack 0
  1305  000001                     SetPattern@PatternID:
  1306                           	opt stack 0
  1307  000001                     i2___awdiv@dividend:
  1308                           	opt stack 0
  1309  000001                     i2___awmod@dividend:
  1310                           	opt stack 0
  1311  000001                     i2SPI32_SendFrame@newFrame:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0x0
  1315  000001                     	ds	2
  1316  000003                     i2___awdiv@divisor:
  1317                           	opt stack 0
  1318  000003                     i2___awmod@divisor:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x2
  1322  000003                     	ds	2
  1323  000005                     ??i2_SPI32_SendFrame:
  1324  000005                     i2___awdiv@counter:
  1325                           	opt stack 0
  1326  000005                     i2___awmod@counter:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x4
  1330  000005                     	ds	1
  1331  000006                     i2___awdiv@sign:
  1332                           	opt stack 0
  1333  000006                     i2___awmod@sign:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x5
  1337  000006                     	ds	1
  1338  000007                     ?i2___wmul:
  1339                           	opt stack 0
  1340  000007                     i2___awdiv@quotient:
  1341                           	opt stack 0
  1342  000007                     i2___wmul@multiplier:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x6
  1346  000007                     	ds	2
  1347  000009                     SetListenFocus@listFocus:
  1348                           	opt stack 0
  1349  000009                     SetBrightness@newBrightness:
  1350                           	opt stack 0
  1351  000009                     i2___wmul@multiplicand:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x8
  1355  000009                     	ds	2
  1356  00000B                     SetBrightness@brightness:
  1357                           	opt stack 0
  1358  00000B                     i2___wmul@product:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0xA
  1362  00000B                     	ds	2
  1363  00000D                     i2ES_EnQueueFIFO@pBlock:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0xC
  1367  00000D                     	ds	2
  1368  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1369                           	opt stack 0
  1370                           
  1371                           ; 3 bytes @ 0xE
  1372  00000F                     	ds	3
  1373  000012                     ??i2_ES_EnQueueFIFO:
  1374                           
  1375                           ; 1 bytes @ 0x11
  1376  000012                     	ds	3
  1377  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x14
  1381  000015                     	ds	1
  1382  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x15
  1386  000016                     	ds	2
  1387  000018                     i2ES_PostToService@TheEvent:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0x17
  1391  000018                     	ds	3
  1392  00001B                     ??i2_ES_PostToService:
  1393                           
  1394                           ; 1 bytes @ 0x1A
  1395  00001B                     	ds	2
  1396  00001D                     i2ES_PostToService@WhichService:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x1C
  1400  00001D                     	ds	1
  1401  00001E                     i2PostPatternControlService@ThisEvent:
  1402                           	opt stack 0
  1403  00001E                     i2PostSPI32ControlService@ThisEvent:
  1404                           	opt stack 0
  1405                           
  1406                           ; 3 bytes @ 0x1D
  1407  00001E                     	ds	3
  1408  000021                     _ProcessReceive$1196:
  1409                           	opt stack 0
  1410  000021                     SPI32_EOTResponse@EOTevent:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x20
  1414  000021                     	ds	2
  1415  000023                     ProcessReceive@Event2Post:
  1416                           	opt stack 0
  1417                           
  1418                           ; 3 bytes @ 0x22
  1419  000023                     	ds	3
  1420  000026                     ??_ISR:
  1421                           
  1422                           ; 1 bytes @ 0x25
  1423  000026                     	ds	16
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           postdec1	equ	0xFE5
  1431                           fsr1h	equ	0xFE2
  1432                           fsr1l	equ	0xFE1
  1433                           
  1434 ;;
  1435 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1436 ;;
  1437 ;; *************** function _main *****************
  1438 ;; Defined at:
  1439 ;;		line 25 in file "main.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  ErrorType       1  109[BANK0 ] enum E15646
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  2  475[None  ] int 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1453 ;;      Params:         0       0       0       0
  1454 ;;      Locals:         0       1       0       0
  1455 ;;      Temps:          0       0       0       0
  1456 ;;      Totals:         0       1       0       0
  1457 ;;Total ram usage:        1 bytes
  1458 ;; Hardware stack levels required when called:   16
  1459 ;; This function calls:
  1460 ;;		_ES_Initialize
  1461 ;;		_ES_Run
  1462 ;;		_printf
  1463 ;; This function is called by:
  1464 ;;		Startup code after reset
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text0
  1469  0032E2                     __ptext0:
  1470                           	opt stack 0
  1471  0032E2                     _main:
  1472                           	opt stack 15
  1473                           
  1474                           ;main.c: 27: ADCON1 = 0x0F;
  1475                           
  1476                           ;incstack = 0
  1477  0032E2  0E0F               	movlw	15
  1478  0032E4  6EC1               	movwf	4033,c	;volatile
  1479                           
  1480                           ;main.c: 34: ES_Return_t ErrorType;
  1481                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1482  0032E6  0E9C               	movlw	156
  1483  0032E8  0100               	movlb	0	; () banked
  1484  0032EA  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1485  0032EC  0E3F               	movlw	63
  1486  0032EE  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1487  0032F0  EC0A  F016         	call	_ES_Initialize	;wreg free
  1488  0032F4  0100               	movlb	0	; () banked
  1489  0032F6  6FCD               	movwf	main@ErrorType& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 51: if ( ErrorType == Success ) {
  1493  0032F8  0100               	movlb	0	; () banked
  1494  0032FA  51CD               	movf	main@ErrorType& (0+255),w,b
  1495  0032FC  0100               	movlb	0	; () banked
  1496  0032FE  A4D8               	btfss	status,2,c
  1497  003300  D029               	goto	l4393
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;main.c: 53: ErrorType = ES_Run();
  1501  003302  EC92  F015         	call	_ES_Run	;wreg free
  1502  003306  0100               	movlb	0	; () banked
  1503  003308  6FCD               	movwf	main@ErrorType& (0+255),b
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 55: }
  1507                           ;main.c: 57: switch (ErrorType){
  1508  00330A  D024               	goto	l4393
  1509  00330C                     l4383:
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1513  00330C  0E5E               	movlw	low STR_1
  1514  00330E  0100               	movlb	0	; () banked
  1515  003310  6F60               	movwf	printf@f& (0+255),b
  1516  003312  0E03               	movlw	high STR_1
  1517  003314  0100               	movlb	0	; () banked
  1518  003316  6F61               	movwf	(printf@f+1)& (0+255),b
  1519  003318  EC21  F01D         	call	_printf	;wreg free
  1520                           
  1521                           ;main.c: 60: break;
  1522  00331C  D027               	goto	l483
  1523  00331E                     l4385:
  1524                           
  1525                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1526  00331E  0E79               	movlw	low STR_2
  1527  003320  0100               	movlb	0	; () banked
  1528  003322  6F60               	movwf	printf@f& (0+255),b
  1529  003324  0E03               	movlw	high STR_2
  1530  003326  0100               	movlb	0	; () banked
  1531  003328  6F61               	movwf	(printf@f+1)& (0+255),b
  1532  00332A  EC21  F01D         	call	_printf	;wreg free
  1533                           
  1534                           ;main.c: 63: break;
  1535  00332E  D01E               	goto	l483
  1536  003330                     l4387:
  1537                           
  1538                           ;main.c: 65: printf("Failed Initialization\n");
  1539  003330  0E91               	movlw	low STR_3
  1540  003332  0100               	movlb	0	; () banked
  1541  003334  6F60               	movwf	printf@f& (0+255),b
  1542  003336  0E03               	movlw	high STR_3
  1543  003338  0100               	movlb	0	; () banked
  1544  00333A  6F61               	movwf	(printf@f+1)& (0+255),b
  1545  00333C  EC21  F01D         	call	_printf	;wreg free
  1546                           
  1547                           ;main.c: 66: break;
  1548  003340  D015               	goto	l483
  1549  003342                     l4389:
  1550                           
  1551                           ;main.c: 68: printf("Other Failure\n");
  1552  003342  0EA8               	movlw	low STR_4
  1553  003344  0100               	movlb	0	; () banked
  1554  003346  6F60               	movwf	printf@f& (0+255),b
  1555  003348  0E03               	movlw	high STR_4
  1556  00334A  0100               	movlb	0	; () banked
  1557  00334C  6F61               	movwf	(printf@f+1)& (0+255),b
  1558  00334E  EC21  F01D         	call	_printf	;wreg free
  1559                           
  1560                           ;main.c: 70: }
  1561                           
  1562                           ;main.c: 69: break;
  1563  003352  D00C               	goto	l483
  1564  003354                     l4393:
  1565  003354  0100               	movlb	0	; () banked
  1566  003356  51CD               	movf	main@ErrorType& (0+255),w,b
  1567                           
  1568                           ; Switch size 1, requested type "space"
  1569                           ; Number of cases is 3, Range of values is 1 to 5
  1570                           ; switch strategies available:
  1571                           ; Name         Instructions Cycles
  1572                           ; simple_byte           10     6 (average)
  1573                           ;	Chosen strategy is simple_byte
  1574  003358  0A01               	xorlw	1	; case 1
  1575  00335A  B4D8               	btfsc	status,2,c
  1576  00335C  D7D7               	goto	l4383
  1577  00335E  0A02               	xorlw	2	; case 3
  1578  003360  B4D8               	btfsc	status,2,c
  1579  003362  D7DD               	goto	l4385
  1580  003364  0A06               	xorlw	6	; case 5
  1581  003366  B4D8               	btfsc	status,2,c
  1582  003368  D7E3               	goto	l4387
  1583  00336A  D7EB               	goto	l4389
  1584  00336C                     l483:
  1585                           
  1586                           ;main.c: 72: ;
  1587  00336C  D7FF               	goto	l483
  1588  00336E                     __end_of_main:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1h	equ	0xFE2
  1598                           fsr1l	equ	0xFE1
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _printf *****************
  1602 ;; Defined at:
  1603 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1606 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  tmpval          4    0        struct .
  1609 ;;  cp              3    0        PTR const unsigned char 
  1610 ;;  ap              2    2[BANK0 ] PTR void [1]
  1611 ;;		 -> ?_printf(2), 
  1612 ;;  len             2    0        unsigned int 
  1613 ;;  val             2    0        unsigned int 
  1614 ;;  c               1    4[BANK0 ] char 
  1615 ;;  flag            1    0        unsigned char 
  1616 ;;  prec            1    0        char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  2    0[BANK0 ] int 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       2       0       0
  1627 ;;      Locals:         0       3       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         0       5       0       0
  1630 ;;Total ram usage:        5 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    8
  1633 ;; This function calls:
  1634 ;;		_putch
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text1
  1641  003A42                     __ptext1:
  1642                           	opt stack 0
  1643  003A42                     _printf:
  1644                           	opt stack 22
  1645                           
  1646                           ;doprnt.c: 466: va_list ap;
  1647                           ;doprnt.c: 499: signed char c;
  1648                           ;doprnt.c: 506: signed char prec;
  1649                           ;doprnt.c: 508: unsigned char flag;
  1650                           ;doprnt.c: 523: union {
  1651                           ;doprnt.c: 524: unsigned long vd;
  1652                           ;doprnt.c: 525: double integ;
  1653                           ;doprnt.c: 526: } tmpval;
  1654                           ;doprnt.c: 528: unsigned int val;
  1655                           ;doprnt.c: 529: unsigned len;
  1656                           ;doprnt.c: 530: const char * cp;
  1657                           ;doprnt.c: 533: *ap = __va_start();
  1658                           
  1659                           ;incstack = 0
  1660  003A42  0E62               	movlw	low (?_printf+2)
  1661  003A44  0100               	movlb	0	; () banked
  1662  003A46  6F62               	movwf	printf@ap& (0+255),b
  1663  003A48  0E00               	movlw	high (?_printf+2)
  1664  003A4A  0100               	movlb	0	; () banked
  1665  003A4C  6F63               	movwf	(printf@ap+1)& (0+255),b
  1666                           
  1667                           ;doprnt.c: 536: while(c = *f++) {
  1668  003A4E  D004               	goto	l4237
  1669  003A50                     l4235:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 540: {
  1673                           ;doprnt.c: 541: (putch(c) );
  1674  003A50  0100               	movlb	0	; () banked
  1675  003A52  5164               	movf	printf@c& (0+255),w,b
  1676  003A54  EC69  F01E         	call	_putch
  1677  003A58                     l4237:
  1678  003A58  C060  FFF6         	movff	printf@f,tblptrl
  1679  003A5C  C061  FFF7         	movff	printf@f+1,tblptrh
  1680  003A60  0100               	movlb	0	; () banked
  1681  003A62  4B60               	infsnz	printf@f& (0+255),f,b
  1682  003A64  2B61               	incf	(printf@f+1)& (0+255),f,b
  1683  003A66                     	if	0	;tblptru may be non-zero
  1684  003A66                     	endif
  1685  003A66                     	if	0	;tblptru may be non-zero
  1686  003A66                     	endif
  1687  003A66  0008               	tblrd		*
  1688  003A68  CFF5 F064          	movff	tablat,printf@c
  1689  003A6C  0100               	movlb	0	; () banked
  1690  003A6E  5164               	movf	printf@c& (0+255),w,b
  1691  003A70  B4D8               	btfsc	status,2,c
  1692  003A72  0012               	return	
  1693  003A74  D7ED               	goto	l4235
  1694  003A76                     __end_of_printf:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1h	equ	0xFE2
  1704                           fsr1l	equ	0xFE1
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _putch *****************
  1708 ;; Defined at:
  1709 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  c               1    wreg     unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  c               1    0[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1723 ;;      Params:         0       0       0       0
  1724 ;;      Locals:         0       0       0       0
  1725 ;;      Temps:          0       0       0       0
  1726 ;;      Totals:         0       0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    7
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_printf
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text2
  1738  003CD2                     __ptext2:
  1739                           	opt stack 0
  1740  003CD2                     _putch:
  1741                           	opt stack 22
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;incstack = 0
  1745  003CD2  0012               	return		;funcret
  1746  003CD4                     __end_of_putch:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           postdec1	equ	0xFE5
  1755                           fsr1h	equ	0xFE2
  1756                           fsr1l	equ	0xFE1
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _ES_Run *****************
  1760 ;; Defined at:
  1761 ;;		line 277 in file "ES_Framework.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  HighestPrior    1  108[BANK0 ] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      enum E15494
  1768 ;; Registers used:
  1769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1775 ;;      Params:         0       0       0       0
  1776 ;;      Locals:         0       1       0       0
  1777 ;;      Temps:          0       4       0       0
  1778 ;;      Totals:         0       5       0       0
  1779 ;;Total ram usage:        5 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; Hardware stack levels required when called:   15
  1782 ;; This function calls:
  1783 ;;		_ES_DeQueue
  1784 ;;		_ES_GetMSBitSet
  1785 ;;		_RunPatternControlService
  1786 ;;		_RunSPI32ControlService
  1787 ;;		__HW_Process_Pending_Ints
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text3
  1794  002B24                     __ptext3:
  1795                           	opt stack 0
  1796  002B24                     _ES_Run:
  1797                           	opt stack 15
  1798                           
  1799                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1800                           
  1801                           ;incstack = 0
  1802                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1803                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1804                           ;ES_Framework.c: 282: while(1){
  1805  002B24  D06B               	goto	l4209
  1806  002B26                     l4197:
  1807                           
  1808                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1809  002B26  C0DD  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1810  002B2A  C0DE  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1811  002B2E  ECCE  F018         	call	_ES_GetMSBitSet	;wreg free
  1812  002B32  0100               	movlb	0	; () banked
  1813  002B34  6FCC               	movwf	ES_Run@HighestPrior& (0+255),b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1817  002B36  0100               	movlb	0	; () banked
  1818  002B38  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1819  002B3A  0D03               	mullw	3
  1820  002B3C  0E58               	movlw	low _EventQueues
  1821  002B3E  24F3               	addwf	prodl,w,c
  1822  002B40  6EF6               	movwf	tblptrl,c
  1823  002B42  0E03               	movlw	high _EventQueues
  1824  002B44  20F4               	addwfc	prodh,w,c
  1825  002B46  6EF7               	movwf	tblptrh,c
  1826  002B48                     	if	0	;There are less than 3 active tblptr bytes
  1827  002B48                     	endif
  1828  002B48  0009               	tblrd		*+
  1829  002B4A  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1830  002B4E  000A               	tblrd		*-
  1831  002B50  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1832  002B54  0EED               	movlw	low ES_Run@ThisEvent
  1833  002B56  0100               	movlb	0	; () banked
  1834  002B58  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1835  002B5A  0E00               	movlw	high ES_Run@ThisEvent
  1836  002B5C  0100               	movlb	0	; () banked
  1837  002B5E  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1838  002B60  EC71  F013         	call	_ES_DeQueue	;wreg free
  1839  002B64  0900               	iorlw	0
  1840  002B66  A4D8               	btfss	status,2,c
  1841  002B68  D01F               	goto	l4203
  1842                           
  1843                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1844  002B6A  0100               	movlb	0	; () banked
  1845  002B6C  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1846  002B6E  0D02               	mullw	2
  1847  002B70  0E01               	movlw	low _BitNum2SetMask
  1848  002B72  24F3               	addwf	prodl,w,c
  1849  002B74  6EF6               	movwf	tblptrl,c
  1850  002B76  0E03               	movlw	high _BitNum2SetMask
  1851  002B78  20F4               	addwfc	prodh,w,c
  1852  002B7A  6EF7               	movwf	tblptrh,c
  1853  002B7C                     	if	0	;There are less than 3 active tblptr bytes
  1854  002B7C                     	endif
  1855  002B7C  0009               	tblrd		*+
  1856  002B7E  CFF5 F0C8          	movff	tablat,??_ES_Run
  1857  002B82  0009               	tblrd		*+
  1858  002B84  CFF5 F0C9          	movff	tablat,??_ES_Run+1
  1859  002B88  0100               	movlb	0	; () banked
  1860  002B8A  1DC8               	comf	??_ES_Run& (0+255),w,b
  1861  002B8C  0100               	movlb	0	; () banked
  1862  002B8E  6FCA               	movwf	(??_ES_Run+2)& (0+255),b
  1863  002B90  0100               	movlb	0	; () banked
  1864  002B92  1DC9               	comf	(??_ES_Run+1)& (0+255),w,b
  1865  002B94  0100               	movlb	0	; () banked
  1866  002B96  6FCB               	movwf	(??_ES_Run+3)& (0+255),b
  1867  002B98  0100               	movlb	0	; () banked
  1868  002B9A  51CA               	movf	(??_ES_Run+2)& (0+255),w,b
  1869  002B9C  0100               	movlb	0	; () banked
  1870  002B9E  17DD               	andwf	_Ready& (0+255),f,b
  1871  002BA0  0100               	movlb	0	; () banked
  1872  002BA2  51CB               	movf	(??_ES_Run+3)& (0+255),w,b
  1873  002BA4  0100               	movlb	0	; () banked
  1874  002BA6  17DE               	andwf	(_Ready+1)& (0+255),f,b
  1875  002BA8                     l4203:
  1876                           
  1877                           ;ES_Framework.c: 291: }
  1878                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1879  002BA8  C0ED  F0BB         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1880  002BAC  C0EE  F0BC         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1881  002BB0  C0EF  F0BD         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1882  002BB4  0100               	movlb	0	; () banked
  1883  002BB6  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1884  002BB8  0D04               	mullw	4
  1885  002BBA  0E02               	movlw	2
  1886  002BBC  26F3               	addwf	prodl,f,c
  1887  002BBE  0E00               	movlw	0
  1888  002BC0  22F4               	addwfc	prodh,f,c
  1889  002BC2  0E50               	movlw	low _ServDescList
  1890  002BC4  24F3               	addwf	prodl,w,c
  1891  002BC6  6EF6               	movwf	tblptrl,c
  1892  002BC8  0E03               	movlw	high _ServDescList
  1893  002BCA  20F4               	addwfc	prodh,w,c
  1894  002BCC  6EF7               	movwf	tblptrh,c
  1895  002BCE                     	if	0	;There are less than 3 active tblptr bytes
  1896  002BCE                     	endif
  1897  002BCE  D801               	call	u3138
  1898  002BD0  D00C               	goto	u3139
  1899  002BD2                     u3138:
  1900  002BD2  0005               	push	
  1901  002BD4  6EFA               	movwf	pclath,c
  1902  002BD6  0009               	tblrd		*+
  1903  002BD8  50F5               	movf	tablat,w,c
  1904  002BDA  6EFD               	movwf	tosl,c
  1905  002BDC  0009               	tblrd		*+
  1906  002BDE  50F5               	movf	tablat,w,c
  1907  002BE0  6EFE               	movwf	tosh,c
  1908  002BE2  50F8               	movf	tblptru,w,c
  1909  002BE4  6EFF               	movwf	tosu,c
  1910  002BE6  50FA               	movf	pclath,w,c
  1911  002BE8  0012               	return		;indir
  1912  002BEA                     u3139:
  1913  002BEA  0EBB               	movlw	low ?_RunSPI32ControlService
  1914  002BEC  6ED9               	movwf	fsr2l,c
  1915  002BEE  0E00               	movlw	high ?_RunSPI32ControlService
  1916  002BF0  6EDA               	movwf	fsr2h,c
  1917  002BF2  50DF               	movf	indf2,w,c
  1918  002BF4  B4D8               	btfsc	status,2,c
  1919  002BF6  D002               	goto	l4209
  1920                           
  1921                           ;ES_Framework.c: 293: return FailedRun;
  1922  002BF8  0E02               	movlw	2
  1923  002BFA  0012               	return	
  1924  002BFC                     l4209:
  1925  002BFC  EC18  F01E         	call	__HW_Process_Pending_Ints	;wreg free
  1926  002C00  0900               	iorlw	0
  1927  002C02  B4D8               	btfsc	status,2,c
  1928  002C04  D7FB               	goto	l4209
  1929  002C06  0100               	movlb	0	; () banked
  1930  002C08  51DD               	movf	_Ready& (0+255),w,b
  1931  002C0A  0100               	movlb	0	; () banked
  1932  002C0C  11DE               	iorwf	(_Ready+1)& (0+255),w,b
  1933  002C0E  B4D8               	btfsc	status,2,c
  1934  002C10  D7F5               	goto	l4209
  1935  002C12  D789               	goto	l4197
  1936  002C14                     __end_of_ES_Run:
  1937                           	opt stack 0
  1938                           tosu	equ	0xFFF
  1939                           tosh	equ	0xFFE
  1940                           tosl	equ	0xFFD
  1941                           pclath	equ	0xFFA
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           postdec1	equ	0xFE5
  1951                           fsr1h	equ	0xFE2
  1952                           fsr1l	equ	0xFE1
  1953                           indf2	equ	0xFDF
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function __HW_Process_Pending_Ints *****************
  1959 ;; Defined at:
  1960 ;;		line 225 in file "ES_Port.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      unsigned char 
  1967 ;; Registers used:
  1968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1974 ;;      Params:         0       0       0       0
  1975 ;;      Locals:         0       0       0       0
  1976 ;;      Temps:          0       0       0       0
  1977 ;;      Totals:         0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:   12
  1981 ;; This function calls:
  1982 ;;		_ES_Timer_Tick_Resp
  1983 ;; This function is called by:
  1984 ;;		_ES_Run
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  003C30                     __ptext4:
  1990                           	opt stack 0
  1991  003C30                     __HW_Process_Pending_Ints:
  1992                           	opt stack 17
  1993                           
  1994                           ;ES_Port.c: 227: while (TickCount > 0)
  1995                           
  1996                           ;incstack = 0
  1997  003C30  D004               	goto	l3985
  1998  003C32                     l3981:
  1999                           
  2000                           ;ES_Port.c: 228: {
  2001                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  2002  003C32  EC05  F014         	call	_ES_Timer_Tick_Resp	;wreg free
  2003                           
  2004                           ;ES_Port.c: 231: TickCount--;
  2005  003C36  0100               	movlb	0	; () banked
  2006  003C38  07E8               	decf	_TickCount& (0+255),f,b	;volatile
  2007  003C3A                     l3985:
  2008  003C3A  0100               	movlb	0	; () banked
  2009  003C3C  51E8               	movf	_TickCount& (0+255),w,b	;volatile
  2010  003C3E  A4D8               	btfss	status,2,c
  2011  003C40  D7F8               	goto	l3981
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;ES_Port.c: 232: }
  2015                           ;ES_Port.c: 234: return 1;
  2016                           
  2017                           ; BSR set to: 0
  2018  003C42  0E01               	movlw	1
  2019  003C44  0012               	return	
  2020  003C46                     __end_of__HW_Process_Pending_Ints:
  2021                           	opt stack 0
  2022                           tosu	equ	0xFFF
  2023                           tosh	equ	0xFFE
  2024                           tosl	equ	0xFFD
  2025                           pclath	equ	0xFFA
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function _ES_Timer_Tick_Resp *****************
  2043 ;; Defined at:
  2044 ;;		line 284 in file "ES_Timers.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2058 ;;      Params:         0       0       0       0
  2059 ;;      Locals:         0       0       0       0
  2060 ;;      Temps:          0       4       0       0
  2061 ;;      Totals:         0       4       0       0
  2062 ;;Total ram usage:        4 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:   11
  2065 ;; This function calls:
  2066 ;;		Absolute function
  2067 ;;		_ES_GetMSBitSet
  2068 ;;		_PostPatternControlService
  2069 ;;		_PostSPI32ControlService
  2070 ;; This function is called by:
  2071 ;;		__HW_Process_Pending_Ints
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text5
  2076  00280A                     __ptext5:
  2077                           	opt stack 0
  2078  00280A                     _ES_Timer_Tick_Resp:
  2079                           	opt stack 17
  2080                           
  2081                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  2082                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  2083                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  2084                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;incstack = 0
  2088  00280A  0100               	movlb	0	; () banked
  2089  00280C  51DF               	movf	_TMR_ActiveFlags& (0+255),w,b
  2090  00280E  0100               	movlb	0	; () banked
  2091  002810  11E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  2092  002812  B4D8               	btfsc	status,2,c
  2093  002814  0012               	return	
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;ES_Timers.c: 291: {
  2097                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  2098  002816  C0DF  F0D5         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  2099  00281A  C0E0  F0D6         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  2100  00281E                     l3857:
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2104  00281E  C0D5  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  2105  002822  C0D6  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  2106  002826  ECCE  F018         	call	_ES_GetMSBitSet	;wreg free
  2107  00282A  0100               	movlb	0	; () banked
  2108  00282C  6FE1               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  2112  00282E  0100               	movlb	0	; () banked
  2113  002830  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2114  002832  0D02               	mullw	2
  2115  002834  0E00               	movlw	low _TMR_TimerArray
  2116  002836  24F3               	addwf	prodl,w,c
  2117  002838  6ED9               	movwf	fsr2l,c
  2118  00283A  0E01               	movlw	high _TMR_TimerArray
  2119  00283C  20F4               	addwfc	prodh,w,c
  2120  00283E  6EDA               	movwf	fsr2h,c
  2121  002840  06DE               	decf	postinc2,f,c
  2122  002842  0E00               	movlw	0
  2123  002844  5ADD               	subwfb	postdec2,f,c
  2124  002846  50DE               	movf	postinc2,w,c
  2125  002848  10DE               	iorwf	postinc2,w,c
  2126  00284A  A4D8               	btfss	status,2,c
  2127  00284C  D043               	goto	l3869
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;ES_Timers.c: 299: {
  2131                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  2132  00284E  0E03               	movlw	3
  2133  002850  0100               	movlb	0	; () banked
  2134  002852  6FD2               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2138  002854  C0E1  F0D3         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2139  002858  0100               	movlb	0	; () banked
  2140  00285A  6BD4               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2144  00285C  C0D2  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2145  002860  C0D3  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2146  002864  C0D4  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2147  002868  0100               	movlb	0	; () banked
  2148  00286A  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2149  00286C  0D02               	mullw	2
  2150  00286E  0E21               	movlw	low _Timer2PostFunc
  2151  002870  24F3               	addwf	prodl,w,c
  2152  002872  6EF6               	movwf	tblptrl,c
  2153  002874  0E03               	movlw	high _Timer2PostFunc
  2154  002876  20F4               	addwfc	prodh,w,c
  2155  002878  6EF7               	movwf	tblptrh,c
  2156  00287A                     	if	0	;There are less than 3 active tblptr bytes
  2157  00287A                     	endif
  2158  00287A  D801               	call	u2778
  2159  00287C  D00C               	goto	l3867
  2160  00287E                     u2778:
  2161  00287E  0005               	push	
  2162  002880  6EFA               	movwf	pclath,c
  2163  002882  0009               	tblrd		*+
  2164  002884  50F5               	movf	tablat,w,c
  2165  002886  6EFD               	movwf	tosl,c
  2166  002888  0009               	tblrd		*+
  2167  00288A  50F5               	movf	tablat,w,c
  2168  00288C  6EFE               	movwf	tosh,c
  2169  00288E  50F8               	movf	tblptru,w,c
  2170  002890  6EFF               	movwf	tosu,c
  2171  002892  50FA               	movf	pclath,w,c
  2172  002894  0012               	return		;indir
  2173  002896                     l3867:
  2174                           
  2175                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2176  002896  0100               	movlb	0	; () banked
  2177  002898  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2178  00289A  0D02               	mullw	2
  2179  00289C  0E01               	movlw	low _BitNum2SetMask
  2180  00289E  24F3               	addwf	prodl,w,c
  2181  0028A0  6EF6               	movwf	tblptrl,c
  2182  0028A2  0E03               	movlw	high _BitNum2SetMask
  2183  0028A4  20F4               	addwfc	prodh,w,c
  2184  0028A6  6EF7               	movwf	tblptrh,c
  2185  0028A8                     	if	0	;There are less than 3 active tblptr bytes
  2186  0028A8                     	endif
  2187  0028A8  0009               	tblrd		*+
  2188  0028AA  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2189  0028AE  0009               	tblrd		*+
  2190  0028B0  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2191  0028B4  0100               	movlb	0	; () banked
  2192  0028B6  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2193  0028B8  0100               	movlb	0	; () banked
  2194  0028BA  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2195  0028BC  0100               	movlb	0	; () banked
  2196  0028BE  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2197  0028C0  0100               	movlb	0	; () banked
  2198  0028C2  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2199  0028C4  0100               	movlb	0	; () banked
  2200  0028C6  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2201  0028C8  0100               	movlb	0	; () banked
  2202  0028CA  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2203  0028CC  0100               	movlb	0	; () banked
  2204  0028CE  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2205  0028D0  0100               	movlb	0	; () banked
  2206  0028D2  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2207  0028D4                     l3869:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;ES_Timers.c: 306: }
  2211                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2212  0028D4  0100               	movlb	0	; () banked
  2213  0028D6  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2214  0028D8  0D02               	mullw	2
  2215  0028DA  0E01               	movlw	low _BitNum2SetMask
  2216  0028DC  24F3               	addwf	prodl,w,c
  2217  0028DE  6EF6               	movwf	tblptrl,c
  2218  0028E0  0E03               	movlw	high _BitNum2SetMask
  2219  0028E2  20F4               	addwfc	prodh,w,c
  2220  0028E4  6EF7               	movwf	tblptrh,c
  2221  0028E6                     	if	0	;There are less than 3 active tblptr bytes
  2222  0028E6                     	endif
  2223  0028E6  0009               	tblrd		*+
  2224  0028E8  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2225  0028EC  0009               	tblrd		*+
  2226  0028EE  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2227  0028F2  0100               	movlb	0	; () banked
  2228  0028F4  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2229  0028F6  0100               	movlb	0	; () banked
  2230  0028F8  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2231  0028FA  0100               	movlb	0	; () banked
  2232  0028FC  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2233  0028FE  0100               	movlb	0	; () banked
  2234  002900  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2235  002902  0100               	movlb	0	; () banked
  2236  002904  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2237  002906  0100               	movlb	0	; () banked
  2238  002908  17D5               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2239  00290A  0100               	movlb	0	; () banked
  2240  00290C  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2241  00290E  0100               	movlb	0	; () banked
  2242  002910  17D6               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2246  002912  0100               	movlb	0	; () banked
  2247  002914  51D5               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2248  002916  0100               	movlb	0	; () banked
  2249  002918  11D6               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2250  00291A  B4D8               	btfsc	status,2,c
  2251  00291C  0012               	return	
  2252  00291E  D77F               	goto	l3857
  2253  002920                     __end_of_ES_Timer_Tick_Resp:
  2254                           	opt stack 0
  2255                           tosu	equ	0xFFF
  2256                           tosh	equ	0xFFE
  2257                           tosl	equ	0xFFD
  2258                           pclath	equ	0xFFA
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           prodh	equ	0xFF4
  2264                           prodl	equ	0xFF3
  2265                           postinc0	equ	0xFEE
  2266                           wreg	equ	0xFE8
  2267                           postdec1	equ	0xFE5
  2268                           fsr1h	equ	0xFE2
  2269                           fsr1l	equ	0xFE1
  2270                           indf2	equ	0xFDF
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function _ES_GetMSBitSet *****************
  2278 ;; Defined at:
  2279 ;;		line 79 in file "ES_LookupTables.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  LoopCntr        1    9[BANK0 ] char 
  2284 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2285 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      unsigned char 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2295 ;;      Params:         0       2       0       0
  2296 ;;      Locals:         0       3       0       0
  2297 ;;      Temps:          0       5       0       0
  2298 ;;      Totals:         0      10       0       0
  2299 ;;Total ram usage:       10 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    7
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_ES_Run
  2306 ;;		_ES_Timer_Tick_Resp
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text6
  2311  00319C                     __ptext6:
  2312                           	opt stack 0
  2313  00319C                     _ES_GetMSBitSet:
  2314                           	opt stack 20
  2315                           
  2316                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2317                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2318                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;incstack = 0
  2322  00319C  0E80               	movlw	128
  2323  00319E  0100               	movlb	0	; () banked
  2324  0031A0  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2325                           
  2326                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2327  0031A2  0E03               	movlw	3
  2328  0031A4  0100               	movlb	0	; () banked
  2329  0031A6  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2330  0031A8                     l3609:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2334  0031A8  0100               	movlb	0	; () banked
  2335  0031AA  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2336  0031AC  D046               	goto	l3623
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2340                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2341                           ;ES_LookupTables.c: 91: 0x0F);
  2342                           
  2343                           ; BSR set to: 0
  2344                           
  2345                           ; BSR set to: 0
  2346  0031AE  0100               	movlb	0	; () banked
  2347  0031B0  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2348  0031B2  0D04               	mullw	4
  2349  0031B4  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2350  0031B8  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2351  0031BC  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2352  0031C0  0100               	movlb	0	; () banked
  2353  0031C2  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2354  0031C4  D004               	goto	u2504
  2355  0031C6                     u2505:
  2356  0031C6  0100               	movlb	0	; () banked
  2357  0031C8  90D8               	bcf	status,0,c
  2358  0031CA  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2359  0031CC  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2360  0031CE                     u2504:
  2361  0031CE  0100               	movlb	0	; () banked
  2362  0031D0  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2363  0031D2  D7F9               	goto	u2505
  2364  0031D4  0100               	movlb	0	; () banked
  2365  0031D6  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2366  0031D8  0B0F               	andlw	15
  2367  0031DA  0100               	movlb	0	; () banked
  2368  0031DC  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2372  0031DE  0100               	movlb	0	; () banked
  2373  0031E0  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2374  0031E2  0100               	movlb	0	; () banked
  2375  0031E4  B4D8               	btfsc	status,2,c
  2376  0031E6  D026               	goto	l3619
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2380                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2381  0031E8  0EFF               	movlw	255
  2382  0031EA  0100               	movlb	0	; () banked
  2383  0031EC  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2384  0031EE  0EFF               	movlw	255
  2385  0031F0  0100               	movlb	0	; () banked
  2386  0031F2  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2387  0031F4  0100               	movlb	0	; () banked
  2388  0031F6  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2389  0031F8  0100               	movlb	0	; () banked
  2390  0031FA  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2391  0031FC  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2392  0031FE  0100               	movlb	0	; () banked
  2393  003200  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2394  003202  0100               	movlb	0	; () banked
  2395  003204  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2396  003206  0100               	movlb	0	; () banked
  2397  003208  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2398  00320A  0100               	movlb	0	; () banked
  2399  00320C  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2400  00320E  0E41               	movlw	low _Nybble2MSBitNum
  2401  003210  0100               	movlb	0	; () banked
  2402  003212  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2403  003214  6EF6               	movwf	tblptrl,c
  2404  003216  0E03               	movlw	high _Nybble2MSBitNum
  2405  003218  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2406  00321A  6EF7               	movwf	tblptrh,c
  2407  00321C                     	if	0	;There are less than 3 active tblptr bytes
  2408  00321C                     	endif
  2409  00321C  0008               	tblrd		*
  2410  00321E  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2411  003222  0100               	movlb	0	; () banked
  2412  003224  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2413  003226  0D04               	mullw	4
  2414  003228  50F3               	movf	prodl,w,c
  2415  00322A  0100               	movlb	0	; () banked
  2416  00322C  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2417  00322E  0100               	movlb	0	; () banked
  2418  003230  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2419                           
  2420                           ;ES_LookupTables.c: 96: break;
  2421  003232  D003               	goto	l3623
  2422  003234                     l3619:
  2423                           
  2424                           ; BSR set to: 0
  2425  003234  0100               	movlb	0	; () banked
  2426  003236  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2427  003238  D7B7               	goto	l3609
  2428  00323A                     l3623:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;ES_LookupTables.c: 97: }
  2432                           ;ES_LookupTables.c: 98: }
  2433                           ;ES_LookupTables.c: 99: return ReturnVal;
  2434  00323A  0100               	movlb	0	; () banked
  2435  00323C  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2436  00323E  0012               	return	
  2437  003240                     __end_of_ES_GetMSBitSet:
  2438                           	opt stack 0
  2439                           tosu	equ	0xFFF
  2440                           tosh	equ	0xFFE
  2441                           tosl	equ	0xFFD
  2442                           pclath	equ	0xFFA
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1h	equ	0xFE2
  2453                           fsr1l	equ	0xFE1
  2454                           indf2	equ	0xFDF
  2455                           postinc2	equ	0xFDE
  2456                           postdec2	equ	0xFDD
  2457                           fsr2h	equ	0xFDA
  2458                           fsr2l	equ	0xFD9
  2459                           status	equ	0xFD8
  2460                           
  2461 ;; *************** function _RunPatternControlService *****************
  2462 ;; Defined at:
  2463 ;;		line 159 in file "Pattern_ControlService.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  testEvent       3   97[BANK0 ] struct ES_Event_t
  2468 ;;  ReturnEvent     3   94[BANK0 ] struct ES_Event_t
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  3   91[BANK0 ] struct ES_Event_t
  2471 ;; Registers used:
  2472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2478 ;;      Params:         0       3       0       0
  2479 ;;      Locals:         0       6       0       0
  2480 ;;      Temps:          0       0       0       0
  2481 ;;      Totals:         0       9       0       0
  2482 ;;Total ram usage:        9 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:   14
  2485 ;; This function calls:
  2486 ;;		_PausePattern
  2487 ;;		_PostPatternControlService
  2488 ;;		_ShowPattern
  2489 ;;		_StopPattern
  2490 ;; This function is called by:
  2491 ;;		_ES_Run
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text7
  2496  002EB0                     __ptext7:
  2497                           	opt stack 0
  2498  002EB0                     _RunPatternControlService:
  2499                           	opt stack 15
  2500                           
  2501                           ;Pattern_ControlService.c: 161: ES_Event ReturnEvent;
  2502                           ;Pattern_ControlService.c: 162: ReturnEvent.EventType = ES_NO_EVENT;
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;incstack = 0
  2506  002EB0  0E00               	movlw	0
  2507  002EB2  0100               	movlb	0	; () banked
  2508  002EB4  6FBE               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2509                           
  2510                           ;Pattern_ControlService.c: 164: switch(CurrentState){
  2511  002EB6  D04B               	goto	l4061
  2512  002EB8                     l4017:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;Pattern_ControlService.c: 167: if(ThisEvent.EventType == ES_INIT){
  2516  002EB8  0E02               	movlw	2
  2517  002EBA  0100               	movlb	0	; () banked
  2518  002EBC  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2519  002EBE  A4D8               	btfss	status,2,c
  2520  002EC0  D054               	goto	l326
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;Pattern_ControlService.c: 171: StopPattern();
  2524  002EC2  ECBA  F01D         	call	_StopPattern	;wreg free
  2525                           
  2526                           ;Pattern_ControlService.c: 173: CurrentState = Pattern_Off;
  2527  002EC6  0E01               	movlw	1
  2528  002EC8  0100               	movlb	0	; () banked
  2529  002ECA  6FE4               	movwf	_CurrentState& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;Pattern_ControlService.c: 176: ES_Event testEvent;
  2533                           ;Pattern_ControlService.c: 177: testEvent.EventType = PATTERN_START;
  2534  002ECC  0E05               	movlw	5
  2535  002ECE  0100               	movlb	0	; () banked
  2536  002ED0  6FC1               	movwf	RunPatternControlService@testEvent& (0+255),b
  2537                           
  2538                           ;Pattern_ControlService.c: 178: PostPatternControlService(testEvent);
  2539  002ED2  C0C1  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2540  002ED6  C0C2  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2541  002EDA  C0C3  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2542  002EDE  ECC8  F01D         	call	_PostPatternControlService	;wreg free
  2543                           
  2544                           ;Pattern_ControlService.c: 180: }
  2545                           ;Pattern_ControlService.c: 181: break;
  2546  002EE2  D043               	goto	l326
  2547  002EE4                     l4025:
  2548                           
  2549                           ;Pattern_ControlService.c: 185: if(ThisEvent.EventType == PATTERN_START){
  2550  002EE4  0E05               	movlw	5
  2551  002EE6  0100               	movlb	0	; () banked
  2552  002EE8  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2553  002EEA  A4D8               	btfss	status,2,c
  2554  002EEC  D03E               	goto	l326
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;Pattern_ControlService.c: 187: ShowPattern();
  2558  002EEE  EC8B  F01D         	call	_ShowPattern	;wreg free
  2559  002EF2                     l4029:
  2560                           
  2561                           ;Pattern_ControlService.c: 189: CurrentState = Pattern_Running;
  2562  002EF2  0E02               	movlw	2
  2563  002EF4  D029               	goto	L4
  2564  002EF6                     l4031:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;Pattern_ControlService.c: 195: if(ThisEvent.EventType == ES_TIMEOUT){
  2568  002EF6  0E03               	movlw	3
  2569  002EF8  0100               	movlb	0	; () banked
  2570  002EFA  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2571  002EFC  A4D8               	btfss	status,2,c
  2572  002EFE  D003               	goto	l4035
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;Pattern_ControlService.c: 197: ShowPattern();
  2576  002F00  EC8B  F01D         	call	_ShowPattern	;wreg free
  2577                           
  2578                           ;Pattern_ControlService.c: 198: }
  2579  002F04  D032               	goto	l326
  2580  002F06                     l4035:
  2581                           
  2582                           ;Pattern_ControlService.c: 200: else if(ThisEvent.EventType == PATTERN_END){
  2583  002F06  0E06               	movlw	6
  2584  002F08  0100               	movlb	0	; () banked
  2585  002F0A  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2586  002F0C  A4D8               	btfss	status,2,c
  2587  002F0E  D003               	goto	l4041
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;Pattern_ControlService.c: 202: StopPattern();
  2591  002F10  ECBA  F01D         	call	_StopPattern	;wreg free
  2592  002F14  D018               	goto	L24
  2593  002F16                     l4041:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;Pattern_ControlService.c: 207: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2597  002F16  0E07               	movlw	7
  2598  002F18  0100               	movlb	0	; () banked
  2599  002F1A  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2600  002F1C  A4D8               	btfss	status,2,c
  2601  002F1E  D025               	goto	l326
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;Pattern_ControlService.c: 209: PausePattern();
  2605  002F20  EC5E  F01E         	call	_PausePattern	;wreg free
  2606                           
  2607                           ;Pattern_ControlService.c: 211: CurrentState = Pattern_Paused;
  2608  002F24  0E03               	movlw	3
  2609  002F26  D010               	goto	L4
  2610  002F28                     l4047:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;Pattern_ControlService.c: 217: if(ThisEvent.EventType == PATTERN_START){
  2614  002F28  0E05               	movlw	5
  2615  002F2A  0100               	movlb	0	; () banked
  2616  002F2C  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2617  002F2E  A4D8               	btfss	status,2,c
  2618  002F30  D003               	goto	l4053
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;Pattern_ControlService.c: 219: ShowPattern();
  2622  002F32  EC8B  F01D         	call	_ShowPattern	;wreg free
  2623  002F36  D7DD               	goto	l4029
  2624  002F38                     l4053:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;Pattern_ControlService.c: 224: else if(ThisEvent.EventType == PATTERN_END){
  2628  002F38  0E06               	movlw	6
  2629  002F3A  0100               	movlb	0	; () banked
  2630  002F3C  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2631  002F3E  A4D8               	btfss	status,2,c
  2632  002F40  D014               	goto	l326
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;Pattern_ControlService.c: 226: StopPattern();
  2636  002F42  ECBA  F01D         	call	_StopPattern	;wreg free
  2637  002F46                     L24:
  2638                           
  2639                           ;Pattern_ControlService.c: 228: CurrentState = Pattern_Off;
  2640  002F46  0E01               	movlw	1
  2641  002F48                     L4:
  2642  002F48  0100               	movlb	0	; () banked
  2643  002F4A  6FE4               	movwf	_CurrentState& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;Pattern_ControlService.c: 231: }
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;Pattern_ControlService.c: 229: }
  2650                           ;Pattern_ControlService.c: 230: break;
  2651                           
  2652                           ; BSR set to: 0
  2653  002F4C  D00E               	goto	l326
  2654  002F4E                     l4061:
  2655                           
  2656                           ; BSR set to: 0
  2657  002F4E  0100               	movlb	0	; () banked
  2658  002F50  51E4               	movf	_CurrentState& (0+255),w,b
  2659                           
  2660                           ; Switch size 1, requested type "space"
  2661                           ; Number of cases is 4, Range of values is 0 to 3
  2662                           ; switch strategies available:
  2663                           ; Name         Instructions Cycles
  2664                           ; simple_byte           13     7 (average)
  2665                           ;	Chosen strategy is simple_byte
  2666  002F52  0A00               	xorlw	0	; case 0
  2667  002F54  B4D8               	btfsc	status,2,c
  2668  002F56  D7B0               	goto	l4017
  2669  002F58  0A01               	xorlw	1	; case 1
  2670  002F5A  B4D8               	btfsc	status,2,c
  2671  002F5C  D7C3               	goto	l4025
  2672  002F5E  0A03               	xorlw	3	; case 2
  2673  002F60  B4D8               	btfsc	status,2,c
  2674  002F62  D7C9               	goto	l4031
  2675  002F64  0A01               	xorlw	1	; case 3
  2676  002F66  B4D8               	btfsc	status,2,c
  2677  002F68  D7DF               	goto	l4047
  2678  002F6A                     l326:
  2679                           
  2680                           ;Pattern_ControlService.c: 232: return ReturnEvent;
  2681  002F6A  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2682  002F6E  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2683  002F72  C0C0  F0BD         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2684  002F76  0012               	return		;funcret
  2685  002F78                     __end_of_RunPatternControlService:
  2686                           	opt stack 0
  2687                           tosu	equ	0xFFF
  2688                           tosh	equ	0xFFE
  2689                           tosl	equ	0xFFD
  2690                           pclath	equ	0xFFA
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _RunSPI32ControlService *****************
  2710 ;; Defined at:
  2711 ;;		line 138 in file "SPI32_ControlService.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  ReturnEvent     3  101[BANK0 ] struct ES_Event_t
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  3   91[BANK0 ] struct ES_Event_t
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2725 ;;      Params:         0       3       0       0
  2726 ;;      Locals:         0       3       0       0
  2727 ;;      Temps:          0       7       0       0
  2728 ;;      Totals:         0      13       0       0
  2729 ;;Total ram usage:       13 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    8
  2732 ;; This function calls:
  2733 ;;		_GetNextFrame
  2734 ;;		_SPI32_SendFrame
  2735 ;; This function is called by:
  2736 ;;		_ES_Run
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text8
  2741  002920                     __ptext8:
  2742                           	opt stack 0
  2743  002920                     _RunSPI32ControlService:
  2744                           	opt stack 21
  2745                           
  2746                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2747                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2748                           
  2749                           ;incstack = 0
  2750  002920  0E00               	movlw	0
  2751  002922  0100               	movlb	0	; () banked
  2752  002924  6FC5               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2753                           
  2754                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2755  002926  D06D               	goto	l4111
  2756  002928                     l4085:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2760  002928  0E02               	movlw	2
  2761  00292A  0100               	movlb	0	; () banked
  2762  00292C  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2763  00292E  A4D8               	btfss	status,2,c
  2764  002930  D073               	goto	l410
  2765  002932  D063               	goto	l4107
  2766  002934                     l4089:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2770  002934  0E08               	movlw	8
  2771  002936  0100               	movlb	0	; () banked
  2772  002938  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2773  00293A  A4D8               	btfss	status,2,c
  2774  00293C  D06D               	goto	l410
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2778  00293E  ECE4  F01D         	call	_GetNextFrame	;wreg free
  2779  002942  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2780  002946  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2781  00294A  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2782  00294E  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2783                           
  2784                           ;SPI32_ControlService.c: 163: SPI32_SendFrame(CurrentFrame);
  2785  002952  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2786  002956  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2787  00295A  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2788  00295E  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2789  002962  ECCD  F01B         	call	_SPI32_SendFrame	;wreg free
  2790                           
  2791                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2792  002966  0E02               	movlw	2
  2793  002968  D049               	goto	L6
  2794  00296A                     l4097:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2798  00296A  0E03               	movlw	3
  2799  00296C  0100               	movlb	0	; () banked
  2800  00296E  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2801  002970  A4D8               	btfss	status,2,c
  2802  002972  D052               	goto	l410
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;SPI32_ControlService.c: 174: if(FrameIndex++ < NumFrames-1){
  2806  002974  0EFF               	movlw	255
  2807  002976  0100               	movlb	0	; () banked
  2808  002978  6FBE               	movwf	??_RunSPI32ControlService& (0+255),b
  2809  00297A  0EFF               	movlw	255
  2810  00297C  0100               	movlb	0	; () banked
  2811  00297E  6FBF               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2812  002980  0100               	movlb	0	; () banked
  2813  002982  51E7               	movf	_NumFrames& (0+255),w,b
  2814  002984  0100               	movlb	0	; () banked
  2815  002986  6FC0               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2816  002988  6BC1               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2817  00298A  0100               	movlb	0	; () banked
  2818  00298C  51BE               	movf	??_RunSPI32ControlService& (0+255),w,b
  2819  00298E  0100               	movlb	0	; () banked
  2820  002990  27C0               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2821  002992  0100               	movlb	0	; () banked
  2822  002994  51BF               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2823  002996  0100               	movlb	0	; () banked
  2824  002998  23C1               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2825  00299A  0100               	movlb	0	; () banked
  2826  00299C  2BE5               	incf	_FrameIndex& (0+255),f,b
  2827  00299E  05E5               	decf	_FrameIndex& (0+255),w,b
  2828  0029A0  0100               	movlb	0	; () banked
  2829  0029A2  6FC2               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2830  0029A4  6BC3               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2831  0029A6  0100               	movlb	0	; () banked
  2832  0029A8  51C0               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2833  0029AA  0100               	movlb	0	; () banked
  2834  0029AC  5DC2               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2835  0029AE  0100               	movlb	0	; () banked
  2836  0029B0  51C3               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2837  0029B2  0A80               	xorlw	128
  2838  0029B4  0100               	movlb	0	; () banked
  2839  0029B6  6FC4               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2840  0029B8  0100               	movlb	0	; () banked
  2841  0029BA  51C1               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2842  0029BC  0A80               	xorlw	128
  2843  0029BE  0100               	movlb	0	; () banked
  2844  0029C0  59C4               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2845  0029C2  B0D8               	btfsc	status,0,c
  2846  0029C4  D01A               	goto	l4107
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;SPI32_ControlService.c: 176: FramePointer++;
  2850  0029C6  0E04               	movlw	4
  2851  0029C8  0100               	movlb	0	; () banked
  2852  0029CA  27D7               	addwf	_FramePointer& (0+255),f,b
  2853  0029CC  0E00               	movlw	0
  2854  0029CE  23D8               	addwfc	(_FramePointer+1)& (0+255),f,b
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;SPI32_ControlService.c: 177: CurrentFrame = GetNextFrame();
  2858  0029D0  ECE4  F01D         	call	_GetNextFrame	;wreg free
  2859  0029D4  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2860  0029D8  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2861  0029DC  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2862  0029E0  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2863                           
  2864                           ;SPI32_ControlService.c: 179: SPI32_SendFrame(CurrentFrame);
  2865  0029E4  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2866  0029E8  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2867  0029EC  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2868  0029F0  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2869  0029F4  ECCD  F01B         	call	_SPI32_SendFrame	;wreg free
  2870                           
  2871                           ;SPI32_ControlService.c: 180: }
  2872  0029F8  D00F               	goto	l410
  2873  0029FA                     l4107:
  2874                           
  2875                           ;SPI32_ControlService.c: 182: else{
  2876                           ;SPI32_ControlService.c: 184: CurrentState = SPI32_Waiting4Send;
  2877  0029FA  0E01               	movlw	1
  2878  0029FC                     L6:
  2879  0029FC  0100               	movlb	0	; () banked
  2880  0029FE  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;SPI32_ControlService.c: 235: }
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;SPI32_ControlService.c: 185: }
  2887                           ;SPI32_ControlService.c: 186: }
  2888                           ;SPI32_ControlService.c: 188: break;
  2889                           
  2890                           ; BSR set to: 0
  2891  002A00  D00B               	goto	l410
  2892  002A02                     l4111:
  2893                           
  2894                           ; BSR set to: 0
  2895  002A02  0100               	movlb	0	; () banked
  2896  002A04  51E2               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2897                           
  2898                           ; Switch size 1, requested type "space"
  2899                           ; Number of cases is 3, Range of values is 0 to 2
  2900                           ; switch strategies available:
  2901                           ; Name         Instructions Cycles
  2902                           ; simple_byte           10     6 (average)
  2903                           ;	Chosen strategy is simple_byte
  2904  002A06  0A00               	xorlw	0	; case 0
  2905  002A08  B4D8               	btfsc	status,2,c
  2906  002A0A  D78E               	goto	l4085
  2907  002A0C  0A01               	xorlw	1	; case 1
  2908  002A0E  B4D8               	btfsc	status,2,c
  2909  002A10  D791               	goto	l4089
  2910  002A12  0A03               	xorlw	3	; case 2
  2911  002A14  B4D8               	btfsc	status,2,c
  2912  002A16  D7A9               	goto	l4097
  2913  002A18                     l410:
  2914                           
  2915                           ;SPI32_ControlService.c: 236: return ReturnEvent;
  2916  002A18  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2917  002A1C  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2918  002A20  C0C7  F0BD         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2919  002A24  0012               	return		;funcret
  2920  002A26                     __end_of_RunSPI32ControlService:
  2921                           	opt stack 0
  2922                           tosu	equ	0xFFF
  2923                           tosh	equ	0xFFE
  2924                           tosl	equ	0xFFD
  2925                           pclath	equ	0xFFA
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postdec1	equ	0xFE5
  2935                           fsr1h	equ	0xFE2
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _SPI32_SendFrame *****************
  2945 ;; Defined at:
  2946 ;;		line 85 in file "SPI32_HW.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0, prodl, prodh
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2960 ;;      Params:         0       4       0       0
  2961 ;;      Locals:         0       0       0       0
  2962 ;;      Temps:          0       4       0       0
  2963 ;;      Totals:         0       8       0       0
  2964 ;;Total ram usage:        8 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    7
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_RunSPI32ControlService
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text9
  2975  00379A                     __ptext9:
  2976                           	opt stack 0
  2977  00379A                     _SPI32_SendFrame:
  2978                           	opt stack 21
  2979                           
  2980                           ;SPI32_HW.c: 100: if(FrameByte == 4){
  2981                           
  2982                           ;incstack = 0
  2983  00379A  0E04               	movlw	4
  2984  00379C  0100               	movlb	0	; () banked
  2985  00379E  19F6               	xorwf	_FrameByte& (0+255),w,b
  2986  0037A0  A4D8               	btfss	status,2,c
  2987  0037A2  D008               	goto	l3917
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
  2991  0037A4  C060  F036         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2992  0037A8  C061  F037         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2993  0037AC  C062  F038         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2994  0037B0  C063  F039         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2995  0037B4                     l3917:
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;SPI32_HW.c: 103: }
  2999                           ;SPI32_HW.c: 105: FrameByte--;
  3000  0037B4  0100               	movlb	0	; () banked
  3001  0037B6  07F6               	decf	_FrameByte& (0+255),f,b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  3005  0037B8  0100               	movlb	0	; () banked
  3006  0037BA  51F6               	movf	_FrameByte& (0+255),w,b
  3007  0037BC  0D08               	mullw	8
  3008  0037BE  50F3               	movf	prodl,w,c
  3009  0037C0  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  3010  0037C4  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  3011  0037C8  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  3012  0037CC  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  3013  0037D0  0100               	movlb	0	; () banked
  3014  0037D2  2AE8               	incf	wreg,f,c
  3015  0037D4  D005               	goto	u2800
  3016  0037D6                     u2805:
  3017  0037D6  90D8               	bcf	status,0,c
  3018  0037D8  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  3019  0037DA  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  3020  0037DC  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  3021  0037DE  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  3022  0037E0                     u2800:
  3023  0037E0  2EE8               	decfsz	wreg,f,c
  3024  0037E2  D7F9               	goto	u2805
  3025  0037E4  0100               	movlb	0	; () banked
  3026  0037E6  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  3027  0037E8  6EC9               	movwf	4041,c	;volatile
  3028                           
  3029                           ; BSR set to: 0
  3030  0037EA  0012               	return		;funcret
  3031  0037EC                     __end_of_SPI32_SendFrame:
  3032                           	opt stack 0
  3033                           tosu	equ	0xFFF
  3034                           tosh	equ	0xFFE
  3035                           tosl	equ	0xFFD
  3036                           pclath	equ	0xFFA
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postdec1	equ	0xFE5
  3046                           fsr1h	equ	0xFE2
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _GetNextFrame *****************
  3056 ;; Defined at:
  3057 ;;		line 258 in file "SPI32_ControlService.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  4    0[BANK0 ] unsigned long 
  3064 ;; Registers used:
  3065 ;;		fsr2l, fsr2h
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3071 ;;      Params:         0       4       0       0
  3072 ;;      Locals:         0       0       0       0
  3073 ;;      Temps:          0       0       0       0
  3074 ;;      Totals:         0       4       0       0
  3075 ;;Total ram usage:        4 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    7
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_RunSPI32ControlService
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text10
  3086  003BC8                     __ptext10:
  3087                           	opt stack 0
  3088  003BC8                     _GetNextFrame:
  3089                           	opt stack 21
  3090                           
  3091                           ;SPI32_ControlService.c: 259: return *(FramePointer);
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;incstack = 0
  3095  003BC8  C0D7  FFD9         	movff	_FramePointer,fsr2l
  3096  003BCC  C0D8  FFDA         	movff	_FramePointer+1,fsr2h
  3097  003BD0  CFDE F060          	movff	postinc2,?_GetNextFrame
  3098  003BD4  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3099  003BD8  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3100  003BDC  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3101  003BE0  0012               	return	
  3102  003BE2                     __end_of_GetNextFrame:
  3103                           	opt stack 0
  3104                           tosu	equ	0xFFF
  3105                           tosh	equ	0xFFE
  3106                           tosl	equ	0xFFD
  3107                           pclath	equ	0xFFA
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           indf2	equ	0xFDF
  3120                           postinc2	equ	0xFDE
  3121                           postdec2	equ	0xFDD
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _StopPattern *****************
  3127 ;; Defined at:
  3128 ;;		line 271 in file "Pattern_ControlService.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3142 ;;      Params:         0       0       0       0
  3143 ;;      Locals:         0       0       0       0
  3144 ;;      Temps:          0       0       0       0
  3145 ;;      Totals:         0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:   13
  3149 ;; This function calls:
  3150 ;;		_DotStar_Show
  3151 ;;		_ES_Timer_StopTimer
  3152 ;;		_PatternOff
  3153 ;;		_ResetPattern
  3154 ;; This function is called by:
  3155 ;;		_RunPatternControlService
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text11
  3160  003B74                     __ptext11:
  3161                           	opt stack 0
  3162  003B74                     _StopPattern:
  3163                           	opt stack 15
  3164                           
  3165                           ;Pattern_ControlService.c: 273: ES_Timer_StopTimer(0);
  3166                           
  3167                           ;incstack = 0
  3168  003B74  0E00               	movlw	0
  3169  003B76  EC1F  F01C         	call	_ES_Timer_StopTimer
  3170                           
  3171                           ;Pattern_ControlService.c: 275: DotStar_Show(PatternOff());
  3172  003B7A  EC8F  F01C         	call	_PatternOff	;wreg free
  3173  003B7E  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3174  003B82  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3175  003B86  ECDA  F012         	call	_DotStar_Show	;wreg free
  3176                           
  3177                           ;Pattern_ControlService.c: 277: ResetPattern();
  3178  003B8A  ECF1  F01D         	call	_ResetPattern	;wreg free
  3179  003B8E  0012               	return		;funcret
  3180  003B90                     __end_of_StopPattern:
  3181                           	opt stack 0
  3182                           tosu	equ	0xFFF
  3183                           tosh	equ	0xFFE
  3184                           tosl	equ	0xFFD
  3185                           pclath	equ	0xFFA
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1h	equ	0xFE2
  3196                           fsr1l	equ	0xFE1
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _ResetPattern *****************
  3205 ;; Defined at:
  3206 ;;		line 77 in file "Pattern_PtrnGenerator.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3220 ;;      Params:         0       0       0       0
  3221 ;;      Locals:         0       0       0       0
  3222 ;;      Temps:          0       0       0       0
  3223 ;;      Totals:         0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    7
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_StopPattern
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text12
  3235  003BE2                     __ptext12:
  3236                           	opt stack 0
  3237  003BE2                     _ResetPattern:
  3238                           	opt stack 20
  3239                           
  3240                           ;Pattern_PtrnGenerator.c: 79: PatternStepCounter = 0;
  3241                           
  3242                           ;incstack = 0
  3243  003BE2  0E00               	movlw	0
  3244  003BE4  0100               	movlb	0	; () banked
  3245  003BE6  6FF2               	movwf	_PatternStepCounter& (0+255),b
  3246                           
  3247                           ;Pattern_PtrnGenerator.c: 81: CycleCounter = 0;
  3248  003BE8  0E00               	movlw	0
  3249  003BEA  0100               	movlb	0	; () banked
  3250  003BEC  6FE9               	movwf	_CycleCounter& (0+255),b
  3251  003BEE  0E00               	movlw	0
  3252  003BF0  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
  3253  003BF2  0E00               	movlw	0
  3254  003BF4  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
  3255  003BF6  0E00               	movlw	0
  3256  003BF8  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
  3257                           
  3258                           ; BSR set to: 0
  3259  003BFA  0012               	return		;funcret
  3260  003BFC                     __end_of_ResetPattern:
  3261                           	opt stack 0
  3262                           tosu	equ	0xFFF
  3263                           tosh	equ	0xFFE
  3264                           tosl	equ	0xFFD
  3265                           pclath	equ	0xFFA
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           postdec1	equ	0xFE5
  3275                           fsr1h	equ	0xFE2
  3276                           fsr1l	equ	0xFE1
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           postdec2	equ	0xFDD
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _PatternOff *****************
  3285 ;; Defined at:
  3286 ;;		line 84 in file "Pattern_PtrnGenerator.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  i               1    2[BANK0 ] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    0[BANK0 ] PTR unsigned int 
  3293 ;; Registers used:
  3294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       2       0       0
  3301 ;;      Locals:         0       1       0       0
  3302 ;;      Temps:          0       0       0       0
  3303 ;;      Totals:         0       3       0       0
  3304 ;;Total ram usage:        3 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    7
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_StopPattern
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text13
  3315  00391E                     __ptext13:
  3316                           	opt stack 0
  3317  00391E                     _PatternOff:
  3318                           	opt stack 20
  3319                           
  3320                           ;Pattern_PtrnGenerator.c: 85: for(uint8_t i=0;i<76;i++){
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;incstack = 0
  3324  00391E  0E00               	movlw	0
  3325  003920  0100               	movlb	0	; () banked
  3326  003922  6F62               	movwf	PatternOff@i& (0+255),b
  3327  003924                     l3727:
  3328                           
  3329                           ; BSR set to: 0
  3330  003924  0E4B               	movlw	75
  3331  003926  0100               	movlb	0	; () banked
  3332  003928  6562               	cpfsgt	PatternOff@i& (0+255),b
  3333  00392A  D001               	goto	l3731
  3334  00392C  D010               	goto	l3737
  3335  00392E                     l3731:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Pattern_PtrnGenerator.c: 86: PixelPattern[i] = 0x0;
  3339  00392E  0100               	movlb	0	; () banked
  3340  003930  5162               	movf	PatternOff@i& (0+255),w,b
  3341  003932  0D02               	mullw	2
  3342  003934  0E20               	movlw	low _PixelPattern
  3343  003936  24F3               	addwf	prodl,w,c
  3344  003938  6ED9               	movwf	fsr2l,c
  3345  00393A  0E01               	movlw	high _PixelPattern
  3346  00393C  20F4               	addwfc	prodh,w,c
  3347  00393E  6EDA               	movwf	fsr2h,c
  3348  003940  0E00               	movlw	0
  3349  003942  6EDE               	movwf	postinc2,c
  3350  003944  0E00               	movlw	0
  3351  003946  6EDD               	movwf	postdec2,c
  3352                           
  3353                           ; BSR set to: 0
  3354  003948  0100               	movlb	0	; () banked
  3355  00394A  2B62               	incf	PatternOff@i& (0+255),f,b
  3356  00394C  D7EB               	goto	l3727
  3357  00394E                     l3737:
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;Pattern_PtrnGenerator.c: 87: }
  3361                           ;Pattern_PtrnGenerator.c: 88: return PixelPattern;
  3362  00394E  0E20               	movlw	low _PixelPattern
  3363  003950  0100               	movlb	0	; () banked
  3364  003952  6F60               	movwf	?_PatternOff& (0+255),b
  3365  003954  0E01               	movlw	high _PixelPattern
  3366  003956  0100               	movlb	0	; () banked
  3367  003958  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3368  00395A  0012               	return	
  3369  00395C                     __end_of_PatternOff:
  3370                           	opt stack 0
  3371                           tosu	equ	0xFFF
  3372                           tosh	equ	0xFFE
  3373                           tosl	equ	0xFFD
  3374                           pclath	equ	0xFFA
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           postdec1	equ	0xFE5
  3384                           fsr1h	equ	0xFE2
  3385                           fsr1l	equ	0xFE1
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _ShowPattern *****************
  3394 ;; Defined at:
  3395 ;;		line 263 in file "Pattern_ControlService.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3409 ;;      Params:         0       0       0       0
  3410 ;;      Locals:         0       0       0       0
  3411 ;;      Temps:          0       0       0       0
  3412 ;;      Totals:         0       0       0       0
  3413 ;;Total ram usage:        0 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:   13
  3416 ;; This function calls:
  3417 ;;		_DotStar_Show
  3418 ;;		_ES_Timer_InitTimer
  3419 ;;		_UpdatePattern
  3420 ;; This function is called by:
  3421 ;;		_RunPatternControlService
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text14
  3426  003B16                     __ptext14:
  3427                           	opt stack 0
  3428  003B16                     _ShowPattern:
  3429                           	opt stack 15
  3430                           
  3431                           ;Pattern_ControlService.c: 265: ES_Timer_InitTimer(0,PatternConfigs[3]);
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;incstack = 0
  3435  003B16  C0FA  F060         	movff	_PatternConfigs+3,ES_Timer_InitTimer@NewTime
  3436  003B1A  0100               	movlb	0	; () banked
  3437  003B1C  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3438  003B1E  0E00               	movlw	0
  3439  003B20  ECF9  F019         	call	_ES_Timer_InitTimer
  3440                           
  3441                           ;Pattern_ControlService.c: 267: DotStar_Show(UpdatePattern());
  3442  003B24  EC23  F00F         	call	_UpdatePattern	;wreg free
  3443  003B28  C090  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3444  003B2C  C091  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3445  003B30  ECDA  F012         	call	_DotStar_Show	;wreg free
  3446  003B34  0012               	return		;funcret
  3447  003B36                     __end_of_ShowPattern:
  3448                           	opt stack 0
  3449                           tosu	equ	0xFFF
  3450                           tosh	equ	0xFFE
  3451                           tosl	equ	0xFFD
  3452                           pclath	equ	0xFFA
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           postdec1	equ	0xFE5
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _UpdatePattern *****************
  3472 ;; Defined at:
  3473 ;;		line 91 in file "Pattern_PtrnGenerator.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  i               1   53[BANK0 ] unsigned char 
  3478 ;;  i               1   52[BANK0 ] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  2   48[BANK0 ] PTR unsigned int 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3488 ;;      Params:         0       2       0       0
  3489 ;;      Locals:         0       4       0       0
  3490 ;;      Temps:          0       0       0       0
  3491 ;;      Totals:         0       6       0       0
  3492 ;;Total ram usage:        6 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    9
  3495 ;; This function calls:
  3496 ;;		_BrokenPinwheel
  3497 ;;		_CenterBreathe
  3498 ;;		_DoubleFadedLoop
  3499 ;;		_FullPulseHold
  3500 ;;		_HueTest
  3501 ;;		_MirroredQuadrants
  3502 ;;		_SingleFadedLoop
  3503 ;;		_SingleFocusBreathe
  3504 ;;		___awdiv
  3505 ;; This function is called by:
  3506 ;;		_ShowPattern
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text15
  3511  001E46                     __ptext15:
  3512                           	opt stack 0
  3513  001E46                     _UpdatePattern:
  3514                           	opt stack 18
  3515                           
  3516                           ;Pattern_PtrnGenerator.c: 93: switch(*PatternID){
  3517                           
  3518                           ;incstack = 0
  3519  001E46  D177               	goto	l3703
  3520  001E48                     l3655:
  3521                           
  3522                           ;Pattern_PtrnGenerator.c: 97: for(uint8_t i=0;i<76;i++){
  3523  001E48  0E00               	movlw	0
  3524  001E4A  0100               	movlb	0	; () banked
  3525  001E4C  6F94               	movwf	UpdatePattern@i& (0+255),b
  3526  001E4E                     l3657:
  3527                           
  3528                           ; BSR set to: 0
  3529  001E4E  0E4B               	movlw	75
  3530  001E50  0100               	movlb	0	; () banked
  3531  001E52  6594               	cpfsgt	UpdatePattern@i& (0+255),b
  3532  001E54  D001               	goto	l3661
  3533  001E56  D193               	goto	l3705
  3534  001E58                     l3661:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;Pattern_PtrnGenerator.c: 98: PixelPattern[i] = 0x0;
  3538  001E58  0100               	movlb	0	; () banked
  3539  001E5A  5194               	movf	UpdatePattern@i& (0+255),w,b
  3540  001E5C  0D02               	mullw	2
  3541  001E5E  0E20               	movlw	low _PixelPattern
  3542  001E60  24F3               	addwf	prodl,w,c
  3543  001E62  6ED9               	movwf	fsr2l,c
  3544  001E64  0E01               	movlw	high _PixelPattern
  3545  001E66  20F4               	addwfc	prodh,w,c
  3546  001E68  6EDA               	movwf	fsr2h,c
  3547  001E6A  0E00               	movlw	0
  3548  001E6C  6EDE               	movwf	postinc2,c
  3549  001E6E  0E00               	movlw	0
  3550  001E70  6EDD               	movwf	postdec2,c
  3551                           
  3552                           ; BSR set to: 0
  3553  001E72  0100               	movlb	0	; () banked
  3554  001E74  2B94               	incf	UpdatePattern@i& (0+255),f,b
  3555  001E76  D7EB               	goto	l3657
  3556  001E78                     l3667:
  3557                           
  3558                           ;Pattern_PtrnGenerator.c: 104: FullPulseHold(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3559  001E78  0E20               	movlw	low _PixelPattern
  3560  001E7A  0100               	movlb	0	; () banked
  3561  001E7C  6F60               	movwf	FullPulseHold@ptrnPointer& (0+255),b
  3562  001E7E  0E01               	movlw	high _PixelPattern
  3563  001E80  0100               	movlb	0	; () banked
  3564  001E82  6F61               	movwf	(FullPulseHold@ptrnPointer+1)& (0+255),b
  3565  001E84  0EF2               	movlw	low _PatternStepCounter
  3566  001E86  0100               	movlb	0	; () banked
  3567  001E88  6F62               	movwf	FullPulseHold@ptrnStepCounter& (0+255),b
  3568  001E8A  0E00               	movlw	high _PatternStepCounter
  3569  001E8C  0100               	movlb	0	; () banked
  3570  001E8E  6F63               	movwf	(FullPulseHold@ptrnStepCounter+1)& (0+255),b
  3571  001E90  0EE9               	movlw	low _CycleCounter
  3572  001E92  0100               	movlb	0	; () banked
  3573  001E94  6F64               	movwf	FullPulseHold@cycleCounter& (0+255),b
  3574  001E96  0E00               	movlw	high _CycleCounter
  3575  001E98  0100               	movlb	0	; () banked
  3576  001E9A  6F65               	movwf	(FullPulseHold@cycleCounter+1)& (0+255),b
  3577  001E9C  0E87               	movlw	135
  3578  001E9E  0100               	movlb	0	; () banked
  3579  001EA0  6F66               	movwf	FullPulseHold@base_hue& (0+255),b
  3580  001EA2  0E04               	movlw	4
  3581  001EA4  0100               	movlb	0	; () banked
  3582  001EA6  6F67               	movwf	FullPulseHold@base_sat& (0+255),b
  3583  001EA8  0E00               	movlw	0
  3584  001EAA  0100               	movlb	0	; () banked
  3585  001EAC  6F68               	movwf	FullPulseHold@15718& (0+255),b
  3586  001EAE  0E00               	movlw	0
  3587  001EB0  0100               	movlb	0	; () banked
  3588  001EB2  6F69               	movwf	(FullPulseHold@15718+1)& (0+255),b
  3589  001EB4  EC13  F012         	call	_FullPulseHold	;wreg free
  3590                           
  3591                           ;Pattern_PtrnGenerator.c: 105: break;
  3592  001EB8  D162               	goto	l3705
  3593  001EBA                     l3669:
  3594                           
  3595                           ;Pattern_PtrnGenerator.c: 108: CenterBreathe(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3596  001EBA  0E20               	movlw	low _PixelPattern
  3597  001EBC  0100               	movlb	0	; () banked
  3598  001EBE  6F68               	movwf	CenterBreathe@ptrnPointer& (0+255),b
  3599  001EC0  0E01               	movlw	high _PixelPattern
  3600  001EC2  0100               	movlb	0	; () banked
  3601  001EC4  6F69               	movwf	(CenterBreathe@ptrnPointer+1)& (0+255),b
  3602  001EC6  0EF2               	movlw	low _PatternStepCounter
  3603  001EC8  0100               	movlb	0	; () banked
  3604  001ECA  6F6A               	movwf	CenterBreathe@ptrnStepCounter& (0+255),b
  3605  001ECC  0E00               	movlw	high _PatternStepCounter
  3606  001ECE  0100               	movlb	0	; () banked
  3607  001ED0  6F6B               	movwf	(CenterBreathe@ptrnStepCounter+1)& (0+255),b
  3608  001ED2  0EE9               	movlw	low _CycleCounter
  3609  001ED4  0100               	movlb	0	; () banked
  3610  001ED6  6F6C               	movwf	CenterBreathe@cycleCounter& (0+255),b
  3611  001ED8  0E00               	movlw	high _CycleCounter
  3612  001EDA  0100               	movlb	0	; () banked
  3613  001EDC  6F6D               	movwf	(CenterBreathe@cycleCounter+1)& (0+255),b
  3614  001EDE  0E87               	movlw	135
  3615  001EE0  0100               	movlb	0	; () banked
  3616  001EE2  6F6E               	movwf	CenterBreathe@base_hue& (0+255),b
  3617  001EE4  0E04               	movlw	4
  3618  001EE6  0100               	movlb	0	; () banked
  3619  001EE8  6F6F               	movwf	CenterBreathe@base_sat& (0+255),b
  3620  001EEA  0E00               	movlw	0
  3621  001EEC  0100               	movlb	0	; () banked
  3622  001EEE  6F70               	movwf	CenterBreathe@15728& (0+255),b
  3623  001EF0  0E00               	movlw	0
  3624  001EF2  0100               	movlb	0	; () banked
  3625  001EF4  6F71               	movwf	(CenterBreathe@15728+1)& (0+255),b
  3626  001EF6  ECD6  F00B         	call	_CenterBreathe	;wreg free
  3627                           
  3628                           ;Pattern_PtrnGenerator.c: 109: break;
  3629  001EFA  D141               	goto	l3705
  3630  001EFC                     l3671:
  3631                           
  3632                           ;Pattern_PtrnGenerator.c: 112: SingleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, 32, 0x0F, 0);
  3633  001EFC  0E20               	movlw	low _PixelPattern
  3634  001EFE  0100               	movlb	0	; () banked
  3635  001F00  6F68               	movwf	SingleFadedLoop@ptrnPointer& (0+255),b
  3636  001F02  0E01               	movlw	high _PixelPattern
  3637  001F04  0100               	movlb	0	; () banked
  3638  001F06  6F69               	movwf	(SingleFadedLoop@ptrnPointer+1)& (0+255),b
  3639  001F08  0EF2               	movlw	low _PatternStepCounter
  3640  001F0A  0100               	movlb	0	; () banked
  3641  001F0C  6F6A               	movwf	SingleFadedLoop@ptrnStepCounter& (0+255),b
  3642  001F0E  0E00               	movlw	high _PatternStepCounter
  3643  001F10  0100               	movlb	0	; () banked
  3644  001F12  6F6B               	movwf	(SingleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3645  001F14  0EE9               	movlw	low _CycleCounter
  3646  001F16  0100               	movlb	0	; () banked
  3647  001F18  6F6C               	movwf	SingleFadedLoop@cycleCounter& (0+255),b
  3648  001F1A  0E00               	movlw	high _CycleCounter
  3649  001F1C  0100               	movlb	0	; () banked
  3650  001F1E  6F6D               	movwf	(SingleFadedLoop@cycleCounter+1)& (0+255),b
  3651  001F20  0E20               	movlw	32
  3652  001F22  0100               	movlb	0	; () banked
  3653  001F24  6F6E               	movwf	SingleFadedLoop@base_hue& (0+255),b
  3654  001F26  0E0F               	movlw	15
  3655  001F28  0100               	movlb	0	; () banked
  3656  001F2A  6F6F               	movwf	SingleFadedLoop@base_sat& (0+255),b
  3657  001F2C  0E00               	movlw	0
  3658  001F2E  0100               	movlb	0	; () banked
  3659  001F30  6F70               	movwf	SingleFadedLoop@15741& (0+255),b
  3660  001F32  0E00               	movlw	0
  3661  001F34  0100               	movlb	0	; () banked
  3662  001F36  6F71               	movwf	(SingleFadedLoop@15741+1)& (0+255),b
  3663  001F38  ECC6  F010         	call	_SingleFadedLoop	;wreg free
  3664                           
  3665                           ;Pattern_PtrnGenerator.c: 113: break;
  3666  001F3C  D120               	goto	l3705
  3667  001F3E                     l3673:
  3668                           
  3669                           ;Pattern_PtrnGenerator.c: 116: SingleFocusBreathe(PixelPattern, &PatternStepCounter, &Cy
      +                          cleCounter, 170, 0x0F, ListeningFocus);
  3670  001F3E  0E20               	movlw	low _PixelPattern
  3671  001F40  0100               	movlb	0	; () banked
  3672  001F42  6F68               	movwf	SingleFocusBreathe@ptrnPointer& (0+255),b
  3673  001F44  0E01               	movlw	high _PixelPattern
  3674  001F46  0100               	movlb	0	; () banked
  3675  001F48  6F69               	movwf	(SingleFocusBreathe@ptrnPointer+1)& (0+255),b
  3676  001F4A  0EF2               	movlw	low _PatternStepCounter
  3677  001F4C  0100               	movlb	0	; () banked
  3678  001F4E  6F6A               	movwf	SingleFocusBreathe@ptrnStepCounter& (0+255),b
  3679  001F50  0E00               	movlw	high _PatternStepCounter
  3680  001F52  0100               	movlb	0	; () banked
  3681  001F54  6F6B               	movwf	(SingleFocusBreathe@ptrnStepCounter+1)& (0+255),b
  3682  001F56  0EE9               	movlw	low _CycleCounter
  3683  001F58  0100               	movlb	0	; () banked
  3684  001F5A  6F6C               	movwf	SingleFocusBreathe@cycleCounter& (0+255),b
  3685  001F5C  0E00               	movlw	high _CycleCounter
  3686  001F5E  0100               	movlb	0	; () banked
  3687  001F60  6F6D               	movwf	(SingleFocusBreathe@cycleCounter+1)& (0+255),b
  3688  001F62  0EAA               	movlw	170
  3689  001F64  0100               	movlb	0	; () banked
  3690  001F66  6F6E               	movwf	SingleFocusBreathe@base_hue& (0+255),b
  3691  001F68  0E0F               	movlw	15
  3692  001F6A  0100               	movlb	0	; () banked
  3693  001F6C  6F6F               	movwf	SingleFocusBreathe@base_sat& (0+255),b
  3694  001F6E  C0D9  F070         	movff	_ListeningFocus,SingleFocusBreathe@focus
  3695  001F72  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusBreathe@focus+1
  3696  001F76  EC7D  F00D         	call	_SingleFocusBreathe	;wreg free
  3697                           
  3698                           ;Pattern_PtrnGenerator.c: 117: break;
  3699  001F7A  D101               	goto	l3705
  3700  001F7C                     l3675:
  3701                           
  3702                           ;Pattern_PtrnGenerator.c: 120: SingleFocusBreathe(PixelPattern, &PatternStepCounter, &Cy
      +                          cleCounter, 85, 0x0F, ListeningFocus);
  3703  001F7C  0E20               	movlw	low _PixelPattern
  3704  001F7E  0100               	movlb	0	; () banked
  3705  001F80  6F68               	movwf	SingleFocusBreathe@ptrnPointer& (0+255),b
  3706  001F82  0E01               	movlw	high _PixelPattern
  3707  001F84  0100               	movlb	0	; () banked
  3708  001F86  6F69               	movwf	(SingleFocusBreathe@ptrnPointer+1)& (0+255),b
  3709  001F88  0EF2               	movlw	low _PatternStepCounter
  3710  001F8A  0100               	movlb	0	; () banked
  3711  001F8C  6F6A               	movwf	SingleFocusBreathe@ptrnStepCounter& (0+255),b
  3712  001F8E  0E00               	movlw	high _PatternStepCounter
  3713  001F90  0100               	movlb	0	; () banked
  3714  001F92  6F6B               	movwf	(SingleFocusBreathe@ptrnStepCounter+1)& (0+255),b
  3715  001F94  0EE9               	movlw	low _CycleCounter
  3716  001F96  0100               	movlb	0	; () banked
  3717  001F98  6F6C               	movwf	SingleFocusBreathe@cycleCounter& (0+255),b
  3718  001F9A  0E00               	movlw	high _CycleCounter
  3719  001F9C  0100               	movlb	0	; () banked
  3720  001F9E  6F6D               	movwf	(SingleFocusBreathe@cycleCounter+1)& (0+255),b
  3721  001FA0  0E55               	movlw	85
  3722  001FA2  0100               	movlb	0	; () banked
  3723  001FA4  6F6E               	movwf	SingleFocusBreathe@base_hue& (0+255),b
  3724  001FA6  0E0F               	movlw	15
  3725  001FA8  0100               	movlb	0	; () banked
  3726  001FAA  6F6F               	movwf	SingleFocusBreathe@base_sat& (0+255),b
  3727  001FAC  C0D9  F070         	movff	_ListeningFocus,SingleFocusBreathe@focus
  3728  001FB0  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusBreathe@focus+1
  3729  001FB4  EC7D  F00D         	call	_SingleFocusBreathe	;wreg free
  3730                           
  3731                           ;Pattern_PtrnGenerator.c: 121: break;
  3732  001FB8  D0E2               	goto	l3705
  3733  001FBA                     l3677:
  3734                           
  3735                           ;Pattern_PtrnGenerator.c: 126: MirroredQuadrants(PixelPattern, &PatternStepCounter, &Cyc
      +                          leCounter, 135, 0x04, 0);
  3736  001FBA  0E20               	movlw	low _PixelPattern
  3737  001FBC  0100               	movlb	0	; () banked
  3738  001FBE  6F68               	movwf	MirroredQuadrants@ptrnPointer& (0+255),b
  3739  001FC0  0E01               	movlw	high _PixelPattern
  3740  001FC2  0100               	movlb	0	; () banked
  3741  001FC4  6F69               	movwf	(MirroredQuadrants@ptrnPointer+1)& (0+255),b
  3742  001FC6  0EF2               	movlw	low _PatternStepCounter
  3743  001FC8  0100               	movlb	0	; () banked
  3744  001FCA  6F6A               	movwf	MirroredQuadrants@ptrnStepCounter& (0+255),b
  3745  001FCC  0E00               	movlw	high _PatternStepCounter
  3746  001FCE  0100               	movlb	0	; () banked
  3747  001FD0  6F6B               	movwf	(MirroredQuadrants@ptrnStepCounter+1)& (0+255),b
  3748  001FD2  0EE9               	movlw	low _CycleCounter
  3749  001FD4  0100               	movlb	0	; () banked
  3750  001FD6  6F6C               	movwf	MirroredQuadrants@cycleCounter& (0+255),b
  3751  001FD8  0E00               	movlw	high _CycleCounter
  3752  001FDA  0100               	movlb	0	; () banked
  3753  001FDC  6F6D               	movwf	(MirroredQuadrants@cycleCounter+1)& (0+255),b
  3754  001FDE  0E87               	movlw	135
  3755  001FE0  0100               	movlb	0	; () banked
  3756  001FE2  6F6E               	movwf	MirroredQuadrants@base_hue& (0+255),b
  3757  001FE4  0E04               	movlw	4
  3758  001FE6  0100               	movlb	0	; () banked
  3759  001FE8  6F6F               	movwf	MirroredQuadrants@base_sat& (0+255),b
  3760  001FEA  0E00               	movlw	0
  3761  001FEC  0100               	movlb	0	; () banked
  3762  001FEE  6F70               	movwf	MirroredQuadrants@15794& (0+255),b
  3763  001FF0  0E00               	movlw	0
  3764  001FF2  0100               	movlb	0	; () banked
  3765  001FF4  6F71               	movwf	(MirroredQuadrants@15794+1)& (0+255),b
  3766  001FF6  ECC0  F009         	call	_MirroredQuadrants	;wreg free
  3767                           
  3768                           ;Pattern_PtrnGenerator.c: 127: break;
  3769  001FFA  D0C1               	goto	l3705
  3770  001FFC                     l3679:
  3771                           
  3772                           ;Pattern_PtrnGenerator.c: 130: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3773  001FFC  0100               	movlb	0	; () banked
  3774  001FFE  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3775  002000  0DFF               	mullw	255
  3776  002002  CFF3 F060          	movff	prodl,___awdiv@dividend
  3777  002006  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3778  00200A  0E00               	movlw	0
  3779  00200C  0100               	movlb	0	; () banked
  3780  00200E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3781  002010  0E4C               	movlw	76
  3782  002012  6F62               	movwf	___awdiv@divisor& (0+255),b
  3783  002014  ECBC  F017         	call	___awdiv	;wreg free
  3784  002018  0100               	movlb	0	; () banked
  3785  00201A  5160               	movf	?___awdiv& (0+255),w,b
  3786  00201C  0100               	movlb	0	; () banked
  3787  00201E  6F92               	movwf	_UpdatePattern$1991& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Pattern_PtrnGenerator.c: 130: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3791  002020  0E20               	movlw	low _PixelPattern
  3792  002022  0100               	movlb	0	; () banked
  3793  002024  6F68               	movwf	DoubleFadedLoop@ptrnPointer& (0+255),b
  3794  002026  0E01               	movlw	high _PixelPattern
  3795  002028  0100               	movlb	0	; () banked
  3796  00202A  6F69               	movwf	(DoubleFadedLoop@ptrnPointer+1)& (0+255),b
  3797  00202C  0EF2               	movlw	low _PatternStepCounter
  3798  00202E  0100               	movlb	0	; () banked
  3799  002030  6F6A               	movwf	DoubleFadedLoop@ptrnStepCounter& (0+255),b
  3800  002032  0E00               	movlw	high _PatternStepCounter
  3801  002034  0100               	movlb	0	; () banked
  3802  002036  6F6B               	movwf	(DoubleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3803  002038  0EE9               	movlw	low _CycleCounter
  3804  00203A  0100               	movlb	0	; () banked
  3805  00203C  6F6C               	movwf	DoubleFadedLoop@cycleCounter& (0+255),b
  3806  00203E  0E00               	movlw	high _CycleCounter
  3807  002040  0100               	movlb	0	; () banked
  3808  002042  6F6D               	movwf	(DoubleFadedLoop@cycleCounter+1)& (0+255),b
  3809  002044  C092  F06E         	movff	_UpdatePattern$1991,DoubleFadedLoop@base_hue
  3810  002048  0E0F               	movlw	15
  3811  00204A  0100               	movlb	0	; () banked
  3812  00204C  6F6F               	movwf	DoubleFadedLoop@base_sat& (0+255),b
  3813  00204E  0E00               	movlw	0
  3814  002050  0100               	movlb	0	; () banked
  3815  002052  6F70               	movwf	DoubleFadedLoop@15751& (0+255),b
  3816  002054  0E00               	movlw	0
  3817  002056  0100               	movlb	0	; () banked
  3818  002058  6F71               	movwf	(DoubleFadedLoop@15751+1)& (0+255),b
  3819  00205A  ECDF  F004         	call	_DoubleFadedLoop	;wreg free
  3820                           
  3821                           ;Pattern_PtrnGenerator.c: 131: break;
  3822  00205E  D08F               	goto	l3705
  3823  002060                     l3683:
  3824                           
  3825                           ;Pattern_PtrnGenerator.c: 134: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3826  002060  0100               	movlb	0	; () banked
  3827  002062  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3828  002064  0DFF               	mullw	255
  3829  002066  CFF3 F060          	movff	prodl,___awdiv@dividend
  3830  00206A  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3831  00206E  0E00               	movlw	0
  3832  002070  0100               	movlb	0	; () banked
  3833  002072  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3834  002074  0E19               	movlw	25
  3835  002076  6F62               	movwf	___awdiv@divisor& (0+255),b
  3836  002078  ECBC  F017         	call	___awdiv	;wreg free
  3837  00207C  0100               	movlb	0	; () banked
  3838  00207E  5160               	movf	?___awdiv& (0+255),w,b
  3839  002080  0100               	movlb	0	; () banked
  3840  002082  6F93               	movwf	_UpdatePattern$1992& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;Pattern_PtrnGenerator.c: 134: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3844  002084  0E20               	movlw	low _PixelPattern
  3845  002086  0100               	movlb	0	; () banked
  3846  002088  6F68               	movwf	BrokenPinwheel@ptrnPointer& (0+255),b
  3847  00208A  0E01               	movlw	high _PixelPattern
  3848  00208C  0100               	movlb	0	; () banked
  3849  00208E  6F69               	movwf	(BrokenPinwheel@ptrnPointer+1)& (0+255),b
  3850  002090  0EF2               	movlw	low _PatternStepCounter
  3851  002092  0100               	movlb	0	; () banked
  3852  002094  6F6A               	movwf	BrokenPinwheel@ptrnStepCounter& (0+255),b
  3853  002096  0E00               	movlw	high _PatternStepCounter
  3854  002098  0100               	movlb	0	; () banked
  3855  00209A  6F6B               	movwf	(BrokenPinwheel@ptrnStepCounter+1)& (0+255),b
  3856  00209C  0EE9               	movlw	low _CycleCounter
  3857  00209E  0100               	movlb	0	; () banked
  3858  0020A0  6F6C               	movwf	BrokenPinwheel@cycleCounter& (0+255),b
  3859  0020A2  0E00               	movlw	high _CycleCounter
  3860  0020A4  0100               	movlb	0	; () banked
  3861  0020A6  6F6D               	movwf	(BrokenPinwheel@cycleCounter+1)& (0+255),b
  3862  0020A8  C093  F06E         	movff	_UpdatePattern$1992,BrokenPinwheel@base_hue
  3863  0020AC  0E0F               	movlw	15
  3864  0020AE  0100               	movlb	0	; () banked
  3865  0020B0  6F6F               	movwf	BrokenPinwheel@base_sat& (0+255),b
  3866  0020B2  0E00               	movlw	0
  3867  0020B4  0100               	movlb	0	; () banked
  3868  0020B6  6F70               	movwf	BrokenPinwheel@15776& (0+255),b
  3869  0020B8  0E00               	movlw	0
  3870  0020BA  0100               	movlb	0	; () banked
  3871  0020BC  6F71               	movwf	(BrokenPinwheel@15776+1)& (0+255),b
  3872  0020BE  ECDC  F001         	call	_BrokenPinwheel	;wreg free
  3873                           
  3874                           ;Pattern_PtrnGenerator.c: 135: break;
  3875  0020C2  D05D               	goto	l3705
  3876  0020C4                     l3687:
  3877                           
  3878                           ;Pattern_PtrnGenerator.c: 147: HueTest(PixelPattern, &PatternStepCounter, &CycleCounter,
      +                           0, 0x0F, 0);
  3879  0020C4  0E20               	movlw	low _PixelPattern
  3880  0020C6  0100               	movlb	0	; () banked
  3881  0020C8  6F73               	movwf	HueTest@ptrnPointer& (0+255),b
  3882  0020CA  0E01               	movlw	high _PixelPattern
  3883  0020CC  0100               	movlb	0	; () banked
  3884  0020CE  6F74               	movwf	(HueTest@ptrnPointer+1)& (0+255),b
  3885  0020D0  0EF2               	movlw	low _PatternStepCounter
  3886  0020D2  0100               	movlb	0	; () banked
  3887  0020D4  6F75               	movwf	HueTest@ptrnStepCounter& (0+255),b
  3888  0020D6  0E00               	movlw	high _PatternStepCounter
  3889  0020D8  0100               	movlb	0	; () banked
  3890  0020DA  6F76               	movwf	(HueTest@ptrnStepCounter+1)& (0+255),b
  3891  0020DC  0EE9               	movlw	low _CycleCounter
  3892  0020DE  0100               	movlb	0	; () banked
  3893  0020E0  6F77               	movwf	HueTest@cycleCounter& (0+255),b
  3894  0020E2  0E00               	movlw	high _CycleCounter
  3895  0020E4  0100               	movlb	0	; () banked
  3896  0020E6  6F78               	movwf	(HueTest@cycleCounter+1)& (0+255),b
  3897  0020E8  0E00               	movlw	0
  3898  0020EA  0100               	movlb	0	; () banked
  3899  0020EC  6F79               	movwf	HueTest@base_hue& (0+255),b
  3900  0020EE  0E0F               	movlw	15
  3901  0020F0  0100               	movlb	0	; () banked
  3902  0020F2  6F7A               	movwf	HueTest@base_sat& (0+255),b
  3903  0020F4  0E00               	movlw	0
  3904  0020F6  0100               	movlb	0	; () banked
  3905  0020F8  6F7B               	movwf	HueTest@15710& (0+255),b
  3906  0020FA  0E00               	movlw	0
  3907  0020FC  0100               	movlb	0	; () banked
  3908  0020FE  6F7C               	movwf	(HueTest@15710+1)& (0+255),b
  3909  002100  EC13  F015         	call	_HueTest	;wreg free
  3910                           
  3911                           ;Pattern_PtrnGenerator.c: 148: break;
  3912  002104  D03C               	goto	l3705
  3913  002106                     l3689:
  3914                           
  3915                           ;Pattern_PtrnGenerator.c: 152: for(uint8_t i=0;i<76;i++){
  3916  002106  0E00               	movlw	0
  3917  002108  0100               	movlb	0	; () banked
  3918  00210A  6F95               	movwf	UpdatePattern@i_1366& (0+255),b
  3919  00210C                     l3691:
  3920                           
  3921                           ; BSR set to: 0
  3922  00210C  0E4B               	movlw	75
  3923  00210E  0100               	movlb	0	; () banked
  3924  002110  6595               	cpfsgt	UpdatePattern@i_1366& (0+255),b
  3925  002112  D001               	goto	l3695
  3926  002114  D034               	goto	l3705
  3927  002116                     l3695:
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;Pattern_PtrnGenerator.c: 153: PixelPattern[i] = 0x0;
  3931  002116  0100               	movlb	0	; () banked
  3932  002118  5195               	movf	UpdatePattern@i_1366& (0+255),w,b
  3933  00211A  0D02               	mullw	2
  3934  00211C  0E20               	movlw	low _PixelPattern
  3935  00211E  24F3               	addwf	prodl,w,c
  3936  002120  6ED9               	movwf	fsr2l,c
  3937  002122  0E01               	movlw	high _PixelPattern
  3938  002124  20F4               	addwfc	prodh,w,c
  3939  002126  6EDA               	movwf	fsr2h,c
  3940  002128  0E00               	movlw	0
  3941  00212A  6EDE               	movwf	postinc2,c
  3942  00212C  0E00               	movlw	0
  3943  00212E  6EDD               	movwf	postdec2,c
  3944                           
  3945                           ; BSR set to: 0
  3946  002130  0100               	movlb	0	; () banked
  3947  002132  2B95               	incf	UpdatePattern@i_1366& (0+255),f,b
  3948  002134  D7EB               	goto	l3691
  3949  002136                     l3703:
  3950  002136  C0DB  FFD9         	movff	_PatternID,fsr2l
  3951  00213A  C0DC  FFDA         	movff	_PatternID+1,fsr2h
  3952  00213E  50DF               	movf	indf2,w,c
  3953                           
  3954                           ; Switch size 1, requested type "space"
  3955                           ; Number of cases is 10, Range of values is 0 to 255
  3956                           ; switch strategies available:
  3957                           ; Name         Instructions Cycles
  3958                           ; simple_byte           31    16 (average)
  3959                           ;	Chosen strategy is simple_byte
  3960  002140  0A00               	xorlw	0	; case 0
  3961  002142  B4D8               	btfsc	status,2,c
  3962  002144  D681               	goto	l3655
  3963  002146  0A01               	xorlw	1	; case 1
  3964  002148  B4D8               	btfsc	status,2,c
  3965  00214A  D696               	goto	l3667
  3966  00214C  0A03               	xorlw	3	; case 2
  3967  00214E  B4D8               	btfsc	status,2,c
  3968  002150  D6B4               	goto	l3669
  3969  002152  0A01               	xorlw	1	; case 3
  3970  002154  B4D8               	btfsc	status,2,c
  3971  002156  D712               	goto	l3675
  3972  002158  0A07               	xorlw	7	; case 4
  3973  00215A  B4D8               	btfsc	status,2,c
  3974  00215C  D6CF               	goto	l3671
  3975  00215E  0A01               	xorlw	1	; case 5
  3976  002160  B4D8               	btfsc	status,2,c
  3977  002162  D6ED               	goto	l3673
  3978  002164  0A03               	xorlw	3	; case 6
  3979  002166  B4D8               	btfsc	status,2,c
  3980  002168  D728               	goto	l3677
  3981  00216A  0A01               	xorlw	1	; case 7
  3982  00216C  B4D8               	btfsc	status,2,c
  3983  00216E  D746               	goto	l3679
  3984  002170  0A0F               	xorlw	15	; case 8
  3985  002172  B4D8               	btfsc	status,2,c
  3986  002174  D775               	goto	l3683
  3987  002176  0AF7               	xorlw	247	; case 255
  3988  002178  B4D8               	btfsc	status,2,c
  3989  00217A  D7A4               	goto	l3687
  3990  00217C  D7C4               	goto	l3689
  3991  00217E                     l3705:
  3992                           
  3993                           ;Pattern_PtrnGenerator.c: 158: return PixelPattern;
  3994  00217E  0E20               	movlw	low _PixelPattern
  3995  002180  0100               	movlb	0	; () banked
  3996  002182  6F90               	movwf	?_UpdatePattern& (0+255),b
  3997  002184  0E01               	movlw	high _PixelPattern
  3998  002186  0100               	movlb	0	; () banked
  3999  002188  6F91               	movwf	(?_UpdatePattern+1)& (0+255),b
  4000  00218A  0012               	return	
  4001  00218C                     __end_of_UpdatePattern:
  4002                           	opt stack 0
  4003                           tosu	equ	0xFFF
  4004                           tosh	equ	0xFFE
  4005                           tosl	equ	0xFFD
  4006                           pclath	equ	0xFFA
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function _SingleFocusBreathe *****************
  4026 ;; Defined at:
  4027 ;;		line 221 in file "Pattern_PtrnFunctions.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4030 ;;		 -> PixelPattern(152), 
  4031 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4032 ;;		 -> PatternStepCounter(1), 
  4033 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4034 ;;		 -> CycleCounter(4), 
  4035 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4036 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4037 ;;  focus           2   16[BANK0 ] PTR void 
  4038 ;;		 -> NULL(0), PatternConfigs(4), 
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  i               1   42[BANK0 ] unsigned char 
  4041 ;;  head            1   41[BANK0 ] unsigned char 
  4042 ;;  x               1   40[BANK0 ] unsigned char 
  4043 ;;  pulseWidth      1   39[BANK0 ] unsigned char 
  4044 ;;  val             1   38[BANK0 ] unsigned char 
  4045 ;;  fade_thresh     1   37[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4055 ;;      Params:         0      10       0       0
  4056 ;;      Locals:         0      14       0       0
  4057 ;;      Temps:          0      11       0       0
  4058 ;;      Totals:         0      35       0       0
  4059 ;;Total ram usage:       35 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    8
  4062 ;; This function calls:
  4063 ;;		___awdiv
  4064 ;;		___awmod
  4065 ;; This function is called by:
  4066 ;;		_UpdatePattern
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text16
  4071  001AFA                     __ptext16:
  4072                           	opt stack 0
  4073  001AFA                     _SingleFocusBreathe:
  4074                           	opt stack 18
  4075                           
  4076                           ;Pattern_PtrnFunctions.c: 222: static bool rising = 1;
  4077                           ;Pattern_PtrnFunctions.c: 223: uint8_t fade_thresh = 8;
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;incstack = 0
  4081  001AFA  0E08               	movlw	8
  4082  001AFC  0100               	movlb	0	; () banked
  4083  001AFE  6F85               	movwf	SingleFocusBreathe@fade_thresh& (0+255),b
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;Pattern_PtrnFunctions.c: 224: uint8_t val, x, pulseWidth;
  4087                           ;Pattern_PtrnFunctions.c: 225: uint8_t head = *(uint8_t*)focus;
  4088  001B00  C070  FFD9         	movff	SingleFocusBreathe@focus,fsr2l
  4089  001B04  C071  FFDA         	movff	SingleFocusBreathe@focus+1,fsr2h
  4090  001B08  50DF               	movf	indf2,w,c
  4091  001B0A  0100               	movlb	0	; () banked
  4092  001B0C  6F89               	movwf	SingleFocusBreathe@head& (0+255),b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;Pattern_PtrnFunctions.c: 227: pulseWidth = 8;
  4096  001B0E  0E08               	movlw	8
  4097  001B10  0100               	movlb	0	; () banked
  4098  001B12  6F87               	movwf	SingleFocusBreathe@pulseWidth& (0+255),b
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;Pattern_PtrnFunctions.c: 228: for(uint8_t i=0;i<76;i++){
  4102  001B14  0E00               	movlw	0
  4103  001B16  0100               	movlb	0	; () banked
  4104  001B18  6F8A               	movwf	SingleFocusBreathe@i& (0+255),b
  4105  001B1A                     l3541:
  4106                           
  4107                           ; BSR set to: 0
  4108  001B1A  0E4B               	movlw	75
  4109  001B1C  0100               	movlb	0	; () banked
  4110  001B1E  658A               	cpfsgt	SingleFocusBreathe@i& (0+255),b
  4111  001B20  D001               	goto	l3545
  4112  001B22  D152               	goto	l3573
  4113  001B24                     l3545:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;Pattern_PtrnFunctions.c: 230: x = ((((76+i-head)%76) < ((76+head-i)%76)) ? ((76+i-head)
      +                          %76) : ((76+head-i)%76));
  4117  001B24  0100               	movlb	0	; () banked
  4118  001B26  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4119  001B28  0100               	movlb	0	; () banked
  4120  001B2A  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4121  001B2C  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4122  001B2E  0100               	movlb	0	; () banked
  4123  001B30  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4124  001B32  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4125  001B34  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4126  001B36  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4127  001B38  0100               	movlb	0	; () banked
  4128  001B3A  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4129  001B3C  0100               	movlb	0	; () banked
  4130  001B3E  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4131  001B40  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4132  001B42  0100               	movlb	0	; () banked
  4133  001B44  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4134  001B46  0100               	movlb	0	; () banked
  4135  001B48  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4136  001B4A  0100               	movlb	0	; () banked
  4137  001B4C  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4138  001B4E  0100               	movlb	0	; () banked
  4139  001B50  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4140  001B52  0E4C               	movlw	76
  4141  001B54  0100               	movlb	0	; () banked
  4142  001B56  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4143  001B58  0100               	movlb	0	; () banked
  4144  001B5A  6F60               	movwf	___awmod@dividend& (0+255),b
  4145  001B5C  0E00               	movlw	0
  4146  001B5E  0100               	movlb	0	; () banked
  4147  001B60  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4148  001B62  0100               	movlb	0	; () banked
  4149  001B64  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4150  001B66  0E00               	movlw	0
  4151  001B68  0100               	movlb	0	; () banked
  4152  001B6A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4153  001B6C  0E4C               	movlw	76
  4154  001B6E  6F62               	movwf	___awmod@divisor& (0+255),b
  4155  001B70  EC20  F019         	call	___awmod	;wreg free
  4156  001B74  C060  F076         	movff	?___awmod,??_SingleFocusBreathe+4
  4157  001B78  C061  F077         	movff	?___awmod+1,??_SingleFocusBreathe+5
  4158  001B7C  0100               	movlb	0	; () banked
  4159  001B7E  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4160  001B80  0100               	movlb	0	; () banked
  4161  001B82  6F78               	movwf	(??_SingleFocusBreathe+6)& (0+255),b
  4162  001B84  6B79               	clrf	(??_SingleFocusBreathe+7)& (0+255),b
  4163  001B86  0100               	movlb	0	; () banked
  4164  001B88  1F78               	comf	(??_SingleFocusBreathe+6)& (0+255),f,b
  4165  001B8A  1F79               	comf	(??_SingleFocusBreathe+7)& (0+255),f,b
  4166  001B8C  4B78               	infsnz	(??_SingleFocusBreathe+6)& (0+255),f,b
  4167  001B8E  2B79               	incf	(??_SingleFocusBreathe+7)& (0+255),f,b
  4168  001B90  0100               	movlb	0	; () banked
  4169  001B92  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4170  001B94  0100               	movlb	0	; () banked
  4171  001B96  6F7A               	movwf	(??_SingleFocusBreathe+8)& (0+255),b
  4172  001B98  6B7B               	clrf	(??_SingleFocusBreathe+9)& (0+255),b
  4173  001B9A  0100               	movlb	0	; () banked
  4174  001B9C  5178               	movf	(??_SingleFocusBreathe+6)& (0+255),w,b
  4175  001B9E  0100               	movlb	0	; () banked
  4176  001BA0  277A               	addwf	(??_SingleFocusBreathe+8)& (0+255),f,b
  4177  001BA2  0100               	movlb	0	; () banked
  4178  001BA4  5179               	movf	(??_SingleFocusBreathe+7)& (0+255),w,b
  4179  001BA6  0100               	movlb	0	; () banked
  4180  001BA8  237B               	addwfc	(??_SingleFocusBreathe+9)& (0+255),f,b
  4181  001BAA  0E4C               	movlw	76
  4182  001BAC  0100               	movlb	0	; () banked
  4183  001BAE  257A               	addwf	(??_SingleFocusBreathe+8)& (0+255),w,b
  4184  001BB0  0100               	movlb	0	; () banked
  4185  001BB2  6F60               	movwf	___awmod@dividend& (0+255),b
  4186  001BB4  0E00               	movlw	0
  4187  001BB6  0100               	movlb	0	; () banked
  4188  001BB8  217B               	addwfc	(??_SingleFocusBreathe+9)& (0+255),w,b
  4189  001BBA  0100               	movlb	0	; () banked
  4190  001BBC  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4191  001BBE  0E00               	movlw	0
  4192  001BC0  0100               	movlb	0	; () banked
  4193  001BC2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4194  001BC4  0E4C               	movlw	76
  4195  001BC6  6F62               	movwf	___awmod@divisor& (0+255),b
  4196  001BC8  EC20  F019         	call	___awmod	;wreg free
  4197  001BCC  0100               	movlb	0	; () banked
  4198  001BCE  5160               	movf	?___awmod& (0+255),w,b
  4199  001BD0  0100               	movlb	0	; () banked
  4200  001BD2  5D76               	subwf	(??_SingleFocusBreathe+4)& (0+255),w,b
  4201  001BD4  0100               	movlb	0	; () banked
  4202  001BD6  5177               	movf	(??_SingleFocusBreathe+5)& (0+255),w,b
  4203  001BD8  0A80               	xorlw	128
  4204  001BDA  0100               	movlb	0	; () banked
  4205  001BDC  6F7C               	movwf	(??_SingleFocusBreathe+10)& (0+255),b
  4206  001BDE  0100               	movlb	0	; () banked
  4207  001BE0  5161               	movf	(?___awmod+1)& (0+255),w,b
  4208  001BE2  0A80               	xorlw	128
  4209  001BE4  0100               	movlb	0	; () banked
  4210  001BE6  597C               	subwfb	(??_SingleFocusBreathe+10)& (0+255),w,b
  4211  001BE8  A0D8               	btfss	status,0,c
  4212  001BEA  D029               	goto	l3549
  4213                           
  4214                           ; BSR set to: 0
  4215  001BEC  0100               	movlb	0	; () banked
  4216  001BEE  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4217  001BF0  0100               	movlb	0	; () banked
  4218  001BF2  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4219  001BF4  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4220  001BF6  0100               	movlb	0	; () banked
  4221  001BF8  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4222  001BFA  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4223  001BFC  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4224  001BFE  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4225  001C00  0100               	movlb	0	; () banked
  4226  001C02  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4227  001C04  0100               	movlb	0	; () banked
  4228  001C06  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4229  001C08  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4230  001C0A  0100               	movlb	0	; () banked
  4231  001C0C  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4232  001C0E  0100               	movlb	0	; () banked
  4233  001C10  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4234  001C12  0100               	movlb	0	; () banked
  4235  001C14  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4236  001C16  0100               	movlb	0	; () banked
  4237  001C18  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4238  001C1A  0E4C               	movlw	76
  4239  001C1C  0100               	movlb	0	; () banked
  4240  001C1E  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4241  001C20  0100               	movlb	0	; () banked
  4242  001C22  6F60               	movwf	___awmod@dividend& (0+255),b
  4243  001C24  0E00               	movlw	0
  4244  001C26  0100               	movlb	0	; () banked
  4245  001C28  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4246  001C2A  0100               	movlb	0	; () banked
  4247  001C2C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4248  001C2E  0E00               	movlw	0
  4249  001C30  0100               	movlb	0	; () banked
  4250  001C32  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4251  001C34  0E4C               	movlw	76
  4252  001C36  6F62               	movwf	___awmod@divisor& (0+255),b
  4253  001C38  EC20  F019         	call	___awmod	;wreg free
  4254  001C3C  D028               	goto	L7
  4255  001C3E                     l3549:
  4256  001C3E  0100               	movlb	0	; () banked
  4257  001C40  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4258  001C42  0100               	movlb	0	; () banked
  4259  001C44  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4260  001C46  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4261  001C48  0100               	movlb	0	; () banked
  4262  001C4A  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4263  001C4C  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4264  001C4E  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4265  001C50  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4266  001C52  0100               	movlb	0	; () banked
  4267  001C54  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4268  001C56  0100               	movlb	0	; () banked
  4269  001C58  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4270  001C5A  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4271  001C5C  0100               	movlb	0	; () banked
  4272  001C5E  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4273  001C60  0100               	movlb	0	; () banked
  4274  001C62  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4275  001C64  0100               	movlb	0	; () banked
  4276  001C66  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4277  001C68  0100               	movlb	0	; () banked
  4278  001C6A  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4279  001C6C  0E4C               	movlw	76
  4280  001C6E  0100               	movlb	0	; () banked
  4281  001C70  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4282  001C72  0100               	movlb	0	; () banked
  4283  001C74  6F60               	movwf	___awmod@dividend& (0+255),b
  4284  001C76  0E00               	movlw	0
  4285  001C78  0100               	movlb	0	; () banked
  4286  001C7A  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4287  001C7C  0100               	movlb	0	; () banked
  4288  001C7E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4289  001C80  0E00               	movlw	0
  4290  001C82  0100               	movlb	0	; () banked
  4291  001C84  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4292  001C86  0E4C               	movlw	76
  4293  001C88  6F62               	movwf	___awmod@divisor& (0+255),b
  4294  001C8A  EC20  F019         	call	___awmod	;wreg free
  4295  001C8E                     L7:
  4296  001C8E  C060  F07D         	movff	?___awmod,_SingleFocusBreathe$1332
  4297  001C92  C061  F07E         	movff	?___awmod+1,_SingleFocusBreathe$1332+1
  4298  001C96  C07D  F088         	movff	_SingleFocusBreathe$1332,SingleFocusBreathe@x
  4299                           
  4300                           ;Pattern_PtrnFunctions.c: 231: val = (x < fade_thresh ? (*ptrnStepCounter>>4) : (x < pul
      +                          seWidth ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  4301  001C9A  0100               	movlb	0	; () banked
  4302  001C9C  5185               	movf	SingleFocusBreathe@fade_thresh& (0+255),w,b
  4303  001C9E  0100               	movlb	0	; () banked
  4304  001CA0  5D88               	subwf	SingleFocusBreathe@x& (0+255),w,b
  4305  001CA2  A0D8               	btfss	status,0,c
  4306  001CA4  D04B               	goto	l3563
  4307                           
  4308                           ; BSR set to: 0
  4309  001CA6  0100               	movlb	0	; () banked
  4310  001CA8  5187               	movf	SingleFocusBreathe@pulseWidth& (0+255),w,b
  4311  001CAA  0100               	movlb	0	; () banked
  4312  001CAC  5D88               	subwf	SingleFocusBreathe@x& (0+255),w,b
  4313  001CAE  A0D8               	btfss	status,0,c
  4314  001CB0  D006               	goto	l3559
  4315                           
  4316                           ; BSR set to: 0
  4317  001CB2  0E00               	movlw	0
  4318  001CB4  0100               	movlb	0	; () banked
  4319  001CB6  6F82               	movwf	(_SingleFocusBreathe$1334+1)& (0+255),b
  4320  001CB8  0E00               	movlw	0
  4321  001CBA  6F81               	movwf	_SingleFocusBreathe$1334& (0+255),b
  4322  001CBC  D03A               	goto	l3561
  4323  001CBE                     l3559:
  4324                           
  4325                           ; BSR set to: 0
  4326  001CBE  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4327  001CC2  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4328  001CC6  50DF               	movf	indf2,w,c
  4329  001CC8  0100               	movlb	0	; () banked
  4330  001CCA  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4331  001CCC  0100               	movlb	0	; () banked
  4332  001CCE  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4333  001CD0  0100               	movlb	0	; () banked
  4334  001CD2  0388               	mulwf	SingleFocusBreathe@x& (0+255),b
  4335  001CD4  CFF3 F060          	movff	prodl,___awdiv@dividend
  4336  001CD8  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4337  001CDC  C087  F062         	movff	SingleFocusBreathe@pulseWidth,___awdiv@divisor
  4338  001CE0  0100               	movlb	0	; () banked
  4339  001CE2  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4340  001CE4  ECBC  F017         	call	___awdiv	;wreg free
  4341  001CE8  0100               	movlb	0	; () banked
  4342  001CEA  1F60               	comf	?___awdiv& (0+255),f,b
  4343  001CEC  0100               	movlb	0	; () banked
  4344  001CEE  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4345  001CF0  0100               	movlb	0	; () banked
  4346  001CF2  4B60               	infsnz	?___awdiv& (0+255),f,b
  4347  001CF4  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4348  001CF6  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4349  001CFA  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4350  001CFE  50DF               	movf	indf2,w,c
  4351  001D00  0100               	movlb	0	; () banked
  4352  001D02  6F73               	movwf	(??_SingleFocusBreathe+1)& (0+255),b
  4353  001D04  6B74               	clrf	(??_SingleFocusBreathe+2)& (0+255),b
  4354  001D06  0100               	movlb	0	; () banked
  4355  001D08  5160               	movf	?___awdiv& (0+255),w,b
  4356  001D0A  0100               	movlb	0	; () banked
  4357  001D0C  2773               	addwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4358  001D0E  0100               	movlb	0	; () banked
  4359  001D10  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4360  001D12  0100               	movlb	0	; () banked
  4361  001D14  2374               	addwfc	(??_SingleFocusBreathe+2)& (0+255),f,b
  4362  001D16  0E04               	movlw	4
  4363  001D18  0100               	movlb	0	; () banked
  4364  001D1A  6F75               	movwf	(??_SingleFocusBreathe+3)& (0+255),b
  4365  001D1C                     u2435:
  4366  001D1C  0100               	movlb	0	; () banked
  4367  001D1E  3574               	rlcf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4368  001D20  3374               	rrcf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4369  001D22  3373               	rrcf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4370  001D24  0100               	movlb	0	; () banked
  4371  001D26  2F75               	decfsz	(??_SingleFocusBreathe+3)& (0+255),f,b
  4372  001D28  D7F9               	goto	u2435
  4373  001D2A  C073  F081         	movff	??_SingleFocusBreathe+1,_SingleFocusBreathe$1334
  4374  001D2E  C074  F082         	movff	??_SingleFocusBreathe+2,_SingleFocusBreathe$1334+1
  4375  001D32                     l3561:
  4376                           
  4377                           ; BSR set to: 0
  4378  001D32  C081  F07F         	movff	_SingleFocusBreathe$1334,_SingleFocusBreathe$1333
  4379  001D36  C082  F080         	movff	_SingleFocusBreathe$1334+1,_SingleFocusBreathe$1333+1
  4380  001D3A  D010               	goto	l3565
  4381  001D3C                     l3563:
  4382                           
  4383                           ; BSR set to: 0
  4384  001D3C  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4385  001D40  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4386  001D44  50DF               	movf	indf2,w,c
  4387  001D46  0100               	movlb	0	; () banked
  4388  001D48  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4389  001D4A  0100               	movlb	0	; () banked
  4390  001D4C  3B72               	swapf	??_SingleFocusBreathe& (0+255),f,b
  4391  001D4E  0E0F               	movlw	15
  4392  001D50  1772               	andwf	??_SingleFocusBreathe& (0+255),f,b
  4393  001D52  0100               	movlb	0	; () banked
  4394  001D54  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4395  001D56  0100               	movlb	0	; () banked
  4396  001D58  6F7F               	movwf	_SingleFocusBreathe$1333& (0+255),b
  4397  001D5A  6B80               	clrf	(_SingleFocusBreathe$1333+1)& (0+255),b
  4398  001D5C                     l3565:
  4399                           
  4400                           ; BSR set to: 0
  4401  001D5C  C07F  F086         	movff	_SingleFocusBreathe$1333,SingleFocusBreathe@val
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;Pattern_PtrnFunctions.c: 232: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4405  001D60  0100               	movlb	0	; () banked
  4406  001D62  516F               	movf	SingleFocusBreathe@base_sat& (0+255),w,b
  4407  001D64  0100               	movlb	0	; () banked
  4408  001D66  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4409  001D68  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4410  001D6A  0100               	movlb	0	; () banked
  4411  001D6C  3B72               	swapf	??_SingleFocusBreathe& (0+255),f,b
  4412  001D6E  3B73               	swapf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4413  001D70  0EF0               	movlw	240
  4414  001D72  1773               	andwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4415  001D74  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4416  001D76  0B0F               	andlw	15
  4417  001D78  1373               	iorwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4418  001D7A  0EF0               	movlw	240
  4419  001D7C  1772               	andwf	??_SingleFocusBreathe& (0+255),f,b
  4420  001D7E  0100               	movlb	0	; () banked
  4421  001D80  516E               	movf	SingleFocusBreathe@base_hue& (0+255),w,b
  4422  001D82  0100               	movlb	0	; () banked
  4423  001D84  6F75               	movwf	(??_SingleFocusBreathe+3)& (0+255),b
  4424  001D86  6B74               	clrf	(??_SingleFocusBreathe+2)& (0+255),b
  4425  001D88  0100               	movlb	0	; () banked
  4426  001D8A  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4427  001D8C  0100               	movlb	0	; () banked
  4428  001D8E  1374               	iorwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4429  001D90  0100               	movlb	0	; () banked
  4430  001D92  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4431  001D94  0100               	movlb	0	; () banked
  4432  001D96  1375               	iorwf	(??_SingleFocusBreathe+3)& (0+255),f,b
  4433  001D98  0100               	movlb	0	; () banked
  4434  001D9A  5186               	movf	SingleFocusBreathe@val& (0+255),w,b
  4435  001D9C  0100               	movlb	0	; () banked
  4436  001D9E  1374               	iorwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4437  001DA0  0E00               	movlw	0
  4438  001DA2  1375               	iorwf	(??_SingleFocusBreathe+3)& (0+255),f,b
  4439  001DA4  0100               	movlb	0	; () banked
  4440  001DA6  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4441  001DA8  0D02               	mullw	2
  4442  001DAA  50F3               	movf	prodl,w,c
  4443  001DAC  0100               	movlb	0	; () banked
  4444  001DAE  2568               	addwf	SingleFocusBreathe@ptrnPointer& (0+255),w,b
  4445  001DB0  6ED9               	movwf	fsr2l,c
  4446  001DB2  50F4               	movf	prodh,w,c
  4447  001DB4  0100               	movlb	0	; () banked
  4448  001DB6  2169               	addwfc	(SingleFocusBreathe@ptrnPointer+1)& (0+255),w,b
  4449  001DB8  6EDA               	movwf	fsr2h,c
  4450  001DBA  C074  FFDE         	movff	??_SingleFocusBreathe+2,postinc2
  4451  001DBE  C075  FFDD         	movff	??_SingleFocusBreathe+3,postdec2
  4452                           
  4453                           ; BSR set to: 0
  4454  001DC2  0100               	movlb	0	; () banked
  4455  001DC4  2B8A               	incf	SingleFocusBreathe@i& (0+255),f,b
  4456  001DC6  D6A9               	goto	l3541
  4457  001DC8                     l3573:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;Pattern_PtrnFunctions.c: 233: }
  4461                           ;Pattern_PtrnFunctions.c: 234: if(*ptrnStepCounter >= 216){
  4462  001DC8  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4463  001DCC  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4464  001DD0  0ED7               	movlw	215
  4465  001DD2  64DF               	cpfsgt	indf2,c
  4466  001DD4  D002               	goto	l3577
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;Pattern_PtrnFunctions.c: 235: rising = 0;
  4470  001DD6  0E00               	movlw	0
  4471  001DD8  D008               	goto	L8
  4472  001DDA                     l3577:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;Pattern_PtrnFunctions.c: 237: else if(*ptrnStepCounter <= 80){
  4476  001DDA  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4477  001DDE  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4478  001DE2  0E51               	movlw	81
  4479  001DE4  60DF               	cpfslt	indf2,c
  4480  001DE6  D003               	goto	l811
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;Pattern_PtrnFunctions.c: 238: rising = 1;
  4484  001DE8  0E01               	movlw	1
  4485  001DEA                     L8:
  4486  001DEA  0100               	movlb	0	; () banked
  4487  001DEC  6FF5               	movwf	SingleFocusBreathe@rising& (0+255),b
  4488  001DEE                     l811:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;Pattern_PtrnFunctions.c: 239: }
  4492                           ;Pattern_PtrnFunctions.c: 240: *ptrnStepCounter = (rising ? *ptrnStepCounter+40 : *ptrnS
      +                          tepCounter-40);
  4493  001DEE  0100               	movlb	0	; () banked
  4494  001DF0  51F5               	movf	SingleFocusBreathe@rising& (0+255),w,b
  4495  001DF2  0100               	movlb	0	; () banked
  4496  001DF4  A4D8               	btfss	status,2,c
  4497  001DF6  D010               	goto	l3583
  4498                           
  4499                           ; BSR set to: 0
  4500  001DF8  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4501  001DFC  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4502  001E00  50DF               	movf	indf2,w,c
  4503  001E02  0100               	movlb	0	; () banked
  4504  001E04  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4505  001E06  0ED8               	movlw	216
  4506  001E08  0100               	movlb	0	; () banked
  4507  001E0A  2572               	addwf	??_SingleFocusBreathe& (0+255),w,b
  4508  001E0C  0100               	movlb	0	; () banked
  4509  001E0E  6F83               	movwf	_SingleFocusBreathe$1335& (0+255),b
  4510  001E10  0100               	movlb	0	; () banked
  4511  001E12  6B84               	clrf	(_SingleFocusBreathe$1335+1)& (0+255),b
  4512  001E14  0EFF               	movlw	255
  4513  001E16  D00F               	goto	L9
  4514  001E18                     l3583:
  4515                           
  4516                           ; BSR set to: 0
  4517  001E18  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4518  001E1C  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4519  001E20  50DF               	movf	indf2,w,c
  4520  001E22  0100               	movlb	0	; () banked
  4521  001E24  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4522  001E26  0E28               	movlw	40
  4523  001E28  0100               	movlb	0	; () banked
  4524  001E2A  2572               	addwf	??_SingleFocusBreathe& (0+255),w,b
  4525  001E2C  0100               	movlb	0	; () banked
  4526  001E2E  6F83               	movwf	_SingleFocusBreathe$1335& (0+255),b
  4527  001E30  0100               	movlb	0	; () banked
  4528  001E32  6B84               	clrf	(_SingleFocusBreathe$1335+1)& (0+255),b
  4529  001E34  0E00               	movlw	0
  4530  001E36                     L9:
  4531  001E36  2384               	addwfc	(_SingleFocusBreathe$1335+1)& (0+255),f,b
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  001E38  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4537  001E3C  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4538  001E40  C083  FFDF         	movff	_SingleFocusBreathe$1335,indf2
  4539                           
  4540                           ; BSR set to: 0
  4541  001E44  0012               	return		;funcret
  4542  001E46                     __end_of_SingleFocusBreathe:
  4543                           	opt stack 0
  4544                           tosu	equ	0xFFF
  4545                           tosh	equ	0xFFE
  4546                           tosl	equ	0xFFD
  4547                           pclath	equ	0xFFA
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1h	equ	0xFE2
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function _SingleFadedLoop *****************
  4567 ;; Defined at:
  4568 ;;		line 124 in file "Pattern_PtrnFunctions.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4571 ;;		 -> PixelPattern(152), 
  4572 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4573 ;;		 -> PatternStepCounter(1), 
  4574 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4575 ;;		 -> CycleCounter(4), 
  4576 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4577 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4578 ;;  15741           2   16[BANK0 ] PTR void 
  4579 ;;		 -> NULL(0), 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  i               1   35[BANK0 ] unsigned char 
  4582 ;;  x               1   34[BANK0 ] unsigned char 
  4583 ;;  val             1   33[BANK0 ] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  1    wreg      void 
  4586 ;; Registers used:
  4587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4593 ;;      Params:         0      10       0       0
  4594 ;;      Locals:         0       7       0       0
  4595 ;;      Temps:          0      11       0       0
  4596 ;;      Totals:         0      28       0       0
  4597 ;;Total ram usage:       28 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    8
  4600 ;; This function calls:
  4601 ;;		___awdiv
  4602 ;;		___awmod
  4603 ;; This function is called by:
  4604 ;;		_UpdatePattern
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text17
  4609  00218C                     __ptext17:
  4610                           	opt stack 0
  4611  00218C                     _SingleFadedLoop:
  4612                           	opt stack 18
  4613                           
  4614                           ;Pattern_PtrnFunctions.c: 125: uint8_t val, x;
  4615                           ;Pattern_PtrnFunctions.c: 127: for(uint8_t i=0;i<76;i++){
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;incstack = 0
  4619  00218C  0E00               	movlw	0
  4620  00218E  0100               	movlb	0	; () banked
  4621  002190  6F83               	movwf	SingleFadedLoop@i& (0+255),b
  4622  002192                     l3363:
  4623                           
  4624                           ; BSR set to: 0
  4625  002192  0E4B               	movlw	75
  4626  002194  0100               	movlb	0	; () banked
  4627  002196  6583               	cpfsgt	SingleFadedLoop@i& (0+255),b
  4628  002198  D001               	goto	l3367
  4629  00219A  D126               	goto	l3389
  4630  00219C                     l3367:
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;Pattern_PtrnFunctions.c: 129: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  4634  00219C  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4635  0021A0  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4636  0021A4  50DF               	movf	indf2,w,c
  4637  0021A6  0100               	movlb	0	; () banked
  4638  0021A8  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4639  0021AA  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4640  0021AC  0100               	movlb	0	; () banked
  4641  0021AE  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4642  0021B0  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4643  0021B2  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4644  0021B4  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4645  0021B6  0100               	movlb	0	; () banked
  4646  0021B8  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4647  0021BA  0100               	movlb	0	; () banked
  4648  0021BC  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4649  0021BE  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4650  0021C0  0100               	movlb	0	; () banked
  4651  0021C2  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4652  0021C4  0100               	movlb	0	; () banked
  4653  0021C6  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4654  0021C8  0100               	movlb	0	; () banked
  4655  0021CA  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4656  0021CC  0100               	movlb	0	; () banked
  4657  0021CE  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4658  0021D0  0E4C               	movlw	76
  4659  0021D2  0100               	movlb	0	; () banked
  4660  0021D4  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4661  0021D6  0100               	movlb	0	; () banked
  4662  0021D8  6F60               	movwf	___awmod@dividend& (0+255),b
  4663  0021DA  0E00               	movlw	0
  4664  0021DC  0100               	movlb	0	; () banked
  4665  0021DE  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4666  0021E0  0100               	movlb	0	; () banked
  4667  0021E2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4668  0021E4  0E00               	movlw	0
  4669  0021E6  0100               	movlb	0	; () banked
  4670  0021E8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4671  0021EA  0E4C               	movlw	76
  4672  0021EC  6F62               	movwf	___awmod@divisor& (0+255),b
  4673  0021EE  EC20  F019         	call	___awmod	;wreg free
  4674  0021F2  C060  F076         	movff	?___awmod,??_SingleFadedLoop+4
  4675  0021F6  C061  F077         	movff	?___awmod+1,??_SingleFadedLoop+5
  4676  0021FA  0100               	movlb	0	; () banked
  4677  0021FC  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4678  0021FE  0100               	movlb	0	; () banked
  4679  002200  6F78               	movwf	(??_SingleFadedLoop+6)& (0+255),b
  4680  002202  6B79               	clrf	(??_SingleFadedLoop+7)& (0+255),b
  4681  002204  0100               	movlb	0	; () banked
  4682  002206  1F78               	comf	(??_SingleFadedLoop+6)& (0+255),f,b
  4683  002208  1F79               	comf	(??_SingleFadedLoop+7)& (0+255),f,b
  4684  00220A  4B78               	infsnz	(??_SingleFadedLoop+6)& (0+255),f,b
  4685  00220C  2B79               	incf	(??_SingleFadedLoop+7)& (0+255),f,b
  4686  00220E  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4687  002212  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4688  002216  50DF               	movf	indf2,w,c
  4689  002218  0100               	movlb	0	; () banked
  4690  00221A  6F7A               	movwf	(??_SingleFadedLoop+8)& (0+255),b
  4691  00221C  6B7B               	clrf	(??_SingleFadedLoop+9)& (0+255),b
  4692  00221E  0100               	movlb	0	; () banked
  4693  002220  5178               	movf	(??_SingleFadedLoop+6)& (0+255),w,b
  4694  002222  0100               	movlb	0	; () banked
  4695  002224  277A               	addwf	(??_SingleFadedLoop+8)& (0+255),f,b
  4696  002226  0100               	movlb	0	; () banked
  4697  002228  5179               	movf	(??_SingleFadedLoop+7)& (0+255),w,b
  4698  00222A  0100               	movlb	0	; () banked
  4699  00222C  237B               	addwfc	(??_SingleFadedLoop+9)& (0+255),f,b
  4700  00222E  0E4C               	movlw	76
  4701  002230  0100               	movlb	0	; () banked
  4702  002232  257A               	addwf	(??_SingleFadedLoop+8)& (0+255),w,b
  4703  002234  0100               	movlb	0	; () banked
  4704  002236  6F60               	movwf	___awmod@dividend& (0+255),b
  4705  002238  0E00               	movlw	0
  4706  00223A  0100               	movlb	0	; () banked
  4707  00223C  217B               	addwfc	(??_SingleFadedLoop+9)& (0+255),w,b
  4708  00223E  0100               	movlb	0	; () banked
  4709  002240  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4710  002242  0E00               	movlw	0
  4711  002244  0100               	movlb	0	; () banked
  4712  002246  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4713  002248  0E4C               	movlw	76
  4714  00224A  6F62               	movwf	___awmod@divisor& (0+255),b
  4715  00224C  EC20  F019         	call	___awmod	;wreg free
  4716  002250  0100               	movlb	0	; () banked
  4717  002252  5160               	movf	?___awmod& (0+255),w,b
  4718  002254  0100               	movlb	0	; () banked
  4719  002256  5D76               	subwf	(??_SingleFadedLoop+4)& (0+255),w,b
  4720  002258  0100               	movlb	0	; () banked
  4721  00225A  5177               	movf	(??_SingleFadedLoop+5)& (0+255),w,b
  4722  00225C  0A80               	xorlw	128
  4723  00225E  0100               	movlb	0	; () banked
  4724  002260  6F7C               	movwf	(??_SingleFadedLoop+10)& (0+255),b
  4725  002262  0100               	movlb	0	; () banked
  4726  002264  5161               	movf	(?___awmod+1)& (0+255),w,b
  4727  002266  0A80               	xorlw	128
  4728  002268  0100               	movlb	0	; () banked
  4729  00226A  597C               	subwfb	(??_SingleFadedLoop+10)& (0+255),w,b
  4730  00226C  A0D8               	btfss	status,0,c
  4731  00226E  D02C               	goto	l3371
  4732                           
  4733                           ; BSR set to: 0
  4734  002270  0100               	movlb	0	; () banked
  4735  002272  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4736  002274  0100               	movlb	0	; () banked
  4737  002276  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4738  002278  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4739  00227A  0100               	movlb	0	; () banked
  4740  00227C  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4741  00227E  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4742  002280  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4743  002282  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4744  002284  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4745  002288  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4746  00228C  50DF               	movf	indf2,w,c
  4747  00228E  0100               	movlb	0	; () banked
  4748  002290  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4749  002292  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4750  002294  0100               	movlb	0	; () banked
  4751  002296  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4752  002298  0100               	movlb	0	; () banked
  4753  00229A  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4754  00229C  0100               	movlb	0	; () banked
  4755  00229E  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4756  0022A0  0100               	movlb	0	; () banked
  4757  0022A2  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4758  0022A4  0E4C               	movlw	76
  4759  0022A6  0100               	movlb	0	; () banked
  4760  0022A8  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4761  0022AA  0100               	movlb	0	; () banked
  4762  0022AC  6F60               	movwf	___awmod@dividend& (0+255),b
  4763  0022AE  0E00               	movlw	0
  4764  0022B0  0100               	movlb	0	; () banked
  4765  0022B2  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4766  0022B4  0100               	movlb	0	; () banked
  4767  0022B6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4768  0022B8  0E00               	movlw	0
  4769  0022BA  0100               	movlb	0	; () banked
  4770  0022BC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4771  0022BE  0E4C               	movlw	76
  4772  0022C0  6F62               	movwf	___awmod@divisor& (0+255),b
  4773  0022C2  EC20  F019         	call	___awmod	;wreg free
  4774  0022C6  D02B               	goto	L10
  4775  0022C8                     l3371:
  4776  0022C8  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4777  0022CC  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4778  0022D0  50DF               	movf	indf2,w,c
  4779  0022D2  0100               	movlb	0	; () banked
  4780  0022D4  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4781  0022D6  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4782  0022D8  0100               	movlb	0	; () banked
  4783  0022DA  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4784  0022DC  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4785  0022DE  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4786  0022E0  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4787  0022E2  0100               	movlb	0	; () banked
  4788  0022E4  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4789  0022E6  0100               	movlb	0	; () banked
  4790  0022E8  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4791  0022EA  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4792  0022EC  0100               	movlb	0	; () banked
  4793  0022EE  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4794  0022F0  0100               	movlb	0	; () banked
  4795  0022F2  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4796  0022F4  0100               	movlb	0	; () banked
  4797  0022F6  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4798  0022F8  0100               	movlb	0	; () banked
  4799  0022FA  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4800  0022FC  0E4C               	movlw	76
  4801  0022FE  0100               	movlb	0	; () banked
  4802  002300  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4803  002302  0100               	movlb	0	; () banked
  4804  002304  6F60               	movwf	___awmod@dividend& (0+255),b
  4805  002306  0E00               	movlw	0
  4806  002308  0100               	movlb	0	; () banked
  4807  00230A  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4808  00230C  0100               	movlb	0	; () banked
  4809  00230E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4810  002310  0E00               	movlw	0
  4811  002312  0100               	movlb	0	; () banked
  4812  002314  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4813  002316  0E4C               	movlw	76
  4814  002318  6F62               	movwf	___awmod@divisor& (0+255),b
  4815  00231A  EC20  F019         	call	___awmod	;wreg free
  4816  00231E                     L10:
  4817  00231E  C060  F07D         	movff	?___awmod,_SingleFadedLoop$1250
  4818  002322  C061  F07E         	movff	?___awmod+1,_SingleFadedLoop$1250+1
  4819  002326  C07D  F082         	movff	_SingleFadedLoop$1250,SingleFadedLoop@x
  4820                           
  4821                           ;Pattern_PtrnFunctions.c: 130: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4822  00232A  0E04               	movlw	4
  4823  00232C  0100               	movlb	0	; () banked
  4824  00232E  6582               	cpfsgt	SingleFadedLoop@x& (0+255),b
  4825  002330  D006               	goto	l3379
  4826                           
  4827                           ; BSR set to: 0
  4828  002332  0E00               	movlw	0
  4829  002334  0100               	movlb	0	; () banked
  4830  002336  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4831  002338  0E00               	movlw	0
  4832  00233A  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4833  00233C  D01F               	goto	l3381
  4834  00233E                     l3379:
  4835                           
  4836                           ; BSR set to: 0
  4837  00233E  0100               	movlb	0	; () banked
  4838  002340  5182               	movf	SingleFadedLoop@x& (0+255),w,b
  4839  002342  0D0F               	mullw	15
  4840  002344  CFF3 F060          	movff	prodl,___awdiv@dividend
  4841  002348  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4842  00234C  0E00               	movlw	0
  4843  00234E  0100               	movlb	0	; () banked
  4844  002350  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4845  002352  0E05               	movlw	5
  4846  002354  6F62               	movwf	___awdiv@divisor& (0+255),b
  4847  002356  ECBC  F017         	call	___awdiv	;wreg free
  4848  00235A  0100               	movlb	0	; () banked
  4849  00235C  1F60               	comf	?___awdiv& (0+255),f,b
  4850  00235E  0100               	movlb	0	; () banked
  4851  002360  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4852  002362  0100               	movlb	0	; () banked
  4853  002364  4B60               	infsnz	?___awdiv& (0+255),f,b
  4854  002366  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4855  002368  0E0F               	movlw	15
  4856  00236A  0100               	movlb	0	; () banked
  4857  00236C  2560               	addwf	?___awdiv& (0+255),w,b
  4858  00236E  0100               	movlb	0	; () banked
  4859  002370  6F7F               	movwf	_SingleFadedLoop$1251& (0+255),b
  4860  002372  0E00               	movlw	0
  4861  002374  0100               	movlb	0	; () banked
  4862  002376  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4863  002378  0100               	movlb	0	; () banked
  4864  00237A  6F80               	movwf	(_SingleFadedLoop$1251+1)& (0+255),b
  4865  00237C                     l3381:
  4866                           
  4867                           ; BSR set to: 0
  4868  00237C  C07F  F081         	movff	_SingleFadedLoop$1251,SingleFadedLoop@val
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;Pattern_PtrnFunctions.c: 131: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4872  002380  0100               	movlb	0	; () banked
  4873  002382  516F               	movf	SingleFadedLoop@base_sat& (0+255),w,b
  4874  002384  0100               	movlb	0	; () banked
  4875  002386  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4876  002388  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4877  00238A  0100               	movlb	0	; () banked
  4878  00238C  3B72               	swapf	??_SingleFadedLoop& (0+255),f,b
  4879  00238E  3B73               	swapf	(??_SingleFadedLoop+1)& (0+255),f,b
  4880  002390  0EF0               	movlw	240
  4881  002392  1773               	andwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4882  002394  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4883  002396  0B0F               	andlw	15
  4884  002398  1373               	iorwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4885  00239A  0EF0               	movlw	240
  4886  00239C  1772               	andwf	??_SingleFadedLoop& (0+255),f,b
  4887  00239E  0100               	movlb	0	; () banked
  4888  0023A0  516E               	movf	SingleFadedLoop@base_hue& (0+255),w,b
  4889  0023A2  0100               	movlb	0	; () banked
  4890  0023A4  6F75               	movwf	(??_SingleFadedLoop+3)& (0+255),b
  4891  0023A6  6B74               	clrf	(??_SingleFadedLoop+2)& (0+255),b
  4892  0023A8  0100               	movlb	0	; () banked
  4893  0023AA  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4894  0023AC  0100               	movlb	0	; () banked
  4895  0023AE  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4896  0023B0  0100               	movlb	0	; () banked
  4897  0023B2  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4898  0023B4  0100               	movlb	0	; () banked
  4899  0023B6  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4900  0023B8  0100               	movlb	0	; () banked
  4901  0023BA  5181               	movf	SingleFadedLoop@val& (0+255),w,b
  4902  0023BC  0100               	movlb	0	; () banked
  4903  0023BE  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4904  0023C0  0E00               	movlw	0
  4905  0023C2  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4906  0023C4  0100               	movlb	0	; () banked
  4907  0023C6  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4908  0023C8  0D02               	mullw	2
  4909  0023CA  50F3               	movf	prodl,w,c
  4910  0023CC  0100               	movlb	0	; () banked
  4911  0023CE  2568               	addwf	SingleFadedLoop@ptrnPointer& (0+255),w,b
  4912  0023D0  6ED9               	movwf	fsr2l,c
  4913  0023D2  50F4               	movf	prodh,w,c
  4914  0023D4  0100               	movlb	0	; () banked
  4915  0023D6  2169               	addwfc	(SingleFadedLoop@ptrnPointer+1)& (0+255),w,b
  4916  0023D8  6EDA               	movwf	fsr2h,c
  4917  0023DA  C074  FFDE         	movff	??_SingleFadedLoop+2,postinc2
  4918  0023DE  C075  FFDD         	movff	??_SingleFadedLoop+3,postdec2
  4919                           
  4920                           ; BSR set to: 0
  4921  0023E2  0100               	movlb	0	; () banked
  4922  0023E4  2B83               	incf	SingleFadedLoop@i& (0+255),f,b
  4923  0023E6  D6D5               	goto	l3363
  4924  0023E8                     l3389:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;Pattern_PtrnFunctions.c: 132: }
  4928                           ;Pattern_PtrnFunctions.c: 133: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4929  0023E8  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4930  0023EC  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4931  0023F0  50DF               	movf	indf2,w,c
  4932  0023F2  0100               	movlb	0	; () banked
  4933  0023F4  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4934  0023F6  0E01               	movlw	1
  4935  0023F8  0100               	movlb	0	; () banked
  4936  0023FA  2572               	addwf	??_SingleFadedLoop& (0+255),w,b
  4937  0023FC  0100               	movlb	0	; () banked
  4938  0023FE  6F60               	movwf	___awmod@dividend& (0+255),b
  4939  002400  0100               	movlb	0	; () banked
  4940  002402  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4941  002404  0E00               	movlw	0
  4942  002406  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4943  002408  0E00               	movlw	0
  4944  00240A  0100               	movlb	0	; () banked
  4945  00240C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4946  00240E  0E4C               	movlw	76
  4947  002410  6F62               	movwf	___awmod@divisor& (0+255),b
  4948  002412  EC20  F019         	call	___awmod	;wreg free
  4949  002416  0100               	movlb	0	; () banked
  4950  002418  5160               	movf	?___awmod& (0+255),w,b
  4951  00241A  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4952  00241E  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4953  002422  6EDF               	movwf	indf2,c
  4954                           
  4955                           ; BSR set to: 0
  4956  002424  0012               	return		;funcret
  4957  002426                     __end_of_SingleFadedLoop:
  4958                           	opt stack 0
  4959                           tosu	equ	0xFFF
  4960                           tosh	equ	0xFFE
  4961                           tosl	equ	0xFFD
  4962                           pclath	equ	0xFFA
  4963                           tblptru	equ	0xFF8
  4964                           tblptrh	equ	0xFF7
  4965                           tblptrl	equ	0xFF6
  4966                           tablat	equ	0xFF5
  4967                           prodh	equ	0xFF4
  4968                           prodl	equ	0xFF3
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function _MirroredQuadrants *****************
  4982 ;; Defined at:
  4983 ;;		line 191 in file "Pattern_PtrnFunctions.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4986 ;;		 -> PixelPattern(152), 
  4987 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4988 ;;		 -> PatternStepCounter(1), 
  4989 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4990 ;;		 -> CycleCounter(4), 
  4991 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4992 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4993 ;;  15794           2   16[BANK0 ] PTR void 
  4994 ;;		 -> NULL(0), 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  i               1   35[BANK0 ] unsigned char 
  4997 ;;  val             1   34[BANK0 ] unsigned char 
  4998 ;;  x               1   33[BANK0 ] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5008 ;;      Params:         0      10       0       0
  5009 ;;      Locals:         0       7       0       0
  5010 ;;      Temps:          0      11       0       0
  5011 ;;      Totals:         0      28       0       0
  5012 ;;Total ram usage:       28 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    8
  5015 ;; This function calls:
  5016 ;;		___awdiv
  5017 ;;		___awmod
  5018 ;; This function is called by:
  5019 ;;		_UpdatePattern
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text18
  5024  001380                     __ptext18:
  5025                           	opt stack 0
  5026  001380                     _MirroredQuadrants:
  5027                           	opt stack 18
  5028                           
  5029                           ;Pattern_PtrnFunctions.c: 192: uint8_t val, x;
  5030                           ;Pattern_PtrnFunctions.c: 194: for(uint8_t i=0;i<76/4;i++){
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;incstack = 0
  5034  001380  0E00               	movlw	0
  5035  001382  0100               	movlb	0	; () banked
  5036  001384  6F83               	movwf	MirroredQuadrants@i& (0+255),b
  5037  001386                     l3499:
  5038                           
  5039                           ; BSR set to: 0
  5040  001386  0E12               	movlw	18
  5041  001388  0100               	movlb	0	; () banked
  5042  00138A  6583               	cpfsgt	MirroredQuadrants@i& (0+255),b
  5043  00138C  D001               	goto	l3503
  5044  00138E  D1EF               	goto	l3531
  5045  001390                     l3503:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;Pattern_PtrnFunctions.c: 196: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  5049  001390  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5050  001394  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5051  001398  50DF               	movf	indf2,w,c
  5052  00139A  0100               	movlb	0	; () banked
  5053  00139C  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5054  00139E  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5055  0013A0  0100               	movlb	0	; () banked
  5056  0013A2  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5057  0013A4  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5058  0013A6  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5059  0013A8  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5060  0013AA  0100               	movlb	0	; () banked
  5061  0013AC  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5062  0013AE  0100               	movlb	0	; () banked
  5063  0013B0  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5064  0013B2  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5065  0013B4  0100               	movlb	0	; () banked
  5066  0013B6  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5067  0013B8  0100               	movlb	0	; () banked
  5068  0013BA  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5069  0013BC  0100               	movlb	0	; () banked
  5070  0013BE  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5071  0013C0  0100               	movlb	0	; () banked
  5072  0013C2  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5073  0013C4  0E4C               	movlw	76
  5074  0013C6  0100               	movlb	0	; () banked
  5075  0013C8  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5076  0013CA  0100               	movlb	0	; () banked
  5077  0013CC  6F60               	movwf	___awmod@dividend& (0+255),b
  5078  0013CE  0E00               	movlw	0
  5079  0013D0  0100               	movlb	0	; () banked
  5080  0013D2  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5081  0013D4  0100               	movlb	0	; () banked
  5082  0013D6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5083  0013D8  0E00               	movlw	0
  5084  0013DA  0100               	movlb	0	; () banked
  5085  0013DC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5086  0013DE  0E4C               	movlw	76
  5087  0013E0  6F62               	movwf	___awmod@divisor& (0+255),b
  5088  0013E2  EC20  F019         	call	___awmod	;wreg free
  5089  0013E6  C060  F076         	movff	?___awmod,??_MirroredQuadrants+4
  5090  0013EA  C061  F077         	movff	?___awmod+1,??_MirroredQuadrants+5
  5091  0013EE  0100               	movlb	0	; () banked
  5092  0013F0  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5093  0013F2  0100               	movlb	0	; () banked
  5094  0013F4  6F78               	movwf	(??_MirroredQuadrants+6)& (0+255),b
  5095  0013F6  6B79               	clrf	(??_MirroredQuadrants+7)& (0+255),b
  5096  0013F8  0100               	movlb	0	; () banked
  5097  0013FA  1F78               	comf	(??_MirroredQuadrants+6)& (0+255),f,b
  5098  0013FC  1F79               	comf	(??_MirroredQuadrants+7)& (0+255),f,b
  5099  0013FE  4B78               	infsnz	(??_MirroredQuadrants+6)& (0+255),f,b
  5100  001400  2B79               	incf	(??_MirroredQuadrants+7)& (0+255),f,b
  5101  001402  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5102  001406  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5103  00140A  50DF               	movf	indf2,w,c
  5104  00140C  0100               	movlb	0	; () banked
  5105  00140E  6F7A               	movwf	(??_MirroredQuadrants+8)& (0+255),b
  5106  001410  6B7B               	clrf	(??_MirroredQuadrants+9)& (0+255),b
  5107  001412  0100               	movlb	0	; () banked
  5108  001414  5178               	movf	(??_MirroredQuadrants+6)& (0+255),w,b
  5109  001416  0100               	movlb	0	; () banked
  5110  001418  277A               	addwf	(??_MirroredQuadrants+8)& (0+255),f,b
  5111  00141A  0100               	movlb	0	; () banked
  5112  00141C  5179               	movf	(??_MirroredQuadrants+7)& (0+255),w,b
  5113  00141E  0100               	movlb	0	; () banked
  5114  001420  237B               	addwfc	(??_MirroredQuadrants+9)& (0+255),f,b
  5115  001422  0E4C               	movlw	76
  5116  001424  0100               	movlb	0	; () banked
  5117  001426  257A               	addwf	(??_MirroredQuadrants+8)& (0+255),w,b
  5118  001428  0100               	movlb	0	; () banked
  5119  00142A  6F60               	movwf	___awmod@dividend& (0+255),b
  5120  00142C  0E00               	movlw	0
  5121  00142E  0100               	movlb	0	; () banked
  5122  001430  217B               	addwfc	(??_MirroredQuadrants+9)& (0+255),w,b
  5123  001432  0100               	movlb	0	; () banked
  5124  001434  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5125  001436  0E00               	movlw	0
  5126  001438  0100               	movlb	0	; () banked
  5127  00143A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5128  00143C  0E4C               	movlw	76
  5129  00143E  6F62               	movwf	___awmod@divisor& (0+255),b
  5130  001440  EC20  F019         	call	___awmod	;wreg free
  5131  001444  0100               	movlb	0	; () banked
  5132  001446  5160               	movf	?___awmod& (0+255),w,b
  5133  001448  0100               	movlb	0	; () banked
  5134  00144A  5D76               	subwf	(??_MirroredQuadrants+4)& (0+255),w,b
  5135  00144C  0100               	movlb	0	; () banked
  5136  00144E  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5137  001450  0A80               	xorlw	128
  5138  001452  0100               	movlb	0	; () banked
  5139  001454  6F7C               	movwf	(??_MirroredQuadrants+10)& (0+255),b
  5140  001456  0100               	movlb	0	; () banked
  5141  001458  5161               	movf	(?___awmod+1)& (0+255),w,b
  5142  00145A  0A80               	xorlw	128
  5143  00145C  0100               	movlb	0	; () banked
  5144  00145E  597C               	subwfb	(??_MirroredQuadrants+10)& (0+255),w,b
  5145  001460  A0D8               	btfss	status,0,c
  5146  001462  D02C               	goto	l3507
  5147                           
  5148                           ; BSR set to: 0
  5149  001464  0100               	movlb	0	; () banked
  5150  001466  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5151  001468  0100               	movlb	0	; () banked
  5152  00146A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5153  00146C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5154  00146E  0100               	movlb	0	; () banked
  5155  001470  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5156  001472  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5157  001474  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5158  001476  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5159  001478  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5160  00147C  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5161  001480  50DF               	movf	indf2,w,c
  5162  001482  0100               	movlb	0	; () banked
  5163  001484  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5164  001486  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5165  001488  0100               	movlb	0	; () banked
  5166  00148A  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5167  00148C  0100               	movlb	0	; () banked
  5168  00148E  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5169  001490  0100               	movlb	0	; () banked
  5170  001492  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5171  001494  0100               	movlb	0	; () banked
  5172  001496  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5173  001498  0E4C               	movlw	76
  5174  00149A  0100               	movlb	0	; () banked
  5175  00149C  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5176  00149E  0100               	movlb	0	; () banked
  5177  0014A0  6F60               	movwf	___awmod@dividend& (0+255),b
  5178  0014A2  0E00               	movlw	0
  5179  0014A4  0100               	movlb	0	; () banked
  5180  0014A6  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5181  0014A8  0100               	movlb	0	; () banked
  5182  0014AA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5183  0014AC  0E00               	movlw	0
  5184  0014AE  0100               	movlb	0	; () banked
  5185  0014B0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5186  0014B2  0E4C               	movlw	76
  5187  0014B4  6F62               	movwf	___awmod@divisor& (0+255),b
  5188  0014B6  EC20  F019         	call	___awmod	;wreg free
  5189  0014BA  D02B               	goto	L11
  5190  0014BC                     l3507:
  5191  0014BC  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5192  0014C0  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5193  0014C4  50DF               	movf	indf2,w,c
  5194  0014C6  0100               	movlb	0	; () banked
  5195  0014C8  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5196  0014CA  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5197  0014CC  0100               	movlb	0	; () banked
  5198  0014CE  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5199  0014D0  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5200  0014D2  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5201  0014D4  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5202  0014D6  0100               	movlb	0	; () banked
  5203  0014D8  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5204  0014DA  0100               	movlb	0	; () banked
  5205  0014DC  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5206  0014DE  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5207  0014E0  0100               	movlb	0	; () banked
  5208  0014E2  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5209  0014E4  0100               	movlb	0	; () banked
  5210  0014E6  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5211  0014E8  0100               	movlb	0	; () banked
  5212  0014EA  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5213  0014EC  0100               	movlb	0	; () banked
  5214  0014EE  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5215  0014F0  0E4C               	movlw	76
  5216  0014F2  0100               	movlb	0	; () banked
  5217  0014F4  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5218  0014F6  0100               	movlb	0	; () banked
  5219  0014F8  6F60               	movwf	___awmod@dividend& (0+255),b
  5220  0014FA  0E00               	movlw	0
  5221  0014FC  0100               	movlb	0	; () banked
  5222  0014FE  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5223  001500  0100               	movlb	0	; () banked
  5224  001502  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5225  001504  0E00               	movlw	0
  5226  001506  0100               	movlb	0	; () banked
  5227  001508  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5228  00150A  0E4C               	movlw	76
  5229  00150C  6F62               	movwf	___awmod@divisor& (0+255),b
  5230  00150E  EC20  F019         	call	___awmod	;wreg free
  5231  001512                     L11:
  5232  001512  C060  F07D         	movff	?___awmod,_MirroredQuadrants$1302
  5233  001516  C061  F07E         	movff	?___awmod+1,_MirroredQuadrants$1302+1
  5234  00151A  C07D  F081         	movff	_MirroredQuadrants$1302,MirroredQuadrants@x
  5235                           
  5236                           ;Pattern_PtrnFunctions.c: 197: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  5237  00151E  0E04               	movlw	4
  5238  001520  0100               	movlb	0	; () banked
  5239  001522  6581               	cpfsgt	MirroredQuadrants@x& (0+255),b
  5240  001524  D006               	goto	l3515
  5241                           
  5242                           ; BSR set to: 0
  5243  001526  0E00               	movlw	0
  5244  001528  0100               	movlb	0	; () banked
  5245  00152A  6F80               	movwf	(_MirroredQuadrants$1303+1)& (0+255),b
  5246  00152C  0E00               	movlw	0
  5247  00152E  6F7F               	movwf	_MirroredQuadrants$1303& (0+255),b
  5248  001530  D01F               	goto	l3517
  5249  001532                     l3515:
  5250                           
  5251                           ; BSR set to: 0
  5252  001532  0100               	movlb	0	; () banked
  5253  001534  5181               	movf	MirroredQuadrants@x& (0+255),w,b
  5254  001536  0D0F               	mullw	15
  5255  001538  CFF3 F060          	movff	prodl,___awdiv@dividend
  5256  00153C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5257  001540  0E00               	movlw	0
  5258  001542  0100               	movlb	0	; () banked
  5259  001544  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5260  001546  0E05               	movlw	5
  5261  001548  6F62               	movwf	___awdiv@divisor& (0+255),b
  5262  00154A  ECBC  F017         	call	___awdiv	;wreg free
  5263  00154E  0100               	movlb	0	; () banked
  5264  001550  1F60               	comf	?___awdiv& (0+255),f,b
  5265  001552  0100               	movlb	0	; () banked
  5266  001554  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5267  001556  0100               	movlb	0	; () banked
  5268  001558  4B60               	infsnz	?___awdiv& (0+255),f,b
  5269  00155A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5270  00155C  0E0F               	movlw	15
  5271  00155E  0100               	movlb	0	; () banked
  5272  001560  2560               	addwf	?___awdiv& (0+255),w,b
  5273  001562  0100               	movlb	0	; () banked
  5274  001564  6F7F               	movwf	_MirroredQuadrants$1303& (0+255),b
  5275  001566  0E00               	movlw	0
  5276  001568  0100               	movlb	0	; () banked
  5277  00156A  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5278  00156C  0100               	movlb	0	; () banked
  5279  00156E  6F80               	movwf	(_MirroredQuadrants$1303+1)& (0+255),b
  5280  001570                     l3517:
  5281                           
  5282                           ; BSR set to: 0
  5283  001570  C07F  F082         	movff	_MirroredQuadrants$1303,MirroredQuadrants@val
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;Pattern_PtrnFunctions.c: 198: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  5287  001574  0100               	movlb	0	; () banked
  5288  001576  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5289  001578  0100               	movlb	0	; () banked
  5290  00157A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5291  00157C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5292  00157E  0100               	movlb	0	; () banked
  5293  001580  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5294  001582  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5295  001584  0EF0               	movlw	240
  5296  001586  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5297  001588  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5298  00158A  0B0F               	andlw	15
  5299  00158C  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5300  00158E  0EF0               	movlw	240
  5301  001590  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5302  001592  0100               	movlb	0	; () banked
  5303  001594  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5304  001596  0100               	movlb	0	; () banked
  5305  001598  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5306  00159A  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5307  00159C  0100               	movlb	0	; () banked
  5308  00159E  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5309  0015A0  0100               	movlb	0	; () banked
  5310  0015A2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5311  0015A4  0100               	movlb	0	; () banked
  5312  0015A6  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5313  0015A8  0100               	movlb	0	; () banked
  5314  0015AA  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5315  0015AC  0100               	movlb	0	; () banked
  5316  0015AE  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5317  0015B0  0100               	movlb	0	; () banked
  5318  0015B2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5319  0015B4  0E00               	movlw	0
  5320  0015B6  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5321  0015B8  0100               	movlb	0	; () banked
  5322  0015BA  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5323  0015BC  0D02               	mullw	2
  5324  0015BE  50F3               	movf	prodl,w,c
  5325  0015C0  0100               	movlb	0	; () banked
  5326  0015C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5327  0015C4  6ED9               	movwf	fsr2l,c
  5328  0015C6  50F4               	movf	prodh,w,c
  5329  0015C8  0100               	movlb	0	; () banked
  5330  0015CA  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5331  0015CC  6EDA               	movwf	fsr2h,c
  5332  0015CE  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5333  0015D2  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;Pattern_PtrnFunctions.c: 199: ptrnPointer[76/2-1-i] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  5337  0015D6  0100               	movlb	0	; () banked
  5338  0015D8  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5339  0015DA  0100               	movlb	0	; () banked
  5340  0015DC  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5341  0015DE  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5342  0015E0  0100               	movlb	0	; () banked
  5343  0015E2  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5344  0015E4  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5345  0015E6  0EF0               	movlw	240
  5346  0015E8  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5347  0015EA  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5348  0015EC  0B0F               	andlw	15
  5349  0015EE  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5350  0015F0  0EF0               	movlw	240
  5351  0015F2  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5352  0015F4  0100               	movlb	0	; () banked
  5353  0015F6  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5354  0015F8  0100               	movlb	0	; () banked
  5355  0015FA  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5356  0015FC  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5357  0015FE  0100               	movlb	0	; () banked
  5358  001600  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5359  001602  0100               	movlb	0	; () banked
  5360  001604  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5361  001606  0100               	movlb	0	; () banked
  5362  001608  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5363  00160A  0100               	movlb	0	; () banked
  5364  00160C  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5365  00160E  0100               	movlb	0	; () banked
  5366  001610  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5367  001612  0100               	movlb	0	; () banked
  5368  001614  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5369  001616  0E00               	movlw	0
  5370  001618  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5371  00161A  0100               	movlb	0	; () banked
  5372  00161C  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5373  00161E  0100               	movlb	0	; () banked
  5374  001620  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5375  001622  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5376  001624  0100               	movlb	0	; () banked
  5377  001626  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5378  001628  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5379  00162A  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5380  00162C  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5381  00162E  90D8               	bcf	status,0,c
  5382  001630  0100               	movlb	0	; () banked
  5383  001632  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5384  001634  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5385  001636  0E4A               	movlw	74
  5386  001638  0100               	movlb	0	; () banked
  5387  00163A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5388  00163C  0E00               	movlw	0
  5389  00163E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5390  001640  0100               	movlb	0	; () banked
  5391  001642  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5392  001644  0100               	movlb	0	; () banked
  5393  001646  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5394  001648  6ED9               	movwf	fsr2l,c
  5395  00164A  0100               	movlb	0	; () banked
  5396  00164C  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5397  00164E  0100               	movlb	0	; () banked
  5398  001650  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5399  001652  6EDA               	movwf	fsr2h,c
  5400  001654  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5401  001658  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;Pattern_PtrnFunctions.c: 200: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5405  00165C  0100               	movlb	0	; () banked
  5406  00165E  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5407  001660  0100               	movlb	0	; () banked
  5408  001662  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5409  001664  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5410  001666  0100               	movlb	0	; () banked
  5411  001668  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5412  00166A  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5413  00166C  0EF0               	movlw	240
  5414  00166E  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5415  001670  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5416  001672  0B0F               	andlw	15
  5417  001674  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5418  001676  0EF0               	movlw	240
  5419  001678  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5420  00167A  0100               	movlb	0	; () banked
  5421  00167C  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5422  00167E  0100               	movlb	0	; () banked
  5423  001680  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5424  001682  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5425  001684  0100               	movlb	0	; () banked
  5426  001686  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5427  001688  0100               	movlb	0	; () banked
  5428  00168A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5429  00168C  0100               	movlb	0	; () banked
  5430  00168E  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5431  001690  0100               	movlb	0	; () banked
  5432  001692  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5433  001694  0100               	movlb	0	; () banked
  5434  001696  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5435  001698  0100               	movlb	0	; () banked
  5436  00169A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5437  00169C  0E00               	movlw	0
  5438  00169E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5439  0016A0  0100               	movlb	0	; () banked
  5440  0016A2  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5441  0016A4  0100               	movlb	0	; () banked
  5442  0016A6  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5443  0016A8  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5444  0016AA  90D8               	bcf	status,0,c
  5445  0016AC  0100               	movlb	0	; () banked
  5446  0016AE  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5447  0016B0  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5448  0016B2  0E4C               	movlw	76
  5449  0016B4  0100               	movlb	0	; () banked
  5450  0016B6  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5451  0016B8  0E00               	movlw	0
  5452  0016BA  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5453  0016BC  0100               	movlb	0	; () banked
  5454  0016BE  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5455  0016C0  0100               	movlb	0	; () banked
  5456  0016C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5457  0016C4  6ED9               	movwf	fsr2l,c
  5458  0016C6  0100               	movlb	0	; () banked
  5459  0016C8  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5460  0016CA  0100               	movlb	0	; () banked
  5461  0016CC  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5462  0016CE  6EDA               	movwf	fsr2h,c
  5463  0016D0  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5464  0016D4  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;Pattern_PtrnFunctions.c: 201: ptrnPointer[76-1-i] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5468  0016D8  0100               	movlb	0	; () banked
  5469  0016DA  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5470  0016DC  0100               	movlb	0	; () banked
  5471  0016DE  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5472  0016E0  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5473  0016E2  0100               	movlb	0	; () banked
  5474  0016E4  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5475  0016E6  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5476  0016E8  0EF0               	movlw	240
  5477  0016EA  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5478  0016EC  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5479  0016EE  0B0F               	andlw	15
  5480  0016F0  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5481  0016F2  0EF0               	movlw	240
  5482  0016F4  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5483  0016F6  0100               	movlb	0	; () banked
  5484  0016F8  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5485  0016FA  0100               	movlb	0	; () banked
  5486  0016FC  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5487  0016FE  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5488  001700  0100               	movlb	0	; () banked
  5489  001702  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5490  001704  0100               	movlb	0	; () banked
  5491  001706  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5492  001708  0100               	movlb	0	; () banked
  5493  00170A  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5494  00170C  0100               	movlb	0	; () banked
  5495  00170E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5496  001710  0100               	movlb	0	; () banked
  5497  001712  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5498  001714  0100               	movlb	0	; () banked
  5499  001716  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5500  001718  0E00               	movlw	0
  5501  00171A  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5502  00171C  0100               	movlb	0	; () banked
  5503  00171E  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5504  001720  0100               	movlb	0	; () banked
  5505  001722  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5506  001724  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5507  001726  0E01               	movlw	1
  5508  001728  0100               	movlb	0	; () banked
  5509  00172A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5510  00172C  0E00               	movlw	0
  5511  00172E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5512  001730  0100               	movlb	0	; () banked
  5513  001732  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5514  001734  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5515  001736  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5516  001738  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5517  00173A  90D8               	bcf	status,0,c
  5518  00173C  0100               	movlb	0	; () banked
  5519  00173E  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5520  001740  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5521  001742  0E98               	movlw	152
  5522  001744  0100               	movlb	0	; () banked
  5523  001746  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5524  001748  0E00               	movlw	0
  5525  00174A  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5526  00174C  0100               	movlb	0	; () banked
  5527  00174E  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5528  001750  0100               	movlb	0	; () banked
  5529  001752  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5530  001754  6ED9               	movwf	fsr2l,c
  5531  001756  0100               	movlb	0	; () banked
  5532  001758  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5533  00175A  0100               	movlb	0	; () banked
  5534  00175C  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5535  00175E  6EDA               	movwf	fsr2h,c
  5536  001760  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5537  001764  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5538                           
  5539                           ; BSR set to: 0
  5540  001768  0100               	movlb	0	; () banked
  5541  00176A  2B83               	incf	MirroredQuadrants@i& (0+255),f,b
  5542  00176C  D60C               	goto	l3499
  5543  00176E                     l3531:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;Pattern_PtrnFunctions.c: 202: }
  5547                           ;Pattern_PtrnFunctions.c: 203: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/2);
  5548  00176E  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5549  001772  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5550  001776  50DF               	movf	indf2,w,c
  5551  001778  0100               	movlb	0	; () banked
  5552  00177A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5553  00177C  0E01               	movlw	1
  5554  00177E  0100               	movlb	0	; () banked
  5555  001780  2572               	addwf	??_MirroredQuadrants& (0+255),w,b
  5556  001782  0100               	movlb	0	; () banked
  5557  001784  6F60               	movwf	___awmod@dividend& (0+255),b
  5558  001786  0100               	movlb	0	; () banked
  5559  001788  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5560  00178A  0E00               	movlw	0
  5561  00178C  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5562  00178E  0E00               	movlw	0
  5563  001790  0100               	movlb	0	; () banked
  5564  001792  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5565  001794  0E26               	movlw	38
  5566  001796  6F62               	movwf	___awmod@divisor& (0+255),b
  5567  001798  EC20  F019         	call	___awmod	;wreg free
  5568  00179C  0100               	movlb	0	; () banked
  5569  00179E  5160               	movf	?___awmod& (0+255),w,b
  5570  0017A0  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5571  0017A4  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5572  0017A8  6EDF               	movwf	indf2,c
  5573                           
  5574                           ; BSR set to: 0
  5575  0017AA  0012               	return		;funcret
  5576  0017AC                     __end_of_MirroredQuadrants:
  5577                           	opt stack 0
  5578                           tosu	equ	0xFFF
  5579                           tosh	equ	0xFFE
  5580                           tosl	equ	0xFFD
  5581                           pclath	equ	0xFFA
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           postinc0	equ	0xFEE
  5589                           wreg	equ	0xFE8
  5590                           postdec1	equ	0xFE5
  5591                           fsr1h	equ	0xFE2
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _HueTest *****************
  5601 ;; Defined at:
  5602 ;;		line 29 in file "Pattern_PtrnFunctions.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  ptrnPointer     2   19[BANK0 ] PTR unsigned int 
  5605 ;;		 -> PixelPattern(152), 
  5606 ;;  ptrnStepCoun    2   21[BANK0 ] PTR unsigned char 
  5607 ;;		 -> PatternStepCounter(1), 
  5608 ;;  cycleCounter    2   23[BANK0 ] PTR unsigned long 
  5609 ;;		 -> CycleCounter(4), 
  5610 ;;  base_hue        1   25[BANK0 ] unsigned char 
  5611 ;;  base_sat        1   26[BANK0 ] unsigned char 
  5612 ;;  15710           2   27[BANK0 ] PTR void 
  5613 ;;		 -> NULL(0), 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  i               1   32[BANK0 ] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5625 ;;      Params:         0      10       0       0
  5626 ;;      Locals:         0       1       0       0
  5627 ;;      Temps:          0       3       0       0
  5628 ;;      Totals:         0      14       0       0
  5629 ;;Total ram usage:       14 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    8
  5632 ;; This function calls:
  5633 ;;		___awmod
  5634 ;;		___lwdiv
  5635 ;;		___wmul
  5636 ;; This function is called by:
  5637 ;;		_UpdatePattern
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text19
  5642  002A26                     __ptext19:
  5643                           	opt stack 0
  5644  002A26                     _HueTest:
  5645                           	opt stack 18
  5646                           
  5647                           ;Pattern_PtrnFunctions.c: 32: for(uint8_t i=0;i<76;i++){
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;incstack = 0
  5651  002A26  0E00               	movlw	0
  5652  002A28  0100               	movlb	0	; () banked
  5653  002A2A  6F80               	movwf	HueTest@i& (0+255),b
  5654  002A2C                     l3251:
  5655                           
  5656                           ; BSR set to: 0
  5657  002A2C  0E4B               	movlw	75
  5658  002A2E  0100               	movlb	0	; () banked
  5659  002A30  6580               	cpfsgt	HueTest@i& (0+255),b
  5660  002A32  D001               	goto	l3255
  5661  002A34  D058               	goto	l3261
  5662  002A36                     l3255:
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;Pattern_PtrnFunctions.c: 33: ptrnPointer[i] = (((uint16_t)(i+*ptrnStepCounter)*255/76)<
      +                          <8) | (base_sat<<4) | 0x0F;
  5666  002A36  0100               	movlb	0	; () banked
  5667  002A38  517A               	movf	HueTest@base_sat& (0+255),w,b
  5668  002A3A  0100               	movlb	0	; () banked
  5669  002A3C  6F7D               	movwf	??_HueTest& (0+255),b
  5670  002A3E  6B7E               	clrf	(??_HueTest+1)& (0+255),b
  5671  002A40  0100               	movlb	0	; () banked
  5672  002A42  3B7D               	swapf	??_HueTest& (0+255),f,b
  5673  002A44  3B7E               	swapf	(??_HueTest+1)& (0+255),f,b
  5674  002A46  0EF0               	movlw	240
  5675  002A48  177E               	andwf	(??_HueTest+1)& (0+255),f,b
  5676  002A4A  517D               	movf	??_HueTest& (0+255),w,b
  5677  002A4C  0B0F               	andlw	15
  5678  002A4E  137E               	iorwf	(??_HueTest+1)& (0+255),f,b
  5679  002A50  0EF0               	movlw	240
  5680  002A52  177D               	andwf	??_HueTest& (0+255),f,b
  5681  002A54  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5682  002A58  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5683  002A5C  50DF               	movf	indf2,w,c
  5684  002A5E  0100               	movlb	0	; () banked
  5685  002A60  6F7F               	movwf	(??_HueTest+2)& (0+255),b
  5686  002A62  0100               	movlb	0	; () banked
  5687  002A64  5180               	movf	HueTest@i& (0+255),w,b
  5688  002A66  0100               	movlb	0	; () banked
  5689  002A68  257F               	addwf	(??_HueTest+2)& (0+255),w,b
  5690  002A6A  0100               	movlb	0	; () banked
  5691  002A6C  6F66               	movwf	___wmul@multiplier& (0+255),b
  5692  002A6E  0100               	movlb	0	; () banked
  5693  002A70  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  5694  002A72  0100               	movlb	0	; () banked
  5695  002A74  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  5696  002A76  0E00               	movlw	0
  5697  002A78  0100               	movlb	0	; () banked
  5698  002A7A  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5699  002A7C  6968               	setf	___wmul@multiplicand& (0+255),b
  5700  002A7E  EC06  F01D         	call	___wmul	;wreg free
  5701  002A82  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  5702  002A86  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  5703  002A8A  0E00               	movlw	0
  5704  002A8C  0100               	movlb	0	; () banked
  5705  002A8E  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5706  002A90  0E4C               	movlw	76
  5707  002A92  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  5708  002A94  ECB6  F01A         	call	___lwdiv	;wreg free
  5709  002A98  0100               	movlb	0	; () banked
  5710  002A9A  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  5711  002A9E  0100               	movlb	0	; () banked
  5712  002AA0  6B6C               	clrf	?___lwdiv& (0+255),b
  5713  002AA2  0100               	movlb	0	; () banked
  5714  002AA4  517D               	movf	??_HueTest& (0+255),w,b
  5715  002AA6  0100               	movlb	0	; () banked
  5716  002AA8  136C               	iorwf	?___lwdiv& (0+255),f,b
  5717  002AAA  0100               	movlb	0	; () banked
  5718  002AAC  517E               	movf	(??_HueTest+1)& (0+255),w,b
  5719  002AAE  0100               	movlb	0	; () banked
  5720  002AB0  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5721  002AB2  0E0F               	movlw	15
  5722  002AB4  0100               	movlb	0	; () banked
  5723  002AB6  136C               	iorwf	?___lwdiv& (0+255),f,b
  5724  002AB8  0E00               	movlw	0
  5725  002ABA  0100               	movlb	0	; () banked
  5726  002ABC  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5727  002ABE  0100               	movlb	0	; () banked
  5728  002AC0  5180               	movf	HueTest@i& (0+255),w,b
  5729  002AC2  0D02               	mullw	2
  5730  002AC4  50F3               	movf	prodl,w,c
  5731  002AC6  0100               	movlb	0	; () banked
  5732  002AC8  2573               	addwf	HueTest@ptrnPointer& (0+255),w,b
  5733  002ACA  6ED9               	movwf	fsr2l,c
  5734  002ACC  50F4               	movf	prodh,w,c
  5735  002ACE  0100               	movlb	0	; () banked
  5736  002AD0  2174               	addwfc	(HueTest@ptrnPointer+1)& (0+255),w,b
  5737  002AD2  6EDA               	movwf	fsr2h,c
  5738  002AD4  0100               	movlb	0	; () banked
  5739  002AD6  C06C  FFDE         	movff	?___lwdiv,postinc2
  5740  002ADA  0100               	movlb	0	; () banked
  5741  002ADC  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  5742                           
  5743                           ; BSR set to: 0
  5744  002AE0  0100               	movlb	0	; () banked
  5745  002AE2  2B80               	incf	HueTest@i& (0+255),f,b
  5746  002AE4  D7A3               	goto	l3251
  5747  002AE6                     l3261:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;Pattern_PtrnFunctions.c: 34: }
  5751                           ;Pattern_PtrnFunctions.c: 35: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  5752  002AE6  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5753  002AEA  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5754  002AEE  50DF               	movf	indf2,w,c
  5755  002AF0  0100               	movlb	0	; () banked
  5756  002AF2  6F7D               	movwf	??_HueTest& (0+255),b
  5757  002AF4  0E01               	movlw	1
  5758  002AF6  0100               	movlb	0	; () banked
  5759  002AF8  257D               	addwf	??_HueTest& (0+255),w,b
  5760  002AFA  0100               	movlb	0	; () banked
  5761  002AFC  6F60               	movwf	___awmod@dividend& (0+255),b
  5762  002AFE  0100               	movlb	0	; () banked
  5763  002B00  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5764  002B02  0E00               	movlw	0
  5765  002B04  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5766  002B06  0E00               	movlw	0
  5767  002B08  0100               	movlb	0	; () banked
  5768  002B0A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5769  002B0C  0E4C               	movlw	76
  5770  002B0E  6F62               	movwf	___awmod@divisor& (0+255),b
  5771  002B10  EC20  F019         	call	___awmod	;wreg free
  5772  002B14  0100               	movlb	0	; () banked
  5773  002B16  5160               	movf	?___awmod& (0+255),w,b
  5774  002B18  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5775  002B1C  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5776  002B20  6EDF               	movwf	indf2,c
  5777                           
  5778                           ; BSR set to: 0
  5779  002B22  0012               	return		;funcret
  5780  002B24                     __end_of_HueTest:
  5781                           	opt stack 0
  5782                           tosu	equ	0xFFF
  5783                           tosh	equ	0xFFE
  5784                           tosl	equ	0xFFD
  5785                           pclath	equ	0xFFA
  5786                           tblptru	equ	0xFF8
  5787                           tblptrh	equ	0xFF7
  5788                           tblptrl	equ	0xFF6
  5789                           tablat	equ	0xFF5
  5790                           prodh	equ	0xFF4
  5791                           prodl	equ	0xFF3
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           postdec1	equ	0xFE5
  5795                           fsr1h	equ	0xFE2
  5796                           fsr1l	equ	0xFE1
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           postdec2	equ	0xFDD
  5800                           fsr2h	equ	0xFDA
  5801                           fsr2l	equ	0xFD9
  5802                           status	equ	0xFD8
  5803                           
  5804 ;; *************** function _FullPulseHold *****************
  5805 ;; Defined at:
  5806 ;;		line 80 in file "Pattern_PtrnFunctions.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;  ptrnPointer     2    0[BANK0 ] PTR unsigned int 
  5809 ;;		 -> PixelPattern(152), 
  5810 ;;  ptrnStepCoun    2    2[BANK0 ] PTR unsigned char 
  5811 ;;		 -> PatternStepCounter(1), 
  5812 ;;  cycleCounter    2    4[BANK0 ] PTR unsigned long 
  5813 ;;		 -> CycleCounter(4), 
  5814 ;;  base_hue        1    6[BANK0 ] unsigned char 
  5815 ;;  base_sat        1    7[BANK0 ] unsigned char 
  5816 ;;  15718           2    8[BANK0 ] PTR void 
  5817 ;;		 -> NULL(0), 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  i               1   21[BANK0 ] unsigned char 
  5820 ;;  val             1   20[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5830 ;;      Params:         0      10       0       0
  5831 ;;      Locals:         0       4       0       0
  5832 ;;      Temps:          0       8       0       0
  5833 ;;      Totals:         0      22       0       0
  5834 ;;Total ram usage:       22 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    7
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_UpdatePattern
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text20
  5845  002426                     __ptext20:
  5846                           	opt stack 0
  5847  002426                     _FullPulseHold:
  5848                           	opt stack 19
  5849                           
  5850                           ;Pattern_PtrnFunctions.c: 81: static bool rising = 1;
  5851                           ;Pattern_PtrnFunctions.c: 82: uint8_t val;
  5852                           ;Pattern_PtrnFunctions.c: 85: val = (*ptrnStepCounter>>4);
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;incstack = 0
  5856  002426  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5857  00242A  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5858  00242E  50DF               	movf	indf2,w,c
  5859  002430  0100               	movlb	0	; () banked
  5860  002432  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5861  002434  0100               	movlb	0	; () banked
  5862  002436  396A               	swapf	??_FullPulseHold& (0+255),w,b
  5863  002438  0B0F               	andlw	15
  5864  00243A  0100               	movlb	0	; () banked
  5865  00243C  6F74               	movwf	FullPulseHold@val& (0+255),b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;Pattern_PtrnFunctions.c: 86: for(uint8_t i=0;i<76;i++){
  5869  00243E  0E00               	movlw	0
  5870  002440  0100               	movlb	0	; () banked
  5871  002442  6F75               	movwf	FullPulseHold@i& (0+255),b
  5872  002444                     l3267:
  5873                           
  5874                           ; BSR set to: 0
  5875  002444  0E4B               	movlw	75
  5876  002446  0100               	movlb	0	; () banked
  5877  002448  6575               	cpfsgt	FullPulseHold@i& (0+255),b
  5878  00244A  D001               	goto	l3271
  5879  00244C  D034               	goto	l3277
  5880  00244E                     l3271:
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;Pattern_PtrnFunctions.c: 87: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) |
      +                           val;
  5884  00244E  0100               	movlb	0	; () banked
  5885  002450  5167               	movf	FullPulseHold@base_sat& (0+255),w,b
  5886  002452  0100               	movlb	0	; () banked
  5887  002454  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5888  002456  6B6B               	clrf	(??_FullPulseHold+1)& (0+255),b
  5889  002458  0100               	movlb	0	; () banked
  5890  00245A  3B6A               	swapf	??_FullPulseHold& (0+255),f,b
  5891  00245C  3B6B               	swapf	(??_FullPulseHold+1)& (0+255),f,b
  5892  00245E  0EF0               	movlw	240
  5893  002460  176B               	andwf	(??_FullPulseHold+1)& (0+255),f,b
  5894  002462  516A               	movf	??_FullPulseHold& (0+255),w,b
  5895  002464  0B0F               	andlw	15
  5896  002466  136B               	iorwf	(??_FullPulseHold+1)& (0+255),f,b
  5897  002468  0EF0               	movlw	240
  5898  00246A  176A               	andwf	??_FullPulseHold& (0+255),f,b
  5899  00246C  0100               	movlb	0	; () banked
  5900  00246E  5166               	movf	FullPulseHold@base_hue& (0+255),w,b
  5901  002470  0100               	movlb	0	; () banked
  5902  002472  6F6D               	movwf	(??_FullPulseHold+3)& (0+255),b
  5903  002474  6B6C               	clrf	(??_FullPulseHold+2)& (0+255),b
  5904  002476  0100               	movlb	0	; () banked
  5905  002478  516A               	movf	??_FullPulseHold& (0+255),w,b
  5906  00247A  0100               	movlb	0	; () banked
  5907  00247C  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5908  00247E  0100               	movlb	0	; () banked
  5909  002480  516B               	movf	(??_FullPulseHold+1)& (0+255),w,b
  5910  002482  0100               	movlb	0	; () banked
  5911  002484  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5912  002486  0100               	movlb	0	; () banked
  5913  002488  5174               	movf	FullPulseHold@val& (0+255),w,b
  5914  00248A  0100               	movlb	0	; () banked
  5915  00248C  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5916  00248E  0E00               	movlw	0
  5917  002490  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5918  002492  0100               	movlb	0	; () banked
  5919  002494  5175               	movf	FullPulseHold@i& (0+255),w,b
  5920  002496  0D02               	mullw	2
  5921  002498  50F3               	movf	prodl,w,c
  5922  00249A  0100               	movlb	0	; () banked
  5923  00249C  2560               	addwf	FullPulseHold@ptrnPointer& (0+255),w,b
  5924  00249E  6ED9               	movwf	fsr2l,c
  5925  0024A0  50F4               	movf	prodh,w,c
  5926  0024A2  0100               	movlb	0	; () banked
  5927  0024A4  2161               	addwfc	(FullPulseHold@ptrnPointer+1)& (0+255),w,b
  5928  0024A6  6EDA               	movwf	fsr2h,c
  5929  0024A8  C06C  FFDE         	movff	??_FullPulseHold+2,postinc2
  5930  0024AC  C06D  FFDD         	movff	??_FullPulseHold+3,postdec2
  5931                           
  5932                           ; BSR set to: 0
  5933  0024B0  0100               	movlb	0	; () banked
  5934  0024B2  2B75               	incf	FullPulseHold@i& (0+255),f,b
  5935  0024B4  D7C7               	goto	l3267
  5936  0024B6                     l3277:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;Pattern_PtrnFunctions.c: 88: }
  5940                           ;Pattern_PtrnFunctions.c: 89: if(*ptrnStepCounter == 255){
  5941  0024B6  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5942  0024BA  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5943  0024BE  28DE               	incf	postinc2,w,c
  5944  0024C0  A4D8               	btfss	status,2,c
  5945  0024C2  D02F               	goto	l3283
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;Pattern_PtrnFunctions.c: 90: rising = 0;
  5949  0024C4  0E00               	movlw	0
  5950  0024C6  D035               	goto	L12
  5951  0024C8                     l3281:
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;Pattern_PtrnFunctions.c: 91: *cycleCounter = *cycleCounter+1;
  5955  0024C8  0E01               	movlw	1
  5956  0024CA  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5957  0024CE  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5958  0024D2  CFDE F06A          	movff	postinc2,??_FullPulseHold
  5959  0024D6  CFDE F06B          	movff	postinc2,??_FullPulseHold+1
  5960  0024DA  CFDE F06C          	movff	postinc2,??_FullPulseHold+2
  5961  0024DE  CFDE F06D          	movff	postinc2,??_FullPulseHold+3
  5962  0024E2  0100               	movlb	0	; () banked
  5963  0024E4  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5964  0024E6  0100               	movlb	0	; () banked
  5965  0024E8  6F6E               	movwf	(??_FullPulseHold+4)& (0+255),b
  5966  0024EA  0E00               	movlw	0
  5967  0024EC  0100               	movlb	0	; () banked
  5968  0024EE  216B               	addwfc	(??_FullPulseHold+1)& (0+255),w,b
  5969  0024F0  0100               	movlb	0	; () banked
  5970  0024F2  6F6F               	movwf	(??_FullPulseHold+5)& (0+255),b
  5971  0024F4  0E00               	movlw	0
  5972  0024F6  0100               	movlb	0	; () banked
  5973  0024F8  216C               	addwfc	(??_FullPulseHold+2)& (0+255),w,b
  5974  0024FA  0100               	movlb	0	; () banked
  5975  0024FC  6F70               	movwf	(??_FullPulseHold+6)& (0+255),b
  5976  0024FE  0E00               	movlw	0
  5977  002500  0100               	movlb	0	; () banked
  5978  002502  216D               	addwfc	(??_FullPulseHold+3)& (0+255),w,b
  5979  002504  0100               	movlb	0	; () banked
  5980  002506  6F71               	movwf	(??_FullPulseHold+7)& (0+255),b
  5981  002508  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5982  00250C  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5983  002510  C06E  FFDE         	movff	??_FullPulseHold+4,postinc2
  5984  002514  C06F  FFDE         	movff	??_FullPulseHold+5,postinc2
  5985  002518  C070  FFDE         	movff	??_FullPulseHold+6,postinc2
  5986  00251C  C071  FFDE         	movff	??_FullPulseHold+7,postinc2
  5987                           
  5988                           ;Pattern_PtrnFunctions.c: 92: }
  5989  002520  D00B               	goto	l3289
  5990  002522                     l3283:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;Pattern_PtrnFunctions.c: 93: else if(*ptrnStepCounter == 0){
  5994  002522  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5995  002526  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5996  00252A  50DF               	movf	indf2,w,c
  5997  00252C  A4D8               	btfss	status,2,c
  5998  00252E  D004               	goto	l3289
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;Pattern_PtrnFunctions.c: 94: rising = 1;
  6002  002530  0E01               	movlw	1
  6003  002532                     L12:
  6004  002532  0100               	movlb	0	; () banked
  6005  002534  6FF4               	movwf	FullPulseHold@rising& (0+255),b
  6006  002536  D7C8               	goto	l3281
  6007  002538                     l3289:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;Pattern_PtrnFunctions.c: 96: }
  6011                           ;Pattern_PtrnFunctions.c: 97: if(*cycleCounter < 4){
  6012  002538  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  6013  00253C  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  6014  002540  0E03               	movlw	3
  6015  002542  50DB               	movf	plusw2,w,c
  6016  002544  E136               	bnz	l661
  6017  002546  0E02               	movlw	2
  6018  002548  50DB               	movf	plusw2,w,c
  6019  00254A  E133               	bnz	l661
  6020  00254C  0E01               	movlw	1
  6021  00254E  50DB               	movf	plusw2,w,c
  6022  002550  E130               	bnz	l661
  6023  002552  0E04               	movlw	4
  6024  002554  5CDE               	subwf	postinc2,w,c
  6025  002556  B0D8               	btfsc	status,0,c
  6026  002558  0012               	return	
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;Pattern_PtrnFunctions.c: 98: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnSt
      +                          epCounter-15);
  6030  00255A  0100               	movlb	0	; () banked
  6031  00255C  51F4               	movf	FullPulseHold@rising& (0+255),w,b
  6032  00255E  0100               	movlb	0	; () banked
  6033  002560  A4D8               	btfss	status,2,c
  6034  002562  D010               	goto	l3295
  6035                           
  6036                           ; BSR set to: 0
  6037  002564  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6038  002568  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6039  00256C  50DF               	movf	indf2,w,c
  6040  00256E  0100               	movlb	0	; () banked
  6041  002570  6F6A               	movwf	??_FullPulseHold& (0+255),b
  6042  002572  0EF1               	movlw	241
  6043  002574  0100               	movlb	0	; () banked
  6044  002576  256A               	addwf	??_FullPulseHold& (0+255),w,b
  6045  002578  0100               	movlb	0	; () banked
  6046  00257A  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  6047  00257C  0100               	movlb	0	; () banked
  6048  00257E  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  6049  002580  0EFF               	movlw	255
  6050  002582  D00F               	goto	L13
  6051  002584                     l3295:
  6052                           
  6053                           ; BSR set to: 0
  6054  002584  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6055  002588  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6056  00258C  50DF               	movf	indf2,w,c
  6057  00258E  0100               	movlb	0	; () banked
  6058  002590  6F6A               	movwf	??_FullPulseHold& (0+255),b
  6059  002592  0E0F               	movlw	15
  6060  002594  0100               	movlb	0	; () banked
  6061  002596  256A               	addwf	??_FullPulseHold& (0+255),w,b
  6062  002598  0100               	movlb	0	; () banked
  6063  00259A  6F72               	movwf	_FullPulseHold$1218& (0+255),b
  6064  00259C  0100               	movlb	0	; () banked
  6065  00259E  6B73               	clrf	(_FullPulseHold$1218+1)& (0+255),b
  6066  0025A0  0E00               	movlw	0
  6067  0025A2                     L13:
  6068  0025A2  2373               	addwfc	(_FullPulseHold$1218+1)& (0+255),f,b
  6069                           
  6070                           ; BSR set to: 0
  6071                           
  6072                           ; BSR set to: 0
  6073  0025A4  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6074  0025A8  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6075  0025AC  C072  FFDF         	movff	_FullPulseHold$1218,indf2
  6076  0025B0  0012               	return	
  6077  0025B2                     l661:
  6078                           
  6079                           ; BSR set to: 0
  6080  0025B2  0012               	return		;funcret
  6081  0025B4                     __end_of_FullPulseHold:
  6082                           	opt stack 0
  6083                           tosu	equ	0xFFF
  6084                           tosh	equ	0xFFE
  6085                           tosl	equ	0xFFD
  6086                           pclath	equ	0xFFA
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           postinc0	equ	0xFEE
  6094                           wreg	equ	0xFE8
  6095                           postdec1	equ	0xFE5
  6096                           fsr1h	equ	0xFE2
  6097                           fsr1l	equ	0xFE1
  6098                           indf2	equ	0xFDF
  6099                           postinc2	equ	0xFDE
  6100                           postdec2	equ	0xFDD
  6101                           plusw2	equ	0xFDB
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _DoubleFadedLoop *****************
  6107 ;; Defined at:
  6108 ;;		line 136 in file "Pattern_PtrnFunctions.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  6111 ;;		 -> PixelPattern(152), 
  6112 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  6113 ;;		 -> PatternStepCounter(1), 
  6114 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  6115 ;;		 -> CycleCounter(4), 
  6116 ;;  base_hue        1   14[BANK0 ] unsigned char 
  6117 ;;  base_sat        1   15[BANK0 ] unsigned char 
  6118 ;;  15751           2   16[BANK0 ] PTR void 
  6119 ;;		 -> NULL(0), 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  i               1   36[BANK0 ] unsigned char 
  6122 ;;  i               1   35[BANK0 ] unsigned char 
  6123 ;;  x               1   34[BANK0 ] unsigned char 
  6124 ;;  val             1   33[BANK0 ] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6134 ;;      Params:         0      10       0       0
  6135 ;;      Locals:         0      12       0       0
  6136 ;;      Temps:          0       7       0       0
  6137 ;;      Totals:         0      29       0       0
  6138 ;;Total ram usage:       29 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    8
  6141 ;; This function calls:
  6142 ;;		___awdiv
  6143 ;;		___awmod
  6144 ;; This function is called by:
  6145 ;;		_UpdatePattern
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text21
  6150  0009BE                     __ptext21:
  6151                           	opt stack 0
  6152  0009BE                     _DoubleFadedLoop:
  6153                           	opt stack 18
  6154                           
  6155                           ;Pattern_PtrnFunctions.c: 137: uint8_t val, x;
  6156                           ;Pattern_PtrnFunctions.c: 139: for(uint8_t i=0;i<76/4;i++){
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;incstack = 0
  6160  0009BE  0E00               	movlw	0
  6161  0009C0  0100               	movlb	0	; () banked
  6162  0009C2  6F83               	movwf	DoubleFadedLoop@i& (0+255),b
  6163  0009C4                     l3393:
  6164                           
  6165                           ; BSR set to: 0
  6166  0009C4  0E12               	movlw	18
  6167  0009C6  0100               	movlb	0	; () banked
  6168  0009C8  6583               	cpfsgt	DoubleFadedLoop@i& (0+255),b
  6169  0009CA  D001               	goto	l3397
  6170  0009CC  D143               	goto	l3421
  6171  0009CE                     l3397:
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;Pattern_PtrnFunctions.c: 141: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6175  0009CE  0E4C               	movlw	76
  6176  0009D0  0100               	movlb	0	; () banked
  6177  0009D2  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6178  0009D4  0100               	movlb	0	; () banked
  6179  0009D6  6F60               	movwf	___awmod@dividend& (0+255),b
  6180  0009D8  0100               	movlb	0	; () banked
  6181  0009DA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6182  0009DC  0E00               	movlw	0
  6183  0009DE  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6184  0009E0  0E00               	movlw	0
  6185  0009E2  0100               	movlb	0	; () banked
  6186  0009E4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6187  0009E6  0E4C               	movlw	76
  6188  0009E8  6F62               	movwf	___awmod@divisor& (0+255),b
  6189  0009EA  EC20  F019         	call	___awmod	;wreg free
  6190  0009EE  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6191  0009F2  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6192  0009F6  0100               	movlb	0	; () banked
  6193  0009F8  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6194  0009FA  0100               	movlb	0	; () banked
  6195  0009FC  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6196  0009FE  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6197  000A00  0100               	movlb	0	; () banked
  6198  000A02  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6199  000A04  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6200  000A06  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6201  000A08  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6202  000A0A  0E4C               	movlw	76
  6203  000A0C  0100               	movlb	0	; () banked
  6204  000A0E  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6205  000A10  0100               	movlb	0	; () banked
  6206  000A12  6F60               	movwf	___awmod@dividend& (0+255),b
  6207  000A14  0E00               	movlw	0
  6208  000A16  0100               	movlb	0	; () banked
  6209  000A18  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6210  000A1A  0100               	movlb	0	; () banked
  6211  000A1C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6212  000A1E  0E00               	movlw	0
  6213  000A20  0100               	movlb	0	; () banked
  6214  000A22  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6215  000A24  0E4C               	movlw	76
  6216  000A26  6F62               	movwf	___awmod@divisor& (0+255),b
  6217  000A28  EC20  F019         	call	___awmod	;wreg free
  6218  000A2C  0100               	movlb	0	; () banked
  6219  000A2E  5160               	movf	?___awmod& (0+255),w,b
  6220  000A30  0100               	movlb	0	; () banked
  6221  000A32  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6222  000A34  0100               	movlb	0	; () banked
  6223  000A36  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6224  000A38  0A80               	xorlw	128
  6225  000A3A  0100               	movlb	0	; () banked
  6226  000A3C  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6227  000A3E  0100               	movlb	0	; () banked
  6228  000A40  5161               	movf	(?___awmod+1)& (0+255),w,b
  6229  000A42  0A80               	xorlw	128
  6230  000A44  0100               	movlb	0	; () banked
  6231  000A46  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6232  000A48  A0D8               	btfss	status,0,c
  6233  000A4A  D01C               	goto	l3401
  6234                           
  6235                           ; BSR set to: 0
  6236  000A4C  0100               	movlb	0	; () banked
  6237  000A4E  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6238  000A50  0100               	movlb	0	; () banked
  6239  000A52  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6240  000A54  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6241  000A56  0100               	movlb	0	; () banked
  6242  000A58  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6243  000A5A  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6244  000A5C  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6245  000A5E  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6246  000A60  0E4C               	movlw	76
  6247  000A62  0100               	movlb	0	; () banked
  6248  000A64  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6249  000A66  0100               	movlb	0	; () banked
  6250  000A68  6F60               	movwf	___awmod@dividend& (0+255),b
  6251  000A6A  0E00               	movlw	0
  6252  000A6C  0100               	movlb	0	; () banked
  6253  000A6E  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6254  000A70  0100               	movlb	0	; () banked
  6255  000A72  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6256  000A74  0E00               	movlw	0
  6257  000A76  0100               	movlb	0	; () banked
  6258  000A78  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6259  000A7A  0E4C               	movlw	76
  6260  000A7C  6F62               	movwf	___awmod@divisor& (0+255),b
  6261  000A7E  EC20  F019         	call	___awmod	;wreg free
  6262  000A82  D010               	goto	L14
  6263  000A84                     l3401:
  6264  000A84  0E4C               	movlw	76
  6265  000A86  0100               	movlb	0	; () banked
  6266  000A88  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6267  000A8A  0100               	movlb	0	; () banked
  6268  000A8C  6F60               	movwf	___awmod@dividend& (0+255),b
  6269  000A8E  0100               	movlb	0	; () banked
  6270  000A90  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6271  000A92  0E00               	movlw	0
  6272  000A94  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6273  000A96  0E00               	movlw	0
  6274  000A98  0100               	movlb	0	; () banked
  6275  000A9A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6276  000A9C  0E4C               	movlw	76
  6277  000A9E  6F62               	movwf	___awmod@divisor& (0+255),b
  6278  000AA0  EC20  F019         	call	___awmod	;wreg free
  6279  000AA4                     L14:
  6280  000AA4  C060  F079         	movff	?___awmod,_DoubleFadedLoop$1262
  6281  000AA8  C061  F07A         	movff	?___awmod+1,_DoubleFadedLoop$1262+1
  6282  000AAC  C079  F082         	movff	_DoubleFadedLoop$1262,DoubleFadedLoop@x
  6283                           
  6284                           ;Pattern_PtrnFunctions.c: 142: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6285  000AB0  0E04               	movlw	4
  6286  000AB2  0100               	movlb	0	; () banked
  6287  000AB4  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6288  000AB6  D006               	goto	l3409
  6289                           
  6290                           ; BSR set to: 0
  6291  000AB8  0E00               	movlw	0
  6292  000ABA  0100               	movlb	0	; () banked
  6293  000ABC  6F7C               	movwf	(_DoubleFadedLoop$1263+1)& (0+255),b
  6294  000ABE  0E00               	movlw	0
  6295  000AC0  6F7B               	movwf	_DoubleFadedLoop$1263& (0+255),b
  6296  000AC2  D01F               	goto	l3411
  6297  000AC4                     l3409:
  6298                           
  6299                           ; BSR set to: 0
  6300  000AC4  0100               	movlb	0	; () banked
  6301  000AC6  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6302  000AC8  0D0F               	mullw	15
  6303  000ACA  CFF3 F060          	movff	prodl,___awdiv@dividend
  6304  000ACE  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6305  000AD2  0E00               	movlw	0
  6306  000AD4  0100               	movlb	0	; () banked
  6307  000AD6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6308  000AD8  0E05               	movlw	5
  6309  000ADA  6F62               	movwf	___awdiv@divisor& (0+255),b
  6310  000ADC  ECBC  F017         	call	___awdiv	;wreg free
  6311  000AE0  0100               	movlb	0	; () banked
  6312  000AE2  1F60               	comf	?___awdiv& (0+255),f,b
  6313  000AE4  0100               	movlb	0	; () banked
  6314  000AE6  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6315  000AE8  0100               	movlb	0	; () banked
  6316  000AEA  4B60               	infsnz	?___awdiv& (0+255),f,b
  6317  000AEC  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6318  000AEE  0E0F               	movlw	15
  6319  000AF0  0100               	movlb	0	; () banked
  6320  000AF2  2560               	addwf	?___awdiv& (0+255),w,b
  6321  000AF4  0100               	movlb	0	; () banked
  6322  000AF6  6F7B               	movwf	_DoubleFadedLoop$1263& (0+255),b
  6323  000AF8  0E00               	movlw	0
  6324  000AFA  0100               	movlb	0	; () banked
  6325  000AFC  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6326  000AFE  0100               	movlb	0	; () banked
  6327  000B00  6F7C               	movwf	(_DoubleFadedLoop$1263+1)& (0+255),b
  6328  000B02                     l3411:
  6329                           
  6330                           ; BSR set to: 0
  6331  000B02  C07B  F081         	movff	_DoubleFadedLoop$1263,DoubleFadedLoop@val
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;Pattern_PtrnFunctions.c: 143: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6335  000B06  0100               	movlb	0	; () banked
  6336  000B08  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6337  000B0A  0100               	movlb	0	; () banked
  6338  000B0C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6339  000B0E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6340  000B10  0100               	movlb	0	; () banked
  6341  000B12  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6342  000B14  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6343  000B16  0EF0               	movlw	240
  6344  000B18  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6345  000B1A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6346  000B1C  0B0F               	andlw	15
  6347  000B1E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6348  000B20  0EF0               	movlw	240
  6349  000B22  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6350  000B24  0100               	movlb	0	; () banked
  6351  000B26  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6352  000B28  0100               	movlb	0	; () banked
  6353  000B2A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6354  000B2C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6355  000B2E  0100               	movlb	0	; () banked
  6356  000B30  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6357  000B32  0100               	movlb	0	; () banked
  6358  000B34  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6359  000B36  0100               	movlb	0	; () banked
  6360  000B38  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6361  000B3A  0100               	movlb	0	; () banked
  6362  000B3C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6363  000B3E  0100               	movlb	0	; () banked
  6364  000B40  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6365  000B42  0100               	movlb	0	; () banked
  6366  000B44  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6367  000B46  0E00               	movlw	0
  6368  000B48  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6369  000B4A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6370  000B4E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6371  000B52  50DF               	movf	indf2,w,c
  6372  000B54  0100               	movlb	0	; () banked
  6373  000B56  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6374  000B58  0100               	movlb	0	; () banked
  6375  000B5A  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6376  000B5C  0100               	movlb	0	; () banked
  6377  000B5E  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6378  000B60  0100               	movlb	0	; () banked
  6379  000B62  6F60               	movwf	___awmod@dividend& (0+255),b
  6380  000B64  0100               	movlb	0	; () banked
  6381  000B66  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6382  000B68  0100               	movlb	0	; () banked
  6383  000B6A  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6384  000B6C  0E00               	movlw	0
  6385  000B6E  0100               	movlb	0	; () banked
  6386  000B70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6387  000B72  0E4C               	movlw	76
  6388  000B74  6F62               	movwf	___awmod@divisor& (0+255),b
  6389  000B76  EC20  F019         	call	___awmod	;wreg free
  6390  000B7A  90D8               	bcf	status,0,c
  6391  000B7C  0100               	movlb	0	; () banked
  6392  000B7E  3760               	rlcf	?___awmod& (0+255),f,b
  6393  000B80  0100               	movlb	0	; () banked
  6394  000B82  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6395  000B84  0100               	movlb	0	; () banked
  6396  000B86  5160               	movf	?___awmod& (0+255),w,b
  6397  000B88  0100               	movlb	0	; () banked
  6398  000B8A  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6399  000B8C  6ED9               	movwf	fsr2l,c
  6400  000B8E  0100               	movlb	0	; () banked
  6401  000B90  5161               	movf	(?___awmod+1)& (0+255),w,b
  6402  000B92  0100               	movlb	0	; () banked
  6403  000B94  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6404  000B96  6EDA               	movwf	fsr2h,c
  6405  000B98  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6406  000B9C  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;Pattern_PtrnFunctions.c: 144: ptrnPointer[(i+76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6410  000BA0  0100               	movlb	0	; () banked
  6411  000BA2  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6412  000BA4  0100               	movlb	0	; () banked
  6413  000BA6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6414  000BA8  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6415  000BAA  0100               	movlb	0	; () banked
  6416  000BAC  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6417  000BAE  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6418  000BB0  0EF0               	movlw	240
  6419  000BB2  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6420  000BB4  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6421  000BB6  0B0F               	andlw	15
  6422  000BB8  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6423  000BBA  0EF0               	movlw	240
  6424  000BBC  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6425  000BBE  0100               	movlb	0	; () banked
  6426  000BC0  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6427  000BC2  0100               	movlb	0	; () banked
  6428  000BC4  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6429  000BC6  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6430  000BC8  0100               	movlb	0	; () banked
  6431  000BCA  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6432  000BCC  0100               	movlb	0	; () banked
  6433  000BCE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6434  000BD0  0100               	movlb	0	; () banked
  6435  000BD2  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6436  000BD4  0100               	movlb	0	; () banked
  6437  000BD6  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6438  000BD8  0100               	movlb	0	; () banked
  6439  000BDA  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6440  000BDC  0100               	movlb	0	; () banked
  6441  000BDE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6442  000BE0  0E00               	movlw	0
  6443  000BE2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6444  000BE4  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6445  000BE8  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6446  000BEC  50DF               	movf	indf2,w,c
  6447  000BEE  0100               	movlb	0	; () banked
  6448  000BF0  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6449  000BF2  0100               	movlb	0	; () banked
  6450  000BF4  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6451  000BF6  C083  F077         	movff	DoubleFadedLoop@i,??_DoubleFadedLoop+5
  6452  000BFA  0100               	movlb	0	; () banked
  6453  000BFC  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6454  000BFE  0100               	movlb	0	; () banked
  6455  000C00  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6456  000C02  0E00               	movlw	0
  6457  000C04  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6458  000C06  0E26               	movlw	38
  6459  000C08  0100               	movlb	0	; () banked
  6460  000C0A  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6461  000C0C  0100               	movlb	0	; () banked
  6462  000C0E  6F60               	movwf	___awmod@dividend& (0+255),b
  6463  000C10  0E00               	movlw	0
  6464  000C12  0100               	movlb	0	; () banked
  6465  000C14  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6466  000C16  0100               	movlb	0	; () banked
  6467  000C18  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6468  000C1A  0E00               	movlw	0
  6469  000C1C  0100               	movlb	0	; () banked
  6470  000C1E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6471  000C20  0E4C               	movlw	76
  6472  000C22  6F62               	movwf	___awmod@divisor& (0+255),b
  6473  000C24  EC20  F019         	call	___awmod	;wreg free
  6474  000C28  90D8               	bcf	status,0,c
  6475  000C2A  0100               	movlb	0	; () banked
  6476  000C2C  3760               	rlcf	?___awmod& (0+255),f,b
  6477  000C2E  0100               	movlb	0	; () banked
  6478  000C30  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6479  000C32  0100               	movlb	0	; () banked
  6480  000C34  5160               	movf	?___awmod& (0+255),w,b
  6481  000C36  0100               	movlb	0	; () banked
  6482  000C38  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6483  000C3A  6ED9               	movwf	fsr2l,c
  6484  000C3C  0100               	movlb	0	; () banked
  6485  000C3E  5161               	movf	(?___awmod+1)& (0+255),w,b
  6486  000C40  0100               	movlb	0	; () banked
  6487  000C42  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6488  000C44  6EDA               	movwf	fsr2h,c
  6489  000C46  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6490  000C4A  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6491                           
  6492                           ; BSR set to: 0
  6493  000C4E  0100               	movlb	0	; () banked
  6494  000C50  2B83               	incf	DoubleFadedLoop@i& (0+255),f,b
  6495  000C52  D6B8               	goto	l3393
  6496  000C54                     l3421:
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;Pattern_PtrnFunctions.c: 145: }
  6500                           ;Pattern_PtrnFunctions.c: 146: for(uint8_t i=76*3/4;i<76;i++){
  6501  000C54  0E39               	movlw	57
  6502  000C56  0100               	movlb	0	; () banked
  6503  000C58  6F84               	movwf	DoubleFadedLoop@i_1264& (0+255),b
  6504  000C5A                     l3423:
  6505                           
  6506                           ; BSR set to: 0
  6507  000C5A  0E4B               	movlw	75
  6508  000C5C  0100               	movlb	0	; () banked
  6509  000C5E  6584               	cpfsgt	DoubleFadedLoop@i_1264& (0+255),b
  6510  000C60  D001               	goto	l3427
  6511  000C62  D143               	goto	l3451
  6512  000C64                     l3427:
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;Pattern_PtrnFunctions.c: 148: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6516  000C64  0E4C               	movlw	76
  6517  000C66  0100               	movlb	0	; () banked
  6518  000C68  2584               	addwf	DoubleFadedLoop@i_1264& (0+255),w,b
  6519  000C6A  0100               	movlb	0	; () banked
  6520  000C6C  6F60               	movwf	___awmod@dividend& (0+255),b
  6521  000C6E  0100               	movlb	0	; () banked
  6522  000C70  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6523  000C72  0E00               	movlw	0
  6524  000C74  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6525  000C76  0E00               	movlw	0
  6526  000C78  0100               	movlb	0	; () banked
  6527  000C7A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6528  000C7C  0E4C               	movlw	76
  6529  000C7E  6F62               	movwf	___awmod@divisor& (0+255),b
  6530  000C80  EC20  F019         	call	___awmod	;wreg free
  6531  000C84  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6532  000C88  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6533  000C8C  0100               	movlb	0	; () banked
  6534  000C8E  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6535  000C90  0100               	movlb	0	; () banked
  6536  000C92  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6537  000C94  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6538  000C96  0100               	movlb	0	; () banked
  6539  000C98  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6540  000C9A  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6541  000C9C  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6542  000C9E  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6543  000CA0  0E4C               	movlw	76
  6544  000CA2  0100               	movlb	0	; () banked
  6545  000CA4  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6546  000CA6  0100               	movlb	0	; () banked
  6547  000CA8  6F60               	movwf	___awmod@dividend& (0+255),b
  6548  000CAA  0E00               	movlw	0
  6549  000CAC  0100               	movlb	0	; () banked
  6550  000CAE  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6551  000CB0  0100               	movlb	0	; () banked
  6552  000CB2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6553  000CB4  0E00               	movlw	0
  6554  000CB6  0100               	movlb	0	; () banked
  6555  000CB8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6556  000CBA  0E4C               	movlw	76
  6557  000CBC  6F62               	movwf	___awmod@divisor& (0+255),b
  6558  000CBE  EC20  F019         	call	___awmod	;wreg free
  6559  000CC2  0100               	movlb	0	; () banked
  6560  000CC4  5160               	movf	?___awmod& (0+255),w,b
  6561  000CC6  0100               	movlb	0	; () banked
  6562  000CC8  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6563  000CCA  0100               	movlb	0	; () banked
  6564  000CCC  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6565  000CCE  0A80               	xorlw	128
  6566  000CD0  0100               	movlb	0	; () banked
  6567  000CD2  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6568  000CD4  0100               	movlb	0	; () banked
  6569  000CD6  5161               	movf	(?___awmod+1)& (0+255),w,b
  6570  000CD8  0A80               	xorlw	128
  6571  000CDA  0100               	movlb	0	; () banked
  6572  000CDC  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6573  000CDE  A0D8               	btfss	status,0,c
  6574  000CE0  D01C               	goto	l3431
  6575                           
  6576                           ; BSR set to: 0
  6577  000CE2  0100               	movlb	0	; () banked
  6578  000CE4  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6579  000CE6  0100               	movlb	0	; () banked
  6580  000CE8  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6581  000CEA  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6582  000CEC  0100               	movlb	0	; () banked
  6583  000CEE  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6584  000CF0  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6585  000CF2  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6586  000CF4  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6587  000CF6  0E4C               	movlw	76
  6588  000CF8  0100               	movlb	0	; () banked
  6589  000CFA  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6590  000CFC  0100               	movlb	0	; () banked
  6591  000CFE  6F60               	movwf	___awmod@dividend& (0+255),b
  6592  000D00  0E00               	movlw	0
  6593  000D02  0100               	movlb	0	; () banked
  6594  000D04  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6595  000D06  0100               	movlb	0	; () banked
  6596  000D08  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6597  000D0A  0E00               	movlw	0
  6598  000D0C  0100               	movlb	0	; () banked
  6599  000D0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6600  000D10  0E4C               	movlw	76
  6601  000D12  6F62               	movwf	___awmod@divisor& (0+255),b
  6602  000D14  EC20  F019         	call	___awmod	;wreg free
  6603  000D18  D010               	goto	L15
  6604  000D1A                     l3431:
  6605  000D1A  0E4C               	movlw	76
  6606  000D1C  0100               	movlb	0	; () banked
  6607  000D1E  2584               	addwf	DoubleFadedLoop@i_1264& (0+255),w,b
  6608  000D20  0100               	movlb	0	; () banked
  6609  000D22  6F60               	movwf	___awmod@dividend& (0+255),b
  6610  000D24  0100               	movlb	0	; () banked
  6611  000D26  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6612  000D28  0E00               	movlw	0
  6613  000D2A  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6614  000D2C  0E00               	movlw	0
  6615  000D2E  0100               	movlb	0	; () banked
  6616  000D30  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6617  000D32  0E4C               	movlw	76
  6618  000D34  6F62               	movwf	___awmod@divisor& (0+255),b
  6619  000D36  EC20  F019         	call	___awmod	;wreg free
  6620  000D3A                     L15:
  6621  000D3A  C060  F07D         	movff	?___awmod,_DoubleFadedLoop$1265
  6622  000D3E  C061  F07E         	movff	?___awmod+1,_DoubleFadedLoop$1265+1
  6623  000D42  C07D  F082         	movff	_DoubleFadedLoop$1265,DoubleFadedLoop@x
  6624                           
  6625                           ;Pattern_PtrnFunctions.c: 149: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6626  000D46  0E04               	movlw	4
  6627  000D48  0100               	movlb	0	; () banked
  6628  000D4A  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6629  000D4C  D006               	goto	l3439
  6630                           
  6631                           ; BSR set to: 0
  6632  000D4E  0E00               	movlw	0
  6633  000D50  0100               	movlb	0	; () banked
  6634  000D52  6F80               	movwf	(_DoubleFadedLoop$1266+1)& (0+255),b
  6635  000D54  0E00               	movlw	0
  6636  000D56  6F7F               	movwf	_DoubleFadedLoop$1266& (0+255),b
  6637  000D58  D01F               	goto	l3441
  6638  000D5A                     l3439:
  6639                           
  6640                           ; BSR set to: 0
  6641  000D5A  0100               	movlb	0	; () banked
  6642  000D5C  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6643  000D5E  0D0F               	mullw	15
  6644  000D60  CFF3 F060          	movff	prodl,___awdiv@dividend
  6645  000D64  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6646  000D68  0E00               	movlw	0
  6647  000D6A  0100               	movlb	0	; () banked
  6648  000D6C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6649  000D6E  0E05               	movlw	5
  6650  000D70  6F62               	movwf	___awdiv@divisor& (0+255),b
  6651  000D72  ECBC  F017         	call	___awdiv	;wreg free
  6652  000D76  0100               	movlb	0	; () banked
  6653  000D78  1F60               	comf	?___awdiv& (0+255),f,b
  6654  000D7A  0100               	movlb	0	; () banked
  6655  000D7C  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6656  000D7E  0100               	movlb	0	; () banked
  6657  000D80  4B60               	infsnz	?___awdiv& (0+255),f,b
  6658  000D82  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6659  000D84  0E0F               	movlw	15
  6660  000D86  0100               	movlb	0	; () banked
  6661  000D88  2560               	addwf	?___awdiv& (0+255),w,b
  6662  000D8A  0100               	movlb	0	; () banked
  6663  000D8C  6F7F               	movwf	_DoubleFadedLoop$1266& (0+255),b
  6664  000D8E  0E00               	movlw	0
  6665  000D90  0100               	movlb	0	; () banked
  6666  000D92  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6667  000D94  0100               	movlb	0	; () banked
  6668  000D96  6F80               	movwf	(_DoubleFadedLoop$1266+1)& (0+255),b
  6669  000D98                     l3441:
  6670                           
  6671                           ; BSR set to: 0
  6672  000D98  C07F  F081         	movff	_DoubleFadedLoop$1266,DoubleFadedLoop@val
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;Pattern_PtrnFunctions.c: 150: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6676  000D9C  0100               	movlb	0	; () banked
  6677  000D9E  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6678  000DA0  0100               	movlb	0	; () banked
  6679  000DA2  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6680  000DA4  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6681  000DA6  0100               	movlb	0	; () banked
  6682  000DA8  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6683  000DAA  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6684  000DAC  0EF0               	movlw	240
  6685  000DAE  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6686  000DB0  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6687  000DB2  0B0F               	andlw	15
  6688  000DB4  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6689  000DB6  0EF0               	movlw	240
  6690  000DB8  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6691  000DBA  0100               	movlb	0	; () banked
  6692  000DBC  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6693  000DBE  0100               	movlb	0	; () banked
  6694  000DC0  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6695  000DC2  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6696  000DC4  0100               	movlb	0	; () banked
  6697  000DC6  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6698  000DC8  0100               	movlb	0	; () banked
  6699  000DCA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6700  000DCC  0100               	movlb	0	; () banked
  6701  000DCE  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6702  000DD0  0100               	movlb	0	; () banked
  6703  000DD2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6704  000DD4  0100               	movlb	0	; () banked
  6705  000DD6  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6706  000DD8  0100               	movlb	0	; () banked
  6707  000DDA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6708  000DDC  0E00               	movlw	0
  6709  000DDE  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6710  000DE0  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6711  000DE4  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6712  000DE8  50DF               	movf	indf2,w,c
  6713  000DEA  0100               	movlb	0	; () banked
  6714  000DEC  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6715  000DEE  0100               	movlb	0	; () banked
  6716  000DF0  5184               	movf	DoubleFadedLoop@i_1264& (0+255),w,b
  6717  000DF2  0100               	movlb	0	; () banked
  6718  000DF4  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6719  000DF6  0100               	movlb	0	; () banked
  6720  000DF8  6F60               	movwf	___awmod@dividend& (0+255),b
  6721  000DFA  0100               	movlb	0	; () banked
  6722  000DFC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6723  000DFE  0100               	movlb	0	; () banked
  6724  000E00  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6725  000E02  0E00               	movlw	0
  6726  000E04  0100               	movlb	0	; () banked
  6727  000E06  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6728  000E08  0E4C               	movlw	76
  6729  000E0A  6F62               	movwf	___awmod@divisor& (0+255),b
  6730  000E0C  EC20  F019         	call	___awmod	;wreg free
  6731  000E10  90D8               	bcf	status,0,c
  6732  000E12  0100               	movlb	0	; () banked
  6733  000E14  3760               	rlcf	?___awmod& (0+255),f,b
  6734  000E16  0100               	movlb	0	; () banked
  6735  000E18  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6736  000E1A  0100               	movlb	0	; () banked
  6737  000E1C  5160               	movf	?___awmod& (0+255),w,b
  6738  000E1E  0100               	movlb	0	; () banked
  6739  000E20  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6740  000E22  6ED9               	movwf	fsr2l,c
  6741  000E24  0100               	movlb	0	; () banked
  6742  000E26  5161               	movf	(?___awmod+1)& (0+255),w,b
  6743  000E28  0100               	movlb	0	; () banked
  6744  000E2A  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6745  000E2C  6EDA               	movwf	fsr2h,c
  6746  000E2E  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6747  000E32  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;Pattern_PtrnFunctions.c: 151: ptrnPointer[(i-76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6751  000E36  0100               	movlb	0	; () banked
  6752  000E38  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6753  000E3A  0100               	movlb	0	; () banked
  6754  000E3C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6755  000E3E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6756  000E40  0100               	movlb	0	; () banked
  6757  000E42  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6758  000E44  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6759  000E46  0EF0               	movlw	240
  6760  000E48  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6761  000E4A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6762  000E4C  0B0F               	andlw	15
  6763  000E4E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6764  000E50  0EF0               	movlw	240
  6765  000E52  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6766  000E54  0100               	movlb	0	; () banked
  6767  000E56  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6768  000E58  0100               	movlb	0	; () banked
  6769  000E5A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6770  000E5C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6771  000E5E  0100               	movlb	0	; () banked
  6772  000E60  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6773  000E62  0100               	movlb	0	; () banked
  6774  000E64  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6775  000E66  0100               	movlb	0	; () banked
  6776  000E68  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6777  000E6A  0100               	movlb	0	; () banked
  6778  000E6C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6779  000E6E  0100               	movlb	0	; () banked
  6780  000E70  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6781  000E72  0100               	movlb	0	; () banked
  6782  000E74  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6783  000E76  0E00               	movlw	0
  6784  000E78  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6785  000E7A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6786  000E7E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6787  000E82  50DF               	movf	indf2,w,c
  6788  000E84  0100               	movlb	0	; () banked
  6789  000E86  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6790  000E88  0100               	movlb	0	; () banked
  6791  000E8A  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6792  000E8C  C084  F077         	movff	DoubleFadedLoop@i_1264,??_DoubleFadedLoop+5
  6793  000E90  0100               	movlb	0	; () banked
  6794  000E92  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6795  000E94  0100               	movlb	0	; () banked
  6796  000E96  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6797  000E98  0E00               	movlw	0
  6798  000E9A  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6799  000E9C  0EDA               	movlw	218
  6800  000E9E  0100               	movlb	0	; () banked
  6801  000EA0  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6802  000EA2  0100               	movlb	0	; () banked
  6803  000EA4  6F60               	movwf	___awmod@dividend& (0+255),b
  6804  000EA6  0EFF               	movlw	255
  6805  000EA8  0100               	movlb	0	; () banked
  6806  000EAA  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6807  000EAC  0100               	movlb	0	; () banked
  6808  000EAE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6809  000EB0  0E00               	movlw	0
  6810  000EB2  0100               	movlb	0	; () banked
  6811  000EB4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6812  000EB6  0E4C               	movlw	76
  6813  000EB8  6F62               	movwf	___awmod@divisor& (0+255),b
  6814  000EBA  EC20  F019         	call	___awmod	;wreg free
  6815  000EBE  90D8               	bcf	status,0,c
  6816  000EC0  0100               	movlb	0	; () banked
  6817  000EC2  3760               	rlcf	?___awmod& (0+255),f,b
  6818  000EC4  0100               	movlb	0	; () banked
  6819  000EC6  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6820  000EC8  0100               	movlb	0	; () banked
  6821  000ECA  5160               	movf	?___awmod& (0+255),w,b
  6822  000ECC  0100               	movlb	0	; () banked
  6823  000ECE  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6824  000ED0  6ED9               	movwf	fsr2l,c
  6825  000ED2  0100               	movlb	0	; () banked
  6826  000ED4  5161               	movf	(?___awmod+1)& (0+255),w,b
  6827  000ED6  0100               	movlb	0	; () banked
  6828  000ED8  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6829  000EDA  6EDA               	movwf	fsr2h,c
  6830  000EDC  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6831  000EE0  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6832                           
  6833                           ; BSR set to: 0
  6834  000EE4  0100               	movlb	0	; () banked
  6835  000EE6  2B84               	incf	DoubleFadedLoop@i_1264& (0+255),f,b
  6836  000EE8  D6B8               	goto	l3423
  6837  000EEA                     l3451:
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;Pattern_PtrnFunctions.c: 152: }
  6841                           ;Pattern_PtrnFunctions.c: 153: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  6842  000EEA  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6843  000EEE  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6844  000EF2  50DF               	movf	indf2,w,c
  6845  000EF4  0100               	movlb	0	; () banked
  6846  000EF6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6847  000EF8  0E01               	movlw	1
  6848  000EFA  0100               	movlb	0	; () banked
  6849  000EFC  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6850  000EFE  0100               	movlb	0	; () banked
  6851  000F00  6F60               	movwf	___awmod@dividend& (0+255),b
  6852  000F02  0100               	movlb	0	; () banked
  6853  000F04  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6854  000F06  0E00               	movlw	0
  6855  000F08  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6856  000F0A  0E00               	movlw	0
  6857  000F0C  0100               	movlb	0	; () banked
  6858  000F0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6859  000F10  0E4C               	movlw	76
  6860  000F12  6F62               	movwf	___awmod@divisor& (0+255),b
  6861  000F14  EC20  F019         	call	___awmod	;wreg free
  6862  000F18  0100               	movlb	0	; () banked
  6863  000F1A  5160               	movf	?___awmod& (0+255),w,b
  6864  000F1C  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6865  000F20  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6866  000F24  6EDF               	movwf	indf2,c
  6867                           
  6868                           ; BSR set to: 0
  6869  000F26  0012               	return		;funcret
  6870  000F28                     __end_of_DoubleFadedLoop:
  6871                           	opt stack 0
  6872                           tosu	equ	0xFFF
  6873                           tosh	equ	0xFFE
  6874                           tosl	equ	0xFFD
  6875                           pclath	equ	0xFFA
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           postinc0	equ	0xFEE
  6883                           wreg	equ	0xFE8
  6884                           postdec1	equ	0xFE5
  6885                           fsr1h	equ	0xFE2
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           plusw2	equ	0xFDB
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _CenterBreathe *****************
  6896 ;; Defined at:
  6897 ;;		line 102 in file "Pattern_PtrnFunctions.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  6900 ;;		 -> PixelPattern(152), 
  6901 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  6902 ;;		 -> PatternStepCounter(1), 
  6903 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  6904 ;;		 -> CycleCounter(4), 
  6905 ;;  base_hue        1   14[BANK0 ] unsigned char 
  6906 ;;  base_sat        1   15[BANK0 ] unsigned char 
  6907 ;;  15728           2   16[BANK0 ] PTR void 
  6908 ;;		 -> NULL(0), 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  i               1   47[BANK0 ] unsigned char 
  6911 ;;  x               1   46[BANK0 ] unsigned char 
  6912 ;;  pulseWidth      1   45[BANK0 ] unsigned char 
  6913 ;;  val             1   44[BANK0 ] unsigned char 
  6914 ;;  fade_thresh     1   43[BANK0 ] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6924 ;;      Params:         0      10       0       0
  6925 ;;      Locals:         0      21       0       0
  6926 ;;      Temps:          0       9       0       0
  6927 ;;      Totals:         0      40       0       0
  6928 ;;Total ram usage:       40 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    8
  6931 ;; This function calls:
  6932 ;;		___awdiv
  6933 ;;		___awmod
  6934 ;; This function is called by:
  6935 ;;		_UpdatePattern
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text22
  6940  0017AC                     __ptext22:
  6941                           	opt stack 0
  6942  0017AC                     _CenterBreathe:
  6943                           	opt stack 18
  6944                           
  6945                           ;Pattern_PtrnFunctions.c: 103: static bool rising = 1;
  6946                           ;Pattern_PtrnFunctions.c: 104: uint8_t fade_thresh = 10;
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;incstack = 0
  6950  0017AC  0E0A               	movlw	10
  6951  0017AE  0100               	movlb	0	; () banked
  6952  0017B0  6F8B               	movwf	CenterBreathe@fade_thresh& (0+255),b
  6953                           
  6954                           ;Pattern_PtrnFunctions.c: 105: uint8_t val, x, pulseWidth;
  6955                           ;Pattern_PtrnFunctions.c: 107: pulseWidth = 15;
  6956  0017B2  0E0F               	movlw	15
  6957  0017B4  0100               	movlb	0	; () banked
  6958  0017B6  6F8D               	movwf	CenterBreathe@pulseWidth& (0+255),b
  6959                           
  6960                           ;Pattern_PtrnFunctions.c: 108: for(uint8_t i=0;i<76;i++){
  6961  0017B8  0E00               	movlw	0
  6962  0017BA  0100               	movlb	0	; () banked
  6963  0017BC  6F8F               	movwf	CenterBreathe@i& (0+255),b
  6964  0017BE                     l3301:
  6965                           
  6966                           ; BSR set to: 0
  6967  0017BE  0E4B               	movlw	75
  6968  0017C0  0100               	movlb	0	; () banked
  6969  0017C2  658F               	cpfsgt	CenterBreathe@i& (0+255),b
  6970  0017C4  D001               	goto	l3307
  6971  0017C6  D15A               	goto	l3347
  6972  0017C8                     l3307:
  6973                           
  6974                           ; BSR set to: 0
  6975  0017C8  0E00               	movlw	0
  6976  0017CA  0100               	movlb	0	; () banked
  6977  0017CC  6F7E               	movwf	(_CenterBreathe$1233+1)& (0+255),b
  6978  0017CE  0E25               	movlw	37
  6979  0017D0  6F7D               	movwf	_CenterBreathe$1233& (0+255),b
  6980                           
  6981                           ; BSR set to: 0
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986  0017D2  0E00               	movlw	0
  6987  0017D4  0100               	movlb	0	; () banked
  6988  0017D6  6F80               	movwf	(_CenterBreathe$1234+1)& (0+255),b
  6989  0017D8  0E25               	movlw	37
  6990  0017DA  6F7F               	movwf	_CenterBreathe$1234& (0+255),b
  6991                           
  6992                           ; BSR set to: 0
  6993                           
  6994                           ; BSR set to: 0
  6995  0017DC  C07F  F072         	movff	_CenterBreathe$1234,??_CenterBreathe
  6996  0017E0  C080  F073         	movff	_CenterBreathe$1234+1,??_CenterBreathe+1
  6997  0017E4  0100               	movlb	0	; () banked
  6998  0017E6  1F72               	comf	??_CenterBreathe& (0+255),f,b
  6999  0017E8  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7000  0017EA  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7001  0017EC  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7002  0017EE  0100               	movlb	0	; () banked
  7003  0017F0  518F               	movf	CenterBreathe@i& (0+255),w,b
  7004  0017F2  0100               	movlb	0	; () banked
  7005  0017F4  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  7006  0017F6  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  7007  0017F8  0100               	movlb	0	; () banked
  7008  0017FA  5172               	movf	??_CenterBreathe& (0+255),w,b
  7009  0017FC  0100               	movlb	0	; () banked
  7010  0017FE  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  7011  001800  0100               	movlb	0	; () banked
  7012  001802  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7013  001804  0100               	movlb	0	; () banked
  7014  001806  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  7015  001808  0E4C               	movlw	76
  7016  00180A  0100               	movlb	0	; () banked
  7017  00180C  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  7018  00180E  0100               	movlb	0	; () banked
  7019  001810  6F60               	movwf	___awmod@dividend& (0+255),b
  7020  001812  0E00               	movlw	0
  7021  001814  0100               	movlb	0	; () banked
  7022  001816  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  7023  001818  0100               	movlb	0	; () banked
  7024  00181A  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7025  00181C  0E00               	movlw	0
  7026  00181E  0100               	movlb	0	; () banked
  7027  001820  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7028  001822  0E4C               	movlw	76
  7029  001824  6F62               	movwf	___awmod@divisor& (0+255),b
  7030  001826  EC20  F019         	call	___awmod	;wreg free
  7031  00182A  C060  F076         	movff	?___awmod,??_CenterBreathe+4
  7032  00182E  C061  F077         	movff	?___awmod+1,??_CenterBreathe+5
  7033  001832  0100               	movlb	0	; () banked
  7034  001834  518F               	movf	CenterBreathe@i& (0+255),w,b
  7035  001836  0100               	movlb	0	; () banked
  7036  001838  6F78               	movwf	(??_CenterBreathe+6)& (0+255),b
  7037  00183A  6B79               	clrf	(??_CenterBreathe+7)& (0+255),b
  7038  00183C  0100               	movlb	0	; () banked
  7039  00183E  1F78               	comf	(??_CenterBreathe+6)& (0+255),f,b
  7040  001840  1F79               	comf	(??_CenterBreathe+7)& (0+255),f,b
  7041  001842  4B78               	infsnz	(??_CenterBreathe+6)& (0+255),f,b
  7042  001844  2B79               	incf	(??_CenterBreathe+7)& (0+255),f,b
  7043  001846  0100               	movlb	0	; () banked
  7044  001848  517D               	movf	_CenterBreathe$1233& (0+255),w,b
  7045  00184A  0100               	movlb	0	; () banked
  7046  00184C  2778               	addwf	(??_CenterBreathe+6)& (0+255),f,b
  7047  00184E  0100               	movlb	0	; () banked
  7048  001850  517E               	movf	(_CenterBreathe$1233+1)& (0+255),w,b
  7049  001852  0100               	movlb	0	; () banked
  7050  001854  2379               	addwfc	(??_CenterBreathe+7)& (0+255),f,b
  7051  001856  0E4C               	movlw	76
  7052  001858  0100               	movlb	0	; () banked
  7053  00185A  2578               	addwf	(??_CenterBreathe+6)& (0+255),w,b
  7054  00185C  0100               	movlb	0	; () banked
  7055  00185E  6F60               	movwf	___awmod@dividend& (0+255),b
  7056  001860  0E00               	movlw	0
  7057  001862  0100               	movlb	0	; () banked
  7058  001864  2179               	addwfc	(??_CenterBreathe+7)& (0+255),w,b
  7059  001866  0100               	movlb	0	; () banked
  7060  001868  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7061  00186A  0E00               	movlw	0
  7062  00186C  0100               	movlb	0	; () banked
  7063  00186E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7064  001870  0E4C               	movlw	76
  7065  001872  6F62               	movwf	___awmod@divisor& (0+255),b
  7066  001874  EC20  F019         	call	___awmod	;wreg free
  7067  001878  0100               	movlb	0	; () banked
  7068  00187A  5160               	movf	?___awmod& (0+255),w,b
  7069  00187C  0100               	movlb	0	; () banked
  7070  00187E  5D76               	subwf	(??_CenterBreathe+4)& (0+255),w,b
  7071  001880  0100               	movlb	0	; () banked
  7072  001882  5177               	movf	(??_CenterBreathe+5)& (0+255),w,b
  7073  001884  0A80               	xorlw	128
  7074  001886  0100               	movlb	0	; () banked
  7075  001888  6F7A               	movwf	(??_CenterBreathe+8)& (0+255),b
  7076  00188A  0100               	movlb	0	; () banked
  7077  00188C  5161               	movf	(?___awmod+1)& (0+255),w,b
  7078  00188E  0A80               	xorlw	128
  7079  001890  0100               	movlb	0	; () banked
  7080  001892  597A               	subwfb	(??_CenterBreathe+8)& (0+255),w,b
  7081  001894  A0D8               	btfss	status,0,c
  7082  001896  D029               	goto	l3321
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087                           
  7088                           ; BSR set to: 0
  7089  001898  0E00               	movlw	0
  7090  00189A  0100               	movlb	0	; () banked
  7091  00189C  6F82               	movwf	(_CenterBreathe$1235+1)& (0+255),b
  7092  00189E  0E25               	movlw	37
  7093  0018A0  6F81               	movwf	_CenterBreathe$1235& (0+255),b
  7094                           
  7095                           ; BSR set to: 0
  7096                           
  7097                           ; BSR set to: 0
  7098  0018A2  0100               	movlb	0	; () banked
  7099  0018A4  518F               	movf	CenterBreathe@i& (0+255),w,b
  7100  0018A6  0100               	movlb	0	; () banked
  7101  0018A8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7102  0018AA  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  7103  0018AC  0100               	movlb	0	; () banked
  7104  0018AE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  7105  0018B0  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7106  0018B2  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7107  0018B4  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7108  0018B6  0100               	movlb	0	; () banked
  7109  0018B8  5181               	movf	_CenterBreathe$1235& (0+255),w,b
  7110  0018BA  0100               	movlb	0	; () banked
  7111  0018BC  2772               	addwf	??_CenterBreathe& (0+255),f,b
  7112  0018BE  0100               	movlb	0	; () banked
  7113  0018C0  5182               	movf	(_CenterBreathe$1235+1)& (0+255),w,b
  7114  0018C2  0100               	movlb	0	; () banked
  7115  0018C4  2373               	addwfc	(??_CenterBreathe+1)& (0+255),f,b
  7116  0018C6  0E4C               	movlw	76
  7117  0018C8  0100               	movlb	0	; () banked
  7118  0018CA  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7119  0018CC  0100               	movlb	0	; () banked
  7120  0018CE  6F60               	movwf	___awmod@dividend& (0+255),b
  7121  0018D0  0E00               	movlw	0
  7122  0018D2  0100               	movlb	0	; () banked
  7123  0018D4  2173               	addwfc	(??_CenterBreathe+1)& (0+255),w,b
  7124  0018D6  0100               	movlb	0	; () banked
  7125  0018D8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7126  0018DA  0E00               	movlw	0
  7127  0018DC  0100               	movlb	0	; () banked
  7128  0018DE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7129  0018E0  0E4C               	movlw	76
  7130  0018E2  6F62               	movwf	___awmod@divisor& (0+255),b
  7131  0018E4  EC20  F019         	call	___awmod	;wreg free
  7132  0018E8  D02C               	goto	L16
  7133  0018EA                     l3321:
  7134                           
  7135                           ; BSR set to: 0
  7136  0018EA  0E00               	movlw	0
  7137  0018EC  0100               	movlb	0	; () banked
  7138  0018EE  6F84               	movwf	(_CenterBreathe$1236+1)& (0+255),b
  7139  0018F0  0E25               	movlw	37
  7140  0018F2  6F83               	movwf	_CenterBreathe$1236& (0+255),b
  7141                           
  7142                           ; BSR set to: 0
  7143                           
  7144                           ; BSR set to: 0
  7145  0018F4  C083  F072         	movff	_CenterBreathe$1236,??_CenterBreathe
  7146  0018F8  C084  F073         	movff	_CenterBreathe$1236+1,??_CenterBreathe+1
  7147  0018FC  0100               	movlb	0	; () banked
  7148  0018FE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  7149  001900  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7150  001902  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7151  001904  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7152  001906  0100               	movlb	0	; () banked
  7153  001908  518F               	movf	CenterBreathe@i& (0+255),w,b
  7154  00190A  0100               	movlb	0	; () banked
  7155  00190C  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  7156  00190E  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  7157  001910  0100               	movlb	0	; () banked
  7158  001912  5172               	movf	??_CenterBreathe& (0+255),w,b
  7159  001914  0100               	movlb	0	; () banked
  7160  001916  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  7161  001918  0100               	movlb	0	; () banked
  7162  00191A  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7163  00191C  0100               	movlb	0	; () banked
  7164  00191E  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  7165  001920  0E4C               	movlw	76
  7166  001922  0100               	movlb	0	; () banked
  7167  001924  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  7168  001926  0100               	movlb	0	; () banked
  7169  001928  6F60               	movwf	___awmod@dividend& (0+255),b
  7170  00192A  0E00               	movlw	0
  7171  00192C  0100               	movlb	0	; () banked
  7172  00192E  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  7173  001930  0100               	movlb	0	; () banked
  7174  001932  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7175  001934  0E00               	movlw	0
  7176  001936  0100               	movlb	0	; () banked
  7177  001938  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7178  00193A  0E4C               	movlw	76
  7179  00193C  6F62               	movwf	___awmod@divisor& (0+255),b
  7180  00193E  EC20  F019         	call	___awmod	;wreg free
  7181  001942                     L16:
  7182  001942  C060  F07B         	movff	?___awmod,_CenterBreathe$1232
  7183  001946  C061  F07C         	movff	?___awmod+1,_CenterBreathe$1232+1
  7184  00194A  C07B  F08E         	movff	_CenterBreathe$1232,CenterBreathe@x
  7185                           
  7186                           ;Pattern_PtrnFunctions.c: 111: val = (x < fade_thresh ? (*ptrnStepCounter>>4) : (x < pul
      +                          seWidth ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  7187  00194E  0100               	movlb	0	; () banked
  7188  001950  518B               	movf	CenterBreathe@fade_thresh& (0+255),w,b
  7189  001952  0100               	movlb	0	; () banked
  7190  001954  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7191  001956  A0D8               	btfss	status,0,c
  7192  001958  D04B               	goto	l3337
  7193                           
  7194                           ; BSR set to: 0
  7195  00195A  0100               	movlb	0	; () banked
  7196  00195C  518D               	movf	CenterBreathe@pulseWidth& (0+255),w,b
  7197  00195E  0100               	movlb	0	; () banked
  7198  001960  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7199  001962  A0D8               	btfss	status,0,c
  7200  001964  D006               	goto	l3333
  7201                           
  7202                           ; BSR set to: 0
  7203  001966  0E00               	movlw	0
  7204  001968  0100               	movlb	0	; () banked
  7205  00196A  6F88               	movwf	(_CenterBreathe$1238+1)& (0+255),b
  7206  00196C  0E00               	movlw	0
  7207  00196E  6F87               	movwf	_CenterBreathe$1238& (0+255),b
  7208  001970  D03A               	goto	l3335
  7209  001972                     l3333:
  7210                           
  7211                           ; BSR set to: 0
  7212  001972  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7213  001976  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7214  00197A  50DF               	movf	indf2,w,c
  7215  00197C  0100               	movlb	0	; () banked
  7216  00197E  6F72               	movwf	??_CenterBreathe& (0+255),b
  7217  001980  0100               	movlb	0	; () banked
  7218  001982  5172               	movf	??_CenterBreathe& (0+255),w,b
  7219  001984  0100               	movlb	0	; () banked
  7220  001986  038E               	mulwf	CenterBreathe@x& (0+255),b
  7221  001988  CFF3 F060          	movff	prodl,___awdiv@dividend
  7222  00198C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7223  001990  C08D  F062         	movff	CenterBreathe@pulseWidth,___awdiv@divisor
  7224  001994  0100               	movlb	0	; () banked
  7225  001996  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7226  001998  ECBC  F017         	call	___awdiv	;wreg free
  7227  00199C  0100               	movlb	0	; () banked
  7228  00199E  1F60               	comf	?___awdiv& (0+255),f,b
  7229  0019A0  0100               	movlb	0	; () banked
  7230  0019A2  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7231  0019A4  0100               	movlb	0	; () banked
  7232  0019A6  4B60               	infsnz	?___awdiv& (0+255),f,b
  7233  0019A8  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7234  0019AA  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7235  0019AE  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7236  0019B2  50DF               	movf	indf2,w,c
  7237  0019B4  0100               	movlb	0	; () banked
  7238  0019B6  6F73               	movwf	(??_CenterBreathe+1)& (0+255),b
  7239  0019B8  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7240  0019BA  0100               	movlb	0	; () banked
  7241  0019BC  5160               	movf	?___awdiv& (0+255),w,b
  7242  0019BE  0100               	movlb	0	; () banked
  7243  0019C0  2773               	addwf	(??_CenterBreathe+1)& (0+255),f,b
  7244  0019C2  0100               	movlb	0	; () banked
  7245  0019C4  5161               	movf	(?___awdiv+1)& (0+255),w,b
  7246  0019C6  0100               	movlb	0	; () banked
  7247  0019C8  2374               	addwfc	(??_CenterBreathe+2)& (0+255),f,b
  7248  0019CA  0E04               	movlw	4
  7249  0019CC  0100               	movlb	0	; () banked
  7250  0019CE  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7251  0019D0                     u2145:
  7252  0019D0  0100               	movlb	0	; () banked
  7253  0019D2  3574               	rlcf	(??_CenterBreathe+2)& (0+255),w,b
  7254  0019D4  3374               	rrcf	(??_CenterBreathe+2)& (0+255),f,b
  7255  0019D6  3373               	rrcf	(??_CenterBreathe+1)& (0+255),f,b
  7256  0019D8  0100               	movlb	0	; () banked
  7257  0019DA  2F75               	decfsz	(??_CenterBreathe+3)& (0+255),f,b
  7258  0019DC  D7F9               	goto	u2145
  7259  0019DE  C073  F087         	movff	??_CenterBreathe+1,_CenterBreathe$1238
  7260  0019E2  C074  F088         	movff	??_CenterBreathe+2,_CenterBreathe$1238+1
  7261  0019E6                     l3335:
  7262                           
  7263                           ; BSR set to: 0
  7264  0019E6  C087  F085         	movff	_CenterBreathe$1238,_CenterBreathe$1237
  7265  0019EA  C088  F086         	movff	_CenterBreathe$1238+1,_CenterBreathe$1237+1
  7266  0019EE  D010               	goto	l3339
  7267  0019F0                     l3337:
  7268                           
  7269                           ; BSR set to: 0
  7270  0019F0  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7271  0019F4  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7272  0019F8  50DF               	movf	indf2,w,c
  7273  0019FA  0100               	movlb	0	; () banked
  7274  0019FC  6F72               	movwf	??_CenterBreathe& (0+255),b
  7275  0019FE  0100               	movlb	0	; () banked
  7276  001A00  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7277  001A02  0E0F               	movlw	15
  7278  001A04  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7279  001A06  0100               	movlb	0	; () banked
  7280  001A08  5172               	movf	??_CenterBreathe& (0+255),w,b
  7281  001A0A  0100               	movlb	0	; () banked
  7282  001A0C  6F85               	movwf	_CenterBreathe$1237& (0+255),b
  7283  001A0E  6B86               	clrf	(_CenterBreathe$1237+1)& (0+255),b
  7284  001A10                     l3339:
  7285                           
  7286                           ; BSR set to: 0
  7287  001A10  C085  F08C         	movff	_CenterBreathe$1237,CenterBreathe@val
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;Pattern_PtrnFunctions.c: 112: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7291  001A14  0100               	movlb	0	; () banked
  7292  001A16  516F               	movf	CenterBreathe@base_sat& (0+255),w,b
  7293  001A18  0100               	movlb	0	; () banked
  7294  001A1A  6F72               	movwf	??_CenterBreathe& (0+255),b
  7295  001A1C  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  7296  001A1E  0100               	movlb	0	; () banked
  7297  001A20  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7298  001A22  3B73               	swapf	(??_CenterBreathe+1)& (0+255),f,b
  7299  001A24  0EF0               	movlw	240
  7300  001A26  1773               	andwf	(??_CenterBreathe+1)& (0+255),f,b
  7301  001A28  5172               	movf	??_CenterBreathe& (0+255),w,b
  7302  001A2A  0B0F               	andlw	15
  7303  001A2C  1373               	iorwf	(??_CenterBreathe+1)& (0+255),f,b
  7304  001A2E  0EF0               	movlw	240
  7305  001A30  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7306  001A32  0100               	movlb	0	; () banked
  7307  001A34  516E               	movf	CenterBreathe@base_hue& (0+255),w,b
  7308  001A36  0100               	movlb	0	; () banked
  7309  001A38  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7310  001A3A  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7311  001A3C  0100               	movlb	0	; () banked
  7312  001A3E  5172               	movf	??_CenterBreathe& (0+255),w,b
  7313  001A40  0100               	movlb	0	; () banked
  7314  001A42  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7315  001A44  0100               	movlb	0	; () banked
  7316  001A46  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7317  001A48  0100               	movlb	0	; () banked
  7318  001A4A  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7319  001A4C  0100               	movlb	0	; () banked
  7320  001A4E  518C               	movf	CenterBreathe@val& (0+255),w,b
  7321  001A50  0100               	movlb	0	; () banked
  7322  001A52  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7323  001A54  0E00               	movlw	0
  7324  001A56  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7325  001A58  0100               	movlb	0	; () banked
  7326  001A5A  518F               	movf	CenterBreathe@i& (0+255),w,b
  7327  001A5C  0D02               	mullw	2
  7328  001A5E  50F3               	movf	prodl,w,c
  7329  001A60  0100               	movlb	0	; () banked
  7330  001A62  2568               	addwf	CenterBreathe@ptrnPointer& (0+255),w,b
  7331  001A64  6ED9               	movwf	fsr2l,c
  7332  001A66  50F4               	movf	prodh,w,c
  7333  001A68  0100               	movlb	0	; () banked
  7334  001A6A  2169               	addwfc	(CenterBreathe@ptrnPointer+1)& (0+255),w,b
  7335  001A6C  6EDA               	movwf	fsr2h,c
  7336  001A6E  C074  FFDE         	movff	??_CenterBreathe+2,postinc2
  7337  001A72  C075  FFDD         	movff	??_CenterBreathe+3,postdec2
  7338                           
  7339                           ; BSR set to: 0
  7340  001A76  0100               	movlb	0	; () banked
  7341  001A78  2B8F               	incf	CenterBreathe@i& (0+255),f,b
  7342  001A7A  D6A1               	goto	l3301
  7343  001A7C                     l3347:
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;Pattern_PtrnFunctions.c: 113: }
  7347                           ;Pattern_PtrnFunctions.c: 114: if(*ptrnStepCounter >= 241){
  7348  001A7C  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7349  001A80  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7350  001A84  0EF0               	movlw	240
  7351  001A86  64DF               	cpfsgt	indf2,c
  7352  001A88  D002               	goto	l3351
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;Pattern_PtrnFunctions.c: 115: rising = 0;
  7356  001A8A  0E00               	movlw	0
  7357  001A8C  D008               	goto	L17
  7358  001A8E                     l3351:
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;Pattern_PtrnFunctions.c: 117: else if(*ptrnStepCounter <= 60){
  7362  001A8E  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7363  001A92  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7364  001A96  0E3D               	movlw	61
  7365  001A98  60DF               	cpfslt	indf2,c
  7366  001A9A  D003               	goto	l697
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;Pattern_PtrnFunctions.c: 118: rising = 1;
  7370  001A9C  0E01               	movlw	1
  7371  001A9E                     L17:
  7372  001A9E  0100               	movlb	0	; () banked
  7373  001AA0  6FF3               	movwf	CenterBreathe@rising& (0+255),b
  7374  001AA2                     l697:
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;Pattern_PtrnFunctions.c: 119: }
  7378                           ;Pattern_PtrnFunctions.c: 120: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnS
      +                          tepCounter-15);
  7379  001AA2  0100               	movlb	0	; () banked
  7380  001AA4  51F3               	movf	CenterBreathe@rising& (0+255),w,b
  7381  001AA6  0100               	movlb	0	; () banked
  7382  001AA8  A4D8               	btfss	status,2,c
  7383  001AAA  D010               	goto	l3357
  7384                           
  7385                           ; BSR set to: 0
  7386  001AAC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7387  001AB0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7388  001AB4  50DF               	movf	indf2,w,c
  7389  001AB6  0100               	movlb	0	; () banked
  7390  001AB8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7391  001ABA  0EF1               	movlw	241
  7392  001ABC  0100               	movlb	0	; () banked
  7393  001ABE  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7394  001AC0  0100               	movlb	0	; () banked
  7395  001AC2  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  7396  001AC4  0100               	movlb	0	; () banked
  7397  001AC6  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  7398  001AC8  0EFF               	movlw	255
  7399  001ACA  D00F               	goto	L18
  7400  001ACC                     l3357:
  7401                           
  7402                           ; BSR set to: 0
  7403  001ACC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7404  001AD0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7405  001AD4  50DF               	movf	indf2,w,c
  7406  001AD6  0100               	movlb	0	; () banked
  7407  001AD8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7408  001ADA  0E0F               	movlw	15
  7409  001ADC  0100               	movlb	0	; () banked
  7410  001ADE  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7411  001AE0  0100               	movlb	0	; () banked
  7412  001AE2  6F89               	movwf	_CenterBreathe$1239& (0+255),b
  7413  001AE4  0100               	movlb	0	; () banked
  7414  001AE6  6B8A               	clrf	(_CenterBreathe$1239+1)& (0+255),b
  7415  001AE8  0E00               	movlw	0
  7416  001AEA                     L18:
  7417  001AEA  238A               	addwfc	(_CenterBreathe$1239+1)& (0+255),f,b
  7418                           
  7419                           ; BSR set to: 0
  7420                           
  7421                           ; BSR set to: 0
  7422  001AEC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7423  001AF0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7424  001AF4  C089  FFDF         	movff	_CenterBreathe$1239,indf2
  7425                           
  7426                           ; BSR set to: 0
  7427  001AF8  0012               	return		;funcret
  7428  001AFA                     __end_of_CenterBreathe:
  7429                           	opt stack 0
  7430                           tosu	equ	0xFFF
  7431                           tosh	equ	0xFFE
  7432                           tosl	equ	0xFFD
  7433                           pclath	equ	0xFFA
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           postinc0	equ	0xFEE
  7441                           wreg	equ	0xFE8
  7442                           postdec1	equ	0xFE5
  7443                           fsr1h	equ	0xFE2
  7444                           fsr1l	equ	0xFE1
  7445                           indf2	equ	0xFDF
  7446                           postinc2	equ	0xFDE
  7447                           postdec2	equ	0xFDD
  7448                           plusw2	equ	0xFDB
  7449                           fsr2h	equ	0xFDA
  7450                           fsr2l	equ	0xFD9
  7451                           status	equ	0xFD8
  7452                           
  7453 ;; *************** function _BrokenPinwheel *****************
  7454 ;; Defined at:
  7455 ;;		line 171 in file "Pattern_PtrnFunctions.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  7458 ;;		 -> PixelPattern(152), 
  7459 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  7460 ;;		 -> PatternStepCounter(1), 
  7461 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  7462 ;;		 -> CycleCounter(4), 
  7463 ;;  base_hue        1   14[BANK0 ] unsigned char 
  7464 ;;  base_sat        1   15[BANK0 ] unsigned char 
  7465 ;;  15776           2   16[BANK0 ] PTR void 
  7466 ;;		 -> NULL(0), 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  i               1   36[BANK0 ] unsigned char 
  7469 ;;  val             1   35[BANK0 ] unsigned char 
  7470 ;;  fade            1   34[BANK0 ] unsigned char 
  7471 ;;  x               1   33[BANK0 ] unsigned char 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7481 ;;      Params:         0      10       0       0
  7482 ;;      Locals:         0       8       0       0
  7483 ;;      Temps:          0      11       0       0
  7484 ;;      Totals:         0      29       0       0
  7485 ;;Total ram usage:       29 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    8
  7488 ;; This function calls:
  7489 ;;		___awdiv
  7490 ;;		___awmod
  7491 ;; This function is called by:
  7492 ;;		_UpdatePattern
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text23
  7497  0003B8                     __ptext23:
  7498                           	opt stack 0
  7499  0003B8                     _BrokenPinwheel:
  7500                           	opt stack 18
  7501                           
  7502                           ;Pattern_PtrnFunctions.c: 172: uint8_t val, x;
  7503                           ;Pattern_PtrnFunctions.c: 173: uint8_t fade = 2;
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;incstack = 0
  7507  0003B8  0E02               	movlw	2
  7508  0003BA  0100               	movlb	0	; () banked
  7509  0003BC  6F82               	movwf	BrokenPinwheel@fade& (0+255),b
  7510                           
  7511                           ;Pattern_PtrnFunctions.c: 175: for(uint8_t i=0;i<76/8;i++){
  7512  0003BE  0E00               	movlw	0
  7513  0003C0  0100               	movlb	0	; () banked
  7514  0003C2  6F84               	movwf	BrokenPinwheel@i& (0+255),b
  7515  0003C4                     l3455:
  7516                           
  7517                           ; BSR set to: 0
  7518  0003C4  0E08               	movlw	8
  7519  0003C6  0100               	movlb	0	; () banked
  7520  0003C8  6584               	cpfsgt	BrokenPinwheel@i& (0+255),b
  7521  0003CA  D001               	goto	l3459
  7522  0003CC  D2D9               	goto	l3495
  7523  0003CE                     l3459:
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;Pattern_PtrnFunctions.c: 177: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  7527  0003CE  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7528  0003D2  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7529  0003D6  50DF               	movf	indf2,w,c
  7530  0003D8  0100               	movlb	0	; () banked
  7531  0003DA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7532  0003DC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7533  0003DE  0100               	movlb	0	; () banked
  7534  0003E0  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7535  0003E2  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7536  0003E4  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7537  0003E6  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7538  0003E8  0100               	movlb	0	; () banked
  7539  0003EA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7540  0003EC  0100               	movlb	0	; () banked
  7541  0003EE  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7542  0003F0  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7543  0003F2  0100               	movlb	0	; () banked
  7544  0003F4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7545  0003F6  0100               	movlb	0	; () banked
  7546  0003F8  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7547  0003FA  0100               	movlb	0	; () banked
  7548  0003FC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7549  0003FE  0100               	movlb	0	; () banked
  7550  000400  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7551  000402  0E4C               	movlw	76
  7552  000404  0100               	movlb	0	; () banked
  7553  000406  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7554  000408  0100               	movlb	0	; () banked
  7555  00040A  6F60               	movwf	___awmod@dividend& (0+255),b
  7556  00040C  0E00               	movlw	0
  7557  00040E  0100               	movlb	0	; () banked
  7558  000410  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7559  000412  0100               	movlb	0	; () banked
  7560  000414  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7561  000416  0E00               	movlw	0
  7562  000418  0100               	movlb	0	; () banked
  7563  00041A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7564  00041C  0E4C               	movlw	76
  7565  00041E  6F62               	movwf	___awmod@divisor& (0+255),b
  7566  000420  EC20  F019         	call	___awmod	;wreg free
  7567  000424  C060  F076         	movff	?___awmod,??_BrokenPinwheel+4
  7568  000428  C061  F077         	movff	?___awmod+1,??_BrokenPinwheel+5
  7569  00042C  0100               	movlb	0	; () banked
  7570  00042E  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7571  000430  0100               	movlb	0	; () banked
  7572  000432  6F78               	movwf	(??_BrokenPinwheel+6)& (0+255),b
  7573  000434  6B79               	clrf	(??_BrokenPinwheel+7)& (0+255),b
  7574  000436  0100               	movlb	0	; () banked
  7575  000438  1F78               	comf	(??_BrokenPinwheel+6)& (0+255),f,b
  7576  00043A  1F79               	comf	(??_BrokenPinwheel+7)& (0+255),f,b
  7577  00043C  4B78               	infsnz	(??_BrokenPinwheel+6)& (0+255),f,b
  7578  00043E  2B79               	incf	(??_BrokenPinwheel+7)& (0+255),f,b
  7579  000440  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7580  000444  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7581  000448  50DF               	movf	indf2,w,c
  7582  00044A  0100               	movlb	0	; () banked
  7583  00044C  6F7A               	movwf	(??_BrokenPinwheel+8)& (0+255),b
  7584  00044E  6B7B               	clrf	(??_BrokenPinwheel+9)& (0+255),b
  7585  000450  0100               	movlb	0	; () banked
  7586  000452  5178               	movf	(??_BrokenPinwheel+6)& (0+255),w,b
  7587  000454  0100               	movlb	0	; () banked
  7588  000456  277A               	addwf	(??_BrokenPinwheel+8)& (0+255),f,b
  7589  000458  0100               	movlb	0	; () banked
  7590  00045A  5179               	movf	(??_BrokenPinwheel+7)& (0+255),w,b
  7591  00045C  0100               	movlb	0	; () banked
  7592  00045E  237B               	addwfc	(??_BrokenPinwheel+9)& (0+255),f,b
  7593  000460  0E4C               	movlw	76
  7594  000462  0100               	movlb	0	; () banked
  7595  000464  257A               	addwf	(??_BrokenPinwheel+8)& (0+255),w,b
  7596  000466  0100               	movlb	0	; () banked
  7597  000468  6F60               	movwf	___awmod@dividend& (0+255),b
  7598  00046A  0E00               	movlw	0
  7599  00046C  0100               	movlb	0	; () banked
  7600  00046E  217B               	addwfc	(??_BrokenPinwheel+9)& (0+255),w,b
  7601  000470  0100               	movlb	0	; () banked
  7602  000472  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7603  000474  0E00               	movlw	0
  7604  000476  0100               	movlb	0	; () banked
  7605  000478  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7606  00047A  0E4C               	movlw	76
  7607  00047C  6F62               	movwf	___awmod@divisor& (0+255),b
  7608  00047E  EC20  F019         	call	___awmod	;wreg free
  7609  000482  0100               	movlb	0	; () banked
  7610  000484  5160               	movf	?___awmod& (0+255),w,b
  7611  000486  0100               	movlb	0	; () banked
  7612  000488  5D76               	subwf	(??_BrokenPinwheel+4)& (0+255),w,b
  7613  00048A  0100               	movlb	0	; () banked
  7614  00048C  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7615  00048E  0A80               	xorlw	128
  7616  000490  0100               	movlb	0	; () banked
  7617  000492  6F7C               	movwf	(??_BrokenPinwheel+10)& (0+255),b
  7618  000494  0100               	movlb	0	; () banked
  7619  000496  5161               	movf	(?___awmod+1)& (0+255),w,b
  7620  000498  0A80               	xorlw	128
  7621  00049A  0100               	movlb	0	; () banked
  7622  00049C  597C               	subwfb	(??_BrokenPinwheel+10)& (0+255),w,b
  7623  00049E  A0D8               	btfss	status,0,c
  7624  0004A0  D02C               	goto	l3463
  7625                           
  7626                           ; BSR set to: 0
  7627  0004A2  0100               	movlb	0	; () banked
  7628  0004A4  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7629  0004A6  0100               	movlb	0	; () banked
  7630  0004A8  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7631  0004AA  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7632  0004AC  0100               	movlb	0	; () banked
  7633  0004AE  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7634  0004B0  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7635  0004B2  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7636  0004B4  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7637  0004B6  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7638  0004BA  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7639  0004BE  50DF               	movf	indf2,w,c
  7640  0004C0  0100               	movlb	0	; () banked
  7641  0004C2  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7642  0004C4  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7643  0004C6  0100               	movlb	0	; () banked
  7644  0004C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7645  0004CA  0100               	movlb	0	; () banked
  7646  0004CC  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7647  0004CE  0100               	movlb	0	; () banked
  7648  0004D0  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7649  0004D2  0100               	movlb	0	; () banked
  7650  0004D4  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7651  0004D6  0E4C               	movlw	76
  7652  0004D8  0100               	movlb	0	; () banked
  7653  0004DA  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7654  0004DC  0100               	movlb	0	; () banked
  7655  0004DE  6F60               	movwf	___awmod@dividend& (0+255),b
  7656  0004E0  0E00               	movlw	0
  7657  0004E2  0100               	movlb	0	; () banked
  7658  0004E4  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7659  0004E6  0100               	movlb	0	; () banked
  7660  0004E8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7661  0004EA  0E00               	movlw	0
  7662  0004EC  0100               	movlb	0	; () banked
  7663  0004EE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7664  0004F0  0E4C               	movlw	76
  7665  0004F2  6F62               	movwf	___awmod@divisor& (0+255),b
  7666  0004F4  EC20  F019         	call	___awmod	;wreg free
  7667  0004F8  D02B               	goto	L19
  7668  0004FA                     l3463:
  7669  0004FA  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7670  0004FE  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7671  000502  50DF               	movf	indf2,w,c
  7672  000504  0100               	movlb	0	; () banked
  7673  000506  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7674  000508  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7675  00050A  0100               	movlb	0	; () banked
  7676  00050C  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7677  00050E  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7678  000510  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7679  000512  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7680  000514  0100               	movlb	0	; () banked
  7681  000516  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7682  000518  0100               	movlb	0	; () banked
  7683  00051A  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7684  00051C  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7685  00051E  0100               	movlb	0	; () banked
  7686  000520  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7687  000522  0100               	movlb	0	; () banked
  7688  000524  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7689  000526  0100               	movlb	0	; () banked
  7690  000528  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7691  00052A  0100               	movlb	0	; () banked
  7692  00052C  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7693  00052E  0E4C               	movlw	76
  7694  000530  0100               	movlb	0	; () banked
  7695  000532  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7696  000534  0100               	movlb	0	; () banked
  7697  000536  6F60               	movwf	___awmod@dividend& (0+255),b
  7698  000538  0E00               	movlw	0
  7699  00053A  0100               	movlb	0	; () banked
  7700  00053C  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7701  00053E  0100               	movlb	0	; () banked
  7702  000540  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7703  000542  0E00               	movlw	0
  7704  000544  0100               	movlb	0	; () banked
  7705  000546  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7706  000548  0E4C               	movlw	76
  7707  00054A  6F62               	movwf	___awmod@divisor& (0+255),b
  7708  00054C  EC20  F019         	call	___awmod	;wreg free
  7709  000550                     L19:
  7710  000550  C060  F07D         	movff	?___awmod,_BrokenPinwheel$1290
  7711  000554  C061  F07E         	movff	?___awmod+1,_BrokenPinwheel$1290+1
  7712  000558  C07D  F081         	movff	_BrokenPinwheel$1290,BrokenPinwheel@x
  7713                           
  7714                           ;Pattern_PtrnFunctions.c: 178: val = (x < fade ? 0x0F-x*0x0F/fade : 0x00);
  7715  00055C  0100               	movlb	0	; () banked
  7716  00055E  5182               	movf	BrokenPinwheel@fade& (0+255),w,b
  7717  000560  0100               	movlb	0	; () banked
  7718  000562  5D81               	subwf	BrokenPinwheel@x& (0+255),w,b
  7719  000564  A0D8               	btfss	status,0,c
  7720  000566  D006               	goto	l3471
  7721                           
  7722                           ; BSR set to: 0
  7723  000568  0E00               	movlw	0
  7724  00056A  0100               	movlb	0	; () banked
  7725  00056C  6F80               	movwf	(_BrokenPinwheel$1291+1)& (0+255),b
  7726  00056E  0E00               	movlw	0
  7727  000570  6F7F               	movwf	_BrokenPinwheel$1291& (0+255),b
  7728  000572  D01E               	goto	l3473
  7729  000574                     l3471:
  7730                           
  7731                           ; BSR set to: 0
  7732  000574  0100               	movlb	0	; () banked
  7733  000576  5181               	movf	BrokenPinwheel@x& (0+255),w,b
  7734  000578  0D0F               	mullw	15
  7735  00057A  CFF3 F060          	movff	prodl,___awdiv@dividend
  7736  00057E  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7737  000582  C082  F062         	movff	BrokenPinwheel@fade,___awdiv@divisor
  7738  000586  0100               	movlb	0	; () banked
  7739  000588  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7740  00058A  ECBC  F017         	call	___awdiv	;wreg free
  7741  00058E  0100               	movlb	0	; () banked
  7742  000590  1F60               	comf	?___awdiv& (0+255),f,b
  7743  000592  0100               	movlb	0	; () banked
  7744  000594  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7745  000596  0100               	movlb	0	; () banked
  7746  000598  4B60               	infsnz	?___awdiv& (0+255),f,b
  7747  00059A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7748  00059C  0E0F               	movlw	15
  7749  00059E  0100               	movlb	0	; () banked
  7750  0005A0  2560               	addwf	?___awdiv& (0+255),w,b
  7751  0005A2  0100               	movlb	0	; () banked
  7752  0005A4  6F7F               	movwf	_BrokenPinwheel$1291& (0+255),b
  7753  0005A6  0E00               	movlw	0
  7754  0005A8  0100               	movlb	0	; () banked
  7755  0005AA  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  7756  0005AC  0100               	movlb	0	; () banked
  7757  0005AE  6F80               	movwf	(_BrokenPinwheel$1291+1)& (0+255),b
  7758  0005B0                     l3473:
  7759                           
  7760                           ; BSR set to: 0
  7761  0005B0  C07F  F083         	movff	_BrokenPinwheel$1291,BrokenPinwheel@val
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;Pattern_PtrnFunctions.c: 179: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7765  0005B4  0100               	movlb	0	; () banked
  7766  0005B6  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7767  0005B8  0100               	movlb	0	; () banked
  7768  0005BA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7769  0005BC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7770  0005BE  0100               	movlb	0	; () banked
  7771  0005C0  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7772  0005C2  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7773  0005C4  0EF0               	movlw	240
  7774  0005C6  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7775  0005C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7776  0005CA  0B0F               	andlw	15
  7777  0005CC  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7778  0005CE  0EF0               	movlw	240
  7779  0005D0  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7780  0005D2  0100               	movlb	0	; () banked
  7781  0005D4  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7782  0005D6  0100               	movlb	0	; () banked
  7783  0005D8  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7784  0005DA  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7785  0005DC  0100               	movlb	0	; () banked
  7786  0005DE  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7787  0005E0  0100               	movlb	0	; () banked
  7788  0005E2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7789  0005E4  0100               	movlb	0	; () banked
  7790  0005E6  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7791  0005E8  0100               	movlb	0	; () banked
  7792  0005EA  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7793  0005EC  0100               	movlb	0	; () banked
  7794  0005EE  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7795  0005F0  0100               	movlb	0	; () banked
  7796  0005F2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7797  0005F4  0E00               	movlw	0
  7798  0005F6  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7799  0005F8  0100               	movlb	0	; () banked
  7800  0005FA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7801  0005FC  0D02               	mullw	2
  7802  0005FE  50F3               	movf	prodl,w,c
  7803  000600  0100               	movlb	0	; () banked
  7804  000602  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7805  000604  6ED9               	movwf	fsr2l,c
  7806  000606  50F4               	movf	prodh,w,c
  7807  000608  0100               	movlb	0	; () banked
  7808  00060A  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7809  00060C  6EDA               	movwf	fsr2h,c
  7810  00060E  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7811  000612  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;Pattern_PtrnFunctions.c: 180: ptrnPointer[i+76/8] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7815  000616  0100               	movlb	0	; () banked
  7816  000618  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7817  00061A  0100               	movlb	0	; () banked
  7818  00061C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7819  00061E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7820  000620  0100               	movlb	0	; () banked
  7821  000622  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7822  000624  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7823  000626  0EF0               	movlw	240
  7824  000628  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7825  00062A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7826  00062C  0B0F               	andlw	15
  7827  00062E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7828  000630  0EF0               	movlw	240
  7829  000632  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7830  000634  0100               	movlb	0	; () banked
  7831  000636  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7832  000638  0100               	movlb	0	; () banked
  7833  00063A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7834  00063C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7835  00063E  0100               	movlb	0	; () banked
  7836  000640  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7837  000642  0100               	movlb	0	; () banked
  7838  000644  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7839  000646  0100               	movlb	0	; () banked
  7840  000648  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7841  00064A  0100               	movlb	0	; () banked
  7842  00064C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7843  00064E  0100               	movlb	0	; () banked
  7844  000650  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7845  000652  0100               	movlb	0	; () banked
  7846  000654  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7847  000656  0E00               	movlw	0
  7848  000658  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7849  00065A  0100               	movlb	0	; () banked
  7850  00065C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7851  00065E  0100               	movlb	0	; () banked
  7852  000660  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7853  000662  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7854  000664  90D8               	bcf	status,0,c
  7855  000666  0100               	movlb	0	; () banked
  7856  000668  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7857  00066A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7858  00066C  0E12               	movlw	18
  7859  00066E  0100               	movlb	0	; () banked
  7860  000670  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7861  000672  0E00               	movlw	0
  7862  000674  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7863  000676  0100               	movlb	0	; () banked
  7864  000678  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7865  00067A  0100               	movlb	0	; () banked
  7866  00067C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7867  00067E  6ED9               	movwf	fsr2l,c
  7868  000680  0100               	movlb	0	; () banked
  7869  000682  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7870  000684  0100               	movlb	0	; () banked
  7871  000686  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7872  000688  6EDA               	movwf	fsr2h,c
  7873  00068A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7874  00068E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;Pattern_PtrnFunctions.c: 181: ptrnPointer[i+76/4] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7878  000692  0100               	movlb	0	; () banked
  7879  000694  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7880  000696  0100               	movlb	0	; () banked
  7881  000698  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7882  00069A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7883  00069C  0100               	movlb	0	; () banked
  7884  00069E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7885  0006A0  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7886  0006A2  0EF0               	movlw	240
  7887  0006A4  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7888  0006A6  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7889  0006A8  0B0F               	andlw	15
  7890  0006AA  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7891  0006AC  0EF0               	movlw	240
  7892  0006AE  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7893  0006B0  0100               	movlb	0	; () banked
  7894  0006B2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7895  0006B4  0100               	movlb	0	; () banked
  7896  0006B6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7897  0006B8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7898  0006BA  0100               	movlb	0	; () banked
  7899  0006BC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7900  0006BE  0100               	movlb	0	; () banked
  7901  0006C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7902  0006C2  0100               	movlb	0	; () banked
  7903  0006C4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7904  0006C6  0100               	movlb	0	; () banked
  7905  0006C8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7906  0006CA  0100               	movlb	0	; () banked
  7907  0006CC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7908  0006CE  0100               	movlb	0	; () banked
  7909  0006D0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7910  0006D2  0E00               	movlw	0
  7911  0006D4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7912  0006D6  0100               	movlb	0	; () banked
  7913  0006D8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7914  0006DA  0100               	movlb	0	; () banked
  7915  0006DC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7916  0006DE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7917  0006E0  90D8               	bcf	status,0,c
  7918  0006E2  0100               	movlb	0	; () banked
  7919  0006E4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7920  0006E6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7921  0006E8  0E26               	movlw	38
  7922  0006EA  0100               	movlb	0	; () banked
  7923  0006EC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7924  0006EE  0E00               	movlw	0
  7925  0006F0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7926  0006F2  0100               	movlb	0	; () banked
  7927  0006F4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7928  0006F6  0100               	movlb	0	; () banked
  7929  0006F8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7930  0006FA  6ED9               	movwf	fsr2l,c
  7931  0006FC  0100               	movlb	0	; () banked
  7932  0006FE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7933  000700  0100               	movlb	0	; () banked
  7934  000702  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7935  000704  6EDA               	movwf	fsr2h,c
  7936  000706  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7937  00070A  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;Pattern_PtrnFunctions.c: 182: ptrnPointer[i+76*3/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  7941  00070E  0100               	movlb	0	; () banked
  7942  000710  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7943  000712  0100               	movlb	0	; () banked
  7944  000714  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7945  000716  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7946  000718  0100               	movlb	0	; () banked
  7947  00071A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7948  00071C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7949  00071E  0EF0               	movlw	240
  7950  000720  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7951  000722  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7952  000724  0B0F               	andlw	15
  7953  000726  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7954  000728  0EF0               	movlw	240
  7955  00072A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7956  00072C  0100               	movlb	0	; () banked
  7957  00072E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7958  000730  0100               	movlb	0	; () banked
  7959  000732  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7960  000734  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7961  000736  0100               	movlb	0	; () banked
  7962  000738  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7963  00073A  0100               	movlb	0	; () banked
  7964  00073C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7965  00073E  0100               	movlb	0	; () banked
  7966  000740  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7967  000742  0100               	movlb	0	; () banked
  7968  000744  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7969  000746  0100               	movlb	0	; () banked
  7970  000748  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7971  00074A  0100               	movlb	0	; () banked
  7972  00074C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7973  00074E  0E00               	movlw	0
  7974  000750  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7975  000752  0100               	movlb	0	; () banked
  7976  000754  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7977  000756  0100               	movlb	0	; () banked
  7978  000758  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7979  00075A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7980  00075C  90D8               	bcf	status,0,c
  7981  00075E  0100               	movlb	0	; () banked
  7982  000760  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7983  000762  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7984  000764  0E38               	movlw	56
  7985  000766  0100               	movlb	0	; () banked
  7986  000768  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7987  00076A  0E00               	movlw	0
  7988  00076C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7989  00076E  0100               	movlb	0	; () banked
  7990  000770  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7991  000772  0100               	movlb	0	; () banked
  7992  000774  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7993  000776  6ED9               	movwf	fsr2l,c
  7994  000778  0100               	movlb	0	; () banked
  7995  00077A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7996  00077C  0100               	movlb	0	; () banked
  7997  00077E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7998  000780  6EDA               	movwf	fsr2h,c
  7999  000782  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8000  000786  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;Pattern_PtrnFunctions.c: 183: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  8004  00078A  0100               	movlb	0	; () banked
  8005  00078C  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8006  00078E  0100               	movlb	0	; () banked
  8007  000790  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8008  000792  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8009  000794  0100               	movlb	0	; () banked
  8010  000796  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8011  000798  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8012  00079A  0EF0               	movlw	240
  8013  00079C  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8014  00079E  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8015  0007A0  0B0F               	andlw	15
  8016  0007A2  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8017  0007A4  0EF0               	movlw	240
  8018  0007A6  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8019  0007A8  0100               	movlb	0	; () banked
  8020  0007AA  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8021  0007AC  0100               	movlb	0	; () banked
  8022  0007AE  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8023  0007B0  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8024  0007B2  0100               	movlb	0	; () banked
  8025  0007B4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8026  0007B6  0100               	movlb	0	; () banked
  8027  0007B8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8028  0007BA  0100               	movlb	0	; () banked
  8029  0007BC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8030  0007BE  0100               	movlb	0	; () banked
  8031  0007C0  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8032  0007C2  0100               	movlb	0	; () banked
  8033  0007C4  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8034  0007C6  0100               	movlb	0	; () banked
  8035  0007C8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8036  0007CA  0E00               	movlw	0
  8037  0007CC  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8038  0007CE  0100               	movlb	0	; () banked
  8039  0007D0  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8040  0007D2  0100               	movlb	0	; () banked
  8041  0007D4  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8042  0007D6  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8043  0007D8  90D8               	bcf	status,0,c
  8044  0007DA  0100               	movlb	0	; () banked
  8045  0007DC  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8046  0007DE  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8047  0007E0  0E4C               	movlw	76
  8048  0007E2  0100               	movlb	0	; () banked
  8049  0007E4  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8050  0007E6  0E00               	movlw	0
  8051  0007E8  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8052  0007EA  0100               	movlb	0	; () banked
  8053  0007EC  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8054  0007EE  0100               	movlb	0	; () banked
  8055  0007F0  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8056  0007F2  6ED9               	movwf	fsr2l,c
  8057  0007F4  0100               	movlb	0	; () banked
  8058  0007F6  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8059  0007F8  0100               	movlb	0	; () banked
  8060  0007FA  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8061  0007FC  6EDA               	movwf	fsr2h,c
  8062  0007FE  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8063  000802  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;Pattern_PtrnFunctions.c: 184: ptrnPointer[i+76*5/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8067  000806  0100               	movlb	0	; () banked
  8068  000808  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8069  00080A  0100               	movlb	0	; () banked
  8070  00080C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8071  00080E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8072  000810  0100               	movlb	0	; () banked
  8073  000812  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8074  000814  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8075  000816  0EF0               	movlw	240
  8076  000818  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8077  00081A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8078  00081C  0B0F               	andlw	15
  8079  00081E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8080  000820  0EF0               	movlw	240
  8081  000822  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8082  000824  0100               	movlb	0	; () banked
  8083  000826  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8084  000828  0100               	movlb	0	; () banked
  8085  00082A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8086  00082C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8087  00082E  0100               	movlb	0	; () banked
  8088  000830  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8089  000832  0100               	movlb	0	; () banked
  8090  000834  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8091  000836  0100               	movlb	0	; () banked
  8092  000838  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8093  00083A  0100               	movlb	0	; () banked
  8094  00083C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8095  00083E  0100               	movlb	0	; () banked
  8096  000840  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8097  000842  0100               	movlb	0	; () banked
  8098  000844  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8099  000846  0E00               	movlw	0
  8100  000848  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8101  00084A  0100               	movlb	0	; () banked
  8102  00084C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8103  00084E  0100               	movlb	0	; () banked
  8104  000850  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8105  000852  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8106  000854  90D8               	bcf	status,0,c
  8107  000856  0100               	movlb	0	; () banked
  8108  000858  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8109  00085A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8110  00085C  0E5E               	movlw	94
  8111  00085E  0100               	movlb	0	; () banked
  8112  000860  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8113  000862  0E00               	movlw	0
  8114  000864  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8115  000866  0100               	movlb	0	; () banked
  8116  000868  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8117  00086A  0100               	movlb	0	; () banked
  8118  00086C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8119  00086E  6ED9               	movwf	fsr2l,c
  8120  000870  0100               	movlb	0	; () banked
  8121  000872  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8122  000874  0100               	movlb	0	; () banked
  8123  000876  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8124  000878  6EDA               	movwf	fsr2h,c
  8125  00087A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8126  00087E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;Pattern_PtrnFunctions.c: 185: ptrnPointer[i+76*3/4] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8130  000882  0100               	movlb	0	; () banked
  8131  000884  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8132  000886  0100               	movlb	0	; () banked
  8133  000888  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8134  00088A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8135  00088C  0100               	movlb	0	; () banked
  8136  00088E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8137  000890  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8138  000892  0EF0               	movlw	240
  8139  000894  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8140  000896  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8141  000898  0B0F               	andlw	15
  8142  00089A  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8143  00089C  0EF0               	movlw	240
  8144  00089E  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8145  0008A0  0100               	movlb	0	; () banked
  8146  0008A2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8147  0008A4  0100               	movlb	0	; () banked
  8148  0008A6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8149  0008A8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8150  0008AA  0100               	movlb	0	; () banked
  8151  0008AC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8152  0008AE  0100               	movlb	0	; () banked
  8153  0008B0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8154  0008B2  0100               	movlb	0	; () banked
  8155  0008B4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8156  0008B6  0100               	movlb	0	; () banked
  8157  0008B8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8158  0008BA  0100               	movlb	0	; () banked
  8159  0008BC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8160  0008BE  0100               	movlb	0	; () banked
  8161  0008C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8162  0008C2  0E00               	movlw	0
  8163  0008C4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8164  0008C6  0100               	movlb	0	; () banked
  8165  0008C8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8166  0008CA  0100               	movlb	0	; () banked
  8167  0008CC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8168  0008CE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8169  0008D0  90D8               	bcf	status,0,c
  8170  0008D2  0100               	movlb	0	; () banked
  8171  0008D4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8172  0008D6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8173  0008D8  0E72               	movlw	114
  8174  0008DA  0100               	movlb	0	; () banked
  8175  0008DC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8176  0008DE  0E00               	movlw	0
  8177  0008E0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8178  0008E2  0100               	movlb	0	; () banked
  8179  0008E4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8180  0008E6  0100               	movlb	0	; () banked
  8181  0008E8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8182  0008EA  6ED9               	movwf	fsr2l,c
  8183  0008EC  0100               	movlb	0	; () banked
  8184  0008EE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8185  0008F0  0100               	movlb	0	; () banked
  8186  0008F2  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8187  0008F4  6EDA               	movwf	fsr2h,c
  8188  0008F6  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8189  0008FA  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;Pattern_PtrnFunctions.c: 186: ptrnPointer[i+76*7/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8193  0008FE  0100               	movlb	0	; () banked
  8194  000900  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8195  000902  0100               	movlb	0	; () banked
  8196  000904  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8197  000906  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8198  000908  0100               	movlb	0	; () banked
  8199  00090A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8200  00090C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8201  00090E  0EF0               	movlw	240
  8202  000910  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8203  000912  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8204  000914  0B0F               	andlw	15
  8205  000916  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8206  000918  0EF0               	movlw	240
  8207  00091A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8208  00091C  0100               	movlb	0	; () banked
  8209  00091E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8210  000920  0100               	movlb	0	; () banked
  8211  000922  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8212  000924  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8213  000926  0100               	movlb	0	; () banked
  8214  000928  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8215  00092A  0100               	movlb	0	; () banked
  8216  00092C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8217  00092E  0100               	movlb	0	; () banked
  8218  000930  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8219  000932  0100               	movlb	0	; () banked
  8220  000934  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8221  000936  0100               	movlb	0	; () banked
  8222  000938  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8223  00093A  0100               	movlb	0	; () banked
  8224  00093C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8225  00093E  0E00               	movlw	0
  8226  000940  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8227  000942  0100               	movlb	0	; () banked
  8228  000944  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8229  000946  0100               	movlb	0	; () banked
  8230  000948  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8231  00094A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8232  00094C  90D8               	bcf	status,0,c
  8233  00094E  0100               	movlb	0	; () banked
  8234  000950  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8235  000952  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8236  000954  0E84               	movlw	132
  8237  000956  0100               	movlb	0	; () banked
  8238  000958  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8239  00095A  0E00               	movlw	0
  8240  00095C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8241  00095E  0100               	movlb	0	; () banked
  8242  000960  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8243  000962  0100               	movlb	0	; () banked
  8244  000964  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8245  000966  6ED9               	movwf	fsr2l,c
  8246  000968  0100               	movlb	0	; () banked
  8247  00096A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8248  00096C  0100               	movlb	0	; () banked
  8249  00096E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8250  000970  6EDA               	movwf	fsr2h,c
  8251  000972  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8252  000976  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8253                           
  8254                           ; BSR set to: 0
  8255  00097A  0100               	movlb	0	; () banked
  8256  00097C  2B84               	incf	BrokenPinwheel@i& (0+255),f,b
  8257  00097E  D522               	goto	l3455
  8258  000980                     l3495:
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;Pattern_PtrnFunctions.c: 187: }
  8262                           ;Pattern_PtrnFunctions.c: 188: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/4);
  8263  000980  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8264  000984  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8265  000988  50DF               	movf	indf2,w,c
  8266  00098A  0100               	movlb	0	; () banked
  8267  00098C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8268  00098E  0E01               	movlw	1
  8269  000990  0100               	movlb	0	; () banked
  8270  000992  2572               	addwf	??_BrokenPinwheel& (0+255),w,b
  8271  000994  0100               	movlb	0	; () banked
  8272  000996  6F60               	movwf	___awmod@dividend& (0+255),b
  8273  000998  0100               	movlb	0	; () banked
  8274  00099A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8275  00099C  0E00               	movlw	0
  8276  00099E  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  8277  0009A0  0E00               	movlw	0
  8278  0009A2  0100               	movlb	0	; () banked
  8279  0009A4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8280  0009A6  0E13               	movlw	19
  8281  0009A8  6F62               	movwf	___awmod@divisor& (0+255),b
  8282  0009AA  EC20  F019         	call	___awmod	;wreg free
  8283  0009AE  0100               	movlb	0	; () banked
  8284  0009B0  5160               	movf	?___awmod& (0+255),w,b
  8285  0009B2  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8286  0009B6  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8287  0009BA  6EDF               	movwf	indf2,c
  8288                           
  8289                           ; BSR set to: 0
  8290  0009BC  0012               	return		;funcret
  8291  0009BE                     __end_of_BrokenPinwheel:
  8292                           	opt stack 0
  8293                           tosu	equ	0xFFF
  8294                           tosh	equ	0xFFE
  8295                           tosl	equ	0xFFD
  8296                           pclath	equ	0xFFA
  8297                           tblptru	equ	0xFF8
  8298                           tblptrh	equ	0xFF7
  8299                           tblptrl	equ	0xFF6
  8300                           tablat	equ	0xFF5
  8301                           prodh	equ	0xFF4
  8302                           prodl	equ	0xFF3
  8303                           postinc0	equ	0xFEE
  8304                           wreg	equ	0xFE8
  8305                           postdec1	equ	0xFE5
  8306                           fsr1h	equ	0xFE2
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           plusw2	equ	0xFDB
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function ___awdiv *****************
  8317 ;; Defined at:
  8318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  dividend        2    0[BANK0 ] int 
  8321 ;;  divisor         2    2[BANK0 ] int 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  quotient        2    6[BANK0 ] int 
  8324 ;;  sign            1    5[BANK0 ] unsigned char 
  8325 ;;  counter         1    4[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  2    0[BANK0 ] int 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8335 ;;      Params:         0       4       0       0
  8336 ;;      Locals:         0       4       0       0
  8337 ;;      Temps:          0       0       0       0
  8338 ;;      Totals:         0       8       0       0
  8339 ;;Total ram usage:        8 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    7
  8342 ;; This function calls:
  8343 ;;		Nothing
  8344 ;; This function is called by:
  8345 ;;		_CenterBreathe
  8346 ;;		_SingleFadedLoop
  8347 ;;		_DoubleFadedLoop
  8348 ;;		_BrokenPinwheel
  8349 ;;		_MirroredQuadrants
  8350 ;;		_SingleFocusBreathe
  8351 ;;		_UpdatePattern
  8352 ;;		_DoubleBrokenLoop
  8353 ;;		_SingleFocusPulse
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text24
  8358  002F78                     __ptext24:
  8359                           	opt stack 0
  8360  002F78                     ___awdiv:
  8361                           	opt stack 19
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;incstack = 0
  8365  002F78  0E00               	movlw	0
  8366  002F7A  0100               	movlb	0	; () banked
  8367  002F7C  6F65               	movwf	___awdiv@sign& (0+255),b
  8368                           
  8369                           ; BSR set to: 0
  8370  002F7E  0100               	movlb	0	; () banked
  8371  002F80  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8372  002F82  D008               	goto	l3093
  8373                           
  8374                           ; BSR set to: 0
  8375  002F84  0100               	movlb	0	; () banked
  8376  002F86  6D62               	negf	___awdiv@divisor& (0+255),b
  8377  002F88  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8378  002F8A  B0D8               	btfsc	status,0,c
  8379  002F8C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8380                           
  8381                           ; BSR set to: 0
  8382  002F8E  0E01               	movlw	1
  8383  002F90  0100               	movlb	0	; () banked
  8384  002F92  6F65               	movwf	___awdiv@sign& (0+255),b
  8385  002F94                     l3093:
  8386                           
  8387                           ; BSR set to: 0
  8388  002F94  0100               	movlb	0	; () banked
  8389  002F96  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8390  002F98  D008               	goto	l3099
  8391                           
  8392                           ; BSR set to: 0
  8393  002F9A  0100               	movlb	0	; () banked
  8394  002F9C  6D60               	negf	___awdiv@dividend& (0+255),b
  8395  002F9E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8396  002FA0  B0D8               	btfsc	status,0,c
  8397  002FA2  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400  002FA4  0E01               	movlw	1
  8401  002FA6  0100               	movlb	0	; () banked
  8402  002FA8  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8403  002FAA                     l3099:
  8404                           
  8405                           ; BSR set to: 0
  8406  002FAA  0E00               	movlw	0
  8407  002FAC  0100               	movlb	0	; () banked
  8408  002FAE  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  8409  002FB0  0E00               	movlw	0
  8410  002FB2  6F66               	movwf	___awdiv@quotient& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413  002FB4  0100               	movlb	0	; () banked
  8414  002FB6  5162               	movf	___awdiv@divisor& (0+255),w,b
  8415  002FB8  0100               	movlb	0	; () banked
  8416  002FBA  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8417  002FBC  B4D8               	btfsc	status,2,c
  8418  002FBE  D02C               	goto	l3121
  8419                           
  8420                           ; BSR set to: 0
  8421  002FC0  0E01               	movlw	1
  8422  002FC2  0100               	movlb	0	; () banked
  8423  002FC4  6F64               	movwf	___awdiv@counter& (0+255),b
  8424  002FC6  D006               	goto	l3107
  8425  002FC8                     l3105:
  8426                           
  8427                           ; BSR set to: 0
  8428  002FC8  0100               	movlb	0	; () banked
  8429  002FCA  90D8               	bcf	status,0,c
  8430  002FCC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8431  002FCE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8432  002FD0  0100               	movlb	0	; () banked
  8433  002FD2  2B64               	incf	___awdiv@counter& (0+255),f,b
  8434  002FD4                     l3107:
  8435                           
  8436                           ; BSR set to: 0
  8437  002FD4  0100               	movlb	0	; () banked
  8438  002FD6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8439  002FD8  D7F7               	goto	l3105
  8440  002FDA                     l3109:
  8441                           
  8442                           ; BSR set to: 0
  8443  002FDA  0100               	movlb	0	; () banked
  8444  002FDC  90D8               	bcf	status,0,c
  8445  002FDE  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8446  002FE0  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8447                           
  8448                           ; BSR set to: 0
  8449  002FE2  0100               	movlb	0	; () banked
  8450  002FE4  5162               	movf	___awdiv@divisor& (0+255),w,b
  8451  002FE6  0100               	movlb	0	; () banked
  8452  002FE8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8453  002FEA  0100               	movlb	0	; () banked
  8454  002FEC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8455  002FEE  0100               	movlb	0	; () banked
  8456  002FF0  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8457  002FF2  A0D8               	btfss	status,0,c
  8458  002FF4  D00A               	goto	l3117
  8459                           
  8460                           ; BSR set to: 0
  8461  002FF6  0100               	movlb	0	; () banked
  8462  002FF8  5162               	movf	___awdiv@divisor& (0+255),w,b
  8463  002FFA  0100               	movlb	0	; () banked
  8464  002FFC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8465  002FFE  0100               	movlb	0	; () banked
  8466  003000  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8467  003002  0100               	movlb	0	; () banked
  8468  003004  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8469                           
  8470                           ; BSR set to: 0
  8471  003006  0100               	movlb	0	; () banked
  8472  003008  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8473  00300A                     l3117:
  8474                           
  8475                           ; BSR set to: 0
  8476  00300A  0100               	movlb	0	; () banked
  8477  00300C  90D8               	bcf	status,0,c
  8478  00300E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8479  003010  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8480                           
  8481                           ; BSR set to: 0
  8482  003012  0100               	movlb	0	; () banked
  8483  003014  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8484  003016  D7E1               	goto	l3109
  8485  003018                     l3121:
  8486                           
  8487                           ; BSR set to: 0
  8488  003018  0100               	movlb	0	; () banked
  8489  00301A  5165               	movf	___awdiv@sign& (0+255),w,b
  8490  00301C  0100               	movlb	0	; () banked
  8491  00301E  B4D8               	btfsc	status,2,c
  8492  003020  D005               	goto	l3125
  8493                           
  8494                           ; BSR set to: 0
  8495  003022  0100               	movlb	0	; () banked
  8496  003024  6D66               	negf	___awdiv@quotient& (0+255),b
  8497  003026  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8498  003028  B0D8               	btfsc	status,0,c
  8499  00302A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8500  00302C                     l3125:
  8501                           
  8502                           ; BSR set to: 0
  8503  00302C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8504  003030  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8505  003034  0012               	return	
  8506  003036                     __end_of___awdiv:
  8507                           	opt stack 0
  8508                           tosu	equ	0xFFF
  8509                           tosh	equ	0xFFE
  8510                           tosl	equ	0xFFD
  8511                           pclath	equ	0xFFA
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           postinc0	equ	0xFEE
  8519                           wreg	equ	0xFE8
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           plusw2	equ	0xFDB
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _ES_Timer_InitTimer *****************
  8532 ;; Defined at:
  8533 ;;		line 229 in file "ES_Timers.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  Num             1    wreg     unsigned char 
  8536 ;;  NewTime         2    0[BANK0 ] unsigned int 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  Num             1    4[BANK0 ] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      enum E15472
  8541 ;; Registers used:
  8542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8548 ;;      Params:         0       2       0       0
  8549 ;;      Locals:         0       1       0       0
  8550 ;;      Temps:          0       2       0       0
  8551 ;;      Totals:         0       5       0       0
  8552 ;;Total ram usage:        5 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    7
  8555 ;; This function calls:
  8556 ;;		Nothing
  8557 ;; This function is called by:
  8558 ;;		_ShowPattern
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text25
  8563  0033F2                     __ptext25:
  8564                           	opt stack 0
  8565  0033F2                     _ES_Timer_InitTimer:
  8566                           	opt stack 20
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;incstack = 0
  8570                           ;ES_Timer_InitTimer@Num stored from wreg
  8571  0033F2  0100               	movlb	0	; () banked
  8572  0033F4  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  8573                           
  8574                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  8575                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  8576                           ;ES_Timers.c: 236: (NewTime == 0) )
  8577  0033F6  0E10               	movlw	16
  8578  0033F8  0100               	movlb	0	; () banked
  8579  0033FA  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  8580  0033FC  0012               	return	
  8581                           
  8582                           ; BSR set to: 0
  8583  0033FE  0100               	movlb	0	; () banked
  8584  003400  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8585  003402  0D02               	mullw	2
  8586  003404  0E21               	movlw	low _Timer2PostFunc
  8587  003406  24F3               	addwf	prodl,w,c
  8588  003408  6EF6               	movwf	tblptrl,c
  8589  00340A  0E03               	movlw	high _Timer2PostFunc
  8590  00340C  20F4               	addwfc	prodh,w,c
  8591  00340E  6EF7               	movwf	tblptrh,c
  8592  003410                     	if	0	;There are less than 3 active tblptr bytes
  8593  003410                     	endif
  8594  003410  0009               	tblrd		*+
  8595  003412  50F5               	movf	tablat,w,c
  8596  003414  0009               	tblrd		*+
  8597  003416  10F5               	iorwf	tablat,w,c
  8598  003418  B4D8               	btfsc	status,2,c
  8599  00341A  0012               	return	
  8600                           
  8601                           ; BSR set to: 0
  8602  00341C  0100               	movlb	0	; () banked
  8603  00341E  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  8604  003420  0100               	movlb	0	; () banked
  8605  003422  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  8606  003424  B4D8               	btfsc	status,2,c
  8607  003426  0012               	return	
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  8611                           
  8612                           ; BSR set to: 0
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  8616                           ;	Return value of _ES_Timer_InitTimer is never used
  8617  003428  0100               	movlb	0	; () banked
  8618  00342A  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8619  00342C  0D02               	mullw	2
  8620  00342E  0E00               	movlw	low _TMR_TimerArray
  8621  003430  24F3               	addwf	prodl,w,c
  8622  003432  6ED9               	movwf	fsr2l,c
  8623  003434  0E01               	movlw	high _TMR_TimerArray
  8624  003436  20F4               	addwfc	prodh,w,c
  8625  003438  6EDA               	movwf	fsr2h,c
  8626  00343A  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  8627  00343E  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  8631  003442  0100               	movlb	0	; () banked
  8632  003444  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8633  003446  0D02               	mullw	2
  8634  003448  0E01               	movlw	low _BitNum2SetMask
  8635  00344A  24F3               	addwf	prodl,w,c
  8636  00344C  6EF6               	movwf	tblptrl,c
  8637  00344E  0E03               	movlw	high _BitNum2SetMask
  8638  003450  20F4               	addwfc	prodh,w,c
  8639  003452  6EF7               	movwf	tblptrh,c
  8640  003454                     	if	0	;There are less than 3 active tblptr bytes
  8641  003454                     	endif
  8642  003454  0009               	tblrd		*+
  8643  003456  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  8644  00345A  0009               	tblrd		*+
  8645  00345C  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  8646  003460  0100               	movlb	0	; () banked
  8647  003462  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  8648  003464  0100               	movlb	0	; () banked
  8649  003466  13DF               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  8650  003468  0100               	movlb	0	; () banked
  8651  00346A  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  8652  00346C  0100               	movlb	0	; () banked
  8653  00346E  13E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  8654  003470  0012               	return	
  8655  003472                     __end_of_ES_Timer_InitTimer:
  8656                           	opt stack 0
  8657                           tosu	equ	0xFFF
  8658                           tosh	equ	0xFFE
  8659                           tosl	equ	0xFFD
  8660                           pclath	equ	0xFFA
  8661                           tblptru	equ	0xFF8
  8662                           tblptrh	equ	0xFF7
  8663                           tblptrl	equ	0xFF6
  8664                           tablat	equ	0xFF5
  8665                           prodh	equ	0xFF4
  8666                           prodl	equ	0xFF3
  8667                           postinc0	equ	0xFEE
  8668                           wreg	equ	0xFE8
  8669                           postdec1	equ	0xFE5
  8670                           fsr1h	equ	0xFE2
  8671                           fsr1l	equ	0xFE1
  8672                           indf2	equ	0xFDF
  8673                           postinc2	equ	0xFDE
  8674                           postdec2	equ	0xFDD
  8675                           plusw2	equ	0xFDB
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _DotStar_Show *****************
  8681 ;; Defined at:
  8682 ;;		line 61 in file "Pattern_DotStarLED.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  8685 ;;		 -> PixelPattern(152), 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  i               1   90[BANK0 ] unsigned char 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8697 ;;      Params:         0       2       0       0
  8698 ;;      Locals:         0       1       0       0
  8699 ;;      Temps:          0      19       0       0
  8700 ;;      Totals:         0      22       0       0
  8701 ;;Total ram usage:       22 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; Hardware stack levels required when called:   12
  8704 ;; This function calls:
  8705 ;;		_HSV_to_RGB
  8706 ;;		_SPI32_TransmitFrames
  8707 ;; This function is called by:
  8708 ;;		_ShowPattern
  8709 ;;		_StopPattern
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text26
  8714  0025B4                     __ptext26:
  8715                           	opt stack 0
  8716  0025B4                     _DotStar_Show:
  8717                           	opt stack 15
  8718                           
  8719                           ;Pattern_DotStarLED.c: 62: for(uint8_t i=1; i<=76; i++){
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;incstack = 0
  8723  0025B4  0E01               	movlw	1
  8724  0025B6  0100               	movlb	0	; () banked
  8725  0025B8  6FBA               	movwf	DotStar_Show@i& (0+255),b
  8726  0025BA                     l3711:
  8727                           
  8728                           ; BSR set to: 0
  8729  0025BA  0E4C               	movlw	76
  8730  0025BC  0100               	movlb	0	; () banked
  8731  0025BE  65BA               	cpfsgt	DotStar_Show@i& (0+255),b
  8732  0025C0  D001               	goto	l3715
  8733  0025C2  D083               	goto	l3723
  8734  0025C4                     l3715:
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;Pattern_DotStarLED.c: 64: PixelFrames[i] = (0xe0000000 | ((uint32_t)*Brightness<<24) | 
      +                          *(patternPointer+(i-1)));
  8738  0025C4  0EFE               	movlw	254
  8739  0025C6  0100               	movlb	0	; () banked
  8740  0025C8  6FA7               	movwf	??_DotStar_Show& (0+255),b
  8741  0025CA  0EFF               	movlw	255
  8742  0025CC  0100               	movlb	0	; () banked
  8743  0025CE  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  8744  0025D0  0100               	movlb	0	; () banked
  8745  0025D2  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8746  0025D4  0100               	movlb	0	; () banked
  8747  0025D6  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  8748  0025D8  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  8749  0025DA  90D8               	bcf	status,0,c
  8750  0025DC  0100               	movlb	0	; () banked
  8751  0025DE  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  8752  0025E0  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  8753  0025E2  0100               	movlb	0	; () banked
  8754  0025E4  51A7               	movf	??_DotStar_Show& (0+255),w,b
  8755  0025E6  0100               	movlb	0	; () banked
  8756  0025E8  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  8757  0025EA  0100               	movlb	0	; () banked
  8758  0025EC  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  8759  0025EE  0100               	movlb	0	; () banked
  8760  0025F0  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  8761  0025F2  0100               	movlb	0	; () banked
  8762  0025F4  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  8763  0025F6  0100               	movlb	0	; () banked
  8764  0025F8  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  8765  0025FA  6ED9               	movwf	fsr2l,c
  8766  0025FC  0100               	movlb	0	; () banked
  8767  0025FE  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  8768  002600  0100               	movlb	0	; () banked
  8769  002602  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  8770  002604  6EDA               	movwf	fsr2h,c
  8771  002606  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  8772  00260A  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  8773  00260E  C0F0  FFD9         	movff	_Brightness,fsr2l
  8774  002612  C0F1  FFDA         	movff	_Brightness+1,fsr2h
  8775  002616  50DF               	movf	indf2,w,c
  8776  002618  0100               	movlb	0	; () banked
  8777  00261A  6FAD               	movwf	(??_DotStar_Show+6)& (0+255),b
  8778  00261C  C0AD  F0AE         	movff	??_DotStar_Show+6,??_DotStar_Show+7
  8779  002620  0100               	movlb	0	; () banked
  8780  002622  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8781  002624  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8782  002626  6BB1               	clrf	(??_DotStar_Show+10)& (0+255),b
  8783  002628  C0AE  F0B1         	movff	??_DotStar_Show+7,??_DotStar_Show+10
  8784  00262C  0100               	movlb	0	; () banked
  8785  00262E  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8786  002630  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8787  002632  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  8788  002634  0100               	movlb	0	; () banked
  8789  002636  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  8790  002638  0100               	movlb	0	; () banked
  8791  00263A  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  8792  00263C  0100               	movlb	0	; () banked
  8793  00263E  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  8794  002640  0100               	movlb	0	; () banked
  8795  002642  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  8796  002644  0100               	movlb	0	; () banked
  8797  002646  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  8798  002648  0100               	movlb	0	; () banked
  8799  00264A  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  8800  00264C  0E00               	movlw	0
  8801  00264E  0100               	movlb	0	; () banked
  8802  002650  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  8803  002652  0100               	movlb	0	; () banked
  8804  002654  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  8805  002656  0E00               	movlw	0
  8806  002658  0100               	movlb	0	; () banked
  8807  00265A  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  8808  00265C  0100               	movlb	0	; () banked
  8809  00265E  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  8810  002660  0E00               	movlw	0
  8811  002662  0100               	movlb	0	; () banked
  8812  002664  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  8813  002666  0100               	movlb	0	; () banked
  8814  002668  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  8815  00266A  0E00               	movlw	0
  8816  00266C  0100               	movlb	0	; () banked
  8817  00266E  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  8818  002670  0100               	movlb	0	; () banked
  8819  002672  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  8820  002674  0E00               	movlw	0
  8821  002676  0100               	movlb	0	; () banked
  8822  002678  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  8823  00267A  0100               	movlb	0	; () banked
  8824  00267C  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  8825  00267E  0EE0               	movlw	224
  8826  002680  0100               	movlb	0	; () banked
  8827  002682  11B5               	iorwf	(??_DotStar_Show+14)& (0+255),w,b
  8828  002684  0100               	movlb	0	; () banked
  8829  002686  6FB9               	movwf	(??_DotStar_Show+18)& (0+255),b
  8830  002688  0100               	movlb	0	; () banked
  8831  00268A  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8832  00268C  0D04               	mullw	4
  8833  00268E  0EC4               	movlw	low _PixelFrames
  8834  002690  24F3               	addwf	prodl,w,c
  8835  002692  6ED9               	movwf	fsr2l,c
  8836  002694  0E01               	movlw	high _PixelFrames
  8837  002696  20F4               	addwfc	prodh,w,c
  8838  002698  6EDA               	movwf	fsr2h,c
  8839  00269A  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  8840  00269E  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  8841  0026A2  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  8842  0026A6  C0B9  FFDE         	movff	??_DotStar_Show+18,postinc2
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;Pattern_DotStarLED.c: 68: HSV_to_RGB(PixelFrames+i);
  8846  0026AA  0100               	movlb	0	; () banked
  8847  0026AC  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8848  0026AE  0D04               	mullw	4
  8849  0026B0  0EC4               	movlw	low _PixelFrames
  8850  0026B2  24F3               	addwf	prodl,w,c
  8851  0026B4  0100               	movlb	0	; () banked
  8852  0026B6  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  8853  0026B8  0E01               	movlw	high _PixelFrames
  8854  0026BA  20F4               	addwfc	prodh,w,c
  8855  0026BC  0100               	movlb	0	; () banked
  8856  0026BE  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  8857  0026C0  EC94  F007         	call	_HSV_to_RGB	;wreg free
  8858  0026C4  0100               	movlb	0	; () banked
  8859  0026C6  2BBA               	incf	DotStar_Show@i& (0+255),f,b
  8860  0026C8  D778               	goto	l3711
  8861  0026CA                     l3723:
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;Pattern_DotStarLED.c: 75: }
  8865                           ;Pattern_DotStarLED.c: 78: SPI32_TransmitFrames(PixelFrames,76+3);
  8866  0026CA  0EC4               	movlw	low _PixelFrames
  8867  0026CC  0100               	movlb	0	; () banked
  8868  0026CE  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  8869  0026D0  0E01               	movlw	high _PixelFrames
  8870  0026D2  0100               	movlb	0	; () banked
  8871  0026D4  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  8872  0026D6  0E4F               	movlw	79
  8873  0026D8  0100               	movlb	0	; () banked
  8874  0026DA  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  8875  0026DC  EC3B  F01D         	call	_SPI32_TransmitFrames	;wreg free
  8876  0026E0  0012               	return		;funcret
  8877  0026E2                     __end_of_DotStar_Show:
  8878                           	opt stack 0
  8879                           tosu	equ	0xFFF
  8880                           tosh	equ	0xFFE
  8881                           tosl	equ	0xFFD
  8882                           pclath	equ	0xFFA
  8883                           tblptru	equ	0xFF8
  8884                           tblptrh	equ	0xFF7
  8885                           tblptrl	equ	0xFF6
  8886                           tablat	equ	0xFF5
  8887                           prodh	equ	0xFF4
  8888                           prodl	equ	0xFF3
  8889                           postinc0	equ	0xFEE
  8890                           wreg	equ	0xFE8
  8891                           postdec1	equ	0xFE5
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           plusw2	equ	0xFDB
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _SPI32_TransmitFrames *****************
  8903 ;; Defined at:
  8904 ;;		line 239 in file "SPI32_ControlService.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  8907 ;;		 -> PixelFrames(316), 
  8908 ;;  numFrames       1   34[BANK0 ] unsigned char 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8920 ;;      Params:         0       3       0       0
  8921 ;;      Locals:         0       3       0       0
  8922 ;;      Temps:          0       0       0       0
  8923 ;;      Totals:         0       6       0       0
  8924 ;;Total ram usage:        6 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:   11
  8927 ;; This function calls:
  8928 ;;		_PostSPI32ControlService
  8929 ;; This function is called by:
  8930 ;;		_DotStar_Show
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text27
  8935  003A76                     __ptext27:
  8936                           	opt stack 0
  8937  003A76                     _SPI32_TransmitFrames:
  8938                           	opt stack 15
  8939                           
  8940                           ;SPI32_ControlService.c: 241: if(CurrentState == SPI32_Waiting4Send){
  8941                           
  8942                           ;incstack = 0
  8943  003A76  0100               	movlb	0	; () banked
  8944  003A78  05E2               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  8945  003A7A  A4D8               	btfss	status,2,c
  8946  003A7C  0012               	return	
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;SPI32_ControlService.c: 243: FrameIndex = 0;
  8950  003A7E  0E00               	movlw	0
  8951  003A80  0100               	movlb	0	; () banked
  8952  003A82  6FE5               	movwf	_FrameIndex& (0+255),b
  8953                           
  8954                           ; BSR set to: 0
  8955                           ;SPI32_ControlService.c: 245: FramePointer = framePointer;
  8956  003A84  C080  F0D7         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  8957  003A88  C081  F0D8         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;SPI32_ControlService.c: 247: NumFrames = numFrames;
  8961  003A8C  C082  F0E7         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;SPI32_ControlService.c: 248: ES_Event transmitEvent;
  8965                           ;SPI32_ControlService.c: 249: transmitEvent.EventType = SPI32_TRANSMIT;
  8966  003A90  0E08               	movlw	8
  8967  003A92  0100               	movlb	0	; () banked
  8968  003A94  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;SPI32_ControlService.c: 250: PostSPI32ControlService(transmitEvent);
  8972  003A96  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  8973  003A9A  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  8974  003A9E  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  8975  003AA2  ECD6  F01D         	call	_PostSPI32ControlService	;wreg free
  8976  003AA6  0012               	return	
  8977  003AA8                     __end_of_SPI32_TransmitFrames:
  8978                           	opt stack 0
  8979                           tosu	equ	0xFFF
  8980                           tosh	equ	0xFFE
  8981                           tosl	equ	0xFFD
  8982                           pclath	equ	0xFFA
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           plusw2	equ	0xFDB
  8998                           fsr2h	equ	0xFDA
  8999                           fsr2l	equ	0xFD9
  9000                           status	equ	0xFD8
  9001                           
  9002 ;; *************** function _PostPatternControlService *****************
  9003 ;; Defined at:
  9004 ;;		line 137 in file "Pattern_ControlService.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      unsigned char 
  9011 ;; Registers used:
  9012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9018 ;;      Params:         0       3       0       0
  9019 ;;      Locals:         0       0       0       0
  9020 ;;      Temps:          0       0       0       0
  9021 ;;      Totals:         0       3       0       0
  9022 ;;Total ram usage:        3 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:   10
  9025 ;; This function calls:
  9026 ;;		_ES_PostToService
  9027 ;; This function is called by:
  9028 ;;		_RunPatternControlService
  9029 ;;		_ES_Timer_Tick_Resp
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text28
  9034  003B90                     __ptext28:
  9035                           	opt stack 0
  9036  003B90                     _PostPatternControlService:
  9037                           	opt stack 0
  9038                           
  9039                           ;Skip over the trampoline to the duplicate function for level 2
  9040  003B90  B256               	btfsc	btemp,1,c
  9041  003B92  EF2E  F01E         	goto	i2_PostPatternControlService
  9042  003B96                     _PostPatternControlService$intlevel0:
  9043                           	opt stack 17
  9044                           
  9045                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
  9046                           ;	Return value of _PostPatternControlService is never used
  9047                           
  9048                           ;incstack = 0
  9049  003B96  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  9050  003B9A  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  9051  003B9E  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  9052  003BA2  0100               	movlb	0	; () banked
  9053  003BA4  51E6               	movf	_MyPriority& (0+255),w,b
  9054  003BA6  ECF2  F01A         	call	_ES_PostToService
  9055  003BAA  0012               	return	
  9056  003BAC                     __end_of_PostPatternControlService:
  9057                           	opt stack 0
  9058                           tosu	equ	0xFFF
  9059                           tosh	equ	0xFFE
  9060                           tosl	equ	0xFFD
  9061                           pclath	equ	0xFFA
  9062                           tblptru	equ	0xFF8
  9063                           tblptrh	equ	0xFF7
  9064                           tblptrl	equ	0xFF6
  9065                           tablat	equ	0xFF5
  9066                           prodh	equ	0xFF4
  9067                           prodl	equ	0xFF3
  9068                           postinc0	equ	0xFEE
  9069                           wreg	equ	0xFE8
  9070                           postdec1	equ	0xFE5
  9071                           fsr1h	equ	0xFE2
  9072                           fsr1l	equ	0xFE1
  9073                           indf2	equ	0xFDF
  9074                           postinc2	equ	0xFDE
  9075                           postdec2	equ	0xFDD
  9076                           plusw2	equ	0xFDB
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function _PostSPI32ControlService *****************
  9082 ;; Defined at:
  9083 ;;		line 117 in file "SPI32_ControlService.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;		None
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      unsigned char 
  9090 ;; Registers used:
  9091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9097 ;;      Params:         0       3       0       0
  9098 ;;      Locals:         0       0       0       0
  9099 ;;      Temps:          0       0       0       0
  9100 ;;      Totals:         0       3       0       0
  9101 ;;Total ram usage:        3 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:   10
  9104 ;; This function calls:
  9105 ;;		_ES_PostToService
  9106 ;; This function is called by:
  9107 ;;		_SPI32_TransmitFrames
  9108 ;;		_ES_Timer_Tick_Resp
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text29
  9113  003BAC                     __ptext29:
  9114                           	opt stack 0
  9115  003BAC                     _PostSPI32ControlService:
  9116                           	opt stack 0
  9117                           
  9118                           ;Skip over the trampoline to the duplicate function for level 2
  9119  003BAC  B256               	btfsc	btemp,1,c
  9120  003BAE  EF23  F01E         	goto	i2_PostSPI32ControlService
  9121  003BB2                     _PostSPI32ControlService$intlevel0:
  9122                           	opt stack 17
  9123                           
  9124                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  9125                           ;	Return value of _PostSPI32ControlService is never used
  9126                           
  9127                           ;incstack = 0
  9128  003BB2  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  9129  003BB6  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  9130  003BBA  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  9131  003BBE  0100               	movlb	0	; () banked
  9132  003BC0  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  9133  003BC2  ECF2  F01A         	call	_ES_PostToService
  9134  003BC6  0012               	return	
  9135  003BC8                     __end_of_PostSPI32ControlService:
  9136                           	opt stack 0
  9137                           tosu	equ	0xFFF
  9138                           tosh	equ	0xFFE
  9139                           tosl	equ	0xFFD
  9140                           pclath	equ	0xFFA
  9141                           tblptru	equ	0xFF8
  9142                           tblptrh	equ	0xFF7
  9143                           tblptrl	equ	0xFF6
  9144                           tablat	equ	0xFF5
  9145                           prodh	equ	0xFF4
  9146                           prodl	equ	0xFF3
  9147                           postinc0	equ	0xFEE
  9148                           wreg	equ	0xFE8
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _HSV_to_RGB *****************
  9161 ;; Defined at:
  9162 ;;		line 49 in file "Pattern_HSV_Convert.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  9165 ;;		 -> PixelFrames(316), 
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;  v               2   67[BANK0 ] unsigned int 
  9168 ;;  p               2   65[BANK0 ] unsigned int 
  9169 ;;  s               2   63[BANK0 ] unsigned int 
  9170 ;;  t               2   59[BANK0 ] unsigned int 
  9171 ;;  q               2   57[BANK0 ] unsigned int 
  9172 ;;  b               2   55[BANK0 ] unsigned int 
  9173 ;;  g               2   53[BANK0 ] unsigned int 
  9174 ;;  r               2   51[BANK0 ] unsigned int 
  9175 ;;  fpart           2   49[BANK0 ] unsigned int 
  9176 ;;  region          2   47[BANK0 ] unsigned int 
  9177 ;;  h               2   45[BANK0 ] unsigned int 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      void 
  9180 ;; Registers used:
  9181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9187 ;;      Params:         0       2       0       0
  9188 ;;      Locals:         0      24       0       0
  9189 ;;      Temps:          0      24       0       0
  9190 ;;      Totals:         0      50       0       0
  9191 ;;Total ram usage:       50 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    8
  9194 ;; This function calls:
  9195 ;;		___lwdiv
  9196 ;;		___wmul
  9197 ;; This function is called by:
  9198 ;;		_DotStar_Show
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text30
  9203  000F28                     __ptext30:
  9204                           	opt stack 0
  9205  000F28                     _HSV_to_RGB:
  9206                           	opt stack 18
  9207                           
  9208                           ;Pattern_HSV_Convert.c: 50: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  9209                           ;Pattern_HSV_Convert.c: 52: h = *HSV_Value >> 8;
  9210                           
  9211                           ;incstack = 0
  9212  000F28  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9213  000F2C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9214  000F30  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9215  000F34  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  9216  000F38  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  9217  000F3C  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  9218  000F40  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  9219  000F44  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  9220  000F48  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  9221  000F4C  0100               	movlb	0	; () banked
  9222  000F4E  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9223  000F50  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  9224  000F54  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;Pattern_HSV_Convert.c: 53: s = *HSV_Value & 0xF0;
  9228  000F58  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9229  000F5C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9230  000F60  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9231  000F64  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9232  000F68  0EF0               	movlw	240
  9233  000F6A  0100               	movlb	0	; () banked
  9234  000F6C  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9235  000F6E  0100               	movlb	0	; () banked
  9236  000F70  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  9237  000F72  0100               	movlb	0	; () banked
  9238  000F74  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;Pattern_HSV_Convert.c: 54: s += s >> 4;
  9242  000F76  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9243  000F7A  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9244  000F7E  0E04               	movlw	4
  9245  000F80  0100               	movlb	0	; () banked
  9246  000F82  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  9247  000F84                     u1995:
  9248  000F84  0100               	movlb	0	; () banked
  9249  000F86  90D8               	bcf	status,0,c
  9250  000F88  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  9251  000F8A  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  9252  000F8C  0100               	movlb	0	; () banked
  9253  000F8E  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  9254  000F90  D7F9               	goto	u1995
  9255  000F92  0100               	movlb	0	; () banked
  9256  000F94  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9257  000F96  0100               	movlb	0	; () banked
  9258  000F98  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  9259  000F9A  0100               	movlb	0	; () banked
  9260  000F9C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9261  000F9E  0100               	movlb	0	; () banked
  9262  000FA0  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;Pattern_HSV_Convert.c: 55: v = *HSV_Value & 0x0F;
  9266  000FA2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9267  000FA6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9268  000FAA  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9269  000FAE  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9270  000FB2  0E0F               	movlw	15
  9271  000FB4  0100               	movlb	0	; () banked
  9272  000FB6  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9273  000FB8  0100               	movlb	0	; () banked
  9274  000FBA  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  9275  000FBC  0100               	movlb	0	; () banked
  9276  000FBE  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;Pattern_HSV_Convert.c: 56: v += v << 4;
  9280  000FC0  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  9281  000FC4  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  9282  000FC8  0100               	movlb	0	; () banked
  9283  000FCA  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  9284  000FCC  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  9285  000FCE  0EF0               	movlw	240
  9286  000FD0  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9287  000FD2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9288  000FD4  0B0F               	andlw	15
  9289  000FD6  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9290  000FD8  0EF0               	movlw	240
  9291  000FDA  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  9292  000FDC  0100               	movlb	0	; () banked
  9293  000FDE  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9294  000FE0  0100               	movlb	0	; () banked
  9295  000FE2  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  9296  000FE4  0100               	movlb	0	; () banked
  9297  000FE6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9298  000FE8  0100               	movlb	0	; () banked
  9299  000FEA  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;Pattern_HSV_Convert.c: 58: if(s == 0) {
  9303  000FEC  0100               	movlb	0	; () banked
  9304  000FEE  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  9305  000FF0  0100               	movlb	0	; () banked
  9306  000FF2  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  9307  000FF4  A4D8               	btfss	status,2,c
  9308  000FF6  D00D               	goto	l3207
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;Pattern_HSV_Convert.c: 60: r = g = b = v;
  9312  000FF8  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9313  000FFC  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9314  001000  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  9315  001004  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  9316  001008  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  9317  00100C  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  9318                           
  9319                           ;Pattern_HSV_Convert.c: 61: }
  9320  001010  D129               	goto	l3227
  9321  001012                     l3207:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;Pattern_HSV_Convert.c: 63: else{
  9325                           ;Pattern_HSV_Convert.c: 65: region = h / 43;
  9326  001012  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  9327  001016  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  9328  00101A  0E00               	movlw	0
  9329  00101C  0100               	movlb	0	; () banked
  9330  00101E  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9331  001020  0E2B               	movlw	43
  9332  001022  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  9333  001024  ECB6  F01A         	call	___lwdiv	;wreg free
  9334  001028  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  9335  00102C  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  9336                           
  9337                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  9338  001030  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  9339  001034  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  9340  001038  0E00               	movlw	0
  9341  00103A  0100               	movlb	0	; () banked
  9342  00103C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9343  00103E  0E2B               	movlw	43
  9344  001040  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9345  001042  EC06  F01D         	call	___wmul	;wreg free
  9346  001046  0100               	movlb	0	; () banked
  9347  001048  1F66               	comf	?___wmul& (0+255),f,b
  9348  00104A  0100               	movlb	0	; () banked
  9349  00104C  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9350  00104E  0100               	movlb	0	; () banked
  9351  001050  4B66               	infsnz	?___wmul& (0+255),f,b
  9352  001052  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9353  001054  0100               	movlb	0	; () banked
  9354  001056  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  9355  001058  0100               	movlb	0	; () banked
  9356  00105A  2566               	addwf	?___wmul& (0+255),w,b
  9357  00105C  0100               	movlb	0	; () banked
  9358  00105E  6F9D               	movwf	_HSV_to_RGB$1990& (0+255),b
  9359  001060  0100               	movlb	0	; () banked
  9360  001062  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  9361  001064  0100               	movlb	0	; () banked
  9362  001066  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9363  001068  0100               	movlb	0	; () banked
  9364  00106A  6F9E               	movwf	(_HSV_to_RGB$1990+1)& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;Pattern_HSV_Convert.c: 67: fpart = (h - (region * 43)) * 6;
  9368  00106C  C09D  F066         	movff	_HSV_to_RGB$1990,___wmul@multiplier
  9369  001070  C09E  F067         	movff	_HSV_to_RGB$1990+1,___wmul@multiplier+1
  9370  001074  0E00               	movlw	0
  9371  001076  0100               	movlb	0	; () banked
  9372  001078  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9373  00107A  0E06               	movlw	6
  9374  00107C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9375  00107E  EC06  F01D         	call	___wmul	;wreg free
  9376  001082  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  9377  001086  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  9378                           
  9379                           ;Pattern_HSV_Convert.c: 70: p = (v * (255 - s)) >> 8;
  9380  00108A  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9381  00108E  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9382  001092  0100               	movlb	0	; () banked
  9383  001094  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9384  001096  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9385  001098  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9386  00109A  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9387  00109C  0EFF               	movlw	255
  9388  00109E  0100               	movlb	0	; () banked
  9389  0010A0  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9390  0010A2  0100               	movlb	0	; () banked
  9391  0010A4  6F66               	movwf	___wmul@multiplier& (0+255),b
  9392  0010A6  0E00               	movlw	0
  9393  0010A8  0100               	movlb	0	; () banked
  9394  0010AA  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9395  0010AC  0100               	movlb	0	; () banked
  9396  0010AE  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9397  0010B0  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9398  0010B4  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9399  0010B8  EC06  F01D         	call	___wmul	;wreg free
  9400  0010BC  0100               	movlb	0	; () banked
  9401  0010BE  5167               	movf	(?___wmul+1)& (0+255),w,b
  9402  0010C0  0100               	movlb	0	; () banked
  9403  0010C2  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  9404  0010C4  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9408  0010C6  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  9409  0010CA  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  9410  0010CE  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  9411  0010D2  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  9412  0010D6  EC06  F01D         	call	___wmul	;wreg free
  9413  0010DA  0100               	movlb	0	; () banked
  9414  0010DC  C067  F066         	movff	?___wmul+1,?___wmul
  9415  0010E0  0100               	movlb	0	; () banked
  9416  0010E2  6B67               	clrf	(?___wmul+1)& (0+255),b
  9417  0010E4  0100               	movlb	0	; () banked
  9418  0010E6  1F66               	comf	?___wmul& (0+255),f,b
  9419  0010E8  0100               	movlb	0	; () banked
  9420  0010EA  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9421  0010EC  0100               	movlb	0	; () banked
  9422  0010EE  4B66               	infsnz	?___wmul& (0+255),f,b
  9423  0010F0  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9424  0010F2  0EFF               	movlw	255
  9425  0010F4  0100               	movlb	0	; () banked
  9426  0010F6  2566               	addwf	?___wmul& (0+255),w,b
  9427  0010F8  0100               	movlb	0	; () banked
  9428  0010FA  6F9D               	movwf	_HSV_to_RGB$1990& (0+255),b
  9429  0010FC  0E00               	movlw	0
  9430  0010FE  0100               	movlb	0	; () banked
  9431  001100  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9432  001102  0100               	movlb	0	; () banked
  9433  001104  6F9E               	movwf	(_HSV_to_RGB$1990+1)& (0+255),b
  9434                           
  9435                           ; BSR set to: 0
  9436                           ;Pattern_HSV_Convert.c: 71: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9437  001106  C09D  F066         	movff	_HSV_to_RGB$1990,___wmul@multiplier
  9438  00110A  C09E  F067         	movff	_HSV_to_RGB$1990+1,___wmul@multiplier+1
  9439  00110E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9440  001112  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9441  001116  EC06  F01D         	call	___wmul	;wreg free
  9442  00111A  0100               	movlb	0	; () banked
  9443  00111C  5167               	movf	(?___wmul+1)& (0+255),w,b
  9444  00111E  0100               	movlb	0	; () banked
  9445  001120  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  9446  001122  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9450  001124  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  9451  001128  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  9452  00112C  0100               	movlb	0	; () banked
  9453  00112E  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9454  001130  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9455  001132  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9456  001134  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9457  001136  0EFF               	movlw	255
  9458  001138  0100               	movlb	0	; () banked
  9459  00113A  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9460  00113C  0100               	movlb	0	; () banked
  9461  00113E  6F66               	movwf	___wmul@multiplier& (0+255),b
  9462  001140  0E00               	movlw	0
  9463  001142  0100               	movlb	0	; () banked
  9464  001144  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9465  001146  0100               	movlb	0	; () banked
  9466  001148  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9467  00114A  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  9468  00114E  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  9469  001152  EC06  F01D         	call	___wmul	;wreg free
  9470  001156  0100               	movlb	0	; () banked
  9471  001158  C067  F066         	movff	?___wmul+1,?___wmul
  9472  00115C  0100               	movlb	0	; () banked
  9473  00115E  6B67               	clrf	(?___wmul+1)& (0+255),b
  9474  001160  0100               	movlb	0	; () banked
  9475  001162  1F66               	comf	?___wmul& (0+255),f,b
  9476  001164  0100               	movlb	0	; () banked
  9477  001166  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9478  001168  0100               	movlb	0	; () banked
  9479  00116A  4B66               	infsnz	?___wmul& (0+255),f,b
  9480  00116C  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9481  00116E  0EFF               	movlw	255
  9482  001170  0100               	movlb	0	; () banked
  9483  001172  2566               	addwf	?___wmul& (0+255),w,b
  9484  001174  0100               	movlb	0	; () banked
  9485  001176  6F9D               	movwf	_HSV_to_RGB$1990& (0+255),b
  9486  001178  0E00               	movlw	0
  9487  00117A  0100               	movlb	0	; () banked
  9488  00117C  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9489  00117E  0100               	movlb	0	; () banked
  9490  001180  6F9E               	movwf	(_HSV_to_RGB$1990+1)& (0+255),b
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;Pattern_HSV_Convert.c: 72: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9494  001182  C09D  F066         	movff	_HSV_to_RGB$1990,___wmul@multiplier
  9495  001186  C09E  F067         	movff	_HSV_to_RGB$1990+1,___wmul@multiplier+1
  9496  00118A  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9497  00118E  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9498  001192  EC06  F01D         	call	___wmul	;wreg free
  9499  001196  0100               	movlb	0	; () banked
  9500  001198  5167               	movf	(?___wmul+1)& (0+255),w,b
  9501  00119A  0100               	movlb	0	; () banked
  9502  00119C  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  9503  00119E  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  9504                           
  9505                           ;Pattern_HSV_Convert.c: 75: switch(region) {
  9506  0011A0  D046               	goto	l3225
  9507  0011A2                     l491:
  9508                           
  9509                           ; BSR set to: 0
  9510                           ;Pattern_HSV_Convert.c: 77: r = v; g = t; b = p; break;
  9511  0011A2  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9512  0011A6  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9513  0011AA  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  9514  0011AE  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  9515  0011B2  D008               	goto	L20
  9516  0011B4                     l493:
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;Pattern_HSV_Convert.c: 79: r = q; g = v; b = p; break;
  9520  0011B4  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  9521  0011B8  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  9522  0011BC  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9523  0011C0  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9524  0011C4                     L20:
  9525  0011C4  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  9526  0011C8  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  9527  0011CC  D04B               	goto	l3227
  9528  0011CE                     l494:
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;Pattern_HSV_Convert.c: 81: r = p; g = v; b = t; break;
  9532  0011CE  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9533  0011D2  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9534  0011D6  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9535  0011DA  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9536  0011DE  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  9537  0011E2  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  9538  0011E6  D03E               	goto	l3227
  9539  0011E8                     l495:
  9540                           
  9541                           ; BSR set to: 0
  9542                           ;Pattern_HSV_Convert.c: 83: r = p; g = q; b = v; break;
  9543  0011E8  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9544  0011EC  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9545  0011F0  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  9546  0011F4  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  9547  0011F8  D008               	goto	L21
  9548  0011FA                     l496:
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;Pattern_HSV_Convert.c: 85: r = t; g = p; b = v; break;
  9552  0011FA  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  9553  0011FE  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  9554  001202  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9555  001206  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9556  00120A                     L21:
  9557  00120A  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9558  00120E  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9559  001212  D028               	goto	l3227
  9560  001214                     l497:
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;Pattern_HSV_Convert.c: 87: r = v; g = p; b = q; break;
  9564  001214  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9565  001218  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9566  00121C  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9567  001220  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9568  001224  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  9569  001228  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;Pattern_HSV_Convert.c: 88: }
  9573  00122C  D01B               	goto	l3227
  9574  00122E                     l3225:
  9575                           
  9576                           ; BSR set to: 0
  9577  00122E  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  9578  001232  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  9579                           
  9580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9581                           ; Switch size 1, requested type "space"
  9582                           ; Number of cases is 1, Range of values is 0 to 0
  9583                           ; switch strategies available:
  9584                           ; Name         Instructions Cycles
  9585                           ; simple_byte            4     3 (average)
  9586                           ;	Chosen strategy is simple_byte
  9587  001236  0100               	movlb	0	; () banked
  9588  001238  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9589  00123A  0A00               	xorlw	0	; case 0
  9590  00123C  A4D8               	btfss	status,2,c
  9591  00123E  D7EA               	goto	l497
  9592                           
  9593                           ; BSR set to: 0
  9594                           ; Switch size 1, requested type "space"
  9595                           ; Number of cases is 5, Range of values is 0 to 4
  9596                           ; switch strategies available:
  9597                           ; Name         Instructions Cycles
  9598                           ; simple_byte           16     9 (average)
  9599                           ;	Chosen strategy is simple_byte
  9600  001240  0100               	movlb	0	; () banked
  9601  001242  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9602  001244  0A00               	xorlw	0	; case 0
  9603  001246  B4D8               	btfsc	status,2,c
  9604  001248  D7AC               	goto	l491
  9605  00124A  0A01               	xorlw	1	; case 1
  9606  00124C  B4D8               	btfsc	status,2,c
  9607  00124E  D7B2               	goto	l493
  9608  001250  0A03               	xorlw	3	; case 2
  9609  001252  B4D8               	btfsc	status,2,c
  9610  001254  D7BC               	goto	l494
  9611  001256  0A01               	xorlw	1	; case 3
  9612  001258  B4D8               	btfsc	status,2,c
  9613  00125A  D7C6               	goto	l495
  9614  00125C  0A07               	xorlw	7	; case 4
  9615  00125E  B4D8               	btfsc	status,2,c
  9616  001260  D7CC               	goto	l496
  9617  001262  D7D8               	goto	l497
  9618  001264                     l3227:
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;Pattern_HSV_Convert.c: 89: }
  9622                           ;Pattern_HSV_Convert.c: 92: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16)
      +                           | ((uint32_t)g << 8) | ((uint32_t)r);
  9623  001264  0100               	movlb	0	; () banked
  9624  001266  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  9625  001268  0100               	movlb	0	; () banked
  9626  00126A  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  9627  00126C  0100               	movlb	0	; () banked
  9628  00126E  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  9629  001270  0100               	movlb	0	; () banked
  9630  001272  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  9631  001274  0100               	movlb	0	; () banked
  9632  001276  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  9633  001278  0100               	movlb	0	; () banked
  9634  00127A  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9635  00127C  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  9636  001280  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  9637  001284  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  9638  001288  0100               	movlb	0	; () banked
  9639  00128A  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  9640  00128C  0100               	movlb	0	; () banked
  9641  00128E  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  9642  001290  0100               	movlb	0	; () banked
  9643  001292  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  9644  001294  0100               	movlb	0	; () banked
  9645  001296  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  9646  001298  0100               	movlb	0	; () banked
  9647  00129A  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  9648  00129C  0100               	movlb	0	; () banked
  9649  00129E  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  9650  0012A0  0100               	movlb	0	; () banked
  9651  0012A2  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  9652  0012A4  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  9653  0012A8  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  9654  0012AC  0100               	movlb	0	; () banked
  9655  0012AE  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  9656  0012B0  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  9657  0012B2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9658  0012B6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9659  0012BA  0E00               	movlw	0
  9660  0012BC  14DE               	andwf	postinc2,w,c
  9661  0012BE  0100               	movlb	0	; () banked
  9662  0012C0  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  9663  0012C2  0E00               	movlw	0
  9664  0012C4  14DE               	andwf	postinc2,w,c
  9665  0012C6  0100               	movlb	0	; () banked
  9666  0012C8  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  9667  0012CA  0E00               	movlw	0
  9668  0012CC  14DE               	andwf	postinc2,w,c
  9669  0012CE  0100               	movlb	0	; () banked
  9670  0012D0  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  9671  0012D2  0EFF               	movlw	255
  9672  0012D4  14DE               	andwf	postinc2,w,c
  9673  0012D6  0100               	movlb	0	; () banked
  9674  0012D8  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  9675  0012DA  0100               	movlb	0	; () banked
  9676  0012DC  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  9677  0012DE  0100               	movlb	0	; () banked
  9678  0012E0  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  9679  0012E2  0100               	movlb	0	; () banked
  9680  0012E4  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  9681  0012E6  0100               	movlb	0	; () banked
  9682  0012E8  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  9683  0012EA  0100               	movlb	0	; () banked
  9684  0012EC  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  9685  0012EE  0100               	movlb	0	; () banked
  9686  0012F0  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  9687  0012F2  0100               	movlb	0	; () banked
  9688  0012F4  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  9689  0012F6  0100               	movlb	0	; () banked
  9690  0012F8  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  9691  0012FA  0100               	movlb	0	; () banked
  9692  0012FC  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  9693  0012FE  0100               	movlb	0	; () banked
  9694  001300  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  9695  001302  0100               	movlb	0	; () banked
  9696  001304  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  9697  001306  0100               	movlb	0	; () banked
  9698  001308  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  9699  00130A  0100               	movlb	0	; () banked
  9700  00130C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9701  00130E  0100               	movlb	0	; () banked
  9702  001310  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  9703  001312  0100               	movlb	0	; () banked
  9704  001314  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  9705  001316  0100               	movlb	0	; () banked
  9706  001318  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9707  00131A  0100               	movlb	0	; () banked
  9708  00131C  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  9709  00131E  0100               	movlb	0	; () banked
  9710  001320  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  9711  001322  0100               	movlb	0	; () banked
  9712  001324  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  9713  001326  0100               	movlb	0	; () banked
  9714  001328  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  9715  00132A  0100               	movlb	0	; () banked
  9716  00132C  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  9717  00132E  0100               	movlb	0	; () banked
  9718  001330  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  9719  001332  0100               	movlb	0	; () banked
  9720  001334  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  9721  001336  0100               	movlb	0	; () banked
  9722  001338  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  9723  00133A  0100               	movlb	0	; () banked
  9724  00133C  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  9725  00133E  0100               	movlb	0	; () banked
  9726  001340  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  9727  001342  0100               	movlb	0	; () banked
  9728  001344  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  9729  001346  0100               	movlb	0	; () banked
  9730  001348  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  9731  00134A  0100               	movlb	0	; () banked
  9732  00134C  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  9733  00134E  0100               	movlb	0	; () banked
  9734  001350  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  9735  001352  0E00               	movlw	0
  9736  001354  0100               	movlb	0	; () banked
  9737  001356  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  9738  001358  0100               	movlb	0	; () banked
  9739  00135A  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  9740  00135C  0E00               	movlw	0
  9741  00135E  0100               	movlb	0	; () banked
  9742  001360  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  9743  001362  0100               	movlb	0	; () banked
  9744  001364  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  9745  001366  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9746  00136A  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9747  00136E  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  9748  001372  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  9749  001376  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  9750  00137A  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  9751  00137E  0012               	return	
  9752  001380                     __end_of_HSV_to_RGB:
  9753                           	opt stack 0
  9754                           tosu	equ	0xFFF
  9755                           tosh	equ	0xFFE
  9756                           tosl	equ	0xFFD
  9757                           pclath	equ	0xFFA
  9758                           tblptru	equ	0xFF8
  9759                           tblptrh	equ	0xFF7
  9760                           tblptrl	equ	0xFF6
  9761                           tablat	equ	0xFF5
  9762                           prodh	equ	0xFF4
  9763                           prodl	equ	0xFF3
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           postdec1	equ	0xFE5
  9767                           fsr1h	equ	0xFE2
  9768                           fsr1l	equ	0xFE1
  9769                           indf2	equ	0xFDF
  9770                           postinc2	equ	0xFDE
  9771                           postdec2	equ	0xFDD
  9772                           plusw2	equ	0xFDB
  9773                           fsr2h	equ	0xFDA
  9774                           fsr2l	equ	0xFD9
  9775                           status	equ	0xFD8
  9776                           
  9777 ;; *************** function ___lwdiv *****************
  9778 ;; Defined at:
  9779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  dividend        2   12[BANK0 ] unsigned int 
  9782 ;;  divisor         2   14[BANK0 ] unsigned int 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  quotient        2   16[BANK0 ] unsigned int 
  9785 ;;  counter         1   18[BANK0 ] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  2   12[BANK0 ] unsigned int 
  9788 ;; Registers used:
  9789 ;;		wreg, status,2, status,0
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9795 ;;      Params:         0       4       0       0
  9796 ;;      Locals:         0       3       0       0
  9797 ;;      Temps:          0       0       0       0
  9798 ;;      Totals:         0       7       0       0
  9799 ;;Total ram usage:        7 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    7
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_HSV_to_RGB
  9806 ;;		_HueTest
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text31
  9811  00356C                     __ptext31:
  9812                           	opt stack 0
  9813  00356C                     ___lwdiv:
  9814                           	opt stack 18
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;incstack = 0
  9818  00356C  0E00               	movlw	0
  9819  00356E  0100               	movlb	0	; () banked
  9820  003570  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9821  003572  0E00               	movlw	0
  9822  003574  6F70               	movwf	___lwdiv@quotient& (0+255),b
  9823                           
  9824                           ; BSR set to: 0
  9825  003576  0100               	movlb	0	; () banked
  9826  003578  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9827  00357A  0100               	movlb	0	; () banked
  9828  00357C  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9829  00357E  B4D8               	btfsc	status,2,c
  9830  003580  D02C               	goto	l1287
  9831                           
  9832                           ; BSR set to: 0
  9833  003582  0E01               	movlw	1
  9834  003584  0100               	movlb	0	; () banked
  9835  003586  6F72               	movwf	___lwdiv@counter& (0+255),b
  9836  003588  D006               	goto	l3137
  9837  00358A                     l3135:
  9838                           
  9839                           ; BSR set to: 0
  9840  00358A  0100               	movlb	0	; () banked
  9841  00358C  90D8               	bcf	status,0,c
  9842  00358E  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  9843  003590  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9844  003592  0100               	movlb	0	; () banked
  9845  003594  2B72               	incf	___lwdiv@counter& (0+255),f,b
  9846  003596                     l3137:
  9847                           
  9848                           ; BSR set to: 0
  9849  003596  0100               	movlb	0	; () banked
  9850  003598  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9851  00359A  D7F7               	goto	l3135
  9852  00359C                     l3139:
  9853                           
  9854                           ; BSR set to: 0
  9855  00359C  0100               	movlb	0	; () banked
  9856  00359E  90D8               	bcf	status,0,c
  9857  0035A0  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  9858  0035A2  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9859                           
  9860                           ; BSR set to: 0
  9861  0035A4  0100               	movlb	0	; () banked
  9862  0035A6  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9863  0035A8  0100               	movlb	0	; () banked
  9864  0035AA  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  9865  0035AC  0100               	movlb	0	; () banked
  9866  0035AE  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9867  0035B0  0100               	movlb	0	; () banked
  9868  0035B2  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9869  0035B4  A0D8               	btfss	status,0,c
  9870  0035B6  D00A               	goto	l3147
  9871                           
  9872                           ; BSR set to: 0
  9873  0035B8  0100               	movlb	0	; () banked
  9874  0035BA  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9875  0035BC  0100               	movlb	0	; () banked
  9876  0035BE  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  9877  0035C0  0100               	movlb	0	; () banked
  9878  0035C2  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9879  0035C4  0100               	movlb	0	; () banked
  9880  0035C6  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9881                           
  9882                           ; BSR set to: 0
  9883  0035C8  0100               	movlb	0	; () banked
  9884  0035CA  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  9885  0035CC                     l3147:
  9886                           
  9887                           ; BSR set to: 0
  9888  0035CC  0100               	movlb	0	; () banked
  9889  0035CE  90D8               	bcf	status,0,c
  9890  0035D0  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9891  0035D2  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  9892                           
  9893                           ; BSR set to: 0
  9894  0035D4  0100               	movlb	0	; () banked
  9895  0035D6  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  9896  0035D8  D7E1               	goto	l3139
  9897  0035DA                     l1287:
  9898                           
  9899                           ; BSR set to: 0
  9900  0035DA  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  9901  0035DE  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9902                           
  9903                           ; BSR set to: 0
  9904  0035E2  0012               	return		;funcret
  9905  0035E4                     __end_of___lwdiv:
  9906                           	opt stack 0
  9907                           tosu	equ	0xFFF
  9908                           tosh	equ	0xFFE
  9909                           tosl	equ	0xFFD
  9910                           pclath	equ	0xFFA
  9911                           tblptru	equ	0xFF8
  9912                           tblptrh	equ	0xFF7
  9913                           tblptrl	equ	0xFF6
  9914                           tablat	equ	0xFF5
  9915                           prodh	equ	0xFF4
  9916                           prodl	equ	0xFF3
  9917                           postinc0	equ	0xFEE
  9918                           wreg	equ	0xFE8
  9919                           postdec1	equ	0xFE5
  9920                           fsr1h	equ	0xFE2
  9921                           fsr1l	equ	0xFE1
  9922                           indf2	equ	0xFDF
  9923                           postinc2	equ	0xFDE
  9924                           postdec2	equ	0xFDD
  9925                           plusw2	equ	0xFDB
  9926                           fsr2h	equ	0xFDA
  9927                           fsr2l	equ	0xFD9
  9928                           status	equ	0xFD8
  9929                           
  9930 ;; *************** function _PausePattern *****************
  9931 ;; Defined at:
  9932 ;;		line 281 in file "Pattern_ControlService.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;		None
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;		None
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      void 
  9939 ;; Registers used:
  9940 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9946 ;;      Params:         0       0       0       0
  9947 ;;      Locals:         0       0       0       0
  9948 ;;      Temps:          0       0       0       0
  9949 ;;      Totals:         0       0       0       0
  9950 ;;Total ram usage:        0 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    8
  9953 ;; This function calls:
  9954 ;;		_ES_Timer_StopTimer
  9955 ;; This function is called by:
  9956 ;;		_RunPatternControlService
  9957 ;; This function uses a non-reentrant model
  9958 ;;
  9959                           
  9960                           	psect	text32
  9961  003CBC                     __ptext32:
  9962                           	opt stack 0
  9963  003CBC                     _PausePattern:
  9964                           	opt stack 20
  9965                           
  9966                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  9967                           
  9968                           ; BSR set to: 0
  9969                           ;incstack = 0
  9970  003CBC  0E00               	movlw	0
  9971  003CBE  EC1F  F01C         	call	_ES_Timer_StopTimer
  9972  003CC2  0012               	return		;funcret
  9973  003CC4                     __end_of_PausePattern:
  9974                           	opt stack 0
  9975                           tosu	equ	0xFFF
  9976                           tosh	equ	0xFFE
  9977                           tosl	equ	0xFFD
  9978                           pclath	equ	0xFFA
  9979                           tblptru	equ	0xFF8
  9980                           tblptrh	equ	0xFF7
  9981                           tblptrl	equ	0xFF6
  9982                           tablat	equ	0xFF5
  9983                           prodh	equ	0xFF4
  9984                           prodl	equ	0xFF3
  9985                           postinc0	equ	0xFEE
  9986                           wreg	equ	0xFE8
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           plusw2	equ	0xFDB
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _ES_Timer_StopTimer *****************
  9999 ;; Defined at:
 10000 ;;		line 205 in file "ES_Timers.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;  Num             1    wreg     unsigned char 
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;  Num             1    4[BANK0 ] unsigned char 
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      enum E15472
 10007 ;; Registers used:
 10008 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10014 ;;      Params:         0       0       0       0
 10015 ;;      Locals:         0       1       0       0
 10016 ;;      Temps:          0       4       0       0
 10017 ;;      Totals:         0       5       0       0
 10018 ;;Total ram usage:        5 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    7
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		_StopPattern
 10025 ;;		_PausePattern
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           	psect	text33
 10030  00383E                     __ptext33:
 10031                           	opt stack 0
 10032  00383E                     _ES_Timer_StopTimer:
 10033                           	opt stack 20
 10034                           
 10035                           ;incstack = 0
 10036                           ;ES_Timer_StopTimer@Num stored from wreg
 10037  00383E  0100               	movlb	0	; () banked
 10038  003840  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
 10039                           
 10040                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
 10041  003842  0E0F               	movlw	15
 10042  003844  0100               	movlb	0	; () banked
 10043  003846  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
 10044  003848  D001               	goto	l3631
 10045  00384A  0012               	return	
 10046  00384C                     l3631:
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
 10050  00384C  0100               	movlb	0	; () banked
 10051  00384E  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
 10052  003850  0D02               	mullw	2
 10053  003852  0E01               	movlw	low _BitNum2SetMask
 10054  003854  24F3               	addwf	prodl,w,c
 10055  003856  6EF6               	movwf	tblptrl,c
 10056  003858  0E03               	movlw	high _BitNum2SetMask
 10057  00385A  20F4               	addwfc	prodh,w,c
 10058  00385C  6EF7               	movwf	tblptrh,c
 10059  00385E                     	if	0	;There are less than 3 active tblptr bytes
 10060  00385E                     	endif
 10061  00385E  0009               	tblrd		*+
 10062  003860  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
 10063  003864  0009               	tblrd		*+
 10064  003866  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
 10065  00386A  0100               	movlb	0	; () banked
 10066  00386C  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
 10067  00386E  0100               	movlb	0	; () banked
 10068  003870  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
 10069  003872  0100               	movlb	0	; () banked
 10070  003874  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
 10071  003876  0100               	movlb	0	; () banked
 10072  003878  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
 10073  00387A  0100               	movlb	0	; () banked
 10074  00387C  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
 10075  00387E  0100               	movlb	0	; () banked
 10076  003880  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
 10077  003882  0100               	movlb	0	; () banked
 10078  003884  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
 10079  003886  0100               	movlb	0	; () banked
 10080  003888  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
 10081  00388A  0012               	return	
 10082  00388C                     __end_of_ES_Timer_StopTimer:
 10083                           	opt stack 0
 10084                           tosu	equ	0xFFF
 10085                           tosh	equ	0xFFE
 10086                           tosl	equ	0xFFD
 10087                           pclath	equ	0xFFA
 10088                           tblptru	equ	0xFF8
 10089                           tblptrh	equ	0xFF7
 10090                           tblptrl	equ	0xFF6
 10091                           tablat	equ	0xFF5
 10092                           prodh	equ	0xFF4
 10093                           prodl	equ	0xFF3
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           plusw2	equ	0xFDB
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function _ES_DeQueue *****************
 10108 ;; Defined at:
 10109 ;;		line 164 in file "ES_Queue.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
 10112 ;;		 -> Queue1(12), Queue0(12), 
 10113 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
 10114 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
 10117 ;;		 -> Queue1(12), Queue0(12), 
 10118 ;;  NumLeft         1   19[BANK0 ] unsigned char 
 10119 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      unsigned char 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10129 ;;      Params:         0       4       0       0
 10130 ;;      Locals:         0       4       0       0
 10131 ;;      Temps:          0       2       0       0
 10132 ;;      Totals:         0      10       0       0
 10133 ;;Total ram usage:       10 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    8
 10136 ;; This function calls:
 10137 ;;		___lbmod
 10138 ;;		___wmul
 10139 ;; This function is called by:
 10140 ;;		_ES_Run
 10141 ;;		_ES_RecallEvents
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text34
 10146  0026E2                     __ptext34:
 10147                           	opt stack 0
 10148  0026E2                     _ES_DeQueue:
 10149                           	opt stack 21
 10150                           
 10151                           ;ES_Queue.c: 166: unsigned char SaveCrit;
 10152                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
 10153                           ;ES_Queue.c: 168: uint8_t NumLeft;
 10154                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;incstack = 0
 10158  0026E2  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
 10159  0026E6  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
 10160                           
 10161                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
 10162  0026EA  0100               	movlb	0	; () banked
 10163  0026EC  EE20 F002          	lfsr	2,2
 10164  0026F0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10165  0026F2  26D9               	addwf	fsr2l,f,c
 10166  0026F4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10167  0026F6  22DA               	addwfc	fsr2h,f,c
 10168  0026F8  50DF               	movf	indf2,w,c
 10169  0026FA  B4D8               	btfsc	status,2,c
 10170  0026FC  D06F               	goto	l3957
 10171                           
 10172                           ; BSR set to: 0
 10173                           
 10174                           ;ES_Queue.c: 172: {
 10175                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 10176  0026FE  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
 10177  002702  9EF2               	bcf	intcon,7,c	;volatile
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
 10181                           
 10182                           ; BSR set to: 0
 10183  002704  0100               	movlb	0	; () banked
 10184  002706  EE20 F001          	lfsr	2,1
 10185  00270A  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10186  00270C  26D9               	addwf	fsr2l,f,c
 10187  00270E  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10188  002710  22DA               	addwfc	fsr2h,f,c
 10189  002712  50DF               	movf	indf2,w,c
 10190  002714  0100               	movlb	0	; () banked
 10191  002716  6F70               	movwf	??_ES_DeQueue& (0+255),b
 10192  002718  0E01               	movlw	1
 10193  00271A  0100               	movlb	0	; () banked
 10194  00271C  2570               	addwf	??_ES_DeQueue& (0+255),w,b
 10195  00271E  0100               	movlb	0	; () banked
 10196  002720  6F66               	movwf	___wmul@multiplier& (0+255),b
 10197  002722  0100               	movlb	0	; () banked
 10198  002724  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
 10199  002726  0E00               	movlw	0
 10200  002728  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 10201  00272A  0E00               	movlw	0
 10202  00272C  0100               	movlb	0	; () banked
 10203  00272E  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10204  002730  0E03               	movlw	3
 10205  002732  6F68               	movwf	___wmul@multiplicand& (0+255),b
 10206  002734  EC06  F01D         	call	___wmul	;wreg free
 10207  002738  0100               	movlb	0	; () banked
 10208  00273A  5166               	movf	?___wmul& (0+255),w,b
 10209  00273C  0100               	movlb	0	; () banked
 10210  00273E  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
 10211  002740  6ED9               	movwf	fsr2l,c
 10212  002742  0100               	movlb	0	; () banked
 10213  002744  5167               	movf	(?___wmul+1)& (0+255),w,b
 10214  002746  0100               	movlb	0	; () banked
 10215  002748  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
 10216  00274A  6EDA               	movwf	fsr2h,c
 10217  00274C  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
 10218  002750  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
 10219  002754  CFDE FFE6          	movff	postinc2,postinc1
 10220  002758  CFDE FFE6          	movff	postinc2,postinc1
 10221  00275C  CFDE FFE6          	movff	postinc2,postinc1
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
 10225  002760  0100               	movlb	0	; () banked
 10226  002762  EE20 F001          	lfsr	2,1
 10227  002766  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10228  002768  26D9               	addwf	fsr2l,f,c
 10229  00276A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10230  00276C  22DA               	addwfc	fsr2h,f,c
 10231  00276E  2ADF               	incf	indf2,f,c
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
 10235  002770  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
 10236  002774  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
 10237  002778  0100               	movlb	0	; () banked
 10238  00277A  EE10 F001          	lfsr	1,1
 10239  00277E  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10240  002780  26E1               	addwf	fsr1l,f,c
 10241  002782  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10242  002784  22E2               	addwfc	fsr1h,f,c
 10243  002786  50DE               	movf	postinc2,w,c
 10244  002788  5CE6               	subwf	postinc1,w,c
 10245  00278A  A0D8               	btfss	status,0,c
 10246  00278C  D019               	goto	l3953
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
 10250  00278E  0100               	movlb	0	; () banked
 10251  002790  EE20 F001          	lfsr	2,1
 10252  002794  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10253  002796  26D9               	addwf	fsr2l,f,c
 10254  002798  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10255  00279A  22DA               	addwfc	fsr2h,f,c
 10256  00279C  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
 10257  0027A0  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
 10258  0027A4  50E7               	movf	indf1,w,c
 10259  0027A6  0100               	movlb	0	; () banked
 10260  0027A8  6F60               	movwf	___lbmod@divisor& (0+255),b
 10261  0027AA  0100               	movlb	0	; () banked
 10262  0027AC  EE10 F001          	lfsr	1,1
 10263  0027B0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10264  0027B2  26E1               	addwf	fsr1l,f,c
 10265  0027B4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10266  0027B6  22E2               	addwfc	fsr1h,f,c
 10267  0027B8  50E7               	movf	indf1,w,c
 10268  0027BA  EC6D  F01C         	call	___lbmod
 10269  0027BE  6EDF               	movwf	indf2,c
 10270  0027C0                     l3953:
 10271                           
 10272                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
 10273  0027C0  0100               	movlb	0	; () banked
 10274  0027C2  EE20 F002          	lfsr	2,2
 10275  0027C6  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10276  0027C8  26D9               	addwf	fsr2l,f,c
 10277  0027CA  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10278  0027CC  22DA               	addwfc	fsr2h,f,c
 10279  0027CE  06DF               	decf	indf2,f,c
 10280  0027D0  50DF               	movf	indf2,w,c
 10281  0027D2  0100               	movlb	0	; () banked
 10282  0027D4  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
 10286  0027D6  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
 10287                           
 10288                           ;ES_Queue.c: 183: }else {
 10289  0027DA  D014               	goto	l3963
 10290  0027DC                     l3957:
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
 10294  0027DC  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
 10295  0027E0  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
 10296  0027E4  0E00               	movlw	0
 10297  0027E6  6EDF               	movwf	indf2,c
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
 10301  0027E8  0100               	movlb	0	; () banked
 10302  0027EA  EE20 F001          	lfsr	2,1
 10303  0027EE  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
 10304  0027F0  26D9               	addwf	fsr2l,f,c
 10305  0027F2  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
 10306  0027F4  22DA               	addwfc	fsr2h,f,c
 10307  0027F6  0E00               	movlw	0
 10308  0027F8  6EDE               	movwf	postinc2,c
 10309  0027FA  0E00               	movlw	0
 10310  0027FC  6EDD               	movwf	postdec2,c
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;ES_Queue.c: 186: NumLeft = 0;
 10314  0027FE  0E00               	movlw	0
 10315  002800  0100               	movlb	0	; () banked
 10316  002802  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10317  002804                     l3963:
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;ES_Queue.c: 187: }
 10321                           ;ES_Queue.c: 188: return NumLeft;
 10322  002804  0100               	movlb	0	; () banked
 10323  002806  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
 10324  002808  0012               	return	
 10325  00280A                     __end_of_ES_DeQueue:
 10326                           	opt stack 0
 10327                           tosu	equ	0xFFF
 10328                           tosh	equ	0xFFE
 10329                           tosl	equ	0xFFD
 10330                           pclath	equ	0xFFA
 10331                           tblptru	equ	0xFF8
 10332                           tblptrh	equ	0xFF7
 10333                           tblptrl	equ	0xFF6
 10334                           tablat	equ	0xFF5
 10335                           prodh	equ	0xFF4
 10336                           prodl	equ	0xFF3
 10337                           intcon	equ	0xFF2
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           indf1	equ	0xFE7
 10341                           postinc1	equ	0xFE6
 10342                           postdec1	equ	0xFE5
 10343                           fsr1h	equ	0xFE2
 10344                           fsr1l	equ	0xFE1
 10345                           indf2	equ	0xFDF
 10346                           postinc2	equ	0xFDE
 10347                           postdec2	equ	0xFDD
 10348                           plusw2	equ	0xFDB
 10349                           fsr2h	equ	0xFDA
 10350                           fsr2l	equ	0xFD9
 10351                           status	equ	0xFD8
 10352                           
 10353 ;; *************** function ___lbmod *****************
 10354 ;; Defined at:
 10355 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  dividend        1    wreg     unsigned char 
 10358 ;;  divisor         1    0[BANK0 ] unsigned char 
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;  dividend        1    1[BANK0 ] unsigned char 
 10361 ;;  rem             1    3[BANK0 ] unsigned char 
 10362 ;;  counter         1    2[BANK0 ] unsigned char 
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      unsigned char 
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10372 ;;      Params:         0       1       0       0
 10373 ;;      Locals:         0       3       0       0
 10374 ;;      Temps:          0       0       0       0
 10375 ;;      Totals:         0       4       0       0
 10376 ;;Total ram usage:        4 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    7
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_ES_DeQueue
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text35
 10387  0038DA                     __ptext35:
 10388                           	opt stack 0
 10389  0038DA                     ___lbmod:
 10390                           	opt stack 21
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;incstack = 0
 10394                           ;___lbmod@dividend stored from wreg
 10395  0038DA  0100               	movlb	0	; () banked
 10396  0038DC  6F61               	movwf	___lbmod@dividend& (0+255),b
 10397  0038DE  0E08               	movlw	8
 10398  0038E0  0100               	movlb	0	; () banked
 10399  0038E2  6F62               	movwf	___lbmod@counter& (0+255),b
 10400  0038E4  0E00               	movlw	0
 10401  0038E6  0100               	movlb	0	; () banked
 10402  0038E8  6F63               	movwf	___lbmod@rem& (0+255),b
 10403  0038EA                     l3923:
 10404                           
 10405                           ; BSR set to: 0
 10406  0038EA  90D8               	bcf	status,0,c
 10407  0038EC  0100               	movlb	0	; () banked
 10408  0038EE  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 10409  0038F0  0100               	movlb	0	; () banked
 10410  0038F2  3563               	rlcf	___lbmod@rem& (0+255),w,b
 10411  0038F4  0100               	movlb	0	; () banked
 10412  0038F6  6F63               	movwf	___lbmod@rem& (0+255),b
 10413                           
 10414                           ; BSR set to: 0
 10415  0038F8  0100               	movlb	0	; () banked
 10416  0038FA  90D8               	bcf	status,0,c
 10417  0038FC  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 10418                           
 10419                           ; BSR set to: 0
 10420  0038FE  0100               	movlb	0	; () banked
 10421  003900  5160               	movf	___lbmod@divisor& (0+255),w,b
 10422  003902  0100               	movlb	0	; () banked
 10423  003904  5D63               	subwf	___lbmod@rem& (0+255),w,b
 10424  003906  A0D8               	btfss	status,0,c
 10425  003908  D004               	goto	l3931
 10426                           
 10427                           ; BSR set to: 0
 10428  00390A  0100               	movlb	0	; () banked
 10429  00390C  5160               	movf	___lbmod@divisor& (0+255),w,b
 10430  00390E  0100               	movlb	0	; () banked
 10431  003910  5F63               	subwf	___lbmod@rem& (0+255),f,b
 10432  003912                     l3931:
 10433                           
 10434                           ; BSR set to: 0
 10435  003912  0100               	movlb	0	; () banked
 10436  003914  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 10437  003916  D7E9               	goto	l3923
 10438                           
 10439                           ; BSR set to: 0
 10440                           
 10441                           ; BSR set to: 0
 10442  003918  0100               	movlb	0	; () banked
 10443  00391A  5163               	movf	___lbmod@rem& (0+255),w,b
 10444  00391C  0012               	return	
 10445  00391E                     __end_of___lbmod:
 10446                           	opt stack 0
 10447                           tosu	equ	0xFFF
 10448                           tosh	equ	0xFFE
 10449                           tosl	equ	0xFFD
 10450                           pclath	equ	0xFFA
 10451                           tblptru	equ	0xFF8
 10452                           tblptrh	equ	0xFF7
 10453                           tblptrl	equ	0xFF6
 10454                           tablat	equ	0xFF5
 10455                           prodh	equ	0xFF4
 10456                           prodl	equ	0xFF3
 10457                           intcon	equ	0xFF2
 10458                           postinc0	equ	0xFEE
 10459                           wreg	equ	0xFE8
 10460                           indf1	equ	0xFE7
 10461                           postinc1	equ	0xFE6
 10462                           postdec1	equ	0xFE5
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           plusw2	equ	0xFDB
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function _ES_Initialize *****************
 10474 ;; Defined at:
 10475 ;;		line 242 in file "ES_Framework.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;  NewRate         2   33[BANK0 ] enum E15423
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;  i               1   35[BANK0 ] unsigned char 
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      enum E15494
 10482 ;; Registers used:
 10483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10489 ;;      Params:         0       2       0       0
 10490 ;;      Locals:         0       1       0       0
 10491 ;;      Temps:          0       0       0       0
 10492 ;;      Totals:         0       3       0       0
 10493 ;;Total ram usage:        3 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:   11
 10496 ;; This function calls:
 10497 ;;		_ES_InitQueue
 10498 ;;		_ES_Timer_Init
 10499 ;;		_InitPatternControlService
 10500 ;;		_InitSPI32ControlService
 10501 ;; This function is called by:
 10502 ;;		_main
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           	psect	text36
 10507  002C14                     __ptext36:
 10508                           	opt stack 0
 10509  002C14                     _ES_Initialize:
 10510                           	opt stack 19
 10511                           
 10512                           ;ES_Framework.c: 243: uint8_t i;
 10513                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517  002C14  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
 10518  002C18  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
 10519  002C1C  EC42  F01E         	call	_ES_Timer_Init	;wreg free
 10520                           
 10521                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
 10522  002C20  0E00               	movlw	0
 10523  002C22  0100               	movlb	0	; () banked
 10524  002C24  6F83               	movwf	ES_Initialize@i& (0+255),b
 10525  002C26                     l4169:
 10526                           
 10527                           ; BSR set to: 0
 10528  002C26  0E01               	movlw	1
 10529  002C28  0100               	movlb	0	; () banked
 10530  002C2A  6583               	cpfsgt	ES_Initialize@i& (0+255),b
 10531  002C2C  D001               	goto	l4173
 10532  002C2E  D066               	goto	l4193
 10533  002C30                     l4173:
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
 10537                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
 10538  002C30  0100               	movlb	0	; () banked
 10539  002C32  5183               	movf	ES_Initialize@i& (0+255),w,b
 10540  002C34  0D04               	mullw	4
 10541  002C36  0E50               	movlw	low _ServDescList
 10542  002C38  24F3               	addwf	prodl,w,c
 10543  002C3A  6EF6               	movwf	tblptrl,c
 10544  002C3C  0E03               	movlw	high _ServDescList
 10545  002C3E  20F4               	addwfc	prodh,w,c
 10546  002C40  6EF7               	movwf	tblptrh,c
 10547  002C42                     	if	0	;There are less than 3 active tblptr bytes
 10548  002C42                     	endif
 10549  002C42  0009               	tblrd		*+
 10550  002C44  50F5               	movf	tablat,w,c
 10551  002C46  0009               	tblrd		*+
 10552  002C48  10F5               	iorwf	tablat,w,c
 10553  002C4A  B4D8               	btfsc	status,2,c
 10554  002C4C  D013               	goto	l4177
 10555                           
 10556                           ; BSR set to: 0
 10557  002C4E  0100               	movlb	0	; () banked
 10558  002C50  5183               	movf	ES_Initialize@i& (0+255),w,b
 10559  002C52  0D04               	mullw	4
 10560  002C54  0E02               	movlw	2
 10561  002C56  26F3               	addwf	prodl,f,c
 10562  002C58  0E00               	movlw	0
 10563  002C5A  22F4               	addwfc	prodh,f,c
 10564  002C5C  0E50               	movlw	low _ServDescList
 10565  002C5E  24F3               	addwf	prodl,w,c
 10566  002C60  6EF6               	movwf	tblptrl,c
 10567  002C62  0E03               	movlw	high _ServDescList
 10568  002C64  20F4               	addwfc	prodh,w,c
 10569  002C66  6EF7               	movwf	tblptrh,c
 10570  002C68                     	if	0	;There are less than 3 active tblptr bytes
 10571  002C68                     	endif
 10572  002C68  0009               	tblrd		*+
 10573  002C6A  50F5               	movf	tablat,w,c
 10574  002C6C  0009               	tblrd		*+
 10575  002C6E  10F5               	iorwf	tablat,w,c
 10576  002C70  A4D8               	btfss	status,2,c
 10577  002C72  D002               	goto	l4181
 10578  002C74                     l4177:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;ES_Framework.c: 249: return FailedPointer;
 10582  002C74  0E03               	movlw	3
 10583                           
 10584                           ; BSR set to: 0
 10585  002C76  0012               	return	
 10586  002C78                     l4181:
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
 10590  002C78  0100               	movlb	0	; () banked
 10591  002C7A  5183               	movf	ES_Initialize@i& (0+255),w,b
 10592  002C7C  0D03               	mullw	3
 10593  002C7E  0E58               	movlw	low _EventQueues
 10594  002C80  24F3               	addwf	prodl,w,c
 10595  002C82  6EF6               	movwf	tblptrl,c
 10596  002C84  0E03               	movlw	high _EventQueues
 10597  002C86  20F4               	addwfc	prodh,w,c
 10598  002C88  6EF7               	movwf	tblptrh,c
 10599  002C8A                     	if	0	;There are less than 3 active tblptr bytes
 10600  002C8A                     	endif
 10601  002C8A  0009               	tblrd		*+
 10602  002C8C  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
 10603  002C90  000A               	tblrd		*-
 10604  002C92  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
 10605  002C96  0100               	movlb	0	; () banked
 10606  002C98  5183               	movf	ES_Initialize@i& (0+255),w,b
 10607  002C9A  0D03               	mullw	3
 10608  002C9C  0E02               	movlw	2
 10609  002C9E  26F3               	addwf	prodl,f,c
 10610  002CA0  0E00               	movlw	0
 10611  002CA2  22F4               	addwfc	prodh,f,c
 10612  002CA4  0E58               	movlw	low _EventQueues
 10613  002CA6  24F3               	addwf	prodl,w,c
 10614  002CA8  6EF6               	movwf	tblptrl,c
 10615  002CAA  0E03               	movlw	high _EventQueues
 10616  002CAC  20F4               	addwfc	prodh,w,c
 10617  002CAE  6EF7               	movwf	tblptrh,c
 10618  002CB0                     	if	0	;There are less than 3 active tblptr bytes
 10619  002CB0                     	endif
 10620  002CB0  0008               	tblrd		*
 10621  002CB2  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
 10622  002CB6  ECAE  F01C         	call	_ES_InitQueue	;wreg free
 10623                           
 10624                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
 10625  002CBA  0100               	movlb	0	; () banked
 10626  002CBC  5183               	movf	ES_Initialize@i& (0+255),w,b
 10627  002CBE  0D04               	mullw	4
 10628  002CC0  0E50               	movlw	low _ServDescList
 10629  002CC2  24F3               	addwf	prodl,w,c
 10630  002CC4  6EF6               	movwf	tblptrl,c
 10631  002CC6  0E03               	movlw	high _ServDescList
 10632  002CC8  20F4               	addwfc	prodh,w,c
 10633  002CCA  6EF7               	movwf	tblptrh,c
 10634  002CCC                     	if	0	;There are less than 3 active tblptr bytes
 10635  002CCC                     	endif
 10636  002CCC  D801               	call	u3098
 10637  002CCE  D00E               	goto	u3099
 10638  002CD0                     u3098:
 10639  002CD0  0005               	push	
 10640  002CD2  6EFA               	movwf	pclath,c
 10641  002CD4  0009               	tblrd		*+
 10642  002CD6  50F5               	movf	tablat,w,c
 10643  002CD8  6EFD               	movwf	tosl,c
 10644  002CDA  0009               	tblrd		*+
 10645  002CDC  50F5               	movf	tablat,w,c
 10646  002CDE  6EFE               	movwf	tosh,c
 10647  002CE0  50F8               	movf	tblptru,w,c
 10648  002CE2  6EFF               	movwf	tosu,c
 10649  002CE4  50FA               	movf	pclath,w,c
 10650  002CE6  0100               	movlb	0	; () banked
 10651  002CE8  5183               	movf	ES_Initialize@i& (0+255),w,b
 10652  002CEA  0012               	return		;indir
 10653  002CEC                     u3099:
 10654  002CEC  06E8               	decf	wreg,f,c
 10655  002CEE  B4D8               	btfsc	status,2,c
 10656  002CF0  D002               	goto	l4189
 10657                           
 10658                           ;ES_Framework.c: 254: return FailedInit;
 10659  002CF2  0E05               	movlw	5
 10660  002CF4  0012               	return	
 10661  002CF6                     l4189:
 10662  002CF6  0100               	movlb	0	; () banked
 10663  002CF8  2B83               	incf	ES_Initialize@i& (0+255),f,b
 10664  002CFA  D795               	goto	l4169
 10665  002CFC                     l4193:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;ES_Framework.c: 255: }
 10669                           ;ES_Framework.c: 256: return Success;
 10670  002CFC  0E00               	movlw	0
 10671  002CFE  0012               	return	
 10672  002D00                     __end_of_ES_Initialize:
 10673                           	opt stack 0
 10674                           tosu	equ	0xFFF
 10675                           tosh	equ	0xFFE
 10676                           tosl	equ	0xFFD
 10677                           pclath	equ	0xFFA
 10678                           tblptru	equ	0xFF8
 10679                           tblptrh	equ	0xFF7
 10680                           tblptrl	equ	0xFF6
 10681                           tablat	equ	0xFF5
 10682                           prodh	equ	0xFF4
 10683                           prodl	equ	0xFF3
 10684                           intcon	equ	0xFF2
 10685                           postinc0	equ	0xFEE
 10686                           wreg	equ	0xFE8
 10687                           indf1	equ	0xFE7
 10688                           postinc1	equ	0xFE6
 10689                           postdec1	equ	0xFE5
 10690                           fsr1h	equ	0xFE2
 10691                           fsr1l	equ	0xFE1
 10692                           indf2	equ	0xFDF
 10693                           postinc2	equ	0xFDE
 10694                           postdec2	equ	0xFDD
 10695                           plusw2	equ	0xFDB
 10696                           fsr2h	equ	0xFDA
 10697                           fsr2l	equ	0xFD9
 10698                           status	equ	0xFD8
 10699                           
 10700 ;; *************** function _InitPatternControlService *****************
 10701 ;; Defined at:
 10702 ;;		line 97 in file "Pattern_ControlService.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;  Priority        1    wreg     unsigned char 
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;  Priority        1   32[BANK0 ] unsigned char 
 10707 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  1    wreg      unsigned char 
 10710 ;; Registers used:
 10711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10717 ;;      Params:         0       0       0       0
 10718 ;;      Locals:         0       4       0       0
 10719 ;;      Temps:          0       0       0       0
 10720 ;;      Totals:         0       4       0       0
 10721 ;;Total ram usage:        4 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:   10
 10724 ;; This function calls:
 10725 ;;		_CAN_Init
 10726 ;;		_DotStar_Init
 10727 ;;		_ES_PostToService
 10728 ;;		_SetupPattern
 10729 ;; This function is called by:
 10730 ;;		_ES_Initialize
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           	psect	text37
 10735  003734                     __ptext37:
 10736                           	opt stack 0
 10737  003734                     _InitPatternControlService:
 10738                           	opt stack 19
 10739                           
 10740                           ;incstack = 0
 10741                           ;InitPatternControlService@Priority stored from wreg
 10742  003734  0100               	movlb	0	; () banked
 10743  003736  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
 10744                           
 10745                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
 10746                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
 10747  003738  C080  F0E6         	movff	InitPatternControlService@Priority,_MyPriority
 10748                           
 10749                           ;Pattern_ControlService.c: 103: DotStar_Init(&PatternConfigs[1]);
 10750  00373C  0EF8               	movlw	low (_PatternConfigs+1)
 10751  00373E  0100               	movlb	0	; () banked
 10752  003740  6F60               	movwf	DotStar_Init@brightnessPointer& (0+255),b
 10753  003742  0E00               	movlw	high (_PatternConfigs+1)
 10754  003744  0100               	movlb	0	; () banked
 10755  003746  6F61               	movwf	(DotStar_Init@brightnessPointer+1)& (0+255),b
 10756  003748  ECF6  F01B         	call	_DotStar_Init
 10757                           
 10758                           ;Pattern_ControlService.c: 104: SetupPattern(&PatternConfigs[0], &PatternConfigs[2]);
 10759  00374C  0EF7               	movlw	low _PatternConfigs
 10760  00374E  0100               	movlb	0	; () banked
 10761  003750  6F60               	movwf	SetupPattern@patternIDPointer& (0+255),b
 10762  003752  0E00               	movlw	high _PatternConfigs
 10763  003754  0100               	movlb	0	; () banked
 10764  003756  6F61               	movwf	(SetupPattern@patternIDPointer+1)& (0+255),b
 10765  003758  0EF9               	movlw	low (_PatternConfigs+2)
 10766  00375A  0100               	movlb	0	; () banked
 10767  00375C  6F62               	movwf	SetupPattern@listeningFocusPointer& (0+255),b
 10768  00375E  0E00               	movlw	high (_PatternConfigs+2)
 10769  003760  0100               	movlb	0	; () banked
 10770  003762  6F63               	movwf	(SetupPattern@listeningFocusPointer+1)& (0+255),b
 10771  003764  EC39  F01E         	call	_SetupPattern	;wreg free
 10772                           
 10773                           ;Pattern_ControlService.c: 106: CAN_Init();
 10774  003768  EC55  F01E         	call	_CAN_Init	;wreg free
 10775                           
 10776                           ;Pattern_ControlService.c: 108: CurrentState = Pattern_Startup;
 10777  00376C  0E00               	movlw	0
 10778  00376E  0100               	movlb	0	; () banked
 10779  003770  6FE4               	movwf	_CurrentState& (0+255),b
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;Pattern_ControlService.c: 110: ThisEvent.EventType = ES_INIT;
 10783  003772  0E02               	movlw	2
 10784  003774  0100               	movlb	0	; () banked
 10785  003776  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;Pattern_ControlService.c: 111: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10789  003778  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
 10790  00377C  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10791  003780  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10792  003784  0100               	movlb	0	; () banked
 10793  003786  51E6               	movf	_MyPriority& (0+255),w,b
 10794  003788  ECF2  F01A         	call	_ES_PostToService
 10795  00378C  06E8               	decf	wreg,f,c
 10796  00378E  A4D8               	btfss	status,2,c
 10797  003790  D002               	goto	l4011
 10798                           
 10799                           ;Pattern_ControlService.c: 112: {
 10800                           ;Pattern_ControlService.c: 113: return 1;
 10801  003792  0E01               	movlw	1
 10802                           
 10803                           ;Pattern_ControlService.c: 114: }else
 10804  003794  0012               	return	
 10805  003796                     l4011:
 10806                           
 10807                           ;Pattern_ControlService.c: 115: {
 10808                           ;Pattern_ControlService.c: 116: return 0;
 10809  003796  0E00               	movlw	0
 10810  003798  0012               	return	
 10811  00379A                     __end_of_InitPatternControlService:
 10812                           	opt stack 0
 10813                           tosu	equ	0xFFF
 10814                           tosh	equ	0xFFE
 10815                           tosl	equ	0xFFD
 10816                           pclath	equ	0xFFA
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           postinc0	equ	0xFEE
 10825                           wreg	equ	0xFE8
 10826                           indf1	equ	0xFE7
 10827                           postinc1	equ	0xFE6
 10828                           postdec1	equ	0xFE5
 10829                           fsr1h	equ	0xFE2
 10830                           fsr1l	equ	0xFE1
 10831                           indf2	equ	0xFDF
 10832                           postinc2	equ	0xFDE
 10833                           postdec2	equ	0xFDD
 10834                           plusw2	equ	0xFDB
 10835                           fsr2h	equ	0xFDA
 10836                           fsr2l	equ	0xFD9
 10837                           status	equ	0xFD8
 10838                           
 10839 ;; *************** function _InitSPI32ControlService *****************
 10840 ;; Defined at:
 10841 ;;		line 80 in file "SPI32_ControlService.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;  Priority        1    wreg     unsigned char 
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;  Priority        1   32[BANK0 ] unsigned char 
 10846 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10847 ;; Return value:  Size  Location     Type
 10848 ;;                  1    wreg      unsigned char 
 10849 ;; Registers used:
 10850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10856 ;;      Params:         0       0       0       0
 10857 ;;      Locals:         0       4       0       0
 10858 ;;      Temps:          0       0       0       0
 10859 ;;      Totals:         0       4       0       0
 10860 ;;Total ram usage:        4 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; Hardware stack levels required when called:   10
 10863 ;; This function calls:
 10864 ;;		_ES_PostToService
 10865 ;;		_SPI32_Init
 10866 ;; This function is called by:
 10867 ;;		_ES_Initialize
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text38
 10872  003998                     __ptext38:
 10873                           	opt stack 0
 10874  003998                     _InitSPI32ControlService:
 10875                           	opt stack 19
 10876                           
 10877                           ;incstack = 0
 10878                           ;InitSPI32ControlService@Priority stored from wreg
 10879  003998  0100               	movlb	0	; () banked
 10880  00399A  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
 10881                           
 10882                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
 10883                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
 10884  00399C  C080  F0E3         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
 10885                           
 10886                           ;SPI32_ControlService.c: 86: SPI32_Init();
 10887  0039A0  EC62  F01E         	call	_SPI32_Init	;wreg free
 10888                           
 10889                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
 10890  0039A4  0E00               	movlw	0
 10891  0039A6  0100               	movlb	0	; () banked
 10892  0039A8  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
 10896  0039AA  0E02               	movlw	2
 10897  0039AC  0100               	movlb	0	; () banked
 10898  0039AE  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10902  0039B0  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
 10903  0039B4  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10904  0039B8  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10905  0039BC  0100               	movlb	0	; () banked
 10906  0039BE  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10907  0039C0  ECF2  F01A         	call	_ES_PostToService
 10908  0039C4  06E8               	decf	wreg,f,c
 10909  0039C6  A4D8               	btfss	status,2,c
 10910  0039C8  D002               	goto	l4079
 10911                           
 10912                           ;SPI32_ControlService.c: 92: {
 10913                           ;SPI32_ControlService.c: 93: return 1;
 10914  0039CA  0E01               	movlw	1
 10915                           
 10916                           ;SPI32_ControlService.c: 94: }else
 10917  0039CC  0012               	return	
 10918  0039CE                     l4079:
 10919                           
 10920                           ;SPI32_ControlService.c: 95: {
 10921                           ;SPI32_ControlService.c: 96: return 0;
 10922  0039CE  0E00               	movlw	0
 10923  0039D0  0012               	return	
 10924  0039D2                     __end_of_InitSPI32ControlService:
 10925                           	opt stack 0
 10926                           tosu	equ	0xFFF
 10927                           tosh	equ	0xFFE
 10928                           tosl	equ	0xFFD
 10929                           pclath	equ	0xFFA
 10930                           tblptru	equ	0xFF8
 10931                           tblptrh	equ	0xFF7
 10932                           tblptrl	equ	0xFF6
 10933                           tablat	equ	0xFF5
 10934                           prodh	equ	0xFF4
 10935                           prodl	equ	0xFF3
 10936                           intcon	equ	0xFF2
 10937                           postinc0	equ	0xFEE
 10938                           wreg	equ	0xFE8
 10939                           indf1	equ	0xFE7
 10940                           postinc1	equ	0xFE6
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           plusw2	equ	0xFDB
 10948                           fsr2h	equ	0xFDA
 10949                           fsr2l	equ	0xFD9
 10950                           status	equ	0xFD8
 10951                           
 10952 ;; *************** function _SPI32_Init *****************
 10953 ;; Defined at:
 10954 ;;		line 65 in file "SPI32_HW.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;		None
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;		None
 10959 ;; Return value:  Size  Location     Type
 10960 ;;                  1    wreg      void 
 10961 ;; Registers used:
 10962 ;;		wreg, status,2, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10968 ;;      Params:         0       0       0       0
 10969 ;;      Locals:         0       0       0       0
 10970 ;;      Temps:          0       0       0       0
 10971 ;;      Totals:         0       0       0       0
 10972 ;;Total ram usage:        0 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    8
 10975 ;; This function calls:
 10976 ;;		_HW_Init
 10977 ;; This function is called by:
 10978 ;;		_InitSPI32ControlService
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text39
 10983  003CC4                     __ptext39:
 10984                           	opt stack 0
 10985  003CC4                     _SPI32_Init:
 10986                           	opt stack 20
 10987                           
 10988                           ;SPI32_HW.c: 67: HW_Init();
 10989                           
 10990                           ;incstack = 0
 10991  003CC4  EC7A  F01D         	call	_HW_Init	;wreg free
 10992  003CC8  0012               	return		;funcret
 10993  003CCA                     __end_of_SPI32_Init:
 10994                           	opt stack 0
 10995                           tosu	equ	0xFFF
 10996                           tosh	equ	0xFFE
 10997                           tosl	equ	0xFFD
 10998                           pclath	equ	0xFFA
 10999                           tblptru	equ	0xFF8
 11000                           tblptrh	equ	0xFF7
 11001                           tblptrl	equ	0xFF6
 11002                           tablat	equ	0xFF5
 11003                           prodh	equ	0xFF4
 11004                           prodl	equ	0xFF3
 11005                           intcon	equ	0xFF2
 11006                           postinc0	equ	0xFEE
 11007                           wreg	equ	0xFE8
 11008                           indf1	equ	0xFE7
 11009                           postinc1	equ	0xFE6
 11010                           postdec1	equ	0xFE5
 11011                           fsr1h	equ	0xFE2
 11012                           fsr1l	equ	0xFE1
 11013                           indf2	equ	0xFDF
 11014                           postinc2	equ	0xFDE
 11015                           postdec2	equ	0xFDD
 11016                           plusw2	equ	0xFDB
 11017                           fsr2h	equ	0xFDA
 11018                           fsr2l	equ	0xFD9
 11019                           status	equ	0xFD8
 11020                           
 11021 ;; *************** function _HW_Init *****************
 11022 ;; Defined at:
 11023 ;;		line 127 in file "SPI32_HW.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;		None
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;		None
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  1    wreg      void 
 11030 ;; Registers used:
 11031 ;;		wreg, status,2
 11032 ;; Tracked objects:
 11033 ;;		On entry : 0/0
 11034 ;;		On exit  : 0/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11037 ;;      Params:         0       0       0       0
 11038 ;;      Locals:         0       0       0       0
 11039 ;;      Temps:          0       0       0       0
 11040 ;;      Totals:         0       0       0       0
 11041 ;;Total ram usage:        0 bytes
 11042 ;; Hardware stack levels used:    1
 11043 ;; Hardware stack levels required when called:    7
 11044 ;; This function calls:
 11045 ;;		Nothing
 11046 ;; This function is called by:
 11047 ;;		_SPI32_Init
 11048 ;; This function uses a non-reentrant model
 11049 ;;
 11050                           
 11051                           	psect	text40
 11052  003AF4                     __ptext40:
 11053                           	opt stack 0
 11054  003AF4                     _HW_Init:
 11055                           	opt stack 20
 11056                           
 11057                           ;SPI32_HW.c: 133: PORTC = 0x00;
 11058                           
 11059                           ;incstack = 0
 11060  003AF4  0E00               	movlw	0
 11061  003AF6  6E82               	movwf	3970,c	;volatile
 11062                           
 11063                           ;SPI32_HW.c: 134: LATC = 0x00;
 11064  003AF8  0E00               	movlw	0
 11065  003AFA  6E8B               	movwf	3979,c	;volatile
 11066                           
 11067                           ;SPI32_HW.c: 135: ADCON1 = 0x0F;
 11068  003AFC  0E0F               	movlw	15
 11069  003AFE  6EC1               	movwf	4033,c	;volatile
 11070                           
 11071                           ;SPI32_HW.c: 136: TRISC = 0x00;
 11072  003B00  0E00               	movlw	0
 11073  003B02  6E94               	movwf	3988,c	;volatile
 11074                           
 11075                           ;SPI32_HW.c: 138: SSPIE = 1;
 11076  003B04  869D               	bsf	3997,3,c	;volatile
 11077                           
 11078                           ;SPI32_HW.c: 142: SSPCON1 = 0x00;
 11079  003B06  0E00               	movlw	0
 11080  003B08  6EC6               	movwf	4038,c	;volatile
 11081                           
 11082                           ;SPI32_HW.c: 143: SSPSTAT = 0b01000000;
 11083  003B0A  0E40               	movlw	64
 11084  003B0C  6EC7               	movwf	4039,c	;volatile
 11085                           
 11086                           ;SPI32_HW.c: 144: SSPADD = 0xFF;
 11087  003B0E  68C8               	setf	4040,c	;volatile
 11088                           
 11089                           ;SPI32_HW.c: 145: SSPCON1 = 0b00110000;
 11090  003B10  0E30               	movlw	48
 11091  003B12  6EC6               	movwf	4038,c	;volatile
 11092  003B14  0012               	return		;funcret
 11093  003B16                     __end_of_HW_Init:
 11094                           	opt stack 0
 11095                           tosu	equ	0xFFF
 11096                           tosh	equ	0xFFE
 11097                           tosl	equ	0xFFD
 11098                           pclath	equ	0xFFA
 11099                           tblptru	equ	0xFF8
 11100                           tblptrh	equ	0xFF7
 11101                           tblptrl	equ	0xFF6
 11102                           tablat	equ	0xFF5
 11103                           prodh	equ	0xFF4
 11104                           prodl	equ	0xFF3
 11105                           intcon	equ	0xFF2
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           indf1	equ	0xFE7
 11109                           postinc1	equ	0xFE6
 11110                           postdec1	equ	0xFE5
 11111                           fsr1h	equ	0xFE2
 11112                           fsr1l	equ	0xFE1
 11113                           indf2	equ	0xFDF
 11114                           postinc2	equ	0xFDE
 11115                           postdec2	equ	0xFDD
 11116                           plusw2	equ	0xFDB
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function _SetupPattern *****************
 11122 ;; Defined at:
 11123 ;;		line 71 in file "Pattern_PtrnGenerator.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;  patternIDPoi    2    0[BANK0 ] PTR unsigned char 
 11126 ;;		 -> PatternConfigs(4), 
 11127 ;;  listeningFoc    2    2[BANK0 ] PTR unsigned char 
 11128 ;;		 -> PatternConfigs(4), 
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;		None
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  1    wreg      void 
 11133 ;; Registers used:
 11134 ;;		wreg, status,2, status,0
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11140 ;;      Params:         0       4       0       0
 11141 ;;      Locals:         0       0       0       0
 11142 ;;      Temps:          0       0       0       0
 11143 ;;      Totals:         0       4       0       0
 11144 ;;Total ram usage:        4 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    7
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_InitPatternControlService
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text41
 11155  003C72                     __ptext41:
 11156                           	opt stack 0
 11157  003C72                     _SetupPattern:
 11158                           	opt stack 21
 11159                           
 11160                           ;Pattern_PtrnGenerator.c: 73: PatternID = patternIDPointer;
 11161                           
 11162                           ;incstack = 0
 11163  003C72  C060  F0DB         	movff	SetupPattern@patternIDPointer,_PatternID
 11164  003C76  C061  F0DC         	movff	SetupPattern@patternIDPointer+1,_PatternID+1
 11165                           
 11166                           ;Pattern_PtrnGenerator.c: 74: ListeningFocus = listeningFocusPointer;
 11167  003C7A  C062  F0D9         	movff	SetupPattern@listeningFocusPointer,_ListeningFocus
 11168  003C7E  C063  F0DA         	movff	SetupPattern@listeningFocusPointer+1,_ListeningFocus+1
 11169  003C82  0012               	return		;funcret
 11170  003C84                     __end_of_SetupPattern:
 11171                           	opt stack 0
 11172                           tosu	equ	0xFFF
 11173                           tosh	equ	0xFFE
 11174                           tosl	equ	0xFFD
 11175                           pclath	equ	0xFFA
 11176                           tblptru	equ	0xFF8
 11177                           tblptrh	equ	0xFF7
 11178                           tblptrl	equ	0xFF6
 11179                           tablat	equ	0xFF5
 11180                           prodh	equ	0xFF4
 11181                           prodl	equ	0xFF3
 11182                           intcon	equ	0xFF2
 11183                           postinc0	equ	0xFEE
 11184                           wreg	equ	0xFE8
 11185                           indf1	equ	0xFE7
 11186                           postinc1	equ	0xFE6
 11187                           postdec1	equ	0xFE5
 11188                           fsr1h	equ	0xFE2
 11189                           fsr1l	equ	0xFE1
 11190                           indf2	equ	0xFDF
 11191                           postinc2	equ	0xFDE
 11192                           postdec2	equ	0xFDD
 11193                           plusw2	equ	0xFDB
 11194                           fsr2h	equ	0xFDA
 11195                           fsr2l	equ	0xFD9
 11196                           status	equ	0xFD8
 11197                           
 11198 ;; *************** function _ES_PostToService *****************
 11199 ;; Defined at:
 11200 ;;		line 351 in file "ES_Framework.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;  WhichService    1    wreg     unsigned char 
 11203 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  WhichService    1   28[BANK0 ] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      unsigned char 
 11208 ;; Registers used:
 11209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11215 ;;      Params:         0       3       0       0
 11216 ;;      Locals:         0       1       0       0
 11217 ;;      Temps:          0       2       0       0
 11218 ;;      Totals:         0       6       0       0
 11219 ;;Total ram usage:        6 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    9
 11222 ;; This function calls:
 11223 ;;		_ES_EnQueueFIFO
 11224 ;; This function is called by:
 11225 ;;		_InitPatternControlService
 11226 ;;		_PostPatternControlService
 11227 ;;		_InitSPI32ControlService
 11228 ;;		_PostSPI32ControlService
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text42
 11233  0035E4                     __ptext42:
 11234                           	opt stack 0
 11235  0035E4                     _ES_PostToService:
 11236                           	opt stack 17
 11237                           
 11238                           ;incstack = 0
 11239                           ;ES_PostToService@WhichService stored from wreg
 11240  0035E4  0100               	movlb	0	; () banked
 11241  0035E6  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
 11242                           
 11243                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 11244                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 11245                           ;ES_Framework.c: 354: 1 )){
 11246  0035E8  0E02               	movlw	2
 11247  0035EA  0100               	movlb	0	; () banked
 11248  0035EC  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
 11249  0035EE  D033               	goto	l3077
 11250                           
 11251                           ; BSR set to: 0
 11252  0035F0  0100               	movlb	0	; () banked
 11253  0035F2  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11254  0035F4  0D03               	mullw	3
 11255  0035F6  0E58               	movlw	low _EventQueues
 11256  0035F8  24F3               	addwf	prodl,w,c
 11257  0035FA  6EF6               	movwf	tblptrl,c
 11258  0035FC  0E03               	movlw	high _EventQueues
 11259  0035FE  20F4               	addwfc	prodh,w,c
 11260  003600  6EF7               	movwf	tblptrh,c
 11261  003602                     	if	0	;There are less than 3 active tblptr bytes
 11262  003602                     	endif
 11263  003602  0009               	tblrd		*+
 11264  003604  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
 11265  003608  000A               	tblrd		*-
 11266  00360A  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
 11267  00360E  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
 11268  003612  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
 11269  003616  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
 11270  00361A  EC80  F016         	call	_ES_EnQueueFIFO	;wreg free
 11271  00361E  06E8               	decf	wreg,f,c
 11272  003620  A4D8               	btfss	status,2,c
 11273  003622  D019               	goto	l3077
 11274                           
 11275                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 11276  003624  0100               	movlb	0	; () banked
 11277  003626  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11278  003628  0D02               	mullw	2
 11279  00362A  0E01               	movlw	low _BitNum2SetMask
 11280  00362C  24F3               	addwf	prodl,w,c
 11281  00362E  6EF6               	movwf	tblptrl,c
 11282  003630  0E03               	movlw	high _BitNum2SetMask
 11283  003632  20F4               	addwfc	prodh,w,c
 11284  003634  6EF7               	movwf	tblptrh,c
 11285  003636                     	if	0	;There are less than 3 active tblptr bytes
 11286  003636                     	endif
 11287  003636  0009               	tblrd		*+
 11288  003638  CFF5 F07A          	movff	tablat,??_ES_PostToService
 11289  00363C  0009               	tblrd		*+
 11290  00363E  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
 11291  003642  0100               	movlb	0	; () banked
 11292  003644  517A               	movf	??_ES_PostToService& (0+255),w,b
 11293  003646  0100               	movlb	0	; () banked
 11294  003648  13DD               	iorwf	_Ready& (0+255),f,b
 11295  00364A  0100               	movlb	0	; () banked
 11296  00364C  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
 11297  00364E  0100               	movlb	0	; () banked
 11298  003650  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;ES_Framework.c: 356: return 1;
 11302  003652  0E01               	movlw	1
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;ES_Framework.c: 357: } else
 11306                           
 11307                           ; BSR set to: 0
 11308  003654  0012               	return	
 11309  003656                     l3077:
 11310                           
 11311                           ;ES_Framework.c: 358: return 0;
 11312  003656  0E00               	movlw	0
 11313  003658  0012               	return	
 11314  00365A                     __end_of_ES_PostToService:
 11315                           	opt stack 0
 11316                           tosu	equ	0xFFF
 11317                           tosh	equ	0xFFE
 11318                           tosl	equ	0xFFD
 11319                           pclath	equ	0xFFA
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           postinc0	equ	0xFEE
 11328                           wreg	equ	0xFE8
 11329                           indf1	equ	0xFE7
 11330                           postinc1	equ	0xFE6
 11331                           postdec1	equ	0xFE5
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           plusw2	equ	0xFDB
 11338                           fsr2h	equ	0xFDA
 11339                           fsr2l	equ	0xFD9
 11340                           status	equ	0xFD8
 11341                           
 11342 ;; *************** function _ES_EnQueueFIFO *****************
 11343 ;; Defined at:
 11344 ;;		line 85 in file "ES_Queue.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
 11347 ;;		 -> Queue1(12), Queue0(12), 
 11348 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
 11351 ;;		 -> Queue1(12), Queue0(12), 
 11352 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      unsigned char 
 11355 ;; Registers used:
 11356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11362 ;;      Params:         0       5       0       0
 11363 ;;      Locals:         0       3       0       0
 11364 ;;      Temps:          0       3       0       0
 11365 ;;      Totals:         0      11       0       0
 11366 ;;Total ram usage:       11 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    8
 11369 ;; This function calls:
 11370 ;;		___awmod
 11371 ;;		___wmul
 11372 ;; This function is called by:
 11373 ;;		_ES_PostToService
 11374 ;;		_ES_PostAll
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           	psect	text43
 11379  002D00                     __ptext43:
 11380                           	opt stack 0
 11381  002D00                     _ES_EnQueueFIFO:
 11382                           	opt stack 17
 11383                           
 11384                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11385                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11386                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11387                           
 11388                           ;incstack = 0
 11389  002D00  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
 11390  002D04  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
 11391                           
 11392                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11393  002D08  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11394  002D0C  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11395  002D10  0100               	movlb	0	; () banked
 11396  002D12  EE10 F002          	lfsr	1,2
 11397  002D16  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11398  002D18  26E1               	addwf	fsr1l,f,c
 11399  002D1A  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11400  002D1C  22E2               	addwfc	fsr1h,f,c
 11401  002D1E  50DE               	movf	postinc2,w,c
 11402  002D20  5CE6               	subwf	postinc1,w,c
 11403  002D22  B0D8               	btfsc	status,0,c
 11404  002D24  D05C               	goto	l3061
 11405                           
 11406                           ; BSR set to: 0
 11407                           
 11408                           ;ES_Queue.c: 92: {
 11409                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11410  002D26  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
 11411  002D2A  9EF2               	bcf	intcon,7,c	;volatile
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11415                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11416                           
 11417                           ; BSR set to: 0
 11418  002D2C  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11419  002D30  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11420  002D34  50DF               	movf	indf2,w,c
 11421  002D36  0100               	movlb	0	; () banked
 11422  002D38  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
 11423  002D3A  0100               	movlb	0	; () banked
 11424  002D3C  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
 11425  002D3E  0100               	movlb	0	; () banked
 11426  002D40  6F62               	movwf	___awmod@divisor& (0+255),b
 11427  002D42  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
 11428  002D44  0100               	movlb	0	; () banked
 11429  002D46  EE20 F002          	lfsr	2,2
 11430  002D4A  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11431  002D4C  26D9               	addwf	fsr2l,f,c
 11432  002D4E  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11433  002D50  22DA               	addwfc	fsr2h,f,c
 11434  002D52  50DF               	movf	indf2,w,c
 11435  002D54  0100               	movlb	0	; () banked
 11436  002D56  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
 11437  002D58  0100               	movlb	0	; () banked
 11438  002D5A  EE20 F001          	lfsr	2,1
 11439  002D5E  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11440  002D60  26D9               	addwf	fsr2l,f,c
 11441  002D62  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11442  002D64  22DA               	addwfc	fsr2h,f,c
 11443  002D66  50DF               	movf	indf2,w,c
 11444  002D68  0100               	movlb	0	; () banked
 11445  002D6A  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
 11446  002D6C  0100               	movlb	0	; () banked
 11447  002D6E  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
 11448  002D70  0100               	movlb	0	; () banked
 11449  002D72  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
 11450  002D74  0100               	movlb	0	; () banked
 11451  002D76  6F60               	movwf	___awmod@dividend& (0+255),b
 11452  002D78  0100               	movlb	0	; () banked
 11453  002D7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 11454  002D7C  0100               	movlb	0	; () banked
 11455  002D7E  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
 11456  002D80  EC20  F019         	call	___awmod	;wreg free
 11457  002D84  0E01               	movlw	1
 11458  002D86  0100               	movlb	0	; () banked
 11459  002D88  2560               	addwf	?___awmod& (0+255),w,b
 11460  002D8A  0100               	movlb	0	; () banked
 11461  002D8C  6F66               	movwf	___wmul@multiplier& (0+255),b
 11462  002D8E  0E00               	movlw	0
 11463  002D90  0100               	movlb	0	; () banked
 11464  002D92  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 11465  002D94  0100               	movlb	0	; () banked
 11466  002D96  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
 11467  002D98  0E00               	movlw	0
 11468  002D9A  0100               	movlb	0	; () banked
 11469  002D9C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11470  002D9E  0E03               	movlw	3
 11471  002DA0  6F68               	movwf	___wmul@multiplicand& (0+255),b
 11472  002DA2  EC06  F01D         	call	___wmul	;wreg free
 11473  002DA6  0100               	movlb	0	; () banked
 11474  002DA8  5166               	movf	?___wmul& (0+255),w,b
 11475  002DAA  0100               	movlb	0	; () banked
 11476  002DAC  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
 11477  002DAE  6ED9               	movwf	fsr2l,c
 11478  002DB0  0100               	movlb	0	; () banked
 11479  002DB2  5167               	movf	(?___wmul+1)& (0+255),w,b
 11480  002DB4  0100               	movlb	0	; () banked
 11481  002DB6  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
 11482  002DB8  6EDA               	movwf	fsr2h,c
 11483  002DBA  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
 11484  002DBE  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
 11485  002DC2  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11489  002DC6  0100               	movlb	0	; () banked
 11490  002DC8  EE20 F002          	lfsr	2,2
 11491  002DCC  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11492  002DCE  26D9               	addwf	fsr2l,f,c
 11493  002DD0  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11494  002DD2  22DA               	addwfc	fsr2h,f,c
 11495  002DD4  2ADF               	incf	indf2,f,c
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11499  002DD6  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;ES_Queue.c: 101: return(1);
 11503  002DDA  0E01               	movlw	1
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;ES_Queue.c: 102: }else
 11507                           
 11508                           ; BSR set to: 0
 11509  002DDC  0012               	return	
 11510  002DDE                     l3061:
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;ES_Queue.c: 103: return(0);
 11514  002DDE  0E00               	movlw	0
 11515                           
 11516                           ; BSR set to: 0
 11517  002DE0  0012               	return	
 11518  002DE2                     __end_of_ES_EnQueueFIFO:
 11519                           	opt stack 0
 11520                           tosu	equ	0xFFF
 11521                           tosh	equ	0xFFE
 11522                           tosl	equ	0xFFD
 11523                           pclath	equ	0xFFA
 11524                           tblptru	equ	0xFF8
 11525                           tblptrh	equ	0xFF7
 11526                           tblptrl	equ	0xFF6
 11527                           tablat	equ	0xFF5
 11528                           prodh	equ	0xFF4
 11529                           prodl	equ	0xFF3
 11530                           intcon	equ	0xFF2
 11531                           postinc0	equ	0xFEE
 11532                           wreg	equ	0xFE8
 11533                           indf1	equ	0xFE7
 11534                           postinc1	equ	0xFE6
 11535                           postdec1	equ	0xFE5
 11536                           fsr1h	equ	0xFE2
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           postdec2	equ	0xFDD
 11541                           plusw2	equ	0xFDB
 11542                           fsr2h	equ	0xFDA
 11543                           fsr2l	equ	0xFD9
 11544                           status	equ	0xFD8
 11545                           
 11546 ;; *************** function ___wmul *****************
 11547 ;; Defined at:
 11548 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;  multiplier      2    6[BANK0 ] unsigned int 
 11551 ;;  multiplicand    2    8[BANK0 ] unsigned int 
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  product         2   10[BANK0 ] unsigned int 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  2    6[BANK0 ] unsigned int 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0, prodl, prodh
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11563 ;;      Params:         0       4       0       0
 11564 ;;      Locals:         0       2       0       0
 11565 ;;      Temps:          0       0       0       0
 11566 ;;      Totals:         0       6       0       0
 11567 ;;Total ram usage:        6 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    7
 11570 ;; This function calls:
 11571 ;;		Nothing
 11572 ;; This function is called by:
 11573 ;;		_ES_EnQueueFIFO
 11574 ;;		_ES_DeQueue
 11575 ;;		_HSV_to_RGB
 11576 ;;		_HueTest
 11577 ;;		i2_ES_EnQueueFIFO
 11578 ;;		_ES_EnQueueLIFO
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           	psect	text44
 11583  003A0C                     __ptext44:
 11584                           	opt stack 0
 11585  003A0C                     ___wmul:
 11586                           	opt stack 17
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;incstack = 0
 11590  003A0C  0100               	movlb	0	; () banked
 11591  003A0E  5166               	movf	___wmul@multiplier& (0+255),w,b
 11592  003A10  0100               	movlb	0	; () banked
 11593  003A12  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11594  003A14  CFF3 F06A          	movff	prodl,___wmul@product
 11595  003A18  CFF4 F06B          	movff	prodh,___wmul@product+1
 11596  003A1C  0100               	movlb	0	; () banked
 11597  003A1E  5166               	movf	___wmul@multiplier& (0+255),w,b
 11598  003A20  0100               	movlb	0	; () banked
 11599  003A22  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11600  003A24  50F3               	movf	prodl,w,c
 11601  003A26  0100               	movlb	0	; () banked
 11602  003A28  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11603  003A2A  0100               	movlb	0	; () banked
 11604  003A2C  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11605  003A2E  0100               	movlb	0	; () banked
 11606  003A30  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11607  003A32  50F3               	movf	prodl,w,c
 11608  003A34  0100               	movlb	0	; () banked
 11609  003A36  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11610                           
 11611                           ; BSR set to: 0
 11612  003A38  C06A  F066         	movff	___wmul@product,?___wmul
 11613  003A3C  C06B  F067         	movff	___wmul@product+1,?___wmul+1
 11614  003A40  0012               	return	
 11615  003A42                     __end_of___wmul:
 11616                           	opt stack 0
 11617                           tosu	equ	0xFFF
 11618                           tosh	equ	0xFFE
 11619                           tosl	equ	0xFFD
 11620                           pclath	equ	0xFFA
 11621                           tblptru	equ	0xFF8
 11622                           tblptrh	equ	0xFF7
 11623                           tblptrl	equ	0xFF6
 11624                           tablat	equ	0xFF5
 11625                           prodh	equ	0xFF4
 11626                           prodl	equ	0xFF3
 11627                           intcon	equ	0xFF2
 11628                           postinc0	equ	0xFEE
 11629                           wreg	equ	0xFE8
 11630                           indf1	equ	0xFE7
 11631                           postinc1	equ	0xFE6
 11632                           postdec1	equ	0xFE5
 11633                           fsr1h	equ	0xFE2
 11634                           fsr1l	equ	0xFE1
 11635                           indf2	equ	0xFDF
 11636                           postinc2	equ	0xFDE
 11637                           postdec2	equ	0xFDD
 11638                           plusw2	equ	0xFDB
 11639                           fsr2h	equ	0xFDA
 11640                           fsr2l	equ	0xFD9
 11641                           status	equ	0xFD8
 11642                           
 11643 ;; *************** function ___awmod *****************
 11644 ;; Defined at:
 11645 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  dividend        2    0[BANK0 ] int 
 11648 ;;  divisor         2    2[BANK0 ] int 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  sign            1    5[BANK0 ] unsigned char 
 11651 ;;  counter         1    4[BANK0 ] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  2    0[BANK0 ] int 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11661 ;;      Params:         0       4       0       0
 11662 ;;      Locals:         0       2       0       0
 11663 ;;      Temps:          0       0       0       0
 11664 ;;      Totals:         0       6       0       0
 11665 ;;Total ram usage:        6 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    7
 11668 ;; This function calls:
 11669 ;;		Nothing
 11670 ;; This function is called by:
 11671 ;;		_ES_EnQueueFIFO
 11672 ;;		_HueTest
 11673 ;;		_CenterBreathe
 11674 ;;		_SingleFadedLoop
 11675 ;;		_DoubleFadedLoop
 11676 ;;		_BrokenPinwheel
 11677 ;;		_MirroredQuadrants
 11678 ;;		_SingleFocusBreathe
 11679 ;;		_DoubleBrokenLoop
 11680 ;;		_SingleFocusPulse
 11681 ;; This function uses a non-reentrant model
 11682 ;;
 11683                           
 11684                           	psect	text45
 11685  003240                     __ptext45:
 11686                           	opt stack 0
 11687  003240                     ___awmod:
 11688                           	opt stack 17
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;incstack = 0
 11692  003240  0E00               	movlw	0
 11693  003242  0100               	movlb	0	; () banked
 11694  003244  6F65               	movwf	___awmod@sign& (0+255),b
 11695                           
 11696                           ; BSR set to: 0
 11697  003246  0100               	movlb	0	; () banked
 11698  003248  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11699  00324A  D008               	goto	l3017
 11700                           
 11701                           ; BSR set to: 0
 11702  00324C  0100               	movlb	0	; () banked
 11703  00324E  6D60               	negf	___awmod@dividend& (0+255),b
 11704  003250  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11705  003252  B0D8               	btfsc	status,0,c
 11706  003254  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11707                           
 11708                           ; BSR set to: 0
 11709  003256  0E01               	movlw	1
 11710  003258  0100               	movlb	0	; () banked
 11711  00325A  6F65               	movwf	___awmod@sign& (0+255),b
 11712  00325C                     l3017:
 11713                           
 11714                           ; BSR set to: 0
 11715  00325C  0100               	movlb	0	; () banked
 11716  00325E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11717  003260  D005               	goto	l3021
 11718                           
 11719                           ; BSR set to: 0
 11720  003262  0100               	movlb	0	; () banked
 11721  003264  6D62               	negf	___awmod@divisor& (0+255),b
 11722  003266  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 11723  003268  B0D8               	btfsc	status,0,c
 11724  00326A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 11725  00326C                     l3021:
 11726                           
 11727                           ; BSR set to: 0
 11728  00326C  0100               	movlb	0	; () banked
 11729  00326E  5162               	movf	___awmod@divisor& (0+255),w,b
 11730  003270  0100               	movlb	0	; () banked
 11731  003272  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11732  003274  B4D8               	btfsc	status,2,c
 11733  003276  D026               	goto	l3037
 11734                           
 11735                           ; BSR set to: 0
 11736  003278  0E01               	movlw	1
 11737  00327A  0100               	movlb	0	; () banked
 11738  00327C  6F64               	movwf	___awmod@counter& (0+255),b
 11739  00327E  D006               	goto	l3027
 11740  003280                     l3025:
 11741                           
 11742                           ; BSR set to: 0
 11743  003280  0100               	movlb	0	; () banked
 11744  003282  90D8               	bcf	status,0,c
 11745  003284  3762               	rlcf	___awmod@divisor& (0+255),f,b
 11746  003286  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11747  003288  0100               	movlb	0	; () banked
 11748  00328A  2B64               	incf	___awmod@counter& (0+255),f,b
 11749  00328C                     l3027:
 11750                           
 11751                           ; BSR set to: 0
 11752  00328C  0100               	movlb	0	; () banked
 11753  00328E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11754  003290  D7F7               	goto	l3025
 11755  003292                     l3029:
 11756                           
 11757                           ; BSR set to: 0
 11758  003292  0100               	movlb	0	; () banked
 11759  003294  5162               	movf	___awmod@divisor& (0+255),w,b
 11760  003296  0100               	movlb	0	; () banked
 11761  003298  5D60               	subwf	___awmod@dividend& (0+255),w,b
 11762  00329A  0100               	movlb	0	; () banked
 11763  00329C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11764  00329E  0100               	movlb	0	; () banked
 11765  0032A0  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11766  0032A2  A0D8               	btfss	status,0,c
 11767  0032A4  D008               	goto	l3033
 11768                           
 11769                           ; BSR set to: 0
 11770  0032A6  0100               	movlb	0	; () banked
 11771  0032A8  5162               	movf	___awmod@divisor& (0+255),w,b
 11772  0032AA  0100               	movlb	0	; () banked
 11773  0032AC  5F60               	subwf	___awmod@dividend& (0+255),f,b
 11774  0032AE  0100               	movlb	0	; () banked
 11775  0032B0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11776  0032B2  0100               	movlb	0	; () banked
 11777  0032B4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11778  0032B6                     l3033:
 11779                           
 11780                           ; BSR set to: 0
 11781  0032B6  0100               	movlb	0	; () banked
 11782  0032B8  90D8               	bcf	status,0,c
 11783  0032BA  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11784  0032BC  3362               	rrcf	___awmod@divisor& (0+255),f,b
 11785                           
 11786                           ; BSR set to: 0
 11787  0032BE  0100               	movlb	0	; () banked
 11788  0032C0  2F64               	decfsz	___awmod@counter& (0+255),f,b
 11789  0032C2  D7E7               	goto	l3029
 11790  0032C4                     l3037:
 11791                           
 11792                           ; BSR set to: 0
 11793  0032C4  0100               	movlb	0	; () banked
 11794  0032C6  5165               	movf	___awmod@sign& (0+255),w,b
 11795  0032C8  0100               	movlb	0	; () banked
 11796  0032CA  B4D8               	btfsc	status,2,c
 11797  0032CC  D005               	goto	l3041
 11798                           
 11799                           ; BSR set to: 0
 11800  0032CE  0100               	movlb	0	; () banked
 11801  0032D0  6D60               	negf	___awmod@dividend& (0+255),b
 11802  0032D2  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11803  0032D4  B0D8               	btfsc	status,0,c
 11804  0032D6  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11805  0032D8                     l3041:
 11806                           
 11807                           ; BSR set to: 0
 11808  0032D8  C060  F060         	movff	___awmod@dividend,?___awmod
 11809  0032DC  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 11810  0032E0  0012               	return	
 11811  0032E2                     __end_of___awmod:
 11812                           	opt stack 0
 11813                           tosu	equ	0xFFF
 11814                           tosh	equ	0xFFE
 11815                           tosl	equ	0xFFD
 11816                           pclath	equ	0xFFA
 11817                           tblptru	equ	0xFF8
 11818                           tblptrh	equ	0xFF7
 11819                           tblptrl	equ	0xFF6
 11820                           tablat	equ	0xFF5
 11821                           prodh	equ	0xFF4
 11822                           prodl	equ	0xFF3
 11823                           intcon	equ	0xFF2
 11824                           postinc0	equ	0xFEE
 11825                           wreg	equ	0xFE8
 11826                           indf1	equ	0xFE7
 11827                           postinc1	equ	0xFE6
 11828                           postdec1	equ	0xFE5
 11829                           fsr1h	equ	0xFE2
 11830                           fsr1l	equ	0xFE1
 11831                           indf2	equ	0xFDF
 11832                           postinc2	equ	0xFDE
 11833                           postdec2	equ	0xFDD
 11834                           plusw2	equ	0xFDB
 11835                           fsr2h	equ	0xFDA
 11836                           fsr2l	equ	0xFD9
 11837                           status	equ	0xFD8
 11838                           
 11839 ;; *************** function _DotStar_Init *****************
 11840 ;; Defined at:
 11841 ;;		line 50 in file "Pattern_DotStarLED.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;  brightnessPo    2    0[BANK0 ] PTR unsigned char 
 11844 ;;		 -> PatternConfigs(4), 
 11845 ;; Auto vars:     Size  Location     Type
 11846 ;;		None
 11847 ;; Return value:  Size  Location     Type
 11848 ;;                  1    wreg      void 
 11849 ;; Registers used:
 11850 ;;		wreg, status,2, status,0
 11851 ;; Tracked objects:
 11852 ;;		On entry : 0/0
 11853 ;;		On exit  : 0/0
 11854 ;;		Unchanged: 0/0
 11855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11856 ;;      Params:         0       2       0       0
 11857 ;;      Locals:         0       0       0       0
 11858 ;;      Temps:          0       0       0       0
 11859 ;;      Totals:         0       2       0       0
 11860 ;;Total ram usage:        2 bytes
 11861 ;; Hardware stack levels used:    1
 11862 ;; Hardware stack levels required when called:    7
 11863 ;; This function calls:
 11864 ;;		Nothing
 11865 ;; This function is called by:
 11866 ;;		_InitPatternControlService
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text46
 11871  0037EC                     __ptext46:
 11872                           	opt stack 0
 11873  0037EC                     _DotStar_Init:
 11874                           	opt stack 21
 11875                           
 11876                           ;Pattern_DotStarLED.c: 52: Brightness = brightnessPointer;
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;incstack = 0
 11880  0037EC  C060  F0F0         	movff	DotStar_Init@brightnessPointer,_Brightness
 11881  0037F0  C061  F0F1         	movff	DotStar_Init@brightnessPointer+1,_Brightness+1
 11882                           
 11883                           ;Pattern_DotStarLED.c: 54: PixelFrames[0] = 0x0;
 11884  0037F4  0E00               	movlw	0
 11885  0037F6  CFE8 F1C4          	movff	wreg,_PixelFrames
 11886  0037FA  0E00               	movlw	0
 11887  0037FC  CFE8 F1C5          	movff	wreg,_PixelFrames+1
 11888  003800  0E00               	movlw	0
 11889  003802  CFE8 F1C6          	movff	wreg,_PixelFrames+2
 11890  003806  0E00               	movlw	0
 11891  003808  CFE8 F1C7          	movff	wreg,_PixelFrames+3
 11892                           
 11893                           ;Pattern_DotStarLED.c: 55: PixelFrames[76+1] = 0xffffffff;
 11894  00380C  0EFF               	movlw	255
 11895  00380E  CFE8 F2F8          	movff	wreg,_PixelFrames+308
 11896  003812  0EFF               	movlw	255
 11897  003814  CFE8 F2F9          	movff	wreg,_PixelFrames+309
 11898  003818  0EFF               	movlw	255
 11899  00381A  CFE8 F2FA          	movff	wreg,_PixelFrames+310
 11900  00381E  0EFF               	movlw	255
 11901  003820  CFE8 F2FB          	movff	wreg,_PixelFrames+311
 11902                           
 11903                           ;Pattern_DotStarLED.c: 57: PixelFrames[76+1+1] = 0xffffffff;
 11904  003824  0EFF               	movlw	255
 11905  003826  CFE8 F2FC          	movff	wreg,_PixelFrames+312
 11906  00382A  0EFF               	movlw	255
 11907  00382C  CFE8 F2FD          	movff	wreg,_PixelFrames+313
 11908  003830  0EFF               	movlw	255
 11909  003832  CFE8 F2FE          	movff	wreg,_PixelFrames+314
 11910  003836  0EFF               	movlw	255
 11911  003838  CFE8 F2FF          	movff	wreg,_PixelFrames+315
 11912  00383C  0012               	return		;funcret
 11913  00383E                     __end_of_DotStar_Init:
 11914                           	opt stack 0
 11915                           tosu	equ	0xFFF
 11916                           tosh	equ	0xFFE
 11917                           tosl	equ	0xFFD
 11918                           pclath	equ	0xFFA
 11919                           tblptru	equ	0xFF8
 11920                           tblptrh	equ	0xFF7
 11921                           tblptrl	equ	0xFF6
 11922                           tablat	equ	0xFF5
 11923                           prodh	equ	0xFF4
 11924                           prodl	equ	0xFF3
 11925                           intcon	equ	0xFF2
 11926                           postinc0	equ	0xFEE
 11927                           wreg	equ	0xFE8
 11928                           indf1	equ	0xFE7
 11929                           postinc1	equ	0xFE6
 11930                           postdec1	equ	0xFE5
 11931                           fsr1h	equ	0xFE2
 11932                           fsr1l	equ	0xFE1
 11933                           indf2	equ	0xFDF
 11934                           postinc2	equ	0xFDE
 11935                           postdec2	equ	0xFDD
 11936                           plusw2	equ	0xFDB
 11937                           fsr2h	equ	0xFDA
 11938                           fsr2l	equ	0xFD9
 11939                           status	equ	0xFD8
 11940                           
 11941 ;; *************** function _CAN_Init *****************
 11942 ;; Defined at:
 11943 ;;		line 59 in file "CAN_RX_HW.c"
 11944 ;; Parameters:    Size  Location     Type
 11945 ;;		None
 11946 ;; Auto vars:     Size  Location     Type
 11947 ;;		None
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  1    wreg      void 
 11950 ;; Registers used:
 11951 ;;		wreg, status,2, cstack
 11952 ;; Tracked objects:
 11953 ;;		On entry : 0/0
 11954 ;;		On exit  : 0/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11957 ;;      Params:         0       0       0       0
 11958 ;;      Locals:         0       0       0       0
 11959 ;;      Temps:          0       0       0       0
 11960 ;;      Totals:         0       0       0       0
 11961 ;;Total ram usage:        0 bytes
 11962 ;; Hardware stack levels used:    1
 11963 ;; Hardware stack levels required when called:    8
 11964 ;; This function calls:
 11965 ;;		_InitCanHardware
 11966 ;;		_InitPins
 11967 ;; This function is called by:
 11968 ;;		_InitPatternControlService
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text47
 11973  003CAA                     __ptext47:
 11974                           	opt stack 0
 11975  003CAA                     _CAN_Init:
 11976                           	opt stack 20
 11977                           
 11978                           ;CAN_RX_HW.c: 60: InitPins();
 11979                           
 11980                           ;incstack = 0
 11981  003CAA  ECFE  F01D         	call	_InitPins	;wreg free
 11982                           
 11983                           ;CAN_RX_HW.c: 61: InitCanHardware();
 11984  003CAE  EC78  F01A         	call	_InitCanHardware	;wreg free
 11985  003CB2  0012               	return		;funcret
 11986  003CB4                     __end_of_CAN_Init:
 11987                           	opt stack 0
 11988                           tosu	equ	0xFFF
 11989                           tosh	equ	0xFFE
 11990                           tosl	equ	0xFFD
 11991                           pclath	equ	0xFFA
 11992                           tblptru	equ	0xFF8
 11993                           tblptrh	equ	0xFF7
 11994                           tblptrl	equ	0xFF6
 11995                           tablat	equ	0xFF5
 11996                           prodh	equ	0xFF4
 11997                           prodl	equ	0xFF3
 11998                           intcon	equ	0xFF2
 11999                           postinc0	equ	0xFEE
 12000                           wreg	equ	0xFE8
 12001                           indf1	equ	0xFE7
 12002                           postinc1	equ	0xFE6
 12003                           postdec1	equ	0xFE5
 12004                           fsr1h	equ	0xFE2
 12005                           fsr1l	equ	0xFE1
 12006                           indf2	equ	0xFDF
 12007                           postinc2	equ	0xFDE
 12008                           postdec2	equ	0xFDD
 12009                           plusw2	equ	0xFDB
 12010                           fsr2h	equ	0xFDA
 12011                           fsr2l	equ	0xFD9
 12012                           status	equ	0xFD8
 12013                           
 12014 ;; *************** function _InitPins *****************
 12015 ;; Defined at:
 12016 ;;		line 162 in file "CAN_RX_HW.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;		None
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;		None
 12021 ;; Return value:  Size  Location     Type
 12022 ;;                  1    wreg      void 
 12023 ;; Registers used:
 12024 ;;		wreg, status,2
 12025 ;; Tracked objects:
 12026 ;;		On entry : 0/0
 12027 ;;		On exit  : 0/0
 12028 ;;		Unchanged: 0/0
 12029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12030 ;;      Params:         0       0       0       0
 12031 ;;      Locals:         0       0       0       0
 12032 ;;      Temps:          0       0       0       0
 12033 ;;      Totals:         0       0       0       0
 12034 ;;Total ram usage:        0 bytes
 12035 ;; Hardware stack levels used:    1
 12036 ;; Hardware stack levels required when called:    7
 12037 ;; This function calls:
 12038 ;;		Nothing
 12039 ;; This function is called by:
 12040 ;;		_CAN_Init
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           	psect	text48
 12045  003BFC                     __ptext48:
 12046                           	opt stack 0
 12047  003BFC                     _InitPins:
 12048                           	opt stack 20
 12049                           
 12050                           ;CAN_RX_HW.c: 165: PORTB = 0x00;
 12051                           
 12052                           ;incstack = 0
 12053  003BFC  0E00               	movlw	0
 12054  003BFE  6E81               	movwf	3969,c	;volatile
 12055                           
 12056                           ;CAN_RX_HW.c: 166: LATB = 0x00;
 12057  003C00  0E00               	movlw	0
 12058  003C02  6E8A               	movwf	3978,c	;volatile
 12059                           
 12060                           ;CAN_RX_HW.c: 167: TRISBbits.TRISB2 = 0;
 12061  003C04  9493               	bcf	3987,2,c	;volatile
 12062                           
 12063                           ;CAN_RX_HW.c: 168: TRISBbits.TRISB3 = 1;
 12064  003C06  8693               	bsf	3987,3,c	;volatile
 12065                           
 12066                           ;CAN_RX_HW.c: 171: PORTA = 0x00;
 12067  003C08  0E00               	movlw	0
 12068  003C0A  6E80               	movwf	3968,c	;volatile
 12069                           
 12070                           ;CAN_RX_HW.c: 172: LATA = 0x00;
 12071  003C0C  0E00               	movlw	0
 12072  003C0E  6E89               	movwf	3977,c	;volatile
 12073                           
 12074                           ;CAN_RX_HW.c: 173: TRISA = 0x00;
 12075  003C10  0E00               	movlw	0
 12076  003C12  6E92               	movwf	3986,c	;volatile
 12077  003C14  0012               	return		;funcret
 12078  003C16                     __end_of_InitPins:
 12079                           	opt stack 0
 12080                           tosu	equ	0xFFF
 12081                           tosh	equ	0xFFE
 12082                           tosl	equ	0xFFD
 12083                           pclath	equ	0xFFA
 12084                           tblptru	equ	0xFF8
 12085                           tblptrh	equ	0xFF7
 12086                           tblptrl	equ	0xFF6
 12087                           tablat	equ	0xFF5
 12088                           prodh	equ	0xFF4
 12089                           prodl	equ	0xFF3
 12090                           intcon	equ	0xFF2
 12091                           postinc0	equ	0xFEE
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           postinc1	equ	0xFE6
 12095                           postdec1	equ	0xFE5
 12096                           fsr1h	equ	0xFE2
 12097                           fsr1l	equ	0xFE1
 12098                           indf2	equ	0xFDF
 12099                           postinc2	equ	0xFDE
 12100                           postdec2	equ	0xFDD
 12101                           plusw2	equ	0xFDB
 12102                           fsr2h	equ	0xFDA
 12103                           fsr2l	equ	0xFD9
 12104                           status	equ	0xFD8
 12105                           
 12106 ;; *************** function _InitCanHardware *****************
 12107 ;; Defined at:
 12108 ;;		line 102 in file "CAN_RX_HW.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;		None
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;		None
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  1    wreg      void 
 12115 ;; Registers used:
 12116 ;;		wreg, status,2
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12122 ;;      Params:         0       0       0       0
 12123 ;;      Locals:         0       0       0       0
 12124 ;;      Temps:          0       0       0       0
 12125 ;;      Totals:         0       0       0       0
 12126 ;;Total ram usage:        0 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    7
 12129 ;; This function calls:
 12130 ;;		Nothing
 12131 ;; This function is called by:
 12132 ;;		_CAN_Init
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           	psect	text49
 12137  0034F0                     __ptext49:
 12138                           	opt stack 0
 12139  0034F0                     _InitCanHardware:
 12140                           	opt stack 20
 12141                           
 12142                           ;CAN_RX_HW.c: 106: CANCON = 0x80;
 12143                           
 12144                           ;incstack = 0
 12145  0034F0  0E80               	movlw	128
 12146  0034F2  6E6F               	movwf	3951,c	;volatile
 12147  0034F4                     l613:
 12148  0034F4  AE6E               	btfss	3950,7,c	;volatile
 12149  0034F6  D7FE               	goto	l613
 12150                           
 12151                           ;CAN_RX_HW.c: 109: CIOCON = 0x20;
 12152  0034F8  0E20               	movlw	32
 12153  0034FA  6E73               	movwf	3955,c	;volatile
 12154                           
 12155                           ;CAN_RX_HW.c: 112: BRGCON2bits.SEG2PHTS = 1;
 12156  0034FC  8E71               	bsf	3953,7,c	;volatile
 12157                           
 12158                           ;CAN_RX_HW.c: 114: BRGCON1bits.BRP0 = 1;
 12159  0034FE  8070               	bsf	3952,0,c	;volatile
 12160                           
 12161                           ;CAN_RX_HW.c: 115: BRGCON1bits.BRP1 = 0;
 12162  003500  9270               	bcf	3952,1,c	;volatile
 12163                           
 12164                           ;CAN_RX_HW.c: 116: BRGCON2bits.PRSEG0 = 0;
 12165  003502  9071               	bcf	3953,0,c	;volatile
 12166                           
 12167                           ;CAN_RX_HW.c: 117: BRGCON2bits.PRSEG1 = 1;
 12168  003504  8271               	bsf	3953,1,c	;volatile
 12169                           
 12170                           ;CAN_RX_HW.c: 118: BRGCON2bits.PRSEG2 = 1;
 12171  003506  8471               	bsf	3953,2,c	;volatile
 12172                           
 12173                           ;CAN_RX_HW.c: 119: BRGCON2bits.SEG1PH0 = 1;
 12174  003508  8671               	bsf	3953,3,c	;volatile
 12175                           
 12176                           ;CAN_RX_HW.c: 120: BRGCON2bits.SEG1PH1 = 0;
 12177  00350A  9871               	bcf	3953,4,c	;volatile
 12178                           
 12179                           ;CAN_RX_HW.c: 121: BRGCON2bits.SEG1PH2 = 1;
 12180  00350C  8A71               	bsf	3953,5,c	;volatile
 12181                           
 12182                           ;CAN_RX_HW.c: 122: BRGCON3bits.SEG2PH0 = 1;
 12183  00350E  8072               	bsf	3954,0,c	;volatile
 12184                           
 12185                           ;CAN_RX_HW.c: 123: BRGCON1bits.SJW0 = 1;
 12186  003510  8C70               	bsf	3952,6,c	;volatile
 12187                           
 12188                           ;CAN_RX_HW.c: 127: RXB0CONbits.RXB0DBEN = 0;
 12189  003512  9460               	bcf	3936,2,c	;volatile
 12190                           
 12191                           ;CAN_RX_HW.c: 128: RXB0CONbits.RXM0 = 0;
 12192  003514  9A60               	bcf	3936,5,c	;volatile
 12193                           
 12194                           ;CAN_RX_HW.c: 129: RXB0CONbits.RXM1 = 0;
 12195  003516  9C60               	bcf	3936,6,c	;volatile
 12196                           
 12197                           ;CAN_RX_HW.c: 130: RXF0SIDH = 0x00;
 12198  003518  0E00               	movlw	0
 12199  00351A  010F               	movlb	15	; () banked
 12200  00351C  6F00               	movwf	0,b	;volatile
 12201                           
 12202                           ;CAN_RX_HW.c: 131: RXF0SIDL = 0x08;
 12203  00351E  0E08               	movlw	8
 12204  003520  010F               	movlb	15	; () banked
 12205  003522  6F01               	movwf	1,b	;volatile
 12206                           
 12207                           ;CAN_RX_HW.c: 132: RXF0EIDH = 0x00;
 12208  003524  0E00               	movlw	0
 12209  003526  010F               	movlb	15	; () banked
 12210  003528  6F02               	movwf	2,b	;volatile
 12211                           
 12212                           ;CAN_RX_HW.c: 133: RXF0EIDL = 0x01;
 12213  00352A  0E01               	movlw	1
 12214  00352C  010F               	movlb	15	; () banked
 12215  00352E  6F03               	movwf	3,b	;volatile
 12216                           
 12217                           ;CAN_RX_HW.c: 135: RXM0SIDH = 0x00;
 12218  003530  0E00               	movlw	0
 12219  003532  010F               	movlb	15	; () banked
 12220  003534  6F18               	movwf	24,b	;volatile
 12221                           
 12222                           ;CAN_RX_HW.c: 136: RXM0SIDL = 0x00;
 12223  003536  0E00               	movlw	0
 12224  003538  010F               	movlb	15	; () banked
 12225  00353A  6F19               	movwf	25,b	;volatile
 12226                           
 12227                           ;CAN_RX_HW.c: 137: RXM0EIDH = 0x00;
 12228  00353C  0E00               	movlw	0
 12229  00353E  010F               	movlb	15	; () banked
 12230  003540  6F1A               	movwf	26,b	;volatile
 12231                           
 12232                           ;CAN_RX_HW.c: 138: RXM0EIDL = 0x01;
 12233  003542  0E01               	movlw	1
 12234  003544  010F               	movlb	15	; () banked
 12235  003546  6F1B               	movwf	27,b	;volatile
 12236                           
 12237                           ;CAN_RX_HW.c: 142: ECANCON = 0x00;
 12238  003548  0E00               	movlw	0
 12239  00354A  6E77               	movwf	3959,c	;volatile
 12240                           
 12241                           ;CAN_RX_HW.c: 143: CANCON = 0b00010000;
 12242  00354C  0E10               	movlw	16
 12243  00354E  6E6F               	movwf	3951,c	;volatile
 12244  003550                     l616:
 12245  003550  BE6E               	btfsc	3950,7,c	;volatile
 12246  003552  D7FE               	goto	l616
 12247                           
 12248                           ;CAN_RX_HW.c: 147: RXB0IE = 1;
 12249  003554  80A3               	bsf	4003,0,c	;volatile
 12250                           
 12251                           ;CAN_RX_HW.c: 148: ERRIE = 1;
 12252  003556  8AA3               	bsf	4003,5,c	;volatile
 12253                           
 12254                           ;CAN_RX_HW.c: 149: IRXIE = 1;
 12255  003558  8EA3               	bsf	4003,7,c	;volatile
 12256                           
 12257                           ;CAN_RX_HW.c: 153: RXB0IF = 0;
 12258  00355A  90A4               	bcf	4004,0,c	;volatile
 12259                           
 12260                           ;CAN_RX_HW.c: 154: ERRIF = 0;
 12261  00355C  9AA4               	bcf	4004,5,c	;volatile
 12262                           
 12263                           ;CAN_RX_HW.c: 155: IRXIF = 0;
 12264  00355E  9EA4               	bcf	4004,7,c	;volatile
 12265                           
 12266                           ;CAN_RX_HW.c: 156: TXB0IE = 1;
 12267  003560  84A3               	bsf	4003,2,c	;volatile
 12268                           
 12269                           ;CAN_RX_HW.c: 157: TXB0IF = 0;
 12270  003562  94A4               	bcf	4004,2,c	;volatile
 12271                           
 12272                           ;CAN_RX_HW.c: 158: TXB0CONbits.TXREQ = 0;
 12273  003564  010F               	movlb	15	; () banked
 12274  003566  9740               	bcf	64,3,b	;volatile
 12275                           
 12276                           ;CAN_RX_HW.c: 159: RXB0CONbits.RXFUL = 0;
 12277  003568  9E60               	bcf	3936,7,c	;volatile
 12278                           
 12279                           ; BSR set to: 15
 12280  00356A  0012               	return		;funcret
 12281  00356C                     __end_of_InitCanHardware:
 12282                           	opt stack 0
 12283                           tosu	equ	0xFFF
 12284                           tosh	equ	0xFFE
 12285                           tosl	equ	0xFFD
 12286                           pclath	equ	0xFFA
 12287                           tblptru	equ	0xFF8
 12288                           tblptrh	equ	0xFF7
 12289                           tblptrl	equ	0xFF6
 12290                           tablat	equ	0xFF5
 12291                           prodh	equ	0xFF4
 12292                           prodl	equ	0xFF3
 12293                           intcon	equ	0xFF2
 12294                           postinc0	equ	0xFEE
 12295                           wreg	equ	0xFE8
 12296                           indf1	equ	0xFE7
 12297                           postinc1	equ	0xFE6
 12298                           postdec1	equ	0xFE5
 12299                           fsr1h	equ	0xFE2
 12300                           fsr1l	equ	0xFE1
 12301                           indf2	equ	0xFDF
 12302                           postinc2	equ	0xFDE
 12303                           postdec2	equ	0xFDD
 12304                           plusw2	equ	0xFDB
 12305                           fsr2h	equ	0xFDA
 12306                           fsr2l	equ	0xFD9
 12307                           status	equ	0xFD8
 12308                           
 12309 ;; *************** function _ES_Timer_Init *****************
 12310 ;; Defined at:
 12311 ;;		line 130 in file "ES_Timers.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  Rate            2    2[BANK0 ] enum E15423
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;		None
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  1    wreg      void 
 12318 ;; Registers used:
 12319 ;;		wreg, status,2, cstack
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12325 ;;      Params:         0       2       0       0
 12326 ;;      Locals:         0       0       0       0
 12327 ;;      Temps:          0       0       0       0
 12328 ;;      Totals:         0       2       0       0
 12329 ;;Total ram usage:        2 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:    8
 12332 ;; This function calls:
 12333 ;;		__HW_Timer_Init
 12334 ;; This function is called by:
 12335 ;;		_ES_Initialize
 12336 ;; This function uses a non-reentrant model
 12337 ;;
 12338                           
 12339                           	psect	text50
 12340  003C84                     __ptext50:
 12341                           	opt stack 0
 12342  003C84                     _ES_Timer_Init:
 12343                           	opt stack 21
 12344                           
 12345                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
 12346                           
 12347                           ; BSR set to: 15
 12348                           ;incstack = 0
 12349  003C84  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
 12350  003C88  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
 12351  003C8C  ECAB  F01D         	call	__HW_Timer_Init	;wreg free
 12352  003C90  0012               	return		;funcret
 12353  003C92                     __end_of_ES_Timer_Init:
 12354                           	opt stack 0
 12355                           tosu	equ	0xFFF
 12356                           tosh	equ	0xFFE
 12357                           tosl	equ	0xFFD
 12358                           pclath	equ	0xFFA
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           postinc0	equ	0xFEE
 12367                           wreg	equ	0xFE8
 12368                           indf1	equ	0xFE7
 12369                           postinc1	equ	0xFE6
 12370                           postdec1	equ	0xFE5
 12371                           fsr1h	equ	0xFE2
 12372                           fsr1l	equ	0xFE1
 12373                           indf2	equ	0xFDF
 12374                           postinc2	equ	0xFDE
 12375                           postdec2	equ	0xFDD
 12376                           plusw2	equ	0xFDB
 12377                           fsr2h	equ	0xFDA
 12378                           fsr2l	equ	0xFD9
 12379                           status	equ	0xFD8
 12380                           
 12381 ;; *************** function __HW_Timer_Init *****************
 12382 ;; Defined at:
 12383 ;;		line 72 in file "ES_Port.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;  Rate            2    0[BANK0 ] enum E15412
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;		None
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      void 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12397 ;;      Params:         0       2       0       0
 12398 ;;      Locals:         0       0       0       0
 12399 ;;      Temps:          0       0       0       0
 12400 ;;      Totals:         0       2       0       0
 12401 ;;Total ram usage:        2 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    7
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_ES_Timer_Init
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           	psect	text51
 12412  003B56                     __ptext51:
 12413                           	opt stack 0
 12414  003B56                     __HW_Timer_Init:
 12415                           	opt stack 21
 12416                           
 12417                           ;ES_Port.c: 80: PIE1 = 0b00000100;
 12418                           
 12419                           ;incstack = 0
 12420  003B56  0E04               	movlw	4
 12421  003B58  6E9D               	movwf	3997,c	;volatile
 12422                           
 12423                           ;ES_Port.c: 85: INTCON = 0b01000000;
 12424  003B5A  0E40               	movlw	64
 12425  003B5C  6EF2               	movwf	intcon,c	;volatile
 12426                           
 12427                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
 12428  003B5E  0E0A               	movlw	10
 12429  003B60  6EBD               	movwf	4029,c	;volatile
 12430                           
 12431                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
 12432  003B62  0E01               	movlw	1
 12433  003B64  6EBE               	movwf	4030,c	;volatile
 12434                           
 12435                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
 12436  003B66  0E00               	movlw	0
 12437  003B68  6EBF               	movwf	4031,c	;volatile
 12438                           
 12439                           ;ES_Port.c: 107: T1CON = 0b00100001;
 12440  003B6A  0E21               	movlw	33
 12441  003B6C  6ECD               	movwf	4045,c	;volatile
 12442                           
 12443                           ;ES_Port.c: 108: PEIE = 1;
 12444  003B6E  8CF2               	bsf	intcon,6,c	;volatile
 12445                           
 12446                           ;ES_Port.c: 109: {GIE = 1;};
 12447  003B70  8EF2               	bsf	intcon,7,c	;volatile
 12448  003B72  0012               	return		;funcret
 12449  003B74                     __end_of__HW_Timer_Init:
 12450                           	opt stack 0
 12451                           tosu	equ	0xFFF
 12452                           tosh	equ	0xFFE
 12453                           tosl	equ	0xFFD
 12454                           pclath	equ	0xFFA
 12455                           tblptru	equ	0xFF8
 12456                           tblptrh	equ	0xFF7
 12457                           tblptrl	equ	0xFF6
 12458                           tablat	equ	0xFF5
 12459                           prodh	equ	0xFF4
 12460                           prodl	equ	0xFF3
 12461                           intcon	equ	0xFF2
 12462                           postinc0	equ	0xFEE
 12463                           wreg	equ	0xFE8
 12464                           indf1	equ	0xFE7
 12465                           postinc1	equ	0xFE6
 12466                           postdec1	equ	0xFE5
 12467                           fsr1h	equ	0xFE2
 12468                           fsr1l	equ	0xFE1
 12469                           indf2	equ	0xFDF
 12470                           postinc2	equ	0xFDE
 12471                           postdec2	equ	0xFDD
 12472                           plusw2	equ	0xFDB
 12473                           fsr2h	equ	0xFDA
 12474                           fsr2l	equ	0xFD9
 12475                           status	equ	0xFD8
 12476                           
 12477 ;; *************** function _ES_InitQueue *****************
 12478 ;; Defined at:
 12479 ;;		line 58 in file "ES_Queue.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
 12482 ;;		 -> Queue1(12), Queue0(12), 
 12483 ;;  BlockSize       1    2[BANK0 ] unsigned char 
 12484 ;; Auto vars:     Size  Location     Type
 12485 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
 12486 ;;		 -> Queue1(12), Queue0(12), 
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  1    wreg      unsigned char 
 12489 ;; Registers used:
 12490 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12496 ;;      Params:         0       3       0       0
 12497 ;;      Locals:         0       2       0       0
 12498 ;;      Temps:          0       0       0       0
 12499 ;;      Totals:         0       5       0       0
 12500 ;;Total ram usage:        5 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    7
 12503 ;; This function calls:
 12504 ;;		Nothing
 12505 ;; This function is called by:
 12506 ;;		_ES_Initialize
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           	psect	text52
 12511  00395C                     __ptext52:
 12512                           	opt stack 0
 12513  00395C                     _ES_InitQueue:
 12514                           	opt stack 22
 12515                           
 12516                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
 12517                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
 12518                           
 12519                           ;incstack = 0
 12520  00395C  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
 12521  003960  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
 12522                           
 12523                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
 12524  003964  0100               	movlb	0	; () banked
 12525  003966  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
 12526  003968  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
 12527  00396C  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
 12528  003970  6EDF               	movwf	indf2,c
 12529                           
 12530                           ; BSR set to: 0
 12531                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
 12532  003972  0100               	movlb	0	; () banked
 12533  003974  EE20 F001          	lfsr	2,1
 12534  003978  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12535  00397A  26D9               	addwf	fsr2l,f,c
 12536  00397C  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12537  00397E  22DA               	addwfc	fsr2h,f,c
 12538  003980  0E00               	movlw	0
 12539  003982  6EDF               	movwf	indf2,c
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
 12543  003984  0100               	movlb	0	; () banked
 12544  003986  EE20 F002          	lfsr	2,2
 12545  00398A  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12546  00398C  26D9               	addwf	fsr2l,f,c
 12547  00398E  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12548  003990  22DA               	addwfc	fsr2h,f,c
 12549  003992  0E00               	movlw	0
 12550  003994  6EDF               	movwf	indf2,c
 12551  003996  0012               	return	
 12552  003998                     __end_of_ES_InitQueue:
 12553                           	opt stack 0
 12554                           tosu	equ	0xFFF
 12555                           tosh	equ	0xFFE
 12556                           tosl	equ	0xFFD
 12557                           pclath	equ	0xFFA
 12558                           tblptru	equ	0xFF8
 12559                           tblptrh	equ	0xFF7
 12560                           tblptrl	equ	0xFF6
 12561                           tablat	equ	0xFF5
 12562                           prodh	equ	0xFF4
 12563                           prodl	equ	0xFF3
 12564                           intcon	equ	0xFF2
 12565                           postinc0	equ	0xFEE
 12566                           wreg	equ	0xFE8
 12567                           indf1	equ	0xFE7
 12568                           postinc1	equ	0xFE6
 12569                           postdec1	equ	0xFE5
 12570                           fsr1h	equ	0xFE2
 12571                           fsr1l	equ	0xFE1
 12572                           indf2	equ	0xFDF
 12573                           postinc2	equ	0xFDE
 12574                           postdec2	equ	0xFDD
 12575                           plusw2	equ	0xFDB
 12576                           fsr2h	equ	0xFDA
 12577                           fsr2l	equ	0xFD9
 12578                           status	equ	0xFD8
 12579                           
 12580 ;; *************** function _ISR *****************
 12581 ;; Defined at:
 12582 ;;		line 112 in file "ES_Port.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;		None
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;		None
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  1    wreg      void 
 12589 ;; Registers used:
 12590 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12596 ;;      Params:         0       0       0       0
 12597 ;;      Locals:         0       0       0       0
 12598 ;;      Temps:         16       0       0       0
 12599 ;;      Totals:        16       0       0       0
 12600 ;;Total ram usage:       16 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; Hardware stack levels required when called:    6
 12603 ;; This function calls:
 12604 ;;		_CAN_BusErrorResponse
 12605 ;;		_CAN_ErrorResponse
 12606 ;;		_CAN_RCVResponse
 12607 ;;		_CAN_XmitResponse
 12608 ;;		_SPI32_EOTResponse
 12609 ;; This function is called by:
 12610 ;;		Interrupt level 2
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           	psect	intcode
 12615  000008                     __pintcode:
 12616                           	opt stack 0
 12617  000008                     _ISR:
 12618                           	opt stack 15
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;incstack = 0
 12622  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12623  00000A  CFFA F028          	movff	pclath,??_ISR+2
 12624  00000E  CFFB F029          	movff	pclatu,??_ISR+3
 12625  000012  EDF1  F016         	call	int_func,f	;refresh shadow registers
 12626                           tosu	equ	0xFFF
 12627                           tosh	equ	0xFFE
 12628                           tosl	equ	0xFFD
 12629                           pclatu	equ	0xFFB
 12630                           pclath	equ	0xFFA
 12631                           tblptru	equ	0xFF8
 12632                           tblptrh	equ	0xFF7
 12633                           tblptrl	equ	0xFF6
 12634                           tablat	equ	0xFF5
 12635                           prodh	equ	0xFF4
 12636                           prodl	equ	0xFF3
 12637                           intcon	equ	0xFF2
 12638                           postinc0	equ	0xFEE
 12639                           wreg	equ	0xFE8
 12640                           indf1	equ	0xFE7
 12641                           postinc1	equ	0xFE6
 12642                           postdec1	equ	0xFE5
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           plusw2	equ	0xFDB
 12649                           fsr2h	equ	0xFDA
 12650                           fsr2l	equ	0xFD9
 12651                           status	equ	0xFD8
 12652                           
 12653                           	psect	intcode_body
 12654  002DE2                     __pintcode_body:
 12655                           	opt stack 15
 12656  002DE2                     int_func:
 12657                           	opt stack 15
 12658  002DE2  0006               	pop		; remove dummy address from shadow register refresh
 12659  002DE4  CFE9 F02A          	movff	fsr0l,??_ISR+4
 12660  002DE8  CFEA F02B          	movff	fsr0h,??_ISR+5
 12661  002DEC  CFE1 F02C          	movff	fsr1l,??_ISR+6
 12662  002DF0  CFE2 F02D          	movff	fsr1h,??_ISR+7
 12663  002DF4  CFD9 F02E          	movff	fsr2l,??_ISR+8
 12664  002DF8  CFDA F02F          	movff	fsr2h,??_ISR+9
 12665  002DFC  CFF3 F030          	movff	prodl,??_ISR+10
 12666  002E00  CFF4 F031          	movff	prodh,??_ISR+11
 12667  002E04  CFF6 F032          	movff	tblptrl,??_ISR+12
 12668  002E08  CFF7 F033          	movff	tblptrh,??_ISR+13
 12669  002E0C  CFF8 F034          	movff	tblptru,??_ISR+14
 12670  002E10  CFF5 F035          	movff	tablat,??_ISR+15
 12671                           
 12672                           ;ES_Port.c: 115: static unsigned int LastTime;
 12673                           ;ES_Port.c: 116: static unsigned int NextTime;
 12674                           ;ES_Port.c: 118: if (CCP1IF == 1)
 12675  002E14  A49E               	btfss	3998,2,c	;volatile
 12676  002E16  D015               	goto	i2l4325
 12677                           
 12678                           ;ES_Port.c: 119: {
 12679                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 12680  002E18  50BF               	movf	4031,w,c	;volatile
 12681  002E1A  6E26               	movwf	??_ISR& (0+255),c
 12682  002E1C  50BE               	movf	4030,w,c	;volatile
 12683  002E1E  6E3A               	movwf	ISR@LastTime,c
 12684  002E20  C026  F03B         	movff	??_ISR,ISR@LastTime+1
 12685                           
 12686                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 12687  002E24  0E20               	movlw	32
 12688  002E26  243A               	addwf	ISR@LastTime,w,c
 12689  002E28  6E3C               	movwf	ISR@NextTime,c
 12690  002E2A  0E4E               	movlw	78
 12691  002E2C  203B               	addwfc	ISR@LastTime+1,w,c
 12692  002E2E  6E3D               	movwf	ISR@NextTime+1,c
 12693                           
 12694                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 12695  002E30  503D               	movf	ISR@NextTime+1,w,c
 12696  002E32  6EBF               	movwf	4031,c	;volatile
 12697                           
 12698                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 12699  002E34  C03C  FFBE         	movff	ISR@NextTime,4030	;volatile
 12700                           
 12701                           ;ES_Port.c: 124: CCP1IF = 0;
 12702  002E38  949E               	bcf	3998,2,c	;volatile
 12703                           
 12704                           ;ES_Port.c: 125: TickCount++;
 12705  002E3A  0100               	movlb	0	; () banked
 12706  002E3C  2BE8               	incf	_TickCount& (0+255),f,b	;volatile
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;ES_Port.c: 126: SysTickCounter++;
 12710  002E3E  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
 12711  002E40  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
 12712  002E42                     i2l4325:
 12713                           
 12714                           ;ES_Port.c: 127: }
 12715                           ;ES_Port.c: 128: if (SSPIF == 1)
 12716  002E42  A69E               	btfss	3998,3,c	;volatile
 12717  002E44  D003               	goto	i2l4331
 12718                           
 12719                           ;ES_Port.c: 129: {
 12720                           ;ES_Port.c: 130: SSPIF = 0;
 12721  002E46  969E               	bcf	3998,3,c	;volatile
 12722                           
 12723                           ;ES_Port.c: 131: SPI32_EOTResponse();
 12724  002E48  ECE9  F01C         	call	_SPI32_EOTResponse	;wreg free
 12725  002E4C                     i2l4331:
 12726                           
 12727                           ;ES_Port.c: 132: }
 12728                           ;ES_Port.c: 133: if (TXB0IF == 1)
 12729  002E4C  A4A4               	btfss	4004,2,c	;volatile
 12730  002E4E  D003               	goto	i2l4337
 12731                           
 12732                           ;ES_Port.c: 134: {
 12733                           ;ES_Port.c: 135: TXB0IF = 0;
 12734  002E50  94A4               	bcf	4004,2,c	;volatile
 12735                           
 12736                           ;ES_Port.c: 136: CAN_XmitResponse();
 12737  002E52  EC65  F01E         	call	_CAN_XmitResponse	;wreg free
 12738  002E56                     i2l4337:
 12739                           
 12740                           ;ES_Port.c: 137: }
 12741                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 12742  002E56  A0A4               	btfss	4004,0,c	;volatile
 12743  002E58  D003               	goto	i2l4343
 12744                           
 12745                           ;ES_Port.c: 139: RXB0IF = 0;
 12746  002E5A  90A4               	bcf	4004,0,c	;volatile
 12747                           
 12748                           ;ES_Port.c: 140: CAN_RCVResponse();
 12749  002E5C  EC49  F01E         	call	_CAN_RCVResponse	;wreg free
 12750  002E60                     i2l4343:
 12751                           
 12752                           ;ES_Port.c: 141: }
 12753                           ;ES_Port.c: 142: if (ERRIF == 1) {
 12754  002E60  AAA4               	btfss	4004,5,c	;volatile
 12755  002E62  D003               	goto	i2l4349
 12756                           
 12757                           ;ES_Port.c: 143: ERRIF = 0;
 12758  002E64  9AA4               	bcf	4004,5,c	;volatile
 12759                           
 12760                           ;ES_Port.c: 144: CAN_ErrorResponse();
 12761  002E66  EC6A  F01E         	call	_CAN_ErrorResponse	;wreg free
 12762  002E6A                     i2l4349:
 12763                           
 12764                           ;ES_Port.c: 145: }
 12765                           ;ES_Port.c: 146: if (IRXIF == 1) {
 12766  002E6A  AEA4               	btfss	4004,7,c	;volatile
 12767  002E6C  D003               	goto	i2l167
 12768                           
 12769                           ;ES_Port.c: 147: IRXIF = 0;
 12770  002E6E  9EA4               	bcf	4004,7,c	;volatile
 12771                           
 12772                           ;ES_Port.c: 148: CAN_BusErrorResponse();
 12773  002E70  EC6B  F01E         	call	_CAN_BusErrorResponse	;wreg free
 12774  002E74                     i2l167:
 12775  002E74  C035  FFF5         	movff	??_ISR+15,tablat
 12776  002E78  C034  FFF8         	movff	??_ISR+14,tblptru
 12777  002E7C  C033  FFF7         	movff	??_ISR+13,tblptrh
 12778  002E80  C032  FFF6         	movff	??_ISR+12,tblptrl
 12779  002E84  C031  FFF4         	movff	??_ISR+11,prodh
 12780  002E88  C030  FFF3         	movff	??_ISR+10,prodl
 12781  002E8C  C02F  FFDA         	movff	??_ISR+9,fsr2h
 12782  002E90  C02E  FFD9         	movff	??_ISR+8,fsr2l
 12783  002E94  C02D  FFE2         	movff	??_ISR+7,fsr1h
 12784  002E98  C02C  FFE1         	movff	??_ISR+6,fsr1l
 12785  002E9C  C02B  FFEA         	movff	??_ISR+5,fsr0h
 12786  002EA0  C02A  FFE9         	movff	??_ISR+4,fsr0l
 12787  002EA4  C029  FFFB         	movff	??_ISR+3,pclatu
 12788  002EA8  C028  FFFA         	movff	??_ISR+2,pclath
 12789  002EAC  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12790  002EAE  0011               	retfie		f
 12791  002EB0                     __end_of_ISR:
 12792                           	opt stack 0
 12793                           tosu	equ	0xFFF
 12794                           tosh	equ	0xFFE
 12795                           tosl	equ	0xFFD
 12796                           pclatu	equ	0xFFB
 12797                           pclath	equ	0xFFA
 12798                           tblptru	equ	0xFF8
 12799                           tblptrh	equ	0xFF7
 12800                           tblptrl	equ	0xFF6
 12801                           tablat	equ	0xFF5
 12802                           prodh	equ	0xFF4
 12803                           prodl	equ	0xFF3
 12804                           intcon	equ	0xFF2
 12805                           postinc0	equ	0xFEE
 12806                           fsr0h	equ	0xFEA
 12807                           fsr0l	equ	0xFE9
 12808                           wreg	equ	0xFE8
 12809                           indf1	equ	0xFE7
 12810                           postinc1	equ	0xFE6
 12811                           postdec1	equ	0xFE5
 12812                           fsr1h	equ	0xFE2
 12813                           fsr1l	equ	0xFE1
 12814                           indf2	equ	0xFDF
 12815                           postinc2	equ	0xFDE
 12816                           postdec2	equ	0xFDD
 12817                           plusw2	equ	0xFDB
 12818                           fsr2h	equ	0xFDA
 12819                           fsr2l	equ	0xFD9
 12820                           status	equ	0xFD8
 12821                           
 12822 ;; *************** function _SPI32_EOTResponse *****************
 12823 ;; Defined at:
 12824 ;;		line 166 in file "SPI32_HW.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;		None
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      void 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12838 ;;      Params:         0       0       0       0
 12839 ;;      Locals:         3       0       0       0
 12840 ;;      Temps:          0       0       0       0
 12841 ;;      Totals:         3       0       0       0
 12842 ;;Total ram usage:        3 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:    4
 12845 ;; This function calls:
 12846 ;;		i2_PostSPI32ControlService
 12847 ;;		i2_SPI32_SendFrame
 12848 ;; This function is called by:
 12849 ;;		_ISR
 12850 ;; This function uses a non-reentrant model
 12851 ;;
 12852                           
 12853                           	psect	text54
 12854  0039D2                     __ptext54:
 12855                           	opt stack 0
 12856  0039D2                     _SPI32_EOTResponse:
 12857                           	opt stack 16
 12858                           
 12859                           ;SPI32_HW.c: 168: if(FrameByte == 0){
 12860                           
 12861                           ;incstack = 0
 12862  0039D2  0100               	movlb	0	; () banked
 12863  0039D4  51F6               	movf	_FrameByte& (0+255),w,b
 12864  0039D6  A4D8               	btfss	status,2,c
 12865  0039D8  D00E               	goto	i2l4223
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;SPI32_HW.c: 170: FrameByte = 4;
 12869  0039DA  0E04               	movlw	4
 12870  0039DC  0100               	movlb	0	; () banked
 12871  0039DE  6FF6               	movwf	_FrameByte& (0+255),b
 12872                           
 12873                           ;SPI32_HW.c: 172: ES_Event EOTevent;
 12874                           ;SPI32_HW.c: 173: EOTevent.EventType = ES_TIMEOUT;
 12875  0039E0  0E03               	movlw	3
 12876  0039E2  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;SPI32_HW.c: 174: PostSPI32ControlService(EOTevent);
 12880  0039E4  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 12881  0039E8  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 12882  0039EC  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 12883  0039F0  EC23  F01E         	call	i2_PostSPI32ControlService	;wreg free
 12884                           
 12885                           ;SPI32_HW.c: 175: }
 12886  0039F4  0012               	return	
 12887  0039F6                     i2l4223:
 12888                           
 12889                           ;SPI32_HW.c: 176: else{
 12890                           ;SPI32_HW.c: 178: SPI32_SendFrame(TransmitFrame);
 12891  0039F6  C036  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 12892  0039FA  C037  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 12893  0039FE  C038  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 12894  003A02  C039  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 12895  003A06  EC46  F01C         	call	i2_SPI32_SendFrame	;wreg free
 12896  003A0A  0012               	return	
 12897  003A0C                     __end_of_SPI32_EOTResponse:
 12898                           	opt stack 0
 12899                           tosu	equ	0xFFF
 12900                           tosh	equ	0xFFE
 12901                           tosl	equ	0xFFD
 12902                           pclatu	equ	0xFFB
 12903                           pclath	equ	0xFFA
 12904                           tblptru	equ	0xFF8
 12905                           tblptrh	equ	0xFF7
 12906                           tblptrl	equ	0xFF6
 12907                           tablat	equ	0xFF5
 12908                           prodh	equ	0xFF4
 12909                           prodl	equ	0xFF3
 12910                           intcon	equ	0xFF2
 12911                           postinc0	equ	0xFEE
 12912                           fsr0h	equ	0xFEA
 12913                           fsr0l	equ	0xFE9
 12914                           wreg	equ	0xFE8
 12915                           indf1	equ	0xFE7
 12916                           postinc1	equ	0xFE6
 12917                           postdec1	equ	0xFE5
 12918                           fsr1h	equ	0xFE2
 12919                           fsr1l	equ	0xFE1
 12920                           indf2	equ	0xFDF
 12921                           postinc2	equ	0xFDE
 12922                           postdec2	equ	0xFDD
 12923                           plusw2	equ	0xFDB
 12924                           fsr2h	equ	0xFDA
 12925                           fsr2l	equ	0xFD9
 12926                           status	equ	0xFD8
 12927                           
 12928 ;; *************** function i2_SPI32_SendFrame *****************
 12929 ;; Defined at:
 12930 ;;		line 85 in file "SPI32_HW.c"
 12931 ;; Parameters:    Size  Location     Type
 12932 ;;  newFrame        4    0[COMRAM] unsigned long 
 12933 ;; Auto vars:     Size  Location     Type
 12934 ;;		None
 12935 ;; Return value:  Size  Location     Type
 12936 ;;                  1    wreg      void 
 12937 ;; Registers used:
 12938 ;;		wreg, status,2, status,0, prodl, prodh
 12939 ;; Tracked objects:
 12940 ;;		On entry : 0/0
 12941 ;;		On exit  : 0/0
 12942 ;;		Unchanged: 0/0
 12943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12944 ;;      Params:         4       0       0       0
 12945 ;;      Locals:         0       0       0       0
 12946 ;;      Temps:          4       0       0       0
 12947 ;;      Totals:         8       0       0       0
 12948 ;;Total ram usage:        8 bytes
 12949 ;; Hardware stack levels used:    1
 12950 ;; This function calls:
 12951 ;;		Nothing
 12952 ;; This function is called by:
 12953 ;;		_SPI32_EOTResponse
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text55
 12958  00388C                     __ptext55:
 12959                           	opt stack 0
 12960  00388C                     i2_SPI32_SendFrame:
 12961                           	opt stack 19
 12962                           
 12963                           ;SPI32_HW.c: 100: if(FrameByte == 4){
 12964                           
 12965                           ;incstack = 0
 12966  00388C  0E04               	movlw	4
 12967  00388E  0100               	movlb	0	; () banked
 12968  003890  19F6               	xorwf	_FrameByte& (0+255),w,b
 12969  003892  A4D8               	btfss	status,2,c
 12970  003894  D008               	goto	i2l4161
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;SPI32_HW.c: 102: TransmitFrame = newFrame;
 12974  003896  C001  F036         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 12975  00389A  C002  F037         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 12976  00389E  C003  F038         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 12977  0038A2  C004  F039         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 12978  0038A6                     i2l4161:
 12979                           
 12980                           ; BSR set to: 0
 12981                           ;SPI32_HW.c: 103: }
 12982                           ;SPI32_HW.c: 105: FrameByte--;
 12983  0038A6  0100               	movlb	0	; () banked
 12984  0038A8  07F6               	decf	_FrameByte& (0+255),f,b
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;SPI32_HW.c: 107: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 12988  0038AA  0100               	movlb	0	; () banked
 12989  0038AC  51F6               	movf	_FrameByte& (0+255),w,b
 12990  0038AE  0D08               	mullw	8
 12991  0038B0  50F3               	movf	prodl,w,c
 12992  0038B2  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 12993  0038B6  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 12994  0038BA  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 12995  0038BE  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 12996  0038C2  2AE8               	incf	wreg,f,c
 12997  0038C4  D005               	goto	i2u305_40
 12998  0038C6                     i2u305_45:
 12999  0038C6  90D8               	bcf	status,0,c
 13000  0038C8  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 13001  0038CA  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 13002  0038CC  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 13003  0038CE  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 13004  0038D0                     i2u305_40:
 13005  0038D0  2EE8               	decfsz	wreg,f,c
 13006  0038D2  D7F9               	goto	i2u305_45
 13007  0038D4  5005               	movf	??i2_SPI32_SendFrame,w,c
 13008  0038D6  6EC9               	movwf	4041,c	;volatile
 13009                           
 13010                           ; BSR set to: 0
 13011  0038D8  0012               	return		;funcret
 13012  0038DA                     __end_ofi2_SPI32_SendFrame:
 13013                           	opt stack 0
 13014                           tosu	equ	0xFFF
 13015                           tosh	equ	0xFFE
 13016                           tosl	equ	0xFFD
 13017                           pclatu	equ	0xFFB
 13018                           pclath	equ	0xFFA
 13019                           tblptru	equ	0xFF8
 13020                           tblptrh	equ	0xFF7
 13021                           tblptrl	equ	0xFF6
 13022                           tablat	equ	0xFF5
 13023                           prodh	equ	0xFF4
 13024                           prodl	equ	0xFF3
 13025                           intcon	equ	0xFF2
 13026                           postinc0	equ	0xFEE
 13027                           fsr0h	equ	0xFEA
 13028                           fsr0l	equ	0xFE9
 13029                           wreg	equ	0xFE8
 13030                           indf1	equ	0xFE7
 13031                           postinc1	equ	0xFE6
 13032                           postdec1	equ	0xFE5
 13033                           fsr1h	equ	0xFE2
 13034                           fsr1l	equ	0xFE1
 13035                           indf2	equ	0xFDF
 13036                           postinc2	equ	0xFDE
 13037                           postdec2	equ	0xFDD
 13038                           plusw2	equ	0xFDB
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function i2_PostSPI32ControlService *****************
 13044 ;; Defined at:
 13045 ;;		line 117 in file "SPI32_ControlService.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 13048 ;; Auto vars:     Size  Location     Type
 13049 ;;		None
 13050 ;; Return value:  Size  Location     Type
 13051 ;;                  1    wreg      unsigned char 
 13052 ;; Registers used:
 13053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13054 ;; Tracked objects:
 13055 ;;		On entry : 0/0
 13056 ;;		On exit  : 0/0
 13057 ;;		Unchanged: 0/0
 13058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13059 ;;      Params:         3       0       0       0
 13060 ;;      Locals:         0       0       0       0
 13061 ;;      Temps:          0       0       0       0
 13062 ;;      Totals:         3       0       0       0
 13063 ;;Total ram usage:        3 bytes
 13064 ;; Hardware stack levels used:    1
 13065 ;; Hardware stack levels required when called:    3
 13066 ;; This function calls:
 13067 ;;		i2_ES_PostToService
 13068 ;; This function is called by:
 13069 ;;		_SPI32_EOTResponse
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           	psect	text56
 13074  003C46                     __ptext56:
 13075                           	opt stack 0
 13076  003C46                     i2_PostSPI32ControlService:
 13077                           	opt stack 16
 13078                           
 13079                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
 13080                           ;	Return value of i2_PostSPI32ControlService is never used
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;incstack = 0
 13084  003C46  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 13085  003C4A  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 13086  003C4E  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 13087  003C52  0100               	movlb	0	; () banked
 13088  003C54  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 13089  003C56  EC65  F01B         	call	i2_ES_PostToService
 13090  003C5A  0012               	return	
 13091  003C5C                     __end_ofi2_PostSPI32ControlService:
 13092                           	opt stack 0
 13093                           tosu	equ	0xFFF
 13094                           tosh	equ	0xFFE
 13095                           tosl	equ	0xFFD
 13096                           pclatu	equ	0xFFB
 13097                           pclath	equ	0xFFA
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           postinc0	equ	0xFEE
 13106                           fsr0h	equ	0xFEA
 13107                           fsr0l	equ	0xFE9
 13108                           wreg	equ	0xFE8
 13109                           indf1	equ	0xFE7
 13110                           postinc1	equ	0xFE6
 13111                           postdec1	equ	0xFE5
 13112                           fsr1h	equ	0xFE2
 13113                           fsr1l	equ	0xFE1
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           postdec2	equ	0xFDD
 13117                           plusw2	equ	0xFDB
 13118                           fsr2h	equ	0xFDA
 13119                           fsr2l	equ	0xFD9
 13120                           status	equ	0xFD8
 13121                           
 13122 ;; *************** function _CAN_XmitResponse *****************
 13123 ;; Defined at:
 13124 ;;		line 64 in file "CAN_RX_HW.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;		None
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;		None
 13129 ;; Return value:  Size  Location     Type
 13130 ;;                  1    wreg      void 
 13131 ;; Registers used:
 13132 ;;		None
 13133 ;; Tracked objects:
 13134 ;;		On entry : 0/0
 13135 ;;		On exit  : 0/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13138 ;;      Params:         0       0       0       0
 13139 ;;      Locals:         0       0       0       0
 13140 ;;      Temps:          0       0       0       0
 13141 ;;      Totals:         0       0       0       0
 13142 ;;Total ram usage:        0 bytes
 13143 ;; Hardware stack levels used:    1
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_ISR
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           	psect	text57
 13152  003CCA                     __ptext57:
 13153                           	opt stack 0
 13154  003CCA                     _CAN_XmitResponse:
 13155                           	opt stack 20
 13156                           
 13157                           ;CAN_RX_HW.c: 66: TXB0CONbits.TXREQ = 0;
 13158                           
 13159                           ;incstack = 0
 13160  003CCA  010F               	movlb	15	; () banked
 13161  003CCC  9740               	bcf	64,3,b	;volatile
 13162                           
 13163                           ; BSR set to: 15
 13164  003CCE  0012               	return		;funcret
 13165  003CD0                     __end_of_CAN_XmitResponse:
 13166                           	opt stack 0
 13167                           tosu	equ	0xFFF
 13168                           tosh	equ	0xFFE
 13169                           tosl	equ	0xFFD
 13170                           pclatu	equ	0xFFB
 13171                           pclath	equ	0xFFA
 13172                           tblptru	equ	0xFF8
 13173                           tblptrh	equ	0xFF7
 13174                           tblptrl	equ	0xFF6
 13175                           tablat	equ	0xFF5
 13176                           prodh	equ	0xFF4
 13177                           prodl	equ	0xFF3
 13178                           intcon	equ	0xFF2
 13179                           postinc0	equ	0xFEE
 13180                           fsr0h	equ	0xFEA
 13181                           fsr0l	equ	0xFE9
 13182                           wreg	equ	0xFE8
 13183                           indf1	equ	0xFE7
 13184                           postinc1	equ	0xFE6
 13185                           postdec1	equ	0xFE5
 13186                           fsr1h	equ	0xFE2
 13187                           fsr1l	equ	0xFE1
 13188                           indf2	equ	0xFDF
 13189                           postinc2	equ	0xFDE
 13190                           postdec2	equ	0xFDD
 13191                           plusw2	equ	0xFDB
 13192                           fsr2h	equ	0xFDA
 13193                           fsr2l	equ	0xFD9
 13194                           status	equ	0xFD8
 13195                           
 13196 ;; *************** function _CAN_RCVResponse *****************
 13197 ;; Defined at:
 13198 ;;		line 69 in file "CAN_RX_HW.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;		None
 13201 ;; Auto vars:     Size  Location     Type
 13202 ;;		None
 13203 ;; Return value:  Size  Location     Type
 13204 ;;                  2  137[None  ] int 
 13205 ;; Registers used:
 13206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13207 ;; Tracked objects:
 13208 ;;		On entry : 0/0
 13209 ;;		On exit  : 0/0
 13210 ;;		Unchanged: 0/0
 13211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13212 ;;      Params:         0       0       0       0
 13213 ;;      Locals:         0       0       0       0
 13214 ;;      Temps:          0       0       0       0
 13215 ;;      Totals:         0       0       0       0
 13216 ;;Total ram usage:        0 bytes
 13217 ;; Hardware stack levels used:    1
 13218 ;; Hardware stack levels required when called:    5
 13219 ;; This function calls:
 13220 ;;		_ProcessReceive
 13221 ;; This function is called by:
 13222 ;;		_ISR
 13223 ;; This function uses a non-reentrant model
 13224 ;;
 13225                           
 13226                           	psect	text58
 13227  003C92                     __ptext58:
 13228                           	opt stack 0
 13229  003C92                     _CAN_RCVResponse:
 13230                           	opt stack 15
 13231                           
 13232                           ;CAN_RX_HW.c: 71: if (RXB0CONbits.RXFUL == 1) {
 13233                           
 13234                           ; BSR set to: 15
 13235                           ;incstack = 0
 13236  003C92  AE60               	btfss	3936,7,c	;volatile
 13237  003C94  0012               	return	
 13238                           
 13239                           ;CAN_RX_HW.c: 72: ProcessReceive();
 13240  003C96  EC75  F018         	call	_ProcessReceive	;wreg free
 13241                           
 13242                           ;CAN_RX_HW.c: 73: RXB0CONbits.RXFUL = 0;
 13243  003C9A  9E60               	bcf	3936,7,c	;volatile
 13244  003C9C  0012               	return	
 13245  003C9E                     __end_of_CAN_RCVResponse:
 13246                           	opt stack 0
 13247                           tosu	equ	0xFFF
 13248                           tosh	equ	0xFFE
 13249                           tosl	equ	0xFFD
 13250                           pclatu	equ	0xFFB
 13251                           pclath	equ	0xFFA
 13252                           tblptru	equ	0xFF8
 13253                           tblptrh	equ	0xFF7
 13254                           tblptrl	equ	0xFF6
 13255                           tablat	equ	0xFF5
 13256                           prodh	equ	0xFF4
 13257                           prodl	equ	0xFF3
 13258                           intcon	equ	0xFF2
 13259                           postinc0	equ	0xFEE
 13260                           fsr0h	equ	0xFEA
 13261                           fsr0l	equ	0xFE9
 13262                           wreg	equ	0xFE8
 13263                           indf1	equ	0xFE7
 13264                           postinc1	equ	0xFE6
 13265                           postdec1	equ	0xFE5
 13266                           fsr1h	equ	0xFE2
 13267                           fsr1l	equ	0xFE1
 13268                           indf2	equ	0xFDF
 13269                           postinc2	equ	0xFDE
 13270                           postdec2	equ	0xFDD
 13271                           plusw2	equ	0xFDB
 13272                           fsr2h	equ	0xFDA
 13273                           fsr2l	equ	0xFD9
 13274                           status	equ	0xFD8
 13275                           
 13276 ;; *************** function _ProcessReceive *****************
 13277 ;; Defined at:
 13278 ;;		line 176 in file "CAN_RX_HW.c"
 13279 ;; Parameters:    Size  Location     Type
 13280 ;;		None
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
 13283 ;; Return value:  Size  Location     Type
 13284 ;;                  1    wreg      void 
 13285 ;; Registers used:
 13286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13287 ;; Tracked objects:
 13288 ;;		On entry : 0/0
 13289 ;;		On exit  : 0/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13292 ;;      Params:         0       0       0       0
 13293 ;;      Locals:         5       0       0       0
 13294 ;;      Temps:          0       0       0       0
 13295 ;;      Totals:         5       0       0       0
 13296 ;;Total ram usage:        5 bytes
 13297 ;; Hardware stack levels used:    1
 13298 ;; Hardware stack levels required when called:    4
 13299 ;; This function calls:
 13300 ;;		_SetBrightness
 13301 ;;		_SetListenFocus
 13302 ;;		_SetPattern
 13303 ;;		i2_PostPatternControlService
 13304 ;;		i2___awmod
 13305 ;; This function is called by:
 13306 ;;		_CAN_RCVResponse
 13307 ;; This function uses a non-reentrant model
 13308 ;;
 13309                           
 13310                           	psect	text59
 13311  0030EA                     __ptext59:
 13312                           	opt stack 0
 13313  0030EA                     _ProcessReceive:
 13314                           	opt stack 15
 13315                           
 13316                           ;CAN_RX_HW.c: 178: static uint8_t CurrentPattern = 0;
 13317                           ;CAN_RX_HW.c: 179: static uint8_t LastButton = 0xFF;
 13318                           ;CAN_RX_HW.c: 181: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && RXB0E
      +                          IDL == 0x01) {
 13319                           
 13320                           ;incstack = 0
 13321  0030EA  5061               	movf	3937,w,c	;volatile
 13322  0030EC  A4D8               	btfss	status,2,c
 13323  0030EE  0012               	return	
 13324  0030F0  0E18               	movlw	24
 13325  0030F2  1862               	xorwf	3938,w,c	;volatile
 13326  0030F4  A4D8               	btfss	status,2,c
 13327  0030F6  0012               	return	
 13328  0030F8  5063               	movf	3939,w,c	;volatile
 13329  0030FA  A4D8               	btfss	status,2,c
 13330  0030FC  0012               	return	
 13331  0030FE  0464               	decf	3940,w,c	;volatile
 13332  003100  A4D8               	btfss	status,2,c
 13333  003102  0012               	return	
 13334                           
 13335                           ;CAN_RX_HW.c: 182: ES_Event Event2Post;
 13336                           ;CAN_RX_HW.c: 183: if(RXB0D0 != 0xFF){
 13337  003104  2866               	incf	3942,w,c	;volatile
 13338  003106  A4D8               	btfss	status,2,c
 13339  003108  D02B               	goto	i2l4147
 13340  00310A  D039               	goto	i2l4149
 13341  00310C                     i2l4125:
 13342                           
 13343                           ;CAN_RX_HW.c: 186: Event2Post.EventType = PATTERN_START;
 13344  00310C  0E05               	movlw	5
 13345  00310E  6E23               	movwf	ProcessReceive@Event2Post,c
 13346                           
 13347                           ;CAN_RX_HW.c: 187: break;
 13348  003110  D034               	goto	i2l633
 13349  003112                     i2l4127:
 13350                           
 13351                           ;CAN_RX_HW.c: 189: Event2Post.EventType = (LastButton == 0x01 ? PATTERN_END : PATTERN_PA
      +                          USE);
 13352  003112  0454               	decf	ProcessReceive@LastButton,w,c
 13353  003114  B4D8               	btfsc	status,2,c
 13354  003116  D004               	goto	i2l4131
 13355  003118  0E00               	movlw	0
 13356  00311A  6E22               	movwf	_ProcessReceive$1196+1,c
 13357  00311C  0E07               	movlw	7
 13358  00311E  D003               	goto	L22
 13359  003120                     i2l4131:
 13360  003120  0E00               	movlw	0
 13361  003122  6E22               	movwf	_ProcessReceive$1196+1,c
 13362  003124  0E06               	movlw	6
 13363  003126                     L22:
 13364  003126  6E21               	movwf	_ProcessReceive$1196,c
 13365  003128  C021  F023         	movff	_ProcessReceive$1196,ProcessReceive@Event2Post
 13366                           
 13367                           ;CAN_RX_HW.c: 190: break;
 13368  00312C  D026               	goto	i2l633
 13369  00312E                     i2l4135:
 13370                           
 13371                           ;CAN_RX_HW.c: 193: SetPattern(0xFF);
 13372  00312E  0EFF               	movlw	255
 13373  003130  EC4F  F01E         	call	_SetPattern
 13374                           
 13375                           ;CAN_RX_HW.c: 194: Event2Post.EventType = PATTERN_START;
 13376  003134  0E05               	movlw	5
 13377  003136  6E23               	movwf	ProcessReceive@Event2Post,c
 13378                           
 13379                           ;CAN_RX_HW.c: 199: CurrentPattern = 0;
 13380  003138  0E00               	movlw	0
 13381  00313A  D010               	goto	L23
 13382  00313C                     i2l4141:
 13383                           
 13384                           ;CAN_RX_HW.c: 202: SetPattern(CurrentPattern);
 13385  00313C  5045               	movf	ProcessReceive@CurrentPattern,w,c
 13386  00313E  EC4F  F01E         	call	_SetPattern
 13387                           
 13388                           ;CAN_RX_HW.c: 203: CurrentPattern = (CurrentPattern+1)%9;
 13389  003142  0E01               	movlw	1
 13390  003144  2445               	addwf	ProcessReceive@CurrentPattern,w,c
 13391  003146  6E01               	movwf	i2___awmod@dividend,c
 13392  003148  6A02               	clrf	i2___awmod@dividend+1,c
 13393  00314A  0E00               	movlw	0
 13394  00314C  2202               	addwfc	i2___awmod@dividend+1,f,c
 13395  00314E  0E00               	movlw	0
 13396  003150  6E04               	movwf	i2___awmod@divisor+1,c
 13397  003152  0E09               	movlw	9
 13398  003154  6E03               	movwf	i2___awmod@divisor,c
 13399  003156  EC2D  F01B         	call	i2___awmod	;wreg free
 13400  00315A  5001               	movf	?i2___awmod,w,c
 13401  00315C                     L23:
 13402  00315C  6E45               	movwf	ProcessReceive@CurrentPattern,c
 13403                           
 13404                           ;CAN_RX_HW.c: 205: }
 13405                           
 13406                           ;CAN_RX_HW.c: 204: break;
 13407  00315E  D00D               	goto	i2l633
 13408  003160                     i2l4147:
 13409  003160  5066               	movf	3942,w,c	;volatile
 13410                           
 13411                           ; Switch size 1, requested type "space"
 13412                           ; Number of cases is 4, Range of values is 0 to 3
 13413                           ; switch strategies available:
 13414                           ; Name         Instructions Cycles
 13415                           ; simple_byte           13     7 (average)
 13416                           ;	Chosen strategy is simple_byte
 13417  003162  0A00               	xorlw	0	; case 0
 13418  003164  B4D8               	btfsc	status,2,c
 13419  003166  D7D2               	goto	i2l4125
 13420  003168  0A01               	xorlw	1	; case 1
 13421  00316A  B4D8               	btfsc	status,2,c
 13422  00316C  D7D2               	goto	i2l4127
 13423  00316E  0A03               	xorlw	3	; case 2
 13424  003170  B4D8               	btfsc	status,2,c
 13425  003172  D7DD               	goto	i2l4135
 13426  003174  0A01               	xorlw	1	; case 3
 13427  003176  B4D8               	btfsc	status,2,c
 13428  003178  D7E1               	goto	i2l4141
 13429  00317A                     i2l633:
 13430                           
 13431                           ;CAN_RX_HW.c: 207: LastButton = RXB0D0;
 13432  00317A  CF66 F054          	movff	3942,ProcessReceive@LastButton	;volatile
 13433  00317E                     i2l4149:
 13434                           
 13435                           ;CAN_RX_HW.c: 208: }
 13436                           ;CAN_RX_HW.c: 210: SetBrightness(RXB0D1);
 13437  00317E  5067               	movf	3943,w,c	;volatile
 13438  003180  EC67  F01D         	call	_SetBrightness
 13439                           
 13440                           ;CAN_RX_HW.c: 212: SetListenFocus(RXB0D2);
 13441  003184  5068               	movf	3944,w,c	;volatile
 13442  003186  EC9B  F01D         	call	_SetListenFocus
 13443                           
 13444                           ;CAN_RX_HW.c: 214: PostPatternControlService(Event2Post);
 13445  00318A  C023  F01E         	movff	ProcessReceive@Event2Post,i2PostPatternControlService@ThisEvent
 13446  00318E  C024  F01F         	movff	ProcessReceive@Event2Post+1,i2PostPatternControlService@ThisEvent+1
 13447  003192  C025  F020         	movff	ProcessReceive@Event2Post+2,i2PostPatternControlService@ThisEvent+2
 13448  003196  EC2E  F01E         	call	i2_PostPatternControlService	;wreg free
 13449  00319A  0012               	return	
 13450  00319C                     __end_of_ProcessReceive:
 13451                           	opt stack 0
 13452                           tosu	equ	0xFFF
 13453                           tosh	equ	0xFFE
 13454                           tosl	equ	0xFFD
 13455                           pclatu	equ	0xFFB
 13456                           pclath	equ	0xFFA
 13457                           tblptru	equ	0xFF8
 13458                           tblptrh	equ	0xFF7
 13459                           tblptrl	equ	0xFF6
 13460                           tablat	equ	0xFF5
 13461                           prodh	equ	0xFF4
 13462                           prodl	equ	0xFF3
 13463                           intcon	equ	0xFF2
 13464                           postinc0	equ	0xFEE
 13465                           fsr0h	equ	0xFEA
 13466                           fsr0l	equ	0xFE9
 13467                           wreg	equ	0xFE8
 13468                           indf1	equ	0xFE7
 13469                           postinc1	equ	0xFE6
 13470                           postdec1	equ	0xFE5
 13471                           fsr1h	equ	0xFE2
 13472                           fsr1l	equ	0xFE1
 13473                           indf2	equ	0xFDF
 13474                           postinc2	equ	0xFDE
 13475                           postdec2	equ	0xFDD
 13476                           plusw2	equ	0xFDB
 13477                           fsr2h	equ	0xFDA
 13478                           fsr2l	equ	0xFD9
 13479                           status	equ	0xFD8
 13480                           
 13481 ;; *************** function i2_PostPatternControlService *****************
 13482 ;; Defined at:
 13483 ;;		line 137 in file "Pattern_ControlService.c"
 13484 ;; Parameters:    Size  Location     Type
 13485 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 13486 ;; Auto vars:     Size  Location     Type
 13487 ;;		None
 13488 ;; Return value:  Size  Location     Type
 13489 ;;                  1    wreg      unsigned char 
 13490 ;; Registers used:
 13491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13492 ;; Tracked objects:
 13493 ;;		On entry : 0/0
 13494 ;;		On exit  : 0/0
 13495 ;;		Unchanged: 0/0
 13496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13497 ;;      Params:         3       0       0       0
 13498 ;;      Locals:         0       0       0       0
 13499 ;;      Temps:          0       0       0       0
 13500 ;;      Totals:         3       0       0       0
 13501 ;;Total ram usage:        3 bytes
 13502 ;; Hardware stack levels used:    1
 13503 ;; Hardware stack levels required when called:    3
 13504 ;; This function calls:
 13505 ;;		i2_ES_PostToService
 13506 ;; This function is called by:
 13507 ;;		_ProcessReceive
 13508 ;; This function uses a non-reentrant model
 13509 ;;
 13510                           
 13511                           	psect	text60
 13512  003C5C                     __ptext60:
 13513                           	opt stack 0
 13514  003C5C                     i2_PostPatternControlService:
 13515                           	opt stack 15
 13516                           
 13517                           ;Pattern_ControlService.c: 139: return ES_PostToService( MyPriority, ThisEvent);
 13518                           ;	Return value of i2_PostPatternControlService is never used
 13519                           
 13520                           ;incstack = 0
 13521  003C5C  C01E  F018         	movff	i2PostPatternControlService@ThisEvent,i2ES_PostToService@TheEvent
 13522  003C60  C01F  F019         	movff	i2PostPatternControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 13523  003C64  C020  F01A         	movff	i2PostPatternControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 13524  003C68  0100               	movlb	0	; () banked
 13525  003C6A  51E6               	movf	_MyPriority& (0+255),w,b
 13526  003C6C  EC65  F01B         	call	i2_ES_PostToService
 13527  003C70  0012               	return	
 13528  003C72                     __end_ofi2_PostPatternControlService:
 13529                           	opt stack 0
 13530                           tosu	equ	0xFFF
 13531                           tosh	equ	0xFFE
 13532                           tosl	equ	0xFFD
 13533                           pclatu	equ	0xFFB
 13534                           pclath	equ	0xFFA
 13535                           tblptru	equ	0xFF8
 13536                           tblptrh	equ	0xFF7
 13537                           tblptrl	equ	0xFF6
 13538                           tablat	equ	0xFF5
 13539                           prodh	equ	0xFF4
 13540                           prodl	equ	0xFF3
 13541                           intcon	equ	0xFF2
 13542                           postinc0	equ	0xFEE
 13543                           fsr0h	equ	0xFEA
 13544                           fsr0l	equ	0xFE9
 13545                           wreg	equ	0xFE8
 13546                           indf1	equ	0xFE7
 13547                           postinc1	equ	0xFE6
 13548                           postdec1	equ	0xFE5
 13549                           fsr1h	equ	0xFE2
 13550                           fsr1l	equ	0xFE1
 13551                           indf2	equ	0xFDF
 13552                           postinc2	equ	0xFDE
 13553                           postdec2	equ	0xFDD
 13554                           plusw2	equ	0xFDB
 13555                           fsr2h	equ	0xFDA
 13556                           fsr2l	equ	0xFD9
 13557                           status	equ	0xFD8
 13558                           
 13559 ;; *************** function i2_ES_PostToService *****************
 13560 ;; Defined at:
 13561 ;;		line 351 in file "ES_Framework.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;  WhichService    1    wreg     unsigned char 
 13564 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;  WhichService    1   28[COMRAM] unsigned char 
 13567 ;; Return value:  Size  Location     Type
 13568 ;;                  1    wreg      unsigned char 
 13569 ;; Registers used:
 13570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13571 ;; Tracked objects:
 13572 ;;		On entry : 0/0
 13573 ;;		On exit  : 0/0
 13574 ;;		Unchanged: 0/0
 13575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13576 ;;      Params:         3       0       0       0
 13577 ;;      Locals:         1       0       0       0
 13578 ;;      Temps:          2       0       0       0
 13579 ;;      Totals:         6       0       0       0
 13580 ;;Total ram usage:        6 bytes
 13581 ;; Hardware stack levels used:    1
 13582 ;; Hardware stack levels required when called:    2
 13583 ;; This function calls:
 13584 ;;		i2_ES_EnQueueFIFO
 13585 ;; This function is called by:
 13586 ;;		i2_PostPatternControlService
 13587 ;;		i2_PostSPI32ControlService
 13588 ;; This function uses a non-reentrant model
 13589 ;;
 13590                           
 13591                           	psect	text61
 13592  0036CA                     __ptext61:
 13593                           	opt stack 0
 13594  0036CA                     i2_ES_PostToService:
 13595                           	opt stack 16
 13596                           
 13597                           ;incstack = 0
 13598                           ;i2ES_PostToService@WhichService stored from wreg
 13599  0036CA  6E1D               	movwf	i2ES_PostToService@WhichService,c
 13600                           
 13601                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 13602                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 13603                           ;ES_Framework.c: 354: 1 )){
 13604  0036CC  0E02               	movlw	2
 13605  0036CE  601D               	cpfslt	i2ES_PostToService@WhichService,c
 13606  0036D0  D02F               	goto	i2l3797
 13607  0036D2  501D               	movf	i2ES_PostToService@WhichService,w,c
 13608  0036D4  0D03               	mullw	3
 13609  0036D6  0E58               	movlw	low _EventQueues
 13610  0036D8  24F3               	addwf	prodl,w,c
 13611  0036DA  6EF6               	movwf	tblptrl,c
 13612  0036DC  0E03               	movlw	high _EventQueues
 13613  0036DE  20F4               	addwfc	prodh,w,c
 13614  0036E0  6EF7               	movwf	tblptrh,c
 13615  0036E2                     	if	0	;There are less than 3 active tblptr bytes
 13616  0036E2                     	endif
 13617  0036E2  0009               	tblrd		*+
 13618  0036E4  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 13619  0036E8  000A               	tblrd		*-
 13620  0036EA  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 13621  0036EE  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 13622  0036F2  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 13623  0036F6  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 13624  0036FA  EC1B  F018         	call	i2_ES_EnQueueFIFO	;wreg free
 13625  0036FE  06E8               	decf	wreg,f,c
 13626  003700  A4D8               	btfss	status,2,c
 13627  003702  D016               	goto	i2l3797
 13628                           
 13629                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 13630  003704  501D               	movf	i2ES_PostToService@WhichService,w,c
 13631  003706  0D02               	mullw	2
 13632  003708  0E01               	movlw	low _BitNum2SetMask
 13633  00370A  24F3               	addwf	prodl,w,c
 13634  00370C  6EF6               	movwf	tblptrl,c
 13635  00370E  0E03               	movlw	high _BitNum2SetMask
 13636  003710  20F4               	addwfc	prodh,w,c
 13637  003712  6EF7               	movwf	tblptrh,c
 13638  003714                     	if	0	;There are less than 3 active tblptr bytes
 13639  003714                     	endif
 13640  003714  0009               	tblrd		*+
 13641  003716  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 13642  00371A  0009               	tblrd		*+
 13643  00371C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 13644  003720  501B               	movf	??i2_ES_PostToService,w,c
 13645  003722  0100               	movlb	0	; () banked
 13646  003724  13DD               	iorwf	_Ready& (0+255),f,b
 13647  003726  501C               	movf	??i2_ES_PostToService+1,w,c
 13648  003728  0100               	movlb	0	; () banked
 13649  00372A  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;ES_Framework.c: 356: return 1;
 13653  00372C  0E01               	movlw	1
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;ES_Framework.c: 357: } else
 13657                           
 13658                           ; BSR set to: 0
 13659  00372E  0012               	return	
 13660  003730                     i2l3797:
 13661                           
 13662                           ;ES_Framework.c: 358: return 0;
 13663  003730  0E00               	movlw	0
 13664  003732  0012               	return	
 13665  003734                     __end_ofi2_ES_PostToService:
 13666                           	opt stack 0
 13667                           tosu	equ	0xFFF
 13668                           tosh	equ	0xFFE
 13669                           tosl	equ	0xFFD
 13670                           pclatu	equ	0xFFB
 13671                           pclath	equ	0xFFA
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           postinc0	equ	0xFEE
 13680                           fsr0h	equ	0xFEA
 13681                           fsr0l	equ	0xFE9
 13682                           wreg	equ	0xFE8
 13683                           indf1	equ	0xFE7
 13684                           postinc1	equ	0xFE6
 13685                           postdec1	equ	0xFE5
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           plusw2	equ	0xFDB
 13692                           fsr2h	equ	0xFDA
 13693                           fsr2l	equ	0xFD9
 13694                           status	equ	0xFD8
 13695                           
 13696 ;; *************** function i2_ES_EnQueueFIFO *****************
 13697 ;; Defined at:
 13698 ;;		line 85 in file "ES_Queue.c"
 13699 ;; Parameters:    Size  Location     Type
 13700 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 13701 ;;		 -> Queue1(12), Queue0(12), 
 13702 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 13705 ;;		 -> Queue1(12), Queue0(12), 
 13706 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      unsigned char 
 13709 ;; Registers used:
 13710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13716 ;;      Params:         5       0       0       0
 13717 ;;      Locals:         3       0       0       0
 13718 ;;      Temps:          3       0       0       0
 13719 ;;      Totals:        11       0       0       0
 13720 ;;Total ram usage:       11 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    1
 13723 ;; This function calls:
 13724 ;;		i2___awmod
 13725 ;;		i2___wmul
 13726 ;; This function is called by:
 13727 ;;		i2_ES_PostToService
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text62
 13732  003036                     __ptext62:
 13733                           	opt stack 0
 13734  003036                     i2_ES_EnQueueFIFO:
 13735                           	opt stack 16
 13736                           
 13737                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 13738                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 13739                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 13740                           
 13741                           ;incstack = 0
 13742  003036  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 13743  00303A  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 13744                           
 13745                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 13746  00303E  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13747  003042  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13748  003046  EE10 F002          	lfsr	1,2
 13749  00304A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13750  00304C  26E1               	addwf	fsr1l,f,c
 13751  00304E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13752  003050  22E2               	addwfc	fsr1h,f,c
 13753  003052  50DE               	movf	postinc2,w,c
 13754  003054  5CE6               	subwf	postinc1,w,c
 13755  003056  B0D8               	btfsc	status,0,c
 13756  003058  D046               	goto	i2l3603
 13757                           
 13758                           ;ES_Queue.c: 92: {
 13759                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 13760  00305A  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 13761  00305E  9EF2               	bcf	intcon,7,c	;volatile
 13762                           
 13763                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 13764                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 13765  003060  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13766  003064  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13767  003068  50DF               	movf	indf2,w,c
 13768  00306A  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 13769  00306C  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 13770  00306E  6E03               	movwf	i2___awmod@divisor,c
 13771  003070  6A04               	clrf	i2___awmod@divisor+1,c
 13772  003072  EE20 F002          	lfsr	2,2
 13773  003076  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13774  003078  26D9               	addwf	fsr2l,f,c
 13775  00307A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13776  00307C  22DA               	addwfc	fsr2h,f,c
 13777  00307E  50DF               	movf	indf2,w,c
 13778  003080  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 13779  003082  EE20 F001          	lfsr	2,1
 13780  003086  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13781  003088  26D9               	addwf	fsr2l,f,c
 13782  00308A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13783  00308C  22DA               	addwfc	fsr2h,f,c
 13784  00308E  50DF               	movf	indf2,w,c
 13785  003090  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 13786  003092  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 13787  003094  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 13788  003096  6E01               	movwf	i2___awmod@dividend,c
 13789  003098  6A02               	clrf	i2___awmod@dividend+1,c
 13790  00309A  3602               	rlcf	i2___awmod@dividend+1,f,c
 13791  00309C  EC2D  F01B         	call	i2___awmod	;wreg free
 13792  0030A0  0E01               	movlw	1
 13793  0030A2  2401               	addwf	?i2___awmod,w,c
 13794  0030A4  6E07               	movwf	i2___wmul@multiplier,c
 13795  0030A6  0E00               	movlw	0
 13796  0030A8  2002               	addwfc	?i2___awmod+1,w,c
 13797  0030AA  6E08               	movwf	i2___wmul@multiplier+1,c
 13798  0030AC  0E00               	movlw	0
 13799  0030AE  6E0A               	movwf	i2___wmul@multiplicand+1,c
 13800  0030B0  0E03               	movlw	3
 13801  0030B2  6E09               	movwf	i2___wmul@multiplicand,c
 13802  0030B4  EC54  F01D         	call	i2___wmul	;wreg free
 13803  0030B8  5007               	movf	?i2___wmul,w,c
 13804  0030BA  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 13805  0030BC  6ED9               	movwf	fsr2l,c
 13806  0030BE  5008               	movf	?i2___wmul+1,w,c
 13807  0030C0  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 13808  0030C2  6EDA               	movwf	fsr2h,c
 13809  0030C4  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 13810  0030C8  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 13811  0030CC  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 13812                           
 13813                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 13814  0030D0  EE20 F002          	lfsr	2,2
 13815  0030D4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13816  0030D6  26D9               	addwf	fsr2l,f,c
 13817  0030D8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13818  0030DA  22DA               	addwfc	fsr2h,f,c
 13819  0030DC  2ADF               	incf	indf2,f,c
 13820                           
 13821                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 13822  0030DE  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 13823                           
 13824                           ;ES_Queue.c: 101: return(1);
 13825  0030E2  0E01               	movlw	1
 13826                           
 13827                           ;ES_Queue.c: 102: }else
 13828  0030E4  0012               	return	
 13829  0030E6                     i2l3603:
 13830                           
 13831                           ;ES_Queue.c: 103: return(0);
 13832  0030E6  0E00               	movlw	0
 13833  0030E8  0012               	return	
 13834  0030EA                     __end_ofi2_ES_EnQueueFIFO:
 13835                           	opt stack 0
 13836                           tosu	equ	0xFFF
 13837                           tosh	equ	0xFFE
 13838                           tosl	equ	0xFFD
 13839                           pclatu	equ	0xFFB
 13840                           pclath	equ	0xFFA
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           intcon	equ	0xFF2
 13848                           postinc0	equ	0xFEE
 13849                           fsr0h	equ	0xFEA
 13850                           fsr0l	equ	0xFE9
 13851                           wreg	equ	0xFE8
 13852                           indf1	equ	0xFE7
 13853                           postinc1	equ	0xFE6
 13854                           postdec1	equ	0xFE5
 13855                           fsr1h	equ	0xFE2
 13856                           fsr1l	equ	0xFE1
 13857                           indf2	equ	0xFDF
 13858                           postinc2	equ	0xFDE
 13859                           postdec2	equ	0xFDD
 13860                           plusw2	equ	0xFDB
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function i2___wmul *****************
 13866 ;; Defined at:
 13867 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  multiplier      2    6[COMRAM] unsigned int 
 13870 ;;  multiplicand    2    8[COMRAM] unsigned int 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  __wmul          2   10[COMRAM] unsigned int 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  2    6[COMRAM] unsigned int 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0, prodl, prodh
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13882 ;;      Params:         4       0       0       0
 13883 ;;      Locals:         2       0       0       0
 13884 ;;      Temps:          0       0       0       0
 13885 ;;      Totals:         6       0       0       0
 13886 ;;Total ram usage:        6 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; This function calls:
 13889 ;;		Nothing
 13890 ;; This function is called by:
 13891 ;;		i2_ES_EnQueueFIFO
 13892 ;; This function uses a non-reentrant model
 13893 ;;
 13894                           
 13895                           	psect	text63
 13896  003AA8                     __ptext63:
 13897                           	opt stack 0
 13898  003AA8                     i2___wmul:
 13899                           	opt stack 16
 13900                           
 13901                           ;incstack = 0
 13902  003AA8  5007               	movf	i2___wmul@multiplier,w,c
 13903  003AAA  0209               	mulwf	i2___wmul@multiplicand,c
 13904  003AAC  CFF3 F00B          	movff	prodl,i2___wmul@product
 13905  003AB0  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 13906  003AB4  5007               	movf	i2___wmul@multiplier,w,c
 13907  003AB6  020A               	mulwf	i2___wmul@multiplicand+1,c
 13908  003AB8  50F3               	movf	prodl,w,c
 13909  003ABA  260C               	addwf	i2___wmul@product+1,f,c
 13910  003ABC  5008               	movf	i2___wmul@multiplier+1,w,c
 13911  003ABE  0209               	mulwf	i2___wmul@multiplicand,c
 13912  003AC0  50F3               	movf	prodl,w,c
 13913  003AC2  260C               	addwf	i2___wmul@product+1,f,c
 13914  003AC4  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 13915  003AC8  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 13916  003ACC  0012               	return	
 13917  003ACE                     __end_ofi2___wmul:
 13918                           	opt stack 0
 13919                           tosu	equ	0xFFF
 13920                           tosh	equ	0xFFE
 13921                           tosl	equ	0xFFD
 13922                           pclatu	equ	0xFFB
 13923                           pclath	equ	0xFFA
 13924                           tblptru	equ	0xFF8
 13925                           tblptrh	equ	0xFF7
 13926                           tblptrl	equ	0xFF6
 13927                           tablat	equ	0xFF5
 13928                           prodh	equ	0xFF4
 13929                           prodl	equ	0xFF3
 13930                           intcon	equ	0xFF2
 13931                           postinc0	equ	0xFEE
 13932                           fsr0h	equ	0xFEA
 13933                           fsr0l	equ	0xFE9
 13934                           wreg	equ	0xFE8
 13935                           indf1	equ	0xFE7
 13936                           postinc1	equ	0xFE6
 13937                           postdec1	equ	0xFE5
 13938                           fsr1h	equ	0xFE2
 13939                           fsr1l	equ	0xFE1
 13940                           indf2	equ	0xFDF
 13941                           postinc2	equ	0xFDE
 13942                           postdec2	equ	0xFDD
 13943                           plusw2	equ	0xFDB
 13944                           fsr2h	equ	0xFDA
 13945                           fsr2l	equ	0xFD9
 13946                           status	equ	0xFD8
 13947                           
 13948 ;; *************** function i2___awmod *****************
 13949 ;; Defined at:
 13950 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;  dividend        2    0[COMRAM] int 
 13953 ;;  divisor         2    2[COMRAM] int 
 13954 ;; Auto vars:     Size  Location     Type
 13955 ;;  __awmod         1    5[COMRAM] unsigned char 
 13956 ;;  __awmod         1    4[COMRAM] unsigned char 
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  2    0[COMRAM] int 
 13959 ;; Registers used:
 13960 ;;		wreg, status,2, status,0
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13966 ;;      Params:         4       0       0       0
 13967 ;;      Locals:         2       0       0       0
 13968 ;;      Temps:          0       0       0       0
 13969 ;;      Totals:         6       0       0       0
 13970 ;;Total ram usage:        6 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; This function calls:
 13973 ;;		Nothing
 13974 ;; This function is called by:
 13975 ;;		_ProcessReceive
 13976 ;;		i2_ES_EnQueueFIFO
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           	psect	text64
 13981  00365A                     __ptext64:
 13982                           	opt stack 0
 13983  00365A                     i2___awmod:
 13984                           	opt stack 16
 13985                           
 13986                           ;incstack = 0
 13987  00365A  0E00               	movlw	0
 13988  00365C  6E06               	movwf	i2___awmod@sign,c
 13989  00365E  AE02               	btfss	i2___awmod@dividend+1,7,c
 13990  003660  D006               	goto	i2l3159
 13991  003662  6C01               	negf	i2___awmod@dividend,c
 13992  003664  1E02               	comf	i2___awmod@dividend+1,f,c
 13993  003666  B0D8               	btfsc	status,0,c
 13994  003668  2A02               	incf	i2___awmod@dividend+1,f,c
 13995  00366A  0E01               	movlw	1
 13996  00366C  6E06               	movwf	i2___awmod@sign,c
 13997  00366E                     i2l3159:
 13998  00366E  AE04               	btfss	i2___awmod@divisor+1,7,c
 13999  003670  D004               	goto	i2l3163
 14000  003672  6C03               	negf	i2___awmod@divisor,c
 14001  003674  1E04               	comf	i2___awmod@divisor+1,f,c
 14002  003676  B0D8               	btfsc	status,0,c
 14003  003678  2A04               	incf	i2___awmod@divisor+1,f,c
 14004  00367A                     i2l3163:
 14005  00367A  5003               	movf	i2___awmod@divisor,w,c
 14006  00367C  1004               	iorwf	i2___awmod@divisor+1,w,c
 14007  00367E  B4D8               	btfsc	status,2,c
 14008  003680  D018               	goto	i2l3179
 14009  003682  0E01               	movlw	1
 14010  003684  6E05               	movwf	i2___awmod@counter,c
 14011  003686  D004               	goto	i2l3169
 14012  003688                     i2l3167:
 14013  003688  90D8               	bcf	status,0,c
 14014  00368A  3603               	rlcf	i2___awmod@divisor,f,c
 14015  00368C  3604               	rlcf	i2___awmod@divisor+1,f,c
 14016  00368E  2A05               	incf	i2___awmod@counter,f,c
 14017  003690                     i2l3169:
 14018  003690  AE04               	btfss	i2___awmod@divisor+1,7,c
 14019  003692  D7FA               	goto	i2l3167
 14020  003694                     i2l3171:
 14021  003694  5003               	movf	i2___awmod@divisor,w,c
 14022  003696  5C01               	subwf	i2___awmod@dividend,w,c
 14023  003698  5004               	movf	i2___awmod@divisor+1,w,c
 14024  00369A  5802               	subwfb	i2___awmod@dividend+1,w,c
 14025  00369C  A0D8               	btfss	status,0,c
 14026  00369E  D004               	goto	i2l3175
 14027  0036A0  5003               	movf	i2___awmod@divisor,w,c
 14028  0036A2  5E01               	subwf	i2___awmod@dividend,f,c
 14029  0036A4  5004               	movf	i2___awmod@divisor+1,w,c
 14030  0036A6  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14031  0036A8                     i2l3175:
 14032  0036A8  90D8               	bcf	status,0,c
 14033  0036AA  3204               	rrcf	i2___awmod@divisor+1,f,c
 14034  0036AC  3203               	rrcf	i2___awmod@divisor,f,c
 14035  0036AE  2E05               	decfsz	i2___awmod@counter,f,c
 14036  0036B0  D7F1               	goto	i2l3171
 14037  0036B2                     i2l3179:
 14038  0036B2  5006               	movf	i2___awmod@sign,w,c
 14039  0036B4  B4D8               	btfsc	status,2,c
 14040  0036B6  D004               	goto	i2l3183
 14041  0036B8  6C01               	negf	i2___awmod@dividend,c
 14042  0036BA  1E02               	comf	i2___awmod@dividend+1,f,c
 14043  0036BC  B0D8               	btfsc	status,0,c
 14044  0036BE  2A02               	incf	i2___awmod@dividend+1,f,c
 14045  0036C0                     i2l3183:
 14046  0036C0  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14047  0036C4  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14048  0036C8  0012               	return	
 14049  0036CA                     __end_ofi2___awmod:
 14050                           	opt stack 0
 14051                           tosu	equ	0xFFF
 14052                           tosh	equ	0xFFE
 14053                           tosl	equ	0xFFD
 14054                           pclatu	equ	0xFFB
 14055                           pclath	equ	0xFFA
 14056                           tblptru	equ	0xFF8
 14057                           tblptrh	equ	0xFF7
 14058                           tblptrl	equ	0xFF6
 14059                           tablat	equ	0xFF5
 14060                           prodh	equ	0xFF4
 14061                           prodl	equ	0xFF3
 14062                           intcon	equ	0xFF2
 14063                           postinc0	equ	0xFEE
 14064                           fsr0h	equ	0xFEA
 14065                           fsr0l	equ	0xFE9
 14066                           wreg	equ	0xFE8
 14067                           indf1	equ	0xFE7
 14068                           postinc1	equ	0xFE6
 14069                           postdec1	equ	0xFE5
 14070                           fsr1h	equ	0xFE2
 14071                           fsr1l	equ	0xFE1
 14072                           indf2	equ	0xFDF
 14073                           postinc2	equ	0xFDE
 14074                           postdec2	equ	0xFDD
 14075                           plusw2	equ	0xFDB
 14076                           fsr2h	equ	0xFDA
 14077                           fsr2l	equ	0xFD9
 14078                           status	equ	0xFD8
 14079                           
 14080 ;; *************** function _SetPattern *****************
 14081 ;; Defined at:
 14082 ;;		line 236 in file "Pattern_ControlService.c"
 14083 ;; Parameters:    Size  Location     Type
 14084 ;;  PatternID       1    wreg     unsigned char 
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;  PatternID       1    0[COMRAM] unsigned char 
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  1    wreg      void 
 14089 ;; Registers used:
 14090 ;;		wreg, status,2, cstack
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14096 ;;      Params:         0       0       0       0
 14097 ;;      Locals:         1       0       0       0
 14098 ;;      Temps:          0       0       0       0
 14099 ;;      Totals:         1       0       0       0
 14100 ;;Total ram usage:        1 bytes
 14101 ;; Hardware stack levels used:    1
 14102 ;; Hardware stack levels required when called:    1
 14103 ;; This function calls:
 14104 ;;		i2_ResetPattern
 14105 ;; This function is called by:
 14106 ;;		_ProcessReceive
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           	psect	text65
 14111  003C9E                     __ptext65:
 14112                           	opt stack 0
 14113  003C9E                     _SetPattern:
 14114                           	opt stack 17
 14115                           
 14116                           ;incstack = 0
 14117                           ;SetPattern@PatternID stored from wreg
 14118  003C9E  6E01               	movwf	SetPattern@PatternID,c
 14119                           
 14120                           ;Pattern_ControlService.c: 237: PatternConfigs[0] = PatternID;
 14121  003CA0  C001  F0F7         	movff	SetPattern@PatternID,_PatternConfigs
 14122                           
 14123                           ;Pattern_ControlService.c: 239: ResetPattern();
 14124  003CA4  EC0B  F01E         	call	i2_ResetPattern	;wreg free
 14125  003CA8  0012               	return		;funcret
 14126  003CAA                     __end_of_SetPattern:
 14127                           	opt stack 0
 14128                           tosu	equ	0xFFF
 14129                           tosh	equ	0xFFE
 14130                           tosl	equ	0xFFD
 14131                           pclatu	equ	0xFFB
 14132                           pclath	equ	0xFFA
 14133                           tblptru	equ	0xFF8
 14134                           tblptrh	equ	0xFF7
 14135                           tblptrl	equ	0xFF6
 14136                           tablat	equ	0xFF5
 14137                           prodh	equ	0xFF4
 14138                           prodl	equ	0xFF3
 14139                           intcon	equ	0xFF2
 14140                           postinc0	equ	0xFEE
 14141                           fsr0h	equ	0xFEA
 14142                           fsr0l	equ	0xFE9
 14143                           wreg	equ	0xFE8
 14144                           indf1	equ	0xFE7
 14145                           postinc1	equ	0xFE6
 14146                           postdec1	equ	0xFE5
 14147                           fsr1h	equ	0xFE2
 14148                           fsr1l	equ	0xFE1
 14149                           indf2	equ	0xFDF
 14150                           postinc2	equ	0xFDE
 14151                           postdec2	equ	0xFDD
 14152                           plusw2	equ	0xFDB
 14153                           fsr2h	equ	0xFDA
 14154                           fsr2l	equ	0xFD9
 14155                           status	equ	0xFD8
 14156                           
 14157 ;; *************** function i2_ResetPattern *****************
 14158 ;; Defined at:
 14159 ;;		line 77 in file "Pattern_PtrnGenerator.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;		None
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;		None
 14164 ;; Return value:  Size  Location     Type
 14165 ;;                  1    wreg      void 
 14166 ;; Registers used:
 14167 ;;		wreg, status,2
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14173 ;;      Params:         0       0       0       0
 14174 ;;      Locals:         0       0       0       0
 14175 ;;      Temps:          0       0       0       0
 14176 ;;      Totals:         0       0       0       0
 14177 ;;Total ram usage:        0 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		_SetPattern
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           	psect	text66
 14187  003C16                     __ptext66:
 14188                           	opt stack 0
 14189  003C16                     i2_ResetPattern:
 14190                           	opt stack 17
 14191                           
 14192                           ;Pattern_PtrnGenerator.c: 79: PatternStepCounter = 0;
 14193                           
 14194                           ;incstack = 0
 14195  003C16  0E00               	movlw	0
 14196  003C18  0100               	movlb	0	; () banked
 14197  003C1A  6FF2               	movwf	_PatternStepCounter& (0+255),b
 14198                           
 14199                           ;Pattern_PtrnGenerator.c: 81: CycleCounter = 0;
 14200  003C1C  0E00               	movlw	0
 14201  003C1E  0100               	movlb	0	; () banked
 14202  003C20  6FE9               	movwf	_CycleCounter& (0+255),b
 14203  003C22  0E00               	movlw	0
 14204  003C24  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
 14205  003C26  0E00               	movlw	0
 14206  003C28  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
 14207  003C2A  0E00               	movlw	0
 14208  003C2C  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
 14209                           
 14210                           ; BSR set to: 0
 14211  003C2E  0012               	return		;funcret
 14212  003C30                     __end_ofi2_ResetPattern:
 14213                           	opt stack 0
 14214                           tosu	equ	0xFFF
 14215                           tosh	equ	0xFFE
 14216                           tosl	equ	0xFFD
 14217                           pclatu	equ	0xFFB
 14218                           pclath	equ	0xFFA
 14219                           tblptru	equ	0xFF8
 14220                           tblptrh	equ	0xFF7
 14221                           tblptrl	equ	0xFF6
 14222                           tablat	equ	0xFF5
 14223                           prodh	equ	0xFF4
 14224                           prodl	equ	0xFF3
 14225                           intcon	equ	0xFF2
 14226                           postinc0	equ	0xFEE
 14227                           fsr0h	equ	0xFEA
 14228                           fsr0l	equ	0xFE9
 14229                           wreg	equ	0xFE8
 14230                           indf1	equ	0xFE7
 14231                           postinc1	equ	0xFE6
 14232                           postdec1	equ	0xFE5
 14233                           fsr1h	equ	0xFE2
 14234                           fsr1l	equ	0xFE1
 14235                           indf2	equ	0xFDF
 14236                           postinc2	equ	0xFDE
 14237                           postdec2	equ	0xFDD
 14238                           plusw2	equ	0xFDB
 14239                           fsr2h	equ	0xFDA
 14240                           fsr2l	equ	0xFD9
 14241                           status	equ	0xFD8
 14242                           
 14243 ;; *************** function _SetListenFocus *****************
 14244 ;; Defined at:
 14245 ;;		line 249 in file "Pattern_ControlService.c"
 14246 ;; Parameters:    Size  Location     Type
 14247 ;;  listFocus       1    wreg     unsigned char 
 14248 ;; Auto vars:     Size  Location     Type
 14249 ;;  listFocus       1    8[COMRAM] unsigned char 
 14250 ;; Return value:  Size  Location     Type
 14251 ;;                  1    wreg      void 
 14252 ;; Registers used:
 14253 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14254 ;; Tracked objects:
 14255 ;;		On entry : 0/0
 14256 ;;		On exit  : 0/0
 14257 ;;		Unchanged: 0/0
 14258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14259 ;;      Params:         0       0       0       0
 14260 ;;      Locals:         1       0       0       0
 14261 ;;      Temps:          0       0       0       0
 14262 ;;      Totals:         1       0       0       0
 14263 ;;Total ram usage:        1 bytes
 14264 ;; Hardware stack levels used:    1
 14265 ;; Hardware stack levels required when called:    1
 14266 ;; This function calls:
 14267 ;;		i2___awdiv
 14268 ;; This function is called by:
 14269 ;;		_ProcessReceive
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           	psect	text67
 14274  003B36                     __ptext67:
 14275                           	opt stack 0
 14276  003B36                     _SetListenFocus:
 14277                           	opt stack 17
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;incstack = 0
 14281                           ;SetListenFocus@listFocus stored from wreg
 14282  003B36  6E09               	movwf	SetListenFocus@listFocus,c
 14283                           
 14284                           ;Pattern_ControlService.c: 250: PatternConfigs[2] = listFocus*76/255;
 14285  003B38  5009               	movf	SetListenFocus@listFocus,w,c
 14286  003B3A  0D4C               	mullw	76
 14287  003B3C  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14288  003B40  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14289  003B44  0E00               	movlw	0
 14290  003B46  6E04               	movwf	i2___awdiv@divisor+1,c
 14291  003B48  6803               	setf	i2___awdiv@divisor,c
 14292  003B4A  ECB7  F019         	call	i2___awdiv	;wreg free
 14293  003B4E  5001               	movf	?i2___awdiv,w,c
 14294  003B50  0100               	movlb	0	; () banked
 14295  003B52  6FF9               	movwf	(_PatternConfigs+2)& (0+255),b
 14296                           
 14297                           ; BSR set to: 0
 14298  003B54  0012               	return		;funcret
 14299  003B56                     __end_of_SetListenFocus:
 14300                           	opt stack 0
 14301                           tosu	equ	0xFFF
 14302                           tosh	equ	0xFFE
 14303                           tosl	equ	0xFFD
 14304                           pclatu	equ	0xFFB
 14305                           pclath	equ	0xFFA
 14306                           tblptru	equ	0xFF8
 14307                           tblptrh	equ	0xFF7
 14308                           tblptrl	equ	0xFF6
 14309                           tablat	equ	0xFF5
 14310                           prodh	equ	0xFF4
 14311                           prodl	equ	0xFF3
 14312                           intcon	equ	0xFF2
 14313                           postinc0	equ	0xFEE
 14314                           fsr0h	equ	0xFEA
 14315                           fsr0l	equ	0xFE9
 14316                           wreg	equ	0xFE8
 14317                           indf1	equ	0xFE7
 14318                           postinc1	equ	0xFE6
 14319                           postdec1	equ	0xFE5
 14320                           fsr1h	equ	0xFE2
 14321                           fsr1l	equ	0xFE1
 14322                           indf2	equ	0xFDF
 14323                           postinc2	equ	0xFDE
 14324                           postdec2	equ	0xFDD
 14325                           plusw2	equ	0xFDB
 14326                           fsr2h	equ	0xFDA
 14327                           fsr2l	equ	0xFD9
 14328                           status	equ	0xFD8
 14329                           
 14330 ;; *************** function _SetBrightness *****************
 14331 ;; Defined at:
 14332 ;;		line 243 in file "Pattern_ControlService.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  brightness      1    wreg     unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  brightness      1   10[COMRAM] unsigned char 
 14337 ;;  newBrightnes    2    8[COMRAM] unsigned int 
 14338 ;; Return value:  Size  Location     Type
 14339 ;;                  1    wreg      void 
 14340 ;; Registers used:
 14341 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14342 ;; Tracked objects:
 14343 ;;		On entry : 0/0
 14344 ;;		On exit  : 0/0
 14345 ;;		Unchanged: 0/0
 14346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14347 ;;      Params:         0       0       0       0
 14348 ;;      Locals:         3       0       0       0
 14349 ;;      Temps:          0       0       0       0
 14350 ;;      Totals:         3       0       0       0
 14351 ;;Total ram usage:        3 bytes
 14352 ;; Hardware stack levels used:    1
 14353 ;; Hardware stack levels required when called:    1
 14354 ;; This function calls:
 14355 ;;		i2___awdiv
 14356 ;; This function is called by:
 14357 ;;		_ProcessReceive
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           	psect	text68
 14362  003ACE                     __ptext68:
 14363                           	opt stack 0
 14364  003ACE                     _SetBrightness:
 14365                           	opt stack 17
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;incstack = 0
 14369                           ;SetBrightness@brightness stored from wreg
 14370  003ACE  6E0B               	movwf	SetBrightness@brightness,c
 14371                           
 14372                           ;Pattern_ControlService.c: 244: uint16_t newBrightness = brightness*MaxBrightness/255;
 14373  003AD0  500B               	movf	SetBrightness@brightness,w,c
 14374  003AD2  0255               	mulwf	_MaxBrightness,c
 14375  003AD4  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14376  003AD8  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14377  003ADC  0E00               	movlw	0
 14378  003ADE  6E04               	movwf	i2___awdiv@divisor+1,c
 14379  003AE0  6803               	setf	i2___awdiv@divisor,c
 14380  003AE2  ECB7  F019         	call	i2___awdiv	;wreg free
 14381  003AE6  C001  F009         	movff	?i2___awdiv,SetBrightness@newBrightness
 14382  003AEA  C002  F00A         	movff	?i2___awdiv+1,SetBrightness@newBrightness+1
 14383                           
 14384                           ;Pattern_ControlService.c: 245: PatternConfigs[1] = newBrightness;
 14385  003AEE  C009  F0F8         	movff	SetBrightness@newBrightness,_PatternConfigs+1
 14386  003AF2  0012               	return		;funcret
 14387  003AF4                     __end_of_SetBrightness:
 14388                           	opt stack 0
 14389                           tosu	equ	0xFFF
 14390                           tosh	equ	0xFFE
 14391                           tosl	equ	0xFFD
 14392                           pclatu	equ	0xFFB
 14393                           pclath	equ	0xFFA
 14394                           tblptru	equ	0xFF8
 14395                           tblptrh	equ	0xFF7
 14396                           tblptrl	equ	0xFF6
 14397                           tablat	equ	0xFF5
 14398                           prodh	equ	0xFF4
 14399                           prodl	equ	0xFF3
 14400                           intcon	equ	0xFF2
 14401                           postinc0	equ	0xFEE
 14402                           fsr0h	equ	0xFEA
 14403                           fsr0l	equ	0xFE9
 14404                           wreg	equ	0xFE8
 14405                           indf1	equ	0xFE7
 14406                           postinc1	equ	0xFE6
 14407                           postdec1	equ	0xFE5
 14408                           fsr1h	equ	0xFE2
 14409                           fsr1l	equ	0xFE1
 14410                           indf2	equ	0xFDF
 14411                           postinc2	equ	0xFDE
 14412                           postdec2	equ	0xFDD
 14413                           plusw2	equ	0xFDB
 14414                           fsr2h	equ	0xFDA
 14415                           fsr2l	equ	0xFD9
 14416                           status	equ	0xFD8
 14417                           
 14418 ;; *************** function i2___awdiv *****************
 14419 ;; Defined at:
 14420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  dividend        2    0[COMRAM] int 
 14423 ;;  divisor         2    2[COMRAM] int 
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;  __awdiv         2    6[COMRAM] int 
 14426 ;;  __awdiv         1    5[COMRAM] unsigned char 
 14427 ;;  __awdiv         1    4[COMRAM] unsigned char 
 14428 ;; Return value:  Size  Location     Type
 14429 ;;                  2    0[COMRAM] int 
 14430 ;; Registers used:
 14431 ;;		wreg, status,2, status,0
 14432 ;; Tracked objects:
 14433 ;;		On entry : 0/0
 14434 ;;		On exit  : 0/0
 14435 ;;		Unchanged: 0/0
 14436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14437 ;;      Params:         4       0       0       0
 14438 ;;      Locals:         4       0       0       0
 14439 ;;      Temps:          0       0       0       0
 14440 ;;      Totals:         8       0       0       0
 14441 ;;Total ram usage:        8 bytes
 14442 ;; Hardware stack levels used:    1
 14443 ;; This function calls:
 14444 ;;		Nothing
 14445 ;; This function is called by:
 14446 ;;		_SetBrightness
 14447 ;;		_SetListenFocus
 14448 ;; This function uses a non-reentrant model
 14449 ;;
 14450                           
 14451                           	psect	text69
 14452  00336E                     __ptext69:
 14453                           	opt stack 0
 14454  00336E                     i2___awdiv:
 14455                           	opt stack 17
 14456                           
 14457                           ;incstack = 0
 14458  00336E  0E00               	movlw	0
 14459  003370  6E06               	movwf	i2___awdiv@sign,c
 14460  003372  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14461  003374  D006               	goto	i2l3811
 14462  003376  6C03               	negf	i2___awdiv@divisor,c
 14463  003378  1E04               	comf	i2___awdiv@divisor+1,f,c
 14464  00337A  B0D8               	btfsc	status,0,c
 14465  00337C  2A04               	incf	i2___awdiv@divisor+1,f,c
 14466  00337E  0E01               	movlw	1
 14467  003380  6E06               	movwf	i2___awdiv@sign,c
 14468  003382                     i2l3811:
 14469  003382  AE02               	btfss	i2___awdiv@dividend+1,7,c
 14470  003384  D006               	goto	i2l3817
 14471  003386  6C01               	negf	i2___awdiv@dividend,c
 14472  003388  1E02               	comf	i2___awdiv@dividend+1,f,c
 14473  00338A  B0D8               	btfsc	status,0,c
 14474  00338C  2A02               	incf	i2___awdiv@dividend+1,f,c
 14475  00338E  0E01               	movlw	1
 14476  003390  1A06               	xorwf	i2___awdiv@sign,f,c
 14477  003392                     i2l3817:
 14478  003392  0E00               	movlw	0
 14479  003394  6E08               	movwf	i2___awdiv@quotient+1,c
 14480  003396  0E00               	movlw	0
 14481  003398  6E07               	movwf	i2___awdiv@quotient,c
 14482  00339A  5003               	movf	i2___awdiv@divisor,w,c
 14483  00339C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 14484  00339E  B4D8               	btfsc	status,2,c
 14485  0033A0  D01C               	goto	i2l3839
 14486  0033A2  0E01               	movlw	1
 14487  0033A4  6E05               	movwf	i2___awdiv@counter,c
 14488  0033A6  D004               	goto	i2l3825
 14489  0033A8                     i2l3823:
 14490  0033A8  90D8               	bcf	status,0,c
 14491  0033AA  3603               	rlcf	i2___awdiv@divisor,f,c
 14492  0033AC  3604               	rlcf	i2___awdiv@divisor+1,f,c
 14493  0033AE  2A05               	incf	i2___awdiv@counter,f,c
 14494  0033B0                     i2l3825:
 14495  0033B0  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14496  0033B2  D7FA               	goto	i2l3823
 14497  0033B4                     i2l3827:
 14498  0033B4  90D8               	bcf	status,0,c
 14499  0033B6  3607               	rlcf	i2___awdiv@quotient,f,c
 14500  0033B8  3608               	rlcf	i2___awdiv@quotient+1,f,c
 14501  0033BA  5003               	movf	i2___awdiv@divisor,w,c
 14502  0033BC  5C01               	subwf	i2___awdiv@dividend,w,c
 14503  0033BE  5004               	movf	i2___awdiv@divisor+1,w,c
 14504  0033C0  5802               	subwfb	i2___awdiv@dividend+1,w,c
 14505  0033C2  A0D8               	btfss	status,0,c
 14506  0033C4  D005               	goto	i2l3835
 14507  0033C6  5003               	movf	i2___awdiv@divisor,w,c
 14508  0033C8  5E01               	subwf	i2___awdiv@dividend,f,c
 14509  0033CA  5004               	movf	i2___awdiv@divisor+1,w,c
 14510  0033CC  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 14511  0033CE  8007               	bsf	i2___awdiv@quotient,0,c
 14512  0033D0                     i2l3835:
 14513  0033D0  90D8               	bcf	status,0,c
 14514  0033D2  3204               	rrcf	i2___awdiv@divisor+1,f,c
 14515  0033D4  3203               	rrcf	i2___awdiv@divisor,f,c
 14516  0033D6  2E05               	decfsz	i2___awdiv@counter,f,c
 14517  0033D8  D7ED               	goto	i2l3827
 14518  0033DA                     i2l3839:
 14519  0033DA  5006               	movf	i2___awdiv@sign,w,c
 14520  0033DC  B4D8               	btfsc	status,2,c
 14521  0033DE  D004               	goto	i2l3843
 14522  0033E0  6C07               	negf	i2___awdiv@quotient,c
 14523  0033E2  1E08               	comf	i2___awdiv@quotient+1,f,c
 14524  0033E4  B0D8               	btfsc	status,0,c
 14525  0033E6  2A08               	incf	i2___awdiv@quotient+1,f,c
 14526  0033E8                     i2l3843:
 14527  0033E8  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 14528  0033EC  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14529  0033F0  0012               	return	
 14530  0033F2                     __end_ofi2___awdiv:
 14531                           	opt stack 0
 14532                           tosu	equ	0xFFF
 14533                           tosh	equ	0xFFE
 14534                           tosl	equ	0xFFD
 14535                           pclatu	equ	0xFFB
 14536                           pclath	equ	0xFFA
 14537                           tblptru	equ	0xFF8
 14538                           tblptrh	equ	0xFF7
 14539                           tblptrl	equ	0xFF6
 14540                           tablat	equ	0xFF5
 14541                           prodh	equ	0xFF4
 14542                           prodl	equ	0xFF3
 14543                           intcon	equ	0xFF2
 14544                           postinc0	equ	0xFEE
 14545                           fsr0h	equ	0xFEA
 14546                           fsr0l	equ	0xFE9
 14547                           wreg	equ	0xFE8
 14548                           indf1	equ	0xFE7
 14549                           postinc1	equ	0xFE6
 14550                           postdec1	equ	0xFE5
 14551                           fsr1h	equ	0xFE2
 14552                           fsr1l	equ	0xFE1
 14553                           indf2	equ	0xFDF
 14554                           postinc2	equ	0xFDE
 14555                           postdec2	equ	0xFDD
 14556                           plusw2	equ	0xFDB
 14557                           fsr2h	equ	0xFDA
 14558                           fsr2l	equ	0xFD9
 14559                           status	equ	0xFD8
 14560                           
 14561 ;; *************** function _CAN_ErrorResponse *****************
 14562 ;; Defined at:
 14563 ;;		line 77 in file "CAN_RX_HW.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;		None
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;		None
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  1    wreg      void 
 14570 ;; Registers used:
 14571 ;;		None
 14572 ;; Tracked objects:
 14573 ;;		On entry : 0/0
 14574 ;;		On exit  : 0/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14577 ;;      Params:         0       0       0       0
 14578 ;;      Locals:         0       0       0       0
 14579 ;;      Temps:          0       0       0       0
 14580 ;;      Totals:         0       0       0       0
 14581 ;;Total ram usage:        0 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		_ISR
 14587 ;; This function uses a non-reentrant model
 14588 ;;
 14589                           
 14590                           	psect	text70
 14591  003CD4                     __ptext70:
 14592                           	opt stack 0
 14593  003CD4                     _CAN_ErrorResponse:
 14594                           	opt stack 20
 14595                           
 14596                           ;incstack = 0
 14597  003CD4  0012               	return		;funcret
 14598  003CD6                     __end_of_CAN_ErrorResponse:
 14599                           	opt stack 0
 14600                           tosu	equ	0xFFF
 14601                           tosh	equ	0xFFE
 14602                           tosl	equ	0xFFD
 14603                           pclatu	equ	0xFFB
 14604                           pclath	equ	0xFFA
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           intcon	equ	0xFF2
 14612                           postinc0	equ	0xFEE
 14613                           fsr0h	equ	0xFEA
 14614                           fsr0l	equ	0xFE9
 14615                           wreg	equ	0xFE8
 14616                           indf1	equ	0xFE7
 14617                           postinc1	equ	0xFE6
 14618                           postdec1	equ	0xFE5
 14619                           fsr1h	equ	0xFE2
 14620                           fsr1l	equ	0xFE1
 14621                           indf2	equ	0xFDF
 14622                           postinc2	equ	0xFDE
 14623                           postdec2	equ	0xFDD
 14624                           plusw2	equ	0xFDB
 14625                           fsr2h	equ	0xFDA
 14626                           fsr2l	equ	0xFD9
 14627                           status	equ	0xFD8
 14628                           
 14629 ;; *************** function _CAN_BusErrorResponse *****************
 14630 ;; Defined at:
 14631 ;;		line 82 in file "CAN_RX_HW.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;		None
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;		None
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  1    wreg      void 
 14638 ;; Registers used:
 14639 ;;		None
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14645 ;;      Params:         0       0       0       0
 14646 ;;      Locals:         0       0       0       0
 14647 ;;      Temps:          0       0       0       0
 14648 ;;      Totals:         0       0       0       0
 14649 ;;Total ram usage:        0 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; This function calls:
 14652 ;;		Nothing
 14653 ;; This function is called by:
 14654 ;;		_ISR
 14655 ;; This function uses a non-reentrant model
 14656 ;;
 14657                           
 14658                           	psect	text71
 14659  003CD6                     __ptext71:
 14660                           	opt stack 0
 14661  003CD6                     _CAN_BusErrorResponse:
 14662                           	opt stack 20
 14663                           
 14664                           ;incstack = 0
 14665  003CD6  0012               	return		;funcret
 14666  003CD8                     __end_of_CAN_BusErrorResponse:
 14667                           	opt stack 0
 14668                           tosu	equ	0xFFF
 14669                           tosh	equ	0xFFE
 14670                           tosl	equ	0xFFD
 14671                           pclatu	equ	0xFFB
 14672                           pclath	equ	0xFFA
 14673                           tblptru	equ	0xFF8
 14674                           tblptrh	equ	0xFF7
 14675                           tblptrl	equ	0xFF6
 14676                           tablat	equ	0xFF5
 14677                           prodh	equ	0xFF4
 14678                           prodl	equ	0xFF3
 14679                           intcon	equ	0xFF2
 14680                           postinc0	equ	0xFEE
 14681                           fsr0h	equ	0xFEA
 14682                           fsr0l	equ	0xFE9
 14683                           wreg	equ	0xFE8
 14684                           indf1	equ	0xFE7
 14685                           postinc1	equ	0xFE6
 14686                           postdec1	equ	0xFE5
 14687                           fsr1h	equ	0xFE2
 14688                           fsr1l	equ	0xFE1
 14689                           indf2	equ	0xFDF
 14690                           postinc2	equ	0xFDE
 14691                           postdec2	equ	0xFDD
 14692                           plusw2	equ	0xFDB
 14693                           fsr2h	equ	0xFDA
 14694                           fsr2l	equ	0xFD9
 14695                           status	equ	0xFD8
 14696                           tosu	equ	0xFFF
 14697                           tosh	equ	0xFFE
 14698                           tosl	equ	0xFFD
 14699                           pclatu	equ	0xFFB
 14700                           pclath	equ	0xFFA
 14701                           tblptru	equ	0xFF8
 14702                           tblptrh	equ	0xFF7
 14703                           tblptrl	equ	0xFF6
 14704                           tablat	equ	0xFF5
 14705                           prodh	equ	0xFF4
 14706                           prodl	equ	0xFF3
 14707                           intcon	equ	0xFF2
 14708                           postinc0	equ	0xFEE
 14709                           fsr0h	equ	0xFEA
 14710                           fsr0l	equ	0xFE9
 14711                           wreg	equ	0xFE8
 14712                           indf1	equ	0xFE7
 14713                           postinc1	equ	0xFE6
 14714                           postdec1	equ	0xFE5
 14715                           fsr1h	equ	0xFE2
 14716                           fsr1l	equ	0xFE1
 14717                           indf2	equ	0xFDF
 14718                           postinc2	equ	0xFDE
 14719                           postdec2	equ	0xFDD
 14720                           plusw2	equ	0xFDB
 14721                           fsr2h	equ	0xFDA
 14722                           fsr2l	equ	0xFD9
 14723                           status	equ	0xFD8
 14724                           
 14725                           	psect	text72
 14726  000000                     __ptext72:
 14727                           	opt stack 0
 14728                           tosu	equ	0xFFF
 14729                           tosh	equ	0xFFE
 14730                           tosl	equ	0xFFD
 14731                           pclatu	equ	0xFFB
 14732                           pclath	equ	0xFFA
 14733                           tblptru	equ	0xFF8
 14734                           tblptrh	equ	0xFF7
 14735                           tblptrl	equ	0xFF6
 14736                           tablat	equ	0xFF5
 14737                           prodh	equ	0xFF4
 14738                           prodl	equ	0xFF3
 14739                           intcon	equ	0xFF2
 14740                           postinc0	equ	0xFEE
 14741                           fsr0h	equ	0xFEA
 14742                           fsr0l	equ	0xFE9
 14743                           wreg	equ	0xFE8
 14744                           indf1	equ	0xFE7
 14745                           postinc1	equ	0xFE6
 14746                           postdec1	equ	0xFE5
 14747                           fsr1h	equ	0xFE2
 14748                           fsr1l	equ	0xFE1
 14749                           indf2	equ	0xFDF
 14750                           postinc2	equ	0xFDE
 14751                           postdec2	equ	0xFDD
 14752                           plusw2	equ	0xFDB
 14753                           fsr2h	equ	0xFDA
 14754                           fsr2l	equ	0xFD9
 14755                           status	equ	0xFD8
 14756                           
 14757                           	psect	rparam
 14758  0000                     tosu	equ	0xFFF
 14759                           tosh	equ	0xFFE
 14760                           tosl	equ	0xFFD
 14761                           pclatu	equ	0xFFB
 14762                           pclath	equ	0xFFA
 14763                           tblptru	equ	0xFF8
 14764                           tblptrh	equ	0xFF7
 14765                           tblptrl	equ	0xFF6
 14766                           tablat	equ	0xFF5
 14767                           prodh	equ	0xFF4
 14768                           prodl	equ	0xFF3
 14769                           intcon	equ	0xFF2
 14770                           postinc0	equ	0xFEE
 14771                           fsr0h	equ	0xFEA
 14772                           fsr0l	equ	0xFE9
 14773                           wreg	equ	0xFE8
 14774                           indf1	equ	0xFE7
 14775                           postinc1	equ	0xFE6
 14776                           postdec1	equ	0xFE5
 14777                           fsr1h	equ	0xFE2
 14778                           fsr1l	equ	0xFE1
 14779                           indf2	equ	0xFDF
 14780                           postinc2	equ	0xFDE
 14781                           postdec2	equ	0xFDD
 14782                           plusw2	equ	0xFDB
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787                           	psect	temp
 14788  000056                     btemp:
 14789                           	opt stack 0
 14790  000056                     	ds	1
 14791  0000                     int$flags	set	btemp
 14792                           tosu	equ	0xFFF
 14793                           tosh	equ	0xFFE
 14794                           tosl	equ	0xFFD
 14795                           pclatu	equ	0xFFB
 14796                           pclath	equ	0xFFA
 14797                           tblptru	equ	0xFF8
 14798                           tblptrh	equ	0xFF7
 14799                           tblptrl	equ	0xFF6
 14800                           tablat	equ	0xFF5
 14801                           prodh	equ	0xFF4
 14802                           prodl	equ	0xFF3
 14803                           intcon	equ	0xFF2
 14804                           postinc0	equ	0xFEE
 14805                           fsr0h	equ	0xFEA
 14806                           fsr0l	equ	0xFE9
 14807                           wreg	equ	0xFE8
 14808                           indf1	equ	0xFE7
 14809                           postinc1	equ	0xFE6
 14810                           postdec1	equ	0xFE5
 14811                           fsr1h	equ	0xFE2
 14812                           fsr1l	equ	0xFE1
 14813                           indf2	equ	0xFDF
 14814                           postinc2	equ	0xFDE
 14815                           postdec2	equ	0xFDD
 14816                           plusw2	equ	0xFDB
 14817                           fsr2h	equ	0xFDA
 14818                           fsr2l	equ	0xFD9
 14819                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    93
    Data        10
    BSS         579
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      85
    BANK0           160    110     155
    BANK1           256      0     196
    BANK2           256      0       0

Pointer List with Targets:

    HueTest@15710	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    HueTest@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    BrokenPinwheel@15776	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    BrokenPinwheel@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    DoubleFadedLoop@15751	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    DoubleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    MirroredQuadrants@15794	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    MirroredQuadrants@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFocusBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFadedLoop@15741	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SingleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    CenterBreathe@15728	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    CenterBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@15718	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SetupPattern@listeningFocusPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    ListeningFocus	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SetupPattern@patternIDPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    PatternID	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SingleFocusBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFocusBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    SingleFocusBreathe@focus	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    MirroredQuadrants@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    MirroredQuadrants@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    BrokenPinwheel@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    BrokenPinwheel@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    CenterBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    CenterBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    FullPulseHold@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    FullPulseHold@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    DotStar_Init@brightnessPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    Brightness	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S105$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S74$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S74$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CAN_RCVResponse->_ProcessReceive
    _ProcessReceive->i2_PostPatternControlService
    i2_PostPatternControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _SetListenFocus->i2___awdiv
    _SetBrightness->i2___awdiv

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_CenterBreathe
    _SingleFocusBreathe->___awdiv
    _SingleFadedLoop->___awdiv
    _MirroredQuadrants->___awdiv
    _HueTest->___lwdiv
    _DoubleFadedLoop->___awdiv
    _CenterBreathe->___awdiv
    _BrokenPinwheel->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  175535
                                            109 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0  152154
                                            104 BANK0      5     5      0
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   22564
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   22564
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             91 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3  125549
                                             91 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   16148
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      68
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   98068
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        6     4      2   81824
                                             48 BANK0      6     4      2
                     _BrokenPinwheel
                      _CenterBreathe
                    _DoubleFadedLoop
                      _FullPulseHold
                            _HueTest
                  _MirroredQuadrants
                    _SingleFadedLoop
                 _SingleFocusBreathe
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _SingleFocusBreathe                                  35    25     10   11485
                                              8 BANK0     35    25     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SingleFadedLoop                                     28    18     10   10736
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _MirroredQuadrants                                   28    18     10   11066
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _HueTest                                             14     4     10   11445
                                             19 BANK0     14     4     10
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _FullPulseHold                                       22    12     10     879
                                              0 BANK0     22    12     10
 ---------------------------------------------------------------------------------
 (5) _DoubleFadedLoop                                     29    19     10   11294
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _CenterBreathe                                       40    30     10   11014
                                              8 BANK0     40    30     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _BrokenPinwheel                                      29    19     10   11551
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2172
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        22    20      2   16036
                                             69 BANK0     22    20      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3   11361
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3   11142
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4389
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     766
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3   11089
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3253
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   22985
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0   10986
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0   11280
                                             29 BANK0      4     4      0
                           _CAN_Init
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         4     0      4     196
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3   10941
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5   10549
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2385
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    7638
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _CAN_Init                                             0     0      0       0
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (4) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    3469
                                             37 COMRAM    16    16      0
               _CAN_BusErrorResponse
                  _CAN_ErrorResponse
                    _CAN_RCVResponse
                   _CAN_XmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0    1108
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CAN_XmitResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_RCVResponse                                     0     0      0    2361
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      5     5      0    2361
                                             32 COMRAM     5     5      0
                      _SetBrightness
                     _SetListenFocus
                         _SetPattern
        i2_PostPatternControlService
                          i2___awmod
 ---------------------------------------------------------------------------------
 (13) i2_PostPatternControlService                         3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     967
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     827
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) _SetPattern                                          1     1      0      22
                                              0 COMRAM     1     1      0
                     i2_ResetPattern
 ---------------------------------------------------------------------------------
 (14) i2_ResetPattern                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _SetListenFocus                                      1     1      0     426
                                              8 COMRAM     1     1      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (13) _SetBrightness                                       3     3      0     449
                                              8 COMRAM     3     3      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (14) i2___awdiv                                           8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (11) _CAN_ErrorResponse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_BusErrorResponse                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _CAN_Init
         _InitCanHardware
         _InitPins
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusBreathe
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_InitTimer
         _UpdatePattern
           _BrokenPinwheel
             ___awdiv
             ___awmod
           _CenterBreathe
             ___awdiv
             ___awmod
           _DoubleFadedLoop
             ___awdiv
             ___awmod
           _FullPulseHold
           _HueTest
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _MirroredQuadrants
             ___awdiv
             ___awmod
           _SingleFadedLoop
             ___awdiv
             ___awmod
           _SingleFocusBreathe
             ___awdiv
             ___awmod
           ___awdiv
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusBreathe
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CAN_BusErrorResponse
   _CAN_ErrorResponse
   _CAN_RCVResponse
     _ProcessReceive
       _SetBrightness
         i2___awdiv
       _SetListenFocus
         i2___awdiv
       _SetPattern
         i2_ResetPattern
       i2_PostPatternControlService
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
       i2___awmod
   _CAN_XmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6E      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      55       1       90.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B4       9        0.0%
DATA                 0      0     2F0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Jan 23 03:36:13 2017

                 HSV_to_RGB@HSV_Value 0073                      ??__HW_Timer_Init 0062  
            SingleFocusBreathe@rising 00F5                MirroredQuadrants@15794 0070  
                 UpdatePattern@i_1366 0095                   __HW_Timer_Init@Rate 0060  
                        ___awdiv@sign 0065                   ___wmul@multiplicand 0068  
                     ??_UpdatePattern 0092         DotStar_Init@brightnessPointer 0060  
                      FullPulseHold@i 0075                           __CFG_OSC$HS 000000  
              __size_of_FullPulseHold 018E   RunPatternControlService@ReturnEvent 00BE  
                                 l410 2A18                                   l326 2F6A  
                                 l613 34F4                                   l616 3550  
                                 l491 11A2                                   l811 1DEE  
                                 l483 336C                                   l493 11B4  
                                 l661 25B2                                   l494 11CE  
                                 l495 11E8                                   l496 11FA  
                                 l497 1214                                   l697 1AA2  
               __end_of_ES_Initialize 2D00                                   _GIE 007F97  
                                 _ISR 0008             __end_of_SPI32_EOTResponse 3A0C  
              __end_ofi2_ResetPattern 3C30                          ___awmod@sign 0065  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                ES_EnQueueFIFO@SaveCrit 0074  
             ES_EnQueueFIFO@Event2Add 006E                     ?_ES_PostToService 0077  
        FullPulseHold@ptrnStepCounter 0062                                  ?_ISR 0001  
          i2ES_EnQueueFIFO@pThisQueue 0016             FullPulseHold@cycleCounter 0064  
                        __CFG_WDT$OFF 000000            ES_Timer_Tick_Resp@NewEvent 00D2  
                                l3021 326C                                  l3041 32D8  
                                l3033 32B6                                  l3025 3280  
                                l3017 325C                                  l3105 2FC8  
                                l3121 3018                                  l3027 328C  
                                l4011 3796                                  l3107 2FD4  
                                l3029 3292                                  l3037 32C4  
                                l3061 2DDE                                  l3125 302C  
                                l3117 300A                                  l3109 2FDA  
                                l3301 17BE                                  l3135 358A  
                                l1287 35DA                                  l3207 1012  
                                l4111 2A02                                  l4031 2EF6  
                                l3137 3596                                  l3225 122E  
                                l3321 18EA                                  l3401 0A84  
                                l4041 2F16                                  l4025 2EE4  
                                l4017 2EB8                                  l3147 35CC  
                                l3139 359C                                  l3227 1264  
                                l3307 17C8                                  l3411 0B02  
                                l3251 2A2C                                  l4107 29FA  
                                l4035 2F06                                  l4203 2BA8  
                                l3077 3656                                  l3093 2F94  
                                l3333 1972                                  l3421 0C54  
                                l3261 2AE6                                  l4053 2F38  
                                l4029 2EF2                                  l4061 2F4E  
                                l3351 1A8E                                  l3335 19E6  
                                l3431 0D1A                                  l3423 0C5A  
                                l3271 244E                                  l3255 2A36  
                                l3503 1390                                  l4047 2F28  
                                l3337 19F0                                  l3441 0D98  
                                l3409 0AC4                                  l3281 24C8  
                                l4209 2BFC                                  l3099 2FAA  
                                l3339 1A10                                  l3347 1A7C  
                                l3451 0EEA                                  l3427 0C64  
                                l3283 2522                                  l3267 2444  
                                l3515 1532                                  l3507 14BC  
                                l3531 176E                                  l3371 22C8  
                                l3363 2192                                  l4235 3A50  
                                l4181 2C78                                  l4173 2C30  
                                l3357 1ACC                                  l3277 24B6  
                                l3517 1570                                  l3381 237C  
                                l3541 1B1A                                  l4085 2928  
                                l4237 3A58                                  l4079 39CE  
                                l3631 384C                                  l3711 25BA  
                                l3471 0574                                  l3463 04FA  
                                l3455 03C4                                  l3439 0D5A  
                                l3295 2584                                  l3367 219C  
                                l3703 2136                                  l3623 323A  
                                l4177 2C74                                  l4193 2CFC  
                                l4169 2C26                                  l3473 05B0  
                                l3393 09C4                                  l3289 2538  
                                l3561 1D32                                  l3545 1B24  
                                l3705 217E                                  l4097 296A  
                                l4089 2934                                  l3609 31A8  
                                l3723 26CA                                  l3715 25C4  
                                l3459 03CE                                  l3379 233E  
                                l3563 1D3C                                  l3731 392E  
                                l3619 3234                                  l4189 2CF6  
                                l3397 09CE                                  l3389 23E8  
                                l3565 1D5C                                  l3549 1C3E  
                                l3573 1DC8                                  l3661 1E58  
                                l4197 2B26                                  l3495 0980  
                                l3583 1E18                                  l3559 1CBE  
                                l3671 1EFC                                  l3655 1E48  
                                l3727 3924                                  l4383 330C  
                                l3577 1DDA                                  l3673 1F3E  
                                l3657 1E4E                                  l3737 394E  
                                l4385 331E                                  l4393 3354  
                                l3931 3912                                  l3923 38EA  
                                l3499 1386                                  l3691 210C  
                                l3683 2060                                  l3675 1F7C  
                                l3667 1E78                                  l4387 3330  
                                l3677 1FBA                                  l3669 1EBA  
                                l3917 37B4                                  l4389 3342  
                                l3695 2116                                  l3687 20C4  
                                l3679 1FFC                                  l3953 27C0  
                                l3689 2106                                  l3857 281E  
                                l3963 2804                                  l3867 2896  
                                l3957 27DC                                  l3869 28D4  
                                l3981 3C32                                  l3985 3C3A  
                                STR_1 035E                                  STR_2 0379  
                                STR_3 0391                                  STR_4 03A8  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  u2145 19D0  
                                u2504 31CE                                  u2505 31C6  
                                u3138 2BD2                                  u2435 1D1C  
                                u3139 2BEA                                  _PIE1 000F9D  
                                u2800 37E0                                  u3098 2CD0  
                                u3099 2CEC                                  u2805 37D6  
                                _PEIE 007F96                                  u2778 287E  
                                u1995 0F84                    ??_ES_PostToService 007A  
               __end_of_CenterBreathe 1AFA                      ??_BrokenPinwheel 0072  
                     __end_of_HW_Init 3B16                                  _main 32E2  
                         ?_ES_DeQueue 006C                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0056  
                       main@ErrorType 00CD                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0016                      __end_of_CAN_Init 3CB4  
   __end_of_InitPatternControlService 379A                           ?_SPI32_Init 0001  
                       __CFG_MCLRE$ON 000000                          ___param_bank 000010  
                     __end_of_HueTest 2B24                  __end_of_GetNextFrame 3BE2  
                    FullPulseHold@val 0074               __end_of_InitCanHardware 356C  
                               ??_ISR 0026             CenterBreathe@cycleCounter 006C  
                  ES_Run@HighestPrior 00CC                                 ?_main 0001  
               __end_of_ES_Timer_Init 3C92                       __end_of___awdiv 3036  
                     __end_of___awmod 32E2                       __end_of___lbmod 391E  
                     ___awdiv@divisor 0062                                 _T1CON 000FCD  
                     __end_of___lwdiv 35E4                                 _ERRIE 007D1D  
                               _ERRIF 007D25                                 i2l167 2E74  
                               i2l633 317A                       ___awdiv@counter 0064  
                               _IRXIE 007D1F                                 _IRXIF 007D27  
         ??i2_PostSPI32ControlService 0021                     BrokenPinwheel@val 0083  
                               _PORTA 000F80                                 _PORTB 000F81  
                               _PORTC 000F82                                 _TRISA 000F92  
                               _TRISC 000F94                                 _SSPIE 007CEB  
                               _SSPIF 007CF3              __size_of_SingleFadedLoop 029A  
                          _Brightness 00F0                         __CFG_PWRT$OFF 000000  
                     ?i2_ResetPattern 0001                  _SPI32_TransmitFrames 3A76  
                     HueTest@base_hue 0079                       HueTest@base_sat 007A  
                         ?_HSV_to_RGB 0073                                 _Ready 00DD  
          __size_of_CAN_ErrorResponse 0002         BrokenPinwheel@ptrnStepCounter 006A  
     __end_of_InitSPI32ControlService 39D2                            _FrameIndex 00E5  
                               _putch 3CD2                          HueTest@15710 007B  
                      __CFG_BOREN$OFF 000000                                 pclath 000FFA  
                               tablat 000FF5                      SingleFadedLoop@i 0083  
                    SingleFadedLoop@x 0082                      __end_ofi2___wmul 3ACE  
                               plusw2 000FDB                                 status 000FD8  
                       _FullPulseHold 2426               SPI32_SendFrame@newFrame 0060  
        __end_of_CAN_BusErrorResponse 3CD8                    __size_ofi2___awdiv 0084  
                    ?_SPI32_SendFrame 0060                    __size_ofi2___awmod 0070  
                     __initialization 3472                ES_GetMSBitSet@LoopCntr 0069  
             SetListenFocus@listFocus 0009                          __end_of_main 336E  
                   ES_Timer_Init@Rate 0062                      __end_of_InitPins 3C16  
            __size_of_DoubleFadedLoop 056A                   __end_of_EventQueues 035E  
                              ??_main 00CD            SingleFocusBreathe@base_hue 006E  
          SingleFocusBreathe@base_sat 006F                     ?i2_ES_EnQueueFIFO 000D  
                       __activetblptr 000002            __size_of_SPI32_EOTResponse 003A  
                 __size_of_ES_DeQueue 0128                       _Nybble2MSBitNum 0341  
               ?_SPI32_TransmitFrames 0080      __end_of__HW_Process_Pending_Ints 3C46  
            ProcessReceive@Event2Post 0023                    ??i2_ES_EnQueueFIFO 0012  
            ProcessReceive@LastButton 0054                  __end_of_DotStar_Init 383E  
                __end_of_DotStar_Show 26E2                   __size_of_SPI32_Init 0006  
                              _ADCON1 000FC1                             ??_HW_Init 0060  
                              _CCP1IF 007CF2                                _CANCON 000F6F  
                          _PatternOff 391E                                _CCPR1H 000FBF  
                              _CCPR1L 000FBE                      ___awdiv@dividend 0060  
                              _CIOCON 000F73                            _MyPriority 00E6  
                              ?_putch 0001                      ??_ES_GetMSBitSet 0062  
                          _SetPattern 3C9E                    HueTest@ptrnPointer 0073  
                              i2l3171 3694                                i2l3163 367A  
                              i2l4131 3120                                i2l4141 313C  
                              i2l4125 310C                                i2l3183 36C0  
                              i2l3175 36A8                                i2l3167 3688  
                              i2l3159 366E                                i2l4135 312E  
                              i2l4127 3112                                i2l4223 39F6  
                              i2l3169 3690                                i2l4161 38A6  
                              i2l3179 36B2                                i2l3603 30E6  
                              i2l4147 3160                                i2l4331 2E4C  
                              i2l4149 317E                                i2l4325 2E42  
                              i2l4343 2E60                                i2l4337 2E56  
                              i2l3811 3382                                i2l4349 2E6A  
                              i2l3823 33A8                                i2l3825 33B0  
                              i2l3817 3392                                i2l3843 33E8  
                              i2l3835 33D0                                i2l3827 33B4  
                              i2l3839 33DA                                _INTCON 000FF2  
                              i2l3797 3730                    BrokenPinwheel@fade 0082  
                      ?_FullPulseHold 0060                                _RXB0D0 000F66  
                              _RXB0D1 000F67                                _RXB0D2 000F68  
                   _MirroredQuadrants 1380                                _RXB0IE 007D18  
                              _RXB0IF 007D20                                _ES_Run 2B24  
                              _TXB0IE 007D1A                                _TXB0IF 007D22  
                              _SSPADD 000FC8                                _SSPBUF 000FC9  
                 SingleFocusBreathe@i 008A                   SingleFocusBreathe@x 0088  
           i2_PostSPI32ControlService 3C46                             ??_HueTest 007D  
                  ?_MirroredQuadrants 0068                      ??_ES_EnQueueFIFO 0071  
                      _Timer2PostFunc 0321               _SingleFocusBreathe$1332 007D  
             _SingleFocusBreathe$1333 007F               _SingleFocusBreathe$1334 0081  
             _SingleFocusBreathe$1335 0083         SPI32_TransmitFrames@numFrames 0082  
                       ?_PausePattern 0001                                _Queue0 0048  
                              _Queue1 01B8                        _SysTickCounter 003E  
          BrokenPinwheel@cycleCounter 006C                   __size_of_HSV_to_RGB 0458  
            ??_RunSPI32ControlService 00BE                                ___wmul 3A0C  
     InitSPI32ControlService@Priority 0080                             ??___awdiv 0064  
                           ??___awmod 0064                             ??___lbmod 0061  
                 ??_MirroredQuadrants 0072                      ?_InitCanHardware 0001  
                           ??___lwdiv 0070           __size_of_ES_Timer_InitTimer 0080  
                              clear_0 34B2                                clear_1 34C4  
                              clear_2 34D0                                clear_3 34DC  
                    ___awdiv@quotient 0066                       ___awmod@divisor 0062  
                       ??_ShowPattern 00BB             ES_Timer_InitTimer@NewTime 0060  
           __size_of_CAN_XmitResponse 0006                       ___awmod@counter 0064  
                              _printf 3A42                           ISR@LastTime 003A  
                      i2___awdiv@sign 0006                    _SingleFocusBreathe 1AFA  
                        __pdataCOMRAM 0054                     __end_ofi2___awdiv 33F2  
              ES_InitQueue@pThisQueue 0063                     __end_ofi2___awmod 36CA  
            __size_of_CAN_RCVResponse 000C                          __mediumconst 0000  
                    CAN_RX_HW@ListLoc 0043                           ISR@NextTime 003C  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                      ??_SetListenFocus 0009  
 __end_ofi2_PostPatternControlService 3C72           i2_PostPatternControlService 3C5C  
                           ?_CAN_Init 0001                                putch@c 0001  
        SetupPattern@patternIDPointer 0060                        i2___awmod@sign 0006  
         __size_of_ES_Timer_Tick_Resp 0116                  ES_DeQueue@pThisQueue 0074  
                 ?_SingleFocusBreathe 0068             __end_of_MirroredQuadrants 17AC  
             ES_GetMSBitSet@Val2Check 0060                     ??_SingleFadedLoop 0072  
                     ___lbmod@divisor 0060                            __accesstop 0060  
             __end_of__initialization 34E2                __end_of_Timer2PostFunc 0341  
                     ___lbmod@counter 0062       RunSPI32ControlService@ThisEvent 00BB  
                     __CFG_PBADEN$OFF 000000     __size_of_RunPatternControlService 00C8  
              __size_of_SetBrightness 0026             ?_RunPatternControlService 00BB  
         DoubleFadedLoop@cycleCounter 006C                    FullPulseHold@15718 0068  
               __size_of_GetNextFrame 001A                         ___rparam_used 000001  
               FullPulseHold@base_hue 0066                 FullPulseHold@base_sat 0067  
         ??_InitPatternControlService 007D                           PatternOff@i 0062  
                      ??_PausePattern 0065                           _EventQueues 0358  
         __size_ofi2_ES_PostToService 006A                        __pcstackCOMRAM 0001  
                        __pidataBANK0 3CB4           __size_of_ES_Timer_StopTimer 004E  
                ??_SingleFocusBreathe 0072                         ?_ES_InitQueue 0060  
    __size_of_InitSPI32ControlService 003A               __end_of_Nybble2MSBitNum 0350  
   _PostSPI32ControlService$intlevel0 3BB2                         __end_of_putch 3CD4  
                     _TMR_ActiveFlags 00DF                ??_SPI32_TransmitFrames 0083  
                           ?i2___wmul 0007               ES_GetMSBitSet@ReturnVal 0067  
                       ?_ResetPattern 0001                  _CAN_BusErrorResponse 3CD6  
             __size_of_ProcessReceive 00B2                     ??_DoubleFadedLoop 0072  
                 __end_of_ShowPattern 3B36                            ??_CAN_Init 0060  
                DoubleFadedLoop@15751 0070                         ??_StopPattern 00BB  
                      _TMR_TimerArray 0100                          _GetNextFrame 3BC8  
                         ?_PatternOff 0060              ES_EnQueueFIFO@pThisQueue 0075  
                     ??_FullPulseHold 006A                               ??_putch 0060  
            __HW_Process_Pending_Ints 3C30                            __pbssBANK0 00CE  
                          __pbssBANK1 0100                           ?_SetPattern 0001  
                           ?_InitPins 0001                               ?_ES_Run 0001  
                        ??_ES_DeQueue 0070                          ??_SPI32_Init 0060  
                    DoubleFadedLoop@i 0083                    DoubleFadedLoop@val 0081  
                    DoubleFadedLoop@x 0082              ?_PostSPI32ControlService 007D  
           __size_of_ES_PostToService 0076                        ??_ES_InitQueue 0063  
                             ?___wmul 0066                   BrokenPinwheel@15776 0070  
     __size_of_RunSPI32ControlService 0106                               _CCP1CON 000FBD  
           BrokenPinwheel@ptrnPointer 0068                               _ECANCON 000F77  
                    ??i2_ResetPattern 0001                               ?_printf 0060  
                       _SetBrightness 3ACE        DoubleFadedLoop@ptrnStepCounter 006A  
               __size_of_DotStar_Init 0052                        ??_ResetPattern 0060  
               __end_of_UpdatePattern 218C                 __size_of_DotStar_Show 012E  
                          ??i2___wmul 000B                 ?_CAN_BusErrorResponse 0001  
           _InitPatternControlService 3734                  _DoubleFadedLoop$1262 0079  
                _DoubleFadedLoop$1263 007B                  _DoubleFadedLoop$1265 007D  
                _DoubleFadedLoop$1266 007F                    __end_of_ES_DeQueue 280A  
              i2ES_EnQueueFIFO@pBlock 000D                 ES_Timer_StopTimer@Num 0064  
                        ??_HSV_to_RGB 0075                               _HW_Init 3AF4  
                             _SSPCON1 000FC6                    __end_of_SPI32_Init 3CCA  
          __size_of_MirroredQuadrants 042C                               _SSPSTAT 000FC7  
                  MirroredQuadrants@i 0083                    MirroredQuadrants@x 0081  
 _PostPatternControlService$intlevel0 3B96                     ??_CAN_RCVResponse 0026  
       SingleFocusBreathe@fade_thresh 0085      SPI32_ControlService@CurrentState 00E2  
                          ??_InitPins 0060                       __size_of_ES_Run 00F0  
          SetBrightness@newBrightness 0009                   __end_of_StopPattern 3B90  
                         _PixelFrames 01C4                               _HueTest 2A26  
                       ?_SetupPattern 0060                __size_of_ES_Initialize 00EC  
                             _ListLoc 0046                               __Hparam 0000  
                             __Lparam 0000    i2PostSPI32ControlService@ThisEvent 001E  
    PostSPI32ControlService@ThisEvent 007D      InitSPI32ControlService@ThisEvent 007D  
           i2ES_EnQueueFIFO@Event2Add 000F                          _DotStar_Init 37EC  
                        _DotStar_Show 25B4                    __end_of_HSV_to_RGB 1380  
                             ___awdiv 2F78            ?_PostPatternControlService 007D  
                             ___awmod 3240                               ___lbmod 38DA  
                     __size_of___wmul 0036                               ___lwdiv 356C  
  __size_ofi2_PostSPI32ControlService 0016                          __psmallconst 0300  
                 __size_of_PatternOff 003E                 ES_Timer_InitTimer@Num 0064  
                  _UpdatePattern$1991 0092                    _UpdatePattern$1992 0093  
          i2ES_PostToService@TheEvent 0018                               __pcinit 3472  
                    _CAN_XmitResponse 3CCA                               __ramtop 0300  
                 __size_of_SetPattern 000C                        ?_SetBrightness 0001  
              __size_of_CenterBreathe 034E                           _ShowPattern 3B16  
                             __ptext0 32E2                               __ptext1 3A42  
                             __ptext2 3CD2                               __ptext3 2B24  
                             __ptext4 3C30                               __ptext5 280A  
                             __ptext6 319C                               __ptext7 2EB0  
                             __ptext8 2920                               __ptext9 379A  
            i2ES_EnQueueFIFO@SaveCrit 0015                       __size_of_printf 0034  
                        __size_of_ISR 2EA8                           HSV_to_RGB@b 0097  
                         HSV_to_RGB@g 0095                           HSV_to_RGB@h 008D  
                         HSV_to_RGB@p 00A1                           HSV_to_RGB@q 0099  
                         HSV_to_RGB@r 0093                           HSV_to_RGB@s 009F  
                         HSV_to_RGB@t 009B                           HSV_to_RGB@v 00A3  
                        _FramePointer 00D7               __size_of__HW_Timer_Init 001E  
                    ___awmod@dividend 0060                       ES_Run@ThisEvent 00ED  
                __end_of_PausePattern 3CC4                      CenterBreathe@val 008C  
        ProcessReceive@CurrentPattern 0045                _RunSPI32ControlService 2920  
                      __pintcode_body 2DE2                  end_of_initialization 34E2  
                        _CycleCounter 00E9             __size_ofi2_ES_EnQueueFIFO 00B4  
                       __Lmediumconst 0000                               int_func 2DE2  
                 i2___wmul@multiplier 0007       __end_of_PostSPI32ControlService 3BC8  
        ES_PostToService@WhichService 007C                        ??_SetupPattern 0064  
              __size_of_ES_Timer_Init 000E                    SingleFadedLoop@val 0081  
            FullPulseHold@ptrnPointer 0060                               printf@c 0064  
                             printf@f 0060               _InitSPI32ControlService 3998  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE               __size_of_BrokenPinwheel 0606  
   __end_of_PostPatternControlService 3BAC              __size_of_SPI32_SendFrame 0052  
              ??_CAN_BusErrorResponse 0001             i2SPI32_SendFrame@newFrame 0001  
                     _SingleFadedLoop 218C                         _ES_Initialize 2C14  
                      _ProcessReceive 30EA      __end_of_RunPatternControlService 2F78  
                    ___lbmod@dividend 0061                   CenterBreathe@rising 00F3  
i2PostPatternControlService@ThisEvent 001E     RunPatternControlService@ThisEvent 00BB  
  PostPatternControlService@ThisEvent 007D    InitPatternControlService@ThisEvent 007D  
              SingleFocusBreathe@head 0089                             _TRISBbits 000F93  
                __end_of_ES_EventList 0301                           _StopPattern 3B74  
                __end_of_ES_InitQueue 3998                             i2___awdiv 336E  
                           i2___awmod 365A                  MirroredQuadrants@val 0082  
                      ES_Initialize@i 0083                     __size_of_CAN_Init 000A  
                         ___lbmod@rem 0063                         _CenterBreathe 17AC  
                 _BrokenPinwheel$1290 007D                   _BrokenPinwheel$1291 007F  
                      __end_of_ES_Run 2C14                    i2___awdiv@dividend 0001  
                __end_of_ResetPattern 3BFC                    _CenterBreathe$1232 007B  
                  _CenterBreathe$1233 007D                    _CenterBreathe$1234 007F  
                  _CenterBreathe$1235 0081                    _CenterBreathe$1236 0083  
                  _CenterBreathe$1237 0085                    _CenterBreathe$1238 0087  
                  _CenterBreathe$1239 0089  __size_ofi2_PostPatternControlService 0016  
                    _ES_PostToService 35E4            __end_of_ES_Timer_InitTimer 3472  
                __end_of_ServDescList 0358                       ??_SetBrightness 0009  
                     _DoubleFadedLoop 09BE                        __end_of___wmul 3A42  
                       __pidataCOMRAM 3CD0                     i2_SPI32_SendFrame 388C  
                           _FrameByte 00F6                __end_of_ProcessReceive 319C  
                      ?_ES_Initialize 0081            ??__HW_Process_Pending_Ints 0084  
                  ?i2_SPI32_SendFrame 0001                         _ES_Timer_Init 3C84  
                    i2___wmul@product 000B                        __end_of_printf 3A76  
            __size_of_InitCanHardware 007C            __end_of_ES_Timer_Tick_Resp 2920  
                 start_initialization 3472                    i2___awdiv@quotient 0007  
                         __end_of_ISR 2EB0                     __size_ofi2___wmul 0026  
                        _CurrentFrame 00CE                          _CurrentState 00E4  
                        ??_PatternOff 0062                   ??i2_SPI32_SendFrame 0005  
                          ?i2___awdiv 0001                            ?i2___awmod 0001  
                 FullPulseHold@rising 00F4            DoubleFadedLoop@ptrnPointer 0068  
                        ??_SetPattern 0001                           _CANSTATbits 000F6E  
  __size_of_InitPatternControlService 0066                        ?_CenterBreathe 0068  
                            ??_ES_Run 00C8                             _PatternID 00DB  
                           _TickCount 00E8                             _NumFrames 00E7  
          __end_ofi2_ES_PostToService 3734          SingleFocusBreathe@pulseWidth 0087  
                   __size_of_InitPins 001A             ??_InitSPI32ControlService 007D  
            CenterBreathe@fade_thresh 008B            __end_of_ES_Timer_StopTimer 388C  
                           _NumPixels 0047                   SetPattern@PatternID 0001  
             __size_of_ES_GetMSBitSet 00A4               __end_of_SingleFadedLoop 2426  
                            ??___wmul 006A             __end_ofi2_SPI32_SendFrame 38DA  
                      CenterBreathe@i 008F           __size_of_SingleFocusBreathe 034C  
                      CenterBreathe@x 008E                           __pdataBANK0 00F3  
                _SingleFadedLoop$1250 007D                  _SingleFadedLoop$1251 007F  
                  __end_of_PatternOff 395C               __size_of_ES_EnQueueFIFO 00E2  
                            ??_printf 0062             SPI32_EOTResponse@EOTevent 0021  
               __size_of_PausePattern 0008                        ?_ES_Timer_Init 0062  
                  __end_of_SetPattern 3CAA                       ?_ProcessReceive 0001  
             DoubleFadedLoop@base_hue 006E               DoubleFadedLoop@base_sat 006F  
                     _CAN_RCVResponse 3C92                        __HW_Timer_Init 3B56  
                         __pbssBIGRAM 01C4                  __end_of_SetupPattern 3C84  
                         __pbssCOMRAM 0036      __size_of_PostSPI32ControlService 001C  
       __size_of_SPI32_TransmitFrames 0032                     ??_SPI32_SendFrame 0064  
                       __pcstackBANK0 0060                           _BRGCON1bits 000F70  
                         _BRGCON2bits 000F71                    ES_InitQueue@pBlock 0060  
                         _BRGCON3bits 000F72     RunPatternControlService@testEvent 00C1  
                            ?_HW_Init 0001              _RunPatternControlService 2EB0  
               DoubleFadedLoop@i_1264 0084        SingleFocusBreathe@cycleCounter 006C  
               __end_of_FullPulseHold 25B4              __end_of_CAN_XmitResponse 3CD0  
    SPI32_TransmitFrames@framePointer 0080                      i2_ES_EnQueueFIFO 3036  
                    HSV_to_RGB@region 008F                         __PRIMASK_temp 0040  
                            ?_HueTest 0073               __size_of_SetListenFocus 0020  
             __end_of_DoubleFadedLoop 0F28                      ___lwdiv@dividend 006C  
             SingleFadedLoop@base_hue 006E               SingleFadedLoop@base_sat 006F  
                        _PausePattern 3CBC                             __pintcode 0008  
                      _BrokenPinwheel 03B8                              ?___awdiv 0060  
                            ?___awmod 0060                              ?___lbmod 0060  
          DotStar_Show@patternPointer 00A5           ??_PostPatternControlService 0080  
                            ?___lwdiv 006C     SetupPattern@listeningFocusPointer 0062  
                     ??_ES_Initialize 0083              ES_PostToService@TheEvent 0077  
              __end_of__HW_Timer_Init 3B74                          ?_ShowPattern 0001  
                         __smallconst 0300                 __size_of_ES_InitQueue 003C  
             ?_RunSPI32ControlService 00BB     SingleFocusBreathe@ptrnStepCounter 006A  
                            _CAN_Init 3CAA                      ___lwdiv@quotient 0070  
                         ??i2___awdiv 0005                       ??_CenterBreathe 0072  
                         ??i2___awmod 0005                        __size_of_putch 0002  
        CenterBreathe@ptrnStepCounter 006A                 __size_of_ResetPattern 001A  
                ES_Initialize@NewRate 0081                     ??_InitCanHardware 0060  
           ES_GetMSBitSet@Nybble2Test 0068                    _PatternStepCounter 00F2  
                  CenterBreathe@15728 0070                        ___wmul@product 006A  
              __size_of_UpdatePattern 0346                              i2u305_40 38D0  
                            i2u305_45 38C6                __end_of_BrokenPinwheel 09BE  
                            _RXB0EIDH 000F63                              _RXB0EIDL 000F64  
             SetBrightness@brightness 000B                              _RXB0SIDH 000F61  
                            _RXB0SIDL 000F62                              _RXF0EIDH 000F02  
                            _RXF0EIDL 000F03                              _RXF0SIDH 000F00  
                        _ES_EventList 0301                              _RXF0SIDL 000F01  
                    ?_SingleFadedLoop 0068            __size_ofi2_SPI32_SendFrame 004E  
                            _RXM0EIDH 000F1A                              _RXM0EIDL 000F1B  
    MirroredQuadrants@ptrnStepCounter 006A               __end_of_CAN_RCVResponse 3C9E  
                        _ES_InitQueue 395C                              _RXM0SIDH 000F18  
                            _RXM0SIDL 000F19                       ??_ES_Timer_Init 0064  
                      _ListeningFocus 00D9                 SingleFocusBreathe@val 0086  
      i2ES_PostToService@WhichService 001D                       ?__HW_Timer_Init 0060  
                   ___wmul@multiplier 0066        __end_of_RunSPI32ControlService 2A26  
                            i2___wmul 3AA8                              HueTest@i 0080  
                        _ResetPattern 3BE2                     i2___awdiv@divisor 0003  
                  ES_DeQueue@SaveCrit 0072                  ES_EnQueueFIFO@pBlock 006C  
                   i2___awdiv@counter 0005              __end_of_ES_PostToService 365A  
      SingleFadedLoop@ptrnStepCounter 006A                          ?_StopPattern 0001  
       SingleFocusBreathe@ptrnPointer 0068               __size_ofi2_ResetPattern 001A  
                     BrokenPinwheel@i 0084          ?i2_PostPatternControlService 001E  
           _PostPatternControlService 3B90                       BrokenPinwheel@x 0081  
                           copy_data0 3486                      __size_of_HW_Init 0022  
                      _BitNum2SetMask 0301                        _PatternConfigs 00F7  
                        _ServDescList 0350                    i2___awmod@dividend 0001  
                            _InitPins 3BFC                          _PixelPattern 0120  
                 CAN_RX_HW@Brightness 0042                      ?_DoubleFadedLoop 0068  
                    __size_of_HueTest 00FE                              __Hrparam 0000  
                      _ES_GetMSBitSet 319C                       ?_BrokenPinwheel 0068  
                  _FullPulseHold$1218 0072                              __Lrparam 0000  
   RunSPI32ControlService@ReturnEvent 00C5                  SingleFadedLoop@15741 0070  
                    __size_of___awdiv 00BE                   _ProcessReceive$1196 0021  
                    __size_of___awmod 00A2                      __size_of___lbmod 0044  
               __size_of_SetupPattern 0012                 i2___wmul@multiplicand 0009  
                      _ES_EnQueueFIFO 2D00                      __size_of___lwdiv 0078  
          ?i2_PostSPI32ControlService 001E               _PostSPI32ControlService 3BAC  
                     HSV_to_RGB@fpart 0091                         _UpdatePattern 1E46  
       __size_of_CAN_BusErrorResponse 0002                    _ES_Timer_InitTimer 33F2  
                     ___lwdiv@divisor 006E                       ___lwdiv@counter 0072  
              __end_of_BitNum2SetMask 0321                              __ptext10 3BC8  
                            __ptext11 3B74                              __ptext20 2426  
                            __ptext12 3BE2                              __ptext21 09BE  
                            __ptext13 391E                              __ptext30 0F28  
                            __ptext22 17AC                              __ptext14 3B16  
                            __ptext31 356C                              __ptext23 03B8  
                            __ptext15 1E46                              __ptext40 3AF4  
                            __ptext32 3CBC                              __ptext24 2F78  
                            __ptext16 1AFA                              __ptext41 3C72  
                            __ptext33 383E                              __ptext25 33F2  
                            __ptext17 218C                              __ptext50 3C84  
                            __ptext42 35E4                              __ptext34 26E2  
                            __ptext26 25B4                              __ptext18 1380  
                            __ptext51 3B56                              __ptext43 2D00  
                            __ptext35 38DA                              __ptext27 3A76  
                            __ptext19 2A26                              __ptext60 3C5C  
                            __ptext52 395C                              __ptext44 3A0C  
                            __ptext36 2C14                              __ptext28 3B90  
                            __ptext61 36CA                              __ptext45 3240  
                            __ptext37 3734                              __ptext29 3BAC  
                            __ptext70 3CD4                              __ptext62 3036  
                            __ptext54 39D2                              __ptext46 37EC  
                            __ptext38 3998                              __ptext71 3CD6  
                            __ptext63 3AA8                              __ptext55 388C  
                            __ptext47 3CAA                              __ptext39 3CC4  
                            __ptext72 0000                              __ptext64 365A  
                            __ptext56 3C46                              __ptext48 3BFC  
                            __ptext65 3C9E                              __ptext57 3CCA  
                            __ptext49 34F0                              __ptext66 3C16  
                            __ptext58 3C92                              __ptext67 3B36  
                            __ptext59 30EA                              __ptext68 3ACE  
                            __ptext69 336E                         ?_GetNextFrame 0060  
   ES_Timer_Tick_Resp@NeedsProcessing 00D5             MirroredQuadrants@base_hue 006E  
           MirroredQuadrants@base_sat 006F                        UpdatePattern@i 0094  
                 ?_ES_Timer_InitTimer 0060         ??i2_PostPatternControlService 0021  
                     _HSV_to_RGB$1990 009D                         __size_of_main 008C  
                  _ES_Timer_Tick_Resp 280A                _MirroredQuadrants$1302 007D  
              _MirroredQuadrants$1303 007F                        _SetListenFocus 3B36  
              __end_of_ES_GetMSBitSet 3240                          _SetupPattern 3C72  
                 ?_ES_Timer_Tick_Resp 0001                   CAN_RX_HW@MyPriority 0044  
                 HueTest@cycleCounter 0077                __end_of_ES_EnQueueFIFO 2DE2  
                    ??_ProcessReceive 0021                              int$flags 0056  
                     _SPI32_SendFrame 379A                      ?_CAN_RCVResponse 0001  
                ??_ES_Timer_InitTimer 0062        SPI32_ControlService@MyPriority 00E3  
                       _MaxBrightness 0055                     ES_DeQueue@NumLeft 0073  
               __end_of_SetBrightness 3AF4                    i2_ES_PostToService 36CA  
            __end_ofi2_ES_EnQueueFIFO 30EA                    _ES_Timer_StopTimer 383E  
                      ?_UpdatePattern 0090            ??_RunPatternControlService 00BE  
                       DotStar_Show@i 00BA                           _RXB0CONbits 000F60  
                   i2___awmod@divisor 0003                     i2___awmod@counter 0005  
                __size_of_ShowPattern 0020     __end_ofi2_PostSPI32ControlService 3C5C  
        MirroredQuadrants@ptrnPointer 0068                   ?i2_ES_PostToService 0018  
                      ??_GetNextFrame 0064         MirroredQuadrants@cycleCounter 006C  
                ??_ES_Timer_Tick_Resp 0080                   ?_ES_Timer_StopTimer 0001  
                   _CAN_ErrorResponse 3CD4                              intlevel2 0000  
              __end_of_SetListenFocus 3B56                    ?_CAN_ErrorResponse 0001  
              BrokenPinwheel@base_hue 006E                BrokenPinwheel@base_sat 006F  
                   ?_CAN_XmitResponse 0001                            _ES_DeQueue 26E2  
   __size_of__HW_Process_Pending_Ints 0016                         _TransmitFrame 0036  
              HueTest@ptrnStepCounter 0075             ?__HW_Process_Pending_Ints 0001  
                         _TXB0CONbits 000F40                       ?_ES_GetMSBitSet 0060  
        __end_of_SPI32_TransmitFrames 3AA8                    ??_CAN_XmitResponse 0001  
          SingleFadedLoop@ptrnPointer 0068                   ??_CAN_ErrorResponse 0001  
                ??i2_ES_PostToService 001B            __end_of_SingleFocusBreathe 1E46  
                          _SPI32_Init 3CC4                         ?_DotStar_Init 0060  
                       ?_DotStar_Show 00A5                  ??_ES_Timer_StopTimer 0060  
 ES_Timer_Tick_Resp@NextTimer2Process 00E1                              printf@ap 0062  
                     ?_ES_EnQueueFIFO 006C             ??_PostSPI32ControlService 0080  
               CenterBreathe@base_hue 006E                      ES_DeQueue@pBlock 006C  
               CenterBreathe@base_sat 006F                       _InitCanHardware 34F0  
   SPI32_TransmitFrames@transmitEvent 0083     InitPatternControlService@Priority 0080  
         SingleFadedLoop@cycleCounter 006C                     _SPI32_EOTResponse 39D2  
                          _HSV_to_RGB 0F28             __end_of_CAN_ErrorResponse 3CD6  
                      i2_ResetPattern 3C16                ES_DeQueue@pReturnEvent 006E  
               ES_InitQueue@BlockSize 0062                    ?_SPI32_EOTResponse 0001  
                __size_of_StopPattern 001C              ?_InitSPI32ControlService 0001  
                     ?_SetListenFocus 0001              CenterBreathe@ptrnPointer 0068  
                 ??_SPI32_EOTResponse 0021               __end_of_SPI32_SendFrame 37EC  
          ?_InitPatternControlService 0001               CenterBreathe@pulseWidth 008D  
  __size_of_PostPatternControlService 001C                        ??_DotStar_Init 0062  
             SingleFocusBreathe@focus 0070                        ??_DotStar_Show 00A7  
